public class org.sat4j.tools.TextOutputTracing extends java.lang.Object implements org.sat4j.specs.SearchListener
{
    private static final long serialVersionUID;
    private final java.util.Map mapping;

    public void <init>(java.util.Map)
    {
        org.sat4j.tools.TextOutputTracing r0;
        java.util.Map r1;

        r0 := @this: org.sat4j.tools.TextOutputTracing;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.sat4j.tools.TextOutputTracing: java.util.Map mapping> = r1;

        return;
    }

    private java.lang.String node(int)
    {
        java.lang.Integer $r4;
        org.sat4j.tools.TextOutputTracing r0;
        java.util.Map $r1, $r3;
        int i0, $i1;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r2, $r8, $r10, $r11;

        r0 := @this: org.sat4j.tools.TextOutputTracing;

        i0 := @parameter0: int;

        $r1 = r0.<org.sat4j.tools.TextOutputTracing: java.util.Map mapping>;

        if $r1 == null goto label2;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        $r3 = r0.<org.sat4j.tools.TextOutputTracing: java.util.Map mapping>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        if $r5 == null goto label2;

        if i0 <= 0 goto label1;

        $r11 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        return $r11;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r8 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label2:
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r2;
    }

    public void assuming(int)
    {
        java.io.PrintStream $r1;
        org.sat4j.tools.TextOutputTracing r3;
        int i0;
        java.lang.StringBuilder $r0, $r2, $r5;
        java.lang.String $r4, $r6;

        r3 := @this: org.sat4j.tools.TextOutputTracing;

        i0 := @parameter0: int;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("assuming ");

        $r4 = specialinvoke r3.<org.sat4j.tools.TextOutputTracing: java.lang.String node(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6);

        return;
    }

    public void propagating(int, org.sat4j.specs.IConstr)
    {
        java.io.PrintStream $r1;
        org.sat4j.specs.IConstr r7;
        org.sat4j.tools.TextOutputTracing r3;
        int i0;
        java.lang.StringBuilder $r0, $r2, $r5;
        java.lang.String $r4, $r6;

        r3 := @this: org.sat4j.tools.TextOutputTracing;

        i0 := @parameter0: int;

        r7 := @parameter1: org.sat4j.specs.IConstr;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("propagating ");

        $r4 = specialinvoke r3.<org.sat4j.tools.TextOutputTracing: java.lang.String node(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6);

        return;
    }

    public void backtracking(int)
    {
        java.io.PrintStream $r1;
        org.sat4j.tools.TextOutputTracing r3;
        int i0;
        java.lang.StringBuilder $r0, $r2, $r5;
        java.lang.String $r4, $r6;

        r3 := @this: org.sat4j.tools.TextOutputTracing;

        i0 := @parameter0: int;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("backtracking ");

        $r4 = specialinvoke r3.<org.sat4j.tools.TextOutputTracing: java.lang.String node(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6);

        return;
    }

    public void adding(int)
    {
        java.io.PrintStream $r1;
        org.sat4j.tools.TextOutputTracing r3;
        int i0;
        java.lang.StringBuilder $r0, $r2, $r5;
        java.lang.String $r4, $r6;

        r3 := @this: org.sat4j.tools.TextOutputTracing;

        i0 := @parameter0: int;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("adding ");

        $r4 = specialinvoke r3.<org.sat4j.tools.TextOutputTracing: java.lang.String node(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6);

        return;
    }

    public void learn(org.sat4j.specs.IConstr)
    {
        java.io.PrintStream $r1;
        org.sat4j.tools.TextOutputTracing r6;
        org.sat4j.specs.IConstr r3;
        java.lang.StringBuilder $r0, $r2, $r4;
        java.lang.String $r5;

        r6 := @this: org.sat4j.tools.TextOutputTracing;

        r3 := @parameter0: org.sat4j.specs.IConstr;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("learning ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return;
    }

    public void delete(int[])
    {
        org.sat4j.tools.TextOutputTracing r0;
        int[] r1;

        r0 := @this: org.sat4j.tools.TextOutputTracing;

        r1 := @parameter0: int[];

        return;
    }

    public void conflictFound(org.sat4j.specs.IConstr, int, int)
    {
        java.io.PrintStream $r0;
        org.sat4j.tools.TextOutputTracing r1;
        org.sat4j.specs.IConstr r2;
        int i0, i1;

        r1 := @this: org.sat4j.tools.TextOutputTracing;

        r2 := @parameter0: org.sat4j.specs.IConstr;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("conflict ");

        return;
    }

    public void conflictFound(int)
    {
        java.io.PrintStream $r0;
        int i0;
        org.sat4j.tools.TextOutputTracing r1;

        r1 := @this: org.sat4j.tools.TextOutputTracing;

        i0 := @parameter0: int;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("conflict during propagation");

        return;
    }

    public void solutionFound(int[])
    {
        java.io.PrintStream $r0;
        org.sat4j.tools.TextOutputTracing r1;
        int[] r2;

        r1 := @this: org.sat4j.tools.TextOutputTracing;

        r2 := @parameter0: int[];

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("solution found ");

        return;
    }

    public void beginLoop()
    {
        org.sat4j.tools.TextOutputTracing r0;

        r0 := @this: org.sat4j.tools.TextOutputTracing;

        return;
    }

    public void start()
    {
        org.sat4j.tools.TextOutputTracing r0;

        r0 := @this: org.sat4j.tools.TextOutputTracing;

        return;
    }

    public void end(org.sat4j.specs.Lbool)
    {
        org.sat4j.tools.TextOutputTracing r0;
        org.sat4j.specs.Lbool r1;

        r0 := @this: org.sat4j.tools.TextOutputTracing;

        r1 := @parameter0: org.sat4j.specs.Lbool;

        return;
    }

    public void restarting()
    {
        java.io.PrintStream $r0;
        org.sat4j.tools.TextOutputTracing r1;

        r1 := @this: org.sat4j.tools.TextOutputTracing;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("restarting ");

        return;
    }

    public void backjump(int)
    {
        java.io.PrintStream $r1;
        org.sat4j.tools.TextOutputTracing r5;
        int i0;
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String $r4;

        r5 := @this: org.sat4j.tools.TextOutputTracing;

        i0 := @parameter0: int;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("backjumping to decision level ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r4);

        return;
    }

    public void init(org.sat4j.specs.ISolverService)
    {
        org.sat4j.tools.TextOutputTracing r0;
        org.sat4j.specs.ISolverService r1;

        r0 := @this: org.sat4j.tools.TextOutputTracing;

        r1 := @parameter0: org.sat4j.specs.ISolverService;

        return;
    }

    public void cleaning()
    {
        java.io.PrintStream $r0;
        org.sat4j.tools.TextOutputTracing r1;

        r1 := @this: org.sat4j.tools.TextOutputTracing;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("cleaning");

        return;
    }

    public static void <clinit>()
    {
        <org.sat4j.tools.TextOutputTracing: long serialVersionUID> = 1L;

        return;
    }
}
