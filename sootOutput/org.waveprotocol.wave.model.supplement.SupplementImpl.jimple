public final class org.waveprotocol.wave.model.supplement.SupplementImpl extends java.lang.Object implements org.waveprotocol.wave.model.supplement.Supplement
{
    private final org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive;

    public void <init>(org.waveprotocol.wave.model.supplement.PrimitiveSupplement)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.PrimitiveSupplement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive> = r1;

        return;
    }

    public org.waveprotocol.wave.model.supplement.ThreadState getThreadState(org.waveprotocol.wave.model.id.WaveletId, java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.String r2;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r3;
        org.waveprotocol.wave.model.supplement.ThreadState $r4;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: org.waveprotocol.wave.model.supplement.ThreadState getThreadState(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>(r1, r2);

        return $r4;
    }

    public void setThreadState(org.waveprotocol.wave.model.id.WaveletId, java.lang.String, org.waveprotocol.wave.model.supplement.ThreadState)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.String r2;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r4;
        org.waveprotocol.wave.model.supplement.ThreadState r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.waveprotocol.wave.model.supplement.ThreadState;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void setThreadState(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,org.waveprotocol.wave.model.supplement.ThreadState)>(r1, r2, r3);

        return;
    }

    private boolean isUnread(int, int)
    {
        int i0, i1, $i3;
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = (int) -1;

        if i0 == $i3 goto label1;

        if i0 >= i1 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isBlipUnread(org.waveprotocol.wave.model.id.WaveletId, java.lang.String, int)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r3, $r4;
        int $i0, i1, $i2;
        java.lang.String r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $i0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getLastReadBlipVersion(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>(r1, r2);

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: boolean isUnread(int,int)>($i0, i1);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $i2 = interfaceinvoke $r4.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: boolean isUnread(int,int)>($i2, i1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isParticipantsUnread(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r2, $r3;
        int $i0, i1, $i2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i1 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $i0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getLastReadParticipantsVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: boolean isUnread(int,int)>($i0, i1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $i2 = interfaceinvoke $r3.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: boolean isUnread(int,int)>($i2, i1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean haveParticipantsEverBeenRead(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r2, $r3;
        int $i0, $i1, $i3, $i5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $i0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getLastReadParticipantsVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $i1 = interfaceinvoke $r3.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $i5 = (int) -1;

        if $i1 == $i5 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isTagsUnread(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r2, $r3;
        int $i0, i1, $i2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i1 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $i0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getLastReadTagsVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: boolean isUnread(int,int)>($i0, i1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $i2 = interfaceinvoke $r3.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: boolean isUnread(int,int)>($i2, i1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void markBlipAsRead(org.waveprotocol.wave.model.id.WaveletId, java.lang.String, int)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        int i0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.String r2;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: boolean isBlipUnread(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,int)>(r1, r2, i0);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void setLastReadBlipVersion(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,int)>(r1, r2, i0);

     label1:
        return;
    }

    public void markParticipantsAsRead(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        int i0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: boolean isParticipantsUnread(org.waveprotocol.wave.model.id.WaveletId,int)>(r1, i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void setLastReadParticipantsVersion(org.waveprotocol.wave.model.id.WaveletId,int)>(r1, i0);

     label1:
        return;
    }

    public void markTagsAsRead(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        int i0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: boolean isTagsUnread(org.waveprotocol.wave.model.id.WaveletId,int)>(r1, i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void setLastReadTagsVersion(org.waveprotocol.wave.model.id.WaveletId,int)>(r1, i0);

     label1:
        return;
    }

    public void markWaveletAsRead(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        int i0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void setLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId,int)>(r1, i0);

        return;
    }

    public void markAsUnread()
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void clearReadState()>();

        return;
    }

    public java.util.Set getFolders()
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        java.util.Set $r3;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r1;
        java.lang.Iterable $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: java.lang.Iterable getFolders()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.supplement.SupplementImpl: java.util.Set toSet(java.lang.Iterable)>($r2);

        return $r3;
    }

    public void moveToFolder(int)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        int i0;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void removeAllFolders()>();

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void addFolder(int)>(i0);

        return;
    }

    public void removeAllFolders()
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void removeAllFolders()>();

        return;
    }

    public boolean isArchived(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        int $i0, i1;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i1 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $i0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getArchiveWaveletVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        if $i0 < i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void follow()
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void follow()>();

        return;
    }

    public void unfollow()
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void clearArchiveState()>();

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void unfollow()>();

        return;
    }

    public boolean isFollowed(boolean)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        java.lang.Boolean $r2;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r1;
        boolean z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: java.lang.Boolean getFollowed()>();

        if $r2 == null goto label1;

        $z1 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        goto label2;

     label1:
        $z1 = z0;

     label2:
        return $z1;
    }

    public void clearArchive()
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void clearArchiveState()>();

        return;
    }

    public void archive(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        int i0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void archiveAtVersion(org.waveprotocol.wave.model.id.WaveletId,int)>(r1, i0);

        return;
    }

    public void setSeenVersion(org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.version.HashedVersion r2;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void setSeenVersion(org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.version.HashedVersion)>(r1, r2);

        return;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getSeenVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.version.HashedVersion $r3;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: org.waveprotocol.wave.model.version.HashedVersion getSeenVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $r3;
    }

    public int getNotifiedVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        int $i0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $i0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getNotifiedVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $i0;
    }

    public java.util.Set getSeenWavelets()
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        java.util.Set $r2;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: java.util.Set getSeenWavelets()>();

        return $r2;
    }

    public boolean hasSeenVersion()
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        java.util.Set $r2;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: java.util.Set getSeenWavelets()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static java.util.Set toSet(java.lang.Iterable)
    {
        java.util.HashSet $r0;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.lang.Iterable r1;
        boolean $z0;

        r1 := @parameter0: java.lang.Iterable;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r0;
    }

    public org.waveprotocol.wave.model.supplement.WantedEvaluationSet getWantedEvaluationSet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.WantedEvaluation r8;
        java.util.Iterator $r4;
        org.waveprotocol.wave.model.supplement.SimpleWantedEvaluationSet $r5;
        org.waveprotocol.wave.model.supplement.SupplementImpl r1;
        java.util.Set $r3;
        org.waveprotocol.wave.model.id.WaveletId r6, $r9;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r2;
        java.util.HashSet $r0;
        java.lang.Object $r7;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r6 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: java.util.Set getWantedEvaluations()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.waveprotocol.wave.model.supplement.WantedEvaluation) $r7;

        $r9 = interfaceinvoke r8.<org.waveprotocol.wave.model.supplement.WantedEvaluation: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $z1 = virtualinvoke r6.<org.waveprotocol.wave.model.id.WaveletId: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label2;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r8);

     label2:
        goto label1;

     label3:
        $r5 = new org.waveprotocol.wave.model.supplement.SimpleWantedEvaluationSet;

        specialinvoke $r5.<org.waveprotocol.wave.model.supplement.SimpleWantedEvaluationSet: void <init>(org.waveprotocol.wave.model.id.WaveletId,java.util.Collection)>(r6, $r0);

        return $r5;
    }

    public void addWantedEvaluation(org.waveprotocol.wave.model.supplement.WantedEvaluation)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.supplement.WantedEvaluation r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.WantedEvaluation;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void addWantedEvaluation(org.waveprotocol.wave.model.supplement.WantedEvaluation)>(r1);

        return;
    }

    public boolean hasPendingNotification()
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        java.lang.Boolean $r2;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $z0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: boolean getPendingNotification()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        if $r2 != null goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z1;
    }

    public boolean hasPendingNotification(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        long $l0, $l2;
        byte $b3;
        org.waveprotocol.wave.model.version.HashedVersion $r2;
        int $i1, $i4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: boolean hasNotifiedVersion()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: boolean hasPendingNotification()>();

        return $z1;

     label1:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.version.HashedVersion getSeenVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $l0 = virtualinvoke $r2.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: int getNotifiedVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $l2 = (long) $i1;

        $b3 = $l0 cmp $l2;

        $i4 = (int) $b3;

        if $i4 >= 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public void markWaveletAsNotified(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        int i0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void setNotifiedVersion(org.waveprotocol.wave.model.id.WaveletId,int)>(r1, i0);

        return;
    }

    public boolean hasNotifiedVersion()
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        java.util.Set $r2;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: java.util.Set getNotifiedWavelets()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void clearPendingNotification()
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void clearPendingNotification()>();

        return;
    }

    public org.waveprotocol.wave.model.util.ReadableStringMap getGadgetState(java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.util.ReadableStringMap $r3;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: org.waveprotocol.wave.model.util.ReadableStringMap getGadgetState(java.lang.String)>(r1);

        return $r3;
    }

    public void setGadgetState(java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.SupplementImpl r0;
        java.lang.String r1, r2, r3;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement $r4;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.SupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplement primitive>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: void setGadgetState(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return;
    }
}
