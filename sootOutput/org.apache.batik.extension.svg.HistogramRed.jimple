public class org.apache.batik.extension.svg.HistogramRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{
    boolean[] computed;
    int tallied;
    int[] bins;

    public void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        int[] $r2;
        int $i0, $i1, i2;
        boolean[] $r3;
        org.apache.batik.extension.svg.HistogramRed r0;

        r0 := @this: org.apache.batik.extension.svg.HistogramRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.util.Map)>(r1, null);

        r0.<org.apache.batik.extension.svg.HistogramRed: int tallied> = 0;

        $r2 = newarray (int)[256];

        r0.<org.apache.batik.extension.svg.HistogramRed: int[] bins> = $r2;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getNumXTiles()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getNumYTiles()>();

        i2 = $i0 * $i1;

        $r3 = newarray (boolean)[i2];

        r0.<org.apache.batik.extension.svg.HistogramRed: boolean[] computed> = $r3;

        return;
    }

    public void tallyTile(java.awt.image.Raster)
    {
        int[] $r1, $r3, r4;
        java.awt.image.Raster r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21, i22, i23;
        org.apache.batik.extension.svg.HistogramRed r2;

        r2 := @this: org.apache.batik.extension.svg.HistogramRed;

        r0 := @parameter0: java.awt.image.Raster;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i2 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i3 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        r4 = null;

        i16 = $i1;

        goto label4;

     label1:
        $r1 = virtualinvoke r0.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>($i0, i16, $i2, 1, r4);

        r4 = $r1;

        i17 = 0;

        goto label3;

     label2:
        i18 = i17 + 1;

        $i6 = $r1[i17];

        i19 = $i6 * 5;

        i20 = i18 + 1;

        $i7 = $r1[i18];

        $i8 = $i7 * 9;

        i21 = i19 + $i8;

        i22 = i20 + 1;

        $i9 = $r1[i20];

        $i10 = $i9 * 2;

        i23 = i21 + $i10;

        $r3 = r2.<org.apache.batik.extension.svg.HistogramRed: int[] bins>;

        $i11 = i23 >> 4;

        $i12 = $r3[$i11];

        $i13 = $i12 + 1;

        $r3[$i11] = $i13;

        i17 = i22 + 1;

     label3:
        $i5 = 3 * $i2;

        if i17 < $i5 goto label2;

        i16 = i16 + 1;

     label4:
        $i4 = $i1 + $i3;

        if i16 < $i4 goto label1;

        $i14 = r2.<org.apache.batik.extension.svg.HistogramRed: int tallied>;

        $i15 = $i14 + 1;

        r2.<org.apache.batik.extension.svg.HistogramRed: int tallied> = $i15;

        return;
    }

    public int[] getHistogram()
    {
        java.util.Vector $r2;
        int[] $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, i11, i12;
        java.awt.image.Raster $r6;
        boolean $z0;
        boolean[] $r1, $r5, $r7;
        org.apache.batik.extension.svg.HistogramRed r0;
        org.apache.batik.ext.awt.image.rendered.CachableRed r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.batik.extension.svg.HistogramRed;

        $i1 = r0.<org.apache.batik.extension.svg.HistogramRed: int tallied>;

        $r1 = r0.<org.apache.batik.extension.svg.HistogramRed: boolean[] computed>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $r9 = r0.<org.apache.batik.extension.svg.HistogramRed: int[] bins>;

        return $r9;

     label1:
        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>(0);

        r4 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r3;

        $i2 = interfaceinvoke r4.<java.awt.image.RenderedImage: int getMinTileY()>();

        $i3 = interfaceinvoke r4.<java.awt.image.RenderedImage: int getNumXTiles()>();

        $i4 = interfaceinvoke r4.<java.awt.image.RenderedImage: int getMinTileX()>();

        i11 = 0;

        goto label7;

     label2:
        i12 = 0;

        goto label6;

     label3:
        $i7 = i12 + $i4;

        $i6 = i11 * $i3;

        i8 = $i7 + $i6;

        $r5 = r0.<org.apache.batik.extension.svg.HistogramRed: boolean[] computed>;

        $z0 = $r5[i8];

        if $z0 == 0 goto label4;

        goto label5;

     label4:
        $i10 = i12 + $i4;

        $i9 = i11 + $i2;

        $r6 = interfaceinvoke r4.<java.awt.image.RenderedImage: java.awt.image.Raster getTile(int,int)>($i10, $i9);

        virtualinvoke r0.<org.apache.batik.extension.svg.HistogramRed: void tallyTile(java.awt.image.Raster)>($r6);

        $r7 = r0.<org.apache.batik.extension.svg.HistogramRed: boolean[] computed>;

        $r7[i8] = 1;

     label5:
        i12 = i12 + 1;

     label6:
        if i12 < $i3 goto label3;

        i11 = i11 + 1;

     label7:
        $i5 = interfaceinvoke r4.<java.awt.image.RenderedImage: int getNumYTiles()>();

        if i11 < $i5 goto label2;

        $r8 = r0.<org.apache.batik.extension.svg.HistogramRed: int[] bins>;

        return $r8;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        java.awt.image.WritableRaster r1;
        org.apache.batik.extension.svg.HistogramRed r0;

        r0 := @this: org.apache.batik.extension.svg.HistogramRed;

        r1 := @parameter0: java.awt.image.WritableRaster;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void copyToRaster(java.awt.image.WritableRaster)>(r1);

        return r1;
    }

    public java.awt.image.Raster getTile(int, int)
    {
        java.util.Vector $r1;
        int i0, $i1, i2, i3, $i4, i5, $i6, $i7, i8;
        java.awt.image.Raster $r4;
        boolean $z0;
        boolean[] $r5, $r6;
        org.apache.batik.extension.svg.HistogramRed r0;
        org.apache.batik.ext.awt.image.rendered.CachableRed r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.extension.svg.HistogramRed;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getMinTileY()>();

        i2 = i0 - $i1;

        $i4 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getMinTileX()>();

        i5 = i3 - $i4;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        r3 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r2;

        $r4 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.Raster getTile(int,int)>(i3, i0);

        $i6 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getNumXTiles()>();

        $i7 = i2 * $i6;

        i8 = i5 + $i7;

        $r5 = r0.<org.apache.batik.extension.svg.HistogramRed: boolean[] computed>;

        $z0 = $r5[i8];

        if $z0 == 0 goto label1;

        return $r4;

     label1:
        virtualinvoke r0.<org.apache.batik.extension.svg.HistogramRed: void tallyTile(java.awt.image.Raster)>($r4);

        $r6 = r0.<org.apache.batik.extension.svg.HistogramRed: boolean[] computed>;

        $r6[i8] = 1;

        return $r4;
    }
}
