public class org.codehaus.jackson.node.JsonNodeFactory extends java.lang.Object
{
    public static final org.codehaus.jackson.node.JsonNodeFactory instance;

    protected void <init>()
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.codehaus.jackson.node.BooleanNode booleanNode(boolean)
    {
        org.codehaus.jackson.node.BooleanNode $r1;
        org.codehaus.jackson.node.JsonNodeFactory r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = staticinvoke <org.codehaus.jackson.node.BooleanNode: org.codehaus.jackson.node.BooleanNode getTrue()>();

        goto label2;

     label1:
        $r1 = staticinvoke <org.codehaus.jackson.node.BooleanNode: org.codehaus.jackson.node.BooleanNode getFalse()>();

     label2:
        return $r1;
    }

    public org.codehaus.jackson.node.NullNode nullNode()
    {
        org.codehaus.jackson.node.NullNode $r0;
        org.codehaus.jackson.node.JsonNodeFactory r1;

        r1 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $r0 = staticinvoke <org.codehaus.jackson.node.NullNode: org.codehaus.jackson.node.NullNode getInstance()>();

        return $r0;
    }

    public org.codehaus.jackson.node.NumericNode numberNode(byte)
    {
        byte b0;
        org.codehaus.jackson.node.JsonNodeFactory r1;
        int $i1;
        org.codehaus.jackson.node.IntNode $r0;

        r1 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        b0 := @parameter0: byte;

        $i1 = (int) b0;

        $r0 = staticinvoke <org.codehaus.jackson.node.IntNode: org.codehaus.jackson.node.IntNode valueOf(int)>($i1);

        return $r0;
    }

    public org.codehaus.jackson.node.ValueNode numberNode(java.lang.Byte)
    {
        org.codehaus.jackson.node.JsonNodeFactory r1;
        org.codehaus.jackson.node.ValueNode $r2;
        int $i0;
        java.lang.Byte r0;

        r1 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        r0 := @parameter0: java.lang.Byte;

        if r0 != null goto label1;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NullNode nullNode()>();

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Byte: int intValue()>();

        $r2 = staticinvoke <org.codehaus.jackson.node.IntNode: org.codehaus.jackson.node.IntNode valueOf(int)>($i0);

     label2:
        return $r2;
    }

    public org.codehaus.jackson.node.NumericNode numberNode(short)
    {
        short s0;
        org.codehaus.jackson.node.JsonNodeFactory r1;
        int $i1;
        org.codehaus.jackson.node.IntNode $r0;

        r1 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        s0 := @parameter0: short;

        $i1 = (int) s0;

        $r0 = staticinvoke <org.codehaus.jackson.node.IntNode: org.codehaus.jackson.node.IntNode valueOf(int)>($i1);

        return $r0;
    }

    public org.codehaus.jackson.node.ValueNode numberNode(java.lang.Short)
    {
        short $s0;
        org.codehaus.jackson.node.JsonNodeFactory r1;
        java.lang.Short r0;
        org.codehaus.jackson.node.ValueNode $r2;
        int $i1;

        r1 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        r0 := @parameter0: java.lang.Short;

        if r0 != null goto label1;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NullNode nullNode()>();

        goto label2;

     label1:
        $s0 = virtualinvoke r0.<java.lang.Short: short shortValue()>();

        $i1 = (int) $s0;

        $r2 = staticinvoke <org.codehaus.jackson.node.IntNode: org.codehaus.jackson.node.IntNode valueOf(int)>($i1);

     label2:
        return $r2;
    }

    public org.codehaus.jackson.node.NumericNode numberNode(int)
    {
        int i0;
        org.codehaus.jackson.node.IntNode $r0;
        org.codehaus.jackson.node.JsonNodeFactory r1;

        r1 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.codehaus.jackson.node.IntNode: org.codehaus.jackson.node.IntNode valueOf(int)>(i0);

        return $r0;
    }

    public org.codehaus.jackson.node.ValueNode numberNode(java.lang.Integer)
    {
        org.codehaus.jackson.node.JsonNodeFactory r1;
        org.codehaus.jackson.node.ValueNode $r2;
        int $i0;
        java.lang.Integer r0;

        r1 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        r0 := @parameter0: java.lang.Integer;

        if r0 != null goto label1;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NullNode nullNode()>();

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $r2 = staticinvoke <org.codehaus.jackson.node.IntNode: org.codehaus.jackson.node.IntNode valueOf(int)>($i0);

     label2:
        return $r2;
    }

    public org.codehaus.jackson.node.NumericNode numberNode(long)
    {
        long l0;
        org.codehaus.jackson.node.LongNode $r0;
        org.codehaus.jackson.node.JsonNodeFactory r1;

        r1 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        l0 := @parameter0: long;

        $r0 = staticinvoke <org.codehaus.jackson.node.LongNode: org.codehaus.jackson.node.LongNode valueOf(long)>(l0);

        return $r0;
    }

    public org.codehaus.jackson.node.ValueNode numberNode(java.lang.Long)
    {
        java.lang.Long r0;
        org.codehaus.jackson.node.JsonNodeFactory r1;
        org.codehaus.jackson.node.ValueNode $r2;
        long $l0;

        r1 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        r0 := @parameter0: java.lang.Long;

        if r0 != null goto label1;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NullNode nullNode()>();

        goto label2;

     label1:
        $l0 = virtualinvoke r0.<java.lang.Long: long longValue()>();

        $r2 = staticinvoke <org.codehaus.jackson.node.LongNode: org.codehaus.jackson.node.LongNode valueOf(long)>($l0);

     label2:
        return $r2;
    }

    public org.codehaus.jackson.node.NumericNode numberNode(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        org.codehaus.jackson.node.BigIntegerNode $r1;
        org.codehaus.jackson.node.JsonNodeFactory r2;

        r2 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        r0 := @parameter0: java.math.BigInteger;

        $r1 = staticinvoke <org.codehaus.jackson.node.BigIntegerNode: org.codehaus.jackson.node.BigIntegerNode valueOf(java.math.BigInteger)>(r0);

        return $r1;
    }

    public org.codehaus.jackson.node.NumericNode numberNode(float)
    {
        org.codehaus.jackson.node.DoubleNode $r0;
        org.codehaus.jackson.node.JsonNodeFactory r1;
        float f0;
        double $d0;

        r1 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $r0 = staticinvoke <org.codehaus.jackson.node.DoubleNode: org.codehaus.jackson.node.DoubleNode valueOf(double)>($d0);

        return $r0;
    }

    public org.codehaus.jackson.node.ValueNode numberNode(java.lang.Float)
    {
        java.lang.Float r0;
        org.codehaus.jackson.node.JsonNodeFactory r1;
        org.codehaus.jackson.node.ValueNode $r2;
        double $d0;

        r1 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        r0 := @parameter0: java.lang.Float;

        if r0 != null goto label1;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NullNode nullNode()>();

        goto label2;

     label1:
        $d0 = virtualinvoke r0.<java.lang.Float: double doubleValue()>();

        $r2 = staticinvoke <org.codehaus.jackson.node.DoubleNode: org.codehaus.jackson.node.DoubleNode valueOf(double)>($d0);

     label2:
        return $r2;
    }

    public org.codehaus.jackson.node.NumericNode numberNode(double)
    {
        org.codehaus.jackson.node.DoubleNode $r0;
        org.codehaus.jackson.node.JsonNodeFactory r1;
        double d0;

        r1 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        d0 := @parameter0: double;

        $r0 = staticinvoke <org.codehaus.jackson.node.DoubleNode: org.codehaus.jackson.node.DoubleNode valueOf(double)>(d0);

        return $r0;
    }

    public org.codehaus.jackson.node.ValueNode numberNode(java.lang.Double)
    {
        java.lang.Double r0;
        org.codehaus.jackson.node.JsonNodeFactory r1;
        org.codehaus.jackson.node.ValueNode $r2;
        double $d0;

        r1 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        r0 := @parameter0: java.lang.Double;

        if r0 != null goto label1;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NullNode nullNode()>();

        goto label2;

     label1:
        $d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();

        $r2 = staticinvoke <org.codehaus.jackson.node.DoubleNode: org.codehaus.jackson.node.DoubleNode valueOf(double)>($d0);

     label2:
        return $r2;
    }

    public org.codehaus.jackson.node.NumericNode numberNode(java.math.BigDecimal)
    {
        java.math.BigDecimal r0;
        org.codehaus.jackson.node.DecimalNode $r1;
        org.codehaus.jackson.node.JsonNodeFactory r2;

        r2 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        r0 := @parameter0: java.math.BigDecimal;

        $r1 = staticinvoke <org.codehaus.jackson.node.DecimalNode: org.codehaus.jackson.node.DecimalNode valueOf(java.math.BigDecimal)>(r0);

        return $r1;
    }

    public org.codehaus.jackson.node.TextNode textNode(java.lang.String)
    {
        org.codehaus.jackson.node.TextNode $r1;
        java.lang.String r0;
        org.codehaus.jackson.node.JsonNodeFactory r2;

        r2 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.codehaus.jackson.node.TextNode: org.codehaus.jackson.node.TextNode valueOf(java.lang.String)>(r0);

        return $r1;
    }

    public org.codehaus.jackson.node.BinaryNode binaryNode(byte[])
    {
        org.codehaus.jackson.node.BinaryNode $r1;
        byte[] r0;
        org.codehaus.jackson.node.JsonNodeFactory r2;

        r2 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.codehaus.jackson.node.BinaryNode: org.codehaus.jackson.node.BinaryNode valueOf(byte[])>(r0);

        return $r1;
    }

    public org.codehaus.jackson.node.BinaryNode binaryNode(byte[], int, int)
    {
        byte[] r0;
        org.codehaus.jackson.node.JsonNodeFactory r2;
        int i0, i1;
        org.codehaus.jackson.node.BinaryNode $r1;

        r2 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <org.codehaus.jackson.node.BinaryNode: org.codehaus.jackson.node.BinaryNode valueOf(byte[],int,int)>(r0, i0, i1);

        return $r1;
    }

    public org.codehaus.jackson.node.ArrayNode arrayNode()
    {
        org.codehaus.jackson.node.ArrayNode $r0;
        org.codehaus.jackson.node.JsonNodeFactory r1;

        r1 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $r0 = new org.codehaus.jackson.node.ArrayNode;

        specialinvoke $r0.<org.codehaus.jackson.node.ArrayNode: void <init>(org.codehaus.jackson.node.JsonNodeFactory)>(r1);

        return $r0;
    }

    public org.codehaus.jackson.node.ObjectNode objectNode()
    {
        org.codehaus.jackson.node.JsonNodeFactory r1;
        org.codehaus.jackson.node.ObjectNode $r0;

        r1 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $r0 = new org.codehaus.jackson.node.ObjectNode;

        specialinvoke $r0.<org.codehaus.jackson.node.ObjectNode: void <init>(org.codehaus.jackson.node.JsonNodeFactory)>(r1);

        return $r0;
    }

    public org.codehaus.jackson.node.POJONode POJONode(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.node.POJONode $r0;
        org.codehaus.jackson.node.JsonNodeFactory r2;

        r2 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        r1 := @parameter0: java.lang.Object;

        $r0 = new org.codehaus.jackson.node.POJONode;

        specialinvoke $r0.<org.codehaus.jackson.node.POJONode: void <init>(java.lang.Object)>(r1);

        return $r0;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.node.JsonNodeFactory $r0;

        $r0 = new org.codehaus.jackson.node.JsonNodeFactory;

        specialinvoke $r0.<org.codehaus.jackson.node.JsonNodeFactory: void <init>()>();

        <org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.JsonNodeFactory instance> = $r0;

        return;
    }
}
