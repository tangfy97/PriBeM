public abstract class com.hp.hpl.jena.sparql.algebra.table.TableBase extends java.lang.Object implements com.hp.hpl.jena.sparql.algebra.Table
{

    protected void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.table.TableBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void close()
    {
        com.hp.hpl.jena.sparql.algebra.table.TableBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableBase;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.table.TableBase: void closeTable()>();

        return;
    }

    protected abstract void closeTable();

    public final com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.engine.ref.Evaluator)
    {
        com.hp.hpl.jena.sparql.algebra.table.TableBase r0;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.ref.Evaluator;

        return r0;
    }

    public void addBinding(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r2;
        com.hp.hpl.jena.sparql.algebra.table.TableBase r1;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.table.TableBase;

        r2 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Table.add");

        throw $r0;
    }

    public boolean contains(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        java.lang.Throwable $r4;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r2, r3;
        com.hp.hpl.jena.sparql.algebra.table.TableBase r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableBase;

        r3 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.table.TableBase: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(null);

     label1:
        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.engine.QueryIterator: com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingUtils: boolean equals(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r3, $r2);

        if $z1 == 0 goto label3;

     label2:
        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        return 1;

     label3:
        goto label1;

     label4:
        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        return 0;

     label5:
        $r4 := @caughtexception;

     label6:
        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public abstract int size();

    public abstract boolean isEmpty();

    public com.hp.hpl.jena.query.ResultSet toResultSet()
    {
        java.util.List $r3;
        com.hp.hpl.jena.query.ResultSetRewindable $r4;
        com.hp.hpl.jena.sparql.algebra.table.TableBase r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r1;
        com.hp.hpl.jena.sparql.engine.ResultSetStream $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableBase;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.table.TableBase: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(null);

        $r2 = new com.hp.hpl.jena.sparql.engine.ResultSetStream;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.table.TableBase: java.util.List getVarNames()>();

        specialinvoke $r2.<com.hp.hpl.jena.sparql.engine.ResultSetStream: void <init>(java.util.List,com.hp.hpl.jena.rdf.model.Model,java.util.Iterator)>($r3, null, $r1);

        $r4 = staticinvoke <com.hp.hpl.jena.query.ResultSetFactory: com.hp.hpl.jena.query.ResultSetRewindable makeRewindable(com.hp.hpl.jena.query.ResultSet)>($r2);

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        return $r4;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.sparql.algebra.table.TableBase r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableBase;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.table.TableWriter: java.lang.String asSSE(com.hp.hpl.jena.sparql.algebra.Table)>(r0);

        return $r1;
    }

    public int hashCode()
    {
        java.lang.Throwable $r3;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r2;
        int $i0, i1;
        com.hp.hpl.jena.sparql.algebra.table.TableBase r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableBase;

        i1 = 0;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.table.TableBase: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(null);

     label1:
        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.engine.QueryIterator: com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()>();

        $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        i1 = i1 ^ $i0;

        goto label1;

     label2:
        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        return i1;

     label3:
        $r3 := @caughtexception;

     label4:
        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Throwable $r7;
        com.hp.hpl.jena.sparql.algebra.table.TableBase r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r5, $r6;
        int $i0, $i1;
        java.lang.Object r1;
        com.hp.hpl.jena.sparql.algebra.Table r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableBase;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.hp.hpl.jena.sparql.algebra.Table;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.hp.hpl.jena.sparql.algebra.Table) r1;

        $i0 = interfaceinvoke r2.<com.hp.hpl.jena.sparql.algebra.Table: int size()>();

        $i1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.table.TableBase: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.table.TableBase: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(null);

        $r4 = interfaceinvoke r2.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(null);

     label4:
        $z1 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()>();

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.QueryIterator: com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()>();

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingBase: boolean equals(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r5, $r6);

        if $z2 != 0 goto label6;

     label5:
        interfaceinvoke $r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        return 0;

     label6:
        goto label4;

     label7:
        interfaceinvoke $r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        return 1;

     label8:
        $r7 := @caughtexception;

     label9:
        interfaceinvoke $r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        throw $r7;

        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }
}
