public class org.apache.poi.hslf.record.ExOleObjStg extends org.apache.poi.hslf.record.RecordAtom implements org.apache.poi.hslf.record.PositionDependentRecord, org.apache.poi.hslf.record.PersistRecord
{
    private int _persistId;
    private byte[] _header;
    private byte[] _data;
    protected int myLastOnDiskOffset;

    public void <init>()
    {
        byte[] $r1, $r2, $r3, $r4, $r5, $r6;
        org.apache.poi.hslf.record.ExOleObjStg r0;
        long $l0;
        short $s2;
        int $i1, $i3;

        r0 := @this: org.apache.poi.hslf.record.ExOleObjStg;

        specialinvoke r0.<org.apache.poi.hslf.record.RecordAtom: void <init>()>();

        $r1 = newarray (byte)[8];

        r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _header> = $r1;

        $r2 = newarray (byte)[0];

        r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _data> = $r2;

        $r3 = r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _header>;

        staticinvoke <org.apache.poi.util.LittleEndian: void putShort(byte[],int,short)>($r3, 0, 16);

        $r4 = r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _header>;

        $l0 = virtualinvoke r0.<org.apache.poi.hslf.record.ExOleObjStg: long getRecordType()>();

        $i1 = (int) $l0;

        $s2 = (short) $i1;

        staticinvoke <org.apache.poi.util.LittleEndian: void putShort(byte[],int,short)>($r4, 2, $s2);

        $r6 = r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _header>;

        $r5 = r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _data>;

        $i3 = lengthof $r5;

        staticinvoke <org.apache.poi.util.LittleEndian: void putInt(byte[],int,int)>($r6, 4, $i3);

        return;
    }

    protected void <init>(byte[], int, int)
    {
        byte[] $r1, r2, $r3, $r4, $r5;
        org.apache.poi.hslf.record.ExOleObjStg r0;
        int i0, i1, $i2, $i3, $i4;

        r0 := @this: org.apache.poi.hslf.record.ExOleObjStg;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.poi.hslf.record.RecordAtom: void <init>()>();

        $r1 = newarray (byte)[8];

        r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _header> = $r1;

        $r3 = r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _header>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i0, $r3, 0, 8);

        $i2 = i1 - 8;

        $r4 = newarray (byte)[$i2];

        r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _data> = $r4;

        $i4 = i0 + 8;

        $r5 = r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _data>;

        $i3 = i1 - 8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i4, $r5, 0, $i3);

        return;
    }

    public boolean isCompressed()
    {
        byte[] $r1;
        short $s0;
        org.apache.poi.hslf.record.ExOleObjStg r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.record.ExOleObjStg;

        $r1 = r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _header>;

        $s0 = staticinvoke <org.apache.poi.util.LittleEndian: short getShort(byte[],int)>($r1, 0);

        if $s0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getDataLength()
    {
        byte[] $r1, $r2;
        org.apache.poi.hslf.record.ExOleObjStg r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.record.ExOleObjStg;

        $z0 = virtualinvoke r0.<org.apache.poi.hslf.record.ExOleObjStg: boolean isCompressed()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _data>;

        $i1 = staticinvoke <org.apache.poi.util.LittleEndian: int getInt(byte[],int)>($r2, 0);

        return $i1;

     label1:
        $r1 = r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _data>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public java.io.InputStream getData()
    {
        byte[] $r2, $r3, $r4, $r6, $r7;
        org.apache.poi.hslf.record.ExOleObjStg r0;
        java.util.zip.InflaterInputStream $r9;
        long $l3;
        org.apache.poi.util.BoundedInputStream $r8;
        java.io.ByteArrayInputStream $r1, $r5;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.record.ExOleObjStg;

        $z0 = virtualinvoke r0.<org.apache.poi.hslf.record.ExOleObjStg: boolean isCompressed()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _data>;

        $i1 = staticinvoke <org.apache.poi.util.LittleEndian: int getInt(byte[])>($r4);

        $r5 = new java.io.ByteArrayInputStream;

        $r7 = r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _data>;

        $r6 = r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _data>;

        $i2 = lengthof $r6;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>($r7, 4, $i2);

        $r8 = new org.apache.poi.util.BoundedInputStream;

        $r9 = new java.util.zip.InflaterInputStream;

        specialinvoke $r9.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>($r5);

        $l3 = (long) $i1;

        specialinvoke $r8.<org.apache.poi.util.BoundedInputStream: void <init>(java.io.InputStream,long)>($r9, $l3);

        return $r8;

     label1:
        $r1 = new java.io.ByteArrayInputStream;

        $r3 = r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _data>;

        $r2 = r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _data>;

        $i0 = lengthof $r2;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>($r3, 0, $i0);

        return $r1;
    }

    public byte[] getRawData()
    {
        byte[] $r1;
        org.apache.poi.hslf.record.ExOleObjStg r0;

        r0 := @this: org.apache.poi.hslf.record.ExOleObjStg;

        $r1 = r0.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _data>;

        return $r1;
    }

    public void setData(byte[]) throws java.io.IOException
    {
        byte[] r1, r2, $r5, $r6, $r7;
        org.apache.poi.hslf.record.ExOleObjStg r4;
        java.io.ByteArrayOutputStream $r0;
        java.util.zip.DeflaterOutputStream $r3;
        int $i0, $i1, $i2;

        r4 := @this: org.apache.poi.hslf.record.ExOleObjStg;

        r2 := @parameter0: byte[];

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = newarray (byte)[4];

        $i0 = lengthof r2;

        staticinvoke <org.apache.poi.util.LittleEndian: void putInt(byte[],int,int)>(r1, 0, $i0);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>(r1);

        $r3 = new java.util.zip.DeflaterOutputStream;

        specialinvoke $r3.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream)>($r0);

        $i1 = lengthof r2;

        virtualinvoke $r3.<java.util.zip.DeflaterOutputStream: void write(byte[],int,int)>(r2, 0, $i1);

        virtualinvoke $r3.<java.util.zip.DeflaterOutputStream: void finish()>();

        $r5 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r4.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _data> = $r5;

        $r7 = r4.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _header>;

        $r6 = r4.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _data>;

        $i2 = lengthof $r6;

        staticinvoke <org.apache.poi.util.LittleEndian: void putInt(byte[],int,int)>($r7, 4, $i2);

        return;
    }

    public long getRecordType()
    {
        org.apache.poi.hslf.record.RecordTypes$Type $r0;
        org.apache.poi.hslf.record.ExOleObjStg r1;
        int $i0;
        long $l1;

        r1 := @this: org.apache.poi.hslf.record.ExOleObjStg;

        $r0 = <org.apache.poi.hslf.record.RecordTypes: org.apache.poi.hslf.record.RecordTypes$Type ExOleObjStg>;

        $i0 = $r0.<org.apache.poi.hslf.record.RecordTypes$Type: int typeID>;

        $l1 = (long) $i0;

        return $l1;
    }

    public void writeOut(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] $r2, $r3;
        org.apache.poi.hslf.record.ExOleObjStg r1;

        r1 := @this: org.apache.poi.hslf.record.ExOleObjStg;

        r0 := @parameter0: java.io.OutputStream;

        $r2 = r1.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _header>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r2);

        $r3 = r1.<org.apache.poi.hslf.record.ExOleObjStg: byte[] _data>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r3);

        return;
    }

    public int getPersistId()
    {
        int $i0;
        org.apache.poi.hslf.record.ExOleObjStg r0;

        r0 := @this: org.apache.poi.hslf.record.ExOleObjStg;

        $i0 = r0.<org.apache.poi.hslf.record.ExOleObjStg: int _persistId>;

        return $i0;
    }

    public void setPersistId(int)
    {
        int i0;
        org.apache.poi.hslf.record.ExOleObjStg r0;

        r0 := @this: org.apache.poi.hslf.record.ExOleObjStg;

        i0 := @parameter0: int;

        r0.<org.apache.poi.hslf.record.ExOleObjStg: int _persistId> = i0;

        return;
    }

    public int getLastOnDiskOffset()
    {
        int $i0;
        org.apache.poi.hslf.record.ExOleObjStg r0;

        r0 := @this: org.apache.poi.hslf.record.ExOleObjStg;

        $i0 = r0.<org.apache.poi.hslf.record.ExOleObjStg: int myLastOnDiskOffset>;

        return $i0;
    }

    public void setLastOnDiskOffset(int)
    {
        int i0;
        org.apache.poi.hslf.record.ExOleObjStg r0;

        r0 := @this: org.apache.poi.hslf.record.ExOleObjStg;

        i0 := @parameter0: int;

        r0.<org.apache.poi.hslf.record.ExOleObjStg: int myLastOnDiskOffset> = i0;

        return;
    }

    public void updateOtherRecordReferences(java.util.Hashtable)
    {
        org.apache.poi.hslf.record.ExOleObjStg r0;
        java.util.Hashtable r1;

        r0 := @this: org.apache.poi.hslf.record.ExOleObjStg;

        r1 := @parameter0: java.util.Hashtable;

        return;
    }
}
