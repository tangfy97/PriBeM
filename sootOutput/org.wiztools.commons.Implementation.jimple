public class org.wiztools.commons.Implementation extends java.lang.Object
{
    private static final java.lang.String PROP_NAME;
    private static final java.util.logging.Logger LOG;
    private static final java.util.Map map;
    private static final java.util.Properties props;

    public void <init>()
    {
        org.wiztools.commons.Implementation r0;

        r0 := @this: org.wiztools.commons.Implementation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object of(java.lang.Class) throws org.wiztools.commons.ImplementationLoadException
    {
        java.util.Map $r12, $r19;
        java.lang.InstantiationException $r29;
        boolean z0;
        java.lang.IllegalAccessException $r27;
        java.util.logging.Logger $r11, $r16, $r21;
        java.lang.StringBuilder $r4, $r6, $r7;
        org.wiztools.commons.ImplementationLoadException $r28, $r30, $r32;
        java.util.logging.Level $r10, $r15, $r22;
        java.lang.String $r1, $r3, $r8, $r9, $r13, $r20, $r24;
        java.util.Properties $r2, $r5;
        java.lang.Class r0, $r17, $r23, $r25;
        java.lang.Object $r14, $r18, $r26, r33;
        java.lang.ClassNotFoundException $r31;

        r0 := @parameter0: java.lang.Class;

     label01:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = <org.wiztools.commons.Implementation: java.util.Properties props>;

        $r3 = virtualinvoke $r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r1);

        z0 = 0;

        $r5 = <org.wiztools.commons.Implementation: java.util.Properties props>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".singleton");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r8);

        if $r9 == null goto label02;

        z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r9);

        goto label03;

     label02:
        $r11 = <org.wiztools.commons.Implementation: java.util.logging.Logger LOG>;

        $r10 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        virtualinvoke $r11.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r10, "Singleton property not set for class: {0}", $r1);

     label03:
        if z0 != 0 goto label05;

        $r25 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r3);

        $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.Object newInstance()>();

     label04:
        return $r26;

     label05:
        $r12 = <org.wiztools.commons.Implementation: java.util.Map map>;

        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r14 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        r33 = $r14;

        if $r14 != null goto label06;

        $r17 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r3);

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.Object newInstance()>();

        r33 = $r18;

        $r19 = <org.wiztools.commons.Implementation: java.util.Map map>;

        $r20 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r18);

        $r21 = <org.wiztools.commons.Implementation: java.util.logging.Logger LOG>;

        $r22 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $r23 = virtualinvoke $r18.<java.lang.Object: java.lang.Class getClass()>();

        $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r21.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r22, "Class created, and put into cache: {0}", $r24);

        goto label07;

     label06:
        $r16 = <org.wiztools.commons.Implementation: java.util.logging.Logger LOG>;

        $r15 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        virtualinvoke $r16.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r15, "Object already available in cache: {0}", $r1);

     label07:
        return r33;

     label08:
        $r31 := @caughtexception;

        $r32 = new org.wiztools.commons.ImplementationLoadException;

        specialinvoke $r32.<org.wiztools.commons.ImplementationLoadException: void <init>(java.lang.Throwable)>($r31);

        throw $r32;

     label09:
        $r29 := @caughtexception;

        $r30 = new org.wiztools.commons.ImplementationLoadException;

        specialinvoke $r30.<org.wiztools.commons.ImplementationLoadException: void <init>(java.lang.Throwable)>($r29);

        throw $r30;

     label10:
        $r27 := @caughtexception;

        $r28 = new org.wiztools.commons.ImplementationLoadException;

        specialinvoke $r28.<org.wiztools.commons.ImplementationLoadException: void <init>(java.lang.Throwable)>($r27);

        throw $r28;

        catch java.lang.ClassNotFoundException from label01 to label04 with label08;
        catch java.lang.ClassNotFoundException from label05 to label07 with label08;
        catch java.lang.InstantiationException from label01 to label04 with label09;
        catch java.lang.InstantiationException from label05 to label07 with label09;
        catch java.lang.IllegalAccessException from label01 to label04 with label10;
        catch java.lang.IllegalAccessException from label05 to label07 with label10;
    }

    static void <clinit>()
    {
        java.util.Enumeration $r8;
        java.net.URL r10;
        java.util.HashMap $r3;
        java.util.logging.Level $r15;
        java.net.URLConnection $r11;
        java.util.Map $r4;
        java.lang.String $r1;
        boolean $z0;
        java.util.Properties $r5, $r12;
        java.io.IOException $r14;
        java.util.logging.Logger $r2, $r16;
        java.lang.Class $r0, $r6;
        java.lang.Object $r9;
        java.lang.ClassLoader $r7;
        java.io.InputStream $r13;

        <org.wiztools.commons.Implementation: java.lang.String PROP_NAME> = "wiztools-service-locator.properties";

        $r0 = class "Lorg/wiztools/commons/Implementation;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.wiztools.commons.Implementation: java.util.logging.Logger LOG> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r3);

        <org.wiztools.commons.Implementation: java.util.Map map> = $r4;

        $r5 = new java.util.Properties;

        specialinvoke $r5.<java.util.Properties: void <init>()>();

        <org.wiztools.commons.Implementation: java.util.Properties props> = $r5;

     label1:
        $r6 = class "Lorg/wiztools/commons/Implementation;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r8 = virtualinvoke $r7.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>("wiztools-service-locator.properties");

     label2:
        $z0 = interfaceinvoke $r8.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r8.<java.util.Enumeration: java.lang.Object nextElement()>();

        r10 = (java.net.URL) $r9;

        $r11 = virtualinvoke r10.<java.net.URL: java.net.URLConnection openConnection()>();

        virtualinvoke $r11.<java.net.URLConnection: void connect()>();

        $r12 = <org.wiztools.commons.Implementation: java.util.Properties props>;

        $r13 = virtualinvoke $r11.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        virtualinvoke $r12.<java.util.Properties: void load(java.io.InputStream)>($r13);

        goto label2;

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

        $r16 = <org.wiztools.commons.Implementation: java.util.logging.Logger LOG>;

        $r15 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r16.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r15, null, $r14);

     label5:
        return;

        catch java.io.IOException from label1 to label3 with label4;
    }
}
