public abstract class org.apache.lucene.search.MultiTermQuery extends org.apache.lucene.search.Query
{
    protected final java.lang.String field;
    protected org.apache.lucene.search.MultiTermQuery$RewriteMethod rewriteMethod;
    public static final org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_FILTER_REWRITE;
    public static final org.apache.lucene.search.MultiTermQuery$RewriteMethod SCORING_BOOLEAN_QUERY_REWRITE;
    public static final org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE;
    public static final org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;

    public void <init>(java.lang.String)
    {
        org.apache.lucene.search.MultiTermQuery r0;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r1;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.lucene.search.MultiTermQuery;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.lucene.search.Query: void <init>()>();

        $r1 = <org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_AUTO_REWRITE_DEFAULT>;

        r0.<org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod rewriteMethod> = $r1;

        if r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("field must not be null");

        throw $r3;

     label1:
        r0.<org.apache.lucene.search.MultiTermQuery: java.lang.String field> = r2;

        return;
    }

    public final java.lang.String getField()
    {
        java.lang.String $r1;
        org.apache.lucene.search.MultiTermQuery r0;

        r0 := @this: org.apache.lucene.search.MultiTermQuery;

        $r1 = r0.<org.apache.lucene.search.MultiTermQuery: java.lang.String field>;

        return $r1;
    }

    protected abstract org.apache.lucene.index.TermsEnum getTermsEnum(org.apache.lucene.index.Terms, org.apache.lucene.util.AttributeSource) throws java.io.IOException;

    protected final org.apache.lucene.index.TermsEnum getTermsEnum(org.apache.lucene.index.Terms) throws java.io.IOException
    {
        org.apache.lucene.index.Terms r1;
        org.apache.lucene.search.MultiTermQuery r0;
        org.apache.lucene.index.TermsEnum $r3;
        org.apache.lucene.util.AttributeSource $r2;

        r0 := @this: org.apache.lucene.search.MultiTermQuery;

        r1 := @parameter0: org.apache.lucene.index.Terms;

        $r2 = new org.apache.lucene.util.AttributeSource;

        specialinvoke $r2.<org.apache.lucene.util.AttributeSource: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.lucene.search.MultiTermQuery: org.apache.lucene.index.TermsEnum getTermsEnum(org.apache.lucene.index.Terms,org.apache.lucene.util.AttributeSource)>(r1, $r2);

        return $r3;
    }

    public final org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException
    {
        org.apache.lucene.search.Query $r3;
        org.apache.lucene.search.MultiTermQuery r0;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r2;
        org.apache.lucene.index.IndexReader r1;

        r0 := @this: org.apache.lucene.search.MultiTermQuery;

        r1 := @parameter0: org.apache.lucene.index.IndexReader;

        $r2 = r0.<org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod rewriteMethod>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.search.MultiTermQuery$RewriteMethod: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader,org.apache.lucene.search.MultiTermQuery)>(r1, r0);

        return $r3;
    }

    public org.apache.lucene.search.MultiTermQuery$RewriteMethod getRewriteMethod()
    {
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r1;
        org.apache.lucene.search.MultiTermQuery r0;

        r0 := @this: org.apache.lucene.search.MultiTermQuery;

        $r1 = r0.<org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod rewriteMethod>;

        return $r1;
    }

    public void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)
    {
        org.apache.lucene.search.MultiTermQuery$RewriteMethod r1;
        org.apache.lucene.search.MultiTermQuery r0;

        r0 := @this: org.apache.lucene.search.MultiTermQuery;

        r1 := @parameter0: org.apache.lucene.search.MultiTermQuery$RewriteMethod;

        r0.<org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod rewriteMethod> = r1;

        return;
    }

    public int hashCode()
    {
        org.apache.lucene.search.MultiTermQuery r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        float $f0;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.lucene.search.MultiTermQuery;

        $f0 = virtualinvoke r0.<org.apache.lucene.search.MultiTermQuery: float getBoost()>();

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        i5 = 31 + $i0;

        $i1 = 31 * i5;

        $r1 = r0.<org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod rewriteMethod>;

        $i2 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        i6 = $i1 + $i2;

        $r2 = r0.<org.apache.lucene.search.MultiTermQuery: java.lang.String field>;

        if $r2 == null goto label1;

        $i3 = 31 * i6;

        $r3 = r0.<org.apache.lucene.search.MultiTermQuery: java.lang.String field>;

        $i4 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        i6 = $i3 + $i4;

     label1:
        return i6;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.search.MultiTermQuery r0, r4;
        int $i0, $i1;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r5, $r6;
        java.lang.String $r7, $r8, $r9, $r10;
        boolean $z0, $z1;
        float $f0, $f1;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;

        r0 := @this: org.apache.lucene.search.MultiTermQuery;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.apache.lucene.search.MultiTermQuery) r1;

        $f0 = virtualinvoke r0.<org.apache.lucene.search.MultiTermQuery: float getBoost()>();

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        $f1 = virtualinvoke r4.<org.apache.lucene.search.MultiTermQuery: float getBoost()>();

        $i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f1);

        if $i0 == $i1 goto label4;

        return 0;

     label4:
        $r6 = r0.<org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod rewriteMethod>;

        $r5 = r4.<org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod rewriteMethod>;

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $r7 = r4.<org.apache.lucene.search.MultiTermQuery: java.lang.String field>;

        if $r7 != null goto label7;

        $r10 = r0.<org.apache.lucene.search.MultiTermQuery: java.lang.String field>;

        if $r10 != null goto label6;

        $z1 = 1;

        goto label8;

     label6:
        $z1 = 0;

        goto label8;

     label7:
        $r9 = r4.<org.apache.lucene.search.MultiTermQuery: java.lang.String field>;

        $r8 = r0.<org.apache.lucene.search.MultiTermQuery: java.lang.String field>;

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

     label8:
        return $z1;
    }

    static void <clinit>()
    {
        org.apache.lucene.search.ScoringRewrite $r1;
        org.apache.lucene.search.MultiTermQuery$1 $r0;
        org.apache.lucene.search.MultiTermQuery$2 $r3;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r2;

        $r0 = new org.apache.lucene.search.MultiTermQuery$1;

        specialinvoke $r0.<org.apache.lucene.search.MultiTermQuery$1: void <init>()>();

        <org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_FILTER_REWRITE> = $r0;

        $r1 = <org.apache.lucene.search.ScoringRewrite: org.apache.lucene.search.ScoringRewrite SCORING_BOOLEAN_QUERY_REWRITE>;

        <org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod SCORING_BOOLEAN_QUERY_REWRITE> = $r1;

        $r2 = <org.apache.lucene.search.ScoringRewrite: org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE>;

        <org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE> = $r2;

        $r3 = new org.apache.lucene.search.MultiTermQuery$2;

        specialinvoke $r3.<org.apache.lucene.search.MultiTermQuery$2: void <init>()>();

        <org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_AUTO_REWRITE_DEFAULT> = $r3;

        return;
    }
}
