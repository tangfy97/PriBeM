public abstract class org.apache.commons.codec.language.bm.Languages$LanguageSet extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.codec.language.bm.Languages$LanguageSet r0;

        r0 := @this: org.apache.commons.codec.language.bm.Languages$LanguageSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.commons.codec.language.bm.Languages$LanguageSet 'from'(java.util.Set)
    {
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r1;
        java.util.Set r0;
        org.apache.commons.codec.language.bm.Languages$SomeLanguages $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Set;

        $z0 = interfaceinvoke r0.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet NO_LANGUAGES>;

        goto label2;

     label1:
        $r2 = new org.apache.commons.codec.language.bm.Languages$SomeLanguages;

        $r1 = $r2;

        specialinvoke $r2.<org.apache.commons.codec.language.bm.Languages$SomeLanguages: void <init>(java.util.Set,org.apache.commons.codec.language.bm.Languages$1)>(r0, null);

     label2:
        return $r1;
    }

    public abstract boolean contains(java.lang.String);

    public abstract java.lang.String getAny();

    public abstract boolean isEmpty();

    public abstract boolean isSingleton();

    public abstract org.apache.commons.codec.language.bm.Languages$LanguageSet restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet);
}
