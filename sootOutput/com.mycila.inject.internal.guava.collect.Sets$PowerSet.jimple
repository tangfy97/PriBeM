final class com.mycila.inject.internal.guava.collect.Sets$PowerSet extends java.util.AbstractSet
{
    final com.mycila.inject.internal.guava.collect.ImmutableSet inputSet;
    final com.mycila.inject.internal.guava.collect.ImmutableList inputList;
    final int powerSetSize;

    void <init>(com.mycila.inject.internal.guava.collect.ImmutableSet)
    {
        int $i0, $i1;
        com.mycila.inject.internal.guava.collect.ImmutableList $r2;
        com.mycila.inject.internal.guava.collect.ImmutableSet r1;
        com.mycila.inject.internal.guava.collect.Sets$PowerSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$PowerSet;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ImmutableSet;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        r0.<com.mycila.inject.internal.guava.collect.Sets$PowerSet: com.mycila.inject.internal.guava.collect.ImmutableSet inputSet> = r1;

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableList asList()>();

        r0.<com.mycila.inject.internal.guava.collect.Sets$PowerSet: com.mycila.inject.internal.guava.collect.ImmutableList inputList> = $r2;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ImmutableSet: int size()>();

        $i1 = 1 << $i0;

        r0.<com.mycila.inject.internal.guava.collect.Sets$PowerSet: int powerSetSize> = $i1;

        return;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.Sets$PowerSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$PowerSet;

        $i0 = r0.<com.mycila.inject.internal.guava.collect.Sets$PowerSet: int powerSetSize>;

        return $i0;
    }

    public boolean isEmpty()
    {
        com.mycila.inject.internal.guava.collect.Sets$PowerSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$PowerSet;

        return 0;
    }

    public java.util.Iterator iterator()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.Sets$PowerSet$1 $r0;
        com.mycila.inject.internal.guava.collect.Sets$PowerSet r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.Sets$PowerSet;

        $r0 = new com.mycila.inject.internal.guava.collect.Sets$PowerSet$1;

        $i0 = r1.<com.mycila.inject.internal.guava.collect.Sets$PowerSet: int powerSetSize>;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Sets$PowerSet$1: void <init>(com.mycila.inject.internal.guava.collect.Sets$PowerSet,int)>(r1, $i0);

        return $r0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Set r1;
        java.lang.Object r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r3;
        boolean $z0, $z1;
        com.mycila.inject.internal.guava.collect.Sets$PowerSet r2;

        r2 := @this: com.mycila.inject.internal.guava.collect.Sets$PowerSet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.util.Set;

        if $z0 == 0 goto label1;

        r1 = (java.util.Set) r0;

        $r3 = r2.<com.mycila.inject.internal.guava.collect.Sets$PowerSet: com.mycila.inject.internal.guava.collect.ImmutableSet inputSet>;

        $z1 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.ImmutableSet: boolean containsAll(java.util.Collection)>(r1);

        return $z1;

     label1:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Sets$PowerSet r1, r2;
        java.lang.Object r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r3, $r4;
        boolean $z0, $z1, $z2;

        r1 := @this: com.mycila.inject.internal.guava.collect.Sets$PowerSet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Sets$PowerSet;

        if $z0 == 0 goto label1;

        r2 = (com.mycila.inject.internal.guava.collect.Sets$PowerSet) r0;

        $r4 = r1.<com.mycila.inject.internal.guava.collect.Sets$PowerSet: com.mycila.inject.internal.guava.collect.ImmutableSet inputSet>;

        $r3 = r2.<com.mycila.inject.internal.guava.collect.Sets$PowerSet: com.mycila.inject.internal.guava.collect.ImmutableSet inputSet>;

        $z2 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.ImmutableSet: boolean equals(java.lang.Object)>($r3);

        return $z2;

     label1:
        $z1 = specialinvoke r1.<java.util.AbstractSet: boolean equals(java.lang.Object)>(r0);

        return $z1;
    }

    public int hashCode()
    {
        int $i0, $i1, $i2, $i3;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1, $r2;
        com.mycila.inject.internal.guava.collect.Sets$PowerSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$PowerSet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Sets$PowerSet: com.mycila.inject.internal.guava.collect.ImmutableSet inputSet>;

        $i0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableSet: int hashCode()>();

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Sets$PowerSet: com.mycila.inject.internal.guava.collect.ImmutableSet inputSet>;

        $i1 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableSet: int size()>();

        $i2 = $i1 - 1;

        $i3 = $i0 << $i2;

        return $i3;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        java.lang.String $r6;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r3;
        com.mycila.inject.internal.guava.collect.Sets$PowerSet r2;

        r2 := @this: com.mycila.inject.internal.guava.collect.Sets$PowerSet;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("powerSet(");

        $r3 = r2.<com.mycila.inject.internal.guava.collect.Sets$PowerSet: com.mycila.inject.internal.guava.collect.ImmutableSet inputSet>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
