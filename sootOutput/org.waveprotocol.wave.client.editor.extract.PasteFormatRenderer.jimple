public final class org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer extends java.lang.Object
{
    private static org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer INSTANCE;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer get()
    {
        org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer $r0, $r1, $r2;

        $r0 = <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer: org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer INSTANCE>;

        if $r0 != null goto label1;

        $r2 = new org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer: void <init>()>();

        <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer: org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer INSTANCE> = $r2;

     label1:
        $r1 = <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer: org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer INSTANCE>;

        return $r1;
    }

    com.google.gwt.dom.client.Element renderTree(org.waveprotocol.wave.model.document.util.ReadableDocumentView, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.extract.SelectionMatcher)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r4, $r5;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r2;
        org.waveprotocol.wave.model.document.util.ReadableDocumentView r3;
        java.lang.AssertionError $r19, $r20, $r21, $r22;
        org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer r18;
        org.waveprotocol.wave.model.document.util.Point $r6, $r10, $r14, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.google.gwt.dom.client.DivElement $r1;
        com.google.gwt.dom.client.Element $r24, $r25, $r26, $r27;
        java.lang.Object $r7, $r11;
        com.google.gwt.dom.client.Document $r0;
        com.google.gwt.dom.client.Node $r8, $r12, $r23;

        r18 := @this: org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer;

        r3 := @parameter0: org.waveprotocol.wave.model.document.util.ReadableDocumentView;

        r4 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter2: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        $r0 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r1 = virtualinvoke $r0.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.DivElement createDivElement()>();

        $r23 = (com.google.gwt.dom.client.Node) $r1;

        virtualinvoke r2.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: void setHtmlRootContainer(com.google.gwt.dom.client.Node)>($r23);

        $r5 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        $r24 = (com.google.gwt.dom.client.Element) $r1;

        staticinvoke <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer: org.waveprotocol.wave.client.editor.content.ContentNode renderSequence(org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Element,org.waveprotocol.wave.client.editor.extract.SelectionMatcher)>(r3, r4, $r5, $r24, r2);

        $z0 = <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r16 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point getHtmlStart()>();

        if $r16 != null goto label1;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>(java.lang.Object)>("htmlStart is null.");

        throw $r19;

     label1:
        $z1 = <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r14 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point getHtmlEnd()>();

        if $r14 != null goto label2;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>("htmlEnd is null.");

        throw $r20;

     label2:
        $z2 = <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r10 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point getHtmlStart()>();

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r12 = (com.google.gwt.dom.client.Node) $r11;

        $r25 = (com.google.gwt.dom.client.Element) $r1;

        $z5 = virtualinvoke $r25.<com.google.gwt.dom.client.Element: boolean isOrHasChild(com.google.gwt.dom.client.Node)>($r12);

        if $z5 != 0 goto label3;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>(java.lang.Object)>("selection start not attached.");

        throw $r21;

     label3:
        $z3 = <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        $r6 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point getHtmlEnd()>();

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r8 = (com.google.gwt.dom.client.Node) $r7;

        $r26 = (com.google.gwt.dom.client.Element) $r1;

        $z4 = virtualinvoke $r26.<com.google.gwt.dom.client.Element: boolean isOrHasChild(com.google.gwt.dom.client.Node)>($r8);

        if $z4 != 0 goto label4;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>("selection end not attached");

        throw $r22;

     label4:
        $r27 = (com.google.gwt.dom.client.Element) $r1;

        return $r27;
    }

    public static void renderChildren(org.waveprotocol.wave.model.document.util.ReadableDocumentView, com.google.gwt.dom.client.Element, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.extract.SelectionMatcher)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r4, r6;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r3;
        org.waveprotocol.wave.model.document.util.ReadableDocumentView r1;
        com.google.gwt.dom.client.Element r2;
        java.lang.Object $r5;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.ReadableDocumentView;

        r2 := @parameter1: com.google.gwt.dom.client.Element;

        r0 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter3: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r6 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

     label1:
        if r6 == null goto label2;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer: org.waveprotocol.wave.client.editor.content.ContentNode renderSequence(org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Element,org.waveprotocol.wave.client.editor.extract.SelectionMatcher)>(r1, r6, null, r2, r3);

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object getNextSibling(java.lang.Object)>($r4);

        r6 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r5;

        goto label1;

     label2:
        return;
    }

    private static org.waveprotocol.wave.client.editor.content.ContentNode renderSequence(org.waveprotocol.wave.model.document.util.ReadableDocumentView, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode, com.google.gwt.dom.client.Element, org.waveprotocol.wave.client.editor.extract.SelectionMatcher)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, r3, $r6;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r5;
        org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer $r1;
        org.waveprotocol.wave.model.document.util.ReadableDocumentView r2;
        com.google.gwt.dom.client.Element r4;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.ReadableDocumentView;

        r0 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentNode;

        r4 := @parameter3: com.google.gwt.dom.client.Element;

        r5 := @parameter4: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer: org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer getSemanticHandler(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        $r6 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer: org.waveprotocol.wave.client.editor.content.ContentNode renderSequence(org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Element,org.waveprotocol.wave.client.editor.extract.SelectionMatcher)>(r2, r0, r3, r4, r5);

        return $r6;
    }

    private static org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer getSemanticHandler(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer $r1, $r4, $r5;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r2;
        boolean $z0;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry $r3;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = r0 instanceof org.waveprotocol.wave.client.editor.content.AgentAdapter;

        if $z0 == 0 goto label3;

        r2 = (org.waveprotocol.wave.client.editor.content.AgentAdapter) r0;

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.ElementHandlerRegistry getRegistry()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer getNiceHtmlRenderer(org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers)>(r2);

        if $r4 == null goto label1;

        $r5 = $r4;

        goto label2;

     label1:
        $r5 = <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderers: org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer DEEP_CLONE_RENDERER>;

     label2:
        return $r5;

     label3:
        $r1 = <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderers: org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer DEEP_CLONE_RENDERER>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/extract/PasteFormatRenderer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
