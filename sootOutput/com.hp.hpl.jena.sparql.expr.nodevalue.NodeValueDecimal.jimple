public class com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal extends com.hp.hpl.jena.sparql.expr.NodeValue
{
    java.math.BigDecimal decimal;

    public void <init>(java.math.BigDecimal)
    {
        java.math.BigDecimal r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal: java.math.BigDecimal decimal> = r1;

        return;
    }

    public void <init>(java.math.BigDecimal, com.hp.hpl.jena.graph.Node)
    {
        java.math.BigDecimal r2;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        r2 := @parameter0: java.math.BigDecimal;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: void <init>(com.hp.hpl.jena.graph.Node)>(r1);

        r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal: java.math.BigDecimal decimal> = r2;

        return;
    }

    public boolean isNumber()
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        return 1;
    }

    public boolean isDecimal()
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        return 1;
    }

    public boolean isFloat()
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        return 1;
    }

    public boolean isDouble()
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        return 1;
    }

    public java.math.BigDecimal getDecimal()
    {
        java.math.BigDecimal $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal: java.math.BigDecimal decimal>;

        return $r1;
    }

    public float getFloat()
    {
        java.math.BigDecimal $r1;
        float $f0;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal: java.math.BigDecimal decimal>;

        $f0 = virtualinvoke $r1.<java.math.BigDecimal: float floatValue()>();

        return $f0;
    }

    public double getDouble()
    {
        java.math.BigDecimal $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal r0;
        double $d0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal: java.math.BigDecimal decimal>;

        $d0 = virtualinvoke $r1.<java.math.BigDecimal: double doubleValue()>();

        return $d0;
    }

    protected com.hp.hpl.jena.graph.Node makeNode()
    {
        java.math.BigDecimal $r1, $r2;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r4;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal r0;
        java.lang.String $r3;
        com.hp.hpl.jena.graph.Node $r5;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal: java.math.BigDecimal decimal>;

        virtualinvoke $r1.<java.math.BigDecimal: int scale()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal: java.math.BigDecimal decimal>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String stringForm(java.math.BigDecimal)>($r2);

        $r4 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdecimal>;

        $r5 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r3, null, $r4);

        return $r5;
    }

    public java.lang.String asString()
    {
        java.lang.String $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        java.math.BigDecimal $r2;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal r0;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal: com.hp.hpl.jena.graph.Node getNode()>();

        if $r1 == null goto label1;

        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String asString()>();

        return $r4;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal: java.math.BigDecimal decimal>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String stringForm(java.math.BigDecimal)>($r2);

        return $r3;
    }

    public void visit(com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueVisitor)
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueVisitor r0;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueVisitor: void visit(com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueDecimal)>(r1);

        return;
    }
}
