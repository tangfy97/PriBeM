public class org.eclipse.jdt.internal.compiler.CompilationResult extends java.lang.Object
{
    public org.eclipse.jdt.core.compiler.CategorizedProblem[] problems;
    public org.eclipse.jdt.core.compiler.CategorizedProblem[] tasks;
    public int problemCount;
    public int taskCount;
    public org.eclipse.jdt.internal.compiler.env.ICompilationUnit compilationUnit;
    public java.util.Map problemsMap;
    public java.util.Set firstErrors;
    private int maxProblemPerUnit;
    public char[][][] qualifiedReferences;
    public char[][] simpleNameReferences;
    public boolean hasAnnotations;
    public int[] lineSeparatorPositions;
    public org.eclipse.jdt.internal.compiler.parser.RecoveryScannerData recoveryScannerData;
    public java.util.Map compiledTypes;
    public int unitIndex;
    public int totalUnitsKnown;
    public boolean hasBeenAccepted;
    public char[] fileName;
    public boolean hasInconsistentToplevelHierarchies;
    public boolean hasSyntaxError;
    public char[][] packageName;
    public boolean checkSecondaryTypes;
    private static final int[] EMPTY_LINE_ENDS;
    private static final java.util.Comparator PROBLEM_COMPARATOR;

    static void <clinit>()
    {
        int[] $r0;
        org.eclipse.jdt.internal.compiler.CompilationResult$1 $r1;

        $r0 = <org.eclipse.jdt.internal.compiler.util.Util: int[] EMPTY_INT_ARRAY>;

        <org.eclipse.jdt.internal.compiler.CompilationResult: int[] EMPTY_LINE_ENDS> = $r0;

        $r1 = new org.eclipse.jdt.internal.compiler.CompilationResult$1;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.CompilationResult$1: void <init>()>();

        <org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Comparator PROBLEM_COMPARATOR> = $r1;

        return;
    }

    public void <init>(char[], int, int, int)
    {
        int i0, i1, i2;
        org.eclipse.jdt.internal.compiler.CompilationResult r0;
        char[] r2;
        java.util.Hashtable $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: boolean hasAnnotations> = 0;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>(int)>(11);

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Map compiledTypes> = $r1;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: boolean hasBeenAccepted> = 0;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: boolean hasInconsistentToplevelHierarchies> = 0;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: boolean hasSyntaxError> = 0;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: boolean checkSecondaryTypes> = 0;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: char[] fileName> = r2;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int unitIndex> = i0;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int totalUnitsKnown> = i1;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int maxProblemPerUnit> = i2;

        return;
    }

    public void <init>(org.eclipse.jdt.internal.compiler.env.ICompilationUnit, int, int, int)
    {
        int i0, i1, i2;
        org.eclipse.jdt.internal.compiler.CompilationResult r0;
        char[] $r3;
        java.util.Hashtable $r1;
        org.eclipse.jdt.internal.compiler.env.ICompilationUnit r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.env.ICompilationUnit;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: boolean hasAnnotations> = 0;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>(int)>(11);

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Map compiledTypes> = $r1;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: boolean hasBeenAccepted> = 0;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: boolean hasInconsistentToplevelHierarchies> = 0;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: boolean hasSyntaxError> = 0;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: boolean checkSecondaryTypes> = 0;

        $r3 = interfaceinvoke r2.<org.eclipse.jdt.internal.compiler.env.ICompilationUnit: char[] getFileName()>();

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: char[] fileName> = $r3;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.internal.compiler.env.ICompilationUnit compilationUnit> = r2;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int unitIndex> = i0;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int totalUnitsKnown> = i1;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int maxProblemPerUnit> = i2;

        return;
    }

    private int computePriority(org.eclipse.jdt.core.compiler.CategorizedProblem)
    {
        org.eclipse.jdt.internal.compiler.impl.ReferenceContext $r6;
        java.util.Map $r2, $r3;
        int $i0, i1, $i3, $i5;
        boolean $z0, $z1, $z2, $z3;
        org.eclipse.jdt.core.compiler.CategorizedProblem r0;
        org.eclipse.jdt.internal.compiler.CompilationResult r1;
        java.util.Set $r7;
        java.lang.Object $r4;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r5;

        r1 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        r0 := @parameter0: org.eclipse.jdt.core.compiler.CategorizedProblem;

        $i0 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceLineNumber()>();

        i1 = 10000 - $i0;

        if i1 >= 0 goto label1;

        i1 = 0;

     label1:
        $z0 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: boolean isError()>();

        if $z0 == 0 goto label2;

        i1 = i1 + 100000;

     label2:
        $r2 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Map problemsMap>;

        if $r2 != null goto label3;

        $r6 = null;

        goto label4;

     label3:
        $r3 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Map problemsMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r6 = (org.eclipse.jdt.internal.compiler.impl.ReferenceContext) $r4;

     label4:
        if $r6 == null goto label7;

        $z1 = $r6 instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        if $z1 == 0 goto label5;

        r5 = (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) $r6;

        $z2 = virtualinvoke r5.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean isStatic()>();

        if $z2 == 0 goto label6;

        i1 = i1 + 10000;

        goto label6;

     label5:
        $i3 = (int) 40000;

        i1 = i1 + $i3;

     label6:
        $r7 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Set firstErrors>;

        $z3 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z3 == 0 goto label8;

        i1 = i1 + 20000;

        goto label8;

     label7:
        $i5 = (int) 40000;

        i1 = i1 + $i5;

     label8:
        return i1;
    }

    public org.eclipse.jdt.core.compiler.CategorizedProblem[] getAllProblems()
    {
        org.eclipse.jdt.core.compiler.CategorizedProblem[] $r1, $r2, r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i10, $i11;
        org.eclipse.jdt.core.compiler.CategorizedProblem r4, r5, r6;
        org.eclipse.jdt.internal.compiler.CompilationResult r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] getProblems()>();

        if $r1 == null goto label01;

        $i5 = lengthof $r1;

        goto label02;

     label01:
        $i5 = 0;

     label02:
        i0 = $i5;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] getTasks()>();

        if $r2 == null goto label03;

        $i6 = lengthof $r2;

        goto label04;

     label03:
        $i6 = 0;

     label04:
        i1 = $i6;

        if $i6 != 0 goto label05;

        return $r1;

     label05:
        if i0 != 0 goto label06;

        return $r2;

     label06:
        i2 = i0 + $i6;

        r3 = newarray (org.eclipse.jdt.core.compiler.CategorizedProblem)[i2];

        i7 = 0;

        i8 = 0;

        i9 = 0;

        goto label14;

     label07:
        r4 = null;

        r5 = null;

        if i8 >= i1 goto label08;

        r4 = $r2[i8];

     label08:
        if i9 >= i0 goto label09;

        r5 = $r1[i9];

     label09:
        r6 = null;

        if r5 == null goto label12;

        if r4 == null goto label11;

        $i3 = virtualinvoke r5.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceStart()>();

        $i4 = virtualinvoke r4.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getSourceStart()>();

        if $i3 >= $i4 goto label10;

        r6 = r5;

        i9 = i9 + 1;

        goto label13;

     label10:
        r6 = r4;

        i8 = i8 + 1;

        goto label13;

     label11:
        r6 = r5;

        i9 = i9 + 1;

        goto label13;

     label12:
        if r4 == null goto label13;

        r6 = r4;

        i8 = i8 + 1;

     label13:
        $i10 = i7;

        i7 = i7 + 1;

        r3[$i10] = r6;

     label14:
        $i11 = i8 + i9;

        if $i11 < i2 goto label07;

        return r3;
    }

    public org.eclipse.jdt.internal.compiler.ClassFile[] getClassFiles()
    {
        org.eclipse.jdt.internal.compiler.ClassFile[] r2;
        java.util.Map $r1, $r3;
        java.util.Collection $r4;
        int $i0;
        org.eclipse.jdt.internal.compiler.CompilationResult r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Map compiledTypes>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        r2 = newarray (org.eclipse.jdt.internal.compiler.ClassFile)[$i0];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Map compiledTypes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        interfaceinvoke $r4.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        return r2;
    }

    public org.eclipse.jdt.internal.compiler.env.ICompilationUnit getCompilationUnit()
    {
        org.eclipse.jdt.internal.compiler.CompilationResult r0;
        org.eclipse.jdt.internal.compiler.env.ICompilationUnit $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.internal.compiler.env.ICompilationUnit compilationUnit>;

        return $r1;
    }

    public org.eclipse.jdt.core.compiler.CategorizedProblem[] getErrors()
    {
        org.eclipse.jdt.core.compiler.CategorizedProblem[] $r1, r5;
        int $i0, $i1, i2, i3, $i4, i5, i6, $i7;
        boolean $z0, $z1;
        org.eclipse.jdt.core.compiler.CategorizedProblem $r2, $r3, $r4;
        org.eclipse.jdt.internal.compiler.CompilationResult r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] getProblems()>();

        i2 = 0;

        i3 = 0;

        goto label3;

     label1:
        $r2 = $r1[i3];

        $z0 = virtualinvoke $r2.<org.eclipse.jdt.core.compiler.CategorizedProblem: boolean isError()>();

        if $z0 == 0 goto label2;

        i2 = i2 + 1;

     label2:
        i3 = i3 + 1;

     label3:
        $i4 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        if i3 < $i4 goto label1;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        if i2 != $i0 goto label4;

        return $r1;

     label4:
        r5 = newarray (org.eclipse.jdt.core.compiler.CategorizedProblem)[i2];

        i5 = 0;

        i6 = 0;

        goto label7;

     label5:
        $r3 = $r1[i6];

        $z1 = virtualinvoke $r3.<org.eclipse.jdt.core.compiler.CategorizedProblem: boolean isError()>();

        if $z1 == 0 goto label6;

        $i1 = i5;

        i5 = i5 + 1;

        $r4 = $r1[i6];

        r5[$i1] = $r4;

     label6:
        i6 = i6 + 1;

     label7:
        $i7 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        if i6 < $i7 goto label5;

        return r5;
    }

    public char[] getFileName()
    {
        org.eclipse.jdt.internal.compiler.CompilationResult r0;
        char[] $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: char[] fileName>;

        return $r1;
    }

    public int[] getLineSeparatorPositions()
    {
        org.eclipse.jdt.internal.compiler.CompilationResult r0;
        int[] $r1, $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int[] lineSeparatorPositions>;

        if $r1 != null goto label1;

        $r2 = <org.eclipse.jdt.internal.compiler.CompilationResult: int[] EMPTY_LINE_ENDS>;

        goto label2;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int[] lineSeparatorPositions>;

     label2:
        return $r2;
    }

    public org.eclipse.jdt.core.compiler.CategorizedProblem[] getProblems()
    {
        org.eclipse.jdt.core.compiler.CategorizedProblem[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.eclipse.jdt.internal.compiler.CompilationResult r0;
        java.util.Comparator $r10;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        if $r1 == null goto label3;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        $i0 = lengthof $r2;

        if $i1 == $i0 goto label1;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        $r6 = newarray (org.eclipse.jdt.core.compiler.CategorizedProblem)[$i10];

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems> = $r6;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 0, $i11);

     label1:
        $i2 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int maxProblemPerUnit>;

        if $i2 <= 0 goto label2;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int maxProblemPerUnit>;

        if $i4 <= $i3 goto label2;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        $i6 = $i5 - 1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.CompilationResult: void quickPrioritize(org.eclipse.jdt.core.compiler.CategorizedProblem[],int,int)>($r3, 0, $i6);

        $i7 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int maxProblemPerUnit>;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount> = $i7;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        $r4 = newarray (org.eclipse.jdt.core.compiler.CategorizedProblem)[$i8];

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems> = $r4;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, 0, $i9);

     label2:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        $i12 = lengthof $r9;

        $r10 = <org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Comparator PROBLEM_COMPARATOR>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)>($r8, 0, $i12, $r10);

     label3:
        $r11 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        return $r11;
    }

    public org.eclipse.jdt.core.compiler.CategorizedProblem[] getTasks()
    {
        org.eclipse.jdt.core.compiler.CategorizedProblem[] $r1, $r2, $r3, $r5, $r6, $r7, $r8;
        org.eclipse.jdt.internal.compiler.CompilationResult r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.Comparator $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] tasks>;

        if $r1 == null goto label2;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int taskCount>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] tasks>;

        $i0 = lengthof $r2;

        if $i1 == $i0 goto label1;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] tasks>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int taskCount>;

        $r6 = newarray (org.eclipse.jdt.core.compiler.CategorizedProblem)[$i3];

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] tasks> = $r6;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int taskCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 0, $i4);

     label1:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] tasks>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] tasks>;

        $i2 = lengthof $r3;

        $r4 = <org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Comparator PROBLEM_COMPARATOR>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)>($r5, 0, $i2, $r4);

     label2:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] tasks>;

        return $r8;
    }

    public boolean hasErrors()
    {
        org.eclipse.jdt.core.compiler.CategorizedProblem[] $r1, $r2;
        int $i0, i1;
        org.eclipse.jdt.core.compiler.CategorizedProblem $r3;
        org.eclipse.jdt.internal.compiler.CompilationResult r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        if $r1 == null goto label4;

        i1 = 0;

        goto label3;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        $r3 = $r2[i1];

        $z0 = virtualinvoke $r3.<org.eclipse.jdt.core.compiler.CategorizedProblem: boolean isError()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

     label3:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        if i1 < $i0 goto label1;

     label4:
        return 0;
    }

    public boolean hasProblems()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.CompilationResult r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasTasks()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.CompilationResult r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int taskCount>;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasWarnings()
    {
        org.eclipse.jdt.core.compiler.CategorizedProblem[] $r1, $r2;
        int $i0, i1;
        org.eclipse.jdt.core.compiler.CategorizedProblem $r3;
        org.eclipse.jdt.internal.compiler.CompilationResult r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        if $r1 == null goto label4;

        i1 = 0;

        goto label3;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        $r3 = $r2[i1];

        $z0 = virtualinvoke $r3.<org.eclipse.jdt.core.compiler.CategorizedProblem: boolean isWarning()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

     label3:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        if i1 < $i0 goto label1;

     label4:
        return 0;
    }

    private void quickPrioritize(org.eclipse.jdt.core.compiler.CategorizedProblem[], int, int)
    {
        org.eclipse.jdt.core.compiler.CategorizedProblem[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9, $i11, $i13;
        org.eclipse.jdt.core.compiler.CategorizedProblem $r2, $r3, r4, $r5, $r6;
        org.eclipse.jdt.internal.compiler.CompilationResult r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        r1 := @parameter0: org.eclipse.jdt.core.compiler.CategorizedProblem[];

        i7 := @parameter1: int;

        i8 := @parameter2: int;

        if i7 < i8 goto label1;

        return;

     label1:
        i0 = i7;

        i1 = i8;

        $i2 = i8 - i7;

        $i3 = $i2 / 2;

        $i4 = i7 + $i3;

        $r2 = r1[$i4];

        $i5 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int computePriority(org.eclipse.jdt.core.compiler.CategorizedProblem)>($r2);

        goto label3;

     label2:
        $i11 = (int) -1;

        i8 = i8 + $i11;

     label3:
        $r6 = r1[i8];

        $i9 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int computePriority(org.eclipse.jdt.core.compiler.CategorizedProblem)>($r6);

        if $i9 < $i5 goto label2;

        goto label5;

     label4:
        i7 = i7 + 1;

     label5:
        $r3 = r1[i7];

        $i6 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int computePriority(org.eclipse.jdt.core.compiler.CategorizedProblem)>($r3);

        if $i5 < $i6 goto label4;

        if i7 > i8 goto label6;

        r4 = r1[i7];

        $r5 = r1[i8];

        r1[i7] = $r5;

        r1[i8] = r4;

        i7 = i7 + 1;

        $i13 = (int) -1;

        i8 = i8 + $i13;

     label6:
        if i7 <= i8 goto label3;

        if i0 >= i8 goto label7;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.CompilationResult: void quickPrioritize(org.eclipse.jdt.core.compiler.CategorizedProblem[],int,int)>(r1, i0, i8);

     label7:
        if i7 >= i1 goto label8;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.CompilationResult: void quickPrioritize(org.eclipse.jdt.core.compiler.CategorizedProblem[],int,int)>(r1, i7, i1);

     label8:
        return;
    }

    public void recordPackageName(char[][])
    {
        org.eclipse.jdt.internal.compiler.CompilationResult r0;
        char[][] r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        r1 := @parameter0: char[][];

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: char[][] packageName> = r1;

        return;
    }

    public void record(org.eclipse.jdt.core.compiler.CategorizedProblem, org.eclipse.jdt.internal.compiler.impl.ReferenceContext)
    {
        org.eclipse.jdt.core.compiler.CategorizedProblem[] $r2, $r9, $r10, $r11, $r12;
        java.util.HashMap $r8;
        java.util.HashSet $r7;
        org.eclipse.jdt.internal.compiler.impl.ReferenceContext r3;
        java.util.Map $r4, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0, $z1, $z2;
        org.eclipse.jdt.core.compiler.CategorizedProblem r0;
        org.eclipse.jdt.internal.compiler.CompilationResult r1;
        java.util.Set $r5, $r6;

        r1 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        r0 := @parameter0: org.eclipse.jdt.core.compiler.CategorizedProblem;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.impl.ReferenceContext;

        $i0 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getID()>();

        if $i0 != 536871362 goto label1;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.CompilationResult: void recordTask(org.eclipse.jdt.core.compiler.CategorizedProblem)>(r0);

        return;

     label1:
        $i1 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        if $i1 != 0 goto label2;

        $r11 = newarray (org.eclipse.jdt.core.compiler.CategorizedProblem)[5];

        r1.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems> = $r11;

        goto label3;

     label2:
        $i3 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        $i2 = lengthof $r2;

        if $i3 != $i2 goto label3;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        $i5 = $i4 * 2;

        $r9 = newarray (org.eclipse.jdt.core.compiler.CategorizedProblem)[$i5];

        r1.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems> = $r9;

        $i6 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i6);

     label3:
        $r12 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        $i7 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        $i8 = $i7 + 1;

        r1.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount> = $i8;

        $r12[$i7] = r0;

        if r3 == null goto label7;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Map problemsMap>;

        if $r4 != null goto label4;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>(int)>(5);

        r1.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Map problemsMap> = $r8;

     label4:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Set firstErrors>;

        if $r5 != null goto label5;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>(int)>(5);

        r1.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Set firstErrors> = $r7;

     label5:
        $z1 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: boolean isError()>();

        if $z1 == 0 goto label6;

        $z2 = interfaceinvoke r3.<org.eclipse.jdt.internal.compiler.impl.ReferenceContext: boolean hasErrors()>();

        if $z2 != 0 goto label6;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Set firstErrors>;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r0);

     label6:
        $r13 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Map problemsMap>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r3);

     label7:
        $i9 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: int getID()>();

        $i10 = $i9 & 1073741824;

        if $i10 == 0 goto label8;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.core.compiler.CategorizedProblem: boolean isError()>();

        if $z0 == 0 goto label8;

        r1.<org.eclipse.jdt.internal.compiler.CompilationResult: boolean hasSyntaxError> = 1;

     label8:
        return;
    }

    public void record(char[], org.eclipse.jdt.internal.compiler.ClassFile)
    {
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding r1;
        org.eclipse.jdt.internal.compiler.ClassFile r0;
        java.util.Map $r4;
        org.eclipse.jdt.internal.compiler.CompilationResult r2;
        char[] r3;
        boolean $z0, $z1;

        r2 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        r3 := @parameter0: char[];

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.ClassFile;

        r1 = r0.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding referenceBinding>;

        $z0 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: boolean isLocalType()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: boolean isHierarchyInconsistent()>();

        if $z1 == 0 goto label1;

        r2.<org.eclipse.jdt.internal.compiler.CompilationResult: boolean hasInconsistentToplevelHierarchies> = 1;

     label1:
        $r4 = r2.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Map compiledTypes>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r0);

        return;
    }

    private void recordTask(org.eclipse.jdt.core.compiler.CategorizedProblem)
    {
        org.eclipse.jdt.core.compiler.CategorizedProblem[] $r1, $r3, $r4, $r5, $r6;
        org.eclipse.jdt.core.compiler.CategorizedProblem r2;
        org.eclipse.jdt.internal.compiler.CompilationResult r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        r2 := @parameter0: org.eclipse.jdt.core.compiler.CategorizedProblem;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int taskCount>;

        if $i0 != 0 goto label1;

        $r5 = newarray (org.eclipse.jdt.core.compiler.CategorizedProblem)[5];

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] tasks> = $r5;

        goto label2;

     label1:
        $i2 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int taskCount>;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] tasks>;

        $i1 = lengthof $r1;

        if $i2 != $i1 goto label2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] tasks>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int taskCount>;

        $i4 = $i3 * 2;

        $r3 = newarray (org.eclipse.jdt.core.compiler.CategorizedProblem)[$i4];

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] tasks> = $r3;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int taskCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, $i5);

     label2:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] tasks>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int taskCount>;

        $i7 = $i6 + 1;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int taskCount> = $i7;

        $r6[$i6] = r2;

        return;
    }

    public org.eclipse.jdt.internal.compiler.CompilationResult tagAsAccepted()
    {
        org.eclipse.jdt.internal.compiler.CompilationResult r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: boolean hasBeenAccepted> = 1;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Map problemsMap> = null;

        r0.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Set firstErrors> = null;

        return r0;
    }

    public java.lang.String toString()
    {
        org.eclipse.jdt.core.compiler.CategorizedProblem[] $r4, $r8;
        java.lang.StringBuffer $r0, $r6, $r7, $r10, $r16, $r17, $r18, $r20;
        java.util.Map $r3, $r11;
        int $i0, $i1, i2;
        java.lang.String $r5;
        boolean $z0;
        java.util.Iterator $r13;
        org.eclipse.jdt.core.compiler.CategorizedProblem $r9;
        org.eclipse.jdt.internal.compiler.CompilationResult r1;
        java.util.Set $r12;
        char[] $r2, r15, $r19;
        java.lang.Object $r14;

        r1 := @this: org.eclipse.jdt.internal.compiler.CompilationResult;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: char[] fileName>;

        if $r2 == null goto label1;

        $r18 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filename : ");

        $r19 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: char[] fileName>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r19);

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

     label1:
        $r3 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Map compiledTypes>;

        if $r3 == null goto label4;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("COMPILED type(s)\t\n");

        $r11 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: java.util.Map compiledTypes>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>();

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (char[]) $r14;

        $r16 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t - ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>(r15);

        virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

     label3:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        goto label5;

     label4:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No COMPILED type\n");

     label5:
        $r4 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        if $r4 == null goto label8;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        $r6 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" PROBLEM(s) detected \n");

        i2 = 0;

        goto label7;

     label6:
        $r7 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t - ");

        $r8 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        $r9 = $r8[i2];

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        i2 = i2 + 1;

     label7:
        $i1 = r1.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        if i2 < $i1 goto label6;

        goto label9;

     label8:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No PROBLEM\n");

     label9:
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }
}
