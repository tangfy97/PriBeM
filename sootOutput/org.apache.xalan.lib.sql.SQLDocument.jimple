public class org.apache.xalan.lib.sql.SQLDocument extends org.apache.xalan.lib.sql.DTMDocument
{
    private boolean DEBUG;
    private static final java.lang.String S_NAMESPACE;
    private static final java.lang.String S_SQL;
    private static final java.lang.String S_ROW_SET;
    private static final java.lang.String S_METADATA;
    private static final java.lang.String S_COLUMN_HEADER;
    private static final java.lang.String S_ROW;
    private static final java.lang.String S_COL;
    private static final java.lang.String S_OUT_PARAMETERS;
    private static final java.lang.String S_CATALOGUE_NAME;
    private static final java.lang.String S_DISPLAY_SIZE;
    private static final java.lang.String S_COLUMN_LABEL;
    private static final java.lang.String S_COLUMN_NAME;
    private static final java.lang.String S_COLUMN_TYPE;
    private static final java.lang.String S_COLUMN_TYPENAME;
    private static final java.lang.String S_PRECISION;
    private static final java.lang.String S_SCALE;
    private static final java.lang.String S_SCHEMA_NAME;
    private static final java.lang.String S_TABLE_NAME;
    private static final java.lang.String S_CASESENSITIVE;
    private static final java.lang.String S_DEFINITELYWRITABLE;
    private static final java.lang.String S_ISNULLABLE;
    private static final java.lang.String S_ISSIGNED;
    private static final java.lang.String S_ISWRITEABLE;
    private static final java.lang.String S_ISSEARCHABLE;
    private int m_SQL_TypeID;
    private int m_MetaData_TypeID;
    private int m_ColumnHeader_TypeID;
    private int m_RowSet_TypeID;
    private int m_Row_TypeID;
    private int m_Col_TypeID;
    private int m_OutParameter_TypeID;
    private int m_ColAttrib_CATALOGUE_NAME_TypeID;
    private int m_ColAttrib_DISPLAY_SIZE_TypeID;
    private int m_ColAttrib_COLUMN_LABEL_TypeID;
    private int m_ColAttrib_COLUMN_NAME_TypeID;
    private int m_ColAttrib_COLUMN_TYPE_TypeID;
    private int m_ColAttrib_COLUMN_TYPENAME_TypeID;
    private int m_ColAttrib_PRECISION_TypeID;
    private int m_ColAttrib_SCALE_TypeID;
    private int m_ColAttrib_SCHEMA_NAME_TypeID;
    private int m_ColAttrib_TABLE_NAME_TypeID;
    private int m_ColAttrib_CASESENSITIVE_TypeID;
    private int m_ColAttrib_DEFINITELYWRITEABLE_TypeID;
    private int m_ColAttrib_ISNULLABLE_TypeID;
    private int m_ColAttrib_ISSIGNED_TypeID;
    private int m_ColAttrib_ISWRITEABLE_TypeID;
    private int m_ColAttrib_ISSEARCHABLE_TypeID;
    private java.sql.Statement m_Statement;
    private org.apache.xalan.extensions.ExpressionContext m_ExpressionContext;
    private org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool;
    private java.sql.ResultSet m_ResultSet;
    private org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser;
    private int[] m_ColHeadersIdx;
    private int m_ColCount;
    private int m_MetaDataIdx;
    private int m_RowSetIdx;
    private int m_SQLIdx;
    private int m_FirstRowIdx;
    private int m_LastRowIdx;
    private boolean m_StreamingMode;
    private boolean m_MultipleResults;
    private boolean m_HasErrors;
    private boolean m_IsStatementCachingEnabled;
    private org.apache.xalan.lib.sql.XConnection m_XConnection;

    public void <init>(org.apache.xml.dtm.DTMManager, int)
    {
        org.apache.xalan.lib.sql.SQLDocument r0;
        org.apache.xml.dtm.DTMManager r1;
        int i0, $i2, $i4, $i6, $i8, $i10;

        r0 := @this: org.apache.xalan.lib.sql.SQLDocument;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: void <init>(org.apache.xml.dtm.DTMManager,int)>(r1, i0);

        r0.<org.apache.xalan.lib.sql.SQLDocument: boolean DEBUG> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_SQL_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_MetaData_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColumnHeader_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_RowSet_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_Row_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_Col_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_OutParameter_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_CATALOGUE_NAME_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_DISPLAY_SIZE_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_LABEL_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_NAME_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_TYPE_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_TYPENAME_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_PRECISION_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_SCALE_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_SCHEMA_NAME_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_TABLE_NAME_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_CASESENSITIVE_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_DEFINITELYWRITEABLE_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_ISNULLABLE_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_ISSIGNED_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_ISWRITEABLE_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_ISSEARCHABLE_TypeID> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement> = null;

        r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.extensions.ExpressionContext m_ExpressionContext> = null;

        r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool> = null;

        r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.ResultSet m_ResultSet> = null;

        r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser> = null;

        $i2 = (int) -1;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_MetaDataIdx> = $i2;

        $i4 = (int) -1;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_RowSetIdx> = $i4;

        $i6 = (int) -1;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_SQLIdx> = $i6;

        $i8 = (int) -1;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_FirstRowIdx> = $i8;

        $i10 = (int) -1;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_LastRowIdx> = $i10;

        r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_StreamingMode> = 1;

        r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_MultipleResults> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_HasErrors> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_IsStatementCachingEnabled> = 0;

        r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.XConnection m_XConnection> = null;

        return;
    }

    public static org.apache.xalan.lib.sql.SQLDocument getNewDocument(org.apache.xalan.extensions.ExpressionContext)
    {
        org.apache.xalan.extensions.ExpressionContext r0;
        org.apache.xalan.lib.sql.SQLDocument $r4;
        org.apache.xml.dtm.DTMManager $r2;
        int $i0, $i1;
        org.apache.xml.dtm.ref.DTMManagerDefault r3;
        org.apache.xpath.XPathContext$XPathExpressionContext $r1;

        r0 := @parameter0: org.apache.xalan.extensions.ExpressionContext;

        $r1 = (org.apache.xpath.XPathContext$XPathExpressionContext) r0;

        $r2 = virtualinvoke $r1.<org.apache.xpath.XPathContext$XPathExpressionContext: org.apache.xml.dtm.DTMManager getDTMManager()>();

        r3 = (org.apache.xml.dtm.ref.DTMManagerDefault) $r2;

        $i0 = virtualinvoke r3.<org.apache.xml.dtm.ref.DTMManagerDefault: int getFirstFreeDTMID()>();

        $r4 = new org.apache.xalan.lib.sql.SQLDocument;

        $i1 = $i0 << 16;

        specialinvoke $r4.<org.apache.xalan.lib.sql.SQLDocument: void <init>(org.apache.xml.dtm.DTMManager,int)>($r2, $i1);

        virtualinvoke r3.<org.apache.xml.dtm.ref.DTMManagerDefault: void addDTM(org.apache.xml.dtm.DTM,int)>($r4, $i0);

        virtualinvoke $r4.<org.apache.xalan.lib.sql.SQLDocument: void setExpressionContext(org.apache.xalan.extensions.ExpressionContext)>(r0);

        return $r4;
    }

    protected void setExpressionContext(org.apache.xalan.extensions.ExpressionContext)
    {
        org.apache.xalan.lib.sql.SQLDocument r0;
        org.apache.xalan.extensions.ExpressionContext r1;

        r0 := @this: org.apache.xalan.lib.sql.SQLDocument;

        r1 := @parameter0: org.apache.xalan.extensions.ExpressionContext;

        r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.extensions.ExpressionContext m_ExpressionContext> = r1;

        return;
    }

    public org.apache.xalan.extensions.ExpressionContext getExpressionContext()
    {
        org.apache.xalan.lib.sql.SQLDocument r0;
        org.apache.xalan.extensions.ExpressionContext $r1;

        r0 := @this: org.apache.xalan.lib.sql.SQLDocument;

        $r1 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.extensions.ExpressionContext m_ExpressionContext>;

        return $r1;
    }

    public void execute(org.apache.xalan.lib.sql.XConnection, org.apache.xalan.lib.sql.SQLQueryParser) throws java.sql.SQLException
    {
        org.apache.xalan.lib.sql.XConnection r1;
        java.sql.SQLException $r11;
        java.sql.ResultSet $r9;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i10;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xalan.lib.sql.SQLQueryParser r8;
        org.apache.xalan.lib.sql.SQLDocument r0;
        java.sql.ResultSetMetaData $r10;

        r0 := @this: org.apache.xalan.lib.sql.SQLDocument;

        r1 := @parameter0: org.apache.xalan.lib.sql.XConnection;

        r8 := @parameter1: org.apache.xalan.lib.sql.SQLQueryParser;

     label1:
        $r2 = "true";

        $r3 = virtualinvoke r1.<org.apache.xalan.lib.sql.XConnection: java.lang.String getFeature(java.lang.String)>("streaming");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_StreamingMode> = $z0;

        $r4 = "true";

        $r5 = virtualinvoke r1.<org.apache.xalan.lib.sql.XConnection: java.lang.String getFeature(java.lang.String)>("multiple-results");

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_MultipleResults> = $z1;

        $r6 = "true";

        $r7 = virtualinvoke r1.<org.apache.xalan.lib.sql.XConnection: java.lang.String getFeature(java.lang.String)>("cache-statements");

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_IsStatementCachingEnabled> = $z2;

        r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.XConnection m_XConnection> = r1;

        r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser> = r8;

        specialinvoke r0.<org.apache.xalan.lib.sql.SQLDocument: void executeSQLStatement()>();

        virtualinvoke r0.<org.apache.xalan.lib.sql.SQLDocument: void createExpandedNameTable()>();

        $i0 = r0.<org.apache.xalan.lib.sql.DTMDocument: int m_Document_TypeID>;

        $i6 = (int) -1;

        $i8 = (int) -1;

        $i1 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addElement(int,int,int,int)>(0, $i0, $i6, $i8);

        r0.<org.apache.xalan.lib.sql.DTMDocument: int m_DocumentIdx> = $i1;

        $i3 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_SQL_TypeID>;

        $i2 = r0.<org.apache.xalan.lib.sql.DTMDocument: int m_DocumentIdx>;

        $i10 = (int) -1;

        $i4 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addElement(int,int,int,int)>(1, $i3, $i2, $i10);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_SQLIdx> = $i4;

        $z3 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_MultipleResults>;

        if $z3 != 0 goto label2;

        $r9 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.ResultSet m_ResultSet>;

        $r10 = interfaceinvoke $r9.<java.sql.ResultSet: java.sql.ResultSetMetaData getMetaData()>();

        specialinvoke r0.<org.apache.xalan.lib.sql.SQLDocument: void extractSQLMetaData(java.sql.ResultSetMetaData)>($r10);

     label2:
        specialinvoke r0.<org.apache.xalan.lib.sql.SQLDocument: boolean addRowToDTMFromResultSet()>();

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_HasErrors> = 1;

        throw $r11;

     label5:
        return;

        catch java.sql.SQLException from label1 to label3 with label4;
    }

    private void executeSQLStatement() throws java.sql.SQLException
    {
        java.sql.Connection $r4;
        org.apache.xalan.lib.sql.ConnectionPool $r2, $r3;
        java.sql.ResultSet $r26;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.xalan.lib.sql.SQLDocument r0;
        java.sql.PreparedStatement $r9;
        java.sql.CallableStatement $r15;
        org.apache.xalan.extensions.ExpressionContext $r10, $r17;
        org.apache.xalan.lib.sql.XConnection $r1;
        java.sql.SQLException $r12, $r19, $r24;
        java.lang.String $r8, $r14, $r23;
        org.apache.xalan.lib.sql.SQLQueryParser $r5, $r6, $r7, $r11, $r13, $r16, $r18, $r21;
        java.sql.Statement $r20, $r22, $r25;

        r0 := @this: org.apache.xalan.lib.sql.SQLDocument;

        $r1 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.XConnection m_XConnection>;

        $r2 = virtualinvoke $r1.<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool getConnectionPool()>();

        r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool> = $r2;

        $r3 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        $r4 = interfaceinvoke $r3.<org.apache.xalan.lib.sql.ConnectionPool: java.sql.Connection getConnection()>();

        $r5 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser>;

        $z0 = virtualinvoke $r5.<org.apache.xalan.lib.sql.SQLQueryParser: boolean hasParameters()>();

        if $z0 != 0 goto label1;

        $r20 = interfaceinvoke $r4.<java.sql.Connection: java.sql.Statement createStatement()>();

        r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement> = $r20;

        $r22 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement>;

        $r21 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser>;

        $r23 = virtualinvoke $r21.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.String getSQLQuery()>();

        $z4 = interfaceinvoke $r22.<java.sql.Statement: boolean execute(java.lang.String)>($r23);

        if $z4 != 0 goto label4;

        $r24 = new java.sql.SQLException;

        specialinvoke $r24.<java.sql.SQLException: void <init>(java.lang.String)>("Error in Query");

        throw $r24;

     label1:
        $r6 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser>;

        $z1 = virtualinvoke $r6.<org.apache.xalan.lib.sql.SQLQueryParser: boolean isCallable()>();

        if $z1 == 0 goto label3;

        $r13 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser>;

        $r14 = virtualinvoke $r13.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.String getSQLQuery()>();

        $r15 = interfaceinvoke $r4.<java.sql.Connection: java.sql.CallableStatement prepareCall(java.lang.String)>($r14);

        $r16 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser>;

        virtualinvoke $r16.<org.apache.xalan.lib.sql.SQLQueryParser: void registerOutputParameters(java.sql.CallableStatement)>($r15);

        $r18 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser>;

        $r17 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.extensions.ExpressionContext m_ExpressionContext>;

        virtualinvoke $r18.<org.apache.xalan.lib.sql.SQLQueryParser: void populateStatement(java.sql.PreparedStatement,org.apache.xalan.extensions.ExpressionContext)>($r15, $r17);

        r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement> = $r15;

        $z3 = interfaceinvoke $r15.<java.sql.PreparedStatement: boolean execute()>();

        if $z3 != 0 goto label2;

        $r19 = new java.sql.SQLException;

        specialinvoke $r19.<java.sql.SQLException: void <init>(java.lang.String)>("Error in Callable Statement");

        throw $r19;

     label2:
        goto label4;

     label3:
        $r7 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser>;

        $r8 = virtualinvoke $r7.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.String getSQLQuery()>();

        $r9 = interfaceinvoke $r4.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r8);

        $r11 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser>;

        $r10 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.extensions.ExpressionContext m_ExpressionContext>;

        virtualinvoke $r11.<org.apache.xalan.lib.sql.SQLQueryParser: void populateStatement(java.sql.PreparedStatement,org.apache.xalan.extensions.ExpressionContext)>($r9, $r10);

        r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement> = $r9;

        $z2 = interfaceinvoke $r9.<java.sql.PreparedStatement: boolean execute()>();

        if $z2 != 0 goto label4;

        $r12 = new java.sql.SQLException;

        specialinvoke $r12.<java.sql.SQLException: void <init>(java.lang.String)>("Error in Prepared Statement");

        throw $r12;

     label4:
        $r25 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement>;

        $r26 = interfaceinvoke $r25.<java.sql.Statement: java.sql.ResultSet getResultSet()>();

        r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.ResultSet m_ResultSet> = $r26;

        return;
    }

    private void extractSQLMetaData(java.sql.ResultSetMetaData)
    {
        java.lang.Integer $r40, $r41, $r42, $r43;
        java.lang.Exception $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31;
        org.apache.xalan.lib.sql.XConnection $r32;
        java.lang.String $r5, $r6, $r7, $r10, $r13, $r14, $r34, $r35, $r36, $r37, $r38, $r39;
        int[] $r2, $r3, $r4;
        java.sql.SQLWarning $r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.xalan.lib.sql.SQLDocument r0;
        java.sql.ResultSetMetaData r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, i47, i48, $i49, $i51, $i53;

        r0 := @this: org.apache.xalan.lib.sql.SQLDocument;

        r1 := @parameter0: java.sql.ResultSetMetaData;

        $i0 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_MetaData_TypeID>;

        $z0 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_MultipleResults>;

        if $z0 == 0 goto label01;

        $i46 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_RowSetIdx>;

        goto label02;

     label01:
        $i46 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_SQLIdx>;

     label02:
        $i51 = (int) -1;

        $i1 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addElement(int,int,int,int)>(1, $i0, $i46, $i51);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_MetaDataIdx> = $i1;

     label03:
        $i2 = interfaceinvoke r1.<java.sql.ResultSetMetaData: int getColumnCount()>();

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColCount> = $i2;

        $i3 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColCount>;

        $r2 = newarray (int)[$i3];

        r0.<org.apache.xalan.lib.sql.SQLDocument: int[] m_ColHeadersIdx> = $r2;

     label04:
        goto label06;

     label05:
        $r31 := @caughtexception;

        $r32 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.XConnection m_XConnection>;

        $r33 = virtualinvoke r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.SQLWarning checkWarnings()>();

        virtualinvoke $r32.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.lib.sql.SQLDocument,java.sql.SQLWarning)>($r31, r0, $r33);

     label06:
        $i53 = (int) -1;

        i47 = $i53;

        i48 = 1;

        goto label69;

     label07:
        $r3 = r0.<org.apache.xalan.lib.sql.SQLDocument: int[] m_ColHeadersIdx>;

        $i6 = i48 - 1;

        $i5 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColumnHeader_TypeID>;

        $i4 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_MetaDataIdx>;

        $i7 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addElement(int,int,int,int)>(2, $i5, $i4, i47);

        $r3[$i6] = $i7;

        $r4 = r0.<org.apache.xalan.lib.sql.SQLDocument: int[] m_ColHeadersIdx>;

        $i8 = i48 - 1;

        i47 = $r4[$i8];

     label08:
        $r5 = interfaceinvoke r1.<java.sql.ResultSetMetaData: java.lang.String getColumnName(int)>(i48);

        $i9 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_NAME_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r5, $i9, i47);

     label09:
        goto label11;

     label10:
        $r30 := @caughtexception;

        $i45 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_NAME_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>("Not Supported", $i45, i47);

     label11:
        $r6 = interfaceinvoke r1.<java.sql.ResultSetMetaData: java.lang.String getColumnLabel(int)>(i48);

        $i10 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_LABEL_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r6, $i10, i47);

     label12:
        goto label14;

     label13:
        $r29 := @caughtexception;

        $i44 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_LABEL_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>("Not Supported", $i44, i47);

     label14:
        $r7 = interfaceinvoke r1.<java.sql.ResultSetMetaData: java.lang.String getCatalogName(int)>(i48);

        $i11 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_CATALOGUE_NAME_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r7, $i11, i47);

     label15:
        goto label17;

     label16:
        $r28 := @caughtexception;

        $i43 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_CATALOGUE_NAME_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>("Not Supported", $i43, i47);

     label17:
        $r40 = new java.lang.Integer;

        $i12 = interfaceinvoke r1.<java.sql.ResultSetMetaData: int getColumnDisplaySize(int)>(i48);

        specialinvoke $r40.<java.lang.Integer: void <init>(int)>($i12);

        $i13 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_DISPLAY_SIZE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r40, $i13, i47);

     label18:
        goto label20;

     label19:
        $r27 := @caughtexception;

        $i42 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_DISPLAY_SIZE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>("Not Supported", $i42, i47);

     label20:
        $r41 = new java.lang.Integer;

        $i14 = interfaceinvoke r1.<java.sql.ResultSetMetaData: int getColumnType(int)>(i48);

        specialinvoke $r41.<java.lang.Integer: void <init>(int)>($i14);

        $i15 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_TYPE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r41, $i15, i47);

     label21:
        goto label23;

     label22:
        $r26 := @caughtexception;

        $i41 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_TYPE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>("Not Supported", $i41, i47);

     label23:
        $r10 = interfaceinvoke r1.<java.sql.ResultSetMetaData: java.lang.String getColumnTypeName(int)>(i48);

        $i16 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_TYPENAME_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r10, $i16, i47);

     label24:
        goto label26;

     label25:
        $r25 := @caughtexception;

        $i40 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_TYPENAME_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>("Not Supported", $i40, i47);

     label26:
        $r42 = new java.lang.Integer;

        $i17 = interfaceinvoke r1.<java.sql.ResultSetMetaData: int getPrecision(int)>(i48);

        specialinvoke $r42.<java.lang.Integer: void <init>(int)>($i17);

        $i18 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_PRECISION_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r42, $i18, i47);

     label27:
        goto label29;

     label28:
        $r24 := @caughtexception;

        $i39 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_PRECISION_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>("Not Supported", $i39, i47);

     label29:
        $r43 = new java.lang.Integer;

        $i19 = interfaceinvoke r1.<java.sql.ResultSetMetaData: int getScale(int)>(i48);

        specialinvoke $r43.<java.lang.Integer: void <init>(int)>($i19);

        $i20 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_SCALE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r43, $i20, i47);

     label30:
        goto label32;

     label31:
        $r23 := @caughtexception;

        $i38 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_SCALE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>("Not Supported", $i38, i47);

     label32:
        $r13 = interfaceinvoke r1.<java.sql.ResultSetMetaData: java.lang.String getSchemaName(int)>(i48);

        $i21 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_SCHEMA_NAME_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r13, $i21, i47);

     label33:
        goto label35;

     label34:
        $r22 := @caughtexception;

        $i37 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_SCHEMA_NAME_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>("Not Supported", $i37, i47);

     label35:
        $r14 = interfaceinvoke r1.<java.sql.ResultSetMetaData: java.lang.String getTableName(int)>(i48);

        $i22 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_TABLE_NAME_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r14, $i22, i47);

     label36:
        goto label38;

     label37:
        $r21 := @caughtexception;

        $i36 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_TABLE_NAME_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>("Not Supported", $i36, i47);

     label38:
        $z1 = interfaceinvoke r1.<java.sql.ResultSetMetaData: boolean isCaseSensitive(int)>(i48);

        if $z1 == 0 goto label39;

        $r34 = "true";

        goto label40;

     label39:
        $r34 = "false";

     label40:
        $i23 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_CASESENSITIVE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r34, $i23, i47);

     label41:
        goto label43;

     label42:
        $r20 := @caughtexception;

        $i35 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_CASESENSITIVE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>("Not Supported", $i35, i47);

     label43:
        $z2 = interfaceinvoke r1.<java.sql.ResultSetMetaData: boolean isDefinitelyWritable(int)>(i48);

        if $z2 == 0 goto label44;

        $r35 = "true";

        goto label45;

     label44:
        $r35 = "false";

     label45:
        $i24 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_DEFINITELYWRITEABLE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r35, $i24, i47);

     label46:
        goto label48;

     label47:
        $r19 := @caughtexception;

        $i34 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_DEFINITELYWRITEABLE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>("Not Supported", $i34, i47);

     label48:
        $i25 = interfaceinvoke r1.<java.sql.ResultSetMetaData: int isNullable(int)>(i48);

        if $i25 == 0 goto label49;

        $r36 = "true";

        goto label50;

     label49:
        $r36 = "false";

     label50:
        $i26 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_ISNULLABLE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r36, $i26, i47);

     label51:
        goto label53;

     label52:
        $r18 := @caughtexception;

        $i33 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_ISNULLABLE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>("Not Supported", $i33, i47);

     label53:
        $z3 = interfaceinvoke r1.<java.sql.ResultSetMetaData: boolean isSigned(int)>(i48);

        if $z3 == 0 goto label54;

        $r37 = "true";

        goto label55;

     label54:
        $r37 = "false";

     label55:
        $i27 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_ISSIGNED_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r37, $i27, i47);

     label56:
        goto label58;

     label57:
        $r17 := @caughtexception;

        $i32 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_ISSIGNED_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>("Not Supported", $i32, i47);

     label58:
        $z4 = interfaceinvoke r1.<java.sql.ResultSetMetaData: boolean isWritable(int)>(i48);

        if $z4 != 1 goto label59;

        $r38 = "true";

        goto label60;

     label59:
        $r38 = "false";

     label60:
        $i28 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_ISWRITEABLE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r38, $i28, i47);

     label61:
        goto label63;

     label62:
        $r16 := @caughtexception;

        $i31 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_ISWRITEABLE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>("Not Supported", $i31, i47);

     label63:
        $z5 = interfaceinvoke r1.<java.sql.ResultSetMetaData: boolean isSearchable(int)>(i48);

        if $z5 != 1 goto label64;

        $r39 = "true";

        goto label65;

     label64:
        $r39 = "false";

     label65:
        $i29 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_ISSEARCHABLE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r39, $i29, i47);

     label66:
        goto label68;

     label67:
        $r15 := @caughtexception;

        $i30 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_ISSEARCHABLE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>("Not Supported", $i30, i47);

     label68:
        i48 = i48 + 1;

     label69:
        $i49 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColCount>;

        if i48 <= $i49 goto label07;

        return;

        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Exception from label08 to label09 with label10;
        catch java.lang.Exception from label11 to label12 with label13;
        catch java.lang.Exception from label14 to label15 with label16;
        catch java.lang.Exception from label17 to label18 with label19;
        catch java.lang.Exception from label20 to label21 with label22;
        catch java.lang.Exception from label23 to label24 with label25;
        catch java.lang.Exception from label26 to label27 with label28;
        catch java.lang.Exception from label29 to label30 with label31;
        catch java.lang.Exception from label32 to label33 with label34;
        catch java.lang.Exception from label35 to label36 with label37;
        catch java.lang.Exception from label38 to label41 with label42;
        catch java.lang.Exception from label43 to label46 with label47;
        catch java.lang.Exception from label48 to label51 with label52;
        catch java.lang.Exception from label53 to label56 with label57;
        catch java.lang.Exception from label58 to label61 with label62;
        catch java.lang.Exception from label63 to label66 with label67;
    }

    protected void createExpandedNameTable()
    {
        org.apache.xalan.lib.sql.SQLDocument r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;

        r0 := @this: org.apache.xalan.lib.sql.SQLDocument;

        specialinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: void createExpandedNameTable()>();

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i0 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "sql", 1);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_SQL_TypeID> = $i0;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i1 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "metadata", 1);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_MetaData_TypeID> = $i1;

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i2 = virtualinvoke $r3.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "column-header", 1);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColumnHeader_TypeID> = $i2;

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i3 = virtualinvoke $r4.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "row-set", 1);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_RowSet_TypeID> = $i3;

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i4 = virtualinvoke $r5.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "row", 1);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_Row_TypeID> = $i4;

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i5 = virtualinvoke $r6.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "col", 1);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_Col_TypeID> = $i5;

        $r7 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i6 = virtualinvoke $r7.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "out-parameters", 1);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_OutParameter_TypeID> = $i6;

        $r8 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i7 = virtualinvoke $r8.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "catalogue-name", 2);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_CATALOGUE_NAME_TypeID> = $i7;

        $r9 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i8 = virtualinvoke $r9.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "column-display-size", 2);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_DISPLAY_SIZE_TypeID> = $i8;

        $r10 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i9 = virtualinvoke $r10.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "column-label", 2);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_LABEL_TypeID> = $i9;

        $r11 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i10 = virtualinvoke $r11.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "column-name", 2);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_NAME_TypeID> = $i10;

        $r12 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i11 = virtualinvoke $r12.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "column-type", 2);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_TYPE_TypeID> = $i11;

        $r13 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i12 = virtualinvoke $r13.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "column-typename", 2);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_TYPENAME_TypeID> = $i12;

        $r14 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i13 = virtualinvoke $r14.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "precision", 2);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_PRECISION_TypeID> = $i13;

        $r15 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i14 = virtualinvoke $r15.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "scale", 2);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_SCALE_TypeID> = $i14;

        $r16 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i15 = virtualinvoke $r16.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "schema-name", 2);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_SCHEMA_NAME_TypeID> = $i15;

        $r17 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i16 = virtualinvoke $r17.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "table-name", 2);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_TABLE_NAME_TypeID> = $i16;

        $r18 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i17 = virtualinvoke $r18.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "case-sensitive", 2);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_CASESENSITIVE_TypeID> = $i17;

        $r19 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i18 = virtualinvoke $r19.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "definitely-writable", 2);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_DEFINITELYWRITEABLE_TypeID> = $i18;

        $r20 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i19 = virtualinvoke $r20.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "nullable", 2);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_ISNULLABLE_TypeID> = $i19;

        $r21 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i20 = virtualinvoke $r21.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "signed", 2);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_ISSIGNED_TypeID> = $i20;

        $r22 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i21 = virtualinvoke $r22.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "writable", 2);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_ISWRITEABLE_TypeID> = $i21;

        $r23 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i22 = virtualinvoke $r23.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>("http://xml.apache.org/xalan/SQLExtension", "searchable", 2);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_ISSEARCHABLE_TypeID> = $i22;

        return;
    }

    private boolean addRowToDTMFromResultSet()
    {
        java.lang.Integer $r39;
        java.util.Vector $r8;
        java.sql.ResultSet $r1, $r6, $r21, $r24, $r36, $r37;
        org.apache.xml.utils.SuballocatedIntVector $r5, $r23;
        java.lang.Exception $r26;
        org.apache.xalan.lib.sql.ObjectArray $r3;
        org.apache.xalan.lib.sql.XConnection $r10, $r27;
        java.lang.StringBuffer $r31, $r33, $r34, $r40;
        java.lang.String $r15, $r16, $r18, $r32, $r35;
        java.sql.Statement $r12, $r19, $r20, $r22;
        int[] $r4;
        org.apache.xalan.lib.sql.QueryParameter r38;
        java.sql.SQLWarning $r9, $r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.apache.xalan.lib.sql.SQLDocument r0;
        java.sql.CallableStatement $r13;
        java.sql.ResultSetMetaData $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, i37, i38, $i39, $i40, $i41, i42, i43, i44, $i45, $i47, $i49, $i51, $i53, $i55, $i57, $i59, $i61, $i63, $i65, $i67;
        java.io.PrintStream $r30;
        org.apache.xalan.lib.sql.SQLQueryParser $r7;
        java.lang.Object $r2, $r11, $r14;

        r0 := @this: org.apache.xalan.lib.sql.SQLDocument;

     label01:
        $i0 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_FirstRowIdx>;

        $i47 = (int) -1;

        if $i0 != $i47 goto label04;

        $i34 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_RowSet_TypeID>;

        $i33 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_SQLIdx>;

        $z6 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_MultipleResults>;

        if $z6 == 0 goto label02;

        $i36 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_RowSetIdx>;

        goto label03;

     label02:
        $i36 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_MetaDataIdx>;

     label03:
        $i35 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addElement(int,int,int,int)>(1, $i34, $i33, $i36);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_RowSetIdx> = $i35;

        $z7 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_MultipleResults>;

        if $z7 == 0 goto label04;

        $r24 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.ResultSet m_ResultSet>;

        $r25 = interfaceinvoke $r24.<java.sql.ResultSet: java.sql.ResultSetMetaData getMetaData()>();

        specialinvoke r0.<org.apache.xalan.lib.sql.SQLDocument: void extractSQLMetaData(java.sql.ResultSetMetaData)>($r25);

     label04:
        $r36 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.ResultSet m_ResultSet>;

        $z9 = interfaceinvoke $r36.<java.sql.ResultSet: boolean next()>();

        if $z9 != 0 goto label16;

        $z3 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_StreamingMode>;

        if $z3 == 0 goto label05;

        $i31 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_LastRowIdx>;

        $i49 = (int) -1;

        if $i31 == $i49 goto label05;

        $r23 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i32 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_LastRowIdx>;

        $i51 = (int) -1;

        virtualinvoke $r23.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i51, $i32);

     label05:
        $r37 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.ResultSet m_ResultSet>;

        interfaceinvoke $r37.<java.sql.ResultSet: void close()>();

        $z10 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_MultipleResults>;

        if $z10 == 0 goto label08;

        goto label06;

     label06:
        $r19 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement>;

        $z5 = interfaceinvoke $r19.<java.sql.Statement: boolean getMoreResults()>();

        if $z5 != 0 goto label07;

        $r22 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement>;

        $i30 = interfaceinvoke $r22.<java.sql.Statement: int getUpdateCount()>();

        if $i30 >= 0 goto label06;

     label07:
        $r20 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement>;

        $r21 = interfaceinvoke $r20.<java.sql.Statement: java.sql.ResultSet getResultSet()>();

        r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.ResultSet m_ResultSet> = $r21;

        goto label09;

     label08:
        r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.ResultSet m_ResultSet> = null;

     label09:
        $r6 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.ResultSet m_ResultSet>;

        if $r6 == null goto label10;

        $i53 = (int) -1;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_FirstRowIdx> = $i53;

        specialinvoke r0.<org.apache.xalan.lib.sql.SQLDocument: boolean addRowToDTMFromResultSet()>();

        goto label15;

     label10:
        $r7 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.SQLQueryParser m_QueryParser>;

        $r8 = virtualinvoke $r7.<org.apache.xalan.lib.sql.SQLQueryParser: java.util.Vector getParameters()>();

        if $r8 == null goto label14;

        $i20 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_OutParameter_TypeID>;

        $i19 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_SQLIdx>;

        $i18 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_RowSetIdx>;

        $i21 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addElement(int,int,int,int)>(1, $i20, $i19, $i18);

        $i55 = (int) -1;

        i37 = $i55;

        i38 = 0;

        goto label13;

     label11:
        $r11 = virtualinvoke $r8.<java.util.Vector: java.lang.Object elementAt(int)>(i38);

        r38 = (org.apache.xalan.lib.sql.QueryParameter) $r11;

        $z4 = virtualinvoke r38.<org.apache.xalan.lib.sql.QueryParameter: boolean isOutput()>();

        if $z4 == 0 goto label12;

        $r12 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement>;

        $r13 = (java.sql.CallableStatement) $r12;

        $i22 = i38 + 1;

        $r14 = interfaceinvoke $r13.<java.sql.CallableStatement: java.lang.Object getObject(int)>($i22);

        $i23 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_Col_TypeID>;

        $i24 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addElementWithData(java.lang.Object,int,int,int,int)>($r14, 2, $i23, $i21, i37);

        i37 = $i24;

        $r15 = virtualinvoke r38.<org.apache.xalan.lib.sql.QueryParameter: java.lang.String getName()>();

        $i25 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_NAME_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r15, $i25, $i24);

        $r16 = virtualinvoke r38.<org.apache.xalan.lib.sql.QueryParameter: java.lang.String getName()>();

        $i26 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_LABEL_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r16, $i26, $i24);

        $r39 = new java.lang.Integer;

        $i27 = virtualinvoke r38.<org.apache.xalan.lib.sql.QueryParameter: int getType()>();

        specialinvoke $r39.<java.lang.Integer: void <init>(int)>($i27);

        $i28 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_TYPE_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r39, $i28, $i24);

        $r18 = virtualinvoke r38.<org.apache.xalan.lib.sql.QueryParameter: java.lang.String getTypeName()>();

        $i29 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColAttrib_COLUMN_TYPENAME_TypeID>;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addAttributeToNode(java.lang.Object,int,int)>($r18, $i29, $i24);

     label12:
        i38 = i38 + 1;

     label13:
        $i39 = virtualinvoke $r8.<java.util.Vector: int size()>();

        if i38 < $i39 goto label11;

     label14:
        $r9 = virtualinvoke r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.SQLWarning checkWarnings()>();

        if $r9 == null goto label15;

        $r10 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.XConnection m_XConnection>;

        virtualinvoke $r10.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.lib.sql.SQLDocument,java.sql.SQLWarning)>(null, null, $r9);

     label15:
        return 0;

     label16:
        $i1 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_FirstRowIdx>;

        $i57 = (int) -1;

        if $i1 != $i57 goto label19;

        $i13 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_Row_TypeID>;

        $i12 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_RowSetIdx>;

        $z1 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_MultipleResults>;

        if $z1 == 0 goto label17;

        $i40 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_MetaDataIdx>;

        goto label18;

     label17:
        $i59 = (int) -1;

        $i40 = $i59;

     label18:
        $i14 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addElement(int,int,int,int)>(2, $i13, $i12, $i40);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_FirstRowIdx> = $i14;

        $i15 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_FirstRowIdx>;

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_LastRowIdx> = $i15;

        $z2 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_StreamingMode>;

        if $z2 == 0 goto label20;

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i17 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_LastRowIdx>;

        $i16 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_LastRowIdx>;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i17, $i16);

        goto label20;

     label19:
        $z0 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_StreamingMode>;

        if $z0 != 0 goto label20;

        $i10 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_Row_TypeID>;

        $i9 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_RowSetIdx>;

        $i8 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_LastRowIdx>;

        $i11 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addElement(int,int,int,int)>(2, $i10, $i9, $i8);

        r0.<org.apache.xalan.lib.sql.SQLDocument: int m_LastRowIdx> = $i11;

     label20:
        $i41 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_LastRowIdx>;

        i42 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int _firstch(int)>($i41);

        $i61 = (int) -1;

        i43 = $i61;

        i44 = 1;

        goto label26;

     label21:
        $r1 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.ResultSet m_ResultSet>;

        $r2 = interfaceinvoke $r1.<java.sql.ResultSet: java.lang.Object getObject(int)>(i44);

        $i63 = (int) -1;

        if i42 != $i63 goto label22;

        $i4 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_Col_TypeID>;

        $i3 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_LastRowIdx>;

        $i5 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int addElementWithData(java.lang.Object,int,int,int,int)>($r2, 3, $i4, $i3, i43);

        i43 = $i5;

        $r4 = r0.<org.apache.xalan.lib.sql.SQLDocument: int[] m_ColHeadersIdx>;

        $i6 = i44 - 1;

        $i7 = $r4[$i6];

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: void cloneAttributeFromNode(int,int)>($i5, $i7);

        goto label24;

     label22:
        $i2 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int _firstch(int)>(i42);

        $i65 = (int) -1;

        if $i2 != $i65 goto label23;

        virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: void error(java.lang.String)>("Streaming Mode, Data Error");

        goto label24;

     label23:
        $r3 = r0.<org.apache.xalan.lib.sql.DTMDocument: org.apache.xalan.lib.sql.ObjectArray m_ObjectArray>;

        virtualinvoke $r3.<org.apache.xalan.lib.sql.ObjectArray: void setAt(int,java.lang.Object)>($i2, $r2);

     label24:
        $i67 = (int) -1;

        if i42 == $i67 goto label25;

        i42 = virtualinvoke r0.<org.apache.xalan.lib.sql.SQLDocument: int _nextsib(int)>(i42);

     label25:
        i44 = i44 + 1;

     label26:
        $i45 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_ColCount>;

        if i44 <= $i45 goto label21;

     label27:
        goto label30;

     label28:
        $r26 := @caughtexception;

        $z8 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean DEBUG>;

        if $z8 == 0 goto label29;

        $r30 = <java.lang.System: java.io.PrintStream out>;

        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SQL Error Fetching next row [");

        $r32 = virtualinvoke $r26.<java.lang.Throwable: java.lang.String getLocalizedMessage()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r35);

     label29:
        $r27 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.XConnection m_XConnection>;

        $r28 = virtualinvoke r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.SQLWarning checkWarnings()>();

        virtualinvoke $r27.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.lib.sql.SQLDocument,java.sql.SQLWarning)>($r26, r0, $r28);

        r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_HasErrors> = 1;

     label30:
        return 1;

        catch java.lang.Exception from label01 to label27 with label28;
    }

    public boolean hasErrors()
    {
        org.apache.xalan.lib.sql.SQLDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.SQLDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_HasErrors>;

        return $z0;
    }

    public void close()
    {
        java.sql.Connection r15;
        org.apache.xalan.lib.sql.XConnection $r10;
        org.apache.xalan.lib.sql.ConnectionPool $r5, $r6;
        java.sql.ResultSet $r2, $r9;
        java.sql.SQLWarning $r1;
        boolean $z0;
        org.apache.xalan.lib.sql.SQLDocument r0;
        java.lang.Exception $r11, $r12, $r13, $r14;
        org.apache.xml.dtm.DTMManager $r4;
        java.sql.Statement $r3, $r7, $r8;

        r0 := @this: org.apache.xalan.lib.sql.SQLDocument;

     label01:
        $r1 = virtualinvoke r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.SQLWarning checkWarnings()>();

        if $r1 == null goto label02;

        $r10 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.XConnection m_XConnection>;

        virtualinvoke $r10.<org.apache.xalan.lib.sql.XConnection: void setError(java.lang.Exception,org.apache.xalan.lib.sql.SQLDocument,java.sql.SQLWarning)>(null, null, $r1);

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

     label04:
        $r2 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.ResultSet m_ResultSet>;

        if null == $r2 goto label05;

        $r9 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.ResultSet m_ResultSet>;

        interfaceinvoke $r9.<java.sql.ResultSet: void close()>();

        r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.ResultSet m_ResultSet> = null;

     label05:
        goto label07;

     label06:
        $r13 := @caughtexception;

     label07:
        r15 = null;

     label08:
        $r3 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement>;

        if null == $r3 goto label09;

        $r7 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement>;

        r15 = interfaceinvoke $r7.<java.sql.Statement: java.sql.Connection getConnection()>();

        $r8 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement>;

        interfaceinvoke $r8.<java.sql.Statement: void close()>();

        r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement> = null;

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

     label11:
        if r15 == null goto label13;

        $z0 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_HasErrors>;

        if $z0 == 0 goto label12;

        $r6 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        interfaceinvoke $r6.<org.apache.xalan.lib.sql.ConnectionPool: void releaseConnectionOnError(java.sql.Connection)>(r15);

        goto label13;

     label12:
        $r5 = r0.<org.apache.xalan.lib.sql.SQLDocument: org.apache.xalan.lib.sql.ConnectionPool m_ConnectionPool>;

        interfaceinvoke $r5.<org.apache.xalan.lib.sql.ConnectionPool: void releaseConnection(java.sql.Connection)>(r15);

     label13:
        goto label15;

     label14:
        $r11 := @caughtexception;

     label15:
        $r4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMManager getManager()>();

        virtualinvoke $r4.<org.apache.xml.dtm.DTMManager: boolean release(org.apache.xml.dtm.DTM,boolean)>(r0, 1);

        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label08 to label09 with label10;
        catch java.lang.Exception from label11 to label13 with label14;
    }

    protected boolean nextNode()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.SQLDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.SQLDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("nextNode()");

     label1:
        return 0;
    }

    protected int _nextsib(int)
    {
        java.sql.ResultSet $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r3, $r4;
        org.apache.xalan.lib.sql.SQLDocument r0;

        r0 := @this: org.apache.xalan.lib.sql.SQLDocument;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.ResultSet m_ResultSet>;

        if $r1 == null goto label6;

        $i1 = virtualinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int _exptype(int)>(i0);

        $i2 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_Row_TypeID>;

        if $i1 != $i2 goto label2;

        $i6 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_LastRowIdx>;

        if i0 < $i6 goto label2;

        $z2 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean DEBUG>;

        if $z2 == 0 goto label1;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("reading from the ResultSet");

     label1:
        specialinvoke r0.<org.apache.xalan.lib.sql.SQLDocument: boolean addRowToDTMFromResultSet()>();

        goto label6;

     label2:
        $z0 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean m_MultipleResults>;

        if $z0 == 0 goto label6;

        $i3 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_RowSetIdx>;

        if i0 != $i3 goto label6;

        $z1 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean DEBUG>;

        if $z1 == 0 goto label3;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("reading for next ResultSet");

     label3:
        $i5 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_RowSetIdx>;

        goto label5;

     label4:
        specialinvoke r0.<org.apache.xalan.lib.sql.SQLDocument: boolean addRowToDTMFromResultSet()>();

     label5:
        $i4 = r0.<org.apache.xalan.lib.sql.SQLDocument: int m_RowSetIdx>;

        if $i5 != $i4 goto label6;

        $r2 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.ResultSet m_ResultSet>;

        if $r2 != null goto label4;

     label6:
        $i7 = specialinvoke r0.<org.apache.xalan.lib.sql.DTMDocument: int _nextsib(int)>(i0);

        return $i7;
    }

    public void documentRegistration()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.SQLDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.SQLDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("Document Registration");

     label1:
        return;
    }

    public void documentRelease()
    {
        java.io.PrintStream $r1;
        org.apache.xalan.lib.sql.SQLDocument r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.SQLDocument;

        $z0 = r0.<org.apache.xalan.lib.sql.SQLDocument: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("Document Release");

     label1:
        return;
    }

    public java.sql.SQLWarning checkWarnings()
    {
        java.sql.SQLException $r4;
        org.apache.xalan.lib.sql.SQLDocument r0;
        java.sql.Statement $r1, $r2, $r3;
        java.sql.SQLWarning r5;

        r0 := @this: org.apache.xalan.lib.sql.SQLDocument;

        r5 = null;

        $r1 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement>;

        if $r1 == null goto label4;

     label1:
        $r2 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement>;

        r5 = interfaceinvoke $r2.<java.sql.Statement: java.sql.SQLWarning getWarnings()>();

        $r3 = r0.<org.apache.xalan.lib.sql.SQLDocument: java.sql.Statement m_Statement>;

        interfaceinvoke $r3.<java.sql.Statement: void clearWarnings()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return r5;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_ISSEARCHABLE> = "searchable";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_ISWRITEABLE> = "writable";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_ISSIGNED> = "signed";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_ISNULLABLE> = "nullable";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_DEFINITELYWRITABLE> = "definitely-writable";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_CASESENSITIVE> = "case-sensitive";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_TABLE_NAME> = "table-name";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_SCHEMA_NAME> = "schema-name";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_SCALE> = "scale";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_PRECISION> = "precision";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_COLUMN_TYPENAME> = "column-typename";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_COLUMN_TYPE> = "column-type";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_COLUMN_NAME> = "column-name";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_COLUMN_LABEL> = "column-label";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_DISPLAY_SIZE> = "column-display-size";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_CATALOGUE_NAME> = "catalogue-name";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_OUT_PARAMETERS> = "out-parameters";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_COL> = "col";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_ROW> = "row";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_COLUMN_HEADER> = "column-header";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_METADATA> = "metadata";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_ROW_SET> = "row-set";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_SQL> = "sql";

        <org.apache.xalan.lib.sql.SQLDocument: java.lang.String S_NAMESPACE> = "http://xml.apache.org/xalan/SQLExtension";

        return;
    }
}
