public class org.springframework.beans.DirectFieldAccessor extends org.springframework.beans.AbstractPropertyAccessor
{
    private final java.lang.Object target;
    private final java.util.Map fieldMap;
    private final org.springframework.beans.TypeConverterDelegate typeConverterDelegate;

    public void <init>(java.lang.Object)
    {
        org.springframework.beans.DirectFieldAccessor r0;
        java.util.HashMap $r1;
        java.lang.Object r2, $r3;
        java.lang.Class $r4;
        org.springframework.beans.DirectFieldAccessor$1 $r5;
        org.springframework.beans.TypeConverterDelegate $r6;

        r0 := @this: org.springframework.beans.DirectFieldAccessor;

        r2 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.springframework.beans.AbstractPropertyAccessor: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.beans.DirectFieldAccessor: java.util.Map fieldMap> = $r1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "Target object must not be null");

        r0.<org.springframework.beans.DirectFieldAccessor: java.lang.Object target> = r2;

        $r3 = r0.<org.springframework.beans.DirectFieldAccessor: java.lang.Object target>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = new org.springframework.beans.DirectFieldAccessor$1;

        specialinvoke $r5.<org.springframework.beans.DirectFieldAccessor$1: void <init>(org.springframework.beans.DirectFieldAccessor)>(r0);

        staticinvoke <org.springframework.util.ReflectionUtils: void doWithFields(java.lang.Class,org.springframework.util.ReflectionUtils$FieldCallback)>($r4, $r5);

        $r6 = new org.springframework.beans.TypeConverterDelegate;

        specialinvoke $r6.<org.springframework.beans.TypeConverterDelegate: void <init>(org.springframework.beans.PropertyEditorRegistrySupport,java.lang.Object)>(r0, r2);

        r0.<org.springframework.beans.DirectFieldAccessor: org.springframework.beans.TypeConverterDelegate typeConverterDelegate> = $r6;

        virtualinvoke r0.<org.springframework.beans.DirectFieldAccessor: void registerDefaultEditors()>();

        virtualinvoke r0.<org.springframework.beans.DirectFieldAccessor: void setExtractOldValueForEditor(boolean)>(1);

        return;
    }

    public boolean isReadableProperty(java.lang.String) throws org.springframework.beans.BeansException
    {
        java.util.Map $r2;
        org.springframework.beans.DirectFieldAccessor r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.beans.DirectFieldAccessor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.DirectFieldAccessor: java.util.Map fieldMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean isWritableProperty(java.lang.String) throws org.springframework.beans.BeansException
    {
        java.util.Map $r2;
        org.springframework.beans.DirectFieldAccessor r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.beans.DirectFieldAccessor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.DirectFieldAccessor: java.util.Map fieldMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Class getPropertyType(java.lang.String) throws org.springframework.beans.BeansException
    {
        java.util.Map $r2;
        org.springframework.beans.DirectFieldAccessor r0;
        java.lang.Object $r3;
        java.lang.Class $r5;
        java.lang.String r1;
        java.lang.reflect.Field r4;

        r0 := @this: org.springframework.beans.DirectFieldAccessor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.DirectFieldAccessor: java.util.Map fieldMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.reflect.Field) $r3;

        if r4 == null goto label1;

        $r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        return $r5;

     label1:
        return null;
    }

    public org.springframework.core.convert.TypeDescriptor getPropertyTypeDescriptor(java.lang.String) throws org.springframework.beans.BeansException
    {
        org.springframework.core.convert.TypeDescriptor $r5;
        java.util.Map $r2;
        org.springframework.beans.DirectFieldAccessor r0;
        java.lang.Object $r3;
        java.lang.String r1;
        java.lang.reflect.Field r4;

        r0 := @this: org.springframework.beans.DirectFieldAccessor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.DirectFieldAccessor: java.util.Map fieldMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.reflect.Field) $r3;

        if r4 == null goto label1;

        $r5 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r5.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.reflect.Field)>(r4);

        return $r5;

     label1:
        return null;
    }

    public java.lang.Object getPropertyValue(java.lang.String) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.DirectFieldAccessor r0;
        java.util.Map $r2;
        java.lang.String r1, $r13;
        java.lang.IllegalAccessException $r14;
        org.springframework.beans.InvalidPropertyException $r15;
        java.lang.reflect.Field r4;
        java.lang.Object $r3, $r5, $r6, $r8, $r16;
        java.lang.Class $r9, $r17;
        java.lang.StringBuilder $r10, $r11, $r12;
        org.springframework.beans.NotReadablePropertyException $r7;

        r0 := @this: org.springframework.beans.DirectFieldAccessor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.DirectFieldAccessor: java.util.Map fieldMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.reflect.Field) $r3;

        if r4 != null goto label1;

        $r7 = new org.springframework.beans.NotReadablePropertyException;

        $r8 = r0.<org.springframework.beans.DirectFieldAccessor: java.lang.Object target>;

        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Field \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.springframework.beans.NotReadablePropertyException: void <init>(java.lang.Class,java.lang.String,java.lang.String)>($r9, r1, $r13);

        throw $r7;

     label1:
        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Field)>(r4);

        $r5 = r0.<org.springframework.beans.DirectFieldAccessor: java.lang.Object target>;

        $r6 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r5);

     label2:
        return $r6;

     label3:
        $r14 := @caughtexception;

        $r15 = new org.springframework.beans.InvalidPropertyException;

        $r16 = r0.<org.springframework.beans.DirectFieldAccessor: java.lang.Object target>;

        $r17 = virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r15.<org.springframework.beans.InvalidPropertyException: void <init>(java.lang.Class,java.lang.String,java.lang.String,java.lang.Throwable)>($r17, r1, "Field is not accessible", $r14);

        throw $r15;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public void setPropertyValue(java.lang.String, java.lang.Object) throws org.springframework.beans.BeansException
    {
        java.lang.IllegalStateException $r30;
        java.util.Map $r2;
        java.lang.IllegalAccessException $r21;
        org.springframework.core.convert.ConversionException $r35;
        org.springframework.beans.TypeMismatchException $r28, $r38;
        java.lang.StringBuilder $r17, $r18, $r19;
        org.springframework.beans.NotWritablePropertyException $r14;
        org.springframework.beans.DirectFieldAccessor r0;
        org.springframework.core.convert.ConverterNotFoundException $r40;
        org.springframework.core.convert.TypeDescriptor $r11;
        java.lang.String r1, $r8, $r20;
        org.springframework.beans.TypeConverterDelegate $r7;
        java.beans.PropertyChangeEvent $r26, $r31, $r36, $r41;
        org.springframework.beans.ConversionNotSupportedException $r33, $r43;
        org.springframework.beans.InvalidPropertyException $r22;
        java.lang.reflect.Field r4;
        java.lang.IllegalArgumentException $r25;
        java.lang.Object $r3, $r5, $r6, r9, $r12, $r13, $r15, $r23, $r27, $r32, $r37, $r42, r45;
        java.lang.Class $r10, $r16, $r24, $r29, $r34, $r39, $r44;

        r0 := @this: org.springframework.beans.DirectFieldAccessor;

        r1 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.Object;

        $r2 = r0.<org.springframework.beans.DirectFieldAccessor: java.util.Map fieldMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.reflect.Field) $r3;

        if r4 != null goto label1;

        $r14 = new org.springframework.beans.NotWritablePropertyException;

        $r15 = r0.<org.springframework.beans.DirectFieldAccessor: java.lang.Object target>;

        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Field \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.springframework.beans.NotWritablePropertyException: void <init>(java.lang.Class,java.lang.String,java.lang.String)>($r16, r1, $r20);

        throw $r14;

     label1:
        r45 = null;

     label2:
        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Field)>(r4);

        $r5 = r0.<org.springframework.beans.DirectFieldAccessor: java.lang.Object target>;

        $r6 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r5);

        r45 = $r6;

        $r7 = r0.<org.springframework.beans.DirectFieldAccessor: org.springframework.beans.TypeConverterDelegate typeConverterDelegate>;

        $r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $r10 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r11 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r11.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.reflect.Field)>(r4);

        $r12 = virtualinvoke $r7.<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Class,org.springframework.core.convert.TypeDescriptor)>($r8, $r6, r9, $r10, $r11);

        $r13 = r0.<org.springframework.beans.DirectFieldAccessor: java.lang.Object target>;

        virtualinvoke r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r13, $r12);

     label3:
        goto label9;

     label4:
        $r40 := @caughtexception;

        $r41 = new java.beans.PropertyChangeEvent;

        $r42 = r0.<org.springframework.beans.DirectFieldAccessor: java.lang.Object target>;

        specialinvoke $r41.<java.beans.PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>($r42, r1, r45, r9);

        $r43 = new org.springframework.beans.ConversionNotSupportedException;

        $r44 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        specialinvoke $r43.<org.springframework.beans.ConversionNotSupportedException: void <init>(java.beans.PropertyChangeEvent,java.lang.Class,java.lang.Throwable)>($r41, $r44, $r40);

        throw $r43;

     label5:
        $r35 := @caughtexception;

        $r36 = new java.beans.PropertyChangeEvent;

        $r37 = r0.<org.springframework.beans.DirectFieldAccessor: java.lang.Object target>;

        specialinvoke $r36.<java.beans.PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>($r37, r1, r45, r9);

        $r38 = new org.springframework.beans.TypeMismatchException;

        $r39 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        specialinvoke $r38.<org.springframework.beans.TypeMismatchException: void <init>(java.beans.PropertyChangeEvent,java.lang.Class,java.lang.Throwable)>($r36, $r39, $r35);

        throw $r38;

     label6:
        $r30 := @caughtexception;

        $r31 = new java.beans.PropertyChangeEvent;

        $r32 = r0.<org.springframework.beans.DirectFieldAccessor: java.lang.Object target>;

        specialinvoke $r31.<java.beans.PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>($r32, r1, r45, r9);

        $r33 = new org.springframework.beans.ConversionNotSupportedException;

        $r34 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        specialinvoke $r33.<org.springframework.beans.ConversionNotSupportedException: void <init>(java.beans.PropertyChangeEvent,java.lang.Class,java.lang.Throwable)>($r31, $r34, $r30);

        throw $r33;

     label7:
        $r25 := @caughtexception;

        $r26 = new java.beans.PropertyChangeEvent;

        $r27 = r0.<org.springframework.beans.DirectFieldAccessor: java.lang.Object target>;

        specialinvoke $r26.<java.beans.PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>($r27, r1, r45, r9);

        $r28 = new org.springframework.beans.TypeMismatchException;

        $r29 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        specialinvoke $r28.<org.springframework.beans.TypeMismatchException: void <init>(java.beans.PropertyChangeEvent,java.lang.Class,java.lang.Throwable)>($r26, $r29, $r25);

        throw $r28;

     label8:
        $r21 := @caughtexception;

        $r22 = new org.springframework.beans.InvalidPropertyException;

        $r23 = r0.<org.springframework.beans.DirectFieldAccessor: java.lang.Object target>;

        $r24 = virtualinvoke $r23.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r22.<org.springframework.beans.InvalidPropertyException: void <init>(java.lang.Class,java.lang.String,java.lang.String,java.lang.Throwable)>($r24, r1, "Field is not accessible", $r21);

        throw $r22;

     label9:
        return;

        catch org.springframework.core.convert.ConverterNotFoundException from label2 to label3 with label4;
        catch org.springframework.core.convert.ConversionException from label2 to label3 with label5;
        catch java.lang.IllegalStateException from label2 to label3 with label6;
        catch java.lang.IllegalArgumentException from label2 to label3 with label7;
        catch java.lang.IllegalAccessException from label2 to label3 with label8;
    }

    public java.lang.Object convertIfNecessary(java.lang.Object, java.lang.Class, org.springframework.core.MethodParameter) throws org.springframework.beans.TypeMismatchException
    {
        org.springframework.beans.ConversionNotSupportedException $r7;
        java.lang.IllegalStateException $r6;
        org.springframework.beans.DirectFieldAccessor r0;
        java.lang.IllegalArgumentException $r8;
        org.springframework.beans.TypeMismatchException $r9;
        org.springframework.core.MethodParameter r3;
        java.lang.Object r1, $r5;
        java.lang.Class r2;
        org.springframework.beans.TypeConverterDelegate $r4;

        r0 := @this: org.springframework.beans.DirectFieldAccessor;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: org.springframework.core.MethodParameter;

     label1:
        $r4 = r0.<org.springframework.beans.DirectFieldAccessor: org.springframework.beans.TypeConverterDelegate typeConverterDelegate>;

        $r5 = virtualinvoke $r4.<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class,org.springframework.core.MethodParameter)>(r1, r2, r3);

     label2:
        return $r5;

     label3:
        $r8 := @caughtexception;

        $r9 = new org.springframework.beans.TypeMismatchException;

        specialinvoke $r9.<org.springframework.beans.TypeMismatchException: void <init>(java.lang.Object,java.lang.Class,java.lang.Throwable)>(r1, r2, $r8);

        throw $r9;

     label4:
        $r6 := @caughtexception;

        $r7 = new org.springframework.beans.ConversionNotSupportedException;

        specialinvoke $r7.<org.springframework.beans.ConversionNotSupportedException: void <init>(java.lang.Object,java.lang.Class,java.lang.Throwable)>(r1, r2, $r6);

        throw $r7;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalStateException from label1 to label2 with label4;
    }

    static java.util.Map access$0(org.springframework.beans.DirectFieldAccessor)
    {
        org.springframework.beans.DirectFieldAccessor r0;
        java.util.Map $r1;

        r0 := @parameter0: org.springframework.beans.DirectFieldAccessor;

        $r1 = r0.<org.springframework.beans.DirectFieldAccessor: java.util.Map fieldMap>;

        return $r1;
    }
}
