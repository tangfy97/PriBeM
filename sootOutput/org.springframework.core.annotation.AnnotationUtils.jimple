public abstract class org.springframework.core.'annotation'.AnnotationUtils extends java.lang.Object
{
    static final java.lang.String VALUE;
    private static final java.util.Map annotatedInterfaceCache;

    static void <clinit>()
    {
        java.util.WeakHashMap $r0;

        <org.springframework.core.'annotation'.AnnotationUtils: java.lang.String VALUE> = "value";

        $r0 = new java.util.WeakHashMap;

        specialinvoke $r0.<java.util.WeakHashMap: void <init>()>();

        <org.springframework.core.'annotation'.AnnotationUtils: java.util.Map annotatedInterfaceCache> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.core.'annotation'.AnnotationUtils r0;

        r0 := @this: org.springframework.core.'annotation'.AnnotationUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.'annotation'.Annotation[] getAnnotations(java.lang.reflect.Method)
    {
        java.lang.'annotation'.Annotation[] $r2;
        java.lang.reflect.Method r0, $r1;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = staticinvoke <org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();

        return $r2;
    }

    public static java.lang.'annotation'.Annotation getAnnotation(java.lang.reflect.Method, java.lang.Class)
    {
        java.lang.'annotation'.Annotation[] $r4;
        java.lang.'annotation'.Annotation $r3, r5, $r7, r8;
        int i0, i1;
        java.lang.Class r2, $r6;
        java.lang.reflect.Method r0, $r1;

        r0 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.Class;

        $r1 = staticinvoke <org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>(r0);

        $r3 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(r2);

        r8 = $r3;

        if $r3 != null goto label4;

        $r4 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();

        i0 = lengthof $r4;

        i1 = 0;

        goto label3;

     label1:
        r5 = $r4[i1];

        $r6 = interfaceinvoke r5.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(r2);

        r8 = $r7;

        if $r7 == null goto label2;

        goto label4;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

     label4:
        return r8;
    }

    public static java.lang.'annotation'.Annotation findAnnotation(java.lang.reflect.Method, java.lang.Class)
    {
        java.lang.NoSuchMethodException $r11;
        java.lang.Class[] $r6, $r9, $r10;
        java.lang.'annotation'.Annotation $r2, $r8, r12;
        java.lang.Class r1, $r3, $r4, r13;
        java.lang.String $r5;
        java.lang.reflect.Method r0, $r7;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>(r0, r1);

        r12 = $r2;

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        r13 = $r3;

        if $r2 != null goto label5;

        $r10 = virtualinvoke $r3.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        r12 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation searchOnInterfaces(java.lang.reflect.Method,java.lang.Class,java.lang.Class[])>(r0, r1, $r10);

        goto label5;

     label1:
        $r4 = virtualinvoke r13.<java.lang.Class: java.lang.Class getSuperclass()>();

        r13 = $r4;

        if $r4 == null goto label6;

        if $r4 != class "Ljava/lang/Object;" goto label2;

        goto label6;

     label2:
        $r5 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r6 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r7 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r5, $r6);

        $r8 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>($r7, r1);

        r12 = $r8;

        if $r8 != null goto label5;

        $r9 = virtualinvoke $r4.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        r12 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation searchOnInterfaces(java.lang.reflect.Method,java.lang.Class,java.lang.Class[])>(r0, r1, $r9);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

     label5:
        if r12 == null goto label1;

     label6:
        return r12;

        catch java.lang.NoSuchMethodException from label2 to label3 with label4;
    }

    private static java.lang.'annotation'.Annotation searchOnInterfaces(java.lang.reflect.Method, java.lang.Class, java.lang.Class[])
    {
        java.lang.NoSuchMethodException $r7;
        java.lang.Class[] r0, $r4;
        int i0, i1;
        java.lang.'annotation'.Annotation r8;
        java.lang.Class r1, r6;
        java.lang.String $r3;
        java.lang.reflect.Method r2, $r5;
        boolean $z0;

        r2 := @parameter0: java.lang.reflect.Method;

        r6 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.Class[];

        r8 = null;

        i0 = lengthof r0;

        i1 = 0;

        goto label7;

     label1:
        r1 = r0[i1];

        $z0 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: boolean isInterfaceWithAnnotatedMethods(java.lang.Class)>(r1);

        if $z0 == 0 goto label6;

     label2:
        $r3 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r4 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r3, $r4);

        r8 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class)>($r5, r6);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

     label5:
        if r8 == null goto label6;

        goto label8;

     label6:
        i1 = i1 + 1;

     label7:
        if i1 < i0 goto label1;

     label8:
        return r8;

        catch java.lang.NoSuchMethodException from label2 to label3 with label4;
    }

    private static boolean isInterfaceWithAnnotatedMethods(java.lang.Class)
    {
        java.lang.Throwable $r10;
        java.lang.'annotation'.Annotation[] $r7;
        java.lang.reflect.Method[] $r5;
        java.util.Map $r0, $r2, $r8;
        int i0, $i1, i2;
        java.lang.Boolean r4, $r9;
        java.lang.reflect.Method r6;
        boolean $z0, z1, z2, z3;
        java.lang.Class r1;
        java.lang.Object $r3;

        r1 := @parameter0: java.lang.Class;

        $r0 = <org.springframework.core.'annotation'.AnnotationUtils: java.util.Map annotatedInterfaceCache>;

        entermonitor $r0;

     label01:
        $r2 = <org.springframework.core.'annotation'.AnnotationUtils: java.util.Map annotatedInterfaceCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Boolean) $r3;

        if r4 == null goto label03;

        $z0 = virtualinvoke r4.<java.lang.Boolean: boolean booleanValue()>();

        exitmonitor $r0;

     label02:
        return $z0;

     label03:
        z1 = 0;

        z3 = 0;

        z2 = 0;

        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r5;

        i2 = 0;

        goto label06;

     label04:
        r6 = $r5[i2];

        $r7 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $i1 = lengthof $r7;

        if $i1 <= 0 goto label05;

        z1 = 1;

        z3 = 1;

        z2 = 1;

        goto label07;

     label05:
        i2 = i2 + 1;

     label06:
        if i2 < i0 goto label04;

     label07:
        $r8 = <org.springframework.core.'annotation'.AnnotationUtils: java.util.Map annotatedInterfaceCache>;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r9);

        exitmonitor $r0;

     label08:
        return z3;

     label09:
        $r10 := @caughtexception;

        exitmonitor $r0;

     label10:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public static java.lang.'annotation'.Annotation findAnnotation(java.lang.Class, java.lang.Class)
    {
        java.lang.'annotation'.Annotation[] $r8;
        int i0, i1, i2, i3;
        boolean $z0;
        java.lang.Class[] $r3;
        java.lang.'annotation'.Annotation $r2, $r4, $r7, $r10, r12;
        java.lang.Class r0, r1, $r5, $r6, $r9, r11;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(r1);

        if $r2 == null goto label01;

        return $r2;

     label01:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof $r3;

        i1 = 0;

        goto label04;

     label02:
        r11 = $r3[i1];

        $r4 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation findAnnotation(java.lang.Class,java.lang.Class)>(r11, r1);

        if $r4 == null goto label03;

        return $r4;

     label03:
        i1 = i1 + 1;

     label04:
        if i1 < i0 goto label02;

        $r5 = class "Ljava/lang/annotation/Annotation;";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label08;

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()>();

        i2 = lengthof $r8;

        i3 = 0;

        goto label07;

     label05:
        r12 = $r8[i3];

        $r9 = interfaceinvoke r12.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r10 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation findAnnotation(java.lang.Class,java.lang.Class)>($r9, r1);

        if $r10 == null goto label06;

        return $r10;

     label06:
        i3 = i3 + 1;

     label07:
        if i3 < i2 goto label05;

     label08:
        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r6 == null goto label09;

        if $r6 != class "Ljava/lang/Object;" goto label10;

     label09:
        return null;

     label10:
        $r7 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation findAnnotation(java.lang.Class,java.lang.Class)>($r6, r1);

        return $r7;
    }

    public static java.lang.Class findAnnotationDeclaringClass(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Annotation type must not be null");

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Object;");

        if $z0 == 0 goto label2;

     label1:
        return null;

     label2:
        $z1 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: boolean isAnnotationDeclaredLocally(java.lang.Class,java.lang.Class)>(r0, r1);

        if $z1 == 0 goto label3;

        $r3 = r1;

        goto label4;

     label3:
        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r3 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.Class findAnnotationDeclaringClass(java.lang.Class,java.lang.Class)>(r0, $r2);

     label4:
        return $r3;
    }

    public static boolean isAnnotationDeclaredLocally(java.lang.Class, java.lang.Class)
    {
        java.util.Iterator $r4;
        java.lang.'annotation'.Annotation[] $r2;
        java.util.List $r3;
        java.lang.'annotation'.Annotation r6;
        java.lang.Class r0, r1, $r7;
        java.lang.Object $r5;
        boolean $z0, $z1, z2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Annotation type must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Class must not be null");

        z2 = 0;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.'annotation'.Annotation) $r5;

        $r7 = interfaceinvoke r6.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label3:
        return z2;
    }

    public static boolean isAnnotationInherited(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Annotation type must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Class must not be null");

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: boolean isAnnotationDeclaredLocally(java.lang.Class,java.lang.Class)>(r0, r1);

        if $z1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.util.Map getAnnotationAttributes(java.lang.'annotation'.Annotation)
    {
        java.lang.'annotation'.Annotation r0;
        java.util.Map $r1;

        r0 := @parameter0: java.lang.'annotation'.Annotation;

        $r1 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.util.Map getAnnotationAttributes(java.lang.'annotation'.Annotation,boolean)>(r0, 0);

        return $r1;
    }

    public static java.util.Map getAnnotationAttributes(java.lang.'annotation'.Annotation, boolean)
    {
        java.lang.IllegalStateException $r16;
        java.lang.Object[] $r8;
        java.util.HashMap $r0;
        java.lang.String[] r11;
        java.lang.reflect.Method[] $r3;
        int i0, $i1, $i2, $i3, i4, i5;
        java.lang.String $r13, $r18;
        java.lang.reflect.Method r4;
        boolean z0, $z1, $z2;
        java.lang.Class[] $r5, r10;
        java.lang.Exception $r15;
        java.lang.'annotation'.Annotation r1;
        java.lang.Class $r2, $r6, $r7, $r12, $r14;
        java.lang.Object $r9, r17;

        r1 := @parameter0: java.lang.'annotation'.Annotation;

        z0 := @parameter1: boolean;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = interfaceinvoke r1.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r3;

        i4 = 0;

        goto label10;

     label01:
        r4 = $r3[i4];

        $r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r5;

        if $i1 != 0 goto label09;

        $r6 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r7 = <java.lang.Void: java.lang.Class TYPE>;

        if $r6 == $r7 goto label09;

     label02:
        $r8 = newarray (java.lang.Object)[0];

        $r9 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r8);

        r17 = $r9;

        if z0 == 0 goto label06;

        $z1 = $r9 instanceof java.lang.Class;

        if $z1 == 0 goto label03;

        $r14 = (java.lang.Class) $r9;

        r17 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        goto label06;

     label03:
        $z2 = $r9 instanceof java.lang.Class[];

        if $z2 == 0 goto label06;

        r10 = (java.lang.Class[]) $r9;

        $i2 = lengthof r10;

        r11 = newarray (java.lang.String)[$i2];

        i5 = 0;

        goto label05;

     label04:
        $r12 = r10[i5];

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        r11[i5] = $r13;

        i5 = i5 + 1;

     label05:
        $i3 = lengthof r10;

        if i5 < $i3 goto label04;

        r17 = r11;

     label06:
        $r18 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r17);

     label07:
        goto label09;

     label08:
        $r15 := @caughtexception;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not obtain annotation attribute values", $r15);

        throw $r16;

     label09:
        i4 = i4 + 1;

     label10:
        if i4 < i0 goto label01;

        return $r0;

        catch java.lang.Exception from label02 to label07 with label08;
    }

    public static java.lang.Object getValue(java.lang.'annotation'.Annotation)
    {
        java.lang.'annotation'.Annotation r0;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.'annotation'.Annotation;

        $r1 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.Object getValue(java.lang.'annotation'.Annotation,java.lang.String)>(r0, "value");

        return $r1;
    }

    public static java.lang.Object getValue(java.lang.'annotation'.Annotation, java.lang.String)
    {
        java.lang.Object[] $r5;
        java.lang.Class[] $r3;
        java.lang.Exception $r7;
        java.lang.'annotation'.Annotation r0;
        java.lang.Class $r1;
        java.lang.Object $r6;
        java.lang.String r2;
        java.lang.reflect.Method $r4;

        r0 := @parameter0: java.lang.'annotation'.Annotation;

        r2 := @parameter1: java.lang.String;

     label1:
        $r1 = interfaceinvoke r0.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r3 = newarray (java.lang.Class)[0];

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r2, $r3);

        $r5 = newarray (java.lang.Object)[0];

        $r6 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.Object getDefaultValue(java.lang.'annotation'.Annotation)
    {
        java.lang.'annotation'.Annotation r0;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.'annotation'.Annotation;

        $r1 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.Object getDefaultValue(java.lang.'annotation'.Annotation,java.lang.String)>(r0, "value");

        return $r1;
    }

    public static java.lang.Object getDefaultValue(java.lang.'annotation'.Annotation, java.lang.String)
    {
        java.lang.'annotation'.Annotation r0;
        java.lang.Class $r1;
        java.lang.Object $r3;
        java.lang.String r2;

        r0 := @parameter0: java.lang.'annotation'.Annotation;

        r2 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r3 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.Object getDefaultValue(java.lang.Class,java.lang.String)>($r1, r2);

        return $r3;
    }

    public static java.lang.Object getDefaultValue(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.Object getDefaultValue(java.lang.Class,java.lang.String)>(r0, "value");

        return $r1;
    }

    public static java.lang.Object getDefaultValue(java.lang.Class, java.lang.String)
    {
        java.lang.Class[] $r2;
        java.lang.Class r0;
        java.lang.Object $r4;
        java.lang.String r1;
        java.lang.reflect.Method $r3;
        java.lang.Exception $r5;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = newarray (java.lang.Class)[0];

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r1, $r2);

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object getDefaultValue()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
