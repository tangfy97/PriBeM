public class com.jhlabs.image.VariableBlurFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    private int hRadius;
    private int vRadius;
    private int iterations;
    private java.awt.image.BufferedImage blurMask;

    public void <init>()
    {
        com.jhlabs.image.VariableBlurFilter r0;

        r0 := @this: com.jhlabs.image.VariableBlurFilter;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.VariableBlurFilter: int hRadius> = 1;

        r0.<com.jhlabs.image.VariableBlurFilter: int vRadius> = 1;

        r0.<com.jhlabs.image.VariableBlurFilter: int iterations> = 1;

        return;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage r0, $r2, r5;
        int[] $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        com.jhlabs.image.VariableBlurFilter r1;

        r1 := @this: com.jhlabs.image.VariableBlurFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r5 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if r5 != null goto label1;

        $r2 = new java.awt.image.BufferedImage;

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);

        r5 = $r2;

     label1:
        $i2 = $i0 * $i1;

        $r3 = newarray (int)[$i2];

        $i3 = $i0 * $i1;

        $r4 = newarray (int)[$i3];

        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r0, 0, 0, $i0, $i1, $r3);

        i6 = 0;

     label2:
        $i7 = r1.<com.jhlabs.image.VariableBlurFilter: int iterations>;

        if i6 >= $i7 goto label3;

        $i4 = r1.<com.jhlabs.image.VariableBlurFilter: int hRadius>;

        virtualinvoke r1.<com.jhlabs.image.VariableBlurFilter: void blur(int[],int[],int,int,int,int)>($r3, $r4, $i0, $i1, $i4, 1);

        $i5 = r1.<com.jhlabs.image.VariableBlurFilter: int vRadius>;

        virtualinvoke r1.<com.jhlabs.image.VariableBlurFilter: void blur(int[],int[],int,int,int,int)>($r4, $r3, $i1, $i0, $i5, 2);

        i6 = i6 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r5, 0, 0, $i0, $i1, $r3);

        return r5;
    }

    public java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel)
    {
        java.awt.image.BufferedImage $r0, r1;
        java.awt.image.ColorModel r4;
        int $i0, $i1;
        java.awt.image.WritableRaster $r2;
        com.jhlabs.image.VariableBlurFilter r3;
        boolean $z0;

        r3 := @this: com.jhlabs.image.VariableBlurFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r4 := @parameter1: java.awt.image.ColorModel;

        if r4 != null goto label1;

        r4 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

     label1:
        $r0 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        $r2 = virtualinvoke r4.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i0, $i1);

        $z0 = virtualinvoke r4.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>(r4, $r2, $z0, null);

        return $r0;
    }

    public java.awt.geom.Rectangle2D getBounds2D(java.awt.image.BufferedImage)
    {
        java.awt.Rectangle $r0;
        java.awt.image.BufferedImage r1;
        int $i0, $i1;
        com.jhlabs.image.VariableBlurFilter r2;

        r2 := @this: com.jhlabs.image.VariableBlurFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        $r0 = new java.awt.Rectangle;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        return $r0;
    }

    public java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D$Double $r1;
        java.awt.geom.Point2D r0, r3;
        com.jhlabs.image.VariableBlurFilter r2;
        double $d0, $d1;

        r2 := @this: com.jhlabs.image.VariableBlurFilter;

        r0 := @parameter0: java.awt.geom.Point2D;

        r3 := @parameter1: java.awt.geom.Point2D;

        if r3 != null goto label1;

        $r1 = new java.awt.geom.Point2D$Double;

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>()>();

        r3 = $r1;

     label1:
        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r3.<java.awt.geom.Point2D: void setLocation(double,double)>($d0, $d1);

        return r3;
    }

    public java.awt.RenderingHints getRenderingHints()
    {
        com.jhlabs.image.VariableBlurFilter r0;

        r0 := @this: com.jhlabs.image.VariableBlurFilter;

        return null;
    }

    public void blur(int[], int[], int, int, int, int)
    {
        int[] r0, r1, r2, r3, r4, r8, r9;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, i94, i95, i96, i97, i98, i99, i100, i101, $i102, $i103, i104, i105, i106, i107, $i108, i109, i110, i111;
        java.awt.image.BufferedImage $r6, $r7, $r10, $r11;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        com.jhlabs.image.VariableBlurFilter r5;

        r5 := @this: com.jhlabs.image.VariableBlurFilter;

        r9 := @parameter0: int[];

        r8 := @parameter1: int[];

        i0 := @parameter2: int;

        i2 := @parameter3: int;

        i94 := @parameter4: int;

        i3 := @parameter5: int;

        i1 = i0 - 1;

        r0 = newarray (int)[i0];

        r1 = newarray (int)[i0];

        r2 = newarray (int)[i0];

        r3 = newarray (int)[i0];

        r4 = newarray (int)[i0];

        i95 = 0;

        i96 = 0;

     label01:
        if i96 >= i2 goto label15;

        i97 = i96;

        $r6 = r5.<com.jhlabs.image.VariableBlurFilter: java.awt.image.BufferedImage blurMask>;

        if $r6 == null goto label03;

        if i3 != 1 goto label02;

        $r11 = r5.<com.jhlabs.image.VariableBlurFilter: java.awt.image.BufferedImage blurMask>;

        virtualinvoke r5.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>($r11, 0, i96, i0, 1, r4);

        goto label03;

     label02:
        $r10 = r5.<com.jhlabs.image.VariableBlurFilter: java.awt.image.BufferedImage blurMask>;

        virtualinvoke r5.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>($r10, i96, 0, 1, i0, r4);

     label03:
        i98 = 0;

     label04:
        if i98 >= i0 goto label06;

        $i70 = i95 + i98;

        i99 = r9[$i70];

        $i71 = i99 >> 24;

        $i72 = $i71 & 255;

        r3[i98] = $i72;

        $i73 = i99 >> 16;

        $i74 = $i73 & 255;

        r0[i98] = $i74;

        $i75 = i99 >> 8;

        $i76 = $i75 & 255;

        r1[i98] = $i76;

        $i77 = i99 & 255;

        r2[i98] = $i77;

        if i98 == 0 goto label05;

        $i80 = r3[i98];

        $i78 = i98 - 1;

        $i79 = r3[$i78];

        $i81 = $i80 + $i79;

        r3[i98] = $i81;

        $i84 = r0[i98];

        $i82 = i98 - 1;

        $i83 = r0[$i82];

        $i85 = $i84 + $i83;

        r0[i98] = $i85;

        $i88 = r1[i98];

        $i86 = i98 - 1;

        $i87 = r1[$i86];

        $i89 = $i88 + $i87;

        r1[i98] = $i89;

        $i92 = r2[i98];

        $i90 = i98 - 1;

        $i91 = r2[$i90];

        $i93 = $i92 + $i91;

        r2[i98] = $i93;

     label05:
        i98 = i98 + 1;

        goto label04;

     label06:
        i100 = 0;

     label07:
        if i100 >= i0 goto label14;

        $r7 = r5.<com.jhlabs.image.VariableBlurFilter: java.awt.image.BufferedImage blurMask>;

        if $r7 == null goto label09;

        if i3 != 1 goto label08;

        $i66 = r4[i100];

        $i68 = $i66 & 255;

        $i67 = r5.<com.jhlabs.image.VariableBlurFilter: int hRadius>;

        $i69 = $i68 * $i67;

        $f8 = (float) $i69;

        $f9 = $f8 / 255.0F;

        i101 = (int) $f9;

        goto label11;

     label08:
        $i62 = r4[i100];

        $i64 = $i62 & 255;

        $i63 = r5.<com.jhlabs.image.VariableBlurFilter: int vRadius>;

        $i65 = $i64 * $i63;

        $f6 = (float) $i65;

        $f7 = $f6 / 255.0F;

        i101 = (int) $f7;

        goto label11;

     label09:
        if i3 != 1 goto label10;

        $f3 = virtualinvoke r5.<com.jhlabs.image.VariableBlurFilter: float blurRadiusAt(int,int,int,int)>(i100, i96, i0, i2);

        $i61 = r5.<com.jhlabs.image.VariableBlurFilter: int hRadius>;

        $f4 = (float) $i61;

        $f5 = $f3 * $f4;

        i101 = (int) $f5;

        goto label11;

     label10:
        $f0 = virtualinvoke r5.<com.jhlabs.image.VariableBlurFilter: float blurRadiusAt(int,int,int,int)>(i96, i100, i2, i0);

        $i4 = r5.<com.jhlabs.image.VariableBlurFilter: int vRadius>;

        $f1 = (float) $i4;

        $f2 = $f0 * $f1;

        i101 = (int) $f2;

     label11:
        $i102 = 2 * i101;

        $i103 = $i102 + 1;

        i104 = 0;

        i105 = 0;

        i106 = 0;

        i107 = 0;

        $i108 = i100 + i101;

        i109 = $i108;

        if $i108 <= i1 goto label12;

        i110 = $i108 - i1;

        $i42 = r3[i1];

        $i40 = i1 - 1;

        $i41 = r3[$i40];

        $i43 = $i42 - $i41;

        $i44 = $i43 * i110;

        i104 = 0 + $i44;

        $i47 = r0[i1];

        $i45 = i1 - 1;

        $i46 = r0[$i45];

        $i48 = $i47 - $i46;

        $i49 = $i48 * i110;

        i105 = 0 + $i49;

        $i52 = r1[i1];

        $i50 = i1 - 1;

        $i51 = r1[$i50];

        $i53 = $i52 - $i51;

        $i54 = $i53 * i110;

        i106 = 0 + $i54;

        $i57 = r2[i1];

        $i55 = i1 - 1;

        $i56 = r2[$i55];

        $i58 = $i57 - $i56;

        $i59 = $i58 * i110;

        i107 = 0 + $i59;

        i109 = i1;

     label12:
        $i5 = i100 - i101;

        $i60 = $i5 - 1;

        i111 = $i60;

        if $i60 >= 0 goto label13;

        $i28 = r3[0];

        $i29 = $i28 * $i60;

        i104 = i104 - $i29;

        $i30 = r0[0];

        $i31 = $i30 * $i60;

        i105 = i105 - $i31;

        $i32 = r1[0];

        $i33 = $i32 * $i60;

        i106 = i106 - $i33;

        $i34 = r2[0];

        $i35 = $i34 * $i60;

        i107 = i107 - $i35;

        i111 = 0;

     label13:
        $i7 = r3[i109];

        $i6 = r3[i111];

        $i8 = $i7 - $i6;

        $i36 = i104 + $i8;

        $i10 = r0[i109];

        $i9 = r0[i111];

        $i11 = $i10 - $i9;

        $i37 = i105 + $i11;

        $i13 = r1[i109];

        $i12 = r1[i111];

        $i14 = $i13 - $i12;

        $i38 = i106 + $i14;

        $i16 = r2[i109];

        $i15 = r2[i111];

        $i17 = $i16 - $i15;

        $i39 = i107 + $i17;

        $i18 = $i36 / $i103;

        $i21 = $i18 << 24;

        $i19 = $i37 / $i103;

        $i20 = $i19 << 16;

        $i24 = $i21 | $i20;

        $i22 = $i38 / $i103;

        $i23 = $i22 << 8;

        $i26 = $i24 | $i23;

        $i25 = $i39 / $i103;

        $i27 = $i26 | $i25;

        r8[i97] = $i27;

        i97 = i97 + i2;

        i100 = i100 + 1;

        goto label07;

     label14:
        i95 = i95 + i0;

        i96 = i96 + 1;

        goto label01;

     label15:
        return;
    }

    protected float blurRadiusAt(int, int, int, int)
    {
        int i0, i1, i2, i3;
        float $f0, $f1, $f2;
        com.jhlabs.image.VariableBlurFilter r0;

        r0 := @this: com.jhlabs.image.VariableBlurFilter;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        i3 := @parameter3: int;

        $f1 = (float) i0;

        $f0 = (float) i1;

        $f2 = $f1 / $f0;

        return $f2;
    }

    public void setHRadius(int)
    {
        int i0;
        com.jhlabs.image.VariableBlurFilter r0;

        r0 := @this: com.jhlabs.image.VariableBlurFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.VariableBlurFilter: int hRadius> = i0;

        return;
    }

    public int getHRadius()
    {
        int $i0;
        com.jhlabs.image.VariableBlurFilter r0;

        r0 := @this: com.jhlabs.image.VariableBlurFilter;

        $i0 = r0.<com.jhlabs.image.VariableBlurFilter: int hRadius>;

        return $i0;
    }

    public void setVRadius(int)
    {
        int i0;
        com.jhlabs.image.VariableBlurFilter r0;

        r0 := @this: com.jhlabs.image.VariableBlurFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.VariableBlurFilter: int vRadius> = i0;

        return;
    }

    public int getVRadius()
    {
        int $i0;
        com.jhlabs.image.VariableBlurFilter r0;

        r0 := @this: com.jhlabs.image.VariableBlurFilter;

        $i0 = r0.<com.jhlabs.image.VariableBlurFilter: int vRadius>;

        return $i0;
    }

    public void setRadius(int)
    {
        int i0;
        com.jhlabs.image.VariableBlurFilter r0;

        r0 := @this: com.jhlabs.image.VariableBlurFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.VariableBlurFilter: int vRadius> = i0;

        r0.<com.jhlabs.image.VariableBlurFilter: int hRadius> = i0;

        return;
    }

    public int getRadius()
    {
        int $i0;
        com.jhlabs.image.VariableBlurFilter r0;

        r0 := @this: com.jhlabs.image.VariableBlurFilter;

        $i0 = r0.<com.jhlabs.image.VariableBlurFilter: int hRadius>;

        return $i0;
    }

    public void setIterations(int)
    {
        int i0;
        com.jhlabs.image.VariableBlurFilter r0;

        r0 := @this: com.jhlabs.image.VariableBlurFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.VariableBlurFilter: int iterations> = i0;

        return;
    }

    public int getIterations()
    {
        int $i0;
        com.jhlabs.image.VariableBlurFilter r0;

        r0 := @this: com.jhlabs.image.VariableBlurFilter;

        $i0 = r0.<com.jhlabs.image.VariableBlurFilter: int iterations>;

        return $i0;
    }

    public void setBlurMask(java.awt.image.BufferedImage)
    {
        com.jhlabs.image.VariableBlurFilter r0;
        java.awt.image.BufferedImage r1;

        r0 := @this: com.jhlabs.image.VariableBlurFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r0.<com.jhlabs.image.VariableBlurFilter: java.awt.image.BufferedImage blurMask> = r1;

        return;
    }

    public java.awt.image.BufferedImage getBlurMask()
    {
        com.jhlabs.image.VariableBlurFilter r0;
        java.awt.image.BufferedImage $r1;

        r0 := @this: com.jhlabs.image.VariableBlurFilter;

        $r1 = r0.<com.jhlabs.image.VariableBlurFilter: java.awt.image.BufferedImage blurMask>;

        return $r1;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.VariableBlurFilter r0;

        r0 := @this: com.jhlabs.image.VariableBlurFilter;

        return "Blur/Variable Blur...";
    }
}
