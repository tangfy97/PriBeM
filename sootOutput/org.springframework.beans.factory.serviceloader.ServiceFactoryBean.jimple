public class org.springframework.beans.factory.serviceloader.ServiceFactoryBean extends org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean implements org.springframework.beans.factory.BeanClassLoaderAware
{

    public void <init>()
    {
        org.springframework.beans.factory.serviceloader.ServiceFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.serviceloader.ServiceFactoryBean;

        specialinvoke r0.<org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean: void <init>()>();

        return;
    }

    protected java.lang.Object getObjectToExpose(java.util.ServiceLoader)
    {
        java.lang.IllegalStateException $r3;
        java.util.Iterator $r1;
        java.util.ServiceLoader r0;
        org.springframework.beans.factory.serviceloader.ServiceFactoryBean r5;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r7, $r8;
        java.lang.Class $r6;
        java.lang.String $r9;
        boolean $z0;

        r5 := @this: org.springframework.beans.factory.serviceloader.ServiceFactoryBean;

        r0 := @parameter0: java.util.ServiceLoader;

        $r1 = virtualinvoke r0.<java.util.ServiceLoader: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("ServiceLoader could not find service for type [");

        $r6 = virtualinvoke r5.<org.springframework.beans.factory.serviceloader.ServiceFactoryBean: java.lang.Class getServiceType()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        return $r2;
    }

    public java.lang.Class getObjectType()
    {
        org.springframework.beans.factory.serviceloader.ServiceFactoryBean r0;
        java.lang.Class $r1;

        r0 := @this: org.springframework.beans.factory.serviceloader.ServiceFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.serviceloader.ServiceFactoryBean: java.lang.Class getServiceType()>();

        return $r1;
    }
}
