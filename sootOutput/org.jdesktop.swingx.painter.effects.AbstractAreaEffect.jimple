public class org.jdesktop.swingx.painter.effects.AbstractAreaEffect extends java.lang.Object implements org.jdesktop.swingx.painter.effects.AreaEffect
{
    private static final boolean debug;
    java.awt.image.BufferedImage _clipImage;
    private java.awt.Color brushColor;
    private java.beans.PropertyChangeSupport propertyChangeSupport;
    private int brushSteps;
    private int effectWidth;
    private boolean renderInsideShape;
    private java.awt.geom.Point2D offset;
    private boolean shouldFillShape;
    private boolean shapeMasked;

    public void <init>()
    {
        java.awt.Color $r2;
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;
        java.beans.PropertyChangeSupport $r1;
        java.awt.Point $r3;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.image.BufferedImage _clipImage> = null;

        $r1 = new java.beans.PropertyChangeSupport;

        specialinvoke $r1.<java.beans.PropertyChangeSupport: void <init>(java.lang.Object)>(r0);

        r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.beans.PropertyChangeSupport propertyChangeSupport> = $r1;

        $r2 = <java.awt.Color: java.awt.Color BLACK>;

        virtualinvoke r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: void setBrushColor(java.awt.Color)>($r2);

        virtualinvoke r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: void setBrushSteps(int)>(10);

        virtualinvoke r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: void setEffectWidth(int)>(8);

        virtualinvoke r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: void setRenderInsideShape(boolean)>(0);

        $r3 = new java.awt.Point;

        specialinvoke $r3.<java.awt.Point: void <init>(int,int)>(4, 4);

        virtualinvoke r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: void setOffset(java.awt.geom.Point2D)>($r3);

        virtualinvoke r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: void setShouldFillShape(boolean)>(1);

        virtualinvoke r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: void setShapeMasked(boolean)>(1);

        return;
    }

    public void apply(java.awt.Graphics2D, java.awt.Shape, int, int)
    {
        java.awt.Color $r12, $r19;
        java.awt.geom.Rectangle2D $r1, $r2, $r3, $r4;
        java.lang.Throwable $r24;
        java.awt.AlphaComposite $r13, $r18;
        java.awt.RenderingHints$Key $r9, $r15;
        java.awt.geom.Point2D $r16, $r17, $r20, $r21;
        java.awt.geom.Area $r22, $r23;
        boolean $z0, $z1;
        java.awt.Shape r0;
        java.awt.image.BufferedImage $r10;
        java.awt.Rectangle $r5;
        java.awt.Graphics2D r7, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r6;
        java.lang.Object $r8, $r14;

        r6 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        r7 := @parameter0: java.awt.Graphics2D;

        r0 := @parameter1: java.awt.Shape;

        i20 := @parameter2: int;

        i21 := @parameter3: int;

        $r1 = interfaceinvoke r0.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: double getWidth()>();

        $r2 = interfaceinvoke r0.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d1 = virtualinvoke $r2.<java.awt.geom.Rectangle2D: double getX()>();

        $d2 = $d0 + $d1;

        i22 = (int) $d2;

        $r3 = interfaceinvoke r0.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d3 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getHeight()>();

        $r4 = interfaceinvoke r0.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d4 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getY()>();

        $d5 = $d3 + $d4;

        i23 = (int) $d5;

        $r5 = new java.awt.Rectangle;

        $i0 = virtualinvoke r6.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: int getEffectWidth()>();

        $i1 = $i0 * 2;

        $i2 = i22 + $i1;

        $i3 = $i2 + 1;

        $i4 = virtualinvoke r6.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: int getEffectWidth()>();

        $i5 = $i4 * 2;

        $i6 = i23 + $i5;

        $i7 = $i6 + 1;

        specialinvoke $r5.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i3, $i7);

        $z0 = virtualinvoke r6.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: boolean isShapeMasked()>();

        if $z0 == 0 goto label7;

        $r10 = specialinvoke r6.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.image.BufferedImage getClipImage(java.awt.Rectangle)>($r5);

        $r11 = virtualinvoke $r10.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

     label1:
        $r12 = <java.awt.Color: java.awt.Color BLACK>;

        virtualinvoke $r11.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r12);

        $r13 = <java.awt.AlphaComposite: java.awt.AlphaComposite Clear>;

        virtualinvoke $r11.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r13);

        $i9 = $r5.<java.awt.Rectangle: int width>;

        $i8 = $r5.<java.awt.Rectangle: int height>;

        virtualinvoke $r11.<java.awt.Graphics2D: void fillRect(int,int,int,int)>(0, 0, $i9, $i8);

        $r15 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r14 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>;

        virtualinvoke $r11.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r15, $r14);

        $i10 = virtualinvoke r6.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: int getEffectWidth()>();

        $d6 = (double) $i10;

        $r16 = virtualinvoke r6.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.geom.Point2D getOffset()>();

        $d7 = virtualinvoke $r16.<java.awt.geom.Point2D: double getX()>();

        $d8 = $d6 - $d7;

        $i11 = virtualinvoke r6.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: int getEffectWidth()>();

        $d9 = (double) $i11;

        $r17 = virtualinvoke r6.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.geom.Point2D getOffset()>();

        $d10 = virtualinvoke $r17.<java.awt.geom.Point2D: double getY()>();

        $d11 = $d9 - $d10;

        virtualinvoke $r11.<java.awt.Graphics2D: void translate(double,double)>($d8, $d11);

        virtualinvoke r6.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: void paintBorderGlow(java.awt.Graphics2D,java.awt.Shape,int,int)>($r11, r0, i22, i23);

        $r18 = <java.awt.AlphaComposite: java.awt.AlphaComposite Clear>;

        virtualinvoke $r11.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r18);

        $r19 = <java.awt.Color: java.awt.Color WHITE>;

        virtualinvoke $r11.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r19);

        $z1 = virtualinvoke r6.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: boolean isRenderInsideShape()>();

        if $z1 == 0 goto label2;

        $r22 = new java.awt.geom.Area;

        specialinvoke $r22.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r5);

        $r23 = new java.awt.geom.Area;

        specialinvoke $r23.<java.awt.geom.Area: void <init>(java.awt.Shape)>(r0);

        virtualinvoke $r22.<java.awt.geom.Area: void subtract(java.awt.geom.Area)>($r23);

        virtualinvoke $r11.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r22);

        goto label3;

     label2:
        virtualinvoke $r11.<java.awt.Graphics2D: void fill(java.awt.Shape)>(r0);

     label3:
        virtualinvoke $r11.<java.awt.Graphics2D: void dispose()>();

        goto label6;

     label4:
        $r24 := @caughtexception;

     label5:
        virtualinvoke $r11.<java.awt.Graphics2D: void dispose()>();

        throw $r24;

     label6:
        $i12 = virtualinvoke r6.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: int getEffectWidth()>();

        $i13 = neg $i12;

        $r20 = virtualinvoke r6.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.geom.Point2D getOffset()>();

        $d12 = virtualinvoke $r20.<java.awt.geom.Point2D: double getX()>();

        $i14 = (int) $d12;

        $i15 = $i13 + $i14;

        $i16 = virtualinvoke r6.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: int getEffectWidth()>();

        $i17 = neg $i16;

        $r21 = virtualinvoke r6.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.geom.Point2D getOffset()>();

        $d13 = virtualinvoke $r21.<java.awt.geom.Point2D: double getY()>();

        $i18 = (int) $d13;

        $i19 = $i17 + $i18;

        virtualinvoke r7.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r10, $i15, $i19, null);

        goto label8;

     label7:
        $r9 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r8 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>;

        virtualinvoke r7.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r9, $r8);

        virtualinvoke r6.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: void paintBorderGlow(java.awt.Graphics2D,java.awt.Shape,int,int)>(r7, r0, i22, i23);

     label8:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private java.awt.image.BufferedImage getClipImage(java.awt.Rectangle)
    {
        java.awt.Rectangle r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.awt.image.BufferedImage $r1, $r3, $r4, $r5, $r6, $r8, $r9, $r10;
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;
        java.awt.Graphics $r7;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        r2 := @parameter0: java.awt.Rectangle;

        $r1 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.image.BufferedImage _clipImage>;

        if $r1 == null goto label1;

        $r3 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.image.BufferedImage _clipImage>;

        $i0 = virtualinvoke $r3.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = r2.<java.awt.Rectangle: int width>;

        if $i0 != $i1 goto label1;

        $r4 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.image.BufferedImage _clipImage>;

        $i2 = virtualinvoke $r4.<java.awt.image.BufferedImage: int getHeight()>();

        $i3 = r2.<java.awt.Rectangle: int height>;

        if $i2 == $i3 goto label2;

     label1:
        $r5 = new java.awt.image.BufferedImage;

        $i4 = r2.<java.awt.Rectangle: int width>;

        $i5 = r2.<java.awt.Rectangle: int height>;

        specialinvoke $r5.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i4, $i5, 2);

        r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.image.BufferedImage _clipImage> = $r5;

     label2:
        $r6 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.image.BufferedImage _clipImage>;

        $r7 = virtualinvoke $r6.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        $r8 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.image.BufferedImage _clipImage>;

        $i6 = virtualinvoke $r8.<java.awt.image.BufferedImage: int getWidth()>();

        $r9 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.image.BufferedImage _clipImage>;

        $i7 = virtualinvoke $r9.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke $r7.<java.awt.Graphics: void clearRect(int,int,int,int)>(0, 0, $i6, $i7);

        $r10 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.image.BufferedImage _clipImage>;

        return $r10;
    }

    protected void paintBorderGlow(java.awt.Graphics2D, java.awt.Shape, int, int)
    {
        java.awt.Color $r2;
        java.awt.geom.Point2D $r3, $r4, $r5, $r6, $r13, $r14;
        java.awt.geom.Area $r18, $r19;
        byte $b10;
        boolean $z0, $z1;
        java.awt.Shape r8;
        float $f0, f1, $f2, $f3, $f4, f5, $f6, f7;
        java.awt.BasicStroke $r20;
        java.awt.Rectangle $r17;
        java.awt.AlphaComposite $r9, $r10, $r16;
        java.awt.Graphics2D r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i11;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        r1 := @parameter0: java.awt.Graphics2D;

        r8 := @parameter1: java.awt.Shape;

        i5 := @parameter2: int;

        i6 := @parameter3: int;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: int getBrushSteps()>();

        $f0 = (float) $i0;

        f1 = 1.0F / $f0;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: boolean isRenderInsideShape()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.Color getBrushColor()>();

        virtualinvoke r1.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r2);

        $r3 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.geom.Point2D offset>;

        $d0 = virtualinvoke $r3.<java.awt.geom.Point2D: double getX()>();

        $r4 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.geom.Point2D offset>;

        $d1 = virtualinvoke $r4.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r1.<java.awt.Graphics2D: void translate(double,double)>($d0, $d1);

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: boolean isShouldFillShape()>();

        if $z1 == 0 goto label2;

        if $z0 == 0 goto label1;

        $r10 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(10, 1.0F);

        virtualinvoke r1.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r10);

        $r18 = new java.awt.geom.Area;

        $r17 = new java.awt.Rectangle;

        $r13 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.geom.Point2D offset>;

        $d6 = virtualinvoke $r13.<java.awt.geom.Point2D: double getX()>();

        $d7 = neg $d6;

        $i2 = (int) $d7;

        $i3 = $i2 - 20;

        $r14 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.geom.Point2D offset>;

        $d8 = virtualinvoke $r14.<java.awt.geom.Point2D: double getY()>();

        $d9 = neg $d8;

        $i4 = (int) $d9;

        $i9 = $i4 - 20;

        $i8 = i5 + 40;

        $i7 = i6 + 40;

        specialinvoke $r17.<java.awt.Rectangle: void <init>(int,int,int,int)>($i3, $i9, $i8, $i7);

        specialinvoke $r18.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r17);

        $r19 = new java.awt.geom.Area;

        specialinvoke $r19.<java.awt.geom.Area: void <init>(java.awt.Shape)>(r8);

        virtualinvoke $r18.<java.awt.geom.Area: void subtract(java.awt.geom.Area)>($r19);

        virtualinvoke r1.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r18);

        goto label2;

     label1:
        $r9 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(4, 1.0F);

        virtualinvoke r1.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r9);

        virtualinvoke r1.<java.awt.Graphics2D: void fill(java.awt.Shape)>(r8);

     label2:
        $r16 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(4, f1);

        virtualinvoke r1.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r16);

        f5 = 0.0F;

     label3:
        $f6 = (float) $i0;

        $b10 = f5 cmpg $f6;

        $i11 = (int) $b10;

        if $i11 >= 0 goto label4;

        $i1 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: int effectWidth>;

        $f2 = (float) $i1;

        $f4 = f5 * $f2;

        $f3 = (float) $i0;

        f7 = $f4 / $f3;

        $r20 = new java.awt.BasicStroke;

        specialinvoke $r20.<java.awt.BasicStroke: void <init>(float,int,int)>(f7, 1, 1);

        virtualinvoke r1.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r20);

        virtualinvoke r1.<java.awt.Graphics2D: void draw(java.awt.Shape)>(r8);

        f5 = f5 + 1.0F;

        goto label3;

     label4:
        $r5 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.geom.Point2D offset>;

        $d2 = virtualinvoke $r5.<java.awt.geom.Point2D: double getX()>();

        $d3 = neg $d2;

        $r6 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.geom.Point2D offset>;

        $d4 = virtualinvoke $r6.<java.awt.geom.Point2D: double getY()>();

        $d5 = neg $d4;

        virtualinvoke r1.<java.awt.Graphics2D: void translate(double,double)>($d3, $d5);

        return;
    }

    public void addPropertyChangeListener(java.beans.PropertyChangeListener)
    {
        java.beans.PropertyChangeSupport $r2;
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;
        java.beans.PropertyChangeListener r1;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        r1 := @parameter0: java.beans.PropertyChangeListener;

        $r2 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.beans.PropertyChangeSupport propertyChangeSupport>;

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void addPropertyChangeListener(java.beans.PropertyChangeListener)>(r1);

        return;
    }

    public void removePropertyChangeListener(java.beans.PropertyChangeListener)
    {
        java.beans.PropertyChangeSupport $r2;
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;
        java.beans.PropertyChangeListener r1;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        r1 := @parameter0: java.beans.PropertyChangeListener;

        $r2 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.beans.PropertyChangeSupport propertyChangeSupport>;

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void removePropertyChangeListener(java.beans.PropertyChangeListener)>(r1);

        return;
    }

    public java.awt.Color getBrushColor()
    {
        java.awt.Color $r1;
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        $r1 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.Color brushColor>;

        return $r1;
    }

    public void setBrushColor(java.awt.Color)
    {
        java.awt.Color r1, r2;
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;
        java.beans.PropertyChangeSupport $r3;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        r2 := @parameter0: java.awt.Color;

        r1 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.Color brushColor>;

        r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.Color brushColor> = r2;

        $r3 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.beans.PropertyChangeSupport propertyChangeSupport>;

        virtualinvoke $r3.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("brushColor", r1, r2);

        return;
    }

    public int getBrushSteps()
    {
        int $i0;
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        $i0 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: int brushSteps>;

        return $i0;
    }

    public void setBrushSteps(int)
    {
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;
        int i0, i1;
        java.beans.PropertyChangeSupport $r2;
        java.lang.Integer $r1, $r3;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        i1 := @parameter0: int;

        i0 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: int brushSteps>;

        r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: int brushSteps> = i1;

        $r2 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.beans.PropertyChangeSupport propertyChangeSupport>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i1);

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("brushSteps", $r1, $r3);

        return;
    }

    public int getEffectWidth()
    {
        int $i0;
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        $i0 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: int effectWidth>;

        return $i0;
    }

    public void setEffectWidth(int)
    {
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;
        int i0, i1;
        java.beans.PropertyChangeSupport $r2;
        java.lang.Integer $r1, $r3;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        i1 := @parameter0: int;

        i0 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: int effectWidth>;

        r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: int effectWidth> = i1;

        $r2 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.beans.PropertyChangeSupport propertyChangeSupport>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i1);

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("effectWidth", $r1, $r3);

        return;
    }

    public boolean isRenderInsideShape()
    {
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        $z0 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: boolean renderInsideShape>;

        return $z0;
    }

    public void setRenderInsideShape(boolean)
    {
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;
        java.lang.Boolean $r1, $r3;
        java.beans.PropertyChangeSupport $r2;
        boolean z0, z1;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        z1 := @parameter0: boolean;

        z0 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: boolean renderInsideShape>;

        r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: boolean renderInsideShape> = z1;

        $r2 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.beans.PropertyChangeSupport propertyChangeSupport>;

        $r1 = new java.lang.Boolean;

        specialinvoke $r1.<java.lang.Boolean: void <init>(boolean)>(z0);

        $r3 = new java.lang.Boolean;

        specialinvoke $r3.<java.lang.Boolean: void <init>(boolean)>(z1);

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("renderInsideShape", $r1, $r3);

        return;
    }

    public java.awt.geom.Point2D getOffset()
    {
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;
        java.awt.geom.Point2D $r1;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        $r1 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.geom.Point2D offset>;

        return $r1;
    }

    public void setOffset(java.awt.geom.Point2D)
    {
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;
        java.awt.geom.Point2D r1, r2;
        java.beans.PropertyChangeSupport $r3;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        r2 := @parameter0: java.awt.geom.Point2D;

        r1 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.geom.Point2D offset>;

        r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.awt.geom.Point2D offset> = r2;

        $r3 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.beans.PropertyChangeSupport propertyChangeSupport>;

        virtualinvoke $r3.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("offset", r1, r2);

        return;
    }

    public boolean isShouldFillShape()
    {
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        $z0 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: boolean shouldFillShape>;

        return $z0;
    }

    public void setShouldFillShape(boolean)
    {
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;
        java.lang.Boolean $r1, $r3;
        java.beans.PropertyChangeSupport $r2;
        boolean z0, z1;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        z1 := @parameter0: boolean;

        z0 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: boolean shouldFillShape>;

        r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: boolean shouldFillShape> = z1;

        $r2 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.beans.PropertyChangeSupport propertyChangeSupport>;

        $r1 = new java.lang.Boolean;

        specialinvoke $r1.<java.lang.Boolean: void <init>(boolean)>(z0);

        $r3 = new java.lang.Boolean;

        specialinvoke $r3.<java.lang.Boolean: void <init>(boolean)>(z1);

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("shouldFillShape", $r1, $r3);

        return;
    }

    public boolean isShapeMasked()
    {
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        $z0 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: boolean shapeMasked>;

        return $z0;
    }

    public void setShapeMasked(boolean)
    {
        org.jdesktop.swingx.painter.effects.AbstractAreaEffect r0;
        java.lang.Boolean $r1, $r3;
        java.beans.PropertyChangeSupport $r2;
        boolean z0, z1;

        r0 := @this: org.jdesktop.swingx.painter.effects.AbstractAreaEffect;

        z1 := @parameter0: boolean;

        z0 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: boolean shapeMasked>;

        r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: boolean shapeMasked> = z1;

        $r2 = r0.<org.jdesktop.swingx.painter.effects.AbstractAreaEffect: java.beans.PropertyChangeSupport propertyChangeSupport>;

        $r1 = new java.lang.Boolean;

        specialinvoke $r1.<java.lang.Boolean: void <init>(boolean)>(z0);

        $r3 = new java.lang.Boolean;

        specialinvoke $r3.<java.lang.Boolean: void <init>(boolean)>(z1);

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("shapeMasked", $r1, $r3);

        return;
    }

    public static void <clinit>()
    {
        <org.jdesktop.swingx.painter.effects.AbstractAreaEffect: boolean debug> = 0;

        return;
    }
}
