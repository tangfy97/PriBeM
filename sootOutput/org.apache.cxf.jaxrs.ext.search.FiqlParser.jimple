public class org.apache.cxf.jaxrs.ext.search.FiqlParser extends java.lang.Object
{
    public static final java.lang.String OR;
    public static final java.lang.String AND;
    public static final java.lang.String GT;
    public static final java.lang.String GE;
    public static final java.lang.String LT;
    public static final java.lang.String LE;
    public static final java.lang.String EQ;
    public static final java.lang.String NEQ;
    public static final java.lang.String DEFAULT_DATE_FORMAT;
    private static final java.util.regex.Pattern COMPARATORS_PATTERN;
    private static final java.util.Map OPERATORS_MAP;
    private org.apache.cxf.jaxrs.ext.search.Beanspector beanspector;
    private java.lang.Class conditionClass;
    private java.util.Map properties;

    public void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        org.apache.cxf.jaxrs.ext.search.FiqlParser r0;
        java.util.Map $r2;

        r0 := @this: org.apache.cxf.jaxrs.ext.search.FiqlParser;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        specialinvoke r0.<org.apache.cxf.jaxrs.ext.search.FiqlParser: void <init>(java.lang.Class,java.util.Map)>(r1, $r2);

        return;
    }

    public void <init>(java.lang.Class, java.util.Map)
    {
        org.apache.cxf.jaxrs.ext.search.FiqlParser r0;
        java.util.Map r3;
        java.lang.Class r1, $r2;
        boolean $z0;
        org.apache.cxf.jaxrs.ext.search.Beanspector $r4;

        r0 := @this: org.apache.cxf.jaxrs.ext.search.FiqlParser;

        r1 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = class "Lorg/apache/cxf/jaxrs/ext/search/SearchBean;";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 == 0 goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = new org.apache.cxf.jaxrs.ext.search.Beanspector;

        specialinvoke $r4.<org.apache.cxf.jaxrs.ext.search.Beanspector: void <init>(java.lang.Class)>(r1);

     label2:
        r0.<org.apache.cxf.jaxrs.ext.search.FiqlParser: org.apache.cxf.jaxrs.ext.search.Beanspector beanspector> = $r4;

        r0.<org.apache.cxf.jaxrs.ext.search.FiqlParser: java.lang.Class conditionClass> = r1;

        r0.<org.apache.cxf.jaxrs.ext.search.FiqlParser: java.util.Map properties> = r3;

        return;
    }

    public org.apache.cxf.jaxrs.ext.search.SearchCondition parse(java.lang.String) throws org.apache.cxf.jaxrs.ext.search.FiqlParseException
    {
        org.apache.cxf.jaxrs.ext.search.FiqlParser r0;
        org.apache.cxf.jaxrs.ext.search.FiqlParser$ASTNode $r2;
        java.lang.String r1;
        org.apache.cxf.jaxrs.ext.search.SearchCondition $r3;

        r0 := @this: org.apache.cxf.jaxrs.ext.search.FiqlParser;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.cxf.jaxrs.ext.search.FiqlParser: org.apache.cxf.jaxrs.ext.search.FiqlParser$ASTNode parseAndsOrsBrackets(java.lang.String)>(r1);

        $r3 = interfaceinvoke $r2.<org.apache.cxf.jaxrs.ext.search.FiqlParser$ASTNode: org.apache.cxf.jaxrs.ext.search.SearchCondition build()>();

        return $r3;
    }

    private org.apache.cxf.jaxrs.ext.search.FiqlParser$ASTNode parseAndsOrsBrackets(java.lang.String) throws org.apache.cxf.jaxrs.ext.search.FiqlParseException
    {
        org.apache.cxf.jaxrs.ext.search.FiqlParser$SubExpression $r50, $r51;
        java.lang.Integer $r36;
        java.lang.StringBuilder $r23, $r24, $r25, $r48;
        java.lang.Object[] $r28, $r35;
        java.util.ArrayList $r44, $r45;
        java.lang.String r2, $r16, $r17, $r26, $r29, $r30, $r31, $r32, $r33, $r37, $r38, $r39, r40, r41, r42;
        org.apache.cxf.jaxrs.ext.search.FiqlParseException $r46, $r47, $r49;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r6, $r7, $r11, $r12;
        org.apache.cxf.jaxrs.ext.search.FiqlParser$ASTNode $r9, $r14, r43;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, i16, i17, i18, $i19, $i20, i21, i22, $i23, $i24, $i26;
        org.apache.cxf.jaxrs.ext.search.FiqlParser r5;
        char $c13;
        java.lang.Object $r3, $r8, $r13, $r15, $r18, $r19, $r20;

        r5 := @this: org.apache.cxf.jaxrs.ext.search.FiqlParser;

        r2 := @parameter0: java.lang.String;

        $r44 = new java.util.ArrayList;

        specialinvoke $r44.<java.util.ArrayList: void <init>()>();

        $r45 = new java.util.ArrayList;

        specialinvoke $r45.<java.util.ArrayList: void <init>()>();

        i16 = 0;

        i17 = 0;

        i18 = 0;

     label01:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if i18 >= $i0 goto label11;

        $c13 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i18);

        $i23 = (int) $c13;

        if $i23 != 40 goto label02;

        i16 = i16 + 1;

        goto label03;

     label02:
        $i24 = (int) $c13;

        if $i24 != 41 goto label03;

        $i26 = (int) -1;

        i16 = i16 + $i26;

        if i16 >= 0 goto label03;

        $r46 = new org.apache.cxf.jaxrs.ext.search.FiqlParseException;

        $r35 = newarray (java.lang.Object)[1];

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i18);

        $r35[0] = $r36;

        $r37 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected closing bracket at position %d", $r35);

        specialinvoke $r46.<org.apache.cxf.jaxrs.ext.search.FiqlParseException: void <init>(java.lang.String)>($r37);

        throw $r46;

     label03:
        $r38 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c13);

        $r39 = ";";

        $z3 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>($r38);

        if $z3 != 0 goto label04;

        $r33 = ",";

        $z2 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>($r38);

        if $z2 == 0 goto label05;

     label04:
        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        if i16 != 0 goto label07;

        if $z4 == 0 goto label07;

        $r31 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i17, i18);

        $i15 = i18 + 1;

        $r32 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i18, $i15);

        interfaceinvoke $r44.<java.util.List: boolean add(java.lang.Object)>($r31);

        interfaceinvoke $r45.<java.util.List: boolean add(java.lang.Object)>($r32);

        i17 = i18 + 1;

     label07:
        $i19 = virtualinvoke r2.<java.lang.String: int length()>();

        $i20 = $i19 - 1;

        if i18 != $i20 goto label08;

        $z5 = 1;

        goto label09;

     label08:
        $z5 = 0;

     label09:
        if $z5 == 0 goto label10;

        $i14 = i18 + 1;

        $r30 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i17, $i14);

        interfaceinvoke $r44.<java.util.List: boolean add(java.lang.Object)>($r30);

        interfaceinvoke $r45.<java.util.List: boolean add(java.lang.Object)>(null);

        i17 = i18 + 1;

     label10:
        i18 = i18 + 1;

        goto label01;

     label11:
        if i16 == 0 goto label12;

        $r47 = new org.apache.cxf.jaxrs.ext.search.FiqlParseException;

        $r28 = newarray (java.lang.Object)[1];

        $r28[0] = r2;

        $r29 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unmatched opening and closing brackets in expression: %s", $r28);

        specialinvoke $r47.<org.apache.cxf.jaxrs.ext.search.FiqlParseException: void <init>(java.lang.String)>($r29);

        throw $r47;

     label12:
        $i1 = interfaceinvoke $r45.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r3 = interfaceinvoke $r45.<java.util.List: java.lang.Object get(int)>($i2);

        if $r3 == null goto label13;

        $i9 = interfaceinvoke $r45.<java.util.List: int size()>();

        $i10 = $i9 - 1;

        $r19 = interfaceinvoke $r45.<java.util.List: java.lang.Object get(int)>($i10);

        r40 = (java.lang.String) $r19;

        $i11 = interfaceinvoke $r44.<java.util.List: int size()>();

        $i12 = $i11 - 1;

        $r20 = interfaceinvoke $r44.<java.util.List: java.lang.Object get(int)>($i12);

        r41 = (java.lang.String) $r20;

        $r49 = new org.apache.cxf.jaxrs.ext.search.FiqlParseException;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dangling operator at the end of expression: ...");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r49.<org.apache.cxf.jaxrs.ext.search.FiqlParseException: void <init>(java.lang.String)>($r26);

        throw $r49;

     label13:
        i21 = 0;

        i22 = 0;

        $r50 = new org.apache.cxf.jaxrs.ext.search.FiqlParser$SubExpression;

        specialinvoke $r50.<org.apache.cxf.jaxrs.ext.search.FiqlParser$SubExpression: void <init>(org.apache.cxf.jaxrs.ext.search.FiqlParser,java.lang.String)>(r5, ",");

     label14:
        $i3 = interfaceinvoke $r45.<java.util.List: int size()>();

        if i22 >= $i3 goto label23;

     label15:
        $i5 = interfaceinvoke $r45.<java.util.List: int size()>();

        if i22 >= $i5 goto label16;

        $r17 = ";";

        $r18 = interfaceinvoke $r45.<java.util.List: java.lang.Object get(int)>(i22);

        $z1 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z1 == 0 goto label16;

        i22 = i22 + 1;

        goto label15;

     label16:
        $r51 = new org.apache.cxf.jaxrs.ext.search.FiqlParser$SubExpression;

        specialinvoke $r51.<org.apache.cxf.jaxrs.ext.search.FiqlParser$SubExpression: void <init>(org.apache.cxf.jaxrs.ext.search.FiqlParser,java.lang.String)>(r5, ";");

     label17:
        if i21 > i22 goto label20;

        $r15 = interfaceinvoke $r44.<java.util.List: java.lang.Object get(int)>(i21);

        r42 = (java.lang.String) $r15;

        $z0 = virtualinvoke r42.<java.lang.String: boolean startsWith(java.lang.String)>("(");

        if $z0 == 0 goto label18;

        $i7 = virtualinvoke r42.<java.lang.String: int length()>();

        $i8 = $i7 - 1;

        $r16 = virtualinvoke r42.<java.lang.String: java.lang.String substring(int,int)>(1, $i8);

        r43 = specialinvoke r5.<org.apache.cxf.jaxrs.ext.search.FiqlParser: org.apache.cxf.jaxrs.ext.search.FiqlParser$ASTNode parseAndsOrsBrackets(java.lang.String)>($r16);

        goto label19;

     label18:
        r43 = specialinvoke r5.<org.apache.cxf.jaxrs.ext.search.FiqlParser: org.apache.cxf.jaxrs.ext.search.FiqlParser$Comparison parseComparison(java.lang.String)>(r42);

     label19:
        virtualinvoke $r51.<org.apache.cxf.jaxrs.ext.search.FiqlParser$SubExpression: void add(org.apache.cxf.jaxrs.ext.search.FiqlParser$ASTNode)>(r43);

        i21 = i21 + 1;

        goto label17;

     label20:
        i22 = i21;

        $r11 = virtualinvoke $r51.<org.apache.cxf.jaxrs.ext.search.FiqlParser$SubExpression: java.util.List getSubnodes()>();

        $i6 = interfaceinvoke $r11.<java.util.List: int size()>();

        if $i6 != 1 goto label21;

        $r12 = virtualinvoke $r51.<org.apache.cxf.jaxrs.ext.search.FiqlParser$SubExpression: java.util.List getSubnodes()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (org.apache.cxf.jaxrs.ext.search.FiqlParser$ASTNode) $r13;

        virtualinvoke $r50.<org.apache.cxf.jaxrs.ext.search.FiqlParser$SubExpression: void add(org.apache.cxf.jaxrs.ext.search.FiqlParser$ASTNode)>($r14);

        goto label22;

     label21:
        virtualinvoke $r50.<org.apache.cxf.jaxrs.ext.search.FiqlParser$SubExpression: void add(org.apache.cxf.jaxrs.ext.search.FiqlParser$ASTNode)>($r51);

     label22:
        goto label14;

     label23:
        $r6 = virtualinvoke $r50.<org.apache.cxf.jaxrs.ext.search.FiqlParser$SubExpression: java.util.List getSubnodes()>();

        $i4 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i4 != 1 goto label24;

        $r7 = virtualinvoke $r50.<org.apache.cxf.jaxrs.ext.search.FiqlParser$SubExpression: java.util.List getSubnodes()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = (org.apache.cxf.jaxrs.ext.search.FiqlParser$ASTNode) $r8;

        return $r9;

     label24:
        return $r50;
    }

    private org.apache.cxf.jaxrs.ext.search.FiqlParser$Comparison parseComparison(java.lang.String) throws org.apache.cxf.jaxrs.ext.search.FiqlParseException
    {
        java.util.regex.Matcher $r2;
        int $i0, $i1;
        java.lang.String r0, $r7, $r8, $r9, $r10, $r11, $r19;
        org.apache.cxf.jaxrs.ext.search.FiqlParser$Comparison $r14;
        boolean $z0, $z1;
        org.apache.cxf.jaxrs.ext.search.FiqlParseException $r3, $r15;
        org.apache.cxf.jaxrs.ext.search.FiqlParser r12;
        java.lang.StringBuilder $r4, $r5, $r6, $r16, $r17, $r18;
        java.lang.Object $r13;
        java.util.regex.Pattern $r1;

        r12 := @this: org.apache.cxf.jaxrs.ext.search.FiqlParser;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.util.regex.Pattern COMPARATORS_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r2.<java.util.regex.Matcher: int start(int)>(1);

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r9 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i1 = virtualinvoke $r2.<java.util.regex.Matcher: int end(int)>(1);

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $r11 = "";

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label1;

        $r15 = new org.apache.cxf.jaxrs.ext.search.FiqlParseException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a comparison expression: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.cxf.jaxrs.ext.search.FiqlParseException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label1:
        $r13 = specialinvoke r12.<org.apache.cxf.jaxrs.ext.search.FiqlParser: java.lang.Object parseDatatype(java.lang.String,java.lang.String)>($r8, $r10);

        $r14 = new org.apache.cxf.jaxrs.ext.search.FiqlParser$Comparison;

        specialinvoke $r14.<org.apache.cxf.jaxrs.ext.search.FiqlParser$Comparison: void <init>(org.apache.cxf.jaxrs.ext.search.FiqlParser,java.lang.String,java.lang.String,java.lang.Object)>(r12, $r8, $r9, $r13);

        return $r14;

     label2:
        $r3 = new org.apache.cxf.jaxrs.ext.search.FiqlParseException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a comparison expression: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.cxf.jaxrs.ext.search.FiqlParseException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    private java.lang.Object parseDatatype(java.lang.String, java.lang.String) throws org.apache.cxf.jaxrs.ext.search.FiqlParseException
    {
        javax.xml.datatype.DatatypeConfigurationException $r32;
        java.util.Date $r45;
        javax.xml.datatype.DatatypeFactory $r36;
        javax.xml.datatype.Duration $r37;
        java.util.Map $r5, $r8;
        java.text.ParseException $r34;
        boolean $z0, $z1;
        java.lang.Exception $r16, $r38;
        org.apache.cxf.jaxrs.ext.search.Beanspector $r2, $r15;
        java.lang.StringBuilder $r11, $r13, $r19, $r20, $r21, $r23, $r28, $r29, $r30, $r44, $r47, $r49;
        java.text.SimpleDateFormat $r6;
        int $i0, $i1, $i3;
        java.lang.Boolean $r7;
        java.lang.String r0, $r10, $r12, r14, $r22, $r24, $r31, r41;
        org.apache.cxf.jaxrs.ext.search.FiqlParseException $r43, $r46, $r48, $r50;
        org.apache.cxf.jaxrs.ext.search.FiqlParser r1;
        java.lang.IllegalArgumentException $r25;
        java.lang.Class r3, $r4, $r40;
        java.lang.Object r42;

        r1 := @this: org.apache.cxf.jaxrs.ext.search.FiqlParser;

        r14 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

     label01:
        $r2 = r1.<org.apache.cxf.jaxrs.ext.search.FiqlParser: org.apache.cxf.jaxrs.ext.search.Beanspector beanspector>;

        if $r2 == null goto label02;

        $r15 = r1.<org.apache.cxf.jaxrs.ext.search.FiqlParser: org.apache.cxf.jaxrs.ext.search.Beanspector beanspector>;

        $r40 = virtualinvoke $r15.<org.apache.cxf.jaxrs.ext.search.Beanspector: java.lang.Class getAccessorType(java.lang.String)>(r14);

        goto label03;

     label02:
        $r40 = class "Ljava/lang/String;";

     label03:
        r3 = $r40;

     label04:
        goto label06;

     label05:
        $r38 := @caughtexception;

        $r43 = new org.apache.cxf.jaxrs.ext.search.FiqlParseException;

        specialinvoke $r43.<org.apache.cxf.jaxrs.ext.search.FiqlParseException: void <init>(java.lang.Throwable)>($r38);

        throw $r43;

     label06:
        $r4 = class "Ljava/util/Date;";

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r40);

        if $z0 == 0 goto label16;

     label07:
        $r5 = r1.<org.apache.cxf.jaxrs.ext.search.FiqlParser: java.util.Map properties>;

        $r6 = staticinvoke <org.apache.cxf.jaxrs.ext.search.SearchUtils: java.text.SimpleDateFormat getDateFormat(java.util.Map,java.lang.String)>($r5, "yyyy-MM-dd\'T\'HH:mm:ss.SSSZ");

        r41 = r0;

        $r8 = r1.<org.apache.cxf.jaxrs.ext.search.FiqlParser: java.util.Map properties>;

        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z1 = staticinvoke <org.apache.cxf.jaxrs.ext.search.SearchUtils: boolean isTimeZoneSupported(java.util.Map,java.lang.Boolean)>($r8, $r7);

        if $z1 == 0 goto label08;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(58);

        $i3 = (int) -1;

        if $i0 == $i3 goto label08;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r11 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $i1 = $i0 + 1;

        $r12 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r41 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        r42 = virtualinvoke $r6.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r41);

     label09:
        goto label19;

     label10:
        $r34 := @caughtexception;

     label11:
        $r45 = new java.util.Date;

        specialinvoke $r45.<java.util.Date: void <init>()>();

        $r36 = staticinvoke <javax.xml.datatype.DatatypeFactory: javax.xml.datatype.DatatypeFactory newInstance()>();

        $r37 = virtualinvoke $r36.<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.Duration newDuration(java.lang.String)>(r0);

        virtualinvoke $r37.<javax.xml.datatype.Duration: void addTo(java.util.Date)>($r45);

        r42 = $r45;

     label12:
        goto label15;

     label13:
        $r32 := @caughtexception;

        $r46 = new org.apache.cxf.jaxrs.ext.search.FiqlParseException;

        specialinvoke $r46.<org.apache.cxf.jaxrs.ext.search.FiqlParseException: void <init>(java.lang.Throwable)>($r32);

        throw $r46;

     label14:
        $r25 := @caughtexception;

        $r48 = new org.apache.cxf.jaxrs.ext.search.FiqlParseException;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can parse ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" neither as date nor duration");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r48.<org.apache.cxf.jaxrs.ext.search.FiqlParseException: void <init>(java.lang.String,java.lang.Throwable)>($r31, $r34);

        throw $r48;

     label15:
        goto label19;

     label16:
        r42 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object convertStringToPrimitive(java.lang.String,java.lang.Class)>(r0, $r40);

     label17:
        goto label19;

     label18:
        $r16 := @caughtexception;

        $r50 = new org.apache.cxf.jaxrs.ext.search.FiqlParseException;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert String value \"");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" to a value of class ");

        $r22 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r50.<org.apache.cxf.jaxrs.ext.search.FiqlParseException: void <init>(java.lang.String,java.lang.Throwable)>($r24, $r16);

        throw $r50;

     label19:
        return r42;

        catch java.lang.Exception from label01 to label04 with label05;
        catch java.text.ParseException from label07 to label09 with label10;
        catch javax.xml.datatype.DatatypeConfigurationException from label11 to label12 with label13;
        catch java.lang.IllegalArgumentException from label11 to label12 with label14;
        catch java.lang.Exception from label16 to label17 with label18;
    }

    static org.apache.cxf.jaxrs.ext.search.Beanspector access$000(org.apache.cxf.jaxrs.ext.search.FiqlParser)
    {
        org.apache.cxf.jaxrs.ext.search.FiqlParser r0;
        org.apache.cxf.jaxrs.ext.search.Beanspector $r1;

        r0 := @parameter0: org.apache.cxf.jaxrs.ext.search.FiqlParser;

        $r1 = r0.<org.apache.cxf.jaxrs.ext.search.FiqlParser: org.apache.cxf.jaxrs.ext.search.Beanspector beanspector>;

        return $r1;
    }

    static java.util.Map access$100()
    {
        java.util.Map $r0;

        $r0 = <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.util.Map OPERATORS_MAP>;

        return $r0;
    }

    static java.lang.Class access$200(org.apache.cxf.jaxrs.ext.search.FiqlParser)
    {
        java.lang.Class $r1;
        org.apache.cxf.jaxrs.ext.search.FiqlParser r0;

        r0 := @parameter0: org.apache.cxf.jaxrs.ext.search.FiqlParser;

        $r1 = r0.<org.apache.cxf.jaxrs.ext.search.FiqlParser: java.lang.Class conditionClass>;

        return $r1;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.Map $r2, $r4, $r6, $r8, $r10, $r12;
        java.lang.String $r17;
        java.lang.StringBuilder $r13, $r14, $r15, $r16;
        java.util.regex.Pattern $r18;
        org.apache.cxf.jaxrs.ext.search.ConditionType $r1, $r3, $r5, $r7, $r9, $r11;

        <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.lang.String DEFAULT_DATE_FORMAT> = "yyyy-MM-dd\'T\'HH:mm:ss.SSSZ";

        <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.lang.String NEQ> = "!=";

        <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.lang.String EQ> = "==";

        <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.lang.String LE> = "=le=";

        <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.lang.String LT> = "=lt=";

        <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.lang.String GE> = "=ge=";

        <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.lang.String GT> = "=gt=";

        <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.lang.String AND> = ";";

        <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.lang.String OR> = ",";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.util.Map OPERATORS_MAP> = $r0;

        $r2 = <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.util.Map OPERATORS_MAP>;

        $r1 = <org.apache.cxf.jaxrs.ext.search.ConditionType: org.apache.cxf.jaxrs.ext.search.ConditionType GREATER_THAN>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("=gt=", $r1);

        $r4 = <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.util.Map OPERATORS_MAP>;

        $r3 = <org.apache.cxf.jaxrs.ext.search.ConditionType: org.apache.cxf.jaxrs.ext.search.ConditionType GREATER_OR_EQUALS>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("=ge=", $r3);

        $r6 = <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.util.Map OPERATORS_MAP>;

        $r5 = <org.apache.cxf.jaxrs.ext.search.ConditionType: org.apache.cxf.jaxrs.ext.search.ConditionType LESS_THAN>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("=lt=", $r5);

        $r8 = <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.util.Map OPERATORS_MAP>;

        $r7 = <org.apache.cxf.jaxrs.ext.search.ConditionType: org.apache.cxf.jaxrs.ext.search.ConditionType LESS_OR_EQUALS>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("=le=", $r7);

        $r10 = <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.util.Map OPERATORS_MAP>;

        $r9 = <org.apache.cxf.jaxrs.ext.search.ConditionType: org.apache.cxf.jaxrs.ext.search.ConditionType EQUALS>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("==", $r9);

        $r12 = <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.util.Map OPERATORS_MAP>;

        $r11 = <org.apache.cxf.jaxrs.ext.search.ConditionType: org.apache.cxf.jaxrs.ext.search.ConditionType NOT_EQUALS>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("!=", $r11);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[\\p{ASCII}]+(");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=gt=|=ge=|=lt=|=le=|==|!=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r17);

        <org.apache.cxf.jaxrs.ext.search.FiqlParser: java.util.regex.Pattern COMPARATORS_PATTERN> = $r18;

        return;
    }
}
