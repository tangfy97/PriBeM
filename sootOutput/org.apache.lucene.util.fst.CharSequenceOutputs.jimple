public final class org.apache.lucene.util.fst.CharSequenceOutputs extends org.apache.lucene.util.fst.Outputs
{
    private static final org.apache.lucene.util.CharsRef NO_OUTPUT;
    private static final org.apache.lucene.util.fst.CharSequenceOutputs singleton;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.apache.lucene.util.fst.CharSequenceOutputs r0;

        r0 := @this: org.apache.lucene.util.fst.CharSequenceOutputs;

        specialinvoke r0.<org.apache.lucene.util.fst.Outputs: void <init>()>();

        return;
    }

    public static org.apache.lucene.util.fst.CharSequenceOutputs getSingleton()
    {
        org.apache.lucene.util.fst.CharSequenceOutputs $r0;

        $r0 = <org.apache.lucene.util.fst.CharSequenceOutputs: org.apache.lucene.util.fst.CharSequenceOutputs singleton>;

        return $r0;
    }

    public org.apache.lucene.util.CharsRef common(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)
    {
        org.apache.lucene.util.fst.CharSequenceOutputs r9;
        boolean $z0, $z1;
        java.lang.AssertionError $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i15, $i16, i17, i18, $i19, $i20;
        char $c13, $c14;
        org.apache.lucene.util.CharsRef r0, r1, $r4, $r12;
        char[] $r3, $r5, $r6;

        r9 := @this: org.apache.lucene.util.fst.CharSequenceOutputs;

        r0 := @parameter0: org.apache.lucene.util.CharsRef;

        r1 := @parameter1: org.apache.lucene.util.CharsRef;

        $z0 = <org.apache.lucene.util.fst.CharSequenceOutputs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label1:
        $z1 = <org.apache.lucene.util.fst.CharSequenceOutputs: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r1 != null goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        $i15 = r0.<org.apache.lucene.util.CharsRef: int offset>;

        i17 = $i15;

        i18 = r1.<org.apache.lucene.util.CharsRef: int offset>;

        $i1 = r0.<org.apache.lucene.util.CharsRef: int length>;

        $i0 = r1.<org.apache.lucene.util.CharsRef: int length>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $i16 = $i15 + $i2;

     label3:
        if i17 >= $i16 goto label5;

        $r5 = r0.<org.apache.lucene.util.CharsRef: char[] chars>;

        $c14 = $r5[i17];

        $r6 = r1.<org.apache.lucene.util.CharsRef: char[] chars>;

        $c13 = $r6[i18];

        $i19 = (int) $c14;

        $i20 = (int) $c13;

        if $i19 == $i20 goto label4;

        goto label5;

     label4:
        i17 = i17 + 1;

        i18 = i18 + 1;

        goto label3;

     label5:
        $i3 = r0.<org.apache.lucene.util.CharsRef: int offset>;

        if i17 != $i3 goto label6;

        $r4 = <org.apache.lucene.util.fst.CharSequenceOutputs: org.apache.lucene.util.CharsRef NO_OUTPUT>;

        return $r4;

     label6:
        $i5 = r0.<org.apache.lucene.util.CharsRef: int offset>;

        $i4 = r0.<org.apache.lucene.util.CharsRef: int length>;

        $i6 = $i5 + $i4;

        if i17 != $i6 goto label7;

        return r0;

     label7:
        $i8 = r1.<org.apache.lucene.util.CharsRef: int offset>;

        $i7 = r1.<org.apache.lucene.util.CharsRef: int length>;

        $i9 = $i8 + $i7;

        if i18 != $i9 goto label8;

        return r1;

     label8:
        $r12 = new org.apache.lucene.util.CharsRef;

        $r3 = r0.<org.apache.lucene.util.CharsRef: char[] chars>;

        $i12 = r0.<org.apache.lucene.util.CharsRef: int offset>;

        $i10 = r0.<org.apache.lucene.util.CharsRef: int offset>;

        $i11 = i17 - $i10;

        specialinvoke $r12.<org.apache.lucene.util.CharsRef: void <init>(char[],int,int)>($r3, $i12, $i11);

        return $r12;
    }

    public org.apache.lucene.util.CharsRef subtract(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)
    {
        org.apache.lucene.util.fst.CharSequenceOutputs r16;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        java.lang.AssertionError $r5, $r6, $r14, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r12;
        org.apache.lucene.util.CharsRef r0, $r1, r2, $r3, $r13;
        char[] $r4;

        r16 := @this: org.apache.lucene.util.fst.CharSequenceOutputs;

        r2 := @parameter0: org.apache.lucene.util.CharsRef;

        r0 := @parameter1: org.apache.lucene.util.CharsRef;

        $z0 = <org.apache.lucene.util.fst.CharSequenceOutputs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 != null goto label1;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label1:
        $z1 = <org.apache.lucene.util.fst.CharSequenceOutputs: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r0 != null goto label2;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label2:
        $r1 = <org.apache.lucene.util.fst.CharSequenceOutputs: org.apache.lucene.util.CharsRef NO_OUTPUT>;

        if r0 != $r1 goto label3;

        return r2;

     label3:
        $i1 = r0.<org.apache.lucene.util.CharsRef: int length>;

        $i0 = r2.<org.apache.lucene.util.CharsRef: int length>;

        if $i1 != $i0 goto label4;

        $r13 = <org.apache.lucene.util.fst.CharSequenceOutputs: org.apache.lucene.util.CharsRef NO_OUTPUT>;

        return $r13;

     label4:
        $z2 = <org.apache.lucene.util.fst.CharSequenceOutputs: boolean $assertionsDisabled>;

        if $z2 != 0 goto label5;

        $i10 = r0.<org.apache.lucene.util.CharsRef: int length>;

        $i9 = r2.<org.apache.lucene.util.CharsRef: int length>;

        if $i10 < $i9 goto label5;

        $r6 = new java.lang.AssertionError;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inc.length=");

        $i11 = r0.<org.apache.lucene.util.CharsRef: int length>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs output.length=");

        $i12 = r2.<org.apache.lucene.util.CharsRef: int length>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r6;

     label5:
        $z3 = <org.apache.lucene.util.fst.CharSequenceOutputs: boolean $assertionsDisabled>;

        if $z3 != 0 goto label6;

        $i8 = r0.<org.apache.lucene.util.CharsRef: int length>;

        if $i8 > 0 goto label6;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label6:
        $r3 = new org.apache.lucene.util.CharsRef;

        $r4 = r2.<org.apache.lucene.util.CharsRef: char[] chars>;

        $i3 = r2.<org.apache.lucene.util.CharsRef: int offset>;

        $i2 = r0.<org.apache.lucene.util.CharsRef: int length>;

        $i7 = $i3 + $i2;

        $i5 = r2.<org.apache.lucene.util.CharsRef: int length>;

        $i4 = r0.<org.apache.lucene.util.CharsRef: int length>;

        $i6 = $i5 - $i4;

        specialinvoke $r3.<org.apache.lucene.util.CharsRef: void <init>(char[],int,int)>($r4, $i7, $i6);

        return $r3;
    }

    public org.apache.lucene.util.CharsRef add(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)
    {
        java.lang.AssertionError $r9, $r10, $r11, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.apache.lucene.util.fst.CharSequenceOutputs r13;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.util.CharsRef r0, $r1, r2, $r3, $r4;
        char[] $r5, $r6, $r7, $r8;

        r13 := @this: org.apache.lucene.util.fst.CharSequenceOutputs;

        r0 := @parameter0: org.apache.lucene.util.CharsRef;

        r2 := @parameter1: org.apache.lucene.util.CharsRef;

        $z0 = <org.apache.lucene.util.fst.CharSequenceOutputs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $z1 = <org.apache.lucene.util.fst.CharSequenceOutputs: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r2 != null goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        $r1 = <org.apache.lucene.util.fst.CharSequenceOutputs: org.apache.lucene.util.CharsRef NO_OUTPUT>;

        if r0 != $r1 goto label3;

        return r2;

     label3:
        $r3 = <org.apache.lucene.util.fst.CharSequenceOutputs: org.apache.lucene.util.CharsRef NO_OUTPUT>;

        if r2 != $r3 goto label4;

        return r0;

     label4:
        $z2 = <org.apache.lucene.util.fst.CharSequenceOutputs: boolean $assertionsDisabled>;

        if $z2 != 0 goto label5;

        $i12 = r0.<org.apache.lucene.util.CharsRef: int length>;

        if $i12 > 0 goto label5;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label5:
        $z3 = <org.apache.lucene.util.fst.CharSequenceOutputs: boolean $assertionsDisabled>;

        if $z3 != 0 goto label6;

        $i11 = r2.<org.apache.lucene.util.CharsRef: int length>;

        if $i11 > 0 goto label6;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label6:
        $r4 = new org.apache.lucene.util.CharsRef;

        $i1 = r0.<org.apache.lucene.util.CharsRef: int length>;

        $i0 = r2.<org.apache.lucene.util.CharsRef: int length>;

        $i2 = $i1 + $i0;

        specialinvoke $r4.<org.apache.lucene.util.CharsRef: void <init>(int)>($i2);

        $r6 = r0.<org.apache.lucene.util.CharsRef: char[] chars>;

        $i4 = r0.<org.apache.lucene.util.CharsRef: int offset>;

        $r5 = $r4.<org.apache.lucene.util.CharsRef: char[] chars>;

        $i3 = r0.<org.apache.lucene.util.CharsRef: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i4, $r5, 0, $i3);

        $r8 = r2.<org.apache.lucene.util.CharsRef: char[] chars>;

        $i7 = r2.<org.apache.lucene.util.CharsRef: int offset>;

        $r7 = $r4.<org.apache.lucene.util.CharsRef: char[] chars>;

        $i6 = r0.<org.apache.lucene.util.CharsRef: int length>;

        $i5 = r2.<org.apache.lucene.util.CharsRef: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i7, $r7, $i6, $i5);

        $i9 = r0.<org.apache.lucene.util.CharsRef: int length>;

        $i8 = r2.<org.apache.lucene.util.CharsRef: int length>;

        $i10 = $i9 + $i8;

        $r4.<org.apache.lucene.util.CharsRef: int length> = $i10;

        return $r4;
    }

    public void write(org.apache.lucene.util.CharsRef, org.apache.lucene.store.DataOutput) throws java.io.IOException
    {
        org.apache.lucene.store.DataOutput r0;
        char $c3;
        java.lang.AssertionError $r5;
        org.apache.lucene.util.CharsRef r1;
        int $i0, $i1, $i2, i4, $i5, $i6;
        char[] $r2;
        org.apache.lucene.util.fst.CharSequenceOutputs r4;
        boolean $z0;

        r4 := @this: org.apache.lucene.util.fst.CharSequenceOutputs;

        r1 := @parameter0: org.apache.lucene.util.CharsRef;

        r0 := @parameter1: org.apache.lucene.store.DataOutput;

        $z0 = <org.apache.lucene.util.fst.CharSequenceOutputs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $i0 = r1.<org.apache.lucene.util.CharsRef: int length>;

        virtualinvoke r0.<org.apache.lucene.store.DataOutput: void writeVInt(int)>($i0);

        i4 = 0;

     label2:
        $i5 = r1.<org.apache.lucene.util.CharsRef: int length>;

        if i4 >= $i5 goto label3;

        $r2 = r1.<org.apache.lucene.util.CharsRef: char[] chars>;

        $i1 = r1.<org.apache.lucene.util.CharsRef: int offset>;

        $i2 = $i1 + i4;

        $c3 = $r2[$i2];

        $i6 = (int) $c3;

        virtualinvoke r0.<org.apache.lucene.store.DataOutput: void writeVInt(int)>($i6);

        i4 = i4 + 1;

        goto label2;

     label3:
        return;
    }

    public org.apache.lucene.util.CharsRef read(org.apache.lucene.store.DataInput) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r0;
        char $c2;
        org.apache.lucene.util.CharsRef $r1, $r3;
        int $i0, $i1, i3;
        char[] $r2;
        org.apache.lucene.util.fst.CharSequenceOutputs r4;

        r4 := @this: org.apache.lucene.util.fst.CharSequenceOutputs;

        r0 := @parameter0: org.apache.lucene.store.DataInput;

        $i0 = virtualinvoke r0.<org.apache.lucene.store.DataInput: int readVInt()>();

        if $i0 != 0 goto label1;

        $r3 = <org.apache.lucene.util.fst.CharSequenceOutputs: org.apache.lucene.util.CharsRef NO_OUTPUT>;

        return $r3;

     label1:
        $r1 = new org.apache.lucene.util.CharsRef;

        specialinvoke $r1.<org.apache.lucene.util.CharsRef: void <init>(int)>($i0);

        i3 = 0;

     label2:
        if i3 >= $i0 goto label3;

        $r2 = $r1.<org.apache.lucene.util.CharsRef: char[] chars>;

        $i1 = virtualinvoke r0.<org.apache.lucene.store.DataInput: int readVInt()>();

        $c2 = (char) $i1;

        $r2[i3] = $c2;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r1.<org.apache.lucene.util.CharsRef: int length> = $i0;

        return $r1;
    }

    public org.apache.lucene.util.CharsRef getNoOutput()
    {
        org.apache.lucene.util.fst.CharSequenceOutputs r1;
        org.apache.lucene.util.CharsRef $r0;

        r1 := @this: org.apache.lucene.util.fst.CharSequenceOutputs;

        $r0 = <org.apache.lucene.util.fst.CharSequenceOutputs: org.apache.lucene.util.CharsRef NO_OUTPUT>;

        return $r0;
    }

    public java.lang.String outputToString(org.apache.lucene.util.CharsRef)
    {
        java.lang.String $r1;
        org.apache.lucene.util.fst.CharSequenceOutputs r2;
        org.apache.lucene.util.CharsRef r0;

        r2 := @this: org.apache.lucene.util.fst.CharSequenceOutputs;

        r0 := @parameter0: org.apache.lucene.util.CharsRef;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.CharsRef: java.lang.String toString()>();

        return $r1;
    }

    public volatile java.lang.String outputToString(java.lang.Object)
    {
        org.apache.lucene.util.CharsRef $r2;
        java.lang.Object r1;
        java.lang.String $r3;
        org.apache.lucene.util.fst.CharSequenceOutputs r0;

        r0 := @this: org.apache.lucene.util.fst.CharSequenceOutputs;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.lucene.util.CharsRef) r1;

        $r3 = virtualinvoke r0.<org.apache.lucene.util.fst.CharSequenceOutputs: java.lang.String outputToString(org.apache.lucene.util.CharsRef)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getNoOutput()
    {
        org.apache.lucene.util.fst.CharSequenceOutputs r0;
        org.apache.lucene.util.CharsRef $r1;

        r0 := @this: org.apache.lucene.util.fst.CharSequenceOutputs;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.fst.CharSequenceOutputs: org.apache.lucene.util.CharsRef getNoOutput()>();

        return $r1;
    }

    public volatile java.lang.Object read(org.apache.lucene.store.DataInput) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r1;
        org.apache.lucene.util.fst.CharSequenceOutputs r0;
        org.apache.lucene.util.CharsRef $r2;

        r0 := @this: org.apache.lucene.util.fst.CharSequenceOutputs;

        r1 := @parameter0: org.apache.lucene.store.DataInput;

        $r2 = virtualinvoke r0.<org.apache.lucene.util.fst.CharSequenceOutputs: org.apache.lucene.util.CharsRef read(org.apache.lucene.store.DataInput)>(r1);

        return $r2;
    }

    public volatile void write(java.lang.Object, org.apache.lucene.store.DataOutput) throws java.io.IOException
    {
        org.apache.lucene.store.DataOutput r2;
        org.apache.lucene.util.CharsRef $r3;
        java.lang.Object r1;
        org.apache.lucene.util.fst.CharSequenceOutputs r0;

        r0 := @this: org.apache.lucene.util.fst.CharSequenceOutputs;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.lucene.store.DataOutput;

        $r3 = (org.apache.lucene.util.CharsRef) r1;

        virtualinvoke r0.<org.apache.lucene.util.fst.CharSequenceOutputs: void write(org.apache.lucene.util.CharsRef,org.apache.lucene.store.DataOutput)>($r3, r2);

        return;
    }

    public volatile java.lang.Object add(java.lang.Object, java.lang.Object)
    {
        org.apache.lucene.util.CharsRef $r3, $r4, $r5;
        java.lang.Object r1, r2;
        org.apache.lucene.util.fst.CharSequenceOutputs r0;

        r0 := @this: org.apache.lucene.util.fst.CharSequenceOutputs;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.lucene.util.CharsRef) r1;

        $r3 = (org.apache.lucene.util.CharsRef) r2;

        $r5 = virtualinvoke r0.<org.apache.lucene.util.fst.CharSequenceOutputs: org.apache.lucene.util.CharsRef add(org.apache.lucene.util.CharsRef,org.apache.lucene.util.CharsRef)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object subtract(java.lang.Object, java.lang.Object)
    {
        org.apache.lucene.util.CharsRef $r3, $r4, $r5;
        java.lang.Object r1, r2;
        org.apache.lucene.util.fst.CharSequenceOutputs r0;

        r0 := @this: org.apache.lucene.util.fst.CharSequenceOutputs;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.lucene.util.CharsRef) r1;

        $r3 = (org.apache.lucene.util.CharsRef) r2;

        $r5 = virtualinvoke r0.<org.apache.lucene.util.fst.CharSequenceOutputs: org.apache.lucene.util.CharsRef subtract(org.apache.lucene.util.CharsRef,org.apache.lucene.util.CharsRef)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object common(java.lang.Object, java.lang.Object)
    {
        org.apache.lucene.util.CharsRef $r3, $r4, $r5;
        java.lang.Object r1, r2;
        org.apache.lucene.util.fst.CharSequenceOutputs r0;

        r0 := @this: org.apache.lucene.util.fst.CharSequenceOutputs;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.lucene.util.CharsRef) r1;

        $r3 = (org.apache.lucene.util.CharsRef) r2;

        $r5 = virtualinvoke r0.<org.apache.lucene.util.fst.CharSequenceOutputs: org.apache.lucene.util.CharsRef common(org.apache.lucene.util.CharsRef,org.apache.lucene.util.CharsRef)>($r4, $r3);

        return $r5;
    }

    static void <clinit>()
    {
        org.apache.lucene.util.CharsRef $r1;
        java.lang.Class $r0;
        org.apache.lucene.util.fst.CharSequenceOutputs $r2;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/fst/CharSequenceOutputs;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.fst.CharSequenceOutputs: boolean $assertionsDisabled> = $z1;

        $r1 = new org.apache.lucene.util.CharsRef;

        specialinvoke $r1.<org.apache.lucene.util.CharsRef: void <init>()>();

        <org.apache.lucene.util.fst.CharSequenceOutputs: org.apache.lucene.util.CharsRef NO_OUTPUT> = $r1;

        $r2 = new org.apache.lucene.util.fst.CharSequenceOutputs;

        specialinvoke $r2.<org.apache.lucene.util.fst.CharSequenceOutputs: void <init>()>();

        <org.apache.lucene.util.fst.CharSequenceOutputs: org.apache.lucene.util.fst.CharSequenceOutputs singleton> = $r2;

        return;
    }
}
