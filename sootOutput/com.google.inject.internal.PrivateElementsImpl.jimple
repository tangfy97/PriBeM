public final class com.google.inject.internal.PrivateElementsImpl extends java.lang.Object implements com.google.inject.spi.PrivateElements
{
    private final java.lang.Object source;
    private java.util.List elementsMutable;
    private java.util.List exposureBuilders;
    private com.google.inject.internal.util.$ImmutableList elements;
    private com.google.inject.internal.util.$ImmutableMap exposedKeysToSources;
    private com.google.inject.Injector injector;

    public void <init>(java.lang.Object)
    {
        java.lang.Object r3, $r4;
        com.google.inject.internal.PrivateElementsImpl r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: com.google.inject.internal.PrivateElementsImpl;

        r3 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList()>();

        r0.<com.google.inject.internal.PrivateElementsImpl: java.util.List elementsMutable> = $r1;

        $r2 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList()>();

        r0.<com.google.inject.internal.PrivateElementsImpl: java.util.List exposureBuilders> = $r2;

        $r4 = staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "source");

        r0.<com.google.inject.internal.PrivateElementsImpl: java.lang.Object source> = $r4;

        return;
    }

    public java.lang.Object getSource()
    {
        java.lang.Object $r1;
        com.google.inject.internal.PrivateElementsImpl r0;

        r0 := @this: com.google.inject.internal.PrivateElementsImpl;

        $r1 = r0.<com.google.inject.internal.PrivateElementsImpl: java.lang.Object source>;

        return $r1;
    }

    public java.util.List getElements()
    {
        java.util.List $r3;
        com.google.inject.internal.util.$ImmutableList $r1, $r2, $r4;
        com.google.inject.internal.PrivateElementsImpl r0;

        r0 := @this: com.google.inject.internal.PrivateElementsImpl;

        $r1 = r0.<com.google.inject.internal.PrivateElementsImpl: com.google.inject.internal.util.$ImmutableList elements>;

        if $r1 != null goto label1;

        $r3 = r0.<com.google.inject.internal.PrivateElementsImpl: java.util.List elementsMutable>;

        $r4 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList copyOf(java.lang.Iterable)>($r3);

        r0.<com.google.inject.internal.PrivateElementsImpl: com.google.inject.internal.util.$ImmutableList elements> = $r4;

        r0.<com.google.inject.internal.PrivateElementsImpl: java.util.List elementsMutable> = null;

     label1:
        $r2 = r0.<com.google.inject.internal.PrivateElementsImpl: com.google.inject.internal.util.$ImmutableList elements>;

        return $r2;
    }

    public com.google.inject.Injector getInjector()
    {
        com.google.inject.Injector $r1;
        com.google.inject.internal.PrivateElementsImpl r0;

        r0 := @this: com.google.inject.internal.PrivateElementsImpl;

        $r1 = r0.<com.google.inject.internal.PrivateElementsImpl: com.google.inject.Injector injector>;

        return $r1;
    }

    public void initInjector(com.google.inject.Injector)
    {
        com.google.inject.Injector $r1, r2, $r4;
        java.lang.Object $r3;
        com.google.inject.internal.PrivateElementsImpl r0;
        boolean $z0;

        r0 := @this: com.google.inject.internal.PrivateElementsImpl;

        r2 := @parameter0: com.google.inject.Injector;

        $r1 = r0.<com.google.inject.internal.PrivateElementsImpl: com.google.inject.Injector injector>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkState(boolean,java.lang.Object)>($z0, "injector already initialized");

        $r3 = staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "injector");

        $r4 = (com.google.inject.Injector) $r3;

        r0.<com.google.inject.internal.PrivateElementsImpl: com.google.inject.Injector injector> = $r4;

        return;
    }

    public java.util.Set getExposedKeys()
    {
        java.util.Iterator $r6;
        com.google.inject.Key $r10;
        com.google.inject.internal.PrivateElementsImpl r0;
        com.google.inject.internal.util.$ImmutableMap $r1, $r2, $r7;
        java.util.LinkedHashMap $r4;
        java.util.List $r5;
        com.google.inject.internal.ExposureBuilder r9;
        com.google.inject.internal.util.$ImmutableSet $r3;
        java.lang.Object $r8, $r11;
        boolean $z0;

        r0 := @this: com.google.inject.internal.PrivateElementsImpl;

        $r1 = r0.<com.google.inject.internal.PrivateElementsImpl: com.google.inject.internal.util.$ImmutableMap exposedKeysToSources>;

        if $r1 != null goto label3;

        $r4 = staticinvoke <com.google.inject.internal.util.$Maps: java.util.LinkedHashMap newLinkedHashMap()>();

        $r5 = r0.<com.google.inject.internal.PrivateElementsImpl: java.util.List exposureBuilders>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.google.inject.internal.ExposureBuilder) $r8;

        $r10 = virtualinvoke r9.<com.google.inject.internal.ExposureBuilder: com.google.inject.Key getKey()>();

        $r11 = virtualinvoke r9.<com.google.inject.internal.ExposureBuilder: java.lang.Object getSource()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

        goto label1;

     label2:
        $r7 = staticinvoke <com.google.inject.internal.util.$ImmutableMap: com.google.inject.internal.util.$ImmutableMap copyOf(java.util.Map)>($r4);

        r0.<com.google.inject.internal.PrivateElementsImpl: com.google.inject.internal.util.$ImmutableMap exposedKeysToSources> = $r7;

        r0.<com.google.inject.internal.PrivateElementsImpl: java.util.List exposureBuilders> = null;

     label3:
        $r2 = r0.<com.google.inject.internal.PrivateElementsImpl: com.google.inject.internal.util.$ImmutableMap exposedKeysToSources>;

        $r3 = virtualinvoke $r2.<com.google.inject.internal.util.$ImmutableMap: com.google.inject.internal.util.$ImmutableSet keySet()>();

        return $r3;
    }

    public java.lang.Object acceptVisitor(com.google.inject.spi.ElementVisitor)
    {
        com.google.inject.spi.ElementVisitor r0;
        java.lang.Object $r2;
        com.google.inject.internal.PrivateElementsImpl r1;

        r1 := @this: com.google.inject.internal.PrivateElementsImpl;

        r0 := @parameter0: com.google.inject.spi.ElementVisitor;

        $r2 = interfaceinvoke r0.<com.google.inject.spi.ElementVisitor: java.lang.Object visit(com.google.inject.spi.PrivateElements)>(r1);

        return $r2;
    }

    public java.util.List getElementsMutable()
    {
        java.util.List $r1;
        com.google.inject.internal.PrivateElementsImpl r0;

        r0 := @this: com.google.inject.internal.PrivateElementsImpl;

        $r1 = r0.<com.google.inject.internal.PrivateElementsImpl: java.util.List elementsMutable>;

        return $r1;
    }

    public void addExposureBuilder(com.google.inject.internal.ExposureBuilder)
    {
        java.util.List $r2;
        com.google.inject.internal.PrivateElementsImpl r0;
        com.google.inject.internal.ExposureBuilder r1;

        r0 := @this: com.google.inject.internal.PrivateElementsImpl;

        r1 := @parameter0: com.google.inject.internal.ExposureBuilder;

        $r2 = r0.<com.google.inject.internal.PrivateElementsImpl: java.util.List exposureBuilders>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void applyTo(com.google.inject.Binder)
    {
        com.google.inject.Key $r14;
        com.google.inject.internal.PrivateElementsImpl r1;
        com.google.inject.internal.util.$ImmutableMap $r7;
        com.google.inject.Binder r0, $r3;
        com.google.inject.internal.util.$ImmutableSet $r8;
        boolean $z0, $z1;
        java.util.Map$Entry r17;
        com.google.inject.PrivateBinder $r4, $r12;
        java.util.Iterator $r6, $r9;
        java.util.List $r5;
        com.google.inject.spi.Element r16;
        java.lang.Object $r2, $r10, $r11, $r13, $r15;

        r1 := @this: com.google.inject.internal.PrivateElementsImpl;

        r0 := @parameter0: com.google.inject.Binder;

        $r2 = r1.<com.google.inject.internal.PrivateElementsImpl: java.lang.Object source>;

        $r3 = interfaceinvoke r0.<com.google.inject.Binder: com.google.inject.Binder withSource(java.lang.Object)>($r2);

        $r4 = interfaceinvoke $r3.<com.google.inject.Binder: com.google.inject.PrivateBinder newPrivateBinder()>();

        $r5 = virtualinvoke r1.<com.google.inject.internal.PrivateElementsImpl: java.util.List getElements()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r16 = (com.google.inject.spi.Element) $r15;

        interfaceinvoke r16.<com.google.inject.spi.Element: void applyTo(com.google.inject.Binder)>($r4);

        goto label1;

     label2:
        virtualinvoke r1.<com.google.inject.internal.PrivateElementsImpl: java.util.Set getExposedKeys()>();

        $r7 = r1.<com.google.inject.internal.PrivateElementsImpl: com.google.inject.internal.util.$ImmutableMap exposedKeysToSources>;

        $r8 = virtualinvoke $r7.<com.google.inject.internal.util.$ImmutableMap: com.google.inject.internal.util.$ImmutableSet entrySet()>();

        $r9 = virtualinvoke $r8.<com.google.inject.internal.util.$ImmutableSet: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = interfaceinvoke $r4.<com.google.inject.PrivateBinder: com.google.inject.PrivateBinder withSource(java.lang.Object)>($r11);

        $r13 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (com.google.inject.Key) $r13;

        interfaceinvoke $r12.<com.google.inject.PrivateBinder: void expose(com.google.inject.Key)>($r14);

        goto label3;

     label4:
        return;
    }

    public java.lang.Object getExposedSource(com.google.inject.Key)
    {
        java.lang.Object[] $r4;
        com.google.inject.Key r1;
        java.lang.Object $r3;
        com.google.inject.internal.PrivateElementsImpl r0;
        com.google.inject.internal.util.$ImmutableMap $r2;
        boolean $z0;

        r0 := @this: com.google.inject.internal.PrivateElementsImpl;

        r1 := @parameter0: com.google.inject.Key;

        virtualinvoke r0.<com.google.inject.internal.PrivateElementsImpl: java.util.Set getExposedKeys()>();

        $r2 = r0.<com.google.inject.internal.PrivateElementsImpl: com.google.inject.internal.util.$ImmutableMap exposedKeysToSources>;

        $r3 = virtualinvoke $r2.<com.google.inject.internal.util.$ImmutableMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r1;

        $r4[1] = r0;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "%s not exposed by %s.", $r4);

        return $r3;
    }

    public java.lang.String toString()
    {
        com.google.inject.internal.util.$ToStringBuilder $r0, $r3, $r5;
        java.util.Set $r2;
        java.lang.Object $r4;
        com.google.inject.internal.PrivateElementsImpl r1;
        java.lang.String $r6;

        r1 := @this: com.google.inject.internal.PrivateElementsImpl;

        $r0 = new com.google.inject.internal.util.$ToStringBuilder;

        specialinvoke $r0.<com.google.inject.internal.util.$ToStringBuilder: void <init>(java.lang.Class)>(class "Lcom/google/inject/spi/PrivateElements;");

        $r2 = virtualinvoke r1.<com.google.inject.internal.PrivateElementsImpl: java.util.Set getExposedKeys()>();

        $r3 = virtualinvoke $r0.<com.google.inject.internal.util.$ToStringBuilder: com.google.inject.internal.util.$ToStringBuilder add(java.lang.String,java.lang.Object)>("exposedKeys", $r2);

        $r4 = virtualinvoke r1.<com.google.inject.internal.PrivateElementsImpl: java.lang.Object getSource()>();

        $r5 = virtualinvoke $r3.<com.google.inject.internal.util.$ToStringBuilder: com.google.inject.internal.util.$ToStringBuilder add(java.lang.String,java.lang.Object)>("source", $r4);

        $r6 = virtualinvoke $r5.<com.google.inject.internal.util.$ToStringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
