public class org.codehaus.groovy.control.GenericsVisitor extends org.codehaus.groovy.ast.ClassCodeVisitorSupport
{
    private org.codehaus.groovy.control.SourceUnit source;

    public void <init>(org.codehaus.groovy.control.SourceUnit)
    {
        org.codehaus.groovy.control.GenericsVisitor r0;
        org.codehaus.groovy.control.SourceUnit r1;

        r0 := @this: org.codehaus.groovy.control.GenericsVisitor;

        r1 := @parameter0: org.codehaus.groovy.control.SourceUnit;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void <init>()>();

        r0.<org.codehaus.groovy.control.GenericsVisitor: org.codehaus.groovy.control.SourceUnit source> = r1;

        return;
    }

    protected org.codehaus.groovy.control.SourceUnit getSourceUnit()
    {
        org.codehaus.groovy.control.GenericsVisitor r0;
        org.codehaus.groovy.control.SourceUnit $r1;

        r0 := @this: org.codehaus.groovy.control.GenericsVisitor;

        $r1 = r0.<org.codehaus.groovy.control.GenericsVisitor: org.codehaus.groovy.control.SourceUnit source>;

        return $r1;
    }

    public void visitClass(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r1, $r2, $r3, $r5, $r6, $r7;
        org.codehaus.groovy.control.GenericsVisitor r0;
        org.codehaus.groovy.ast.ClassNode[] $r4;
        int $i0, i1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.control.GenericsVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $z0 = specialinvoke r0.<org.codehaus.groovy.control.GenericsVisitor: boolean checkWildcard(org.codehaus.groovy.ast.ClassNode)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getUnresolvedSuperClass(boolean)>(0);

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        specialinvoke r0.<org.codehaus.groovy.control.GenericsVisitor: void checkGenericsUsage(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode)>($r2, $r3);

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] getInterfaces()>();

        i1 = 0;

     label2:
        $i0 = lengthof $r4;

        if i1 >= $i0 goto label3;

        $r6 = $r4[i1];

        $r5 = $r4[i1];

        $r7 = virtualinvoke $r5.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        specialinvoke r0.<org.codehaus.groovy.control.GenericsVisitor: void checkGenericsUsage(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode)>($r6, $r7);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    private boolean checkWildcard(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1;
        org.codehaus.groovy.ast.GenericsType $r3;
        int $i0, i1;
        org.codehaus.groovy.control.GenericsVisitor r4;
        org.codehaus.groovy.ast.GenericsType[] $r2;
        boolean $z0, z1;

        r4 := @this: org.codehaus.groovy.control.GenericsVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getUnresolvedSuperClass(boolean)>(0);

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        if $r2 != null goto label2;

        return 0;

     label2:
        z1 = 0;

        i1 = 0;

     label3:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label5;

        $r3 = $r2[i1];

        $z0 = virtualinvoke $r3.<org.codehaus.groovy.ast.GenericsType: boolean isWildcard()>();

        if $z0 == 0 goto label4;

        virtualinvoke r4.<org.codehaus.groovy.control.GenericsVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>("A supertype may not specifiy a wildcard type", $r1);

        z1 = 1;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return z1;
    }

    private void checkGenericsUsage(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.GenericsType[] $r1, $r3;
        boolean $z0, $z1, $z2;
        java.lang.StringBuffer $r9, $r10, $r13, $r14, $r17, $r18, $r20, $r21, $r23, $r24, $r26, $r27, $r28, $r29, $r30, $r32, $r33, $r35, $r36, $r38, $r39, $r40, $r41;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r12, $r16, $r19, $r22, $r25, $r31, $r34, $r37, $r42;
        org.codehaus.groovy.ast.ClassNode r0, r2, $r5, $r7;
        org.codehaus.groovy.ast.GenericsType $r4, $r6, $r11, $r15;
        org.codehaus.groovy.control.GenericsVisitor r8;

        r8 := @this: org.codehaus.groovy.control.GenericsVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        if $r1 != null goto label1;

        return;

     label1:
        if $r3 != null goto label2;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The class ");

        $r34 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" refers to the class ");

        $r37 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and uses ");

        $i5 = lengthof $r1;

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" parameters, but the referred class takes no parameters");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r8.<org.codehaus.groovy.control.GenericsVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r42, r0);

        return;

     label2:
        $i1 = lengthof $r1;

        $i0 = lengthof $r3;

        if $i1 == $i0 goto label3;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The class ");

        $r22 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" refers to the class ");

        $r25 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and uses ");

        $i3 = lengthof $r1;

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" parameters, but the refered class needs ");

        $i4 = lengthof $r3;

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r8.<org.codehaus.groovy.control.GenericsVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r31, r0);

        return;

     label3:
        i6 = 0;

     label4:
        $i2 = lengthof $r1;

        if i6 >= $i2 goto label7;

        $r4 = $r1[i6];

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getType()>();

        $r6 = $r3[i6];

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getType()>();

        $z0 = virtualinvoke $r5.<org.codehaus.groovy.ast.ClassNode: boolean isDerivedFrom(org.codehaus.groovy.ast.ClassNode)>($r7);

        if $z0 != 0 goto label6;

        $z1 = virtualinvoke $r7.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        if $z1 == 0 goto label5;

        $z2 = virtualinvoke $r5.<org.codehaus.groovy.ast.ClassNode: boolean declaresInterface(org.codehaus.groovy.ast.ClassNode)>($r7);

        if $z2 == 0 goto label5;

        goto label6;

     label5:
        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The type ");

        $r11 = $r1[i6];

        $r12 = virtualinvoke $r11.<org.codehaus.groovy.ast.GenericsType: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a valid substitute for the bounded parameter <");

        $r15 = $r3[i6];

        $r16 = specialinvoke r8.<org.codehaus.groovy.control.GenericsVisitor: java.lang.String getPrintName(org.codehaus.groovy.ast.GenericsType)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r8.<org.codehaus.groovy.control.GenericsVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r19, r0);

     label6:
        i6 = i6 + 1;

        goto label4;

     label7:
        return;
    }

    private java.lang.String getPrintName(org.codehaus.groovy.ast.GenericsType)
    {
        java.lang.StringBuffer $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r13, $r14, $r17, $r19, $r20, $r21;
        org.codehaus.groovy.ast.ClassNode[] $r2;
        int $i0, $i1, $i2, i3;
        java.lang.String $r1, $r8, $r16, $r18, r22;
        org.codehaus.groovy.ast.ClassNode $r3, $r15;
        org.codehaus.groovy.ast.GenericsType r0;
        org.codehaus.groovy.control.GenericsVisitor r7;

        r7 := @this: org.codehaus.groovy.control.GenericsVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.GenericsType;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: java.lang.String getName()>();

        r22 = $r1;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode[] getUpperBounds()>();

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getLowerBound()>();

        if $r2 == null goto label4;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" extends ");

        r22 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        i3 = 0;

     label1:
        $i0 = lengthof $r2;

        if i3 >= $i0 goto label3;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r22);

        $r15 = $r2[i3];

        $r16 = specialinvoke r7.<org.codehaus.groovy.control.GenericsVisitor: java.lang.String getPrintName(org.codehaus.groovy.ast.ClassNode)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        r22 = $r18;

        $i2 = i3 + 1;

        $i1 = lengthof $r2;

        if $i2 >= $i1 goto label2;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" & ");

        r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        goto label5;

     label4:
        if $r3 == null goto label5;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" super ");

        $r8 = specialinvoke r7.<org.codehaus.groovy.control.GenericsVisitor: java.lang.String getPrintName(org.codehaus.groovy.ast.ClassNode)>($r3);

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        r22 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

     label5:
        return r22;
    }

    private java.lang.String getPrintName(org.codehaus.groovy.ast.ClassNode)
    {
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r14, $r15, $r16, $r17;
        int $i0, i1;
        org.codehaus.groovy.ast.GenericsType[] $r2;
        java.lang.String $r1, $r13, r18, r19;
        org.codehaus.groovy.ast.ClassNode r0;
        org.codehaus.groovy.ast.GenericsType $r12;
        org.codehaus.groovy.control.GenericsVisitor r11;

        r11 := @this: org.codehaus.groovy.control.GenericsVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        r18 = $r1;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        if $r2 == null goto label4;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<");

        r19 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label3;

        if i1 == 0 goto label2;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r19);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r19);

        $r12 = $r2[i1];

        $r13 = specialinvoke r11.<org.codehaus.groovy.control.GenericsVisitor: java.lang.String getPrintName(org.codehaus.groovy.ast.GenericsType)>($r12);

        $r14 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        r19 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        i1 = i1 + 1;

        goto label1;

     label3:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r19);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        r18 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

     label4:
        return r18;
    }

    private void checkBounds(org.codehaus.groovy.ast.ClassNode[], org.codehaus.groovy.ast.ClassNode[])
    {
        org.codehaus.groovy.ast.ClassNode $r2, $r3;
        org.codehaus.groovy.ast.ClassNode[] r0, r1;
        int $i0, $i1, i2, i3;
        org.codehaus.groovy.control.GenericsVisitor r4;
        boolean $z0;

        r4 := @this: org.codehaus.groovy.control.GenericsVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode[];

        r0 := @parameter1: org.codehaus.groovy.ast.ClassNode[];

        if r0 != null goto label1;

        return;

     label1:
        i2 = 0;

     label2:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label6;

        i3 = 0;

     label3:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label5;

        $r3 = r1[i2];

        $r2 = r0[i3];

        $z0 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: boolean isDerivedFrom(org.codehaus.groovy.ast.ClassNode)>($r2);

        if $z0 != 0 goto label4;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        i2 = i2 + 1;

        goto label2;

     label6:
        return;
    }
}
