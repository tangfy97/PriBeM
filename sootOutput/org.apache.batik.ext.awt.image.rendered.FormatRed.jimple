public class org.apache.batik.ext.awt.image.rendered.FormatRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{

    public static org.apache.batik.ext.awt.image.rendered.CachableRed construct(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.image.ColorModel)
    {
        int $i0, $i1;
        org.apache.batik.ext.awt.image.rendered.FormatRed $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.IllegalArgumentException $r5;
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.image.ColorModel $r1, r2;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r2 := @parameter1: java.awt.image.ColorModel;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $z0 = virtualinvoke r2.<java.awt.image.ColorModel: boolean hasAlpha()>();

        $z1 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 != $z1 goto label1;

        $z2 = virtualinvoke r2.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        $z3 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z2 == $z3 goto label2;

     label1:
        $r3 = new org.apache.batik.ext.awt.image.rendered.FormatRed;

        specialinvoke $r3.<org.apache.batik.ext.awt.image.rendered.FormatRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.image.ColorModel)>(r0, r2);

        return $r3;

     label2:
        $i0 = virtualinvoke r2.<java.awt.image.ColorModel: int getNumComponents()>();

        $i1 = virtualinvoke $r1.<java.awt.image.ColorModel: int getNumComponents()>();

        if $i0 == $i1 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incompatible ColorModel given");

        throw $r5;

     label3:
        $z4 = $r1 instanceof java.awt.image.ComponentColorModel;

        if $z4 == 0 goto label4;

        $z7 = r2 instanceof java.awt.image.ComponentColorModel;

        if $z7 == 0 goto label4;

        return r0;

     label4:
        $z5 = $r1 instanceof java.awt.image.DirectColorModel;

        if $z5 == 0 goto label5;

        $z6 = r2 instanceof java.awt.image.DirectColorModel;

        if $z6 == 0 goto label5;

        return r0;

     label5:
        $r4 = new org.apache.batik.ext.awt.image.rendered.FormatRed;

        specialinvoke $r4.<org.apache.batik.ext.awt.image.rendered.FormatRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.image.ColorModel)>(r0, r2);

        return $r4;
    }

    public void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.image.SampleModel)
    {
        java.awt.Rectangle $r2;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.image.ColorModel $r4;
        int $i0, $i1;
        org.apache.batik.ext.awt.image.rendered.FormatRed r0;
        java.awt.image.SampleModel r3;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.FormatRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r3 := @parameter1: java.awt.image.SampleModel;

        $r2 = interfaceinvoke r1.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r4 = staticinvoke <org.apache.batik.ext.awt.image.rendered.FormatRed: java.awt.image.ColorModel makeColorModel(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.image.SampleModel)>(r1, r3);

        $i0 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i1 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, $r2, $r4, r3, $i0, $i1, null);

        return;
    }

    public void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.image.ColorModel)
    {
        java.awt.Rectangle $r2;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.image.ColorModel r3;
        int $i0, $i1;
        org.apache.batik.ext.awt.image.rendered.FormatRed r0;
        java.awt.image.SampleModel $r4;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.FormatRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r3 := @parameter1: java.awt.image.ColorModel;

        $r2 = interfaceinvoke r1.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r4 = staticinvoke <org.apache.batik.ext.awt.image.rendered.FormatRed: java.awt.image.SampleModel makeSampleModel(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.image.ColorModel)>(r1, r3);

        $i0 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i1 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, $r2, r3, $r4, $i0, $i1, null);

        return;
    }

    public org.apache.batik.ext.awt.image.rendered.CachableRed getSource()
    {
        java.util.Vector $r1;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r3;
        org.apache.batik.ext.awt.image.rendered.FormatRed r0;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.FormatRed;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r2;

        return $r3;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        org.apache.batik.ext.awt.image.rendered.CachableRed $r1;
        org.apache.batik.ext.awt.image.rendered.FormatRed r0;
        java.lang.Object $r3;
        java.lang.String r2;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.FormatRed;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.FormatRed: org.apache.batik.ext.awt.image.rendered.CachableRed getSource()>();

        $r3 = interfaceinvoke $r1.<java.awt.image.RenderedImage: java.lang.Object getProperty(java.lang.String)>(r2);

        return $r3;
    }

    public java.lang.String[] getPropertyNames()
    {
        org.apache.batik.ext.awt.image.rendered.FormatRed r0;
        java.lang.String[] $r2;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.FormatRed;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.FormatRed: org.apache.batik.ext.awt.image.rendered.CachableRed getSource()>();

        $r2 = interfaceinvoke $r1.<java.awt.image.RenderedImage: java.lang.String[] getPropertyNames()>();

        return $r2;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        java.awt.Point $r7;
        java.awt.image.SampleModel $r4, $r6;
        int $i0, $i1, $i2, $i3;
        org.apache.batik.ext.awt.image.rendered.FormatRed r0;
        boolean $z0, $z1;
        java.awt.image.BufferedImage $r10, $r12;
        java.awt.image.ColorModel $r1, $r3;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r2, $r9;
        java.awt.image.WritableRaster r5, $r8, $r11, $r13;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.FormatRed;

        r5 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.ColorModel getColorModel()>();

        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.FormatRed: org.apache.batik.ext.awt.image.rendered.CachableRed getSource()>();

        $r3 = interfaceinvoke $r2.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r4 = interfaceinvoke $r2.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = virtualinvoke r5.<java.awt.image.Raster: int getWidth()>();

        $i1 = virtualinvoke r5.<java.awt.image.Raster: int getHeight()>();

        $r6 = virtualinvoke $r4.<java.awt.image.SampleModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>($i0, $i1);

        $r7 = new java.awt.Point;

        $i2 = virtualinvoke r5.<java.awt.image.Raster: int getMinX()>();

        $i3 = virtualinvoke r5.<java.awt.image.Raster: int getMinY()>();

        specialinvoke $r7.<java.awt.Point: void <init>(int,int)>($i2, $i3);

        $r8 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($r6, $r7);

        $r9 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.FormatRed: org.apache.batik.ext.awt.image.rendered.CachableRed getSource()>();

        interfaceinvoke $r9.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>($r8);

        $r10 = new java.awt.image.BufferedImage;

        $r11 = virtualinvoke $r8.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>(0, 0);

        $z0 = virtualinvoke $r3.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r10.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r3, $r11, $z0, null);

        $r12 = new java.awt.image.BufferedImage;

        $r13 = virtualinvoke r5.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>(0, 0);

        $z1 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r12.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r1, $r13, $z1, null);

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r10, $r12);

        return r5;
    }

    public static java.awt.image.SampleModel makeSampleModel(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.image.ColorModel)
    {
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.image.ColorModel r2;
        int $i0, $i1;
        java.awt.image.SampleModel $r1, $r3;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r2 := @parameter1: java.awt.image.ColorModel;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = virtualinvoke $r1.<java.awt.image.SampleModel: int getWidth()>();

        $i1 = virtualinvoke $r1.<java.awt.image.SampleModel: int getHeight()>();

        $r3 = virtualinvoke r2.<java.awt.image.ColorModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>($i0, $i1);

        return $r3;
    }

    public static java.awt.image.ColorModel makeColorModel(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.image.SampleModel)
    {
        java.awt.image.SampleModel r3;
        byte b15, $b17, b18, b19, b20;
        int[] $r5, r17;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6;
        java.awt.image.DirectColorModel $r7, $r8;
        java.awt.image.ComponentColorModel $r9;
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.color.ColorSpace $r2;
        java.lang.StringBuffer $r13, $r14, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i16;
        java.awt.image.SinglePixelPackedSampleModel r18;
        java.lang.String $r16;
        java.lang.IllegalArgumentException $r4, $r6, $r10, $r11, $r12;
        java.awt.image.ColorModel $r1;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r3 := @parameter1: java.awt.image.SampleModel;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r2 = virtualinvoke $r1.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $i0 = virtualinvoke r3.<java.awt.image.SampleModel: int getNumBands()>();

        $i1 = virtualinvoke r3.<java.awt.image.SampleModel: int getDataType()>();

        tableswitch($i1)
        {
            case 0: goto label01;
            case 1: goto label03;
            case 2: goto label02;
            case 3: goto label04;
            default: goto label05;
        };

     label01:
        b15 = 8;

        b20 = 8;

        b19 = 8;

        b18 = 8;

        goto label06;

     label02:
        b15 = 16;

        b20 = 16;

        b19 = 16;

        b18 = 16;

        goto label06;

     label03:
        b15 = 16;

        b20 = 16;

        b19 = 16;

        b18 = 16;

        goto label06;

     label04:
        b15 = 32;

        b20 = 32;

        b19 = 32;

        b18 = 32;

        goto label06;

     label05:
        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported DataBuffer type: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label06:
        $z4 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean hasAlpha()>();

        z5 = $z4;

        if $z4 == 0 goto label08;

        $i12 = virtualinvoke $r1.<java.awt.image.ColorModel: int getNumComponents()>();

        $i13 = $i12 - 1;

        if $i0 != $i13 goto label07;

        z5 = 0;

        goto label10;

     label07:
        $i14 = virtualinvoke $r1.<java.awt.image.ColorModel: int getNumComponents()>();

        if $i0 == $i14 goto label10;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incompatible number of bands in and out");

        throw $r11;

     label08:
        $i2 = virtualinvoke $r1.<java.awt.image.ColorModel: int getNumComponents()>();

        $i3 = $i2 + 1;

        if $i0 != $i3 goto label09;

        z5 = 1;

        goto label10;

     label09:
        $i4 = virtualinvoke $r1.<java.awt.image.ColorModel: int getNumComponents()>();

        if $i0 == $i4 goto label10;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incompatible number of bands in and out");

        throw $r10;

     label10:
        z6 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if z5 != 0 goto label11;

        z6 = 0;

     label11:
        $z0 = r3 instanceof java.awt.image.ComponentSampleModel;

        if $z0 == 0 goto label16;

        r17 = newarray (int)[$i0];

        i16 = 0;

        goto label13;

     label12:
        r17[i16] = b18;

        i16 = i16 + 1;

     label13:
        if i16 < $i0 goto label12;

        $r9 = new java.awt.image.ComponentColorModel;

        $z2 = z5;

        $z3 = z6;

        if z5 == 0 goto label14;

        $b17 = 3;

        goto label15;

     label14:
        $b17 = 1;

     label15:
        specialinvoke $r9.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r2, r17, $z2, $z3, $b17, $i1);

        return $r9;

     label16:
        $z1 = r3 instanceof java.awt.image.SinglePixelPackedSampleModel;

        if $z1 == 0 goto label19;

        r18 = (java.awt.image.SinglePixelPackedSampleModel) r3;

        $r5 = virtualinvoke r18.<java.awt.image.SinglePixelPackedSampleModel: int[] getBitMasks()>();

        if $i0 != 4 goto label17;

        $r8 = new java.awt.image.DirectColorModel;

        $i11 = $r5[0];

        $i10 = $r5[1];

        $i9 = $r5[2];

        $i8 = $r5[3];

        specialinvoke $r8.<java.awt.image.DirectColorModel: void <init>(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int)>($r2, b19, $i11, $i10, $i9, $i8, z6, $i1);

        return $r8;

     label17:
        if $i0 != 3 goto label18;

        $r7 = new java.awt.image.DirectColorModel;

        $i7 = $r5[0];

        $i6 = $r5[1];

        $i5 = $r5[2];

        specialinvoke $r7.<java.awt.image.DirectColorModel: void <init>(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int)>($r2, b20, $i7, $i6, $i5, 0, z6, $i1);

        return $r7;

     label18:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incompatible number of bands out for ColorModel");

        throw $r6;

     label19:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported SampleModel Type");

        throw $r4;
    }
}
