public class org.eclipse.jdt.internal.compiler.ast.Wildcard extends org.eclipse.jdt.internal.compiler.ast.SingleTypeReference
{
    public static final int UNBOUND;
    public static final int EXTENDS;
    public static final int SUPER;
    public org.eclipse.jdt.internal.compiler.ast.TypeReference bound;
    public int kind;

    public void <init>(int)
    {
        int i0;
        char[] $r1;
        org.eclipse.jdt.internal.compiler.ast.Wildcard r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Wildcard;

        i0 := @parameter0: int;

        $r1 = <org.eclipse.jdt.internal.compiler.ast.Wildcard: char[] WILDCARD_NAME>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: void <init>(char[],long)>($r1, 0L);

        r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int kind> = i0;

        return;
    }

    public char[][] getParameterizedTypeName()
    {
        char[][] $r1, $r5, $r8, $r10, $r14;
        org.eclipse.jdt.internal.compiler.ast.Wildcard r0;
        int $i0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2, $r11;
        char[] $r3, $r4, $r6, $r7, $r9, $r12, $r13, $r15, $r16;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Wildcard;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int kind>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r8 = newarray (char[])[1];

        $r9 = <org.eclipse.jdt.internal.compiler.ast.Wildcard: char[] WILDCARD_NAME>;

        $r8[0] = $r9;

        return $r8;

     label2:
        $r1 = newarray (char[])[1];

        $r3 = <org.eclipse.jdt.internal.compiler.ast.Wildcard: char[] WILDCARD_NAME>;

        $r4 = <org.eclipse.jdt.internal.compiler.ast.Wildcard: char[] WILDCARD_EXTENDS>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        $r5 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getParameterizedTypeName()>();

        $r6 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r5, 46);

        $r7 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concat(char[],char[],char[])>($r3, $r4, $r6);

        $r1[0] = $r7;

        return $r1;

     label3:
        $r10 = newarray (char[])[1];

        $r12 = <org.eclipse.jdt.internal.compiler.ast.Wildcard: char[] WILDCARD_NAME>;

        $r13 = <org.eclipse.jdt.internal.compiler.ast.Wildcard: char[] WILDCARD_SUPER>;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        $r14 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getParameterizedTypeName()>();

        $r15 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r14, 46);

        $r16 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concat(char[],char[],char[])>($r12, $r13, $r15);

        $r10[0] = $r16;

        return $r10;
    }

    public char[][] getTypeName()
    {
        char[][] $r1, $r5, $r8, $r10, $r14;
        org.eclipse.jdt.internal.compiler.ast.Wildcard r0;
        int $i0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2, $r11;
        char[] $r3, $r4, $r6, $r7, $r9, $r12, $r13, $r15, $r16;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Wildcard;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int kind>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r8 = newarray (char[])[1];

        $r9 = <org.eclipse.jdt.internal.compiler.ast.Wildcard: char[] WILDCARD_NAME>;

        $r8[0] = $r9;

        return $r8;

     label2:
        $r1 = newarray (char[])[1];

        $r3 = <org.eclipse.jdt.internal.compiler.ast.Wildcard: char[] WILDCARD_NAME>;

        $r4 = <org.eclipse.jdt.internal.compiler.ast.Wildcard: char[] WILDCARD_EXTENDS>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        $r5 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getTypeName()>();

        $r6 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r5, 46);

        $r7 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concat(char[],char[],char[])>($r3, $r4, $r6);

        $r1[0] = $r7;

        return $r1;

     label3:
        $r10 = newarray (char[])[1];

        $r12 = <org.eclipse.jdt.internal.compiler.ast.Wildcard: char[] WILDCARD_NAME>;

        $r13 = <org.eclipse.jdt.internal.compiler.ast.Wildcard: char[] WILDCARD_SUPER>;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        $r14 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getTypeName()>();

        $r15 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r14, 46);

        $r16 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concat(char[],char[],char[])>($r12, $r13, $r15);

        $r10[0] = $r16;

        return $r10;
    }

    private org.eclipse.jdt.internal.compiler.lookup.TypeBinding internalResolveType(org.eclipse.jdt.internal.compiler.lookup.Scope, org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding, int)
    {
        org.eclipse.jdt.internal.compiler.lookup.Scope r2;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope $r6;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding r4;
        org.eclipse.jdt.internal.compiler.lookup.WildcardBinding $r5;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r1, $r7, $r9;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r8;
        org.eclipse.jdt.internal.compiler.ast.Wildcard r0;
        int i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r10, $r11;
        org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Wildcard;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.Scope;

        r4 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;

        i0 := @parameter2: int;

        r10 = null;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        if $r1 == null goto label3;

        $i2 = r2.<org.eclipse.jdt.internal.compiler.lookup.Scope: int kind>;

        if $i2 != 3 goto label1;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        $r8 = (org.eclipse.jdt.internal.compiler.lookup.ClassScope) r2;

        $r11 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.ClassScope)>($r8);

        goto label2;

     label1:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        $r6 = (org.eclipse.jdt.internal.compiler.lookup.BlockScope) r2;

        $r11 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope,boolean)>($r6, 1);

     label2:
        r10 = $r11;

        if $r11 != null goto label3;

        return null;

     label3:
        $r3 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment environment()>();

        $i1 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int kind>;

        $r5 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment: org.eclipse.jdt.internal.compiler.lookup.WildcardBinding createWildcard(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,int,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding[],int)>(r4, i0, r10, null, $i1);

        r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r5;

        return $r5;
    }

    public java.lang.StringBuffer printExpression(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r5, $r10;
        org.eclipse.jdt.internal.compiler.ast.Wildcard r0;
        java.lang.StringBuffer r1, $r3, $r8;
        int $i0, i1;
        char[] $r2, $r4, $r6, $r7, $r9;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Wildcard;

        i1 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuffer;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int kind>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r6 = <org.eclipse.jdt.internal.compiler.ast.Wildcard: char[] WILDCARD_NAME>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r6);

        goto label4;

     label2:
        $r2 = <org.eclipse.jdt.internal.compiler.ast.Wildcard: char[] WILDCARD_NAME>;

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r2);

        $r4 = <org.eclipse.jdt.internal.compiler.ast.Wildcard: char[] WILDCARD_EXTENDS>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r4);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(0, r1);

        goto label4;

     label3:
        $r7 = <org.eclipse.jdt.internal.compiler.ast.Wildcard: char[] WILDCARD_NAME>;

        $r8 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r7);

        $r9 = <org.eclipse.jdt.internal.compiler.ast.Wildcard: char[] WILDCARD_SUPER>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r9);

        $r10 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.ast.TypeReference: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(0, r1);

     label4:
        return r1;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Wildcard r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r1, $r3;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Wildcard;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        z0 := @parameter1: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        if $r1 == null goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope,boolean)>(r2, z0);

     label1:
        return null;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.ClassScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.ClassScope r2;
        org.eclipse.jdt.internal.compiler.ast.Wildcard r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r1, $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Wildcard;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.ClassScope;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        if $r1 == null goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r2);

     label1:
        return null;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveTypeArgument(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding, int)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding r2;
        org.eclipse.jdt.internal.compiler.ast.Wildcard r0;
        int i0;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Wildcard;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;

        i0 := @parameter2: int;

        $r3 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.lookup.TypeBinding internalResolveType(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,int)>(r1, r2, i0);

        return $r3;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveTypeArgument(org.eclipse.jdt.internal.compiler.lookup.ClassScope, org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding, int)
    {
        org.eclipse.jdt.internal.compiler.lookup.ClassScope r1;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding r2;
        org.eclipse.jdt.internal.compiler.ast.Wildcard r0;
        int i0;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Wildcard;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.ClassScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;

        i0 := @parameter2: int;

        $r3 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.lookup.TypeBinding internalResolveType(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,int)>(r1, r2, i0);

        return $r3;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Wildcard r1;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r3, $r4;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.Wildcard;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.Wildcard,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        if $r3 == null goto label1;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.TypeReference: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.Wildcard,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.ClassScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope r2;
        org.eclipse.jdt.internal.compiler.ast.Wildcard r1;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r3, $r4;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.Wildcard;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.ClassScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.Wildcard,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        if $r3 == null goto label1;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.TypeReference: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r0, r2);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.Wildcard,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        return;
    }

    public static void <clinit>()
    {
        <org.eclipse.jdt.internal.compiler.ast.Wildcard: int SUPER> = 2;

        <org.eclipse.jdt.internal.compiler.ast.Wildcard: int EXTENDS> = 1;

        <org.eclipse.jdt.internal.compiler.ast.Wildcard: int UNBOUND> = 0;

        return;
    }
}
