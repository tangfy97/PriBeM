public class arq.cmdline.CmdLineArgs extends arq.cmdline.CommandLineBase
{
    private boolean processedArgs;
    protected java.util.Map argMap;
    protected java.util.Map args;
    protected java.util.List positionals;
    static final java.lang.String DefaultIndirectMarker;

    public void <init>(java.lang.String[])
    {
        arq.cmdline.CmdLineArgs r0;
        java.lang.String[] r1;
        java.util.HashMap $r2, $r3;
        java.util.ArrayList $r4;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<arq.cmdline.CommandLineBase: void <init>(java.lang.String[])>(r1);

        r0.<arq.cmdline.CmdLineArgs: boolean processedArgs> = 0;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<arq.cmdline.CmdLineArgs: java.util.Map argMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<arq.cmdline.CmdLineArgs: java.util.Map args> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<arq.cmdline.CmdLineArgs: java.util.List positionals> = $r4;

        return;
    }

    public void process() throws java.lang.IllegalArgumentException
    {
        arq.cmdline.CmdLineArgs r0;
        arq.cmdline.CmdLineArgs$ArgProcessor $r1;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r0.<arq.cmdline.CmdLineArgs: boolean processedArgs> = 1;

        $r1 = new arq.cmdline.CmdLineArgs$ArgProcessor;

        specialinvoke $r1.<arq.cmdline.CmdLineArgs$ArgProcessor: void <init>(arq.cmdline.CmdLineArgs)>(r0);

        virtualinvoke r0.<arq.cmdline.CmdLineArgs: void apply(arq.cmdline.ArgProc)>($r1);

        return;
    }

    public arq.cmdline.CmdLineArgs add(java.lang.String, boolean)
    {
        arq.cmdline.CmdLineArgs r0, $r4;
        arq.cmdline.ArgDecl $r1;
        java.lang.String[] $r3;
        java.lang.String r2;
        boolean z0;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = new arq.cmdline.ArgDecl;

        $r3 = newarray (java.lang.String)[0];

        specialinvoke $r1.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(z0, r2, $r3);

        $r4 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: arq.cmdline.CmdLineArgs add(arq.cmdline.ArgDecl)>($r1);

        return $r4;
    }

    public arq.cmdline.CmdLineArgs add(boolean, java.lang.String)
    {
        arq.cmdline.CmdLineArgs r0, $r4;
        arq.cmdline.ArgDecl $r1;
        java.lang.String[] $r3;
        java.lang.String r2;
        boolean z0;

        r0 := @this: arq.cmdline.CmdLineArgs;

        z0 := @parameter0: boolean;

        r2 := @parameter1: java.lang.String;

        $r1 = new arq.cmdline.ArgDecl;

        $r3 = newarray (java.lang.String)[0];

        specialinvoke $r1.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(z0, r2, $r3);

        $r4 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: arq.cmdline.CmdLineArgs add(arq.cmdline.ArgDecl)>($r1);

        return $r4;
    }

    public arq.cmdline.CmdLineArgs add(arq.cmdline.ArgDecl)
    {
        java.util.Iterator $r1;
        arq.cmdline.ArgDecl r0;
        java.util.Map $r5, $r6;
        arq.cmdline.CmdLineArgs r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String r4, $r11;
        boolean $z0, $z1;

        r2 := @this: arq.cmdline.CmdLineArgs;

        r0 := @parameter0: arq.cmdline.ArgDecl;

        $r1 = virtualinvoke r0.<arq.cmdline.ArgDecl: java.util.Iterator names()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = r2.<arq.cmdline.CmdLineArgs: java.util.Map argMap>;

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Argument \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already added");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r2, $r11);

     label2:
        $r6 = r2.<arq.cmdline.CmdLineArgs: java.util.Map argMap>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r0);

        goto label1;

     label3:
        return r2;
    }

    public arq.cmdline.CmdLineArgs addPositional(java.lang.String)
    {
        arq.cmdline.CmdLineArgs r0;
        java.util.List $r2;
        java.lang.String r1;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<arq.cmdline.CmdLineArgs: java.util.List positionals>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public arq.cmdline.CmdLineArgs addArg(java.lang.String)
    {
        arq.cmdline.CmdLineArgs r0, $r2;
        java.lang.String r1;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: arq.cmdline.CmdLineArgs addArg(java.lang.String,java.lang.String)>(r1, null);

        return $r2;
    }

    public arq.cmdline.CmdLineArgs addArg(java.lang.String, java.lang.String)
    {
        arq.cmdline.Arg $r7, $r9;
        java.util.Map $r2, $r3, $r8;
        arq.cmdline.CmdLineArgs r0, $r6;
        java.lang.Object $r4;
        java.lang.String r1, r5;
        boolean $z0;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $r2 = r0.<arq.cmdline.CmdLineArgs: java.util.Map args>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r8 = r0.<arq.cmdline.CmdLineArgs: java.util.Map args>;

        $r7 = new arq.cmdline.Arg;

        specialinvoke $r7.<arq.cmdline.Arg: void <init>(java.lang.String)>(r1);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7);

     label1:
        $r3 = r0.<arq.cmdline.CmdLineArgs: java.util.Map args>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r9 = (arq.cmdline.Arg) $r4;

        $r6 = specialinvoke r0.<arq.cmdline.CmdLineArgs: arq.cmdline.CmdLineArgs addArgWorker(arq.cmdline.Arg,java.lang.String)>($r9, r5);

        return $r6;
    }

    private arq.cmdline.CmdLineArgs addArgWorker(arq.cmdline.Arg, java.lang.String)
    {
        arq.cmdline.Arg r1;
        arq.cmdline.ArgDecl r5;
        java.util.Map $r3;
        arq.cmdline.CmdLineArgs r0;
        java.lang.String $r2, r6, $r10, $r12, $r16, $r18;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r7, $r13;
        java.lang.Object $r4;
        java.lang.StringBuilder $r8, $r9, $r11, $r14, $r15, $r17;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: arq.cmdline.Arg;

        r6 := @parameter1: java.lang.String;

        $r3 = r0.<arq.cmdline.CmdLineArgs: java.util.Map argMap>;

        $r2 = r1.<arq.cmdline.Arg: java.lang.String name>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (arq.cmdline.ArgDecl) $r4;

        $z0 = virtualinvoke r5.<arq.cmdline.ArgDecl: boolean takesValue()>();

        if $z0 != 0 goto label1;

        if r6 == null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No value for argument: ");

        $r16 = virtualinvoke r1.<arq.cmdline.Arg: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label1:
        $z1 = virtualinvoke r5.<arq.cmdline.ArgDecl: boolean takesValue()>();

        if $z1 == 0 goto label3;

        if r6 != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No value for argument: ");

        $r10 = virtualinvoke r1.<arq.cmdline.Arg: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label2:
        virtualinvoke r1.<arq.cmdline.Arg: void setValue(java.lang.String)>(r6);

        virtualinvoke r1.<arq.cmdline.Arg: void addValue(java.lang.String)>(r6);

     label3:
        return r0;
    }

    public boolean matchesIndirect(java.lang.String)
    {
        arq.cmdline.CmdLineArgs r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: boolean matchesIndirect(java.lang.String,java.lang.String)>(r1, "@");

        return $z0;
    }

    public boolean matchesIndirect(java.lang.String, java.lang.String)
    {
        arq.cmdline.CmdLineArgs r2;
        java.lang.String r0, r1;
        boolean $z0;

        r2 := @this: arq.cmdline.CmdLineArgs;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(r1);

        return $z0;
    }

    public java.lang.String indirect(java.lang.String)
    {
        arq.cmdline.CmdLineArgs r0;
        java.lang.String r1, $r2;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: java.lang.String indirect(java.lang.String,java.lang.String)>(r1, "@");

        return $r2;
    }

    public java.lang.String indirect(java.lang.String, java.lang.String)
    {
        arq.cmdline.CmdLineArgs r0;
        int $i0;
        com.hp.hpl.jena.util.FileManager $r3;
        java.lang.String r1, $r2, $r4, r5;
        boolean $z0;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: boolean matchesIndirect(java.lang.String,java.lang.String)>(r5, r1);

        if $z0 != 0 goto label1;

        return r5;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r2 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>($i0);

        $r3 = staticinvoke <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager get()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.util.FileManager: java.lang.String readWholeFileAsUTF8(java.lang.String)>($r2);

        return $r4;
    }

    public boolean contains(arq.cmdline.ArgDecl)
    {
        arq.cmdline.CmdLineArgs r0;
        arq.cmdline.ArgDecl r1;
        arq.cmdline.Arg $r2;
        boolean $z0;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: arq.cmdline.ArgDecl;

        $r2 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: arq.cmdline.Arg getArg(arq.cmdline.ArgDecl)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean contains(java.lang.String)
    {
        arq.cmdline.CmdLineArgs r0;
        arq.cmdline.Arg $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: arq.cmdline.Arg getArg(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsMultiple(java.lang.String)
    {
        java.util.List $r2;
        arq.cmdline.CmdLineArgs r0;
        int $i0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: java.util.List getValues(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsMultiple(arq.cmdline.ArgDecl)
    {
        java.util.List $r2;
        arq.cmdline.CmdLineArgs r0;
        int $i0;
        arq.cmdline.ArgDecl r1;
        boolean $z0;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: arq.cmdline.ArgDecl;

        $r2 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: java.util.List getValues(arq.cmdline.ArgDecl)>(r1);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasArgs()
    {
        java.util.Map $r1;
        arq.cmdline.CmdLineArgs r0;
        int $i0;
        boolean $z0;

        r0 := @this: arq.cmdline.CmdLineArgs;

        $r1 = r0.<arq.cmdline.CmdLineArgs: java.util.Map args>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasArg(java.lang.String)
    {
        arq.cmdline.CmdLineArgs r0;
        arq.cmdline.Arg $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: arq.cmdline.Arg getArg(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasArg(arq.cmdline.ArgDecl)
    {
        arq.cmdline.CmdLineArgs r0;
        arq.cmdline.ArgDecl r1;
        arq.cmdline.Arg $r2;
        boolean $z0;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: arq.cmdline.ArgDecl;

        $r2 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: arq.cmdline.Arg getArg(arq.cmdline.ArgDecl)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public arq.cmdline.Arg getArg(arq.cmdline.ArgDecl)
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        arq.cmdline.Arg r5, r7;
        arq.cmdline.ArgDecl r6;
        java.util.Map $r1;
        arq.cmdline.CmdLineArgs r0;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r6 := @parameter0: arq.cmdline.ArgDecl;

        r7 = null;

        $r1 = r0.<arq.cmdline.CmdLineArgs: java.util.Map args>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (arq.cmdline.Arg) $r4;

        $z1 = virtualinvoke r6.<arq.cmdline.ArgDecl: boolean matches(arq.cmdline.Arg)>(r5);

        if $z1 == 0 goto label2;

        r7 = r5;

     label2:
        goto label1;

     label3:
        return r7;
    }

    public arq.cmdline.Arg getArg(java.lang.String)
    {
        java.util.Map $r2;
        arq.cmdline.CmdLineArgs r1;
        arq.cmdline.Arg $r4;
        java.lang.Object $r3;
        java.lang.String $r0, r5;

        r1 := @this: arq.cmdline.CmdLineArgs;

        r5 := @parameter0: java.lang.String;

        $r0 = staticinvoke <arq.cmdline.ArgDecl: java.lang.String canonicalForm(java.lang.String)>(r5);

        $r2 = r1.<arq.cmdline.CmdLineArgs: java.util.Map args>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (arq.cmdline.Arg) $r3;

        return $r4;
    }

    public java.lang.String getValue(arq.cmdline.ArgDecl)
    {
        arq.cmdline.CmdLineArgs r0;
        arq.cmdline.ArgDecl r1;
        arq.cmdline.Arg $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: arq.cmdline.ArgDecl;

        $r2 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: arq.cmdline.Arg getArg(arq.cmdline.ArgDecl)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke $r2.<arq.cmdline.Arg: boolean hasValue()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke $r2.<arq.cmdline.Arg: java.lang.String getValue()>();

        return $r3;

     label2:
        return null;
    }

    public java.lang.String getValue(java.lang.String)
    {
        arq.cmdline.CmdLineArgs r0;
        arq.cmdline.Arg $r2;
        java.lang.String r1, $r3;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: arq.cmdline.Arg getArg(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<arq.cmdline.Arg: java.lang.String getValue()>();

        return $r3;
    }

    public boolean hasValueOfTrue(arq.cmdline.ArgDecl)
    {
        arq.cmdline.CmdLineArgs r0;
        arq.cmdline.ArgDecl r1;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: arq.cmdline.ArgDecl;

        $r2 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: java.lang.String getValue(arq.cmdline.ArgDecl)>(r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("t");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("yes");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("y");

        if $z3 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public boolean hasValueOfFalse(arq.cmdline.ArgDecl)
    {
        arq.cmdline.CmdLineArgs r0;
        arq.cmdline.ArgDecl r1;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: arq.cmdline.ArgDecl;

        $r2 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: java.lang.String getValue(arq.cmdline.ArgDecl)>(r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("f");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("no");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("n");

        if $z3 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public java.util.List getValues(arq.cmdline.ArgDecl)
    {
        java.util.List $r3;
        arq.cmdline.CmdLineArgs r0;
        arq.cmdline.ArgDecl r1;
        arq.cmdline.Arg $r2;
        java.util.ArrayList $r4;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: arq.cmdline.ArgDecl;

        $r2 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: arq.cmdline.Arg getArg(arq.cmdline.ArgDecl)>(r1);

        if $r2 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        return $r4;

     label1:
        $r3 = virtualinvoke $r2.<arq.cmdline.Arg: java.util.List getValues()>();

        return $r3;
    }

    public java.util.List getValues(java.lang.String)
    {
        java.util.List $r3;
        arq.cmdline.CmdLineArgs r0;
        arq.cmdline.Arg $r2;
        java.lang.String r1;
        java.util.ArrayList $r4;

        r0 := @this: arq.cmdline.CmdLineArgs;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<arq.cmdline.CmdLineArgs: arq.cmdline.Arg getArg(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        return $r4;

     label1:
        $r3 = virtualinvoke $r2.<arq.cmdline.Arg: java.util.List getValues()>();

        return $r3;
    }

    public java.lang.String getPositionalArg(int)
    {
        java.util.List $r1;
        arq.cmdline.CmdLineArgs r0;
        int i0;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: arq.cmdline.CmdLineArgs;

        i0 := @parameter0: int;

        $r1 = r0.<arq.cmdline.CmdLineArgs: java.util.List positionals>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public int getNumPositional()
    {
        arq.cmdline.CmdLineArgs r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: arq.cmdline.CmdLineArgs;

        $r1 = r0.<arq.cmdline.CmdLineArgs: java.util.List positionals>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public boolean hasPositional()
    {
        java.util.List $r1;
        arq.cmdline.CmdLineArgs r0;
        int $i0;
        boolean $z0;

        r0 := @this: arq.cmdline.CmdLineArgs;

        $r1 = r0.<arq.cmdline.CmdLineArgs: java.util.List positionals>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.List getPositional()
    {
        arq.cmdline.CmdLineArgs r0;
        java.util.List $r1;

        r0 := @this: arq.cmdline.CmdLineArgs;

        $r1 = r0.<arq.cmdline.CmdLineArgs: java.util.List positionals>;

        return $r1;
    }

    public java.util.List getPositionalOrStdin()
    {
        java.lang.String[] $r2;
        java.util.List $r1, $r3, $r4, $r5, $r6;
        arq.cmdline.CmdLineArgs r0;
        boolean $z0;

        r0 := @this: arq.cmdline.CmdLineArgs;

        $r1 = r0.<arq.cmdline.CmdLineArgs: java.util.List positionals>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<arq.cmdline.CmdLineArgs: java.util.List positionals>;

        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r5);

        return $r6;

     label1:
        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "-";

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r4;
    }

    protected void handleUnrecognizedArg(java.lang.String)
    {
        arq.cmd.CmdException $r0;
        arq.cmdline.CmdLineArgs r6;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5;

        r6 := @this: arq.cmdline.CmdLineArgs;

        r3 := @parameter0: java.lang.String;

        $r0 = new arq.cmd.CmdException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown argument: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<arq.cmd.CmdException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    private arq.cmdline.ArgDecl find(java.lang.String)
    {
        java.util.Map $r2;
        arq.cmdline.CmdLineArgs r1;
        arq.cmdline.ArgDecl $r4;
        java.lang.Object $r3;
        java.lang.String $r0, r5;

        r1 := @this: arq.cmdline.CmdLineArgs;

        r5 := @parameter0: java.lang.String;

        $r0 = staticinvoke <arq.cmdline.ArgDecl: java.lang.String canonicalForm(java.lang.String)>(r5);

        $r2 = r1.<arq.cmdline.CmdLineArgs: java.util.Map argMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (arq.cmdline.ArgDecl) $r3;

        return $r4;
    }

    public java.lang.String toString()
    {
        arq.cmdline.Arg r14;
        java.util.Map $r1, $r12;
        arq.cmdline.CmdLineArgs r0;
        java.lang.String $r19, r20, r21, r22, r23, r24;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3, $r5;
        java.util.Set $r2;
        java.util.List $r4;
        java.lang.Object $r6, $r11, $r13;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r15, $r16, $r17, $r18;

        r0 := @this: arq.cmdline.CmdLineArgs;

        $z0 = r0.<arq.cmdline.CmdLineArgs: boolean processedArgs>;

        if $z0 != 0 goto label1;

        $r19 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r19;

     label1:
        r20 = "";

        r21 = "";

        $r1 = r0.<arq.cmdline.CmdLineArgs: java.util.Map args>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r11 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.lang.String) $r11;

        $r12 = r0.<arq.cmdline.CmdLineArgs: java.util.Map args>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r22);

        r14 = (arq.cmdline.Arg) $r13;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        r21 = " ";

        goto label2;

     label3:
        r23 = " -- ";

        $r4 = r0.<arq.cmdline.CmdLineArgs: java.util.List positionals>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.lang.String) $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        r20 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r23 = " ";

        goto label4;

     label5:
        return r20;
    }

    public static void <clinit>()
    {
        <arq.cmdline.CmdLineArgs: java.lang.String DefaultIndirectMarker> = "@";

        return;
    }
}
