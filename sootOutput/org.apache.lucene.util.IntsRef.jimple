public final class org.apache.lucene.util.IntsRef extends java.lang.Object implements java.lang.Comparable, java.lang.Cloneable
{
    public static final int[] EMPTY_INTS;
    public int[] ints;
    public int offset;
    public int length;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        int[] $r1;
        org.apache.lucene.util.IntsRef r0;

        r0 := @this: org.apache.lucene.util.IntsRef;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.lucene.util.IntsRef: int[] EMPTY_INTS>;

        r0.<org.apache.lucene.util.IntsRef: int[] ints> = $r1;

        return;
    }

    public void <init>(int)
    {
        int i0;
        int[] $r1;
        org.apache.lucene.util.IntsRef r0;

        r0 := @this: org.apache.lucene.util.IntsRef;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[i0];

        r0.<org.apache.lucene.util.IntsRef: int[] ints> = $r1;

        return;
    }

    public void <init>(int[], int, int)
    {
        int[] r1;
        int i0, i1;
        java.lang.AssertionError $r2;
        org.apache.lucene.util.IntsRef r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.IntsRef;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.IntsRef: int[] ints> = r1;

        r0.<org.apache.lucene.util.IntsRef: int offset> = i0;

        r0.<org.apache.lucene.util.IntsRef: int length> = i1;

        $z0 = <org.apache.lucene.util.IntsRef: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.lucene.util.IntsRef: boolean isValid()>();

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    public org.apache.lucene.util.IntsRef clone()
    {
        int[] $r2;
        int $i0, $i1;
        org.apache.lucene.util.IntsRef $r0, r1;

        r1 := @this: org.apache.lucene.util.IntsRef;

        $r0 = new org.apache.lucene.util.IntsRef;

        $r2 = r1.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i1 = r1.<org.apache.lucene.util.IntsRef: int offset>;

        $i0 = r1.<org.apache.lucene.util.IntsRef: int length>;

        specialinvoke $r0.<org.apache.lucene.util.IntsRef: void <init>(int[],int,int)>($r2, $i1, $i0);

        return $r0;
    }

    public int hashCode()
    {
        org.apache.lucene.util.IntsRef r0;
        int[] $r1;
        int $i0, $i1, i2, $i3, $i4, i5, i6;

        r0 := @this: org.apache.lucene.util.IntsRef;

        i5 = 0;

        $i1 = r0.<org.apache.lucene.util.IntsRef: int offset>;

        $i0 = r0.<org.apache.lucene.util.IntsRef: int length>;

        i2 = $i1 + $i0;

        i6 = r0.<org.apache.lucene.util.IntsRef: int offset>;

     label1:
        if i6 >= i2 goto label2;

        $i4 = 31 * i5;

        $r1 = r0.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i3 = $r1[i6];

        i5 = $i4 + $i3;

        i6 = i6 + 1;

        goto label1;

     label2:
        return i5;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1;
        org.apache.lucene.util.IntsRef r1, $r2;

        r1 := @this: org.apache.lucene.util.IntsRef;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = r0 instanceof org.apache.lucene.util.IntsRef;

        if $z0 == 0 goto label2;

        $r2 = (org.apache.lucene.util.IntsRef) r0;

        $z1 = virtualinvoke r1.<org.apache.lucene.util.IntsRef: boolean intsEquals(org.apache.lucene.util.IntsRef)>($r2);

        return $z1;

     label2:
        return 0;
    }

    public boolean intsEquals(org.apache.lucene.util.IntsRef)
    {
        org.apache.lucene.util.IntsRef r0, r1;
        int[] r2, $r3;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, i7, i8;

        r0 := @this: org.apache.lucene.util.IntsRef;

        r1 := @parameter0: org.apache.lucene.util.IntsRef;

        $i1 = r0.<org.apache.lucene.util.IntsRef: int length>;

        $i0 = r1.<org.apache.lucene.util.IntsRef: int length>;

        if $i1 != $i0 goto label4;

        i7 = r1.<org.apache.lucene.util.IntsRef: int offset>;

        r2 = r1.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i3 = r0.<org.apache.lucene.util.IntsRef: int offset>;

        $i2 = r0.<org.apache.lucene.util.IntsRef: int length>;

        i4 = $i3 + $i2;

        i8 = r0.<org.apache.lucene.util.IntsRef: int offset>;

     label1:
        if i8 >= i4 goto label3;

        $r3 = r0.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i6 = $r3[i8];

        $i5 = r2[i7];

        if $i6 == $i5 goto label2;

        return 0;

     label2:
        i8 = i8 + 1;

        i7 = i7 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    public int compareTo(org.apache.lucene.util.IntsRef)
    {
        org.apache.lucene.util.IntsRef r0, r1;
        int[] r2, r3;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, i8, $i9, i10, i11, i12, $i14;

        r0 := @this: org.apache.lucene.util.IntsRef;

        r1 := @parameter0: org.apache.lucene.util.IntsRef;

        if r0 != r1 goto label1;

        return 0;

     label1:
        r2 = r0.<org.apache.lucene.util.IntsRef: int[] ints>;

        i11 = r0.<org.apache.lucene.util.IntsRef: int offset>;

        r3 = r1.<org.apache.lucene.util.IntsRef: int[] ints>;

        i12 = r1.<org.apache.lucene.util.IntsRef: int offset>;

        $i1 = r0.<org.apache.lucene.util.IntsRef: int length>;

        $i0 = r1.<org.apache.lucene.util.IntsRef: int length>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        i3 = i11 + $i2;

     label2:
        if i11 >= i3 goto label5;

        $i7 = i11;

        i11 = i11 + 1;

        i8 = r2[$i7];

        $i9 = i12;

        i12 = i12 + 1;

        i10 = r3[$i9];

        if i8 <= i10 goto label3;

        return 1;

     label3:
        if i8 >= i10 goto label4;

        $i14 = (int) -1;

        return $i14;

     label4:
        goto label2;

     label5:
        $i5 = r0.<org.apache.lucene.util.IntsRef: int length>;

        $i4 = r1.<org.apache.lucene.util.IntsRef: int length>;

        $i6 = $i5 - $i4;

        return $i6;
    }

    public void copyInts(org.apache.lucene.util.IntsRef)
    {
        org.apache.lucene.util.IntsRef r0, r2;
        int[] $r1, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: org.apache.lucene.util.IntsRef;

        r2 := @parameter0: org.apache.lucene.util.IntsRef;

        $r1 = r0.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i1 = lengthof $r1;

        $i0 = r0.<org.apache.lucene.util.IntsRef: int offset>;

        $i3 = $i1 - $i0;

        $i2 = r2.<org.apache.lucene.util.IntsRef: int length>;

        if $i3 >= $i2 goto label1;

        $i8 = r2.<org.apache.lucene.util.IntsRef: int length>;

        $r5 = newarray (int)[$i8];

        r0.<org.apache.lucene.util.IntsRef: int[] ints> = $r5;

        r0.<org.apache.lucene.util.IntsRef: int offset> = 0;

     label1:
        $r4 = r2.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i6 = r2.<org.apache.lucene.util.IntsRef: int offset>;

        $r3 = r0.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i5 = r0.<org.apache.lucene.util.IntsRef: int offset>;

        $i4 = r2.<org.apache.lucene.util.IntsRef: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i6, $r3, $i5, $i4);

        $i7 = r2.<org.apache.lucene.util.IntsRef: int length>;

        r0.<org.apache.lucene.util.IntsRef: int length> = $i7;

        return;
    }

    public void grow(int)
    {
        java.lang.AssertionError $r4;
        org.apache.lucene.util.IntsRef r0;
        int[] $r1, $r2, $r3;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.IntsRef;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.IntsRef: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i2 = r0.<org.apache.lucene.util.IntsRef: int offset>;

        if $i2 == 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r1 = r0.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i1 = lengthof $r1;

        if $i1 >= i0 goto label2;

        $r2 = r0.<org.apache.lucene.util.IntsRef: int[] ints>;

        $r3 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[],int)>($r2, i0);

        r0.<org.apache.lucene.util.IntsRef: int[] ints> = $r3;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.util.IntsRef r1;
        int[] $r3;
        int $i0, $i1, i2, $i3, $i4, i5;
        java.lang.StringBuilder $r0;
        java.lang.String $r2, $r4;

        r1 := @this: org.apache.lucene.util.IntsRef;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $i1 = r1.<org.apache.lucene.util.IntsRef: int offset>;

        $i0 = r1.<org.apache.lucene.util.IntsRef: int length>;

        i2 = $i1 + $i0;

        i5 = r1.<org.apache.lucene.util.IntsRef: int offset>;

     label1:
        if i5 >= i2 goto label3;

        $i3 = r1.<org.apache.lucene.util.IntsRef: int offset>;

        if i5 <= $i3 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label2:
        $r3 = r1.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i4 = $r3[i5];

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        i5 = i5 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static org.apache.lucene.util.IntsRef deepCopyOf(org.apache.lucene.util.IntsRef)
    {
        org.apache.lucene.util.IntsRef $r0, r1;

        r1 := @parameter0: org.apache.lucene.util.IntsRef;

        $r0 = new org.apache.lucene.util.IntsRef;

        specialinvoke $r0.<org.apache.lucene.util.IntsRef: void <init>()>();

        virtualinvoke $r0.<org.apache.lucene.util.IntsRef: void copyInts(org.apache.lucene.util.IntsRef)>(r1);

        return $r0;
    }

    public boolean isValid()
    {
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r16, $r17, $r18, $r19, $r20, $r23, $r24, $r25, $r26, $r28, $r31, $r32, $r33, $r36, $r37, $r38, $r39, $r41, $r44, $r45, $r46;
        java.lang.String $r14, $r21, $r29, $r34, $r42, $r47;
        java.lang.IllegalStateException $r5, $r15, $r22, $r30, $r35, $r43, $r48;
        org.apache.lucene.util.IntsRef r0;
        int[] $r1, $r2, $r3, $r4, $r12, $r27, $r40;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;

        r0 := @this: org.apache.lucene.util.IntsRef;

        $r1 = r0.<org.apache.lucene.util.IntsRef: int[] ints>;

        if $r1 != null goto label1;

        $r48 = new java.lang.IllegalStateException;

        specialinvoke $r48.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ints is null");

        throw $r48;

     label1:
        $i0 = r0.<org.apache.lucene.util.IntsRef: int length>;

        if $i0 >= 0 goto label2;

        $r43 = new java.lang.IllegalStateException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("length is negative: ");

        $i23 = r0.<org.apache.lucene.util.IntsRef: int length>;

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r47);

        throw $r43;

     label2:
        $i2 = r0.<org.apache.lucene.util.IntsRef: int length>;

        $r2 = r0.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i1 = lengthof $r2;

        if $i2 <= $i1 goto label3;

        $r35 = new java.lang.IllegalStateException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("length is out of bounds: ");

        $i21 = r0.<org.apache.lucene.util.IntsRef: int length>;

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",ints.length=");

        $r40 = r0.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i22 = lengthof $r40;

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r42);

        throw $r35;

     label3:
        $i3 = r0.<org.apache.lucene.util.IntsRef: int offset>;

        if $i3 >= 0 goto label4;

        $r30 = new java.lang.IllegalStateException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("offset is negative: ");

        $i20 = r0.<org.apache.lucene.util.IntsRef: int offset>;

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r34);

        throw $r30;

     label4:
        $i5 = r0.<org.apache.lucene.util.IntsRef: int offset>;

        $r3 = r0.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i4 = lengthof $r3;

        if $i5 <= $i4 goto label5;

        $r22 = new java.lang.IllegalStateException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("offset out of bounds: ");

        $i18 = r0.<org.apache.lucene.util.IntsRef: int offset>;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",ints.length=");

        $r27 = r0.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i19 = lengthof $r27;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        throw $r22;

     label5:
        $i7 = r0.<org.apache.lucene.util.IntsRef: int offset>;

        $i6 = r0.<org.apache.lucene.util.IntsRef: int length>;

        $i8 = $i7 + $i6;

        if $i8 >= 0 goto label6;

        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("offset+length is negative: offset=");

        $i16 = r0.<org.apache.lucene.util.IntsRef: int offset>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",length=");

        $i17 = r0.<org.apache.lucene.util.IntsRef: int length>;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        throw $r15;

     label6:
        $i10 = r0.<org.apache.lucene.util.IntsRef: int offset>;

        $i9 = r0.<org.apache.lucene.util.IntsRef: int length>;

        $i12 = $i10 + $i9;

        $r4 = r0.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i11 = lengthof $r4;

        if $i12 <= $i11 goto label7;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("offset+length out of bounds: offset=");

        $i13 = r0.<org.apache.lucene.util.IntsRef: int offset>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",length=");

        $i14 = r0.<org.apache.lucene.util.IntsRef: int length>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",ints.length=");

        $r12 = r0.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i15 = lengthof $r12;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r5;

     label7:
        return 1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.util.IntsRef r0, $r1;

        r0 := @this: org.apache.lucene.util.IntsRef;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.IntsRef: org.apache.lucene.util.IntsRef clone()>();

        return $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        org.apache.lucene.util.IntsRef r0, $r2;

        r0 := @this: org.apache.lucene.util.IntsRef;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.lucene.util.IntsRef) r1;

        $i0 = virtualinvoke r0.<org.apache.lucene.util.IntsRef: int compareTo(org.apache.lucene.util.IntsRef)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        int[] $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/IntsRef;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.IntsRef: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (int)[0];

        <org.apache.lucene.util.IntsRef: int[] EMPTY_INTS> = $r1;

        return;
    }
}
