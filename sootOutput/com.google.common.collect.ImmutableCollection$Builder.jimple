abstract class com.google.common.collect.ImmutableCollection$Builder extends java.lang.Object
{

    void <init>()
    {
        com.google.common.collect.ImmutableCollection$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableCollection$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object);

    public transient com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int i0, i1;
        java.lang.Object r2;
        com.google.common.collect.ImmutableCollection$Builder r1;

        r1 := @this: com.google.common.collect.ImmutableCollection$Builder;

        r0 := @parameter0: java.lang.Object[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r0[i1];

        virtualinvoke r1.<com.google.common.collect.ImmutableCollection$Builder: com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)>(r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)
    {
        java.util.Iterator $r1;
        java.lang.Object $r3;
        java.lang.Iterable r0;
        boolean $z0;
        com.google.common.collect.ImmutableCollection$Builder r2;

        r2 := @this: com.google.common.collect.ImmutableCollection$Builder;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r2.<com.google.common.collect.ImmutableCollection$Builder: com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return r2;
    }

    public com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator)
    {
        java.util.Iterator r0;
        java.lang.Object $r2;
        boolean $z0;
        com.google.common.collect.ImmutableCollection$Builder r1;

        r1 := @this: com.google.common.collect.ImmutableCollection$Builder;

        r0 := @parameter0: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r1.<com.google.common.collect.ImmutableCollection$Builder: com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)>($r2);

        goto label1;

     label2:
        return r1;
    }

    public abstract com.google.common.collect.ImmutableCollection build();
}
