public class ucar.nc2.dt.trajectory.RafTrajectoryObsDataset extends ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset implements ucar.nc2.dt.TypedDatasetFactoryIF
{
    private java.lang.String timeDimName;
    private java.lang.String timeVarName;
    private java.lang.String latVarName;
    private java.lang.String lonVarName;
    private java.lang.String elevVarName;

    public static boolean isValidFile(ucar.nc2.dataset.NetcdfDataset)
    {
        ucar.nc2.Attribute $r1, $r3, $r6, r7;
        java.lang.String $r2, $r4, $r5;
        ucar.nc2.dataset.NetcdfDataset r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("Conventions");

        r7 = $r1;

        if $r1 != null goto label1;

        r7 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttributeIgnoreCase(java.lang.String)>("Conventions");

     label1:
        if r7 != null goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke r7.<ucar.nc2.Attribute: boolean isString()>();

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $r2 = virtualinvoke r7.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("NCAR-RAF/nimbus");

        if $z1 != 0 goto label4;

        return 0;

     label4:
        $r3 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttributeIgnoreCase(java.lang.String)>("Version");

        if $r3 != null goto label5;

        $r6 = new ucar.nc2.Attribute;

        specialinvoke $r6.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("Version", "1.3");

        virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r6);

        virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: void finish()>();

        return 1;

     label5:
        $z2 = virtualinvoke $r3.<ucar.nc2.Attribute: boolean isString()>();

        if $z2 != 0 goto label6;

        return 0;

     label6:
        $r4 = virtualinvoke $r3.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("1.2");

        if $z3 == 0 goto label7;

        return 1;

     label7:
        $r5 = virtualinvoke $r3.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("1.3");

        if $z4 == 0 goto label8;

        return 1;

     label8:
        return 0;
    }

    public boolean isMine(ucar.nc2.dataset.NetcdfDataset)
    {
        ucar.nc2.dt.trajectory.RafTrajectoryObsDataset r1;
        ucar.nc2.dataset.NetcdfDataset r0;
        boolean $z0;

        r1 := @this: ucar.nc2.dt.trajectory.RafTrajectoryObsDataset;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        $z0 = staticinvoke <ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: boolean isValidFile(ucar.nc2.dataset.NetcdfDataset)>(r0);

        return $z0;
    }

    public ucar.nc2.dt.TypedDataset open(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.util.CancelTask, java.lang.StringBuilder) throws java.io.IOException
    {
        ucar.nc2.util.CancelTask r3;
        ucar.nc2.dt.trajectory.RafTrajectoryObsDataset $r0, r2;
        java.lang.StringBuilder r4;
        ucar.nc2.dataset.NetcdfDataset r1;

        r2 := @this: ucar.nc2.dt.trajectory.RafTrajectoryObsDataset;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r3 := @parameter1: ucar.nc2.util.CancelTask;

        r4 := @parameter2: java.lang.StringBuilder;

        $r0 = new ucar.nc2.dt.trajectory.RafTrajectoryObsDataset;

        specialinvoke $r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r1);

        return $r0;
    }

    public ucar.nc2.constants.FeatureType getScientificDataType()
    {
        ucar.nc2.dt.trajectory.RafTrajectoryObsDataset r1;
        ucar.nc2.constants.FeatureType $r0;

        r1 := @this: ucar.nc2.dt.trajectory.RafTrajectoryObsDataset;

        $r0 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType TRAJECTORY>;

        return $r0;
    }

    public void <init>()
    {
        ucar.nc2.dt.trajectory.RafTrajectoryObsDataset r0;

        r0 := @this: ucar.nc2.dt.trajectory.RafTrajectoryObsDataset;

        specialinvoke r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: void <init>()>();

        return;
    }

    public void <init>(ucar.nc2.dataset.NetcdfDataset) throws java.io.IOException
    {
        ucar.nc2.Attribute $r2, $r4, $r15, $r19, $r24, $r29, $r34, $r122, $r126, $r131, r157;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r53, $r54, $r55, $r56, $r59, $r60, $r62, $r63, $r66, $r67, $r69, $r70, $r73, $r74, $r76, $r77, $r114, $r115, $r117, $r132, $r133, $r134, $r137, $r138, $r140, $r141, $r144, $r145, $r147, $r148, $r152, $r153, $r155;
        java.util.Calendar $r90;
        java.io.IOException $r151;
        ucar.ma2.Array $r92, $r94, $r96, $r98, $r100, $r102, $r105;
        ucar.ma2.InvalidRangeException $r150;
        ucar.ma2.Index $r106, $r107, $r108, $r109, $r110, $r111, $r112;
        java.util.Date r158;
        java.util.Locale $r89;
        java.util.TimeZone $r88;
        ucar.nc2.units.DateFormatter $r113;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        ucar.nc2.Variable $r18, $r23, $r28, $r33, $r42, $r45, $r48, $r51, $r87, $r91, $r93, $r95, $r97, $r99, $r101, $r104, $r121, $r125, $r130;
        ucar.nc2.dt.trajectory.RafTrajectoryObsDataset r0;
        ucar.nc2.Group $r37, $r40, $r43, $r46, $r49;
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config $r36;
        java.lang.String $r3, $r5, $r6, $r10, $r13, $r16, $r20, $r21, $r25, $r26, $r30, $r31, $r35, $r38, $r41, $r44, $r47, $r50, $r57, $r61, $r64, $r68, $r71, $r75, $r78, $r79, $r81, $r82, $r83, $r84, $r85, $r103, $r116, $r118, $r119, $r123, $r127, $r128, $r135, $r139, $r142, $r146, $r149, $r154, $r156;
        ucar.nc2.Dimension $r39;
        ucar.nc2.dataset.NetcdfDataset r1, $r14, $r17, $r22, $r27, $r32, $r86, $r120, $r124, $r129;
        java.lang.IllegalStateException $r52, $r58, $r65, $r72;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        java.lang.String[] $r80;
        java.lang.IllegalArgumentException $r7, $r136, $r143;

        r0 := @this: ucar.nc2.dt.trajectory.RafTrajectoryObsDataset;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        specialinvoke r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r1);

        $r2 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("Conventions");

        r157 = $r2;

        if $r2 != null goto label01;

        r157 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttributeIgnoreCase(java.lang.String)>("Conventions");

     label01:
        if r157 != null goto label02;

        $r143 = new java.lang.IllegalArgumentException;

        $r144 = new java.lang.StringBuilder;

        specialinvoke $r144.<java.lang.StringBuilder: void <init>()>();

        $r145 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File <");

        $r146 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: java.lang.String getId()>();

        $r147 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r146);

        $r148 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not a \"NCAR-RAF/nimbus\" convention file.");

        $r149 = virtualinvoke $r148.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r143.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r149);

        throw $r143;

     label02:
        $r3 = virtualinvoke r157.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("NCAR-RAF/nimbus");

        if $z0 != 0 goto label03;

        $r136 = new java.lang.IllegalArgumentException;

        $r137 = new java.lang.StringBuilder;

        specialinvoke $r137.<java.lang.StringBuilder: void <init>()>();

        $r138 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File <");

        $r139 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: java.lang.String getId()>();

        $r140 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r139);

        $r141 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not a \"NCAR-RAF/nimbus\" convention file.");

        $r142 = virtualinvoke $r141.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r136.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r142);

        throw $r136;

     label03:
        $r4 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttributeIgnoreCase(java.lang.String)>("Version");

        $r5 = virtualinvoke $r4.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("1.2");

        if $z1 == 0 goto label11;

        r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String timeDimName> = "Time";

        r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String timeVarName> = "time_offset";

        r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String latVarName> = "LAT";

        r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String lonVarName> = "LON";

        r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String elevVarName> = "ALT";

        $r86 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r87 = virtualinvoke $r86.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("base_time");

        $i0 = virtualinvoke $r87.<ucar.nc2.Variable: int readScalarInt()>();

        if $i0 == 0 goto label04;

        $r132 = new java.lang.StringBuilder;

        specialinvoke $r132.<java.lang.StringBuilder: void <init>()>();

        $r133 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r134 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds since 1970-01-01T00:00:00");

        $r135 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.String toString()>();

        r158 = staticinvoke <ucar.nc2.units.DateUnit: java.util.Date getStandardDate(java.lang.String)>($r135);

        goto label09;

     label04:
        $r88 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        $r89 = <java.util.Locale: java.util.Locale US>;

        $r90 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>($r88, $r89);

     label05:
        $r91 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("YEAR");

        $r92 = virtualinvoke $r91.<ucar.nc2.Variable: ucar.ma2.Array read(java.lang.String)>("0");

        $r93 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("MONTH");

        $r94 = virtualinvoke $r93.<ucar.nc2.Variable: ucar.ma2.Array read(java.lang.String)>("0");

        $r95 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("DAY");

        $r96 = virtualinvoke $r95.<ucar.nc2.Variable: ucar.ma2.Array read(java.lang.String)>("0");

        $r97 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("HOUR");

        $r98 = virtualinvoke $r97.<ucar.nc2.Variable: ucar.ma2.Array read(java.lang.String)>("0");

        $r99 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("MINUTE");

        $r100 = virtualinvoke $r99.<ucar.nc2.Variable: ucar.ma2.Array read(java.lang.String)>("0");

        $r101 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("SECOND");

        $r102 = virtualinvoke $r101.<ucar.nc2.Variable: ucar.ma2.Array read(java.lang.String)>("0");

        $r103 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String timeVarName>;

        $r104 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>($r103);

        $r105 = virtualinvoke $r104.<ucar.nc2.Variable: ucar.ma2.Array read(java.lang.String)>("0");

     label06:
        goto label08;

     label07:
        $r150 := @caughtexception;

        $r151 = new java.io.IOException;

        $r152 = new java.lang.StringBuilder;

        specialinvoke $r152.<java.lang.StringBuilder: void <init>()>();

        $r153 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed while reading first value of YEAR, MONTH, DAY, HOUR, MINUTE, SECOND, or time_offset: ");

        $r154 = virtualinvoke $r150.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        $r155 = virtualinvoke $r153.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r154);

        $r156 = virtualinvoke $r155.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r151.<java.io.IOException: void <init>(java.lang.String)>($r156);

        throw $r151;

     label08:
        virtualinvoke $r90.<java.util.Calendar: void clear()>();

        $r106 = virtualinvoke $r92.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $f0 = virtualinvoke $r92.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r106);

        $i1 = (int) $f0;

        virtualinvoke $r90.<java.util.Calendar: void set(int,int)>(1, $i1);

        $r107 = virtualinvoke $r94.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $f1 = virtualinvoke $r94.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r107);

        $i2 = (int) $f1;

        virtualinvoke $r90.<java.util.Calendar: void set(int,int)>(2, $i2);

        $r108 = virtualinvoke $r96.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $f2 = virtualinvoke $r96.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r108);

        $i3 = (int) $f2;

        virtualinvoke $r90.<java.util.Calendar: void set(int,int)>(5, $i3);

        $r109 = virtualinvoke $r98.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $f3 = virtualinvoke $r98.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r109);

        $i4 = (int) $f3;

        virtualinvoke $r90.<java.util.Calendar: void set(int,int)>(11, $i4);

        $r110 = virtualinvoke $r100.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $f4 = virtualinvoke $r100.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r110);

        $i5 = (int) $f4;

        virtualinvoke $r90.<java.util.Calendar: void set(int,int)>(12, $i5);

        $r111 = virtualinvoke $r102.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $f5 = virtualinvoke $r102.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r111);

        $i6 = (int) $f5;

        virtualinvoke $r90.<java.util.Calendar: void set(int,int)>(13, $i6);

        virtualinvoke $r90.<java.util.Calendar: void set(int,int)>(14, 0);

        $r112 = virtualinvoke $r105.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $f6 = virtualinvoke $r105.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r112);

        $i7 = (int) $f6;

        $i8 = neg $i7;

        virtualinvoke $r90.<java.util.Calendar: void add(int,int)>(13, $i8);

        r158 = virtualinvoke $r90.<java.util.Calendar: java.util.Date getTime()>();

     label09:
        $r113 = new ucar.nc2.units.DateFormatter;

        specialinvoke $r113.<ucar.nc2.units.DateFormatter: void <init>()>();

        $r114 = new java.lang.StringBuilder;

        specialinvoke $r114.<java.lang.StringBuilder: void <init>()>();

        $r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("seconds since ");

        $r116 = virtualinvoke $r113.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>(r158);

        $r117 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r116);

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.String toString()>();

        $r120 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r119 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String timeVarName>;

        $r121 = virtualinvoke $r120.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>($r119);

        $r122 = new ucar.nc2.Attribute;

        specialinvoke $r122.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", $r118);

        virtualinvoke $r121.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r122);

        $r124 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r123 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String elevVarName>;

        $r125 = virtualinvoke $r124.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>($r123);

        $r126 = virtualinvoke $r125.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("units");

        $r127 = virtualinvoke $r126.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z7 = staticinvoke <ucar.nc2.units.SimpleUnit: boolean isCompatible(java.lang.String,java.lang.String)>($r127, "meters");

        if $z7 != 0 goto label10;

        $z8 = virtualinvoke $r127.<java.lang.String: boolean equals(java.lang.Object)>("M");

        if $z8 == 0 goto label10;

        $r129 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r128 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String elevVarName>;

        $r130 = virtualinvoke $r129.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>($r128);

        $r131 = new ucar.nc2.Attribute;

        specialinvoke $r131.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "meters");

        virtualinvoke $r130.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r131);

     label10:
        goto label19;

     label11:
        $r6 = virtualinvoke $r4.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("1.3");

        if $z2 == 0 goto label18;

        r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String timeDimName> = "Time";

        r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String timeVarName> = "Time";

        r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String latVarName> = "LAT";

        r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String lonVarName> = "LON";

        r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String elevVarName> = "ALT";

        $r14 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r15 = virtualinvoke $r14.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("coordinates");

        if $r15 == null goto label12;

        $r79 = virtualinvoke $r15.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        if $r79 == null goto label12;

        $r80 = virtualinvoke $r79.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        $r81 = $r80[1];

        r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String latVarName> = $r81;

        $r82 = $r80[0];

        r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String lonVarName> = $r82;

        $r83 = $r80[2];

        r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String elevVarName> = $r83;

        $r84 = $r80[3];

        r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String timeVarName> = $r84;

        $r85 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String timeVarName>;

        r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String timeDimName> = $r85;

     label12:
        $z9 = specialinvoke r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: boolean timeVarAllZeros()>();

        if $z9 == 0 goto label13;

        r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String timeVarName> = "time_offset";

     label13:
        $r17 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r16 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String latVarName>;

        $r18 = virtualinvoke $r17.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>($r16);

        $r19 = virtualinvoke $r18.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>("units");

        $r20 = virtualinvoke $r19.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z3 = staticinvoke <ucar.nc2.units.SimpleUnit: boolean isCompatible(java.lang.String,java.lang.String)>($r20, "degrees_north");

        if $z3 != 0 goto label14;

        $r72 = new java.lang.IllegalStateException;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latitude variable <");

        $r75 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String latVarName>;

        $r76 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75);

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> units not udunits compatible w/ \"degrees_north\".");

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r72.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r78);

        throw $r72;

     label14:
        $r22 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r21 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String lonVarName>;

        $r23 = virtualinvoke $r22.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>($r21);

        $r24 = virtualinvoke $r23.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>("units");

        $r25 = virtualinvoke $r24.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z4 = staticinvoke <ucar.nc2.units.SimpleUnit: boolean isCompatible(java.lang.String,java.lang.String)>($r25, "degrees_east");

        if $z4 != 0 goto label15;

        $r65 = new java.lang.IllegalStateException;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Longitude variable <");

        $r68 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String lonVarName>;

        $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> units not udunits compatible w/ \"degrees_east\".");

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r65.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r71);

        throw $r65;

     label15:
        $r27 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r26 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String elevVarName>;

        $r28 = virtualinvoke $r27.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>($r26);

        $r29 = virtualinvoke $r28.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>("units");

        $r30 = virtualinvoke $r29.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z5 = staticinvoke <ucar.nc2.units.SimpleUnit: boolean isCompatible(java.lang.String,java.lang.String)>($r30, "meters");

        if $z5 != 0 goto label16;

        $r58 = new java.lang.IllegalStateException;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Elevation variable <");

        $r61 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String elevVarName>;

        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> units not udunits compatible w/ \"m\".");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r58.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r64);

        throw $r58;

     label16:
        $r32 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r31 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String timeVarName>;

        $r33 = virtualinvoke $r32.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>($r31);

        $r34 = virtualinvoke $r33.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>("units");

        $r35 = virtualinvoke $r34.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z6 = staticinvoke <ucar.nc2.units.SimpleUnit: boolean isCompatible(java.lang.String,java.lang.String)>($r35, "seconds since 1970-01-01 00:00:00");

        if $z6 != 0 goto label17;

        $r52 = new java.lang.IllegalStateException;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time variable units <");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not udunits compatible w/ \"seconds since 1970-01-01 00:00:00\".");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r52.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r57);

        throw $r52;

     label17:
        goto label19;

     label18:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File <");

        $r10 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: java.lang.String getId()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not a version 1.2 or 1.3 \"NCAR-RAF/nimbus\" convention file.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label19:
        $r36 = new ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config;

        $r37 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r38 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String timeDimName>;

        $r39 = virtualinvoke $r37.<ucar.nc2.Group: ucar.nc2.Dimension findDimension(java.lang.String)>($r38);

        $r40 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r41 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String timeVarName>;

        $r42 = virtualinvoke $r40.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r41);

        $r43 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r44 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String latVarName>;

        $r45 = virtualinvoke $r43.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r44);

        $r46 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r47 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String lonVarName>;

        $r48 = virtualinvoke $r46.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r47);

        $r49 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r50 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String elevVarName>;

        $r51 = virtualinvoke $r49.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r50);

        specialinvoke $r36.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config: void <init>(java.lang.String,ucar.nc2.Dimension,ucar.nc2.Variable,ucar.nc2.Variable,ucar.nc2.Variable,ucar.nc2.Variable)>("1Hz data", $r39, $r42, $r45, $r48, $r51);

        virtualinvoke r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: void setTrajectoryInfo(ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config)>($r36);

        return;

        catch ucar.ma2.InvalidRangeException from label05 to label06 with label07;
    }

    private boolean timeVarAllZeros() throws java.io.IOException
    {
        java.util.ArrayList $r5;
        byte $b0;
        ucar.nc2.Variable $r4;
        java.lang.String $r3, $r13, $r15;
        boolean $z0;
        double $d0;
        ucar.ma2.Range $r6;
        ucar.ma2.IndexIterator $r8;
        java.io.IOException $r10;
        ucar.nc2.Group $r2;
        ucar.ma2.Array $r7;
        ucar.ma2.InvalidRangeException $r9;
        ucar.nc2.dt.trajectory.RafTrajectoryObsDataset r0;
        java.lang.StringBuilder $r11, $r12, $r14;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @this: ucar.nc2.dt.trajectory.RafTrajectoryObsDataset;

        $r1 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r3 = r0.<ucar.nc2.dt.trajectory.RafTrajectoryObsDataset: java.lang.String timeVarName>;

        $r4 = virtualinvoke $r2.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r3);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(1);

     label1:
        $r6 = new ucar.ma2.Range;

        specialinvoke $r6.<ucar.ma2.Range: void <init>(int,int)>(0, 2);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = virtualinvoke $r4.<ucar.nc2.Variable: ucar.ma2.Array read(java.util.List)>($r5);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.io.IOException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid range (0,2): ");

        $r13 = virtualinvoke $r9.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label4:
        $r8 = virtualinvoke $r7.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label5:
        $z0 = interfaceinvoke $r8.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $d0 = interfaceinvoke $r8.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label5;

        return 0;

     label6:
        return 1;

        catch ucar.ma2.InvalidRangeException from label1 to label2 with label3;
    }
}
