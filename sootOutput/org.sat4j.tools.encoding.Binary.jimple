public class org.sat4j.tools.encoding.Binary extends org.sat4j.tools.encoding.EncodingStrategyAdapter
{

    public void <init>()
    {
        org.sat4j.tools.encoding.Binary r0;

        r0 := @this: org.sat4j.tools.encoding.Binary;

        specialinvoke r0.<org.sat4j.tools.encoding.EncodingStrategyAdapter: void <init>()>();

        return;
    }

    public org.sat4j.specs.IConstr addAtMostOne(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt) throws org.sat4j.specs.ContradictionException
    {
        int[] r2;
        java.lang.StringBuilder $r7, $r8, $r11, $r12, $r18, $r19;
        org.sat4j.specs.ISolver r4;
        org.sat4j.tools.encoding.Binary r13;
        int $i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, i24, i25, i26, i27, i28, $i29, $i30;
        java.lang.String r14, r15;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        org.sat4j.specs.IConstr $r5, $r9;
        org.sat4j.specs.IVecInt r1;
        org.sat4j.core.ConstrGroup $r16;
        char $c10, $c19;
        org.sat4j.core.VecInt $r17;

        r13 := @this: org.sat4j.tools.encoding.Binary;

        r4 := @parameter0: org.sat4j.specs.ISolver;

        r1 := @parameter1: org.sat4j.specs.IVecInt;

        $r16 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r16.<org.sat4j.core.ConstrGroup: void <init>(boolean)>(0);

        $i0 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int size()>();

        $d0 = (double) $i0;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double log(double)>(2.0);

        $d3 = $d1 / $d2;

        $d4 = staticinvoke <java.lang.Math: double ceil(double)>($d3);

        i1 = (int) $d4;

        $d5 = (double) i1;

        $d6 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d5);

        $i2 = (int) $d6;

        i3 = $i2 - $i0;

        r2 = newarray (int)[i1];

        i24 = 0;

     label01:
        if i24 >= i1 goto label02;

        $i23 = interfaceinvoke r4.<org.sat4j.specs.ISolver: int nextFreeVarId(boolean)>(1);

        r2[i24] = $i23;

        i24 = i24 + 1;

        goto label01;

     label02:
        $r17 = new org.sat4j.core.VecInt;

        specialinvoke $r17.<org.sat4j.core.VecInt: void <init>()>();

        i25 = 0;

     label03:
        if i25 >= i3 goto label10;

        r14 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>(i25);

     label04:
        $i14 = virtualinvoke r14.<java.lang.String: int length()>();

        $i15 = i1 - 1;

        if $i14 == $i15 goto label05;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label04;

     label05:
        i26 = 0;

     label06:
        $i16 = i1 - 1;

        if i26 >= $i16 goto label09;

        $i17 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i25);

        $i18 = neg $i17;

        interfaceinvoke $r17.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i18);

        $c19 = virtualinvoke r14.<java.lang.String: char charAt(int)>(i26);

        $i29 = (int) $c19;

        if $i29 != 48 goto label07;

        $i21 = r2[i26];

        $i22 = neg $i21;

        interfaceinvoke $r17.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i22);

        goto label08;

     label07:
        $i20 = r2[i26];

        interfaceinvoke $r17.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i20);

     label08:
        $r9 = interfaceinvoke r4.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r17);

        virtualinvoke $r16.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r9);

        interfaceinvoke $r17.<org.sat4j.specs.IVecInt: void clear()>();

        i26 = i26 + 1;

        goto label06;

     label09:
        i25 = i25 + 1;

        goto label03;

     label10:
        i27 = i3;

     label11:
        if i27 >= $i0 goto label18;

        $i4 = 2 * i3;

        $i5 = $i4 + i27;

        $i6 = $i5 - i3;

        r15 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>($i6);

     label12:
        $i7 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i7 == i1 goto label13;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label12;

     label13:
        i28 = 0;

     label14:
        if i28 >= i1 goto label17;

        $i8 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i27);

        $i9 = neg $i8;

        interfaceinvoke $r17.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i9);

        $c10 = virtualinvoke r15.<java.lang.String: char charAt(int)>(i28);

        $i30 = (int) $c10;

        if $i30 != 48 goto label15;

        $i12 = r2[i28];

        $i13 = neg $i12;

        interfaceinvoke $r17.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i13);

        goto label16;

     label15:
        $i11 = r2[i28];

        interfaceinvoke $r17.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i11);

     label16:
        $r5 = interfaceinvoke r4.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r17);

        virtualinvoke $r16.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r5);

        interfaceinvoke $r17.<org.sat4j.specs.IVecInt: void clear()>();

        i28 = i28 + 1;

        goto label14;

     label17:
        i27 = i27 + 1;

        goto label11;

     label18:
        return $r16;
    }

    public org.sat4j.specs.IConstr addAtMost(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt, int) throws org.sat4j.specs.ContradictionException
    {
        int[][] r2, r18;
        int[] $r7, $r8, $r9, $r11, $r15, $r16;
        java.lang.StringBuilder $r13, $r14, $r23;
        org.sat4j.specs.ISolver r5;
        org.sat4j.tools.encoding.Binary r17;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25, i26, i27, $i28;
        java.lang.String r19;
        double $d0, $d1, $d2, $d3, $d4;
        org.sat4j.specs.IConstr $r6, $r10;
        org.sat4j.specs.IVecInt r0;
        org.sat4j.core.ConstrGroup $r20;
        char $c15;
        org.sat4j.core.VecInt $r21, $r22;

        r17 := @this: org.sat4j.tools.encoding.Binary;

        r5 := @parameter0: org.sat4j.specs.ISolver;

        r0 := @parameter1: org.sat4j.specs.IVecInt;

        i2 := @parameter2: int;

        $i0 = interfaceinvoke r0.<org.sat4j.specs.IVecInt: int size()>();

        $d0 = (double) $i0;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double log(double)>(2.0);

        $d3 = $d1 / $d2;

        $d4 = staticinvoke <java.lang.Math: double ceil(double)>($d3);

        i1 = (int) $d4;

        $r20 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r20.<org.sat4j.core.ConstrGroup: void <init>(boolean)>(0);

        r2 = newmultiarray (int)[i2][i1];

        i21 = 0;

     label01:
        if i21 >= i2 goto label04;

        i22 = 0;

     label02:
        if i22 >= i1 goto label03;

        $r16 = r2[i21];

        $i20 = interfaceinvoke r5.<org.sat4j.specs.ISolver: int nextFreeVarId(boolean)>(1);

        $r16[i22] = $i20;

        i22 = i22 + 1;

        goto label02;

     label03:
        i21 = i21 + 1;

        goto label01;

     label04:
        r18 = newmultiarray (int)[i2][$i0];

        i23 = 0;

     label05:
        if i23 >= i2 goto label08;

        i24 = 0;

     label06:
        if i24 >= $i0 goto label07;

        $r15 = r18[i23];

        $i19 = interfaceinvoke r5.<org.sat4j.specs.ISolver: int nextFreeVarId(boolean)>(1);

        $r15[i24] = $i19;

        i24 = i24 + 1;

        goto label06;

     label07:
        i23 = i23 + 1;

        goto label05;

     label08:
        $r21 = new org.sat4j.core.VecInt;

        specialinvoke $r21.<org.sat4j.core.VecInt: void <init>()>();

        $r22 = new org.sat4j.core.VecInt;

        specialinvoke $r22.<org.sat4j.core.VecInt: void <init>()>();

        i25 = 0;

     label09:
        if i25 >= $i0 goto label18;

        $i3 = i2 - $i0;

        $i4 = $i3 + i25;

        $i5 = $i4 + 1;

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i5);

        $i7 = i25 + 1;

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i7, i2);

        $i9 = interfaceinvoke r0.<org.sat4j.specs.IVecInt: int get(int)>(i25);

        $i10 = neg $i9;

        interfaceinvoke $r21.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i10);

        r19 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>(i25);

     label10:
        $i11 = virtualinvoke r19.<java.lang.String: int length()>();

        if $i11 == i1 goto label11;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label10;

     label11:
        i26 = $i6 - 1;

     label12:
        if i26 >= $i8 goto label17;

        $r7 = r18[i26];

        $i12 = $r7[i25];

        interfaceinvoke $r21.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i12);

        i27 = 0;

     label13:
        if i27 >= i1 goto label16;

        $r8 = r18[i26];

        $i13 = $r8[i25];

        $i14 = neg $i13;

        interfaceinvoke $r22.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i14);

        $c15 = virtualinvoke r19.<java.lang.String: char charAt(int)>(i27);

        $i28 = (int) $c15;

        if $i28 != 48 goto label14;

        $r11 = r2[i26];

        $i17 = $r11[i27];

        $i18 = neg $i17;

        interfaceinvoke $r22.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i18);

        goto label15;

     label14:
        $r9 = r2[i26];

        $i16 = $r9[i27];

        interfaceinvoke $r22.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i16);

     label15:
        $r10 = interfaceinvoke r5.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r22);

        virtualinvoke $r20.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r10);

        interfaceinvoke $r22.<org.sat4j.specs.IVecInt: void clear()>();

        i27 = i27 + 1;

        goto label13;

     label16:
        i26 = i26 + 1;

        goto label12;

     label17:
        $r6 = interfaceinvoke r5.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r21);

        virtualinvoke $r20.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r6);

        interfaceinvoke $r21.<org.sat4j.specs.IVecInt: void clear()>();

        i25 = i25 + 1;

        goto label09;

     label18:
        return $r20;
    }

    public org.sat4j.specs.IConstr addAtLeast(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt, int) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.specs.ISolver r3;
        org.sat4j.specs.IConstr $r4;
        org.sat4j.specs.IVecInt r1;
        org.sat4j.tools.encoding.Binary r2;
        int $i0, $i1, i2, $i3, $i4, $i5, i6;
        org.sat4j.core.VecInt $r0;

        r2 := @this: org.sat4j.tools.encoding.Binary;

        r3 := @parameter0: org.sat4j.specs.ISolver;

        r1 := @parameter1: org.sat4j.specs.IVecInt;

        i2 := @parameter2: int;

        $r0 = new org.sat4j.core.VecInt;

        specialinvoke $r0.<org.sat4j.core.VecInt: void <init>()>();

        i6 = 0;

     label1:
        $i0 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int size()>();

        if i6 >= $i0 goto label2;

        $i4 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i6);

        $i5 = neg $i4;

        interfaceinvoke $r0.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i5);

        i6 = i6 + 1;

        goto label1;

     label2:
        $i1 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int size()>();

        $i3 = $i1 - i2;

        $r4 = virtualinvoke r2.<org.sat4j.tools.encoding.Binary: org.sat4j.specs.IConstr addAtMost(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt,int)>(r3, $r0, $i3);

        return $r4;
    }

    public org.sat4j.specs.IConstr addExactlyOne(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.tools.encoding.Binary r1;
        org.sat4j.specs.ISolver r2;
        org.sat4j.specs.IConstr $r4, $r5;
        org.sat4j.core.ConstrGroup $r0;
        org.sat4j.specs.IVecInt r3;

        r1 := @this: org.sat4j.tools.encoding.Binary;

        r2 := @parameter0: org.sat4j.specs.ISolver;

        r3 := @parameter1: org.sat4j.specs.IVecInt;

        $r0 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r0.<org.sat4j.core.ConstrGroup: void <init>()>();

        $r4 = virtualinvoke r1.<org.sat4j.tools.encoding.Binary: org.sat4j.specs.IConstr addAtLeastOne(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt)>(r2, r3);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r4);

        $r5 = virtualinvoke r1.<org.sat4j.tools.encoding.Binary: org.sat4j.specs.IConstr addAtMostOne(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt)>(r2, r3);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r5);

        return $r0;
    }

    public org.sat4j.specs.IConstr addExactly(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt, int) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.tools.encoding.Binary r1;
        org.sat4j.specs.ISolver r2;
        org.sat4j.specs.IConstr $r4, $r5;
        org.sat4j.core.ConstrGroup $r0;
        org.sat4j.specs.IVecInt r3;
        int i0;

        r1 := @this: org.sat4j.tools.encoding.Binary;

        r2 := @parameter0: org.sat4j.specs.ISolver;

        r3 := @parameter1: org.sat4j.specs.IVecInt;

        i0 := @parameter2: int;

        $r0 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r0.<org.sat4j.core.ConstrGroup: void <init>()>();

        $r4 = virtualinvoke r1.<org.sat4j.tools.encoding.Binary: org.sat4j.specs.IConstr addAtLeast(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt,int)>(r2, r3, i0);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r4);

        $r5 = virtualinvoke r1.<org.sat4j.tools.encoding.Binary: org.sat4j.specs.IConstr addAtMost(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt,int)>(r2, r3, i0);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r5);

        return $r0;
    }
}
