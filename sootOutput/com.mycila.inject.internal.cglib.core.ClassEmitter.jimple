public class com.mycila.inject.internal.cglib.core.ClassEmitter extends com.mycila.inject.internal.asm.ClassAdapter
{
    private com.mycila.inject.internal.cglib.core.ClassInfo classInfo;
    private java.util.Map fieldInfo;
    private static int hookCounter;
    private com.mycila.inject.internal.asm.MethodVisitor rawStaticInit;
    private com.mycila.inject.internal.cglib.core.CodeEmitter staticInit;
    private com.mycila.inject.internal.cglib.core.CodeEmitter staticHook;
    private com.mycila.inject.internal.cglib.core.Signature staticHookSig;

    public void <init>(com.mycila.inject.internal.asm.ClassVisitor)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        com.mycila.inject.internal.asm.ClassVisitor r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        specialinvoke r0.<com.mycila.inject.internal.asm.ClassAdapter: void <init>(com.mycila.inject.internal.asm.ClassVisitor)>(null);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: void setTarget(com.mycila.inject.internal.asm.ClassVisitor)>(r1);

        return;
    }

    public void <init>()
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        specialinvoke r0.<com.mycila.inject.internal.asm.ClassAdapter: void <init>(com.mycila.inject.internal.asm.ClassVisitor)>(null);

        return;
    }

    public void setTarget(com.mycila.inject.internal.asm.ClassVisitor)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        java.util.HashMap $r2;
        com.mycila.inject.internal.asm.ClassVisitor r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.ClassVisitor cv> = r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: java.util.Map fieldInfo> = $r2;

        r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticHook> = null;

        r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticInit> = null;

        r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.Signature staticHookSig> = null;

        return;
    }

    private static synchronized int getNextHook()
    {
        int $i0, $i1;

        $i0 = <com.mycila.inject.internal.cglib.core.ClassEmitter: int hookCounter>;

        $i1 = $i0 + 1;

        <com.mycila.inject.internal.cglib.core.ClassEmitter: int hookCounter> = $i1;

        return $i1;
    }

    public com.mycila.inject.internal.cglib.core.ClassInfo getClassInfo()
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        com.mycila.inject.internal.cglib.core.ClassInfo $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.ClassInfo classInfo>;

        return $r1;
    }

    public void begin_class(int, int, java.lang.String, com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.asm.Type[], java.lang.String)
    {
        com.mycila.inject.internal.asm.Type $r7, r10, $r14, $r17;
        java.lang.String[] $r19;
        java.lang.StringBuffer $r0, $r1, $r4, $r5;
        int i0, i1;
        java.lang.String r2, $r3, $r6, $r15, $r18, r20;
        com.mycila.inject.internal.asm.Type[] r11;
        com.mycila.inject.internal.asm.ClassVisitor $r13, $r21;
        com.mycila.inject.internal.cglib.core.ClassInfo $r12, $r16;
        com.mycila.inject.internal.cglib.core.ClassEmitter$1 $r9;
        com.mycila.inject.internal.cglib.core.ClassEmitter r8;

        r8 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r10 := @parameter3: com.mycila.inject.internal.asm.Type;

        r11 := @parameter4: com.mycila.inject.internal.asm.Type[];

        r20 := @parameter5: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L");

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>($r6);

        $r9 = new com.mycila.inject.internal.cglib.core.ClassEmitter$1;

        specialinvoke $r9.<com.mycila.inject.internal.cglib.core.ClassEmitter$1: void <init>(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],int)>(r8, $r7, r10, r11, i0);

        r8.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.ClassInfo classInfo> = $r9;

        $r13 = r8.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.ClassVisitor cv>;

        $r12 = r8.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.ClassInfo classInfo>;

        $r14 = virtualinvoke $r12.<com.mycila.inject.internal.cglib.core.ClassInfo: com.mycila.inject.internal.asm.Type getType()>();

        $r15 = virtualinvoke $r14.<com.mycila.inject.internal.asm.Type: java.lang.String getInternalName()>();

        $r16 = r8.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.ClassInfo classInfo>;

        $r17 = virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.ClassInfo: com.mycila.inject.internal.asm.Type getSuperType()>();

        $r18 = virtualinvoke $r17.<com.mycila.inject.internal.asm.Type: java.lang.String getInternalName()>();

        $r19 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String[] toInternalNames(com.mycila.inject.internal.asm.Type[])>(r11);

        interfaceinvoke $r13.<com.mycila.inject.internal.asm.ClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i1, i0, $r15, null, $r18, $r19);

        if r20 == null goto label1;

        $r21 = r8.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.ClassVisitor cv>;

        interfaceinvoke $r21.<com.mycila.inject.internal.asm.ClassVisitor: void visitSource(java.lang.String,java.lang.String)>(r20, null);

     label1:
        virtualinvoke r8.<com.mycila.inject.internal.cglib.core.ClassEmitter: void init()>();

        return;
    }

    public com.mycila.inject.internal.cglib.core.CodeEmitter getStaticHook()
    {
        java.lang.IllegalStateException $r12;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r1, $r8, $r9, $r11, $r13;
        java.lang.StringBuffer $r3, $r4, $r5;
        int $i0, $i1;
        java.lang.String $r6;
        boolean $z0;
        com.mycila.inject.internal.cglib.core.Signature $r2, $r7, $r10;
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: int getAccess()>();

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isInterface(int)>($i0);

        if $z0 == 0 goto label1;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("static hook is invalid for this class");

        throw $r12;

     label1:
        $r1 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticHook>;

        if $r1 != null goto label2;

        $r2 = new com.mycila.inject.internal.cglib.core.Signature;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CGLIB$STATICHOOK");

        $i1 = staticinvoke <com.mycila.inject.internal.cglib.core.ClassEmitter: int getNextHook()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,java.lang.String)>($r6, "()V");

        r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.Signature staticHookSig> = $r2;

        $r7 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.Signature staticHookSig>;

        $r8 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(8, $r7, null);

        r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticHook> = $r8;

        $r9 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticInit>;

        if $r9 == null goto label2;

        $r11 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticInit>;

        $r10 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.Signature staticHookSig>;

        virtualinvoke $r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static_this(com.mycila.inject.internal.cglib.core.Signature)>($r10);

     label2:
        $r13 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticHook>;

        return $r13;
    }

    protected void init()
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        return;
    }

    public int getAccess()
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        int $i0;
        com.mycila.inject.internal.cglib.core.ClassInfo $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.ClassInfo classInfo>;

        $i0 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassInfo: int getModifiers()>();

        return $i0;
    }

    public com.mycila.inject.internal.asm.Type getClassType()
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.ClassInfo $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.ClassInfo classInfo>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassInfo: com.mycila.inject.internal.asm.Type getType()>();

        return $r2;
    }

    public com.mycila.inject.internal.asm.Type getSuperType()
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.ClassInfo $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.ClassInfo classInfo>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassInfo: com.mycila.inject.internal.asm.Type getSuperType()>();

        return $r2;
    }

    public void end_class()
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter $r1, $r3, $r4, $r7, $r8;
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r5, $r6;
        com.mycila.inject.internal.asm.ClassVisitor $r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticHook>;

        if $r1 == null goto label1;

        $r7 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticInit>;

        if $r7 != null goto label1;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_static()>();

     label1:
        $r8 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticInit>;

        if $r8 == null goto label2;

        $r3 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticHook>;

        virtualinvoke $r3.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        $r4 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticHook>;

        virtualinvoke $r4.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        $r5 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.MethodVisitor rawStaticInit>;

        interfaceinvoke $r5.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(177);

        $r6 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.MethodVisitor rawStaticInit>;

        interfaceinvoke $r6.<com.mycila.inject.internal.asm.MethodVisitor: void visitMaxs(int,int)>(0, 0);

        r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticHook> = null;

        r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticInit> = null;

        r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.Signature staticHookSig> = null;

     label2:
        $r2 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.ClassVisitor cv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.ClassVisitor: void visitEnd()>();

        return;
    }

    public com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int, com.mycila.inject.internal.cglib.core.Signature, com.mycila.inject.internal.asm.Type[])
    {
        java.lang.IllegalStateException $r19;
        java.lang.String[] $r7;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r11, $r14, $r15, $r17, $r18;
        com.mycila.inject.internal.asm.MethodVisitor $r8;
        java.lang.StringBuffer $r20, $r21, $r22;
        int i0, $i1;
        java.lang.String $r4, $r5, $r23;
        com.mycila.inject.internal.asm.Type[] r6;
        com.mycila.inject.internal.asm.ClassVisitor $r3;
        com.mycila.inject.internal.cglib.core.ClassInfo $r1;
        boolean $z0, $z1, $z2;
        com.mycila.inject.internal.cglib.core.Signature r2, $r9, $r10, $r16;
        com.mycila.inject.internal.cglib.core.ClassEmitter$2 $r13;
        com.mycila.inject.internal.cglib.core.ClassEmitter$3 $r12;
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        i0 := @parameter0: int;

        r2 := @parameter1: com.mycila.inject.internal.cglib.core.Signature;

        r6 := @parameter2: com.mycila.inject.internal.asm.Type[];

        $r1 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.ClassInfo classInfo>;

        if $r1 != null goto label1;

        $r19 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("classInfo is null! ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r23);

        throw $r19;

     label1:
        $r3 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.ClassVisitor cv>;

        $r4 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getName()>();

        $r5 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getDescriptor()>();

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String[] toInternalNames(com.mycila.inject.internal.asm.Type[])>(r6);

        $r8 = interfaceinvoke $r3.<com.mycila.inject.internal.asm.ClassVisitor: com.mycila.inject.internal.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i0, $r4, $r5, null, $r7);

        $r9 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.cglib.core.Signature SIG_STATIC>;

        $z0 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.Signature: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label4;

        $i1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: int getAccess()>();

        $z2 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isInterface(int)>($i1);

        if $z2 != 0 goto label4;

        r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.MethodVisitor rawStaticInit> = $r8;

        $r13 = new com.mycila.inject.internal.cglib.core.ClassEmitter$2;

        specialinvoke $r13.<com.mycila.inject.internal.cglib.core.ClassEmitter$2: void <init>(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.asm.MethodVisitor)>(r0, $r8);

        $r14 = new com.mycila.inject.internal.cglib.core.CodeEmitter;

        specialinvoke $r14.<com.mycila.inject.internal.cglib.core.CodeEmitter: void <init>(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.asm.MethodVisitor,int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(r0, $r13, i0, r2, r6);

        r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticInit> = $r14;

        $r15 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticHook>;

        if $r15 != null goto label2;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter getStaticHook()>();

        goto label3;

     label2:
        $r17 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticInit>;

        $r16 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.Signature staticHookSig>;

        virtualinvoke $r17.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static_this(com.mycila.inject.internal.cglib.core.Signature)>($r16);

     label3:
        $r18 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter staticInit>;

        return $r18;

     label4:
        $r10 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.Signature staticHookSig>;

        $z1 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.Signature: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label5;

        $r12 = new com.mycila.inject.internal.cglib.core.ClassEmitter$3;

        specialinvoke $r12.<com.mycila.inject.internal.cglib.core.ClassEmitter$3: void <init>(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.asm.MethodVisitor,int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(r0, r0, $r8, i0, r2, r6);

        return $r12;

     label5:
        $r11 = new com.mycila.inject.internal.cglib.core.CodeEmitter;

        specialinvoke $r11.<com.mycila.inject.internal.cglib.core.CodeEmitter: void <init>(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.asm.MethodVisitor,int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(r0, $r8, i0, r2, r6);

        return $r11;
    }

    public com.mycila.inject.internal.cglib.core.CodeEmitter begin_static()
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.cglib.core.Signature $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        $r1 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.cglib.core.Signature SIG_STATIC>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(8, $r1, null);

        return $r2;
    }

    public void declare_field(int, java.lang.String, com.mycila.inject.internal.asm.Type, java.lang.Object)
    {
        com.mycila.inject.internal.asm.Type r6;
        com.mycila.inject.internal.cglib.core.ClassEmitter$FieldInfo r4, $r5;
        java.lang.StringBuffer $r12, $r13, $r14, $r15;
        java.util.Map $r2, $r8;
        int i0;
        java.lang.String r1, $r10, $r16;
        com.mycila.inject.internal.asm.ClassVisitor $r9;
        boolean $z0;
        java.lang.IllegalArgumentException $r11;
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        java.lang.Object $r3, r7;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r6 := @parameter2: com.mycila.inject.internal.asm.Type;

        r7 := @parameter3: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: java.util.Map fieldInfo>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.mycila.inject.internal.cglib.core.ClassEmitter$FieldInfo) $r3;

        $r5 = new com.mycila.inject.internal.cglib.core.ClassEmitter$FieldInfo;

        specialinvoke $r5.<com.mycila.inject.internal.cglib.core.ClassEmitter$FieldInfo: void <init>(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(i0, r1, r6, r7);

        if r4 == null goto label1;

        $z0 = virtualinvoke $r5.<com.mycila.inject.internal.cglib.core.ClassEmitter$FieldInfo: boolean equals(java.lang.Object)>(r4);

        if $z0 != 0 goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Field \"");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" has been declared differently");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label1:
        $r8 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: java.util.Map fieldInfo>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        $r9 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.ClassVisitor cv>;

        $r10 = virtualinvoke r6.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        interfaceinvoke $r9.<com.mycila.inject.internal.asm.ClassVisitor: com.mycila.inject.internal.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(i0, r1, $r10, null, r7);

     label2:
        return;
    }

    boolean isFieldDeclared(java.lang.String)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: java.util.Map fieldInfo>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    com.mycila.inject.internal.cglib.core.ClassEmitter$FieldInfo getFieldInfo(java.lang.String)
    {
        com.mycila.inject.internal.asm.Type $r10;
        java.lang.IllegalArgumentException $r5;
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        com.mycila.inject.internal.cglib.core.ClassEmitter$FieldInfo r4;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r12;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1, $r11, $r13;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: java.util.Map fieldInfo>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.mycila.inject.internal.cglib.core.ClassEmitter$FieldInfo) $r3;

        if r4 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Field ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not declared in ");

        $r10 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getClassType()>();

        $r11 = virtualinvoke $r10.<com.mycila.inject.internal.asm.Type: java.lang.String getClassName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r5;

     label1:
        return r4;
    }

    public void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        com.mycila.inject.internal.asm.Type $r4;
        java.lang.String[] r5;
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        int i0, i1;
        java.lang.String r1, $r2, r3, r7;
        com.mycila.inject.internal.asm.Type[] $r6;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r7 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String[];

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type fromInternalName(java.lang.String)>(r3);

        $r6 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type[] fromInternalNames(java.lang.String[])>(r5);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: void begin_class(int,int,java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],java.lang.String)>(i0, i1, $r2, $r4, $r6, null);

        return;
    }

    public void visitEnd()
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: void end_class()>();

        return;
    }

    public com.mycila.inject.internal.asm.FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        int i0;
        com.mycila.inject.internal.asm.Type $r3;
        java.lang.Object r4;
        java.lang.String r1, r2, r5;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object;

        $r3 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>(r2);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(i0, r1, $r3, r4);

        return null;
    }

    public com.mycila.inject.internal.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        com.mycila.inject.internal.cglib.core.Signature $r1;
        java.lang.String[] r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r6;
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        int i0;
        java.lang.String r2, r3, r7;
        com.mycila.inject.internal.asm.Type[] $r5;

        r0 := @this: com.mycila.inject.internal.cglib.core.ClassEmitter;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r7 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String[];

        $r1 = new com.mycila.inject.internal.cglib.core.Signature;

        specialinvoke $r1.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        $r5 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type[] fromInternalNames(java.lang.String[])>(r4);

        $r6 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(i0, $r1, $r5);

        return $r6;
    }
}
