public final class org.apache.lucene.codecs.compressing.CompressingTermVectorsReader extends org.apache.lucene.codecs.TermVectorsReader implements java.io.Closeable
{
    private final org.apache.lucene.index.FieldInfos fieldInfos;
    final org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader indexReader;
    final org.apache.lucene.store.IndexInput vectorsStream;
    private final int packedIntsVersion;
    private final org.apache.lucene.codecs.compressing.CompressionMode compressionMode;
    private final org.apache.lucene.codecs.compressing.Decompressor decompressor;
    private final int chunkSize;
    private final int numDocs;
    private boolean closed;
    private final org.apache.lucene.util.packed.BlockPackedReaderIterator reader;
    static final boolean $assertionsDisabled;

    private void <init>(org.apache.lucene.codecs.compressing.CompressingTermVectorsReader)
    {
        int $i0, $i1, $i2, $i3;
        org.apache.lucene.codecs.compressing.CompressionMode $r7;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader r0, r1;
        org.apache.lucene.index.FieldInfos $r2;
        org.apache.lucene.util.packed.BlockPackedReaderIterator $r10;
        org.apache.lucene.store.IndexInput $r3, $r4, $r11;
        org.apache.lucene.codecs.compressing.Decompressor $r8, $r9;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader $r5, $r6;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        r1 := @parameter0: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        specialinvoke r0.<org.apache.lucene.codecs.TermVectorsReader: void <init>()>();

        $r2 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.index.FieldInfos fieldInfos>;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.index.FieldInfos fieldInfos> = $r2;

        $r3 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.store.IndexInput: org.apache.lucene.store.IndexInput clone()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream> = $r4;

        $r5 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader indexReader>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader clone()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader indexReader> = $r6;

        $i0 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int packedIntsVersion>;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int packedIntsVersion> = $i0;

        $r7 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.compressing.CompressionMode compressionMode>;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.compressing.CompressionMode compressionMode> = $r7;

        $r8 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.compressing.Decompressor decompressor>;

        $r9 = virtualinvoke $r8.<org.apache.lucene.codecs.compressing.Decompressor: org.apache.lucene.codecs.compressing.Decompressor clone()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.compressing.Decompressor decompressor> = $r9;

        $i1 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int chunkSize>;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int chunkSize> = $i1;

        $i2 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int numDocs>;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int numDocs> = $i2;

        $r10 = new org.apache.lucene.util.packed.BlockPackedReaderIterator;

        $r11 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $i3 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int packedIntsVersion>;

        specialinvoke $r10.<org.apache.lucene.util.packed.BlockPackedReaderIterator: void <init>(org.apache.lucene.store.DataInput,int,int,long)>($r11, $i3, 64, 0L);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader> = $r10;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: boolean closed> = 0;

        return;
    }

    public void <init>(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode) throws java.io.IOException
    {
        byte $b7, $b11;
        org.apache.lucene.store.Directory r5;
        java.io.Closeable[] $r28, $r33;
        org.apache.lucene.codecs.compressing.CompressionMode r1;
        org.apache.lucene.index.FieldInfos r4;
        org.apache.lucene.store.IOContext r8;
        boolean $z0, $z1;
        org.apache.lucene.index.SegmentInfo r2;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader $r22;
        java.lang.StringBuilder $r12, $r14, $r15, $r17, $r18, $r19;
        java.lang.Throwable $r32;
        long $l5, $l6, $l9, $l10;
        java.lang.AssertionError $r29, $r31;
        int $i0, $i1, $i2, $i3, $i4, $i8;
        java.lang.String r3, r6, $r7, $r10, r13, $r16, $r20;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader r0;
        org.apache.lucene.util.packed.BlockPackedReaderIterator $r26;
        org.apache.lucene.store.IndexInput $r9, $r11, $r21, $r23, $r24, $r27, $r30, r34;
        org.apache.lucene.codecs.compressing.Decompressor $r25;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        r5 := @parameter0: org.apache.lucene.store.Directory;

        r2 := @parameter1: org.apache.lucene.index.SegmentInfo;

        r6 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.lucene.index.FieldInfos;

        r8 := @parameter4: org.apache.lucene.store.IOContext;

        r13 := @parameter5: java.lang.String;

        r1 := @parameter6: org.apache.lucene.codecs.compressing.CompressionMode;

        specialinvoke r0.<org.apache.lucene.codecs.TermVectorsReader: void <init>()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.compressing.CompressionMode compressionMode> = r1;

        r3 = r2.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.index.FieldInfos fieldInfos> = r4;

        $i0 = virtualinvoke r2.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int numDocs> = $i0;

        r34 = null;

     label1:
        $r7 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>(r3, r6, "tvd");

        $r9 = virtualinvoke r5.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexInput openInput(java.lang.String,org.apache.lucene.store.IOContext)>($r7, r8);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream> = $r9;

        $r10 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>(r3, r6, "tvx");

        $r11 = virtualinvoke r5.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexInput openInput(java.lang.String,org.apache.lucene.store.IOContext)>($r10, r8);

        r34 = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.lucene.codecs.CodecUtil: int checkHeader(org.apache.lucene.store.DataInput,java.lang.String,int,int)>($r11, $r16, 0, 0);

        $r21 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        staticinvoke <org.apache.lucene.codecs.CodecUtil: int checkHeader(org.apache.lucene.store.DataInput,java.lang.String,int,int)>($r21, $r20, 0, 0);

        $z0 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i8 = staticinvoke <org.apache.lucene.codecs.CodecUtil: int headerLength(java.lang.String)>($r20);

        $l9 = (long) $i8;

        $r30 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $l10 = virtualinvoke $r30.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        $b11 = $l9 cmp $l10;

        if $b11 == 0 goto label2;

        $r31 = new java.lang.AssertionError;

        specialinvoke $r31.<java.lang.AssertionError: void <init>()>();

        throw $r31;

     label2:
        $z1 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $i4 = staticinvoke <org.apache.lucene.codecs.CodecUtil: int headerLength(java.lang.String)>($r16);

        $l5 = (long) $i4;

        $l6 = virtualinvoke $r11.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        $b7 = $l5 cmp $l6;

        if $b7 == 0 goto label3;

        $r29 = new java.lang.AssertionError;

        specialinvoke $r29.<java.lang.AssertionError: void <init>()>();

        throw $r29;

     label3:
        $r22 = new org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader;

        specialinvoke $r22.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader: void <init>(org.apache.lucene.store.IndexInput,org.apache.lucene.index.SegmentInfo)>($r11, r2);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader indexReader> = $r22;

        r34 = null;

        $r23 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $i1 = virtualinvoke $r23.<org.apache.lucene.store.IndexInput: int readVInt()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int packedIntsVersion> = $i1;

        $r24 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $i2 = virtualinvoke $r24.<org.apache.lucene.store.IndexInput: int readVInt()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int chunkSize> = $i2;

        $r25 = virtualinvoke r1.<org.apache.lucene.codecs.compressing.CompressionMode: org.apache.lucene.codecs.compressing.Decompressor newDecompressor()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.compressing.Decompressor decompressor> = $r25;

        $r26 = new org.apache.lucene.util.packed.BlockPackedReaderIterator;

        $r27 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $i3 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int packedIntsVersion>;

        specialinvoke $r26.<org.apache.lucene.util.packed.BlockPackedReaderIterator: void <init>(org.apache.lucene.store.DataInput,int,int,long)>($r27, $i3, 64, 0L);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader> = $r26;

     label4:
        if 1 != 0 goto label8;

        $r28 = newarray (java.io.Closeable)[2];

        $r28[0] = r0;

        $r28[1] = null;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r28);

        goto label8;

     label5:
        $r32 := @caughtexception;

     label6:
        if 0 != 0 goto label7;

        $r33 = newarray (java.io.Closeable)[2];

        $r33[0] = r0;

        $r33[1] = r34;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r33);

     label7:
        throw $r32;

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    org.apache.lucene.codecs.compressing.CompressionMode getCompressionMode()
    {
        org.apache.lucene.codecs.compressing.CompressionMode $r1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader r0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.compressing.CompressionMode compressionMode>;

        return $r1;
    }

    int getChunkSize()
    {
        int $i0;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader r0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        $i0 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int chunkSize>;

        return $i0;
    }

    int getPackedIntsVersion()
    {
        int $i0;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader r0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        $i0 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int packedIntsVersion>;

        return $i0;
    }

    org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader getIndex()
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader r0;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader $r1;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader indexReader>;

        return $r1;
    }

    org.apache.lucene.store.IndexInput getVectorsStream()
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader r0;
        org.apache.lucene.store.IndexInput $r1;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        return $r1;
    }

    private void ensureOpen() throws org.apache.lucene.store.AlreadyClosedException
    {
        org.apache.lucene.store.AlreadyClosedException $r1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        $z0 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new org.apache.lucene.store.AlreadyClosedException;

        specialinvoke $r1.<org.apache.lucene.store.AlreadyClosedException: void <init>(java.lang.String)>("this FieldsReader is closed");

        throw $r1;

     label1:
        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r2;
        java.io.Closeable[] $r1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader r0;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        $z0 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: boolean closed>;

        if $z0 != 0 goto label1;

        $r1 = newarray (java.io.Closeable)[2];

        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $r1[0] = $r2;

        $r3 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader indexReader>;

        $r1[1] = $r3;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r1);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: boolean closed> = 1;

     label1:
        return;
    }

    public org.apache.lucene.codecs.TermVectorsReader clone()
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader $r0, r1;

        r1 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        $r0 = new org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        specialinvoke $r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: void <init>(org.apache.lucene.codecs.compressing.CompressingTermVectorsReader)>(r1);

        return $r0;
    }

    public org.apache.lucene.index.Fields get(int) throws java.io.IOException
    {
        org.apache.lucene.util.packed.PackedInts$ReaderIterator $r11;
        float[] r115;
        int[] $r41, $r42, $r52, $r53, $r54, $r57, $r62, $r63, $r64, $r65, $r66, $r78, $r93, r107, r109, r111, r112, r113, r118, r119, r120, r121, r122, r123, r124, $r130, r131;
        int i0, $i2, $i3, $i4, $i5, $i6, $i9, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i29, $i30, $i31, $i33, $i34, $i38, $i40, $i41, $i43, $i47, $i48, $i52, $i54, $i56, $i57, $i58, i60, $i61, $i64, $i65, $i67, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i114, $i115, $i122, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i132, $i139, $i141, $i142, $i143, $i144, $i145, $i147, $i154, $i156, $i157, $i158, $i159, $i160, $i164, $i165, $i167, $i168, $i170, $i177, i178, i179, i180, i181, i182, i183, i184, i186, i187, i188, i189, i190, i191, i192, i193, i194, i195, i196, i197, i198, i199, i200, i201, i202, i203, i204, i205, i206, i207, i208, i209, i210, i211, i212, i213, i214, i215, i216, i217, i218, i219, i220, i221, i222, i223, i224, i225, i226, i227, i228, i229, i230, i231, i232, i233, i234, i235, i236, i237, i238, i239, i240, i241, i242, i243, i244, i245, i246, i247, i248, i249, i250, i251, i252, i253, i254, i255, i256, i257, i258, i259, $i260, $i261, $i262, $i263, $i264, i265, i266, i267, i268, i269, i270, i271, $i273, $i274, $i275, $i276;
        org.apache.lucene.util.packed.PackedInts$Mutable $r89;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader $r1;
        java.lang.AssertionError $r135, $r136, $r137, $r139, $r140, $r142, $r146;
        java.lang.String $r40, $r50, $r73, $r106;
        org.apache.lucene.util.packed.BlockPackedReaderIterator $r6, $r7, $r24, $r25, $r26, $r27, $r29, $r31, $r44, $r51, $r56, $r58, $r74, $r77, $r79, $r82, $r83, $r95, $r96;
        org.apache.lucene.util.packed.PackedInts$Format $r9, $r12, $r16, $r19, $r86;
        org.apache.lucene.util.LongsRef $r75, $r80, $r84;
        org.apache.lucene.index.CorruptIndexException $r134;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.lucene.util.BytesRef $r143, $r144;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields $r147;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader r0;
        byte[] $r129;
        byte $b10, $b118, $b135;
        org.apache.lucene.util.packed.PackedInts$Reader $r14, $r21, $r88, r108;
        java.lang.StringBuilder $r37, $r38, $r39, $r47, $r48, $r49, $r70, $r71, $r72, $r100, $r101, $r102, $r103, $r104, $r105, $r133, $r138, $r141, $r145;
        long $l1, $l7, $l8, $l14, $l22, $l23, $l24, $l25, $l26, $l27, $l28, $l32, $l35, $l36, $l37, $l39, $l42, $l44, $l45, $l46, $l49, $l50, $l51, $l53, $l55, $l59, $l62, $l63, $l66, $l68, $l79, $l101, $l102, $l113, $l116, $l117, $l119, $l120, $l121, $l123, $l131, $l133, $l134, $l136, $l137, $l138, $l140, $l146, $l148, $l149, $l150, $l151, $l152, $l153, $l155, $l161, $l162, $l163, $l166, $l171, $l172, $l173, $l174, $l175, $l176;
        short $s169, s185, $s272;
        org.apache.lucene.store.IndexInput $r2, $r3, $r4, $r5, $r8, $r10, $r13, $r15, $r17, $r18, $r20, $r23, $r28, $r30, $r43, $r67, $r87, $r92, $r97, $r127;
        long[] $r76, $r81, $r85;
        int[][] r22, $r32, $r33, $r59, $r60, $r61, r110, r114, r116, r117, r132;
        float $f0, $f1, $f2, f3;
        org.apache.lucene.codecs.compressing.Decompressor $r126;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader indexReader>;

        $l1 = virtualinvoke $r1.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader: long getStartPointer(int)>(i0);

        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        virtualinvoke $r2.<org.apache.lucene.store.IndexInput: void seek(long)>($l1);

        $r3 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $i2 = virtualinvoke $r3.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $r4 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $i3 = virtualinvoke $r4.<org.apache.lucene.store.IndexInput: int readVInt()>();

        if i0 < $i2 goto label001;

        $i4 = $i2 + $i3;

        if i0 >= $i4 goto label001;

        $i6 = $i2 + $i3;

        $i5 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int numDocs>;

        if $i6 <= $i5 goto label002;

     label001:
        $r134 = new org.apache.lucene.index.CorruptIndexException;

        $r133 = new java.lang.StringBuilder;

        specialinvoke $r133.<java.lang.StringBuilder: void <init>()>();

        $r100 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("docBase=");

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",chunkDocs=");

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",doc=");

        $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r106 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r134.<org.apache.lucene.index.CorruptIndexException: void <init>(java.lang.String)>($r106);

        throw $r134;

     label002:
        if $i3 != 1 goto label003;

        i178 = 0;

        $r97 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $i177 = virtualinvoke $r97.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i179 = $i177;

        i180 = $i177;

        goto label008;

     label003:
        $r6 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $r5 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $l7 = (long) $i3;

        virtualinvoke $r6.<org.apache.lucene.util.packed.BlockPackedReaderIterator: void reset(org.apache.lucene.store.DataInput,long)>($r5, $l7);

        i181 = 0;

        i182 = $i2;

     label004:
        if i182 >= i0 goto label005;

        $l174 = (long) i181;

        $r96 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $l175 = virtualinvoke $r96.<org.apache.lucene.util.packed.BlockPackedReaderIterator: long next()>();

        $l176 = $l174 + $l175;

        i181 = (int) $l176;

        i182 = i182 + 1;

        goto label004;

     label005:
        i178 = i181;

        $r7 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $l8 = virtualinvoke $r7.<org.apache.lucene.util.packed.BlockPackedReaderIterator: long next()>();

        i180 = (int) $l8;

        i183 = i181 + i180;

        i184 = i0 + 1;

     label006:
        $i9 = $i2 + $i3;

        if i184 >= $i9 goto label007;

        $l171 = (long) i183;

        $r95 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $l172 = virtualinvoke $r95.<org.apache.lucene.util.packed.BlockPackedReaderIterator: long next()>();

        $l173 = $l171 + $l172;

        i183 = (int) $l173;

        i184 = i184 + 1;

        goto label006;

     label007:
        i179 = i183;

     label008:
        if i180 != 0 goto label009;

        return null;

     label009:
        $r8 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $b10 = virtualinvoke $r8.<org.apache.lucene.store.IndexInput: byte readByte()>();

        $s272 = (short) $b10;

        s185 = $s272 & 255;

        $z0 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label010;

        if s185 != 0 goto label010;

        $r135 = new java.lang.AssertionError;

        specialinvoke $r135.<java.lang.AssertionError: void <init>()>();

        throw $r135;

     label010:
        $s169 = s185 & 31;

        $i273 = (int) s185;

        $i170 = $i273 >>> 5;

        i186 = $i170;

        if $i170 != 7 goto label011;

        $r92 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $i168 = virtualinvoke $r92.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i186 = $i170 + $i168;

     label011:
        i187 = i186 + 1;

        $r10 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $r9 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $i11 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int packedIntsVersion>;

        $i274 = (int) $s169;

        $r11 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$ReaderIterator getReaderIteratorNoHeader(org.apache.lucene.store.DataInput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int,int)>($r10, $r9, $i11, i187, $i274, 1);

        $r93 = newarray (int)[i187];

        i188 = 0;

     label012:
        if i188 >= i187 goto label013;

        $l166 = interfaceinvoke $r11.<org.apache.lucene.util.packed.PackedInts$ReaderIterator: long next()>();

        $i167 = (int) $l166;

        $r93[i188] = $i167;

        i188 = i188 + 1;

        goto label012;

     label013:
        r107 = newarray (int)[i180];

        $i12 = lengthof $r93;

        $i13 = $i12 - 1;

        $l14 = (long) $i13;

        $i15 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>($l14);

        $r13 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $r12 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $i16 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int packedIntsVersion>;

        $r14 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Reader getReaderNoHeader(org.apache.lucene.store.DataInput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>($r13, $r12, $i16, i179, $i15);

        $r15 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $i17 = virtualinvoke $r15.<org.apache.lucene.store.IndexInput: int readVInt()>();

        lookupswitch($i17)
        {
            case 0: goto label014;
            case 1: goto label019;
            default: goto label020;
        };

     label014:
        $r87 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $r86 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $i159 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int packedIntsVersion>;

        $i158 = lengthof $r93;

        $i157 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int FLAGS_BITS>;

        $r88 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Reader getReaderNoHeader(org.apache.lucene.store.DataInput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>($r87, $r86, $i159, $i158, $i157);

        $i160 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int FLAGS_BITS>;

        $r89 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Mutable getMutable(int,int,float)>(i179, $i160, 0.0F);

        i189 = 0;

     label015:
        if i189 >= i179 goto label018;

        $l161 = interfaceinvoke $r14.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i189);

        i190 = (int) $l161;

        $z5 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: boolean $assertionsDisabled>;

        if $z5 != 0 goto label017;

        if i190 < 0 goto label016;

        $i164 = lengthof $r93;

        if i190 < $i164 goto label017;

     label016:
        $r136 = new java.lang.AssertionError;

        specialinvoke $r136.<java.lang.AssertionError: void <init>()>();

        throw $r136;

     label017:
        $l162 = interfaceinvoke $r88.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i190);

        $i165 = (int) $l162;

        $l163 = (long) $i165;

        interfaceinvoke $r89.<org.apache.lucene.util.packed.PackedInts$Mutable: void set(int,long)>(i189, $l163);

        i189 = i189 + 1;

        goto label015;

     label018:
        r108 = $r89;

        goto label021;

     label019:
        $r17 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $r16 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $i19 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int packedIntsVersion>;

        $i18 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int FLAGS_BITS>;

        r108 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Reader getReaderNoHeader(org.apache.lucene.store.DataInput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>($r17, $r16, $i19, i179, $i18);

        goto label021;

     label020:
        $r137 = new java.lang.AssertionError;

        specialinvoke $r137.<java.lang.AssertionError: void <init>()>();

        throw $r137;

     label021:
        i191 = 0;

     label022:
        if i191 >= i180 goto label023;

        $i154 = i178 + i191;

        $l155 = interfaceinvoke $r14.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i154);

        $i156 = (int) $l155;

        r107[i191] = $i156;

        i191 = i191 + 1;

        goto label022;

     label023:
        $r18 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $i20 = virtualinvoke $r18.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $r20 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $r19 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $i21 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int packedIntsVersion>;

        $r21 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Reader getReaderNoHeader(org.apache.lucene.store.DataInput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>($r20, $r19, $i21, i179, $i20);

        i192 = 0;

        i193 = 0;

     label024:
        if i193 >= i179 goto label025;

        $l151 = (long) i192;

        $l152 = interfaceinvoke $r21.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i193);

        $l153 = $l151 + $l152;

        i192 = (int) $l153;

        i193 = i193 + 1;

        goto label024;

     label025:
        i194 = i192;

        i195 = 0;

        i196 = 0;

        r109 = newarray (int)[i180];

        r110 = newarray (int[])[i180];

        r22 = newarray (int[])[i180];

        $r24 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $r23 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $l22 = (long) i192;

        virtualinvoke $r24.<org.apache.lucene.util.packed.BlockPackedReaderIterator: void reset(org.apache.lucene.store.DataInput,long)>($r23, $l22);

        i197 = 0;

        i198 = 0;

     label026:
        if i198 >= i178 goto label027;

        $l148 = (long) i197;

        $l149 = interfaceinvoke $r21.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i198);

        $l150 = $l148 + $l149;

        i197 = (int) $l150;

        i198 = i198 + 1;

        goto label026;

     label027:
        $r25 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $l23 = (long) i197;

        virtualinvoke $r25.<org.apache.lucene.util.packed.BlockPackedReaderIterator: void skip(long)>($l23);

        i199 = 0;

     label028:
        if i199 >= i180 goto label033;

        $i139 = i178 + i199;

        $l140 = interfaceinvoke $r21.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i139);

        i200 = (int) $l140;

        r111 = newarray (int)[i200];

        r110[i199] = r111;

        i201 = 0;

     label029:
        if i201 >= i200 goto label032;

        $r83 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $i141 = i200 - i201;

        $r84 = virtualinvoke $r83.<org.apache.lucene.util.packed.BlockPackedReaderIterator: org.apache.lucene.util.LongsRef next(int)>($i141);

        i202 = 0;

     label030:
        $i142 = $r84.<org.apache.lucene.util.LongsRef: int length>;

        if i202 >= $i142 goto label031;

        $i143 = i201;

        i201 = i201 + 1;

        $r85 = $r84.<org.apache.lucene.util.LongsRef: long[] longs>;

        $i144 = $r84.<org.apache.lucene.util.LongsRef: int offset>;

        $i145 = $i144 + i202;

        $l146 = $r85[$i145];

        $i147 = (int) $l146;

        r111[$i143] = $i147;

        i202 = i202 + 1;

        goto label030;

     label031:
        goto label029;

     label032:
        i199 = i199 + 1;

        goto label028;

     label033:
        $r27 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $l24 = (long) i194;

        $r26 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $l25 = virtualinvoke $r26.<org.apache.lucene.util.packed.BlockPackedReaderIterator: long ord()>();

        $l26 = $l24 - $l25;

        virtualinvoke $r27.<org.apache.lucene.util.packed.BlockPackedReaderIterator: void skip(long)>($l26);

        $r29 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $r28 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $l27 = (long) i194;

        virtualinvoke $r29.<org.apache.lucene.util.packed.BlockPackedReaderIterator: void reset(org.apache.lucene.store.DataInput,long)>($r28, $l27);

        i203 = 0;

     label034:
        if i203 >= i178 goto label037;

        i204 = 0;

     label035:
        $l133 = (long) i204;

        $l134 = interfaceinvoke $r21.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i203);

        $b135 = $l133 cmp $l134;

        $i275 = (int) $b135;

        if $i275 >= 0 goto label036;

        $l136 = (long) i195;

        $r82 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $l137 = virtualinvoke $r82.<org.apache.lucene.util.packed.BlockPackedReaderIterator: long next()>();

        $l138 = $l136 + $l137;

        i195 = (int) $l138;

        i204 = i204 + 1;

        goto label035;

     label036:
        i203 = i203 + 1;

        goto label034;

     label037:
        i205 = 0;

     label038:
        if i205 >= i180 goto label043;

        $i122 = i178 + i205;

        $l123 = interfaceinvoke $r21.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i122);

        i206 = (int) $l123;

        r112 = newarray (int)[i206];

        r22[i205] = r112;

        i207 = 0;

     label039:
        if i207 >= i206 goto label042;

        $r79 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $i126 = i206 - i207;

        $r80 = virtualinvoke $r79.<org.apache.lucene.util.packed.BlockPackedReaderIterator: org.apache.lucene.util.LongsRef next(int)>($i126);

        i208 = 0;

     label040:
        $i127 = $r80.<org.apache.lucene.util.LongsRef: int length>;

        if i208 >= $i127 goto label041;

        $i128 = i207;

        i207 = i207 + 1;

        $r81 = $r80.<org.apache.lucene.util.LongsRef: long[] longs>;

        $i129 = $r80.<org.apache.lucene.util.LongsRef: int offset>;

        $i130 = $i129 + i208;

        $l131 = $r81[$i130];

        $i132 = (int) $l131;

        r112[$i128] = $i132;

        i208 = i208 + 1;

        goto label040;

     label041:
        goto label039;

     label042:
        $r78 = r22[i205];

        $i124 = staticinvoke <org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int sum(int[])>($r78);

        r109[i205] = $i124;

        $i125 = r109[i205];

        i196 = i196 + $i125;

        i205 = i205 + 1;

        goto label038;

     label043:
        i209 = i195 + i196;

        i210 = i178 + i180;

     label044:
        if i210 >= i179 goto label047;

        i211 = 0;

     label045:
        $l116 = (long) i211;

        $l117 = interfaceinvoke $r21.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i210);

        $b118 = $l116 cmp $l117;

        $i276 = (int) $b118;

        if $i276 >= 0 goto label046;

        $l119 = (long) i209;

        $r77 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $l120 = virtualinvoke $r77.<org.apache.lucene.util.packed.BlockPackedReaderIterator: long next()>();

        $l121 = $l119 + $l120;

        i209 = (int) $l121;

        i211 = i211 + 1;

        goto label045;

     label046:
        i210 = i210 + 1;

        goto label044;

     label047:
        r113 = newarray (int)[i194];

        $r31 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $r30 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $l28 = (long) i194;

        virtualinvoke $r31.<org.apache.lucene.util.packed.BlockPackedReaderIterator: void reset(org.apache.lucene.store.DataInput,long)>($r30, $l28);

        i212 = 0;

     label048:
        if i212 >= i194 goto label051;

        $r74 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $i108 = i194 - i212;

        $r75 = virtualinvoke $r74.<org.apache.lucene.util.packed.BlockPackedReaderIterator: org.apache.lucene.util.LongsRef next(int)>($i108);

        i213 = 0;

     label049:
        $i109 = $r75.<org.apache.lucene.util.LongsRef: int length>;

        if i213 >= $i109 goto label050;

        $i110 = i212;

        i212 = i212 + 1;

        $r76 = $r75.<org.apache.lucene.util.LongsRef: long[] longs>;

        $i111 = $r75.<org.apache.lucene.util.LongsRef: int offset>;

        $i112 = $i111 + i213;

        $l113 = $r76[$i112];

        $i114 = (int) $l113;

        $i115 = 1 + $i114;

        r113[$i110] = $i115;

        i213 = i213 + 1;

        goto label049;

     label050:
        goto label048;

     label051:
        i214 = 0;

        i215 = 0;

        i216 = 0;

        i217 = 0;

        i218 = 0;

     label052:
        if i217 >= i179 goto label059;

        $l101 = interfaceinvoke r108.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i217);

        i219 = (int) $l101;

        $l102 = interfaceinvoke $r21.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i217);

        i220 = (int) $l102;

        i221 = 0;

     label053:
        if i221 >= i220 goto label057;

        $i104 = i218;

        i218 = i218 + 1;

        i222 = r113[$i104];

        $i105 = i219 & 1;

        if $i105 == 0 goto label054;

        i214 = i214 + i222;

     label054:
        $i106 = i219 & 2;

        if $i106 == 0 goto label055;

        i215 = i215 + i222;

     label055:
        $i107 = i219 & 4;

        if $i107 == 0 goto label056;

        i216 = i216 + i222;

     label056:
        i221 = i221 + 1;

        goto label053;

     label057:
        $z4 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: boolean $assertionsDisabled>;

        if $z4 != 0 goto label058;

        $i103 = i179 - 1;

        if i217 != $i103 goto label058;

        if i218 == i194 goto label058;

        $r139 = new java.lang.AssertionError;

        $r138 = new java.lang.StringBuilder;

        specialinvoke $r138.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i218);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i194);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r139.<java.lang.AssertionError: void <init>(java.lang.Object)>($r73);

        throw $r139;

     label058:
        i217 = i217 + 1;

        goto label052;

     label059:
        $r32 = specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int[][] positionIndex(int,int,org.apache.lucene.util.packed.PackedInts$Reader,int[])>(i178, i180, $r21, r113);

        if i214 <= 0 goto label060;

        r114 = specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int[][] readPositions(int,int,org.apache.lucene.util.packed.PackedInts$Reader,org.apache.lucene.util.packed.PackedInts$Reader,int[],int,int,int[][])>(i178, i180, r108, $r21, r113, 1, i214, $r32);

        goto label061;

     label060:
        r114 = newarray (int[])[i180];

     label061:
        if i215 <= 0 goto label072;

        $i76 = lengthof $r93;

        r115 = newarray (float)[$i76];

        i223 = 0;

     label062:
        $i77 = lengthof r115;

        if i223 >= $i77 goto label063;

        $r67 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $i100 = virtualinvoke $r67.<org.apache.lucene.store.IndexInput: int readInt()>();

        $f2 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i100);

        r115[i223] = $f2;

        i223 = i223 + 1;

        goto label062;

     label063:
        $r60 = specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int[][] readPositions(int,int,org.apache.lucene.util.packed.PackedInts$Reader,org.apache.lucene.util.packed.PackedInts$Reader,int[],int,int,int[][])>(i178, i180, r108, $r21, r113, 2, i215, $r32);

        r116 = $r60;

        $r61 = specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int[][] readPositions(int,int,org.apache.lucene.util.packed.PackedInts$Reader,org.apache.lucene.util.packed.PackedInts$Reader,int[],int,int,int[][])>(i178, i180, r108, $r21, r113, 2, i215, $r32);

        r117 = $r61;

        i224 = 0;

     label064:
        if i224 >= i180 goto label071;

        r118 = $r60[i224];

        r119 = r114[i224];

        if r118 == null goto label066;

        if r119 == null goto label066;

        $i94 = r107[i224];

        f3 = r115[$i94];

        i225 = 0;

     label065:
        $r66 = $r60[i224];

        $i95 = lengthof $r66;

        if i225 >= $i95 goto label066;

        $i98 = r118[i225];

        $i96 = r119[i225];

        $f0 = (float) $i96;

        $f1 = f3 * $f0;

        $i97 = (int) $f1;

        $i99 = $i98 + $i97;

        r118[i225] = $i99;

        i225 = i225 + 1;

        goto label065;

     label066:
        if r118 == null goto label070;

        r120 = r110[i224];

        r121 = r22[i224];

        r122 = $r61[i224];

        i226 = 0;

        $i78 = i178 + i224;

        $l79 = interfaceinvoke $r21.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i78);

        i227 = (int) $l79;

     label067:
        if i226 >= i227 goto label070;

        $i81 = r120[i226];

        $i80 = r121[i226];

        i228 = $i81 + $i80;

        $r63 = $r61[i224];

        $r62 = $r32[i224];

        $i82 = $r62[i226];

        $i83 = $r63[$i82];

        $i84 = $i83 + i228;

        $r63[$i82] = $i84;

        $r64 = $r32[i224];

        $i85 = $r64[i226];

        i229 = $i85 + 1;

     label068:
        $r65 = $r32[i224];

        $i86 = i226 + 1;

        $i87 = $r65[$i86];

        if i229 >= $i87 goto label069;

        $i90 = r118[i229];

        $i88 = i229 - 1;

        $i89 = r118[$i88];

        $i91 = $i90 + $i89;

        r118[i229] = $i91;

        $i92 = r122[i229];

        $i93 = $i92 + i228;

        r122[i229] = $i93;

        i229 = i229 + 1;

        goto label068;

     label069:
        i226 = i226 + 1;

        goto label067;

     label070:
        i224 = i224 + 1;

        goto label064;

     label071:
        goto label073;

     label072:
        $r33 = newarray (int[])[i180];

        r117 = $r33;

        r116 = $r33;

     label073:
        if i214 <= 0 goto label079;

        i230 = 0;

     label074:
        if i230 >= i180 goto label079;

        r123 = r114[i230];

        r124 = $r32[i230];

        if r123 == null goto label078;

        i231 = 0;

        $i67 = i178 + i230;

        $l68 = interfaceinvoke $r21.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i67);

        i232 = (int) $l68;

     label075:
        if i231 >= i232 goto label078;

        $i69 = r124[i231];

        i233 = $i69 + 1;

     label076:
        $i70 = i231 + 1;

        $i71 = r124[$i70];

        if i233 >= $i71 goto label077;

        $i74 = r123[i233];

        $i72 = i233 - 1;

        $i73 = r123[$i72];

        $i75 = $i74 + $i73;

        r123[i233] = $i75;

        i233 = i233 + 1;

        goto label076;

     label077:
        i231 = i231 + 1;

        goto label075;

     label078:
        i230 = i230 + 1;

        goto label074;

     label079:
        $r59 = newarray (int[])[i180];

        i234 = 0;

        i235 = 0;

        i236 = 0;

        if i216 <= 0 goto label099;

        $r44 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $r43 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $l44 = (long) i216;

        virtualinvoke $r44.<org.apache.lucene.util.packed.BlockPackedReaderIterator: void reset(org.apache.lucene.store.DataInput,long)>($r43, $l44);

        i237 = 0;

        i238 = 0;

     label080:
        if i238 >= i178 goto label085;

        $l62 = interfaceinvoke r108.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i238);

        i239 = (int) $l62;

        $l63 = interfaceinvoke $r21.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i238);

        i240 = (int) $l63;

        $i64 = i239 & 4;

        if $i64 == 0 goto label084;

        i241 = 0;

     label081:
        if i241 >= i240 goto label084;

        $i65 = i237 + i241;

        i242 = r113[$i65];

        i243 = 0;

     label082:
        if i243 >= i242 goto label083;

        $r58 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $l66 = virtualinvoke $r58.<org.apache.lucene.util.packed.BlockPackedReaderIterator: long next()>();

        i244 = (int) $l66;

        i235 = i235 + i244;

        i243 = i243 + 1;

        goto label082;

     label083:
        i241 = i241 + 1;

        goto label081;

     label084:
        i237 = i237 + i240;

        i238 = i238 + 1;

        goto label080;

     label085:
        i245 = i235;

        i246 = 0;

     label086:
        if i246 >= i180 goto label092;

        $i52 = i178 + i246;

        $l53 = interfaceinvoke r108.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i52);

        i247 = (int) $l53;

        $i54 = i178 + i246;

        $l55 = interfaceinvoke $r21.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i54);

        i248 = (int) $l55;

        $i56 = i247 & 4;

        if $i56 == 0 goto label091;

        $r52 = $r32[i246];

        i249 = $r52[i248];

        $i57 = i249 + 1;

        $r53 = newarray (int)[$i57];

        $r59[i246] = $r53;

        i250 = 0;

        $r54 = $r59[i246];

        $r54[0] = i236;

        i251 = 0;

     label087:
        if i251 >= i248 goto label090;

        $i58 = i237 + i251;

        i252 = r113[$i58];

        i253 = 0;

     label088:
        if i253 >= i252 goto label089;

        $r56 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $l59 = virtualinvoke $r56.<org.apache.lucene.util.packed.BlockPackedReaderIterator: long next()>();

        i60 = (int) $l59;

        i236 = i236 + i60;

        $r57 = $r59[i246];

        $i61 = i250 + 1;

        $r57[$i61] = i236;

        i250 = i250 + 1;

        i253 = i253 + 1;

        goto label088;

     label089:
        i251 = i251 + 1;

        goto label087;

     label090:
        $z3 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: boolean $assertionsDisabled>;

        if $z3 != 0 goto label091;

        if i250 == i249 goto label091;

        $r140 = new java.lang.AssertionError;

        specialinvoke $r140.<java.lang.AssertionError: void <init>()>();

        throw $r140;

     label091:
        i237 = i237 + i248;

        i246 = i246 + 1;

        goto label086;

     label092:
        i234 = i245 + i236;

        i254 = i178 + i180;

     label093:
        if i254 >= i179 goto label098;

        $l45 = interfaceinvoke r108.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i254);

        i255 = (int) $l45;

        $l46 = interfaceinvoke $r21.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i254);

        i256 = (int) $l46;

        $i47 = i255 & 4;

        if $i47 == 0 goto label097;

        i257 = 0;

     label094:
        if i257 >= i256 goto label097;

        $i48 = i237 + i257;

        i258 = r113[$i48];

        i259 = 0;

     label095:
        if i259 >= i258 goto label096;

        $l49 = (long) i234;

        $r51 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $l50 = virtualinvoke $r51.<org.apache.lucene.util.packed.BlockPackedReaderIterator: long next()>();

        $l51 = $l49 + $l50;

        i234 = (int) $l51;

        i259 = i259 + 1;

        goto label095;

     label096:
        i257 = i257 + 1;

        goto label094;

     label097:
        i237 = i237 + i256;

        i254 = i254 + 1;

        goto label093;

     label098:
        $z2 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: boolean $assertionsDisabled>;

        if $z2 != 0 goto label099;

        if i237 == i194 goto label099;

        $r142 = new java.lang.AssertionError;

        $r141 = new java.lang.StringBuilder;

        specialinvoke $r141.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r141.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i237);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i194);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r142.<java.lang.AssertionError: void <init>(java.lang.Object)>($r50);

        throw $r142;

     label099:
        $r143 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r143.<org.apache.lucene.util.BytesRef: void <init>()>();

        $r126 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.compressing.Decompressor decompressor>;

        $r127 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $i260 = i209 + i234;

        $i261 = i195 + i235;

        $i262 = i196 + i236;

        virtualinvoke $r126.<org.apache.lucene.codecs.compressing.Decompressor: void decompress(org.apache.lucene.store.DataInput,int,int,int,org.apache.lucene.util.BytesRef)>($r127, $i260, $i261, $i262, $r143);

        $r143.<org.apache.lucene.util.BytesRef: int length> = i196;

        $r144 = new org.apache.lucene.util.BytesRef;

        $r129 = $r143.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i263 = $r143.<org.apache.lucene.util.BytesRef: int offset>;

        $i264 = $i263 + i196;

        specialinvoke $r144.<org.apache.lucene.util.BytesRef: void <init>(byte[],int,int)>($r129, $i264, i236);

        $r130 = newarray (int)[i180];

        i265 = 0;

     label100:
        if i265 >= i180 goto label101;

        $i41 = i178 + i265;

        $l42 = interfaceinvoke r108.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i41);

        $i43 = (int) $l42;

        $r130[i265] = $i43;

        i265 = i265 + 1;

        goto label100;

     label101:
        r131 = newarray (int)[i180];

        i266 = 0;

     label102:
        if i266 >= i180 goto label103;

        $i38 = i178 + i266;

        $l39 = interfaceinvoke $r21.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i38);

        $i40 = (int) $l39;

        r131[i266] = $i40;

        i266 = i266 + 1;

        goto label102;

     label103:
        r132 = newarray (int[])[i180];

        i267 = 0;

        i268 = 0;

     label104:
        if i268 >= i178 goto label105;

        $l35 = (long) i267;

        $l36 = interfaceinvoke $r21.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i268);

        $l37 = $l35 + $l36;

        i267 = (int) $l37;

        i268 = i268 + 1;

        goto label104;

     label105:
        i269 = 0;

     label106:
        if i269 >= i180 goto label109;

        $i31 = i178 + i269;

        $l32 = interfaceinvoke $r21.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i31);

        i270 = (int) $l32;

        $r41 = newarray (int)[i270];

        r132[i269] = $r41;

        i271 = 0;

     label107:
        if i271 >= i270 goto label108;

        $r42 = r132[i269];

        $i33 = i267;

        i267 = i267 + 1;

        $i34 = r113[$i33];

        $r42[i271] = $i34;

        i271 = i271 + 1;

        goto label107;

     label108:
        i269 = i269 + 1;

        goto label106;

     label109:
        $z1 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label110;

        $i29 = staticinvoke <org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int sum(int[])>(r109);

        if $i29 == i196 goto label110;

        $r146 = new java.lang.AssertionError;

        $r145 = new java.lang.StringBuilder;

        specialinvoke $r145.<java.lang.StringBuilder: void <init>()>();

        $i30 = staticinvoke <org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int sum(int[])>(r109);

        $r37 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i196);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r146.<java.lang.AssertionError: void <init>(java.lang.Object)>($r40);

        throw $r146;

     label110:
        $r147 = new org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields;

        specialinvoke $r147.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields: void <init>(org.apache.lucene.codecs.compressing.CompressingTermVectorsReader,int[],int[],int[],int[],int[],int[][],int[][],int[][],int[][],int[][],int[][],int[][],org.apache.lucene.util.BytesRef,int[][],org.apache.lucene.util.BytesRef)>(r0, $r93, $r130, r107, r131, r109, r110, r22, r132, $r32, r114, r116, r117, $r144, $r59, $r143);

        return $r147;
    }

    private int[][] positionIndex(int, int, org.apache.lucene.util.packed.PackedInts$Reader, int[])
    {
        int[][] r0;
        long $l3, $l10;
        int[] $r2, r3, $r4, $r5;
        int i0, i1, $i2, $i4, $i5, i6, $i7, $i8, $i9, i11, i12, i13, i14, i15, i16;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader r6;
        org.apache.lucene.util.packed.PackedInts$Reader r1;

        r6 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r1 := @parameter2: org.apache.lucene.util.packed.PackedInts$Reader;

        r3 := @parameter3: int[];

        r0 = newarray (int[])[i0];

        i11 = 0;

        i12 = 0;

     label1:
        if i12 >= i1 goto label2;

        $l10 = interfaceinvoke r1.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i12);

        i13 = (int) $l10;

        i11 = i11 + i13;

        i12 = i12 + 1;

        goto label1;

     label2:
        i14 = 0;

     label3:
        if i14 >= i0 goto label6;

        $i2 = i1 + i14;

        $l3 = interfaceinvoke r1.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i2);

        i15 = (int) $l3;

        $i4 = i15 + 1;

        $r2 = newarray (int)[$i4];

        r0[i14] = $r2;

        i16 = 0;

     label4:
        if i16 >= i15 goto label5;

        $i5 = i11 + i16;

        i6 = r3[$i5];

        $r5 = r0[i14];

        $i9 = i16 + 1;

        $r4 = r0[i14];

        $i7 = $r4[i16];

        $i8 = $i7 + i6;

        $r5[$i9] = $i8;

        i16 = i16 + 1;

        goto label4;

     label5:
        i11 = i11 + i15;

        i14 = i14 + 1;

        goto label3;

     label6:
        return r0;
    }

    private int[][] readPositions(int, int, org.apache.lucene.util.packed.PackedInts$Reader, org.apache.lucene.util.packed.PackedInts$Reader, int[], int, int, int[][]) throws java.io.IOException
    {
        int[][] r0, r9;
        int[] $r10, r14, r15;
        org.apache.lucene.util.packed.PackedInts$Reader r7, r8;
        long $l2, $l4, $l5, $l6, $l7, $l9, $l11, $l19, $l21, $l22;
        long[] $r13;
        int i0, i1, i3, $i8, $i10, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i23, $i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader r1;
        org.apache.lucene.util.packed.BlockPackedReaderIterator $r3, $r4, $r5, $r6, $r11;
        org.apache.lucene.store.IndexInput $r2;
        org.apache.lucene.util.LongsRef $r12;

        r1 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        r7 := @parameter2: org.apache.lucene.util.packed.PackedInts$Reader;

        r8 := @parameter3: org.apache.lucene.util.packed.PackedInts$Reader;

        r14 := @parameter4: int[];

        i12 := @parameter5: int;

        i1 := @parameter6: int;

        r9 := @parameter7: int[][];

        r0 = newarray (int[])[i0];

        $r3 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $r2 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput vectorsStream>;

        $l2 = (long) i1;

        virtualinvoke $r3.<org.apache.lucene.util.packed.BlockPackedReaderIterator: void reset(org.apache.lucene.store.DataInput,long)>($r2, $l2);

        i25 = 0;

        i26 = 0;

        i27 = 0;

     label01:
        if i27 >= i3 goto label04;

        $l21 = interfaceinvoke r7.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i27);

        i28 = (int) $l21;

        $l22 = interfaceinvoke r8.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i27);

        i29 = (int) $l22;

        $i23 = i28 & i12;

        if $i23 == 0 goto label03;

        i30 = 0;

     label02:
        if i30 >= i29 goto label03;

        $i24 = i26 + i30;

        i31 = r14[$i24];

        i25 = i25 + i31;

        i30 = i30 + 1;

        goto label02;

     label03:
        i26 = i26 + i29;

        i27 = i27 + 1;

        goto label01;

     label04:
        $r4 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $l4 = (long) i25;

        virtualinvoke $r4.<org.apache.lucene.util.packed.BlockPackedReaderIterator: void skip(long)>($l4);

        i32 = 0;

     label05:
        if i32 >= i0 goto label10;

        $i8 = i3 + i32;

        $l9 = interfaceinvoke r7.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i8);

        i33 = (int) $l9;

        $i10 = i3 + i32;

        $l11 = interfaceinvoke r8.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i10);

        i34 = (int) $l11;

        $i13 = i33 & i12;

        if $i13 == 0 goto label09;

        $r10 = r9[i32];

        i35 = $r10[i34];

        r15 = newarray (int)[i35];

        r0[i32] = r15;

        i36 = 0;

     label06:
        if i36 >= i35 goto label09;

        $r11 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $i14 = i35 - i36;

        $r12 = virtualinvoke $r11.<org.apache.lucene.util.packed.BlockPackedReaderIterator: org.apache.lucene.util.LongsRef next(int)>($i14);

        i37 = 0;

     label07:
        $i15 = $r12.<org.apache.lucene.util.LongsRef: int length>;

        if i37 >= $i15 goto label08;

        $i16 = i36;

        i36 = i36 + 1;

        $r13 = $r12.<org.apache.lucene.util.LongsRef: long[] longs>;

        $i17 = $r12.<org.apache.lucene.util.LongsRef: int offset>;

        $i18 = $i17 + i37;

        $l19 = $r13[$i18];

        $i20 = (int) $l19;

        r15[$i16] = $i20;

        i37 = i37 + 1;

        goto label07;

     label08:
        goto label06;

     label09:
        i32 = i32 + 1;

        goto label05;

     label10:
        $r6 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $l5 = (long) i1;

        $r5 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.util.packed.BlockPackedReaderIterator reader>;

        $l6 = virtualinvoke $r5.<org.apache.lucene.util.packed.BlockPackedReaderIterator: long ord()>();

        $l7 = $l5 - $l6;

        virtualinvoke $r6.<org.apache.lucene.util.packed.BlockPackedReaderIterator: void skip(long)>($l7);

        return r0;
    }

    private static int sum(int[])
    {
        int[] r0;
        int i0, i1, i2, i3;

        r0 := @parameter0: int[];

        i2 = 0;

        i0 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        i1 = r0[i3];

        i2 = i2 + i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.codecs.TermVectorsReader $r1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader r0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        $r1 = virtualinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.TermVectorsReader clone()>();

        return $r1;
    }

    static org.apache.lucene.index.FieldInfos access$200(org.apache.lucene.codecs.compressing.CompressingTermVectorsReader)
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader r0;
        org.apache.lucene.index.FieldInfos $r1;

        r0 := @parameter0: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.index.FieldInfos fieldInfos>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/codecs/compressing/CompressingTermVectorsReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
