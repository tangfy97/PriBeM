class org.bouncycastle.crypto.generators.DHKeyGeneratorHelper extends java.lang.Object
{
    static final org.bouncycastle.crypto.generators.DHKeyGeneratorHelper INSTANCE;
    private static final java.math.BigInteger ONE;
    private static final java.math.BigInteger TWO;

    private void <init>()
    {
        org.bouncycastle.crypto.generators.DHKeyGeneratorHelper r0;

        r0 := @this: org.bouncycastle.crypto.generators.DHKeyGeneratorHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    java.math.BigInteger calculatePrivate(org.bouncycastle.crypto.params.DHParameters, java.security.SecureRandom)
    {
        org.bouncycastle.crypto.generators.DHKeyGeneratorHelper r10;
        java.security.SecureRandom r4;
        int $i0, $i1, $i2, $i3;
        java.math.BigInteger $r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9, r11, r12;
        org.bouncycastle.crypto.params.DHParameters r0;

        r10 := @this: org.bouncycastle.crypto.generators.DHKeyGeneratorHelper;

        r0 := @parameter0: org.bouncycastle.crypto.params.DHParameters;

        r4 := @parameter1: java.security.SecureRandom;

        $r1 = virtualinvoke r0.<org.bouncycastle.crypto.params.DHParameters: java.math.BigInteger getP()>();

        $i0 = virtualinvoke r0.<org.bouncycastle.crypto.params.DHParameters: int getL()>();

        if $i0 == 0 goto label1;

        $r8 = new java.math.BigInteger;

        specialinvoke $r8.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, r4);

        $i3 = $i0 - 1;

        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger setBit(int)>($i3);

        return $r9;

     label1:
        r11 = <org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger TWO>;

        $i1 = virtualinvoke r0.<org.bouncycastle.crypto.params.DHParameters: int getM()>();

        if $i1 == 0 goto label2;

        $r7 = <org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger ONE>;

        $i2 = $i1 - 1;

        r11 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i2);

     label2:
        $r2 = <org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger TWO>;

        r12 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

        $r3 = virtualinvoke r0.<org.bouncycastle.crypto.params.DHParameters: java.math.BigInteger getQ()>();

        if $r3 == null goto label3;

        $r6 = <org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger TWO>;

        r12 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r6);

     label3:
        $r5 = staticinvoke <org.bouncycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>(r11, r12, r4);

        return $r5;
    }

    java.math.BigInteger calculatePublic(org.bouncycastle.crypto.params.DHParameters, java.math.BigInteger)
    {
        org.bouncycastle.crypto.generators.DHKeyGeneratorHelper r5;
        java.math.BigInteger $r1, r2, $r3, $r4;
        org.bouncycastle.crypto.params.DHParameters r0;

        r5 := @this: org.bouncycastle.crypto.generators.DHKeyGeneratorHelper;

        r0 := @parameter0: org.bouncycastle.crypto.params.DHParameters;

        r2 := @parameter1: java.math.BigInteger;

        $r1 = virtualinvoke r0.<org.bouncycastle.crypto.params.DHParameters: java.math.BigInteger getG()>();

        $r3 = virtualinvoke r0.<org.bouncycastle.crypto.params.DHParameters: java.math.BigInteger getP()>();

        $r4 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>(r2, $r3);

        return $r4;
    }

    static void <clinit>()
    {
        org.bouncycastle.crypto.generators.DHKeyGeneratorHelper $r0;
        java.math.BigInteger $r1, $r2;

        $r0 = new org.bouncycastle.crypto.generators.DHKeyGeneratorHelper;

        specialinvoke $r0.<org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: void <init>()>();

        <org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: org.bouncycastle.crypto.generators.DHKeyGeneratorHelper INSTANCE> = $r0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger ONE> = $r1;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger TWO> = $r2;

        return;
    }
}
