public class org.apache.poi.poifs.crypt.DataSpaceMapUtils$IRMDSTransformInfo extends java.lang.Object implements org.apache.poi.poifs.crypt.standard.EncryptionRecord
{
    org.apache.poi.poifs.crypt.DataSpaceMapUtils$TransformInfoHeader transformInfoHeader;
    int extensibilityHeader;
    java.lang.String xrMLLicense;

    public void <init>(org.apache.poi.poifs.crypt.DataSpaceMapUtils$TransformInfoHeader, int, java.lang.String)
    {
        org.apache.poi.poifs.crypt.DataSpaceMapUtils$TransformInfoHeader r1;
        int i0;
        java.lang.String r2;
        org.apache.poi.poifs.crypt.DataSpaceMapUtils$IRMDSTransformInfo r0;

        r0 := @this: org.apache.poi.poifs.crypt.DataSpaceMapUtils$IRMDSTransformInfo;

        r1 := @parameter0: org.apache.poi.poifs.crypt.DataSpaceMapUtils$TransformInfoHeader;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.poifs.crypt.DataSpaceMapUtils$IRMDSTransformInfo: org.apache.poi.poifs.crypt.DataSpaceMapUtils$TransformInfoHeader transformInfoHeader> = r1;

        r0.<org.apache.poi.poifs.crypt.DataSpaceMapUtils$IRMDSTransformInfo: int extensibilityHeader> = i0;

        r0.<org.apache.poi.poifs.crypt.DataSpaceMapUtils$IRMDSTransformInfo: java.lang.String xrMLLicense> = r2;

        return;
    }

    public void <init>(org.apache.poi.util.LittleEndianInput)
    {
        org.apache.poi.poifs.crypt.DataSpaceMapUtils$TransformInfoHeader $r1;
        org.apache.poi.util.LittleEndianInput r2;
        int $i0;
        java.lang.String $r3;
        org.apache.poi.poifs.crypt.DataSpaceMapUtils$IRMDSTransformInfo r0;

        r0 := @this: org.apache.poi.poifs.crypt.DataSpaceMapUtils$IRMDSTransformInfo;

        r2 := @parameter0: org.apache.poi.util.LittleEndianInput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.poi.poifs.crypt.DataSpaceMapUtils$TransformInfoHeader;

        specialinvoke $r1.<org.apache.poi.poifs.crypt.DataSpaceMapUtils$TransformInfoHeader: void <init>(org.apache.poi.util.LittleEndianInput)>(r2);

        r0.<org.apache.poi.poifs.crypt.DataSpaceMapUtils$IRMDSTransformInfo: org.apache.poi.poifs.crypt.DataSpaceMapUtils$TransformInfoHeader transformInfoHeader> = $r1;

        $i0 = interfaceinvoke r2.<org.apache.poi.util.LittleEndianInput: int readInt()>();

        r0.<org.apache.poi.poifs.crypt.DataSpaceMapUtils$IRMDSTransformInfo: int extensibilityHeader> = $i0;

        $r3 = staticinvoke <org.apache.poi.poifs.crypt.DataSpaceMapUtils: java.lang.String readUtf8LPP4(org.apache.poi.util.LittleEndianInput)>(r2);

        r0.<org.apache.poi.poifs.crypt.DataSpaceMapUtils$IRMDSTransformInfo: java.lang.String xrMLLicense> = $r3;

        return;
    }

    public void write(org.apache.poi.util.LittleEndianByteArrayOutputStream)
    {
        org.apache.poi.poifs.crypt.DataSpaceMapUtils$TransformInfoHeader $r2;
        int $i0;
        java.lang.String $r3;
        org.apache.poi.poifs.crypt.DataSpaceMapUtils$IRMDSTransformInfo r0;
        org.apache.poi.util.LittleEndianByteArrayOutputStream r1;

        r0 := @this: org.apache.poi.poifs.crypt.DataSpaceMapUtils$IRMDSTransformInfo;

        r1 := @parameter0: org.apache.poi.util.LittleEndianByteArrayOutputStream;

        $r2 = r0.<org.apache.poi.poifs.crypt.DataSpaceMapUtils$IRMDSTransformInfo: org.apache.poi.poifs.crypt.DataSpaceMapUtils$TransformInfoHeader transformInfoHeader>;

        virtualinvoke $r2.<org.apache.poi.poifs.crypt.DataSpaceMapUtils$TransformInfoHeader: void write(org.apache.poi.util.LittleEndianByteArrayOutputStream)>(r1);

        $i0 = r0.<org.apache.poi.poifs.crypt.DataSpaceMapUtils$IRMDSTransformInfo: int extensibilityHeader>;

        virtualinvoke r1.<org.apache.poi.util.LittleEndianByteArrayOutputStream: void writeInt(int)>($i0);

        $r3 = r0.<org.apache.poi.poifs.crypt.DataSpaceMapUtils$IRMDSTransformInfo: java.lang.String xrMLLicense>;

        staticinvoke <org.apache.poi.poifs.crypt.DataSpaceMapUtils: void writeUtf8LPP4(org.apache.poi.util.LittleEndianOutput,java.lang.String)>(r1, $r3);

        virtualinvoke r1.<org.apache.poi.util.LittleEndianByteArrayOutputStream: void writeInt(int)>(4);

        return;
    }
}
