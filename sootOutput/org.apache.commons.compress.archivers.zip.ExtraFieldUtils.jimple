public class org.apache.commons.compress.archivers.zip.ExtraFieldUtils extends java.lang.Object
{
    private static final int WORD;
    private static final java.util.Map implementations;

    public void <init>()
    {
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ExtraFieldUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void register(java.lang.Class)
    {
        java.lang.ClassCastException $r16;
        java.util.Map $r2;
        java.lang.InstantiationException $r10;
        java.lang.String $r9, $r15, $r21;
        java.lang.IllegalAccessException $r4;
        java.lang.RuntimeException $r5, $r11, $r17;
        org.apache.commons.compress.archivers.zip.ZipExtraField r22;
        org.apache.commons.compress.archivers.zip.ZipShort $r3;
        java.lang.Class r0;
        java.lang.Object $r1;
        java.lang.StringBuilder $r6, $r7, $r8, $r12, $r13, $r14, $r18, $r19, $r20;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

        r22 = (org.apache.commons.compress.archivers.zip.ZipExtraField) $r1;

        $r2 = <org.apache.commons.compress.archivers.zip.ExtraFieldUtils: java.util.Map implementations>;

        $r3 = interfaceinvoke r22.<org.apache.commons.compress.archivers.zip.ZipExtraField: org.apache.commons.compress.archivers.zip.ZipShort getHeaderId()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r0);

     label2:
        goto label6;

     label3:
        $r16 := @caughtexception;

        $r17 = new java.lang.RuntimeException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t implement ZipExtraField");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a concrete class");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label5:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'s no-arg constructor is not public");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label6:
        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
        catch java.lang.InstantiationException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label1 to label2 with label5;
    }

    public static org.apache.commons.compress.archivers.zip.ZipExtraField createExtraField(org.apache.commons.compress.archivers.zip.ZipShort) throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        org.apache.commons.compress.archivers.zip.ZipExtraField $r6;
        org.apache.commons.compress.archivers.zip.ZipShort r0;
        java.util.Map $r1;
        java.lang.Object $r2, $r5;
        java.lang.Class r3;
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField $r4;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipShort;

        $r1 = <org.apache.commons.compress.archivers.zip.ExtraFieldUtils: java.util.Map implementations>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.Class) $r2;

        if r3 == null goto label1;

        $r5 = virtualinvoke r3.<java.lang.Class: java.lang.Object newInstance()>();

        $r6 = (org.apache.commons.compress.archivers.zip.ZipExtraField) $r5;

        return $r6;

     label1:
        $r4 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;

        specialinvoke $r4.<org.apache.commons.compress.archivers.zip.UnrecognizedExtraField: void <init>()>();

        virtualinvoke $r4.<org.apache.commons.compress.archivers.zip.UnrecognizedExtraField: void setHeaderId(org.apache.commons.compress.archivers.zip.ZipShort)>(r0);

        return $r4;
    }

    public static org.apache.commons.compress.archivers.zip.ZipExtraField[] parse(byte[]) throws java.util.zip.ZipException
    {
        byte[] r0;
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField $r1;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] $r2;

        r0 := @parameter0: byte[];

        $r1 = <org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField: org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField THROW>;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.zip.ExtraFieldUtils: org.apache.commons.compress.archivers.zip.ZipExtraField[] parse(byte[],boolean,org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField)>(r0, 1, $r1);

        return $r2;
    }

    public static org.apache.commons.compress.archivers.zip.ZipExtraField[] parse(byte[], boolean) throws java.util.zip.ZipException
    {
        byte[] r0;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] $r2;
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField $r1;
        boolean z0;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        $r1 = <org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField: org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField THROW>;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.zip.ExtraFieldUtils: org.apache.commons.compress.archivers.zip.ZipExtraField[] parse(byte[],boolean,org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField)>(r0, z0, $r1);

        return $r2;
    }

    public static org.apache.commons.compress.archivers.zip.ZipExtraField[] parse(byte[], boolean, org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField) throws java.util.zip.ZipException
    {
        byte[] r1;
        java.lang.InstantiationException $r31;
        boolean z0;
        java.lang.IllegalAccessException $r26;
        java.util.zip.ZipException $r10, $r21, $r27, $r30, $r32, $r35;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] $r3, $r9;
        org.apache.commons.compress.archivers.zip.ZipExtraField $r6;
        org.apache.commons.compress.archivers.zip.ZipShort $r4, $r5;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r22, $r23, $r24;
        java.lang.Throwable $r29, $r34;
        java.lang.Object[] $r2;
        java.util.ArrayList $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20;
        java.lang.String $r20, $r25, $r28, $r33;
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData $r8;
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField r7;

        r1 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        r7 := @parameter2: org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i20 = 0;

     label01:
        $i0 = lengthof r1;

        $i1 = $i0 - 4;

        if i20 > $i1 goto label15;

        $r4 = new org.apache.commons.compress.archivers.zip.ZipShort;

        specialinvoke $r4.<org.apache.commons.compress.archivers.zip.ZipShort: void <init>(byte[],int)>(r1, i20);

        $r5 = new org.apache.commons.compress.archivers.zip.ZipShort;

        $i3 = i20 + 2;

        specialinvoke $r5.<org.apache.commons.compress.archivers.zip.ZipShort: void <init>(byte[],int)>(r1, $i3);

        $i4 = virtualinvoke $r5.<org.apache.commons.compress.archivers.zip.ZipShort: int getValue()>();

        $i5 = i20 + 4;

        $i7 = $i5 + $i4;

        $i6 = lengthof r1;

        if $i7 <= $i6 goto label08;

        $i11 = virtualinvoke r7.<org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField: int getKey()>();

        tableswitch($i11)
        {
            case 0: goto label02;
            case 1: goto label06;
            case 2: goto label03;
            default: goto label07;
        };

     label02:
        $r10 = new java.util.zip.ZipException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad extra field starting at ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Block length of ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes exceeds remaining");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data of ");

        $i16 = lengthof r1;

        $i17 = $i16 - i20;

        $i18 = $i17 - 4;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.util.zip.ZipException: void <init>(java.lang.String)>($r20);

        throw $r10;

     label03:
        $r8 = new org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;

        specialinvoke $r8.<org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData: void <init>()>();

        if z0 == 0 goto label04;

        $i14 = lengthof r1;

        $i15 = $i14 - i20;

        virtualinvoke $r8.<org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData: void parseFromLocalFileData(byte[],int,int)>(r1, i20, $i15);

        goto label05;

     label04:
        $i12 = lengthof r1;

        $i13 = $i12 - i20;

        virtualinvoke $r8.<org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData: void parseFromCentralDirectoryData(byte[],int,int)>(r1, i20, $i13);

     label05:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

     label06:
        goto label15;

     label07:
        $r21 = new java.util.zip.ZipException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown UnparseableExtraField key: ");

        $i19 = virtualinvoke r7.<org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField: int getKey()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.util.zip.ZipException: void <init>(java.lang.String)>($r25);

        throw $r21;

     label08:
        $r6 = staticinvoke <org.apache.commons.compress.archivers.zip.ExtraFieldUtils: org.apache.commons.compress.archivers.zip.ZipExtraField createExtraField(org.apache.commons.compress.archivers.zip.ZipShort)>($r4);

        if z0 == 0 goto label09;

        $i10 = i20 + 4;

        interfaceinvoke $r6.<org.apache.commons.compress.archivers.zip.ZipExtraField: void parseFromLocalFileData(byte[],int,int)>(r1, $i10, $i4);

        goto label10;

     label09:
        $i8 = i20 + 4;

        interfaceinvoke $r6.<org.apache.commons.compress.archivers.zip.ZipExtraField: void parseFromCentralDirectoryData(byte[],int,int)>(r1, $i8, $i4);

     label10:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

     label11:
        goto label14;

     label12:
        $r31 := @caughtexception;

        $r32 = new java.util.zip.ZipException;

        $r33 = virtualinvoke $r31.<java.lang.InstantiationException: java.lang.String getMessage()>();

        specialinvoke $r32.<java.util.zip.ZipException: void <init>(java.lang.String)>($r33);

        $r34 = virtualinvoke $r32.<java.util.zip.ZipException: java.lang.Throwable initCause(java.lang.Throwable)>($r31);

        $r35 = (java.util.zip.ZipException) $r34;

        throw $r35;

     label13:
        $r26 := @caughtexception;

        $r27 = new java.util.zip.ZipException;

        $r28 = virtualinvoke $r26.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        specialinvoke $r27.<java.util.zip.ZipException: void <init>(java.lang.String)>($r28);

        $r29 = virtualinvoke $r27.<java.util.zip.ZipException: java.lang.Throwable initCause(java.lang.Throwable)>($r26);

        $r30 = (java.util.zip.ZipException) $r29;

        throw $r30;

     label14:
        $i9 = $i4 + 4;

        i20 = i20 + $i9;

        goto label01;

     label15:
        $i2 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r9 = newarray (org.apache.commons.compress.archivers.zip.ZipExtraField)[$i2];

        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r3 = (org.apache.commons.compress.archivers.zip.ZipExtraField[]) $r2;

        return $r3;

        catch java.lang.InstantiationException from label08 to label11 with label12;
        catch java.lang.IllegalAccessException from label08 to label11 with label13;
    }

    public static byte[] mergeLocalFileDataData(org.apache.commons.compress.archivers.zip.ZipExtraField[])
    {
        byte[] $r2, $r5, $r8, $r10, r14;
        boolean z0, $z1, $z3, $z4;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] r0;
        org.apache.commons.compress.archivers.zip.ZipExtraField $r1, $r3, $r6, $r9, $r12, r13;
        org.apache.commons.compress.archivers.zip.ZipShort $r4, $r7, $r11;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i17;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipExtraField[];

        $i0 = lengthof r0;

        if $i0 <= 0 goto label01;

        $i11 = lengthof r0;

        $i12 = $i11 - 1;

        $r12 = r0[$i12];

        $z1 = $r12 instanceof org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;

        if $z1 == 0 goto label01;

        $z4 = 1;

        $z3 = 1;

        goto label02;

     label01:
        $z4 = 0;

        $z3 = 0;

     label02:
        z0 = $z3;

        if $z4 == 0 goto label03;

        $i9 = lengthof r0;

        $i13 = $i9 - 1;

        goto label04;

     label03:
        $i13 = lengthof r0;

     label04:
        i1 = $i13;

        i14 = 4 * $i13;

        $i10 = lengthof r0;

        i15 = 0;

     label05:
        if i15 >= $i10 goto label06;

        r13 = r0[i15];

        $r11 = interfaceinvoke r13.<org.apache.commons.compress.archivers.zip.ZipExtraField: org.apache.commons.compress.archivers.zip.ZipShort getLocalFileDataLength()>();

        $i8 = virtualinvoke $r11.<org.apache.commons.compress.archivers.zip.ZipShort: int getValue()>();

        i14 = i14 + $i8;

        i15 = i15 + 1;

        goto label05;

     label06:
        r14 = newarray (byte)[i14];

        i16 = 0;

        i17 = 0;

     label07:
        if i17 >= i1 goto label09;

        $r3 = r0[i17];

        $r4 = interfaceinvoke $r3.<org.apache.commons.compress.archivers.zip.ZipExtraField: org.apache.commons.compress.archivers.zip.ZipShort getHeaderId()>();

        $r5 = virtualinvoke $r4.<org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r14, i16, 2);

        $r6 = r0[i17];

        $r7 = interfaceinvoke $r6.<org.apache.commons.compress.archivers.zip.ZipExtraField: org.apache.commons.compress.archivers.zip.ZipShort getLocalFileDataLength()>();

        $r8 = virtualinvoke $r7.<org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes()>();

        $i5 = i16 + 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r14, $i5, 2);

        i16 = i16 + 4;

        $r9 = r0[i17];

        $r10 = interfaceinvoke $r9.<org.apache.commons.compress.archivers.zip.ZipExtraField: byte[] getLocalFileDataData()>();

        if $r10 == null goto label08;

        $i6 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r14, i16, $i6);

        $i7 = lengthof $r10;

        i16 = i16 + $i7;

     label08:
        i17 = i17 + 1;

        goto label07;

     label09:
        if z0 == 0 goto label10;

        $i2 = lengthof r0;

        $i3 = $i2 - 1;

        $r1 = r0[$i3];

        $r2 = interfaceinvoke $r1.<org.apache.commons.compress.archivers.zip.ZipExtraField: byte[] getLocalFileDataData()>();

        if $r2 == null goto label10;

        $i4 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r14, i16, $i4);

     label10:
        return r14;
    }

    public static byte[] mergeCentralDirectoryData(org.apache.commons.compress.archivers.zip.ZipExtraField[])
    {
        byte[] $r2, $r5, $r8, $r10, r14;
        boolean z0, $z1, $z3, $z4;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] r0;
        org.apache.commons.compress.archivers.zip.ZipExtraField $r1, $r3, $r6, $r9, $r12, r13;
        org.apache.commons.compress.archivers.zip.ZipShort $r4, $r7, $r11;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i17;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipExtraField[];

        $i0 = lengthof r0;

        if $i0 <= 0 goto label01;

        $i11 = lengthof r0;

        $i12 = $i11 - 1;

        $r12 = r0[$i12];

        $z1 = $r12 instanceof org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;

        if $z1 == 0 goto label01;

        $z4 = 1;

        $z3 = 1;

        goto label02;

     label01:
        $z4 = 0;

        $z3 = 0;

     label02:
        z0 = $z4;

        if $z3 == 0 goto label03;

        $i9 = lengthof r0;

        $i13 = $i9 - 1;

        goto label04;

     label03:
        $i13 = lengthof r0;

     label04:
        i1 = $i13;

        i14 = 4 * $i13;

        $i10 = lengthof r0;

        i15 = 0;

     label05:
        if i15 >= $i10 goto label06;

        r13 = r0[i15];

        $r11 = interfaceinvoke r13.<org.apache.commons.compress.archivers.zip.ZipExtraField: org.apache.commons.compress.archivers.zip.ZipShort getCentralDirectoryLength()>();

        $i8 = virtualinvoke $r11.<org.apache.commons.compress.archivers.zip.ZipShort: int getValue()>();

        i14 = i14 + $i8;

        i15 = i15 + 1;

        goto label05;

     label06:
        r14 = newarray (byte)[i14];

        i16 = 0;

        i17 = 0;

     label07:
        if i17 >= i1 goto label09;

        $r3 = r0[i17];

        $r4 = interfaceinvoke $r3.<org.apache.commons.compress.archivers.zip.ZipExtraField: org.apache.commons.compress.archivers.zip.ZipShort getHeaderId()>();

        $r5 = virtualinvoke $r4.<org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r14, i16, 2);

        $r6 = r0[i17];

        $r7 = interfaceinvoke $r6.<org.apache.commons.compress.archivers.zip.ZipExtraField: org.apache.commons.compress.archivers.zip.ZipShort getCentralDirectoryLength()>();

        $r8 = virtualinvoke $r7.<org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes()>();

        $i5 = i16 + 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r14, $i5, 2);

        i16 = i16 + 4;

        $r9 = r0[i17];

        $r10 = interfaceinvoke $r9.<org.apache.commons.compress.archivers.zip.ZipExtraField: byte[] getCentralDirectoryData()>();

        if $r10 == null goto label08;

        $i6 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r14, i16, $i6);

        $i7 = lengthof $r10;

        i16 = i16 + $i7;

     label08:
        i17 = i17 + 1;

        goto label07;

     label09:
        if z0 == 0 goto label10;

        $i2 = lengthof r0;

        $i3 = $i2 - 1;

        $r1 = r0[$i3];

        $r2 = interfaceinvoke $r1.<org.apache.commons.compress.archivers.zip.ZipExtraField: byte[] getCentralDirectoryData()>();

        if $r2 == null goto label10;

        $i4 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r14, i16, $i4);

     label10:
        return r14;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        <org.apache.commons.compress.archivers.zip.ExtraFieldUtils: int WORD> = 4;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.apache.commons.compress.archivers.zip.ExtraFieldUtils: java.util.Map implementations> = $r0;

        staticinvoke <org.apache.commons.compress.archivers.zip.ExtraFieldUtils: void register(java.lang.Class)>(class "Lorg/apache/commons/compress/archivers/zip/AsiExtraField;");

        staticinvoke <org.apache.commons.compress.archivers.zip.ExtraFieldUtils: void register(java.lang.Class)>(class "Lorg/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp;");

        staticinvoke <org.apache.commons.compress.archivers.zip.ExtraFieldUtils: void register(java.lang.Class)>(class "Lorg/apache/commons/compress/archivers/zip/X7875_NewUnix;");

        staticinvoke <org.apache.commons.compress.archivers.zip.ExtraFieldUtils: void register(java.lang.Class)>(class "Lorg/apache/commons/compress/archivers/zip/JarMarker;");

        staticinvoke <org.apache.commons.compress.archivers.zip.ExtraFieldUtils: void register(java.lang.Class)>(class "Lorg/apache/commons/compress/archivers/zip/UnicodePathExtraField;");

        staticinvoke <org.apache.commons.compress.archivers.zip.ExtraFieldUtils: void register(java.lang.Class)>(class "Lorg/apache/commons/compress/archivers/zip/UnicodeCommentExtraField;");

        staticinvoke <org.apache.commons.compress.archivers.zip.ExtraFieldUtils: void register(java.lang.Class)>(class "Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;");

        return;
    }
}
