public class org.bouncycastle.crypto.engines.XTEAEngine extends java.lang.Object implements org.bouncycastle.crypto.BlockCipher
{
    private static final int rounds;
    private static final int block_size;
    private static final int delta;
    private int[] _S;
    private int[] _sum0;
    private int[] _sum1;
    private boolean _initialised;
    private boolean _forEncryption;

    public void <init>()
    {
        int[] $r1, $r2, $r3;
        org.bouncycastle.crypto.engines.XTEAEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.XTEAEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[4];

        r0.<org.bouncycastle.crypto.engines.XTEAEngine: int[] _S> = $r1;

        $r2 = newarray (int)[32];

        r0.<org.bouncycastle.crypto.engines.XTEAEngine: int[] _sum0> = $r2;

        $r3 = newarray (int)[32];

        r0.<org.bouncycastle.crypto.engines.XTEAEngine: int[] _sum1> = $r3;

        r0.<org.bouncycastle.crypto.engines.XTEAEngine: boolean _initialised> = 0;

        return;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.engines.XTEAEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.XTEAEngine;

        return "XTEA";
    }

    public int getBlockSize()
    {
        org.bouncycastle.crypto.engines.XTEAEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.XTEAEngine;

        return 8;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        byte[] $r3;
        org.bouncycastle.crypto.engines.XTEAEngine r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r9;
        java.lang.Class $r7;
        java.lang.String $r8, $r10;
        org.bouncycastle.crypto.params.KeyParameter r2;
        org.bouncycastle.crypto.CipherParameters r0;
        boolean $z0, z1;

        r1 := @this: org.bouncycastle.crypto.engines.XTEAEngine;

        z1 := @parameter0: boolean;

        r0 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.KeyParameter;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to TEA init - ");

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        r1.<org.bouncycastle.crypto.engines.XTEAEngine: boolean _forEncryption> = z1;

        r1.<org.bouncycastle.crypto.engines.XTEAEngine: boolean _initialised> = 1;

        r2 = (org.bouncycastle.crypto.params.KeyParameter) r0;

        $r3 = virtualinvoke r2.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        specialinvoke r1.<org.bouncycastle.crypto.engines.XTEAEngine: void setKey(byte[])>($r3);

        return;
    }

    public int processBlock(byte[], int, byte[], int)
    {
        byte[] r1, r2;
        java.lang.IllegalStateException $r5;
        org.bouncycastle.crypto.engines.XTEAEngine r0;
        org.bouncycastle.crypto.DataLengthException $r3, $r4;
        int i0, $i1, $i2, i3, $i4, $i5, $i6;
        java.lang.String $r7, $r10;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6, $r8, $r9;

        r0 := @this: org.bouncycastle.crypto.engines.XTEAEngine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r2 := @parameter2: byte[];

        i3 := @parameter3: int;

        $z0 = r0.<org.bouncycastle.crypto.engines.XTEAEngine: boolean _initialised>;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r0.<org.bouncycastle.crypto.engines.XTEAEngine: java.lang.String getAlgorithmName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not initialised");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $i2 = i0 + 8;

        $i1 = lengthof r1;

        if $i2 <= $i1 goto label2;

        $r4 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r4;

     label2:
        $i5 = i3 + 8;

        $i4 = lengthof r2;

        if $i5 <= $i4 goto label3;

        $r3 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r3;

     label3:
        $z1 = r0.<org.bouncycastle.crypto.engines.XTEAEngine: boolean _forEncryption>;

        if $z1 == 0 goto label4;

        $i6 = specialinvoke r0.<org.bouncycastle.crypto.engines.XTEAEngine: int encryptBlock(byte[],int,byte[],int)>(r1, i0, r2, i3);

        goto label5;

     label4:
        $i6 = specialinvoke r0.<org.bouncycastle.crypto.engines.XTEAEngine: int decryptBlock(byte[],int,byte[],int)>(r1, i0, r2, i3);

     label5:
        return $i6;
    }

    public void reset()
    {
        org.bouncycastle.crypto.engines.XTEAEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.XTEAEngine;

        return;
    }

    private void setKey(byte[])
    {
        byte[] r5;
        org.bouncycastle.crypto.engines.XTEAEngine r0;
        int[] $r1, $r2, $r3, $r4, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11;

        r0 := @this: org.bouncycastle.crypto.engines.XTEAEngine;

        r5 := @parameter0: byte[];

        i8 = 0;

        i9 = 0;

     label1:
        if i9 >= 4 goto label2;

        $r6 = r0.<org.bouncycastle.crypto.engines.XTEAEngine: int[] _S>;

        $i7 = specialinvoke r0.<org.bouncycastle.crypto.engines.XTEAEngine: int bytesToInt(byte[],int)>(r5, i8);

        $r6[i9] = $i7;

        i9 = i9 + 1;

        i8 = i8 + 4;

        goto label1;

     label2:
        i10 = 0;

        i11 = 0;

     label3:
        if i11 >= 32 goto label4;

        $r2 = r0.<org.bouncycastle.crypto.engines.XTEAEngine: int[] _sum0>;

        $r1 = r0.<org.bouncycastle.crypto.engines.XTEAEngine: int[] _S>;

        $i0 = i10 & 3;

        $i1 = $r1[$i0];

        $i2 = i10 + $i1;

        $r2[i11] = $i2;

        i10 = i10 - 1640531527;

        $r4 = r0.<org.bouncycastle.crypto.engines.XTEAEngine: int[] _sum1>;

        $r3 = r0.<org.bouncycastle.crypto.engines.XTEAEngine: int[] _S>;

        $i3 = i10 >>> 11;

        $i4 = $i3 & 3;

        $i5 = $r3[$i4];

        $i6 = i10 + $i5;

        $r4[i11] = $i6;

        i11 = i11 + 1;

        goto label3;

     label4:
        return;
    }

    private int encryptBlock(byte[], int, byte[], int)
    {
        byte[] r1, r2;
        org.bouncycastle.crypto.engines.XTEAEngine r0;
        int[] $r3, $r4;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18;

        r0 := @this: org.bouncycastle.crypto.engines.XTEAEngine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r2 := @parameter2: byte[];

        i2 := @parameter3: int;

        i16 = specialinvoke r0.<org.bouncycastle.crypto.engines.XTEAEngine: int bytesToInt(byte[],int)>(r1, i0);

        $i1 = i0 + 4;

        i17 = specialinvoke r0.<org.bouncycastle.crypto.engines.XTEAEngine: int bytesToInt(byte[],int)>(r1, $i1);

        i18 = 0;

     label1:
        if i18 >= 32 goto label2;

        $i5 = i17 << 4;

        $i4 = i17 >>> 5;

        $i6 = $i5 ^ $i4;

        $i8 = $i6 + i17;

        $r3 = r0.<org.bouncycastle.crypto.engines.XTEAEngine: int[] _sum0>;

        $i7 = $r3[i18];

        $i9 = $i8 ^ $i7;

        i16 = i16 + $i9;

        $i11 = i16 << 4;

        $i10 = i16 >>> 5;

        $i12 = $i11 ^ $i10;

        $i14 = $i12 + i16;

        $r4 = r0.<org.bouncycastle.crypto.engines.XTEAEngine: int[] _sum1>;

        $i13 = $r4[i18];

        $i15 = $i14 ^ $i13;

        i17 = i17 + $i15;

        i18 = i18 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.bouncycastle.crypto.engines.XTEAEngine: void unpackInt(int,byte[],int)>(i16, r2, i2);

        $i3 = i2 + 4;

        specialinvoke r0.<org.bouncycastle.crypto.engines.XTEAEngine: void unpackInt(int,byte[],int)>(i17, r2, $i3);

        return 8;
    }

    private int decryptBlock(byte[], int, byte[], int)
    {
        byte[] r1, r2;
        org.bouncycastle.crypto.engines.XTEAEngine r0;
        int[] $r3, $r4;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, $i20;

        r0 := @this: org.bouncycastle.crypto.engines.XTEAEngine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r2 := @parameter2: byte[];

        i2 := @parameter3: int;

        i16 = specialinvoke r0.<org.bouncycastle.crypto.engines.XTEAEngine: int bytesToInt(byte[],int)>(r1, i0);

        $i1 = i0 + 4;

        i17 = specialinvoke r0.<org.bouncycastle.crypto.engines.XTEAEngine: int bytesToInt(byte[],int)>(r1, $i1);

        i18 = 31;

     label1:
        if i18 < 0 goto label2;

        $i5 = i16 << 4;

        $i4 = i16 >>> 5;

        $i6 = $i5 ^ $i4;

        $i8 = $i6 + i16;

        $r3 = r0.<org.bouncycastle.crypto.engines.XTEAEngine: int[] _sum1>;

        $i7 = $r3[i18];

        $i9 = $i8 ^ $i7;

        i17 = i17 - $i9;

        $i11 = i17 << 4;

        $i10 = i17 >>> 5;

        $i12 = $i11 ^ $i10;

        $i14 = $i12 + i17;

        $r4 = r0.<org.bouncycastle.crypto.engines.XTEAEngine: int[] _sum0>;

        $i13 = $r4[i18];

        $i15 = $i14 ^ $i13;

        i16 = i16 - $i15;

        $i20 = (int) -1;

        i18 = i18 + $i20;

        goto label1;

     label2:
        specialinvoke r0.<org.bouncycastle.crypto.engines.XTEAEngine: void unpackInt(int,byte[],int)>(i16, r2, i2);

        $i3 = i2 + 4;

        specialinvoke r0.<org.bouncycastle.crypto.engines.XTEAEngine: void unpackInt(int,byte[],int)>(i17, r2, $i3);

        return 8;
    }

    private int bytesToInt(byte[], int)
    {
        byte[] r0;
        org.bouncycastle.crypto.engines.XTEAEngine r1;
        short $s2, $s6, $s10, $s18, $s20, $s22;
        byte $b0, $b1, $b5, $b9;
        int $i3, $i4, $i7, $i8, $i11, $i12, i13, i14, i15, i16, $i17, $i19, $i21, $i23;

        r1 := @this: org.bouncycastle.crypto.engines.XTEAEngine;

        r0 := @parameter0: byte[];

        i13 := @parameter1: int;

        i14 = i13 + 1;

        $b0 = r0[i13];

        $i17 = (int) $b0;

        $i4 = $i17 << 24;

        i15 = i14 + 1;

        $b1 = r0[i14];

        $s18 = (short) $b1;

        $s2 = $s18 & 255;

        $i19 = (int) $s2;

        $i3 = $i19 << 16;

        $i8 = $i4 | $i3;

        i16 = i15 + 1;

        $b5 = r0[i15];

        $s20 = (short) $b5;

        $s6 = $s20 & 255;

        $i21 = (int) $s6;

        $i7 = $i21 << 8;

        $i11 = $i8 | $i7;

        $b9 = r0[i16];

        $s22 = (short) $b9;

        $s10 = $s22 & 255;

        $i23 = (int) $s10;

        $i12 = $i11 | $i23;

        return $i12;
    }

    private void unpackInt(int, byte[], int)
    {
        byte[] r0;
        org.bouncycastle.crypto.engines.XTEAEngine r1;
        byte $b2, $b4, $b6, $b7;
        int i0, $i1, $i3, $i5, i8, i9, i10, i11;

        r1 := @this: org.bouncycastle.crypto.engines.XTEAEngine;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        i8 := @parameter2: int;

        i9 = i8 + 1;

        $i1 = i0 >>> 24;

        $b2 = (byte) $i1;

        r0[i8] = $b2;

        i10 = i9 + 1;

        $i3 = i0 >>> 16;

        $b4 = (byte) $i3;

        r0[i9] = $b4;

        i11 = i10 + 1;

        $i5 = i0 >>> 8;

        $b6 = (byte) $i5;

        r0[i10] = $b6;

        $b7 = (byte) i0;

        r0[i11] = $b7;

        return;
    }

    public static void <clinit>()
    {
        <org.bouncycastle.crypto.engines.XTEAEngine: int delta> = -1640531527;

        <org.bouncycastle.crypto.engines.XTEAEngine: int block_size> = 8;

        <org.bouncycastle.crypto.engines.XTEAEngine: int rounds> = 32;

        return;
    }
}
