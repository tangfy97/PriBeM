public final class org.apache.lucene.util.BitUtil extends java.lang.Object
{

    private void <init>()
    {
        org.apache.lucene.util.BitUtil r0;

        r0 := @this: org.apache.lucene.util.BitUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long pop_array(long[], int, int)
    {
        long $l3, $l5, l6;
        long[] r0;
        int i0, i1, i2, $i4, i7;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l6 = 0L;

        i7 = i0;

        i2 = i0 + i1;

     label1:
        if i7 >= i2 goto label2;

        $l3 = r0[i7];

        $i4 = staticinvoke <java.lang.Long: int bitCount(long)>($l3);

        $l5 = (long) $i4;

        l6 = l6 + $l5;

        i7 = i7 + 1;

        goto label1;

     label2:
        return l6;
    }

    public static long pop_intersect(long[], long[], int, int)
    {
        long $l3, $l4, $l5, $l7, l8;
        long[] r0, r1;
        int i0, i1, i2, $i6, i9;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        l8 = 0L;

        i9 = i0;

        i2 = i0 + i1;

     label1:
        if i9 >= i2 goto label2;

        $l4 = r0[i9];

        $l3 = r1[i9];

        $l5 = $l4 & $l3;

        $i6 = staticinvoke <java.lang.Long: int bitCount(long)>($l5);

        $l7 = (long) $i6;

        l8 = l8 + $l7;

        i9 = i9 + 1;

        goto label1;

     label2:
        return l8;
    }

    public static long pop_union(long[], long[], int, int)
    {
        long $l3, $l4, $l5, $l7, l8;
        long[] r0, r1;
        int i0, i1, i2, $i6, i9;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        l8 = 0L;

        i9 = i0;

        i2 = i0 + i1;

     label1:
        if i9 >= i2 goto label2;

        $l4 = r0[i9];

        $l3 = r1[i9];

        $l5 = $l4 | $l3;

        $i6 = staticinvoke <java.lang.Long: int bitCount(long)>($l5);

        $l7 = (long) $i6;

        l8 = l8 + $l7;

        i9 = i9 + 1;

        goto label1;

     label2:
        return l8;
    }

    public static long pop_andnot(long[], long[], int, int)
    {
        long $l3, $l4, $l5, $l6, $l8, l9;
        long[] r0, r1;
        int i0, i1, i2, $i7, i10;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        l9 = 0L;

        i10 = i0;

        i2 = i0 + i1;

     label1:
        if i10 >= i2 goto label2;

        $l5 = r0[i10];

        $l3 = r1[i10];

        $l4 = $l3 ^ -1L;

        $l6 = $l5 & $l4;

        $i7 = staticinvoke <java.lang.Long: int bitCount(long)>($l6);

        $l8 = (long) $i7;

        l9 = l9 + $l8;

        i10 = i10 + 1;

        goto label1;

     label2:
        return l9;
    }

    public static long pop_xor(long[], long[], int, int)
    {
        long $l3, $l4, $l5, $l7, l8;
        long[] r0, r1;
        int i0, i1, i2, $i6, i9;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        l8 = 0L;

        i9 = i0;

        i2 = i0 + i1;

     label1:
        if i9 >= i2 goto label2;

        $l4 = r0[i9];

        $l3 = r1[i9];

        $l5 = $l4 ^ $l3;

        $i6 = staticinvoke <java.lang.Long: int bitCount(long)>($l5);

        $l7 = (long) $i6;

        l8 = l8 + $l7;

        i9 = i9 + 1;

        goto label1;

     label2:
        return l8;
    }

    public static int nextHighestPowerOfTwo(int)
    {
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11, i12, $i14;

        i5 := @parameter0: int;

        $i14 = (int) -1;

        i6 = i5 + $i14;

        $i0 = i6 >> 1;

        i7 = i6 | $i0;

        $i1 = i7 >> 2;

        i8 = i7 | $i1;

        $i2 = i8 >> 4;

        i9 = i8 | $i2;

        $i3 = i9 >> 8;

        i10 = i9 | $i3;

        $i4 = i10 >> 16;

        i11 = i10 | $i4;

        i12 = i11 + 1;

        return i12;
    }

    public static long nextHighestPowerOfTwo(long)
    {
        long $l0, $l1, $l2, $l3, $l4, $l5, l6, l7, l8, l9, l10, l11, l12, l13, l14;

        l6 := @parameter0: long;

        l7 = l6 - 1L;

        $l0 = l7 >> 1;

        l8 = l7 | $l0;

        $l1 = l8 >> 2;

        l9 = l8 | $l1;

        $l2 = l9 >> 4;

        l10 = l9 | $l2;

        $l3 = l10 >> 8;

        l11 = l10 | $l3;

        $l4 = l11 >> 16;

        l12 = l11 | $l4;

        $l5 = l12 >> 32;

        l13 = l12 | $l5;

        l14 = l13 + 1L;

        return l14;
    }
}
