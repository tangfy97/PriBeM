class com.sun.lwuit.layouts.GroupLayout$BaselineGroup extends com.sun.lwuit.layouts.GroupLayout$ParallelGroup
{
    private boolean allSpringsHaveBaseline;
    private int prefAscent;
    private int prefDescent;
    private boolean baselineAnchorSet;
    private boolean baselineAnchoredToTop;
    private boolean calcedBaseline;
    final com.sun.lwuit.layouts.GroupLayout this$0;

    void <init>(com.sun.lwuit.layouts.GroupLayout, boolean)
    {
        com.sun.lwuit.layouts.GroupLayout r1;
        com.sun.lwuit.layouts.GroupLayout$BaselineGroup r0;
        int $i1, $i3;
        boolean z0;

        r0 := @this: com.sun.lwuit.layouts.GroupLayout$BaselineGroup;

        r1 := @parameter0: com.sun.lwuit.layouts.GroupLayout;

        z0 := @parameter1: boolean;

        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: com.sun.lwuit.layouts.GroupLayout this$0> = r1;

        specialinvoke r0.<com.sun.lwuit.layouts.GroupLayout$ParallelGroup: void <init>(com.sun.lwuit.layouts.GroupLayout,int,boolean)>(r1, 1, z0);

        $i1 = (int) -1;

        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefDescent> = $i1;

        $i3 = (int) -1;

        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefAscent> = $i3;

        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean calcedBaseline> = 0;

        return;
    }

    void <init>(com.sun.lwuit.layouts.GroupLayout, boolean, boolean)
    {
        com.sun.lwuit.layouts.GroupLayout r1;
        com.sun.lwuit.layouts.GroupLayout$BaselineGroup r0;
        boolean z0, z1;

        r0 := @this: com.sun.lwuit.layouts.GroupLayout$BaselineGroup;

        r1 := @parameter0: com.sun.lwuit.layouts.GroupLayout;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: void <init>(com.sun.lwuit.layouts.GroupLayout,boolean)>(r1, z0);

        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean baselineAnchoredToTop> = z1;

        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean baselineAnchorSet> = 1;

        return;
    }

    void unset()
    {
        int $i1, $i3;
        com.sun.lwuit.layouts.GroupLayout$BaselineGroup r0;

        r0 := @this: com.sun.lwuit.layouts.GroupLayout$BaselineGroup;

        specialinvoke r0.<com.sun.lwuit.layouts.GroupLayout$ParallelGroup: void unset()>();

        $i1 = (int) -1;

        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefDescent> = $i1;

        $i3 = (int) -1;

        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefAscent> = $i3;

        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean calcedBaseline> = 0;

        return;
    }

    void setValidSize(int, int, int)
    {
        com.sun.lwuit.layouts.GroupLayout$BaselineGroup r0;
        int i0, $i1, i2, i3, $i5;

        r0 := @this: com.sun.lwuit.layouts.GroupLayout$BaselineGroup;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        specialinvoke r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: void checkAxis(int)>(i0);

        $i1 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefAscent>;

        $i5 = (int) -1;

        if $i1 != $i5 goto label1;

        specialinvoke r0.<com.sun.lwuit.layouts.GroupLayout$ParallelGroup: void setValidSize(int,int,int)>(i0, i2, i3);

        goto label2;

     label1:
        specialinvoke r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: void baselineLayout(int,int)>(i2, i3);

     label2:
        return;
    }

    int calculateSize(int, int)
    {
        com.sun.lwuit.layouts.GroupLayout$BaselineGroup r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0, $z1;

        r0 := @this: com.sun.lwuit.layouts.GroupLayout$BaselineGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: void checkAxis(int)>(i0);

        $z0 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean calcedBaseline>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: void calculateBaselineAndResizeBehavior()>();

     label1:
        if i1 != 0 goto label2;

        $i11 = specialinvoke r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int calculateMinSize()>();

        return $i11;

     label2:
        if i1 != 2 goto label3;

        $i10 = specialinvoke r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int calculateMaxSize()>();

        return $i10;

     label3:
        $z1 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean allSpringsHaveBaseline>;

        if $z1 == 0 goto label4;

        $i8 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefAscent>;

        $i7 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefDescent>;

        $i9 = $i8 + $i7;

        return $i9;

     label4:
        $i3 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefAscent>;

        $i2 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefDescent>;

        $i4 = $i3 + $i2;

        $i5 = specialinvoke r0.<com.sun.lwuit.layouts.GroupLayout$ParallelGroup: int calculateSize(int,int)>(i0, i1);

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i5);

        return $i6;
    }

    private void calculateBaselineAndResizeBehavior()
    {
        java.util.Vector $r1, $r3;
        com.sun.lwuit.layouts.GroupLayout$BaselineGroup r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16;
        boolean $z0, $z1, $z2;
        com.sun.lwuit.layouts.GroupLayout$Spring $r2;

        r0 := @this: com.sun.lwuit.layouts.GroupLayout$BaselineGroup;

        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefAscent> = 0;

        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefDescent> = 0;

        i5 = 0;

        i6 = 0;

        $r1 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: java.util.Vector springs>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        i7 = $i0 - 1;

     label01:
        if i7 < 0 goto label06;

        $r2 = virtualinvoke r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: com.sun.lwuit.layouts.GroupLayout$Spring getSpring(int)>(i7);

        $i1 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getAlignment()>();

        if $i1 == 0 goto label02;

        $i4 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getAlignment()>();

        if $i4 != 3 goto label05;

     label02:
        $i2 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getBaseline()>();

        if $i2 < 0 goto label05;

        $z1 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: boolean isResizable(int)>(2);

        if $z1 == 0 goto label04;

        $i3 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getBaselineResizeBehavior()>();

        if i6 != 0 goto label03;

        i6 = $i3;

        goto label04;

     label03:
        if $i3 == i6 goto label04;

        i6 = 1;

     label04:
        $i8 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefAscent>;

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>($i8, $i2);

        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefAscent> = $i9;

        $i10 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefDescent>;

        $i11 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getPreferredSize(int)>(2);

        $i12 = $i11 - $i2;

        $i13 = staticinvoke <java.lang.Math: int max(int,int)>($i10, $i12);

        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefDescent> = $i13;

        i5 = i5 + 1;

     label05:
        $i16 = (int) -1;

        i7 = i7 + $i16;

        goto label01;

     label06:
        $z0 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean baselineAnchorSet>;

        if $z0 != 0 goto label08;

        if i6 != 2 goto label07;

        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean baselineAnchoredToTop> = 0;

        goto label08;

     label07:
        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean baselineAnchoredToTop> = 1;

     label08:
        $r3 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: java.util.Vector springs>;

        $i14 = virtualinvoke $r3.<java.util.Vector: int size()>();

        if i5 != $i14 goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean allSpringsHaveBaseline> = $z2;

        r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean calcedBaseline> = 1;

        return;
    }

    private int calculateMaxSize()
    {
        java.util.Vector $r1;
        com.sun.lwuit.layouts.GroupLayout$BaselineGroup r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, $i17;
        boolean $z0, $z1;
        com.sun.lwuit.layouts.GroupLayout$Spring $r2;

        r0 := @this: com.sun.lwuit.layouts.GroupLayout$BaselineGroup;

        i12 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefAscent>;

        i13 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefDescent>;

        i14 = 0;

        $r1 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: java.util.Vector springs>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        i15 = $i0 - 1;

     label1:
        if i15 < 0 goto label8;

        $r2 = virtualinvoke r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: com.sun.lwuit.layouts.GroupLayout$Spring getSpring(int)>(i15);

        $i3 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getMaximumSize(int)>(2);

        $i4 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getAlignment()>();

        if $i4 == 0 goto label2;

        $i11 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getAlignment()>();

        if $i11 != 3 goto label6;

     label2:
        $i5 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getBaseline()>();

        if $i5 < 0 goto label6;

        $i6 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getPreferredSize(int)>(2);

        if $i6 == $i3 goto label5;

        $i7 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getBaselineResizeBehavior()>();

        lookupswitch($i7)
        {
            case 1: goto label3;
            case 2: goto label4;
            default: goto label5;
        };

     label3:
        $z1 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean baselineAnchoredToTop>;

        if $z1 == 0 goto label5;

        $i10 = $i3 - $i5;

        i13 = staticinvoke <java.lang.Math: int max(int,int)>(i13, $i10);

        goto label5;

     label4:
        $z0 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean baselineAnchoredToTop>;

        if $z0 != 0 goto label5;

        $i8 = $i3 - $i6;

        $i9 = $i8 + $i5;

        i12 = staticinvoke <java.lang.Math: int max(int,int)>(i12, $i9);

        goto label5;

     label5:
        goto label7;

     label6:
        i14 = staticinvoke <java.lang.Math: int max(int,int)>(i14, $i3);

     label7:
        $i17 = (int) -1;

        i15 = i15 + $i17;

        goto label1;

     label8:
        $i1 = i12 + i13;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(i14, $i1);

        return $i2;
    }

    private int calculateMinSize()
    {
        java.util.Vector $r1;
        com.sun.lwuit.layouts.GroupLayout$BaselineGroup r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i17, $i19;
        boolean $z0, $z1, $z2;
        com.sun.lwuit.layouts.GroupLayout$Spring $r2;

        r0 := @this: com.sun.lwuit.layouts.GroupLayout$BaselineGroup;

        i14 = 0;

        i15 = 0;

        i16 = 0;

        $z0 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean baselineAnchoredToTop>;

        if $z0 == 0 goto label01;

        i14 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefAscent>;

        goto label02;

     label01:
        i15 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefDescent>;

     label02:
        $r1 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: java.util.Vector springs>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        i17 = $i0 - 1;

     label03:
        if i17 < 0 goto label13;

        $r2 = virtualinvoke r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: com.sun.lwuit.layouts.GroupLayout$Spring getSpring(int)>(i17);

        $i3 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getMinimumSize(int)>(2);

        $i4 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getAlignment()>();

        if $i4 == 0 goto label04;

        $i13 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getAlignment()>();

        if $i13 != 3 goto label11;

     label04:
        $i5 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getBaseline()>();

        if $i5 < 0 goto label11;

        $i6 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getPreferredSize(int)>(2);

        $i7 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getBaselineResizeBehavior()>();

        lookupswitch($i7)
        {
            case 1: goto label05;
            case 2: goto label07;
            default: goto label09;
        };

     label05:
        $z2 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean baselineAnchoredToTop>;

        if $z2 == 0 goto label06;

        $i11 = $i3 - $i5;

        i15 = staticinvoke <java.lang.Math: int max(int,int)>($i11, i15);

        goto label10;

     label06:
        i14 = staticinvoke <java.lang.Math: int max(int,int)>($i5, i14);

        goto label10;

     label07:
        $z1 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean baselineAnchoredToTop>;

        if $z1 != 0 goto label08;

        $i9 = $i6 - $i3;

        $i10 = $i5 - $i9;

        i14 = staticinvoke <java.lang.Math: int max(int,int)>($i10, i14);

        goto label10;

     label08:
        $i8 = $i6 - $i5;

        i15 = staticinvoke <java.lang.Math: int max(int,int)>($i8, i15);

        goto label10;

     label09:
        i14 = staticinvoke <java.lang.Math: int max(int,int)>($i5, i14);

        $i12 = $i6 - $i5;

        i15 = staticinvoke <java.lang.Math: int max(int,int)>($i12, i15);

     label10:
        goto label12;

     label11:
        i16 = staticinvoke <java.lang.Math: int max(int,int)>(i16, $i3);

     label12:
        $i19 = (int) -1;

        i17 = i17 + $i19;

        goto label03;

     label13:
        $i1 = i14 + i15;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(i16, $i1);

        return $i2;
    }

    private void baselineLayout(int, int)
    {
        java.util.Vector $r1;
        com.sun.lwuit.layouts.GroupLayout$BaselineGroup r0;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23, i24, $i26;
        boolean $z0;
        com.sun.lwuit.layouts.GroupLayout$Spring $r2;

        r0 := @this: com.sun.lwuit.layouts.GroupLayout$BaselineGroup;

        i5 := @parameter0: int;

        i0 := @parameter1: int;

        $z0 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean baselineAnchoredToTop>;

        if $z0 == 0 goto label01;

        i20 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefAscent>;

        i21 = i0 - i20;

        goto label02;

     label01:
        $i1 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefDescent>;

        i20 = i0 - $i1;

        i21 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefDescent>;

     label02:
        $r1 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: java.util.Vector springs>;

        $i2 = virtualinvoke $r1.<java.util.Vector: int size()>();

        i22 = $i2 - 1;

     label03:
        if i22 < 0 goto label13;

        $r2 = virtualinvoke r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: com.sun.lwuit.layouts.GroupLayout$Spring getSpring(int)>(i22);

        $i3 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getAlignment()>();

        if $i3 == 0 goto label04;

        if $i3 != 3 goto label11;

     label04:
        $i4 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getBaseline()>();

        if $i4 < 0 goto label09;

        $i6 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getMaximumSize(int)>(2);

        $i7 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getPreferredSize(int)>(2);

        i23 = $i7;

        $i8 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getBaselineResizeBehavior()>();

        lookupswitch($i8)
        {
            case 1: goto label05;
            case 2: goto label06;
            default: goto label07;
        };

     label05:
        $i16 = i5 + i20;

        i24 = $i16 - $i4;

        $i17 = $i6 - $i4;

        $i18 = staticinvoke <java.lang.Math: int min(int,int)>(i21, $i17);

        i23 = $i18 + $i4;

        goto label08;

     label06:
        $i9 = $i6 - $i7;

        $i10 = $i9 + $i4;

        $i11 = staticinvoke <java.lang.Math: int min(int,int)>(i20, $i10);

        $i12 = $i7 - $i4;

        i23 = $i11 + $i12;

        $i14 = i5 + i20;

        $i13 = $i7 - $i4;

        $i15 = $i14 + $i13;

        i24 = $i15 - i23;

        goto label08;

     label07:
        $i19 = i5 + i20;

        i24 = $i19 - $i4;

     label08:
        virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: void setSize(int,int,int)>(2, i24, i23);

        goto label10;

     label09:
        virtualinvoke r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: void setChildSize(com.sun.lwuit.layouts.GroupLayout$Spring,int,int,int)>($r2, 2, i5, i0);

     label10:
        goto label12;

     label11:
        virtualinvoke r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: void setChildSize(com.sun.lwuit.layouts.GroupLayout$Spring,int,int,int)>($r2, 2, i5, i0);

     label12:
        $i26 = (int) -1;

        i22 = i22 + $i26;

        goto label03;

     label13:
        return;
    }

    int getBaseline()
    {
        com.sun.lwuit.layouts.GroupLayout$Spring $r3;
        java.util.Vector $r1, $r2;
        com.sun.lwuit.layouts.GroupLayout$BaselineGroup r0;
        int $i0, $i1, $i2, $i3, $i5;

        r0 := @this: com.sun.lwuit.layouts.GroupLayout$BaselineGroup;

        $r1 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: java.util.Vector springs>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 <= 1 goto label1;

        virtualinvoke r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int getPreferredSize(int)>(2);

        $i3 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: int prefAscent>;

        return $i3;

     label1:
        $r2 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: java.util.Vector springs>;

        $i1 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if $i1 != 1 goto label2;

        $r3 = virtualinvoke r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: com.sun.lwuit.layouts.GroupLayout$Spring getSpring(int)>(0);

        $i2 = virtualinvoke $r3.<com.sun.lwuit.layouts.GroupLayout$Spring: int getBaseline()>();

        return $i2;

     label2:
        $i5 = (int) -1;

        return $i5;
    }

    int getBaselineResizeBehavior()
    {
        com.sun.lwuit.layouts.GroupLayout$Spring $r2;
        java.util.Vector $r1;
        com.sun.lwuit.layouts.GroupLayout$BaselineGroup r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.sun.lwuit.layouts.GroupLayout$BaselineGroup;

        $r1 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: java.util.Vector springs>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 != 1 goto label1;

        $r2 = virtualinvoke r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: com.sun.lwuit.layouts.GroupLayout$Spring getSpring(int)>(0);

        $i1 = virtualinvoke $r2.<com.sun.lwuit.layouts.GroupLayout$Spring: int getBaselineResizeBehavior()>();

        return $i1;

     label1:
        $z0 = r0.<com.sun.lwuit.layouts.GroupLayout$BaselineGroup: boolean baselineAnchoredToTop>;

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 2;
    }

    private void checkAxis(int)
    {
        int i0;
        java.lang.IllegalStateException $r0;
        com.sun.lwuit.layouts.GroupLayout$BaselineGroup r1;

        r1 := @this: com.sun.lwuit.layouts.GroupLayout$BaselineGroup;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Baseline must be used along vertical axis");

        throw $r0;

     label1:
        return;
    }
}
