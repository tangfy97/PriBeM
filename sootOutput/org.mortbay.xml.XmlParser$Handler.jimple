class org.mortbay.xml.XmlParser$Handler extends org.xml.sax.helpers.DefaultHandler
{
    org.mortbay.xml.XmlParser$Node _top;
    org.xml.sax.SAXParseException _error;
    private org.mortbay.xml.XmlParser$Node _context;
    private org.mortbay.xml.XmlParser$NoopHandler _noop;
    private final org.mortbay.xml.XmlParser this$0;

    void <init>(org.mortbay.xml.XmlParser)
    {
        org.mortbay.xml.XmlParser$NoopHandler $r4;
        org.mortbay.xml.XmlParser r1;
        org.mortbay.xml.XmlParser$Node $r2, $r3;
        org.mortbay.xml.XmlParser$Handler r0;

        r0 := @this: org.mortbay.xml.XmlParser$Handler;

        r1 := @parameter0: org.mortbay.xml.XmlParser;

        r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0> = r1;

        specialinvoke r0.<org.xml.sax.helpers.DefaultHandler: void <init>()>();

        $r2 = new org.mortbay.xml.XmlParser$Node;

        specialinvoke $r2.<org.mortbay.xml.XmlParser$Node: void <init>(org.mortbay.xml.XmlParser$Node,java.lang.String,org.xml.sax.Attributes)>(null, null, null);

        r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser$Node _top> = $r2;

        $r3 = r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser$Node _top>;

        r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser$Node _context> = $r3;

        $r4 = new org.mortbay.xml.XmlParser$NoopHandler;

        specialinvoke $r4.<org.mortbay.xml.XmlParser$NoopHandler: void <init>(org.mortbay.xml.XmlParser,org.mortbay.xml.XmlParser$Handler)>(r1, r0);

        r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser$NoopHandler _noop> = $r4;

        return;
    }

    void clear()
    {
        org.mortbay.xml.XmlParser$Handler r0;

        r0 := @this: org.mortbay.xml.XmlParser$Handler;

        r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser$Node _top> = null;

        r0.<org.mortbay.xml.XmlParser$Handler: org.xml.sax.SAXParseException _error> = null;

        r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser$Node _context> = null;

        return;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        org.mortbay.xml.XmlParser $r7, $r10, $r12, $r14, $r17, $r22, $r26, $r28, $r33, $r39;
        org.mortbay.xml.XmlParser$Handler r4;
        java.util.Map $r11, $r23;
        javax.xml.parsers.SAXParser $r29;
        boolean $z0, $z1, $z2, z3, $z4;
        org.mortbay.xml.XmlParser$NoopHandler $r31;
        java.util.Stack $r13, $r15, $r18, $r40;
        org.xml.sax.XMLReader $r30;
        org.xml.sax.Attributes r5;
        int $i0, $i1, $i2, $i3, i5, i6, $i7, $i9, $i10;
        org.mortbay.xml.XmlParser$Node $r6, $r9, $r32, $r41;
        java.lang.String r0, r1, r2, r20, $r25, r36, $r37;
        org.xml.sax.ContentHandler $r21, r38;
        char $c4;
        java.lang.Object $r8, $r16, $r19, $r24, $r27, $r34, $r35;

        r4 := @this: org.mortbay.xml.XmlParser$Handler;

        r0 := @parameter0: java.lang.String;

        r20 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r5 := @parameter3: org.xml.sax.Attributes;

        if r0 == null goto label01;

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 == 0 goto label02;

     label01:
        $r37 = r1;

        goto label03;

     label02:
        $r37 = r20;

     label03:
        r2 = $r37;

        $r41 = new org.mortbay.xml.XmlParser$Node;

        $r6 = r4.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser$Node _context>;

        specialinvoke $r41.<org.mortbay.xml.XmlParser$Node: void <init>(org.mortbay.xml.XmlParser$Node,java.lang.String,org.xml.sax.Attributes)>($r6, $r37, r5);

        $r7 = r4.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r8 = staticinvoke <org.mortbay.xml.XmlParser: java.lang.Object access$100(org.mortbay.xml.XmlParser)>($r7);

        if $r8 == null goto label11;

        $r25 = virtualinvoke $r41.<org.mortbay.xml.XmlParser$Node: java.lang.String getPath()>();

        z3 = 0;

        $r26 = r4.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r27 = staticinvoke <org.mortbay.xml.XmlParser: java.lang.Object access$100(org.mortbay.xml.XmlParser)>($r26);

        i5 = staticinvoke <org.mortbay.util.LazyList: int size(java.lang.Object)>($r27);

     label04:
        if z3 != 0 goto label08;

        $i0 = i5;

        $i9 = (int) -1;

        i5 = i5 + $i9;

        if $i0 <= 0 goto label08;

        $r33 = r4.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r34 = staticinvoke <org.mortbay.xml.XmlParser: java.lang.Object access$100(org.mortbay.xml.XmlParser)>($r33);

        $r35 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object get(java.lang.Object,int)>($r34, i5);

        r36 = (java.lang.String) $r35;

        $z0 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(r36);

        if $z0 != 0 goto label05;

        $z1 = virtualinvoke r36.<java.lang.String: boolean startsWith(java.lang.String)>($r25);

        if $z1 == 0 goto label06;

        $i1 = virtualinvoke r36.<java.lang.String: int length()>();

        $i2 = virtualinvoke $r25.<java.lang.String: int length()>();

        if $i1 <= $i2 goto label06;

        $i3 = virtualinvoke $r25.<java.lang.String: int length()>();

        $c4 = virtualinvoke r36.<java.lang.String: char charAt(int)>($i3);

        $i10 = (int) $c4;

        if $i10 != 47 goto label06;

     label05:
        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        z3 = $z4;

        goto label04;

     label08:
        if z3 == 0 goto label09;

        $r32 = r4.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser$Node _context>;

        virtualinvoke $r32.<org.mortbay.xml.XmlParser$Node: boolean add(java.lang.Object)>($r41);

        r4.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser$Node _context> = $r41;

        goto label10;

     label09:
        $r28 = r4.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r29 = staticinvoke <org.mortbay.xml.XmlParser: javax.xml.parsers.SAXParser access$000(org.mortbay.xml.XmlParser)>($r28);

        $r30 = virtualinvoke $r29.<javax.xml.parsers.SAXParser: org.xml.sax.XMLReader getXMLReader()>();

        $r31 = r4.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser$NoopHandler _noop>;

        interfaceinvoke $r30.<org.xml.sax.XMLReader: void setContentHandler(org.xml.sax.ContentHandler)>($r31);

     label10:
        goto label12;

     label11:
        $r9 = r4.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser$Node _context>;

        virtualinvoke $r9.<org.mortbay.xml.XmlParser$Node: boolean add(java.lang.Object)>($r41);

        r4.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser$Node _context> = $r41;

     label12:
        r38 = null;

        $r10 = r4.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r11 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Map access$200(org.mortbay.xml.XmlParser)>($r10);

        if $r11 == null goto label13;

        $r22 = r4.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r23 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Map access$200(org.mortbay.xml.XmlParser)>($r22);

        $r24 = interfaceinvoke $r23.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r38 = (org.xml.sax.ContentHandler) $r24;

     label13:
        $r12 = r4.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r13 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Stack access$300(org.mortbay.xml.XmlParser)>($r12);

        virtualinvoke $r13.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r38);

        i6 = 0;

     label14:
        $r39 = r4.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r40 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Stack access$300(org.mortbay.xml.XmlParser)>($r39);

        $i7 = virtualinvoke $r40.<java.util.Stack: int size()>();

        if i6 >= $i7 goto label16;

        $r14 = r4.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r15 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Stack access$300(org.mortbay.xml.XmlParser)>($r14);

        $r16 = virtualinvoke $r15.<java.util.Stack: java.lang.Object get(int)>(i6);

        if $r16 == null goto label15;

        $r17 = r4.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r18 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Stack access$300(org.mortbay.xml.XmlParser)>($r17);

        $r19 = virtualinvoke $r18.<java.util.Stack: java.lang.Object get(int)>(i6);

        $r21 = (org.xml.sax.ContentHandler) $r19;

        interfaceinvoke $r21.<org.xml.sax.ContentHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>(r0, r20, r1, r5);

     label15:
        i6 = i6 + 1;

        goto label14;

     label16:
        return;
    }

    public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.mortbay.xml.XmlParser $r3, $r5, $r7, $r10;
        org.mortbay.xml.XmlParser$Handler r0;
        java.util.Stack $r4, $r6, $r8, $r11;
        int $i0, i1;
        org.mortbay.xml.XmlParser$Node $r1, $r2;
        java.lang.String r13, r14, r15;
        org.xml.sax.ContentHandler $r16;
        java.lang.Object $r9, $r12;

        r0 := @this: org.mortbay.xml.XmlParser$Handler;

        r13 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.String;

        r15 := @parameter2: java.lang.String;

        $r1 = r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser$Node _context>;

        $r2 = $r1.<org.mortbay.xml.XmlParser$Node: org.mortbay.xml.XmlParser$Node _parent>;

        r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser$Node _context> = $r2;

        i1 = 0;

     label1:
        $r3 = r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r4 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Stack access$300(org.mortbay.xml.XmlParser)>($r3);

        $i0 = virtualinvoke $r4.<java.util.Stack: int size()>();

        if i1 >= $i0 goto label3;

        $r7 = r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r8 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Stack access$300(org.mortbay.xml.XmlParser)>($r7);

        $r9 = virtualinvoke $r8.<java.util.Stack: java.lang.Object get(int)>(i1);

        if $r9 == null goto label2;

        $r10 = r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r11 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Stack access$300(org.mortbay.xml.XmlParser)>($r10);

        $r12 = virtualinvoke $r11.<java.util.Stack: java.lang.Object get(int)>(i1);

        $r16 = (org.xml.sax.ContentHandler) $r12;

        interfaceinvoke $r16.<org.xml.sax.ContentHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>(r13, r14, r15);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r5 = r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r6 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Stack access$300(org.mortbay.xml.XmlParser)>($r5);

        virtualinvoke $r6.<java.util.Stack: java.lang.Object pop()>();

        return;
    }

    public void ignorableWhitespace(char[], int, int) throws org.xml.sax.SAXException
    {
        org.mortbay.xml.XmlParser $r1, $r3, $r6;
        org.mortbay.xml.XmlParser$Handler r0;
        java.util.Stack $r2, $r4, $r7;
        int $i0, i1, i2, i3;
        char[] r9;
        java.lang.Object $r5, $r8;
        org.xml.sax.ContentHandler $r10;

        r0 := @this: org.mortbay.xml.XmlParser$Handler;

        r9 := @parameter0: char[];

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = 0;

     label1:
        $r1 = r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r2 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Stack access$300(org.mortbay.xml.XmlParser)>($r1);

        $i0 = virtualinvoke $r2.<java.util.Stack: int size()>();

        if i3 >= $i0 goto label3;

        $r3 = r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r4 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Stack access$300(org.mortbay.xml.XmlParser)>($r3);

        $r5 = virtualinvoke $r4.<java.util.Stack: java.lang.Object get(int)>(i3);

        if $r5 == null goto label2;

        $r6 = r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r7 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Stack access$300(org.mortbay.xml.XmlParser)>($r6);

        $r8 = virtualinvoke $r7.<java.util.Stack: java.lang.Object get(int)>(i3);

        $r10 = (org.xml.sax.ContentHandler) $r8;

        interfaceinvoke $r10.<org.xml.sax.ContentHandler: void ignorableWhitespace(char[],int,int)>(r9, i1, i2);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    public void characters(char[], int, int) throws org.xml.sax.SAXException
    {
        org.mortbay.xml.XmlParser $r4, $r6, $r9;
        org.mortbay.xml.XmlParser$Handler r0;
        java.util.Stack $r5, $r7, $r10;
        int i0, i1, $i2, i3;
        org.mortbay.xml.XmlParser$Node $r3;
        java.lang.String $r1;
        org.xml.sax.ContentHandler $r12;
        char[] r2;
        java.lang.Object $r8, $r11;

        r0 := @this: org.mortbay.xml.XmlParser$Handler;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser$Node _context>;

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>(r2, i0, i1);

        virtualinvoke $r3.<org.mortbay.xml.XmlParser$Node: boolean add(java.lang.Object)>($r1);

        i3 = 0;

     label1:
        $r4 = r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r5 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Stack access$300(org.mortbay.xml.XmlParser)>($r4);

        $i2 = virtualinvoke $r5.<java.util.Stack: int size()>();

        if i3 >= $i2 goto label3;

        $r6 = r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r7 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Stack access$300(org.mortbay.xml.XmlParser)>($r6);

        $r8 = virtualinvoke $r7.<java.util.Stack: java.lang.Object get(int)>(i3);

        if $r8 == null goto label2;

        $r9 = r0.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r10 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Stack access$300(org.mortbay.xml.XmlParser)>($r9);

        $r11 = virtualinvoke $r10.<java.util.Stack: java.lang.Object get(int)>(i3);

        $r12 = (org.xml.sax.ContentHandler) $r11;

        interfaceinvoke $r12.<org.xml.sax.ContentHandler: void characters(char[],int,int)>(r2, i0, i1);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    public void warning(org.xml.sax.SAXParseException)
    {
        org.mortbay.xml.XmlParser$Handler r3;
        org.xml.sax.SAXParseException r0;
        java.lang.StringBuffer $r1, $r2, $r5, $r6, $r8;
        java.lang.String $r4, $r7, $r9;

        r3 := @this: org.mortbay.xml.XmlParser$Handler;

        r0 := @parameter0: org.xml.sax.SAXParseException;

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String,java.lang.Object)>("EXCEPTION ", r0);

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("WARNING@");

        $r4 = specialinvoke r3.<org.mortbay.xml.XmlParser$Handler: java.lang.String getLocationString(org.xml.sax.SAXParseException)>(r0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r7 = virtualinvoke r0.<org.xml.sax.SAXParseException: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String)>($r9);

        return;
    }

    public void error(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException
    {
        org.mortbay.xml.XmlParser$Handler r0;
        org.xml.sax.SAXParseException $r1, r2;
        java.lang.StringBuffer $r3, $r4, $r6, $r7, $r9;
        java.lang.String $r5, $r8, $r10;

        r0 := @this: org.mortbay.xml.XmlParser$Handler;

        r2 := @parameter0: org.xml.sax.SAXParseException;

        $r1 = r0.<org.mortbay.xml.XmlParser$Handler: org.xml.sax.SAXParseException _error>;

        if $r1 != null goto label1;

        r0.<org.mortbay.xml.XmlParser$Handler: org.xml.sax.SAXParseException _error> = r2;

     label1:
        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String,java.lang.Object)>("EXCEPTION ", r2);

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ERROR@");

        $r5 = specialinvoke r0.<org.mortbay.xml.XmlParser$Handler: java.lang.String getLocationString(org.xml.sax.SAXParseException)>(r2);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r8 = virtualinvoke r2.<org.xml.sax.SAXParseException: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String)>($r10);

        return;
    }

    public void fatalError(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException
    {
        org.mortbay.xml.XmlParser$Handler r0;
        org.xml.sax.SAXParseException r1;
        java.lang.StringBuffer $r2, $r3, $r5, $r6, $r8;
        java.lang.String $r4, $r7, $r9;

        r0 := @this: org.mortbay.xml.XmlParser$Handler;

        r1 := @parameter0: org.xml.sax.SAXParseException;

        r0.<org.mortbay.xml.XmlParser$Handler: org.xml.sax.SAXParseException _error> = r1;

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String,java.lang.Object)>("EXCEPTION ", r1);

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FATAL@");

        $r4 = specialinvoke r0.<org.mortbay.xml.XmlParser$Handler: java.lang.String getLocationString(org.xml.sax.SAXParseException)>(r1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r7 = virtualinvoke r1.<org.xml.sax.SAXParseException: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String)>($r9);

        throw r1;
    }

    private java.lang.String getLocationString(org.xml.sax.SAXParseException)
    {
        org.mortbay.xml.XmlParser$Handler r9;
        org.xml.sax.SAXParseException r1;
        java.lang.StringBuffer $r0, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1;
        java.lang.String $r2, $r8;

        r9 := @this: org.mortbay.xml.XmlParser$Handler;

        r1 := @parameter0: org.xml.sax.SAXParseException;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<org.xml.sax.SAXParseException: java.lang.String getSystemId()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" line:");

        $i0 = virtualinvoke r1.<org.xml.sax.SAXParseException: int getLineNumber()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" col:");

        $i1 = virtualinvoke r1.<org.xml.sax.SAXParseException: int getColumnNumber()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String)
    {
        java.net.URL r33;
        org.mortbay.xml.XmlParser $r11, $r18, $r21, $r24;
        org.mortbay.xml.XmlParser$Handler r10;
        java.util.Map $r12, $r19, $r22;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8, $r14, $r15, $r16, $r25, $r26, $r27, $r28, $r29, $r30;
        int $i0, $i1, $i2;
        java.lang.String r0, r1, $r9, $r17, $r31, r34;
        org.xml.sax.InputSource $r3;
        java.io.IOException $r32;
        java.lang.Object $r13, $r20, $r23;
        java.io.InputStream $r2;

        r10 := @this: org.mortbay.xml.XmlParser$Handler;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.mortbay.log.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label01;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("resolveEntity(");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String)>($r31);

     label01:
        if r0 == null goto label02;

        $z3 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".dtd");

        if $z3 == 0 goto label02;

        $r24 = r10.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        staticinvoke <org.mortbay.xml.XmlParser: java.lang.String access$402(org.mortbay.xml.XmlParser,java.lang.String)>($r24, r0);

     label02:
        r33 = null;

        if r1 == null goto label03;

        $r21 = r10.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r22 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Map access$500(org.mortbay.xml.XmlParser)>($r21);

        $r23 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r33 = (java.net.URL) $r23;

     label03:
        if r33 != null goto label04;

        $r18 = r10.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r19 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Map access$500(org.mortbay.xml.XmlParser)>($r18);

        $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r33 = (java.net.URL) $r20;

     label04:
        if r33 != null goto label07;

        r34 = r0;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);

        if $i0 < 0 goto label05;

        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);

        $i2 = $i1 + 1;

        r34 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

     label05:
        $z2 = staticinvoke <org.mortbay.log.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label06;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t exact match entity in redirect map, trying ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r34);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String)>($r17);

     label06:
        $r11 = r10.<org.mortbay.xml.XmlParser$Handler: org.mortbay.xml.XmlParser this$0>;

        $r12 = staticinvoke <org.mortbay.xml.XmlParser: java.util.Map access$500(org.mortbay.xml.XmlParser)>($r11);

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r34);

        r33 = (java.net.URL) $r13;

     label07:
        if r33 == null goto label12;

     label08:
        $r2 = virtualinvoke r33.<java.net.URL: java.io.InputStream openStream()>();

        $z1 = staticinvoke <org.mortbay.log.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label09;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Redirected entity ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" --> ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r33);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String)>($r9);

     label09:
        $r3 = new org.xml.sax.InputSource;

        specialinvoke $r3.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>($r2);

        virtualinvoke $r3.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>(r0);

     label10:
        return $r3;

     label11:
        $r32 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r32);

     label12:
        return null;

        catch java.io.IOException from label08 to label10 with label11;
    }
}
