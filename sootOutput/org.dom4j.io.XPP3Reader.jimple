public class org.dom4j.io.XPP3Reader extends java.lang.Object
{
    private org.dom4j.DocumentFactory factory;
    private org.xmlpull.v1.XmlPullParser xppParser;
    private org.xmlpull.v1.XmlPullParserFactory xppFactory;
    private org.dom4j.io.DispatchHandler dispatchHandler;

    public void <init>()
    {
        org.dom4j.io.XPP3Reader r0;

        r0 := @this: org.dom4j.io.XPP3Reader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.dom4j.DocumentFactory)
    {
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.DocumentFactory r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        r1 := @parameter0: org.dom4j.DocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.XPP3Reader: org.dom4j.DocumentFactory factory> = r1;

        return;
    }

    public org.dom4j.Document read(java.io.File) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r5;
        java.lang.String $r1;
        java.io.BufferedReader $r3;
        java.io.FileReader $r4;
        org.dom4j.io.XPP3Reader r2;
        java.io.File r0;

        r2 := @this: org.dom4j.io.XPP3Reader;

        r0 := @parameter0: java.io.File;

        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3 = new java.io.BufferedReader;

        $r4 = new java.io.FileReader;

        specialinvoke $r4.<java.io.FileReader: void <init>(java.io.File)>(r0);

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);

        $r5 = virtualinvoke r2.<org.dom4j.io.XPP3Reader: org.dom4j.Document read(java.io.Reader,java.lang.String)>($r3, $r1);

        return $r5;
    }

    public org.dom4j.Document read(java.net.URL) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r5;
        java.net.URL r0;
        java.lang.String $r1;
        java.io.Reader $r4;
        org.dom4j.io.XPP3Reader r2;
        java.io.InputStream $r3;

        r2 := @this: org.dom4j.io.XPP3Reader;

        r0 := @parameter0: java.net.URL;

        $r1 = virtualinvoke r0.<java.net.URL: java.lang.String toExternalForm()>();

        $r3 = virtualinvoke r0.<java.net.URL: java.io.InputStream openStream()>();

        $r4 = virtualinvoke r2.<org.dom4j.io.XPP3Reader: java.io.Reader createReader(java.io.InputStream)>($r3);

        $r5 = virtualinvoke r2.<org.dom4j.io.XPP3Reader: org.dom4j.Document read(java.io.Reader,java.lang.String)>($r4, $r1);

        return $r5;
    }

    public org.dom4j.Document read(java.lang.String) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r3, $r5;
        java.net.URL $r4;
        int $i0;
        java.lang.String r0;
        org.dom4j.io.XPP3Reader r1;
        java.io.File $r2;

        r1 := @this: org.dom4j.io.XPP3Reader;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        if $i0 < 0 goto label1;

        $r4 = new java.net.URL;

        specialinvoke $r4.<java.net.URL: void <init>(java.lang.String)>(r0);

        $r5 = virtualinvoke r1.<org.dom4j.io.XPP3Reader: org.dom4j.Document read(java.net.URL)>($r4);

        return $r5;

     label1:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0);

        $r3 = virtualinvoke r1.<org.dom4j.io.XPP3Reader: org.dom4j.Document read(java.io.File)>($r2);

        return $r3;
    }

    public org.dom4j.Document read(java.io.InputStream) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r3;
        java.io.Reader $r2;
        org.dom4j.io.XPP3Reader r0;
        java.io.InputStream r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        r1 := @parameter0: java.io.InputStream;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: java.io.Reader createReader(java.io.InputStream)>(r1);

        $r3 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.Document read(java.io.Reader)>($r2);

        return $r3;
    }

    public org.dom4j.Document read(java.io.Reader) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r3;
        java.io.Reader r2;
        org.dom4j.io.XPP3Reader r0;
        org.xmlpull.v1.XmlPullParser $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        r2 := @parameter0: java.io.Reader;

        $r1 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParser getXPPParser()>();

        interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>(r2);

        $r3 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.Document parseDocument()>();

        return $r3;
    }

    public org.dom4j.Document read(char[]) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r4;
        java.io.CharArrayReader $r2;
        char[] r3;
        org.dom4j.io.XPP3Reader r0;
        org.xmlpull.v1.XmlPullParser $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        r3 := @parameter0: char[];

        $r1 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParser getXPPParser()>();

        $r2 = new java.io.CharArrayReader;

        specialinvoke $r2.<java.io.CharArrayReader: void <init>(char[])>(r3);

        interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>($r2);

        $r4 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.Document parseDocument()>();

        return $r4;
    }

    public org.dom4j.Document read(java.io.InputStream, java.lang.String) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r4;
        java.io.Reader $r2;
        java.lang.String r3;
        org.dom4j.io.XPP3Reader r0;
        java.io.InputStream r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        r1 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: java.io.Reader createReader(java.io.InputStream)>(r1);

        $r4 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.Document read(java.io.Reader,java.lang.String)>($r2, r3);

        return $r4;
    }

    public org.dom4j.Document read(java.io.Reader, java.lang.String) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r2;
        java.io.Reader r1;
        java.lang.String r3;
        org.dom4j.io.XPP3Reader r0;

        r0 := @this: org.dom4j.io.XPP3Reader;

        r1 := @parameter0: java.io.Reader;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.Document read(java.io.Reader)>(r1);

        interfaceinvoke $r2.<org.dom4j.Document: void setName(java.lang.String)>(r3);

        return $r2;
    }

    public org.xmlpull.v1.XmlPullParser getXPPParser() throws org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParserFactory $r3;
        org.dom4j.io.XPP3Reader r0;
        org.xmlpull.v1.XmlPullParser $r1, $r2, $r4;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 = r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParser xppParser>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParserFactory getXPPFactory()>();

        $r4 = virtualinvoke $r3.<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParser newPullParser()>();

        r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParser xppParser> = $r4;

     label1:
        $r2 = r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParser xppParser>;

        return $r2;
    }

    public org.xmlpull.v1.XmlPullParserFactory getXPPFactory() throws org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParserFactory $r1, $r2, $r3, $r4;
        org.dom4j.io.XPP3Reader r0;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 = r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParserFactory xppFactory>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParserFactory newInstance()>();

        r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParserFactory xppFactory> = $r4;

     label1:
        $r2 = r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParserFactory xppFactory>;

        virtualinvoke $r2.<org.xmlpull.v1.XmlPullParserFactory: void setNamespaceAware(boolean)>(1);

        $r3 = r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParserFactory xppFactory>;

        return $r3;
    }

    public void setXPPFactory(org.xmlpull.v1.XmlPullParserFactory)
    {
        org.dom4j.io.XPP3Reader r0;
        org.xmlpull.v1.XmlPullParserFactory r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParserFactory;

        r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParserFactory xppFactory> = r1;

        return;
    }

    public org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.DocumentFactory $r1, $r2, $r3;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 = r0.<org.dom4j.io.XPP3Reader: org.dom4j.DocumentFactory factory>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.io.XPP3Reader: org.dom4j.DocumentFactory factory> = $r3;

     label1:
        $r2 = r0.<org.dom4j.io.XPP3Reader: org.dom4j.DocumentFactory factory>;

        return $r2;
    }

    public void setDocumentFactory(org.dom4j.DocumentFactory)
    {
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.DocumentFactory r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        r1 := @parameter0: org.dom4j.DocumentFactory;

        r0.<org.dom4j.io.XPP3Reader: org.dom4j.DocumentFactory factory> = r1;

        return;
    }

    public void addHandler(java.lang.String, org.dom4j.ElementHandler)
    {
        org.dom4j.ElementHandler r3;
        java.lang.String r2;
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.io.DispatchHandler $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.dom4j.ElementHandler;

        $r1 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.io.DispatchHandler getDispatchHandler()>();

        virtualinvoke $r1.<org.dom4j.io.DispatchHandler: void addHandler(java.lang.String,org.dom4j.ElementHandler)>(r2, r3);

        return;
    }

    public void removeHandler(java.lang.String)
    {
        java.lang.String r2;
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.io.DispatchHandler $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.io.DispatchHandler getDispatchHandler()>();

        virtualinvoke $r1.<org.dom4j.io.DispatchHandler: org.dom4j.ElementHandler removeHandler(java.lang.String)>(r2);

        return;
    }

    public void setDefaultHandler(org.dom4j.ElementHandler)
    {
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.io.DispatchHandler $r1;
        org.dom4j.ElementHandler r2;

        r0 := @this: org.dom4j.io.XPP3Reader;

        r2 := @parameter0: org.dom4j.ElementHandler;

        $r1 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.io.DispatchHandler getDispatchHandler()>();

        virtualinvoke $r1.<org.dom4j.io.DispatchHandler: void setDefaultHandler(org.dom4j.ElementHandler)>(r2);

        return;
    }

    protected org.dom4j.Document parseDocument() throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParser $r3;
        org.dom4j.Document $r2;
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.DocumentFactory $r1;
        org.dom4j.DocumentException $r9, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;
        org.dom4j.Element $r17, r29;
        org.dom4j.QName $r30, $r31;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        r29 = null;

        $r3 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParser getXPPParser()>();

        interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#process-namespaces", 1);

     label01:
        $i0 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int nextToken()>();

        tableswitch($i0)
        {
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label22;
            case 4: goto label23;
            case 5: goto label06;
            case 6: goto label08;
            case 7: goto label25;
            case 8: goto label02;
            case 9: goto label04;
            default: goto label25;
        };

     label02:
        $r6 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        $i1 = virtualinvoke $r6.<java.lang.String: int indexOf(java.lang.String)>(" ");

        if $i1 < 0 goto label03;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $i2 = $i1 + 1;

        $r8 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>($i2);

        interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.Document addProcessingInstruction(java.lang.String,java.lang.String)>($r7, $r8);

        goto label25;

     label03:
        interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.Document addProcessingInstruction(java.lang.String,java.lang.String)>($r6, "");

        goto label25;

     label04:
        if r29 == null goto label05;

        $r5 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        interfaceinvoke r29.<org.dom4j.Element: org.dom4j.Element addComment(java.lang.String)>($r5);

        goto label25;

     label05:
        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.Document addComment(java.lang.String)>($r4);

        goto label25;

     label06:
        if r29 == null goto label07;

        $r10 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        interfaceinvoke r29.<org.dom4j.Element: org.dom4j.Element addCDATA(java.lang.String)>($r10);

        goto label25;

     label07:
        $r9 = new org.dom4j.DocumentException;

        specialinvoke $r9.<org.dom4j.DocumentException: void <init>(java.lang.String)>("Cannot have text content outside of the root document");

        throw $r9;

     label08:
        goto label25;

     label09:
        return $r2;

     label10:
        $r13 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getPrefix()>();

        if $r13 != null goto label11;

        $r27 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r28 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>();

        $r30 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String)>($r27, $r28);

        goto label12;

     label11:
        $r14 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r15 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getPrefix()>();

        $r16 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>();

        $r30 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String,java.lang.String)>($r14, $r15, $r16);

     label12:
        $r17 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(org.dom4j.QName)>($r30);

        $i3 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        $i4 = $i3 - 1;

        $i5 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int getNamespaceCount(int)>($i4);

        $i6 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        $i7 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int getNamespaceCount(int)>($i6);

        i9 = $i5;

     label13:
        if i9 >= $i7 goto label15;

        $r24 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespacePrefix(int)>(i9);

        if $r24 == null goto label14;

        $r25 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespacePrefix(int)>(i9);

        $r26 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespaceUri(int)>(i9);

        interfaceinvoke $r17.<org.dom4j.Element: org.dom4j.Element addNamespace(java.lang.String,java.lang.String)>($r25, $r26);

     label14:
        i9 = i9 + 1;

        goto label13;

     label15:
        i10 = 0;

     label16:
        $i8 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>();

        if i10 >= $i8 goto label19;

        $r18 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributePrefix(int)>(i10);

        if $r18 != null goto label17;

        $r23 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>(i10);

        $r31 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String)>($r23);

        goto label18;

     label17:
        $r19 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>(i10);

        $r20 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributePrefix(int)>(i10);

        $r21 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeNamespace(int)>(i10);

        $r31 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String,java.lang.String)>($r19, $r20, $r21);

     label18:
        $r22 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>(i10);

        interfaceinvoke $r17.<org.dom4j.Element: org.dom4j.Element addAttribute(org.dom4j.QName,java.lang.String)>($r31, $r22);

        i10 = i10 + 1;

        goto label16;

     label19:
        if r29 == null goto label20;

        interfaceinvoke r29.<org.dom4j.Element: void add(org.dom4j.Element)>($r17);

        goto label21;

     label20:
        interfaceinvoke $r2.<org.dom4j.Document: void add(org.dom4j.Element)>($r17);

     label21:
        r29 = $r17;

        goto label25;

     label22:
        if r29 == null goto label25;

        r29 = interfaceinvoke r29.<org.dom4j.Element: org.dom4j.Element getParent()>();

        goto label25;

     label23:
        $r11 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        if r29 == null goto label24;

        interfaceinvoke r29.<org.dom4j.Element: org.dom4j.Element addText(java.lang.String)>($r11);

        goto label25;

     label24:
        $r12 = new org.dom4j.DocumentException;

        specialinvoke $r12.<org.dom4j.DocumentException: void <init>(java.lang.String)>("Cannot have text content outside of the root document");

        throw $r12;

     label25:
        goto label01;
    }

    protected org.dom4j.io.DispatchHandler getDispatchHandler()
    {
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.io.DispatchHandler $r1, $r2, $r3;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 = r0.<org.dom4j.io.XPP3Reader: org.dom4j.io.DispatchHandler dispatchHandler>;

        if $r1 != null goto label1;

        $r3 = new org.dom4j.io.DispatchHandler;

        specialinvoke $r3.<org.dom4j.io.DispatchHandler: void <init>()>();

        r0.<org.dom4j.io.XPP3Reader: org.dom4j.io.DispatchHandler dispatchHandler> = $r3;

     label1:
        $r2 = r0.<org.dom4j.io.XPP3Reader: org.dom4j.io.DispatchHandler dispatchHandler>;

        return $r2;
    }

    protected void setDispatchHandler(org.dom4j.io.DispatchHandler)
    {
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.io.DispatchHandler r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        r1 := @parameter0: org.dom4j.io.DispatchHandler;

        r0.<org.dom4j.io.XPP3Reader: org.dom4j.io.DispatchHandler dispatchHandler> = r1;

        return;
    }

    protected java.io.Reader createReader(java.io.InputStream) throws java.io.IOException
    {
        java.io.BufferedReader $r0;
        org.dom4j.io.XPP3Reader r3;
        java.io.InputStreamReader $r1;
        java.io.InputStream r2;

        r3 := @this: org.dom4j.io.XPP3Reader;

        r2 := @parameter0: java.io.InputStream;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        return $r0;
    }
}
