public class org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit extends org.apache.batik.ext.awt.image.renderable.AbstractRable implements org.apache.batik.ext.awt.image.renderable.MorphologyRable
{
    private double radiusX;
    private double radiusY;
    private boolean doDilation;

    public void <init>(org.apache.batik.ext.awt.image.renderable.Filter, double, double, boolean)
    {
        org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;
        double d0, d1;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        z0 := @parameter3: boolean;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit: void setRadiusX(double)>(d0);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit: void setRadiusY(double)>(d1);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit: void setDoDilation(boolean)>(z0);

        return;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter getSource()
    {
        java.util.Vector $r1;
        org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit r0;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.renderable.Filter $r3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.renderable.Filter) $r2;

        return $r3;
    }

    public void setSource(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        return;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;
        java.awt.geom.Rectangle2D $r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r2 = interfaceinvoke $r1.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r2;
    }

    public void setRadiusX(double)
    {
        byte $b0;
        int $i1;
        org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit r0;
        java.lang.IllegalArgumentException $r2;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit: double radiusX> = d0;

        return;
    }

    public void setRadiusY(double)
    {
        byte $b0;
        int $i1;
        org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit r0;
        java.lang.IllegalArgumentException $r2;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit: double radiusY> = d0;

        return;
    }

    public void setDoDilation(boolean)
    {
        org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit r0;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit: boolean doDilation> = z0;

        return;
    }

    public boolean getDoDilation()
    {
        org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;

        $z0 = r0.<org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit: boolean doDilation>;

        return $z0;
    }

    public double getRadiusX()
    {
        org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;

        $d0 = r0.<org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit: double radiusX>;

        return $d0;
    }

    public double getRadiusY()
    {
        org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;

        $d0 = r0.<org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit: double radiusY>;

        return $d0;
    }

    public java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)
    {
        java.awt.geom.Rectangle2D $r5, $r11, $r13;
        java.awt.image.SampleModel $r21;
        org.apache.batik.ext.awt.image.rendered.AffineRed $r26;
        java.awt.geom.AffineTransform $r2, $r3, $r31;
        long $l0, $l1;
        org.apache.batik.ext.awt.image.PadMode $r17;
        java.awt.image.Raster $r19;
        org.apache.batik.ext.awt.image.rendered.RenderedImageCachableRed $r10;
        java.awt.RenderingHints $r1, $r28, r29;
        java.awt.Point $r20;
        org.apache.batik.ext.awt.image.rendered.MorphologyOp $r27, r30;
        java.awt.geom.Rectangle2D$Double $r6, $r14;
        boolean $z0, $z1, $z2;
        java.awt.Shape $r12, $r32, r33;
        java.awt.image.BufferedImage $r24, r34;
        org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed $r25;
        java.awt.image.RenderedImage $r9;
        org.apache.batik.ext.awt.image.renderable.Filter $r7;
        java.awt.image.renderable.RenderContext r0, $r8;
        java.awt.image.DataBuffer $r22;
        java.awt.Rectangle $r16;
        org.apache.batik.ext.awt.image.rendered.PadRed $r15;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r35;
        java.awt.image.ColorModel $r18;
        org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit r4;
        java.awt.image.WritableRaster $r23;

        r4 := @this: org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;

        r0 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.RenderingHints getRenderingHints()>();

        r29 = $r1;

        if $r1 != null goto label1;

        $r28 = new java.awt.RenderingHints;

        specialinvoke $r28.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r29 = $r28;

     label1:
        $r2 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.geom.AffineTransform getTransform()>();

        $d0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d2 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getShearX()>();

        $d3 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getShearY()>();

        $d4 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d5 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $d7 = $d0 * $d0;

        $d6 = $d3 * $d3;

        $d8 = $d7 + $d6;

        $d9 = staticinvoke <java.lang.Math: double sqrt(double)>($d8);

        $d11 = $d1 * $d1;

        $d10 = $d2 * $d2;

        $d12 = $d11 + $d10;

        $d13 = staticinvoke <java.lang.Math: double sqrt(double)>($d12);

        $r3 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>($d9, $d13);

        $d14 = r4.<org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit: double radiusX>;

        $d15 = $d14 * $d9;

        $l0 = staticinvoke <java.lang.Math: long round(double)>($d15);

        $i8 = (int) $l0;

        $d16 = r4.<org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit: double radiusY>;

        $d17 = $d16 * $d13;

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d17);

        $i9 = (int) $l1;

        r30 = null;

        if $i8 <= 0 goto label2;

        if $i9 <= 0 goto label2;

        $r27 = new org.apache.batik.ext.awt.image.rendered.MorphologyOp;

        $z2 = r4.<org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit: boolean doDilation>;

        specialinvoke $r27.<org.apache.batik.ext.awt.image.rendered.MorphologyOp: void <init>(int,int,boolean)>($i8, $i9, $z2);

        r30 = $r27;

     label2:
        $r31 = new java.awt.geom.AffineTransform;

        $d46 = $d0 / $d9;

        $d47 = $d3 / $d9;

        $d48 = $d2 / $d13;

        $d49 = $d1 / $d13;

        specialinvoke $r31.<java.awt.geom.AffineTransform: void <init>(double,double,double,double,double,double)>($d46, $d47, $d48, $d49, $d4, $d5);

        $r32 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.Shape getAreaOfInterest()>();

        r33 = $r32;

        if $r32 != null goto label3;

        r33 = virtualinvoke r4.<org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

     label3:
        $r5 = interfaceinvoke r33.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r6 = new java.awt.geom.Rectangle2D$Double;

        $d18 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getX()>();

        $d19 = (double) $i8;

        $d20 = $d19 / $d9;

        $d21 = $d18 - $d20;

        $d22 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getY()>();

        $d23 = (double) $i9;

        $d24 = $d23 / $d13;

        $d25 = $d22 - $d24;

        $d26 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getWidth()>();

        $i2 = 2 * $i8;

        $d27 = (double) $i2;

        $d28 = $d27 / $d9;

        $d29 = $d26 + $d28;

        $d30 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getHeight()>();

        $i3 = 2 * $i9;

        $d31 = (double) $i3;

        $d32 = $d31 / $d13;

        $d33 = $d30 + $d32;

        specialinvoke $r6.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d21, $d25, $d29, $d33);

        $r7 = virtualinvoke r4.<org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r8 = new java.awt.image.renderable.RenderContext;

        specialinvoke $r8.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>($r3, $r6, r29);

        $r9 = interfaceinvoke $r7.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r8);

        if $r9 != null goto label4;

        return null;

     label4:
        $r10 = new org.apache.batik.ext.awt.image.rendered.RenderedImageCachableRed;

        specialinvoke $r10.<org.apache.batik.ext.awt.image.rendered.RenderedImageCachableRed: void <init>(java.awt.image.RenderedImage)>($r9);

        $r11 = interfaceinvoke r33.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r12 = virtualinvoke $r3.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r11);

        $r13 = interfaceinvoke $r12.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r14 = new java.awt.geom.Rectangle2D$Double;

        $d34 = virtualinvoke $r13.<java.awt.geom.RectangularShape: double getX()>();

        $d35 = (double) $i8;

        $d36 = $d34 - $d35;

        $d37 = virtualinvoke $r13.<java.awt.geom.RectangularShape: double getY()>();

        $d38 = (double) $i9;

        $d39 = $d37 - $d38;

        $d40 = virtualinvoke $r13.<java.awt.geom.RectangularShape: double getWidth()>();

        $i4 = 2 * $i8;

        $d41 = (double) $i4;

        $d42 = $d40 + $d41;

        $d43 = virtualinvoke $r13.<java.awt.geom.RectangularShape: double getHeight()>();

        $i5 = 2 * $i9;

        $d44 = (double) $i5;

        $d45 = $d43 + $d44;

        specialinvoke $r14.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d36, $d39, $d42, $d45);

        $r15 = new org.apache.batik.ext.awt.image.rendered.PadRed;

        $r16 = virtualinvoke $r14.<java.awt.geom.RectangularShape: java.awt.Rectangle getBounds()>();

        $r17 = <org.apache.batik.ext.awt.image.PadMode: org.apache.batik.ext.awt.image.PadMode ZERO_PAD>;

        specialinvoke $r15.<org.apache.batik.ext.awt.image.rendered.PadRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,org.apache.batik.ext.awt.image.PadMode,java.awt.RenderingHints)>($r10, $r16, $r17, r29);

        $r18 = interfaceinvoke $r9.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r19 = interfaceinvoke $r15.<java.awt.image.RenderedImage: java.awt.image.Raster getData()>();

        $r20 = new java.awt.Point;

        specialinvoke $r20.<java.awt.Point: void <init>(int,int)>(0, 0);

        $r21 = virtualinvoke $r19.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $r22 = virtualinvoke $r19.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $r23 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)>($r21, $r22, $r20);

        $r24 = new java.awt.image.BufferedImage;

        $z0 = virtualinvoke $r18.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r24.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r18, $r23, $z0, null);

        if r30 == null goto label5;

        r34 = virtualinvoke r30.<org.apache.batik.ext.awt.image.rendered.MorphologyOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r24, null);

        goto label6;

     label5:
        r34 = $r24;

     label6:
        $i6 = interfaceinvoke $r15.<java.awt.image.RenderedImage: int getMinX()>();

        $i7 = interfaceinvoke $r15.<java.awt.image.RenderedImage: int getMinY()>();

        $r25 = new org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;

        specialinvoke $r25.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: void <init>(java.awt.image.BufferedImage,int,int)>(r34, $i6, $i7);

        r35 = $r25;

        $z1 = virtualinvoke $r31.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z1 != 0 goto label7;

        $r26 = new org.apache.batik.ext.awt.image.rendered.AffineRed;

        specialinvoke $r26.<org.apache.batik.ext.awt.image.rendered.AffineRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.geom.AffineTransform,java.awt.RenderingHints)>($r25, $r31, r29);

        r35 = $r26;

     label7:
        return r35;
    }

    public java.awt.Shape getDependencyRegion(int, java.awt.geom.Rectangle2D)
    {
        java.awt.Shape $r2;
        java.awt.geom.Rectangle2D r1;
        int i0;
        org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;

        i0 := @parameter0: int;

        r1 := @parameter1: java.awt.geom.Rectangle2D;

        $r2 = specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.Shape getDependencyRegion(int,java.awt.geom.Rectangle2D)>(i0, r1);

        return $r2;
    }

    public java.awt.Shape getDirtyRegion(int, java.awt.geom.Rectangle2D)
    {
        java.awt.Shape $r2;
        java.awt.geom.Rectangle2D r1;
        int i0;
        org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;

        i0 := @parameter0: int;

        r1 := @parameter1: java.awt.geom.Rectangle2D;

        $r2 = specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.Shape getDirtyRegion(int,java.awt.geom.Rectangle2D)>(i0, r1);

        return $r2;
    }
}
