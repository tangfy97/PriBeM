public abstract class com.mycila.inject.internal.asm.commons.Remapper extends java.lang.Object
{

    public void <init>()
    {
        com.mycila.inject.internal.asm.commons.Remapper r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.Remapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String mapDesc(java.lang.String)
    {
        com.mycila.inject.internal.asm.Type $r1, $r10;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r12, $r13, $r14;
        int $i0, $i1, i2;
        java.lang.String r0, $r3, $r4, $r9, $r11, r15;
        com.mycila.inject.internal.asm.commons.Remapper r2;

        r2 := @this: com.mycila.inject.internal.asm.commons.Remapper;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>(r0);

        $i0 = virtualinvoke $r1.<com.mycila.inject.internal.asm.Type: int getSort()>();

        lookupswitch($i0)
        {
            case 9: goto label1;
            case 10: goto label4;
            default: goto label5;
        };

     label1:
        $r10 = virtualinvoke $r1.<com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getElementType()>();

        $r11 = virtualinvoke $r10.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        r15 = virtualinvoke r2.<com.mycila.inject.internal.asm.commons.Remapper: java.lang.String mapDesc(java.lang.String)>($r11);

        i2 = 0;

     label2:
        $i1 = virtualinvoke $r1.<com.mycila.inject.internal.asm.Type: int getDimensions()>();

        if i2 >= $i1 goto label3;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

        r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        i2 = i2 + 1;

        goto label2;

     label3:
        return r15;

     label4:
        $r3 = virtualinvoke $r1.<com.mycila.inject.internal.asm.Type: java.lang.String getInternalName()>();

        $r4 = virtualinvoke r2.<com.mycila.inject.internal.asm.commons.Remapper: java.lang.String map(java.lang.String)>($r3);

        if $r4 == null goto label5;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(76);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;

     label5:
        return r0;
    }

    private com.mycila.inject.internal.asm.Type mapType(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r0, $r4, $r5, $r7;
        com.mycila.inject.internal.asm.commons.Remapper r1;
        java.lang.StringBuffer $r8, $r9, $r10;
        int $i0, $i1, i2;
        java.lang.String $r2, $r3, $r6, r11;

        r1 := @this: com.mycila.inject.internal.asm.commons.Remapper;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSort()>();

        lookupswitch($i0)
        {
            case 9: goto label1;
            case 10: goto label4;
            default: goto label5;
        };

     label1:
        $r5 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getElementType()>();

        $r6 = virtualinvoke $r5.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        r11 = virtualinvoke r1.<com.mycila.inject.internal.asm.commons.Remapper: java.lang.String mapDesc(java.lang.String)>($r6);

        i2 = 0;

     label2:
        $i1 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getDimensions()>();

        if i2 >= $i1 goto label3;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        i2 = i2 + 1;

        goto label2;

     label3:
        $r7 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>(r11);

        return $r7;

     label4:
        $r2 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: java.lang.String getInternalName()>();

        $r3 = virtualinvoke r1.<com.mycila.inject.internal.asm.commons.Remapper: java.lang.String map(java.lang.String)>($r2);

        if $r3 == null goto label5;

        $r4 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getObjectType(java.lang.String)>($r3);

        return $r4;

     label5:
        return r0;
    }

    public java.lang.String mapType(java.lang.String)
    {
        com.mycila.inject.internal.asm.Type $r2, $r3;
        com.mycila.inject.internal.asm.commons.Remapper r1;
        java.lang.String r0, $r4;

        r1 := @this: com.mycila.inject.internal.asm.commons.Remapper;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getObjectType(java.lang.String)>(r0);

        $r3 = specialinvoke r1.<com.mycila.inject.internal.asm.commons.Remapper: com.mycila.inject.internal.asm.Type mapType(com.mycila.inject.internal.asm.Type)>($r2);

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.asm.Type: java.lang.String getInternalName()>();

        return $r4;
    }

    public java.lang.String[] mapTypes(java.lang.String[])
    {
        java.lang.String[] r0, $r4, r5, $r7;
        com.mycila.inject.internal.asm.commons.Remapper r2;
        int $i0, $i1, $i2, i3;
        java.lang.String r1, $r3, $r6;
        boolean z0, z1, z2;

        r2 := @this: com.mycila.inject.internal.asm.commons.Remapper;

        r0 := @parameter0: java.lang.String[];

        r5 = null;

        z0 = 0;

        z2 = 0;

        z1 = 0;

        i3 = 0;

     label1:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label7;

        r1 = r0[i3];

        $r3 = virtualinvoke r2.<com.mycila.inject.internal.asm.commons.Remapper: java.lang.String map(java.lang.String)>(r1);

        if $r3 == null goto label3;

        if r5 != null goto label3;

        $i2 = lengthof r0;

        r5 = newarray (java.lang.String)[$i2];

        if i3 <= 0 goto label2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r5, 0, i3);

     label2:
        z0 = 1;

        z2 = 1;

        z1 = 1;

     label3:
        if z1 == 0 goto label6;

        $r4 = r5;

        $i1 = i3;

        if $r3 != null goto label4;

        $r6 = r1;

        goto label5;

     label4:
        $r6 = $r3;

     label5:
        $r4[$i1] = $r6;

     label6:
        i3 = i3 + 1;

        goto label1;

     label7:
        if z2 == 0 goto label8;

        $r7 = r5;

        goto label9;

     label8:
        $r7 = r0;

     label9:
        return $r7;
    }

    public java.lang.String mapMethodDesc(java.lang.String)
    {
        com.mycila.inject.internal.asm.Type $r3, $r4, $r19;
        java.lang.StringBuffer $r5, $r6, $r7, $r11, $r13, $r14, $r15, $r17, $r18, $r22;
        int $i0, i1;
        java.lang.String r0, $r1, $r9, $r10, $r12, $r16, $r20, $r21, r23;
        com.mycila.inject.internal.asm.Type[] $r2;
        boolean $z0;
        com.mycila.inject.internal.asm.commons.Remapper r8;

        r8 := @this: com.mycila.inject.internal.asm.commons.Remapper;

        r0 := @parameter0: java.lang.String;

        $r1 = "()V";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r2 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type[] getArgumentTypes(java.lang.String)>(r0);

        r23 = "(";

        i1 = 0;

     label2:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label3;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r23);

        $r19 = $r2[i1];

        $r20 = virtualinvoke $r19.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        $r21 = virtualinvoke r8.<com.mycila.inject.internal.asm.commons.Remapper: java.lang.String mapDesc(java.lang.String)>($r20);

        $r22 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getReturnType(java.lang.String)>(r0);

        $r4 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        if $r3 != $r4 goto label4;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r23);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")V");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;

     label4:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r23);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r9 = virtualinvoke $r3.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        $r10 = virtualinvoke r8.<com.mycila.inject.internal.asm.commons.Remapper: java.lang.String mapDesc(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;
    }

    public java.lang.Object mapValue(java.lang.Object)
    {
        com.mycila.inject.internal.asm.Type $r2;
        java.lang.Object r0, $r3;
        com.mycila.inject.internal.asm.commons.Remapper r1;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.asm.commons.Remapper;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.asm.Type;

        if $z0 == 0 goto label1;

        $r2 = (com.mycila.inject.internal.asm.Type) r0;

        $r3 = specialinvoke r1.<com.mycila.inject.internal.asm.commons.Remapper: com.mycila.inject.internal.asm.Type mapType(com.mycila.inject.internal.asm.Type)>($r2);

        goto label2;

     label1:
        $r3 = r0;

     label2:
        return $r3;
    }

    public java.lang.String mapSignature(java.lang.String, boolean)
    {
        com.mycila.inject.internal.asm.signature.SignatureWriter $r2;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r4;
        com.mycila.inject.internal.asm.signature.SignatureReader $r1;
        com.mycila.inject.internal.asm.commons.Remapper r3;
        java.lang.String r0, $r5;
        boolean z0;

        r3 := @this: com.mycila.inject.internal.asm.commons.Remapper;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.mycila.inject.internal.asm.signature.SignatureReader;

        specialinvoke $r1.<com.mycila.inject.internal.asm.signature.SignatureReader: void <init>(java.lang.String)>(r0);

        $r2 = new com.mycila.inject.internal.asm.signature.SignatureWriter;

        specialinvoke $r2.<com.mycila.inject.internal.asm.signature.SignatureWriter: void <init>()>();

        $r4 = virtualinvoke r3.<com.mycila.inject.internal.asm.commons.Remapper: com.mycila.inject.internal.asm.signature.SignatureVisitor createRemappingSignatureAdapter(com.mycila.inject.internal.asm.signature.SignatureVisitor)>($r2);

        if z0 == 0 goto label2;

        virtualinvoke $r1.<com.mycila.inject.internal.asm.signature.SignatureReader: void acceptType(com.mycila.inject.internal.asm.signature.SignatureVisitor)>($r4);

        goto label3;

     label2:
        virtualinvoke $r1.<com.mycila.inject.internal.asm.signature.SignatureReader: void accept(com.mycila.inject.internal.asm.signature.SignatureVisitor)>($r4);

     label3:
        $r5 = virtualinvoke $r2.<com.mycila.inject.internal.asm.signature.SignatureWriter: java.lang.String toString()>();

        return $r5;
    }

    protected com.mycila.inject.internal.asm.signature.SignatureVisitor createRemappingSignatureAdapter(com.mycila.inject.internal.asm.signature.SignatureVisitor)
    {
        com.mycila.inject.internal.asm.commons.Remapper r2;
        com.mycila.inject.internal.asm.signature.SignatureVisitor r1;
        com.mycila.inject.internal.asm.commons.RemappingSignatureAdapter $r0;

        r2 := @this: com.mycila.inject.internal.asm.commons.Remapper;

        r1 := @parameter0: com.mycila.inject.internal.asm.signature.SignatureVisitor;

        $r0 = new com.mycila.inject.internal.asm.commons.RemappingSignatureAdapter;

        specialinvoke $r0.<com.mycila.inject.internal.asm.commons.RemappingSignatureAdapter: void <init>(com.mycila.inject.internal.asm.signature.SignatureVisitor,com.mycila.inject.internal.asm.commons.Remapper)>(r1, r2);

        return $r0;
    }

    public java.lang.String mapMethodName(java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.commons.Remapper r1;
        java.lang.String r0, r2, r3;

        r1 := @this: com.mycila.inject.internal.asm.commons.Remapper;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return r0;
    }

    public java.lang.String mapFieldName(java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.commons.Remapper r1;
        java.lang.String r0, r2, r3;

        r1 := @this: com.mycila.inject.internal.asm.commons.Remapper;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return r0;
    }

    public java.lang.String map(java.lang.String)
    {
        com.mycila.inject.internal.asm.commons.Remapper r1;
        java.lang.String r0;

        r1 := @this: com.mycila.inject.internal.asm.commons.Remapper;

        r0 := @parameter0: java.lang.String;

        return r0;
    }
}
