public class org.xmlpull.v1.util.XmlPullUtil extends java.lang.Object
{
    public static final java.lang.String XSI_NS;

    private void <init>()
    {
        org.xmlpull.v1.util.XmlPullUtil r0;

        r0 := @this: org.xmlpull.v1.util.XmlPullUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getAttributeValue(org.xmlpull.v1.XmlPullParser, java.lang.String)
    {
        java.lang.String r1, $r2;
        org.xmlpull.v1.XmlPullParser r0;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("", r1);

        return $r2;
    }

    public static java.lang.String getPITarget(org.xmlpull.v1.XmlPullParser) throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r3, $r13;
        java.lang.String[] $r6;
        java.lang.StringBuffer $r4, $r5, $r8, $r10, $r14, $r15, $r16, $r18;
        int $i0, $i1, i3;
        java.lang.String $r1, $r2, $r7, $r9, $r11, $r17, $r19;
        org.xmlpull.v1.XmlPullParser r0;
        boolean $z0;
        char $c2;
        org.xmlpull.v1.XmlPullParserException $r12;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

     label1:
        $i0 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = new java.lang.IllegalStateException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("could not determine parser state: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r12);

        $r17 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label4:
        if $i0 == 8 goto label5;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("parser must be on processing instruction and not ");

        $r6 = <org.xmlpull.v1.XmlPullParser: java.lang.String[] TYPES>;

        $r7 = $r6[$i0];

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label5:
        $r1 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        i3 = 0;

     label6:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i3 >= $i1 goto label8;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i3);

        $z0 = staticinvoke <org.xmlpull.v1.util.XmlPullUtil: boolean isS(char)>($c2);

        if $z0 == 0 goto label7;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        return $r2;

     label7:
        i3 = i3 + 1;

        goto label6;

     label8:
        return $r1;

        catch org.xmlpull.v1.XmlPullParserException from label1 to label2 with label3;
    }

    public static java.lang.String getPIData(org.xmlpull.v1.XmlPullParser) throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r21, $r23;
        java.lang.String[] $r6;
        java.lang.StringBuffer $r5, $r8, $r10, $r15, $r16, $r18, $r20, $r22;
        int $i0, $i1, i3, i4, $i6;
        java.lang.String $r1, $r2, $r7, $r9, $r11, $r17, $r19;
        org.xmlpull.v1.XmlPullParser r0;
        boolean $z0;
        char $c2;
        org.xmlpull.v1.XmlPullParserException $r12;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

     label1:
        $i0 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r21 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("could not determine parser state: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r12);

        $r17 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw $r21;

     label4:
        if $i0 == 8 goto label5;

        $r23 = new java.lang.IllegalStateException;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("parser must be on processing instruction and not ");

        $r6 = <org.xmlpull.v1.XmlPullParser: java.lang.String[] TYPES>;

        $r7 = $r6[$i0];

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r23;

     label5:
        $r1 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        $i6 = (int) -1;

        i3 = $i6;

        i4 = 0;

     label6:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i4 >= $i1 goto label9;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i4);

        $z0 = staticinvoke <org.xmlpull.v1.util.XmlPullUtil: boolean isS(char)>($c2);

        if $z0 == 0 goto label7;

        i3 = i4;

        goto label8;

     label7:
        if i3 <= 0 goto label8;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(i4);

        return $r2;

     label8:
        i4 = i4 + 1;

        goto label6;

     label9:
        return "";

        catch org.xmlpull.v1.XmlPullParserException from label1 to label2 with label3;
    }

    private static boolean isS(char)
    {
        int $i1, $i2, $i3, $i4;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 32 goto label1;

        $i2 = (int) c0;

        if $i2 == 10 goto label1;

        $i3 = (int) c0;

        if $i3 == 13 goto label1;

        $i4 = (int) c0;

        if $i4 != 9 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static void skipSubTree(org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        int $i0, i1, $i3;
        org.xmlpull.v1.XmlPullParser r0;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, null, null);

        i1 = 1;

     label1:
        if i1 <= 0 goto label4;

        $i0 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i0 != 3 goto label2;

        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label3;

     label2:
        if $i0 != 2 goto label3;

        i1 = i1 + 1;

     label3:
        goto label1;

     label4:
        return;
    }

    public static void nextStartTag(org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.XmlPullParserException $r1;
        java.lang.StringBuffer $r2, $r3, $r5;
        int $i0;
        java.lang.String $r4, $r6;
        org.xmlpull.v1.XmlPullParser r0;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $i0 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        if $i0 == 2 goto label1;

        $r1 = new org.xmlpull.v1.XmlPullParserException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected START_TAG and not ");

        $r4 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        return;
    }

    public static void nextStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.String r1;
        org.xmlpull.v1.XmlPullParser r0;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r1 := @parameter1: java.lang.String;

        interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, null, r1);

        return;
    }

    public static void nextStartTag(org.xmlpull.v1.XmlPullParser, java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.String r1, r2;
        org.xmlpull.v1.XmlPullParser r0;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, r1, r2);

        return;
    }

    public static void nextEndTag(org.xmlpull.v1.XmlPullParser, java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.String r1, r2;
        org.xmlpull.v1.XmlPullParser r0;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, r1, r2);

        return;
    }

    public static java.lang.String nextText(org.xmlpull.v1.XmlPullParser, java.lang.String, java.lang.String) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParserException $r4;
        java.lang.String r0, r2, $r3;
        org.xmlpull.v1.XmlPullParser r1;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        $r4 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r4.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("name for element can not be null");

        throw $r4;

     label1:
        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, r2, r0);

        $r3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        return $r3;
    }

    public static java.lang.String getRequiredAttributeValue(org.xmlpull.v1.XmlPullParser, java.lang.String, java.lang.String) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParserException $r4;
        java.lang.StringBuffer $r5, $r6, $r7, $r8;
        java.lang.String r1, r2, $r3, $r9;
        org.xmlpull.v1.XmlPullParser r0;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(r1, r2);

        if $r3 != null goto label1;

        $r4 = new org.xmlpull.v1.XmlPullParserException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("required attribute ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not present");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        return $r3;
    }

    public static void nextEndTag(org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.XmlPullParserException $r1;
        java.lang.StringBuffer $r2, $r3, $r5;
        int $i0;
        java.lang.String $r4, $r6;
        org.xmlpull.v1.XmlPullParser r0;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $i0 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        if $i0 == 3 goto label1;

        $r1 = new org.xmlpull.v1.XmlPullParserException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected END_TAG and not");

        $r4 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        return;
    }

    public static boolean matches(org.xmlpull.v1.XmlPullParser, int, java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException
    {
        int i0, $i1;
        java.lang.String r1, r2, $r3, $r4;
        org.xmlpull.v1.XmlPullParser r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        $i1 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if i0 != $i1 goto label3;

        if r1 == null goto label1;

        $r4 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

     label1:
        if r2 == null goto label2;

        $r3 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public static void writeSimpleElement(org.xmlpull.v1.XmlSerializer, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParserException $r4;
        java.lang.String r0, r2, r3;
        org.xmlpull.v1.XmlSerializer r1;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        if r0 != null goto label1;

        $r4 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r4.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("name for element can not be null");

        throw $r4;

     label1:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(r2, r0);

        if r3 != null goto label2;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2001/XMLSchema-instance", "nil", "true");

        goto label3;

     label2:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>(r3);

     label3:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(r2, r0);

        return;
    }

    public static void <clinit>()
    {
        <org.xmlpull.v1.util.XmlPullUtil: java.lang.String XSI_NS> = "http://www.w3.org/2001/XMLSchema-instance";

        return;
    }
}
