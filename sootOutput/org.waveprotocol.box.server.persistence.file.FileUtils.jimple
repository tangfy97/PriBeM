public class org.waveprotocol.box.server.persistence.file.FileUtils extends java.lang.Object
{
    private static final java.lang.String SEPARATOR;

    public void <init>()
    {
        org.waveprotocol.box.server.persistence.file.FileUtils r0;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String toFilenameFriendlyString(java.lang.String)
    {
        byte[] $r1;
        java.lang.IllegalStateException $r5;
        char[] $r3;
        java.lang.String r0, $r2;
        java.io.UnsupportedEncodingException $r4;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("UTF-8 not supported", $r4);

        throw $r5;

     label4:
        $r2 = new java.lang.String;

        $r3 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>($r1);

        specialinvoke $r2.<java.lang.String: void <init>(char[])>($r3);

        return $r2;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String fromFilenameFriendlyString(java.lang.String) throws org.apache.commons.codec.DecoderException
    {
        byte[] $r2;
        java.lang.IllegalStateException $r5;
        char[] $r1;
        java.lang.String r0, $r3;
        java.io.UnsupportedEncodingException $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r2 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($r1);

     label1:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, "UTF-8");

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("UTF-8 not supported", $r4);

        throw $r5;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    private static org.waveprotocol.wave.model.util.Pair decodePathSegmentPair(java.lang.String)
    {
        org.apache.commons.codec.DecoderException $r7;
        java.lang.String[] $r1;
        java.lang.IllegalArgumentException $r8;
        org.waveprotocol.wave.model.util.Pair $r2;
        int $i0;
        java.lang.String r0, $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("_");

        $i0 = lengthof $r1;

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "WaveId path name invalid");

     label3:
        $r2 = new org.waveprotocol.wave.model.util.Pair;

        $r3 = $r1[0];

        $r4 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: java.lang.String fromFilenameFriendlyString(java.lang.String)>($r3);

        $r5 = $r1[1];

        $r6 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: java.lang.String fromFilenameFriendlyString(java.lang.String)>($r5);

        specialinvoke $r2.<org.waveprotocol.wave.model.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r4, $r6);

     label4:
        return $r2;

     label5:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wave path component encoding invalid");

        throw $r8;

        catch org.apache.commons.codec.DecoderException from label3 to label4 with label5;
    }

    public static java.lang.String waveIdToPathSegment(org.waveprotocol.wave.model.id.WaveId)
    {
        org.waveprotocol.wave.model.id.WaveId r0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r1, $r2, $r3, $r4, $r9;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String getDomain()>();

        $r2 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: java.lang.String toFilenameFriendlyString(java.lang.String)>($r1);

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String getId()>();

        $r4 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: java.lang.String toFilenameFriendlyString(java.lang.String)>($r3);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static org.waveprotocol.wave.model.id.WaveId waveIdFromPathSegment(java.lang.String)
    {
        org.waveprotocol.wave.model.id.WaveId $r6;
        java.lang.Object $r2, $r3;
        java.lang.String r0, $r4, $r5;
        org.waveprotocol.wave.model.util.Pair $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: org.waveprotocol.wave.model.util.Pair decodePathSegmentPair(java.lang.String)>(r0);

        $r2 = $r1.<org.waveprotocol.wave.model.util.Pair: java.lang.Object first>;

        $r5 = (java.lang.String) $r2;

        $r3 = $r1.<org.waveprotocol.wave.model.util.Pair: java.lang.Object second>;

        $r4 = (java.lang.String) $r3;

        $r6 = staticinvoke <org.waveprotocol.wave.model.id.WaveId: org.waveprotocol.wave.model.id.WaveId of(java.lang.String,java.lang.String)>($r5, $r4);

        return $r6;
    }

    public static java.lang.String waveletIdToPathSegment(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r1, $r2, $r3, $r4, $r9;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getDomain()>();

        $r2 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: java.lang.String toFilenameFriendlyString(java.lang.String)>($r1);

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getId()>();

        $r4 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: java.lang.String toFilenameFriendlyString(java.lang.String)>($r3);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static org.waveprotocol.wave.model.id.WaveletId waveletIdFromPathSegment(java.lang.String)
    {
        java.lang.Object $r2, $r3;
        org.waveprotocol.wave.model.id.WaveletId $r6;
        java.lang.String r0, $r4, $r5;
        org.waveprotocol.wave.model.util.Pair $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: org.waveprotocol.wave.model.util.Pair decodePathSegmentPair(java.lang.String)>(r0);

        $r2 = $r1.<org.waveprotocol.wave.model.util.Pair: java.lang.Object first>;

        $r5 = (java.lang.String) $r2;

        $r3 = $r1.<org.waveprotocol.wave.model.util.Pair: java.lang.Object second>;

        $r4 = (java.lang.String) $r3;

        $r6 = staticinvoke <org.waveprotocol.wave.model.id.WaveletId: org.waveprotocol.wave.model.id.WaveletId of(java.lang.String,java.lang.String)>($r5, $r4);

        return $r6;
    }

    public static java.lang.String waveletNameToPathSegment(org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.model.id.WaveId $r2;
        char $c0;
        org.waveprotocol.wave.model.id.WaveletId $r6;
        java.lang.StringBuilder $r0, $r4, $r5, $r8;
        java.lang.String $r3, $r7, $r9;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r3 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: java.lang.String waveIdToPathSegment(org.waveprotocol.wave.model.id.WaveId)>($r2);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $c0 = <java.io.File: char separatorChar>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r6 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r7 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: java.lang.String waveletIdToPathSegment(org.waveprotocol.wave.model.id.WaveletId)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static java.io.RandomAccessFile getOrCreateFile(java.io.File) throws java.io.IOException
    {
        java.io.RandomAccessFile $r1;
        java.lang.IllegalStateException $r4;
        java.io.File r0, $r2;
        java.io.FileNotFoundException $r3;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r2.<java.io.File: boolean mkdirs()>();

        virtualinvoke r0.<java.io.File: boolean createNewFile()>();

     label1:
        $r1 = new java.io.RandomAccessFile;

        specialinvoke $r1.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r0, "rw");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Java said the file exists, but it can\'t open it", $r3);

        throw $r4;

     label4:
        return $r1;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public static java.io.File createTemporaryDirectory() throws java.io.IOException
    {
        java.io.IOException $r1;
        java.io.File $r0, $r6;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0, $z1;

        $r0 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("fedoneattachments", null);

        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke $r0.<java.io.File: boolean mkdir()>();

        if $z1 != 0 goto label2;

     label1:
        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not make temporary directory for attachment store: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        $r6 = virtualinvoke $r0.<java.io.File: java.io.File getAbsoluteFile()>();

        return $r6;
    }

    public static void closeAndIgnoreException(java.io.Closeable, java.io.File, org.waveprotocol.wave.util.logging.Log)
    {
        java.io.IOException $r1;
        java.io.File r5;
        java.io.Closeable r0;
        org.waveprotocol.wave.util.logging.Log r2;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.String $r6, $r8;

        r0 := @parameter0: java.io.Closeable;

        r5 := @parameter1: java.io.File;

        r2 := @parameter2: org.waveprotocol.wave.util.logging.Log;

        if r0 == null goto label4;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close file: ");

        $r6 = virtualinvoke r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>($r8, $r1);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void performDirectoryChecks(java.lang.String, java.lang.String, java.lang.String, org.waveprotocol.wave.util.logging.Log) throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        byte[] $r8;
        java.lang.Object[] $r12, $r16, $r20;
        org.waveprotocol.box.server.persistence.PersistenceException $r11, $r15, $r19;
        org.waveprotocol.box.server.persistence.file.FileUtils$1 $r3;
        int $i0;
        org.waveprotocol.wave.util.logging.Log r24;
        java.lang.String r0, r1, r4, $r13, $r17, $r22, $r23;
        java.io.FileOutputStream $r7;
        java.io.IOException $r14, $r18;
        java.io.FileInputStream $r9;
        java.io.File $r2, $r6, $r10, $r21;
        java.io.File[] $r5;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r24 := @parameter3: org.waveprotocol.wave.util.logging.Log;

        $r2 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: java.io.File createDirIfNotExists(java.lang.String,java.lang.String)>(r0, r1);

        $r3 = new org.waveprotocol.box.server.persistence.file.FileUtils$1;

        specialinvoke $r3.<org.waveprotocol.box.server.persistence.file.FileUtils$1: void <init>(java.lang.String)>(r4);

        $r5 = virtualinvoke $r2.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r3);

        if $r5 != null goto label1;

        $r11 = new org.waveprotocol.box.server.persistence.PersistenceException;

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = r1;

        $r12[1] = r0;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Configured %s directory (%s) does not appear to be readable!", $r12);

        specialinvoke $r11.<org.waveprotocol.box.server.persistence.PersistenceException: void <init>(java.lang.String)>($r13);

        throw $r11;

     label1:
        $i0 = lengthof $r5;

        if $i0 <= 0 goto label5;

     label2:
        $r9 = new java.io.FileInputStream;

        $r10 = $r5[0];

        specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>($r10);

        virtualinvoke $r9.<java.io.FileInputStream: int read()>();

     label3:
        goto label5;

     label4:
        $r18 := @caughtexception;

        $r19 = new org.waveprotocol.box.server.persistence.PersistenceException;

        $r20 = newarray (java.lang.Object)[3];

        $r20[0] = r1;

        $r21 = $r5[0];

        $r22 = virtualinvoke $r21.<java.io.File: java.lang.String getName()>();

        $r20[1] = $r22;

        $r20[2] = r0;

        $r23 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to read \'%s\' in configured %s directory \'%s\'. The directory\'s contents do not appear to be readable.", $r20);

        specialinvoke $r19.<org.waveprotocol.box.server.persistence.PersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r23, $r18);

        throw $r19;

     label5:
        $r6 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("tempInitialization", ".temp", $r2);

        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

        $r8 = newarray (byte)[5];

        $r8[0] = 72;

        $r8[1] = 101;

        $r8[2] = 108;

        $r8[3] = 108;

        $r8[4] = 111;

        virtualinvoke $r7.<java.io.FileOutputStream: void write(byte[])>($r8);

        virtualinvoke $r7.<java.io.FileOutputStream: void close()>();

        virtualinvoke $r6.<java.io.File: boolean delete()>();

     label6:
        goto label8;

     label7:
        $r14 := @caughtexception;

        $r15 = new org.waveprotocol.box.server.persistence.PersistenceException;

        $r16 = newarray (java.lang.Object)[2];

        $r16[0] = r1;

        $r16[1] = r0;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Configured %s directory (%s) does not appear to be writable!", $r16);

        specialinvoke $r15.<org.waveprotocol.box.server.persistence.PersistenceException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r14);

        throw $r15;

     label8:
        return;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public static java.io.File createDirIfNotExists(java.lang.String, java.lang.String) throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        java.lang.Object[] $r3, $r7;
        org.waveprotocol.box.server.persistence.PersistenceException $r2, $r6;
        java.io.File $r0;
        java.lang.String r1, r4, $r5, $r8;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke $r0.<java.io.File: boolean mkdirs()>();

        if $z2 != 0 goto label1;

        $r6 = new org.waveprotocol.box.server.persistence.PersistenceException;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r4;

        $r7[1] = r1;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Configured %s directory (%s) doesn\'t exist and could not be created!", $r7);

        specialinvoke $r6.<org.waveprotocol.box.server.persistence.PersistenceException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label1:
        $z1 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label2;

        $r2 = new org.waveprotocol.box.server.persistence.PersistenceException;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r4;

        $r3[1] = r1;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Configured %s path (%s) isn\'t a directory!", $r3);

        specialinvoke $r2.<org.waveprotocol.box.server.persistence.PersistenceException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label2:
        return $r0;
    }

    public static java.lang.String getStringFromFile(java.lang.String) throws java.io.IOException
    {
        java.lang.StringBuilder $r0;
        java.lang.String r2, $r5, $r6;
        java.io.FileReader $r3;
        java.io.BufferedReader $r4;
        java.io.File $r1;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        $r3 = new java.io.FileReader;

        specialinvoke $r3.<java.io.FileReader: void <init>(java.io.File)>($r1);

        $r4 = new java.io.BufferedReader;

        specialinvoke $r4.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

     label1:
        $r5 = virtualinvoke $r4.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r5 == null goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        goto label1;

     label2:
        virtualinvoke $r3.<java.io.FileReader: void close()>();

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static boolean isDirExistsAndNonEmpty(java.lang.String)
    {
        int $i0;
        java.lang.String[] $r2;
        java.lang.String r1;
        java.io.File $r0;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label1;

        $r2 = virtualinvoke $r0.<java.io.File: java.lang.String[] list()>();

        $i0 = lengthof $r2;

        if $i0 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.box.server.persistence.file.FileUtils: java.lang.String SEPARATOR> = "_";

        return;
    }
}
