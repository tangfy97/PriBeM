public class org.apache.batik.svggen.SVGBasicStroke extends org.apache.batik.svggen.AbstractSVGConverter
{

    public void <init>(org.apache.batik.svggen.SVGGeneratorContext)
    {
        org.apache.batik.svggen.SVGBasicStroke r0;
        org.apache.batik.svggen.SVGGeneratorContext r1;

        r0 := @this: org.apache.batik.svggen.SVGBasicStroke;

        r1 := @parameter0: org.apache.batik.svggen.SVGGeneratorContext;

        specialinvoke r0.<org.apache.batik.svggen.AbstractSVGConverter: void <init>(org.apache.batik.svggen.SVGGeneratorContext)>(r1);

        return;
    }

    public org.apache.batik.svggen.SVGDescriptor toSVG(org.apache.batik.ext.awt.g2d.GraphicContext)
    {
        java.awt.Stroke $r1, $r3;
        org.apache.batik.svggen.SVGBasicStroke r2;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        java.awt.BasicStroke $r4;
        boolean $z0;
        org.apache.batik.svggen.SVGStrokeDescriptor $r5;

        r2 := @this: org.apache.batik.svggen.SVGBasicStroke;

        r0 := @parameter0: org.apache.batik.ext.awt.g2d.GraphicContext;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Stroke getStroke()>();

        $z0 = $r1 instanceof java.awt.BasicStroke;

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Stroke getStroke()>();

        $r4 = (java.awt.BasicStroke) $r3;

        $r5 = virtualinvoke r2.<org.apache.batik.svggen.SVGBasicStroke: org.apache.batik.svggen.SVGStrokeDescriptor toSVG(java.awt.BasicStroke)>($r4);

        return $r5;

     label1:
        return null;
    }

    public final org.apache.batik.svggen.SVGStrokeDescriptor toSVG(java.awt.BasicStroke)
    {
        org.apache.batik.svggen.SVGBasicStroke r0;
        float[] $r6;
        int $i0, $i1;
        java.lang.String $r2, $r3, $r4, $r5, $r7, r9;
        double $d0, $d1, $d2;
        float $f0, $f1, $f2;
        java.awt.BasicStroke r1;
        org.apache.batik.svggen.SVGStrokeDescriptor $r8;

        r0 := @this: org.apache.batik.svggen.SVGBasicStroke;

        r1 := @parameter0: java.awt.BasicStroke;

        $f0 = virtualinvoke r1.<java.awt.BasicStroke: float getLineWidth()>();

        $d0 = (double) $f0;

        $r2 = virtualinvoke r0.<org.apache.batik.svggen.AbstractSVGConverter: java.lang.String doubleString(double)>($d0);

        $i0 = virtualinvoke r1.<java.awt.BasicStroke: int getEndCap()>();

        $r3 = staticinvoke <org.apache.batik.svggen.SVGBasicStroke: java.lang.String endCapToSVG(int)>($i0);

        $i1 = virtualinvoke r1.<java.awt.BasicStroke: int getLineJoin()>();

        $r4 = staticinvoke <org.apache.batik.svggen.SVGBasicStroke: java.lang.String joinToSVG(int)>($i1);

        $f1 = virtualinvoke r1.<java.awt.BasicStroke: float getMiterLimit()>();

        $d1 = (double) $f1;

        $r5 = virtualinvoke r0.<org.apache.batik.svggen.AbstractSVGConverter: java.lang.String doubleString(double)>($d1);

        $r6 = virtualinvoke r1.<java.awt.BasicStroke: float[] getDashArray()>();

        if $r6 == null goto label1;

        r9 = specialinvoke r0.<org.apache.batik.svggen.SVGBasicStroke: java.lang.String dashArrayToSVG(float[])>($r6);

        goto label2;

     label1:
        r9 = "none";

     label2:
        $f2 = virtualinvoke r1.<java.awt.BasicStroke: float getDashPhase()>();

        $d2 = (double) $f2;

        $r7 = virtualinvoke r0.<org.apache.batik.svggen.AbstractSVGConverter: java.lang.String doubleString(double)>($d2);

        $r8 = new org.apache.batik.svggen.SVGStrokeDescriptor;

        specialinvoke $r8.<org.apache.batik.svggen.SVGStrokeDescriptor: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4, $r5, r9, $r7);

        return $r8;
    }

    private final java.lang.String dashArrayToSVG(float[])
    {
        org.apache.batik.svggen.SVGBasicStroke r2;
        float[] r1;
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2, $i3, i4;
        float $f0, $f1;
        java.lang.String $r3, $r4, $r5;
        double $d0, $d1;

        r2 := @this: org.apache.batik.svggen.SVGBasicStroke;

        r1 := @parameter0: float[];

        $r0 = new java.lang.StringBuffer;

        $i0 = lengthof r1;

        $i1 = $i0 * 8;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i1);

        $i2 = lengthof r1;

        if $i2 <= 0 goto label1;

        $f1 = r1[0];

        $d1 = (double) $f1;

        $r5 = virtualinvoke r2.<org.apache.batik.svggen.AbstractSVGConverter: java.lang.String doubleString(double)>($d1);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

     label1:
        i4 = 1;

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $f0 = r1[i4];

        $d0 = (double) $f0;

        $r3 = virtualinvoke r2.<org.apache.batik.svggen.AbstractSVGConverter: java.lang.String doubleString(double)>($d0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        i4 = i4 + 1;

     label3:
        $i3 = lengthof r1;

        if i4 < $i3 goto label2;

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    private static java.lang.String joinToSVG(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            case 2: goto label1;
            default: goto label3;
        };

     label1:
        return "bevel";

     label2:
        return "round";

     label3:
        return "miter";
    }

    private static java.lang.String endCapToSVG(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label3;
        };

     label1:
        return "butt";

     label2:
        return "round";

     label3:
        return "square";
    }
}
