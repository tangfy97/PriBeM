public class org.waveprotocol.wave.model.id.SimplePrefixEscaper extends java.lang.Object
{
    public static final org.waveprotocol.wave.model.id.SimplePrefixEscaper DEFAULT_ESCAPER;
    private static final java.lang.String[] EMPTY_STRING_ARRAY;
    private final java.util.Set needsEscaping;
    private final char prefix;

    public transient void <init>(char, char[])
    {
        java.util.Set $r2, $r5;
        char c0, c2;
        java.util.HashSet $r1;
        org.waveprotocol.wave.model.id.SimplePrefixEscaper r0;
        java.lang.Character $r3, $r6;
        int i1, i3;
        char[] r4;

        r0 := @this: org.waveprotocol.wave.model.id.SimplePrefixEscaper;

        c0 := @parameter0: char;

        r4 := @parameter1: char[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.util.Set needsEscaping> = $r1;

        r0.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: char prefix> = c0;

        $r2 = r0.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.util.Set needsEscaping>;

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        i1 = lengthof r4;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        c2 = r4[i3];

        $r5 = r0.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.util.Set needsEscaping>;

        $r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r6);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.String escape(java.lang.String)
    {
        java.util.Set $r4;
        char $c2, $c3, $c4;
        org.waveprotocol.wave.model.id.SimplePrefixEscaper r3;
        java.lang.Character $r5;
        int $i0, $i1, i5;
        java.lang.StringBuilder $r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.model.id.SimplePrefixEscaper;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>($i0);

        i5 = 0;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if i5 >= $i1 goto label3;

        $r4 = r3.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.util.Set needsEscaping>;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        $c4 = r3.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: char prefix>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

     label2:
        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        i5 = i5 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String unescape(java.lang.String)
    {
        java.lang.Character $r5, $r12;
        boolean $z0, $z1;
        java.util.Set $r4, $r11;
        java.lang.StringBuilder $r8, $r9, $r15, $r16, $r20, $r21, $r23, $r24, $r26, $r28;
        int $i0, $i1, $i2, $i7, $i8, $i9, i12, $i13, $i14;
        java.lang.String r1, $r2, $r10, $r17, $r22;
        char $c3, $c4, $c5, $c6, $c10, $c11;
        java.lang.IllegalArgumentException $r25, $r27, $r29;
        org.waveprotocol.wave.model.id.SimplePrefixEscaper r3;

        r3 := @this: org.waveprotocol.wave.model.id.SimplePrefixEscaper;

        r1 := @parameter0: java.lang.String;

        $r23 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = $i0 / 2;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(int)>($i1);

        i12 = 0;

     label1:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if i12 >= $i2 goto label6;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i12);

        $c4 = r3.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: char prefix>;

        $i13 = (int) $c3;

        $i14 = (int) $c4;

        if $i13 != $i14 goto label4;

        $i7 = i12 + 1;

        $i8 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i7 < $i8 goto label2;

        $r25 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The value to unescape cannot be terminated with the prefix: ");

        $c11 = r3.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: char prefix>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c11);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r25;

     label2:
        $r11 = r3.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.util.Set needsEscaping>;

        $i9 = i12 + 1;

        $c10 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i9);

        $r12 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c10);

        $z1 = interfaceinvoke $r11.<java.util.Set: boolean contains(java.lang.Object)>($r12);

        if $z1 != 0 goto label3;

        $r27 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The value to unescape is not a properly escaped value. The prefix charater is not followed by a character at needs prefixing: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r27;

     label3:
        i12 = i12 + 1;

        goto label5;

     label4:
        $r4 = r3.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.util.Set needsEscaping>;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i12);

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c5);

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z0 == 0 goto label5;

        $r29 = new java.lang.IllegalArgumentException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The value to unescape is not a properly escaped value. Some chars are found unescaped: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r29;

     label5:
        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i12);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        i12 = i12 + 1;

        goto label1;

     label6:
        $r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public transient java.lang.String join(char, java.lang.String[])
    {
        java.lang.String[] r1;
        java.lang.Character $r3;
        int $i2, $i3, i4, $i5, $i6;
        java.lang.String $r5, $r6, $r7, $r13;
        boolean $z0;
        java.util.Set $r2;
        char c0, $c1;
        java.lang.IllegalArgumentException $r16, $r17, $r19;
        org.waveprotocol.wave.model.id.SimplePrefixEscaper r0;
        java.lang.StringBuilder $r10, $r11, $r12, $r18, $r20;

        r0 := @this: org.waveprotocol.wave.model.id.SimplePrefixEscaper;

        c0 := @parameter0: char;

        r1 := @parameter1: java.lang.String[];

        $c1 = r0.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: char prefix>;

        $i5 = (int) c0;

        $i6 = (int) $c1;

        if $i5 != $i6 goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("It\'s unsafe to join strings together using the prefixchar.");

        throw $r16;

     label1:
        $i2 = lengthof r1;

        if $i2 != 0 goto label2;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must have at least 1 token to use join.");

        throw $r17;

     label2:
        $r2 = r0.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.util.Set needsEscaping>;

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        $r19 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("It\'s unsafe to join strings together using a [separator:");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] that is not in the characters that are escaped.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r19;

     label3:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        i4 = 0;

     label4:
        $i3 = lengthof r1;

        if i4 >= $i3 goto label6;

        if i4 <= 0 goto label5;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label5:
        $r6 = r1[i4];

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.lang.String escape(java.lang.String)>($r6);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        i4 = i4 + 1;

        goto label4;

     label6:
        $r5 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.String[] split(char, java.lang.String)
    {
        char c0;
        java.lang.String[] $r2;
        org.waveprotocol.wave.model.id.SimplePrefixEscaper r0;
        int $i1, i2;
        java.lang.String r1, $r3, $r4;

        r0 := @this: org.waveprotocol.wave.model.id.SimplePrefixEscaper;

        c0 := @parameter0: char;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.lang.String[] splitWithoutUnescaping(char,java.lang.String)>(c0, r1);

        i2 = 0;

     label1:
        $i1 = lengthof $r2;

        if i2 >= $i1 goto label2;

        $r3 = $r2[i2];

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.lang.String unescape(java.lang.String)>($r3);

        $r2[i2] = $r4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public java.lang.String[] splitWithoutUnescaping(char, java.lang.String)
    {
        java.lang.Object[] $r4;
        java.lang.String[] $r3, $r5;
        java.util.ArrayList $r9;
        byte $b11;
        int $i2, $i3, $i4, $i8, i9, i10, $i12, $i13, $i14, $i15, $i16, $i17;
        java.lang.String r2, $r6;
        char c0, $c1, $c5, $c6, $c7;
        java.lang.IllegalArgumentException $r8;
        org.waveprotocol.wave.model.id.SimplePrefixEscaper r0;

        r0 := @this: org.waveprotocol.wave.model.id.SimplePrefixEscaper;

        c0 := @parameter0: char;

        r2 := @parameter1: java.lang.String;

        $c1 = r0.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: char prefix>;

        $i12 = (int) c0;

        $i13 = (int) $c1;

        if $i12 != $i13 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("It\'s unsafe to split strings together the prefix char.");

        throw $r8;

     label1:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        i9 = 0;

     label2:
        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        if i9 > $i2 goto label8;

        i10 = i9;

     label3:
        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if i10 >= $i3 goto label6;

        $c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i10);

        $i14 = (int) $c5;

        $i15 = (int) c0;

        if $i14 == $i15 goto label6;

        $i8 = i10;

        $c6 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i10);

        $c7 = r0.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: char prefix>;

        $i16 = (int) $c6;

        $i17 = (int) $c7;

        if $i16 != $i17 goto label4;

        $b11 = 2;

        goto label5;

     label4:
        $b11 = 1;

     label5:
        i10 = $i8 + $b11;

        goto label3;

     label6:
        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        if i10 < $i4 goto label7;

        i10 = virtualinvoke r2.<java.lang.String: int length()>();

     label7:
        $r6 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i9, i10);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        i9 = i10 + 1;

        goto label2;

     label8:
        $r3 = <org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.lang.String[] EMPTY_STRING_ARRAY>;

        $r4 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    public boolean isEscapedProperly(char, java.lang.String)
    {
        java.lang.Character $r3, $r5;
        int $i0, $i4, $i5, $i6, i8, $i9, $i10, $i11, $i12;
        java.lang.String r0;
        boolean $z0, $z1;
        java.util.Set $r2, $r4;
        char $c1, $c2, c3, $c7;
        org.waveprotocol.wave.model.id.SimplePrefixEscaper r1;

        r1 := @this: org.waveprotocol.wave.model.id.SimplePrefixEscaper;

        c3 := @parameter0: char;

        r0 := @parameter1: java.lang.String;

        i8 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i8 >= $i0 goto label6;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i8);

        $c2 = r1.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: char prefix>;

        $i9 = (int) $c1;

        $i10 = (int) $c2;

        if $i9 != $i10 goto label4;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        if i8 >= $i5 goto label2;

        $r4 = r1.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.util.Set needsEscaping>;

        $i6 = i8 + 1;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6);

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c7);

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z1 != 0 goto label3;

     label2:
        return 0;

     label3:
        i8 = i8 + 1;

        goto label5;

     label4:
        $i11 = (int) $c1;

        $i12 = (int) c3;

        if $i11 == $i12 goto label5;

        $r2 = r1.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.util.Set needsEscaping>;

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label5;

        return 0;

     label5:
        i8 = i8 + 1;

        goto label1;

     label6:
        return 1;
    }

    public boolean hasEscapeCharacters(java.lang.String)
    {
        java.util.Set $r2;
        char $c1;
        org.waveprotocol.wave.model.id.SimplePrefixEscaper r1;
        java.lang.Character $r3;
        int $i0, i2;
        java.lang.String r0;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.id.SimplePrefixEscaper;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i0 goto label3;

        $r2 = r1.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.util.Set needsEscaping>;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    static void <clinit>()
    {
        char[] $r1;
        org.waveprotocol.wave.model.id.SimplePrefixEscaper $r0;
        java.lang.String[] $r2;

        $r0 = new org.waveprotocol.wave.model.id.SimplePrefixEscaper;

        $r1 = newarray (char)[2];

        $r1[0] = 43;

        $r1[1] = 33;

        specialinvoke $r0.<org.waveprotocol.wave.model.id.SimplePrefixEscaper: void <init>(char,char[])>(126, $r1);

        <org.waveprotocol.wave.model.id.SimplePrefixEscaper: org.waveprotocol.wave.model.id.SimplePrefixEscaper DEFAULT_ESCAPER> = $r0;

        $r2 = newarray (java.lang.String)[0];

        <org.waveprotocol.wave.model.id.SimplePrefixEscaper: java.lang.String[] EMPTY_STRING_ARRAY> = $r2;

        return;
    }
}
