public final class de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter extends java.lang.Object implements de.l3s.boilerpipe.BoilerpipeFilter
{
    public static final de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter INSTANCE;
    private int minWords;
    private final boolean acceptClausesWithoutDelimiter;
    private final java.util.regex.Pattern PAT_CLAUSE_DELIMITER;
    private final java.util.regex.Pattern PAT_WHITESPACE;

    public void <init>(int)
    {
        de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter r0;
        int i0;

        r0 := @this: de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter;

        i0 := @parameter0: int;

        specialinvoke r0.<de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter: void <init>(int,boolean)>(i0, 0);

        return;
    }

    public void <init>(int, boolean)
    {
        de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter r0;
        int i0;
        java.util.regex.Pattern $r1, $r2;
        boolean z0;

        r0 := @this: de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[\\p{L}\\d][\\,\\.\\:\\;\\!\\?]+([ \\n\\r]+|$)");

        r0.<de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter: java.util.regex.Pattern PAT_CLAUSE_DELIMITER> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[ \\n\\r]+");

        r0.<de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter: java.util.regex.Pattern PAT_WHITESPACE> = $r2;

        r0.<de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter: int minWords> = i0;

        r0.<de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter: boolean acceptClausesWithoutDelimiter> = z0;

        return;
    }

    public boolean process(de.l3s.boilerpipe.document.TextDocument) throws de.l3s.boilerpipe.BoilerpipeProcessingException
    {
        de.l3s.boilerpipe.document.TextDocument r0;
        java.util.regex.Matcher $r8;
        de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter r6;
        int $i0, $i1, i2, i3;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3, z4, $z5, z6, z7;
        java.util.Iterator $r2;
        java.lang.CharSequence $r9, $r10;
        java.util.List $r1;
        de.l3s.boilerpipe.document.TextBlock r4;
        java.lang.Object $r3;
        java.util.regex.Pattern $r7;

        r6 := @this: de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter;

        r0 := @parameter0: de.l3s.boilerpipe.document.TextDocument;

        z4 = 0;

        $r1 = virtualinvoke r0.<de.l3s.boilerpipe.document.TextDocument: java.util.List getTextBlocks()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z5 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label8;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (de.l3s.boilerpipe.document.TextBlock) $r3;

        $z0 = virtualinvoke r4.<de.l3s.boilerpipe.document.TextBlock: boolean isContent()>();

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        $r5 = virtualinvoke r4.<de.l3s.boilerpipe.document.TextBlock: java.lang.String getText()>();

        $r7 = r6.<de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter: java.util.regex.Pattern PAT_CLAUSE_DELIMITER>;

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r5);

        z6 = virtualinvoke $r8.<java.util.regex.Matcher: boolean find()>();

        i2 = 0;

        z7 = 0;

     label3:
        if z6 == 0 goto label5;

        $i1 = virtualinvoke $r8.<java.util.regex.Matcher: int start()>();

        i3 = $i1 + 1;

        $r10 = virtualinvoke $r5.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(i2, i3);

        $z3 = specialinvoke r6.<de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter: boolean isClause(java.lang.CharSequence)>($r10);

        z7 = $z3;

        i2 = virtualinvoke $r8.<java.util.regex.Matcher: int end()>();

        if $z3 == 0 goto label4;

        goto label5;

     label4:
        z6 = virtualinvoke $r8.<java.util.regex.Matcher: boolean find()>();

        goto label3;

     label5:
        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $z1 = r6.<de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter: boolean acceptClausesWithoutDelimiter>;

        if $z1 == 0 goto label6;

        $r9 = virtualinvoke $r5.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(i2, $i0);

        $z2 = specialinvoke r6.<de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter: boolean isClause(java.lang.CharSequence)>($r9);

        z7 = z7 | $z2;

     label6:
        if z7 != 0 goto label7;

        virtualinvoke r4.<de.l3s.boilerpipe.document.TextBlock: boolean setIsContent(boolean)>(0);

        z4 = 1;

     label7:
        goto label1;

     label8:
        return z4;
    }

    private boolean isClause(java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        java.util.regex.Matcher $r3;
        de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter r0;
        int $i0, $i1, i2;
        java.util.regex.Pattern $r2;
        boolean $z0, $z1;

        r0 := @this: de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter: java.util.regex.Pattern PAT_WHITESPACE>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        i2 = 1;

     label1:
        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        i2 = i2 + 1;

        $i1 = r0.<de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter: int minWords>;

        if i2 < $i1 goto label1;

        return 1;

     label2:
        $i0 = r0.<de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter: int minWords>;

        if i2 < $i0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    static void <clinit>()
    {
        de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter $r0;

        $r0 = new de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter;

        specialinvoke $r0.<de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter: void <init>(int,boolean)>(5, 0);

        <de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter: de.l3s.boilerpipe.filters.simple.MinClauseWordsFilter INSTANCE> = $r0;

        return;
    }
}
