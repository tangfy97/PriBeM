public class org.eclipse.jetty.client.webdav.WebdavListener extends org.eclipse.jetty.client.HttpEventListenerWrapper
{
    private static final org.eclipse.jetty.util.log.Logger LOG;
    private org.eclipse.jetty.client.HttpDestination _destination;
    private org.eclipse.jetty.client.HttpExchange _exchange;
    private boolean _requestComplete;
    private boolean _responseComplete;
    private boolean _webdavEnabled;
    private boolean _needIntercept;

    public void <init>(org.eclipse.jetty.client.HttpDestination, org.eclipse.jetty.client.HttpExchange)
    {
        org.eclipse.jetty.client.webdav.WebdavListener r0;
        org.eclipse.jetty.client.HttpEventListener $r2;
        java.lang.String $r5, $r6;
        org.eclipse.jetty.client.HttpExchange r1, $r4;
        org.eclipse.jetty.client.HttpDestination r3;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.client.webdav.WebdavListener;

        r3 := @parameter0: org.eclipse.jetty.client.HttpDestination;

        r1 := @parameter1: org.eclipse.jetty.client.HttpExchange;

        $r2 = virtualinvoke r1.<org.eclipse.jetty.client.HttpExchange: org.eclipse.jetty.client.HttpEventListener getEventListener()>();

        specialinvoke r0.<org.eclipse.jetty.client.HttpEventListenerWrapper: void <init>(org.eclipse.jetty.client.HttpEventListener,boolean)>($r2, 1);

        r0.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpDestination _destination> = r3;

        r0.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpExchange _exchange> = r1;

        $r5 = "PUT";

        $r4 = r0.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpExchange _exchange>;

        $r6 = virtualinvoke $r4.<org.eclipse.jetty.client.HttpExchange: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z0 == 0 goto label1;

        r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _webdavEnabled> = 1;

     label1:
        return;
    }

    public void onResponseStatus(org.eclipse.jetty.io.Buffer, int, org.eclipse.jetty.io.Buffer) throws java.io.IOException
    {
        java.lang.Object[] $r5, $r8, $r15;
        int i0;
        java.lang.String $r14;
        org.eclipse.jetty.io.Buffer r3, r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.eclipse.jetty.client.webdav.WebdavListener r0;
        java.lang.StringBuilder $r10, $r12, $r13;
        org.eclipse.jetty.util.log.Logger $r1, $r2, $r6, $r7, $r9, $r11;

        r0 := @this: org.eclipse.jetty.client.webdav.WebdavListener;

        r3 := @parameter0: org.eclipse.jetty.io.Buffer;

        i0 := @parameter1: int;

        r4 := @parameter2: org.eclipse.jetty.io.Buffer;

        $z0 = r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _webdavEnabled>;

        if $z0 != 0 goto label1;

        r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _needIntercept> = 0;

        specialinvoke r0.<org.eclipse.jetty.client.HttpEventListenerWrapper: void onResponseStatus(org.eclipse.jetty.io.Buffer,int,org.eclipse.jetty.io.Buffer)>(r3, i0, r4);

        return;

     label1:
        $r1 = <org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.util.log.Logger LOG>;

        $z1 = interfaceinvoke $r1.<org.eclipse.jetty.util.log.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label2;

        $r11 = <org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.util.log.Logger LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WebdavListener:Response Status: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = newarray (java.lang.Object)[0];

        interfaceinvoke $r11.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>($r14, $r15);

     label2:
        if i0 == 403 goto label3;

        if i0 != 409 goto label7;

     label3:
        $z2 = r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _webdavEnabled>;

        if $z2 == 0 goto label5;

        $r7 = <org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.util.log.Logger LOG>;

        $z4 = interfaceinvoke $r7.<org.eclipse.jetty.util.log.Logger: boolean isDebugEnabled()>();

        if $z4 == 0 goto label4;

        $r9 = <org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.util.log.Logger LOG>;

        $r8 = newarray (java.lang.Object)[0];

        interfaceinvoke $r9.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("WebdavListener:Response Status: dav enabled, taking a stab at resolving put issue", $r8);

     label4:
        virtualinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: void setDelegatingResponses(boolean)>(0);

        r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _needIntercept> = 1;

        goto label8;

     label5:
        $r2 = <org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.util.log.Logger LOG>;

        $z3 = interfaceinvoke $r2.<org.eclipse.jetty.util.log.Logger: boolean isDebugEnabled()>();

        if $z3 == 0 goto label6;

        $r6 = <org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.util.log.Logger LOG>;

        $r5 = newarray (java.lang.Object)[0];

        interfaceinvoke $r6.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("WebdavListener:Response Status: Webdav Disabled", $r5);

     label6:
        virtualinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: void setDelegatingResponses(boolean)>(1);

        virtualinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: void setDelegatingRequests(boolean)>(1);

        r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _needIntercept> = 0;

        goto label8;

     label7:
        r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _needIntercept> = 0;

        virtualinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: void setDelegatingResponses(boolean)>(1);

        virtualinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: void setDelegatingRequests(boolean)>(1);

     label8:
        specialinvoke r0.<org.eclipse.jetty.client.HttpEventListenerWrapper: void onResponseStatus(org.eclipse.jetty.io.Buffer,int,org.eclipse.jetty.io.Buffer)>(r3, i0, r4);

        return;
    }

    public void onResponseComplete() throws java.io.IOException
    {
        java.lang.Object[] $r2, $r7;
        org.eclipse.jetty.client.webdav.WebdavListener r0;
        java.io.IOException $r6;
        org.eclipse.jetty.util.log.Logger $r1, $r3, $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.eclipse.jetty.client.HttpExchange $r4;
        org.eclipse.jetty.client.HttpDestination $r5;

        r0 := @this: org.eclipse.jetty.client.webdav.WebdavListener;

        r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _responseComplete> = 1;

        $z0 = r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _needIntercept>;

        if $z0 == 0 goto label7;

        $z1 = r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _requestComplete>;

        if $z1 == 0 goto label5;

        $z3 = r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _responseComplete>;

        if $z3 == 0 goto label5;

     label1:
        $z4 = specialinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean resolveCollectionIssues()>();

        if $z4 == 0 goto label2;

        virtualinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: void setDelegatingRequests(boolean)>(1);

        virtualinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: void setDelegatingResponses(boolean)>(1);

        r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _requestComplete> = 0;

        r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _responseComplete> = 0;

        $r5 = r0.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpDestination _destination>;

        $r4 = r0.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpExchange _exchange>;

        virtualinvoke $r5.<org.eclipse.jetty.client.HttpDestination: void resend(org.eclipse.jetty.client.HttpExchange)>($r4);

        goto label3;

     label2:
        virtualinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: void setDelegationResult(boolean)>(0);

        virtualinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: void setDelegatingRequests(boolean)>(1);

        virtualinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: void setDelegatingResponses(boolean)>(1);

        specialinvoke r0.<org.eclipse.jetty.client.HttpEventListenerWrapper: void onResponseComplete()>();

     label3:
        goto label8;

     label4:
        $r6 := @caughtexception;

        $r8 = <org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.util.log.Logger LOG>;

        $r7 = newarray (java.lang.Object)[0];

        interfaceinvoke $r8.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("WebdavListener:Complete:IOException: might not be dealing with dav server, delegate", $r7);

        specialinvoke r0.<org.eclipse.jetty.client.HttpEventListenerWrapper: void onResponseComplete()>();

        goto label8;

     label5:
        $r1 = <org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.util.log.Logger LOG>;

        $z2 = interfaceinvoke $r1.<org.eclipse.jetty.util.log.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label6;

        $r3 = <org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.util.log.Logger LOG>;

        $r2 = newarray (java.lang.Object)[0];

        interfaceinvoke $r3.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("WebdavListener:Not ready, calling super", $r2);

     label6:
        specialinvoke r0.<org.eclipse.jetty.client.HttpEventListenerWrapper: void onResponseComplete()>();

        goto label8;

     label7:
        specialinvoke r0.<org.eclipse.jetty.client.HttpEventListenerWrapper: void onResponseComplete()>();

     label8:
        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    public void onRequestComplete() throws java.io.IOException
    {
        java.lang.Object[] $r2, $r7;
        org.eclipse.jetty.client.webdav.WebdavListener r0;
        java.io.IOException $r6;
        org.eclipse.jetty.util.log.Logger $r1, $r3, $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.eclipse.jetty.client.HttpExchange $r4;
        org.eclipse.jetty.client.HttpDestination $r5;

        r0 := @this: org.eclipse.jetty.client.webdav.WebdavListener;

        r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _requestComplete> = 1;

        $z0 = r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _needIntercept>;

        if $z0 == 0 goto label7;

        $z1 = r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _requestComplete>;

        if $z1 == 0 goto label5;

        $z3 = r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _responseComplete>;

        if $z3 == 0 goto label5;

     label1:
        $z4 = specialinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean resolveCollectionIssues()>();

        if $z4 == 0 goto label2;

        virtualinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: void setDelegatingRequests(boolean)>(1);

        virtualinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: void setDelegatingResponses(boolean)>(1);

        r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _requestComplete> = 0;

        r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean _responseComplete> = 0;

        $r5 = r0.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpDestination _destination>;

        $r4 = r0.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpExchange _exchange>;

        virtualinvoke $r5.<org.eclipse.jetty.client.HttpDestination: void resend(org.eclipse.jetty.client.HttpExchange)>($r4);

        goto label3;

     label2:
        virtualinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: void setDelegatingRequests(boolean)>(1);

        virtualinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: void setDelegatingResponses(boolean)>(1);

        specialinvoke r0.<org.eclipse.jetty.client.HttpEventListenerWrapper: void onRequestComplete()>();

     label3:
        goto label8;

     label4:
        $r6 := @caughtexception;

        $r8 = <org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.util.log.Logger LOG>;

        $r7 = newarray (java.lang.Object)[0];

        interfaceinvoke $r8.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("WebdavListener:Complete:IOException: might not be dealing with dav server, delegate", $r7);

        specialinvoke r0.<org.eclipse.jetty.client.HttpEventListenerWrapper: void onRequestComplete()>();

        goto label8;

     label5:
        $r1 = <org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.util.log.Logger LOG>;

        $z2 = interfaceinvoke $r1.<org.eclipse.jetty.util.log.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label6;

        $r3 = <org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.util.log.Logger LOG>;

        $r2 = newarray (java.lang.Object)[0];

        interfaceinvoke $r3.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("WebdavListener:Not ready, calling super", $r2);

     label6:
        specialinvoke r0.<org.eclipse.jetty.client.HttpEventListenerWrapper: void onRequestComplete()>();

        goto label8;

     label7:
        specialinvoke r0.<org.eclipse.jetty.client.HttpEventListenerWrapper: void onRequestComplete()>();

     label8:
        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    private boolean resolveCollectionIssues() throws java.io.IOException
    {
        java.lang.String[] $r5;
        int i0, $i1, $i2, $i3, $i4, i5, $i7;
        java.lang.String $r2, $r4, $r9, $r11, $r15, r17;
        boolean $z0, $z1;
        org.eclipse.jetty.client.webdav.WebdavListener r0;
        java.lang.StringBuilder $r7, $r8, $r10, $r13, $r14, $r16, $r18, $r19;
        org.eclipse.jetty.client.HttpExchange $r1, $r3;

        r0 := @this: org.eclipse.jetty.client.webdav.WebdavListener;

        $r1 = r0.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpExchange _exchange>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.client.HttpExchange: java.lang.String getURI()>();

        $r3 = r0.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpExchange _exchange>;

        $r4 = virtualinvoke $r3.<org.eclipse.jetty.client.HttpExchange: java.lang.String getURI()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        i0 = lengthof $r5;

        i5 = 0;

        r17 = staticinvoke <org.eclipse.jetty.util.URIUtil: java.lang.String parentPath(java.lang.String)>($r2);

     label1:
        if r17 == null goto label2;

        $z1 = specialinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean checkExists(java.lang.String)>(r17);

        if $z1 != 0 goto label2;

        i5 = i5 + 1;

        r17 = staticinvoke <org.eclipse.jetty.util.URIUtil: java.lang.String parentPath(java.lang.String)>(r17);

        goto label1;

     label2:
        $z0 = specialinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean checkWebdavSupported()>();

        if $z0 == 0 goto label5;

     label3:
        if 0 >= i5 goto label4;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i1 = i0 - i5;

        $i2 = $i1 - 1;

        $r9 = $r5[$i2];

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.eclipse.jetty.client.webdav.WebdavListener: boolean makeCollection(java.lang.String)>($r11);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i3 = i0 - i5;

        $i4 = $i3 - 1;

        $r15 = $r5[$i4];

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $i7 = (int) -1;

        i5 = i5 + $i7;

        goto label3;

     label4:
        goto label6;

     label5:
        return 0;

     label6:
        return 1;
    }

    private boolean checkExists(java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r10;
        org.eclipse.jetty.client.Address $r4;
        org.eclipse.jetty.client.webdav.WebdavListener r2;
        java.lang.InterruptedException $r11;
        org.eclipse.jetty.client.security.SecurityListener $r7;
        java.lang.String r0;
        org.eclipse.jetty.util.log.Logger $r12;
        org.eclipse.jetty.client.webdav.PropfindExchange $r1;
        org.eclipse.jetty.io.Buffer $r6;
        org.eclipse.jetty.client.HttpExchange $r3, $r5;
        org.eclipse.jetty.client.HttpDestination $r8, $r9;
        boolean $z0;

        r2 := @this: org.eclipse.jetty.client.webdav.WebdavListener;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("have failed miserably");

        return 0;

     label1:
        $r1 = new org.eclipse.jetty.client.webdav.PropfindExchange;

        specialinvoke $r1.<org.eclipse.jetty.client.webdav.PropfindExchange: void <init>()>();

        $r3 = r2.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpExchange _exchange>;

        $r4 = virtualinvoke $r3.<org.eclipse.jetty.client.HttpExchange: org.eclipse.jetty.client.Address getAddress()>();

        virtualinvoke $r1.<org.eclipse.jetty.client.webdav.PropfindExchange: void setAddress(org.eclipse.jetty.client.Address)>($r4);

        virtualinvoke $r1.<org.eclipse.jetty.client.webdav.PropfindExchange: void setMethod(java.lang.String)>("GET");

        $r5 = r2.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpExchange _exchange>;

        $r6 = virtualinvoke $r5.<org.eclipse.jetty.client.HttpExchange: org.eclipse.jetty.io.Buffer getScheme()>();

        virtualinvoke $r1.<org.eclipse.jetty.client.webdav.PropfindExchange: void setScheme(org.eclipse.jetty.io.Buffer)>($r6);

        $r7 = new org.eclipse.jetty.client.security.SecurityListener;

        $r8 = r2.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpDestination _destination>;

        specialinvoke $r7.<org.eclipse.jetty.client.security.SecurityListener: void <init>(org.eclipse.jetty.client.HttpDestination,org.eclipse.jetty.client.HttpExchange)>($r8, $r1);

        virtualinvoke $r1.<org.eclipse.jetty.client.webdav.PropfindExchange: void setEventListener(org.eclipse.jetty.client.HttpEventListener)>($r7);

        virtualinvoke $r1.<org.eclipse.jetty.client.webdav.PropfindExchange: void setConfigureListeners(boolean)>(0);

        virtualinvoke $r1.<org.eclipse.jetty.client.webdav.PropfindExchange: void setRequestURI(java.lang.String)>(r0);

        $r9 = r2.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpDestination _destination>;

        virtualinvoke $r9.<org.eclipse.jetty.client.HttpDestination: void send(org.eclipse.jetty.client.HttpExchange)>($r1);

     label2:
        virtualinvoke $r1.<org.eclipse.jetty.client.webdav.PropfindExchange: int waitForDone()>();

        $z0 = virtualinvoke $r1.<org.eclipse.jetty.client.webdav.PropfindExchange: boolean exists()>();

     label3:
        return $z0;

     label4:
        $r11 := @caughtexception;

        $r12 = <org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r12.<org.eclipse.jetty.util.log.Logger: void ignore(java.lang.Throwable)>($r11);

        return 0;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    private boolean makeCollection(java.lang.String) throws java.io.IOException
    {
        org.eclipse.jetty.client.Address $r3;
        org.eclipse.jetty.client.webdav.MkcolExchange $r0;
        org.eclipse.jetty.client.security.SecurityListener $r12;
        java.lang.String r6, $r9;
        org.eclipse.jetty.io.Buffer $r11;
        org.eclipse.jetty.client.HttpDestination $r13, $r14;
        boolean $z0;
        org.eclipse.jetty.client.webdav.WebdavListener r1;
        java.lang.InterruptedException $r15;
        java.lang.StringBuilder $r4, $r5, $r7, $r8;
        org.eclipse.jetty.util.log.Logger $r16;
        org.eclipse.jetty.client.HttpExchange $r2, $r10;

        r1 := @this: org.eclipse.jetty.client.webdav.WebdavListener;

        r6 := @parameter0: java.lang.String;

        $r0 = new org.eclipse.jetty.client.webdav.MkcolExchange;

        specialinvoke $r0.<org.eclipse.jetty.client.webdav.MkcolExchange: void <init>()>();

        $r2 = r1.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpExchange _exchange>;

        $r3 = virtualinvoke $r2.<org.eclipse.jetty.client.HttpExchange: org.eclipse.jetty.client.Address getAddress()>();

        virtualinvoke $r0.<org.eclipse.jetty.client.webdav.MkcolExchange: void setAddress(org.eclipse.jetty.client.Address)>($r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MKCOL ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" HTTP/1.1");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.eclipse.jetty.client.webdav.MkcolExchange: void setMethod(java.lang.String)>($r9);

        $r10 = r1.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpExchange _exchange>;

        $r11 = virtualinvoke $r10.<org.eclipse.jetty.client.HttpExchange: org.eclipse.jetty.io.Buffer getScheme()>();

        virtualinvoke $r0.<org.eclipse.jetty.client.webdav.MkcolExchange: void setScheme(org.eclipse.jetty.io.Buffer)>($r11);

        $r12 = new org.eclipse.jetty.client.security.SecurityListener;

        $r13 = r1.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpDestination _destination>;

        specialinvoke $r12.<org.eclipse.jetty.client.security.SecurityListener: void <init>(org.eclipse.jetty.client.HttpDestination,org.eclipse.jetty.client.HttpExchange)>($r13, $r0);

        virtualinvoke $r0.<org.eclipse.jetty.client.webdav.MkcolExchange: void setEventListener(org.eclipse.jetty.client.HttpEventListener)>($r12);

        virtualinvoke $r0.<org.eclipse.jetty.client.webdav.MkcolExchange: void setConfigureListeners(boolean)>(0);

        virtualinvoke $r0.<org.eclipse.jetty.client.webdav.MkcolExchange: void setRequestURI(java.lang.String)>(r6);

        $r14 = r1.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpDestination _destination>;

        virtualinvoke $r14.<org.eclipse.jetty.client.HttpDestination: void send(org.eclipse.jetty.client.HttpExchange)>($r0);

     label1:
        virtualinvoke $r0.<org.eclipse.jetty.client.webdav.MkcolExchange: int waitForDone()>();

        $z0 = virtualinvoke $r0.<org.eclipse.jetty.client.webdav.MkcolExchange: boolean exists()>();

     label2:
        return $z0;

     label3:
        $r15 := @caughtexception;

        $r16 = <org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r16.<org.eclipse.jetty.util.log.Logger: void ignore(java.lang.Throwable)>($r15);

        return 0;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private boolean checkWebdavSupported() throws java.io.IOException
    {
        org.eclipse.jetty.client.Address $r3;
        org.eclipse.jetty.client.webdav.WebdavListener r1;
        org.eclipse.jetty.client.webdav.WebdavSupportedExchange $r0;
        java.lang.InterruptedException $r11;
        org.eclipse.jetty.client.security.SecurityListener $r6;
        java.lang.String $r9;
        org.eclipse.jetty.util.log.Logger $r12;
        org.eclipse.jetty.io.Buffer $r5;
        org.eclipse.jetty.client.HttpExchange $r2, $r4, $r8;
        org.eclipse.jetty.client.HttpDestination $r7, $r10;
        boolean $z0;

        r1 := @this: org.eclipse.jetty.client.webdav.WebdavListener;

        $r0 = new org.eclipse.jetty.client.webdav.WebdavSupportedExchange;

        specialinvoke $r0.<org.eclipse.jetty.client.webdav.WebdavSupportedExchange: void <init>()>();

        $r2 = r1.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpExchange _exchange>;

        $r3 = virtualinvoke $r2.<org.eclipse.jetty.client.HttpExchange: org.eclipse.jetty.client.Address getAddress()>();

        virtualinvoke $r0.<org.eclipse.jetty.client.webdav.WebdavSupportedExchange: void setAddress(org.eclipse.jetty.client.Address)>($r3);

        virtualinvoke $r0.<org.eclipse.jetty.client.webdav.WebdavSupportedExchange: void setMethod(java.lang.String)>("OPTIONS");

        $r4 = r1.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpExchange _exchange>;

        $r5 = virtualinvoke $r4.<org.eclipse.jetty.client.HttpExchange: org.eclipse.jetty.io.Buffer getScheme()>();

        virtualinvoke $r0.<org.eclipse.jetty.client.webdav.WebdavSupportedExchange: void setScheme(org.eclipse.jetty.io.Buffer)>($r5);

        $r6 = new org.eclipse.jetty.client.security.SecurityListener;

        $r7 = r1.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpDestination _destination>;

        specialinvoke $r6.<org.eclipse.jetty.client.security.SecurityListener: void <init>(org.eclipse.jetty.client.HttpDestination,org.eclipse.jetty.client.HttpExchange)>($r7, $r0);

        virtualinvoke $r0.<org.eclipse.jetty.client.webdav.WebdavSupportedExchange: void setEventListener(org.eclipse.jetty.client.HttpEventListener)>($r6);

        virtualinvoke $r0.<org.eclipse.jetty.client.webdav.WebdavSupportedExchange: void setConfigureListeners(boolean)>(0);

        $r8 = r1.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpExchange _exchange>;

        $r9 = virtualinvoke $r8.<org.eclipse.jetty.client.HttpExchange: java.lang.String getURI()>();

        virtualinvoke $r0.<org.eclipse.jetty.client.webdav.WebdavSupportedExchange: void setRequestURI(java.lang.String)>($r9);

        $r10 = r1.<org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.client.HttpDestination _destination>;

        virtualinvoke $r10.<org.eclipse.jetty.client.HttpDestination: void send(org.eclipse.jetty.client.HttpExchange)>($r0);

     label1:
        virtualinvoke $r0.<org.eclipse.jetty.client.webdav.WebdavSupportedExchange: void waitTilCompletion()>();

        $z0 = virtualinvoke $r0.<org.eclipse.jetty.client.webdav.WebdavSupportedExchange: boolean isWebdavSupported()>();

     label2:
        return $z0;

     label3:
        $r11 := @caughtexception;

        $r12 = <org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r12.<org.eclipse.jetty.util.log.Logger: void ignore(java.lang.Throwable)>($r11);

        return 0;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)>(class "Lorg/eclipse/jetty/client/webdav/WebdavListener;");

        <org.eclipse.jetty.client.webdav.WebdavListener: org.eclipse.jetty.util.log.Logger LOG> = $r0;

        return;
    }
}
