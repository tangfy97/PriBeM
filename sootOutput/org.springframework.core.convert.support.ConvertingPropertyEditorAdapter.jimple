public class org.springframework.core.convert.support.ConvertingPropertyEditorAdapter extends java.beans.PropertyEditorSupport
{
    private final org.springframework.core.convert.ConversionService conversionService;
    private final org.springframework.core.convert.TypeDescriptor targetDescriptor;
    private final boolean canConvertToString;

    public void <init>(org.springframework.core.convert.ConversionService, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.support.ConvertingPropertyEditorAdapter r0;
        org.springframework.core.convert.TypeDescriptor r2, $r3, $r4;
        org.springframework.core.convert.ConversionService r1;
        boolean $z0;

        r0 := @this: org.springframework.core.convert.support.ConvertingPropertyEditorAdapter;

        r1 := @parameter0: org.springframework.core.convert.ConversionService;

        r2 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        specialinvoke r0.<java.beans.PropertyEditorSupport: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "ConversionService must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "TypeDescriptor must not be null");

        r0.<org.springframework.core.convert.support.ConvertingPropertyEditorAdapter: org.springframework.core.convert.ConversionService conversionService> = r1;

        r0.<org.springframework.core.convert.support.ConvertingPropertyEditorAdapter: org.springframework.core.convert.TypeDescriptor targetDescriptor> = r2;

        $r3 = r0.<org.springframework.core.convert.support.ConvertingPropertyEditorAdapter: org.springframework.core.convert.TypeDescriptor targetDescriptor>;

        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/String;");

        $z0 = interfaceinvoke r1.<org.springframework.core.convert.ConversionService: boolean canConvert(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r3, $r4);

        r0.<org.springframework.core.convert.support.ConvertingPropertyEditorAdapter: boolean canConvertToString> = $z0;

        return;
    }

    public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.springframework.core.convert.support.ConvertingPropertyEditorAdapter r0;
        org.springframework.core.convert.TypeDescriptor $r3, $r4;
        java.lang.Object $r5;
        java.lang.String r1;
        org.springframework.core.convert.ConversionService $r2;

        r0 := @this: org.springframework.core.convert.support.ConvertingPropertyEditorAdapter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.core.convert.support.ConvertingPropertyEditorAdapter: org.springframework.core.convert.ConversionService conversionService>;

        $r3 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/String;");

        $r4 = r0.<org.springframework.core.convert.support.ConvertingPropertyEditorAdapter: org.springframework.core.convert.TypeDescriptor targetDescriptor>;

        $r5 = interfaceinvoke $r2.<org.springframework.core.convert.ConversionService: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r1, $r3, $r4);

        virtualinvoke r0.<org.springframework.core.convert.support.ConvertingPropertyEditorAdapter: void setValue(java.lang.Object)>($r5);

        return;
    }

    public java.lang.String getAsText()
    {
        org.springframework.core.convert.support.ConvertingPropertyEditorAdapter r0;
        org.springframework.core.convert.TypeDescriptor $r3, $r4;
        java.lang.Object $r2, $r5;
        java.lang.String $r6;
        org.springframework.core.convert.ConversionService $r1;
        boolean $z0;

        r0 := @this: org.springframework.core.convert.support.ConvertingPropertyEditorAdapter;

        $z0 = r0.<org.springframework.core.convert.support.ConvertingPropertyEditorAdapter: boolean canConvertToString>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.springframework.core.convert.support.ConvertingPropertyEditorAdapter: org.springframework.core.convert.ConversionService conversionService>;

        $r2 = virtualinvoke r0.<org.springframework.core.convert.support.ConvertingPropertyEditorAdapter: java.lang.Object getValue()>();

        $r3 = r0.<org.springframework.core.convert.support.ConvertingPropertyEditorAdapter: org.springframework.core.convert.TypeDescriptor targetDescriptor>;

        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/String;");

        $r5 = interfaceinvoke $r1.<org.springframework.core.convert.ConversionService: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r2, $r3, $r4);

        $r6 = (java.lang.String) $r5;

        return $r6;

     label1:
        return null;
    }
}
