public class org.apache.jena.iri.impl.IRIFactoryImpl extends org.apache.jena.iri.impl.AbsIRIFactoryImpl implements org.apache.jena.iri.ViolationCodes, org.apache.jena.iri.impl.Force, org.apache.jena.iri.IRIComponents
{
    public static final int UNKNOWN_SYNTAX;
    protected long errors;
    protected long warnings;
    protected java.util.Set specs;
    private java.lang.String encoding;
    boolean[] asErrors;
    boolean[] asWarnings;
    private boolean initializing;
    private java.util.Set backwardCompatibleRelativeRefs;
    private org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme unregisteredScheme;
    private org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme nonIETFScheme;
    private final org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme noScheme;
    private int required;
    private int prohibited;
    private final java.util.Map schemes;

    public void <init>()
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r0;
        java.util.HashSet $r1, $r4;
        org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme $r5;
        boolean[] $r2, $r3;
        java.util.HashMap $r6;

        r0 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIFactoryImpl: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Set specs> = $r1;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.lang.String encoding> = "utf-8";

        $r2 = newarray (boolean)[6];

        $r2[0] = 1;

        $r2[1] = 1;

        $r2[2] = 0;

        $r2[3] = 1;

        $r2[4] = 1;

        $r2[5] = 1;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asErrors> = $r2;

        $r3 = newarray (boolean)[6];

        $r3[0] = 0;

        $r3[1] = 0;

        $r3[2] = 1;

        $r3[3] = 0;

        $r3[4] = 0;

        $r3[5] = 0;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asWarnings> = $r3;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean initializing> = 1;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Set backwardCompatibleRelativeRefs> = $r4;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme unregisteredScheme> = null;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme nonIETFScheme> = null;

        $r5 = new org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme;

        specialinvoke $r5.<org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme: void <init>(org.apache.jena.iri.impl.IRIFactoryImpl)>(r0);

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme noScheme> = $r5;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: int required> = 0;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: int prohibited> = 0;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Map schemes> = $r6;

        return;
    }

    public void <init>(org.apache.jena.iri.impl.IRIFactoryImpl)
    {
        java.util.Map $r18, $r25, $r28;
        org.apache.jena.iri.impl.SchemeSpecificPart r24;
        boolean $z0, $z1;
        java.util.Set $r7, $r9, $r19, $r32;
        org.apache.jena.iri.impl.IRIFactoryImpl$WithScheme $r31, $r38;
        org.apache.jena.iri.impl.IRIFactoryImpl r0, r10;
        org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme $r35, $r39;
        long $l1, $l4;
        java.util.HashMap $r36;
        java.util.HashSet $r33, $r34, $r37;
        int $i0, $i2, $i3, $i5, $i6, $i7, $i8, $i10;
        java.lang.String $r11;
        java.util.Map$Entry r22;
        java.util.Iterator $r20;
        boolean[] $r2, $r3, $r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.Object $r21, $r23, $r26, $r29;

        r0 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        r10 := @parameter0: org.apache.jena.iri.impl.IRIFactoryImpl;

        specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIFactoryImpl: void <init>()>();

        $r33 = new java.util.HashSet;

        specialinvoke $r33.<java.util.HashSet: void <init>()>();

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Set specs> = $r33;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.lang.String encoding> = "utf-8";

        $r2 = newarray (boolean)[6];

        $r2[0] = 1;

        $r2[1] = 1;

        $r2[2] = 0;

        $r2[3] = 1;

        $r2[4] = 1;

        $r2[5] = 1;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asErrors> = $r2;

        $r3 = newarray (boolean)[6];

        $r3[0] = 0;

        $r3[1] = 0;

        $r3[2] = 1;

        $r3[3] = 0;

        $r3[4] = 0;

        $r3[5] = 0;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asWarnings> = $r3;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean initializing> = 1;

        $r34 = new java.util.HashSet;

        specialinvoke $r34.<java.util.HashSet: void <init>()>();

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Set backwardCompatibleRelativeRefs> = $r34;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme unregisteredScheme> = null;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme nonIETFScheme> = null;

        $r35 = new org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme;

        specialinvoke $r35.<org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme: void <init>(org.apache.jena.iri.impl.IRIFactoryImpl)>(r0);

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme noScheme> = $r35;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: int required> = 0;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: int prohibited> = 0;

        $r36 = new java.util.HashMap;

        specialinvoke $r36.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Map schemes> = $r36;

        $r7 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Set backwardCompatibleRelativeRefs>;

        $i0 = interfaceinvoke $r7.<java.util.Set: int size()>();

        if $i0 != 2147483647 goto label1;

        $r32 = r10.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Set backwardCompatibleRelativeRefs>;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Set backwardCompatibleRelativeRefs> = $r32;

        goto label2;

     label1:
        $r37 = new java.util.HashSet;

        $r9 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Set backwardCompatibleRelativeRefs>;

        specialinvoke $r37.<java.util.HashSet: void <init>(java.util.Collection)>($r9);

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Set backwardCompatibleRelativeRefs> = $r37;

     label2:
        $r11 = r10.<org.apache.jena.iri.impl.IRIFactoryImpl: java.lang.String encoding>;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.lang.String encoding> = $r11;

        $l1 = r10.<org.apache.jena.iri.impl.IRIFactoryImpl: long errors>;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: long errors> = $l1;

        $i2 = r10.<org.apache.jena.iri.impl.IRIFactoryImpl: int prohibited>;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: int prohibited> = $i2;

        $i3 = r10.<org.apache.jena.iri.impl.IRIFactoryImpl: int required>;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: int required> = $i3;

        $l4 = r10.<org.apache.jena.iri.impl.IRIFactoryImpl: long warnings>;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: long warnings> = $l4;

        $r14 = r10.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asErrors>;

        $r13 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asErrors>;

        $r12 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asErrors>;

        $i5 = lengthof $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, $r13, 0, $i5);

        $r17 = r10.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asWarnings>;

        $r16 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asWarnings>;

        $r15 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asWarnings>;

        $i6 = lengthof $r15;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r17, 0, $r16, 0, $i6);

        $r18 = r10.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Map schemes>;

        $r19 = interfaceinvoke $r18.<java.util.Map: java.util.Set entrySet()>();

        $r20 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r21 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.util.Map$Entry) $r21;

        $r23 = interfaceinvoke r22.<java.util.Map$Entry: java.lang.Object getValue()>();

        r24 = (org.apache.jena.iri.impl.SchemeSpecificPart) $r23;

        $z0 = virtualinvoke r24.<org.apache.jena.iri.impl.SchemeSpecificPart: boolean withScheme()>();

        if $z0 == 0 goto label4;

        $r28 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Map schemes>;

        $r29 = interfaceinvoke r22.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r38 = new org.apache.jena.iri.impl.IRIFactoryImpl$WithScheme;

        $r31 = (org.apache.jena.iri.impl.IRIFactoryImpl$WithScheme) r24;

        specialinvoke $r38.<org.apache.jena.iri.impl.IRIFactoryImpl$WithScheme: void <init>(org.apache.jena.iri.impl.IRIFactoryImpl,org.apache.jena.iri.impl.IRIFactoryImpl$WithScheme,org.apache.jena.iri.impl.IRIFactoryImpl$1)>(r0, $r31, null);

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, $r38);

        goto label5;

     label4:
        $i7 = virtualinvoke r24.<org.apache.jena.iri.impl.SchemeSpecificPart: int port()>();

        $i10 = (int) -1;

        if $i7 == $i10 goto label5;

        $r25 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Map schemes>;

        $r26 = interfaceinvoke r22.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r39 = new org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme;

        $i8 = virtualinvoke r24.<org.apache.jena.iri.impl.SchemeSpecificPart: int port()>();

        specialinvoke $r39.<org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme: void <init>(org.apache.jena.iri.impl.IRIFactoryImpl,int)>(r0, $i8);

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r39);

     label5:
        goto label3;

     label6:
        return;
    }

    private final long getMask(boolean)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r0;
        long $l0, $l1, $l2;
        boolean z0;

        r0 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $l1 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: long errors>;

        $l0 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: long warnings>;

        $l2 = $l1 | $l0;

        goto label2;

     label1:
        $l2 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: long errors>;

     label2:
        return $l2;
    }

    protected org.apache.jena.iri.impl.IRIFactoryImpl getFactory()
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r0;

        r0 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        return r0;
    }

    public org.apache.jena.iri.IRI create(org.apache.jena.iri.IRI)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r1, $r5;
        org.apache.jena.iri.impl.AbsIRIImpl $r4;
        java.lang.String $r2;
        org.apache.jena.iri.IRI r0, $r3;
        boolean $z0;

        r1 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        r0 := @parameter0: org.apache.jena.iri.IRI;

        $z0 = r0 instanceof org.apache.jena.iri.impl.AbsIRIImpl;

        if $z0 == 0 goto label1;

        $r4 = (org.apache.jena.iri.impl.AbsIRIImpl) r0;

        $r5 = virtualinvoke $r4.<org.apache.jena.iri.impl.AbsIRIImpl: org.apache.jena.iri.impl.IRIFactoryImpl getFactory()>();

        if $r5 != r1 goto label1;

        return r0;

     label1:
        $r2 = virtualinvoke r0.<org.apache.jena.iri.IRI: java.lang.String toString()>();

        $r3 = virtualinvoke r1.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.IRI create(java.lang.String)>($r2);

        return $r3;
    }

    boolean getSameSchemaRelativeReferences(java.lang.String)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r0;
        java.util.Set $r2;
        java.lang.String r1, $r3;
        boolean $z0;

        r0 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Set backwardCompatibleRelativeRefs>;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        return $z0;
    }

    java.lang.String getEncoding()
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        $r1 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.lang.String encoding>;

        return $r1;
    }

    public void setEncoding(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r2;
        java.lang.String r0, $r1;

        r2 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        r0 := @parameter0: java.lang.String;

        $r1 = "";

        virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>(r0);

        r2.<org.apache.jena.iri.impl.IRIFactoryImpl: java.lang.String encoding> = r0;

        return;
    }

    protected void setViolation(int, boolean, boolean)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r0;
        int i0;
        boolean[] $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        boolean z0, z1;

        r0 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        if z0 == 0 goto label1;

        if z1 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("xxxViolation(true,true) is not permitted.");

        throw $r3;

     label1:
        virtualinvoke r0.<org.apache.jena.iri.impl.IRIFactoryImpl: void initializing()>();

        $r1 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asErrors>;

        $r1[i0] = z0;

        $r2 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asWarnings>;

        $r2[i0] = z1;

        return;
    }

    protected boolean getAsWarnings(int)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r0;
        int i0;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asWarnings>;

        $z0 = $r1[i0];

        return $z0;
    }

    protected boolean getAsErrors(int)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r0;
        int i0;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asErrors>;

        $z0 = $r1[i0];

        return $z0;
    }

    protected void initializing()
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r0;
        java.lang.IllegalStateException $r1;
        boolean $z0;

        r0 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        $z0 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean initializing>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot reinitialize IRIFactory after first use.");

        throw $r1;

     label1:
        return;
    }

    public org.apache.jena.iri.IRI create(java.lang.String)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r0;
        java.lang.String r1;
        org.apache.jena.iri.IRI $r2;

        r0 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean initializing> = 0;

        $r2 = specialinvoke r0.<org.apache.jena.iri.impl.AbsIRIFactoryImpl: org.apache.jena.iri.IRI create(java.lang.String)>(r1);

        return $r2;
    }

    public void setSameSchemeRelativeReferences(java.lang.String)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r1;
        org.apache.jena.iri.impl.IRIFactoryImpl$1 $r4;
        java.util.Set $r2;
        java.lang.String r0, $r3;
        boolean $z0;

        r1 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z0 == 0 goto label1;

        $r4 = new org.apache.jena.iri.impl.IRIFactoryImpl$1;

        specialinvoke $r4.<org.apache.jena.iri.impl.IRIFactoryImpl$1: void <init>(org.apache.jena.iri.impl.IRIFactoryImpl)>(r1);

        r1.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Set backwardCompatibleRelativeRefs> = $r4;

        goto label2;

     label1:
        $r2 = r1.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Set backwardCompatibleRelativeRefs>;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

     label2:
        return;
    }

    protected void useSpec(java.lang.String, boolean)
    {
        long $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15;
        org.apache.jena.iri.impl.Specification $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i16;
        java.lang.String r1;
        boolean $z0, $z1, z2, $z3;
        boolean[] $r4, $r5, $r6;
        java.util.Set $r3;
        org.apache.jena.iri.impl.IRIFactoryImpl r0;

        r0 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        r1 := @parameter0: java.lang.String;

        z2 := @parameter1: boolean;

        virtualinvoke r0.<org.apache.jena.iri.impl.IRIFactoryImpl: void initializing()>();

        $r2 = staticinvoke <org.apache.jena.iri.impl.Specification: org.apache.jena.iri.impl.Specification get(java.lang.String)>(r1);

        $r3 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Set specs>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r2);

        i16 = 0;

     label1:
        if i16 >= 5 goto label5;

        $r4 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asErrors>;

        $z0 = $r4[i16];

        if $z0 != 0 goto label2;

        $r5 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asWarnings>;

        $z1 = $r5[i16];

        if $z1 == 0 goto label3;

        if z2 == 0 goto label3;

     label2:
        $l10 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: long errors>;

        $l11 = virtualinvoke $r2.<org.apache.jena.iri.impl.Specification: long getErrors(int)>(i16);

        $l12 = $l10 | $l11;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: long errors> = $l12;

     label3:
        $r6 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: boolean[] asWarnings>;

        $z3 = $r6[i16];

        if $z3 == 0 goto label4;

        $l13 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: long warnings>;

        $l14 = virtualinvoke $r2.<org.apache.jena.iri.impl.Specification: long getErrors(int)>(i16);

        $l15 = $l13 | $l14;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: long warnings> = $l15;

     label4:
        i16 = i16 + 1;

        goto label1;

     label5:
        $i0 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: int prohibited>;

        $i1 = virtualinvoke $r2.<org.apache.jena.iri.impl.Specification: int getProhibited()>();

        $i2 = $i0 | $i1;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: int prohibited> = $i2;

        $i3 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: int required>;

        $i4 = virtualinvoke $r2.<org.apache.jena.iri.impl.Specification: int getRequired()>();

        $i5 = $i3 | $i4;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: int required> = $i5;

        $l8 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: long warnings>;

        $l6 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: long errors>;

        $l7 = $l6 ^ -1L;

        $l9 = $l8 & $l7;

        r0.<org.apache.jena.iri.impl.IRIFactoryImpl: long warnings> = $l9;

        return;
    }

    public org.apache.jena.iri.impl.SchemeSpecificPart getScheme(java.lang.String, org.apache.jena.iri.impl.Parser)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme $r5, $r13, $r20;
        org.apache.jena.iri.impl.SchemeSpecification r11;
        java.util.Map $r2, $r4, $r7, $r9, $r18;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r0, r15;
        org.apache.jena.iri.impl.SchemeSpecificPart r16, r17;
        boolean $z0, $z1;
        org.apache.jena.iri.impl.IRIFactoryImpl$2 $r19;
        org.apache.jena.iri.impl.IRIFactoryImpl$3 $r21;
        org.apache.jena.iri.impl.Parser r6;
        org.apache.jena.iri.impl.IRIFactoryImpl r1;
        java.lang.Object $r3, $r10;

        r1 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        r15 := @parameter0: java.lang.String;

        r6 := @parameter1: org.apache.jena.iri.impl.Parser;

        $r0 = virtualinvoke r15.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = r1.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Map schemes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r16 = (org.apache.jena.iri.impl.SchemeSpecificPart) $r3;

        if r16 == null goto label1;

        virtualinvoke r16.<org.apache.jena.iri.impl.SchemeSpecificPart: void usedBy(org.apache.jena.iri.impl.Parser)>(r6);

        return r16;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(45);

        $i4 = (int) -1;

        if $i0 == $i4 goto label4;

        $z1 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("x-");

        if $z1 == 0 goto label2;

        r17 = virtualinvoke r1.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.SchemeSpecificPart noScheme()>();

        goto label7;

     label2:
        $r13 = r1.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme nonIETFScheme>;

        if $r13 != null goto label3;

        $r19 = new org.apache.jena.iri.impl.IRIFactoryImpl$2;

        specialinvoke $r19.<org.apache.jena.iri.impl.IRIFactoryImpl$2: void <init>(org.apache.jena.iri.impl.IRIFactoryImpl)>(r1);

        r1.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme nonIETFScheme> = $r19;

     label3:
        r17 = r1.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme nonIETFScheme>;

        goto label7;

     label4:
        $r4 = <org.apache.jena.iri.impl.Specification: java.util.Map schemes>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z0 == 0 goto label5;

        $r9 = <org.apache.jena.iri.impl.Specification: java.util.Map schemes>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r11 = (org.apache.jena.iri.impl.SchemeSpecification) $r10;

        $r20 = new org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme;

        $i1 = r11.<org.apache.jena.iri.impl.SchemeSpecification: int port>;

        specialinvoke $r20.<org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme: void <init>(org.apache.jena.iri.impl.IRIFactoryImpl,int)>(r1, $i1);

        r17 = $r20;

        goto label7;

     label5:
        $r5 = r1.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme unregisteredScheme>;

        if $r5 != null goto label6;

        $r21 = new org.apache.jena.iri.impl.IRIFactoryImpl$3;

        specialinvoke $r21.<org.apache.jena.iri.impl.IRIFactoryImpl$3: void <init>(org.apache.jena.iri.impl.IRIFactoryImpl)>(r1);

        r1.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme unregisteredScheme> = $r21;

     label6:
        r17 = r1.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme unregisteredScheme>;

     label7:
        virtualinvoke r17.<org.apache.jena.iri.impl.SchemeSpecificPart: void usedBy(org.apache.jena.iri.impl.Parser)>(r6);

        $r18 = r1.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Map schemes>;

        $i2 = interfaceinvoke $r18.<java.util.Map: int size()>();

        if $i2 >= 1000 goto label8;

        $r7 = r1.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Map schemes>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, r17);

     label8:
        return r17;
    }

    public org.apache.jena.iri.impl.SchemeSpecificPart noScheme()
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r0;
        org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme $r1;

        r0 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        $r1 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme noScheme>;

        return $r1;
    }

    public int getRequired()
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r0;
        int $i0;

        r0 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        $i0 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: int required>;

        return $i0;
    }

    public int getProhibited()
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r0;
        int $i0;

        r0 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        $i0 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: int prohibited>;

        return $i0;
    }

    public void useSchemeSpecificRules(java.lang.String, boolean)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme $r6;
        org.apache.jena.iri.impl.SchemeSpecification r15;
        java.util.Map $r1, $r5, $r7, $r8, $r12;
        java.lang.String $r0, r13, r14;
        boolean $z0, z1, $z2, $z3;
        java.util.Iterator $r10;
        java.util.Set $r9;
        org.apache.jena.iri.impl.IRIFactoryImpl$WithScheme $r4;
        org.apache.jena.iri.impl.IRIFactoryImpl r3;
        java.lang.Object $r2, $r11;

        r3 := @this: org.apache.jena.iri.impl.IRIFactoryImpl;

        r13 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        $z0 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z0 == 0 goto label3;

        $r8 = <org.apache.jena.iri.impl.Specification: java.util.Map schemes>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r11;

        $r12 = r3.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Map schemes>;

        $z2 = interfaceinvoke $r12.<java.util.Map: boolean containsKey(java.lang.Object)>(r14);

        if $z2 != 0 goto label1;

        virtualinvoke r3.<org.apache.jena.iri.impl.IRIFactoryImpl: void useSchemeSpecificRules(java.lang.String,boolean)>(r14, z1);

        goto label1;

     label2:
        return;

     label3:
        $r0 = virtualinvoke r13.<java.lang.String: java.lang.String toLowerCase()>();

        $r1 = <org.apache.jena.iri.impl.Specification: java.util.Map schemes>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r15 = (org.apache.jena.iri.impl.SchemeSpecification) $r2;

        if r15 != null goto label4;

        $r7 = r3.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Map schemes>;

        $r6 = r3.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.IRIFactoryImpl$NoScheme noScheme>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r6);

        goto label5;

     label4:
        $r5 = r3.<org.apache.jena.iri.impl.IRIFactoryImpl: java.util.Map schemes>;

        $r4 = new org.apache.jena.iri.impl.IRIFactoryImpl$WithScheme;

        specialinvoke $r4.<org.apache.jena.iri.impl.IRIFactoryImpl$WithScheme: void <init>(org.apache.jena.iri.impl.IRIFactoryImpl,org.apache.jena.iri.impl.SchemeSpecification,boolean,org.apache.jena.iri.impl.IRIFactoryImpl$1)>(r3, r15, z1, null);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r4);

     label5:
        return;
    }

    static int access$100(org.apache.jena.iri.impl.IRIFactoryImpl)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r0;
        int $i0;

        r0 := @parameter0: org.apache.jena.iri.impl.IRIFactoryImpl;

        $i0 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: int required>;

        return $i0;
    }

    static int access$200(org.apache.jena.iri.impl.IRIFactoryImpl)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r0;
        int $i0;

        r0 := @parameter0: org.apache.jena.iri.impl.IRIFactoryImpl;

        $i0 = r0.<org.apache.jena.iri.impl.IRIFactoryImpl: int prohibited>;

        return $i0;
    }

    static long access$300(org.apache.jena.iri.impl.IRIFactoryImpl, boolean)
    {
        org.apache.jena.iri.impl.IRIFactoryImpl r0;
        long $l0;
        boolean z0;

        r0 := @parameter0: org.apache.jena.iri.impl.IRIFactoryImpl;

        z0 := @parameter1: boolean;

        $l0 = specialinvoke r0.<org.apache.jena.iri.impl.IRIFactoryImpl: long getMask(boolean)>(z0);

        return $l0;
    }

    public static void <clinit>()
    {
        <org.apache.jena.iri.impl.IRIFactoryImpl: int UNKNOWN_SYNTAX> = -4;

        return;
    }
}
