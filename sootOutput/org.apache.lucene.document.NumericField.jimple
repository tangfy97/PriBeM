public final class org.apache.lucene.document.NumericField extends org.apache.lucene.document.AbstractField
{
    private transient org.apache.lucene.analysis.NumericTokenStream numericTS;
    private org.apache.lucene.document.NumericField$DataType type;
    private final int precisionStep;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String)
    {
        org.apache.lucene.document.NumericField r0;
        org.apache.lucene.document.Field$Store $r2;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.document.NumericField;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store NO>;

        specialinvoke r0.<org.apache.lucene.document.NumericField: void <init>(java.lang.String,int,org.apache.lucene.document.Field$Store,boolean)>(r1, 4, $r2, 1);

        return;
    }

    public void <init>(java.lang.String, org.apache.lucene.document.Field$Store, boolean)
    {
        org.apache.lucene.document.Field$Store r2;
        org.apache.lucene.document.NumericField r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.apache.lucene.document.NumericField;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.lucene.document.Field$Store;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.lucene.document.NumericField: void <init>(java.lang.String,int,org.apache.lucene.document.Field$Store,boolean)>(r1, 4, r2, z0);

        return;
    }

    public void <init>(java.lang.String, int)
    {
        org.apache.lucene.document.Field$Store $r2;
        int i0;
        org.apache.lucene.document.NumericField r0;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.document.NumericField;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store NO>;

        specialinvoke r0.<org.apache.lucene.document.NumericField: void <init>(java.lang.String,int,org.apache.lucene.document.Field$Store,boolean)>(r1, i0, $r2, 1);

        return;
    }

    public void <init>(java.lang.String, int, org.apache.lucene.document.Field$Store, boolean)
    {
        org.apache.lucene.document.Field$Store r2;
        org.apache.lucene.index.FieldInfo$IndexOptions $r4;
        org.apache.lucene.document.Field$Index $r5;
        org.apache.lucene.document.Field$TermVector $r3;
        int i0;
        org.apache.lucene.document.NumericField r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.apache.lucene.document.NumericField;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.lucene.document.Field$Store;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label1;

        $r5 = <org.apache.lucene.document.Field$Index: org.apache.lucene.document.Field$Index ANALYZED_NO_NORMS>;

        goto label2;

     label1:
        $r5 = <org.apache.lucene.document.Field$Index: org.apache.lucene.document.Field$Index NO>;

     label2:
        $r3 = <org.apache.lucene.document.Field$TermVector: org.apache.lucene.document.Field$TermVector NO>;

        specialinvoke r0.<org.apache.lucene.document.AbstractField: void <init>(java.lang.String,org.apache.lucene.document.Field$Store,org.apache.lucene.document.Field$Index,org.apache.lucene.document.Field$TermVector)>(r1, r2, $r5, $r3);

        r0.<org.apache.lucene.document.NumericField: int precisionStep> = i0;

        $r4 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_ONLY>;

        virtualinvoke r0.<org.apache.lucene.document.NumericField: void setIndexOptions(org.apache.lucene.index.FieldInfo$IndexOptions)>($r4);

        return;
    }

    public org.apache.lucene.analysis.TokenStream tokenStreamValue()
    {
        org.apache.lucene.document.NumericField$DataType $r5, $r12;
        org.apache.lucene.analysis.NumericTokenStream $r1, $r2, $r7, $r8, $r9, $r10, $r15;
        long $l3;
        java.lang.AssertionError $r11, $r14;
        int[] $r6;
        int $i0, $i1, $i2, $i4;
        java.lang.Number $r13;
        boolean $z0, $z1, $z2;
        double $d0;
        org.apache.lucene.document.NumericField r0;
        float $f0;
        java.lang.Object $r3, $r4;

        r0 := @this: org.apache.lucene.document.NumericField;

        $z0 = virtualinvoke r0.<org.apache.lucene.document.NumericField: boolean isIndexed()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.analysis.NumericTokenStream numericTS>;

        if $r1 != null goto label8;

        $r2 = new org.apache.lucene.analysis.NumericTokenStream;

        $i0 = r0.<org.apache.lucene.document.NumericField: int precisionStep>;

        specialinvoke $r2.<org.apache.lucene.analysis.NumericTokenStream: void <init>(int)>($i0);

        r0.<org.apache.lucene.document.NumericField: org.apache.lucene.analysis.NumericTokenStream numericTS> = $r2;

        $r3 = r0.<org.apache.lucene.document.NumericField: java.lang.Object fieldsData>;

        if $r3 == null goto label8;

        $z1 = <org.apache.lucene.document.NumericField: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r12 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.document.NumericField$DataType type>;

        if $r12 != null goto label2;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label2:
        $r4 = r0.<org.apache.lucene.document.NumericField: java.lang.Object fieldsData>;

        $r13 = (java.lang.Number) $r4;

        $r6 = <org.apache.lucene.document.NumericField$1: int[] $SwitchMap$org$apache$lucene$document$NumericField$DataType>;

        $r5 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.document.NumericField$DataType type>;

        $i1 = virtualinvoke $r5.<org.apache.lucene.document.NumericField$DataType: int ordinal()>();

        $i2 = $r6[$i1];

        tableswitch($i2)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            default: goto label7;
        };

     label3:
        $r10 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.analysis.NumericTokenStream numericTS>;

        $i4 = virtualinvoke $r13.<java.lang.Number: int intValue()>();

        virtualinvoke $r10.<org.apache.lucene.analysis.NumericTokenStream: org.apache.lucene.analysis.NumericTokenStream setIntValue(int)>($i4);

        goto label8;

     label4:
        $r9 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.analysis.NumericTokenStream numericTS>;

        $l3 = virtualinvoke $r13.<java.lang.Number: long longValue()>();

        virtualinvoke $r9.<org.apache.lucene.analysis.NumericTokenStream: org.apache.lucene.analysis.NumericTokenStream setLongValue(long)>($l3);

        goto label8;

     label5:
        $r8 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.analysis.NumericTokenStream numericTS>;

        $f0 = virtualinvoke $r13.<java.lang.Number: float floatValue()>();

        virtualinvoke $r8.<org.apache.lucene.analysis.NumericTokenStream: org.apache.lucene.analysis.NumericTokenStream setFloatValue(float)>($f0);

        goto label8;

     label6:
        $r7 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.analysis.NumericTokenStream numericTS>;

        $d0 = virtualinvoke $r13.<java.lang.Number: double doubleValue()>();

        virtualinvoke $r7.<org.apache.lucene.analysis.NumericTokenStream: org.apache.lucene.analysis.NumericTokenStream setDoubleValue(double)>($d0);

        goto label8;

     label7:
        $z2 = <org.apache.lucene.document.NumericField: boolean $assertionsDisabled>;

        if $z2 != 0 goto label8;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should never get here");

        throw $r11;

     label8:
        $r15 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.analysis.NumericTokenStream numericTS>;

        return $r15;
    }

    public byte[] getBinaryValue(byte[])
    {
        org.apache.lucene.document.NumericField r0;
        byte[] r1;

        r0 := @this: org.apache.lucene.document.NumericField;

        r1 := @parameter0: byte[];

        return null;
    }

    public java.io.Reader readerValue()
    {
        org.apache.lucene.document.NumericField r0;

        r0 := @this: org.apache.lucene.document.NumericField;

        return null;
    }

    public java.lang.String stringValue()
    {
        org.apache.lucene.document.NumericField r0;
        java.lang.Object $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.lucene.document.NumericField;

        $r1 = r0.<org.apache.lucene.document.NumericField: java.lang.Object fieldsData>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.lucene.document.NumericField: java.lang.Object fieldsData>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

     label2:
        return $r3;
    }

    public java.lang.Number getNumericValue()
    {
        org.apache.lucene.document.NumericField r0;
        java.lang.Object $r1;
        java.lang.Number $r2;

        r0 := @this: org.apache.lucene.document.NumericField;

        $r1 = r0.<org.apache.lucene.document.NumericField: java.lang.Object fieldsData>;

        $r2 = (java.lang.Number) $r1;

        return $r2;
    }

    public int getPrecisionStep()
    {
        int $i0;
        org.apache.lucene.document.NumericField r0;

        r0 := @this: org.apache.lucene.document.NumericField;

        $i0 = r0.<org.apache.lucene.document.NumericField: int precisionStep>;

        return $i0;
    }

    public org.apache.lucene.document.NumericField$DataType getDataType()
    {
        org.apache.lucene.document.NumericField r0;
        org.apache.lucene.document.NumericField$DataType $r1;

        r0 := @this: org.apache.lucene.document.NumericField;

        $r1 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.document.NumericField$DataType type>;

        return $r1;
    }

    public org.apache.lucene.document.NumericField setLongValue(long)
    {
        java.lang.Long $r2;
        org.apache.lucene.document.NumericField$DataType $r3;
        org.apache.lucene.document.NumericField r0;
        org.apache.lucene.analysis.NumericTokenStream $r1, $r4;
        long l0;

        r0 := @this: org.apache.lucene.document.NumericField;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.analysis.NumericTokenStream numericTS>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.analysis.NumericTokenStream numericTS>;

        virtualinvoke $r4.<org.apache.lucene.analysis.NumericTokenStream: org.apache.lucene.analysis.NumericTokenStream setLongValue(long)>(l0);

     label1:
        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r0.<org.apache.lucene.document.NumericField: java.lang.Object fieldsData> = $r2;

        $r3 = <org.apache.lucene.document.NumericField$DataType: org.apache.lucene.document.NumericField$DataType LONG>;

        r0.<org.apache.lucene.document.NumericField: org.apache.lucene.document.NumericField$DataType type> = $r3;

        return r0;
    }

    public org.apache.lucene.document.NumericField setIntValue(int)
    {
        org.apache.lucene.document.NumericField$DataType $r3;
        int i0;
        org.apache.lucene.document.NumericField r0;
        org.apache.lucene.analysis.NumericTokenStream $r1, $r4;
        java.lang.Integer $r2;

        r0 := @this: org.apache.lucene.document.NumericField;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.analysis.NumericTokenStream numericTS>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.analysis.NumericTokenStream numericTS>;

        virtualinvoke $r4.<org.apache.lucene.analysis.NumericTokenStream: org.apache.lucene.analysis.NumericTokenStream setIntValue(int)>(i0);

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<org.apache.lucene.document.NumericField: java.lang.Object fieldsData> = $r2;

        $r3 = <org.apache.lucene.document.NumericField$DataType: org.apache.lucene.document.NumericField$DataType INT>;

        r0.<org.apache.lucene.document.NumericField: org.apache.lucene.document.NumericField$DataType type> = $r3;

        return r0;
    }

    public org.apache.lucene.document.NumericField setDoubleValue(double)
    {
        java.lang.Double $r2;
        org.apache.lucene.document.NumericField$DataType $r3;
        org.apache.lucene.document.NumericField r0;
        org.apache.lucene.analysis.NumericTokenStream $r1, $r4;
        double d0;

        r0 := @this: org.apache.lucene.document.NumericField;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.analysis.NumericTokenStream numericTS>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.analysis.NumericTokenStream numericTS>;

        virtualinvoke $r4.<org.apache.lucene.analysis.NumericTokenStream: org.apache.lucene.analysis.NumericTokenStream setDoubleValue(double)>(d0);

     label1:
        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        r0.<org.apache.lucene.document.NumericField: java.lang.Object fieldsData> = $r2;

        $r3 = <org.apache.lucene.document.NumericField$DataType: org.apache.lucene.document.NumericField$DataType DOUBLE>;

        r0.<org.apache.lucene.document.NumericField: org.apache.lucene.document.NumericField$DataType type> = $r3;

        return r0;
    }

    public org.apache.lucene.document.NumericField setFloatValue(float)
    {
        java.lang.Float $r2;
        org.apache.lucene.document.NumericField$DataType $r3;
        org.apache.lucene.document.NumericField r0;
        org.apache.lucene.analysis.NumericTokenStream $r1, $r4;
        float f0;

        r0 := @this: org.apache.lucene.document.NumericField;

        f0 := @parameter0: float;

        $r1 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.analysis.NumericTokenStream numericTS>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.lucene.document.NumericField: org.apache.lucene.analysis.NumericTokenStream numericTS>;

        virtualinvoke $r4.<org.apache.lucene.analysis.NumericTokenStream: org.apache.lucene.analysis.NumericTokenStream setFloatValue(float)>(f0);

     label1:
        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        r0.<org.apache.lucene.document.NumericField: java.lang.Object fieldsData> = $r2;

        $r3 = <org.apache.lucene.document.NumericField$DataType: org.apache.lucene.document.NumericField$DataType FLOAT>;

        r0.<org.apache.lucene.document.NumericField: org.apache.lucene.document.NumericField$DataType type> = $r3;

        return r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/document/NumericField;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.document.NumericField: boolean $assertionsDisabled> = $z1;

        return;
    }
}
