public abstract class org.apache.commons.httpclient.HttpMethodBase extends java.lang.Object implements org.apache.commons.httpclient.HttpMethod
{
    private static final org.apache.commons.logging.Log LOG;
    private org.apache.commons.httpclient.HeaderGroup requestHeaders;
    protected org.apache.commons.httpclient.StatusLine statusLine;
    private org.apache.commons.httpclient.HeaderGroup responseHeaders;
    private org.apache.commons.httpclient.HeaderGroup responseTrailerHeaders;
    private java.lang.String path;
    private java.lang.String queryString;
    private java.io.InputStream responseStream;
    private org.apache.commons.httpclient.HttpConnection responseConnection;
    private byte[] responseBody;
    private boolean followRedirects;
    private boolean doAuthentication;
    private org.apache.commons.httpclient.params.HttpMethodParams params;
    private org.apache.commons.httpclient.auth.AuthState hostAuthState;
    private org.apache.commons.httpclient.auth.AuthState proxyAuthState;
    private boolean used;
    private int recoverableExceptionCount;
    private org.apache.commons.httpclient.HttpHost httphost;
    private org.apache.commons.httpclient.MethodRetryHandler methodRetryHandler;
    private boolean connectionCloseForced;
    private static final int RESPONSE_WAIT_TIME_MS;
    protected org.apache.commons.httpclient.HttpVersion effectiveVersion;
    private volatile boolean aborted;
    private boolean requestSent;
    private org.apache.commons.httpclient.cookie.CookieSpec cookiespec;
    private static final int DEFAULT_INITIAL_BUFFER_SIZE;
    static java.lang.Class class$org$apache$commons$httpclient$HttpMethodBase;

    public void <init>()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup $r1, $r2, $r3;
        org.apache.commons.httpclient.params.HttpMethodParams $r4;
        org.apache.commons.httpclient.auth.AuthState $r5, $r6;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.httpclient.HeaderGroup;

        specialinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup requestHeaders> = $r1;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine> = null;

        $r2 = new org.apache.commons.httpclient.HeaderGroup;

        specialinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseHeaders> = $r2;

        $r3 = new org.apache.commons.httpclient.HeaderGroup;

        specialinvoke $r3.<org.apache.commons.httpclient.HeaderGroup: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseTrailerHeaders> = $r3;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String path> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String queryString> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean followRedirects> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean doAuthentication> = 1;

        $r4 = new org.apache.commons.httpclient.params.HttpMethodParams;

        specialinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params> = $r4;

        $r5 = new org.apache.commons.httpclient.auth.AuthState;

        specialinvoke $r5.<org.apache.commons.httpclient.auth.AuthState: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState hostAuthState> = $r5;

        $r6 = new org.apache.commons.httpclient.auth.AuthState;

        specialinvoke $r6.<org.apache.commons.httpclient.auth.AuthState: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState proxyAuthState> = $r6;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean used> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: int recoverableExceptionCount> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean connectionCloseForced> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean aborted> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean requestSent> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec cookiespec> = null;

        return;
    }

    public void <init>(java.lang.String) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.params.HttpMethodParams $r4, $r17;
        org.apache.commons.httpclient.URIException $r7;
        java.lang.StringBuffer $r9, $r10, $r11, $r12, $r14;
        java.lang.String $r13, $r15, r16, $r18;
        boolean $z0;
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup $r1, $r2, $r3;
        java.lang.IllegalArgumentException $r8;
        org.apache.commons.httpclient.URI $r19;
        org.apache.commons.httpclient.auth.AuthState $r5, $r6;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r16 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.httpclient.HeaderGroup;

        specialinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup requestHeaders> = $r1;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine> = null;

        $r2 = new org.apache.commons.httpclient.HeaderGroup;

        specialinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseHeaders> = $r2;

        $r3 = new org.apache.commons.httpclient.HeaderGroup;

        specialinvoke $r3.<org.apache.commons.httpclient.HeaderGroup: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseTrailerHeaders> = $r3;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String path> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String queryString> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean followRedirects> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean doAuthentication> = 1;

        $r4 = new org.apache.commons.httpclient.params.HttpMethodParams;

        specialinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params> = $r4;

        $r5 = new org.apache.commons.httpclient.auth.AuthState;

        specialinvoke $r5.<org.apache.commons.httpclient.auth.AuthState: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState hostAuthState> = $r5;

        $r6 = new org.apache.commons.httpclient.auth.AuthState;

        specialinvoke $r6.<org.apache.commons.httpclient.auth.AuthState: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState proxyAuthState> = $r6;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean used> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: int recoverableExceptionCount> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean connectionCloseForced> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean aborted> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean requestSent> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec cookiespec> = null;

     label1:
        if r16 == null goto label2;

        $z0 = virtualinvoke r16.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label3;

     label2:
        r16 = "/";

     label3:
        $r17 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r18 = virtualinvoke $r17.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getUriCharset()>();

        $r19 = new org.apache.commons.httpclient.URI;

        specialinvoke $r19.<org.apache.commons.httpclient.URI: void <init>(java.lang.String,boolean,java.lang.String)>(r16, 1, $r18);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void setURI(org.apache.commons.httpclient.URI)>($r19);

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid uri \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r16);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\': ");

        $r13 = virtualinvoke $r7.<org.apache.commons.httpclient.URIException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label6:
        return;

        catch org.apache.commons.httpclient.URIException from label1 to label4 with label5;
    }

    public abstract java.lang.String getName();

    public org.apache.commons.httpclient.URI getURI() throws org.apache.commons.httpclient.URIException
    {
        org.apache.commons.httpclient.HttpHost $r2, $r8, $r11, $r13, $r14;
        org.apache.commons.httpclient.params.HttpMethodParams $r3;
        java.lang.StringBuffer $r18;
        int $i0, $i1, $i3;
        java.lang.String $r4, $r6, $r7, $r10, $r12, $r16, $r17;
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.protocol.Protocol $r9, $r15;
        org.apache.commons.httpclient.URI $r19;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost>;

        if $r2 == null goto label1;

        $r8 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost>;

        $r9 = virtualinvoke $r8.<org.apache.commons.httpclient.HttpHost: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        $r10 = virtualinvoke $r9.<org.apache.commons.httpclient.protocol.Protocol: java.lang.String getScheme()>();

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("://");

        $r11 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost>;

        $r12 = virtualinvoke $r11.<org.apache.commons.httpclient.HttpHost: java.lang.String getHostName()>();

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r13 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost>;

        $i0 = virtualinvoke $r13.<org.apache.commons.httpclient.HttpHost: int getPort()>();

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        $r14 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost>;

        $r15 = virtualinvoke $r14.<org.apache.commons.httpclient.HttpHost: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        $i1 = virtualinvoke $r15.<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>();

        if $i0 == $i1 goto label1;

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

     label1:
        $r16 = r1.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String path>;

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r17 = r1.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String queryString>;

        if $r17 == null goto label2;

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(63);

        $r7 = r1.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String queryString>;

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

     label2:
        $r3 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getUriCharset()>();

        $r19 = new org.apache.commons.httpclient.URI;

        $r6 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r19.<org.apache.commons.httpclient.URI: void <init>(java.lang.String,boolean,java.lang.String)>($r6, 1, $r4);

        return $r19;
    }

    public void setURI(org.apache.commons.httpclient.URI) throws org.apache.commons.httpclient.URIException
    {
        org.apache.commons.httpclient.HttpHost $r4;
        org.apache.commons.httpclient.HttpMethodBase r1;
        java.lang.String $r2, $r3, $r5;
        org.apache.commons.httpclient.URI r0;
        boolean $z0;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r0 := @parameter0: org.apache.commons.httpclient.URI;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.URI: boolean isAbsoluteURI()>();

        if $z0 == 0 goto label1;

        $r4 = new org.apache.commons.httpclient.HttpHost;

        specialinvoke $r4.<org.apache.commons.httpclient.HttpHost: void <init>(org.apache.commons.httpclient.URI)>(r0);

        r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost> = $r4;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.URI: java.lang.String getPath()>();

        if $r2 != null goto label2;

        $r5 = "/";

        goto label3;

     label2:
        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.URI: java.lang.String getEscapedPath()>();

     label3:
        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void setPath(java.lang.String)>($r5);

        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.URI: java.lang.String getEscapedQuery()>();

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void setQueryString(java.lang.String)>($r3);

        return;
    }

    public void setFollowRedirects(boolean)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean followRedirects> = z0;

        return;
    }

    public boolean getFollowRedirects()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean followRedirects>;

        return $z0;
    }

    public void setHttp11(boolean)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpVersion $r1, $r3;
        org.apache.commons.httpclient.params.HttpMethodParams $r2, $r4;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r3 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_1>;

        virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: void setVersion(org.apache.commons.httpclient.HttpVersion)>($r3);

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r1 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_0>;

        virtualinvoke $r2.<org.apache.commons.httpclient.params.HttpMethodParams: void setVersion(org.apache.commons.httpclient.HttpVersion)>($r1);

     label2:
        return;
    }

    public boolean getDoAuthentication()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean doAuthentication>;

        return $z0;
    }

    public void setDoAuthentication(boolean)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean doAuthentication> = z0;

        return;
    }

    public boolean isHttp11()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpVersion $r2, $r3;
        org.apache.commons.httpclient.params.HttpMethodParams $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpMethodParams: org.apache.commons.httpclient.HttpVersion getVersion()>();

        $r3 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_1>;

        $z0 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpVersion: boolean equals(org.apache.commons.httpclient.HttpVersion)>($r3);

        return $z0;
    }

    public void setPath(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.httpclient.HttpMethodBase r0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String path> = r1;

        return;
    }

    public void addRequestHeader(org.apache.commons.httpclient.Header)
    {
        org.apache.commons.httpclient.HttpMethodBase r2;
        org.apache.commons.httpclient.HeaderGroup $r3;
        org.apache.commons.logging.Log $r0, $r4;
        org.apache.commons.httpclient.Header r1;

        r2 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 := @parameter0: org.apache.commons.httpclient.Header;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("HttpMethodBase.addRequestHeader(Header)");

        if r1 != null goto label1;

        $r4 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("null header value ignored");

        goto label2;

     label1:
        $r3 = virtualinvoke r2.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        virtualinvoke $r3.<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>(r1);

     label2:
        return;
    }

    public void addResponseFooter(org.apache.commons.httpclient.Header)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.Header r2;
        org.apache.commons.httpclient.HeaderGroup $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r2 := @parameter0: org.apache.commons.httpclient.Header;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseTrailerHeaderGroup()>();

        virtualinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>(r2);

        return;
    }

    public java.lang.String getPath()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String path>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String path>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

     label1:
        $r3 = "/";

        goto label3;

     label2:
        $r3 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String path>;

     label3:
        return $r3;
    }

    public void setQueryString(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.httpclient.HttpMethodBase r0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String queryString> = r1;

        return;
    }

    public void setQueryString(org.apache.commons.httpclient.NameValuePair[])
    {
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.NameValuePair[] r2;
        org.apache.commons.logging.Log $r0;
        java.lang.String $r3;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r2 := @parameter0: org.apache.commons.httpclient.NameValuePair[];

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.setQueryString(NameValuePair[])");

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String formUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>(r2, "UTF-8");

        r1.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String queryString> = $r3;

        return;
    }

    public java.lang.String getQueryString()
    {
        java.lang.String $r1;
        org.apache.commons.httpclient.HttpMethodBase r0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String queryString>;

        return $r1;
    }

    public void setRequestHeader(java.lang.String, java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r3;
        java.lang.String r1, r2;
        org.apache.commons.httpclient.Header $r0;

        r3 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.apache.commons.httpclient.Header;

        specialinvoke $r0.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        virtualinvoke r3.<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(org.apache.commons.httpclient.Header)>($r0);

        return;
    }

    public void setRequestHeader(org.apache.commons.httpclient.Header)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup $r1, $r5, $r6;
        org.apache.commons.httpclient.Header r2, $r7;
        int $i0, i1;
        java.lang.String $r3;
        org.apache.commons.httpclient.Header[] $r4;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r2 := @parameter0: org.apache.commons.httpclient.Header;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r3 = virtualinvoke r2.<org.apache.commons.httpclient.Header: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>($r3);

        i1 = 0;

     label1:
        $i0 = lengthof $r4;

        if i1 >= $i0 goto label2;

        $r6 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r7 = $r4[i1];

        virtualinvoke $r6.<org.apache.commons.httpclient.HeaderGroup: void removeHeader(org.apache.commons.httpclient.Header)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        virtualinvoke $r5.<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>(r2);

        return;
    }

    public org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.HeaderGroup $r2;
        java.lang.String r0;
        org.apache.commons.httpclient.Header $r3;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>(r0);

        return $r3;
    }

    public org.apache.commons.httpclient.Header[] getRequestHeaders()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.Header[] $r2;
        org.apache.commons.httpclient.HeaderGroup $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getAllHeaders()>();

        return $r2;
    }

    public org.apache.commons.httpclient.Header[] getRequestHeaders(java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup $r1;
        java.lang.String r2;
        org.apache.commons.httpclient.Header[] $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r3 = virtualinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>(r2);

        return $r3;
    }

    protected org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup requestHeaders>;

        return $r1;
    }

    protected org.apache.commons.httpclient.HeaderGroup getResponseTrailerHeaderGroup()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseTrailerHeaders>;

        return $r1;
    }

    protected org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseHeaders>;

        return $r1;
    }

    public org.apache.commons.httpclient.Header[] getResponseHeaders(java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup $r1;
        java.lang.String r2;
        org.apache.commons.httpclient.Header[] $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        $r3 = virtualinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>(r2);

        return $r3;
    }

    public int getStatusCode()
    {
        int $i0;
        org.apache.commons.httpclient.StatusLine $r1;
        org.apache.commons.httpclient.HttpMethodBase r0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.StatusLine: int getStatusCode()>();

        return $i0;
    }

    public org.apache.commons.httpclient.StatusLine getStatusLine()
    {
        org.apache.commons.httpclient.StatusLine $r1;
        org.apache.commons.httpclient.HttpMethodBase r0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        return $r1;
    }

    private boolean responseAvailable()
    {
        byte[] $r1;
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.io.InputStream $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream>;

        if $r2 == null goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public org.apache.commons.httpclient.Header[] getResponseHeaders()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.Header[] $r2;
        org.apache.commons.httpclient.HeaderGroup $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getAllHeaders()>();

        return $r2;
    }

    public org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.HeaderGroup $r2;
        java.lang.String r0;
        org.apache.commons.httpclient.Header $r3;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>(r0);

        return $r3;
    }

    public long getResponseContentLength()
    {
        long $l3;
        org.apache.commons.httpclient.Header r3;
        java.lang.StringBuffer $r10, $r12, $r14;
        int $i0, $i1, $i2, i4, $i6;
        java.lang.String $r4, $r11, $r13;
        boolean $z0;
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup $r1;
        java.lang.NumberFormatException $r6;
        org.apache.commons.logging.Log $r5, $r7, $r9;
        org.apache.commons.httpclient.Header[] $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>("Content-Length");

        $i0 = lengthof $r2;

        if $i0 != 0 goto label1;

        return -1L;

     label1:
        $i1 = lengthof $r2;

        if $i1 <= 1 goto label2;

        $r5 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Multiple content-length headers detected");

     label2:
        $i2 = lengthof $r2;

        i4 = $i2 - 1;

     label3:
        if i4 < 0 goto label8;

        r3 = $r2[i4];

     label4:
        $r4 = virtualinvoke r3.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r4);

     label5:
        return $l3;

     label6:
        $r6 := @caughtexception;

        $r7 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label7;

        $r9 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid content-length value: ");

        $r11 = virtualinvoke $r6.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r13);

     label7:
        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label3;

     label8:
        return -1L;

        catch java.lang.NumberFormatException from label4 to label5 with label6;
    }

    public byte[] getResponseBody() throws java.io.IOException
    {
        byte[] $r1, $r6, $r7, $r15;
        java.io.ByteArrayOutputStream $r18;
        org.apache.commons.httpclient.params.HttpMethodParams $r3;
        long $l0, $l4;
        byte $b1, $b3, $b5, $b6;
        java.lang.StringBuffer $r10, $r11, $r12, $r16;
        int $i2, $i7, $i8, $i9, $i10, $i11;
        java.lang.String $r13;
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.io.IOException $r17;
        org.apache.commons.logging.Log $r4, $r14;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody>;

        if $r1 != null goto label8;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream getResponseBodyAsStream()>();

        if $r2 == null goto label8;

        $l0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: long getResponseContentLength()>();

        $b1 = $l0 cmp 2147483647L;

        $i9 = (int) $b1;

        if $i9 <= 0 goto label1;

        $r17 = new java.io.IOException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content too large to be buffered: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" bytes");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r17;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $i2 = virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpMethodParams: int getIntParameter(java.lang.String,int)>("http.method.response.buffer.warnlimit", 1048576);

        $b3 = $l0 cmp -1L;

        if $b3 == 0 goto label2;

        $l4 = (long) $i2;

        $b5 = $l0 cmp $l4;

        $i10 = (int) $b5;

        if $i10 <= 0 goto label3;

     label2:
        $r4 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Going to buffer response body of large or unknown size. Using getResponseBodyAsStream instead is recommended.");

     label3:
        $r14 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Buffering response body");

        $r18 = new java.io.ByteArrayOutputStream;

        $b6 = $l0 cmp 0L;

        $i11 = (int) $b6;

        if $i11 <= 0 goto label4;

        $i7 = (int) $l0;

        goto label5;

     label4:
        $i7 = 4096;

     label5:
        specialinvoke $r18.<java.io.ByteArrayOutputStream: void <init>(int)>($i7);

        $r7 = newarray (byte)[4096];

     label6:
        $i8 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r7);

        if $i8 <= 0 goto label7;

        virtualinvoke $r18.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r7, 0, $i8);

        goto label6;

     label7:
        virtualinvoke $r18.<java.io.ByteArrayOutputStream: void close()>();

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void setResponseStream(java.io.InputStream)>(null);

        $r6 = virtualinvoke $r18.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody> = $r6;

     label8:
        $r15 = r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody>;

        return $r15;
    }

    public byte[] getResponseBody(int) throws java.io.IOException
    {
        byte[] $r1, $r5, $r11, $r18;
        byte $b2, $b3, $b6;
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.io.ByteArrayOutputStream $r22;
        long $l1, $l5;
        java.lang.StringBuffer $r8, $r9, $r14, $r15, $r20, $r23;
        int i0, $i4, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i18;
        java.lang.String $r10, $r16;
        java.lang.IllegalArgumentException $r19;
        org.apache.commons.httpclient.HttpContentTooLargeException $r21, $r24;
        org.apache.commons.logging.Log $r3;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxlen must be positive");

        throw $r19;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody>;

        if $r1 != null goto label9;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream getResponseBodyAsStream()>();

        if $r2 == null goto label9;

        $l1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: long getResponseContentLength()>();

        $b2 = $l1 cmp -1L;

        if $b2 == 0 goto label2;

        $l5 = (long) i0;

        $b6 = $l1 cmp $l5;

        $i13 = (int) $b6;

        if $i13 <= 0 goto label2;

        $r21 = new org.apache.commons.httpclient.HttpContentTooLargeException;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content-Length is ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<org.apache.commons.httpclient.HttpContentTooLargeException: void <init>(java.lang.String,int)>($r16, i0);

        throw $r21;

     label2:
        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Buffering response body");

        $r22 = new java.io.ByteArrayOutputStream;

        $b3 = $l1 cmp 0L;

        $i14 = (int) $b3;

        if $i14 <= 0 goto label3;

        $i7 = (int) $l1;

        goto label4;

     label3:
        $i7 = 4096;

     label4:
        specialinvoke $r22.<java.io.ByteArrayOutputStream: void <init>(int)>($i7);

        $r11 = newarray (byte)[2048];

        i8 = 0;

     label5:
        $i9 = lengthof $r11;

        $i10 = i0 - i8;

        $i11 = staticinvoke <java.lang.Math: int min(int,int)>($i9, $i10);

        $i12 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>($r11, 0, $i11);

        $i16 = (int) -1;

        if $i12 != $i16 goto label6;

        goto label7;

     label6:
        virtualinvoke $r22.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r11, 0, $i12);

        i8 = i8 + $i12;

        if i8 < i0 goto label5;

     label7:
        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void setResponseStream(java.io.InputStream)>(null);

        if i8 != i0 goto label8;

        $i4 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        $i18 = (int) -1;

        if $i4 == $i18 goto label8;

        $r24 = new org.apache.commons.httpclient.HttpContentTooLargeException;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content-Length not known but larger than ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r24.<org.apache.commons.httpclient.HttpContentTooLargeException: void <init>(java.lang.String,int)>($r10, i0);

        throw $r24;

     label8:
        $r5 = virtualinvoke $r22.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody> = $r5;

     label9:
        $r18 = r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody>;

        return $r18;
    }

    public java.io.InputStream getResponseBodyAsStream() throws java.io.IOException
    {
        byte[] $r2, $r4;
        java.io.ByteArrayInputStream $r3;
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.logging.Log $r5;
        java.io.InputStream $r1, $r6;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream>;

        if $r1 == null goto label1;

        $r6 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream>;

        return $r6;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody>;

        if $r2 == null goto label2;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody>;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("re-creating response stream from byte array");

        return $r3;

     label2:
        return null;
    }

    public java.lang.String getResponseBodyAsString() throws java.io.IOException
    {
        byte[] r3;
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r3 = null;

        $z0 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: boolean responseAvailable()>();

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>();

     label1:
        if r3 == null goto label2;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getResponseCharSet()>();

        $r2 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],java.lang.String)>(r3, $r1);

        return $r2;

     label2:
        return null;
    }

    public java.lang.String getResponseBodyAsString(int) throws java.io.IOException
    {
        byte[] r4;
        org.apache.commons.httpclient.HttpMethodBase r0;
        int i0;
        java.lang.String $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxlen must be positive");

        throw $r3;

     label1:
        r4 = null;

        $z0 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: boolean responseAvailable()>();

        if $z0 == 0 goto label2;

        r4 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody(int)>(i0);

     label2:
        if r4 == null goto label3;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getResponseCharSet()>();

        $r2 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],java.lang.String)>(r4, $r1);

        return $r2;

     label3:
        return null;
    }

    public org.apache.commons.httpclient.Header[] getResponseFooters()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.Header[] $r2;
        org.apache.commons.httpclient.HeaderGroup $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseTrailerHeaderGroup()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getAllHeaders()>();

        return $r2;
    }

    public org.apache.commons.httpclient.Header getResponseFooter(java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.HeaderGroup $r2;
        java.lang.String r0;
        org.apache.commons.httpclient.Header $r3;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseTrailerHeaderGroup()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>(r0);

        return $r3;
    }

    protected void setResponseStream(java.io.InputStream)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 := @parameter0: java.io.InputStream;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream> = r1;

        return;
    }

    protected java.io.InputStream getResponseStream()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream>;

        return $r1;
    }

    public java.lang.String getStatusText()
    {
        java.lang.String $r2;
        org.apache.commons.httpclient.StatusLine $r1;
        org.apache.commons.httpclient.HttpMethodBase r0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.StatusLine: java.lang.String getReasonPhrase()>();

        return $r2;
    }

    public void setStrictMode(boolean)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.params.HttpMethodParams $r1, $r2;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        virtualinvoke $r2.<org.apache.commons.httpclient.params.HttpMethodParams: void makeStrict()>();

        goto label2;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpMethodParams: void makeLenient()>();

     label2:
        return;
    }

    public boolean isStrictMode()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        return 0;
    }

    public void addRequestHeader(java.lang.String, java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String r2, r3;
        org.apache.commons.httpclient.Header $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = new org.apache.commons.httpclient.Header;

        specialinvoke $r1.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeader(org.apache.commons.httpclient.Header)>($r1);

        return;
    }

    protected boolean isConnectionCloseForced()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean connectionCloseForced>;

        return $z0;
    }

    protected void setConnectionCloseForced(boolean)
    {
        org.apache.commons.httpclient.HttpMethodBase r1;
        java.lang.StringBuffer $r2, $r4, $r5;
        org.apache.commons.logging.Log $r0, $r3;
        java.lang.String $r6;
        boolean $z0, z1;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        z1 := @parameter0: boolean;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Force-close connection: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r6);

     label1:
        r1.<org.apache.commons.httpclient.HttpMethodBase: boolean connectionCloseForced> = z1;

        return;
    }

    protected boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.Header r45;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpConnection r1;
        org.apache.commons.httpclient.HttpVersion $r6, $r14, $r47, $r48, $r49, $r50;
        java.lang.StringBuffer $r3, $r5, $r8, $r11, $r13, $r16, $r21, $r23, $r25, $r28, $r30, $r32, $r35, $r37, $r39;
        java.lang.String $r7, $r9, $r15, $r17, $r18, $r19, $r24, $r26, $r31, $r33, $r38, $r40;
        org.apache.commons.httpclient.HeaderGroup $r41, $r42, $r43;
        org.apache.commons.logging.Log $r2, $r4, $r10, $r12, $r20, $r22, $r27, $r29, $r34, $r36, $r44, $r46;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: boolean isConnectionCloseForced()>();

        if $z0 == 0 goto label01;

        $r44 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r44.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Should force-close connection.");

        return 1;

     label01:
        r45 = null;

        $z1 = virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: boolean isTransparent()>();

        if $z1 != 0 goto label02;

        $r43 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseHeaders>;

        r45 = virtualinvoke $r43.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getFirstHeader(java.lang.String)>("proxy-connection");

     label02:
        if r45 != null goto label03;

        $r42 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseHeaders>;

        r45 = virtualinvoke $r42.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getFirstHeader(java.lang.String)>("connection");

     label03:
        if r45 != null goto label04;

        $r41 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup requestHeaders>;

        r45 = virtualinvoke $r41.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getFirstHeader(java.lang.String)>("connection");

     label04:
        if r45 == null goto label09;

        $r18 = virtualinvoke r45.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $z4 = virtualinvoke $r18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("close");

        if $z4 == 0 goto label06;

        $r34 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z8 = interfaceinvoke $r34.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z8 == 0 goto label05;

        $r36 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Should close connection in response to directive: ");

        $r38 = virtualinvoke r45.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r36.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r40);

     label05:
        return 1;

     label06:
        $r19 = virtualinvoke r45.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $z5 = virtualinvoke $r19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("keep-alive");

        if $z5 == 0 goto label08;

        $r27 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z7 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z7 == 0 goto label07;

        $r29 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Should NOT close connection in response to directive: ");

        $r31 = virtualinvoke r45.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r29.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r33);

     label07:
        return 0;

     label08:
        $r20 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z6 = interfaceinvoke $r20.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z6 == 0 goto label09;

        $r22 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown directive: ");

        $r24 = virtualinvoke r45.<org.apache.commons.httpclient.Header: java.lang.String toExternalForm()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r26);

     label09:
        $r46 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r46.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Resorting to protocol version default close connection policy");

        $r47 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion>;

        $r48 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_1>;

        $z9 = virtualinvoke $r47.<org.apache.commons.httpclient.HttpVersion: boolean greaterEquals(org.apache.commons.httpclient.HttpVersion)>($r48);

        if $z9 == 0 goto label10;

        $r10 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z3 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label11;

        $r12 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Should NOT close connection, using ");

        $r14 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion>;

        $r15 = virtualinvoke $r14.<org.apache.commons.httpclient.HttpVersion: java.lang.String toString()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r17);

        goto label11;

     label10:
        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z2 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label11;

        $r4 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Should close connection, using ");

        $r6 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion>;

        $r7 = virtualinvoke $r6.<org.apache.commons.httpclient.HttpVersion: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

     label11:
        $r49 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion>;

        $r50 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_0>;

        $z10 = virtualinvoke $r49.<org.apache.commons.httpclient.HttpVersion: boolean lessEquals(org.apache.commons.httpclient.HttpVersion)>($r50);

        return $z10;
    }

    private void checkExecuteConditions(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws org.apache.commons.httpclient.HttpException
    {
        java.lang.IllegalStateException $r4;
        org.apache.commons.httpclient.HttpConnection r1;
        org.apache.commons.httpclient.HttpMethodBase r2;
        java.lang.IllegalArgumentException $r5, $r6;
        org.apache.commons.httpclient.ProtocolException $r3;
        org.apache.commons.httpclient.HttpState r0;
        boolean $z0, $z1;

        r2 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r0 := @parameter0: org.apache.commons.httpclient.HttpState;

        r1 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HttpState parameter may not be null");

        throw $r6;

     label1:
        if r1 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HttpConnection parameter may not be null");

        throw $r5;

     label2:
        $z0 = r2.<org.apache.commons.httpclient.HttpMethodBase: boolean aborted>;

        if $z0 == 0 goto label3;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Method has been aborted");

        throw $r4;

     label3:
        $z1 = virtualinvoke r2.<org.apache.commons.httpclient.HttpMethodBase: boolean validate()>();

        if $z1 != 0 goto label4;

        $r3 = new org.apache.commons.httpclient.ProtocolException;

        specialinvoke $r3.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>("HttpMethodBase object not valid");

        throw $r3;

     label4:
        return;
    }

    public int execute(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws org.apache.commons.httpclient.HttpException, java.io.IOException
    {
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.HttpConnection r2;
        org.apache.commons.httpclient.HttpVersion $r4, $r7;
        org.apache.commons.httpclient.params.HttpMethodParams $r6;
        org.apache.commons.httpclient.HttpState r3;
        int $i0;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.StatusLine $r5;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r3 := @parameter0: org.apache.commons.httpclient.HttpState;

        r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.execute(HttpState, HttpConnection)");

        r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection> = r2;

        specialinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void checkExecuteConditions(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r3, r2);

        r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine> = null;

        r1.<org.apache.commons.httpclient.HttpMethodBase: boolean connectionCloseForced> = 0;

        virtualinvoke r2.<org.apache.commons.httpclient.HttpConnection: void setLastResponseInputStream(java.io.InputStream)>(null);

        $r4 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion>;

        if $r4 != null goto label1;

        $r6 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r7 = virtualinvoke $r6.<org.apache.commons.httpclient.params.HttpMethodParams: org.apache.commons.httpclient.HttpVersion getVersion()>();

        r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion> = $r7;

     label1:
        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r3, r2);

        r1.<org.apache.commons.httpclient.HttpMethodBase: boolean requestSent> = 1;

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void readResponse(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r3, r2);

        r1.<org.apache.commons.httpclient.HttpMethodBase: boolean used> = 1;

        $r5 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        $i0 = virtualinvoke $r5.<org.apache.commons.httpclient.StatusLine: int getStatusCode()>();

        return $i0;
    }

    public void abort()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpConnection r1;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean aborted>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean aborted> = 1;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        if r1 == null goto label2;

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label2:
        return;
    }

    public boolean hasBeenUsed()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean used>;

        return $z0;
    }

    public void recycle()
    {
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.HeaderGroup $r2, $r3, $r4;
        org.apache.commons.httpclient.params.HttpMethodParams $r5;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.auth.AuthState $r6, $r7;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.recycle()");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void releaseConnection()>();

        r1.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String path> = null;

        r1.<org.apache.commons.httpclient.HttpMethodBase: boolean followRedirects> = 0;

        r1.<org.apache.commons.httpclient.HttpMethodBase: boolean doAuthentication> = 1;

        r1.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String queryString> = null;

        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: void clear()>();

        $r3 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        virtualinvoke $r3.<org.apache.commons.httpclient.HeaderGroup: void clear()>();

        $r4 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseTrailerHeaderGroup()>();

        virtualinvoke $r4.<org.apache.commons.httpclient.HeaderGroup: void clear()>();

        r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine> = null;

        r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion> = null;

        r1.<org.apache.commons.httpclient.HttpMethodBase: boolean aborted> = 0;

        r1.<org.apache.commons.httpclient.HttpMethodBase: boolean used> = 0;

        $r5 = new org.apache.commons.httpclient.params.HttpMethodParams;

        specialinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: void <init>()>();

        r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params> = $r5;

        r1.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody> = null;

        r1.<org.apache.commons.httpclient.HttpMethodBase: int recoverableExceptionCount> = 0;

        r1.<org.apache.commons.httpclient.HttpMethodBase: boolean connectionCloseForced> = 0;

        $r6 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState hostAuthState>;

        virtualinvoke $r6.<org.apache.commons.httpclient.auth.AuthState: void invalidate()>();

        $r7 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState proxyAuthState>;

        virtualinvoke $r7.<org.apache.commons.httpclient.auth.AuthState: void invalidate()>();

        r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec cookiespec> = null;

        r1.<org.apache.commons.httpclient.HttpMethodBase: boolean requestSent> = 0;

        return;
    }

    public void releaseConnection()
    {
        java.lang.Throwable $r3;
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.io.IOException $r4;
        java.io.InputStream $r1, $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream>;

        if $r1 == null goto label5;

     label2:
        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void ensureConnectionRelease()>();

        goto label8;

     label6:
        $r3 := @caughtexception;

     label7:
        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void ensureConnectionRelease()>();

        throw $r3;

     label8:
        return;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void removeRequestHeader(java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup $r1, $r4;
        org.apache.commons.httpclient.Header $r5;
        int $i0, i1;
        java.lang.String r2;
        org.apache.commons.httpclient.Header[] $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r3 = virtualinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>(r2);

        i1 = 0;

     label1:
        $i0 = lengthof $r3;

        if i1 >= $i0 goto label2;

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r5 = $r3[i1];

        virtualinvoke $r4.<org.apache.commons.httpclient.HeaderGroup: void removeHeader(org.apache.commons.httpclient.Header)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void removeRequestHeader(org.apache.commons.httpclient.Header)
    {
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.Header r0;
        org.apache.commons.httpclient.HeaderGroup $r2;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r0 := @parameter0: org.apache.commons.httpclient.Header;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: void removeHeader(org.apache.commons.httpclient.Header)>(r0);

        return;
    }

    public boolean validate()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        return 1;
    }

    private org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(org.apache.commons.httpclient.HttpState)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.cookie.CookieSpec $r1, $r3, $r5, $r10, $r11;
        java.util.Collection $r7;
        org.apache.commons.httpclient.params.HttpMethodParams $r4, $r8;
        org.apache.commons.httpclient.HttpState r2;
        int $i0, $i2;
        java.lang.Object $r6;
        java.lang.String $r9;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r2 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec cookiespec>;

        if $r1 != null goto label3;

        $i0 = virtualinvoke r2.<org.apache.commons.httpclient.HttpState: int getCookiePolicy()>();

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $r8 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r9 = virtualinvoke $r8.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getCookiePolicy()>();

        $r10 = staticinvoke <org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>($r9);

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec cookiespec> = $r10;

        goto label2;

     label1:
        $r3 = staticinvoke <org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getSpecByPolicy(int)>($i0);

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec cookiespec> = $r3;

     label2:
        $r5 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec cookiespec>;

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r6 = virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Object getParameter(java.lang.String)>("http.dateparser.patterns");

        $r7 = (java.util.Collection) $r6;

        interfaceinvoke $r5.<org.apache.commons.httpclient.cookie.CookieSpec: void setValidDateFormats(java.util.Collection)>($r7);

     label3:
        $r11 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec cookiespec>;

        return $r11;
    }

    protected void addCookieRequestHeader(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.cookie.CookieVersionSupport r26;
        org.apache.commons.httpclient.params.HttpMethodParams $r6, $r12;
        org.apache.commons.httpclient.Header $r14, $r19, $r22, r24;
        org.apache.commons.httpclient.HttpState r4;
        boolean $z0, $z1, $z2, $z3, z4;
        org.apache.commons.httpclient.Cookie[] $r10, $r11;
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.HttpConnection r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        java.lang.String $r7, $r9, $r17, $r20, r25;
        org.apache.commons.httpclient.HeaderGroup $r2, $r13, $r18, $r21, $r23;
        org.apache.commons.httpclient.cookie.CookieSpec $r5;
        org.apache.commons.httpclient.Cookie $r15, $r16;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.Header[] $r3;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r4 := @parameter0: org.apache.commons.httpclient.HttpState;

        r8 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.addCookieRequestHeader(HttpState, HttpConnection)");

        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>("Cookie");

        i7 = 0;

     label01:
        $i0 = lengthof $r3;

        if i7 >= $i0 goto label03;

        r24 = $r3[i7];

        $z3 = virtualinvoke r24.<org.apache.commons.httpclient.Header: boolean isAutogenerated()>();

        if $z3 == 0 goto label02;

        $r23 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        virtualinvoke $r23.<org.apache.commons.httpclient.HeaderGroup: void removeHeader(org.apache.commons.httpclient.Header)>(r24);

     label02:
        i7 = i7 + 1;

        goto label01;

     label03:
        $r5 = specialinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(org.apache.commons.httpclient.HttpState)>(r4);

        $r6 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r7 = virtualinvoke $r6.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>();

        r25 = $r7;

        if $r7 != null goto label04;

        r25 = virtualinvoke r8.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

     label04:
        $i1 = virtualinvoke r8.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $r9 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getPath()>();

        $z0 = virtualinvoke r8.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

        $r10 = virtualinvoke r4.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Cookie[] getCookies()>();

        $r11 = interfaceinvoke $r5.<org.apache.commons.httpclient.cookie.CookieSpec: org.apache.commons.httpclient.Cookie[] match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie[])>(r25, $i1, $r9, $z0, $r10);

        if $r11 == null goto label11;

        $i2 = lengthof $r11;

        if $i2 <= 0 goto label11;

        $r12 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $z1 = virtualinvoke $r12.<org.apache.commons.httpclient.params.HttpMethodParams: boolean isParameterTrue(java.lang.String)>("http.protocol.single-cookie-header");

        if $z1 == 0 goto label05;

        $r20 = interfaceinvoke $r5.<org.apache.commons.httpclient.cookie.CookieSpec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>($r11);

        $r21 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r22 = new org.apache.commons.httpclient.Header;

        specialinvoke $r22.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>("Cookie", $r20, 1);

        virtualinvoke $r21.<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>($r22);

        goto label07;

     label05:
        i8 = 0;

     label06:
        $i3 = lengthof $r11;

        if i8 >= $i3 goto label07;

        $r16 = $r11[i8];

        $r17 = interfaceinvoke $r5.<org.apache.commons.httpclient.cookie.CookieSpec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>($r16);

        $r18 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r19 = new org.apache.commons.httpclient.Header;

        specialinvoke $r19.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>("Cookie", $r17, 1);

        virtualinvoke $r18.<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>($r19);

        i8 = i8 + 1;

        goto label06;

     label07:
        $z2 = $r5 instanceof org.apache.commons.httpclient.cookie.CookieVersionSupport;

        if $z2 == 0 goto label11;

        r26 = (org.apache.commons.httpclient.cookie.CookieVersionSupport) $r5;

        $i4 = interfaceinvoke r26.<org.apache.commons.httpclient.cookie.CookieVersionSupport: int getVersion()>();

        z4 = 0;

        i9 = 0;

     label08:
        $i5 = lengthof $r11;

        if i9 >= $i5 goto label10;

        $r15 = $r11[i9];

        $i6 = virtualinvoke $r15.<org.apache.commons.httpclient.Cookie: int getVersion()>();

        if $i4 == $i6 goto label09;

        z4 = 1;

     label09:
        i9 = i9 + 1;

        goto label08;

     label10:
        if z4 == 0 goto label11;

        $r13 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r14 = interfaceinvoke r26.<org.apache.commons.httpclient.cookie.CookieVersionSupport: org.apache.commons.httpclient.Header getVersionHeader()>();

        virtualinvoke $r13.<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>($r14);

     label11:
        return;
    }

    protected void addHostRequestHeader(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpConnection r4;
        org.apache.commons.httpclient.params.HttpMethodParams $r2;
        java.lang.StringBuffer $r7, $r8, $r9, $r10, $r12, $r14, $r15;
        org.apache.commons.httpclient.HttpState r17;
        int $i0, $i1;
        java.lang.String $r3, $r16, r18;
        boolean $z0;
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.protocol.Protocol $r6;
        org.apache.commons.logging.Log $r0, $r5, $r11, $r13;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r17 := @parameter0: org.apache.commons.httpclient.HttpState;

        r4 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.addHostRequestHeader(HttpState, HttpConnection)");

        $r2 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>();

        r18 = $r3;

        if $r3 == null goto label1;

        $r13 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Using virtual host name: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r16);

        goto label2;

     label1:
        r18 = virtualinvoke r4.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

     label2:
        $i0 = virtualinvoke r4.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $r5 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label3;

        $r11 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Adding Host request header");

     label3:
        $r6 = virtualinvoke r4.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        $i1 = virtualinvoke $r6.<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>();

        if $i1 == $i0 goto label4;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r18);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        r18 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label4:
        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(java.lang.String,java.lang.String)>("Host", r18);

        return;
    }

    protected void addProxyConnectionHeader(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpConnection r1;
        org.apache.commons.httpclient.HttpMethodBase r2;
        org.apache.commons.httpclient.HttpState r4;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.Header $r3;
        boolean $z0;

        r2 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r4 := @parameter0: org.apache.commons.httpclient.HttpState;

        r1 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.addProxyConnectionHeader(HttpState, HttpConnection)");

        $z0 = virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: boolean isTransparent()>();

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r2.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>("Proxy-Connection");

        if $r3 != null goto label1;

        virtualinvoke r2.<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeader(java.lang.String,java.lang.String)>("Proxy-Connection", "Keep-Alive");

     label1:
        return;
    }

    protected void addRequestHeaders(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.HttpConnection r3;
        org.apache.commons.httpclient.HttpState r2;
        org.apache.commons.logging.Log $r0;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r2 := @parameter0: org.apache.commons.httpclient.HttpState;

        r3 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.addRequestHeaders(HttpState, HttpConnection)");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void addUserAgentRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r2, r3);

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r2, r3);

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r2, r3);

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void addProxyConnectionHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r2, r3);

        return;
    }

    protected void addUserAgentRequestHeader(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.HttpConnection r6;
        org.apache.commons.httpclient.params.HttpMethodParams $r3;
        org.apache.commons.httpclient.Header $r2;
        org.apache.commons.httpclient.HttpState r5;
        org.apache.commons.logging.Log $r0;
        java.lang.Object $r4;
        java.lang.String r7;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r5 := @parameter0: org.apache.commons.httpclient.HttpState;

        r6 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.addUserAgentRequestHeaders(HttpState, HttpConnection)");

        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>("User-Agent");

        if $r2 != null goto label2;

        $r3 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Object getParameter(java.lang.String)>("http.useragent");

        r7 = (java.lang.String) $r4;

        if r7 != null goto label1;

        r7 = "Jakarta Commons-HttpClient";

     label1:
        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(java.lang.String,java.lang.String)>("User-Agent", r7);

     label2:
        return;
    }

    protected void checkNotUsed() throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r1;
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean used>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already used.");

        throw $r1;

     label1:
        return;
    }

    protected void checkUsed() throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r1;
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean used>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not Used.");

        throw $r1;

     label1:
        return;
    }

    protected static java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.commons.httpclient.HttpConnection r3;
        java.lang.StringBuffer $r12;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        java.lang.String r2, r4, r5, r6, $r8, $r9, $r10, $r11;
        boolean $z0, $z1, $z2;
        org.apache.commons.httpclient.protocol.Protocol $r7;
        org.apache.commons.logging.Log $r0;

        r3 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        r6 := @parameter4: java.lang.String;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.generateRequestLine(HttpConnection, String, String, String, String)");

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $z0 = virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: boolean isTransparent()>();

        if $z0 != 0 goto label1;

        $r7 = virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        $r8 = virtualinvoke $r7.<org.apache.commons.httpclient.protocol.Protocol: java.lang.String getScheme()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("://");

        $r10 = virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $i1 = virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $i6 = (int) -1;

        if $i1 == $i6 goto label1;

        $i2 = virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $i3 = virtualinvoke $r7.<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>();

        if $i2 == $i3 goto label1;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $i4 = virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

     label1:
        if r4 != null goto label2;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        goto label4;

     label2:
        $z1 = virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: boolean isTransparent()>();

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z2 != 0 goto label3;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

     label3:
        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

     label4:
        if r5 == null goto label6;

        $i0 = virtualinvoke r5.<java.lang.String: int indexOf(java.lang.String)>("?");

        if $i0 == 0 goto label5;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("?");

     label5:
        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

     label6:
        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        $r11 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }

    protected void processResponseBody(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpConnection r2;
        org.apache.commons.httpclient.HttpState r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        return;
    }

    protected void processResponseHeaders(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.cookie.CookieVersionSupport r7;
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.HttpConnection r6;
        org.apache.commons.httpclient.cookie.CookieSpec $r3;
        org.apache.commons.httpclient.HeaderGroup $r4, $r8;
        org.apache.commons.httpclient.HttpState r2;
        int $i0;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.Header[] $r5, $r9;
        boolean $z0;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r2 := @parameter0: org.apache.commons.httpclient.HttpState;

        r6 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.processResponseHeaders(HttpState, HttpConnection)");

        $r3 = specialinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(org.apache.commons.httpclient.HttpState)>(r2);

        $r4 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        $r5 = virtualinvoke $r4.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>("set-cookie");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r3, $r5, r2, r6);

        $z0 = $r3 instanceof org.apache.commons.httpclient.cookie.CookieVersionSupport;

        if $z0 == 0 goto label1;

        r7 = (org.apache.commons.httpclient.cookie.CookieVersionSupport) $r3;

        $i0 = interfaceinvoke r7.<org.apache.commons.httpclient.cookie.CookieVersionSupport: int getVersion()>();

        if $i0 <= 0 goto label1;

        $r8 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        $r9 = virtualinvoke $r8.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>("set-cookie2");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r3, $r9, r2, r6);

     label1:
        return;
    }

    protected void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec, org.apache.commons.httpclient.Header[], org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.params.HttpMethodParams $r2;
        org.apache.commons.httpclient.Header r5;
        org.apache.commons.httpclient.HttpState r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.commons.httpclient.Cookie[] r43;
        org.apache.commons.httpclient.cookie.MalformedCookieException $r20, $r31;
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.HttpConnection r7;
        java.lang.StringBuffer $r13, $r15, $r17, $r18, $r22, $r24, $r26, $r27, $r29, $r33, $r35, $r37, $r38, $r40;
        int $i0, $i1, $i2, i3, $i4, i5;
        java.lang.String $r3, $r8, $r10, $r16, $r19, $r25, $r28, $r30, $r36, $r39, $r41, r42;
        org.apache.commons.httpclient.cookie.CookieSpec r6;
        org.apache.commons.httpclient.Cookie r9;
        org.apache.commons.logging.Log $r0, $r12, $r14, $r21, $r23, $r32, $r34;
        org.apache.commons.httpclient.Header[] r4;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r6 := @parameter0: org.apache.commons.httpclient.cookie.CookieSpec;

        r4 := @parameter1: org.apache.commons.httpclient.Header[];

        r11 := @parameter2: org.apache.commons.httpclient.HttpState;

        r7 := @parameter3: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.processCookieHeaders(Header[], HttpState, HttpConnection)");

        $r2 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>();

        r42 = $r3;

        if $r3 != null goto label01;

        r42 = virtualinvoke r7.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

     label01:
        i3 = 0;

     label02:
        $i4 = lengthof r4;

        if i3 >= $i4 goto label13;

        r5 = r4[i3];

        r43 = null;

     label03:
        $i0 = virtualinvoke r7.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $r8 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getPath()>();

        $z0 = virtualinvoke r7.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

        r43 = interfaceinvoke r6.<org.apache.commons.httpclient.cookie.CookieSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Header)>(r42, $i0, $r8, $z0, r5);

     label04:
        goto label06;

     label05:
        $r31 := @caughtexception;

        $r32 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z4 = interfaceinvoke $r32.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z4 == 0 goto label06;

        $r34 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid cookie header: \"");

        $r36 = virtualinvoke r5.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\". ");

        $r39 = virtualinvoke $r31.<org.apache.commons.httpclient.cookie.MalformedCookieException: java.lang.String getMessage()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r34.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r41);

     label06:
        if r43 == null goto label12;

        i5 = 0;

     label07:
        $i1 = lengthof r43;

        if i5 >= $i1 goto label12;

        r9 = r43[i5];

     label08:
        $i2 = virtualinvoke r7.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $r10 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getPath()>();

        $z1 = virtualinvoke r7.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

        interfaceinvoke r6.<org.apache.commons.httpclient.cookie.CookieSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>(r42, $i2, $r10, $z1, r9);

        virtualinvoke r11.<org.apache.commons.httpclient.HttpState: void addCookie(org.apache.commons.httpclient.Cookie)>(r9);

        $r12 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z2 = interfaceinvoke $r12.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label09;

        $r14 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cookie accepted: \"");

        $r16 = interfaceinvoke r6.<org.apache.commons.httpclient.cookie.CookieSpec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>(r9);

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r19);

     label09:
        goto label11;

     label10:
        $r20 := @caughtexception;

        $r21 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z3 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z3 == 0 goto label11;

        $r23 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cookie rejected: \"");

        $r25 = interfaceinvoke r6.<org.apache.commons.httpclient.cookie.CookieSpec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>(r9);

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\". ");

        $r28 = virtualinvoke $r20.<org.apache.commons.httpclient.cookie.MalformedCookieException: java.lang.String getMessage()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r23.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r30);

     label11:
        i5 = i5 + 1;

        goto label07;

     label12:
        i3 = i3 + 1;

        goto label02;

     label13:
        return;

        catch org.apache.commons.httpclient.cookie.MalformedCookieException from label03 to label04 with label05;
        catch org.apache.commons.httpclient.cookie.MalformedCookieException from label08 to label09 with label10;
    }

    protected void processStatusLine(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpConnection r2;
        org.apache.commons.httpclient.HttpState r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        return;
    }

    protected void readResponse(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpConnection r4;
        org.apache.commons.httpclient.HttpState r3;
        java.lang.StringBuffer $r7, $r9, $r12;
        int $i0;
        java.lang.String $r11, $r13;
        boolean $z0;
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.logging.Log $r0, $r6, $r8;
        org.apache.commons.httpclient.StatusLine $r2, $r5, $r10;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r3 := @parameter0: org.apache.commons.httpclient.HttpState;

        r4 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.readResponse(HttpState, HttpConnection)");

     label1:
        $r2 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        if $r2 != null goto label4;

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r3, r4);

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void processStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r3, r4);

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void readResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r3, r4);

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void processResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r3, r4);

        $r5 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        $i0 = virtualinvoke $r5.<org.apache.commons.httpclient.StatusLine: int getStatusCode()>();

        if $i0 < 100 goto label3;

        if $i0 >= 200 goto label3;

        $r6 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label2;

        $r8 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Discarding unexpected response: ");

        $r10 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        $r11 = virtualinvoke $r10.<org.apache.commons.httpclient.StatusLine: java.lang.String toString()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r13);

     label2:
        r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine> = null;

     label3:
        goto label1;

     label4:
        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void readResponseBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r3, r4);

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void processResponseBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r3, r4);

        return;
    }

    protected void readResponseBody(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.HttpConnection r2;
        org.apache.commons.httpclient.HttpState r4;
        org.apache.commons.logging.Log $r0;
        java.io.InputStream $r3;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r4 := @parameter0: org.apache.commons.httpclient.HttpState;

        r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.readResponseBody(HttpState, HttpConnection)");

        $r3 = specialinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>(r2);

        if $r3 != null goto label1;

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>();

        goto label2;

     label1:
        virtualinvoke r2.<org.apache.commons.httpclient.HttpConnection: void setLastResponseInputStream(java.io.InputStream)>($r3);

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void setResponseStream(java.io.InputStream)>($r3);

     label2:
        return;
    }

    private java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection) throws org.apache.commons.httpclient.HttpException, java.io.IOException
    {
        org.apache.commons.httpclient.params.HttpMethodParams $r24;
        org.apache.commons.httpclient.Wire $r4, $r36;
        org.apache.commons.httpclient.Header $r7, $r14;
        org.apache.commons.httpclient.HeaderElement $r20;
        byte $b2;
        org.apache.commons.httpclient.HeaderElement[] $r39;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.params.HttpConnectionParams $r23;
        org.apache.commons.httpclient.ContentLengthInputStream $r8;
        org.apache.commons.httpclient.HttpConnection r2;
        org.apache.commons.httpclient.HttpVersion $r11, $r12;
        long $l1;
        java.lang.StringBuffer $r30, $r32, $r33;
        int $i0, $i3, $i4, $i5;
        java.lang.String $r15, $r17, $r18, $r21, $r22, $r28, $r34, r40;
        org.apache.commons.httpclient.WireLogInputStream $r35;
        org.apache.commons.httpclient.HttpMethodBase$1 $r10;
        org.apache.commons.httpclient.HeaderGroup $r6, $r13;
        org.apache.commons.httpclient.ChunkedInputStream $r27;
        org.apache.commons.httpclient.ProtocolException $r26;
        org.apache.commons.httpclient.AutoCloseInputStream $r9;
        org.apache.commons.logging.Log $r0, $r16, $r19, $r25, $r29, $r31;
        org.apache.commons.httpclient.StatusLine $r5;
        java.io.InputStream $r3, r37, r38;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r2 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.readResponseBody(HttpConnection)");

        r1.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody> = null;

        $r3 = virtualinvoke r2.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream getResponseInputStream()>();

        r37 = $r3;

        $r4 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire CONTENT_WIRE>;

        $z0 = virtualinvoke $r4.<org.apache.commons.httpclient.Wire: boolean enabled()>();

        if $z0 == 0 goto label01;

        $r35 = new org.apache.commons.httpclient.WireLogInputStream;

        $r36 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire CONTENT_WIRE>;

        specialinvoke $r35.<org.apache.commons.httpclient.WireLogInputStream: void <init>(java.io.InputStream,org.apache.commons.httpclient.Wire)>($r3, $r36);

        r37 = $r35;

     label01:
        $r5 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        $i0 = virtualinvoke $r5.<org.apache.commons.httpclient.StatusLine: int getStatusCode()>();

        $z1 = staticinvoke <org.apache.commons.httpclient.HttpMethodBase: boolean canResponseHaveBody(int)>($i0);

        r38 = null;

        $r6 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseHeaders>;

        $r7 = virtualinvoke $r6.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getFirstHeader(java.lang.String)>("Transfer-Encoding");

        if $r7 == null goto label07;

        $r17 = virtualinvoke $r7.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r18 = "chunked";

        $z4 = virtualinvoke $r18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r17);

        if $z4 != 0 goto label02;

        $r28 = "identity";

        $z8 = virtualinvoke $r28.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r17);

        if $z8 != 0 goto label02;

        $r29 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z9 = interfaceinvoke $r29.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z9 == 0 goto label02;

        $r31 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported transfer encoding: ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r31.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r34);

     label02:
        $r39 = virtualinvoke $r7.<org.apache.commons.httpclient.Header: org.apache.commons.httpclient.HeaderElement[] getElements()>();

        $i5 = lengthof $r39;

        if $i5 <= 0 goto label05;

        $r21 = "chunked";

        $i3 = $i5 - 1;

        $r20 = $r39[$i3];

        $r22 = virtualinvoke $r20.<org.apache.commons.httpclient.HeaderElement: java.lang.String getName()>();

        $z5 = virtualinvoke $r21.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r22);

        if $z5 == 0 goto label05;

        $r23 = virtualinvoke r2.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>();

        $i4 = virtualinvoke $r23.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

        $z6 = virtualinvoke r2.<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>($i4);

        if $z6 == 0 goto label03;

        $r27 = new org.apache.commons.httpclient.ChunkedInputStream;

        specialinvoke $r27.<org.apache.commons.httpclient.ChunkedInputStream: void <init>(java.io.InputStream,org.apache.commons.httpclient.HttpMethod)>(r37, r1);

        r38 = $r27;

        goto label06;

     label03:
        $r24 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $z7 = virtualinvoke $r24.<org.apache.commons.httpclient.params.HttpMethodParams: boolean isParameterTrue(java.lang.String)>("http.protocol.strict-transfer-encoding");

        if $z7 == 0 goto label04;

        $r26 = new org.apache.commons.httpclient.ProtocolException;

        specialinvoke $r26.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>("Chunk-encoded body declared but not sent");

        throw $r26;

     label04:
        $r25 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r25.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Chunk-encoded body missing");

        goto label06;

     label05:
        $r19 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r19.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Response content is not chunk-encoded");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void setConnectionCloseForced(boolean)>(1);

        r38 = r37;

     label06:
        goto label11;

     label07:
        $l1 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: long getResponseContentLength()>();

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label10;

        if $z1 == 0 goto label09;

        $r12 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion>;

        $r11 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_1>;

        $z2 = virtualinvoke $r12.<org.apache.commons.httpclient.HttpVersion: boolean greaterEquals(org.apache.commons.httpclient.HttpVersion)>($r11);

        if $z2 == 0 goto label09;

        $r13 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseHeaders>;

        $r14 = virtualinvoke $r13.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getFirstHeader(java.lang.String)>("Connection");

        r40 = null;

        if $r14 == null goto label08;

        r40 = virtualinvoke $r14.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

     label08:
        $r15 = "close";

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r40);

        if $z3 != 0 goto label09;

        $r16 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Response content length is not known");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void setConnectionCloseForced(boolean)>(1);

     label09:
        r38 = r37;

        goto label11;

     label10:
        $r8 = new org.apache.commons.httpclient.ContentLengthInputStream;

        specialinvoke $r8.<org.apache.commons.httpclient.ContentLengthInputStream: void <init>(java.io.InputStream,long)>(r37, $l1);

        r38 = $r8;

     label11:
        if $z1 != 0 goto label12;

        r38 = null;

     label12:
        if r38 == null goto label13;

        $r9 = new org.apache.commons.httpclient.AutoCloseInputStream;

        $r10 = new org.apache.commons.httpclient.HttpMethodBase$1;

        specialinvoke $r10.<org.apache.commons.httpclient.HttpMethodBase$1: void <init>(org.apache.commons.httpclient.HttpMethodBase)>(r1);

        specialinvoke $r9.<org.apache.commons.httpclient.AutoCloseInputStream: void <init>(java.io.InputStream,org.apache.commons.httpclient.ResponseConsumedWatcher)>(r38, $r10);

        r38 = $r9;

     label13:
        return r38;
    }

    protected void readResponseHeaders(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.HttpConnection r3;
        org.apache.commons.httpclient.HeaderGroup $r2, $r8;
        org.apache.commons.httpclient.params.HttpMethodParams $r5;
        org.apache.commons.httpclient.HttpState r9;
        org.apache.commons.logging.Log $r0;
        java.lang.String $r6;
        org.apache.commons.httpclient.Header[] $r7;
        java.io.InputStream $r4;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r9 := @parameter0: org.apache.commons.httpclient.HttpState;

        r3 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.readResponseHeaders(HttpState,HttpConnection)");

        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: void clear()>();

        $r4 = virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream getResponseInputStream()>();

        $r5 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>();

        $r7 = staticinvoke <org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>($r4, $r6);

        $r8 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        virtualinvoke $r8.<org.apache.commons.httpclient.HeaderGroup: void setHeaders(org.apache.commons.httpclient.Header[])>($r7);

        return;
    }

    protected void readStatusLine(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.params.HttpMethodParams $r2, $r4, $r18, $r20;
        org.apache.commons.httpclient.Wire $r7, $r31;
        org.apache.commons.httpclient.NoHttpResponseException $r35;
        org.apache.commons.httpclient.HttpState r42;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.HttpConnection r3;
        org.apache.commons.httpclient.HttpVersion $r19, $r21;
        java.lang.StringBuffer $r9, $r10, $r12, $r13, $r23, $r25, $r28, $r30, $r32, $r33, $r36, $r37, $r39, $r40;
        int $i0, i1;
        java.lang.String $r5, $r6, $r11, $r14, $r17, $r27, $r29, $r34, $r38, $r41;
        org.apache.commons.httpclient.ProtocolException $r8;
        org.apache.commons.logging.Log $r0, $r22, $r24;
        org.apache.commons.httpclient.StatusLine $r15, $r16, $r26;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r42 := @parameter0: org.apache.commons.httpclient.HttpState;

        r3 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.readStatusLine(HttpState, HttpConnection)");

        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $i0 = virtualinvoke $r2.<org.apache.commons.httpclient.params.HttpMethodParams: int getIntParameter(java.lang.String,int)>("http.protocol.status-line-garbage-limit", 2147483647);

        i1 = 0;

     label1:
        $r4 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r5 = virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>();

        $r6 = virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: java.lang.String readLine(java.lang.String)>($r5);

        if $r6 != null goto label2;

        if i1 != 0 goto label2;

        $r35 = new org.apache.commons.httpclient.NoHttpResponseException;

        $r36 = new java.lang.StringBuffer;

        specialinvoke $r36.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The server ");

        $r38 = virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" failed to respond");

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r35.<org.apache.commons.httpclient.NoHttpResponseException: void <init>(java.lang.String)>($r41);

        throw $r35;

     label2:
        $r7 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        $z0 = virtualinvoke $r7.<org.apache.commons.httpclient.Wire: boolean enabled()>();

        if $z0 == 0 goto label3;

        $r31 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r31.<org.apache.commons.httpclient.Wire: void input(java.lang.String)>($r34);

     label3:
        if $r6 == null goto label4;

        $z1 = staticinvoke <org.apache.commons.httpclient.StatusLine: boolean startsWithHTTP(java.lang.String)>($r6);

        if $z1 == 0 goto label4;

        goto label7;

     label4:
        if $r6 == null goto label5;

        if i1 < $i0 goto label6;

     label5:
        $r8 = new org.apache.commons.httpclient.ProtocolException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The server ");

        $r11 = virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" failed to respond with a valid HTTP response");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        $r15 = new org.apache.commons.httpclient.StatusLine;

        specialinvoke $r15.<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>($r6);

        r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine> = $r15;

        $r16 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        $r17 = virtualinvoke $r16.<org.apache.commons.httpclient.StatusLine: java.lang.String getHttpVersion()>();

        $r18 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $z2 = virtualinvoke $r18.<org.apache.commons.httpclient.params.HttpMethodParams: boolean isParameterFalse(java.lang.String)>("http.protocol.unambiguous-statusline");

        if $z2 == 0 goto label8;

        $z3 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("HTTP");

        if $z3 == 0 goto label8;

        $r20 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r21 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_0>;

        virtualinvoke $r20.<org.apache.commons.httpclient.params.HttpMethodParams: void setVersion(org.apache.commons.httpclient.HttpVersion)>($r21);

        $r22 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z4 = interfaceinvoke $r22.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z4 == 0 goto label9;

        $r24 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Ambiguous status line (HTTP protocol version missing):");

        $r26 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        $r27 = virtualinvoke $r26.<org.apache.commons.httpclient.StatusLine: java.lang.String toString()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r24.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r29);

        goto label9;

     label8:
        $r19 = staticinvoke <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>($r17);

        r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion> = $r19;

     label9:
        return;
    }

    protected void writeRequest(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        java.lang.Throwable $r14;
        org.apache.commons.httpclient.HttpConnection r3;
        org.apache.commons.httpclient.HttpVersion $r6, $r8;
        org.apache.commons.httpclient.params.HttpMethodParams $r5;
        java.io.InterruptedIOException $r15;
        org.apache.commons.httpclient.Wire $r4, $r13;
        org.apache.commons.httpclient.Header $r7;
        org.apache.commons.httpclient.HttpState r2;
        int $i0, $i1, $i2;
        java.lang.String r17;
        boolean $z0, $z1, $z2;
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.params.HttpConnectionParams $r10;
        org.apache.commons.logging.Log $r0, $r9, $r12, $r16;
        org.apache.commons.httpclient.StatusLine $r11;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r2 := @parameter0: org.apache.commons.httpclient.HttpState;

        r3 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.writeRequest(HttpState, HttpConnection)");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r2, r3);

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void writeRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r2, r3);

        virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: void writeLine()>();

        $r4 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        $z0 = virtualinvoke $r4.<org.apache.commons.httpclient.Wire: boolean enabled()>();

        if $z0 == 0 goto label01;

        $r13 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        virtualinvoke $r13.<org.apache.commons.httpclient.Wire: void output(java.lang.String)>("\r\n");

     label01:
        $r5 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: org.apache.commons.httpclient.HttpVersion getVersion()>();

        $r7 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>("Expect");

        r17 = null;

        if $r7 == null goto label02;

        r17 = virtualinvoke $r7.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

     label02:
        if r17 == null goto label13;

        $i0 = virtualinvoke r17.<java.lang.String: int compareToIgnoreCase(java.lang.String)>("100-continue");

        if $i0 != 0 goto label13;

        $r8 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_1>;

        $z1 = virtualinvoke $r6.<org.apache.commons.httpclient.HttpVersion: boolean greaterEquals(org.apache.commons.httpclient.HttpVersion)>($r8);

        if $z1 == 0 goto label12;

        virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: void flushRequestOutputStream()>();

        $r10 = virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>();

        $i1 = virtualinvoke $r10.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

     label03:
        virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>(3000);

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r2, r3);

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void processStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r2, r3);

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void readResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r2, r3);

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void processResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r2, r3);

        $r11 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        $i2 = virtualinvoke $r11.<org.apache.commons.httpclient.StatusLine: int getStatusCode()>();

        if $i2 != 100 goto label04;

        r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine> = null;

        $r12 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("OK to continue received");

        goto label05;

     label04:
        virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>($i1);

        return;

     label05:
        virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>($i1);

        goto label11;

     label06:
        $r15 := @caughtexception;

        $z2 = staticinvoke <org.apache.commons.httpclient.util.ExceptionUtil: boolean isSocketTimeoutException(java.io.InterruptedIOException)>($r15);

        if $z2 != 0 goto label07;

        throw $r15;

     label07:
        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void removeRequestHeader(java.lang.String)>("Expect");

        $r16 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void info(java.lang.Object)>("100 (continue) read timeout. Resume sending the request");

     label08:
        virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>($i1);

        goto label11;

     label09:
        $r14 := @caughtexception;

     label10:
        virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>($i1);

        throw $r14;

     label11:
        goto label13;

     label12:
        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void removeRequestHeader(java.lang.String)>("Expect");

        $r9 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void info(java.lang.Object)>("\'Expect: 100-continue\' handshake is only supported by HTTP/1.1 or higher");

     label13:
        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r2, r3);

        virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: void flushRequestOutputStream()>();

        return;

        catch java.io.InterruptedIOException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    protected boolean writeRequestBody(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpConnection r2;
        org.apache.commons.httpclient.HttpState r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        return 1;
    }

    protected void writeRequestHeaders(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.HttpConnection r3;
        org.apache.commons.httpclient.params.HttpMethodParams $r4;
        org.apache.commons.httpclient.Header $r7;
        org.apache.commons.httpclient.Wire $r9, $r10;
        org.apache.commons.httpclient.HttpState r2;
        int $i0, i1;
        org.apache.commons.logging.Log $r0;
        java.lang.String $r5, $r8;
        org.apache.commons.httpclient.Header[] $r6;
        boolean $z0;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r2 := @parameter0: org.apache.commons.httpclient.HttpState;

        r3 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.writeRequestHeaders(HttpState,HttpConnection)");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r2, r3);

        $r4 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r5 = virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>();

        $r6 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header[] getRequestHeaders()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r6;

        if i1 >= $i0 goto label3;

        $r7 = $r6[i1];

        $r8 = virtualinvoke $r7.<org.apache.commons.httpclient.Header: java.lang.String toExternalForm()>();

        $r9 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        $z0 = virtualinvoke $r9.<org.apache.commons.httpclient.Wire: boolean enabled()>();

        if $z0 == 0 goto label2;

        $r10 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        virtualinvoke $r10.<org.apache.commons.httpclient.Wire: void output(java.lang.String)>($r8);

     label2:
        virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: void print(java.lang.String,java.lang.String)>($r8, $r5);

        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    protected void writeRequestLine(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.HttpConnection r2;
        org.apache.commons.httpclient.params.HttpMethodParams $r5;
        org.apache.commons.httpclient.Wire $r4, $r7;
        org.apache.commons.httpclient.HttpState r8;
        org.apache.commons.logging.Log $r0;
        java.lang.String $r3, $r6;
        boolean $z0;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r8 := @parameter0: org.apache.commons.httpclient.HttpState;

        r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.writeRequestLine(HttpState, HttpConnection)");

        $r3 = specialinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getRequestLine(org.apache.commons.httpclient.HttpConnection)>(r2);

        $r4 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        $z0 = virtualinvoke $r4.<org.apache.commons.httpclient.Wire: boolean enabled()>();

        if $z0 == 0 goto label1;

        $r7 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        virtualinvoke $r7.<org.apache.commons.httpclient.Wire: void output(java.lang.String)>($r3);

     label1:
        $r5 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>();

        virtualinvoke r2.<org.apache.commons.httpclient.HttpConnection: void print(java.lang.String,java.lang.String)>($r3, $r6);

        return;
    }

    private java.lang.String getRequestLine(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.httpclient.HttpMethodBase r1;
        org.apache.commons.httpclient.HttpVersion $r5;
        java.lang.String $r2, $r3, $r4, $r6, $r7;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r0 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getName()>();

        $r3 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getPath()>();

        $r4 = virtualinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getQueryString()>();

        $r5 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion>;

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.HttpVersion: java.lang.String toString()>();

        $r7 = staticinvoke <org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r0, $r2, $r3, $r4, $r6);

        return $r7;
    }

    public org.apache.commons.httpclient.params.HttpMethodParams getParams()
    {
        org.apache.commons.httpclient.params.HttpMethodParams $r1;
        org.apache.commons.httpclient.HttpMethodBase r0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        return $r1;
    }

    public void setParams(org.apache.commons.httpclient.params.HttpMethodParams)
    {
        org.apache.commons.httpclient.params.HttpMethodParams r0;
        java.lang.IllegalArgumentException $r2;
        org.apache.commons.httpclient.HttpMethodBase r1;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r0 := @parameter0: org.apache.commons.httpclient.params.HttpMethodParams;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null");

        throw $r2;

     label1:
        r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params> = r0;

        return;
    }

    public org.apache.commons.httpclient.HttpVersion getEffectiveVersion()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpVersion $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion>;

        return $r1;
    }

    private static boolean canResponseHaveBody(int)
    {
        int i0;
        org.apache.commons.logging.Log $r0;
        boolean z0;

        i0 := @parameter0: int;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.canResponseHaveBody(int)");

        z0 = 1;

        if i0 < 100 goto label1;

        if i0 <= 199 goto label2;

     label1:
        if i0 == 204 goto label2;

        if i0 != 304 goto label3;

     label2:
        z0 = 0;

     label3:
        return z0;
    }

    public java.lang.String getProxyAuthenticationRealm()
    {
        java.lang.String $r2;
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.auth.AuthState $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState proxyAuthState>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.auth.AuthState: java.lang.String getRealm()>();

        return $r2;
    }

    public java.lang.String getAuthenticationRealm()
    {
        java.lang.String $r2;
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.auth.AuthState $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState hostAuthState>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.auth.AuthState: java.lang.String getRealm()>();

        return $r2;
    }

    protected java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)
    {
        org.apache.commons.httpclient.params.HttpMethodParams $r3;
        org.apache.commons.httpclient.Header r1;
        org.apache.commons.httpclient.HeaderElement $r12;
        java.lang.StringBuffer $r6, $r8, $r9;
        org.apache.commons.httpclient.NameValuePair $r13;
        int $i0;
        java.lang.String $r4, $r10, r14;
        org.apache.commons.httpclient.HeaderElement[] $r11;
        boolean $z0;
        org.apache.commons.httpclient.HttpMethodBase r2;
        org.apache.commons.logging.Log $r0, $r5, $r7;

        r2 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 := @parameter0: org.apache.commons.httpclient.Header;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter getContentCharSet( Header contentheader )");

        r14 = null;

        if r1 == null goto label1;

        $r11 = virtualinvoke r1.<org.apache.commons.httpclient.Header: org.apache.commons.httpclient.HeaderElement[] getElements()>();

        $i0 = lengthof $r11;

        if $i0 != 1 goto label1;

        $r12 = $r11[0];

        $r13 = virtualinvoke $r12.<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair getParameterByName(java.lang.String)>("charset");

        if $r13 == null goto label1;

        r14 = virtualinvoke $r13.<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>();

     label1:
        if r14 != null goto label2;

        $r3 = virtualinvoke r2.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getContentCharset()>();

        r14 = $r4;

        $r5 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r7 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Default charset used: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10);

     label2:
        return r14;
    }

    public java.lang.String getRequestCharSet()
    {
        java.lang.String $r2;
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.Header $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>("Content-Type");

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>($r1);

        return $r2;
    }

    public java.lang.String getResponseCharSet()
    {
        java.lang.String $r2;
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.Header $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("Content-Type");

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>($r1);

        return $r2;
    }

    public int getRecoverableExceptionCount()
    {
        int $i0;
        org.apache.commons.httpclient.HttpMethodBase r0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $i0 = r0.<org.apache.commons.httpclient.HttpMethodBase: int recoverableExceptionCount>;

        return $i0;
    }

    protected void responseBodyConsumed()
    {
        org.apache.commons.httpclient.HttpConnection $r1, $r2, $r3, $r4, $r6, $r8, $r12;
        org.apache.commons.httpclient.params.HttpMethodParams $r5;
        java.lang.String $r11;
        boolean $z0, $z1, $z2;
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.io.IOException $r9;
        org.apache.commons.logging.Log $r7, $r10;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream> = null;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        if $r1 == null goto label5;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setLastResponseInputStream(java.io.InputStream)>(null);

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>($r3);

        if $z0 == 0 goto label1;

        $r8 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        virtualinvoke $r8.<org.apache.commons.httpclient.HttpConnection: void close()>();

        goto label5;

     label1:
        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        $z1 = virtualinvoke $r4.<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable()>();

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $z2 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: boolean isParameterTrue(java.lang.String)>("http.protocol.warn-extra-input");

        if $z2 == 0 goto label2;

        $r7 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Extra response data detected - closing connection");

     label2:
        $r6 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        virtualinvoke $r6.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r11 = virtualinvoke $r9.<java.io.IOException: java.lang.String getMessage()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r11);

        $r12 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        virtualinvoke $r12.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label5:
        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean connectionCloseForced> = 0;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void ensureConnectionRelease()>();

        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    private void ensureConnectionRelease()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpConnection $r1, $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection> = null;

     label1:
        return;
    }

    public org.apache.commons.httpclient.HostConfiguration getHostConfiguration()
    {
        org.apache.commons.httpclient.HttpHost $r2;
        org.apache.commons.httpclient.HostConfiguration $r0;
        org.apache.commons.httpclient.HttpMethodBase r1;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r0 = new org.apache.commons.httpclient.HostConfiguration;

        specialinvoke $r0.<org.apache.commons.httpclient.HostConfiguration: void <init>()>();

        $r2 = r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost>;

        virtualinvoke $r0.<org.apache.commons.httpclient.HostConfiguration: void setHost(org.apache.commons.httpclient.HttpHost)>($r2);

        return $r0;
    }

    public void setHostConfiguration(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.HttpHost $r2;
        org.apache.commons.httpclient.HostConfiguration r0;
        org.apache.commons.httpclient.HttpMethodBase r1;
        int $i0;
        org.apache.commons.httpclient.protocol.Protocol $r4;
        java.lang.String $r3;

        r1 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r0 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        if r0 == null goto label1;

        $r2 = new org.apache.commons.httpclient.HttpHost;

        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.HostConfiguration: java.lang.String getHost()>();

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.HostConfiguration: int getPort()>();

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        specialinvoke $r2.<org.apache.commons.httpclient.HttpHost: void <init>(java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>($r3, $i0, $r4);

        r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost> = $r2;

        goto label2;

     label1:
        r1.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost> = null;

     label2:
        return;
    }

    public org.apache.commons.httpclient.MethodRetryHandler getMethodRetryHandler()
    {
        org.apache.commons.httpclient.MethodRetryHandler $r1;
        org.apache.commons.httpclient.HttpMethodBase r0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.MethodRetryHandler methodRetryHandler>;

        return $r1;
    }

    public void setMethodRetryHandler(org.apache.commons.httpclient.MethodRetryHandler)
    {
        org.apache.commons.httpclient.MethodRetryHandler r1;
        org.apache.commons.httpclient.HttpMethodBase r0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 := @parameter0: org.apache.commons.httpclient.MethodRetryHandler;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.MethodRetryHandler methodRetryHandler> = r1;

        return;
    }

    void fakeResponse(org.apache.commons.httpclient.StatusLine, org.apache.commons.httpclient.HeaderGroup, java.io.InputStream)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup r2;
        org.apache.commons.httpclient.StatusLine r1;
        java.io.InputStream r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 := @parameter0: org.apache.commons.httpclient.StatusLine;

        r2 := @parameter1: org.apache.commons.httpclient.HeaderGroup;

        r3 := @parameter2: java.io.InputStream;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean used> = 1;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine> = r1;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseHeaders> = r2;

        r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream> = r3;

        return;
    }

    public org.apache.commons.httpclient.auth.AuthState getHostAuthState()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.auth.AuthState $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState hostAuthState>;

        return $r1;
    }

    public org.apache.commons.httpclient.auth.AuthState getProxyAuthState()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.auth.AuthState $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState proxyAuthState>;

        return $r1;
    }

    public boolean isAborted()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean aborted>;

        return $z0;
    }

    public boolean isRequestSent()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean requestSent>;

        return $z0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        <org.apache.commons.httpclient.HttpMethodBase: int DEFAULT_INITIAL_BUFFER_SIZE> = 4096;

        <org.apache.commons.httpclient.HttpMethodBase: int RESPONSE_WAIT_TIME_MS> = 3000;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: java.lang.Class class$org$apache$commons$httpclient$HttpMethodBase>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.httpclient.HttpMethodBase: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.HttpMethodBase");

        <org.apache.commons.httpclient.HttpMethodBase: java.lang.Class class$org$apache$commons$httpclient$HttpMethodBase> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.httpclient.HttpMethodBase: java.lang.Class class$org$apache$commons$httpclient$HttpMethodBase>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
