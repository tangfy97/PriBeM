class org.aspectj.runtime.reflect.ConstructorSignatureImpl extends org.aspectj.runtime.reflect.CodeSignatureImpl implements org.aspectj.lang.reflect.ConstructorSignature
{
    private java.lang.reflect.Constructor constructor;

    void <init>(int, java.lang.Class, java.lang.Class[], java.lang.String[], java.lang.Class[])
    {
        org.aspectj.runtime.reflect.ConstructorSignatureImpl r0;
        int i0;
        java.lang.Class[] r2, r4;
        java.lang.Class r1;
        java.lang.String[] r3;

        r0 := @this: org.aspectj.runtime.reflect.ConstructorSignatureImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class[];

        r3 := @parameter3: java.lang.String[];

        r4 := @parameter4: java.lang.Class[];

        specialinvoke r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: void <init>(int,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.String[],java.lang.Class[])>(i0, "<init>", r1, r2, r3, r4);

        return;
    }

    void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.aspectj.runtime.reflect.ConstructorSignatureImpl r0;

        r0 := @this: org.aspectj.runtime.reflect.ConstructorSignatureImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: void <init>(java.lang.String)>(r1);

        return;
    }

    public java.lang.String getName()
    {
        org.aspectj.runtime.reflect.ConstructorSignatureImpl r0;

        r0 := @this: org.aspectj.runtime.reflect.ConstructorSignatureImpl;

        return "<init>";
    }

    protected java.lang.String createToString(org.aspectj.runtime.reflect.StringMaker)
    {
        java.lang.Class[] $r7, $r8;
        org.aspectj.runtime.reflect.StringMaker r1;
        java.lang.StringBuffer $r0;
        org.aspectj.runtime.reflect.ConstructorSignatureImpl r2;
        int $i0;
        java.lang.Class $r4;
        java.lang.String $r3, $r5, $r6, $r9;

        r2 := @this: org.aspectj.runtime.reflect.ConstructorSignatureImpl;

        r1 := @parameter0: org.aspectj.runtime.reflect.StringMaker;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $i0 = virtualinvoke r2.<org.aspectj.runtime.reflect.SignatureImpl: int getModifiers()>();

        $r3 = virtualinvoke r1.<org.aspectj.runtime.reflect.StringMaker: java.lang.String makeModifiersString(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r4 = virtualinvoke r2.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class getDeclaringType()>();

        $r5 = virtualinvoke r2.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String getDeclaringTypeName()>();

        $r6 = virtualinvoke r1.<org.aspectj.runtime.reflect.StringMaker: java.lang.String makePrimaryTypeName(java.lang.Class,java.lang.String)>($r4, $r5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r7 = virtualinvoke r2.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.Class[] getParameterTypes()>();

        virtualinvoke r1.<org.aspectj.runtime.reflect.StringMaker: void addSignature(java.lang.StringBuffer,java.lang.Class[])>($r0, $r7);

        $r8 = virtualinvoke r2.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.Class[] getExceptionTypes()>();

        virtualinvoke r1.<org.aspectj.runtime.reflect.StringMaker: void addThrows(java.lang.StringBuffer,java.lang.Class[])>($r0, $r8);

        $r9 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    public java.lang.reflect.Constructor getConstructor()
    {
        org.aspectj.runtime.reflect.ConstructorSignatureImpl r0;
        java.lang.Class[] $r3;
        java.lang.Class $r2;
        java.lang.reflect.Constructor $r1, $r4, $r6;
        java.lang.Exception $r5;

        r0 := @this: org.aspectj.runtime.reflect.ConstructorSignatureImpl;

        $r1 = r0.<org.aspectj.runtime.reflect.ConstructorSignatureImpl: java.lang.reflect.Constructor constructor>;

        if $r1 != null goto label4;

     label1:
        $r2 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class getDeclaringType()>();

        $r3 = virtualinvoke r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.Class[] getParameterTypes()>();

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r3);

        r0.<org.aspectj.runtime.reflect.ConstructorSignatureImpl: java.lang.reflect.Constructor constructor> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = r0.<org.aspectj.runtime.reflect.ConstructorSignatureImpl: java.lang.reflect.Constructor constructor>;

        return $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
