public class groovy.util.AllTestSuite extends junit.framework.TestSuite
{
    public static final java.lang.String SYSPROP_TEST_DIR;
    public static final java.lang.String SYSPROP_TEST_PATTERN;
    public static final java.lang.String SYSPROP_TEST_EXCLUDES_PATTERN;
    private static final java.util.logging.Logger LOG;
    private static final java.lang.ClassLoader JAVA_LOADER;
    private static final groovy.lang.GroovyClassLoader GROOVY_LOADER;
    private static final java.lang.String[] EMPTY_ARGS;
    private static groovy.util.IFileNameFinder finder;
    static java.lang.Class class$groovy$util$AllTestSuite;
    static java.lang.Class class$junit$framework$Test;
    static java.lang.Class class$groovy$lang$Script;

    public void <init>()
    {
        groovy.util.AllTestSuite r0;

        r0 := @this: groovy.util.AllTestSuite;

        specialinvoke r0.<junit.framework.TestSuite: void <init>()>();

        return;
    }

    public static junit.framework.Test suite()
    {
        java.lang.String $r0, $r1;
        junit.framework.Test $r2;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("groovy.test.dir", "./test/");

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("groovy.test.pattern", "**/*Test.groovy");

        staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("groovy.test.excludesPattern", "");

        $r2 = staticinvoke <groovy.util.AllTestSuite: junit.framework.Test suite(java.lang.String,java.lang.String)>($r0, $r1);

        return $r2;
    }

    public static junit.framework.Test suite(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        junit.framework.Test $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <groovy.util.AllTestSuite: junit.framework.Test suite(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, "");

        return $r2;
    }

    public static junit.framework.Test suite(java.lang.String, java.lang.String, java.lang.String)
    {
        groovy.util.IFileNameFinder $r4, $r12;
        java.lang.StringBuffer $r7, $r9, $r10, $r15, $r16, $r17, $r21, $r22, $r23;
        int $i0;
        java.lang.String r1, r2, r3, $r11, $r18, $r24, r25;
        boolean $z0;
        java.util.Iterator $r5;
        groovy.util.AllTestSuite $r0;
        java.io.IOException $r13;
        java.lang.RuntimeException $r14, $r20;
        java.util.logging.Logger $r8;
        java.util.List $r26;
        org.codehaus.groovy.control.CompilationFailedException $r19;
        java.lang.Object $r6;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        $r0 = new groovy.util.AllTestSuite;

        specialinvoke $r0.<groovy.util.AllTestSuite: void <init>()>();

        r25 = "";

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r12 = <groovy.util.AllTestSuite: groovy.util.IFileNameFinder finder>;

        $r26 = interfaceinvoke $r12.<groovy.util.IFileNameFinder: java.util.List getFileNames(java.lang.String,java.lang.String,java.lang.String)>(r2, r3, r1);

        goto label3;

     label2:
        $r4 = <groovy.util.AllTestSuite: groovy.util.IFileNameFinder finder>;

        $r26 = interfaceinvoke $r4.<groovy.util.IFileNameFinder: java.util.List getFileNames(java.lang.String,java.lang.String)>(r2, r3);

     label3:
        $r5 = interfaceinvoke $r26.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.lang.String) $r6;

        $r8 = <groovy.util.AllTestSuite: java.util.logging.Logger LOG>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("trying to load ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.logging.Logger: void finest(java.lang.String)>($r11);

        virtualinvoke $r0.<groovy.util.AllTestSuite: void loadTest(java.lang.String)>(r25);

        goto label4;

     label5:
        goto label8;

     label6:
        $r19 := @caughtexception;

        virtualinvoke $r19.<org.codehaus.groovy.control.CompilationFailedException: void printStackTrace()>();

        $r20 = new java.lang.RuntimeException;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CompilationFailedException when loading ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r24, $r19);

        throw $r20;

     label7:
        $r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("IOException when loading ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r18, $r13);

        throw $r14;

     label8:
        return $r0;

        catch org.codehaus.groovy.control.CompilationFailedException from label1 to label5 with label6;
        catch java.io.IOException from label1 to label5 with label7;
    }

    protected void loadTest(java.lang.String) throws org.codehaus.groovy.control.CompilationFailedException, java.io.IOException
    {
        groovy.util.AllTestSuite r0;
        java.lang.String[] $r6;
        org.codehaus.groovy.runtime.ScriptTestAdapter $r5;
        java.lang.Class $r2, $r3, $r4, $r7, $r8;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: groovy.util.AllTestSuite;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<groovy.util.AllTestSuite: java.lang.Class compile(java.lang.String)>(r1);

        $r3 = <groovy.util.AllTestSuite: java.lang.Class class$junit$framework$Test>;

        if $r3 != null goto label1;

        $r7 = staticinvoke <groovy.util.AllTestSuite: java.lang.Class class$(java.lang.String)>("junit.framework.Test");

        <groovy.util.AllTestSuite: java.lang.Class class$junit$framework$Test> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.util.AllTestSuite: java.lang.Class class$junit$framework$Test>;

     label2:
        $z0 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 != 0 goto label5;

        $r4 = <groovy.util.AllTestSuite: java.lang.Class class$groovy$lang$Script>;

        if $r4 != null goto label3;

        $r8 = staticinvoke <groovy.util.AllTestSuite: java.lang.Class class$(java.lang.String)>("groovy.lang.Script");

        <groovy.util.AllTestSuite: java.lang.Class class$groovy$lang$Script> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.util.AllTestSuite: java.lang.Class class$groovy$lang$Script>;

     label4:
        $z1 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z1 == 0 goto label5;

        $r5 = new org.codehaus.groovy.runtime.ScriptTestAdapter;

        $r6 = <groovy.util.AllTestSuite: java.lang.String[] EMPTY_ARGS>;

        specialinvoke $r5.<org.codehaus.groovy.runtime.ScriptTestAdapter: void <init>(java.lang.Class,java.lang.String[])>($r2, $r6);

        virtualinvoke r0.<groovy.util.AllTestSuite: void addTest(junit.framework.Test)>($r5);

        goto label6;

     label5:
        virtualinvoke r0.<groovy.util.AllTestSuite: void addTestSuite(java.lang.Class)>($r2);

     label6:
        return;
    }

    protected java.lang.Class compile(java.lang.String) throws org.codehaus.groovy.control.CompilationFailedException, java.io.IOException
    {
        groovy.util.AllTestSuite r4;
        java.lang.Class $r3;
        java.lang.String r1;
        groovy.lang.GroovyClassLoader $r2;
        java.io.File $r0;

        r4 := @this: groovy.util.AllTestSuite;

        r1 := @parameter0: java.lang.String;

        $r2 = <groovy.util.AllTestSuite: groovy.lang.GroovyClassLoader GROOVY_LOADER>;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<groovy.lang.GroovyClassLoader: java.lang.Class parseClass(java.io.File)>($r0);

        return $r3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.String[] $r7;
        java.lang.RuntimeException $r12;
        java.util.logging.Logger $r2;
        groovy.util.IFileNameFinder $r10;
        java.lang.Exception $r11;
        java.lang.Class $r0, $r3, $r8, $r13, $r14;
        java.lang.Object $r9;
        java.lang.String $r1;
        java.lang.ClassLoader $r4, $r6;
        groovy.lang.GroovyClassLoader $r5;

        <groovy.util.AllTestSuite: java.lang.String SYSPROP_TEST_EXCLUDES_PATTERN> = "groovy.test.excludesPattern";

        <groovy.util.AllTestSuite: java.lang.String SYSPROP_TEST_PATTERN> = "groovy.test.pattern";

        <groovy.util.AllTestSuite: java.lang.String SYSPROP_TEST_DIR> = "groovy.test.dir";

        $r0 = <groovy.util.AllTestSuite: java.lang.Class class$groovy$util$AllTestSuite>;

        if $r0 != null goto label1;

        $r13 = staticinvoke <groovy.util.AllTestSuite: java.lang.Class class$(java.lang.String)>("groovy.util.AllTestSuite");

        <groovy.util.AllTestSuite: java.lang.Class class$groovy$util$AllTestSuite> = $r13;

        goto label2;

     label1:
        $r13 = <groovy.util.AllTestSuite: java.lang.Class class$groovy$util$AllTestSuite>;

     label2:
        $r1 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <groovy.util.AllTestSuite: java.util.logging.Logger LOG> = $r2;

        $r3 = <groovy.util.AllTestSuite: java.lang.Class class$groovy$util$AllTestSuite>;

        if $r3 != null goto label3;

        $r14 = staticinvoke <groovy.util.AllTestSuite: java.lang.Class class$(java.lang.String)>("groovy.util.AllTestSuite");

        <groovy.util.AllTestSuite: java.lang.Class class$groovy$util$AllTestSuite> = $r14;

        goto label4;

     label3:
        $r14 = <groovy.util.AllTestSuite: java.lang.Class class$groovy$util$AllTestSuite>;

     label4:
        $r4 = virtualinvoke $r14.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        <groovy.util.AllTestSuite: java.lang.ClassLoader JAVA_LOADER> = $r4;

        $r5 = new groovy.lang.GroovyClassLoader;

        $r6 = <groovy.util.AllTestSuite: java.lang.ClassLoader JAVA_LOADER>;

        specialinvoke $r5.<groovy.lang.GroovyClassLoader: void <init>(java.lang.ClassLoader)>($r6);

        <groovy.util.AllTestSuite: groovy.lang.GroovyClassLoader GROOVY_LOADER> = $r5;

        $r7 = newarray (java.lang.String)[0];

        <groovy.util.AllTestSuite: java.lang.String[] EMPTY_ARGS> = $r7;

        <groovy.util.AllTestSuite: groovy.util.IFileNameFinder finder> = null;

     label5:
        $r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("groovy.util.FileNameFinder");

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.Object newInstance()>();

        $r10 = (groovy.util.IFileNameFinder) $r9;

        <groovy.util.AllTestSuite: groovy.util.IFileNameFinder finder> = $r10;

     label6:
        goto label8;

     label7:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot find and instantiate class FileNameFinder", $r11);

        throw $r12;

     label8:
        return;

        catch java.lang.Exception from label5 to label6 with label7;
    }
}
