final class org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread extends java.lang.Object implements org.waveprotocol.wave.model.conversation.ObservableManifestThread
{
    private static final java.lang.String BLIP_TAG;
    private static final java.lang.String THREAD_ID_ATTR;
    private static final java.lang.String INLINE_ATTR;
    private final org.waveprotocol.wave.model.adt.BasicValue id;
    private final org.waveprotocol.wave.model.adt.BasicValue inline;
    private final org.waveprotocol.wave.model.adt.ObservableElementList blips;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;

    static org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread create(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicValue $r6, $r8;
        org.waveprotocol.wave.model.util.Serializer $r5, $r7;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r1;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread $r0;
        org.waveprotocol.wave.model.adt.docbased.Factory $r3;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList $r4;
        java.lang.Object r2;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r2 := @parameter1: java.lang.Object;

        $r0 = new org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        $r3 = staticinvoke <org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.adt.docbased.Factory factory()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,java.lang.String,org.waveprotocol.wave.model.adt.docbased.Factory)>(r1, r2, "blip", $r3);

        $r5 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer STRING>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicValue: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicValue create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,java.lang.String)>(r1, r2, $r5, "id");

        $r7 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer BOOLEAN>;

        $r8 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicValue: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicValue create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,java.lang.String)>(r1, r2, $r7, "inline");

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: void <init>(org.waveprotocol.wave.model.adt.ObservableElementList,org.waveprotocol.wave.model.adt.BasicValue,org.waveprotocol.wave.model.adt.ObservableBasicValue)>($r4, $r6, $r8);

        return $r0;
    }

    static org.waveprotocol.wave.model.adt.docbased.Factory factory()
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$1 $r0;

        $r0 = new org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$1;

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$1: void <init>()>();

        return $r0;
    }

    void <init>(org.waveprotocol.wave.model.adt.ObservableElementList, org.waveprotocol.wave.model.adt.BasicValue, org.waveprotocol.wave.model.adt.ObservableBasicValue)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$2 $r2;
        org.waveprotocol.wave.model.adt.ObservableBasicValue r6;
        org.waveprotocol.wave.model.adt.ObservableElementList r3, $r4;
        org.waveprotocol.wave.model.adt.BasicValue r5;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        r3 := @parameter0: org.waveprotocol.wave.model.adt.ObservableElementList;

        r5 := @parameter1: org.waveprotocol.wave.model.adt.BasicValue;

        r6 := @parameter2: org.waveprotocol.wave.model.adt.ObservableBasicValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r1;

        $r2 = new org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$2;

        specialinvoke $r2.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$2: void <init>(org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread)>(r0);

        r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.adt.ObservableElementList blips> = r3;

        $r4 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.adt.ObservableElementList blips>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.adt.ObservableElementList: void addListener(java.lang.Object)>($r2);

        r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.adt.BasicValue id> = r5;

        r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.adt.BasicValue inline> = r6;

        return;
    }

    public java.lang.String getId()
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        java.lang.Object $r2;
        java.lang.String $r3;
        org.waveprotocol.wave.model.adt.BasicValue $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.adt.BasicValue id>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.BasicValue: java.lang.Object get()>();

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public boolean isInline()
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        java.lang.Boolean r3;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.adt.BasicValue $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.adt.BasicValue inline>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.BasicValue: java.lang.Object get()>();

        r3 = (java.lang.Boolean) $r2;

        if r3 == null goto label1;

        $z0 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>();

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.waveprotocol.wave.model.conversation.ObservableManifestBlip appendBlip(java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r4;
        org.waveprotocol.wave.model.adt.ObservableElementList $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.adt.ObservableElementList blips>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableElementList: java.lang.Object add(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.wave.model.conversation.ObservableManifestBlip) $r3;

        return $r4;
    }

    public org.waveprotocol.wave.model.conversation.ObservableManifestBlip insertBlip(int, java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r4;
        int i0;
        org.waveprotocol.wave.model.adt.ObservableElementList $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.adt.ObservableElementList blips>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableElementList: java.lang.Object add(int,java.lang.Object)>(i0, r1);

        $r4 = (org.waveprotocol.wave.model.conversation.ObservableManifestBlip) $r3;

        return $r4;
    }

    public org.waveprotocol.wave.model.conversation.ObservableManifestBlip getBlip(int)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r3;
        int i0;
        org.waveprotocol.wave.model.adt.ObservableElementList $r1;
        java.lang.Object $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.adt.ObservableElementList blips>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableElementList: java.lang.Object get(int)>(i0);

        $r3 = (org.waveprotocol.wave.model.conversation.ObservableManifestBlip) $r2;

        return $r3;
    }

    public java.lang.Iterable getBlips()
    {
        org.waveprotocol.wave.model.adt.ObservableElementList $r1;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        java.lang.Iterable $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.adt.ObservableElementList blips>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableElementList: java.lang.Iterable getValues()>();

        return $r2;
    }

    public int indexOf(org.waveprotocol.wave.model.conversation.ManifestBlip)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r1;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r2;
        org.waveprotocol.wave.model.conversation.ManifestBlip r0;
        org.waveprotocol.wave.model.adt.ObservableElementList $r3;
        int $i0, $i2;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ManifestBlip;

        $z0 = r0 instanceof org.waveprotocol.wave.model.conversation.ObservableManifestBlip;

        if $z0 == 0 goto label1;

        $r3 = r1.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.adt.ObservableElementList blips>;

        $r2 = (org.waveprotocol.wave.model.conversation.ObservableManifestBlip) r0;

        $i0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.adt.ObservableElementList: int indexOf(java.lang.Object)>($r2);

        goto label2;

     label1:
        $i2 = (int) -1;

        $i0 = $i2;

     label2:
        return $i0;
    }

    public boolean removeBlip(org.waveprotocol.wave.model.conversation.ManifestBlip)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r1;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r2;
        org.waveprotocol.wave.model.conversation.ManifestBlip r0;
        org.waveprotocol.wave.model.adt.ObservableElementList $r3;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ManifestBlip;

        $z0 = r0 instanceof org.waveprotocol.wave.model.conversation.ObservableManifestBlip;

        if $z0 == 0 goto label1;

        $r3 = r1.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.adt.ObservableElementList blips>;

        $r2 = (org.waveprotocol.wave.model.conversation.ObservableManifestBlip) r0;

        $z1 = interfaceinvoke $r3.<org.waveprotocol.wave.model.adt.ObservableElementList: boolean remove(java.lang.Object)>($r2);

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int numBlips()
    {
        org.waveprotocol.wave.model.adt.ObservableElementList $r1;
        int $i0;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.adt.ObservableElementList blips>;

        $i0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableElementList: int size()>();

        return $i0;
    }

    public void detachListeners()
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: void clear()>();

        return;
    }

    public void addListener(org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.String $r3, $r8, $r15;
        org.waveprotocol.wave.model.adt.BasicValue $r6, $r11;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r1;
        java.lang.StringBuilder $r0, $r4, $r5, $r9, $r10, $r13, $r14;
        java.lang.Class $r2;
        java.lang.Object $r7, $r12;

        r1 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(id = ");

        $r6 = r1.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.adt.BasicValue id>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.adt.BasicValue: java.lang.Object get()>();

        $r8 = (java.lang.String) $r7;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", inline = ");

        $r11 = r1.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.adt.BasicValue inline>;

        $r12 = interfaceinvoke $r11.<org.waveprotocol.wave.model.adt.BasicValue: java.lang.Object get()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    private void triggerOnManifestBlipAdded(org.waveprotocol.wave.model.conversation.ObservableManifestBlip)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip r5;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener: void onBlipAdded(org.waveprotocol.wave.model.conversation.ObservableManifestBlip)>(r5);

        goto label1;

     label2:
        return;
    }

    private void triggerOnManifestBlipRemoved(org.waveprotocol.wave.model.conversation.ObservableManifestBlip)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip r5;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener: void onBlipRemoved(org.waveprotocol.wave.model.conversation.ObservableManifestBlip)>(r5);

        goto label1;

     label2:
        return;
    }

    public volatile org.waveprotocol.wave.model.conversation.ManifestBlip getBlip(int)
    {
        int i0;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.conversation.ObservableManifestBlip getBlip(int)>(i0);

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ManifestBlip insertBlip(int, java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r2;
        int i0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.conversation.ObservableManifestBlip insertBlip(int,java.lang.String)>(i0, r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.conversation.ManifestBlip appendBlip(java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.conversation.ObservableManifestBlip appendBlip(java.lang.String)>(r1);

        return $r2;
    }

    public volatile void removeListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: void removeListener(org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: void addListener(org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener)>($r2);

        return;
    }

    static void access$000(org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread, org.waveprotocol.wave.model.conversation.ObservableManifestBlip)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.ObservableManifestBlip;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: void triggerOnManifestBlipAdded(org.waveprotocol.wave.model.conversation.ObservableManifestBlip)>(r1);

        return;
    }

    static void access$100(org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread, org.waveprotocol.wave.model.conversation.ObservableManifestBlip)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.ObservableManifestBlip;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: void triggerOnManifestBlipRemoved(org.waveprotocol.wave.model.conversation.ObservableManifestBlip)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: java.lang.String INLINE_ATTR> = "inline";

        <org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: java.lang.String THREAD_ID_ATTR> = "id";

        <org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: java.lang.String BLIP_TAG> = "blip";

        return;
    }
}
