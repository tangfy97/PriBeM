public class com.mycila.inject.internal.asm.util.TraceFieldVisitor extends com.mycila.inject.internal.asm.util.TraceAbstractVisitor implements com.mycila.inject.internal.asm.FieldVisitor
{
    protected com.mycila.inject.internal.asm.FieldVisitor fv;

    public void <init>()
    {
        com.mycila.inject.internal.asm.util.TraceFieldVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceFieldVisitor;

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: void <init>()>();

        return;
    }

    public com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)
    {
        com.mycila.inject.internal.asm.FieldVisitor $r3, $r4;
        com.mycila.inject.internal.asm.util.TraceAnnotationVisitor $r5;
        com.mycila.inject.internal.asm.util.TraceFieldVisitor r0;
        com.mycila.inject.internal.asm.AnnotationVisitor $r2, $r6;
        java.lang.String r1;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceFieldVisitor;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>(r1, z0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceFieldVisitor: com.mycila.inject.internal.asm.FieldVisitor fv>;

        if $r3 == null goto label1;

        $r5 = (com.mycila.inject.internal.asm.util.TraceAnnotationVisitor) $r2;

        $r4 = r0.<com.mycila.inject.internal.asm.util.TraceFieldVisitor: com.mycila.inject.internal.asm.FieldVisitor fv>;

        $r6 = interfaceinvoke $r4.<com.mycila.inject.internal.asm.FieldVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>(r1, z0);

        $r5.<com.mycila.inject.internal.asm.util.TraceAnnotationVisitor: com.mycila.inject.internal.asm.AnnotationVisitor av> = $r6;

     label1:
        return $r2;
    }

    public void visitAttribute(com.mycila.inject.internal.asm.Attribute)
    {
        com.mycila.inject.internal.asm.FieldVisitor $r2, $r3;
        com.mycila.inject.internal.asm.util.TraceFieldVisitor r0;
        com.mycila.inject.internal.asm.Attribute r1;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceFieldVisitor;

        r1 := @parameter0: com.mycila.inject.internal.asm.Attribute;

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: void visitAttribute(com.mycila.inject.internal.asm.Attribute)>(r1);

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceFieldVisitor: com.mycila.inject.internal.asm.FieldVisitor fv>;

        if $r2 == null goto label1;

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceFieldVisitor: com.mycila.inject.internal.asm.FieldVisitor fv>;

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.FieldVisitor: void visitAttribute(com.mycila.inject.internal.asm.Attribute)>(r1);

     label1:
        return;
    }

    public void visitEnd()
    {
        com.mycila.inject.internal.asm.FieldVisitor $r1, $r2;
        com.mycila.inject.internal.asm.util.TraceFieldVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceFieldVisitor;

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: void visitEnd()>();

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceFieldVisitor: com.mycila.inject.internal.asm.FieldVisitor fv>;

        if $r1 == null goto label1;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceFieldVisitor: com.mycila.inject.internal.asm.FieldVisitor fv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.FieldVisitor: void visitEnd()>();

     label1:
        return;
    }
}
