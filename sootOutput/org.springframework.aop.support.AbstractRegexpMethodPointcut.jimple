public abstract class org.springframework.aop.support.AbstractRegexpMethodPointcut extends org.springframework.aop.support.StaticMethodMatcherPointcut implements java.io.Serializable
{
    private java.lang.String[] patterns;
    private java.lang.String[] excludedPatterns;

    public void <init>()
    {
        java.lang.String[] $r1, $r2;
        org.springframework.aop.support.AbstractRegexpMethodPointcut r0;

        r0 := @this: org.springframework.aop.support.AbstractRegexpMethodPointcut;

        specialinvoke r0.<org.springframework.aop.support.StaticMethodMatcherPointcut: void <init>()>();

        $r1 = newarray (java.lang.String)[0];

        r0.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] patterns> = $r1;

        $r2 = newarray (java.lang.String)[0];

        r0.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] excludedPatterns> = $r2;

        return;
    }

    public void setPattern(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.springframework.aop.support.AbstractRegexpMethodPointcut r0;

        r0 := @this: org.springframework.aop.support.AbstractRegexpMethodPointcut;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.springframework.aop.support.AbstractRegexpMethodPointcut: void setPatterns(java.lang.String[])>($r1);

        return;
    }

    public void setPatterns(java.lang.String[])
    {
        java.lang.String[] r0, $r2, $r4, $r6;
        int $i0, $i1, i2;
        java.lang.String $r3, $r5;
        org.springframework.aop.support.AbstractRegexpMethodPointcut r1;

        r1 := @this: org.springframework.aop.support.AbstractRegexpMethodPointcut;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>(r0, "\'patterns\' must not be empty");

        $i0 = lengthof r0;

        $r2 = newarray (java.lang.String)[$i0];

        r1.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] patterns> = $r2;

        i2 = 0;

        goto label2;

     label1:
        $r4 = r1.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] patterns>;

        $r3 = r0[i2];

        $r5 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimWhitespace(java.lang.String)>($r3);

        $r4[i2] = $r5;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r0;

        if i2 < $i1 goto label1;

        $r6 = r1.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] patterns>;

        virtualinvoke r1.<org.springframework.aop.support.AbstractRegexpMethodPointcut: void initPatternRepresentation(java.lang.String[])>($r6);

        return;
    }

    public java.lang.String[] getPatterns()
    {
        java.lang.String[] $r1;
        org.springframework.aop.support.AbstractRegexpMethodPointcut r0;

        r0 := @this: org.springframework.aop.support.AbstractRegexpMethodPointcut;

        $r1 = r0.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] patterns>;

        return $r1;
    }

    public void setExcludedPattern(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.springframework.aop.support.AbstractRegexpMethodPointcut r0;

        r0 := @this: org.springframework.aop.support.AbstractRegexpMethodPointcut;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.springframework.aop.support.AbstractRegexpMethodPointcut: void setExcludedPatterns(java.lang.String[])>($r1);

        return;
    }

    public void setExcludedPatterns(java.lang.String[])
    {
        java.lang.String[] r0, $r2, $r4, $r6;
        int $i0, $i1, i2;
        java.lang.String $r3, $r5;
        org.springframework.aop.support.AbstractRegexpMethodPointcut r1;

        r1 := @this: org.springframework.aop.support.AbstractRegexpMethodPointcut;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>(r0, "\'excludedPatterns\' must not be empty");

        $i0 = lengthof r0;

        $r2 = newarray (java.lang.String)[$i0];

        r1.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] excludedPatterns> = $r2;

        i2 = 0;

        goto label2;

     label1:
        $r4 = r1.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] excludedPatterns>;

        $r3 = r0[i2];

        $r5 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimWhitespace(java.lang.String)>($r3);

        $r4[i2] = $r5;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r0;

        if i2 < $i1 goto label1;

        $r6 = r1.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] excludedPatterns>;

        virtualinvoke r1.<org.springframework.aop.support.AbstractRegexpMethodPointcut: void initExcludedPatternRepresentation(java.lang.String[])>($r6);

        return;
    }

    public java.lang.String[] getExcludedPatterns()
    {
        java.lang.String[] $r1;
        org.springframework.aop.support.AbstractRegexpMethodPointcut r0;

        r0 := @this: org.springframework.aop.support.AbstractRegexpMethodPointcut;

        $r1 = r0.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] excludedPatterns>;

        return $r1;
    }

    public boolean matches(java.lang.reflect.Method, java.lang.Class)
    {
        java.lang.String $r5, $r6, $r8, $r10, $r12, $r13, $r15, $r17;
        java.lang.reflect.Method r3;
        boolean $z0, $z1;
        java.lang.Class r0, $r4;
        java.lang.StringBuilder $r2, $r7, $r9, $r11, $r14, $r16;
        org.springframework.aop.support.AbstractRegexpMethodPointcut r1;

        r1 := @this: org.springframework.aop.support.AbstractRegexpMethodPointcut;

        r3 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: java.lang.Class;

        if r0 == null goto label1;

        $r11 = new java.lang.StringBuilder;

        $r12 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r15 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke r1.<org.springframework.aop.support.AbstractRegexpMethodPointcut: boolean matchesPattern(java.lang.String)>($r17);

        if $z1 != 0 goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        $r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r1.<org.springframework.aop.support.AbstractRegexpMethodPointcut: boolean matchesPattern(java.lang.String)>($r10);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    protected boolean matchesPattern(java.lang.String)
    {
        java.lang.String[] $r1, $r3;
        int $i0, $i1, i2, i3;
        java.lang.String r2;
        org.springframework.aop.support.AbstractRegexpMethodPointcut r0;
        boolean $z0, $z1;

        r0 := @this: org.springframework.aop.support.AbstractRegexpMethodPointcut;

        r2 := @parameter0: java.lang.String;

        i2 = 0;

        goto label6;

     label1:
        $z0 = virtualinvoke r0.<org.springframework.aop.support.AbstractRegexpMethodPointcut: boolean matches(java.lang.String,int)>(r2, i2);

        if $z0 == 0 goto label5;

        i3 = 0;

        goto label4;

     label2:
        $z1 = virtualinvoke r0.<org.springframework.aop.support.AbstractRegexpMethodPointcut: boolean matchesExclusion(java.lang.String,int)>(r2, i3);

        if $z1 == 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

     label4:
        $r3 = r0.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] excludedPatterns>;

        $i1 = lengthof $r3;

        if i3 < $i1 goto label2;

        return 1;

     label5:
        i2 = i2 + 1;

     label6:
        $r1 = r0.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] patterns>;

        $i0 = lengthof $r1;

        if i2 < $i0 goto label1;

        return 0;
    }

    protected abstract void initPatternRepresentation(java.lang.String[]) throws java.lang.IllegalArgumentException;

    protected abstract void initExcludedPatternRepresentation(java.lang.String[]) throws java.lang.IllegalArgumentException;

    protected abstract boolean matches(java.lang.String, int);

    protected abstract boolean matchesExclusion(java.lang.String, int);

    public boolean equals(java.lang.Object)
    {
        java.lang.String[] $r3, $r4, $r5, $r6;
        java.lang.Object r1;
        org.springframework.aop.support.AbstractRegexpMethodPointcut r0, r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.aop.support.AbstractRegexpMethodPointcut;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.springframework.aop.support.AbstractRegexpMethodPointcut;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.springframework.aop.support.AbstractRegexpMethodPointcut) r1;

        $r4 = r0.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] patterns>;

        $r3 = r2.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] patterns>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r4, $r3);

        if $z1 == 0 goto label3;

        $r6 = r0.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] excludedPatterns>;

        $r5 = r2.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] excludedPatterns>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r6, $r5);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        java.lang.String[] $r1, $r2;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8;
        java.lang.String r3, r4;
        org.springframework.aop.support.AbstractRegexpMethodPointcut r0;

        r0 := @this: org.springframework.aop.support.AbstractRegexpMethodPointcut;

        i4 = 27;

        $r1 = r0.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] patterns>;

        i5 = lengthof $r1;

        i6 = 0;

        goto label2;

     label1:
        r3 = $r1[i6];

        $i0 = 13 * i4;

        $i1 = virtualinvoke r3.<java.lang.String: int hashCode()>();

        i4 = $i0 + $i1;

        i6 = i6 + 1;

     label2:
        if i6 < i5 goto label1;

        $r2 = r0.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] excludedPatterns>;

        i7 = lengthof $r2;

        i8 = 0;

        goto label4;

     label3:
        r4 = $r2[i8];

        $i2 = 13 * i4;

        $i3 = virtualinvoke r4.<java.lang.String: int hashCode()>();

        i4 = $i2 + $i3;

        i8 = i8 + 1;

     label4:
        if i8 < i7 goto label3;

        return i4;
    }

    public java.lang.String toString()
    {
        java.lang.String[] $r6, $r10;
        java.lang.StringBuilder $r0, $r5, $r8, $r9, $r12;
        java.lang.Class $r2;
        java.lang.String $r3, $r4, $r7, $r11, $r13;
        org.springframework.aop.support.AbstractRegexpMethodPointcut r1;

        r1 := @this: org.springframework.aop.support.AbstractRegexpMethodPointcut;

        $r0 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": patterns ");

        $r6 = r1.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] patterns>;

        $r7 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object[])>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", excluded patterns ");

        $r10 = r1.<org.springframework.aop.support.AbstractRegexpMethodPointcut: java.lang.String[] excludedPatterns>;

        $r11 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object[])>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }
}
