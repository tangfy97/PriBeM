public class jena.textindexer extends arq.cmdline.CmdARQ
{
    private static org.slf4j.Logger log;
    public static final arq.cmdline.ArgDecl assemblerDescDecl;
    private java.lang.String assemblerFile;
    protected org.apache.jena.query.text.DatasetGraphText dataset;
    protected org.apache.jena.query.text.TextIndex textIndex;
    protected org.apache.jena.query.text.EntityDefinition entityDefinition;
    protected jena.textindexer$ProgressMonitor progressMonitor;

    public static transient void main(java.lang.String[])
    {
        java.lang.String[] r1;
        jena.textindexer $r0;

        r1 := @parameter0: java.lang.String[];

        staticinvoke <org.apache.jena.query.text.TextQuery: void init()>();

        $r0 = new jena.textindexer;

        specialinvoke $r0.<jena.textindexer: void <init>(java.lang.String[])>(r1);

        virtualinvoke $r0.<jena.textindexer: void mainRun()>();

        return;
    }

    public static transient void testMain(java.lang.String[])
    {
        java.lang.String[] r1;
        jena.textindexer $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new jena.textindexer;

        specialinvoke $r0.<jena.textindexer: void <init>(java.lang.String[])>(r1);

        virtualinvoke $r0.<jena.textindexer: void mainMethod()>();

        return;
    }

    protected void <init>(java.lang.String[])
    {
        jena.textindexer$ProgressMonitor $r3;
        arq.cmdline.ArgDecl $r2;
        java.lang.String[] r1;
        jena.textindexer r0;

        r0 := @this: jena.textindexer;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<arq.cmdline.CmdARQ: void <init>(java.lang.String[])>(r1);

        r0.<jena.textindexer: java.lang.String assemblerFile> = null;

        r0.<jena.textindexer: org.apache.jena.query.text.DatasetGraphText dataset> = null;

        r0.<jena.textindexer: org.apache.jena.query.text.TextIndex textIndex> = null;

        $r2 = <jena.textindexer: arq.cmdline.ArgDecl assemblerDescDecl>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r2, "--desc=", "Assembler description file");

        $r3 = new jena.textindexer$ProgressMonitor;

        specialinvoke $r3.<jena.textindexer$ProgressMonitor: void <init>(java.lang.String)>("properties indexed");

        r0.<jena.textindexer: jena.textindexer$ProgressMonitor progressMonitor> = $r3;

        return;
    }

    protected void processModulesAndArgs()
    {
        org.apache.jena.query.text.EntityDefinition $r11;
        arq.cmdline.ArgDecl $r1, $r2, $r16, $r19;
        org.apache.jena.query.text.TextIndex $r8, $r9, $r10;
        int $i0, $i1, $i2, $i3;
        java.lang.String r23;
        boolean $z0, $z1;
        org.apache.jena.query.text.DatasetGraphText $r5, $r6, $r7;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r4;
        jena.textindexer r0;
        java.util.List $r17, $r18;
        arq.cmd.CmdException $r12, $r13, $r14, $r15, $r20, $r21, $r22;
        com.hp.hpl.jena.query.Dataset $r3;

        r0 := @this: jena.textindexer;

        specialinvoke r0.<arq.cmdline.CmdARQ: void processModulesAndArgs()>();

        $r1 = <jena.textindexer: arq.cmdline.ArgDecl assemblerDescDecl>;

        $z0 = specialinvoke r0.<arq.cmdline.CmdARQ: boolean contains(arq.cmdline.ArgDecl)>($r1);

        if $z0 != 0 goto label1;

        $i3 = virtualinvoke r0.<jena.textindexer: int getNumPositional()>();

        if $i3 != 0 goto label1;

        $r22 = new arq.cmd.CmdException;

        specialinvoke $r22.<arq.cmd.CmdException: void <init>(java.lang.String)>("No assembler description given");

        throw $r22;

     label1:
        $r2 = <jena.textindexer: arq.cmdline.ArgDecl assemblerDescDecl>;

        $z1 = specialinvoke r0.<arq.cmdline.CmdARQ: boolean contains(arq.cmdline.ArgDecl)>($r2);

        if $z1 == 0 goto label4;

        $r16 = <jena.textindexer: arq.cmdline.ArgDecl assemblerDescDecl>;

        $r17 = virtualinvoke r0.<jena.textindexer: java.util.List getValues(arq.cmdline.ArgDecl)>($r16);

        $i1 = interfaceinvoke $r17.<java.util.List: int size()>();

        if $i1 == 1 goto label2;

        $r21 = new arq.cmd.CmdException;

        specialinvoke $r21.<arq.cmd.CmdException: void <init>(java.lang.String)>("Multiple assembler descriptions given via --desc");

        throw $r21;

     label2:
        $r18 = virtualinvoke r0.<jena.textindexer: java.util.List getPositional()>();

        $i2 = interfaceinvoke $r18.<java.util.List: int size()>();

        if $i2 == 0 goto label3;

        $r20 = new arq.cmd.CmdException;

        specialinvoke $r20.<arq.cmd.CmdException: void <init>(java.lang.String)>("Additional assembler descriptions given");

        throw $r20;

     label3:
        $r19 = <jena.textindexer: arq.cmdline.ArgDecl assemblerDescDecl>;

        r23 = virtualinvoke r0.<jena.textindexer: java.lang.String getValue(arq.cmdline.ArgDecl)>($r19);

        goto label6;

     label4:
        $i0 = virtualinvoke r0.<jena.textindexer: int getNumPositional()>();

        if $i0 == 1 goto label5;

        $r15 = new arq.cmd.CmdException;

        specialinvoke $r15.<arq.cmd.CmdException: void <init>(java.lang.String)>("Multiple assembler descriptions given as positional arguments");

        throw $r15;

     label5:
        r23 = virtualinvoke r0.<jena.textindexer: java.lang.String getPositionalArg(int)>(0);

     label6:
        if r23 != null goto label7;

        $r14 = new arq.cmd.CmdException;

        specialinvoke $r14.<arq.cmd.CmdException: void <init>(java.lang.String)>("No dataset specified");

        throw $r14;

     label7:
        $r3 = staticinvoke <org.apache.jena.query.text.TextDatasetFactory: com.hp.hpl.jena.query.Dataset create(java.lang.String)>(r23);

        if $r3 != null goto label8;

        $r13 = new arq.cmd.CmdException;

        specialinvoke $r13.<arq.cmd.CmdException: void <init>(java.lang.String)>("No dataset description found");

        throw $r13;

     label8:
        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        $r5 = (org.apache.jena.query.text.DatasetGraphText) $r4;

        $r6 = (org.apache.jena.query.text.DatasetGraphText) $r5;

        r0.<jena.textindexer: org.apache.jena.query.text.DatasetGraphText dataset> = $r6;

        $r7 = r0.<jena.textindexer: org.apache.jena.query.text.DatasetGraphText dataset>;

        $r8 = virtualinvoke $r7.<org.apache.jena.query.text.DatasetGraphText: org.apache.jena.query.text.TextIndex getTextIndex()>();

        r0.<jena.textindexer: org.apache.jena.query.text.TextIndex textIndex> = $r8;

        $r9 = r0.<jena.textindexer: org.apache.jena.query.text.TextIndex textIndex>;

        if $r9 != null goto label9;

        $r12 = new arq.cmd.CmdException;

        specialinvoke $r12.<arq.cmd.CmdException: void <init>(java.lang.String)>("Dataset has no text index");

        throw $r12;

     label9:
        $r10 = r0.<jena.textindexer: org.apache.jena.query.text.TextIndex textIndex>;

        $r11 = interfaceinvoke $r10.<org.apache.jena.query.text.TextIndex: org.apache.jena.query.text.EntityDefinition getDocDef()>();

        r0.<jena.textindexer: org.apache.jena.query.text.EntityDefinition entityDefinition> = $r11;

        return;
    }

    protected java.lang.String getSummary()
    {
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.String $r2, $r5;
        jena.textindexer r1;

        r1 := @this: jena.textindexer;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<jena.textindexer: java.lang.String getCommandName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" assemblerFile");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected void exec()
    {
        com.hp.hpl.jena.graph.Node r7, $r8, $r9, $r10;
        org.apache.jena.query.text.TextIndex $r2, $r4, $r16;
        org.apache.jena.query.text.Entity $r15;
        boolean $z0, $z1;
        java.util.Iterator $r3, $r12;
        org.apache.jena.query.text.DatasetGraphText $r11;
        java.util.Set $r1;
        jena.textindexer r0;
        com.hp.hpl.jena.sparql.core.Quad r14;
        jena.textindexer$ProgressMonitor $r5, $r17;
        java.lang.Object $r6, $r13;

        r0 := @this: jena.textindexer;

        $r1 = specialinvoke r0.<jena.textindexer: java.util.Set getIndexedProperties()>();

        $r2 = r0.<jena.textindexer: org.apache.jena.query.text.TextIndex textIndex>;

        interfaceinvoke $r2.<org.apache.jena.query.text.TextIndex: void startIndexing()>();

        $r3 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Node) $r6;

        $r11 = r0.<jena.textindexer: org.apache.jena.query.text.DatasetGraphText dataset>;

        $r10 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r9 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r8 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r12 = virtualinvoke $r11.<org.apache.jena.query.text.DatasetGraphText: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r10, $r9, r7, $r8);

     label2:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.hp.hpl.jena.sparql.core.Quad) $r13;

        $r15 = specialinvoke r0.<jena.textindexer: org.apache.jena.query.text.Entity createEntity(com.hp.hpl.jena.sparql.core.Quad)>(r14);

        if $r15 == null goto label3;

        $r16 = r0.<jena.textindexer: org.apache.jena.query.text.TextIndex textIndex>;

        interfaceinvoke $r16.<org.apache.jena.query.text.TextIndex: void addEntity(org.apache.jena.query.text.Entity)>($r15);

        $r17 = r0.<jena.textindexer: jena.textindexer$ProgressMonitor progressMonitor>;

        virtualinvoke $r17.<jena.textindexer$ProgressMonitor: void progressByOne()>();

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        $r4 = r0.<jena.textindexer: org.apache.jena.query.text.TextIndex textIndex>;

        interfaceinvoke $r4.<org.apache.jena.query.text.TextIndex: void finishIndexing()>();

        $r5 = r0.<jena.textindexer: jena.textindexer$ProgressMonitor progressMonitor>;

        virtualinvoke $r5.<jena.textindexer$ProgressMonitor: void close()>();

        return;
    }

    private java.util.Set getIndexedProperties()
    {
        org.apache.jena.query.text.EntityDefinition $r2, $r7;
        java.util.Iterator $r4, $r9;
        java.util.Collection $r3, $r8;
        com.hp.hpl.jena.graph.Node r11;
        jena.textindexer r1;
        java.util.HashSet $r0;
        java.lang.Object $r5, $r10;
        java.lang.String r6;
        boolean $z0, $z1;

        r1 := @this: jena.textindexer;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = r1.<jena.textindexer: org.apache.jena.query.text.EntityDefinition entityDefinition>;

        $r3 = virtualinvoke $r2.<org.apache.jena.query.text.EntityDefinition: java.util.Collection fields()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = r1.<jena.textindexer: org.apache.jena.query.text.EntityDefinition entityDefinition>;

        $r8 = virtualinvoke $r7.<org.apache.jena.query.text.EntityDefinition: java.util.Collection getPredicates(java.lang.String)>(r6);

        $r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.hp.hpl.jena.graph.Node) $r10;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r11);

        goto label2;

     label3:
        goto label1;

     label4:
        return $r0;
    }

    private org.apache.jena.query.text.Entity createEntity(com.hp.hpl.jena.sparql.core.Quad)
    {
        org.apache.jena.query.text.EntityDefinition $r5;
        com.hp.hpl.jena.graph.Node $r1, $r3, $r7;
        org.apache.jena.query.text.Entity $r2;
        java.lang.String $r6, $r13, $r15, $r16, r17;
        boolean $z0, $z1, $z2;
        org.slf4j.Logger $r9;
        jena.textindexer r4;
        com.hp.hpl.jena.sparql.core.Quad r0;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r14;

        r4 := @this: jena.textindexer;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 == 0 goto label1;

        $r16 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        goto label2;

     label1:
        $r16 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getBlankNodeLabel()>();

     label2:
        $r2 = new org.apache.jena.query.text.Entity;

        specialinvoke $r2.<org.apache.jena.query.text.Entity: void <init>(java.lang.String)>($r16);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r5 = r4.<jena.textindexer: org.apache.jena.query.text.EntityDefinition entityDefinition>;

        $r6 = virtualinvoke $r5.<org.apache.jena.query.text.EntityDefinition: java.lang.String getField(com.hp.hpl.jena.graph.Node)>($r3);

        if $r6 != null goto label3;

        return null;

     label3:
        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        $z1 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 == 0 goto label4;

        r17 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        goto label6;

     label4:
        $z2 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label5;

        r17 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        goto label6;

     label5:
        $r9 = <jena.textindexer: org.slf4j.Logger log>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a literal value for mapped field-predicate: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" :: ");

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForString(java.lang.String)>($r6);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void warn(java.lang.String)>($r15);

        return null;

     label6:
        virtualinvoke $r2.<org.apache.jena.query.text.Entity: void put(java.lang.String,java.lang.Object)>($r6, r17);

        return $r2;
    }

    static org.slf4j.Logger access$000()
    {
        org.slf4j.Logger $r0;

        $r0 = <jena.textindexer: org.slf4j.Logger log>;

        return $r0;
    }

    static void <clinit>()
    {
        arq.cmdline.ArgDecl $r1;
        java.lang.String[] $r2;
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Ljena/textindexer;");

        <jena.textindexer: org.slf4j.Logger log> = $r0;

        $r1 = new arq.cmdline.ArgDecl;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "dataset";

        specialinvoke $r1.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "desc", $r2);

        <jena.textindexer: arq.cmdline.ArgDecl assemblerDescDecl> = $r1;

        return;
    }
}
