public class org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor extends java.lang.Object implements org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor
{
    private java.util.ArrayList queryNodeList;
    private boolean latestNodeVerified;
    private org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler queryConfig;
    private java.lang.Boolean usingAnd;

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor r0;
        java.lang.Boolean $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: java.lang.Boolean usingAnd> = $r1;

        return;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.QueryNode process(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator r4, $r5;
        org.apache.lucene.queryparser.flexible.core.nodes.GroupQueryNode $r13;
        java.util.ArrayList $r7, $r14;
        org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode $r9;
        org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor r0;
        int i0, $i1;
        java.lang.Boolean $r6, $r8;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r11, $r12, r16;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        java.lang.IllegalArgumentException $r15;
        java.lang.Object $r3, $r10;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor;

        r16 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey DEFAULT_OPERATOR>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        r4 = (org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator) $r3;

        if r4 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DEFAULT_OPERATOR should be set on the QueryConfigHandler");

        throw $r15;

     label1:
        $r5 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator: org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator AND>;

        if $r5 != r4 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: java.lang.Boolean usingAnd> = $r6;

        $z0 = r16 instanceof org.apache.lucene.queryparser.flexible.core.nodes.GroupQueryNode;

        if $z0 == 0 goto label4;

        $r13 = (org.apache.lucene.queryparser.flexible.core.nodes.GroupQueryNode) r16;

        r16 = virtualinvoke $r13.<org.apache.lucene.queryparser.flexible.core.nodes.GroupQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getChild()>();

     label4:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: java.util.ArrayList queryNodeList> = $r7;

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: boolean latestNodeVerified> = 0;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: void readTree(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r16);

        $r14 = r0.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: java.util.ArrayList queryNodeList>;

        i0 = 0;

     label5:
        $i1 = interfaceinvoke $r14.<java.util.List: int size()>();

        if i0 >= $i1 goto label7;

        $r10 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i0);

        r11 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r10;

        $z2 = r11 instanceof org.apache.lucene.queryparser.flexible.core.nodes.GroupQueryNode;

        if $z2 == 0 goto label6;

        $r12 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode process(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r11);

        interfaceinvoke $r14.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r12);

     label6:
        i0 = i0 + 1;

        goto label5;

     label7:
        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: java.lang.Boolean usingAnd> = $r8;

        $z1 = r16 instanceof org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode;

        if $z1 == 0 goto label8;

        interfaceinvoke r16.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: void set(java.util.List)>($r14);

        return r16;

     label8:
        $r9 = new org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode;

        specialinvoke $r9.<org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode: void <init>(java.util.List)>($r14);

        return $r9;
    }

    private org.apache.lucene.queryparser.flexible.core.nodes.QueryNode applyModifier(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier $r5, $r6, $r7, $r10, $r13, $r14, $r15, $r18, $r19, $r20;
        org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor r0;
        java.lang.Boolean $r1;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r2, $r3, $r9, r11, $r17, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.lucene.queryparser.flexible.standard.nodes.BooleanModifierNode $r4, $r8, $r12, $r16;
        org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode r22, r23, r24;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor;

        r2 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        r11 := @parameter1: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: java.lang.Boolean usingAnd>;

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label5;

        $z3 = r11 instanceof org.apache.lucene.queryparser.flexible.core.nodes.OrQueryNode;

        if $z3 == 0 goto label2;

        $z5 = r2 instanceof org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode;

        if $z5 == 0 goto label8;

        r22 = (org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode) r2;

        $r19 = virtualinvoke r22.<org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier getModifier()>();

        $r20 = <org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier MOD_REQ>;

        if $r19 != $r20 goto label1;

        $r21 = virtualinvoke r22.<org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getChild()>();

        return $r21;

     label1:
        goto label8;

     label2:
        $z4 = r2 instanceof org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode;

        if $z4 == 0 goto label4;

        r23 = (org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode) r2;

        $r14 = virtualinvoke r23.<org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier getModifier()>();

        $r15 = <org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier MOD_NONE>;

        if $r14 != $r15 goto label3;

        $r16 = new org.apache.lucene.queryparser.flexible.standard.nodes.BooleanModifierNode;

        $r17 = virtualinvoke r23.<org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getChild()>();

        $r18 = <org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier MOD_REQ>;

        specialinvoke $r16.<org.apache.lucene.queryparser.flexible.standard.nodes.BooleanModifierNode: void <init>(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode,org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier)>($r17, $r18);

        return $r16;

     label3:
        goto label8;

     label4:
        $r12 = new org.apache.lucene.queryparser.flexible.standard.nodes.BooleanModifierNode;

        $r13 = <org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier MOD_REQ>;

        specialinvoke $r12.<org.apache.lucene.queryparser.flexible.standard.nodes.BooleanModifierNode: void <init>(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode,org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier)>(r2, $r13);

        return $r12;

     label5:
        $r3 = interfaceinvoke r2.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getParent()>();

        $z1 = $r3 instanceof org.apache.lucene.queryparser.flexible.core.nodes.AndQueryNode;

        if $z1 == 0 goto label8;

        $z2 = r2 instanceof org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode;

        if $z2 == 0 goto label7;

        r24 = (org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode) r2;

        $r6 = virtualinvoke r24.<org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier getModifier()>();

        $r7 = <org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier MOD_NONE>;

        if $r6 != $r7 goto label6;

        $r8 = new org.apache.lucene.queryparser.flexible.standard.nodes.BooleanModifierNode;

        $r9 = virtualinvoke r24.<org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getChild()>();

        $r10 = <org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier MOD_REQ>;

        specialinvoke $r8.<org.apache.lucene.queryparser.flexible.standard.nodes.BooleanModifierNode: void <init>(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode,org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier)>($r9, $r10);

        return $r8;

     label6:
        goto label8;

     label7:
        $r4 = new org.apache.lucene.queryparser.flexible.standard.nodes.BooleanModifierNode;

        $r5 = <org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier MOD_REQ>;

        specialinvoke $r4.<org.apache.lucene.queryparser.flexible.standard.nodes.BooleanModifierNode: void <init>(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode,org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier)>(r2, $r5);

        return $r4;

     label8:
        return r2;
    }

    private void readTree(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)
    {
        java.util.List $r2;
        org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor r1;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object $r3, $r5;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, $r4, $r6;
        boolean $z0;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode;

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.util.List getChildren()>();

        if $r2 == null goto label3;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label3;

        i5 = 0;

     label1:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        if i5 >= $i2 goto label2;

        $r5 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i5);

        $r6 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r5;

        specialinvoke r1.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: void readTree(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>($r6);

        i5 = i5 + 1;

        goto label1;

     label2:
        specialinvoke r1.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: void processNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r0);

        $i3 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i4);

        $r4 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r3;

        specialinvoke r1.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: void readTree(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>($r4);

        goto label4;

     label3:
        specialinvoke r1.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: void processNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r0);

     label4:
        goto label6;

     label5:
        specialinvoke r1.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: void processNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r0);

     label6:
        return;
    }

    private void processNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)
    {
        java.util.ArrayList $r2, $r3, $r4, $r5, $r9;
        org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor r1;
        int $i0, $i1;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, $r7, $r8, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r6;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.AndQueryNode;

        if $z0 != 0 goto label1;

        $z3 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.OrQueryNode;

        if $z3 == 0 goto label2;

     label1:
        $z1 = r1.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: boolean latestNodeVerified>;

        if $z1 != 0 goto label3;

        $r2 = r1.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: java.util.ArrayList queryNodeList>;

        $z2 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        $r4 = r1.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: java.util.ArrayList queryNodeList>;

        $r5 = r1.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: java.util.ArrayList queryNodeList>;

        $r3 = r1.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: java.util.ArrayList queryNodeList>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        $r7 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r6;

        $r8 = specialinvoke r1.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode applyModifier(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode,org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>($r7, r0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        r1.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: boolean latestNodeVerified> = 1;

        goto label3;

     label2:
        $z4 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode;

        if $z4 != 0 goto label3;

        $r9 = r1.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: java.util.ArrayList queryNodeList>;

        $r10 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getParent()>();

        $r11 = specialinvoke r1.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode applyModifier(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode,org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r0, $r10);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        r1.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: boolean latestNodeVerified> = 0;

     label3:
        return;
    }

    public org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()
    {
        org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor r0;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler queryConfig>;

        return $r1;
    }

    public void setQueryConfigHandler(org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler)
    {
        org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor r0;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler;

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.GroupQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler queryConfig> = r1;

        return;
    }
}
