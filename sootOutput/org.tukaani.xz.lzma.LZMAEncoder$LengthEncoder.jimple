class org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder extends org.tukaani.xz.lzma.LZMACoder$LengthCoder
{
    private static final int PRICE_UPDATE_INTERVAL;
    private final int[] counters;
    private final int[][] prices;
    private final org.tukaani.xz.lzma.LZMAEncoder this$0;

    void <init>(org.tukaani.xz.lzma.LZMAEncoder, int, int)
    {
        int[][] $r3;
        org.tukaani.xz.lzma.LZMAEncoder r1;
        int[] $r2;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder r0;
        int i0, i1, i2, $i3, $i4, $i5;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder;

        r1 := @parameter0: org.tukaani.xz.lzma.LZMAEncoder;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0> = r1;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMACoder$LengthCoder: void <init>(org.tukaani.xz.lzma.LZMACoder)>(r1);

        i1 = 1 << i0;

        $r2 = newarray (int)[i1];

        r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[] counters> = $r2;

        $i3 = i2 - 2;

        $i4 = $i3 + 1;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i4, 16);

        $r3 = newmultiarray (int)[i1][$i5];

        r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[][] prices> = $r3;

        return;
    }

    void reset()
    {
        int[] $r1, $r2;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder r0;
        int $i0, i1;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMACoder$LengthCoder: void reset()>();

        i1 = 0;

     label1:
        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[] counters>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[] counters>;

        $r2[i1] = 0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void encode(int, int)
    {
        short[][] $r15, $r22;
        int[] $r24;
        short[] $r3, $r6, $r9, $r12, $r16, $r19, $r23;
        org.tukaani.xz.rangecoder.RangeEncoder $r2, $r5, $r8, $r11, $r14, $r18, $r21;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder r0;
        int $i0, i1, i2, i3, i4, $i5, $i6, $i8, $i10;
        org.tukaani.xz.lzma.LZMAEncoder $r1, $r4, $r7, $r10, $r13, $r17, $r20;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder;

        i2 := @parameter0: int;

        i1 := @parameter1: int;

        $i8 = (int) -2;

        i3 = i2 + $i8;

        if i3 >= 8 goto label1;

        $r17 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r18 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$200(org.tukaani.xz.lzma.LZMAEncoder)>($r17);

        $r19 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] choice>;

        virtualinvoke $r18.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r19, 0, 0);

        $r20 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r21 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$200(org.tukaani.xz.lzma.LZMAEncoder)>($r20);

        $r22 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[][] low>;

        $r23 = $r22[i1];

        virtualinvoke $r21.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBitTree(short[],int)>($r23, i3);

        goto label3;

     label1:
        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r2 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$200(org.tukaani.xz.lzma.LZMAEncoder)>($r1);

        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] choice>;

        virtualinvoke $r2.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r3, 0, 1);

        $i10 = (int) -8;

        i4 = i3 + $i10;

        if i4 >= 8 goto label2;

        $r10 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r11 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$200(org.tukaani.xz.lzma.LZMAEncoder)>($r10);

        $r12 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] choice>;

        virtualinvoke $r11.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r12, 1, 0);

        $r13 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r14 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$200(org.tukaani.xz.lzma.LZMAEncoder)>($r13);

        $r15 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[][] mid>;

        $r16 = $r15[i1];

        virtualinvoke $r14.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBitTree(short[],int)>($r16, i4);

        goto label3;

     label2:
        $r4 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r5 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$200(org.tukaani.xz.lzma.LZMAEncoder)>($r4);

        $r6 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] choice>;

        virtualinvoke $r5.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r6, 1, 1);

        $r7 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r8 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$200(org.tukaani.xz.lzma.LZMAEncoder)>($r7);

        $r9 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] high>;

        $i0 = i4 - 8;

        virtualinvoke $r8.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBitTree(short[],int)>($r9, $i0);

     label3:
        $r24 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[] counters>;

        $i5 = $r24[i1];

        $i6 = $i5 - 1;

        $r24[i1] = $i6;

        return;
    }

    int getPrice(int, int)
    {
        int[][] $r1;
        int[] $r2;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder r0;
        int i0, i1, $i2, $i3;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[][] prices>;

        $r2 = $r1[i0];

        $i2 = i1 - 2;

        $i3 = $r2[$i2];

        return $i3;
    }

    void updatePrices()
    {
        int[] $r1, $r2, $r3;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder r0;
        int $i0, $i1, i2;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder;

        i2 = 0;

     label1:
        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[] counters>;

        $i0 = lengthof $r1;

        if i2 >= $i0 goto label3;

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[] counters>;

        $i1 = $r2[i2];

        if $i1 > 0 goto label2;

        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[] counters>;

        $r3[i2] = 32;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void updatePrices(int)>(i2);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    private void updatePrices(int)
    {
        int[][] $r5, $r7, $r10, $r14;
        short[][] $r11, $r15;
        int[] $r6, $r9, $r13, $r17;
        short[] $r1, $r2, $r3, $r4, $r8, $r12, $r16;
        short $s0, $s2, $s4, $s6;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder r0;
        int $i1, $i3, $i5, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, $i22, $i23, $i24, $i25;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder;

        i8 := @parameter0: int;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] choice>;

        $s0 = $r1[0];

        $i22 = (int) $s0;

        $i1 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i22, 0);

        i21 = 0;

     label1:
        if i21 >= 8 goto label2;

        $r14 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[][] prices>;

        $r17 = $r14[i8];

        $r15 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[][] low>;

        $r16 = $r15[i8];

        $i19 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitTreePrice(short[],int)>($r16, i21);

        $i20 = $i1 + $i19;

        $r17[i21] = $i20;

        i21 = i21 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] choice>;

        $s2 = $r2[0];

        $i23 = (int) $s2;

        $i3 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i23, 1);

        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] choice>;

        $s4 = $r3[1];

        $i24 = (int) $s4;

        $i5 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i24, 0);

     label3:
        if i21 >= 16 goto label4;

        $r10 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[][] prices>;

        $r13 = $r10[i8];

        $i16 = $i3 + $i5;

        $r11 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[][] mid>;

        $r12 = $r11[i8];

        $i15 = i21 - 8;

        $i17 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitTreePrice(short[],int)>($r12, $i15);

        $i18 = $i16 + $i17;

        $r13[i21] = $i18;

        i21 = i21 + 1;

        goto label3;

     label4:
        $r4 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] choice>;

        $s6 = $r4[1];

        $i25 = (int) $s6;

        $i7 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i25, 1);

     label5:
        $r5 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[][] prices>;

        $r6 = $r5[i8];

        $i9 = lengthof $r6;

        if i21 >= $i9 goto label6;

        $r7 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[][] prices>;

        $r9 = $r7[i8];

        $i12 = $i3 + $i7;

        $r8 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] high>;

        $i10 = i21 - 8;

        $i11 = $i10 - 8;

        $i13 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitTreePrice(short[],int)>($r8, $i11);

        $i14 = $i12 + $i13;

        $r9[i21] = $i14;

        i21 = i21 + 1;

        goto label5;

     label6:
        return;
    }

    public static void <clinit>()
    {
        <org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int PRICE_UPDATE_INTERVAL> = 32;

        return;
    }
}
