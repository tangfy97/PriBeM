public class org.springframework.jmx.support.MBeanRegistrationSupport extends java.lang.Object
{
    public static final int REGISTRATION_FAIL_ON_EXISTING;
    public static final int REGISTRATION_IGNORE_EXISTING;
    public static final int REGISTRATION_REPLACE_EXISTING;
    private static final org.springframework.core.Constants constants;
    protected final org.apache.commons.logging.Log logger;
    protected javax.management.MBeanServer server;
    protected final java.util.Set registeredBeans;
    private int registrationBehavior;

    static void <clinit>()
    {
        org.springframework.core.Constants $r0;

        <org.springframework.jmx.support.MBeanRegistrationSupport: int REGISTRATION_REPLACE_EXISTING> = 2;

        <org.springframework.jmx.support.MBeanRegistrationSupport: int REGISTRATION_IGNORE_EXISTING> = 1;

        <org.springframework.jmx.support.MBeanRegistrationSupport: int REGISTRATION_FAIL_ON_EXISTING> = 0;

        $r0 = new org.springframework.core.Constants;

        specialinvoke $r0.<org.springframework.core.Constants: void <init>(java.lang.Class)>(class "Lorg/springframework/jmx/support/MBeanRegistrationSupport;");

        <org.springframework.jmx.support.MBeanRegistrationSupport: org.springframework.core.Constants constants> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.jmx.support.MBeanRegistrationSupport r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.util.LinkedHashSet $r3;

        r0 := @this: org.springframework.jmx.support.MBeanRegistrationSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.jmx.support.MBeanRegistrationSupport: org.apache.commons.logging.Log logger> = $r2;

        $r3 = new java.util.LinkedHashSet;

        specialinvoke $r3.<java.util.LinkedHashSet: void <init>()>();

        r0.<org.springframework.jmx.support.MBeanRegistrationSupport: java.util.Set registeredBeans> = $r3;

        r0.<org.springframework.jmx.support.MBeanRegistrationSupport: int registrationBehavior> = 0;

        return;
    }

    public void setServer(javax.management.MBeanServer)
    {
        org.springframework.jmx.support.MBeanRegistrationSupport r0;
        javax.management.MBeanServer r1;

        r0 := @this: org.springframework.jmx.support.MBeanRegistrationSupport;

        r1 := @parameter0: javax.management.MBeanServer;

        r0.<org.springframework.jmx.support.MBeanRegistrationSupport: javax.management.MBeanServer server> = r1;

        return;
    }

    public final javax.management.MBeanServer getServer()
    {
        org.springframework.jmx.support.MBeanRegistrationSupport r0;
        javax.management.MBeanServer $r1;

        r0 := @this: org.springframework.jmx.support.MBeanRegistrationSupport;

        $r1 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: javax.management.MBeanServer server>;

        return $r1;
    }

    public void setRegistrationBehaviorName(java.lang.String)
    {
        org.springframework.jmx.support.MBeanRegistrationSupport r0;
        int $i0;
        org.springframework.core.Constants $r2;
        java.lang.String r1;
        java.lang.Number $r3;

        r0 := @this: org.springframework.jmx.support.MBeanRegistrationSupport;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.springframework.jmx.support.MBeanRegistrationSupport: org.springframework.core.Constants constants>;

        $r3 = virtualinvoke $r2.<org.springframework.core.Constants: java.lang.Number asNumber(java.lang.String)>(r1);

        $i0 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        virtualinvoke r0.<org.springframework.jmx.support.MBeanRegistrationSupport: void setRegistrationBehavior(int)>($i0);

        return;
    }

    public void setRegistrationBehavior(int)
    {
        int i0;
        org.springframework.jmx.support.MBeanRegistrationSupport r0;

        r0 := @this: org.springframework.jmx.support.MBeanRegistrationSupport;

        i0 := @parameter0: int;

        r0.<org.springframework.jmx.support.MBeanRegistrationSupport: int registrationBehavior> = i0;

        return;
    }

    protected void doRegister(java.lang.Object, javax.management.ObjectName) throws javax.management.JMException
    {
        javax.management.ObjectInstance r26;
        javax.management.InstanceAlreadyExistsException $r11;
        boolean $z0, $z1;
        java.util.Set $r4;
        javax.management.ObjectName r2, $r27, r28;
        java.lang.StringBuilder $r6, $r8, $r9, $r15, $r17, $r18, $r21, $r23, $r24;
        org.springframework.jmx.support.MBeanRegistrationSupport r0;
        javax.management.MBeanServer $r3, $r13, $r14;
        int $i0, $i1;
        java.lang.String $r10, $r19, $r25;
        javax.management.InstanceNotFoundException $r5;
        java.lang.Object r1;
        org.apache.commons.logging.Log $r7, $r12, $r16, $r20, $r22;

        r0 := @this: org.springframework.jmx.support.MBeanRegistrationSupport;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: javax.management.ObjectName;

        r26 = null;

     label01:
        $r3 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: javax.management.MBeanServer server>;

        r26 = interfaceinvoke $r3.<javax.management.MBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>(r1, r2);

     label02:
        goto label10;

     label03:
        $r11 := @caughtexception;

        $i0 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: int registrationBehavior>;

        if $i0 != 1 goto label04;

        $r20 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r20.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label10;

        $r22 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: org.apache.commons.logging.Log logger>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Ignoring existing MBean at [");

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25);

        goto label10;

     label04:
        $i1 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: int registrationBehavior>;

        if $i1 != 2 goto label09;

     label05:
        $r12 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r12.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label06;

        $r16 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: org.apache.commons.logging.Log logger>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Replacing existing MBean at [");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r19);

     label06:
        $r13 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: javax.management.MBeanServer server>;

        interfaceinvoke $r13.<javax.management.MBeanServer: void unregisterMBean(javax.management.ObjectName)>(r2);

        $r14 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: javax.management.MBeanServer server>;

        r26 = interfaceinvoke $r14.<javax.management.MBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>(r1, r2);

     label07:
        goto label10;

     label08:
        $r5 := @caughtexception;

        $r7 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: org.apache.commons.logging.Log logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to replace existing MBean at [");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r10, $r5);

        throw $r11;

     label09:
        throw $r11;

     label10:
        if r26 == null goto label11;

        $r27 = virtualinvoke r26.<javax.management.ObjectInstance: javax.management.ObjectName getObjectName()>();

        goto label12;

     label11:
        $r27 = null;

     label12:
        r28 = $r27;

        if $r27 != null goto label13;

        r28 = r2;

     label13:
        $r4 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: java.util.Set registeredBeans>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r28);

        virtualinvoke r0.<org.springframework.jmx.support.MBeanRegistrationSupport: void onRegister(javax.management.ObjectName,java.lang.Object)>(r28, r1);

        return;

        catch javax.management.InstanceAlreadyExistsException from label01 to label02 with label03;
        catch javax.management.InstanceNotFoundException from label05 to label07 with label08;
    }

    protected void unregisterBeans()
    {
        java.util.Iterator $r2;
        org.springframework.jmx.support.MBeanRegistrationSupport r0;
        java.util.Set $r1, $r5;
        java.lang.Object $r3;
        javax.management.ObjectName r4;
        boolean $z0;

        r0 := @this: org.springframework.jmx.support.MBeanRegistrationSupport;

        $r1 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: java.util.Set registeredBeans>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (javax.management.ObjectName) $r3;

        virtualinvoke r0.<org.springframework.jmx.support.MBeanRegistrationSupport: void doUnregister(javax.management.ObjectName)>(r4);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: java.util.Set registeredBeans>;

        interfaceinvoke $r5.<java.util.Set: void clear()>();

        return;
    }

    protected void doUnregister(javax.management.ObjectName)
    {
        org.springframework.jmx.support.MBeanRegistrationSupport r0;
        javax.management.MBeanServer $r2, $r10;
        java.lang.String $r9, $r17;
        boolean $z0, $z1, $z2;
        javax.management.ObjectName r1;
        javax.management.JMException $r11;
        org.apache.commons.logging.Log $r3, $r5, $r12, $r14;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r13, $r15, $r16;

        r0 := @this: org.springframework.jmx.support.MBeanRegistrationSupport;

        r1 := @parameter0: javax.management.ObjectName;

     label1:
        $r2 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: javax.management.MBeanServer server>;

        $z0 = interfaceinvoke $r2.<javax.management.MBeanServer: boolean isRegistered(javax.management.ObjectName)>(r1);

        if $z0 == 0 goto label2;

        $r10 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: javax.management.MBeanServer server>;

        interfaceinvoke $r10.<javax.management.MBeanServer: void unregisterMBean(javax.management.ObjectName)>(r1);

        virtualinvoke r0.<org.springframework.jmx.support.MBeanRegistrationSupport: void onUnregister(javax.management.ObjectName)>(r1);

        goto label5;

     label2:
        $r3 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z1 == 0 goto label5;

        $r5 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: org.apache.commons.logging.Log logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not unregister MBean [");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] as said MBean ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is not registered (perhaps already unregistered by an external process)");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r9);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r12 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r12.<org.apache.commons.logging.Log: boolean isErrorEnabled()>();

        if $z2 == 0 goto label5;

        $r14 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: org.apache.commons.logging.Log logger>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not unregister MBean [");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r17, $r11);

     label5:
        return;

        catch javax.management.JMException from label1 to label3 with label4;
    }

    protected final javax.management.ObjectName[] getRegisteredObjectNames()
    {
        java.lang.Object[] $r4;
        org.springframework.jmx.support.MBeanRegistrationSupport r0;
        int $i0;
        java.util.Set $r1, $r2;
        javax.management.ObjectName[] $r3, $r5;

        r0 := @this: org.springframework.jmx.support.MBeanRegistrationSupport;

        $r2 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: java.util.Set registeredBeans>;

        $r1 = r0.<org.springframework.jmx.support.MBeanRegistrationSupport: java.util.Set registeredBeans>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $r3 = newarray (javax.management.ObjectName)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (javax.management.ObjectName[]) $r4;

        return $r5;
    }

    protected void onRegister(javax.management.ObjectName, java.lang.Object)
    {
        java.lang.Object r2;
        javax.management.ObjectName r1;
        org.springframework.jmx.support.MBeanRegistrationSupport r0;

        r0 := @this: org.springframework.jmx.support.MBeanRegistrationSupport;

        r1 := @parameter0: javax.management.ObjectName;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<org.springframework.jmx.support.MBeanRegistrationSupport: void onRegister(javax.management.ObjectName)>(r1);

        return;
    }

    protected void onRegister(javax.management.ObjectName)
    {
        javax.management.ObjectName r1;
        org.springframework.jmx.support.MBeanRegistrationSupport r0;

        r0 := @this: org.springframework.jmx.support.MBeanRegistrationSupport;

        r1 := @parameter0: javax.management.ObjectName;

        return;
    }

    protected void onUnregister(javax.management.ObjectName)
    {
        javax.management.ObjectName r1;
        org.springframework.jmx.support.MBeanRegistrationSupport r0;

        r0 := @this: org.springframework.jmx.support.MBeanRegistrationSupport;

        r1 := @parameter0: javax.management.ObjectName;

        return;
    }
}
