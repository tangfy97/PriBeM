public class org.apache.http.impl.client.BasicAuthCache extends java.lang.Object implements org.apache.http.client.AuthCache
{
    private final java.util.HashMap map;

    public void <init>()
    {
        org.apache.http.impl.client.BasicAuthCache r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.http.impl.client.BasicAuthCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.http.impl.client.BasicAuthCache: java.util.HashMap map> = $r1;

        return;
    }

    protected org.apache.http.HttpHost getKey(org.apache.http.HttpHost)
    {
        org.apache.http.impl.client.BasicAuthCache r5;
        short $s1;
        int $i0;
        java.lang.String $r1, $r3, $r4;
        org.apache.http.HttpHost r0, $r2;
        boolean $z0;

        r5 := @this: org.apache.http.impl.client.BasicAuthCache;

        r0 := @parameter0: org.apache.http.HttpHost;

        $i0 = virtualinvoke r0.<org.apache.http.HttpHost: int getPort()>();

        if $i0 > 0 goto label3;

        $r1 = virtualinvoke r0.<org.apache.http.HttpHost: java.lang.String getSchemeName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("https");

        if $z0 == 0 goto label1;

        $s1 = 443;

        goto label2;

     label1:
        $s1 = 80;

     label2:
        $r2 = new org.apache.http.HttpHost;

        $r3 = virtualinvoke r0.<org.apache.http.HttpHost: java.lang.String getHostName()>();

        $r4 = virtualinvoke r0.<org.apache.http.HttpHost: java.lang.String getSchemeName()>();

        specialinvoke $r2.<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>($r3, $s1, $r4);

        return $r2;

     label3:
        return r0;
    }

    public void put(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme)
    {
        org.apache.http.impl.client.BasicAuthCache r1;
        org.apache.http.auth.AuthScheme r4;
        java.util.HashMap $r2;
        java.lang.IllegalArgumentException $r5;
        org.apache.http.HttpHost r0, $r3;

        r1 := @this: org.apache.http.impl.client.BasicAuthCache;

        r0 := @parameter0: org.apache.http.HttpHost;

        r4 := @parameter1: org.apache.http.auth.AuthScheme;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP host may not be null");

        throw $r5;

     label1:
        $r2 = r1.<org.apache.http.impl.client.BasicAuthCache: java.util.HashMap map>;

        $r3 = virtualinvoke r1.<org.apache.http.impl.client.BasicAuthCache: org.apache.http.HttpHost getKey(org.apache.http.HttpHost)>(r0);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r4);

        return;
    }

    public org.apache.http.auth.AuthScheme get(org.apache.http.HttpHost)
    {
        org.apache.http.impl.client.BasicAuthCache r1;
        org.apache.http.auth.AuthScheme $r5;
        java.util.HashMap $r2;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r6;
        org.apache.http.HttpHost r0, $r3;

        r1 := @this: org.apache.http.impl.client.BasicAuthCache;

        r0 := @parameter0: org.apache.http.HttpHost;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP host may not be null");

        throw $r6;

     label1:
        $r2 = r1.<org.apache.http.impl.client.BasicAuthCache: java.util.HashMap map>;

        $r3 = virtualinvoke r1.<org.apache.http.impl.client.BasicAuthCache: org.apache.http.HttpHost getKey(org.apache.http.HttpHost)>(r0);

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (org.apache.http.auth.AuthScheme) $r4;

        return $r5;
    }

    public void remove(org.apache.http.HttpHost)
    {
        org.apache.http.impl.client.BasicAuthCache r1;
        java.util.HashMap $r2;
        java.lang.IllegalArgumentException $r4;
        org.apache.http.HttpHost r0, $r3;

        r1 := @this: org.apache.http.impl.client.BasicAuthCache;

        r0 := @parameter0: org.apache.http.HttpHost;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP host may not be null");

        throw $r4;

     label1:
        $r2 = r1.<org.apache.http.impl.client.BasicAuthCache: java.util.HashMap map>;

        $r3 = virtualinvoke r1.<org.apache.http.impl.client.BasicAuthCache: org.apache.http.HttpHost getKey(org.apache.http.HttpHost)>(r0);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r3);

        return;
    }

    public void clear()
    {
        org.apache.http.impl.client.BasicAuthCache r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.http.impl.client.BasicAuthCache;

        $r1 = r0.<org.apache.http.impl.client.BasicAuthCache: java.util.HashMap map>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        return;
    }

    public java.lang.String toString()
    {
        org.apache.http.impl.client.BasicAuthCache r0;
        java.util.HashMap $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.http.impl.client.BasicAuthCache;

        $r1 = r0.<org.apache.http.impl.client.BasicAuthCache: java.util.HashMap map>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.String toString()>();

        return $r2;
    }
}
