public class org.waveprotocol.wave.client.editor.EditorImpl extends org.waveprotocol.wave.client.common.util.LogicalPanel$Impl implements org.waveprotocol.wave.client.editor.Editor, org.waveprotocol.wave.client.common.util.LogicalPanel, org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper, org.waveprotocol.wave.client.common.util.DomHelper$JavaScriptEventListener
{
    public static final java.lang.String WAVE_EDITOR_EDIT_ON;
    public static final java.lang.String WAVE_EDITOR_EDIT_OFF;
    final org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle editorPackage;
    private static final com.google.gwt.resources.client.CssResource css;
    static final java.lang.String EDITABLE_DOC_MARKER;
    private final com.google.gwt.dom.client.Element div;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet elementsWithDisplayEditModes;
    private org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager;
    private org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelper caretMoveHelper;
    private org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper htmlSelectionHelper;
    private org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper passiveSelectionHelper;
    private org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper aggressiveSelectionHelper;
    protected org.waveprotocol.wave.client.editor.content.ContentDocument content;
    private org.waveprotocol.wave.client.editor.EditorSettings settings;
    private org.waveprotocol.wave.model.operation.SilentOperationSink innerOutputSink;
    private boolean permitOperations;
    java.util.List suppressedOutgoingOps;
    private final org.waveprotocol.wave.model.operation.SilentOperationSink outgoingOperationSink;
    private final org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner consistencyQueue;
    org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink typingSink;
    protected org.waveprotocol.wave.client.editor.extract.TypingExtractor typing;
    private final org.waveprotocol.wave.client.editor.extract.ImeExtractor imeExtractor;
    private org.waveprotocol.wave.client.editor.extract.PasteExtractor pasteExtractor;
    private org.waveprotocol.wave.client.editor.extract.Repairer repairer;
    protected boolean editing;
    private org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caretStyles;
    private org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection currentSelectionBias;
    protected java.util.Set keySignalListeners;
    protected org.waveprotocol.wave.client.editor.content.Registries registries;
    protected org.waveprotocol.wave.client.editor.sugg.SuggestionsManager suggestionsManager;
    private org.waveprotocol.wave.client.editor.extract.DomMutationReverter domMutationReverter;
    private org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry keyBindings;
    private final org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler eventsSubHandler;
    org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic annotationLogic;
    private final org.waveprotocol.wave.client.editor.EditorUpdateEventImpl updateEvent;
    private org.waveprotocol.wave.model.util.IdentityMap ancestorScrollTops;
    org.waveprotocol.wave.client.editor.event.EditorEventHandler eventHandler;
    private com.google.gwt.dom.client.Text webkitEndOfLinkHackTextNode;
    private org.waveprotocol.wave.client.editor.Responsibility$Manager responsibility;
    private org.waveprotocol.wave.client.editor.EditorUndoManager editorUndoManager;
    org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations$AnnotationResolver annotationResolver;
    private double processKeyPressTimer;
    private com.google.gwt.core.client.Duration postKeyPressTimer;
    private final org.waveprotocol.wave.client.scheduler.Scheduler$Task instrumentationTask;
    private final org.waveprotocol.wave.client.editor.extract.RepairListener repairListener;
    private org.waveprotocol.wave.client.widget.popup.UniversalPopup debugPopup;
    private final boolean ownsDocument;
    private final org.waveprotocol.wave.model.util.IdentitySet domHandlers;
    private org.waveprotocol.wave.model.document.util.RangeTracker savedSelection;
    private final org.waveprotocol.wave.client.scheduler.Scheduler$Task selectionSavingTask;
    private boolean debugDisabled;
    public static final org.waveprotocol.wave.client.editor.content.Renderer SIMPLE_RENDERER;
    static final boolean $assertionsDisabled;

    private void rebiasSelection(org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)
    {
        org.waveprotocol.wave.client.scheduler.TimerService $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl$7 $r2;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection r3;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r3 := @parameter0: org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isTyping()>();

        if $z0 == 0 goto label1;

        $r4 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection LEFT>;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection currentSelectionBias> = $r4;

        return;

     label1:
        $r1 = staticinvoke <org.waveprotocol.wave.client.scheduler.SchedulerInstance: org.waveprotocol.wave.client.scheduler.TimerService getHighPriorityTimer()>();

        $r2 = new org.waveprotocol.wave.client.editor.EditorImpl$7;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.EditorImpl$7: void <init>(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>(r0, r3);

        interfaceinvoke $r1.<org.waveprotocol.wave.client.scheduler.TimerService: void schedule(org.waveprotocol.wave.client.scheduler.Scheduler$Task)>($r2);

        return;
    }

    private org.waveprotocol.wave.model.document.util.Point insertText(org.waveprotocol.wave.model.document.util.Point, java.lang.String, boolean)
    {
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r3, $r9, $r11;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r6;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations $r7, $r8;
        int $i0, $i1, $i2;
        java.lang.String $r1, r16;
        org.waveprotocol.wave.model.document.util.Point r4, $r5, $r12;
        boolean z0;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic $r15;
        org.waveprotocol.wave.client.editor.EditorImpl r2;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection $r14;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType $r13;
        org.waveprotocol.wave.model.document.operation.Nindo $r10;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters $r0;

        r2 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r4 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r16 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r0 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters BLIP_TEXT>;

        $r1 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters: java.lang.String coerceString(java.lang.String)>(r16);

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $r5 = specialinvoke r2.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.Point getFilteredPoint(org.waveprotocol.wave.model.document.util.Point)>(r4);

        $i0 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.CMutableDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r5);

        if z0 != 0 goto label1;

        $r15 = r2.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic annotationLogic>;

        $r14 = r2.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection currentSelectionBias>;

        $r13 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType PLAIN_TEXT>;

        virtualinvoke $r15.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: void supplementAnnotations(int,org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection,org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType)>($i0, $r14, $r13);

     label1:
        $r6 = new org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        specialinvoke $r6.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void <init>()>();

        virtualinvoke $r6.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void skip(int)>($i0);

        $r7 = r2.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caretStyles>;

        virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: void buildAnnotationStarts(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r6);

        virtualinvoke $r6.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void characters(java.lang.String)>($r1);

        $r8 = r2.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caretStyles>;

        virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: void buildAnnotationEnds(org.waveprotocol.wave.model.document.operation.Nindo$Builder,boolean)>($r6, 1);

        $r9 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $r10 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: org.waveprotocol.wave.model.document.operation.Nindo build()>();

        virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.CMutableDocument: void hackConsume(org.waveprotocol.wave.model.document.operation.Nindo)>($r10);

        $r11 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.content.CMutableDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>($i2);

        return $r12;
    }

    private org.waveprotocol.wave.model.document.operation.Nindo generateReplaceTextOp(int, int, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic $r8;
        org.waveprotocol.wave.client.editor.EditorImpl r3;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection $r7;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType $r6;
        org.waveprotocol.wave.model.document.operation.Nindo $r2;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r0;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations $r4, $r5;
        int i0, i1, $i2;
        java.lang.String r1;

        r3 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void <init>()>();

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void skip(int)>(i0);

        if i1 <= 0 goto label1;

        $r8 = r3.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic annotationLogic>;

        $r7 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection RIGHT>;

        $r6 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType PLAIN_TEXT>;

        virtualinvoke $r8.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: void supplementAnnotations(int,org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection,org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType)>(i0, $r7, $r6);

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void deleteCharacters(int)>(i1);

     label1:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 <= 0 goto label2;

        $r4 = r3.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caretStyles>;

        virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: void buildAnnotationStarts(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r0);

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void characters(java.lang.String)>(r1);

        $r5 = r3.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caretStyles>;

        virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: void buildAnnotationEnds(org.waveprotocol.wave.model.document.operation.Nindo$Builder,boolean)>($r0, 1);

     label2:
        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: org.waveprotocol.wave.model.document.operation.Nindo build()>();

        return $r2;
    }

    private org.waveprotocol.wave.model.document.util.Point getFilteredPoint(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.content.ContentView $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.model.document.util.Point r2, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentView persistent()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: org.waveprotocol.wave.model.document.util.Point getFilteredPoint(org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.model.document.util.Point)>($r1, r2);

        return $r3;
    }

    public org.waveprotocol.wave.client.editor.Responsibility$Manager getResponsibilityManager()
    {
        org.waveprotocol.wave.client.editor.Responsibility$Manager $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager responsibility>;

        return $r1;
    }

    public void undoableSequence(java.lang.Runnable)
    {
        java.lang.Throwable $r5;
        org.waveprotocol.wave.client.editor.EditorUndoManager $r1;
        org.waveprotocol.wave.client.editor.Responsibility$Manager $r2, $r4, $r6;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        java.lang.Runnable r3;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r3 := @parameter0: java.lang.Runnable;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUndoManager editorUndoManager>;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.EditorUndoManager: void maybeCheckpoint()>();

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager responsibility>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.Responsibility$Manager: void startDirectSequence()>();

     label1:
        interfaceinvoke r3.<java.lang.Runnable: void run()>();

     label2:
        $r4 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager responsibility>;

        interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.Responsibility$Manager: void endDirectSequence()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager responsibility>;

        interfaceinvoke $r6.<org.waveprotocol.wave.client.editor.Responsibility$Manager: void endDirectSequence()>();

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void init()
    {
        return;
    }

    protected void <init>(boolean, com.google.gwt.dom.client.Element)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl $r11;
        org.waveprotocol.wave.model.util.IdentitySet $r15;
        org.waveprotocol.wave.client.editor.EditorSettings $r3;
        org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner $r5;
        org.waveprotocol.wave.client.editor.EditorImpl$6 $r14;
        org.waveprotocol.wave.client.editor.EditorImpl$5 $r13;
        org.waveprotocol.wave.client.editor.EditorImpl$4 $r12;
        org.waveprotocol.wave.client.editor.EditorImpl$3 $r6;
        org.waveprotocol.wave.client.editor.EditorImpl$2 $r4;
        org.waveprotocol.wave.client.editor.extract.ImeExtractor $r7;
        org.waveprotocol.wave.client.editor.EditorImpl$1 $r1;
        org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry $r9;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl $r10;
        boolean z0;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl$16 $r16;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection $r8;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        com.google.gwt.dom.client.Element r17;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        z0 := @parameter0: boolean;

        r17 := @parameter1: com.google.gwt.dom.client.Element;

        specialinvoke r0.<org.waveprotocol.wave.client.common.util.LogicalPanel$Impl: void <init>()>();

        $r1 = new org.waveprotocol.wave.client.editor.EditorImpl$1;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.EditorImpl$1: void <init>(org.waveprotocol.wave.client.editor.EditorImpl)>(r0);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle editorPackage> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet elementsWithDisplayEditModes> = $r2;

        $r3 = <org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorSettings DEFAULT>;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings settings> = $r3;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean permitOperations> = 1;

        $r4 = new org.waveprotocol.wave.client.editor.EditorImpl$2;

        specialinvoke $r4.<org.waveprotocol.wave.client.editor.EditorImpl$2: void <init>(org.waveprotocol.wave.client.editor.EditorImpl)>(r0);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.operation.SilentOperationSink outgoingOperationSink> = $r4;

        $r5 = new org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner;

        specialinvoke $r5.<org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner: void <init>(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.client.editor.EditorImpl$1)>(r0, null);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner consistencyQueue> = $r5;

        $r6 = new org.waveprotocol.wave.client.editor.EditorImpl$3;

        specialinvoke $r6.<org.waveprotocol.wave.client.editor.EditorImpl$3: void <init>(org.waveprotocol.wave.client.editor.EditorImpl)>(r0);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink typingSink> = $r6;

        $r7 = new org.waveprotocol.wave.client.editor.extract.ImeExtractor;

        specialinvoke $r7.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.ImeExtractor imeExtractor> = $r7;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean editing> = 0;

        $r8 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection LEFT>;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection currentSelectionBias> = $r8;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.sugg.SuggestionsManager suggestionsManager> = null;

        $r9 = <org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry NONE>;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry keyBindings> = $r9;

        $r10 = new org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl;

        specialinvoke $r10.<org.waveprotocol.wave.client.editor.EditorImpl$EditorEventsSubHandlerImpl: void <init>(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.client.editor.EditorImpl$1)>(r0, null);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler eventsSubHandler> = $r10;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic annotationLogic> = null;

        $r11 = new org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        specialinvoke $r11.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: void <init>(org.waveprotocol.wave.client.editor.EditorImpl)>(r0);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl updateEvent> = $r11;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.event.EditorEventHandler eventHandler> = null;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Text webkitEndOfLinkHackTextNode> = null;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager responsibility> = null;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUndoManager editorUndoManager> = null;

        $r12 = new org.waveprotocol.wave.client.editor.EditorImpl$4;

        specialinvoke $r12.<org.waveprotocol.wave.client.editor.EditorImpl$4: void <init>(org.waveprotocol.wave.client.editor.EditorImpl)>(r0);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations$AnnotationResolver annotationResolver> = $r12;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: double processKeyPressTimer> = 0.0;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.core.client.Duration postKeyPressTimer> = null;

        $r13 = new org.waveprotocol.wave.client.editor.EditorImpl$5;

        specialinvoke $r13.<org.waveprotocol.wave.client.editor.EditorImpl$5: void <init>(org.waveprotocol.wave.client.editor.EditorImpl)>(r0);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.scheduler.Scheduler$Task instrumentationTask> = $r13;

        $r14 = new org.waveprotocol.wave.client.editor.EditorImpl$6;

        specialinvoke $r14.<org.waveprotocol.wave.client.editor.EditorImpl$6: void <init>(org.waveprotocol.wave.client.editor.EditorImpl)>(r0);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.RepairListener repairListener> = $r14;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.widget.popup.UniversalPopup debugPopup> = null;

        $r15 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.IdentitySet createIdentitySet()>();

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.util.IdentitySet domHandlers> = $r15;

        $r16 = new org.waveprotocol.wave.client.editor.EditorImpl$16;

        specialinvoke $r16.<org.waveprotocol.wave.client.editor.EditorImpl$16: void <init>(org.waveprotocol.wave.client.editor.EditorImpl)>(r0);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.scheduler.Scheduler$Task selectionSavingTask> = $r16;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean debugDisabled> = 0;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean ownsDocument> = z0;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Element div> = r17;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void setElement(com.google.gwt.dom.client.Element)>(r17);

        return;
    }

    private void registerDomEventHandling()
    {
        org.waveprotocol.wave.model.util.IdentitySet $r3;
        org.waveprotocol.wave.client.editor.EditorImpl r2;
        org.waveprotocol.wave.client.common.util.DomHelper$HandlerReference $r5;
        java.lang.String[] r0;
        int i0, i1;
        com.google.gwt.dom.client.Element $r4;
        java.lang.String r1;

        r2 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r0 = <org.waveprotocol.wave.client.editor.constants.BrowserEvents: java.lang.String[] HANDLED_EVENTS>;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r1 = r0[i1];

        $r3 = r2.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.util.IdentitySet domHandlers>;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Element getDocumentHtmlElement()>();

        $r5 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: org.waveprotocol.wave.client.common.util.DomHelper$HandlerReference registerEventHandler(com.google.gwt.dom.client.Element,java.lang.String,org.waveprotocol.wave.client.common.util.DomHelper$JavaScriptEventListener)>($r4, r1, r2);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.IdentitySet: void add(java.lang.Object)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void unregisterDomEventHandling()
    {
        org.waveprotocol.wave.client.editor.EditorImpl$9 $r1;
        org.waveprotocol.wave.model.util.IdentitySet $r2, $r3;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.util.IdentitySet domHandlers>;

        $r1 = new org.waveprotocol.wave.client.editor.EditorImpl$9;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.EditorImpl$9: void <init>(org.waveprotocol.wave.client.editor.EditorImpl)>(r0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.IdentitySet: void each(org.waveprotocol.wave.model.util.ReadableIdentitySet$Proc)>($r1);

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.util.IdentitySet domHandlers>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.IdentitySet: void clear()>();

        return;
    }

    public com.google.gwt.user.client.ui.Widget getWidget()
    {
        com.google.gwt.user.client.ui.Widget $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = (com.google.gwt.user.client.ui.Widget) r0;

        return $r1;
    }

    public void init(org.waveprotocol.wave.client.editor.content.Registries, org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry, org.waveprotocol.wave.client.editor.EditorSettings)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter $r7;
        org.waveprotocol.wave.client.editor.EditorSettings r3;
        org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler $r6;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl $r5;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler $r4;
        org.waveprotocol.wave.client.editor.content.Registries r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry r2;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.Registries;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry;

        r3 := @parameter2: org.waveprotocol.wave.client.editor.EditorSettings;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean ownsDocument>;

        if r1 == null goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z0 != $z3 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z4, "Can only set registries on owned documents");

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.Registries registries> = r1;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry keyBindings> = r2;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings settings> = r3;

        $r4 = new org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        $r5 = new org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        specialinvoke $r5.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: void <init>(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.client.editor.EditorImpl$1)>(r0, null);

        $r6 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler eventsSubHandler>;

        $r7 = <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.content.NodeEventRouter INSTANCE>;

        $z1 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.EditorSettings: boolean useWhitelistInEditor()>();

        $z2 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.EditorSettings: boolean useWebkitCompositionEvents()>();

        specialinvoke $r4.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void <init>(org.waveprotocol.wave.client.editor.event.EditorInteractor,org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler,org.waveprotocol.wave.client.editor.content.NodeEventRouter,boolean,boolean)>($r5, $r6, $r7, $z1, $z2);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.event.EditorEventHandler eventHandler> = $r4;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void setEditing(boolean)>(0);

        return;
    }

    public void reset()
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl $r1;
        java.util.Iterator r6;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        com.google.gwt.user.client.ui.Widget r5;
        java.lang.Object $r4;
        boolean $z0;
        org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl updateEvent>;

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: void clear()>();

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet elementsWithDisplayEditModes>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: void clear()>();

        r6 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.google.gwt.user.client.ui.Widget) $r4;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void doOrphan(com.google.gwt.user.client.ui.Widget)>(r5);

        r6 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: java.util.Iterator iterator()>();

        goto label1;

     label2:
        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.Repairer repairer> = null;

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry keyBindings>;

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: void clear()>();

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caretStyles> = null;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void clearContent()>();

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic annotationLogic> = null;

        return;
    }

    private void clearContent()
    {
        java.lang.Throwable $r10;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        java.lang.RuntimeException $r11;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1, $r3;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r2, $r4, $r5;
        com.google.gwt.dom.client.Element $r6, $r8, $r9;
        com.google.gwt.dom.client.Node $r12;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        if $r1 == null goto label7;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void updateDocumentEditState(boolean)>(0);

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label1:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void unregisterDomEventHandling()>();

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean ownsDocument>;

        if $z0 == 0 goto label2;

        $r8 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Element div>;

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Element getDocumentHtmlElement()>();

        $r12 = (com.google.gwt.dom.client.Node) $r9;

        virtualinvoke $r8.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node removeChild(com.google.gwt.dom.client.Node)>($r12);

        goto label4;

     label2:
        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.operation.SilentOperationSink innerOutputSink>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.operation.SilentOperationSink replaceOutgoingSink(org.waveprotocol.wave.model.operation.SilentOperationSink)>($r2);

        $r5 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.operation.SilentOperationSink outgoingOperationSink>;

        if $r4 == $r5 goto label3;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("Document had a mysterious sink.  Restoration is unsafe");

        throw $r11;

     label3:
        $r6 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Element div>;

        virtualinvoke $r6.<com.google.gwt.dom.client.Element: void removeClassName(java.lang.String)>("editor");

     label4:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        goto label7;

     label5:
        $r10 := @caughtexception;

     label6:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r10;

     label7:
        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content> = null;

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void cleanup()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void reset()>();

        return;
    }

    public void setOutputSink(org.waveprotocol.wave.model.operation.SilentOperationSink)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.SilentOperationSink;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.operation.SilentOperationSink innerOutputSink> = r1;

        return;
    }

    public void clearOutputSink()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.operation.SilentOperationSink innerOutputSink> = null;

        return;
    }

    void flushSynchronous()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r2;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        if $r1 == null goto label1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.TypingExtractor typing>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: void flush()>();

     label1:
        return;
    }

    private boolean flush(java.lang.Runnable)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner $r1, $r5;
        org.waveprotocol.wave.common.logging.Logger $r3;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        java.lang.Runnable r4;
        org.waveprotocol.wave.common.logging.LoggerBundle $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r4 := @parameter0: java.lang.Runnable;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean canApplyIncomingOperations()>();

        if $z0 != 0 goto label1;

        $r2 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Deferring incoming operation");

        $r5 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner consistencyQueue>;

        virtualinvoke $r5.<org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner: void schedule(java.lang.Runnable)>(r4);

        return 0;

     label1:
        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner consistencyQueue>;

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner: void execute()>();

        return 1;
    }

    public org.waveprotocol.wave.client.editor.content.ContentView getPersistentDocument()
    {
        org.waveprotocol.wave.client.editor.content.ContentView $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentView getPersistentView()>();

        return $r2;
    }

    public void setContent(org.waveprotocol.wave.model.document.operation.DocInitialization, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r3;
        org.waveprotocol.wave.model.document.operation.DocInitialization r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        boolean $z0;
        org.waveprotocol.wave.client.editor.content.Registries $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.DocInitialization;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean ownsDocument>;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Can not replace content not owned");

        $r1 = new org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r4 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.Registries registries>;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: void <init>(org.waveprotocol.wave.client.editor.content.Registries,org.waveprotocol.wave.model.document.operation.DocInitialization,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>($r4, r2, r3);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void setContent(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        return;
    }

    public org.waveprotocol.wave.client.editor.content.ContentDocument getContent()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.ContentDocument removeContent()
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r2;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void clearContent()>();

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean ownsDocument>;

        if $z0 == 0 goto label1;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setRendering()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.operation.SilentOperationSink$Void: org.waveprotocol.wave.model.operation.SilentOperationSink get()>();

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.operation.SilentOperationSink replaceOutgoingSink(org.waveprotocol.wave.model.operation.SilentOperationSink)>($r2);

        goto label2;

     label1:
        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setInteractive()>();

     label2:
        return r1;
    }

    public org.waveprotocol.wave.client.editor.content.ContentDocument removeContentAndUnrender()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void clearContent()>();

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setShelved()>();

        return r1;
    }

    public void setContent(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.sugg.SuggestionsManager $r1, $r107;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r35, $r55, $r91;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink $r42;
        org.waveprotocol.wave.model.document.util.RangeTracker $r86, $r128;
        org.waveprotocol.wave.client.editor.content.ContentView $r21, $r31, $r36, $r46, $r60, $r62, $r75;
        org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl $r119;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic $r129;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r4, $r6, $r105;
        com.google.gwt.dom.client.Element $r15, $r95, $r96, $r97, $r98;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r118;
        org.waveprotocol.wave.client.editor.UndoableSequencer $r122;
        org.waveprotocol.wave.model.document.MutableAnnotationSet$Local $r85;
        java.lang.Throwable $r108;
        org.waveprotocol.wave.client.editor.EditorUndoManagerImpl $r121;
        org.waveprotocol.wave.client.editor.content.ClientDocumentContext $r82;
        org.waveprotocol.wave.client.editor.extract.DomMutationReverter $r126;
        org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle $r93;
        org.waveprotocol.wave.client.editor.content.ContentElement $r77;
        org.waveprotocol.wave.model.document.util.AnnotationRegistryImpl $r90;
        org.waveprotocol.wave.client.editor.EditorImpl$10 $r114;
        org.waveprotocol.wave.client.editor.EditorImpl$11 $r117;
        org.waveprotocol.wave.client.editor.EditorImpl r0, $r110;
        org.waveprotocol.wave.model.undo.UndoManagerPlus $r100;
        org.waveprotocol.wave.client.editor.EditorImpl$14 $r125;
        org.waveprotocol.wave.client.editor.EditorImpl$12 $r120;
        org.waveprotocol.wave.client.editor.EditorImpl$13 $r124;
        org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelper $r109;
        com.google.gwt.dom.client.Node $r130;
        org.waveprotocol.wave.client.editor.content.Registries $r64;
        org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperWebkitImpl $r115;
        org.waveprotocol.wave.client.editor.content.ContentDocument r3, $r5, $r7, $r10, $r12, $r17, $r20, $r22, $r28, $r32, $r34, $r38, $r41, $r45, $r54, $r57, $r61, $r63, $r66, $r81, $r84, $r89, $r94, $r104, $r106;
        org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper $r59;
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r23, $r33;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations$AnnotationResolver $r79;
        org.waveprotocol.wave.client.editor.HtmlSelectionHelperImpl $r111;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.waveprotocol.wave.client.editor.extract.PasteExtractor $r123;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.client.editor.EditorUndoManager $r51;
        org.waveprotocol.wave.client.editor.Responsibility$Manager $r53;
        org.waveprotocol.wave.client.editor.EditorSettings $r25, $r50, $r68, $r70;
        org.waveprotocol.wave.model.document.indexed.Validator $r67;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml $r44;
        org.waveprotocol.wave.model.document.util.AnnotationRegistry $r65;
        org.waveprotocol.wave.client.scheduler.CommandQueue $r58;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations $r80, $r92, $r127;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager $r113;
        org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper $r18, $r29;
        int $i0;
        org.waveprotocol.wave.client.editor.extract.Repairer $r11, $r48, $r74;
        org.waveprotocol.wave.client.editor.content.ContentDocument$Level $r8, $r9;
        org.waveprotocol.wave.client.editor.EditorInstrumentor $r69;
        org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperImpl $r116;
        org.waveprotocol.wave.client.editor.operation.EditorOperationSequencer $r39;
        java.lang.Object $r76;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r13, $r19, $r30, $r43, $r103;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper $r26, $r37, $r87, $r102, $r112;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void flushSynchronous()>();

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label01:
        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.sugg.SuggestionsManager suggestionsManager>;

        if $r1 == null goto label02;

        $r107 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.sugg.SuggestionsManager suggestionsManager>;

        interfaceinvoke $r107.<org.waveprotocol.wave.client.editor.sugg.SuggestionsManager: void clear()>();

     label02:
        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet elementsWithDisplayEditModes>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: void clear()>();

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void clearContent()>();

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content> = r3;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean ownsDocument>;

        if $z0 == 0 goto label03;

        $r106 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r105 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.operation.SilentOperationSink outgoingOperationSink>;

        virtualinvoke $r106.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.operation.SilentOperationSink replaceOutgoingSink(org.waveprotocol.wave.model.operation.SilentOperationSink)>($r105);

        goto label04;

     label03:
        $r5 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r4 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.operation.SilentOperationSink outgoingOperationSink>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.operation.SilentOperationSink replaceOutgoingSink(org.waveprotocol.wave.model.operation.SilentOperationSink)>($r4);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.operation.SilentOperationSink innerOutputSink> = $r6;

     label04:
        $r7 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level getLevel()>();

        $r9 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level RENDERED>;

        $z1 = virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: boolean isAtLeast(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r9);

        if $z1 != 0 goto label05;

        $r104 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        virtualinvoke $r104.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setRendering()>();

     label05:
        $r10 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.extract.Repairer getRepairer()>();

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.Repairer repairer> = $r11;

        $r12 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.NodeManager getNodeManager()>();

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager> = $r13;

        $r111 = new org.waveprotocol.wave.client.editor.HtmlSelectionHelperImpl;

        $r15 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Element getDocumentHtmlElement()>();

        specialinvoke $r111.<org.waveprotocol.wave.client.editor.HtmlSelectionHelperImpl: void <init>(com.google.gwt.dom.client.Element)>($r15);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper htmlSelectionHelper> = $r111;

        $r112 = new org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        $r18 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper htmlSelectionHelper>;

        $r17 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r19 = virtualinvoke $r17.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.NodeManager getNodeManager()>();

        $r20 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r21 = virtualinvoke $r20.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentView getRenderedView()>();

        $r22 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r23 = virtualinvoke $r22.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.indexed.LocationMapper getLocationMapper()>();

        specialinvoke $r112.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: void <init>(org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper,org.waveprotocol.wave.client.editor.impl.NodeManager,org.waveprotocol.wave.client.editor.content.ContentView,org.waveprotocol.wave.model.document.indexed.LocationMapper)>($r18, $r19, $r21, $r23);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper passiveSelectionHelper> = $r112;

        $r113 = new org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        $r26 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper passiveSelectionHelper>;

        $r25 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings settings>;

        $i0 = virtualinvoke $r25.<org.waveprotocol.wave.client.editor.EditorSettings: int closeSuggestionsMenuDelayMs()>();

        specialinvoke $r113.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: void <init>(org.waveprotocol.wave.client.editor.selection.content.SelectionHelper,int)>($r26, $i0);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.sugg.SuggestionsManager suggestionsManager> = $r113;

        $r114 = new org.waveprotocol.wave.client.editor.EditorImpl$10;

        $r29 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper htmlSelectionHelper>;

        $r30 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager>;

        $r28 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r31 = virtualinvoke $r28.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentView getRenderedView()>();

        $r32 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r33 = virtualinvoke $r32.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.indexed.LocationMapper getLocationMapper()>();

        $r34 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r35 = virtualinvoke $r34.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        specialinvoke $r114.<org.waveprotocol.wave.client.editor.EditorImpl$10: void <init>(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper,org.waveprotocol.wave.client.editor.impl.NodeManager,org.waveprotocol.wave.client.editor.content.ContentView,org.waveprotocol.wave.model.document.indexed.LocationMapper,org.waveprotocol.wave.client.editor.content.CMutableDocument)>(r0, $r29, $r30, $r31, $r33, $r35);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper aggressiveSelectionHelper> = $r114;

        $z2 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isWebkit()>();

        if $z2 == 0 goto label06;

        $r115 = new org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperWebkitImpl;

        $r109 = $r115;

        $r103 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager>;

        specialinvoke $r115.<org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperWebkitImpl: void <init>(org.waveprotocol.wave.client.editor.impl.NodeManager)>($r103);

        goto label07;

     label06:
        $r116 = new org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperImpl;

        $r109 = $r116;

        $r36 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentView persistent()>();

        $r37 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper passiveSelectionHelper>;

        specialinvoke $r116.<org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperImpl: void <init>(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.client.editor.selection.content.SelectionHelper)>($r36, $r37);

     label07:
        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelper caretMoveHelper> = $r109;

        $r38 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r39 = virtualinvoke $r38.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.operation.EditorOperationSequencer getOpSequencer()>();

        $r118 = new org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        $r42 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink typingSink>;

        $r43 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager>;

        $r41 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r44 = virtualinvoke $r41.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml getFilteredHtmlView()>();

        $r45 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r46 = virtualinvoke $r45.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentView getRenderedView()>();

        $r48 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.Repairer repairer>;

        $r117 = new org.waveprotocol.wave.client.editor.EditorImpl$11;

        specialinvoke $r117.<org.waveprotocol.wave.client.editor.EditorImpl$11: void <init>(org.waveprotocol.wave.client.editor.EditorImpl)>(r0);

        specialinvoke $r118.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: void <init>(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink,org.waveprotocol.wave.client.editor.impl.NodeManager,org.waveprotocol.wave.client.editor.impl.HtmlView,org.waveprotocol.wave.client.editor.content.ContentView,org.waveprotocol.wave.client.editor.extract.Repairer,org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource)>($r42, $r43, $r44, $r46, $r48, $r117);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.TypingExtractor typing> = $r118;

        $r119 = new org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl;

        specialinvoke $r119.<org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager responsibility> = $r119;

        $r50 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings settings>;

        $z3 = virtualinvoke $r50.<org.waveprotocol.wave.client.editor.EditorSettings: boolean undoEnabled()>();

        if $z3 == 0 goto label08;

        $r121 = new org.waveprotocol.wave.client.editor.EditorUndoManagerImpl;

        $r100 = staticinvoke <org.waveprotocol.wave.model.undo.UndoManagerFactory: org.waveprotocol.wave.model.undo.UndoManagerPlus createUndoManager()>();

        $r120 = new org.waveprotocol.wave.client.editor.EditorImpl$12;

        specialinvoke $r120.<org.waveprotocol.wave.client.editor.EditorImpl$12: void <init>(org.waveprotocol.wave.client.editor.EditorImpl)>(r0);

        $r102 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper passiveSelectionHelper>;

        specialinvoke $r121.<org.waveprotocol.wave.client.editor.EditorUndoManagerImpl: void <init>(org.waveprotocol.wave.model.undo.UndoManagerPlus,org.waveprotocol.wave.model.operation.SilentOperationSink,org.waveprotocol.wave.client.editor.selection.content.SelectionHelper)>($r100, $r120, $r102);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUndoManager editorUndoManager> = $r121;

        goto label09;

     label08:
        $r51 = <org.waveprotocol.wave.client.editor.EditorUndoManager: org.waveprotocol.wave.client.editor.EditorUndoManager NOP_IMPL>;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUndoManager editorUndoManager> = $r51;

     label09:
        $r122 = new org.waveprotocol.wave.client.editor.UndoableSequencer;

        $r53 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager responsibility>;

        specialinvoke $r122.<org.waveprotocol.wave.client.editor.UndoableSequencer: void <init>(org.waveprotocol.wave.model.operation.OperationSequencer,org.waveprotocol.wave.client.editor.Responsibility$Manager)>($r39, $r53);

        $r54 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r55 = virtualinvoke $r54.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.CMutableDocument createSequencedDocumentWrapper(org.waveprotocol.wave.model.operation.OperationSequencer)>($r122);

        $r123 = new org.waveprotocol.wave.client.editor.extract.PasteExtractor;

        $r58 = <org.waveprotocol.wave.client.scheduler.CommandQueue: org.waveprotocol.wave.client.scheduler.CommandQueue HIGH_PRIORITY>;

        $r59 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper aggressiveSelectionHelper>;

        $r57 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r60 = virtualinvoke $r57.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentView getRenderedView()>();

        $r61 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r62 = virtualinvoke $r61.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentView getPersistentView()>();

        $r63 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r64 = virtualinvoke $r63.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.Registries getRegistries()>();

        $r65 = interfaceinvoke $r64.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.model.document.util.AnnotationRegistry getAnnotationHandlerRegistry()>();

        $r66 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r67 = virtualinvoke $r66.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.indexed.Validator getValidator()>();

        $r68 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings settings>;

        $r69 = virtualinvoke $r68.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()>();

        $r70 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings settings>;

        $z4 = virtualinvoke $r70.<org.waveprotocol.wave.client.editor.EditorSettings: boolean useSemanticCopyPaste()>();

        specialinvoke $r123.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: void <init>(org.waveprotocol.wave.client.scheduler.CommandQueue,org.waveprotocol.wave.client.editor.selection.content.SelectionHelper,org.waveprotocol.wave.client.editor.content.CMutableDocument,org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.model.document.util.AnnotationRegistry,org.waveprotocol.wave.model.operation.OperationSequencer,org.waveprotocol.wave.model.document.indexed.Validator,org.waveprotocol.wave.client.editor.EditorInstrumentor,boolean)>($r58, $r59, $r55, $r60, $r62, $r65, $r122, $r67, $r69, $z4);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.PasteExtractor pasteExtractor> = $r123;

        $r124 = new org.waveprotocol.wave.client.editor.EditorImpl$13;

        specialinvoke $r124.<org.waveprotocol.wave.client.editor.EditorImpl$13: void <init>(org.waveprotocol.wave.client.editor.EditorImpl)>(r0);

        $r126 = new org.waveprotocol.wave.client.editor.extract.DomMutationReverter;

        $r125 = new org.waveprotocol.wave.client.editor.EditorImpl$14;

        specialinvoke $r125.<org.waveprotocol.wave.client.editor.EditorImpl$14: void <init>(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.client.scheduler.Scheduler$Task)>(r0, $r124);

        specialinvoke $r126.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: void <init>(org.waveprotocol.wave.client.editor.extract.DomMutationReverter$RevertListener)>($r125);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.DomMutationReverter domMutationReverter> = $r126;

        $r74 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.Repairer repairer>;

        $r75 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentView full()>();

        $r76 = interfaceinvoke $r75.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getDocumentElement()>();

        $r77 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r76;

        virtualinvoke $r74.<org.waveprotocol.wave.client.editor.extract.Repairer: void hideDeath(org.waveprotocol.wave.client.editor.content.ContentElement)>($r77);

        $r127 = new org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        specialinvoke $r127.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caretStyles> = $r127;

        $r80 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caretStyles>;

        $r79 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations$AnnotationResolver annotationResolver>;

        virtualinvoke $r80.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: void setAnnotationResolver(org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations$AnnotationResolver)>($r79);

        $r81 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r82 = virtualinvoke $r81.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ClientDocumentContext getContext()>();

        staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: boolean repaintNow(org.waveprotocol.wave.model.document.util.DocumentContext)>($r82);

        $r128 = new org.waveprotocol.wave.model.document.util.RangeTracker;

        $r84 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r85 = virtualinvoke $r84.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.MutableAnnotationSet$Local getLocalAnnotations()>();

        specialinvoke $r128.<org.waveprotocol.wave.model.document.util.RangeTracker: void <init>(org.waveprotocol.wave.model.document.MutableAnnotationSet$Local,java.lang.String)>($r85, "savedsel");

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.RangeTracker savedSelection> = $r128;

        $r87 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper passiveSelectionHelper>;

        $r86 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.RangeTracker savedSelection>;

        virtualinvoke $r87.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: void setSelectionTracker(org.waveprotocol.wave.model.document.util.RangeTracker)>($r86);

        $r129 = new org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic;

        $r90 = <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.AnnotationRegistryImpl ROOT_ANNOTATION_REGISTRY>;

        $r89 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r91 = virtualinvoke $r89.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r92 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caretStyles>;

        specialinvoke $r129.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: void <init>(org.waveprotocol.wave.model.document.util.AnnotationRegistry,org.waveprotocol.wave.model.document.MutableDocument,org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations)>($r90, $r91, $r92);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic annotationLogic> = $r129;

        $r94 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r93 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle editorPackage>;

        $z5 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean ownsDocument>;

        if $z5 == 0 goto label10;

        $r110 = r0;

        goto label11;

     label10:
        $r110 = null;

     label11:
        virtualinvoke $r94.<org.waveprotocol.wave.client.editor.content.ContentDocument: void attachEditor(org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle,org.waveprotocol.wave.client.common.util.LogicalPanel)>($r93, $r110);

        $r95 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Element getDocumentHtmlElement()>();

        $z6 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean ownsDocument>;

        if $z6 == 0 goto label12;

        $r98 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Element div>;

        $r130 = (com.google.gwt.dom.client.Node) $r95;

        virtualinvoke $r98.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node appendChild(com.google.gwt.dom.client.Node)>($r130);

        virtualinvoke $r95.<com.google.gwt.dom.client.Element: void addClassName(java.lang.String)>("document");

        goto label15;

     label12:
        $r96 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Element div>;

        $r97 = virtualinvoke $r95.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Element getParentElement()>();

        if $r96 != $r97 goto label13;

        $z7 = 1;

        goto label14;

     label13:
        $z7 = 0;

     label14:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z7, "wrong content document");

     label15:
        virtualinvoke $r95.<com.google.gwt.dom.client.Element: void setAttribute(java.lang.String,java.lang.String)>("editableDocMarker", "true");

        staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: void setNativeSpellCheck(com.google.gwt.dom.client.Element,boolean)>($r95, 0);

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void registerDomEventHandling()>();

        $z8 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isEditing()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void setEditing(boolean)>($z8);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void debugCheckHealth()>();

     label16:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        goto label19;

     label17:
        $r108 := @caughtexception;

     label18:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r108;

     label19:
        return;

        catch java.lang.Throwable from label01 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public org.waveprotocol.wave.model.document.indexed.LocationMapper mapper()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.indexed.LocationMapper getLocationMapper()>();

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.content.ContentView full()
    {
        org.waveprotocol.wave.client.editor.content.ContentView $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentView getFullContentView()>();

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r2;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.content.ContentView persistent()
    {
        org.waveprotocol.wave.client.editor.content.ContentView $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentView getPersistentView()>();

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.impl.NodeManager getNodeManager()
    {
        org.waveprotocol.wave.client.editor.impl.NodeManager $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper getAggressiveSelectionHelper()
    {
        org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper aggressiveSelectionHelper>;

        return $r1;
    }

    public boolean isEditing()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean editing>;

        return $z0;
    }

    public void setEditing(boolean)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r3;
        org.waveprotocol.wave.client.editor.EditorUndoManager $r2;
        org.waveprotocol.wave.common.logging.Logger $r5;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle $r4;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        z0 := @parameter0: boolean;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean editing> = z0;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        if $r1 == null goto label2;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void updateDocumentEditState(boolean)>(z0);

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUndoManager editorUndoManager>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorUndoManager: void maybeCheckpoint()>();

        if z0 == 0 goto label2;

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.operation.SilentOperationSink innerOutputSink>;

        if $r3 != null goto label1;

        $r4 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Scheduling update with no inner output sink...");

     label1:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void scheduleUpdateNotification(boolean,boolean,boolean,boolean)>(0, 1, 0, 0);

     label2:
        return;
    }

    private void updateDocumentEditState(boolean)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument $r7;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r9;
        org.waveprotocol.wave.client.editor.content.ClientDocumentContext $r8;
        int $i0;
        java.lang.Boolean $r6;
        org.waveprotocol.wave.client.editor.content.ContentElement $r4, r13, $r14;
        java.lang.String $r16;
        boolean z0, $z1;
        org.waveprotocol.wave.client.editor.content.ContentView $r2;
        java.util.Iterator $r11;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.model.document.util.Property $r5;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r10, $r15;
        com.google.gwt.dom.client.Element $r1;
        java.lang.Object $r3, $r12;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Element getDocumentHtmlElement()>();

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentView full()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getDocumentElement()>();

        $r4 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r3;

        $r5 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.document.util.Property DOCUMENT_MODE>;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentElement: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r5, $r6);

        virtualinvoke $r1.<com.google.gwt.dom.client.Element: void removeClassName(java.lang.String)>("wave-editor-on");

        virtualinvoke $r1.<com.google.gwt.dom.client.Element: void removeClassName(java.lang.String)>("wave-editor-off");

        if z0 == 0 goto label1;

        $r16 = "wave-editor-on";

        goto label2;

     label1:
        $r16 = "wave-editor-off";

     label2:
        virtualinvoke $r1.<com.google.gwt.dom.client.Element: void addClassName(java.lang.String)>($r16);

        $r7 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ClientDocumentContext getContext()>();

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $i0 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.CMutableDocument: int size()>();

        staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: void maybeScheduleRepaint(org.waveprotocol.wave.model.document.util.DocumentContext,int,int)>($r8, 0, $i0);

        staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: com.google.gwt.dom.client.Element setContentEditable(com.google.gwt.dom.client.Element,boolean,boolean)>($r1, z0, 1);

        $r10 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet elementsWithDisplayEditModes>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r12;

        $r14 = virtualinvoke r13.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r14 == null goto label4;

        staticinvoke <org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler: void onEditModeChange(org.waveprotocol.wave.client.editor.content.ContentNode,boolean)>(r13, z0);

        goto label5;

     label4:
        $r15 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet elementsWithDisplayEditModes>;

        virtualinvoke $r15.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r13);

     label5:
        goto label3;

     label6:
        return;
    }

    private void maybeSaveAncestorScrollPositions(com.google.gwt.dom.client.Element)
    {
        org.waveprotocol.wave.model.util.IdentityMap $r1, $r2;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        int $i0;
        com.google.gwt.dom.client.Element r4;
        java.lang.Integer $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r4 := @parameter0: com.google.gwt.dom.client.Element;

        $z0 = <org.waveprotocol.wave.client.common.util.QuirksConstants: boolean ADJUSTS_SCROLL_TOP_WHEN_FOCUSING>;

        if $z0 == 0 goto label2;

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.IdentityMap createIdentityMap()>();

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.util.IdentityMap ancestorScrollTops> = $r1;

     label1:
        if r4 == null goto label2;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.util.IdentityMap ancestorScrollTops>;

        $i0 = virtualinvoke r4.<com.google.gwt.dom.client.Element: int getScrollTop()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.IdentityMap: void put(java.lang.Object,java.lang.Object)>(r4, $r3);

        r4 = virtualinvoke r4.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Element getParentElement()>();

        goto label1;

     label2:
        return;
    }

    private void maybeRestoreAncestorScrollPositions(com.google.gwt.dom.client.Element)
    {
        org.waveprotocol.wave.model.util.IdentityMap $r1, $r3;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        com.google.gwt.dom.client.Element r4;
        org.waveprotocol.wave.client.editor.EditorImpl$15 $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r4 := @parameter0: com.google.gwt.dom.client.Element;

        $z0 = <org.waveprotocol.wave.client.common.util.QuirksConstants: boolean ADJUSTS_SCROLL_TOP_WHEN_FOCUSING>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.util.IdentityMap ancestorScrollTops>;

        if $r1 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.util.IdentityMap ancestorScrollTops>;

        $r2 = new org.waveprotocol.wave.client.editor.EditorImpl$15;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.EditorImpl$15: void <init>(org.waveprotocol.wave.client.editor.EditorImpl)>(r0);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.IdentityMap: void each(org.waveprotocol.wave.model.util.IdentityMap$ProcV)>($r2);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.util.IdentityMap ancestorScrollTops> = null;

     label1:
        return;
    }

    public void focus(boolean)
    {
        com.google.gwt.user.client.Element $r5;
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r2;
        org.waveprotocol.wave.common.logging.Logger $r8, $r10;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper $r6;
        org.waveprotocol.wave.common.logging.LoggerBundle $r7, $r9;
        com.google.gwt.dom.client.Element $r3;
        com.google.gwt.user.client.ui.impl.FocusImpl $r4;
        boolean $z0, $z1, z2;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        z2 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isAttached()>();

        if $z0 != 0 goto label1;

        $r9 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r10.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Shouldn\'t focus a detached editor");

        return;

     label1:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isEditing()>();

        if $z1 == 0 goto label4;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        if $r1 == null goto label4;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.FocusedPointRange getHtmlSelection()>();

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Element getDocumentHtmlElement()>();

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void maybeSaveAncestorScrollPositions(com.google.gwt.dom.client.Element)>($r3);

        $r4 = staticinvoke <com.google.gwt.user.client.ui.impl.FocusImpl: com.google.gwt.user.client.ui.impl.FocusImpl getFocusImplForWidget()>();

        $r5 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: com.google.gwt.user.client.Element castToOld(com.google.gwt.dom.client.Element)>($r3);

        virtualinvoke $r4.<com.google.gwt.user.client.ui.impl.FocusImpl: void focus(com.google.gwt.user.client.Element)>($r5);

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void maybeRestoreAncestorScrollPositions(com.google.gwt.dom.client.Element)>($r3);

        if $r2 == null goto label3;

        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void set(org.waveprotocol.wave.model.document.util.FocusedPointRange)>($r2);

        if z2 != 0 goto label2;

        return;

     label2:
        $r7 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r8.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Saving...");

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void doSaveSelection()>();

     label3:
        $r6 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper aggressiveSelectionHelper>;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void safelyRestoreSelection(org.waveprotocol.wave.client.editor.selection.content.SelectionHelper,boolean)>($r6, z2);

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void scheduleUpdateNotification(boolean,boolean,boolean,boolean)>(1, 1, 0, 0);

     label4:
        return;
    }

    public boolean hasDocument()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.google.gwt.dom.client.Element getDocumentHtmlElement()
    {
        org.waveprotocol.wave.client.editor.content.ContentView $r2;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        java.lang.AssertionError $r7;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1, $r6;
        com.google.gwt.dom.client.Element $r5;
        java.lang.Object $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $z0 = <org.waveprotocol.wave.client.editor.EditorImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r6 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        if $r6 != null goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("getDocumentHtmlElement: content is null");

        throw $r7;

     label1:
        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentView getFullContentView()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getDocumentElement()>();

        $r4 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r3;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        return $r5;
    }

    private void safelyRestoreSelection(org.waveprotocol.wave.client.editor.selection.content.SelectionHelper, boolean)
    {
        org.waveprotocol.wave.common.logging.Logger $r4, $r8;
        java.lang.AssertionError $r15;
        org.waveprotocol.wave.model.document.util.RangeTracker $r1, $r14;
        org.waveprotocol.wave.model.document.util.FocusedRange $r2;
        int $i0, $i1;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper r5;
        java.lang.String $r12;
        org.waveprotocol.wave.model.document.util.Point $r6;
        boolean $z0, z1, z2, $z3;
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r13;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3, $r7;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r5 := @parameter0: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper;

        z1 := @parameter1: boolean;

        $z0 = <org.waveprotocol.wave.client.editor.EditorImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r14 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.RangeTracker savedSelection>;

        if $r14 != null goto label1;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label1:
        z2 = 0;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.RangeTracker savedSelection>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.RangeTracker: org.waveprotocol.wave.model.document.util.FocusedRange getFocusedRange()>();

        if $r2 == null goto label6;

        $r7 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Focusing, set selection at: ");

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.FocusedRange: int getFocus()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r12);

        if z1 == 0 goto label2;

        $i1 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.FocusedRange: int getFocus()>();

        interfaceinvoke r5.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setCaret(int)>($i1);

        goto label3;

     label2:
        interfaceinvoke r5.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setSelectionRange(org.waveprotocol.wave.model.document.util.FocusedRange)>($r2);

     label3:
        $r13 = interfaceinvoke r5.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.client.editor.content.FocusedContentRange getSelectionPoints()>();

        if $r13 == null goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        z2 = $z3;

     label6:
        if z2 != 0 goto label7;

        $r3 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Focusing at last valid point as a catch-all");

        $r6 = interfaceinvoke r5.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.model.document.util.Point getLastValidSelectionPoint()>();

        interfaceinvoke r5.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r6);

     label7:
        return;
    }

    public void blur()
    {
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r2;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        com.google.gwt.dom.client.Element $r3;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        if $r1 == null goto label2;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void flushSynchronous()>();

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.model.document.util.FocusedPointRange get()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Element getDocumentHtmlElement()>();

        staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: void blur(com.google.gwt.dom.client.Element)>($r3);

        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void clear()>();

     label1:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void scheduleUpdateNotification(boolean,boolean,boolean,boolean)>(0, 1, 0, 0);

     label2:
        return;
    }

    private void doSaveSelection()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        java.lang.AssertionError $r6;
        org.waveprotocol.wave.model.document.util.RangeTracker $r4, $r5;
        org.waveprotocol.wave.model.document.util.FocusedRange $r3;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper $r1, $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper passiveSelectionHelper>;

        if $r1 == null goto label2;

        $z0 = <org.waveprotocol.wave.client.editor.EditorImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r5 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.RangeTracker savedSelection>;

        if $r5 != null goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper passiveSelectionHelper>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()>();

        if $r3 == null goto label2;

        $r4 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.RangeTracker savedSelection>;

        virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.RangeTracker: void trackRange(org.waveprotocol.wave.model.document.util.FocusedRange)>($r3);

     label2:
        return;
    }

    public void flushSaveSelection()
    {
        org.waveprotocol.wave.client.scheduler.TimerService $r1;
        org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable $r3;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.client.scheduler.Scheduler$Task $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void doSaveSelection()>();

        $r1 = staticinvoke <org.waveprotocol.wave.client.scheduler.SchedulerInstance: org.waveprotocol.wave.client.scheduler.TimerService getHighPriorityTimer()>();

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.scheduler.Scheduler$Task selectionSavingTask>;

        $r3 = (org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable) $r2;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.scheduler.TimerService: void cancel(org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable)>($r3);

        return;
    }

    private void scheduleSaveSelection()
    {
        org.waveprotocol.wave.client.scheduler.TimerService $r0;
        org.waveprotocol.wave.client.editor.EditorImpl r1;
        org.waveprotocol.wave.client.scheduler.Scheduler$Task $r2;

        r1 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r0 = staticinvoke <org.waveprotocol.wave.client.scheduler.SchedulerInstance: org.waveprotocol.wave.client.scheduler.TimerService getHighPriorityTimer()>();

        $r2 = r1.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.scheduler.Scheduler$Task selectionSavingTask>;

        interfaceinvoke $r0.<org.waveprotocol.wave.client.scheduler.TimerService: void schedule(org.waveprotocol.wave.client.scheduler.Scheduler$Task)>($r2);

        return;
    }

    public org.waveprotocol.wave.model.document.util.FocusedPointRange getHtmlSelection()
    {
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r2;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean hasDocument()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper htmlSelectionHelper>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper: org.waveprotocol.wave.model.document.util.FocusedPointRange getHtmlSelection()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public org.waveprotocol.wave.model.document.util.PointRange getOrderedHtmlSelection()
    {
        org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper $r1;
        org.waveprotocol.wave.model.document.util.PointRange $r2;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper htmlSelectionHelper>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper: org.waveprotocol.wave.model.document.util.PointRange getOrderedHtmlSelection()>();

        return $r2;
    }

    protected boolean isTargetEditableInDisplayMode(org.waveprotocol.wave.client.common.util.SignalEvent)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r2;
        com.google.gwt.dom.client.Element $r1, r3;
        org.waveprotocol.wave.client.common.util.SignalEvent r0;
        com.google.gwt.dom.client.Node $r4;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r0 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: com.google.gwt.dom.client.Element getTarget()>();

        r3 = $r1;

        $r4 = (com.google.gwt.dom.client.Node) $r1;

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r4);

        if $z0 == 0 goto label1;

        r3 = virtualinvoke $r1.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Element getParentElement()>();

     label1:
        $z1 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isEditable(com.google.gwt.dom.client.Element)>(r3);

        return $z1;
    }

    protected boolean editorRelevantEvent(org.waveprotocol.wave.client.common.util.SignalEvent)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.client.common.util.SignalEvent r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isEditing()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isTargetEditableInDisplayMode(org.waveprotocol.wave.client.common.util.SignalEvent)>(r1);

        if $z1 != 0 goto label1;

        $z2 = interfaceinvoke r1.<org.waveprotocol.wave.client.common.util.SignalEvent: boolean isCopyEvent()>();

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public void onJavaScriptEvent(java.lang.String, com.google.gwt.user.client.Event)
    {
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r45;
        org.waveprotocol.wave.client.scheduler.TimerService $r10, $r12;
        com.google.gwt.core.client.JavaScriptException $r74, $r75, $r76;
        org.waveprotocol.wave.client.common.util.SignalEventImpl $r3;
        org.waveprotocol.wave.client.editor.content.ContentView $r48, $r68;
        com.google.gwt.dom.client.Element $r53;
        java.lang.StringBuilder $r25, $r27, $r36, $r37, $r59, $r60, $r79, $r83, $r84;
        java.lang.Throwable $r30, $r31, $r71, $r72;
        org.waveprotocol.wave.common.logging.Logger $r16, $r21, $r23, $r34, $r57, $r65;
        java.lang.AssertionError $r54, $r82;
        org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable $r87;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler $r8, $r18;
        com.google.gwt.core.client.Duration r77, $r80, $r81;
        org.waveprotocol.wave.client.editor.content.ContentElement $r50, $r70, $r78;
        java.lang.String r0, $r26, $r28, $r38, $r61;
        org.waveprotocol.wave.client.editor.EditorImpl r4;
        org.waveprotocol.wave.client.editor.extract.RepairListener $r44;
        java.lang.RuntimeException $r32;
        org.waveprotocol.wave.client.editor.event.EditorEvent $r29;
        org.waveprotocol.wave.model.operation.OperationRuntimeException $r63;
        org.waveprotocol.wave.client.editor.content.ContentNode $r41;
        com.google.gwt.core.client.GWT$UncaughtExceptionHandler $r66;
        com.google.gwt.user.client.Event r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r46;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z17, $z18, z19, $z20, $z21;
        org.waveprotocol.wave.model.document.util.Point$El $r42, $r43;
        org.waveprotocol.wave.common.logging.LoggerBundle $r15, $r20, $r22, $r33, $r56, $r64;
        org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException $r55;
        org.waveprotocol.wave.client.editor.Responsibility$Manager $r5, $r9, $r73;
        org.waveprotocol.wave.client.editor.EditorSettings $r6;
        com.google.gwt.dom.client.EventTarget $r39, $r52;
        org.waveprotocol.wave.client.scheduler.Scheduler$Task $r11, $r13, $r14;
        org.waveprotocol.wave.client.common.util.SignalEventImpl$SignalEventFactory $r2;
        int $i0, $i1;
        org.waveprotocol.wave.client.editor.extract.Repairer $r40, $r47, $r67;
        double d0;
        com.google.gwt.core.client.JavaScriptObject $r85, $r86;
        org.waveprotocol.wave.client.editor.EditorInstrumentor $r7;
        java.lang.Object $r49, $r69;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r51;

        r4 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.google.gwt.user.client.Event;

        d0 = 0.0;

        r77 = null;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("contextmenu");

        if $z0 != 0 goto label01;

        $z12 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("click");

        if $z12 != 0 goto label01;

        $z13 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("mousedown");

        if $z13 == 0 goto label02;

     label01:
        $z21 = 1;

        $z20 = 1;

        goto label03;

     label02:
        $z21 = 0;

        $z20 = 0;

     label03:
        z1 = $z21;

     label04:
        $r2 = <org.waveprotocol.wave.client.editor.event.EditorEventImpl: org.waveprotocol.wave.client.common.util.SignalEventImpl$SignalEventFactory FACTORY>;

        if $z20 != 0 goto label05;

        $z17 = 1;

        goto label06;

     label05:
        $z17 = 0;

     label06:
        $r3 = staticinvoke <org.waveprotocol.wave.client.common.util.SignalEventImpl: org.waveprotocol.wave.client.common.util.SignalEventImpl create(org.waveprotocol.wave.client.common.util.SignalEventImpl$SignalEventFactory,com.google.gwt.user.client.Event,boolean)>($r2, r1, $z17);

        $r29 = (org.waveprotocol.wave.client.editor.event.EditorEvent) $r3;

     label07:
        $z2 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isMac()>();

        if $z2 == 0 goto label08;

        $z10 = virtualinvoke r1.<com.google.gwt.user.client.Event: boolean getCtrlKey()>();

        if $z10 == 0 goto label08;

        $z11 = virtualinvoke r1.<com.google.gwt.user.client.Event: boolean getAltKey()>();

        if $z11 == 0 goto label08;

        $i1 = virtualinvoke r1.<com.google.gwt.user.client.Event: int getTypeInt()>();

        if $i1 != 256 goto label08;

        $r22 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r23 = interfaceinvoke $r22.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cancelling dangerous: ");

        $r26 = virtualinvoke r1.<com.google.gwt.user.client.Event: java.lang.String getType()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r28);

        virtualinvoke r1.<com.google.gwt.user.client.Event: void preventDefault()>();

     label08:
        goto label10;

     label09:
        $r76 := @caughtexception;

     label10:
        if $r29 != null goto label15;

        if z1 != 0 goto label14;

     label11:
        virtualinvoke r1.<com.google.gwt.user.client.Event: void stopPropagation()>();

     label12:
        goto label14;

     label13:
        $r75 := @caughtexception;

     label14:
        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void cacheOff()>();

        return;

     label15:
        if z1 != 0 goto label20;

        $z9 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.EditorImpl: boolean editorRelevantEvent(org.waveprotocol.wave.client.common.util.SignalEvent)>($r29);

        if $z9 == 0 goto label19;

     label16:
        interfaceinvoke $r29.<org.waveprotocol.wave.client.editor.event.EditorEvent: void stopPropagation()>();

     label17:
        goto label20;

     label18:
        $r74 := @caughtexception;

        goto label20;

     label19:
        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void cacheOff()>();

        return;

     label20:
        $z18 = interfaceinvoke $r29.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isMutationEvent()>();

        if $z18 == 0 goto label21;

        $z8 = staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: boolean shouldIgnoreMutations()>();

        if $z8 != 0 goto label35;

     label21:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label22:
        $z3 = r4.<org.waveprotocol.wave.client.editor.EditorImpl: boolean debugDisabled>;

        if $z3 == 0 goto label23;

        z19 = 0;

        goto label31;

     label23:
        $z4 = specialinvoke r4.<org.waveprotocol.wave.client.editor.EditorImpl: boolean canHandleBrowserEvents()>();

        if $z4 != 0 goto label24;

        $r20 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r21 = interfaceinvoke $r20.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r21.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String,java.lang.Object)>("Too busy to handle: ", $r29);

        z19 = 1;

        goto label31;

     label24:
        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void cacheOn()>();

        $r5 = r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager responsibility>;

        interfaceinvoke $r5.<org.waveprotocol.wave.client.editor.Responsibility$Manager: void startDirectSequence()>();

     label25:
        $r6 = r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings settings>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorInstrumentor getInstrumentor()>();

        $z5 = interfaceinvoke $r7.<org.waveprotocol.wave.client.editor.EditorInstrumentor: boolean shouldInstrument(org.waveprotocol.wave.client.common.util.SignalEvent)>($r29);

        if $z5 == 0 goto label26;

        $r80 = new com.google.gwt.core.client.Duration;

        specialinvoke $r80.<com.google.gwt.core.client.Duration: void <init>()>();

        $r18 = r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.event.EditorEventHandler eventHandler>;

        z19 = virtualinvoke $r18.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean handleEvent(org.waveprotocol.wave.client.editor.event.EditorEvent)>($r29);

        $i0 = virtualinvoke $r80.<com.google.gwt.core.client.Duration: int elapsedMillis()>();

        d0 = (double) $i0;

        $r81 = new com.google.gwt.core.client.Duration;

        specialinvoke $r81.<com.google.gwt.core.client.Duration: void <init>()>();

        r77 = $r81;

        goto label27;

     label26:
        $r8 = r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.event.EditorEventHandler eventHandler>;

        z19 = virtualinvoke $r8.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean handleEvent(org.waveprotocol.wave.client.editor.event.EditorEvent)>($r29);

     label27:
        $r9 = r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager responsibility>;

        interfaceinvoke $r9.<org.waveprotocol.wave.client.editor.Responsibility$Manager: void endDirectSequence()>();

        goto label30;

     label28:
        $r72 := @caughtexception;

     label29:
        $r73 = r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager responsibility>;

        interfaceinvoke $r73.<org.waveprotocol.wave.client.editor.Responsibility$Manager: void endDirectSequence()>();

        throw $r72;

     label30:
        if $z18 != 0 goto label31;

        $z7 = specialinvoke r4.<org.waveprotocol.wave.client.editor.EditorImpl: boolean shouldTrackCursor(org.waveprotocol.wave.client.common.util.SignalEvent)>($r29);

        specialinvoke r4.<org.waveprotocol.wave.client.editor.EditorImpl: void scheduleSaveSelection()>();

        specialinvoke r4.<org.waveprotocol.wave.client.editor.EditorImpl: void scheduleUpdateNotification(boolean,boolean,boolean,boolean)>($z7, $z7, 0, 0);

     label31:
        if z19 == 0 goto label32;

        if $z18 != 0 goto label32;

        $r15 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r16 = interfaceinvoke $r15.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r16.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String,java.lang.Object)>("Prevent default: ", $r29);

        virtualinvoke r1.<com.google.gwt.user.client.Event: void preventDefault()>();

        virtualinvoke r4.<org.waveprotocol.wave.client.editor.EditorImpl: void debugCheckHealth()>();

     label32:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        goto label35;

     label33:
        $r71 := @caughtexception;

     label34:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r71;

     label35:
        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void cacheOff()>();

        goto label54;

     label36:
        $r63 := @caughtexception;

        $r64 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r65 = interfaceinvoke $r64.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r65.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Operation Exception - probably an invalid operation -> All bets are off!!! Not even going to try to repair!!");

        $r66 = staticinvoke <com.google.gwt.core.client.GWT: com.google.gwt.core.client.GWT$UncaughtExceptionHandler getUncaughtExceptionHandler()>();

        interfaceinvoke $r66.<com.google.gwt.core.client.GWT$UncaughtExceptionHandler: void onUncaughtException(java.lang.Throwable)>($r63);

        $r67 = r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.Repairer repairer>;

        $r68 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentView full()>();

        $r69 = interfaceinvoke $r68.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getDocumentElement()>();

        $r70 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r69;

        virtualinvoke $r67.<org.waveprotocol.wave.client.editor.extract.Repairer: void showDeath(org.waveprotocol.wave.client.editor.content.ContentElement)>($r70);

        virtualinvoke r1.<com.google.gwt.user.client.Event: void preventDefault()>();

        throw $r63;

     label37:
        $r55 := @caughtexception;

     label38:
        $z15 = <org.waveprotocol.wave.client.editor.EditorImpl: boolean $assertionsDisabled>;

        if $z15 != 0 goto label39;

        $r82 = new java.lang.AssertionError;

        specialinvoke $r82.<java.lang.AssertionError: void <init>()>();

        throw $r82;

     label39:
        $r56 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r57 = interfaceinvoke $r56.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid local operation swallowed ");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r55);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r57.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>($r61);

     label40:
        goto label42;

     label41:
        $r54 := @caughtexception;

        throw $r55;

     label42:
        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void cacheOff()>();

        goto label54;

     label43:
        $r32 := @caughtexception;

     label44:
        $r33 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r34 = interfaceinvoke $r33.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Repairing: ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r34.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r38);

        $r39 = virtualinvoke r1.<com.google.gwt.user.client.Event: com.google.gwt.dom.client.EventTarget getEventTarget()>();

        $r85 = (com.google.gwt.core.client.JavaScriptObject) $r39;

        $z14 = staticinvoke <com.google.gwt.dom.client.Element: boolean is(com.google.gwt.core.client.JavaScriptObject)>($r85);

        if $z14 == 0 goto label45;

        $r51 = r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager>;

        $r52 = virtualinvoke r1.<com.google.gwt.user.client.Event: com.google.gwt.dom.client.EventTarget getEventTarget()>();

        $r86 = (com.google.gwt.core.client.JavaScriptObject) $r52;

        $r53 = staticinvoke <com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Element as(com.google.gwt.core.client.JavaScriptObject)>($r86);

        $r78 = virtualinvoke $r51.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentElement findElementWrapper(com.google.gwt.dom.client.Element)>($r53);

        goto label46;

     label45:
        $r78 = null;

     label46:
        if $r78 != null goto label47;

        $r44 = r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.RepairListener repairListener>;

        $r45 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        interfaceinvoke $r44.<org.waveprotocol.wave.client.editor.extract.RepairListener: void onFullDocumentRevert(org.waveprotocol.wave.model.document.ReadableDocument)>($r45);

        $r46 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument removeContent()>();

        virtualinvoke $r46.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setShelved()>();

        virtualinvoke r4.<org.waveprotocol.wave.client.editor.EditorImpl: void setContent(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r46);

        $r47 = r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.Repairer repairer>;

        $r48 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentView full()>();

        $r49 = interfaceinvoke $r48.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getDocumentElement()>();

        $r50 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r49;

        virtualinvoke $r47.<org.waveprotocol.wave.client.editor.extract.Repairer: void flashShowRepair(org.waveprotocol.wave.client.editor.content.ContentElement)>($r50);

        goto label48;

     label47:
        $r40 = r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.Repairer repairer>;

        $r41 = virtualinvoke $r78.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

        $r42 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r78, $r41);

        $r43 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r78, null);

        virtualinvoke $r40.<org.waveprotocol.wave.client.editor.extract.Repairer: void revert(org.waveprotocol.wave.model.document.util.Point$El,org.waveprotocol.wave.model.document.util.Point$El)>($r42, $r43);

     label48:
        virtualinvoke r1.<com.google.gwt.user.client.Event: void preventDefault()>();

     label49:
        throw $r32;

     label50:
        $r31 := @caughtexception;

     label51:
        throw $r32;

     label52:
        $r30 := @caughtexception;

     label53:
        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void cacheOff()>();

        throw $r30;

     label54:
        if r77 == null goto label56;

        $r10 = staticinvoke <org.waveprotocol.wave.client.scheduler.SchedulerInstance: org.waveprotocol.wave.client.scheduler.TimerService getHighPriorityTimer()>();

        $r11 = r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.scheduler.Scheduler$Task instrumentationTask>;

        $r87 = (org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable) $r11;

        $z6 = interfaceinvoke $r10.<org.waveprotocol.wave.client.scheduler.TimerService: boolean isScheduled(org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable)>($r87);

        if $z6 == 0 goto label55;

        $r14 = r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.scheduler.Scheduler$Task instrumentationTask>;

        interfaceinvoke $r14.<org.waveprotocol.wave.client.scheduler.Scheduler$Task: void execute()>();

     label55:
        r4.<org.waveprotocol.wave.client.editor.EditorImpl: double processKeyPressTimer> = d0;

        r4.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.core.client.Duration postKeyPressTimer> = r77;

        $r12 = staticinvoke <org.waveprotocol.wave.client.scheduler.SchedulerInstance: org.waveprotocol.wave.client.scheduler.TimerService getHighPriorityTimer()>();

        $r13 = r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.scheduler.Scheduler$Task instrumentationTask>;

        interfaceinvoke $r12.<org.waveprotocol.wave.client.scheduler.TimerService: void schedule(org.waveprotocol.wave.client.scheduler.Scheduler$Task)>($r13);

     label56:
        return;

        catch com.google.gwt.core.client.JavaScriptException from label07 to label08 with label09;
        catch com.google.gwt.core.client.JavaScriptException from label11 to label12 with label13;
        catch com.google.gwt.core.client.JavaScriptException from label16 to label17 with label18;
        catch java.lang.Throwable from label25 to label27 with label28;
        catch java.lang.Throwable from label28 to label29 with label28;
        catch java.lang.Throwable from label22 to label32 with label33;
        catch java.lang.Throwable from label33 to label34 with label33;
        catch org.waveprotocol.wave.model.operation.OperationRuntimeException from label04 to label14 with label36;
        catch org.waveprotocol.wave.model.operation.OperationRuntimeException from label15 to label19 with label36;
        catch org.waveprotocol.wave.model.operation.OperationRuntimeException from label20 to label35 with label36;
        catch org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException from label04 to label14 with label37;
        catch org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException from label15 to label19 with label37;
        catch org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException from label20 to label35 with label37;
        catch java.lang.AssertionError from label38 to label40 with label41;
        catch java.lang.RuntimeException from label04 to label14 with label43;
        catch java.lang.RuntimeException from label15 to label19 with label43;
        catch java.lang.RuntimeException from label20 to label35 with label43;
        catch java.lang.Throwable from label44 to label49 with label50;
        catch java.lang.Throwable from label50 to label51 with label50;
        catch java.lang.Throwable from label04 to label14 with label52;
        catch java.lang.Throwable from label15 to label19 with label52;
        catch java.lang.Throwable from label20 to label35 with label52;
        catch java.lang.Throwable from label36 to label42 with label52;
        catch java.lang.Throwable from label43 to label53 with label52;
    }

    private boolean shouldTrackCursor(org.waveprotocol.wave.client.common.util.SignalEvent)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r5;
        org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType $r1, $r2, $r3, $r4;
        int $i0;
        org.waveprotocol.wave.client.common.util.SignalEvent r0;
        boolean $z0, $z1, $z2;

        r5 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r0 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        $z0 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: boolean isMouseButtonEvent()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: boolean isKeyEvent()>();

        if $z1 == 0 goto label5;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType getKeySignalType()>();

        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: int getKeyCode()>();

        $r2 = <org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType: org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType INPUT>;

        if $r1 == $r2 goto label2;

        $r3 = <org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType: org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType DELETE>;

        if $r1 == $r3 goto label2;

        $r4 = <org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType: org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType NAVIGATION>;

        if $r1 != $r4 goto label3;

        if $i0 == 34 goto label3;

        if $i0 == 33 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;

     label5:
        return 0;
    }

    private boolean fireKeyboardEvent(org.waveprotocol.wave.client.common.util.SignalEvent)
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.client.common.util.KeySignalListener r5;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        java.util.Set $r1, $r2;
        com.google.gwt.user.client.ui.Widget $r7;
        java.lang.Object $r4;
        org.waveprotocol.wave.client.common.util.SignalEvent r6;
        boolean $z0, $z1, z2, $z3;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r6 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        z2 = 0;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: java.util.Set keySignalListeners>;

        if $r1 == null goto label5;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: java.util.Set keySignalListeners>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.client.common.util.KeySignalListener) $r4;

        $r7 = (com.google.gwt.user.client.ui.Widget) r0;

        $z1 = interfaceinvoke r5.<org.waveprotocol.wave.client.common.util.KeySignalListener: boolean onKeySignal(com.google.gwt.user.client.ui.Widget,org.waveprotocol.wave.client.common.util.SignalEvent)>($r7, r6);

        if $z1 != 0 goto label2;

        if z2 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        z2 = $z3;

        goto label1;

     label5:
        return z2;
    }

    public void debugSetDisabled(boolean)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        z0 := @parameter0: boolean;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean debugDisabled> = z0;

        return;
    }

    public boolean debugIsDisabled()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean debugDisabled>;

        return $z0;
    }

    public org.waveprotocol.wave.client.editor.EditorUpdateEventImpl debugGetUpdateEventImpl()
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl updateEvent>;

        return $r1;
    }

    private boolean isPasting()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.client.editor.extract.PasteExtractor $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.PasteExtractor pasteExtractor>;

        if $r1 == null goto label1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.PasteExtractor pasteExtractor>;

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean isBusy()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean isTyping()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        java.lang.AssertionError $r6;
        org.waveprotocol.wave.client.editor.extract.DomMutationReverter $r3, $r5;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r1, $r2, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $z0 = <org.waveprotocol.wave.client.editor.EditorImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        $r4 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.TypingExtractor typing>;

        if $r4 != null goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        $r5 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.DomMutationReverter domMutationReverter>;

        if $r5 != null goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        if $z3 == $z4 goto label5;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label5:
        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.TypingExtractor typing>;

        if $r1 == null goto label7;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.TypingExtractor typing>;

        $z1 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: boolean isBusy()>();

        if $z1 != 0 goto label6;

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.DomMutationReverter domMutationReverter>;

        $z2 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.extract.DomMutationReverter: boolean hasPendingReverts()>();

        if $z2 == 0 goto label7;

     label6:
        $z5 = 1;

        goto label8;

     label7:
        $z5 = 0;

     label8:
        return $z5;
    }

    private boolean isHandlingNonblockingEvent()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isTyping()>();

        return $z0;
    }

    private boolean isHandlingBlockingEvent()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isPasting()>();

        return $z0;
    }

    private boolean isConsistentWithEventHistory()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isHandlingBlockingEvent()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isHandlingNonblockingEvent()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private boolean isConsistentWithOutgoingOperationStream()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        return 1;
    }

    public boolean isConsistent()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        if $r1 != null goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isConsistentWithEventHistory()>();

        if $z0 == 0 goto label2;

        $z1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isConsistentWithOutgoingOperationStream()>();

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private boolean canHandleBrowserEvents()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isHandlingBlockingEvent()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean canApplyIncomingOperations()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean permitOperations>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isConsistent()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private org.waveprotocol.wave.client.widget.popup.UniversalPopup getDebugDialog()
    {
        org.waveprotocol.wave.client.widget.popup.UniversalPopup $r1, $r2, $r3;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.widget.popup.UniversalPopup debugPopup>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.debug.DebugPopupFactory: org.waveprotocol.wave.client.widget.popup.UniversalPopup create(org.waveprotocol.wave.client.editor.EditorImpl)>(r0);

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.widget.popup.UniversalPopup debugPopup> = $r3;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.widget.popup.UniversalPopup debugPopup>;

        return $r2;
    }

    public void debugToggleDebugDialog()
    {
        org.waveprotocol.wave.client.widget.popup.UniversalPopup $r2;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.client.editor.EditorSettings $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings settings>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorSettings: boolean hasDebugDialog()>();

        if $z0 == 0 goto label2;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.widget.popup.UniversalPopup getDebugDialog()>();

        $z1 = interfaceinvoke $r2.<org.waveprotocol.wave.client.widget.popup.UniversalPopup: boolean isShowing()>();

        if $z1 == 0 goto label1;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.widget.popup.UniversalPopup: void hide()>();

        goto label2;

     label1:
        interfaceinvoke $r2.<org.waveprotocol.wave.client.widget.popup.UniversalPopup: void show()>();

     label2:
        return;
    }

    private void notifyTypingExtractor(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted $r3;
        org.waveprotocol.wave.client.editor.EditorImpl r1;
        org.waveprotocol.wave.client.editor.extract.Repairer $r4, $r6;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing $r5;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r2;
        org.waveprotocol.wave.model.document.util.Point r0;

        r1 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Notifying typing extractor with invalid selection");

     label1:
        $r2 = r1.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.TypingExtractor typing>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: void somethingHappened(org.waveprotocol.wave.model.document.util.Point)>(r0);

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        $r6 = r1.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.Repairer repairer>;

        virtualinvoke $r6.<org.waveprotocol.wave.client.editor.extract.Repairer: void handleMissing(org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing)>($r5);

        goto label5;

     label4:
        $r3 := @caughtexception;

        $r4 = r1.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.Repairer repairer>;

        virtualinvoke $r4.<org.waveprotocol.wave.client.editor.extract.Repairer: void handleInserted(org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted)>($r3);

     label5:
        return;

        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing from label1 to label2 with label3;
        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted from label1 to label2 with label4;
    }

    public void addKeySignalListener(org.waveprotocol.wave.client.common.util.KeySignalListener)
    {
        java.util.HashSet $r4;
        org.waveprotocol.wave.client.common.util.KeySignalListener r2;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        java.util.Set $r1, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r2 := @parameter0: org.waveprotocol.wave.client.common.util.KeySignalListener;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: java.util.Set keySignalListeners>;

        if $r1 != null goto label1;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: java.util.Set keySignalListeners> = $r4;

     label1:
        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: java.util.Set keySignalListeners>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void removeKeySignalListener(org.waveprotocol.wave.client.common.util.KeySignalListener)
    {
        org.waveprotocol.wave.client.common.util.KeySignalListener r2;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        java.util.Set $r1, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r2 := @parameter0: org.waveprotocol.wave.client.common.util.KeySignalListener;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: java.util.Set keySignalListeners>;

        if $r1 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: java.util.Set keySignalListeners>;

        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r2);

     label1:
        return;
    }

    private void onIncomingOp(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        java.lang.Throwable $r7;
        java.lang.IllegalStateException $r6;
        java.lang.Object[] $r2;
        org.waveprotocol.wave.client.editor.EditorUndoManager $r5;
        org.waveprotocol.wave.common.logging.Logger $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r4;
        org.waveprotocol.wave.model.document.operation.DocOp r3;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;
        boolean $z0;

        r4 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        $r0 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = "Incoming operation";

        $r2[1] = r3;

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void logLazyObjects(java.lang.Object[])>($r2);

        $z0 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.EditorImpl: boolean hasDocument()>();

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot apply op to uninitialized editor");

        throw $r6;

     label1:
        $r5 = r4.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUndoManager editorUndoManager>;

        interfaceinvoke $r5.<org.waveprotocol.wave.client.editor.EditorUndoManager: void nonUndoableOp(org.waveprotocol.wave.model.document.operation.DocOp)>(r3);

        virtualinvoke r4.<org.waveprotocol.wave.client.editor.EditorImpl: void debugCheckHealth()>();

     label2:
        specialinvoke r4.<org.waveprotocol.wave.client.editor.EditorImpl: void scheduleUpdateNotification(boolean,boolean,boolean,boolean)>(0, 0, 1, 0);

        goto label5;

     label3:
        $r7 := @caughtexception;

     label4:
        specialinvoke r4.<org.waveprotocol.wave.client.editor.EditorImpl: void scheduleUpdateNotification(boolean,boolean,boolean,boolean)>(0, 0, 1, 0);

        throw $r7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.waveprotocol.wave.model.document.operation.DocInitialization getDocumentInitialization()
    {
        org.waveprotocol.wave.model.document.operation.DocInitialization $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        return $r2;
    }

    private void debugAssertHealthy()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        java.lang.AssertionError $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $z0 = <org.waveprotocol.wave.client.editor.EditorImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $z1 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean debugCheckHealthy2()>();

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    void debugCheckHealth()
    {
        java.lang.Throwable $r1;
        com.google.gwt.core.client.GWT$UncaughtExceptionHandler $r2;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.client.debug.logger.LogLevel: boolean showErrors()>();

        if $z0 == 0 goto label4;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void debugAssertHealthy()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = staticinvoke <com.google.gwt.core.client.GWT: com.google.gwt.core.client.GWT$UncaughtExceptionHandler getUncaughtExceptionHandler()>();

        interfaceinvoke $r2.<com.google.gwt.core.client.GWT$UncaughtExceptionHandler: void onUncaughtException(java.lang.Throwable)>($r1);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void onAttach()
    {
        com.google.gwt.dom.client.Element $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        specialinvoke r0.<org.waveprotocol.wave.client.common.util.LogicalPanel$Impl: void onAttach()>();

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Element div>;

        staticinvoke <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: void register(org.waveprotocol.wave.client.editor.Editor,com.google.gwt.dom.client.Element)>(r0, $r1);

        return;
    }

    protected void onDetach()
    {
        com.google.gwt.dom.client.Element $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Element div>;

        staticinvoke <org.waveprotocol.wave.client.editor.webdriver.EditorWebDriverUtil: void unregister(com.google.gwt.dom.client.Element)>($r1);

        specialinvoke r0.<org.waveprotocol.wave.client.common.util.LogicalPanel$Impl: void onDetach()>();

        return;
    }

    private void scheduleUpdateNotification(boolean, boolean, boolean, boolean)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean z0, z1, z2, z3;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        z3 := @parameter3: boolean;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl updateEvent>;

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: void scheduleUpdateNotification(boolean,boolean,boolean,boolean)>(z0, z1, z2, z3);

        return;
    }

    public void addUpdateListener(org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl $r2;
        org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl updateEvent>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: void addUpdateListener(org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener)>(r1);

        return;
    }

    public void removeUpdateListener(org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl $r2;
        org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl updateEvent>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: void removeUpdateListener(org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener)>(r1);

        return;
    }

    public void flushUpdates()
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl updateEvent>;

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: void flushUpdates()>();

        return;
    }

    public org.waveprotocol.wave.client.editor.event.EditorEventHandler debugGetEventHandler()
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.event.EditorEventHandler eventHandler>;

        return $r1;
    }

    public java.lang.String getImeCompositionState()
    {
        java.lang.String $r2;
        org.waveprotocol.wave.client.editor.extract.ImeExtractor $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.ImeExtractor imeExtractor>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: java.lang.String getContent()>();

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.content.CMutableDocument getDocument()
    {
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void checkContextConsistency()>();

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations getCaretAnnotations()
    {
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations $r1, $r2;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caretStyles>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Using the caret annotations of an editor not set up.");

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void checkContextConsistency()>();

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caretStyles>;

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper $r1, $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper passiveSelectionHelper>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Using the selection helper of an editor not set up.");

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void checkContextConsistency()>();

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper passiveSelectionHelper>;

        return $r2;
    }

    private void checkContextConsistency()
    {
        org.waveprotocol.wave.common.logging.Logger $r2;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isConsistentWithEventHistory()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void flushSynchronous()>();

        $r1 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Editor context methods called while editor is not consistent.");

     label1:
        return;
    }

    public org.waveprotocol.wave.client.editor.extract.PasteExtractor debugGetPasteExtractor()
    {
        org.waveprotocol.wave.client.editor.extract.PasteExtractor $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.PasteExtractor pasteExtractor>;

        return $r1;
    }

    public void debugConnectOpSinks(boolean)
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.model.document.operation.DocOp r6;
        java.util.ArrayList $r1;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r7;
        org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner $r4;
        java.util.List $r2;
        java.lang.Object $r5;
        boolean z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean permitOperations>;

        if $z1 != z0 goto label1;

        return;

     label1:
        r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean permitOperations> = z0;

        $z2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean permitOperations>;

        if $z2 == 0 goto label4;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: java.util.List suppressedOutgoingOps>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.document.operation.DocOp) $r5;

        $r7 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.operation.SilentOperationSink outgoingOperationSink>;

        interfaceinvoke $r7.<org.waveprotocol.wave.model.operation.SilentOperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>(r6);

        goto label2;

     label3:
        r0.<org.waveprotocol.wave.client.editor.EditorImpl: java.util.List suppressedOutgoingOps> = null;

        $r4 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorImpl$ConsistentStateCommandRunner consistencyQueue>;

        staticinvoke <org.waveprotocol.wave.client.scheduler.ScheduleCommand: void addCommand(org.waveprotocol.wave.client.scheduler.Scheduler$Task)>($r4);

        goto label5;

     label4:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: java.util.List suppressedOutgoingOps> = $r1;

     label5:
        return;
    }

    public boolean debugIsConnected()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean permitOperations>;

        return $z0;
    }

    public void flushAnnotationPainting()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: void flushAnnotationPainting()>();

        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.client.editor.EditorImpl r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        java.lang.String $r6;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r3;

        r2 := @this: org.waveprotocol.wave.client.editor.EditorImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Editor: [Content: ");

        $r3 = r2.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    static org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper access$000(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper passiveSelectionHelper>;

        return $r1;
    }

    static org.waveprotocol.wave.model.util.CopyOnWriteSet access$100(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet elementsWithDisplayEditModes>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.extract.RepairListener access$200(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.extract.RepairListener $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.RepairListener repairListener>;

        return $r1;
    }

    static boolean access$300(org.waveprotocol.wave.client.editor.EditorImpl, java.lang.Runnable)
    {
        java.lang.Runnable r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r1 := @parameter1: java.lang.Runnable;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean flush(java.lang.Runnable)>(r1);

        return $z0;
    }

    static void access$400(org.waveprotocol.wave.client.editor.EditorImpl, org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.document.operation.DocOp r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.DocOp;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void onIncomingOp(org.waveprotocol.wave.model.document.operation.DocOp)>(r1);

        return;
    }

    static boolean access$500(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean permitOperations>;

        return $z0;
    }

    static org.waveprotocol.wave.model.operation.SilentOperationSink access$600(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.operation.SilentOperationSink innerOutputSink>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.Responsibility$Manager access$700(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.Responsibility$Manager $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager responsibility>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.EditorUndoManager access$800(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorUndoManager $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUndoManager editorUndoManager>;

        return $r1;
    }

    static void access$900(org.waveprotocol.wave.client.editor.EditorImpl, boolean, boolean, boolean, boolean)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean z0, z1, z2, z3;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        z3 := @parameter4: boolean;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void scheduleUpdateNotification(boolean,boolean,boolean,boolean)>(z0, z1, z2, z3);

        return;
    }

    static org.waveprotocol.wave.client.editor.extract.DomMutationReverter access$1100(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.extract.DomMutationReverter $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.DomMutationReverter domMutationReverter>;

        return $r1;
    }

    static com.google.gwt.dom.client.Text access$1200(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        com.google.gwt.dom.client.Text $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Text webkitEndOfLinkHackTextNode>;

        return $r1;
    }

    static com.google.gwt.dom.client.Text access$1202(org.waveprotocol.wave.client.editor.EditorImpl, com.google.gwt.dom.client.Text)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        com.google.gwt.dom.client.Text r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r1 := @parameter1: com.google.gwt.dom.client.Text;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Text webkitEndOfLinkHackTextNode> = r1;

        return r1;
    }

    static org.waveprotocol.wave.model.document.operation.Nindo access$1300(org.waveprotocol.wave.client.editor.EditorImpl, int, int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.Nindo $r2;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.operation.Nindo generateReplaceTextOp(int,int,java.lang.String)>(i0, i1, r1);

        return $r2;
    }

    static org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection access$1402(org.waveprotocol.wave.client.editor.EditorImpl, org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection currentSelectionBias> = r1;

        return r1;
    }

    static org.waveprotocol.wave.client.editor.extract.Repairer access$1500(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.extract.Repairer $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.Repairer repairer>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.EditorSettings access$1700(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorSettings $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorSettings settings>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry access$1800(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry keyBindings>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.extract.PasteExtractor access$1900(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.extract.PasteExtractor $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.PasteExtractor pasteExtractor>;

        return $r1;
    }

    static org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection access$1400(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection currentSelectionBias>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations access$2000(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caretStyles>;

        return $r1;
    }

    static double access$2100(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        double $d0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $d0 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: double processKeyPressTimer>;

        return $d0;
    }

    static com.google.gwt.core.client.Duration access$2200(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        com.google.gwt.core.client.Duration $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.core.client.Duration postKeyPressTimer>;

        return $r1;
    }

    static boolean access$2300(org.waveprotocol.wave.client.editor.EditorImpl, org.waveprotocol.wave.client.common.util.SignalEvent)
    {
        org.waveprotocol.wave.client.common.util.SignalEvent r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r1 := @parameter1: org.waveprotocol.wave.client.common.util.SignalEvent;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean fireKeyboardEvent(org.waveprotocol.wave.client.common.util.SignalEvent)>(r1);

        return $z0;
    }

    static boolean access$2400(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isTyping()>();

        return $z0;
    }

    static void access$2500(org.waveprotocol.wave.client.editor.EditorImpl, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.model.document.util.Point r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void notifyTypingExtractor(org.waveprotocol.wave.model.document.util.Point)>(r1);

        return;
    }

    static org.waveprotocol.wave.model.document.util.Point access$2600(org.waveprotocol.wave.client.editor.EditorImpl, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        org.waveprotocol.wave.model.document.util.Point r1, $r2;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.Point getFilteredPoint(org.waveprotocol.wave.model.document.util.Point)>(r1);

        return $r2;
    }

    static org.waveprotocol.wave.model.document.util.Point access$2700(org.waveprotocol.wave.client.editor.EditorImpl, org.waveprotocol.wave.model.document.util.Point, java.lang.String, boolean)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.util.Point r1, $r3;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.Point insertText(org.waveprotocol.wave.model.document.util.Point,java.lang.String,boolean)>(r1, r2, z0);

        return $r3;
    }

    static org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelper access$2800(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelper $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelper caretMoveHelper>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.extract.ImeExtractor access$2900(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.extract.ImeExtractor $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.ImeExtractor imeExtractor>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper access$3000(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper aggressiveSelectionHelper>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.EditorUpdateEventImpl access$3100(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl $r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl updateEvent>;

        return $r1;
    }

    static void access$3200(org.waveprotocol.wave.client.editor.EditorImpl, org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)
    {
        org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection r1;
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void rebiasSelection(org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>(r1);

        return;
    }

    static void access$3400(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl: void doSaveSelection()>();

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.EditorImpl$Resources $r2;
        org.waveprotocol.wave.client.editor.EditorImpl$8 $r6;
        org.waveprotocol.wave.client.editor.EditorImpl$17 $r7;
        com.google.gwt.resources.client.CssResource $r3, $r4;
        java.lang.Class $r0;
        java.lang.Object $r1;
        java.lang.String $r5;
        boolean $z0, $z1;

        <org.waveprotocol.wave.client.editor.EditorImpl: java.lang.String EDITABLE_DOC_MARKER> = "editableDocMarker";

        <org.waveprotocol.wave.client.editor.EditorImpl: java.lang.String WAVE_EDITOR_EDIT_OFF> = "wave-editor-off";

        <org.waveprotocol.wave.client.editor.EditorImpl: java.lang.String WAVE_EDITOR_EDIT_ON> = "wave-editor-on";

        $r0 = class "Lorg/waveprotocol/wave/client/editor/EditorImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.EditorImpl: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <com.google.gwt.core.client.GWT: java.lang.Object create(java.lang.Class)>(class "Lorg/waveprotocol/wave/client/editor/EditorImpl$Resources;");

        $r2 = (org.waveprotocol.wave.client.editor.EditorImpl$Resources) $r1;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorImpl$Resources: com.google.gwt.resources.client.CssResource css()>();

        <org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.resources.client.CssResource css> = $r3;

        $r4 = <org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.resources.client.CssResource css>;

        $r5 = interfaceinvoke $r4.<com.google.gwt.resources.client.CssResource: java.lang.String getText()>();

        staticinvoke <com.google.gwt.dom.client.StyleInjector: void inject(java.lang.String,boolean)>($r5, 1);

        staticinvoke <org.waveprotocol.wave.client.editor.webdriver.EditorJsniHelpers: void nativeSetupWebDriverTestPins()>();

        $r6 = new org.waveprotocol.wave.client.editor.EditorImpl$8;

        specialinvoke $r6.<org.waveprotocol.wave.client.editor.EditorImpl$8: void <init>()>();

        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void setTransientMutationListener(org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$MutationListener)>($r6);

        $r7 = new org.waveprotocol.wave.client.editor.EditorImpl$17;

        specialinvoke $r7.<org.waveprotocol.wave.client.editor.EditorImpl$17: void <init>()>();

        <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.Renderer SIMPLE_RENDERER> = $r7;

        return;
    }
}
