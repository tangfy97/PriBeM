public class org.apache.fontbox.ttf.TTFParser extends org.apache.fontbox.ttf.AbstractTTFParser
{

    public void <init>()
    {
        org.apache.fontbox.ttf.TTFParser r0;

        r0 := @this: org.apache.fontbox.ttf.TTFParser;

        specialinvoke r0.<org.apache.fontbox.ttf.AbstractTTFParser: void <init>(boolean)>(0);

        return;
    }

    public void <init>(boolean)
    {
        org.apache.fontbox.ttf.TTFParser r0;
        boolean z0;

        r0 := @this: org.apache.fontbox.ttf.TTFParser;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.fontbox.ttf.AbstractTTFParser: void <init>(boolean)>(z0);

        return;
    }

    public void <init>(boolean, boolean)
    {
        org.apache.fontbox.ttf.TTFParser r0;
        boolean z0, z1;

        r0 := @this: org.apache.fontbox.ttf.TTFParser;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        specialinvoke r0.<org.apache.fontbox.ttf.AbstractTTFParser: void <init>(boolean,boolean)>(z0, z1);

        return;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        java.io.PrintStream $r5, $r9;
        java.lang.String[] r0;
        org.apache.fontbox.ttf.TrueTypeFont $r3;
        int $i0, $i2;
        java.lang.StringBuilder $r6, $r7, $r11;
        java.lang.String $r2, $r8;
        org.apache.fontbox.ttf.TTFParser $r10;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 == 1 goto label1;

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("usage: java org.pdfbox.ttf.TTFParser <ttf-file>");

        $i2 = (int) -1;

        staticinvoke <java.lang.System: void exit(int)>($i2);

     label1:
        $r10 = new org.apache.fontbox.ttf.TTFParser;

        specialinvoke $r10.<org.apache.fontbox.ttf.TTFParser: void <init>()>();

        $r2 = r0[0];

        $r3 = virtualinvoke $r10.<org.apache.fontbox.ttf.TTFParser: org.apache.fontbox.ttf.TrueTypeFont parseTTF(java.lang.String)>($r2);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Font:");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r8);

        return;
    }

    protected void parseTables(org.apache.fontbox.ttf.TrueTypeFont, org.apache.fontbox.ttf.TTFDataStream) throws java.io.IOException
    {
        org.apache.fontbox.ttf.TrueTypeFont r1;
        org.apache.fontbox.ttf.CMAPTable $r3;
        org.apache.fontbox.ttf.TTFDataStream r2;
        java.io.IOException $r4;
        org.apache.fontbox.ttf.TTFParser r0;

        r0 := @this: org.apache.fontbox.ttf.TTFParser;

        r1 := @parameter0: org.apache.fontbox.ttf.TrueTypeFont;

        r2 := @parameter1: org.apache.fontbox.ttf.TTFDataStream;

        specialinvoke r0.<org.apache.fontbox.ttf.AbstractTTFParser: void parseTables(org.apache.fontbox.ttf.TrueTypeFont,org.apache.fontbox.ttf.TTFDataStream)>(r1, r2);

        $r3 = virtualinvoke r1.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.CMAPTable getCMAP()>();

        if $r3 != null goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("cmap is mandatory");

        throw $r4;

     label1:
        return;
    }

    public volatile org.apache.fontbox.ttf.TrueTypeFont parseTTF(org.apache.fontbox.ttf.TTFDataStream) throws java.io.IOException
    {
        org.apache.fontbox.ttf.TTFDataStream r1;
        org.apache.fontbox.ttf.TrueTypeFont $r2;
        org.apache.fontbox.ttf.TTFParser r0;

        r0 := @this: org.apache.fontbox.ttf.TTFParser;

        r1 := @parameter0: org.apache.fontbox.ttf.TTFDataStream;

        $r2 = specialinvoke r0.<org.apache.fontbox.ttf.AbstractTTFParser: org.apache.fontbox.ttf.TrueTypeFont parseTTF(org.apache.fontbox.ttf.TTFDataStream)>(r1);

        return $r2;
    }

    public volatile org.apache.fontbox.ttf.TrueTypeFont parseTTF(java.io.InputStream) throws java.io.IOException
    {
        org.apache.fontbox.ttf.TrueTypeFont $r2;
        org.apache.fontbox.ttf.TTFParser r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.fontbox.ttf.TTFParser;

        r1 := @parameter0: java.io.InputStream;

        $r2 = specialinvoke r0.<org.apache.fontbox.ttf.AbstractTTFParser: org.apache.fontbox.ttf.TrueTypeFont parseTTF(java.io.InputStream)>(r1);

        return $r2;
    }

    public volatile org.apache.fontbox.ttf.TrueTypeFont parseTTF(java.io.File) throws java.io.IOException
    {
        org.apache.fontbox.ttf.TrueTypeFont $r2;
        org.apache.fontbox.ttf.TTFParser r0;
        java.io.File r1;

        r0 := @this: org.apache.fontbox.ttf.TTFParser;

        r1 := @parameter0: java.io.File;

        $r2 = specialinvoke r0.<org.apache.fontbox.ttf.AbstractTTFParser: org.apache.fontbox.ttf.TrueTypeFont parseTTF(java.io.File)>(r1);

        return $r2;
    }

    public volatile org.apache.fontbox.ttf.TrueTypeFont parseTTF(java.lang.String) throws java.io.IOException
    {
        java.lang.String r1;
        org.apache.fontbox.ttf.TrueTypeFont $r2;
        org.apache.fontbox.ttf.TTFParser r0;

        r0 := @this: org.apache.fontbox.ttf.TTFParser;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.fontbox.ttf.AbstractTTFParser: org.apache.fontbox.ttf.TrueTypeFont parseTTF(java.lang.String)>(r1);

        return $r2;
    }
}
