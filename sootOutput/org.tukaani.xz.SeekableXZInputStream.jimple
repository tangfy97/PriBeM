public class org.tukaani.xz.SeekableXZInputStream extends org.tukaani.xz.SeekableInputStream
{
    private org.tukaani.xz.SeekableInputStream in;
    private final int memoryLimit;
    private int indexMemoryUsage;
    private final java.util.ArrayList streams;
    private int checkTypes;
    private long uncompressedSize;
    private long largestBlockSize;
    private int blockCount;
    private final org.tukaani.xz.index.BlockInfo curBlockInfo;
    private final org.tukaani.xz.index.BlockInfo queriedBlockInfo;
    private org.tukaani.xz.check.Check check;
    private org.tukaani.xz.BlockInputStream blockDecoder;
    private long curPos;
    private long seekPos;
    private boolean seekNeeded;
    private boolean endReached;
    private java.io.IOException exception;
    private final byte[] tempBuf;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$tukaani$xz$SeekableXZInputStream;

    public void <init>(org.tukaani.xz.SeekableInputStream) throws java.io.IOException
    {
        int $i1;
        org.tukaani.xz.SeekableXZInputStream r0;
        org.tukaani.xz.SeekableInputStream r1;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        r1 := @parameter0: org.tukaani.xz.SeekableInputStream;

        $i1 = (int) -1;

        specialinvoke r0.<org.tukaani.xz.SeekableXZInputStream: void <init>(org.tukaani.xz.SeekableInputStream,int)>(r1, $i1);

        return;
    }

    public void <init>(org.tukaani.xz.SeekableInputStream, int) throws java.io.IOException
    {
        byte[] $r2, $r5, $r6, r7, r36;
        org.tukaani.xz.MemoryLimitException $r33, $r49;
        byte $b3, $b9, $b10, $b12, $b24, $b29, $b37, $b38, $b39, $b48, $b51, $b54;
        long $l1, $l2, $l11, $l18, $l19, $l23, $l25, $l26, $l27, $l28, $l34, $l35, l46, l47, $l49, $l50, $l52, $l53;
        java.lang.AssertionError $r48, $r50, $r55;
        java.util.ArrayList $r8, $r9, $r11, $r12, $r13, $r17, $r23, $r41;
        org.tukaani.xz.SeekableXZInputStream r0;
        org.tukaani.xz.CorruptedInputException $r44, $r45, $r46, $r51, $r52;
        org.tukaani.xz.SeekableInputStream r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.tukaani.xz.common.StreamFlags $r22, $r37;
        org.tukaani.xz.XZFormatException $r43;
        org.tukaani.xz.UnsupportedOptionsException $r53, $r54;
        java.io.DataInputStream $r42;
        org.tukaani.xz.check.Check $r20;
        org.tukaani.xz.index.BlockInfo $r56, $r57;
        org.tukaani.xz.index.IndexDecoder r38, r39, r40, $r47;
        int $i0, $i4, $i5, $i6, $i7, $i8, $i13, $i14, $i15, $i16, $i17, $i20, $i21, $i22, $i30, $i31, $i32, $i33, $i36, $i40, $i41, $i42, $i43, $i44, i45, i55, $i56, $i57, $i58, $i59, $i60, $i61, $i63;
        java.lang.Object $r10, $r14, $r18;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        r3 := @parameter0: org.tukaani.xz.SeekableInputStream;

        i45 := @parameter1: int;

        specialinvoke r0.<org.tukaani.xz.SeekableInputStream: void <init>()>();

        r0.<org.tukaani.xz.SeekableXZInputStream: int indexMemoryUsage> = 0;

        $r41 = new java.util.ArrayList;

        specialinvoke $r41.<java.util.ArrayList: void <init>()>();

        r0.<org.tukaani.xz.SeekableXZInputStream: java.util.ArrayList streams> = $r41;

        r0.<org.tukaani.xz.SeekableXZInputStream: int checkTypes> = 0;

        r0.<org.tukaani.xz.SeekableXZInputStream: long uncompressedSize> = 0L;

        r0.<org.tukaani.xz.SeekableXZInputStream: long largestBlockSize> = 0L;

        r0.<org.tukaani.xz.SeekableXZInputStream: int blockCount> = 0;

        r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder> = null;

        r0.<org.tukaani.xz.SeekableXZInputStream: long curPos> = 0L;

        r0.<org.tukaani.xz.SeekableXZInputStream: boolean seekNeeded> = 0;

        r0.<org.tukaani.xz.SeekableXZInputStream: boolean endReached> = 0;

        r0.<org.tukaani.xz.SeekableXZInputStream: java.io.IOException exception> = null;

        $r2 = newarray (byte)[1];

        r0.<org.tukaani.xz.SeekableXZInputStream: byte[] tempBuf> = $r2;

        r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.SeekableInputStream in> = r3;

        $r42 = new java.io.DataInputStream;

        specialinvoke $r42.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r3);

        virtualinvoke r3.<org.tukaani.xz.SeekableInputStream: void seek(long)>(0L);

        $r5 = <org.tukaani.xz.XZ: byte[] HEADER_MAGIC>;

        $i0 = lengthof $r5;

        r36 = newarray (byte)[$i0];

        virtualinvoke $r42.<java.io.DataInputStream: void readFully(byte[])>(r36);

        $r6 = <org.tukaani.xz.XZ: byte[] HEADER_MAGIC>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r36, $r6);

        if $z0 != 0 goto label01;

        $r43 = new org.tukaani.xz.XZFormatException;

        specialinvoke $r43.<org.tukaani.xz.XZFormatException: void <init>()>();

        throw $r43;

     label01:
        $l1 = virtualinvoke r3.<org.tukaani.xz.SeekableInputStream: long length()>();

        l46 = $l1;

        $l2 = $l1 & 3L;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label02;

        $r44 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r44.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ file size is not a multiple of 4 bytes");

        throw $r44;

     label02:
        r7 = newarray (byte)[12];

        l47 = 0L;

     label03:
        $b48 = l46 cmp 0L;

        $i56 = (int) $b48;

        if $i56 <= 0 goto label18;

        $b10 = l46 cmp 12L;

        $i57 = (int) $b10;

        if $i57 >= 0 goto label04;

        $r45 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r45.<org.tukaani.xz.CorruptedInputException: void <init>()>();

        throw $r45;

     label04:
        $l11 = l46 - 12L;

        virtualinvoke r3.<org.tukaani.xz.SeekableInputStream: void seek(long)>($l11);

        virtualinvoke $r42.<java.io.DataInputStream: void readFully(byte[])>(r7);

        $b12 = r7[8];

        if $b12 != 0 goto label05;

        $b37 = r7[9];

        if $b37 != 0 goto label05;

        $b38 = r7[10];

        if $b38 != 0 goto label05;

        $b39 = r7[11];

        if $b39 != 0 goto label05;

        l47 = l47 + 4L;

        l46 = l46 - 4L;

        goto label03;

     label05:
        $l49 = l46 - 12L;

        $r37 = staticinvoke <org.tukaani.xz.common.DecoderUtil: org.tukaani.xz.common.StreamFlags decodeStreamFooter(byte[])>(r7);

        $l50 = $r37.<org.tukaani.xz.common.StreamFlags: long backwardSize>;

        $b51 = $l50 cmp $l49;

        $i58 = (int) $b51;

        if $i58 < 0 goto label06;

        $r46 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r46.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("Backward Size in XZ Stream Footer is too big");

        throw $r46;

     label06:
        $i13 = $r37.<org.tukaani.xz.common.StreamFlags: int checkType>;

        $r20 = staticinvoke <org.tukaani.xz.check.Check: org.tukaani.xz.check.Check getInstance(int)>($i13);

        r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.check.Check check> = $r20;

        $i16 = r0.<org.tukaani.xz.SeekableXZInputStream: int checkTypes>;

        $i14 = $r37.<org.tukaani.xz.common.StreamFlags: int checkType>;

        $i15 = 1 << $i14;

        $i17 = $i16 | $i15;

        r0.<org.tukaani.xz.SeekableXZInputStream: int checkTypes> = $i17;

        $l18 = $r37.<org.tukaani.xz.common.StreamFlags: long backwardSize>;

        $l19 = $l49 - $l18;

        virtualinvoke r3.<org.tukaani.xz.SeekableInputStream: void seek(long)>($l19);

     label07:
        $r47 = new org.tukaani.xz.index.IndexDecoder;

        specialinvoke $r47.<org.tukaani.xz.index.IndexDecoder: void <init>(org.tukaani.xz.SeekableInputStream,org.tukaani.xz.common.StreamFlags,long,int)>(r3, $r37, l47, i45);

     label08:
        goto label11;

     label09:
        $r33 := @caughtexception;

        $z4 = <org.tukaani.xz.SeekableXZInputStream: boolean $assertionsDisabled>;

        if $z4 != 0 goto label10;

        if i45 >= 0 goto label10;

        $r48 = new java.lang.AssertionError;

        specialinvoke $r48.<java.lang.AssertionError: void <init>()>();

        throw $r48;

     label10:
        $r49 = new org.tukaani.xz.MemoryLimitException;

        $i40 = virtualinvoke $r33.<org.tukaani.xz.MemoryLimitException: int getMemoryNeeded()>();

        $i41 = r0.<org.tukaani.xz.SeekableXZInputStream: int indexMemoryUsage>;

        $i44 = $i40 + $i41;

        $i42 = r0.<org.tukaani.xz.SeekableXZInputStream: int indexMemoryUsage>;

        $i43 = i45 + $i42;

        specialinvoke $r49.<org.tukaani.xz.MemoryLimitException: void <init>(int,int)>($i44, $i43);

        throw $r49;

     label11:
        $i20 = r0.<org.tukaani.xz.SeekableXZInputStream: int indexMemoryUsage>;

        $i21 = virtualinvoke $r47.<org.tukaani.xz.index.IndexDecoder: int getMemoryUsage()>();

        $i22 = $i20 + $i21;

        r0.<org.tukaani.xz.SeekableXZInputStream: int indexMemoryUsage> = $i22;

        if i45 < 0 goto label12;

        $i36 = virtualinvoke $r47.<org.tukaani.xz.index.IndexDecoder: int getMemoryUsage()>();

        i45 = i45 - $i36;

        $z3 = <org.tukaani.xz.SeekableXZInputStream: boolean $assertionsDisabled>;

        if $z3 != 0 goto label12;

        if i45 >= 0 goto label12;

        $r50 = new java.lang.AssertionError;

        specialinvoke $r50.<java.lang.AssertionError: void <init>()>();

        throw $r50;

     label12:
        $l52 = r0.<org.tukaani.xz.SeekableXZInputStream: long largestBlockSize>;

        $l53 = virtualinvoke $r47.<org.tukaani.xz.index.IndexDecoder: long getLargestBlockSize()>();

        $b54 = $l52 cmp $l53;

        $i59 = (int) $b54;

        if $i59 >= 0 goto label13;

        $l34 = virtualinvoke $r47.<org.tukaani.xz.index.IndexDecoder: long getLargestBlockSize()>();

        r0.<org.tukaani.xz.SeekableXZInputStream: long largestBlockSize> = $l34;

     label13:
        $l23 = virtualinvoke $r47.<org.tukaani.xz.index.IndexDecoder: long getStreamSize()>();

        $l35 = $l23 - 12L;

        $b24 = $l49 cmp $l35;

        $i60 = (int) $b24;

        if $i60 >= 0 goto label14;

        $r51 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r51.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Index indicates too big compressed size for the XZ Stream");

        throw $r51;

     label14:
        l46 = $l49 - $l35;

        virtualinvoke r3.<org.tukaani.xz.SeekableInputStream: void seek(long)>(l46);

        virtualinvoke $r42.<java.io.DataInputStream: void readFully(byte[])>(r7);

        $r22 = staticinvoke <org.tukaani.xz.common.DecoderUtil: org.tukaani.xz.common.StreamFlags decodeStreamHeader(byte[])>(r7);

        $z2 = staticinvoke <org.tukaani.xz.common.DecoderUtil: boolean areStreamFlagsEqual(org.tukaani.xz.common.StreamFlags,org.tukaani.xz.common.StreamFlags)>($r22, $r37);

        if $z2 != 0 goto label15;

        $r52 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r52.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Stream Footer does not match Stream Header");

        throw $r52;

     label15:
        $l25 = r0.<org.tukaani.xz.SeekableXZInputStream: long uncompressedSize>;

        $l26 = virtualinvoke $r47.<org.tukaani.xz.index.IndexDecoder: long getUncompressedSize()>();

        $l27 = $l25 + $l26;

        r0.<org.tukaani.xz.SeekableXZInputStream: long uncompressedSize> = $l27;

        $l28 = r0.<org.tukaani.xz.SeekableXZInputStream: long uncompressedSize>;

        $b29 = $l28 cmp 0L;

        $i61 = (int) $b29;

        if $i61 >= 0 goto label16;

        $r53 = new org.tukaani.xz.UnsupportedOptionsException;

        specialinvoke $r53.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>("XZ file is too big");

        throw $r53;

     label16:
        $i30 = r0.<org.tukaani.xz.SeekableXZInputStream: int blockCount>;

        $i31 = virtualinvoke $r47.<org.tukaani.xz.index.IndexDecoder: int getRecordCount()>();

        $i32 = $i30 + $i31;

        r0.<org.tukaani.xz.SeekableXZInputStream: int blockCount> = $i32;

        $i33 = r0.<org.tukaani.xz.SeekableXZInputStream: int blockCount>;

        if $i33 >= 0 goto label17;

        $r54 = new org.tukaani.xz.UnsupportedOptionsException;

        specialinvoke $r54.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>("XZ file has over 2147483647 Blocks");

        throw $r54;

     label17:
        $r23 = r0.<org.tukaani.xz.SeekableXZInputStream: java.util.ArrayList streams>;

        virtualinvoke $r23.<java.util.ArrayList: boolean add(java.lang.Object)>($r47);

        l47 = 0L;

        goto label03;

     label18:
        $z1 = <org.tukaani.xz.SeekableXZInputStream: boolean $assertionsDisabled>;

        if $z1 != 0 goto label19;

        $b9 = l46 cmp 0L;

        if $b9 == 0 goto label19;

        $r55 = new java.lang.AssertionError;

        specialinvoke $r55.<java.lang.AssertionError: void <init>()>();

        throw $r55;

     label19:
        r0.<org.tukaani.xz.SeekableXZInputStream: int memoryLimit> = i45;

        $r9 = r0.<org.tukaani.xz.SeekableXZInputStream: java.util.ArrayList streams>;

        $r8 = r0.<org.tukaani.xz.SeekableXZInputStream: java.util.ArrayList streams>;

        $i4 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i5 = $i4 - 1;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>($i5);

        r38 = (org.tukaani.xz.index.IndexDecoder) $r10;

        $r11 = r0.<org.tukaani.xz.SeekableXZInputStream: java.util.ArrayList streams>;

        $i6 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        i55 = $i6 - 2;

     label20:
        if i55 < 0 goto label21;

        $r17 = r0.<org.tukaani.xz.SeekableXZInputStream: java.util.ArrayList streams>;

        $r18 = virtualinvoke $r17.<java.util.ArrayList: java.lang.Object get(int)>(i55);

        r39 = (org.tukaani.xz.index.IndexDecoder) $r18;

        virtualinvoke r39.<org.tukaani.xz.index.IndexDecoder: void setOffsets(org.tukaani.xz.index.IndexDecoder)>(r38);

        r38 = r39;

        $i63 = (int) -1;

        i55 = i55 + $i63;

        goto label20;

     label21:
        $r13 = r0.<org.tukaani.xz.SeekableXZInputStream: java.util.ArrayList streams>;

        $r12 = r0.<org.tukaani.xz.SeekableXZInputStream: java.util.ArrayList streams>;

        $i7 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        $i8 = $i7 - 1;

        $r14 = virtualinvoke $r13.<java.util.ArrayList: java.lang.Object get(int)>($i8);

        r40 = (org.tukaani.xz.index.IndexDecoder) $r14;

        $r56 = new org.tukaani.xz.index.BlockInfo;

        specialinvoke $r56.<org.tukaani.xz.index.BlockInfo: void <init>(org.tukaani.xz.index.IndexDecoder)>(r40);

        r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo curBlockInfo> = $r56;

        $r57 = new org.tukaani.xz.index.BlockInfo;

        specialinvoke $r57.<org.tukaani.xz.index.BlockInfo: void <init>(org.tukaani.xz.index.IndexDecoder)>(r40);

        r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo queriedBlockInfo> = $r57;

        return;

        catch org.tukaani.xz.MemoryLimitException from label07 to label08 with label09;
    }

    public int getCheckTypes()
    {
        int $i0;
        org.tukaani.xz.SeekableXZInputStream r0;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        $i0 = r0.<org.tukaani.xz.SeekableXZInputStream: int checkTypes>;

        return $i0;
    }

    public int getIndexMemoryUsage()
    {
        int $i0;
        org.tukaani.xz.SeekableXZInputStream r0;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        $i0 = r0.<org.tukaani.xz.SeekableXZInputStream: int indexMemoryUsage>;

        return $i0;
    }

    public long getLargestBlockSize()
    {
        org.tukaani.xz.SeekableXZInputStream r0;
        long $l0;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        $l0 = r0.<org.tukaani.xz.SeekableXZInputStream: long largestBlockSize>;

        return $l0;
    }

    public int getStreamCount()
    {
        int $i0;
        org.tukaani.xz.SeekableXZInputStream r0;
        java.util.ArrayList $r1;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        $r1 = r0.<org.tukaani.xz.SeekableXZInputStream: java.util.ArrayList streams>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public int getBlockCount()
    {
        int $i0;
        org.tukaani.xz.SeekableXZInputStream r0;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        $i0 = r0.<org.tukaani.xz.SeekableXZInputStream: int blockCount>;

        return $i0;
    }

    public long getBlockPos(int)
    {
        org.tukaani.xz.SeekableXZInputStream r0;
        int i0;
        org.tukaani.xz.index.BlockInfo $r1, $r2;
        long $l1;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo queriedBlockInfo>;

        specialinvoke r0.<org.tukaani.xz.SeekableXZInputStream: void locateBlockByNumber(org.tukaani.xz.index.BlockInfo,int)>($r1, i0);

        $r2 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo queriedBlockInfo>;

        $l1 = $r2.<org.tukaani.xz.index.BlockInfo: long uncompressedOffset>;

        return $l1;
    }

    public long getBlockSize(int)
    {
        org.tukaani.xz.SeekableXZInputStream r0;
        int i0;
        org.tukaani.xz.index.BlockInfo $r1, $r2;
        long $l1;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo queriedBlockInfo>;

        specialinvoke r0.<org.tukaani.xz.SeekableXZInputStream: void locateBlockByNumber(org.tukaani.xz.index.BlockInfo,int)>($r1, i0);

        $r2 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo queriedBlockInfo>;

        $l1 = $r2.<org.tukaani.xz.index.BlockInfo: long uncompressedSize>;

        return $l1;
    }

    public long getBlockCompPos(int)
    {
        org.tukaani.xz.SeekableXZInputStream r0;
        int i0;
        org.tukaani.xz.index.BlockInfo $r1, $r2;
        long $l1;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo queriedBlockInfo>;

        specialinvoke r0.<org.tukaani.xz.SeekableXZInputStream: void locateBlockByNumber(org.tukaani.xz.index.BlockInfo,int)>($r1, i0);

        $r2 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo queriedBlockInfo>;

        $l1 = $r2.<org.tukaani.xz.index.BlockInfo: long compressedOffset>;

        return $l1;
    }

    public long getBlockCompSize(int)
    {
        org.tukaani.xz.SeekableXZInputStream r0;
        int i0;
        org.tukaani.xz.index.BlockInfo $r1, $r2;
        long $l1, $l2, $l3;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo queriedBlockInfo>;

        specialinvoke r0.<org.tukaani.xz.SeekableXZInputStream: void locateBlockByNumber(org.tukaani.xz.index.BlockInfo,int)>($r1, i0);

        $r2 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo queriedBlockInfo>;

        $l1 = $r2.<org.tukaani.xz.index.BlockInfo: long unpaddedSize>;

        $l2 = $l1 + 3L;

        $l3 = $l2 & -4L;

        return $l3;
    }

    public int getBlockCheckType(int)
    {
        org.tukaani.xz.SeekableXZInputStream r0;
        int i0, $i1;
        org.tukaani.xz.index.BlockInfo $r1, $r2;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo queriedBlockInfo>;

        specialinvoke r0.<org.tukaani.xz.SeekableXZInputStream: void locateBlockByNumber(org.tukaani.xz.index.BlockInfo,int)>($r1, i0);

        $r2 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo queriedBlockInfo>;

        $i1 = virtualinvoke $r2.<org.tukaani.xz.index.BlockInfo: int getCheckType()>();

        return $i1;
    }

    public int getBlockNumber(long)
    {
        org.tukaani.xz.SeekableXZInputStream r0;
        org.tukaani.xz.index.BlockInfo $r1, $r2;
        int $i1;
        long l0;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        l0 := @parameter0: long;

        $r1 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo queriedBlockInfo>;

        specialinvoke r0.<org.tukaani.xz.SeekableXZInputStream: void locateBlockByPos(org.tukaani.xz.index.BlockInfo,long)>($r1, l0);

        $r2 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo queriedBlockInfo>;

        $i1 = $r2.<org.tukaani.xz.index.BlockInfo: int blockNumber>;

        return $i1;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r1, $r2;
        org.tukaani.xz.SeekableXZInputStream r0;
        short $s2;
        byte $b1;
        int $i0, $i4;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        $r1 = r0.<org.tukaani.xz.SeekableXZInputStream: byte[] tempBuf>;

        $i0 = virtualinvoke r0.<org.tukaani.xz.SeekableXZInputStream: int read(byte[],int,int)>($r1, 0, 1);

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $s2 = -1;

        goto label2;

     label1:
        $r2 = r0.<org.tukaani.xz.SeekableXZInputStream: byte[] tempBuf>;

        $b1 = $r2[0];

        $s2 = $b1 & 255;

     label2:
        return $s2;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r0;
        java.lang.IndexOutOfBoundsException $r12;
        org.tukaani.xz.SeekableInputStream $r2;
        long $l4, $l5, $l6;
        int $i0, $i1, $i2, $i3, i7, i8, i9, $i11, $i13;
        org.tukaani.xz.BlockInputStream $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        org.tukaani.xz.SeekableXZInputStream r1;
        java.io.IOException $r3, $r6, $r8, r11;
        org.tukaani.xz.XZIOException $r13;
        org.tukaani.xz.CorruptedInputException $r14;

        r1 := @this: org.tukaani.xz.SeekableXZInputStream;

        r0 := @parameter0: byte[];

        i7 := @parameter1: int;

        i8 := @parameter2: int;

        if i7 < 0 goto label01;

        if i8 < 0 goto label01;

        $i0 = i7 + i8;

        if $i0 < 0 goto label01;

        $i2 = i7 + i8;

        $i1 = lengthof r0;

        if $i2 <= $i1 goto label02;

     label01:
        $r12 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r12.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r12;

     label02:
        if i8 != 0 goto label03;

        return 0;

     label03:
        $r2 = r1.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.SeekableInputStream in>;

        if $r2 != null goto label04;

        $r13 = new org.tukaani.xz.XZIOException;

        specialinvoke $r13.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream closed");

        throw $r13;

     label04:
        $r3 = r1.<org.tukaani.xz.SeekableXZInputStream: java.io.IOException exception>;

        if $r3 == null goto label05;

        $r6 = r1.<org.tukaani.xz.SeekableXZInputStream: java.io.IOException exception>;

        throw $r6;

     label05:
        i9 = 0;

     label06:
        $z0 = r1.<org.tukaani.xz.SeekableXZInputStream: boolean seekNeeded>;

        if $z0 == 0 goto label07;

        specialinvoke r1.<org.tukaani.xz.SeekableXZInputStream: void seek()>();

     label07:
        $z1 = r1.<org.tukaani.xz.SeekableXZInputStream: boolean endReached>;

        if $z1 == 0 goto label09;

     label08:
        $i11 = (int) -1;

        return $i11;

     label09:
        if i8 <= 0 goto label13;

        $r4 = r1.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder>;

        if $r4 != null goto label10;

        specialinvoke r1.<org.tukaani.xz.SeekableXZInputStream: void seek()>();

        $z2 = r1.<org.tukaani.xz.SeekableXZInputStream: boolean endReached>;

        if $z2 == 0 goto label10;

        goto label13;

     label10:
        $r5 = r1.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder>;

        $i3 = virtualinvoke $r5.<org.tukaani.xz.BlockInputStream: int read(byte[],int,int)>(r0, i7, i8);

        if $i3 <= 0 goto label11;

        $l5 = r1.<org.tukaani.xz.SeekableXZInputStream: long curPos>;

        $l4 = (long) $i3;

        $l6 = $l5 + $l4;

        r1.<org.tukaani.xz.SeekableXZInputStream: long curPos> = $l6;

        i9 = i9 + $i3;

        i7 = i7 + $i3;

        i8 = i8 - $i3;

        goto label12;

     label11:
        $i13 = (int) -1;

        if $i3 != $i13 goto label12;

        r1.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder> = null;

     label12:
        goto label09;

     label13:
        goto label16;

     label14:
        $r8 := @caughtexception;

        r11 = $r8;

        $z3 = $r8 instanceof java.io.EOFException;

        if $z3 == 0 goto label15;

        $r14 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r14.<org.tukaani.xz.CorruptedInputException: void <init>()>();

        r11 = $r14;

     label15:
        r1.<org.tukaani.xz.SeekableXZInputStream: java.io.IOException exception> = r11;

        if i9 != 0 goto label16;

        throw r11;

     label16:
        return i9;

        catch java.io.IOException from label06 to label08 with label14;
        catch java.io.IOException from label09 to label13 with label14;
    }

    public int available() throws java.io.IOException
    {
        org.tukaani.xz.SeekableXZInputStream r0;
        org.tukaani.xz.SeekableInputStream $r1;
        java.io.IOException $r2, $r5;
        org.tukaani.xz.XZIOException $r6;
        int $i0;
        org.tukaani.xz.BlockInputStream $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        $r1 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.SeekableInputStream in>;

        if $r1 != null goto label1;

        $r6 = new org.tukaani.xz.XZIOException;

        specialinvoke $r6.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream closed");

        throw $r6;

     label1:
        $r2 = r0.<org.tukaani.xz.SeekableXZInputStream: java.io.IOException exception>;

        if $r2 == null goto label2;

        $r5 = r0.<org.tukaani.xz.SeekableXZInputStream: java.io.IOException exception>;

        throw $r5;

     label2:
        $z0 = r0.<org.tukaani.xz.SeekableXZInputStream: boolean endReached>;

        if $z0 != 0 goto label3;

        $z1 = r0.<org.tukaani.xz.SeekableXZInputStream: boolean seekNeeded>;

        if $z1 != 0 goto label3;

        $r3 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder>;

        if $r3 != null goto label4;

     label3:
        return 0;

     label4:
        $r4 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder>;

        $i0 = virtualinvoke $r4.<org.tukaani.xz.BlockInputStream: int available()>();

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        java.lang.Throwable $r3;
        org.tukaani.xz.SeekableXZInputStream r0;
        org.tukaani.xz.SeekableInputStream $r1, $r2;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        $r1 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.SeekableInputStream in>;

        if $r1 == null goto label5;

     label1:
        $r2 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.SeekableInputStream in>;

        virtualinvoke $r2.<org.tukaani.xz.SeekableInputStream: void close()>();

     label2:
        r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.SeekableInputStream in> = null;

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.SeekableInputStream in> = null;

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public long length()
    {
        org.tukaani.xz.SeekableXZInputStream r0;
        long $l0;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        $l0 = r0.<org.tukaani.xz.SeekableXZInputStream: long uncompressedSize>;

        return $l0;
    }

    public long position() throws java.io.IOException
    {
        org.tukaani.xz.SeekableXZInputStream r0;
        org.tukaani.xz.SeekableInputStream $r1;
        long $l0;
        org.tukaani.xz.XZIOException $r2;
        boolean $z0;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        $r1 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.SeekableInputStream in>;

        if $r1 != null goto label1;

        $r2 = new org.tukaani.xz.XZIOException;

        specialinvoke $r2.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream closed");

        throw $r2;

     label1:
        $z0 = r0.<org.tukaani.xz.SeekableXZInputStream: boolean seekNeeded>;

        if $z0 == 0 goto label2;

        $l0 = r0.<org.tukaani.xz.SeekableXZInputStream: long seekPos>;

        goto label3;

     label2:
        $l0 = r0.<org.tukaani.xz.SeekableXZInputStream: long curPos>;

     label3:
        return $l0;
    }

    public void seek(long) throws java.io.IOException
    {
        org.tukaani.xz.SeekableXZInputStream r0;
        org.tukaani.xz.SeekableInputStream $r1;
        long l0;
        org.tukaani.xz.XZIOException $r8, $r10;
        byte $b1;
        java.lang.StringBuffer $r4, $r5, $r9;
        int $i2;
        java.lang.String $r6;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        l0 := @parameter0: long;

        $r1 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.SeekableInputStream in>;

        if $r1 != null goto label1;

        $r8 = new org.tukaani.xz.XZIOException;

        specialinvoke $r8.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream closed");

        throw $r8;

     label1:
        $b1 = l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label2;

        $r10 = new org.tukaani.xz.XZIOException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Negative seek position: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>($r6);

        throw $r10;

     label2:
        r0.<org.tukaani.xz.SeekableXZInputStream: long seekPos> = l0;

        r0.<org.tukaani.xz.SeekableXZInputStream: boolean seekNeeded> = 1;

        return;
    }

    public void seekToBlock(int) throws java.io.IOException
    {
        org.tukaani.xz.SeekableXZInputStream r0;
        org.tukaani.xz.SeekableInputStream $r1;
        long $l2;
        org.tukaani.xz.XZIOException $r2, $r7;
        java.lang.StringBuffer $r3, $r4, $r5;
        int i0, $i1;
        java.lang.String $r6;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.SeekableInputStream in>;

        if $r1 != null goto label1;

        $r7 = new org.tukaani.xz.XZIOException;

        specialinvoke $r7.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream closed");

        throw $r7;

     label1:
        if i0 < 0 goto label2;

        $i1 = r0.<org.tukaani.xz.SeekableXZInputStream: int blockCount>;

        if i0 < $i1 goto label3;

     label2:
        $r2 = new org.tukaani.xz.XZIOException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid XZ Block number: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        $l2 = virtualinvoke r0.<org.tukaani.xz.SeekableXZInputStream: long getBlockPos(int)>(i0);

        r0.<org.tukaani.xz.SeekableXZInputStream: long seekPos> = $l2;

        r0.<org.tukaani.xz.SeekableXZInputStream: boolean seekNeeded> = 1;

        return;
    }

    private void seek() throws java.io.IOException
    {
        org.tukaani.xz.SeekableInputStream $r4;
        byte $b2, $b6, $b14, $b18, $b23;
        boolean $z0, $z1;
        org.tukaani.xz.check.Check $r6;
        org.tukaani.xz.index.BlockInfo $r1, $r2, $r3, $r5, $r7, $r10, $r11;
        long $l0, $l1, $l3, $l4, $l5, $l7, $l9, $l10, $l11, l12, $l13, $l15, $l16, $l17, $l19, $l20, $l21, $l22;
        int $i8, $i24, $i25, $i26, $i27;
        org.tukaani.xz.BlockInputStream $r8;
        org.tukaani.xz.SeekableXZInputStream r0;
        org.tukaani.xz.CorruptedInputException $r12;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

        $z0 = r0.<org.tukaani.xz.SeekableXZInputStream: boolean seekNeeded>;

        if $z0 != 0 goto label2;

        $r10 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo curBlockInfo>;

        $z1 = virtualinvoke $r10.<org.tukaani.xz.index.BlockInfo: boolean hasNext()>();

        if $z1 == 0 goto label1;

        $r11 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo curBlockInfo>;

        virtualinvoke $r11.<org.tukaani.xz.index.BlockInfo: void setNext()>();

        specialinvoke r0.<org.tukaani.xz.SeekableXZInputStream: void initBlockDecoder()>();

        return;

     label1:
        $l20 = r0.<org.tukaani.xz.SeekableXZInputStream: long curPos>;

        r0.<org.tukaani.xz.SeekableXZInputStream: long seekPos> = $l20;

     label2:
        r0.<org.tukaani.xz.SeekableXZInputStream: boolean seekNeeded> = 0;

        $l1 = r0.<org.tukaani.xz.SeekableXZInputStream: long seekPos>;

        $l0 = r0.<org.tukaani.xz.SeekableXZInputStream: long uncompressedSize>;

        $b2 = $l1 cmp $l0;

        $i24 = (int) $b2;

        if $i24 < 0 goto label3;

        $l19 = r0.<org.tukaani.xz.SeekableXZInputStream: long seekPos>;

        r0.<org.tukaani.xz.SeekableXZInputStream: long curPos> = $l19;

        r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder> = null;

        r0.<org.tukaani.xz.SeekableXZInputStream: boolean endReached> = 1;

        return;

     label3:
        r0.<org.tukaani.xz.SeekableXZInputStream: boolean endReached> = 0;

        $r1 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo curBlockInfo>;

        $l3 = r0.<org.tukaani.xz.SeekableXZInputStream: long seekPos>;

        specialinvoke r0.<org.tukaani.xz.SeekableXZInputStream: void locateBlockByPos(org.tukaani.xz.index.BlockInfo,long)>($r1, $l3);

        $l5 = r0.<org.tukaani.xz.SeekableXZInputStream: long curPos>;

        $r2 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo curBlockInfo>;

        $l4 = $r2.<org.tukaani.xz.index.BlockInfo: long uncompressedOffset>;

        $b6 = $l5 cmp $l4;

        $i25 = (int) $b6;

        if $i25 <= 0 goto label4;

        $l17 = r0.<org.tukaani.xz.SeekableXZInputStream: long curPos>;

        $l16 = r0.<org.tukaani.xz.SeekableXZInputStream: long seekPos>;

        $b18 = $l17 cmp $l16;

        $i26 = (int) $b18;

        if $i26 <= 0 goto label5;

     label4:
        $r4 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.SeekableInputStream in>;

        $r3 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo curBlockInfo>;

        $l7 = $r3.<org.tukaani.xz.index.BlockInfo: long compressedOffset>;

        virtualinvoke $r4.<org.tukaani.xz.SeekableInputStream: void seek(long)>($l7);

        $r5 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo curBlockInfo>;

        $i8 = virtualinvoke $r5.<org.tukaani.xz.index.BlockInfo: int getCheckType()>();

        $r6 = staticinvoke <org.tukaani.xz.check.Check: org.tukaani.xz.check.Check getInstance(int)>($i8);

        r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.check.Check check> = $r6;

        specialinvoke r0.<org.tukaani.xz.SeekableXZInputStream: void initBlockDecoder()>();

        $r7 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo curBlockInfo>;

        $l9 = $r7.<org.tukaani.xz.index.BlockInfo: long uncompressedOffset>;

        r0.<org.tukaani.xz.SeekableXZInputStream: long curPos> = $l9;

     label5:
        $l21 = r0.<org.tukaani.xz.SeekableXZInputStream: long seekPos>;

        $l22 = r0.<org.tukaani.xz.SeekableXZInputStream: long curPos>;

        $b23 = $l21 cmp $l22;

        $i27 = (int) $b23;

        if $i27 <= 0 goto label7;

        $l11 = r0.<org.tukaani.xz.SeekableXZInputStream: long seekPos>;

        $l10 = r0.<org.tukaani.xz.SeekableXZInputStream: long curPos>;

        l12 = $l11 - $l10;

        $r8 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder>;

        $l13 = virtualinvoke $r8.<org.tukaani.xz.BlockInputStream: long skip(long)>(l12);

        $b14 = $l13 cmp l12;

        if $b14 == 0 goto label6;

        $r12 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r12.<org.tukaani.xz.CorruptedInputException: void <init>()>();

        throw $r12;

     label6:
        $l15 = r0.<org.tukaani.xz.SeekableXZInputStream: long seekPos>;

        r0.<org.tukaani.xz.SeekableXZInputStream: long curPos> = $l15;

     label7:
        return;
    }

    private void locateBlockByPos(org.tukaani.xz.index.BlockInfo, long)
    {
        java.lang.IndexOutOfBoundsException $r15;
        byte $b1, $b3, $b7, $b9, $b11, $b14;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.tukaani.xz.index.BlockInfo r9;
        long l0, $l2, $l4, $l5, $l6, $l8, $l10, $l12, $l13;
        java.lang.AssertionError $r16, $r17, $r18, $r19;
        java.util.ArrayList $r6;
        org.tukaani.xz.index.IndexDecoder $r8;
        java.lang.StringBuffer $r2, $r3, $r14;
        int i15, $i16, $i17, $i18, $i19, $i20;
        java.lang.String $r4;
        org.tukaani.xz.SeekableXZInputStream r5;
        java.lang.Object $r7;

        r5 := @this: org.tukaani.xz.SeekableXZInputStream;

        r9 := @parameter0: org.tukaani.xz.index.BlockInfo;

        l0 := @parameter1: long;

        $b1 = l0 cmp 0L;

        $i16 = (int) $b1;

        if $i16 < 0 goto label1;

        $l2 = r5.<org.tukaani.xz.SeekableXZInputStream: long uncompressedSize>;

        $b3 = l0 cmp $l2;

        $i17 = (int) $b3;

        if $i17 < 0 goto label2;

     label1:
        $r15 = new java.lang.IndexOutOfBoundsException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid uncompressed position: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r15;

     label2:
        i15 = 0;

     label3:
        $r6 = r5.<org.tukaani.xz.SeekableXZInputStream: java.util.ArrayList streams>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i15);

        $r8 = (org.tukaani.xz.index.IndexDecoder) $r7;

        $z0 = virtualinvoke $r8.<org.tukaani.xz.index.IndexDecoder: boolean hasUncompressedOffset(long)>(l0);

        if $z0 == 0 goto label4;

        goto label5;

     label4:
        i15 = i15 + 1;

        goto label3;

     label5:
        virtualinvoke $r8.<org.tukaani.xz.index.IndexDecoder: void locateBlock(org.tukaani.xz.index.BlockInfo,long)>(r9, l0);

        $z1 = <org.tukaani.xz.SeekableXZInputStream: boolean $assertionsDisabled>;

        if $z1 != 0 goto label6;

        $l12 = r9.<org.tukaani.xz.index.BlockInfo: long compressedOffset>;

        $l13 = $l12 & 3L;

        $b14 = $l13 cmp 0L;

        if $b14 == 0 goto label6;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label6:
        $z2 = <org.tukaani.xz.SeekableXZInputStream: boolean $assertionsDisabled>;

        if $z2 != 0 goto label7;

        $l10 = r9.<org.tukaani.xz.index.BlockInfo: long uncompressedSize>;

        $b11 = $l10 cmp 0L;

        $i18 = (int) $b11;

        if $i18 > 0 goto label7;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label7:
        $z3 = <org.tukaani.xz.SeekableXZInputStream: boolean $assertionsDisabled>;

        if $z3 != 0 goto label8;

        $l8 = r9.<org.tukaani.xz.index.BlockInfo: long uncompressedOffset>;

        $b9 = l0 cmp $l8;

        $i19 = (int) $b9;

        if $i19 >= 0 goto label8;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label8:
        $z4 = <org.tukaani.xz.SeekableXZInputStream: boolean $assertionsDisabled>;

        if $z4 != 0 goto label9;

        $l5 = r9.<org.tukaani.xz.index.BlockInfo: long uncompressedOffset>;

        $l4 = r9.<org.tukaani.xz.index.BlockInfo: long uncompressedSize>;

        $l6 = $l5 + $l4;

        $b7 = l0 cmp $l6;

        $i20 = (int) $b7;

        if $i20 < 0 goto label9;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label9:
        return;
    }

    private void locateBlockByNumber(org.tukaani.xz.index.BlockInfo, int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.tukaani.xz.SeekableXZInputStream r5;
        org.tukaani.xz.index.BlockInfo r6;
        java.util.ArrayList $r7;
        org.tukaani.xz.index.IndexDecoder $r9;
        java.lang.StringBuffer $r1, $r2, $r3;
        int i0, $i1, $i2, i3;
        java.lang.Object $r8;
        java.lang.String $r4;
        boolean $z0;

        r5 := @this: org.tukaani.xz.SeekableXZInputStream;

        r6 := @parameter0: org.tukaani.xz.index.BlockInfo;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        $i1 = r5.<org.tukaani.xz.SeekableXZInputStream: int blockCount>;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid XZ Block number: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        $i2 = r6.<org.tukaani.xz.index.BlockInfo: int blockNumber>;

        if $i2 != i0 goto label3;

        return;

     label3:
        i3 = 0;

     label4:
        $r7 = r5.<org.tukaani.xz.SeekableXZInputStream: java.util.ArrayList streams>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r9 = (org.tukaani.xz.index.IndexDecoder) $r8;

        $z0 = virtualinvoke $r9.<org.tukaani.xz.index.IndexDecoder: boolean hasRecord(int)>(i0);

        if $z0 == 0 goto label5;

        virtualinvoke $r9.<org.tukaani.xz.index.IndexDecoder: void setBlockInfo(org.tukaani.xz.index.BlockInfo,int)>(r6, i0);

        return;

     label5:
        i3 = i3 + 1;

        goto label4;
    }

    private void initBlockDecoder() throws java.io.IOException
    {
        org.tukaani.xz.check.Check $r4;
        org.tukaani.xz.SeekableInputStream $r5;
        org.tukaani.xz.index.BlockInfo $r2, $r3;
        long $l0, $l1;
        java.lang.AssertionError $r10;
        org.tukaani.xz.MemoryLimitException $r8, $r9;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.tukaani.xz.BlockInputStream $r1;
        boolean $z0;
        org.tukaani.xz.SeekableXZInputStream r0;
        org.tukaani.xz.IndexIndicatorException $r6;
        org.tukaani.xz.CorruptedInputException $r7;

        r0 := @this: org.tukaani.xz.SeekableXZInputStream;

     label1:
        r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder> = null;

        $r1 = new org.tukaani.xz.BlockInputStream;

        $r5 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.SeekableInputStream in>;

        $r4 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.check.Check check>;

        $i2 = r0.<org.tukaani.xz.SeekableXZInputStream: int memoryLimit>;

        $r2 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo curBlockInfo>;

        $l1 = $r2.<org.tukaani.xz.index.BlockInfo: long unpaddedSize>;

        $r3 = r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.index.BlockInfo curBlockInfo>;

        $l0 = $r3.<org.tukaani.xz.index.BlockInfo: long uncompressedSize>;

        specialinvoke $r1.<org.tukaani.xz.BlockInputStream: void <init>(java.io.InputStream,org.tukaani.xz.check.Check,int,long,long)>($r5, $r4, $i2, $l1, $l0);

        r0.<org.tukaani.xz.SeekableXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder> = $r1;

     label2:
        goto label6;

     label3:
        $r8 := @caughtexception;

        $z0 = <org.tukaani.xz.SeekableXZInputStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $i9 = r0.<org.tukaani.xz.SeekableXZInputStream: int memoryLimit>;

        if $i9 >= 0 goto label4;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label4:
        $r9 = new org.tukaani.xz.MemoryLimitException;

        $i3 = virtualinvoke $r8.<org.tukaani.xz.MemoryLimitException: int getMemoryNeeded()>();

        $i4 = r0.<org.tukaani.xz.SeekableXZInputStream: int indexMemoryUsage>;

        $i8 = $i3 + $i4;

        $i6 = r0.<org.tukaani.xz.SeekableXZInputStream: int memoryLimit>;

        $i5 = r0.<org.tukaani.xz.SeekableXZInputStream: int indexMemoryUsage>;

        $i7 = $i6 + $i5;

        specialinvoke $r9.<org.tukaani.xz.MemoryLimitException: void <init>(int,int)>($i8, $i7);

        throw $r9;

     label5:
        $r6 := @caughtexception;

        $r7 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r7.<org.tukaani.xz.CorruptedInputException: void <init>()>();

        throw $r7;

     label6:
        return;

        catch org.tukaani.xz.MemoryLimitException from label1 to label2 with label3;
        catch org.tukaani.xz.IndexIndicatorException from label1 to label2 with label5;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.tukaani.xz.SeekableXZInputStream: java.lang.Class class$org$tukaani$xz$SeekableXZInputStream>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.tukaani.xz.SeekableXZInputStream: java.lang.Class class$(java.lang.String)>("org.tukaani.xz.SeekableXZInputStream");

        <org.tukaani.xz.SeekableXZInputStream: java.lang.Class class$org$tukaani$xz$SeekableXZInputStream> = $r1;

        goto label2;

     label1:
        $r1 = <org.tukaani.xz.SeekableXZInputStream: java.lang.Class class$org$tukaani$xz$SeekableXZInputStream>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.tukaani.xz.SeekableXZInputStream: boolean $assertionsDisabled> = $z1;

        return;
    }
}
