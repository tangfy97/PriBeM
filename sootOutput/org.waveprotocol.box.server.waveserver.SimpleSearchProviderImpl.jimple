public class org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl extends java.lang.Object implements org.waveprotocol.box.server.waveserver.SearchProvider
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private final org.waveprotocol.box.server.waveserver.WaveDigester digester;
    private final org.waveprotocol.box.server.waveserver.WaveMap waveMap;
    private final org.waveprotocol.wave.model.wave.ParticipantId sharedDomainParticipantId;
    private final org.waveprotocol.box.server.waveserver.PerUserWaveViewProvider waveViewProvider;

    public void <init>(java.lang.String, org.waveprotocol.box.server.waveserver.WaveDigester, org.waveprotocol.box.server.waveserver.WaveMap, org.waveprotocol.box.server.waveserver.PerUserWaveViewProvider)
    {
        org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl r0;
        org.waveprotocol.box.server.waveserver.PerUserWaveViewProvider r3;
        java.lang.String r4;
        org.waveprotocol.wave.model.wave.ParticipantId $r5;
        org.waveprotocol.box.server.waveserver.WaveDigester r1;
        org.waveprotocol.box.server.waveserver.WaveMap r2;

        r0 := @this: org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.box.server.waveserver.WaveDigester;

        r2 := @parameter2: org.waveprotocol.box.server.waveserver.WaveMap;

        r3 := @parameter3: org.waveprotocol.box.server.waveserver.PerUserWaveViewProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.box.server.waveserver.WaveDigester digester> = r1;

        r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.box.server.waveserver.WaveMap waveMap> = r2;

        r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.box.server.waveserver.PerUserWaveViewProvider waveViewProvider> = r3;

        $r5 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantIdUtil: org.waveprotocol.wave.model.wave.ParticipantId makeUnsafeSharedDomainParticipantId(java.lang.String)>(r4);

        r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.wave.model.wave.ParticipantId sharedDomainParticipantId> = $r5;

        return;
    }

    public com.google.wave.api.SearchResult search(org.waveprotocol.wave.model.wave.ParticipantId, java.lang.String, int, int)
    {
        org.waveprotocol.wave.model.wave.ParticipantId r6;
        java.util.Map $r14, $r24;
        org.waveprotocol.wave.util.logging.Log $r1, $r27, $r39, $r50;
        org.waveprotocol.box.server.waveserver.TokenQueryType $r15, $r17, $r19;
        java.lang.StringBuilder $r0, $r2, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r26, $r28, $r29, $r30, $r31, $r32, $r33, $r38, $r40, $r42, $r43, $r44, $r49, $r51, $r53;
        org.waveprotocol.wave.model.wave.InvalidParticipantAddress $r37;
        java.lang.String r3, $r13, $r16, $r34, $r41, $r45, $r52, $r54;
        org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl r21;
        org.waveprotocol.box.server.waveserver.WaveDigester $r35, $r46, $r55;
        org.waveprotocol.box.server.waveserver.QueryHelper$InvalidQueryException $r48;
        boolean $z0, $z2, $z3;
        com.google.common.base.Function $r23;
        java.util.Collection $r25;
        java.util.List $r18, $r20;
        com.google.common.collect.Multimap $r22;
        int i0, i1, $i2, $i3, $i4;
        com.google.wave.api.SearchResult $r36, $r47, $r56;

        r21 := @this: org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl;

        r6 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = <org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Search query \'");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from user: ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i2 = i0 + i1;

        $i3 = $i2 - 1;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<org.waveprotocol.wave.util.logging.Log: void fine(java.lang.String)>($r13);

     label1:
        $r14 = staticinvoke <org.waveprotocol.box.server.waveserver.QueryHelper: java.util.Map parseQuery(java.lang.String)>(r3);

     label2:
        goto label4;

     label3:
        $r48 := @caughtexception;

        $r50 = <org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Query. ");

        $r52 = virtualinvoke $r48.<org.waveprotocol.box.server.waveserver.QueryHelper$InvalidQueryException: java.lang.String getMessage()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r50.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r54);

        $r55 = r21.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.box.server.waveserver.WaveDigester digester>;

        $r56 = virtualinvoke $r55.<org.waveprotocol.box.server.waveserver.WaveDigester: com.google.wave.api.SearchResult generateSearchResult(org.waveprotocol.wave.model.wave.ParticipantId,java.lang.String,java.util.Collection)>(r6, r3, null);

        return $r56;

     label4:
        $r15 = <org.waveprotocol.box.server.waveserver.TokenQueryType: org.waveprotocol.box.server.waveserver.TokenQueryType IN>;

        $z0 = interfaceinvoke $r14.<java.util.Map: boolean containsKey(java.lang.Object)>($r15);

        if $z0 != 0 goto label5;

        $z3 = 1;

        $z2 = 1;

        goto label6;

     label5:
        $z3 = 0;

        $z2 = 0;

     label6:
        $r16 = virtualinvoke r6.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getDomain()>();

        $r17 = <org.waveprotocol.box.server.waveserver.TokenQueryType: org.waveprotocol.box.server.waveserver.TokenQueryType WITH>;

        $r18 = staticinvoke <org.waveprotocol.box.server.waveserver.QueryHelper: java.util.List buildValidatedParticipantIds(java.util.Map,org.waveprotocol.box.server.waveserver.TokenQueryType,java.lang.String)>($r14, $r17, $r16);

        $r19 = <org.waveprotocol.box.server.waveserver.TokenQueryType: org.waveprotocol.box.server.waveserver.TokenQueryType CREATOR>;

        $r20 = staticinvoke <org.waveprotocol.box.server.waveserver.QueryHelper: java.util.List buildValidatedParticipantIds(java.util.Map,org.waveprotocol.box.server.waveserver.TokenQueryType,java.lang.String)>($r14, $r19, $r16);

     label7:
        goto label9;

     label8:
        $r37 := @caughtexception;

        $r39 = <org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid participantId: ");

        $r41 = virtualinvoke $r37.<org.waveprotocol.wave.model.wave.InvalidParticipantAddress: java.lang.String getAddress()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in query: ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r39.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r45);

        $r46 = r21.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.box.server.waveserver.WaveDigester digester>;

        $r47 = virtualinvoke $r46.<org.waveprotocol.box.server.waveserver.WaveDigester: com.google.wave.api.SearchResult generateSearchResult(org.waveprotocol.wave.model.wave.ParticipantId,java.lang.String,java.util.Collection)>(r6, r3, null);

        return $r47;

     label9:
        $r22 = specialinvoke r21.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: com.google.common.collect.Multimap createWavesViewToFilter(org.waveprotocol.wave.model.wave.ParticipantId,boolean)>(r6, $z2);

        $r23 = specialinvoke r21.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: com.google.common.base.Function createFilterWaveletsFunction(org.waveprotocol.wave.model.wave.ParticipantId,boolean,java.util.List,java.util.List)>(r6, $z3, $r18, $r20);

        $r24 = specialinvoke r21.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: java.util.Map filterWavesViewBySearchCriteria(com.google.common.base.Function,com.google.common.collect.Multimap)>($r23, $r22);

        $r25 = specialinvoke r21.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: java.util.Collection computeSearchResult(org.waveprotocol.wave.model.wave.ParticipantId,int,int,java.util.Map,java.util.Map)>(r6, i0, i1, $r14, $r24);

        $r27 = <org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Search response to \'");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $i4 = interfaceinvoke $r25.<java.util.Collection: int size()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" results, user: ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r27.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r34);

        $r35 = r21.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.box.server.waveserver.WaveDigester digester>;

        $r36 = virtualinvoke $r35.<org.waveprotocol.box.server.waveserver.WaveDigester: com.google.wave.api.SearchResult generateSearchResult(org.waveprotocol.wave.model.wave.ParticipantId,java.lang.String,java.util.Collection)>(r6, r3, $r25);

        return $r36;

        catch org.waveprotocol.box.server.waveserver.QueryHelper$InvalidQueryException from label1 to label2 with label3;
        catch org.waveprotocol.wave.model.wave.InvalidParticipantAddress from label6 to label7 with label8;
    }

    private com.google.common.collect.Multimap createWavesViewToFilter(org.waveprotocol.wave.model.wave.ParticipantId, boolean)
    {
        org.waveprotocol.wave.model.wave.ParticipantId r2, $r5;
        com.google.common.collect.Multimap $r4, $r7;
        org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl r1;
        com.google.common.collect.HashMultimap $r0;
        org.waveprotocol.box.server.waveserver.PerUserWaveViewProvider $r3, $r6;
        boolean z0;

        r1 := @this: org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        z0 := @parameter1: boolean;

        $r0 = staticinvoke <com.google.common.collect.HashMultimap: com.google.common.collect.HashMultimap create()>();

        $r3 = r1.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.box.server.waveserver.PerUserWaveViewProvider waveViewProvider>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.box.server.waveserver.PerUserWaveViewProvider: com.google.common.collect.Multimap retrievePerUserWaveView(org.waveprotocol.wave.model.wave.ParticipantId)>(r2);

        interfaceinvoke $r0.<com.google.common.collect.Multimap: boolean putAll(com.google.common.collect.Multimap)>($r4);

        if z0 == 0 goto label1;

        $r6 = r1.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.box.server.waveserver.PerUserWaveViewProvider waveViewProvider>;

        $r5 = r1.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.wave.model.wave.ParticipantId sharedDomainParticipantId>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.box.server.waveserver.PerUserWaveViewProvider: com.google.common.collect.Multimap retrievePerUserWaveView(org.waveprotocol.wave.model.wave.ParticipantId)>($r5);

        interfaceinvoke $r0.<com.google.common.collect.Multimap: boolean putAll(com.google.common.collect.Multimap)>($r7);

     label1:
        return $r0;
    }

    private com.google.common.base.Function createFilterWaveletsFunction(org.waveprotocol.wave.model.wave.ParticipantId, boolean, java.util.List, java.util.List)
    {
        org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl r1;
        org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1 $r0;
        java.util.List r3, r4;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        boolean z0;

        r1 := @this: org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        z0 := @parameter1: boolean;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        $r0 = new org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1;

        specialinvoke $r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1: void <init>(org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl,org.waveprotocol.wave.model.wave.ParticipantId,java.util.List,java.util.List,boolean)>(r1, r2, r3, r4, z0);

        return $r0;
    }

    private java.util.Map filterWavesViewBySearchCriteria(com.google.common.base.Function, com.google.common.collect.Multimap)
    {
        org.waveprotocol.wave.util.logging.Log $r19, $r26;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.id.WaveletName $r10, $r21;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainer r30;
        com.google.common.base.Function r13;
        org.waveprotocol.wave.model.id.WaveId r5;
        java.util.Collection $r6;
        java.util.Set $r2;
        java.lang.StringBuilder $r18, $r20, $r22;
        org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl r29;
        java.lang.Object[] $r25;
        org.waveprotocol.wave.model.id.WaveletId r9;
        com.google.common.collect.Multimap r1;
        java.util.LinkedHashMap $r0;
        java.lang.Boolean $r15;
        java.lang.String $r23, $r27, $r28;
        java.util.Iterator $r3, $r7;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r16;
        org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl r11;
        org.waveprotocol.box.server.waveserver.WaveletStateException $r17, $r24;
        java.lang.Object $r4, $r8, $r14;
        org.waveprotocol.box.server.waveserver.WaveMap $r12;

        r11 := @this: org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl;

        r13 := @parameter0: com.google.common.base.Function;

        r1 := @parameter1: com.google.common.collect.Multimap;

        $r0 = staticinvoke <com.google.common.collect.Maps: java.util.LinkedHashMap newLinkedHashMap()>();

        $r2 = interfaceinvoke r1.<com.google.common.collect.Multimap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.id.WaveId) $r4;

        $r6 = interfaceinvoke r1.<com.google.common.collect.Multimap: java.util.Collection get(java.lang.Object)>(r5);

        r29 = null;

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.waveprotocol.wave.model.id.WaveletId) $r8;

        r30 = null;

        $r10 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>(r5, r9);

     label03:
        $r12 = r11.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.box.server.waveserver.WaveMap waveMap>;

        r30 = virtualinvoke $r12.<org.waveprotocol.box.server.waveserver.WaveMap: org.waveprotocol.box.server.waveserver.LocalWaveletContainer getLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)>($r10);

     label04:
        goto label06;

     label05:
        $r24 := @caughtexception;

        $r26 = <org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r25 = newarray (java.lang.Object)[1];

        $r27 = virtualinvoke $r10.<org.waveprotocol.wave.model.id.WaveletName: java.lang.String toString()>();

        $r25[0] = $r27;

        $r28 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to get local wavelet %s", $r25);

        virtualinvoke $r26.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String,java.lang.Throwable)>($r28, $r24);

     label06:
        if r30 == null goto label07;

        $r14 = interfaceinvoke r30.<org.waveprotocol.box.server.waveserver.WaveletContainer: java.lang.Object applyFunction(com.google.common.base.Function)>(r13);

        $r15 = (java.lang.Boolean) $r14;

        $z1 = virtualinvoke $r15.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label08;

     label07:
        goto label02;

     label08:
        if r29 != null goto label09;

        r29 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl: org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl create(org.waveprotocol.wave.model.id.WaveId)>(r5);

     label09:
        $r16 = interfaceinvoke r30.<org.waveprotocol.box.server.waveserver.WaveletContainer: org.waveprotocol.wave.model.wave.data.ObservableWaveletData copyWaveletData()>();

        interfaceinvoke r29.<org.waveprotocol.wave.model.wave.data.WaveViewData: void addWavelet(org.waveprotocol.wave.model.wave.data.ObservableWaveletData)>($r16);

     label10:
        goto label12;

     label11:
        $r17 := @caughtexception;

        $r19 = <org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to access wavelet ");

        $r21 = interfaceinvoke r30.<org.waveprotocol.box.server.waveserver.WaveletContainer: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>($r23, $r17);

     label12:
        goto label02;

     label13:
        if r29 == null goto label14;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r29);

     label14:
        goto label01;

     label15:
        return $r0;

        catch org.waveprotocol.box.server.waveserver.WaveletStateException from label03 to label04 with label05;
        catch org.waveprotocol.box.server.waveserver.WaveletStateException from label06 to label07 with label11;
        catch org.waveprotocol.box.server.waveserver.WaveletStateException from label08 to label10 with label11;
    }

    private boolean isWaveletMatchesCriteria(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.wave.ParticipantId, java.util.List, java.util.List, boolean) throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        org.waveprotocol.wave.model.id.WaveletId $r1;
        org.waveprotocol.wave.model.wave.ParticipantId r8, r9, $r12, $r13, r15, r16;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r0;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Iterator $r3, $r5;
        java.util.Set $r7, $r10;
        org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl r14;
        java.util.List r2, r4;
        java.lang.Object $r6, $r11;

        r14 := @this: org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r8 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r9 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r4 := @parameter3: java.util.List;

        r2 := @parameter4: java.util.List;

        z1 := @parameter5: boolean;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isUserDataWavelet(org.waveprotocol.wave.model.id.WaveletId)>($r1);

        if $z0 == 0 goto label1;

        $r13 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $z6 = virtualinvoke $r13.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>(r8);

        if $z6 == 0 goto label1;

        return 1;

     label1:
        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z7 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label4;

        $r11 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.waveprotocol.wave.model.wave.ParticipantId) $r11;

        $r12 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $z5 = virtualinvoke r15.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>($r12);

        if $z5 != 0 goto label3;

        return 0;

     label3:
        goto label2;

     label4:
        if z1 != 0 goto label5;

        $r10 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: java.util.Set getParticipants()>();

        $z4 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>(r8);

        if $z4 != 0 goto label5;

        return 0;

     label5:
        if z1 == 0 goto label6;

        $z3 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: boolean checkAccessPermission(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.wave.ParticipantId)>(r0, r8, r9);

        if $z3 != 0 goto label6;

        return 0;

     label6:
        $r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z8 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label9;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.waveprotocol.wave.model.wave.ParticipantId) $r6;

        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: java.util.Set getParticipants()>();

        $z2 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r16);

        if $z2 != 0 goto label8;

        return 0;

     label8:
        goto label7;

     label9:
        return 1;
    }

    private java.util.Collection computeSearchResult(org.waveprotocol.wave.model.wave.ParticipantId, int, int, java.util.Map, java.util.Map)
    {
        java.util.Collection $r1, $r4;
        org.waveprotocol.wave.model.wave.ParticipantId r7;
        org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl r6;
        java.util.List $r5, r8;
        com.google.common.collect.Ordering $r3;
        java.util.Map r0, r2;
        int $i0, i1, i2, $i3, $i4;

        r6 := @this: org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl;

        r7 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r2 := @parameter3: java.util.Map;

        r0 := @parameter4: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Collection values()>();

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        if $i0 >= i1 goto label1;

        r8 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        goto label2;

     label1:
        $i3 = i1 + i2;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i0);

        $r3 = staticinvoke <org.waveprotocol.box.server.waveserver.QueryHelper: com.google.common.collect.Ordering computeSorter(java.util.Map)>(r2);

        $r4 = interfaceinvoke r0.<java.util.Map: java.util.Collection values()>();

        $r5 = virtualinvoke $r3.<com.google.common.collect.Ordering: java.util.List sortedCopy(java.lang.Iterable)>($r4);

        r8 = interfaceinvoke $r5.<java.util.List: java.util.List subList(int,int)>(i1, $i4);

     label2:
        return r8;
    }

    static org.waveprotocol.wave.model.wave.ParticipantId access$000(org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl)
    {
        org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.wave.model.wave.ParticipantId sharedDomainParticipantId>;

        return $r1;
    }

    static boolean access$100(org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl, org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.wave.ParticipantId, java.util.List, java.util.List, boolean) throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        org.waveprotocol.wave.model.wave.ParticipantId r2, r3;
        org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl r0;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r1;
        java.util.List r4, r5;
        boolean z0, $z1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r2 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r3 := @parameter3: org.waveprotocol.wave.model.wave.ParticipantId;

        r4 := @parameter4: java.util.List;

        r5 := @parameter5: java.util.List;

        z0 := @parameter6: boolean;

        $z1 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: boolean isWaveletMatchesCriteria(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.wave.ParticipantId,java.util.List,java.util.List,boolean)>(r1, r2, r3, r4, r5, z0);

        return $z1;
    }

    static org.waveprotocol.wave.util.logging.Log access$200()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = <org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/SimpleSearchProviderImpl;");

        <org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
