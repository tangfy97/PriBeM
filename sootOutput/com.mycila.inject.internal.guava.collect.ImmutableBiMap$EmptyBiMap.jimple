class com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap extends com.mycila.inject.internal.guava.collect.ImmutableBiMap
{

    void <init>()
    {
        com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableBiMap: void <init>()>();

        return;
    }

    com.mycila.inject.internal.guava.collect.ImmutableMap delegate()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r0;
        com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableMap of()>();

        return $r0;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableBiMap inverse()
    {
        com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap;

        return r0;
    }

    boolean isPartialView()
    {
        com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap;

        return 0;
    }

    java.lang.Object readResolve()
    {
        com.mycila.inject.internal.guava.collect.ImmutableBiMap $r0;
        com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableBiMap: com.mycila.inject.internal.guava.collect.ImmutableBiMap access$000()>();

        return $r0;
    }

    public volatile com.mycila.inject.internal.guava.collect.BiMap inverse()
    {
        com.mycila.inject.internal.guava.collect.ImmutableBiMap $r1;
        com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap: com.mycila.inject.internal.guava.collect.ImmutableBiMap inverse()>();

        return $r1;
    }

    public volatile java.util.Set values()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1;
        com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableBiMap: com.mycila.inject.internal.guava.collect.ImmutableSet values()>();

        return $r1;
    }

    public volatile java.util.Set entrySet()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1;
        com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableBiMap: com.mycila.inject.internal.guava.collect.ImmutableSet entrySet()>();

        return $r1;
    }

    public volatile java.util.Collection values()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1;
        com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableBiMap: com.mycila.inject.internal.guava.collect.ImmutableSet values()>();

        return $r1;
    }

    public volatile java.util.Set keySet()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1;
        com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableBiMap: com.mycila.inject.internal.guava.collect.ImmutableSet keySet()>();

        return $r1;
    }

    public volatile com.mycila.inject.internal.guava.collect.ImmutableCollection values()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1;
        com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableBiMap$EmptyBiMap;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableBiMap: com.mycila.inject.internal.guava.collect.ImmutableSet values()>();

        return $r1;
    }
}
