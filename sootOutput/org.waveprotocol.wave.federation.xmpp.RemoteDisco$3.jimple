class org.waveprotocol.wave.federation.xmpp.RemoteDisco$3 extends java.lang.Object implements java.lang.Runnable
{
    int attempt;
    final org.waveprotocol.wave.federation.xmpp.PacketCallback callback;
    final org.xmpp.packet.IQ val$request;
    final org.waveprotocol.wave.federation.xmpp.RemoteDisco this$0;

    void <init>(org.waveprotocol.wave.federation.xmpp.RemoteDisco, org.xmpp.packet.IQ)
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$3$1 $r3;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r1;
        org.xmpp.packet.IQ r2;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$3 r0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco$3;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        r2 := @parameter1: org.xmpp.packet.IQ;

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: org.waveprotocol.wave.federation.xmpp.RemoteDisco this$0> = r1;

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: org.xmpp.packet.IQ val$request> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: int attempt> = 0;

        $r3 = new org.waveprotocol.wave.federation.xmpp.RemoteDisco$3$1;

        specialinvoke $r3.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3$1: void <init>(org.waveprotocol.wave.federation.xmpp.RemoteDisco$3)>(r0);

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: org.waveprotocol.wave.federation.xmpp.PacketCallback callback> = $r3;

        return;
    }

    void retry()
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$3 r0;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco $r1, $r7, $r14, $r19;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r3, $r8, $r13;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code $r18;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r20;
        java.util.logging.Logger $r4;
        org.waveprotocol.wave.federation.xmpp.PacketCallback $r16;
        org.waveprotocol.wave.federation.xmpp.XmppManager $r15;
        java.lang.StringBuilder $r5, $r6, $r9, $r10, $r11, $r12;
        org.xmpp.packet.IQ $r2, $r17;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco$3;

        $i0 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: int attempt>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: int attempt> = $i1;

        $i2 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: int attempt>;

        if $i2 <= 5 goto label1;

        $r19 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: org.waveprotocol.wave.federation.xmpp.RemoteDisco this$0>;

        $r18 = <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code REMOTE_SERVER_TIMEOUT>;

        $r20 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError newFederationError(org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code)>($r18);

        virtualinvoke $r19.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: boolean finish(java.lang.String,org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>(null, $r20);

        goto label2;

     label1:
        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: org.waveprotocol.wave.federation.xmpp.RemoteDisco this$0>;

        $i3 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: int attempt>;

        $i4 = staticinvoke <org.waveprotocol.wave.federation.xmpp.RemoteDisco: int access$300(org.waveprotocol.wave.federation.xmpp.RemoteDisco,int)>($r1, $i3);

        i5 = $i4 / 1000;

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: org.xmpp.packet.IQ val$request>;

        $r3 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.lang.String generateUniqueId()>();

        virtualinvoke $r2.<org.xmpp.packet.IQ: void setID(java.lang.String)>($r3);

        $r4 = staticinvoke <org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.logging.Logger access$200()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending disco items request for: ");

        $r7 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: org.waveprotocol.wave.federation.xmpp.RemoteDisco this$0>;

        $r8 = staticinvoke <org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String access$100(org.waveprotocol.wave.federation.xmpp.RemoteDisco)>($r7);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timeout ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void info(java.lang.String)>($r13);

        $r14 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: org.waveprotocol.wave.federation.xmpp.RemoteDisco this$0>;

        $r15 = staticinvoke <org.waveprotocol.wave.federation.xmpp.RemoteDisco: org.waveprotocol.wave.federation.xmpp.XmppManager access$400(org.waveprotocol.wave.federation.xmpp.RemoteDisco)>($r14);

        $r17 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: org.xmpp.packet.IQ val$request>;

        $r16 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: org.waveprotocol.wave.federation.xmpp.PacketCallback callback>;

        virtualinvoke $r15.<org.waveprotocol.wave.federation.xmpp.XmppManager: void send(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.xmpp.PacketCallback,int)>($r17, $r16, i5);

     label2:
        return;
    }

    public void run()
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$3 r0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco$3;

        virtualinvoke r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: void retry()>();

        return;
    }
}
