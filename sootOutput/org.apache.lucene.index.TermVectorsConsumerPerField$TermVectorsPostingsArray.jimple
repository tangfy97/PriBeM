final class org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray extends org.apache.lucene.index.ParallelPostingsArray
{
    int[] freqs;
    int[] lastOffsets;
    int[] lastPositions;
    static final boolean $assertionsDisabled;

    public void <init>(int)
    {
        org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray r0;
        int[] $r1, $r2, $r3;
        int i0;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.index.ParallelPostingsArray: void <init>(int)>(i0);

        $r1 = newarray (int)[i0];

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] freqs> = $r1;

        $r2 = newarray (int)[i0];

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] lastOffsets> = $r2;

        $r3 = newarray (int)[i0];

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] lastPositions> = $r3;

        return;
    }

    org.apache.lucene.index.ParallelPostingsArray newInstance(int)
    {
        int i0;
        org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray $r0, r1;

        r1 := @this: org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray;

        i0 := @parameter0: int;

        $r0 = new org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray;

        specialinvoke $r0.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: void <init>(int)>(i0);

        return $r0;
    }

    void copyTo(org.apache.lucene.index.ParallelPostingsArray, int)
    {
        org.apache.lucene.index.ParallelPostingsArray r0;
        java.lang.AssertionError $r9;
        int[] $r2, $r3, $r4, $r5, $r6, $r7;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray r1, $r8;

        r1 := @this: org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray;

        r0 := @parameter0: org.apache.lucene.index.ParallelPostingsArray;

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray;

        if $z1 != 0 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $r8 = (org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray) r0;

        specialinvoke r1.<org.apache.lucene.index.ParallelPostingsArray: void copyTo(org.apache.lucene.index.ParallelPostingsArray,int)>(r0, i0);

        $r3 = r1.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] freqs>;

        $r2 = $r8.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] freqs>;

        $i1 = r1.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, $i1);

        $r5 = r1.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] lastOffsets>;

        $r4 = $r8.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] lastOffsets>;

        $i2 = r1.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, 0, $i2);

        $r7 = r1.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] lastPositions>;

        $r6 = $r8.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] lastPositions>;

        $i3 = r1.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 0, $i3);

        return;
    }

    int bytesPerPosting()
    {
        int $i0, $i1;
        org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray r0;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray;

        $i0 = specialinvoke r0.<org.apache.lucene.index.ParallelPostingsArray: int bytesPerPosting()>();

        $i1 = $i0 + 12;

        return $i1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/TermVectorsConsumerPerField;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: boolean $assertionsDisabled> = $z1;

        return;
    }
}
