public class org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo extends java.lang.Object implements java.io.Serializable
{
    java.lang.String name;
    java.lang.String className;
    boolean tokenized;
    java.lang.String analyzer;
    java.util.List fields;

    public void <init>(java.lang.String)
    {
        org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo r0;
        java.util.List $r2;
        java.lang.String r1;

        r0 := @this: org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo: java.lang.String name> = r1;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo: java.util.List fields> = $r2;

        return;
    }

    public java.lang.String getAnalyzer()
    {
        org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo r0;
        java.lang.String $r1;

        r0 := @this: org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo;

        $r1 = r0.<org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo: java.lang.String analyzer>;

        return $r1;
    }

    public java.lang.String getClassName()
    {
        org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo r0;
        java.lang.String $r1;

        r0 := @this: org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo;

        $r1 = r0.<org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo: java.lang.String className>;

        return $r1;
    }

    public java.util.List getFields()
    {
        org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo r0;
        java.util.List $r1;

        r0 := @this: org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo;

        $r1 = r0.<org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo: java.util.List fields>;

        return $r1;
    }

    public java.lang.String getName()
    {
        org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo r0;
        java.lang.String $r1;

        r0 := @this: org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo;

        $r1 = r0.<org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo: java.lang.String name>;

        return $r1;
    }

    public boolean isTokenized()
    {
        org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo r0;
        boolean $z0;

        r0 := @this: org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo;

        $z0 = r0.<org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo: boolean tokenized>;

        return $z0;
    }

    public void read(org.apache.solr.common.util.NamedList)
    {
        java.util.ArrayList $r20;
        java.lang.String r5, $r6, $r7, $r8, $r9, $r12, $r14, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo r10;
        java.util.Map$Entry r3;
        java.util.Iterator $r1;
        org.apache.solr.common.util.NamedList r0;
        java.util.List r19;
        java.lang.Object $r2, $r4, $r11, $r13, $r15, $r17, $r18;

        r10 := @this: org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo;

        r0 := @parameter0: org.apache.solr.common.util.NamedList;

        $r1 = virtualinvoke r0.<org.apache.solr.common.util.NamedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r2;

        $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = (java.lang.String) $r4;

        $r6 = "fields";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r17 == null goto label2;

        $r18 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r19 = (java.util.List) $r18;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>(java.util.Collection)>(r19);

        r10.<org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo: java.util.List fields> = $r20;

        goto label5;

     label2:
        $r7 = "tokenized";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z2 != 1 goto label3;

        $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        $z5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r16);

        r10.<org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo: boolean tokenized> = $z5;

        goto label5;

     label3:
        $r8 = "analyzer";

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z3 != 1 goto label4;

        $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        r10.<org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo: java.lang.String analyzer> = $r14;

        goto label5;

     label4:
        $r9 = "className";

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z4 != 1 goto label5;

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        r10.<org.apache.solr.client.solrj.response.LukeResponse$FieldTypeInfo: java.lang.String className> = $r12;

     label5:
        goto label1;

     label6:
        return;
    }
}
