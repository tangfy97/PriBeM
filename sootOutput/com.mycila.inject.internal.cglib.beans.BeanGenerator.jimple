public class com.mycila.inject.internal.cglib.beans.BeanGenerator extends com.mycila.inject.internal.cglib.core.AbstractClassGenerator
{
    private static final com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE;
    private static final com.mycila.inject.internal.cglib.beans.BeanGenerator$BeanGeneratorKey KEY_FACTORY;
    private java.lang.Class superclass;
    private java.util.Map props;
    private boolean classOnly;
    static java.lang.Class class$net$sf$cglib$beans$BeanGenerator;
    static java.lang.Class class$net$sf$cglib$beans$BeanGenerator$BeanGeneratorKey;
    static java.lang.Class class$java$lang$Object;

    public void <init>()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r1;
        com.mycila.inject.internal.cglib.beans.BeanGenerator r0;
        java.util.HashMap $r2;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanGenerator;

        $r1 = <com.mycila.inject.internal.cglib.beans.BeanGenerator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE>;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: void <init>(com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source)>($r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.util.Map props> = $r2;

        return;
    }

    public void setSuperclass(java.lang.Class)
    {
        com.mycila.inject.internal.cglib.beans.BeanGenerator r0;
        java.lang.Class $r1, $r2, r3, $r4;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanGenerator;

        r3 := @parameter0: java.lang.Class;

        if r3 == null goto label3;

        $r2 = r3;

        $r1 = <com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class class$java$lang$Object>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class class$java$lang$Object> = $r4;

        goto label2;

     label1:
        $r4 = <com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class class$java$lang$Object>;

     label2:
        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        r3 = null;

     label3:
        r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class superclass> = r3;

        return;
    }

    public void addProperty(java.lang.String, java.lang.Class)
    {
        com.mycila.inject.internal.asm.Type $r5;
        java.lang.IllegalArgumentException $r6;
        com.mycila.inject.internal.cglib.beans.BeanGenerator r0;
        java.lang.StringBuffer $r7, $r8, $r9, $r10;
        java.util.Map $r2, $r4;
        java.lang.Class r3;
        java.lang.String r1, $r11;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanGenerator;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Class;

        $r2 = r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.util.Map props>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Duplicate property name \"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label1:
        $r4 = r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.util.Map props>;

        $r5 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>(r3);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        return;
    }

    protected java.lang.ClassLoader getDefaultClassLoader()
    {
        com.mycila.inject.internal.cglib.beans.BeanGenerator r0;
        java.lang.Class $r1, $r2;
        java.lang.ClassLoader $r3;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanGenerator;

        $r1 = r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class superclass>;

        if $r1 == null goto label1;

        $r2 = r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class superclass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        return $r3;

     label1:
        return null;
    }

    public java.lang.Object create()
    {
        com.mycila.inject.internal.cglib.beans.BeanGenerator r0;
        java.lang.Object $r1;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanGenerator;

        r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: boolean classOnly> = 0;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Object createHelper()>();

        return $r1;
    }

    public java.lang.Object createClass()
    {
        com.mycila.inject.internal.cglib.beans.BeanGenerator r0;
        java.lang.Object $r1;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanGenerator;

        r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: boolean classOnly> = 1;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Object createHelper()>();

        return $r1;
    }

    private java.lang.Object createHelper()
    {
        com.mycila.inject.internal.cglib.beans.BeanGenerator r0;
        com.mycila.inject.internal.cglib.beans.BeanGenerator$BeanGeneratorKey $r4;
        java.util.Map $r3;
        java.lang.Class $r1, $r2, $r7, $r8;
        java.lang.Object $r5, $r6;
        java.lang.String $r9, $r10;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanGenerator;

        $r1 = r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class superclass>;

        if $r1 == null goto label1;

        $r8 = r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class superclass>;

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: void setNamePrefix(java.lang.String)>($r9);

     label1:
        $r2 = r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class superclass>;

        if $r2 == null goto label2;

        $r7 = r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class superclass>;

        $r10 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        goto label3;

     label2:
        $r10 = "java.lang.Object";

     label3:
        $r4 = <com.mycila.inject.internal.cglib.beans.BeanGenerator: com.mycila.inject.internal.cglib.beans.BeanGenerator$BeanGeneratorKey KEY_FACTORY>;

        $r3 = r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.util.Map props>;

        $r5 = interfaceinvoke $r4.<com.mycila.inject.internal.cglib.beans.BeanGenerator$BeanGeneratorKey: java.lang.Object newInstance(java.lang.String,java.util.Map)>($r10, $r3);

        $r6 = specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>($r5);

        return $r6;
    }

    public void generateClass(com.mycila.inject.internal.asm.ClassVisitor) throws java.lang.Exception
    {
        java.lang.Object[] $r5;
        com.mycila.inject.internal.asm.Type $r17, $r18;
        java.lang.String[] $r4, $r6, r7;
        java.util.Map $r1, $r2, $r15;
        int $i0, i1;
        java.lang.String $r11, $r14;
        com.mycila.inject.internal.asm.Type[] r8;
        com.mycila.inject.internal.asm.ClassVisitor r10;
        java.util.Set $r3;
        com.mycila.inject.internal.cglib.core.ClassEmitter $r9;
        com.mycila.inject.internal.cglib.beans.BeanGenerator r0;
        java.lang.Class $r12, $r13;
        java.lang.Object $r16;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanGenerator;

        r10 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        $r1 = r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.util.Map props>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $r2 = r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.util.Map props>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = newarray (java.lang.String)[$i0];

        $r5 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        r7 = (java.lang.String[]) $r6;

        r8 = newarray (com.mycila.inject.internal.asm.Type)[$i0];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r15 = r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.util.Map props>;

        $r14 = r7[i1];

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        $r17 = (com.mycila.inject.internal.asm.Type) $r16;

        r8[i1] = $r17;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r9 = new com.mycila.inject.internal.cglib.core.ClassEmitter;

        specialinvoke $r9.<com.mycila.inject.internal.cglib.core.ClassEmitter: void <init>(com.mycila.inject.internal.asm.ClassVisitor)>(r10);

        $r11 = virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.String getClassName()>();

        $r12 = r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class superclass>;

        if $r12 == null goto label3;

        $r13 = r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class superclass>;

        $r18 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r13);

        goto label4;

     label3:
        $r18 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

     label4:
        virtualinvoke $r9.<com.mycila.inject.internal.cglib.core.ClassEmitter: void begin_class(int,int,java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],java.lang.String)>(46, 1, $r11, $r18, null, null);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void null_constructor(com.mycila.inject.internal.cglib.core.ClassEmitter)>($r9);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void add_properties(com.mycila.inject.internal.cglib.core.ClassEmitter,java.lang.String[],com.mycila.inject.internal.asm.Type[])>($r9, r7, r8);

        virtualinvoke $r9.<com.mycila.inject.internal.cglib.core.ClassEmitter: void end_class()>();

        return;
    }

    protected java.lang.Object firstInstance(java.lang.Class)
    {
        com.mycila.inject.internal.cglib.beans.BeanGenerator r0;
        java.lang.Class r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanGenerator;

        r1 := @parameter0: java.lang.Class;

        $z0 = r0.<com.mycila.inject.internal.cglib.beans.BeanGenerator: boolean classOnly>;

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Object newInstance(java.lang.Class)>(r1);

        return $r2;
    }

    protected java.lang.Object nextInstance(java.lang.Object)
    {
        com.mycila.inject.internal.cglib.beans.BeanGenerator r1;
        java.lang.Object r0, $r2;
        java.lang.Class $r3;
        boolean $z0, $z1;

        r1 := @this: com.mycila.inject.internal.cglib.beans.BeanGenerator;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Class) r0;

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        $z1 = r1.<com.mycila.inject.internal.cglib.beans.BeanGenerator: boolean classOnly>;

        if $z1 == 0 goto label3;

        return $r3;

     label3:
        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Object newInstance(java.lang.Class)>($r3);

        return $r2;
    }

    public static void addProperties(com.mycila.inject.internal.cglib.beans.BeanGenerator, java.util.Map)
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        com.mycila.inject.internal.cglib.beans.BeanGenerator r5;
        java.util.Map r0;
        java.lang.Object $r3, $r6;
        java.lang.Class $r7;
        java.lang.String r4;
        boolean $z0;

        r5 := @parameter0: com.mycila.inject.internal.cglib.beans.BeanGenerator;

        r0 := @parameter1: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r6 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r7 = (java.lang.Class) $r6;

        virtualinvoke r5.<com.mycila.inject.internal.cglib.beans.BeanGenerator: void addProperty(java.lang.String,java.lang.Class)>(r4, $r7);

        goto label1;

     label2:
        return;
    }

    public static void addProperties(com.mycila.inject.internal.cglib.beans.BeanGenerator, java.lang.Class)
    {
        com.mycila.inject.internal.cglib.beans.BeanGenerator r0;
        java.lang.Class r1;
        java.beans.PropertyDescriptor[] $r2;

        r0 := @parameter0: com.mycila.inject.internal.cglib.beans.BeanGenerator;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)>(r1);

        staticinvoke <com.mycila.inject.internal.cglib.beans.BeanGenerator: void addProperties(com.mycila.inject.internal.cglib.beans.BeanGenerator,java.beans.PropertyDescriptor[])>(r0, $r2);

        return;
    }

    public static void addProperties(com.mycila.inject.internal.cglib.beans.BeanGenerator, java.beans.PropertyDescriptor[])
    {
        java.beans.PropertyDescriptor[] r0;
        com.mycila.inject.internal.cglib.beans.BeanGenerator r1;
        java.beans.PropertyDescriptor $r2, $r4;
        int $i0, i1;
        java.lang.Class $r5;
        java.lang.String $r3;

        r1 := @parameter0: com.mycila.inject.internal.cglib.beans.BeanGenerator;

        r0 := @parameter1: java.beans.PropertyDescriptor[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r2 = r0[i1];

        $r3 = virtualinvoke $r2.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r4 = r0[i1];

        $r5 = virtualinvoke $r4.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        virtualinvoke r1.<com.mycila.inject.internal.cglib.beans.BeanGenerator: void addProperty(java.lang.String,java.lang.Class)>($r3, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.beans.BeanGenerator$BeanGeneratorKey $r5;
        com.mycila.inject.internal.cglib.core.KeyFactory $r4;
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r0;
        java.lang.Class $r1, $r3, $r6, $r7;
        java.lang.String $r2;

        $r0 = new com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source;

        $r1 = <com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class class$net$sf$cglib$beans$BeanGenerator>;

        if $r1 != null goto label1;

        $r6 = staticinvoke <com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.beans.BeanGenerator");

        <com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class class$net$sf$cglib$beans$BeanGenerator> = $r6;

        goto label2;

     label1:
        $r6 = <com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class class$net$sf$cglib$beans$BeanGenerator>;

     label2:
        $r2 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source: void <init>(java.lang.String)>($r2);

        <com.mycila.inject.internal.cglib.beans.BeanGenerator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE> = $r0;

        $r3 = <com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class class$net$sf$cglib$beans$BeanGenerator$BeanGeneratorKey>;

        if $r3 != null goto label3;

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.beans.BeanGenerator$BeanGeneratorKey");

        <com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class class$net$sf$cglib$beans$BeanGenerator$BeanGeneratorKey> = $r7;

        goto label4;

     label3:
        $r7 = <com.mycila.inject.internal.cglib.beans.BeanGenerator: java.lang.Class class$net$sf$cglib$beans$BeanGenerator$BeanGeneratorKey>;

     label4:
        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: com.mycila.inject.internal.cglib.core.KeyFactory create(java.lang.Class)>($r7);

        $r5 = (com.mycila.inject.internal.cglib.beans.BeanGenerator$BeanGeneratorKey) $r4;

        <com.mycila.inject.internal.cglib.beans.BeanGenerator: com.mycila.inject.internal.cglib.beans.BeanGenerator$BeanGeneratorKey KEY_FACTORY> = $r5;

        return;
    }
}
