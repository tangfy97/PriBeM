public abstract class org.apache.poi.xslf.usermodel.XSLFTextShape extends org.apache.poi.xslf.usermodel.XSLFSimpleShape implements java.lang.Iterable
{
    private final java.util.List _paragraphs;
    private boolean _isTextBroken;

    void <init>(org.apache.xmlbeans.XmlObject, org.apache.poi.xslf.usermodel.XSLFSheet)
    {
        java.util.Iterator $r6;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r9;
        java.util.ArrayList $r3;
        java.util.List $r5, $r10;
        org.apache.poi.xslf.usermodel.XSLFSheet r2;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextBody $r4;
        java.lang.Object $r7;
        org.apache.xmlbeans.XmlObject r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextParagraph r8;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        r1 := @parameter0: org.apache.xmlbeans.XmlObject;

        r2 := @parameter1: org.apache.poi.xslf.usermodel.XSLFSheet;

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: void <init>(org.apache.xmlbeans.XmlObject,org.apache.poi.xslf.usermodel.XSLFSheet)>(r1, r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: java.util.List _paragraphs> = $r3;

        $r4 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTextBody getTextBody(boolean)>(0);

        if $r4 == null goto label2;

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBody: java.util.List getPList()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.openxmlformats.schemas.drawingml.x2006.main.CTTextParagraph) $r7;

        $r10 = r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: java.util.List _paragraphs>;

        $r9 = new org.apache.poi.xslf.usermodel.XSLFTextParagraph;

        specialinvoke $r9.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: void <init>(org.openxmlformats.schemas.drawingml.x2006.main.CTTextParagraph,org.apache.poi.xslf.usermodel.XSLFTextShape)>(r8, r0);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.List $r1;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        java.util.Iterator $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: java.util.List _paragraphs>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public java.lang.String getText()
    {
        java.util.Iterator $r3;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph r6;
        java.util.List $r2;
        int $i0;
        java.lang.StringBuilder $r0;
        java.lang.Object $r5;
        java.lang.String $r4, $r7;
        org.apache.poi.xslf.usermodel.XSLFTextShape r1;
        boolean $z0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.apache.poi.xslf.usermodel.XSLFTextShape: java.util.List _paragraphs>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.poi.xslf.usermodel.XSLFTextParagraph) $r5;

        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

     label2:
        $r7 = virtualinvoke r6.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: java.lang.String getText()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        goto label1;

     label3:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public void clearText()
    {
        java.util.List $r1;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextBody $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: java.util.List _paragraphs>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r2 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTextBody getTextBody(boolean)>(1);

        interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBody: void setPArray(org.openxmlformats.schemas.drawingml.x2006.main.CTTextParagraph[])>(null);

        return;
    }

    public void setText(java.lang.String)
    {
        org.apache.poi.xslf.usermodel.XSLFTextRun $r2;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r1;
        java.lang.String r3;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        r3 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: void clearText()>();

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.apache.poi.xslf.usermodel.XSLFTextParagraph addNewTextParagraph()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: org.apache.poi.xslf.usermodel.XSLFTextRun addNewTextRun()>();

        virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFTextRun: void setText(java.lang.String)>(r3);

        return;
    }

    public java.util.List getTextParagraphs()
    {
        java.util.List $r1;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: java.util.List _paragraphs>;

        return $r1;
    }

    public org.apache.poi.xslf.usermodel.XSLFTextParagraph addNewTextParagraph()
    {
        java.util.List $r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextBody $r1;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph $r3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextParagraph $r2;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTextBody getTextBody(boolean)>(1);

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBody: org.openxmlformats.schemas.drawingml.x2006.main.CTTextParagraph addNewP()>();

        $r3 = new org.apache.poi.xslf.usermodel.XSLFTextParagraph;

        specialinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: void <init>(org.openxmlformats.schemas.drawingml.x2006.main.CTTextParagraph,org.apache.poi.xslf.usermodel.XSLFTextShape)>($r2, r0);

        $r4 = r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: java.util.List _paragraphs>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        return $r3;
    }

    public void setVerticalAlignment(org.apache.poi.xslf.usermodel.VerticalAlignment)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties $r1;
        int $i0, $i1;
        org.openxmlformats.schemas.drawingml.x2006.main.STTextAnchoringType$Enum $r3;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        org.apache.poi.xslf.usermodel.VerticalAlignment r2;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        r2 := @parameter0: org.apache.poi.xslf.usermodel.VerticalAlignment;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties getTextBodyPr()>();

        if $r1 == null goto label2;

        if r2 != null goto label1;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: boolean isSetAnchor()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: void unsetAnchor()>();

        goto label2;

     label1:
        $i0 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.VerticalAlignment: int ordinal()>();

        $i1 = $i0 + 1;

        $r3 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.STTextAnchoringType$Enum: org.openxmlformats.schemas.drawingml.x2006.main.STTextAnchoringType$Enum forInt(int)>($i1);

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: void setAnchor(org.openxmlformats.schemas.drawingml.x2006.main.STTextAnchoringType$Enum)>($r3);

     label2:
        return;
    }

    public org.apache.poi.xslf.usermodel.VerticalAlignment getVerticalAlignment()
    {
        org.apache.poi.xslf.usermodel.XSLFTextShape$1 $r0;
        java.lang.Object $r2, $r3;
        org.apache.poi.xslf.usermodel.XSLFTextShape r1;
        org.apache.poi.xslf.usermodel.VerticalAlignment $r4;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFTextShape$1;

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFTextShape$1: void <init>(org.apache.poi.xslf.usermodel.XSLFTextShape)>(r1);

        virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFTextShape: boolean fetchShapeProperty(org.apache.poi.xslf.model.PropertyFetcher)>($r0);

        $r2 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        if $r2 != null goto label1;

        $r4 = <org.apache.poi.xslf.usermodel.VerticalAlignment: org.apache.poi.xslf.usermodel.VerticalAlignment TOP>;

        goto label2;

     label1:
        $r3 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        $r4 = (org.apache.poi.xslf.usermodel.VerticalAlignment) $r3;

     label2:
        return $r4;
    }

    public void setTextDirection(org.apache.poi.xslf.usermodel.TextDirection)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties $r1;
        org.apache.poi.xslf.usermodel.TextDirection r2;
        org.openxmlformats.schemas.drawingml.x2006.main.STTextVerticalType$Enum $r3;
        int $i0, $i1;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        r2 := @parameter0: org.apache.poi.xslf.usermodel.TextDirection;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties getTextBodyPr()>();

        if $r1 == null goto label2;

        if r2 != null goto label1;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: boolean isSetVert()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: void unsetVert()>();

        goto label2;

     label1:
        $i0 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.TextDirection: int ordinal()>();

        $i1 = $i0 + 1;

        $r3 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.STTextVerticalType$Enum: org.openxmlformats.schemas.drawingml.x2006.main.STTextVerticalType$Enum forInt(int)>($i1);

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: void setVert(org.openxmlformats.schemas.drawingml.x2006.main.STTextVerticalType$Enum)>($r3);

     label2:
        return;
    }

    public org.apache.poi.xslf.usermodel.TextDirection getTextDirection()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties $r1;
        org.apache.poi.xslf.usermodel.TextDirection $r2, $r5;
        org.openxmlformats.schemas.drawingml.x2006.main.STTextVerticalType$Enum $r3;
        org.apache.poi.xslf.usermodel.TextDirection[] $r4;
        int $i0, $i1;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties getTextBodyPr()>();

        if $r1 == null goto label1;

        $r3 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: org.openxmlformats.schemas.drawingml.x2006.main.STTextVerticalType$Enum getVert()>();

        if $r3 == null goto label1;

        $r4 = staticinvoke <org.apache.poi.xslf.usermodel.TextDirection: org.apache.poi.xslf.usermodel.TextDirection[] values()>();

        $i0 = virtualinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.STTextVerticalType$Enum: int intValue()>();

        $i1 = $i0 - 1;

        $r5 = $r4[$i1];

        return $r5;

     label1:
        $r2 = <org.apache.poi.xslf.usermodel.TextDirection: org.apache.poi.xslf.usermodel.TextDirection HORIZONTAL>;

        return $r2;
    }

    public double getBottomInset()
    {
        java.lang.Double $r4;
        org.apache.poi.xslf.usermodel.XSLFTextShape$2 $r0;
        java.lang.Object $r2, $r3;
        org.apache.poi.xslf.usermodel.XSLFTextShape r1;
        double $d0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFTextShape$2;

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFTextShape$2: void <init>(org.apache.poi.xslf.usermodel.XSLFTextShape)>(r1);

        virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFTextShape: boolean fetchShapeProperty(org.apache.poi.xslf.model.PropertyFetcher)>($r0);

        $r2 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        if $r2 != null goto label1;

        $d0 = 3.6;

        goto label2;

     label1:
        $r3 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        $r4 = (java.lang.Double) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

     label2:
        return $d0;
    }

    public double getLeftInset()
    {
        java.lang.Double $r4;
        org.apache.poi.xslf.usermodel.XSLFTextShape$3 $r0;
        java.lang.Object $r2, $r3;
        org.apache.poi.xslf.usermodel.XSLFTextShape r1;
        double $d0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFTextShape$3;

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFTextShape$3: void <init>(org.apache.poi.xslf.usermodel.XSLFTextShape)>(r1);

        virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFTextShape: boolean fetchShapeProperty(org.apache.poi.xslf.model.PropertyFetcher)>($r0);

        $r2 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        if $r2 != null goto label1;

        $d0 = 7.2;

        goto label2;

     label1:
        $r3 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        $r4 = (java.lang.Double) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

     label2:
        return $d0;
    }

    public double getRightInset()
    {
        java.lang.Double $r4;
        org.apache.poi.xslf.usermodel.XSLFTextShape$4 $r0;
        java.lang.Object $r2, $r3;
        org.apache.poi.xslf.usermodel.XSLFTextShape r1;
        double $d0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFTextShape$4;

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFTextShape$4: void <init>(org.apache.poi.xslf.usermodel.XSLFTextShape)>(r1);

        virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFTextShape: boolean fetchShapeProperty(org.apache.poi.xslf.model.PropertyFetcher)>($r0);

        $r2 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        if $r2 != null goto label1;

        $d0 = 7.2;

        goto label2;

     label1:
        $r3 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        $r4 = (java.lang.Double) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

     label2:
        return $d0;
    }

    public double getTopInset()
    {
        java.lang.Double $r4;
        org.apache.poi.xslf.usermodel.XSLFTextShape$5 $r0;
        java.lang.Object $r2, $r3;
        org.apache.poi.xslf.usermodel.XSLFTextShape r1;
        double $d0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFTextShape$5;

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFTextShape$5: void <init>(org.apache.poi.xslf.usermodel.XSLFTextShape)>(r1);

        virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFTextShape: boolean fetchShapeProperty(org.apache.poi.xslf.model.PropertyFetcher)>($r0);

        $r2 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        if $r2 != null goto label1;

        $d0 = 3.6;

        goto label2;

     label1:
        $r3 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        $r4 = (java.lang.Double) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

     label2:
        return $d0;
    }

    public void setBottomInset(double)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties $r1;
        byte $b0;
        int $i1;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        double d0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties getTextBodyPr()>();

        if $r1 == null goto label2;

        $b0 = d0 cmpl -1.0;

        if $b0 != 0 goto label1;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: void unsetBIns()>();

        goto label2;

     label1:
        $i1 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>(d0);

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: void setBIns(int)>($i1);

     label2:
        return;
    }

    public void setLeftInset(double)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties $r1;
        byte $b0;
        int $i1;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        double d0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties getTextBodyPr()>();

        if $r1 == null goto label2;

        $b0 = d0 cmpl -1.0;

        if $b0 != 0 goto label1;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: void unsetLIns()>();

        goto label2;

     label1:
        $i1 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>(d0);

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: void setLIns(int)>($i1);

     label2:
        return;
    }

    public void setRightInset(double)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties $r1;
        byte $b0;
        int $i1;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        double d0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties getTextBodyPr()>();

        if $r1 == null goto label2;

        $b0 = d0 cmpl -1.0;

        if $b0 != 0 goto label1;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: void unsetRIns()>();

        goto label2;

     label1:
        $i1 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>(d0);

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: void setRIns(int)>($i1);

     label2:
        return;
    }

    public void setTopInset(double)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties $r1;
        byte $b0;
        int $i1;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        double d0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties getTextBodyPr()>();

        if $r1 == null goto label2;

        $b0 = d0 cmpl -1.0;

        if $b0 != 0 goto label1;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: void unsetTIns()>();

        goto label2;

     label1:
        $i1 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>(d0);

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: void setTIns(int)>($i1);

     label2:
        return;
    }

    public boolean getWordWrap()
    {
        java.lang.Boolean $r4;
        java.lang.Object $r2, $r3;
        org.apache.poi.xslf.usermodel.XSLFTextShape$6 $r0;
        org.apache.poi.xslf.usermodel.XSLFTextShape r1;
        boolean $z0;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r0 = new org.apache.poi.xslf.usermodel.XSLFTextShape$6;

        specialinvoke $r0.<org.apache.poi.xslf.usermodel.XSLFTextShape$6: void <init>(org.apache.poi.xslf.usermodel.XSLFTextShape)>(r1);

        virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFTextShape: boolean fetchShapeProperty(org.apache.poi.xslf.model.PropertyFetcher)>($r0);

        $r2 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        if $r2 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $r3 = virtualinvoke $r0.<org.apache.poi.xslf.model.PropertyFetcher: java.lang.Object getValue()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;
    }

    public void setWordWrap(boolean)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.STTextWrappingType$Enum $r2;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        boolean z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties getTextBodyPr()>();

        if $r1 == null goto label3;

        if z0 == 0 goto label1;

        $r2 = <org.openxmlformats.schemas.drawingml.x2006.main.STTextWrappingType: org.openxmlformats.schemas.drawingml.x2006.main.STTextWrappingType$Enum SQUARE>;

        goto label2;

     label1:
        $r2 = <org.openxmlformats.schemas.drawingml.x2006.main.STTextWrappingType: org.openxmlformats.schemas.drawingml.x2006.main.STTextWrappingType$Enum NONE>;

     label2:
        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: void setWrap(org.openxmlformats.schemas.drawingml.x2006.main.STTextWrappingType$Enum)>($r2);

     label3:
        return;
    }

    public void setTextAutofit(org.apache.poi.xslf.usermodel.TextAutofit)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties $r1;
        org.apache.poi.xslf.usermodel.TextAutofit r2;
        int[] $r3;
        int $i0, $i1;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        r2 := @parameter0: org.apache.poi.xslf.usermodel.TextAutofit;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties getTextBodyPr()>();

        if $r1 == null goto label7;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: boolean isSetSpAutoFit()>();

        if $z0 == 0 goto label1;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: void unsetSpAutoFit()>();

     label1:
        $z1 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: boolean isSetNoAutofit()>();

        if $z1 == 0 goto label2;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: void unsetNoAutofit()>();

     label2:
        $z2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: boolean isSetNormAutofit()>();

        if $z2 == 0 goto label3;

        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: void unsetNormAutofit()>();

     label3:
        $r3 = <org.apache.poi.xslf.usermodel.XSLFTextShape$7: int[] $SwitchMap$org$apache$poi$xslf$usermodel$TextAutofit>;

        $i0 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.TextAutofit: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label6;
            default: goto label7;
        };

     label4:
        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTTextNoAutofit addNewNoAutofit()>();

        goto label7;

     label5:
        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTTextNormalAutofit addNewNormAutofit()>();

        goto label7;

     label6:
        interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTTextShapeAutofit addNewSpAutoFit()>();

     label7:
        return;
    }

    public org.apache.poi.xslf.usermodel.TextAutofit getTextAutofit()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties $r1;
        org.apache.poi.xslf.usermodel.TextAutofit $r2, $r3, $r4, $r5;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties getTextBodyPr()>();

        if $r1 == null goto label3;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: boolean isSetNoAutofit()>();

        if $z0 == 0 goto label1;

        $r5 = <org.apache.poi.xslf.usermodel.TextAutofit: org.apache.poi.xslf.usermodel.TextAutofit NONE>;

        return $r5;

     label1:
        $z1 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: boolean isSetNormAutofit()>();

        if $z1 == 0 goto label2;

        $r4 = <org.apache.poi.xslf.usermodel.TextAutofit: org.apache.poi.xslf.usermodel.TextAutofit NORMAL>;

        return $r4;

     label2:
        $z2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties: boolean isSetSpAutoFit()>();

        if $z2 == 0 goto label3;

        $r3 = <org.apache.poi.xslf.usermodel.TextAutofit: org.apache.poi.xslf.usermodel.TextAutofit SHAPE>;

        return $r3;

     label3:
        $r2 = <org.apache.poi.xslf.usermodel.TextAutofit: org.apache.poi.xslf.usermodel.TextAutofit NORMAL>;

        return $r2;
    }

    protected org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties getTextBodyPr()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties $r2;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextBody $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.drawingml.x2006.main.CTTextBody getTextBody(boolean)>(0);

        if $r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTextBody: org.openxmlformats.schemas.drawingml.x2006.main.CTTextBodyProperties getBodyPr()>();

     label2:
        return $r2;
    }

    protected abstract org.openxmlformats.schemas.drawingml.x2006.main.CTTextBody getTextBody(boolean);

    public org.apache.poi.xslf.usermodel.Placeholder getTextType()
    {
        org.apache.poi.xslf.usermodel.Placeholder $r7;
        org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder r4;
        org.apache.poi.xslf.usermodel.Placeholder[] $r6;
        org.apache.xmlbeans.XmlObject[] $r2;
        int $i0, $i1, $i2;
        org.apache.xmlbeans.XmlObject $r1, $r3;
        org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum $r5;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.apache.xmlbeans.XmlObject getXmlObject()>();

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String)>("declare namespace p=\'http://schemas.openxmlformats.org/presentationml/2006/main\' .//*/p:nvPr/p:ph");

        $i0 = lengthof $r2;

        if $i0 != 1 goto label1;

        $r3 = $r2[0];

        r4 = (org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder) $r3;

        $r5 = interfaceinvoke r4.<org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder: org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum getType()>();

        $i1 = virtualinvoke $r5.<org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum: int intValue()>();

        $r6 = staticinvoke <org.apache.poi.xslf.usermodel.Placeholder: org.apache.poi.xslf.usermodel.Placeholder[] values()>();

        $i2 = $i1 - 1;

        $r7 = $r6[$i2];

        return $r7;

     label1:
        return null;
    }

    public void setPlaceholder(org.apache.poi.xslf.usermodel.Placeholder)
    {
        org.apache.poi.xslf.usermodel.Placeholder r5;
        org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder $r6;
        org.openxmlformats.schemas.presentationml.x2006.main.CTApplicationNonVisualDrawingProps $r4;
        org.openxmlformats.schemas.presentationml.x2006.main.CTShapeNonVisual $r3;
        org.openxmlformats.schemas.presentationml.x2006.main.CTShape r2;
        int $i0, $i1;
        org.apache.xmlbeans.XmlObject $r1;
        org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum $r7;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        r5 := @parameter0: org.apache.poi.xslf.usermodel.Placeholder;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.apache.xmlbeans.XmlObject getXmlObject()>();

        r2 = (org.openxmlformats.schemas.presentationml.x2006.main.CTShape) $r1;

        $r3 = interfaceinvoke r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTShape: org.openxmlformats.schemas.presentationml.x2006.main.CTShapeNonVisual getNvSpPr()>();

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.presentationml.x2006.main.CTShapeNonVisual: org.openxmlformats.schemas.presentationml.x2006.main.CTApplicationNonVisualDrawingProps getNvPr()>();

        if r5 != null goto label1;

        $z0 = interfaceinvoke $r4.<org.openxmlformats.schemas.presentationml.x2006.main.CTApplicationNonVisualDrawingProps: boolean isSetPh()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r4.<org.openxmlformats.schemas.presentationml.x2006.main.CTApplicationNonVisualDrawingProps: void unsetPh()>();

        goto label2;

     label1:
        $r6 = interfaceinvoke $r4.<org.openxmlformats.schemas.presentationml.x2006.main.CTApplicationNonVisualDrawingProps: org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder addNewPh()>();

        $i0 = virtualinvoke r5.<org.apache.poi.xslf.usermodel.Placeholder: int ordinal()>();

        $i1 = $i0 + 1;

        $r7 = staticinvoke <org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum: org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum forInt(int)>($i1);

        interfaceinvoke $r6.<org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder: void setType(org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum)>($r7);

     label2:
        return;
    }

    public double getTextHeight()
    {
        java.awt.image.BufferedImage $r0;
        java.awt.Graphics2D $r1;
        org.apache.poi.xslf.usermodel.XSLFTextShape r2;
        double $d0;

        r2 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r0 = new java.awt.image.BufferedImage;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(1, 1, 1);

        $r1 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        specialinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextShape: void breakText(java.awt.Graphics2D)>($r1);

        $d0 = specialinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextShape: double drawParagraphs(java.awt.Graphics2D,double,double)>($r1, 0.0, 0.0);

        return $d0;
    }

    public java.awt.geom.Rectangle2D resizeToFitText()
    {
        java.awt.geom.Rectangle2D $r1;
        byte $b0;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        org.apache.poi.POIXMLException $r2;
        double $d0, $d1, $d2, $d3, $d4, d5;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: java.awt.geom.Rectangle2D getAnchor()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: double getWidth()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r2 = new org.apache.poi.POIXMLException;

        specialinvoke $r2.<org.apache.poi.POIXMLException: void <init>(java.lang.String)>("Anchor of the shape was not set.");

        throw $r2;

     label1:
        $d1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: double getTextHeight()>();

        d5 = $d1 + 1.0;

        $d2 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: double getX()>();

        $d3 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: double getY()>();

        $d4 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: double getWidth()>();

        virtualinvoke $r1.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($d2, $d3, $d4, d5);

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: void setAnchor(java.awt.geom.Rectangle2D)>($r1);

        return $r1;
    }

    private void breakText(java.awt.Graphics2D)
    {
        java.util.Iterator $r2;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph r4;
        java.util.List $r1;
        java.awt.Graphics2D r5;
        java.lang.Object $r3;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        r5 := @parameter0: java.awt.Graphics2D;

        $z0 = r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: boolean _isTextBroken>;

        if $z0 != 0 goto label3;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: java.util.List _paragraphs>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.poi.xslf.usermodel.XSLFTextParagraph) $r3;

        virtualinvoke r4.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: java.util.List breakText(java.awt.Graphics2D)>(r5);

        goto label1;

     label2:
        r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: boolean _isTextBroken> = 1;

     label3:
        return;
    }

    public void drawContent(java.awt.Graphics2D)
    {
        java.awt.geom.Rectangle2D $r3;
        org.apache.poi.xslf.usermodel.RenderableShape $r2;
        int[] $r5;
        org.apache.poi.xslf.usermodel.VerticalAlignment $r6;
        boolean $z0, $z1;
        java.awt.geom.AffineTransform $r4;
        java.awt.Graphics2D r1;
        int $i0, $i1;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        double $d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, d43, d44, d45, d46;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        r1 := @parameter0: java.awt.Graphics2D;

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: void breakText(java.awt.Graphics2D)>(r1);

        $r2 = new org.apache.poi.xslf.usermodel.RenderableShape;

        specialinvoke $r2.<org.apache.poi.xslf.usermodel.RenderableShape: void <init>(org.apache.poi.xslf.usermodel.XSLFSimpleShape)>(r0);

        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.RenderableShape: java.awt.geom.Rectangle2D getAnchor(java.awt.Graphics2D)>(r1);

        $d0 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getX()>();

        $d1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: double getLeftInset()>();

        d2 = $d0 + $d1;

        $d3 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getY()>();

        $r4 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $z0 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: boolean getFlipVertical()>();

        if $z0 == 0 goto label1;

        $d26 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getX()>();

        $d27 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getY()>();

        $d28 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d29 = $d27 + $d28;

        virtualinvoke r1.<java.awt.Graphics2D: void translate(double,double)>($d26, $d29);

        virtualinvoke r1.<java.awt.Graphics2D: void scale(double,double)>(1.0, -1.0);

        $d30 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getX()>();

        $d31 = neg $d30;

        $d32 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getY()>();

        $d33 = neg $d32;

        virtualinvoke r1.<java.awt.Graphics2D: void translate(double,double)>($d31, $d33);

        $d34 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getX()>();

        $d35 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d36 = $d35 / 2.0;

        d43 = $d34 + $d36;

        $d37 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getY()>();

        $d38 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d39 = $d38 / 2.0;

        d44 = $d37 + $d39;

        virtualinvoke r1.<java.awt.Graphics2D: void translate(double,double)>(d43, d44);

        $d40 = staticinvoke <java.lang.Math: double toRadians(double)>(180.0);

        virtualinvoke r1.<java.awt.Graphics2D: void rotate(double)>($d40);

        $d42 = neg d43;

        $d41 = neg d44;

        virtualinvoke r1.<java.awt.Graphics2D: void translate(double,double)>($d42, $d41);

     label1:
        $z1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: boolean getFlipHorizontal()>();

        if $z1 == 0 goto label2;

        $d18 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getX()>();

        $d19 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d20 = $d18 + $d19;

        $d21 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getY()>();

        virtualinvoke r1.<java.awt.Graphics2D: void translate(double,double)>($d20, $d21);

        virtualinvoke r1.<java.awt.Graphics2D: void scale(double,double)>(-1.0, 1.0);

        $d22 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getX()>();

        $d23 = neg $d22;

        $d24 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getY()>();

        $d25 = neg $d24;

        virtualinvoke r1.<java.awt.Graphics2D: void translate(double,double)>($d23, $d25);

     label2:
        $d4 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: double getTextHeight()>();

        $r5 = <org.apache.poi.xslf.usermodel.XSLFTextShape$7: int[] $SwitchMap$org$apache$poi$xslf$usermodel$VerticalAlignment>;

        $r6 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.apache.poi.xslf.usermodel.VerticalAlignment getVerticalAlignment()>();

        $i0 = virtualinvoke $r6.<org.apache.poi.xslf.usermodel.VerticalAlignment: int ordinal()>();

        $i1 = $r5[$i0];

        tableswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label5;
        };

     label3:
        $d9 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: double getTopInset()>();

        d45 = $d3 + $d9;

        goto label6;

     label4:
        $d5 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d6 = $d5 - $d4;

        $d7 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: double getBottomInset()>();

        $d8 = $d6 - $d7;

        d45 = $d3 + $d8;

        goto label6;

     label5:
        $d10 = virtualinvoke $r3.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d11 = $d10 - $d4;

        $d12 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: double getTopInset()>();

        $d13 = $d11 - $d12;

        $d14 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: double getBottomInset()>();

        d46 = $d13 - $d14;

        $d15 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: double getTopInset()>();

        $d16 = d46 / 2.0;

        $d17 = $d15 + $d16;

        d45 = $d3 + $d17;

     label6:
        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: double drawParagraphs(java.awt.Graphics2D,double,double)>(r1, d2, d45);

        virtualinvoke r1.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r4);

        return;
    }

    private double drawParagraphs(java.awt.Graphics2D, double, double)
    {
        byte $b1, $b5;
        java.util.List $r1, $r2, $r5, $r11;
        float $f0, $f1;
        org.apache.poi.xslf.usermodel.XSLFTextParagraph r4;
        org.apache.poi.xslf.usermodel.TextFragment $r8, $r10;
        java.awt.Graphics2D r6;
        int $i0, $i2, $i3, $i4, i6, $i7, $i8, $i9, $i10;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, $d14, $d15;
        java.lang.Object $r3, $r7, $r9;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        r6 := @parameter0: java.awt.Graphics2D;

        d2 := @parameter1: double;

        d13 := @parameter2: double;

        d0 = d13;

        i6 = 0;

     label1:
        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: java.util.List _paragraphs>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i6 >= $i0 goto label6;

        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: java.util.List _paragraphs>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i6);

        r4 = (org.apache.poi.xslf.usermodel.XSLFTextParagraph) $r3;

        $r5 = virtualinvoke r4.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: java.util.List getTextLines()>();

        if i6 <= 0 goto label3;

        $i4 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i4 <= 0 goto label3;

        $d8 = virtualinvoke r4.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: double getSpaceBefore()>();

        $b5 = $d8 cmpl 0.0;

        $i9 = (int) $b5;

        if $i9 <= 0 goto label2;

        $d10 = $d8 * 0.01;

        $r9 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (org.apache.poi.xslf.usermodel.TextFragment) $r9;

        $f1 = virtualinvoke $r10.<org.apache.poi.xslf.usermodel.TextFragment: float getHeight()>();

        $d11 = (double) $f1;

        $d12 = $d10 * $d11;

        d13 = d13 + $d12;

        goto label3;

     label2:
        $d9 = neg $d8;

        d13 = d13 + $d9;

     label3:
        $d14 = virtualinvoke r4.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: double draw(java.awt.Graphics2D,double,double)>(r6, d2, d13);

        $d15 = d13 + $d14;

        d13 = $d15;

        $r11 = r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: java.util.List _paragraphs>;

        $i7 = interfaceinvoke $r11.<java.util.List: int size()>();

        $i8 = $i7 - 1;

        if i6 >= $i8 goto label5;

        $d3 = virtualinvoke r4.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: double getSpaceAfter()>();

        $b1 = $d3 cmpl 0.0;

        $i10 = (int) $b1;

        if $i10 <= 0 goto label4;

        $d5 = $d3 * 0.01;

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i3);

        $r8 = (org.apache.poi.xslf.usermodel.TextFragment) $r7;

        $f0 = virtualinvoke $r8.<org.apache.poi.xslf.usermodel.TextFragment: float getHeight()>();

        $d6 = (double) $f0;

        $d7 = $d5 * $d6;

        d13 = $d15 + $d7;

        goto label5;

     label4:
        $d4 = neg $d3;

        d13 = $d15 + $d4;

     label5:
        i6 = i6 + 1;

        goto label1;

     label6:
        $d1 = d13 - d0;

        return $d1;
    }

    void copy(org.apache.poi.xslf.usermodel.XSLFShape)
    {
        org.apache.poi.xslf.usermodel.XSLFTextParagraph r8, r10;
        org.apache.poi.xslf.usermodel.XSLFShape r1;
        byte $b0, $b1, $b2, $b3;
        int i4, $i5;
        org.apache.poi.xslf.usermodel.XSLFTextShape r0, r2;
        org.apache.poi.xslf.usermodel.VerticalAlignment $r3, $r4;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.util.List $r5, $r6;
        java.lang.Object $r7, $r9;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTextShape;

        r1 := @parameter0: org.apache.poi.xslf.usermodel.XSLFShape;

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: void copy(org.apache.poi.xslf.usermodel.XSLFShape)>(r1);

        r2 = (org.apache.poi.xslf.usermodel.XSLFTextShape) r1;

        $z0 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextShape: boolean getWordWrap()>();

        $z1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: boolean getWordWrap()>();

        if $z0 == $z1 goto label1;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: void setWordWrap(boolean)>($z0);

     label1:
        $d0 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextShape: double getLeftInset()>();

        $d1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: double getLeftInset()>();

        $b0 = $d0 cmpl $d1;

        if $b0 == 0 goto label2;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: void setLeftInset(double)>($d0);

     label2:
        $d2 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextShape: double getRightInset()>();

        $d3 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: double getRightInset()>();

        $b1 = $d2 cmpl $d3;

        if $b1 == 0 goto label3;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: void setRightInset(double)>($d2);

     label3:
        $d4 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextShape: double getTopInset()>();

        $d5 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: double getTopInset()>();

        $b2 = $d4 cmpl $d5;

        if $b2 == 0 goto label4;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: void setTopInset(double)>($d4);

     label4:
        $d6 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextShape: double getBottomInset()>();

        $d7 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: double getBottomInset()>();

        $b3 = $d6 cmpl $d7;

        if $b3 == 0 goto label5;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: void setBottomInset(double)>($d6);

     label5:
        $r3 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.apache.poi.xslf.usermodel.VerticalAlignment getVerticalAlignment()>();

        $r4 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.apache.poi.xslf.usermodel.VerticalAlignment getVerticalAlignment()>();

        if $r3 == $r4 goto label6;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: void setVerticalAlignment(org.apache.poi.xslf.usermodel.VerticalAlignment)>($r3);

     label6:
        $r5 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFTextShape: java.util.List getTextParagraphs()>();

        $r6 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFTextShape: java.util.List getTextParagraphs()>();

        i4 = 0;

     label7:
        $i5 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i4 >= $i5 goto label8;

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i4);

        r8 = (org.apache.poi.xslf.usermodel.XSLFTextParagraph) $r7;

        $r9 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i4);

        r10 = (org.apache.poi.xslf.usermodel.XSLFTextParagraph) $r9;

        virtualinvoke r10.<org.apache.poi.xslf.usermodel.XSLFTextParagraph: void copy(org.apache.poi.xslf.usermodel.XSLFTextParagraph)>(r8);

        i4 = i4 + 1;

        goto label7;

     label8:
        return;
    }
}
