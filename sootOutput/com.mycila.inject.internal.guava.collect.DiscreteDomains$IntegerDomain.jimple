final class com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain extends com.mycila.inject.internal.guava.collect.DiscreteDomain implements java.io.Serializable
{
    private static final com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain INSTANCE;
    private static final long serialVersionUID;

    private void <init>()
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.DiscreteDomain: void <init>()>();

        return;
    }

    public java.lang.Integer next(java.lang.Integer)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain r1;
        int $i0, $i1;
        java.lang.Integer r0, $r2;

        r1 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain;

        r0 := @parameter0: java.lang.Integer;

        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        if $i0 != 2147483647 goto label1;

        $r2 = null;

        goto label2;

     label1:
        $i1 = $i0 + 1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

     label2:
        return $r2;
    }

    public java.lang.Integer previous(java.lang.Integer)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain r1;
        int $i0, $i1;
        java.lang.Integer r0, $r2;

        r1 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain;

        r0 := @parameter0: java.lang.Integer;

        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        if $i0 != -2147483648 goto label1;

        $r2 = null;

        goto label2;

     label1:
        $i1 = $i0 - 1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

     label2:
        return $r2;
    }

    public long distance(java.lang.Integer, java.lang.Integer)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain r2;
        long $l1, $l3, $l4;
        java.lang.Integer r0, r1;
        int $i0, $i2;

        r2 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain;

        r1 := @parameter0: java.lang.Integer;

        r0 := @parameter1: java.lang.Integer;

        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $l1 = (long) $i0;

        $i2 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        $l3 = (long) $i2;

        $l4 = $l1 - $l3;

        return $l4;
    }

    public java.lang.Integer minValue()
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain r1;
        java.lang.Integer $r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-2147483648);

        return $r0;
    }

    public java.lang.Integer maxValue()
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain r1;
        java.lang.Integer $r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        return $r0;
    }

    private java.lang.Object readResolve()
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain $r0, r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain;

        $r0 = <com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain: com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain INSTANCE>;

        return $r0;
    }

    public volatile java.lang.Comparable maxValue()
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain r0;
        java.lang.Integer $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain: java.lang.Integer maxValue()>();

        return $r1;
    }

    public volatile java.lang.Comparable minValue()
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain r0;
        java.lang.Integer $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain: java.lang.Integer minValue()>();

        return $r1;
    }

    public volatile long distance(java.lang.Comparable, java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain r0;
        java.lang.Comparable r1, r2;
        long $l0;
        java.lang.Integer $r3, $r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain;

        r1 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: java.lang.Comparable;

        $r4 = (java.lang.Integer) r1;

        $r3 = (java.lang.Integer) r2;

        $l0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain: long distance(java.lang.Integer,java.lang.Integer)>($r4, $r3);

        return $l0;
    }

    public volatile java.lang.Comparable previous(java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain r0;
        java.lang.Comparable r1;
        java.lang.Integer $r2, $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = (java.lang.Integer) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain: java.lang.Integer previous(java.lang.Integer)>($r2);

        return $r3;
    }

    public volatile java.lang.Comparable next(java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain r0;
        java.lang.Comparable r1;
        java.lang.Integer $r2, $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = (java.lang.Integer) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain: java.lang.Integer next(java.lang.Integer)>($r2);

        return $r3;
    }

    static com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain access$000()
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain $r0;

        $r0 = <com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain: com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain INSTANCE>;

        return $r0;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain $r0;

        <com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain: long serialVersionUID> = 0L;

        $r0 = new com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain: void <init>()>();

        <com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain: com.mycila.inject.internal.guava.collect.DiscreteDomains$IntegerDomain INSTANCE> = $r0;

        return;
    }
}
