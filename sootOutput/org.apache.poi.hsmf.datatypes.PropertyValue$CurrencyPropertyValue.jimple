public class org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue extends org.apache.poi.hsmf.datatypes.PropertyValue
{
    private static final java.math.BigInteger SHIFT;

    public void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty, long, byte[])
    {
        byte[] r2;
        org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue r0;
        org.apache.poi.hsmf.datatypes.MAPIProperty r1;
        long l0;

        r0 := @this: org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue;

        r1 := @parameter0: org.apache.poi.hsmf.datatypes.MAPIProperty;

        l0 := @parameter1: long;

        r2 := @parameter2: byte[];

        specialinvoke r0.<org.apache.poi.hsmf.datatypes.PropertyValue: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,long,byte[])>(r1, l0, r2);

        return;
    }

    public java.math.BigInteger getValue()
    {
        byte[] $r1;
        org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue r0;
        long $l0;
        java.math.BigInteger $r2, $r3, $r4;

        r0 := @this: org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue;

        $r1 = r0.<org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue: byte[] data>;

        $l0 = staticinvoke <org.apache.poi.util.LittleEndian: long getLong(byte[])>($r1);

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        $r3 = <org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue: java.math.BigInteger SHIFT>;

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r3);

        return $r4;
    }

    public void setValue(java.math.BigInteger)
    {
        byte[] $r1, $r5, $r6;
        long $l1;
        org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue r0;
        int $i0;
        java.math.BigInteger r2, $r3, $r4;

        r0 := @this: org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue;

        r2 := @parameter0: java.math.BigInteger;

        $r1 = r0.<org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue: byte[] data>;

        $i0 = lengthof $r1;

        if $i0 == 8 goto label1;

        $r6 = newarray (byte)[8];

        r0.<org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue: byte[] data> = $r6;

     label1:
        $r3 = <org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue: java.math.BigInteger SHIFT>;

        $r4 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        $l1 = virtualinvoke $r4.<java.math.BigInteger: long longValue()>();

        $r5 = r0.<org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue: byte[] data>;

        staticinvoke <org.apache.poi.util.LittleEndian: void putLong(byte[],int,long)>($r5, 0, $l1);

        return;
    }

    public volatile java.lang.Object getValue()
    {
        org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue r0;
        java.math.BigInteger $r1;

        r0 := @this: org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue;

        $r1 = virtualinvoke r0.<org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue: java.math.BigInteger getValue()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(10000L);

        <org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue: java.math.BigInteger SHIFT> = $r0;

        return;
    }
}
