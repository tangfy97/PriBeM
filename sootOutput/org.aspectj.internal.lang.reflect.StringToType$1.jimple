final class org.aspectj.internal.lang.reflect.StringToType$1 extends java.lang.Object implements java.lang.reflect.ParameterizedType
{
    final java.lang.reflect.Type[] val$typeParams;
    final java.lang.Class val$baseClass;

    void <init>(java.lang.reflect.Type[], java.lang.Class)
    {
        java.lang.reflect.Type[] r1;
        java.lang.Class r2;
        org.aspectj.internal.lang.reflect.StringToType$1 r0;

        r0 := @this: org.aspectj.internal.lang.reflect.StringToType$1;

        r1 := @parameter0: java.lang.reflect.Type[];

        r2 := @parameter1: java.lang.Class;

        r0.<org.aspectj.internal.lang.reflect.StringToType$1: java.lang.reflect.Type[] val$typeParams> = r1;

        r0.<org.aspectj.internal.lang.reflect.StringToType$1: java.lang.Class val$baseClass> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.reflect.Type[] getActualTypeArguments()
    {
        java.lang.reflect.Type[] $r1;
        org.aspectj.internal.lang.reflect.StringToType$1 r0;

        r0 := @this: org.aspectj.internal.lang.reflect.StringToType$1;

        $r1 = r0.<org.aspectj.internal.lang.reflect.StringToType$1: java.lang.reflect.Type[] val$typeParams>;

        return $r1;
    }

    public java.lang.reflect.Type getRawType()
    {
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.StringToType$1 r0;

        r0 := @this: org.aspectj.internal.lang.reflect.StringToType$1;

        $r1 = r0.<org.aspectj.internal.lang.reflect.StringToType$1: java.lang.Class val$baseClass>;

        return $r1;
    }

    public java.lang.reflect.Type getOwnerType()
    {
        java.lang.Class $r1, $r2;
        org.aspectj.internal.lang.reflect.StringToType$1 r0;

        r0 := @this: org.aspectj.internal.lang.reflect.StringToType$1;

        $r1 = r0.<org.aspectj.internal.lang.reflect.StringToType$1: java.lang.Class val$baseClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        return $r2;
    }
}
