public class groovyjarjarantlr.PrintWriterWithSMAP extends java.io.PrintWriter
{
    private int currentOutputLine;
    private int currentSourceLine;
    private java.util.Map sourceMap;
    private boolean lastPrintCharacterWasCR;
    private boolean mapLines;
    private boolean mapSingleSourceLine;
    private boolean anythingWrittenSinceMapping;

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        java.util.HashMap $r2;
        groovyjarjarantlr.PrintWriterWithSMAP r0;

        r0 := @this: groovyjarjarantlr.PrintWriterWithSMAP;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.io.PrintWriter: void <init>(java.io.OutputStream)>(r1);

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentOutputLine> = 1;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentSourceLine> = 0;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: java.util.Map sourceMap> = $r2;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean lastPrintCharacterWasCR> = 0;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean mapLines> = 0;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean mapSingleSourceLine> = 0;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean anythingWrittenSinceMapping> = 0;

        return;
    }

    public void <init>(java.io.OutputStream, boolean)
    {
        java.io.OutputStream r1;
        groovyjarjarantlr.PrintWriterWithSMAP r0;
        java.util.HashMap $r2;
        boolean z0;

        r0 := @this: groovyjarjarantlr.PrintWriterWithSMAP;

        r1 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>(r1, z0);

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentOutputLine> = 1;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentSourceLine> = 0;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: java.util.Map sourceMap> = $r2;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean lastPrintCharacterWasCR> = 0;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean mapLines> = 0;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean mapSingleSourceLine> = 0;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean anythingWrittenSinceMapping> = 0;

        return;
    }

    public void <init>(java.io.Writer)
    {
        java.io.Writer r1;
        java.util.HashMap $r2;
        groovyjarjarantlr.PrintWriterWithSMAP r0;

        r0 := @this: groovyjarjarantlr.PrintWriterWithSMAP;

        r1 := @parameter0: java.io.Writer;

        specialinvoke r0.<java.io.PrintWriter: void <init>(java.io.Writer)>(r1);

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentOutputLine> = 1;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentSourceLine> = 0;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: java.util.Map sourceMap> = $r2;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean lastPrintCharacterWasCR> = 0;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean mapLines> = 0;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean mapSingleSourceLine> = 0;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean anythingWrittenSinceMapping> = 0;

        return;
    }

    public void <init>(java.io.Writer, boolean)
    {
        groovyjarjarantlr.PrintWriterWithSMAP r0;
        java.io.Writer r1;
        java.util.HashMap $r2;
        boolean z0;

        r0 := @this: groovyjarjarantlr.PrintWriterWithSMAP;

        r1 := @parameter0: java.io.Writer;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>(r1, z0);

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentOutputLine> = 1;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentSourceLine> = 0;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: java.util.Map sourceMap> = $r2;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean lastPrintCharacterWasCR> = 0;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean mapLines> = 0;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean mapSingleSourceLine> = 0;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean anythingWrittenSinceMapping> = 0;

        return;
    }

    public void startMapping(int)
    {
        int i0, $i2;
        groovyjarjarantlr.PrintWriterWithSMAP r0;

        r0 := @this: groovyjarjarantlr.PrintWriterWithSMAP;

        i0 := @parameter0: int;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean mapLines> = 1;

        $i2 = (int) -888;

        if i0 == $i2 goto label1;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentSourceLine> = i0;

     label1:
        return;
    }

    public void startSingleSourceLineMapping(int)
    {
        int i0, $i2;
        groovyjarjarantlr.PrintWriterWithSMAP r0;

        r0 := @this: groovyjarjarantlr.PrintWriterWithSMAP;

        i0 := @parameter0: int;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean mapSingleSourceLine> = 1;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean mapLines> = 1;

        $i2 = (int) -888;

        if i0 == $i2 goto label1;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentSourceLine> = i0;

     label1:
        return;
    }

    public void endMapping()
    {
        groovyjarjarantlr.PrintWriterWithSMAP r0;

        r0 := @this: groovyjarjarantlr.PrintWriterWithSMAP;

        virtualinvoke r0.<groovyjarjarantlr.PrintWriterWithSMAP: void mapLine(boolean)>(0);

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean mapLines> = 0;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean mapSingleSourceLine> = 0;

        return;
    }

    protected void mapLine(boolean)
    {
        java.lang.Integer $r1, $r2;
        java.util.ArrayList $r5;
        java.util.Map $r3, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, z1, $z2, $z3, $z4;
        java.util.List r7;
        groovyjarjarantlr.PrintWriterWithSMAP r0;
        java.lang.Object $r4;

        r0 := @this: groovyjarjarantlr.PrintWriterWithSMAP;

        z1 := @parameter0: boolean;

        $z0 = r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean mapLines>;

        if $z0 == 0 goto label2;

        $z3 = r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean anythingWrittenSinceMapping>;

        if $z3 == 0 goto label2;

        $r1 = new java.lang.Integer;

        $i4 = r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentSourceLine>;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i4);

        $r2 = new java.lang.Integer;

        $i5 = r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentOutputLine>;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>($i5);

        $r3 = r0.<groovyjarjarantlr.PrintWriterWithSMAP: java.util.Map sourceMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r7 = (java.util.List) $r4;

        if r7 != null goto label1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r7 = $r5;

        $r6 = r0.<groovyjarjarantlr.PrintWriterWithSMAP: java.util.Map sourceMap>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5);

     label1:
        $z4 = interfaceinvoke r7.<java.util.List: boolean contains(java.lang.Object)>($r2);

        if $z4 != 0 goto label2;

        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>($r2);

     label2:
        if z1 == 0 goto label3;

        $i2 = r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentOutputLine>;

        $i3 = $i2 + 1;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentOutputLine> = $i3;

     label3:
        $z2 = r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean mapSingleSourceLine>;

        if $z2 != 0 goto label4;

        $i0 = r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentSourceLine>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentSourceLine> = $i1;

     label4:
        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean anythingWrittenSinceMapping> = 0;

        return;
    }

    public void dump(java.io.PrintWriter, java.lang.String, java.lang.String)
    {
        java.lang.Integer r17, r23;
        java.util.ArrayList $r11;
        java.lang.StringBuffer $r1, $r3, $r4, $r6, $r7, $r9, $r24, $r25, $r26, $r27;
        java.util.Map $r13, $r18;
        java.lang.String r2, $r5, r8, $r10, $r28;
        boolean $z0, $z1;
        java.io.PrintWriter r0;
        java.util.Iterator $r15, $r21;
        java.util.Set $r14;
        java.util.List r20;
        groovyjarjarantlr.PrintWriterWithSMAP r12;
        java.lang.Object $r16, $r19, $r22;

        r12 := @this: groovyjarjarantlr.PrintWriterWithSMAP;

        r0 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("SMAP");

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".java");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("G");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("*S G");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("*F");

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("+ 0 ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(r8);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("*L");

        $r11 = new java.util.ArrayList;

        $r13 = r12.<groovyjarjarantlr.PrintWriterWithSMAP: java.util.Map sourceMap>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>($r14);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r11);

        $r15 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.Integer) $r16;

        $r18 = r12.<groovyjarjarantlr.PrintWriterWithSMAP: java.util.Map sourceMap>;

        $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r17);

        r20 = (java.util.List) $r19;

        $r21 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label1;

        $r22 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.lang.Integer) $r22;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r17);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r23);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r28);

        goto label2;

     label3:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("*E");

        virtualinvoke r0.<java.io.PrintWriter: void close()>();

        return;
    }

    public void write(char[], int, int)
    {
        char $c3;
        groovyjarjarantlr.PrintWriterWithSMAP r0;
        int i0, i1, i2, i4, $i5;
        char[] r1;

        r0 := @this: groovyjarjarantlr.PrintWriterWithSMAP;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0 + i1;

        i4 = i0;

     label1:
        if i4 >= i2 goto label2;

        $c3 = r1[i4];

        $i5 = (int) $c3;

        virtualinvoke r0.<groovyjarjarantlr.PrintWriterWithSMAP: void checkChar(int)>($i5);

        i4 = i4 + 1;

        goto label1;

     label2:
        specialinvoke r0.<java.io.PrintWriter: void write(char[],int,int)>(r1, i0, i1);

        return;
    }

    public void checkChar(int)
    {
        groovyjarjarantlr.PrintWriterWithSMAP r0;
        int i0;
        char $c1;
        boolean $z0, $z1, $z2;

        r0 := @this: groovyjarjarantlr.PrintWriterWithSMAP;

        i0 := @parameter0: int;

        $z0 = r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean lastPrintCharacterWasCR>;

        if $z0 == 0 goto label1;

        if i0 == 10 goto label1;

        virtualinvoke r0.<groovyjarjarantlr.PrintWriterWithSMAP: void mapLine(boolean)>(1);

        goto label3;

     label1:
        if i0 != 10 goto label2;

        virtualinvoke r0.<groovyjarjarantlr.PrintWriterWithSMAP: void mapLine(boolean)>(1);

        goto label3;

     label2:
        $c1 = (char) i0;

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z1 != 0 goto label3;

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean anythingWrittenSinceMapping> = 1;

     label3:
        if i0 != 13 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean lastPrintCharacterWasCR> = $z2;

        return;
    }

    public void write(int)
    {
        int i0;
        groovyjarjarantlr.PrintWriterWithSMAP r0;

        r0 := @this: groovyjarjarantlr.PrintWriterWithSMAP;

        i0 := @parameter0: int;

        virtualinvoke r0.<groovyjarjarantlr.PrintWriterWithSMAP: void checkChar(int)>(i0);

        specialinvoke r0.<java.io.PrintWriter: void write(int)>(i0);

        return;
    }

    public void write(java.lang.String, int, int)
    {
        char $c3;
        groovyjarjarantlr.PrintWriterWithSMAP r0;
        int i0, i1, i2, i4, $i5;
        java.lang.String r1;

        r0 := @this: groovyjarjarantlr.PrintWriterWithSMAP;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0 + i1;

        i4 = i0;

     label1:
        if i4 >= i2 goto label2;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i4);

        $i5 = (int) $c3;

        virtualinvoke r0.<groovyjarjarantlr.PrintWriterWithSMAP: void checkChar(int)>($i5);

        i4 = i4 + 1;

        goto label1;

     label2:
        specialinvoke r0.<java.io.PrintWriter: void write(java.lang.String,int,int)>(r1, i0, i1);

        return;
    }

    public void println()
    {
        groovyjarjarantlr.PrintWriterWithSMAP r0;

        r0 := @this: groovyjarjarantlr.PrintWriterWithSMAP;

        virtualinvoke r0.<groovyjarjarantlr.PrintWriterWithSMAP: void mapLine(boolean)>(1);

        specialinvoke r0.<java.io.PrintWriter: void println()>();

        r0.<groovyjarjarantlr.PrintWriterWithSMAP: boolean lastPrintCharacterWasCR> = 0;

        return;
    }

    public java.util.Map getSourceMap()
    {
        groovyjarjarantlr.PrintWriterWithSMAP r0;
        java.util.Map $r1;

        r0 := @this: groovyjarjarantlr.PrintWriterWithSMAP;

        $r1 = r0.<groovyjarjarantlr.PrintWriterWithSMAP: java.util.Map sourceMap>;

        return $r1;
    }

    public int getCurrentOutputLine()
    {
        int $i0;
        groovyjarjarantlr.PrintWriterWithSMAP r0;

        r0 := @this: groovyjarjarantlr.PrintWriterWithSMAP;

        $i0 = r0.<groovyjarjarantlr.PrintWriterWithSMAP: int currentOutputLine>;

        return $i0;
    }
}
