public abstract class riotcmd.CmdLangParse extends arq.cmdline.CmdGeneral
{
    protected arq.cmdline.ModTime modTime;
    protected arq.cmdline.ModLangParse modLangParse;
    protected arq.cmdline.ModSymbol modSymbol;
    protected arq.cmdline.ArgDecl argStrict;
    protected org.apache.jena.riot.process.inf.InferenceSetupRDFS setup;
    static riotcmd.CmdLangParse$LangHandler langHandlerQuads;
    static riotcmd.CmdLangParse$LangHandler langHandlerTriples;
    static riotcmd.CmdLangParse$LangHandler langHandlerAny;
    protected static java.util.Map dispatch;
    protected riotcmd.CmdLangParse$LangHandler langHandlerOverall;
    private static final java.lang.String log4Jsetup;
    protected long totalMillis;
    protected long totalTuples;
    java.io.OutputStream output;

    public static void setLogging()
    {
        byte[] $r3;
        java.util.Properties $r0;
        java.io.ByteArrayInputStream $r1;
        java.io.IOException $r4;
        java.lang.String $r2;

        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        $r1 = new java.io.ByteArrayInputStream;

        $r2 = <riotcmd.CmdLangParse: java.lang.String log4Jsetup>;

        $r3 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: byte[] asUTF8bytes(java.lang.String)>($r2);

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

     label1:
        virtualinvoke $r0.<java.util.Properties: void load(java.io.InputStream)>($r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.util.Properties)>($r0);

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("log4j.configuration", "set");

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected void <init>(java.lang.String[])
    {
        java.io.PrintStream $r7;
        arq.cmdline.ModLangParse $r3, $r9;
        arq.cmdline.ModTime $r2, $r8;
        arq.cmdline.ModSymbol $r4, $r10;
        arq.cmdline.ArgDecl $r5;
        java.lang.String[] r1, $r6;
        riotcmd.CmdLangParse r0;
        arq.cmdline.ModVersion $r11, $r12, $r13;

        r0 := @this: riotcmd.CmdLangParse;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<arq.cmdline.CmdGeneral: void <init>(java.lang.String[])>(r1);

        $r2 = new arq.cmdline.ModTime;

        specialinvoke $r2.<arq.cmdline.ModTime: void <init>()>();

        r0.<riotcmd.CmdLangParse: arq.cmdline.ModTime modTime> = $r2;

        $r3 = new arq.cmdline.ModLangParse;

        specialinvoke $r3.<arq.cmdline.ModLangParse: void <init>()>();

        r0.<riotcmd.CmdLangParse: arq.cmdline.ModLangParse modLangParse> = $r3;

        $r4 = new arq.cmdline.ModSymbol;

        specialinvoke $r4.<arq.cmdline.ModSymbol: void <init>()>();

        r0.<riotcmd.CmdLangParse: arq.cmdline.ModSymbol modSymbol> = $r4;

        $r5 = new arq.cmdline.ArgDecl;

        $r6 = newarray (java.lang.String)[0];

        specialinvoke $r5.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "strict", $r6);

        r0.<riotcmd.CmdLangParse: arq.cmdline.ArgDecl argStrict> = $r5;

        r0.<riotcmd.CmdLangParse: org.apache.jena.riot.process.inf.InferenceSetupRDFS setup> = null;

        r0.<riotcmd.CmdLangParse: riotcmd.CmdLangParse$LangHandler langHandlerOverall> = null;

        r0.<riotcmd.CmdLangParse: long totalMillis> = 0L;

        r0.<riotcmd.CmdLangParse: long totalTuples> = 0L;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        r0.<riotcmd.CmdLangParse: java.io.OutputStream output> = $r7;

        staticinvoke <riotcmd.CmdLangParse: void setLogging()>();

        $r8 = r0.<riotcmd.CmdLangParse: arq.cmdline.ModTime modTime>;

        specialinvoke r0.<arq.cmdline.CmdGeneral: void addModule(arq.cmdline.ArgModuleGeneral)>($r8);

        $r9 = r0.<riotcmd.CmdLangParse: arq.cmdline.ModLangParse modLangParse>;

        specialinvoke r0.<arq.cmdline.CmdGeneral: void addModule(arq.cmdline.ArgModuleGeneral)>($r9);

        $r10 = r0.<riotcmd.CmdLangParse: arq.cmdline.ModSymbol modSymbol>;

        specialinvoke r0.<arq.cmdline.CmdGeneral: void addModule(arq.cmdline.ArgModuleGeneral)>($r10);

        $r11 = r0.<arq.cmdline.CmdGeneral: arq.cmdline.ModVersion modVersion>;

        virtualinvoke $r11.<arq.cmdline.ModVersion: void addClass(java.lang.Class)>(class "Lcom/hp/hpl/jena/Jena;");

        $r12 = r0.<arq.cmdline.CmdGeneral: arq.cmdline.ModVersion modVersion>;

        virtualinvoke $r12.<arq.cmdline.ModVersion: void addClass(java.lang.Class)>(class "Lcom/hp/hpl/jena/query/ARQ;");

        $r13 = r0.<arq.cmdline.CmdGeneral: arq.cmdline.ModVersion modVersion>;

        virtualinvoke $r13.<arq.cmdline.ModVersion: void addClass(java.lang.Class)>(class "Lorg/apache/jena/riot/RIOT;");

        return;
    }

    protected java.lang.String getSummary()
    {
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.String $r2, $r5;
        riotcmd.CmdLangParse r1;

        r1 := @this: riotcmd.CmdLangParse;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<riotcmd.CmdLangParse: java.lang.String getCommandName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [--time] [--check|--noCheck] [--sink] [--base=IRI] file ...");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected void processModulesAndArgs()
    {
        arq.cmdline.ArgDecl $r1;
        riotcmd.CmdLangParse r0;
        boolean $z0;

        r0 := @this: riotcmd.CmdLangParse;

        $r1 = r0.<riotcmd.CmdLangParse: arq.cmdline.ArgDecl argStrict>;

        $z0 = virtualinvoke r0.<riotcmd.CmdLangParse: boolean contains(arq.cmdline.ArgDecl)>($r1);

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.jena.riot.RIOT: void setStrictMode(boolean)>(1);

     label1:
        return;
    }

    protected void exec()
    {
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7;
        java.util.List $r4, $r5, $r6, $r10, $r26;
        java.lang.StringBuilder $r16, $r17, $r18;
        java.lang.Throwable $r23;
        riotcmd.CmdLangParse$LangHandler $r12, $r28;
        arq.cmdline.ModTime $r11, $r27;
        long $l2, $l3, $l5, $l6;
        org.apache.jena.riot.process.inf.InferenceSetupRDFS $r20;
        int $i0, $i1, $i4;
        java.lang.String r14, $r19;
        riotcmd.CmdLangParse r0;
        java.io.PrintStream $r8, $r9, $r24, $r25;
        arq.cmdline.ModLangParse $r1, $r2, $r21;
        org.slf4j.Logger $r15;
        java.util.Iterator $r7;
        com.hp.hpl.jena.rdf.model.Model $r3, $r22;
        java.lang.Object $r13;

        r0 := @this: riotcmd.CmdLangParse;

        $r1 = r0.<riotcmd.CmdLangParse: arq.cmdline.ModLangParse modLangParse>;

        $z0 = virtualinvoke $r1.<arq.cmdline.ModLangParse: boolean strictMode()>();

        if $z0 == 0 goto label01;

        staticinvoke <org.apache.jena.riot.RIOT: void setStrictMode(boolean)>(1);

     label01:
        $r2 = r0.<riotcmd.CmdLangParse: arq.cmdline.ModLangParse modLangParse>;

        $r3 = virtualinvoke $r2.<arq.cmdline.ModLangParse: com.hp.hpl.jena.rdf.model.Model getRDFSVocab()>();

        if $r3 == null goto label02;

        $r20 = new org.apache.jena.riot.process.inf.InferenceSetupRDFS;

        $r21 = r0.<riotcmd.CmdLangParse: arq.cmdline.ModLangParse modLangParse>;

        $r22 = virtualinvoke $r21.<arq.cmdline.ModLangParse: com.hp.hpl.jena.rdf.model.Model getRDFSVocab()>();

        specialinvoke $r20.<org.apache.jena.riot.process.inf.InferenceSetupRDFS: void <init>(com.hp.hpl.jena.rdf.model.Model)>($r22);

        r0.<riotcmd.CmdLangParse: org.apache.jena.riot.process.inf.InferenceSetupRDFS setup> = $r20;

     label02:
        $r4 = specialinvoke r0.<arq.cmdline.CmdGeneral: java.util.List getPositional()>();

        $z1 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label03;

        virtualinvoke r0.<riotcmd.CmdLangParse: void parseFile(java.lang.String)>("-");

        goto label08;

     label03:
        $r5 = specialinvoke r0.<arq.cmdline.CmdGeneral: java.util.List getPositional()>();

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 <= 1 goto label04;

        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        z2 = $z6;

        $r6 = specialinvoke r0.<arq.cmdline.CmdGeneral: java.util.List getPositional()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z7 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label08;

        $r13 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r13;

        if z2 == 0 goto label07;

        $z4 = specialinvoke r0.<arq.cmdline.CmdGeneral: boolean isQuiet()>();

        if $z4 != 0 goto label07;

        $r15 = staticinvoke <org.apache.jena.riot.SysRIOT: org.slf4j.Logger getLogger()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String)>($r19);

     label07:
        virtualinvoke r0.<riotcmd.CmdLangParse: void parseFile(java.lang.String)>(r14);

        goto label06;

     label08:
        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void flush()>();

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void flush()>();

        $r10 = specialinvoke r0.<arq.cmdline.CmdGeneral: java.util.List getPositional()>();

        $i1 = interfaceinvoke $r10.<java.util.List: int size()>();

        if $i1 <= 1 goto label12;

        $r11 = r0.<riotcmd.CmdLangParse: arq.cmdline.ModTime modTime>;

        $z3 = virtualinvoke $r11.<arq.cmdline.ModTime: boolean timingEnabled()>();

        if $z3 == 0 goto label12;

        $l3 = r0.<riotcmd.CmdLangParse: long totalTuples>;

        $l2 = r0.<riotcmd.CmdLangParse: long totalMillis>;

        $r12 = r0.<riotcmd.CmdLangParse: riotcmd.CmdLangParse$LangHandler langHandlerOverall>;

        virtualinvoke r0.<riotcmd.CmdLangParse: void output(java.lang.String,long,long,riotcmd.CmdLangParse$LangHandler)>("Total", $l3, $l2, $r12);

        goto label12;

     label09:
        $r23 := @caughtexception;

     label10:
        $r24 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r24.<java.io.PrintStream: void flush()>();

        $r25 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r25.<java.io.PrintStream: void flush()>();

        $r26 = specialinvoke r0.<arq.cmdline.CmdGeneral: java.util.List getPositional()>();

        $i4 = interfaceinvoke $r26.<java.util.List: int size()>();

        if $i4 <= 1 goto label11;

        $r27 = r0.<riotcmd.CmdLangParse: arq.cmdline.ModTime modTime>;

        $z5 = virtualinvoke $r27.<arq.cmdline.ModTime: boolean timingEnabled()>();

        if $z5 == 0 goto label11;

        $l6 = r0.<riotcmd.CmdLangParse: long totalTuples>;

        $l5 = r0.<riotcmd.CmdLangParse: long totalMillis>;

        $r28 = r0.<riotcmd.CmdLangParse: riotcmd.CmdLangParse$LangHandler langHandlerOverall>;

        virtualinvoke r0.<riotcmd.CmdLangParse: void output(java.lang.String,long,long,riotcmd.CmdLangParse$LangHandler)>("Total", $l6, $l5, $r28);

     label11:
        throw $r23;

     label12:
        return;

        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void parseFile(java.lang.String)
    {
        java.io.PrintStream $r6;
        java.lang.Exception $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r11;
        java.lang.String r0, $r10, $r12;
        riotcmd.CmdLangParse r2;
        boolean $z0;
        java.io.InputStream $r1, $r3;

        r2 := @this: riotcmd.CmdLangParse;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.InputStream in>;

        virtualinvoke r2.<riotcmd.CmdLangParse: void parseFile(java.lang.String,java.lang.String,java.io.InputStream)>("http://base/", "stdin", $r3);

        goto label5;

     label1:
        $r1 = staticinvoke <org.apache.jena.atlas.io.IO: java.io.InputStream openFile(java.lang.String)>(r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t open \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ");

        $r10 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r12);

        return;

     label4:
        virtualinvoke r2.<riotcmd.CmdLangParse: void parseFile(java.lang.String,java.lang.String,java.io.InputStream)>(null, r0, $r1);

        staticinvoke <org.apache.jena.atlas.io.IO: void close(java.io.Closeable)>($r1);

     label5:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void parseFile(java.lang.String, java.lang.String, java.io.InputStream)
    {
        arq.cmdline.ModLangParse $r1;
        java.lang.String $r2, r3, r5, r6;
        riotcmd.CmdLangParse r0;
        java.io.InputStream r4;

        r0 := @this: riotcmd.CmdLangParse;

        r5 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.io.InputStream;

        $r1 = r0.<riotcmd.CmdLangParse: arq.cmdline.ModLangParse modLangParse>;

        $r2 = virtualinvoke $r1.<arq.cmdline.ModLangParse: java.lang.String getBaseIRI()>();

        r6 = $r2;

        if $r2 != null goto label1;

        r6 = r5;

     label1:
        virtualinvoke r0.<riotcmd.CmdLangParse: void parseRIOT(java.lang.String,java.lang.String,java.io.InputStream)>(r6, r3, r4);

        return;
    }

    protected abstract org.apache.jena.riot.Lang selectLang(java.lang.String, org.apache.jena.riot.Lang);

    protected void parseRIOT(java.lang.String, java.lang.String, java.io.InputStream)
    {
        java.util.Map $r7;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6, $z7, z8, z9;
        org.apache.jena.riot.lang.StreamRDFCounting $r14;
        org.apache.jena.riot.system.ParserProfile $r17, $r22, $r25;
        arq.cmd.CmdException $r30;
        java.lang.StringBuilder $r31, $r32, $r33;
        java.lang.Throwable $r36;
        org.apache.jena.riot.RiotException $r37;
        riotcmd.CmdLangParse$LangHandler r9, $r10, $r11, $r12, $r28, $r29;
        arq.cmdline.ModTime $r18, $r19, $r44;
        org.apache.jena.riot.process.inf.InferenceSetupRDFS $r13, $r26;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7;
        org.apache.jena.riot.lang.LangRIOT $r16;
        org.apache.jena.riot.system.ErrorHandler r40;
        java.lang.String r0, $r1, $r34, r39;
        riotcmd.CmdLangParse r2;
        java.io.OutputStream $r27;
        arq.cmdline.ModLangParse $r3, $r4, $r35, $r38, $r41, $r43;
        org.apache.jena.riot.Lang $r5, $r6, $r20, $r21, $r23, $r24;
        org.apache.jena.riot.system.StreamRDF r42;
        java.lang.Object $r8;
        java.io.InputStream r15;

        r2 := @this: riotcmd.CmdLangParse;

        r39 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r15 := @parameter2: java.io.InputStream;

        $r1 = staticinvoke <org.apache.jena.riot.SysRIOT: java.lang.String chooseBaseIRI(java.lang.String,java.lang.String)>(r39, r0);

        z5 = 1;

        z9 = 1;

        z8 = 1;

        $r3 = r2.<riotcmd.CmdLangParse: arq.cmdline.ModLangParse modLangParse>;

        $z0 = virtualinvoke $r3.<arq.cmdline.ModLangParse: boolean explicitChecking()>();

        if $z0 == 0 goto label01;

        z5 = 1;

        z9 = 1;

        z8 = 1;

     label01:
        $r4 = r2.<riotcmd.CmdLangParse: arq.cmdline.ModLangParse modLangParse>;

        $z1 = virtualinvoke $r4.<arq.cmdline.ModLangParse: boolean explicitNoChecking()>();

        if $z1 == 0 goto label02;

        z5 = 0;

        z9 = 0;

        z8 = 0;

     label02:
        r40 = null;

        if z8 == 0 goto label04;

        $r35 = r2.<riotcmd.CmdLangParse: arq.cmdline.ModLangParse modLangParse>;

        $z3 = virtualinvoke $r35.<arq.cmdline.ModLangParse: boolean stopOnBadTerm()>();

        if $z3 == 0 goto label03;

        r40 = <org.apache.jena.riot.system.ErrorHandlerFactory: org.apache.jena.riot.system.ErrorHandler errorHandlerStd>;

        goto label04;

     label03:
        r40 = <org.apache.jena.riot.system.ErrorHandlerFactory: org.apache.jena.riot.system.ErrorHandler errorHandlerWarn>;

     label04:
        $r41 = r2.<riotcmd.CmdLangParse: arq.cmdline.ModLangParse modLangParse>;

        $z6 = virtualinvoke $r41.<arq.cmdline.ModLangParse: boolean skipOnBadTerm()>();

        if $z6 == 0 goto label05;

     label05:
        $r5 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQUADS>;

        $r6 = virtualinvoke r2.<riotcmd.CmdLangParse: org.apache.jena.riot.Lang selectLang(java.lang.String,org.apache.jena.riot.Lang)>(r0, $r5);

        $r7 = <riotcmd.CmdLangParse: java.util.Map dispatch>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r9 = (riotcmd.CmdLangParse$LangHandler) $r8;

        if r9 != null goto label06;

        $r30 = new arq.cmd.CmdException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Undefined language: ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<arq.cmd.CmdException: void <init>(java.lang.String)>($r34);

        throw $r30;

     label06:
        $r10 = r2.<riotcmd.CmdLangParse: riotcmd.CmdLangParse$LangHandler langHandlerOverall>;

        if $r10 != null goto label07;

        r2.<riotcmd.CmdLangParse: riotcmd.CmdLangParse$LangHandler langHandlerOverall> = r9;

        goto label08;

     label07:
        $r12 = r2.<riotcmd.CmdLangParse: riotcmd.CmdLangParse$LangHandler langHandlerOverall>;

        $r11 = <riotcmd.CmdLangParse: riotcmd.CmdLangParse$LangHandler langHandlerAny>;

        if $r12 == $r11 goto label08;

        $r28 = r2.<riotcmd.CmdLangParse: riotcmd.CmdLangParse$LangHandler langHandlerOverall>;

        if $r28 == r9 goto label08;

        $r29 = <riotcmd.CmdLangParse: riotcmd.CmdLangParse$LangHandler langHandlerAny>;

        r2.<riotcmd.CmdLangParse: riotcmd.CmdLangParse$LangHandler langHandlerOverall> = $r29;

     label08:
        staticinvoke <org.apache.jena.riot.system.SyntaxLabels: org.apache.jena.riot.out.NodeToLabel createNodeToLabel()>();

        r42 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF sinkNull()>();

        $r43 = r2.<riotcmd.CmdLangParse: arq.cmdline.ModLangParse modLangParse>;

        $z7 = virtualinvoke $r43.<arq.cmdline.ModLangParse: boolean toBitBucket()>();

        if $z7 != 0 goto label09;

        $r27 = r2.<riotcmd.CmdLangParse: java.io.OutputStream output>;

        r42 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF writer(java.io.OutputStream)>($r27);

     label09:
        $r13 = r2.<riotcmd.CmdLangParse: org.apache.jena.riot.process.inf.InferenceSetupRDFS setup>;

        if $r13 == null goto label10;

        $r26 = r2.<riotcmd.CmdLangParse: org.apache.jena.riot.process.inf.InferenceSetupRDFS setup>;

        r42 = staticinvoke <org.apache.jena.riot.process.inf.InfFactory: org.apache.jena.riot.system.StreamRDF inf(org.apache.jena.riot.system.StreamRDF,org.apache.jena.riot.process.inf.InferenceSetupRDFS)>(r42, $r26);

     label10:
        $r14 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.lang.StreamRDFCounting count(org.apache.jena.riot.system.StreamRDF)>(r42);

        $r16 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangRIOT createParser(java.io.InputStream,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.system.StreamRDF)>(r15, $r6, $r1, $r14);

     label11:
        if z9 == 0 goto label14;

        $r20 = interfaceinvoke $r16.<org.apache.jena.riot.lang.LangRIOT: org.apache.jena.riot.Lang getLang()>();

        $r21 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NTRIPLES>;

        if $r20 == $r21 goto label12;

        $r23 = interfaceinvoke $r16.<org.apache.jena.riot.lang.LangRIOT: org.apache.jena.riot.Lang getLang()>();

        $r24 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQUADS>;

        if $r23 != $r24 goto label13;

     label12:
        $r22 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.ParserProfile profile(java.lang.String,boolean,boolean,org.apache.jena.riot.system.ErrorHandler)>($r1, 0, 1, r40);

        interfaceinvoke $r16.<org.apache.jena.riot.lang.LangRIOT: void setProfile(org.apache.jena.riot.system.ParserProfile)>($r22);

        goto label15;

     label13:
        $r25 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.ParserProfile profile(java.lang.String,boolean,boolean,org.apache.jena.riot.system.ErrorHandler)>($r1, 1, 1, r40);

        interfaceinvoke $r16.<org.apache.jena.riot.lang.LangRIOT: void setProfile(org.apache.jena.riot.system.ParserProfile)>($r25);

        goto label15;

     label14:
        $r17 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.ParserProfile profile(java.lang.String,boolean,boolean,org.apache.jena.riot.system.ErrorHandler)>($r1, 0, 0, r40);

        interfaceinvoke $r16.<org.apache.jena.riot.lang.LangRIOT: void setProfile(org.apache.jena.riot.system.ParserProfile)>($r17);

     label15:
        $r44 = r2.<riotcmd.CmdLangParse: arq.cmdline.ModTime modTime>;

        virtualinvoke $r44.<arq.cmdline.ModTime: void startTimer()>();

        interfaceinvoke $r16.<org.apache.jena.riot.lang.LangRIOT: void parse()>();

     label16:
        interfaceinvoke $r14.<org.apache.jena.riot.lang.StreamRDFCounting: void finish()>();

        staticinvoke <org.apache.jena.atlas.io.IO: void close(java.io.Closeable)>(r15);

        goto label22;

     label17:
        $r37 := @caughtexception;

        $r38 = r2.<riotcmd.CmdLangParse: arq.cmdline.ModLangParse modLangParse>;

        $z4 = virtualinvoke $r38.<arq.cmdline.ModLangParse: boolean stopOnBadTerm()>();

        if $z4 == 0 goto label19;

     label18:
        interfaceinvoke $r14.<org.apache.jena.riot.lang.StreamRDFCounting: void finish()>();

        staticinvoke <org.apache.jena.atlas.io.IO: void close(java.io.Closeable)>(r15);

        return;

     label19:
        interfaceinvoke $r14.<org.apache.jena.riot.lang.StreamRDFCounting: void finish()>();

        staticinvoke <org.apache.jena.atlas.io.IO: void close(java.io.Closeable)>(r15);

        goto label22;

     label20:
        $r36 := @caughtexception;

     label21:
        interfaceinvoke $r14.<org.apache.jena.riot.lang.StreamRDFCounting: void finish()>();

        staticinvoke <org.apache.jena.atlas.io.IO: void close(java.io.Closeable)>(r15);

        throw $r36;

     label22:
        $r18 = r2.<riotcmd.CmdLangParse: arq.cmdline.ModTime modTime>;

        $l0 = virtualinvoke $r18.<arq.cmdline.ModTime: long endTimer()>();

        $l1 = interfaceinvoke $r14.<org.apache.jena.riot.lang.StreamRDFCounting: long countTriples()>();

        $l2 = interfaceinvoke $r14.<org.apache.jena.riot.lang.StreamRDFCounting: long countQuads()>();

        $l7 = $l1 + $l2;

        $r19 = r2.<riotcmd.CmdLangParse: arq.cmdline.ModTime modTime>;

        $z2 = virtualinvoke $r19.<arq.cmdline.ModTime: boolean timingEnabled()>();

        if $z2 == 0 goto label23;

        virtualinvoke r2.<riotcmd.CmdLangParse: void output(java.lang.String,long,long,riotcmd.CmdLangParse$LangHandler)>(r0, $l7, $l0, r9);

     label23:
        $l3 = r2.<riotcmd.CmdLangParse: long totalMillis>;

        $l4 = $l3 + $l0;

        r2.<riotcmd.CmdLangParse: long totalMillis> = $l4;

        $l5 = r2.<riotcmd.CmdLangParse: long totalTuples>;

        $l6 = $l5 + $l7;

        r2.<riotcmd.CmdLangParse: long totalTuples> = $l6;

        return;

        catch org.apache.jena.riot.RiotException from label11 to label16 with label17;
        catch java.lang.Throwable from label11 to label16 with label20;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    protected org.apache.jena.riot.tokens.Tokenizer makeTokenizer(java.io.InputStream)
    {
        org.apache.jena.riot.tokens.Tokenizer $r1;
        riotcmd.CmdLangParse r2;
        java.io.InputStream r0;

        r2 := @this: riotcmd.CmdLangParse;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.apache.jena.riot.tokens.TokenizerFactory: org.apache.jena.riot.tokens.Tokenizer makeTokenizerUTF8(java.io.InputStream)>(r0);

        return $r1;
    }

    protected void output(java.lang.String, long, long, riotcmd.CmdLangParse$LangHandler)
    {
        java.lang.Object[] $r1;
        riotcmd.CmdLangParse$LangHandler r6;
        java.lang.Double $r4, $r8;
        long l0, l1;
        byte $b2;
        java.lang.Long $r5;
        java.lang.String r2, $r7, $r9;
        riotcmd.CmdLangParse r10;
        double $d0, d1, $d2, $d3, $d4, $d5;
        java.io.PrintStream $r0, $r3;

        r10 := @this: riotcmd.CmdLangParse;

        r2 := @parameter0: java.lang.String;

        l1 := @parameter1: long;

        l0 := @parameter2: long;

        r6 := @parameter3: riotcmd.CmdLangParse$LangHandler;

        $d0 = (double) l0;

        d1 = $d0 / 1000.0;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void flush()>();

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r1 = newarray (java.lang.Object)[6];

        $r1[0] = r2;

        $d2 = (double) l0;

        $d3 = $d2 / 1000.0;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r1[2] = $r5;

        $r7 = interfaceinvoke r6.<riotcmd.CmdLangParse$LangHandler: java.lang.String getItemsName()>();

        $r1[3] = $r7;

        $b2 = d1 cmpl 0.0;

        if $b2 != 0 goto label1;

        $d5 = 0.0;

        goto label2;

     label1:
        $d4 = (double) l1;

        $d5 = $d4 / d1;

     label2:
        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        $r1[4] = $r8;

        $r9 = interfaceinvoke r6.<riotcmd.CmdLangParse$LangHandler: java.lang.String getRateName()>();

        $r1[5] = $r9;

        virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("%s : %,5.2f sec  %,d %s  %,.2f %s\n", $r1);

        return;
    }

    protected void output(java.lang.String)
    {
        java.io.PrintStream $r2;
        java.lang.Object[] $r0;
        java.lang.String r1;
        riotcmd.CmdLangParse r3;

        r3 := @this: riotcmd.CmdLangParse;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

        virtualinvoke $r2.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("%s : \n", $r0);

        return;
    }

    static void <clinit>()
    {
        riotcmd.CmdLangParse$LangHandler $r10, $r12;
        java.util.HashMap $r3;
        java.lang.String[] $r6;
        java.util.Map $r11, $r13;
        java.lang.String $r7;
        boolean $z0, $z1;
        org.apache.jena.riot.Lang r9;
        java.util.Iterator $r5;
        java.util.Collection $r4;
        riotcmd.CmdLangParse$1 $r0;
        riotcmd.CmdLangParse$2 $r1;
        riotcmd.CmdLangParse$3 $r2;
        java.lang.Object $r8;

        $r0 = new riotcmd.CmdLangParse$1;

        specialinvoke $r0.<riotcmd.CmdLangParse$1: void <init>()>();

        <riotcmd.CmdLangParse: riotcmd.CmdLangParse$LangHandler langHandlerQuads> = $r0;

        $r1 = new riotcmd.CmdLangParse$2;

        specialinvoke $r1.<riotcmd.CmdLangParse$2: void <init>()>();

        <riotcmd.CmdLangParse: riotcmd.CmdLangParse$LangHandler langHandlerTriples> = $r1;

        $r2 = new riotcmd.CmdLangParse$3;

        specialinvoke $r2.<riotcmd.CmdLangParse$3: void <init>()>();

        <riotcmd.CmdLangParse: riotcmd.CmdLangParse$LangHandler langHandlerAny> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <riotcmd.CmdLangParse: java.util.Map dispatch> = $r3;

        $r4 = staticinvoke <org.apache.jena.riot.RDFLanguages: java.util.Collection getRegisteredLanguages()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.jena.riot.Lang) $r8;

        $z1 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean isQuads(org.apache.jena.riot.Lang)>(r9);

        if $z1 == 0 goto label2;

        $r13 = <riotcmd.CmdLangParse: java.util.Map dispatch>;

        $r12 = <riotcmd.CmdLangParse: riotcmd.CmdLangParse$LangHandler langHandlerQuads>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, $r12);

        goto label3;

     label2:
        $r11 = <riotcmd.CmdLangParse: java.util.Map dispatch>;

        $r10 = <riotcmd.CmdLangParse: riotcmd.CmdLangParse$LangHandler langHandlerTriples>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, $r10);

     label3:
        goto label1;

     label4:
        $r6 = newarray (java.lang.String)[10];

        $r6[0] = "## Plain output to stderr";

        $r6[1] = "log4j.appender.riot.plainerr=org.apache.log4j.ConsoleAppender";

        $r6[2] = "log4j.appender.riot.plainerr.target=System.err";

        $r6[3] = "log4j.appender.riot.plainerr.layout=org.apache.log4j.PatternLayout";

        $r6[4] = "log4j.appender.riot.plainerr.layout.ConversionPattern=%-5p %m%n";

        $r6[5] = "## Everything";

        $r6[6] = "log4j.rootLogger=INFO, riot.plainerr";

        $r6[7] = "## Parser output";

        $r6[8] = "log4j.additivity.org.apache.jena.riot=false";

        $r6[9] = "log4j.logger.org.apache.jena.riot=ALL, riot.plainerr ";

        $r7 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String strjoin(java.lang.String,java.lang.String[])>("\n", $r6);

        <riotcmd.CmdLangParse: java.lang.String log4Jsetup> = $r7;

        return;
    }
}
