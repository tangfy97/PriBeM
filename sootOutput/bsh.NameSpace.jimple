public class bsh.NameSpace extends java.lang.Object implements java.io.Serializable, bsh.BshClassManager$Listener, bsh.NameSource
{
    public static final bsh.NameSpace JAVACODE;
    private java.lang.String nsName;
    private bsh.NameSpace parent;
    private java.util.Hashtable variables;
    private java.util.Hashtable methods;
    protected java.util.Hashtable importedClasses;
    private java.util.Vector importedPackages;
    private java.util.Vector importedCommands;
    private java.util.Vector importedObjects;
    private java.util.Vector importedStatic;
    private java.lang.String packageName;
    private transient bsh.BshClassManager classManager;
    private bsh.This thisReference;
    private java.util.Hashtable names;
    bsh.SimpleNode callerInfoNode;
    boolean isMethod;
    boolean isClass;
    java.lang.Class classStatic;
    java.lang.Object classInstance;
    private transient java.util.Hashtable classCache;
    java.util.Vector nameSourceListeners;

    void setClassStatic(java.lang.Class)
    {
        java.lang.Class r1;
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: java.lang.Class;

        r0.<bsh.NameSpace: java.lang.Class classStatic> = r1;

        virtualinvoke r0.<bsh.NameSpace: void importStatic(java.lang.Class)>(r1);

        return;
    }

    void setClassInstance(java.lang.Object)
    {
        java.lang.Object r1;
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: java.lang.Object;

        r0.<bsh.NameSpace: java.lang.Object classInstance> = r1;

        virtualinvoke r0.<bsh.NameSpace: void importObject(java.lang.Object)>(r1);

        return;
    }

    java.lang.Object getClassInstance() throws bsh.UtilEvalError
    {
        bsh.NameSpace r0;
        bsh.UtilEvalError $r8;
        java.lang.StringBuffer $r4, $r5, $r6;
        java.lang.Object $r1, $r9;
        java.lang.Class $r2;
        bsh.InterpreterError $r3;
        java.lang.String $r7;

        r0 := @this: bsh.NameSpace;

        $r1 = r0.<bsh.NameSpace: java.lang.Object classInstance>;

        if $r1 == null goto label1;

        $r9 = r0.<bsh.NameSpace: java.lang.Object classInstance>;

        return $r9;

     label1:
        $r2 = r0.<bsh.NameSpace: java.lang.Class classStatic>;

        if $r2 == null goto label2;

        $r8 = new bsh.UtilEvalError;

        specialinvoke $r8.<bsh.UtilEvalError: void <init>(java.lang.String)>("Can\'t refer to class instance from static context.");

        throw $r8;

     label2:
        $r3 = new bsh.InterpreterError;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t resolve class instance \'this\' in: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<bsh.InterpreterError: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public void <init>(bsh.NameSpace, java.lang.String)
    {
        java.lang.String r2;
        bsh.NameSpace r0, r1;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: bsh.NameSpace;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<bsh.NameSpace: void <init>(bsh.NameSpace,bsh.BshClassManager,java.lang.String)>(r1, null, r2);

        return;
    }

    public void <init>(bsh.BshClassManager, java.lang.String)
    {
        java.lang.String r2;
        bsh.BshClassManager r1;
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: bsh.BshClassManager;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<bsh.NameSpace: void <init>(bsh.NameSpace,bsh.BshClassManager,java.lang.String)>(null, r1, r2);

        return;
    }

    public void <init>(bsh.NameSpace, bsh.BshClassManager, java.lang.String)
    {
        bsh.NameSpace r0, r2;
        java.lang.String r1;
        bsh.BshClassManager r3;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: bsh.NameSpace;

        r3 := @parameter1: bsh.BshClassManager;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<bsh.NameSpace: void setName(java.lang.String)>(r1);

        virtualinvoke r0.<bsh.NameSpace: void setParent(bsh.NameSpace)>(r2);

        virtualinvoke r0.<bsh.NameSpace: void setClassManager(bsh.BshClassManager)>(r3);

        if r3 == null goto label1;

        virtualinvoke r3.<bsh.BshClassManager: void addListener(bsh.BshClassManager$Listener)>(r0);

     label1:
        return;
    }

    public void setName(java.lang.String)
    {
        java.lang.String r1;
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: java.lang.String;

        r0.<bsh.NameSpace: java.lang.String nsName> = r1;

        return;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        $r1 = r0.<bsh.NameSpace: java.lang.String nsName>;

        return $r1;
    }

    void setNode(bsh.SimpleNode)
    {
        bsh.SimpleNode r1;
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: bsh.SimpleNode;

        r0.<bsh.NameSpace: bsh.SimpleNode callerInfoNode> = r1;

        return;
    }

    bsh.SimpleNode getNode()
    {
        bsh.NameSpace r0, $r2, $r3;
        bsh.SimpleNode $r1, $r4, $r5;

        r0 := @this: bsh.NameSpace;

        $r1 = r0.<bsh.NameSpace: bsh.SimpleNode callerInfoNode>;

        if $r1 == null goto label1;

        $r5 = r0.<bsh.NameSpace: bsh.SimpleNode callerInfoNode>;

        return $r5;

     label1:
        $r2 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        if $r2 == null goto label2;

        $r3 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        $r4 = virtualinvoke $r3.<bsh.NameSpace: bsh.SimpleNode getNode()>();

        return $r4;

     label2:
        return null;
    }

    public java.lang.Object get(java.lang.String, bsh.Interpreter) throws bsh.UtilEvalError
    {
        bsh.Interpreter r4;
        bsh.Name $r3;
        bsh.NameSpace r1;
        java.lang.Object $r5;
        java.lang.String r2;
        bsh.CallStack $r0;

        r1 := @this: bsh.NameSpace;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: bsh.Interpreter;

        $r0 = new bsh.CallStack;

        specialinvoke $r0.<bsh.CallStack: void <init>(bsh.NameSpace)>(r1);

        $r3 = virtualinvoke r1.<bsh.NameSpace: bsh.Name getNameResolver(java.lang.String)>(r2);

        $r5 = virtualinvoke $r3.<bsh.Name: java.lang.Object toObject(bsh.CallStack,bsh.Interpreter)>($r0, r4);

        return $r5;
    }

    public void setVariable(java.lang.String, java.lang.Object, boolean) throws bsh.UtilEvalError
    {
        bsh.NameSpace r0;
        java.lang.Object r2;
        java.lang.String r1;
        boolean $z0, z1, $z2;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        z1 := @parameter2: boolean;

        $z0 = <bsh.Interpreter: boolean LOCALSCOPING>;

        if $z0 == 0 goto label1;

        $z2 = z1;

        goto label2;

     label1:
        $z2 = 1;

     label2:
        virtualinvoke r0.<bsh.NameSpace: void setVariable(java.lang.String,java.lang.Object,boolean,boolean)>(r1, r2, z1, $z2);

        return;
    }

    void setLocalVariable(java.lang.String, java.lang.Object, boolean) throws bsh.UtilEvalError
    {
        bsh.NameSpace r0;
        java.lang.Object r2;
        java.lang.String r1;
        boolean z0;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<bsh.NameSpace: void setVariable(java.lang.String,java.lang.Object,boolean,boolean)>(r1, r2, z0, 0);

        return;
    }

    void setVariable(java.lang.String, java.lang.Object, boolean, boolean) throws bsh.UtilEvalError
    {
        bsh.NameSpace r0;
        bsh.UtilEvalError $r7, $r14, $r15;
        bsh.Variable $r4, $r5;
        java.lang.StringBuffer $r8, $r9, $r10, $r16, $r17, $r18, $r19, $r21;
        java.lang.String r3, $r11, $r20, $r22;
        java.util.Hashtable $r1, $r6, $r13;
        boolean z0, z1;
        java.lang.Object r2;
        bsh.InterpreterError $r12;

        r0 := @this: bsh.NameSpace;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        z1 := @parameter2: boolean;

        z0 := @parameter3: boolean;

        $r1 = r0.<bsh.NameSpace: java.util.Hashtable variables>;

        if $r1 != null goto label1;

        $r13 = new java.util.Hashtable;

        specialinvoke $r13.<java.util.Hashtable: void <init>()>();

        r0.<bsh.NameSpace: java.util.Hashtable variables> = $r13;

     label1:
        if r2 != null goto label2;

        $r12 = new bsh.InterpreterError;

        specialinvoke $r12.<bsh.InterpreterError: void <init>(java.lang.String)>("null variable value");

        throw $r12;

     label2:
        $r4 = virtualinvoke r0.<bsh.NameSpace: bsh.Variable getVariableImpl(java.lang.String,boolean)>(r3, z0);

        if $r4 == null goto label6;

     label3:
        virtualinvoke $r4.<bsh.Variable: void setValue(java.lang.Object,int)>(r2, 1);

     label4:
        goto label8;

     label5:
        $r14 := @caughtexception;

        $r15 = new bsh.UtilEvalError;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Variable assignment: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r20 = virtualinvoke $r14.<bsh.UtilEvalError: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<bsh.UtilEvalError: void <init>(java.lang.String)>($r22);

        throw $r15;

     label6:
        if z1 == 0 goto label7;

        $r7 = new bsh.UtilEvalError;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(Strict Java mode) Assignment to undeclared variable: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<bsh.UtilEvalError: void <init>(java.lang.String)>($r11);

        throw $r7;

     label7:
        $r6 = r0.<bsh.NameSpace: java.util.Hashtable variables>;

        $r5 = new bsh.Variable;

        specialinvoke $r5.<bsh.Variable: void <init>(java.lang.String,java.lang.Object,bsh.Modifiers)>(r3, r2, null);

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r5);

        virtualinvoke r0.<bsh.NameSpace: void nameSpaceChanged()>();

     label8:
        return;

        catch bsh.UtilEvalError from label3 to label4 with label5;
    }

    public void unsetVariable(java.lang.String)
    {
        bsh.NameSpace r0;
        java.lang.String r2;
        java.util.Hashtable $r1, $r3;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<bsh.NameSpace: java.util.Hashtable variables>;

        if $r1 == null goto label1;

        $r3 = r0.<bsh.NameSpace: java.util.Hashtable variables>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r2);

        virtualinvoke r0.<bsh.NameSpace: void nameSpaceChanged()>();

     label1:
        return;
    }

    public java.lang.String[] getVariableNames()
    {
        java.util.Enumeration $r3;
        bsh.NameSpace r0;
        java.lang.String[] $r4, $r5;
        java.util.Hashtable $r1, $r2;

        r0 := @this: bsh.NameSpace;

        $r1 = r0.<bsh.NameSpace: java.util.Hashtable variables>;

        if $r1 != null goto label1;

        $r5 = newarray (java.lang.String)[0];

        return $r5;

     label1:
        $r2 = r0.<bsh.NameSpace: java.util.Hashtable variables>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration keys()>();

        $r4 = specialinvoke r0.<bsh.NameSpace: java.lang.String[] enumerationToStringArray(java.util.Enumeration)>($r3);

        return $r4;
    }

    public java.lang.String[] getMethodNames()
    {
        java.util.Enumeration $r3;
        bsh.NameSpace r0;
        java.lang.String[] $r4, $r5;
        java.util.Hashtable $r1, $r2;

        r0 := @this: bsh.NameSpace;

        $r1 = r0.<bsh.NameSpace: java.util.Hashtable methods>;

        if $r1 != null goto label1;

        $r5 = newarray (java.lang.String)[0];

        return $r5;

     label1:
        $r2 = r0.<bsh.NameSpace: java.util.Hashtable methods>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration keys()>();

        $r4 = specialinvoke r0.<bsh.NameSpace: java.lang.String[] enumerationToStringArray(java.util.Enumeration)>($r3);

        return $r4;
    }

    public bsh.BshMethod[] getMethods()
    {
        java.util.Enumeration $r3;
        bsh.NameSpace r0;
        java.util.Hashtable $r1, $r2;
        bsh.BshMethod[] $r4, $r5;

        r0 := @this: bsh.NameSpace;

        $r1 = r0.<bsh.NameSpace: java.util.Hashtable methods>;

        if $r1 != null goto label1;

        $r5 = newarray (bsh.BshMethod)[0];

        return $r5;

     label1:
        $r2 = r0.<bsh.NameSpace: java.util.Hashtable methods>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration elements()>();

        $r4 = specialinvoke r0.<bsh.NameSpace: bsh.BshMethod[] flattenMethodCollection(java.util.Enumeration)>($r3);

        return $r4;
    }

    private java.lang.String[] enumerationToStringArray(java.util.Enumeration)
    {
        java.util.Vector $r0;
        java.util.Enumeration r1;
        bsh.NameSpace r4;
        int $i0;
        java.lang.Object $r2;
        java.lang.String[] r3;
        boolean $z0;

        r4 := @this: bsh.NameSpace;

        r1 := @parameter0: java.util.Enumeration;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r2);

     label2:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke $r0.<java.util.Vector: int size()>();

        r3 = newarray (java.lang.String)[$i0];

        virtualinvoke $r0.<java.util.Vector: void copyInto(java.lang.Object[])>(r3);

        return r3;
    }

    private bsh.BshMethod[] flattenMethodCollection(java.util.Enumeration)
    {
        java.util.Enumeration r1;
        bsh.NameSpace r5;
        java.util.Vector $r0, r3;
        int $i0, $i1, i2;
        java.lang.Object $r2, $r4;
        boolean $z0, $z1;
        bsh.BshMethod[] r6;

        r5 := @this: bsh.NameSpace;

        r1 := @parameter0: java.util.Enumeration;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        goto label5;

     label1:
        $r2 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        $z0 = $r2 instanceof bsh.BshMethod;

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r2);

        goto label5;

     label2:
        r3 = (java.util.Vector) $r2;

        i2 = 0;

        goto label4;

     label3:
        $r4 = virtualinvoke r3.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r4);

        i2 = i2 + 1;

     label4:
        $i0 = virtualinvoke r3.<java.util.Vector: int size()>();

        if i2 < $i0 goto label3;

     label5:
        $z1 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 != 0 goto label1;

        $i1 = virtualinvoke $r0.<java.util.Vector: int size()>();

        r6 = newarray (bsh.BshMethod)[$i1];

        virtualinvoke $r0.<java.util.Vector: void copyInto(java.lang.Object[])>(r6);

        return r6;
    }

    public bsh.NameSpace getParent()
    {
        bsh.NameSpace r0, $r1;

        r0 := @this: bsh.NameSpace;

        $r1 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        return $r1;
    }

    public bsh.This getSuper(bsh.Interpreter)
    {
        bsh.This $r3, $r5;
        bsh.Interpreter r2;
        bsh.NameSpace r0, $r1, $r4;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: bsh.Interpreter;

        $r1 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        if $r1 == null goto label1;

        $r4 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        $r5 = virtualinvoke $r4.<bsh.NameSpace: bsh.This getThis(bsh.Interpreter)>(r2);

        return $r5;

     label1:
        $r3 = virtualinvoke r0.<bsh.NameSpace: bsh.This getThis(bsh.Interpreter)>(r2);

        return $r3;
    }

    public bsh.This getGlobal(bsh.Interpreter)
    {
        bsh.This $r3, $r5;
        bsh.Interpreter r2;
        bsh.NameSpace r0, $r1, $r4;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: bsh.Interpreter;

        $r1 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        if $r1 == null goto label1;

        $r4 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        $r5 = virtualinvoke $r4.<bsh.NameSpace: bsh.This getGlobal(bsh.Interpreter)>(r2);

        return $r5;

     label1:
        $r3 = virtualinvoke r0.<bsh.NameSpace: bsh.This getThis(bsh.Interpreter)>(r2);

        return $r3;
    }

    bsh.This getThis(bsh.Interpreter)
    {
        bsh.This $r1, $r2, $r4;
        bsh.Interpreter r3;
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        r3 := @parameter0: bsh.Interpreter;

        $r1 = r0.<bsh.NameSpace: bsh.This thisReference>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <bsh.This: bsh.This getThis(bsh.NameSpace,bsh.Interpreter)>(r0, r3);

        r0.<bsh.NameSpace: bsh.This thisReference> = $r4;

     label1:
        $r2 = r0.<bsh.NameSpace: bsh.This thisReference>;

        return $r2;
    }

    public bsh.BshClassManager getClassManager()
    {
        java.io.PrintStream $r3;
        bsh.NameSpace r0, $r2, $r6, $r7, $r8;
        bsh.BshClassManager $r1, $r4, $r5, $r9, $r10;

        r0 := @this: bsh.NameSpace;

        $r1 = r0.<bsh.NameSpace: bsh.BshClassManager classManager>;

        if $r1 == null goto label1;

        $r10 = r0.<bsh.NameSpace: bsh.BshClassManager classManager>;

        return $r10;

     label1:
        $r2 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        if $r2 == null goto label2;

        $r7 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        $r6 = <bsh.NameSpace: bsh.NameSpace JAVACODE>;

        if $r7 == $r6 goto label2;

        $r8 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        $r9 = virtualinvoke $r8.<bsh.NameSpace: bsh.BshClassManager getClassManager()>();

        return $r9;

     label2:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("experiment: creating class manager");

        $r4 = staticinvoke <bsh.BshClassManager: bsh.BshClassManager createClassManager(bsh.Interpreter)>(null);

        r0.<bsh.NameSpace: bsh.BshClassManager classManager> = $r4;

        $r5 = r0.<bsh.NameSpace: bsh.BshClassManager classManager>;

        return $r5;
    }

    void setClassManager(bsh.BshClassManager)
    {
        bsh.BshClassManager r1;
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: bsh.BshClassManager;

        r0.<bsh.NameSpace: bsh.BshClassManager classManager> = r1;

        return;
    }

    public void prune()
    {
        bsh.BshClassManager $r1, $r2;
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        $r1 = r0.<bsh.NameSpace: bsh.BshClassManager classManager>;

        if $r1 != null goto label1;

        $r2 = staticinvoke <bsh.BshClassManager: bsh.BshClassManager createClassManager(bsh.Interpreter)>(null);

        virtualinvoke r0.<bsh.NameSpace: void setClassManager(bsh.BshClassManager)>($r2);

     label1:
        virtualinvoke r0.<bsh.NameSpace: void setParent(bsh.NameSpace)>(null);

        return;
    }

    public void setParent(bsh.NameSpace)
    {
        bsh.NameSpace r0, r1;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: bsh.NameSpace;

        r0.<bsh.NameSpace: bsh.NameSpace parent> = r1;

        if r1 != null goto label1;

        virtualinvoke r0.<bsh.NameSpace: void loadDefaultImports()>();

     label1:
        return;
    }

    public java.lang.Object getVariable(java.lang.String) throws bsh.UtilEvalError
    {
        java.lang.Object $r2;
        java.lang.String r1;
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<bsh.NameSpace: java.lang.Object getVariable(java.lang.String,boolean)>(r1, 1);

        return $r2;
    }

    public java.lang.Object getVariable(java.lang.String, boolean) throws bsh.UtilEvalError
    {
        bsh.NameSpace r0;
        java.lang.Object $r3;
        java.lang.String r1;
        bsh.Variable $r2;
        boolean z0;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<bsh.NameSpace: bsh.Variable getVariableImpl(java.lang.String,boolean)>(r1, z0);

        $r3 = virtualinvoke r0.<bsh.NameSpace: java.lang.Object unwrapVariable(bsh.Variable)>($r2);

        return $r3;
    }

    protected bsh.Variable getVariableImpl(java.lang.String, boolean) throws bsh.UtilEvalError
    {
        bsh.NameSpace r0, $r1, $r3;
        bsh.Variable r7;
        java.lang.Object $r6;
        java.lang.String r2;
        java.util.Hashtable $r4, $r5;
        boolean z0, $z1, $z2;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r7 = null;

        if null != null goto label1;

        $z2 = r0.<bsh.NameSpace: boolean isClass>;

        if $z2 == 0 goto label1;

        r7 = virtualinvoke r0.<bsh.NameSpace: bsh.Variable getImportedVar(java.lang.String)>(r2);

     label1:
        if r7 != null goto label2;

        $r4 = r0.<bsh.NameSpace: java.util.Hashtable variables>;

        if $r4 == null goto label2;

        $r5 = r0.<bsh.NameSpace: java.util.Hashtable variables>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        r7 = (bsh.Variable) $r6;

     label2:
        if r7 != null goto label3;

        $z1 = r0.<bsh.NameSpace: boolean isClass>;

        if $z1 != 0 goto label3;

        r7 = virtualinvoke r0.<bsh.NameSpace: bsh.Variable getImportedVar(java.lang.String)>(r2);

     label3:
        if z0 == 0 goto label4;

        if r7 != null goto label4;

        $r1 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        if $r1 == null goto label4;

        $r3 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        r7 = virtualinvoke $r3.<bsh.NameSpace: bsh.Variable getVariableImpl(java.lang.String,boolean)>(r2, z0);

     label4:
        return r7;
    }

    public bsh.Variable[] getDeclaredVariables()
    {
        java.util.Enumeration $r5;
        bsh.NameSpace r0;
        bsh.Variable $r7;
        int $i0, $i1, i2;
        bsh.Variable[] r3, $r8;
        java.lang.Object $r6;
        java.util.Hashtable $r1, $r2, $r4;
        boolean $z0;

        r0 := @this: bsh.NameSpace;

        $r1 = r0.<bsh.NameSpace: java.util.Hashtable variables>;

        if $r1 != null goto label1;

        $r8 = newarray (bsh.Variable)[0];

        return $r8;

     label1:
        $r2 = r0.<bsh.NameSpace: java.util.Hashtable variables>;

        $i0 = virtualinvoke $r2.<java.util.Hashtable: int size()>();

        r3 = newarray (bsh.Variable)[$i0];

        i2 = 0;

        $r4 = r0.<bsh.NameSpace: java.util.Hashtable variables>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.util.Enumeration elements()>();

        goto label3;

     label2:
        $i1 = i2;

        i2 = i2 + 1;

        $r6 = interfaceinvoke $r5.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r7 = (bsh.Variable) $r6;

        r3[$i1] = $r7;

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label2;

        return r3;
    }

    protected java.lang.Object unwrapVariable(bsh.Variable) throws bsh.UtilEvalError
    {
        java.lang.Object $r2;
        bsh.Variable r0;
        bsh.NameSpace r1;

        r1 := @this: bsh.NameSpace;

        r0 := @parameter0: bsh.Variable;

        if r0 != null goto label1;

        $r2 = <bsh.Primitive: bsh.Primitive VOID>;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<bsh.Variable: java.lang.Object getValue()>();

     label2:
        return $r2;
    }

    public void setTypedVariable(java.lang.String, java.lang.Class, java.lang.Object, boolean) throws bsh.UtilEvalError
    {
        bsh.Modifiers $r0;
        bsh.NameSpace r1;
        java.lang.Class r3;
        java.lang.Object r4;
        java.lang.String r2;
        boolean z0;

        r1 := @this: bsh.NameSpace;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Class;

        r4 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        $r0 = new bsh.Modifiers;

        specialinvoke $r0.<bsh.Modifiers: void <init>()>();

        if z0 == 0 goto label1;

        virtualinvoke $r0.<bsh.Modifiers: void addModifier(int,java.lang.String)>(2, "final");

     label1:
        virtualinvoke r1.<bsh.NameSpace: void setTypedVariable(java.lang.String,java.lang.Class,java.lang.Object,bsh.Modifiers)>(r2, r3, r4, $r0);

        return;
    }

    public void setTypedVariable(java.lang.String, java.lang.Class, java.lang.Object, bsh.Modifiers) throws bsh.UtilEvalError
    {
        bsh.NameSpace r0;
        bsh.UtilEvalError $r11;
        bsh.Variable $r3, $r4;
        bsh.Modifiers r7;
        java.lang.StringBuffer $r12, $r13, $r14, $r15, $r17;
        java.lang.String r2, $r18;
        java.util.Hashtable $r1, $r8, $r19;
        java.lang.Class r5, $r9, $r10, $r16;
        java.lang.Object r6;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Class;

        r6 := @parameter2: java.lang.Object;

        r7 := @parameter3: bsh.Modifiers;

        $r1 = r0.<bsh.NameSpace: java.util.Hashtable variables>;

        if $r1 != null goto label1;

        $r19 = new java.util.Hashtable;

        specialinvoke $r19.<java.util.Hashtable: void <init>()>();

        r0.<bsh.NameSpace: java.util.Hashtable variables> = $r19;

     label1:
        $r3 = virtualinvoke r0.<bsh.NameSpace: bsh.Variable getVariableImpl(java.lang.String,boolean)>(r2, 0);

        if $r3 == null goto label3;

        $r9 = virtualinvoke $r3.<bsh.Variable: java.lang.Class getType()>();

        if $r9 == null goto label3;

        $r10 = virtualinvoke $r3.<bsh.Variable: java.lang.Class getType()>();

        if $r10 == r5 goto label2;

        $r11 = new bsh.UtilEvalError;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Typed variable: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" was previously declared with type: ");

        $r16 = virtualinvoke $r3.<bsh.Variable: java.lang.Class getType()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<bsh.UtilEvalError: void <init>(java.lang.String)>($r18);

        throw $r11;

     label2:
        virtualinvoke $r3.<bsh.Variable: void setValue(java.lang.Object,int)>(r6, 0);

        return;

     label3:
        $r8 = r0.<bsh.NameSpace: java.util.Hashtable variables>;

        $r4 = new bsh.Variable;

        specialinvoke $r4.<bsh.Variable: void <init>(java.lang.String,java.lang.Class,java.lang.Object,bsh.Modifiers)>(r2, r5, r6, r7);

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4);

        return;
    }

    public void setMethod(java.lang.String, bsh.BshMethod) throws bsh.UtilEvalError
    {
        bsh.NameSpace r0;
        bsh.BshMethod r5;
        java.util.Vector $r6, $r7;
        java.lang.Object $r4;
        java.lang.String r2;
        java.util.Hashtable $r1, $r3, $r8, $r9, $r10;
        boolean $z0;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: bsh.BshMethod;

        $r1 = r0.<bsh.NameSpace: java.util.Hashtable methods>;

        if $r1 != null goto label1;

        $r10 = new java.util.Hashtable;

        specialinvoke $r10.<java.util.Hashtable: void <init>()>();

        r0.<bsh.NameSpace: java.util.Hashtable methods> = $r10;

     label1:
        $r3 = r0.<bsh.NameSpace: java.util.Hashtable methods>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        if $r4 != null goto label2;

        $r9 = r0.<bsh.NameSpace: java.util.Hashtable methods>;

        virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5);

        goto label4;

     label2:
        $z0 = $r4 instanceof bsh.BshMethod;

        if $z0 == 0 goto label3;

        $r7 = new java.util.Vector;

        specialinvoke $r7.<java.util.Vector: void <init>()>();

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>($r4);

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>(r5);

        $r8 = r0.<bsh.NameSpace: java.util.Hashtable methods>;

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r7);

        goto label4;

     label3:
        $r6 = (java.util.Vector) $r4;

        virtualinvoke $r6.<java.util.Vector: void addElement(java.lang.Object)>(r5);

     label4:
        return;
    }

    public bsh.BshMethod getMethod(java.lang.String, java.lang.Class[]) throws bsh.UtilEvalError
    {
        bsh.NameSpace r0;
        java.lang.Class[] r2;
        java.lang.String r1;
        bsh.BshMethod $r3;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        $r3 = virtualinvoke r0.<bsh.NameSpace: bsh.BshMethod getMethod(java.lang.String,java.lang.Class[],boolean)>(r1, r2, 0);

        return $r3;
    }

    public bsh.BshMethod getMethod(java.lang.String, java.lang.Class[], boolean) throws bsh.UtilEvalError
    {
        bsh.NameSpace r0, $r1, $r4;
        java.util.Vector r15;
        int $i0, $i1, $i2, $i3, i4, $i6;
        java.lang.String r2;
        java.lang.Class[][] $r13;
        java.util.Hashtable $r6, $r7;
        boolean z0, $z1, $z2, $z3;
        bsh.BshMethod[] $r9, r16;
        java.lang.Class[] r3, $r12;
        bsh.BshMethod $r5, $r10, $r11, r14;
        java.lang.Object $r8;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Class[];

        z0 := @parameter2: boolean;

        r14 = null;

        if null != null goto label1;

        $z3 = r0.<bsh.NameSpace: boolean isClass>;

        if $z3 == 0 goto label1;

        if z0 != 0 goto label1;

        r14 = virtualinvoke r0.<bsh.NameSpace: bsh.BshMethod getImportedMethod(java.lang.String,java.lang.Class[])>(r2, r3);

     label1:
        if r14 != null goto label6;

        $r6 = r0.<bsh.NameSpace: java.util.Hashtable methods>;

        if $r6 == null goto label6;

        $r7 = r0.<bsh.NameSpace: java.util.Hashtable methods>;

        $r8 = virtualinvoke $r7.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        if $r8 == null goto label6;

        $z2 = $r8 instanceof java.util.Vector;

        if $z2 == 0 goto label2;

        r15 = (java.util.Vector) $r8;

        $i3 = virtualinvoke r15.<java.util.Vector: int size()>();

        r16 = newarray (bsh.BshMethod)[$i3];

        virtualinvoke r15.<java.util.Vector: void copyInto(java.lang.Object[])>(r16);

        goto label3;

     label2:
        $r9 = newarray (bsh.BshMethod)[1];

        $r10 = (bsh.BshMethod) $r8;

        $r9[0] = $r10;

        r16 = $r9;

     label3:
        $i0 = lengthof r16;

        $r13 = newarray (java.lang.Class[])[$i0];

        i4 = 0;

        goto label5;

     label4:
        $r11 = r16[i4];

        $r12 = virtualinvoke $r11.<bsh.BshMethod: java.lang.Class[] getParameterTypes()>();

        $r13[i4] = $r12;

        i4 = i4 + 1;

     label5:
        $i1 = lengthof r16;

        if i4 < $i1 goto label4;

        $i2 = staticinvoke <bsh.Reflect: int findMostSpecificSignature(java.lang.Class[],java.lang.Class[][])>(r3, $r13);

        $i6 = (int) -1;

        if $i2 == $i6 goto label6;

        r14 = r16[$i2];

     label6:
        if r14 != null goto label7;

        $z1 = r0.<bsh.NameSpace: boolean isClass>;

        if $z1 != 0 goto label7;

        if z0 != 0 goto label7;

        r14 = virtualinvoke r0.<bsh.NameSpace: bsh.BshMethod getImportedMethod(java.lang.String,java.lang.Class[])>(r2, r3);

     label7:
        if z0 != 0 goto label8;

        if r14 != null goto label8;

        $r1 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        if $r1 == null goto label8;

        $r4 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        $r5 = virtualinvoke $r4.<bsh.NameSpace: bsh.BshMethod getMethod(java.lang.String,java.lang.Class[])>(r2, r3);

        return $r5;

     label8:
        return r14;
    }

    public void importClass(java.lang.String)
    {
        bsh.NameSpace r0;
        java.lang.String r2, $r4;
        java.util.Hashtable $r1, $r3, $r5;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<bsh.NameSpace: java.util.Hashtable importedClasses>;

        if $r1 != null goto label1;

        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<java.util.Hashtable: void <init>()>();

        r0.<bsh.NameSpace: java.util.Hashtable importedClasses> = $r5;

     label1:
        $r3 = r0.<bsh.NameSpace: java.util.Hashtable importedClasses>;

        $r4 = staticinvoke <bsh.Name: java.lang.String suffix(java.lang.String,int)>(r2, 1);

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r2);

        virtualinvoke r0.<bsh.NameSpace: void nameSpaceChanged()>();

        return;
    }

    public void importPackage(java.lang.String)
    {
        bsh.NameSpace r0;
        java.util.Vector $r1, $r3, $r4, $r5, $r6;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<bsh.NameSpace: java.util.Vector importedPackages>;

        if $r1 != null goto label1;

        $r6 = new java.util.Vector;

        specialinvoke $r6.<java.util.Vector: void <init>()>();

        r0.<bsh.NameSpace: java.util.Vector importedPackages> = $r6;

     label1:
        $r3 = r0.<bsh.NameSpace: java.util.Vector importedPackages>;

        $z0 = virtualinvoke $r3.<java.util.Vector: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r5 = r0.<bsh.NameSpace: java.util.Vector importedPackages>;

        virtualinvoke $r5.<java.util.Vector: boolean remove(java.lang.Object)>(r2);

     label2:
        $r4 = r0.<bsh.NameSpace: java.util.Vector importedPackages>;

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        virtualinvoke r0.<bsh.NameSpace: void nameSpaceChanged()>();

        return;
    }

    public void importCommands(java.lang.String)
    {
        bsh.NameSpace r0;
        java.util.Vector $r1, $r3, $r4, $r8, $r11;
        java.lang.StringBuffer $r5, $r6, $r7;
        int $i0, $i1, $i2;
        java.lang.String $r2, r9, r10;
        boolean $z0, $z1, $z2;

        r0 := @this: bsh.NameSpace;

        r9 := @parameter0: java.lang.String;

        $r1 = r0.<bsh.NameSpace: java.util.Vector importedCommands>;

        if $r1 != null goto label1;

        $r8 = new java.util.Vector;

        specialinvoke $r8.<java.util.Vector: void <init>()>();

        r0.<bsh.NameSpace: java.util.Vector importedCommands> = $r8;

     label1:
        $r2 = virtualinvoke r9.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        r10 = $r2;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 != 0 goto label2;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $i0 = virtualinvoke r10.<java.lang.String: int length()>();

        if $i0 <= 1 goto label3;

        $z1 = virtualinvoke r10.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z1 == 0 goto label3;

        $i1 = virtualinvoke r10.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        r10 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

     label3:
        $r11 = r0.<bsh.NameSpace: java.util.Vector importedCommands>;

        $z2 = virtualinvoke $r11.<java.util.Vector: boolean contains(java.lang.Object)>(r10);

        if $z2 == 0 goto label4;

        $r4 = r0.<bsh.NameSpace: java.util.Vector importedCommands>;

        virtualinvoke $r4.<java.util.Vector: boolean remove(java.lang.Object)>(r10);

     label4:
        $r3 = r0.<bsh.NameSpace: java.util.Vector importedCommands>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r10);

        virtualinvoke r0.<bsh.NameSpace: void nameSpaceChanged()>();

        return;
    }

    public java.lang.Object getCommand(java.lang.String, java.lang.Class[], bsh.Interpreter) throws bsh.UtilEvalError
    {
        bsh.BshClassManager $r1;
        java.util.Vector $r3, $r9, $r10;
        boolean $z0, $z1, $z2;
        bsh.Interpreter r0;
        bsh.NameSpace r2, $r4, $r7;
        java.lang.StringBuffer $r14, $r15, $r16, $r17, $r19, $r20, $r26, $r27, $r28, $r30, $r31, $r36, $r37, $r38, $r40, $r41, $r45, $r46, $r47, $r48, $r49, $r50;
        int $i0, i1, $i3;
        java.lang.String r5, r12, $r21, $r24, $r25, $r32, $r42, r43, r44;
        java.lang.Class[] r6;
        bsh.BshMethod $r34;
        java.lang.Object $r8, $r11;
        java.lang.Class $r33;
        java.io.InputStream $r22;

        r2 := @this: bsh.NameSpace;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.Class[];

        r0 := @parameter2: bsh.Interpreter;

        $z0 = <bsh.Interpreter: boolean DEBUG>;

        if $z0 == 0 goto label01;

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getCommand: ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r42);

     label01:
        $r1 = virtualinvoke r0.<bsh.Interpreter: bsh.BshClassManager getClassManager()>();

        $r3 = r2.<bsh.NameSpace: java.util.Vector importedCommands>;

        if $r3 == null goto label10;

        $r9 = r2.<bsh.NameSpace: java.util.Vector importedCommands>;

        $i0 = virtualinvoke $r9.<java.util.Vector: int size()>();

        i1 = $i0 - 1;

        goto label09;

     label02:
        $r10 = r2.<bsh.NameSpace: java.util.Vector importedCommands>;

        $r11 = virtualinvoke $r10.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r12 = (java.lang.String) $r11;

        $z1 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("/");

        if $z1 == 0 goto label03;

        $r46 = new java.lang.StringBuffer;

        specialinvoke $r46.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".bsh");

        r43 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label04;

     label03:
        $r47 = new java.lang.StringBuffer;

        specialinvoke $r47.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".bsh");

        r43 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

     label04:
        $r48 = new java.lang.StringBuffer;

        specialinvoke $r48.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("searching for script: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r43);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r21);

        $r22 = virtualinvoke $r1.<bsh.BshClassManager: java.io.InputStream getResourceAsStream(java.lang.String)>(r43);

        if $r22 == null goto label05;

        $r34 = specialinvoke r2.<bsh.NameSpace: bsh.BshMethod loadScriptedCommand(java.io.InputStream,java.lang.String,java.lang.Class[],java.lang.String,bsh.Interpreter)>($r22, r5, r6, r43, r0);

        return $r34;

     label05:
        $z2 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("/");

        if $z2 == 0 goto label06;

        r44 = r5;

        goto label07;

     label06:
        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke r12.<java.lang.String: java.lang.String substring(int)>(1);

        $r25 = virtualinvoke $r24.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r26 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        r44 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

     label07:
        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("searching for class: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r44);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r32);

        $r33 = virtualinvoke $r1.<bsh.BshClassManager: java.lang.Class classForName(java.lang.String)>(r44);

        if $r33 == null goto label08;

        return $r33;

     label08:
        $i3 = (int) -1;

        i1 = i1 + $i3;

     label09:
        if i1 >= 0 goto label02;

     label10:
        $r4 = r2.<bsh.NameSpace: bsh.NameSpace parent>;

        if $r4 == null goto label11;

        $r7 = r2.<bsh.NameSpace: bsh.NameSpace parent>;

        $r8 = virtualinvoke $r7.<bsh.NameSpace: java.lang.Object getCommand(java.lang.String,java.lang.Class[],bsh.Interpreter)>(r5, r6, r0);

        return $r8;

     label11:
        return null;
    }

    protected bsh.BshMethod getImportedMethod(java.lang.String, java.lang.Class[]) throws bsh.UtilEvalError
    {
        bsh.NameSpace r0;
        bsh.BshClassManager $r6, $r15;
        java.util.Vector $r1, $r2, $r3, $r4, $r11, $r12;
        int $i0, $i1, i2, i3;
        java.lang.String r7;
        java.lang.reflect.Method $r9, $r16;
        java.lang.Class[] r8;
        bsh.BshMethod $r10, $r17;
        java.lang.Object $r5, $r13;
        java.lang.Class $r14, r18;

        r0 := @this: bsh.NameSpace;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.Class[];

        $r1 = r0.<bsh.NameSpace: java.util.Vector importedObjects>;

        if $r1 == null goto label4;

        i2 = 0;

        goto label3;

     label1:
        $r12 = r0.<bsh.NameSpace: java.util.Vector importedObjects>;

        $r13 = virtualinvoke $r12.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke r0.<bsh.NameSpace: bsh.BshClassManager getClassManager()>();

        $r16 = staticinvoke <bsh.Reflect: java.lang.reflect.Method resolveJavaMethod(bsh.BshClassManager,java.lang.Class,java.lang.String,java.lang.Class[],boolean)>($r15, $r14, r7, r8, 0);

        if $r16 == null goto label2;

        $r17 = new bsh.BshMethod;

        specialinvoke $r17.<bsh.BshMethod: void <init>(java.lang.reflect.Method,java.lang.Object)>($r16, $r13);

        return $r17;

     label2:
        i2 = i2 + 1;

     label3:
        $r11 = r0.<bsh.NameSpace: java.util.Vector importedObjects>;

        $i1 = virtualinvoke $r11.<java.util.Vector: int size()>();

        if i2 < $i1 goto label1;

     label4:
        $r2 = r0.<bsh.NameSpace: java.util.Vector importedStatic>;

        if $r2 == null goto label8;

        i3 = 0;

        goto label7;

     label5:
        $r4 = r0.<bsh.NameSpace: java.util.Vector importedStatic>;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r18 = (java.lang.Class) $r5;

        $r6 = virtualinvoke r0.<bsh.NameSpace: bsh.BshClassManager getClassManager()>();

        $r9 = staticinvoke <bsh.Reflect: java.lang.reflect.Method resolveJavaMethod(bsh.BshClassManager,java.lang.Class,java.lang.String,java.lang.Class[],boolean)>($r6, r18, r7, r8, 1);

        if $r9 == null goto label6;

        $r10 = new bsh.BshMethod;

        specialinvoke $r10.<bsh.BshMethod: void <init>(java.lang.reflect.Method,java.lang.Object)>($r9, null);

        return $r10;

     label6:
        i3 = i3 + 1;

     label7:
        $r3 = r0.<bsh.NameSpace: java.util.Vector importedStatic>;

        $i0 = virtualinvoke $r3.<java.util.Vector: int size()>();

        if i3 < $i0 goto label5;

     label8:
        return null;
    }

    protected bsh.Variable getImportedVar(java.lang.String) throws bsh.UtilEvalError
    {
        bsh.NameSpace r0;
        bsh.Variable $r8, $r16;
        bsh.LHS $r10, $r18;
        java.util.Vector $r1, $r2, $r3, $r4, $r11, $r12;
        int $i0, $i1, i2, i3;
        java.lang.String r6;
        java.lang.reflect.Field $r7, $r15;
        java.lang.Object $r5, $r13;
        java.lang.Class $r9, $r14, $r17, r19;

        r0 := @this: bsh.NameSpace;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<bsh.NameSpace: java.util.Vector importedObjects>;

        if $r1 == null goto label4;

        i2 = 0;

        goto label3;

     label1:
        $r12 = r0.<bsh.NameSpace: java.util.Vector importedObjects>;

        $r13 = virtualinvoke $r12.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = staticinvoke <bsh.Reflect: java.lang.reflect.Field resolveJavaField(java.lang.Class,java.lang.String,boolean)>($r14, r6, 0);

        if $r15 == null goto label2;

        $r16 = new bsh.Variable;

        $r17 = virtualinvoke $r15.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r18 = new bsh.LHS;

        specialinvoke $r18.<bsh.LHS: void <init>(java.lang.Object,java.lang.reflect.Field)>($r13, $r15);

        specialinvoke $r16.<bsh.Variable: void <init>(java.lang.String,java.lang.Class,bsh.LHS)>(r6, $r17, $r18);

        return $r16;

     label2:
        i2 = i2 + 1;

     label3:
        $r11 = r0.<bsh.NameSpace: java.util.Vector importedObjects>;

        $i1 = virtualinvoke $r11.<java.util.Vector: int size()>();

        if i2 < $i1 goto label1;

     label4:
        $r2 = r0.<bsh.NameSpace: java.util.Vector importedStatic>;

        if $r2 == null goto label8;

        i3 = 0;

        goto label7;

     label5:
        $r4 = r0.<bsh.NameSpace: java.util.Vector importedStatic>;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r19 = (java.lang.Class) $r5;

        $r7 = staticinvoke <bsh.Reflect: java.lang.reflect.Field resolveJavaField(java.lang.Class,java.lang.String,boolean)>(r19, r6, 1);

        if $r7 == null goto label6;

        $r8 = new bsh.Variable;

        $r9 = virtualinvoke $r7.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r10 = new bsh.LHS;

        specialinvoke $r10.<bsh.LHS: void <init>(java.lang.reflect.Field)>($r7);

        specialinvoke $r8.<bsh.Variable: void <init>(java.lang.String,java.lang.Class,bsh.LHS)>(r6, $r9, $r10);

        return $r8;

     label6:
        i3 = i3 + 1;

     label7:
        $r3 = r0.<bsh.NameSpace: java.util.Vector importedStatic>;

        $i0 = virtualinvoke $r3.<java.util.Vector: int size()>();

        if i3 < $i0 goto label5;

     label8:
        return null;
    }

    private bsh.BshMethod loadScriptedCommand(java.io.InputStream, java.lang.String, java.lang.Class[], java.lang.String, bsh.Interpreter) throws bsh.UtilEvalError
    {
        bsh.NameSpace r3;
        bsh.UtilEvalError $r10;
        java.lang.StringBuffer $r11, $r12, $r14;
        java.lang.String r4, r5, $r9, $r13, $r15;
        bsh.EvalError $r8;
        bsh.Interpreter r0;
        java.lang.Class[] r6;
        java.io.InputStreamReader $r1;
        bsh.BshMethod $r7;
        java.io.InputStream r2;

        r3 := @this: bsh.NameSpace;

        r2 := @parameter0: java.io.InputStream;

        r5 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.Class[];

        r4 := @parameter3: java.lang.String;

        r0 := @parameter4: bsh.Interpreter;

     label1:
        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2);

        virtualinvoke r0.<bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)>($r1, r3, r4);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<bsh.EvalError: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r9);

        $r10 = new bsh.UtilEvalError;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error loading script: ");

        $r13 = virtualinvoke $r8.<bsh.EvalError: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<bsh.UtilEvalError: void <init>(java.lang.String)>($r15);

        throw $r10;

     label4:
        $r7 = virtualinvoke r3.<bsh.NameSpace: bsh.BshMethod getMethod(java.lang.String,java.lang.Class[])>(r5, r6);

        return $r7;

        catch bsh.EvalError from label1 to label2 with label3;
    }

    void cacheClass(java.lang.String, java.lang.Class)
    {
        bsh.NameSpace r0;
        java.lang.Class r3;
        java.lang.String r2;
        java.util.Hashtable $r1, $r4, $r5;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Class;

        $r1 = r0.<bsh.NameSpace: java.util.Hashtable classCache>;

        if $r1 != null goto label1;

        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<java.util.Hashtable: void <init>()>();

        r0.<bsh.NameSpace: java.util.Hashtable classCache> = $r5;

     label1:
        $r4 = r0.<bsh.NameSpace: java.util.Hashtable classCache>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        return;
    }

    public java.lang.Class getClass(java.lang.String) throws bsh.UtilEvalError
    {
        bsh.NameSpace r0, $r3, $r4;
        java.lang.Class $r2, $r5;
        java.lang.String r1;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<bsh.NameSpace: java.lang.Class getClassImpl(java.lang.String)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        if $r3 == null goto label2;

        $r4 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        $r5 = virtualinvoke $r4.<bsh.NameSpace: java.lang.Class getClass(java.lang.String)>(r1);

        return $r5;

     label2:
        return null;
    }

    private java.lang.Class getClassImpl(java.lang.String) throws bsh.UtilEvalError
    {
        bsh.NameSpace r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8;
        java.lang.String r2, $r9;
        java.util.Hashtable $r1, $r10;
        boolean $z0, z1, $z2, $z4, $z5;
        java.lang.Class $r3, r12;
        java.lang.Object $r11;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: java.lang.String;

        r12 = null;

        $r1 = r0.<bsh.NameSpace: java.util.Hashtable classCache>;

        if $r1 == null goto label1;

        $r10 = r0.<bsh.NameSpace: java.util.Hashtable classCache>;

        $r11 = virtualinvoke $r10.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        r12 = (java.lang.Class) $r11;

        if r12 == null goto label1;

        return r12;

     label1:
        $z0 = staticinvoke <bsh.Name: boolean isCompound(java.lang.String)>(r2);

        if $z0 != 0 goto label2;

        $z5 = 1;

        $z4 = 1;

        goto label3;

     label2:
        $z5 = 0;

        $z4 = 0;

     label3:
        z1 = $z5;

        if $z4 == 0 goto label5;

        if r12 != null goto label4;

        r12 = specialinvoke r0.<bsh.NameSpace: java.lang.Class getImportedClassImpl(java.lang.String)>(r2);

     label4:
        if r12 == null goto label5;

        virtualinvoke r0.<bsh.NameSpace: void cacheClass(java.lang.String,java.lang.Class)>(r2, r12);

        return r12;

     label5:
        $r3 = specialinvoke r0.<bsh.NameSpace: java.lang.Class classForName(java.lang.String)>(r2);

        if $r3 == null goto label7;

        if z1 == 0 goto label6;

        virtualinvoke r0.<bsh.NameSpace: void cacheClass(java.lang.String,java.lang.Class)>(r2, $r3);

     label6:
        return $r3;

     label7:
        $z2 = <bsh.Interpreter: boolean DEBUG>;

        if $z2 == 0 goto label8;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getClass(): ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not\tfound in ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r9);

     label8:
        return null;
    }

    private java.lang.Class getImportedClassImpl(java.lang.String) throws bsh.UtilEvalError
    {
        bsh.BshClassManager $r3, $r18;
        java.util.Vector $r2, $r7, $r9;
        boolean $z0, $z1, $z2;
        bsh.Name $r23;
        bsh.NameSpace r0;
        java.lang.StringBuffer $r12, $r13, $r14, $r20, $r21, $r29, $r30;
        int $i0, i1, $i3;
        java.lang.String r4, $r5, $r11, $r15, $r22, r27;
        java.util.Hashtable $r1, $r24;
        java.lang.Class $r6, $r16, $r17, r28;
        java.lang.Object $r10, $r25;
        java.lang.ClassNotFoundException $r26;

        r0 := @this: bsh.NameSpace;

        r4 := @parameter0: java.lang.String;

        r27 = null;

        $r1 = r0.<bsh.NameSpace: java.util.Hashtable importedClasses>;

        if $r1 == null goto label01;

        $r24 = r0.<bsh.NameSpace: java.util.Hashtable importedClasses>;

        $r25 = virtualinvoke $r24.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r4);

        r27 = (java.lang.String) $r25;

     label01:
        if r27 == null goto label09;

        $r17 = specialinvoke r0.<bsh.NameSpace: java.lang.Class classForName(java.lang.String)>(r27);

        r28 = $r17;

        if $r17 != null goto label07;

        $z1 = staticinvoke <bsh.Name: boolean isCompound(java.lang.String)>(r27);

        if $z1 == 0 goto label05;

     label02:
        $r23 = virtualinvoke r0.<bsh.NameSpace: bsh.Name getNameResolver(java.lang.String)>(r27);

        r28 = virtualinvoke $r23.<bsh.Name: java.lang.Class toClass()>();

     label03:
        goto label06;

     label04:
        $r26 := @caughtexception;

        goto label06;

     label05:
        $z2 = <bsh.Interpreter: boolean DEBUG>;

        if $z2 == 0 goto label06;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("imported unpackaged name not found:");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r27);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r22);

     label06:
        if r28 == null goto label08;

        $r18 = virtualinvoke r0.<bsh.NameSpace: bsh.BshClassManager getClassManager()>();

        virtualinvoke $r18.<bsh.BshClassManager: void cacheClassInfo(java.lang.String,java.lang.Class)>(r27, r28);

        return r28;

     label07:
        return $r17;

     label08:
        return null;

     label09:
        $r2 = r0.<bsh.NameSpace: java.util.Vector importedPackages>;

        if $r2 == null goto label13;

        $r7 = r0.<bsh.NameSpace: java.util.Vector importedPackages>;

        $i0 = virtualinvoke $r7.<java.util.Vector: int size()>();

        i1 = $i0 - 1;

        goto label12;

     label10:
        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r9 = r0.<bsh.NameSpace: java.util.Vector importedPackages>;

        $r10 = virtualinvoke $r9.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        $r11 = (java.lang.String) $r10;

        $r12 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        $r16 = specialinvoke r0.<bsh.NameSpace: java.lang.Class classForName(java.lang.String)>($r15);

        if $r16 == null goto label11;

        return $r16;

     label11:
        $i3 = (int) -1;

        i1 = i1 + $i3;

     label12:
        if i1 >= 0 goto label10;

     label13:
        $r3 = virtualinvoke r0.<bsh.NameSpace: bsh.BshClassManager getClassManager()>();

        $z0 = virtualinvoke $r3.<bsh.BshClassManager: boolean hasSuperImport()>();

        if $z0 == 0 goto label14;

        $r5 = virtualinvoke $r3.<bsh.BshClassManager: java.lang.String getClassNameByUnqName(java.lang.String)>(r4);

        if $r5 == null goto label14;

        $r6 = specialinvoke r0.<bsh.NameSpace: java.lang.Class classForName(java.lang.String)>($r5);

        return $r6;

     label14:
        return null;

        catch java.lang.ClassNotFoundException from label02 to label03 with label04;
    }

    private java.lang.Class classForName(java.lang.String)
    {
        bsh.NameSpace r0;
        java.lang.Class $r3;
        java.lang.String r2;
        bsh.BshClassManager $r1;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<bsh.NameSpace: bsh.BshClassManager getClassManager()>();

        $r3 = virtualinvoke $r1.<bsh.BshClassManager: java.lang.Class classForName(java.lang.String)>(r2);

        return $r3;
    }

    public java.lang.String[] getAllNames()
    {
        java.util.Vector $r0;
        bsh.NameSpace r1;
        int $i0;
        java.lang.String[] r2;

        r1 := @this: bsh.NameSpace;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        virtualinvoke r1.<bsh.NameSpace: void getAllNamesAux(java.util.Vector)>($r0);

        $i0 = virtualinvoke $r0.<java.util.Vector: int size()>();

        r2 = newarray (java.lang.String)[$i0];

        virtualinvoke $r0.<java.util.Vector: void copyInto(java.lang.Object[])>(r2);

        return r2;
    }

    protected void getAllNamesAux(java.util.Vector)
    {
        java.util.Enumeration $r2, $r6;
        bsh.NameSpace r0, $r8, $r9;
        java.util.Vector r3;
        java.lang.Object $r4, $r7;
        java.util.Hashtable $r1, $r5;
        boolean $z0, $z1;

        r0 := @this: bsh.NameSpace;

        r3 := @parameter0: java.util.Vector;

        $r1 = r0.<bsh.NameSpace: java.util.Hashtable variables>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration keys()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        virtualinvoke r3.<java.util.Vector: void addElement(java.lang.Object)>($r4);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<bsh.NameSpace: java.util.Hashtable methods>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.util.Enumeration keys()>();

        goto label4;

     label3:
        $r7 = interfaceinvoke $r6.<java.util.Enumeration: java.lang.Object nextElement()>();

        virtualinvoke r3.<java.util.Vector: void addElement(java.lang.Object)>($r7);

     label4:
        $z1 = interfaceinvoke $r6.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 != 0 goto label3;

        $r8 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        if $r8 == null goto label5;

        $r9 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        virtualinvoke $r9.<bsh.NameSpace: void getAllNamesAux(java.util.Vector)>(r3);

     label5:
        return;
    }

    public void addNameSourceListener(bsh.NameSource$Listener)
    {
        java.util.Vector $r1, $r3, $r4;
        bsh.NameSpace r0;
        bsh.NameSource$Listener r2;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: bsh.NameSource$Listener;

        $r1 = r0.<bsh.NameSpace: java.util.Vector nameSourceListeners>;

        if $r1 != null goto label1;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<bsh.NameSpace: java.util.Vector nameSourceListeners> = $r4;

     label1:
        $r3 = r0.<bsh.NameSpace: java.util.Vector nameSourceListeners>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        return;
    }

    public void doSuperImport() throws bsh.UtilEvalError
    {
        bsh.BshClassManager $r1;
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        $r1 = virtualinvoke r0.<bsh.NameSpace: bsh.BshClassManager getClassManager()>();

        virtualinvoke $r1.<bsh.BshClassManager: void doSuperImport()>();

        return;
    }

    public java.lang.String toString()
    {
        bsh.NameSpace r2;
        java.lang.StringBuffer $r0, $r1, $r4, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r15, $r17;
        java.lang.String $r3, $r5, $r8, $r18, $r19, $r20, $r21, $r22, $r23;
        boolean $z0, $z1;
        java.lang.Class $r14;
        java.lang.Object $r16;

        r2 := @this: bsh.NameSpace;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NameSpace: ");

        $r3 = r2.<bsh.NameSpace: java.lang.String nsName>;

        if $r3 != null goto label01;

        $r19 = specialinvoke r2.<java.lang.Object: java.lang.String toString()>();

        goto label02;

     label01:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = r2.<bsh.NameSpace: java.lang.String nsName>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r8 = specialinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r19 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label02:
        $r11 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $z0 = r2.<bsh.NameSpace: boolean isClass>;

        if $z0 == 0 goto label03;

        $r20 = " (isClass) ";

        goto label04;

     label03:
        $r20 = "";

     label04:
        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $z1 = r2.<bsh.NameSpace: boolean isMethod>;

        if $z1 == 0 goto label05;

        $r21 = " (method) ";

        goto label06;

     label05:
        $r21 = "";

     label06:
        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r14 = r2.<bsh.NameSpace: java.lang.Class classStatic>;

        if $r14 == null goto label07;

        $r22 = " (class static) ";

        goto label08;

     label07:
        $r22 = "";

     label08:
        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r16 = r2.<bsh.NameSpace: java.lang.Object classInstance>;

        if $r16 == null goto label09;

        $r23 = " (class instance) ";

        goto label10;

     label09:
        $r23 = "";

     label10:
        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r18;
    }

    private synchronized void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream r1;
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: java.io.ObjectOutputStream;

        r0.<bsh.NameSpace: java.util.Hashtable names> = null;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        return;
    }

    public java.lang.Object invokeMethod(java.lang.String, java.lang.Object[], bsh.Interpreter) throws bsh.EvalError
    {
        java.lang.Object[] r2;
        bsh.Interpreter r3;
        bsh.NameSpace r0;
        java.lang.Object $r4;
        java.lang.String r1;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: bsh.Interpreter;

        $r4 = virtualinvoke r0.<bsh.NameSpace: java.lang.Object invokeMethod(java.lang.String,java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode)>(r1, r2, r3, null, null);

        return $r4;
    }

    public java.lang.Object invokeMethod(java.lang.String, java.lang.Object[], bsh.Interpreter, bsh.CallStack, bsh.SimpleNode) throws bsh.EvalError
    {
        bsh.Interpreter r1;
        java.lang.Object[] r4;
        bsh.NameSpace r0;
        bsh.SimpleNode r6;
        bsh.CallStack r5;
        bsh.This $r2;
        java.lang.Object $r7;
        java.lang.String r3;

        r0 := @this: bsh.NameSpace;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Object[];

        r1 := @parameter2: bsh.Interpreter;

        r5 := @parameter3: bsh.CallStack;

        r6 := @parameter4: bsh.SimpleNode;

        $r2 = virtualinvoke r0.<bsh.NameSpace: bsh.This getThis(bsh.Interpreter)>(r1);

        $r7 = virtualinvoke $r2.<bsh.This: java.lang.Object invokeMethod(java.lang.String,java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode,boolean)>(r3, r4, r1, r5, r6, 0);

        return $r7;
    }

    public void classLoaderChanged()
    {
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        virtualinvoke r0.<bsh.NameSpace: void nameSpaceChanged()>();

        return;
    }

    public void nameSpaceChanged()
    {
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        r0.<bsh.NameSpace: java.util.Hashtable classCache> = null;

        r0.<bsh.NameSpace: java.util.Hashtable names> = null;

        return;
    }

    public void loadDefaultImports()
    {
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        virtualinvoke r0.<bsh.NameSpace: void importClass(java.lang.String)>("bsh.EvalError");

        virtualinvoke r0.<bsh.NameSpace: void importClass(java.lang.String)>("bsh.Interpreter");

        virtualinvoke r0.<bsh.NameSpace: void importPackage(java.lang.String)>("javax.swing.event");

        virtualinvoke r0.<bsh.NameSpace: void importPackage(java.lang.String)>("javax.swing");

        virtualinvoke r0.<bsh.NameSpace: void importPackage(java.lang.String)>("java.awt.event");

        virtualinvoke r0.<bsh.NameSpace: void importPackage(java.lang.String)>("java.awt");

        virtualinvoke r0.<bsh.NameSpace: void importPackage(java.lang.String)>("java.net");

        virtualinvoke r0.<bsh.NameSpace: void importPackage(java.lang.String)>("java.util");

        virtualinvoke r0.<bsh.NameSpace: void importPackage(java.lang.String)>("java.io");

        virtualinvoke r0.<bsh.NameSpace: void importPackage(java.lang.String)>("java.lang");

        virtualinvoke r0.<bsh.NameSpace: void importCommands(java.lang.String)>("/bsh/commands");

        return;
    }

    bsh.Name getNameResolver(java.lang.String)
    {
        bsh.Name $r5, $r8, r9;
        bsh.NameSpace r0;
        java.lang.Object $r4;
        java.lang.String r2;
        java.util.Hashtable $r1, $r3, $r6, $r7;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<bsh.NameSpace: java.util.Hashtable names>;

        if $r1 != null goto label1;

        $r7 = new java.util.Hashtable;

        specialinvoke $r7.<java.util.Hashtable: void <init>()>();

        r0.<bsh.NameSpace: java.util.Hashtable names> = $r7;

     label1:
        $r3 = r0.<bsh.NameSpace: java.util.Hashtable names>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        $r8 = (bsh.Name) $r4;

        r9 = $r8;

        if $r8 != null goto label2;

        $r5 = new bsh.Name;

        specialinvoke $r5.<bsh.Name: void <init>(bsh.NameSpace,java.lang.String)>(r0, r2);

        r9 = $r5;

        $r6 = r0.<bsh.NameSpace: java.util.Hashtable names>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5);

     label2:
        return r9;
    }

    public int getInvocationLine()
    {
        bsh.NameSpace r0;
        int $i0, $i2;
        bsh.SimpleNode $r1;

        r0 := @this: bsh.NameSpace;

        $r1 = virtualinvoke r0.<bsh.NameSpace: bsh.SimpleNode getNode()>();

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<bsh.SimpleNode: int getLineNumber()>();

        return $i0;

     label1:
        $i2 = (int) -1;

        return $i2;
    }

    public java.lang.String getInvocationText()
    {
        bsh.SimpleNode $r1;
        java.lang.String $r2;
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        $r1 = virtualinvoke r0.<bsh.NameSpace: bsh.SimpleNode getNode()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<bsh.SimpleNode: java.lang.String getText()>();

        return $r2;

     label1:
        return "<invoked from Java code>";
    }

    public static java.lang.Class identifierToClass(bsh.ClassIdentifier)
    {
        java.lang.Class $r1;
        bsh.ClassIdentifier r0;

        r0 := @parameter0: bsh.ClassIdentifier;

        $r1 = virtualinvoke r0.<bsh.ClassIdentifier: java.lang.Class getTargetClass()>();

        return $r1;
    }

    public void clear()
    {
        bsh.NameSpace r0, $r1;

        r0 := @this: bsh.NameSpace;

        r0.<bsh.NameSpace: java.util.Hashtable variables> = null;

        r0.<bsh.NameSpace: java.util.Hashtable methods> = null;

        r0.<bsh.NameSpace: java.util.Hashtable importedClasses> = null;

        r0.<bsh.NameSpace: java.util.Vector importedPackages> = null;

        r0.<bsh.NameSpace: java.util.Vector importedCommands> = null;

        r0.<bsh.NameSpace: java.util.Vector importedObjects> = null;

        $r1 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        if $r1 != null goto label1;

        virtualinvoke r0.<bsh.NameSpace: void loadDefaultImports()>();

     label1:
        r0.<bsh.NameSpace: java.util.Hashtable classCache> = null;

        r0.<bsh.NameSpace: java.util.Hashtable names> = null;

        return;
    }

    public void importObject(java.lang.Object)
    {
        bsh.NameSpace r0;
        java.util.Vector $r1, $r3, $r4, $r5, $r6;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<bsh.NameSpace: java.util.Vector importedObjects>;

        if $r1 != null goto label1;

        $r6 = new java.util.Vector;

        specialinvoke $r6.<java.util.Vector: void <init>()>();

        r0.<bsh.NameSpace: java.util.Vector importedObjects> = $r6;

     label1:
        $r3 = r0.<bsh.NameSpace: java.util.Vector importedObjects>;

        $z0 = virtualinvoke $r3.<java.util.Vector: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r5 = r0.<bsh.NameSpace: java.util.Vector importedObjects>;

        virtualinvoke $r5.<java.util.Vector: boolean remove(java.lang.Object)>(r2);

     label2:
        $r4 = r0.<bsh.NameSpace: java.util.Vector importedObjects>;

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        virtualinvoke r0.<bsh.NameSpace: void nameSpaceChanged()>();

        return;
    }

    public void importStatic(java.lang.Class)
    {
        bsh.NameSpace r0;
        java.util.Vector $r1, $r3, $r4, $r5, $r6;
        java.lang.Class r2;
        boolean $z0;

        r0 := @this: bsh.NameSpace;

        r2 := @parameter0: java.lang.Class;

        $r1 = r0.<bsh.NameSpace: java.util.Vector importedStatic>;

        if $r1 != null goto label1;

        $r6 = new java.util.Vector;

        specialinvoke $r6.<java.util.Vector: void <init>()>();

        r0.<bsh.NameSpace: java.util.Vector importedStatic> = $r6;

     label1:
        $r3 = r0.<bsh.NameSpace: java.util.Vector importedStatic>;

        $z0 = virtualinvoke $r3.<java.util.Vector: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r5 = r0.<bsh.NameSpace: java.util.Vector importedStatic>;

        virtualinvoke $r5.<java.util.Vector: boolean remove(java.lang.Object)>(r2);

     label2:
        $r4 = r0.<bsh.NameSpace: java.util.Vector importedStatic>;

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        virtualinvoke r0.<bsh.NameSpace: void nameSpaceChanged()>();

        return;
    }

    void setPackage(java.lang.String)
    {
        java.lang.String r1;
        bsh.NameSpace r0;

        r0 := @this: bsh.NameSpace;

        r1 := @parameter0: java.lang.String;

        r0.<bsh.NameSpace: java.lang.String packageName> = r1;

        return;
    }

    java.lang.String getPackage()
    {
        bsh.NameSpace r0, $r2, $r3;
        java.lang.String $r1, $r4, $r5;

        r0 := @this: bsh.NameSpace;

        $r1 = r0.<bsh.NameSpace: java.lang.String packageName>;

        if $r1 == null goto label1;

        $r5 = r0.<bsh.NameSpace: java.lang.String packageName>;

        return $r5;

     label1:
        $r2 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        if $r2 == null goto label2;

        $r3 = r0.<bsh.NameSpace: bsh.NameSpace parent>;

        $r4 = virtualinvoke $r3.<bsh.NameSpace: java.lang.String getPackage()>();

        return $r4;

     label2:
        return null;
    }

    static void <clinit>()
    {
        bsh.NameSpace $r0, $r1;

        $r0 = new bsh.NameSpace;

        specialinvoke $r0.<bsh.NameSpace: void <init>(bsh.BshClassManager,java.lang.String)>(null, "Called from compiled Java code.");

        <bsh.NameSpace: bsh.NameSpace JAVACODE> = $r0;

        $r1 = <bsh.NameSpace: bsh.NameSpace JAVACODE>;

        $r1.<bsh.NameSpace: boolean isMethod> = 1;

        return;
    }
}
