public class org.apache.commons.logging.impl.ServletContextCleaner extends java.lang.Object implements javax.servlet.ServletContextListener
{
    private java.lang.Class[] RELEASE_SIGNATURE;
    static java.lang.Class class$java$lang$ClassLoader;

    public void <init>()
    {
        java.lang.Class[] $r1;
        java.lang.Class $r2, $r3;
        org.apache.commons.logging.impl.ServletContextCleaner r0;

        r0 := @this: org.apache.commons.logging.impl.ServletContextCleaner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.lang.Class)[1];

        $r2 = <org.apache.commons.logging.impl.ServletContextCleaner: java.lang.Class class$java$lang$ClassLoader>;

        if $r2 != null goto label1;

        $r3 = staticinvoke <org.apache.commons.logging.impl.ServletContextCleaner: java.lang.Class class$(java.lang.String)>("java.lang.ClassLoader");

        <org.apache.commons.logging.impl.ServletContextCleaner: java.lang.Class class$java$lang$ClassLoader> = $r3;

        goto label2;

     label1:
        $r3 = <org.apache.commons.logging.impl.ServletContextCleaner: java.lang.Class class$java$lang$ClassLoader>;

     label2:
        $r1[0] = $r3;

        r0.<org.apache.commons.logging.impl.ServletContextCleaner: java.lang.Class[] RELEASE_SIGNATURE> = $r1;

        return;
    }

    public void contextDestroyed(javax.servlet.ServletContextEvent)
    {
        java.lang.Object[] r2;
        java.lang.NoSuchMethodException $r12;
        java.lang.Thread $r0;
        java.lang.reflect.Method $r6;
        org.apache.commons.logging.impl.ServletContextCleaner r4;
        java.io.PrintStream $r9, $r11, $r13;
        java.lang.IllegalAccessException $r10;
        java.lang.Class[] $r5;
        java.lang.reflect.InvocationTargetException $r8;
        javax.servlet.ServletContextEvent r15;
        java.lang.Class $r3;
        java.lang.ClassNotFoundException $r14;
        java.lang.ClassLoader $r1, $r7, r16;

        r4 := @this: org.apache.commons.logging.impl.ServletContextCleaner;

        r15 := @parameter0: javax.servlet.ServletContextEvent;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r2 = newarray (java.lang.Object)[1];

        r2[0] = $r1;

        r16 = $r1;

     label1:
        if r16 == null goto label8;

     label2:
        $r3 = virtualinvoke r16.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.apache.commons.logging.LogFactory");

        $r5 = r4.<org.apache.commons.logging.impl.ServletContextCleaner: java.lang.Class[] RELEASE_SIGNATURE>;

        $r6 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("release", $r5);

        virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, r2);

        $r7 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r16 = virtualinvoke $r7.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

     label3:
        goto label1;

     label4:
        $r14 := @caughtexception;

        r16 = null;

        goto label1;

     label5:
        $r12 := @caughtexception;

        $r13 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("LogFactory instance found which does not support release method!");

        r16 = null;

        goto label1;

     label6:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("LogFactory instance found which is not accessable!");

        r16 = null;

        goto label1;

     label7:
        $r8 := @caughtexception;

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("LogFactory instance release method failed!");

        r16 = null;

        goto label1;

     label8:
        staticinvoke <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)>($r1);

        return;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
        catch java.lang.NoSuchMethodException from label2 to label3 with label5;
        catch java.lang.IllegalAccessException from label2 to label3 with label6;
        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label7;
    }

    public void contextInitialized(javax.servlet.ServletContextEvent)
    {
        javax.servlet.ServletContextEvent r1;
        org.apache.commons.logging.impl.ServletContextCleaner r0;

        r0 := @this: org.apache.commons.logging.impl.ServletContextCleaner;

        r1 := @parameter0: javax.servlet.ServletContextEvent;

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
