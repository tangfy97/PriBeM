public class org.fife.ui.rsyntaxtextarea.SquiggleUnderlineHighlightPainter extends org.fife.ui.rsyntaxtextarea.ChangeableColorHighlightPainter
{
    private static final int AMT;

    public void <init>(java.awt.Color)
    {
        org.fife.ui.rsyntaxtextarea.SquiggleUnderlineHighlightPainter r0;
        java.awt.Color r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.SquiggleUnderlineHighlightPainter;

        r1 := @parameter0: java.awt.Color;

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.ChangeableColorHighlightPainter: void <init>(java.awt.Color)>(r1);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.SquiggleUnderlineHighlightPainter: void setColor(java.awt.Color)>(r1);

        return;
    }

    public java.awt.Shape paintLayer(java.awt.Graphics, int, int, java.awt.Shape, javax.swing.text.JTextComponent, javax.swing.text.View)
    {
        java.awt.Color $r2;
        java.awt.Rectangle r10, $r11;
        javax.swing.text.Position$Bias $r5, $r6;
        int i0, $i1, i2, $i3;
        boolean $z0, $z1;
        java.awt.Shape r4, $r7;
        javax.swing.text.BadLocationException $r8;
        javax.swing.text.JTextComponent r9;
        java.awt.Graphics r0;
        org.fife.ui.rsyntaxtextarea.SquiggleUnderlineHighlightPainter r1;
        javax.swing.text.View r3;

        r1 := @this: org.fife.ui.rsyntaxtextarea.SquiggleUnderlineHighlightPainter;

        r0 := @parameter0: java.awt.Graphics;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        r4 := @parameter3: java.awt.Shape;

        r9 := @parameter4: javax.swing.text.JTextComponent;

        r3 := @parameter5: javax.swing.text.View;

        $r2 = virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.SquiggleUnderlineHighlightPainter: java.awt.Color getColor()>();

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r2);

        $i1 = virtualinvoke r3.<javax.swing.text.View: int getStartOffset()>();

        if i0 != $i1 goto label3;

        $i3 = virtualinvoke r3.<javax.swing.text.View: int getEndOffset()>();

        if i2 != $i3 goto label3;

        $z1 = r4 instanceof java.awt.Rectangle;

        if $z1 == 0 goto label1;

        r10 = (java.awt.Rectangle) r4;

        goto label2;

     label1:
        r10 = interfaceinvoke r4.<java.awt.Shape: java.awt.Rectangle getBounds()>();

     label2:
        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.SquiggleUnderlineHighlightPainter: void paintSquiggle(java.awt.Graphics,java.awt.Rectangle)>(r0, r10);

        return r10;

     label3:
        $r6 = <javax.swing.text.Position$Bias: javax.swing.text.Position$Bias Forward>;

        $r5 = <javax.swing.text.Position$Bias: javax.swing.text.Position$Bias Backward>;

        $r7 = virtualinvoke r3.<javax.swing.text.View: java.awt.Shape modelToView(int,javax.swing.text.Position$Bias,int,javax.swing.text.Position$Bias,java.awt.Shape)>(i0, $r6, i2, $r5, r4);

        $z0 = $r7 instanceof java.awt.Rectangle;

        if $z0 == 0 goto label4;

        $r11 = (java.awt.Rectangle) $r7;

        goto label5;

     label4:
        $r11 = interfaceinvoke $r7.<java.awt.Shape: java.awt.Rectangle getBounds()>();

     label5:
        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.SquiggleUnderlineHighlightPainter: void paintSquiggle(java.awt.Graphics,java.awt.Rectangle)>(r0, $r11);

     label6:
        return $r11;

     label7:
        $r8 := @caughtexception;

        virtualinvoke $r8.<javax.swing.text.BadLocationException: void printStackTrace()>();

        return null;

        catch javax.swing.text.BadLocationException from label3 to label6 with label7;
    }

    protected void paintSquiggle(java.awt.Graphics, java.awt.Rectangle)
    {
        java.awt.Rectangle r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, $i12;
        java.awt.Graphics r1;
        org.fife.ui.rsyntaxtextarea.SquiggleUnderlineHighlightPainter r2;

        r2 := @this: org.fife.ui.rsyntaxtextarea.SquiggleUnderlineHighlightPainter;

        r1 := @parameter0: java.awt.Graphics;

        r0 := @parameter1: java.awt.Rectangle;

        i8 = r0.<java.awt.Rectangle: int x>;

        $i1 = r0.<java.awt.Rectangle: int y>;

        $i0 = r0.<java.awt.Rectangle: int height>;

        $i2 = $i1 + $i0;

        i9 = $i2 - 1;

        $i12 = (int) -2;

        i10 = $i12;

     label1:
        $i4 = r0.<java.awt.Rectangle: int x>;

        $i3 = r0.<java.awt.Rectangle: int width>;

        $i5 = $i4 + $i3;

        if i8 >= $i5 goto label2;

        $i7 = i8 + 2;

        $i6 = i9 + i10;

        virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>(i8, i9, $i7, $i6);

        i9 = i9 + i10;

        i10 = neg i10;

        i8 = i8 + 2;

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <org.fife.ui.rsyntaxtextarea.SquiggleUnderlineHighlightPainter: int AMT> = 2;

        return;
    }
}
