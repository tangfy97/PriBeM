class org.springframework.scheduling.support.TaskUtils$LoggingErrorHandler extends java.lang.Object implements org.springframework.util.ErrorHandler
{
    private final org.apache.commons.logging.Log logger;

    void <init>()
    {
        org.apache.commons.logging.Log $r1;
        org.springframework.scheduling.support.TaskUtils$LoggingErrorHandler r0;

        r0 := @this: org.springframework.scheduling.support.TaskUtils$LoggingErrorHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/scheduling/support/TaskUtils$LoggingErrorHandler;");

        r0.<org.springframework.scheduling.support.TaskUtils$LoggingErrorHandler: org.apache.commons.logging.Log logger> = $r1;

        return;
    }

    public void handleError(java.lang.Throwable)
    {
        java.lang.Throwable r2;
        org.apache.commons.logging.Log $r1, $r3;
        org.springframework.scheduling.support.TaskUtils$LoggingErrorHandler r0;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.support.TaskUtils$LoggingErrorHandler;

        r2 := @parameter0: java.lang.Throwable;

        $r1 = r0.<org.springframework.scheduling.support.TaskUtils$LoggingErrorHandler: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isErrorEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.springframework.scheduling.support.TaskUtils$LoggingErrorHandler: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Unexpected error occurred in scheduled task.", r2);

     label1:
        return;
    }
}
