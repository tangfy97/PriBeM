public abstract class org.bouncycastle.jce.provider.WrapCipherSpi extends javax.crypto.CipherSpi implements org.bouncycastle.jce.provider.PBE
{
    private java.lang.Class[] availableSpecs;
    protected int pbeType;
    protected int pbeHash;
    protected int pbeKeySize;
    protected int pbeIvSize;
    protected java.security.AlgorithmParameters engineParams;
    protected org.bouncycastle.crypto.Wrapper wrapEngine;
    private int ivSize;
    private byte[] iv;

    protected void <init>()
    {
        java.lang.Class[] $r1;
        org.bouncycastle.jce.provider.WrapCipherSpi r0;

        r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        specialinvoke r0.<javax.crypto.CipherSpi: void <init>()>();

        $r1 = newarray (java.lang.Class)[4];

        $r1[0] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r1[1] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        $r1[2] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r1[3] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        r0.<org.bouncycastle.jce.provider.WrapCipherSpi: java.lang.Class[] availableSpecs> = $r1;

        r0.<org.bouncycastle.jce.provider.WrapCipherSpi: int pbeType> = 2;

        r0.<org.bouncycastle.jce.provider.WrapCipherSpi: int pbeHash> = 1;

        r0.<org.bouncycastle.jce.provider.WrapCipherSpi: java.security.AlgorithmParameters engineParams> = null;

        r0.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine> = null;

        return;
    }

    protected void <init>(org.bouncycastle.crypto.Wrapper)
    {
        org.bouncycastle.crypto.Wrapper r1;
        org.bouncycastle.jce.provider.WrapCipherSpi r0;

        r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        r1 := @parameter0: org.bouncycastle.crypto.Wrapper;

        specialinvoke r0.<org.bouncycastle.jce.provider.WrapCipherSpi: void <init>(org.bouncycastle.crypto.Wrapper,int)>(r1, 0);

        return;
    }

    protected void <init>(org.bouncycastle.crypto.Wrapper, int)
    {
        int i0;
        java.lang.Class[] $r1;
        org.bouncycastle.crypto.Wrapper r2;
        org.bouncycastle.jce.provider.WrapCipherSpi r0;

        r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        r2 := @parameter0: org.bouncycastle.crypto.Wrapper;

        i0 := @parameter1: int;

        specialinvoke r0.<javax.crypto.CipherSpi: void <init>()>();

        $r1 = newarray (java.lang.Class)[4];

        $r1[0] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r1[1] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        $r1[2] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r1[3] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        r0.<org.bouncycastle.jce.provider.WrapCipherSpi: java.lang.Class[] availableSpecs> = $r1;

        r0.<org.bouncycastle.jce.provider.WrapCipherSpi: int pbeType> = 2;

        r0.<org.bouncycastle.jce.provider.WrapCipherSpi: int pbeHash> = 1;

        r0.<org.bouncycastle.jce.provider.WrapCipherSpi: java.security.AlgorithmParameters engineParams> = null;

        r0.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine> = null;

        r0.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine> = r2;

        r0.<org.bouncycastle.jce.provider.WrapCipherSpi: int ivSize> = i0;

        return;
    }

    protected int engineGetBlockSize()
    {
        org.bouncycastle.jce.provider.WrapCipherSpi r0;

        r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        return 0;
    }

    protected byte[] engineGetIV()
    {
        byte[] $r1, $r3, $r4;
        java.lang.Object $r2;
        org.bouncycastle.jce.provider.WrapCipherSpi r0;

        r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        $r1 = r0.<org.bouncycastle.jce.provider.WrapCipherSpi: byte[] iv>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        $r4 = (byte[]) $r3;

        return $r4;
    }

    protected int engineGetKeySize(java.security.Key)
    {
        java.security.Key r0;
        byte[] $r1;
        int $i0;
        org.bouncycastle.jce.provider.WrapCipherSpi r2;

        r2 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        r0 := @parameter0: java.security.Key;

        $r1 = interfaceinvoke r0.<java.security.Key: byte[] getEncoded()>();

        $i0 = lengthof $r1;

        return $i0;
    }

    protected int engineGetOutputSize(int)
    {
        int i0, $i2;
        org.bouncycastle.jce.provider.WrapCipherSpi r0;

        r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        i0 := @parameter0: int;

        $i2 = (int) -1;

        return $i2;
    }

    protected java.security.AlgorithmParameters engineGetParameters()
    {
        org.bouncycastle.jce.provider.WrapCipherSpi r0;

        r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        return null;
    }

    protected void engineSetMode(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.security.NoSuchAlgorithmException $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5;
        org.bouncycastle.jce.provider.WrapCipherSpi r6;

        r6 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.security.NoSuchAlgorithmException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        org.bouncycastle.jce.provider.WrapCipherSpi r7;
        javax.crypto.NoSuchPaddingException $r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.lang.String r3, $r6;

        r7 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        r3 := @parameter0: java.lang.String;

        $r0 = new javax.crypto.NoSuchPaddingException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Padding ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unknown.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    protected void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        byte[] $r2, $r9, $r11, $r13, $r15;
        org.bouncycastle.crypto.params.ParametersWithIV $r12, $r14;
        java.security.InvalidAlgorithmParameterException $r17;
        java.security.SecureRandom r10;
        javax.crypto.spec.IvParameterSpec r22;
        int i0, $i1, $i2;
        org.bouncycastle.crypto.Wrapper $r5, $r6, $r18;
        java.security.spec.AlgorithmParameterSpec r3;
        java.lang.String $r19;
        org.bouncycastle.crypto.params.KeyParameter $r1;
        boolean $z0, $z1, $z2, $z3;
        org.bouncycastle.crypto.CipherParameters $r16, r21;
        java.io.PrintStream $r8;
        java.lang.IllegalArgumentException $r7;
        org.bouncycastle.jce.provider.WrapCipherSpi r4;
        java.security.Key r0;
        org.bouncycastle.jce.provider.JCEPBEKey r20;

        r4 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        i0 := @parameter0: int;

        r0 := @parameter1: java.security.Key;

        r3 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        r10 := @parameter3: java.security.SecureRandom;

        $z0 = r0 instanceof org.bouncycastle.jce.provider.JCEPBEKey;

        if $z0 == 0 goto label04;

        r20 = (org.bouncycastle.jce.provider.JCEPBEKey) r0;

        $z3 = r3 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z3 == 0 goto label01;

        $r18 = r4.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine>;

        $r19 = interfaceinvoke $r18.<org.bouncycastle.crypto.Wrapper: java.lang.String getAlgorithmName()>();

        r21 = staticinvoke <org.bouncycastle.jce.provider.PBE$Util: org.bouncycastle.crypto.CipherParameters makePBEParameters(org.bouncycastle.jce.provider.JCEPBEKey,java.security.spec.AlgorithmParameterSpec,java.lang.String)>(r20, r3, $r19);

        goto label03;

     label01:
        $r16 = virtualinvoke r20.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.crypto.CipherParameters getParam()>();

        if $r16 == null goto label02;

        r21 = virtualinvoke r20.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.crypto.CipherParameters getParam()>();

        goto label03;

     label02:
        $r17 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r17.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("PBE requires PBE parameters to be set.");

        throw $r17;

     label03:
        goto label05;

     label04:
        $r1 = new org.bouncycastle.crypto.params.KeyParameter;

        $r2 = interfaceinvoke r0.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r1.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[])>($r2);

        r21 = $r1;

     label05:
        $z1 = r3 instanceof javax.crypto.spec.IvParameterSpec;

        if $z1 == 0 goto label06;

        r22 = (javax.crypto.spec.IvParameterSpec) r3;

        $r14 = new org.bouncycastle.crypto.params.ParametersWithIV;

        $r15 = virtualinvoke r22.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        specialinvoke $r14.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>(r21, $r15);

        r21 = $r14;

     label06:
        $z2 = r21 instanceof org.bouncycastle.crypto.params.KeyParameter;

        if $z2 == 0 goto label07;

        $i1 = r4.<org.bouncycastle.jce.provider.WrapCipherSpi: int ivSize>;

        if $i1 == 0 goto label07;

        $i2 = r4.<org.bouncycastle.jce.provider.WrapCipherSpi: int ivSize>;

        $r9 = newarray (byte)[$i2];

        r4.<org.bouncycastle.jce.provider.WrapCipherSpi: byte[] iv> = $r9;

        $r11 = r4.<org.bouncycastle.jce.provider.WrapCipherSpi: byte[] iv>;

        virtualinvoke r10.<java.security.SecureRandom: void nextBytes(byte[])>($r11);

        $r12 = new org.bouncycastle.crypto.params.ParametersWithIV;

        $r13 = r4.<org.bouncycastle.jce.provider.WrapCipherSpi: byte[] iv>;

        specialinvoke $r12.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>(r21, $r13);

        r21 = $r12;

     label07:
        tableswitch(i0)
        {
            case 1: goto label10;
            case 2: goto label10;
            case 3: goto label08;
            case 4: goto label09;
            default: goto label11;
        };

     label08:
        $r6 = r4.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine>;

        interfaceinvoke $r6.<org.bouncycastle.crypto.Wrapper: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, r21);

        goto label12;

     label09:
        $r5 = r4.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine>;

        interfaceinvoke $r5.<org.bouncycastle.crypto.Wrapper: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(0, r21);

        goto label12;

     label10:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("engine only valid for wrapping");

        throw $r7;

     label11:
        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("eeek!");

     label12:
        return;
    }

    protected void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        java.security.InvalidAlgorithmParameterException $r5;
        java.security.SecureRandom r3;
        int i0, $i1, i2;
        java.lang.String $r8, $r10;
        java.security.spec.AlgorithmParameterSpec r14;
        java.lang.Class[] $r4, $r11;
        java.security.AlgorithmParameters r0;
        org.bouncycastle.jce.provider.WrapCipherSpi r1;
        java.lang.Exception $r13;
        java.security.Key r2;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.Class $r12;

        r1 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        i0 := @parameter0: int;

        r2 := @parameter1: java.security.Key;

        r0 := @parameter2: java.security.AlgorithmParameters;

        r3 := @parameter3: java.security.SecureRandom;

        r14 = null;

        if r0 == null goto label6;

        i2 = 0;

     label1:
        $r4 = r1.<org.bouncycastle.jce.provider.WrapCipherSpi: java.lang.Class[] availableSpecs>;

        $i1 = lengthof $r4;

        if i2 == $i1 goto label5;

     label2:
        $r11 = r1.<org.bouncycastle.jce.provider.WrapCipherSpi: java.lang.Class[] availableSpecs>;

        $r12 = $r11[i2];

        r14 = virtualinvoke r0.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>($r12);

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        i2 = i2 + 1;

        goto label1;

     label5:
        if r14 != null goto label6;

        $r5 = new java.security.InvalidAlgorithmParameterException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t handle parameter ");

        $r8 = virtualinvoke r0.<java.security.AlgorithmParameters: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label6:
        r1.<org.bouncycastle.jce.provider.WrapCipherSpi: java.security.AlgorithmParameters engineParams> = r0;

        virtualinvoke r1.<org.bouncycastle.jce.provider.WrapCipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(i0, r2, r14, r3);

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    protected void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        java.security.Key r1;
        java.security.SecureRandom r2;
        int i0;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r4;
        org.bouncycastle.jce.provider.WrapCipherSpi r0;
        java.security.InvalidAlgorithmParameterException $r3;

        r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.SecureRandom;

     label1:
        virtualinvoke r0.<org.bouncycastle.jce.provider.WrapCipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(i0, r1, null, r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r3.<java.security.InvalidAlgorithmParameterException: java.lang.String getMessage()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label4:
        return;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }

    protected byte[] engineUpdate(byte[], int, int)
    {
        byte[] r2;
        int i0, i1;
        java.lang.RuntimeException $r0;
        org.bouncycastle.jce.provider.WrapCipherSpi r1;

        r1 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("not supported for wrapping");

        throw $r0;
    }

    protected int engineUpdate(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException
    {
        byte[] r2, r3;
        int i0, i1, i2;
        java.lang.RuntimeException $r0;
        org.bouncycastle.jce.provider.WrapCipherSpi r1;

        r1 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 := @parameter3: byte[];

        i2 := @parameter4: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("not supported for wrapping");

        throw $r0;
    }

    protected byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        byte[] r1;
        int i0, i1;
        org.bouncycastle.jce.provider.WrapCipherSpi r0;

        r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return null;
    }

    protected int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        byte[] r1, r2;
        int i0, i1, i2;
        org.bouncycastle.jce.provider.WrapCipherSpi r0;

        r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i2 := @parameter4: int;

        return 0;
    }

    protected byte[] engineWrap(java.security.Key) throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException
    {
        byte[] $r1, $r5, $r6;
        javax.crypto.IllegalBlockSizeException $r9;
        org.bouncycastle.jce.provider.WrapCipherSpi r2;
        java.security.Key r0;
        javax.crypto.BadPaddingException $r8;
        int $i0, $i1;
        org.bouncycastle.crypto.Wrapper $r3, $r4;
        java.security.InvalidKeyException $r7;
        java.lang.String $r10;

        r2 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        r0 := @parameter0: java.security.Key;

        $r1 = interfaceinvoke r0.<java.security.Key: byte[] getEncoded()>();

        if $r1 != null goto label1;

        $r7 = new java.security.InvalidKeyException;

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Cannot wrap key, null encoding.");

        throw $r7;

     label1:
        $r3 = r2.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine>;

        if $r3 != null goto label3;

        $i1 = lengthof $r1;

        $r6 = virtualinvoke r2.<org.bouncycastle.jce.provider.WrapCipherSpi: byte[] engineDoFinal(byte[],int,int)>($r1, 0, $i1);

     label2:
        return $r6;

     label3:
        $r4 = r2.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine>;

        $i0 = lengthof $r1;

        $r5 = interfaceinvoke $r4.<org.bouncycastle.crypto.Wrapper: byte[] wrap(byte[],int,int)>($r1, 0, $i0);

     label4:
        return $r5;

     label5:
        $r8 := @caughtexception;

        $r9 = new javax.crypto.IllegalBlockSizeException;

        $r10 = virtualinvoke $r8.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke $r9.<javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)>($r10);

        throw $r9;

        catch javax.crypto.BadPaddingException from label1 to label2 with label5;
        catch javax.crypto.BadPaddingException from label3 to label4 with label5;
    }

    protected java.security.Key engineUnwrap(byte[], java.lang.String, int) throws java.security.InvalidKeyException
    {
        byte[] r2, r64;
        org.bouncycastle.asn1.ASN1Sequence r65;
        javax.crypto.spec.SecretKeySpec $r31;
        org.bouncycastle.jce.provider.JDKDSAPrivateKey $r28;
        java.security.spec.X509EncodedKeySpec $r13;
        java.lang.Exception $r53;
        java.security.PrivateKey $r12, r66;
        java.security.NoSuchAlgorithmException $r39;
        java.security.InvalidKeyException $r6, $r33, $r40, $r47, $r54, $r56, $r59, $r62;
        java.lang.StringBuilder $r7, $r8, $r9, $r34, $r35, $r37, $r41, $r42, $r44, $r48, $r49, $r51;
        org.bouncycastle.asn1.DERObject $r16;
        java.security.spec.InvalidKeySpecException $r32;
        org.bouncycastle.jce.provider.JCERSAPrivateCrtKey $r25;
        org.bouncycastle.crypto.InvalidCipherTextException $r61;
        org.bouncycastle.crypto.Wrapper $r1, $r3;
        java.lang.String r4, $r10, $r36, $r38, $r43, $r45, $r50, $r52, $r57, $r60, $r63;
        org.bouncycastle.jce.provider.WrapCipherSpi r0;
        org.bouncycastle.asn1.x509.AlgorithmIdentifier $r18;
        org.bouncycastle.jce.provider.JCEECPrivateKey $r30;
        org.bouncycastle.jce.provider.JDKGOST3410PrivateKey $r29;
        org.bouncycastle.asn1.pkcs.PrivateKeyInfo $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.bouncycastle.asn1.DERObjectIdentifier $r19, $r20, $r21, $r22, $r23, $r24;
        javax.crypto.IllegalBlockSizeException $r55;
        org.bouncycastle.jce.provider.JCEDHPrivateKey $r26, $r27;
        java.security.KeyFactory $r5;
        org.bouncycastle.asn1.ASN1InputStream $r15;
        int $i0, i1, $i2;
        java.security.spec.PKCS8EncodedKeySpec $r11;
        java.security.PublicKey $r14;
        javax.crypto.BadPaddingException $r58;
        java.security.NoSuchProviderException $r46;

        r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        r2 := @parameter0: byte[];

        r4 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

     label01:
        $r1 = r0.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine>;

        if $r1 != null goto label02;

        $i2 = lengthof r2;

        r64 = virtualinvoke r0.<org.bouncycastle.jce.provider.WrapCipherSpi: byte[] engineDoFinal(byte[],int,int)>(r2, 0, $i2);

        goto label03;

     label02:
        $r3 = r0.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine>;

        $i0 = lengthof r2;

        r64 = interfaceinvoke $r3.<org.bouncycastle.crypto.Wrapper: byte[] unwrap(byte[],int,int)>(r2, 0, $i0);

     label03:
        goto label07;

     label04:
        $r61 := @caughtexception;

        $r62 = new java.security.InvalidKeyException;

        $r63 = virtualinvoke $r61.<org.bouncycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r62.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r63);

        throw $r62;

     label05:
        $r58 := @caughtexception;

        $r59 = new java.security.InvalidKeyException;

        $r60 = virtualinvoke $r58.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke $r59.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r60);

        throw $r59;

     label06:
        $r55 := @caughtexception;

        $r56 = new java.security.InvalidKeyException;

        $r57 = virtualinvoke $r55.<javax.crypto.IllegalBlockSizeException: java.lang.String getMessage()>();

        specialinvoke $r56.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r57);

        throw $r56;

     label07:
        if i1 != 3 goto label08;

        $r31 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r31.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r64, r4);

        return $r31;

     label08:
        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label18;

        if i1 != 2 goto label18;

        $r15 = new org.bouncycastle.asn1.ASN1InputStream;

        specialinvoke $r15.<org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[])>(r64);

     label09:
        $r16 = virtualinvoke $r15.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.DERObject readObject()>();

        r65 = (org.bouncycastle.asn1.ASN1Sequence) $r16;

        $r17 = new org.bouncycastle.asn1.pkcs.PrivateKeyInfo;

        specialinvoke $r17.<org.bouncycastle.asn1.pkcs.PrivateKeyInfo: void <init>(org.bouncycastle.asn1.ASN1Sequence)>(r65);

        $r18 = virtualinvoke $r17.<org.bouncycastle.asn1.pkcs.PrivateKeyInfo: org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId()>();

        $r19 = virtualinvoke $r18.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.DERObjectIdentifier getObjectId()>();

        $r20 = <org.bouncycastle.asn1.x9.X9ObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier id_ecPublicKey>;

        $z1 = virtualinvoke $r19.<org.bouncycastle.asn1.DERObjectIdentifier: boolean equals(java.lang.Object)>($r20);

        if $z1 == 0 goto label10;

        $r30 = new org.bouncycastle.jce.provider.JCEECPrivateKey;

        specialinvoke $r30.<org.bouncycastle.jce.provider.JCEECPrivateKey: void <init>(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>($r17);

        r66 = $r30;

        goto label15;

     label10:
        $r21 = <org.bouncycastle.asn1.cryptopro.CryptoProObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier gostR3410_94>;

        $z2 = virtualinvoke $r19.<org.bouncycastle.asn1.DERObjectIdentifier: boolean equals(java.lang.Object)>($r21);

        if $z2 == 0 goto label11;

        $r29 = new org.bouncycastle.jce.provider.JDKGOST3410PrivateKey;

        specialinvoke $r29.<org.bouncycastle.jce.provider.JDKGOST3410PrivateKey: void <init>(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>($r17);

        r66 = $r29;

        goto label15;

     label11:
        $r22 = <org.bouncycastle.asn1.x9.X9ObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier id_dsa>;

        $z3 = virtualinvoke $r19.<org.bouncycastle.asn1.DERObjectIdentifier: boolean equals(java.lang.Object)>($r22);

        if $z3 == 0 goto label12;

        $r28 = new org.bouncycastle.jce.provider.JDKDSAPrivateKey;

        specialinvoke $r28.<org.bouncycastle.jce.provider.JDKDSAPrivateKey: void <init>(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>($r17);

        r66 = $r28;

        goto label15;

     label12:
        $r23 = <org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier dhKeyAgreement>;

        $z4 = virtualinvoke $r19.<org.bouncycastle.asn1.DERObjectIdentifier: boolean equals(java.lang.Object)>($r23);

        if $z4 == 0 goto label13;

        $r27 = new org.bouncycastle.jce.provider.JCEDHPrivateKey;

        specialinvoke $r27.<org.bouncycastle.jce.provider.JCEDHPrivateKey: void <init>(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>($r17);

        r66 = $r27;

        goto label15;

     label13:
        $r24 = <org.bouncycastle.asn1.x9.X9ObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier dhpublicnumber>;

        $z5 = virtualinvoke $r19.<org.bouncycastle.asn1.DERObjectIdentifier: boolean equals(java.lang.Object)>($r24);

        if $z5 == 0 goto label14;

        $r26 = new org.bouncycastle.jce.provider.JCEDHPrivateKey;

        specialinvoke $r26.<org.bouncycastle.jce.provider.JCEDHPrivateKey: void <init>(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>($r17);

        r66 = $r26;

        goto label15;

     label14:
        $r25 = new org.bouncycastle.jce.provider.JCERSAPrivateCrtKey;

        specialinvoke $r25.<org.bouncycastle.jce.provider.JCERSAPrivateCrtKey: void <init>(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>($r17);

        r66 = $r25;

     label15:
        goto label17;

     label16:
        $r53 := @caughtexception;

        $r54 = new java.security.InvalidKeyException;

        specialinvoke $r54.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Invalid key encoding.");

        throw $r54;

     label17:
        return r66;

     label18:
        $r5 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>(r4, "BC");

        if i1 != 1 goto label20;

        $r13 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r13.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r64);

        $r14 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r13);

     label19:
        return $r14;

     label20:
        if i1 != 2 goto label22;

        $r11 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r11.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r64);

        $r12 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r11);

     label21:
        return $r12;

     label22:
        goto label26;

     label23:
        $r46 := @caughtexception;

        $r47 = new java.security.InvalidKeyException;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r50 = virtualinvoke $r46.<java.security.NoSuchProviderException: java.lang.String getMessage()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r52);

        throw $r47;

     label24:
        $r39 := @caughtexception;

        $r40 = new java.security.InvalidKeyException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r43 = virtualinvoke $r39.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r45);

        throw $r40;

     label25:
        $r32 := @caughtexception;

        $r33 = new java.security.InvalidKeyException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r36 = virtualinvoke $r32.<java.security.spec.InvalidKeySpecException: java.lang.String getMessage()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r38);

        throw $r33;

     label26:
        $r6 = new java.security.InvalidKeyException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r10);

        throw $r6;

        catch org.bouncycastle.crypto.InvalidCipherTextException from label01 to label03 with label04;
        catch javax.crypto.BadPaddingException from label01 to label03 with label05;
        catch javax.crypto.IllegalBlockSizeException from label01 to label03 with label06;
        catch java.lang.Exception from label09 to label15 with label16;
        catch java.security.NoSuchProviderException from label18 to label19 with label23;
        catch java.security.NoSuchProviderException from label20 to label21 with label23;
        catch java.security.NoSuchAlgorithmException from label18 to label19 with label24;
        catch java.security.NoSuchAlgorithmException from label20 to label21 with label24;
        catch java.security.spec.InvalidKeySpecException from label18 to label19 with label25;
        catch java.security.spec.InvalidKeySpecException from label20 to label21 with label25;
    }
}
