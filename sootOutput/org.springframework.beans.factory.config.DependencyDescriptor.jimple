public class org.springframework.beans.factory.config.DependencyDescriptor extends java.lang.Object implements java.io.Serializable
{
    private transient org.springframework.core.MethodParameter methodParameter;
    private transient java.lang.reflect.Field field;
    private java.lang.Class declaringClass;
    private java.lang.String methodName;
    private java.lang.Class[] parameterTypes;
    private int parameterIndex;
    private java.lang.String fieldName;
    private final boolean required;
    private final boolean eager;
    private transient java.lang.'annotation'.Annotation[] fieldAnnotations;

    public void <init>(org.springframework.core.MethodParameter, boolean)
    {
        org.springframework.beans.factory.config.DependencyDescriptor r0;
        org.springframework.core.MethodParameter r1;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        r1 := @parameter0: org.springframework.core.MethodParameter;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.springframework.beans.factory.config.DependencyDescriptor: void <init>(org.springframework.core.MethodParameter,boolean,boolean)>(r1, z0, 1);

        return;
    }

    public void <init>(org.springframework.core.MethodParameter, boolean, boolean)
    {
        java.lang.Class[] $r6, $r10;
        org.springframework.beans.factory.config.DependencyDescriptor r0;
        java.lang.reflect.Constructor $r5;
        org.springframework.core.MethodParameter r1, $r3;
        int $i0;
        java.lang.Class $r2;
        java.lang.String $r8;
        java.lang.reflect.Method $r4, $r7, $r9;
        boolean z0, z1;

        r0 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        r1 := @parameter0: org.springframework.core.MethodParameter;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "MethodParameter must not be null");

        r0.<org.springframework.beans.factory.config.DependencyDescriptor: org.springframework.core.MethodParameter methodParameter> = r1;

        $r2 = virtualinvoke r1.<org.springframework.core.MethodParameter: java.lang.Class getDeclaringClass()>();

        r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class declaringClass> = $r2;

        $r3 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: org.springframework.core.MethodParameter methodParameter>;

        $r4 = virtualinvoke $r3.<org.springframework.core.MethodParameter: java.lang.reflect.Method getMethod()>();

        if $r4 == null goto label1;

        $r7 = virtualinvoke r1.<org.springframework.core.MethodParameter: java.lang.reflect.Method getMethod()>();

        $r8 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.String getName()>();

        r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.String methodName> = $r8;

        $r9 = virtualinvoke r1.<org.springframework.core.MethodParameter: java.lang.reflect.Method getMethod()>();

        $r10 = virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class[] parameterTypes> = $r10;

        goto label2;

     label1:
        $r5 = virtualinvoke r1.<org.springframework.core.MethodParameter: java.lang.reflect.Constructor getConstructor()>();

        $r6 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class[] parameterTypes> = $r6;

     label2:
        $i0 = virtualinvoke r1.<org.springframework.core.MethodParameter: int getParameterIndex()>();

        r0.<org.springframework.beans.factory.config.DependencyDescriptor: int parameterIndex> = $i0;

        r0.<org.springframework.beans.factory.config.DependencyDescriptor: boolean required> = z0;

        r0.<org.springframework.beans.factory.config.DependencyDescriptor: boolean eager> = z1;

        return;
    }

    public void <init>(java.lang.reflect.Field, boolean)
    {
        java.lang.reflect.Field r1;
        org.springframework.beans.factory.config.DependencyDescriptor r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        r1 := @parameter0: java.lang.reflect.Field;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.springframework.beans.factory.config.DependencyDescriptor: void <init>(java.lang.reflect.Field,boolean,boolean)>(r1, z0, 1);

        return;
    }

    public void <init>(java.lang.reflect.Field, boolean, boolean)
    {
        java.lang.Class $r2;
        java.lang.String $r3;
        java.lang.reflect.Field r1;
        org.springframework.beans.factory.config.DependencyDescriptor r0;
        boolean z0, z1;

        r0 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        r1 := @parameter0: java.lang.reflect.Field;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Field must not be null");

        r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field> = r1;

        $r2 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class declaringClass> = $r2;

        $r3 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.String getName()>();

        r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.String fieldName> = $r3;

        r0.<org.springframework.beans.factory.config.DependencyDescriptor: boolean required> = z0;

        r0.<org.springframework.beans.factory.config.DependencyDescriptor: boolean eager> = z1;

        return;
    }

    public org.springframework.core.MethodParameter getMethodParameter()
    {
        org.springframework.beans.factory.config.DependencyDescriptor r0;
        org.springframework.core.MethodParameter $r1;

        r0 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        $r1 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: org.springframework.core.MethodParameter methodParameter>;

        return $r1;
    }

    public java.lang.reflect.Field getField()
    {
        java.lang.reflect.Field $r1;
        org.springframework.beans.factory.config.DependencyDescriptor r0;

        r0 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        $r1 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field>;

        return $r1;
    }

    public boolean isRequired()
    {
        org.springframework.beans.factory.config.DependencyDescriptor r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        $z0 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: boolean required>;

        return $z0;
    }

    public boolean isEager()
    {
        org.springframework.beans.factory.config.DependencyDescriptor r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        $z0 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: boolean eager>;

        return $z0;
    }

    public void initParameterNameDiscovery(org.springframework.core.ParameterNameDiscoverer)
    {
        org.springframework.core.ParameterNameDiscoverer r2;
        org.springframework.core.MethodParameter $r1, $r3;
        org.springframework.beans.factory.config.DependencyDescriptor r0;

        r0 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        r2 := @parameter0: org.springframework.core.ParameterNameDiscoverer;

        $r1 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: org.springframework.core.MethodParameter methodParameter>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: org.springframework.core.MethodParameter methodParameter>;

        virtualinvoke $r3.<org.springframework.core.MethodParameter: void initParameterNameDiscovery(org.springframework.core.ParameterNameDiscoverer)>(r2);

     label1:
        return;
    }

    public java.lang.String getDependencyName()
    {
        org.springframework.core.MethodParameter $r2;
        java.lang.String $r4;
        java.lang.reflect.Field $r1, $r3;
        org.springframework.beans.factory.config.DependencyDescriptor r0;

        r0 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        $r1 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.String getName()>();

        goto label2;

     label1:
        $r2 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: org.springframework.core.MethodParameter methodParameter>;

        $r4 = virtualinvoke $r2.<org.springframework.core.MethodParameter: java.lang.String getParameterName()>();

     label2:
        return $r4;
    }

    public java.lang.Class getDependencyType()
    {
        org.springframework.core.MethodParameter $r2;
        java.lang.Class $r4;
        java.lang.reflect.Field $r1, $r3;
        org.springframework.beans.factory.config.DependencyDescriptor r0;

        r0 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        $r1 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        goto label2;

     label1:
        $r2 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: org.springframework.core.MethodParameter methodParameter>;

        $r4 = virtualinvoke $r2.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

     label2:
        return $r4;
    }

    public java.lang.reflect.Type getGenericDependencyType()
    {
        java.lang.reflect.Type $r4;
        org.springframework.core.MethodParameter $r2;
        java.lang.reflect.Field $r1, $r3;
        org.springframework.beans.factory.config.DependencyDescriptor r0;

        r0 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        $r1 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        goto label2;

     label1:
        $r2 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: org.springframework.core.MethodParameter methodParameter>;

        $r4 = virtualinvoke $r2.<org.springframework.core.MethodParameter: java.lang.reflect.Type getGenericParameterType()>();

     label2:
        return $r4;
    }

    public java.lang.Class getCollectionType()
    {
        org.springframework.core.MethodParameter $r2;
        java.lang.Class $r4;
        java.lang.reflect.Field $r1, $r3;
        org.springframework.beans.factory.config.DependencyDescriptor r0;

        r0 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        $r1 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field>;

        $r4 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getCollectionFieldType(java.lang.reflect.Field)>($r3);

        goto label2;

     label1:
        $r2 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: org.springframework.core.MethodParameter methodParameter>;

        $r4 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getCollectionParameterType(org.springframework.core.MethodParameter)>($r2);

     label2:
        return $r4;
    }

    public java.lang.Class getMapKeyType()
    {
        org.springframework.core.MethodParameter $r2;
        java.lang.Class $r4;
        java.lang.reflect.Field $r1, $r3;
        org.springframework.beans.factory.config.DependencyDescriptor r0;

        r0 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        $r1 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field>;

        $r4 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getMapKeyFieldType(java.lang.reflect.Field)>($r3);

        goto label2;

     label1:
        $r2 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: org.springframework.core.MethodParameter methodParameter>;

        $r4 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getMapKeyParameterType(org.springframework.core.MethodParameter)>($r2);

     label2:
        return $r4;
    }

    public java.lang.Class getMapValueType()
    {
        org.springframework.core.MethodParameter $r2;
        java.lang.Class $r4;
        java.lang.reflect.Field $r1, $r3;
        org.springframework.beans.factory.config.DependencyDescriptor r0;

        r0 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        $r1 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field>;

        $r4 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getMapValueFieldType(java.lang.reflect.Field)>($r3);

        goto label2;

     label1:
        $r2 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: org.springframework.core.MethodParameter methodParameter>;

        $r4 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getMapValueParameterType(org.springframework.core.MethodParameter)>($r2);

     label2:
        return $r4;
    }

    public java.lang.'annotation'.Annotation[] getAnnotations()
    {
        java.lang.'annotation'.Annotation[] $r3, $r4, $r5, $r7;
        java.lang.reflect.Field $r1, $r6;
        org.springframework.beans.factory.config.DependencyDescriptor r0;
        org.springframework.core.MethodParameter $r2;

        r0 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        $r1 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field>;

        if $r1 == null goto label2;

        $r4 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.'annotation'.Annotation[] fieldAnnotations>;

        if $r4 != null goto label1;

        $r6 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field>;

        $r7 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getAnnotations()>();

        r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.'annotation'.Annotation[] fieldAnnotations> = $r7;

     label1:
        $r5 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.'annotation'.Annotation[] fieldAnnotations>;

        return $r5;

     label2:
        $r2 = r0.<org.springframework.beans.factory.config.DependencyDescriptor: org.springframework.core.MethodParameter methodParameter>;

        $r3 = virtualinvoke $r2.<org.springframework.core.MethodParameter: java.lang.'annotation'.Annotation[] getParameterAnnotations()>();

        return $r3;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Throwable $r16;
        java.lang.IllegalStateException $r17;
        java.io.ObjectInputStream r0;
        org.springframework.beans.factory.config.DependencyDescriptor r1;
        java.lang.reflect.Constructor $r7;
        org.springframework.core.MethodParameter $r4, $r8;
        int $i0, $i1;
        java.lang.String $r2, $r3, $r10, $r13;
        java.lang.reflect.Method $r12;
        java.lang.Class[] $r5, $r9;
        java.lang.reflect.Field $r15;
        java.lang.Class $r6, $r11, $r14;

        r1 := @this: org.springframework.beans.factory.config.DependencyDescriptor;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

     label1:
        $r2 = r1.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.String fieldName>;

        if $r2 == null goto label2;

        $r14 = r1.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class declaringClass>;

        $r13 = r1.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.String fieldName>;

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r13);

        r1.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.reflect.Field field> = $r15;

        goto label6;

     label2:
        $r3 = r1.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.String methodName>;

        if $r3 == null goto label3;

        $r8 = new org.springframework.core.MethodParameter;

        $r11 = r1.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class declaringClass>;

        $r10 = r1.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.String methodName>;

        $r9 = r1.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class[] parameterTypes>;

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r10, $r9);

        $i1 = r1.<org.springframework.beans.factory.config.DependencyDescriptor: int parameterIndex>;

        specialinvoke $r8.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>($r12, $i1);

        r1.<org.springframework.beans.factory.config.DependencyDescriptor: org.springframework.core.MethodParameter methodParameter> = $r8;

        goto label6;

     label3:
        $r4 = new org.springframework.core.MethodParameter;

        $r6 = r1.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class declaringClass>;

        $r5 = r1.<org.springframework.beans.factory.config.DependencyDescriptor: java.lang.Class[] parameterTypes>;

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r5);

        $i0 = r1.<org.springframework.beans.factory.config.DependencyDescriptor: int parameterIndex>;

        specialinvoke $r4.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Constructor,int)>($r7, $i0);

        r1.<org.springframework.beans.factory.config.DependencyDescriptor: org.springframework.core.MethodParameter methodParameter> = $r4;

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not find original class structure", $r16);

        throw $r17;

     label6:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
    }
}
