public abstract class org.apache.xmlbeans.impl.values.JavaNotationHolderEx extends org.apache.xmlbeans.impl.values.JavaNotationHolder
{
    private org.apache.xmlbeans.SchemaType _schemaType;

    public org.apache.xmlbeans.SchemaType schemaType()
    {
        org.apache.xmlbeans.impl.values.JavaNotationHolderEx r0;
        org.apache.xmlbeans.SchemaType $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaNotationHolderEx;

        $r1 = r0.<org.apache.xmlbeans.impl.values.JavaNotationHolderEx: org.apache.xmlbeans.SchemaType _schemaType>;

        return $r1;
    }

    public void <init>(org.apache.xmlbeans.SchemaType, boolean)
    {
        org.apache.xmlbeans.impl.values.JavaNotationHolderEx r0;
        org.apache.xmlbeans.SchemaType r1;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaNotationHolderEx;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.values.JavaNotationHolder: void <init>()>();

        r0.<org.apache.xmlbeans.impl.values.JavaNotationHolderEx: org.apache.xmlbeans.SchemaType _schemaType> = r1;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaNotationHolderEx: void initComplexType(boolean,boolean)>(z0, 0);

        return;
    }

    protected int get_wscanon_rule()
    {
        int $i0;
        org.apache.xmlbeans.impl.values.JavaNotationHolderEx r0;
        org.apache.xmlbeans.SchemaType $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaNotationHolderEx;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaNotationHolderEx: org.apache.xmlbeans.SchemaType schemaType()>();

        $i0 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: int getWhiteSpaceRule()>();

        return $i0;
    }

    protected void set_text(java.lang.String)
    {
        org.apache.xmlbeans.impl.values.JavaNotationHolderEx r0;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r4, $r5;
        java.lang.String r1;
        org.apache.xmlbeans.SchemaType $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaNotationHolderEx;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaNotationHolderEx: boolean _validateOnSet()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<org.apache.xmlbeans.impl.values.JavaNotationHolderEx: org.apache.xmlbeans.SchemaType _schemaType>;

        $z1 = staticinvoke <org.apache.xmlbeans.impl.values.JavaNotationHolderEx: boolean check(java.lang.String,org.apache.xmlbeans.SchemaType)>(r1, $r2);

        if $z1 != 0 goto label1;

        $r5 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        specialinvoke $r5.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>()>();

        throw $r5;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.values.JavaNotationHolderEx: org.apache.xmlbeans.SchemaType _schemaType>;

        $z2 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: boolean matchPatternFacet(java.lang.String)>(r1);

        if $z2 != 0 goto label2;

        $r4 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        specialinvoke $r4.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>()>();

        throw $r4;

     label2:
        specialinvoke r0.<org.apache.xmlbeans.impl.values.JavaNotationHolder: void set_text(java.lang.String)>(r1);

        return;
    }

    protected void set_notation(java.lang.String)
    {
        org.apache.xmlbeans.impl.values.JavaNotationHolderEx r0;
        java.lang.String r1;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaNotationHolderEx;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaNotationHolderEx: void set_text(java.lang.String)>(r1);

        return;
    }

    protected void set_xmlanysimple(org.apache.xmlbeans.XmlAnySimpleType)
    {
        org.apache.xmlbeans.XmlAnySimpleType r1;
        org.apache.xmlbeans.impl.values.JavaNotationHolderEx r0;
        org.apache.xmlbeans.impl.common.ValidationContext $r3, $r7, $r10;
        java.lang.String $r2, $r5;
        javax.xml.namespace.QName $r9, r12;
        org.apache.xmlbeans.SchemaType $r6, $r11;
        boolean $z0;
        org.apache.xmlbeans.impl.common.PrefixResolver $r4, $r8;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaNotationHolderEx;

        r1 := @parameter0: org.apache.xmlbeans.XmlAnySimpleType;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaNotationHolderEx: boolean _validateOnSet()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r1.<org.apache.xmlbeans.XmlAnySimpleType: java.lang.String getStringValue()>();

        $r6 = r0.<org.apache.xmlbeans.impl.values.JavaNotationHolderEx: org.apache.xmlbeans.SchemaType _schemaType>;

        $r7 = <org.apache.xmlbeans.impl.values.JavaNotationHolderEx: org.apache.xmlbeans.impl.common.ValidationContext _voorVc>;

        $r8 = staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: org.apache.xmlbeans.impl.common.PrefixResolver getCurrent()>();

        $r9 = staticinvoke <org.apache.xmlbeans.impl.values.JavaNotationHolderEx: javax.xml.namespace.QName validateLexical(java.lang.String,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.impl.common.ValidationContext,org.apache.xmlbeans.impl.common.PrefixResolver)>($r5, $r6, $r7, $r8);

        r12 = $r9;

        if $r9 == null goto label2;

        $r11 = r0.<org.apache.xmlbeans.impl.values.JavaNotationHolderEx: org.apache.xmlbeans.SchemaType _schemaType>;

        $r10 = <org.apache.xmlbeans.impl.values.JavaNotationHolderEx: org.apache.xmlbeans.impl.common.ValidationContext _voorVc>;

        staticinvoke <org.apache.xmlbeans.impl.values.JavaNotationHolderEx: void validateValue(javax.xml.namespace.QName,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.impl.common.ValidationContext)>($r9, $r11, $r10);

        goto label2;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.XmlAnySimpleType: java.lang.String getStringValue()>();

        $r3 = <org.apache.xmlbeans.impl.values.JavaNotationHolderEx: org.apache.xmlbeans.impl.common.ValidationContext _voorVc>;

        $r4 = staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: org.apache.xmlbeans.impl.common.PrefixResolver getCurrent()>();

        r12 = staticinvoke <org.apache.xmlbeans.impl.values.JavaNotationHolder: javax.xml.namespace.QName validateLexical(java.lang.String,org.apache.xmlbeans.impl.common.ValidationContext,org.apache.xmlbeans.impl.common.PrefixResolver)>($r2, $r3, $r4);

     label2:
        specialinvoke r0.<org.apache.xmlbeans.impl.values.JavaNotationHolder: void set_QName(javax.xml.namespace.QName)>(r12);

        return;
    }

    public static javax.xml.namespace.QName validateLexical(java.lang.String, org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.impl.common.ValidationContext, org.apache.xmlbeans.impl.common.PrefixResolver)
    {
        java.lang.Object[] $r5;
        org.apache.xmlbeans.impl.common.ValidationContext r1;
        java.lang.String r0, $r6;
        javax.xml.namespace.QName $r3;
        org.apache.xmlbeans.SchemaType r4;
        org.apache.xmlbeans.impl.common.PrefixResolver r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.xmlbeans.SchemaType;

        r1 := @parameter2: org.apache.xmlbeans.impl.common.ValidationContext;

        r2 := @parameter3: org.apache.xmlbeans.impl.common.PrefixResolver;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.values.JavaQNameHolder: javax.xml.namespace.QName validateLexical(java.lang.String,org.apache.xmlbeans.impl.common.ValidationContext,org.apache.xmlbeans.impl.common.PrefixResolver)>(r0, r1, r2);

        $z0 = interfaceinvoke r4.<org.apache.xmlbeans.SchemaType: boolean hasPatternFacet()>();

        if $z0 == 0 goto label1;

        $z1 = interfaceinvoke r4.<org.apache.xmlbeans.SchemaType: boolean matchPatternFacet(java.lang.String)>(r0);

        if $z1 != 0 goto label1;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = "NOTATION";

        $r5[1] = r0;

        $r6 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String readable(org.apache.xmlbeans.SchemaType)>(r4);

        $r5[2] = $r6;

        interfaceinvoke r1.<org.apache.xmlbeans.impl.common.ValidationContext: void invalid(java.lang.String,java.lang.Object[])>("cvc-datatype-valid.1.1", $r5);

     label1:
        staticinvoke <org.apache.xmlbeans.impl.values.JavaNotationHolderEx: boolean check(java.lang.String,org.apache.xmlbeans.SchemaType)>(r0, r4);

        return $r3;
    }

    private static boolean check(java.lang.String, org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase $r4, $r7, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.math.BigInteger $r5, $r8, $r10;
        java.lang.String r6;
        org.apache.xmlbeans.SchemaType r0;
        org.apache.xmlbeans.XmlAnySimpleType $r1, $r2, $r3;

        r6 := @parameter0: java.lang.String;

        r0 := @parameter1: org.apache.xmlbeans.SchemaType;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(0);

        if $r1 == null goto label1;

        $r9 = (org.apache.xmlbeans.impl.values.XmlObjectBase) $r1;

        $r10 = virtualinvoke $r9.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.math.BigInteger getBigIntegerValue()>();

        $i4 = virtualinvoke $r10.<java.math.BigInteger: int intValue()>();

        $i5 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i5 != $i4 goto label1;

        return 0;

     label1:
        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(1);

        if $r2 == null goto label2;

        $r7 = (org.apache.xmlbeans.impl.values.XmlObjectBase) $r2;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.math.BigInteger getBigIntegerValue()>();

        $i2 = virtualinvoke $r8.<java.math.BigInteger: int intValue()>();

        $i3 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i3 >= $i2 goto label2;

        return 0;

     label2:
        $r3 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(2);

        if $r3 == null goto label3;

        $r4 = (org.apache.xmlbeans.impl.values.XmlObjectBase) $r3;

        $r5 = virtualinvoke $r4.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.math.BigInteger getBigIntegerValue()>();

        $i0 = virtualinvoke $r5.<java.math.BigInteger: int intValue()>();

        $i1 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i1 <= $i0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public static void validateValue(javax.xml.namespace.QName, org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.impl.common.ValidationContext)
    {
        org.apache.xmlbeans.XmlAnySimpleType $r6;
        java.lang.Object[] $r3;
        org.apache.xmlbeans.impl.values.XmlObjectBase $r7;
        org.apache.xmlbeans.impl.common.ValidationContext r2;
        org.apache.xmlbeans.XmlAnySimpleType[] $r1;
        int $i0, i1;
        javax.xml.namespace.QName r4, $r8;
        java.lang.String $r5;
        org.apache.xmlbeans.SchemaType r0;
        boolean $z0;

        r4 := @parameter0: javax.xml.namespace.QName;

        r0 := @parameter1: org.apache.xmlbeans.SchemaType;

        r2 := @parameter2: org.apache.xmlbeans.impl.common.ValidationContext;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType[] getEnumerationValues()>();

        if $r1 == null goto label4;

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label3;

        $r6 = $r1[i1];

        $r7 = (org.apache.xmlbeans.impl.values.XmlObjectBase) $r6;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.values.XmlObjectBase: javax.xml.namespace.QName getQNameValue()>();

        $z0 = virtualinvoke r4.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label2;

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = "NOTATION";

        $r3[1] = r4;

        $r5 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String readable(org.apache.xmlbeans.SchemaType)>(r0);

        $r3[2] = $r5;

        interfaceinvoke r2.<org.apache.xmlbeans.impl.common.ValidationContext: void invalid(java.lang.String,java.lang.Object[])>("cvc-enumeration-valid", $r3);

     label4:
        return;
    }
}
