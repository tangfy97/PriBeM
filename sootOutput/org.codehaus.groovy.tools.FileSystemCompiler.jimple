public class org.codehaus.groovy.tools.FileSystemCompiler extends java.lang.Object
{
    private final org.codehaus.groovy.control.CompilationUnit unit;

    public void <init>(org.codehaus.groovy.control.CompilerConfiguration) throws org.codehaus.groovy.control.ConfigurationException
    {
        org.codehaus.groovy.control.CompilationUnit $r3;
        java.util.Map $r2;
        org.codehaus.groovy.tools.FileSystemCompiler r0;
        org.codehaus.groovy.tools.javac.JavaAwareCompilationUnit $r4;
        org.codehaus.groovy.control.CompilerConfiguration r1;

        r0 := @this: org.codehaus.groovy.tools.FileSystemCompiler;

        r1 := @parameter0: org.codehaus.groovy.control.CompilerConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<org.codehaus.groovy.control.CompilerConfiguration: java.util.Map getJointCompilationOptions()>();

        if $r2 == null goto label1;

        $r4 = new org.codehaus.groovy.tools.javac.JavaAwareCompilationUnit;

        specialinvoke $r4.<org.codehaus.groovy.tools.javac.JavaAwareCompilationUnit: void <init>(org.codehaus.groovy.control.CompilerConfiguration)>(r1);

        r0.<org.codehaus.groovy.tools.FileSystemCompiler: org.codehaus.groovy.control.CompilationUnit unit> = $r4;

        goto label2;

     label1:
        $r3 = new org.codehaus.groovy.control.CompilationUnit;

        specialinvoke $r3.<org.codehaus.groovy.control.CompilationUnit: void <init>(org.codehaus.groovy.control.CompilerConfiguration)>(r1);

        r0.<org.codehaus.groovy.tools.FileSystemCompiler: org.codehaus.groovy.control.CompilationUnit unit> = $r3;

     label2:
        return;
    }

    public void compile(java.lang.String[]) throws java.lang.Exception
    {
        org.codehaus.groovy.control.CompilationUnit $r2, $r3;
        org.codehaus.groovy.tools.FileSystemCompiler r0;
        java.lang.String[] r1;

        r0 := @this: org.codehaus.groovy.tools.FileSystemCompiler;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<org.codehaus.groovy.tools.FileSystemCompiler: org.codehaus.groovy.control.CompilationUnit unit>;

        virtualinvoke $r2.<org.codehaus.groovy.control.CompilationUnit: void addSources(java.lang.String[])>(r1);

        $r3 = r0.<org.codehaus.groovy.tools.FileSystemCompiler: org.codehaus.groovy.control.CompilationUnit unit>;

        virtualinvoke $r3.<org.codehaus.groovy.control.CompilationUnit: void compile()>();

        return;
    }

    public void compile(java.io.File[]) throws java.lang.Exception
    {
        org.codehaus.groovy.control.CompilationUnit $r2, $r3;
        org.codehaus.groovy.tools.FileSystemCompiler r0;
        java.io.File[] r1;

        r0 := @this: org.codehaus.groovy.tools.FileSystemCompiler;

        r1 := @parameter0: java.io.File[];

        $r2 = r0.<org.codehaus.groovy.tools.FileSystemCompiler: org.codehaus.groovy.control.CompilationUnit unit>;

        virtualinvoke $r2.<org.codehaus.groovy.control.CompilationUnit: void addSources(java.io.File[])>(r1);

        $r3 = r0.<org.codehaus.groovy.tools.FileSystemCompiler: org.codehaus.groovy.control.CompilationUnit unit>;

        virtualinvoke $r3.<org.codehaus.groovy.control.CompilationUnit: void compile()>();

        return;
    }

    public static void displayHelp(org.apache.commons.cli.Options)
    {
        org.apache.commons.cli.Options r1;
        org.apache.commons.cli.HelpFormatter $r0;

        r1 := @parameter0: org.apache.commons.cli.Options;

        $r0 = new org.apache.commons.cli.HelpFormatter;

        specialinvoke $r0.<org.apache.commons.cli.HelpFormatter: void <init>()>();

        virtualinvoke $r0.<org.apache.commons.cli.HelpFormatter: void printHelp(int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String)>(80, "groovyc [options] <source-files>", "options:", r1, "");

        return;
    }

    public static void displayVersion()
    {
        java.io.PrintStream $r2, $r6, $r7;
        java.lang.StringBuffer $r1, $r3, $r4;
        java.lang.String $r0, $r5;

        $r0 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String getVersion()>();

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Groovy compiler version ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Copyright 2003-2008 The Codehaus. http://groovy.codehaus.org/");

        $r7 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("");

        return;
    }

    public static int checkFiles(java.lang.String[])
    {
        java.lang.String[] r0;
        java.lang.StringBuffer $r3, $r5, $r6, $r8, $r10, $r11;
        int $i0, i1, i2;
        java.lang.String $r2, $r7, $r12;
        boolean $z0, $z1;
        java.io.PrintStream $r4, $r9;
        java.io.File $r1;

        r0 := @parameter0: java.lang.String[];

        i1 = 0;

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label4;

        $r1 = new java.io.File;

        $r2 = r0[i2];

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r9 = <java.lang.System: java.io.PrintStream err>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("error: file not found: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12);

        i1 = i1 + 1;

        goto label3;

     label2:
        $z1 = virtualinvoke $r1.<java.io.File: boolean canRead()>();

        if $z1 != 0 goto label3;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("error: file not readable: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7);

        i1 = i1 + 1;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return i1;
    }

    public static void main(java.lang.String[])
    {
        java.util.Map $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        org.codehaus.groovy.tools.ErrorReporter $r27;
        java.lang.Throwable $r26;
        org.apache.commons.cli.Options $r0;
        org.codehaus.groovy.tools.FileSystemCompiler $r17;
        java.lang.String[] r13, $r16, $r21, $r22;
        java.util.HashMap $r20;
        int $i0, $i1;
        org.apache.commons.cli.CommandLine $r14;
        java.lang.String $r23, $r24, $r25;
        org.apache.commons.cli.PosixParser $r12;
        org.apache.commons.cli.Option $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.io.PrintStream $r28;
        org.codehaus.groovy.control.CompilerConfiguration $r15;
        java.io.File $r18;

        r13 := @parameter0: java.lang.String[];

        z6 = 0;

     label01:
        $r0 = new org.apache.commons.cli.Options;

        specialinvoke $r0.<org.apache.commons.cli.Options: void <init>()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("classpath");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("path");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("Specify where to find the class files.");

        $r1 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create()>();

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r1);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("sourcepath");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("path");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("Specify where to find the source files.");

        $r2 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create()>();

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r2);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("temp");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("temp");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("");

        $r3 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create()>();

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r3);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("encoding");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("encoding");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("Specify the encoding of the user class files.");

        $r4 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create()>();

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r4);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("Specify where to place generated class files.");

        $r5 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(100);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r5);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("help");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("Print a synopsis of standard options.");

        $r6 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(104);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r6);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("version");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("Print the version.");

        $r7 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(118);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r7);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("exception");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("Print stack trace on error.");

        $r8 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(101);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r8);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("jointCompilation");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("Attach javac compiler to compile .java files.");

        $r9 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(106);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r9);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("property=value");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withValueSeparator()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArgs(int)>(2);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("");

        $r10 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(java.lang.String)>("J");

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r10);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("flag");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("");

        $r11 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(java.lang.String)>("F");

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r11);

        $r12 = new org.apache.commons.cli.PosixParser;

        specialinvoke $r12.<org.apache.commons.cli.PosixParser: void <init>()>();

        $r14 = virtualinvoke $r12.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[])>($r0, r13);

        $z0 = virtualinvoke $r14.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(104);

        if $z0 == 0 goto label03;

        staticinvoke <org.codehaus.groovy.tools.FileSystemCompiler: void displayHelp(org.apache.commons.cli.Options)>($r0);

     label02:
        return;

     label03:
        $z1 = virtualinvoke $r14.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(118);

        if $z1 == 0 goto label05;

        staticinvoke <org.codehaus.groovy.tools.FileSystemCompiler: void displayVersion()>();

     label04:
        return;

     label05:
        $r15 = new org.codehaus.groovy.control.CompilerConfiguration;

        specialinvoke $r15.<org.codehaus.groovy.control.CompilerConfiguration: void <init>()>();

        $z2 = virtualinvoke $r14.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("classpath");

        if $z2 == 0 goto label06;

        $r25 = virtualinvoke $r14.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("classpath");

        virtualinvoke $r15.<org.codehaus.groovy.control.CompilerConfiguration: void setClasspath(java.lang.String)>($r25);

     label06:
        $z3 = virtualinvoke $r14.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(100);

        if $z3 == 0 goto label07;

        $r24 = virtualinvoke $r14.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(char)>(100);

        virtualinvoke $r15.<org.codehaus.groovy.control.CompilerConfiguration: void setTargetDirectory(java.lang.String)>($r24);

     label07:
        $z4 = virtualinvoke $r14.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("encoding");

        if $z4 == 0 goto label08;

        $r23 = virtualinvoke $r14.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("encoding");

        virtualinvoke $r15.<org.codehaus.groovy.control.CompilerConfiguration: void setSourceEncoding(java.lang.String)>($r23);

     label08:
        z6 = virtualinvoke $r14.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(101);

        $z5 = virtualinvoke $r14.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(106);

        if $z5 == 0 goto label09;

        $r20 = new java.util.HashMap;

        specialinvoke $r20.<java.util.HashMap: void <init>()>();

        $r21 = virtualinvoke $r14.<org.apache.commons.cli.CommandLine: java.lang.String[] getOptionValues(java.lang.String)>("J");

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("namedValues", $r21);

        $r22 = virtualinvoke $r14.<org.apache.commons.cli.CommandLine: java.lang.String[] getOptionValues(java.lang.String)>("F");

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flags", $r22);

        virtualinvoke $r15.<org.codehaus.groovy.control.CompilerConfiguration: void setJointCompilationOptions(java.util.Map)>($r20);

     label09:
        $r16 = virtualinvoke $r14.<org.apache.commons.cli.CommandLine: java.lang.String[] getArgs()>();

        $i0 = lengthof $r16;

        if $i0 != 0 goto label11;

        staticinvoke <org.codehaus.groovy.tools.FileSystemCompiler: void displayHelp(org.apache.commons.cli.Options)>($r0);

     label10:
        return;

     label11:
        $i1 = staticinvoke <org.codehaus.groovy.tools.FileSystemCompiler: int checkFiles(java.lang.String[])>($r16);

        if $i1 != 0 goto label13;

        if $z5 == 0 goto label12;

        $r18 = staticinvoke <org.codehaus.groovy.tools.FileSystemCompiler: java.io.File createTempDir()>();

        $r19 = virtualinvoke $r15.<org.codehaus.groovy.control.CompilerConfiguration: java.util.Map getJointCompilationOptions()>();

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("stubDir", $r18);

     label12:
        $r17 = new org.codehaus.groovy.tools.FileSystemCompiler;

        specialinvoke $r17.<org.codehaus.groovy.tools.FileSystemCompiler: void <init>(org.codehaus.groovy.control.CompilerConfiguration)>($r15);

        virtualinvoke $r17.<org.codehaus.groovy.tools.FileSystemCompiler: void compile(java.lang.String[])>($r16);

     label13:
        goto label15;

     label14:
        $r26 := @caughtexception;

        $r27 = new org.codehaus.groovy.tools.ErrorReporter;

        specialinvoke $r27.<org.codehaus.groovy.tools.ErrorReporter: void <init>(java.lang.Throwable,boolean)>($r26, z6);

        $r28 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r27.<org.codehaus.groovy.tools.ErrorReporter: void write(java.io.PrintStream)>($r28);

     label15:
        return;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label10 with label14;
        catch java.lang.Throwable from label11 to label13 with label14;
    }

    public static org.codehaus.groovy.control.CompilerConfiguration generateCompilerConfigurationFromOptions(org.apache.commons.cli.CommandLine)
    {
        java.util.HashMap $r2;
        java.lang.String[] $r3, $r4;
        org.codehaus.groovy.control.CompilerConfiguration $r0;
        org.apache.commons.cli.CommandLine r1;
        java.lang.String $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3;

        r1 := @parameter0: org.apache.commons.cli.CommandLine;

        $r0 = new org.codehaus.groovy.control.CompilerConfiguration;

        specialinvoke $r0.<org.codehaus.groovy.control.CompilerConfiguration: void <init>()>();

        $z0 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("classpath");

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("classpath");

        virtualinvoke $r0.<org.codehaus.groovy.control.CompilerConfiguration: void setClasspath(java.lang.String)>($r7);

     label1:
        $z1 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(100);

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(char)>(100);

        virtualinvoke $r0.<org.codehaus.groovy.control.CompilerConfiguration: void setTargetDirectory(java.lang.String)>($r6);

     label2:
        $z2 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("encoding");

        if $z2 == 0 goto label3;

        $r5 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("encoding");

        virtualinvoke $r0.<org.codehaus.groovy.control.CompilerConfiguration: void setSourceEncoding(java.lang.String)>($r5);

     label3:
        $z3 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(106);

        if $z3 == 0 goto label4;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: java.lang.String[] getOptionValues(java.lang.String)>("J");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("namedValues", $r3);

        $r4 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: java.lang.String[] getOptionValues(java.lang.String)>("F");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flags", $r4);

        virtualinvoke $r0.<org.codehaus.groovy.control.CompilerConfiguration: void setJointCompilationOptions(java.util.Map)>($r2);

     label4:
        return $r0;
    }

    public static org.apache.commons.cli.Options createCompilationOptions()
    {
        org.apache.commons.cli.Options $r0;
        org.apache.commons.cli.Option $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        $r0 = new org.apache.commons.cli.Options;

        specialinvoke $r0.<org.apache.commons.cli.Options: void <init>()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("classpath");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("path");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("Specify where to find the class files.");

        $r1 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create()>();

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r1);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("sourcepath");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("path");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("Specify where to find the source files.");

        $r2 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create()>();

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r2);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("temp");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("temp");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("");

        $r3 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create()>();

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r3);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("encoding");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("encoding");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("Specify the encoding of the user class files.");

        $r4 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create()>();

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r4);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("Specify where to place generated class files.");

        $r5 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(100);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r5);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("help");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("Print a synopsis of standard options.");

        $r6 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(104);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r6);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("version");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("Print the version.");

        $r7 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(118);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r7);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("exception");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("Print stack trace on error.");

        $r8 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(101);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r8);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("jointCompilation");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("Attach javac compiler to compile .java files.");

        $r9 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(106);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r9);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("property=value");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withValueSeparator()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArgs(int)>(2);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("");

        $r10 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(java.lang.String)>("J");

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r10);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("flag");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("");

        $r11 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(java.lang.String)>("F");

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r11);

        return $r0;
    }

    public static java.io.File createTempDir() throws java.io.IOException
    {
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int i0, i1;
        java.lang.String $r10, $r13;
        boolean $z0;
        java.io.IOException $r11, $r12;
        java.io.File $r0, r14;
        java.lang.InterruptedException $r1;

        i0 = 0;

        r14 = null;

        i1 = 0;

     label01:
        if i1 >= 3 goto label12;

     label02:
        $r0 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("groovy-generated-", "-java-source");

        r14 = $r0;

        virtualinvoke $r0.<java.io.File: boolean delete()>();

        virtualinvoke $r0.<java.io.File: boolean mkdirs()>();

     label03:
        goto label12;

     label04:
        $r12 := @caughtexception;

        $r13 = virtualinvoke $r12.<java.io.IOException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("Access is denied");

        if $z0 == 0 goto label08;

        i0 = i0 + 1;

     label05:
        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

     label06:
        goto label08;

     label07:
        $r1 := @caughtexception;

     label08:
        if i1 != 2 goto label10;

        if i0 != 3 goto label09;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Access is denied.\nWe tried ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" times to create a temporary directory");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and failed each time. If you are on Windows");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" you are possibly victim to");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6325169. ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" this is no bug in Groovy.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r11;

     label09:
        throw $r12;

     label10:
        goto label11;

     label11:
        i1 = i1 + 1;

        goto label01;

     label12:
        return r14;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.InterruptedException from label05 to label06 with label07;
    }
}
