public abstract class kodkod.util.ints.AbstractSparseSequence extends java.lang.Object implements kodkod.util.ints.SparseSequence
{

    protected void <init>()
    {
        kodkod.util.ints.AbstractSparseSequence r0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean isEmpty()
    {
        int $i0;
        kodkod.util.ints.AbstractSparseSequence r0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence;

        $i0 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r1;
        kodkod.util.ints.AbstractSparseSequence r0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence: java.util.Iterator iterator(int,int)>(-2147483648, 2147483647);

        return $r1;
    }

    public kodkod.util.ints.IndexedEntry first()
    {
        java.util.Iterator $r1;
        kodkod.util.ints.AbstractSparseSequence r0;
        kodkod.util.ints.IndexedEntry $r3;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence;

        $z0 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence: java.util.Iterator iterator()>();

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (kodkod.util.ints.IndexedEntry) $r2;

     label2:
        return $r3;
    }

    public kodkod.util.ints.IndexedEntry last()
    {
        java.util.Iterator $r1;
        kodkod.util.ints.AbstractSparseSequence r0;
        kodkod.util.ints.IndexedEntry $r3;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence;

        $z0 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence: java.util.Iterator iterator(int,int)>(2147483647, -2147483648);

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (kodkod.util.ints.IndexedEntry) $r2;

     label2:
        return $r3;
    }

    public kodkod.util.ints.IndexedEntry ceil(int)
    {
        java.util.Iterator $r1;
        kodkod.util.ints.AbstractSparseSequence r0;
        kodkod.util.ints.IndexedEntry $r3;
        int i0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence: java.util.Iterator iterator(int,int)>(i0, 2147483647);

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (kodkod.util.ints.IndexedEntry) $r2;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public kodkod.util.ints.IndexedEntry floor(int)
    {
        java.util.Iterator $r1;
        kodkod.util.ints.AbstractSparseSequence r0;
        kodkod.util.ints.IndexedEntry $r3;
        int i0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence: java.util.Iterator iterator(int,int)>(i0, -2147483648);

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (kodkod.util.ints.IndexedEntry) $r2;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public kodkod.util.ints.IntSet indices()
    {
        kodkod.util.ints.AbstractSparseSequence$1 $r0;
        kodkod.util.ints.AbstractSparseSequence r1;

        r1 := @this: kodkod.util.ints.AbstractSparseSequence;

        $r0 = new kodkod.util.ints.AbstractSparseSequence$1;

        specialinvoke $r0.<kodkod.util.ints.AbstractSparseSequence$1: void <init>(kodkod.util.ints.AbstractSparseSequence)>(r1);

        return $r0;
    }

    public java.util.Collection values()
    {
        kodkod.util.ints.AbstractSparseSequence$2 $r0;
        kodkod.util.ints.AbstractSparseSequence r1;

        r1 := @this: kodkod.util.ints.AbstractSparseSequence;

        $r0 = new kodkod.util.ints.AbstractSparseSequence$2;

        specialinvoke $r0.<kodkod.util.ints.AbstractSparseSequence$2: void <init>(kodkod.util.ints.AbstractSparseSequence)>(r1);

        return $r0;
    }

    public boolean containsIndex(int)
    {
        java.util.Iterator $r1;
        kodkod.util.ints.AbstractSparseSequence r0;
        int i0;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence: java.util.Iterator iterator(int,int)>(i0, i0);

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Iterator $r1;
        kodkod.util.ints.AbstractSparseSequence r0;
        kodkod.util.ints.IndexedEntry r3;
        java.lang.Object $r2, r4, $r5;
        boolean $z0, $z1;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence;

        r4 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (kodkod.util.ints.IndexedEntry) $r2;

        $r5 = interfaceinvoke r3.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $z1 = staticinvoke <kodkod.util.ints.AbstractSparseSequence: boolean equal(java.lang.Object,java.lang.Object)>(r4, $r5);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return 0;
    }

    public kodkod.util.ints.SparseSequence clone() throws java.lang.CloneNotSupportedException
    {
        java.lang.Object $r1;
        kodkod.util.ints.SparseSequence $r2;
        kodkod.util.ints.AbstractSparseSequence r0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (kodkod.util.ints.SparseSequence) $r1;

        return $r2;
    }

    public java.lang.Object remove(int)
    {
        java.util.Iterator $r1;
        kodkod.util.ints.AbstractSparseSequence r0;
        kodkod.util.ints.IndexedEntry $r3;
        int i0;
        java.lang.Object $r2, $r4;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence: java.util.Iterator iterator(int,int)>(i0, i0);

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (kodkod.util.ints.IndexedEntry) $r2;

        $r4 = interfaceinvoke $r3.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        return $r4;

     label1:
        return null;
    }

    public void clear()
    {
        java.util.Iterator $r1;
        kodkod.util.ints.AbstractSparseSequence r0;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence: java.util.Iterator iterator()>();

        goto label2;

     label1:
        interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public java.lang.Object put(int, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        kodkod.util.ints.AbstractSparseSequence r1;
        int i0;
        java.lang.Object r2;

        r1 := @this: kodkod.util.ints.AbstractSparseSequence;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void putAll(kodkod.util.ints.SparseSequence)
    {
        java.util.Iterator $r1;
        kodkod.util.ints.SparseSequence r0;
        kodkod.util.ints.IndexedEntry r3;
        kodkod.util.ints.AbstractSparseSequence r4;
        int $i0;
        java.lang.Object $r2, $r5;
        boolean $z0;

        r4 := @this: kodkod.util.ints.AbstractSparseSequence;

        r0 := @parameter0: kodkod.util.ints.SparseSequence;

        $r1 = interfaceinvoke r0.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (kodkod.util.ints.IndexedEntry) $r2;

        $i0 = interfaceinvoke r3.<kodkod.util.ints.IndexedEntry: int index()>();

        $r5 = interfaceinvoke r3.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        virtualinvoke r4.<kodkod.util.ints.AbstractSparseSequence: java.lang.Object put(int,java.lang.Object)>($i0, $r5);

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    static boolean equal(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label2;

        if r1 != null goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

     label3:
        return $z0;
    }

    static boolean equal(kodkod.util.ints.IndexedEntry, kodkod.util.ints.IndexedEntry)
    {
        kodkod.util.ints.IndexedEntry r0, r1;
        int $i0, $i1;
        java.lang.Object $r2, $r3;
        boolean $z0;

        r0 := @parameter0: kodkod.util.ints.IndexedEntry;

        r1 := @parameter1: kodkod.util.ints.IndexedEntry;

        $i0 = interfaceinvoke r0.<kodkod.util.ints.IndexedEntry: int index()>();

        $i1 = interfaceinvoke r1.<kodkod.util.ints.IndexedEntry: int index()>();

        if $i0 != $i1 goto label1;

        $r2 = interfaceinvoke r0.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r3 = interfaceinvoke r1.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $z0 = staticinvoke <kodkod.util.ints.AbstractSparseSequence: boolean equal(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.ClassCastException $r10;
        java.lang.NullPointerException $r9;
        kodkod.util.ints.IndexedEntry $r6, $r8;
        int $i0, $i1;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3, $r4;
        kodkod.util.ints.SparseSequence r2;
        kodkod.util.ints.AbstractSparseSequence r1;
        java.lang.Object r0, $r5, $r7;

        r1 := @this: kodkod.util.ints.AbstractSparseSequence;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof kodkod.util.ints.SparseSequence;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (kodkod.util.ints.SparseSequence) r0;

        $i0 = interfaceinvoke r2.<kodkod.util.ints.SparseSequence: int size()>();

        $i1 = virtualinvoke r1.<kodkod.util.ints.AbstractSparseSequence: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $r3 = virtualinvoke r1.<kodkod.util.ints.AbstractSparseSequence: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke r2.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label6;

     label4:
        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (kodkod.util.ints.IndexedEntry) $r5;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (kodkod.util.ints.IndexedEntry) $r7;

        $z2 = staticinvoke <kodkod.util.ints.AbstractSparseSequence: boolean equal(kodkod.util.ints.IndexedEntry,kodkod.util.ints.IndexedEntry)>($r6, $r8);

        if $z2 != 0 goto label6;

     label5:
        return 0;

     label6:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label4;

        goto label9;

     label7:
        $r10 := @caughtexception;

        return 0;

     label8:
        $r9 := @caughtexception;

        return 0;

     label9:
        return 1;

        catch java.lang.ClassCastException from label3 to label5 with label7;
        catch java.lang.ClassCastException from label6 to label7 with label7;
        catch java.lang.NullPointerException from label3 to label5 with label8;
        catch java.lang.NullPointerException from label6 to label7 with label8;
    }

    static int hashCode(kodkod.util.ints.IndexedEntry)
    {
        kodkod.util.ints.IndexedEntry r0;
        int $i0, $i1, $i2;
        java.lang.Object $r1, $r2;

        r0 := @parameter0: kodkod.util.ints.IndexedEntry;

        $i0 = interfaceinvoke r0.<kodkod.util.ints.IndexedEntry: int index()>();

        $r1 = interfaceinvoke r0.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        if $r1 != null goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $r2 = interfaceinvoke r0.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

     label2:
        $i1 = $i0 ^ $i2;

        return $i1;
    }

    public int hashCode()
    {
        java.util.Iterator $r1;
        kodkod.util.ints.AbstractSparseSequence r0;
        kodkod.util.ints.IndexedEntry r3;
        int $i0, i1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence;

        i1 = 0;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (kodkod.util.ints.IndexedEntry) $r2;

        $i0 = staticinvoke <kodkod.util.ints.AbstractSparseSequence: int hashCode(kodkod.util.ints.IndexedEntry)>(r3);

        i1 = i1 + $i0;

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return i1;
    }

    public java.lang.String toString()
    {
        java.util.Iterator $r2;
        kodkod.util.ints.AbstractSparseSequence r1;
        kodkod.util.ints.IndexedEntry r4;
        int $i0;
        java.lang.StringBuilder $r0;
        java.lang.Object $r3, $r5, $r6;
        java.lang.String $r7;
        boolean $z0, z1;

        r1 := @this: kodkod.util.ints.AbstractSparseSequence;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r2 = virtualinvoke r1.<kodkod.util.ints.AbstractSparseSequence: java.util.Iterator iterator()>();

        z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        goto label4;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (kodkod.util.ints.IndexedEntry) $r3;

        $i0 = interfaceinvoke r4.<kodkod.util.ints.IndexedEntry: int index()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r5 = interfaceinvoke r4.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        if $r5 != r1 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(this sequence)");

        goto label3;

     label2:
        $r6 = interfaceinvoke r4.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

     label3:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        z1 = $z0;

        if $z0 == 0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label4:
        if z1 != 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    protected volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.SparseSequence $r1;
        kodkod.util.ints.AbstractSparseSequence r0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence;

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractSparseSequence: kodkod.util.ints.SparseSequence clone()>();

        return $r1;
    }
}
