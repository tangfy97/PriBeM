public class org.apache.jena.query.text.TextDocProducerEntities extends com.hp.hpl.jena.sparql.core.DatasetChangesBatched implements org.apache.jena.query.text.TextDocProducer
{
    private static org.slf4j.Logger log;
    private final org.apache.jena.query.text.EntityDefinition defn;
    private final org.apache.jena.query.text.TextIndex indexer;
    private boolean started;
    static org.apache.jena.atlas.iterator.Transform QuadsToTriples;

    public void <init>(org.apache.jena.query.text.EntityDefinition, org.apache.jena.query.text.TextIndex)
    {
        org.apache.jena.query.text.TextDocProducerEntities r0;
        org.apache.jena.query.text.EntityDefinition r1;
        org.apache.jena.query.text.TextIndex r2;

        r0 := @this: org.apache.jena.query.text.TextDocProducerEntities;

        r1 := @parameter0: org.apache.jena.query.text.EntityDefinition;

        r2 := @parameter1: org.apache.jena.query.text.TextIndex;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetChangesBatched: void <init>()>();

        r0.<org.apache.jena.query.text.TextDocProducerEntities: boolean started> = 0;

        r0.<org.apache.jena.query.text.TextDocProducerEntities: org.apache.jena.query.text.EntityDefinition defn> = r1;

        r0.<org.apache.jena.query.text.TextDocProducerEntities: org.apache.jena.query.text.TextIndex indexer> = r2;

        return;
    }

    protected void startBatched()
    {
        org.apache.jena.query.text.TextDocProducerEntities r0;
        org.apache.jena.query.text.TextIndex $r1;

        r0 := @this: org.apache.jena.query.text.TextDocProducerEntities;

        $r1 = r0.<org.apache.jena.query.text.TextDocProducerEntities: org.apache.jena.query.text.TextIndex indexer>;

        interfaceinvoke $r1.<org.apache.jena.query.text.TextIndex: void startIndexing()>();

        r0.<org.apache.jena.query.text.TextDocProducerEntities: boolean started> = 1;

        return;
    }

    protected void finishBatched()
    {
        org.apache.jena.query.text.TextDocProducerEntities r0;
        org.apache.jena.query.text.TextIndex $r1;

        r0 := @this: org.apache.jena.query.text.TextDocProducerEntities;

        $r1 = r0.<org.apache.jena.query.text.TextDocProducerEntities: org.apache.jena.query.text.TextIndex indexer>;

        interfaceinvoke $r1.<org.apache.jena.query.text.TextIndex: void finishIndexing()>();

        return;
    }

    protected void dispatch(com.hp.hpl.jena.sparql.core.QuadAction, java.util.List)
    {
        java.lang.IllegalStateException $r8;
        com.hp.hpl.jena.graph.Node $r6;
        com.hp.hpl.jena.sparql.core.Quad r5;
        java.util.List r3, $r7;
        com.hp.hpl.jena.sparql.core.QuadAction r1, $r2;
        int $i0;
        java.lang.Object $r4;
        org.apache.jena.query.text.TextDocProducerEntities r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.jena.query.text.TextDocProducerEntities;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.QuadAction;

        r3 := @parameter1: java.util.List;

        $z0 = r0.<org.apache.jena.query.text.TextDocProducerEntities: boolean started>;

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not started");

        throw $r8;

     label1:
        $r2 = <com.hp.hpl.jena.sparql.core.QuadAction: com.hp.hpl.jena.sparql.core.QuadAction ADD>;

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.QuadAction: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label2;

        return;

     label2:
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 != 0 goto label3;

        return;

     label3:
        $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        r5 = (com.hp.hpl.jena.sparql.core.Quad) $r4;

        virtualinvoke r5.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r6 = virtualinvoke r5.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r7 = staticinvoke <org.apache.jena.query.text.TextDocProducerEntities: java.util.List quadsToTriples(java.util.List)>(r3);

        specialinvoke r0.<org.apache.jena.query.text.TextDocProducerEntities: void docTriples(com.hp.hpl.jena.graph.Node,java.util.List)>($r6, $r7);

        return;
    }

    private void docEntity(com.hp.hpl.jena.graph.Node, java.util.List)
    {
        org.apache.jena.query.text.EntityDefinition $r9;
        com.hp.hpl.jena.graph.Node r0, $r8, $r11;
        org.apache.jena.query.text.TextIndex $r5;
        org.apache.jena.query.text.Entity $r1;
        org.apache.jena.query.text.TextDocProducerEntities r4;
        java.lang.String $r10, $r17, $r19, $r20, r21;
        boolean $z0, $z1, $z2, $z3;
        org.slf4j.Logger $r13;
        java.util.Iterator $r3;
        com.hp.hpl.jena.graph.Triple r7;
        java.util.List r2;
        java.lang.Object $r6;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r18;

        r4 := @this: org.apache.jena.query.text.TextDocProducerEntities;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: java.util.List;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 == 0 goto label1;

        $r20 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        goto label2;

     label1:
        $r20 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getBlankNodeLabel()>();

     label2:
        $r1 = new org.apache.jena.query.text.Entity;

        specialinvoke $r1.<org.apache.jena.query.text.Entity: void <init>(java.lang.String)>($r20);

        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Triple) $r6;

        $r8 = virtualinvoke r7.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r9 = r4.<org.apache.jena.query.text.TextDocProducerEntities: org.apache.jena.query.text.EntityDefinition defn>;

        $r10 = virtualinvoke $r9.<org.apache.jena.query.text.EntityDefinition: java.lang.String getField(com.hp.hpl.jena.graph.Node)>($r8);

        if $r10 != null goto label4;

        goto label3;

     label4:
        $r11 = virtualinvoke r7.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z1 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 == 0 goto label5;

        r21 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        goto label7;

     label5:
        $z2 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label6;

        r21 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        goto label7;

     label6:
        $r13 = <org.apache.jena.query.text.TextDocProducerEntities: org.slf4j.Logger log>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a literal value for mapped field-predicate: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" :: ");

        $r17 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForString(java.lang.String)>($r10);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.slf4j.Logger: void warn(java.lang.String)>($r19);

        goto label3;

     label7:
        virtualinvoke $r1.<org.apache.jena.query.text.Entity: void put(java.lang.String,java.lang.Object)>($r10, r21);

        goto label3;

     label8:
        $r5 = r4.<org.apache.jena.query.text.TextDocProducerEntities: org.apache.jena.query.text.TextIndex indexer>;

        interfaceinvoke $r5.<org.apache.jena.query.text.TextIndex: void addEntity(org.apache.jena.query.text.Entity)>($r1);

        return;
    }

    private void docTriples(com.hp.hpl.jena.graph.Node, java.util.List)
    {
        org.apache.jena.query.text.EntityDefinition $r9;
        com.hp.hpl.jena.graph.Node r0, $r7, $r11;
        org.apache.jena.query.text.TextIndex $r13;
        org.apache.jena.query.text.Entity $r6;
        java.lang.String r1, $r10, $r12, $r19, $r21, $r22;
        org.apache.jena.query.text.TextDocProducerEntities r8;
        boolean $z0, $z1, $z2;
        org.slf4j.Logger $r15;
        java.util.Iterator $r3;
        com.hp.hpl.jena.graph.Triple r5;
        java.util.List r2;
        java.lang.Object $r4;
        java.lang.StringBuilder $r14, $r16, $r17, $r18, $r20;

        r8 := @this: org.apache.jena.query.text.TextDocProducerEntities;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: java.util.List;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 == 0 goto label1;

        $r22 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        goto label2;

     label1:
        $r22 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getBlankNodeLabel()>();

     label2:
        r1 = $r22;

        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.graph.Triple) $r4;

        $r6 = new org.apache.jena.query.text.Entity;

        specialinvoke $r6.<org.apache.jena.query.text.Entity: void <init>(java.lang.String)>(r1);

        $r7 = virtualinvoke r5.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r9 = r8.<org.apache.jena.query.text.TextDocProducerEntities: org.apache.jena.query.text.EntityDefinition defn>;

        $r10 = virtualinvoke $r9.<org.apache.jena.query.text.EntityDefinition: java.lang.String getField(com.hp.hpl.jena.graph.Node)>($r7);

        if $r10 != null goto label4;

        goto label3;

     label4:
        $r11 = virtualinvoke r5.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z1 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 != 0 goto label5;

        $r15 = <org.apache.jena.query.text.TextDocProducerEntities: org.slf4j.Logger log>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a literal value for mapped field-predicate: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" :: ");

        $r19 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForString(java.lang.String)>($r10);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.slf4j.Logger: void warn(java.lang.String)>($r21);

        goto label3;

     label5:
        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        virtualinvoke $r6.<org.apache.jena.query.text.Entity: void put(java.lang.String,java.lang.Object)>($r10, $r12);

        $r13 = r8.<org.apache.jena.query.text.TextDocProducerEntities: org.apache.jena.query.text.TextIndex indexer>;

        interfaceinvoke $r13.<org.apache.jena.query.text.TextIndex: void addEntity(org.apache.jena.query.text.Entity)>($r6);

        goto label3;

     label6:
        return;
    }

    private static java.util.List quadsToTriples(java.util.List)
    {
        org.apache.jena.atlas.iterator.Transform $r1;
        java.util.List r0, $r2;

        r0 := @parameter0: java.util.List;

        $r1 = <org.apache.jena.query.text.TextDocProducerEntities: org.apache.jena.atlas.iterator.Transform QuadsToTriples>;

        $r2 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.List map(java.util.List,org.apache.jena.atlas.iterator.Transform)>(r0, $r1);

        return $r2;
    }

    static void <clinit>()
    {
        org.apache.jena.query.text.TextDocProducerEntities$1 $r1;
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jena/query/text/TextDocProducer;");

        <org.apache.jena.query.text.TextDocProducerEntities: org.slf4j.Logger log> = $r0;

        $r1 = new org.apache.jena.query.text.TextDocProducerEntities$1;

        specialinvoke $r1.<org.apache.jena.query.text.TextDocProducerEntities$1: void <init>()>();

        <org.apache.jena.query.text.TextDocProducerEntities: org.apache.jena.atlas.iterator.Transform QuadsToTriples> = $r1;

        return;
    }
}
