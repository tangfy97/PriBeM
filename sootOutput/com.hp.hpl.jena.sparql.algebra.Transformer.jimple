public class com.hp.hpl.jena.sparql.algebra.Transformer extends java.lang.Object
{
    private static com.hp.hpl.jena.sparql.algebra.Transformer singleton;

    public static com.hp.hpl.jena.sparql.algebra.Transformer get()
    {
        com.hp.hpl.jena.sparql.algebra.Transformer $r0;

        $r0 = <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Transformer singleton>;

        return $r0;
    }

    public static void set(com.hp.hpl.jena.sparql.algebra.Transformer)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transformer;

        <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Transformer singleton> = r0;

        return;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer $r0;
        com.hp.hpl.jena.sparql.algebra.Transform r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Transformer get()>();

        $r3 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transformation(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r1, r2, null, null);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.expr.ExprTransform, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer $r0;
        com.hp.hpl.jena.sparql.expr.ExprTransform r2;
        com.hp.hpl.jena.sparql.algebra.Transform r1;
        com.hp.hpl.jena.sparql.algebra.Op r3, $r4;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprTransform;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Transformer get()>();

        $r4 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transformation(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r1, r2, r3, null, null);

        return $r4;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.OpVisitor, com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer $r0;
        com.hp.hpl.jena.sparql.algebra.Transform r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r5;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r3, r4;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        r4 := @parameter3: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Transformer get()>();

        $r5 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transformation(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r1, r2, r3, r4);

        return $r5;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.expr.ExprTransform, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.OpVisitor, com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer $r0;
        com.hp.hpl.jena.sparql.expr.ExprTransform r2;
        com.hp.hpl.jena.sparql.algebra.Transform r1;
        com.hp.hpl.jena.sparql.algebra.Op r3, $r6;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r4, r5;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprTransform;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        r4 := @parameter3: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        r5 := @parameter4: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Transformer get()>();

        $r6 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transformation(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r1, r2, r3, r4, r5);

        return $r6;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op transformSkipService(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        com.hp.hpl.jena.sparql.algebra.Op r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transformSkipService(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r0, r1, null, null);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op transformSkipService(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.expr.ExprTransform, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransform r1;
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprTransform;

        r2 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transformSkipService(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r0, r1, r2, null, null);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op transformSkipService(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.OpVisitor, com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer$TransformSkipService $r0;
        com.hp.hpl.jena.sparql.algebra.Transform r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r5;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r3, r4;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        r4 := @parameter3: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        $r0 = new com.hp.hpl.jena.sparql.algebra.Transformer$TransformSkipService;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.Transformer$TransformSkipService: void <init>(com.hp.hpl.jena.sparql.algebra.Transform)>(r1);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r0, r2, r3, r4);

        return $r5;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op transformSkipService(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.expr.ExprTransform, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.OpVisitor, com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransform r2;
        com.hp.hpl.jena.sparql.algebra.Transformer$TransformSkipService $r0;
        com.hp.hpl.jena.sparql.algebra.Transform r1;
        com.hp.hpl.jena.sparql.algebra.Op r3, $r6;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r4, r5;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprTransform;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        r4 := @parameter3: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        r5 := @parameter4: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        $r0 = new com.hp.hpl.jena.sparql.algebra.Transformer$TransformSkipService;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.Transformer$TransformSkipService: void <init>(com.hp.hpl.jena.sparql.algebra.Transform)>(r1);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r0, r2, r3, r4, r5);

        return $r6;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op transformOne(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer$OpTransformApplyOne $r0;
        com.hp.hpl.jena.sparql.algebra.Transform r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.algebra.Transformer$OpTransformApplyOne;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.Transformer$OpTransformApplyOne: void <init>(com.hp.hpl.jena.sparql.algebra.Transform)>(r1);

        interfaceinvoke r2.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r0);

        $r3 = $r0.<com.hp.hpl.jena.sparql.algebra.Transformer$OpTransformApplyOne: com.hp.hpl.jena.sparql.algebra.Op result>;

        return $r3;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op transformation(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.OpVisitor, com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer r4;
        com.hp.hpl.jena.sparql.algebra.Transform r1;
        com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform $r0;
        com.hp.hpl.jena.sparql.algebra.Op r5, $r6;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r2, r3;

        r4 := @this: com.hp.hpl.jena.sparql.algebra.Transformer;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r5 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter2: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        r3 := @parameter3: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        $r0 = new com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.optimize.ExprTransformApplyTransform: void <init>(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r1, r2, r3);

        $r6 = virtualinvoke r4.<com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transformation(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r1, $r0, r5, r2, r3);

        return $r6;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op transformation(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.expr.ExprTransform, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.OpVisitor, com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor $r0;
        com.hp.hpl.jena.sparql.expr.ExprTransform r2;
        com.hp.hpl.jena.sparql.algebra.Transformer r3;
        com.hp.hpl.jena.sparql.algebra.Transform r1;
        com.hp.hpl.jena.sparql.algebra.Op r4, $r7;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r5, r6;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.Transformer;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprTransform;

        r4 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        r5 := @parameter3: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        r6 := @parameter4: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        $r0 = new com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: void <init>(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.expr.ExprTransform)>(r1, r2);

        $r7 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transformation(com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r0, r4, r5, r6);

        return $r7;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op transformation(com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.OpVisitor, com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer r1;
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r2;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r5;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r3, r4;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.Transformer;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r0 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        r4 := @parameter3: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        if r0 != null goto label1;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r1, "Attempt to transform a null Op - ignored");

        return r0;

     label1:
        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op applyTransformation(com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r2, r0, r3, r4);

        return $r5;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op applyTransformation(com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.OpVisitor, com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer r5;
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r1;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r4;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r2, r3;

        r5 := @this: com.hp.hpl.jena.sparql.algebra.Transformer;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r0 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter2: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        r3 := @parameter3: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        staticinvoke <com.hp.hpl.jena.sparql.algebra.OpWalker: void walk(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r0, r1, r2, r3);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.algebra.Op result()>();

        return $r4;
    }

    protected void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.Transformer r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.Transformer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.algebra.Transformer $r0;

        $r0 = new com.hp.hpl.jena.sparql.algebra.Transformer;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.Transformer: void <init>()>();

        <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Transformer singleton> = $r0;

        return;
    }
}
