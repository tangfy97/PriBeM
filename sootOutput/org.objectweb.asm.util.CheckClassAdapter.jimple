public class org.objectweb.asm.util.CheckClassAdapter extends org.objectweb.asm.ClassVisitor
{
    private int version;
    private boolean start;
    private boolean source;
    private boolean outer;
    private boolean end;
    private java.util.Map labels;
    private boolean checkDataFlow;

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.io.PrintWriter $r4;
        java.io.PrintStream $r5, $r9, $r10;
        java.lang.String[] r0;
        java.io.FileInputStream $r7;
        org.objectweb.asm.ClassReader $r2, $r6, r11;
        int $i0;
        java.lang.String $r1, $r3, $r8;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 == 1 goto label1;

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Verifies the given class.");

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Usage: CheckClassAdapter <fully qualified class name or class file name>");

        return;

     label1:
        $r1 = r0[0];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        if $z0 == 0 goto label2;

        $r6 = new org.objectweb.asm.ClassReader;

        $r7 = new java.io.FileInputStream;

        $r8 = r0[0];

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.lang.String)>($r8);

        specialinvoke $r6.<org.objectweb.asm.ClassReader: void <init>(java.io.InputStream)>($r7);

        r11 = $r6;

        goto label3;

     label2:
        $r2 = new org.objectweb.asm.ClassReader;

        $r3 = r0[0];

        specialinvoke $r2.<org.objectweb.asm.ClassReader: void <init>(java.lang.String)>($r3);

        r11 = $r2;

     label3:
        $r4 = new java.io.PrintWriter;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        specialinvoke $r4.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r5);

        staticinvoke <org.objectweb.asm.util.CheckClassAdapter: void verify(org.objectweb.asm.ClassReader,boolean,java.io.PrintWriter)>(r11, 0, $r4);

        return;
    }

    public static void verify(org.objectweb.asm.ClassReader, java.lang.ClassLoader, boolean, java.io.PrintWriter)
    {
        org.objectweb.asm.Type r5, $r14, $r21, $r24;
        boolean z0, $z1, $z2;
        java.io.PrintWriter r9;
        java.lang.Exception $r23;
        java.util.List $r7, $r22;
        org.objectweb.asm.ClassReader r1;
        org.objectweb.asm.tree.ClassNode $r0;
        java.lang.ClassLoader r16;
        java.util.ArrayList $r6;
        org.objectweb.asm.tree.analysis.Analyzer $r15;
        org.objectweb.asm.tree.MethodNode r11;
        int $i0, $i1, $i2, i3;
        java.lang.String $r3, $r4, $r13, $r17, $r19, $r20;
        java.util.Iterator $r8;
        org.objectweb.asm.util.CheckClassAdapter $r2;
        org.objectweb.asm.tree.analysis.SimpleVerifier $r12;
        java.lang.Object $r10, $r18;

        r1 := @parameter0: org.objectweb.asm.ClassReader;

        r16 := @parameter1: java.lang.ClassLoader;

        z0 := @parameter2: boolean;

        r9 := @parameter3: java.io.PrintWriter;

        $r0 = new org.objectweb.asm.tree.ClassNode;

        specialinvoke $r0.<org.objectweb.asm.tree.ClassNode: void <init>()>();

        $r2 = new org.objectweb.asm.util.CheckClassAdapter;

        specialinvoke $r2.<org.objectweb.asm.util.CheckClassAdapter: void <init>(org.objectweb.asm.ClassVisitor,boolean)>($r0, 0);

        virtualinvoke r1.<org.objectweb.asm.ClassReader: void accept(org.objectweb.asm.ClassVisitor,int)>($r2, 2);

        $r3 = $r0.<org.objectweb.asm.tree.ClassNode: java.lang.String superName>;

        if $r3 != null goto label01;

        $r24 = null;

        goto label02;

     label01:
        $r4 = $r0.<org.objectweb.asm.tree.ClassNode: java.lang.String superName>;

        $r24 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>($r4);

     label02:
        r5 = $r24;

        $r22 = $r0.<org.objectweb.asm.tree.ClassNode: java.util.List methods>;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = $r0.<org.objectweb.asm.tree.ClassNode: java.util.List interfaces>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r18 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.lang.String) $r18;

        $r20 = virtualinvoke $r19.<java.lang.String: java.lang.String toString()>();

        $r21 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>($r20);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r21);

        goto label03;

     label04:
        i3 = 0;

     label05:
        $i0 = interfaceinvoke $r22.<java.util.List: int size()>();

        if i3 >= $i0 goto label14;

        $r10 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(i3);

        r11 = (org.objectweb.asm.tree.MethodNode) $r10;

        $r12 = new org.objectweb.asm.tree.analysis.SimpleVerifier;

        $r13 = $r0.<org.objectweb.asm.tree.ClassNode: java.lang.String name>;

        $r14 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>($r13);

        $i1 = $r0.<org.objectweb.asm.tree.ClassNode: int access>;

        $i2 = $i1 & 512;

        if $i2 == 0 goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        specialinvoke $r12.<org.objectweb.asm.tree.analysis.SimpleVerifier: void <init>(org.objectweb.asm.Type,org.objectweb.asm.Type,java.util.List,boolean)>($r14, r5, $r6, $z2);

        $r15 = new org.objectweb.asm.tree.analysis.Analyzer;

        specialinvoke $r15.<org.objectweb.asm.tree.analysis.Analyzer: void <init>(org.objectweb.asm.tree.analysis.Interpreter)>($r12);

        if r16 == null goto label08;

        virtualinvoke $r12.<org.objectweb.asm.tree.analysis.SimpleVerifier: void setClassLoader(java.lang.ClassLoader)>(r16);

     label08:
        $r17 = $r0.<org.objectweb.asm.tree.ClassNode: java.lang.String name>;

        virtualinvoke $r15.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame[] analyze(java.lang.String,org.objectweb.asm.tree.MethodNode)>($r17, r11);

        if z0 != 0 goto label10;

     label09:
        goto label13;

     label10:
        goto label12;

     label11:
        $r23 := @caughtexception;

        virtualinvoke $r23.<java.lang.Exception: void printStackTrace(java.io.PrintWriter)>(r9);

     label12:
        staticinvoke <org.objectweb.asm.util.CheckClassAdapter: void printAnalyzerResult(org.objectweb.asm.tree.MethodNode,org.objectweb.asm.tree.analysis.Analyzer,java.io.PrintWriter)>(r11, $r15, r9);

     label13:
        i3 = i3 + 1;

        goto label05;

     label14:
        virtualinvoke r9.<java.io.PrintWriter: void flush()>();

        return;

        catch java.lang.Exception from label08 to label09 with label11;
    }

    public static void verify(org.objectweb.asm.ClassReader, boolean, java.io.PrintWriter)
    {
        java.io.PrintWriter r1;
        org.objectweb.asm.ClassReader r0;
        boolean z0;

        r0 := @parameter0: org.objectweb.asm.ClassReader;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.io.PrintWriter;

        staticinvoke <org.objectweb.asm.util.CheckClassAdapter: void verify(org.objectweb.asm.ClassReader,java.lang.ClassLoader,boolean,java.io.PrintWriter)>(r0, null, z0, r1);

        return;
    }

    static void printAnalyzerResult(org.objectweb.asm.tree.MethodNode, org.objectweb.asm.tree.analysis.Analyzer, java.io.PrintWriter)
    {
        org.objectweb.asm.tree.analysis.Frame r27;
        org.objectweb.asm.tree.analysis.Frame[] $r1;
        java.io.PrintWriter r4;
        java.lang.StringBuilder $r5, $r8, $r10, $r17, $r18, $r22, $r30, $r31, $r32, $r33, $r37;
        org.objectweb.asm.util.Textifier $r2;
        org.objectweb.asm.util.TraceMethodVisitor $r3;
        org.objectweb.asm.tree.analysis.Analyzer r0;
        java.lang.StringBuffer $r26, $r43, $r48;
        java.lang.String $r7, $r9, $r11, $r23, $r28, $r29, $r38, $r41, $r42, $r46, $r47;
        org.objectweb.asm.tree.InsnList $r12, $r24;
        org.objectweb.asm.tree.analysis.Value $r39, $r44;
        java.util.List $r13, $r14, $r19, $r20, $r34, $r35;
        org.objectweb.asm.tree.TryCatchBlockNode $r16;
        org.objectweb.asm.tree.MethodNode r6;
        org.objectweb.asm.tree.analysis.BasicValue $r40, $r45;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i16, i17;
        org.objectweb.asm.tree.AbstractInsnNode $r25;
        java.lang.Object $r15, $r21, $r36;

        r6 := @parameter0: org.objectweb.asm.tree.MethodNode;

        r0 := @parameter1: org.objectweb.asm.tree.analysis.Analyzer;

        r4 := @parameter2: java.io.PrintWriter;

        $r1 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame[] getFrames()>();

        $r2 = new org.objectweb.asm.util.Textifier;

        specialinvoke $r2.<org.objectweb.asm.util.Textifier: void <init>()>();

        $r3 = new org.objectweb.asm.util.TraceMethodVisitor;

        specialinvoke $r3.<org.objectweb.asm.util.TraceMethodVisitor: void <init>(org.objectweb.asm.util.Printer)>($r2);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = r6.<org.objectweb.asm.tree.MethodNode: java.lang.String name>;

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = r6.<org.objectweb.asm.tree.MethodNode: java.lang.String desc>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        i9 = 0;

     label01:
        $r12 = r6.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $i0 = virtualinvoke $r12.<org.objectweb.asm.tree.InsnList: int size()>();

        if i9 >= $i0 goto label08;

        $r24 = r6.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r25 = virtualinvoke $r24.<org.objectweb.asm.tree.InsnList: org.objectweb.asm.tree.AbstractInsnNode get(int)>(i9);

        virtualinvoke $r25.<org.objectweb.asm.tree.AbstractInsnNode: void accept(org.objectweb.asm.MethodVisitor)>($r3);

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        r27 = $r1[i9];

        if r27 != null goto label02;

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(63);

        goto label06;

     label02:
        i10 = 0;

     label03:
        $i4 = virtualinvoke r27.<org.objectweb.asm.tree.analysis.Frame: int getLocals()>();

        if i10 >= $i4 goto label04;

        $r44 = virtualinvoke r27.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value getLocal(int)>(i10);

        $r45 = (org.objectweb.asm.tree.analysis.BasicValue) $r44;

        $r46 = virtualinvoke $r45.<org.objectweb.asm.tree.analysis.BasicValue: java.lang.String toString()>();

        $r47 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: java.lang.String getShortName(java.lang.String)>($r46);

        $r48 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r47);

        virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i10 = i10 + 1;

        goto label03;

     label04:
        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        i11 = 0;

     label05:
        $i5 = virtualinvoke r27.<org.objectweb.asm.tree.analysis.Frame: int getStackSize()>();

        if i11 >= $i5 goto label06;

        $r39 = virtualinvoke r27.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Value getStack(int)>(i11);

        $r40 = (org.objectweb.asm.tree.analysis.BasicValue) $r39;

        $r41 = virtualinvoke $r40.<org.objectweb.asm.tree.analysis.BasicValue: java.lang.String toString()>();

        $r42 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: java.lang.String getShortName(java.lang.String)>($r41);

        $r43 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r42);

        virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i11 = i11 + 1;

        goto label05;

     label06:
        $i12 = virtualinvoke $r26.<java.lang.StringBuffer: int length()>();

        $i13 = r6.<org.objectweb.asm.tree.MethodNode: int maxStack>;

        $i14 = r6.<org.objectweb.asm.tree.MethodNode: int maxLocals>;

        $i15 = $i13 + $i14;

        $i16 = $i15 + 1;

        if $i12 >= $i16 goto label07;

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        goto label06;

     label07:
        $i6 = i9 + 100000;

        $r28 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i6);

        $r29 = virtualinvoke $r28.<java.lang.String: java.lang.String substring(int)>(1);

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>($r29);

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r35 = $r2.<org.objectweb.asm.util.Textifier: java.util.List text>;

        $r34 = $r2.<org.objectweb.asm.util.Textifier: java.util.List text>;

        $i7 = interfaceinvoke $r34.<java.util.List: int size()>();

        $i8 = $i7 - 1;

        $r36 = interfaceinvoke $r35.<java.util.List: java.lang.Object get(int)>($i8);

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>($r38);

        i9 = i9 + 1;

        goto label01;

     label08:
        i17 = 0;

     label09:
        $r13 = r6.<org.objectweb.asm.tree.MethodNode: java.util.List tryCatchBlocks>;

        $i1 = interfaceinvoke $r13.<java.util.List: int size()>();

        if i17 >= $i1 goto label10;

        $r14 = r6.<org.objectweb.asm.tree.MethodNode: java.util.List tryCatchBlocks>;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i17);

        $r16 = (org.objectweb.asm.tree.TryCatchBlockNode) $r15;

        virtualinvoke $r16.<org.objectweb.asm.tree.TryCatchBlockNode: void accept(org.objectweb.asm.MethodVisitor)>($r3);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r20 = $r2.<org.objectweb.asm.util.Textifier: java.util.List text>;

        $r19 = $r2.<org.objectweb.asm.util.Textifier: java.util.List text>;

        $i2 = interfaceinvoke $r19.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object get(int)>($i3);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>($r23);

        i17 = i17 + 1;

        goto label09;

     label10:
        virtualinvoke r4.<java.io.PrintWriter: void println()>();

        return;
    }

    private static java.lang.String getShortName(java.lang.String)
    {
        char $c3;
        int $i0, $i1, $i2, $i4, i5, $i6, $i8, $i10;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        i5 = $i1;

        $i2 = $i1 - 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $i6 = (int) $c3;

        if $i6 != 59 goto label1;

        $i8 = (int) -1;

        i5 = $i1 + $i8;

     label1:
        $i10 = (int) -1;

        if $i0 != $i10 goto label2;

        $r1 = r0;

        goto label3;

     label2:
        $i4 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i4, i5);

     label3:
        return $r1;
    }

    public void <init>(org.objectweb.asm.ClassVisitor)
    {
        org.objectweb.asm.util.CheckClassAdapter r0;
        org.objectweb.asm.ClassVisitor r1;

        r0 := @this: org.objectweb.asm.util.CheckClassAdapter;

        r1 := @parameter0: org.objectweb.asm.ClassVisitor;

        specialinvoke r0.<org.objectweb.asm.util.CheckClassAdapter: void <init>(org.objectweb.asm.ClassVisitor,boolean)>(r1, 1);

        return;
    }

    public void <init>(org.objectweb.asm.ClassVisitor, boolean)
    {
        org.objectweb.asm.util.CheckClassAdapter r0;
        org.objectweb.asm.ClassVisitor r1;
        boolean z0;

        r0 := @this: org.objectweb.asm.util.CheckClassAdapter;

        r1 := @parameter0: org.objectweb.asm.ClassVisitor;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.objectweb.asm.util.CheckClassAdapter: void <init>(int,org.objectweb.asm.ClassVisitor,boolean)>(262144, r1, z0);

        return;
    }

    protected void <init>(int, org.objectweb.asm.ClassVisitor, boolean)
    {
        int i0;
        java.util.HashMap $r2;
        org.objectweb.asm.util.CheckClassAdapter r0;
        org.objectweb.asm.ClassVisitor r1;
        boolean z0;

        r0 := @this: org.objectweb.asm.util.CheckClassAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: org.objectweb.asm.ClassVisitor;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.objectweb.asm.ClassVisitor: void <init>(int,org.objectweb.asm.ClassVisitor)>(i0, r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.objectweb.asm.util.CheckClassAdapter: java.util.Map labels> = $r2;

        r0.<org.objectweb.asm.util.CheckClassAdapter: boolean checkDataFlow> = z0;

        return;
    }

    public void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        java.lang.IllegalStateException $r13;
        java.lang.String[] r4;
        int i0, $i1, i2, $i3, i4;
        java.lang.String r1, r2, r3, $r6, $r9, $r10, $r14;
        boolean $z0, $z1, $z2, $z3;
        org.objectweb.asm.util.CheckClassAdapter r0;
        java.lang.IllegalArgumentException $r11, $r12;
        java.lang.StringBuilder $r5, $r7, $r8;

        r0 := @this: org.objectweb.asm.util.CheckClassAdapter;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String[];

        $z0 = r0.<org.objectweb.asm.util.CheckClassAdapter: boolean start>;

        if $z0 == 0 goto label1;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("visit must be called only once");

        throw $r13;

     label1:
        r0.<org.objectweb.asm.util.CheckClassAdapter: boolean start> = 1;

        specialinvoke r0.<org.objectweb.asm.util.CheckClassAdapter: void checkState()>();

        staticinvoke <org.objectweb.asm.util.CheckClassAdapter: void checkAccess(int,int)>(i0, 423473);

        if r1 == null goto label2;

        $z2 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("package-info");

        if $z2 != 0 goto label3;

     label2:
        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkInternalName(java.lang.String,java.lang.String)>(r1, "class name");

     label3:
        $r14 = "java/lang/Object";

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label4;

        if r2 == null goto label5;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The super class name of the Object class must be \'null\'");

        throw $r12;

     label4:
        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkInternalName(java.lang.String,java.lang.String)>(r2, "super class name");

     label5:
        if r3 == null goto label6;

        staticinvoke <org.objectweb.asm.util.CheckClassAdapter: void checkClassSignature(java.lang.String)>(r3);

     label6:
        $i1 = i0 & 512;

        if $i1 == 0 goto label7;

        $r10 = "java/lang/Object";

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 != 0 goto label7;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The super class name of interfaces must be \'java/lang/Object\'");

        throw $r11;

     label7:
        if r4 == null goto label9;

        i4 = 0;

     label8:
        $i3 = lengthof r4;

        if i4 >= $i3 goto label9;

        $r6 = r4[i4];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("interface name at index ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkInternalName(java.lang.String,java.lang.String)>($r6, $r9);

        i4 = i4 + 1;

        goto label8;

     label9:
        r0.<org.objectweb.asm.util.CheckClassAdapter: int version> = i2;

        specialinvoke r0.<org.objectweb.asm.ClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i2, i0, r1, r3, r2, r4);

        return;
    }

    public void visitSource(java.lang.String, java.lang.String)
    {
        java.lang.IllegalStateException $r3;
        java.lang.String r1, r2;
        org.objectweb.asm.util.CheckClassAdapter r0;
        boolean $z0;

        r0 := @this: org.objectweb.asm.util.CheckClassAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.objectweb.asm.util.CheckClassAdapter: void checkState()>();

        $z0 = r0.<org.objectweb.asm.util.CheckClassAdapter: boolean source>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("visitSource can be called only once.");

        throw $r3;

     label1:
        r0.<org.objectweb.asm.util.CheckClassAdapter: boolean source> = 1;

        specialinvoke r0.<org.objectweb.asm.ClassVisitor: void visitSource(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void visitOuterClass(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.IllegalStateException $r5;
        java.lang.String r1, r2, r3;
        org.objectweb.asm.util.CheckClassAdapter r0;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r0 := @this: org.objectweb.asm.util.CheckClassAdapter;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<org.objectweb.asm.util.CheckClassAdapter: void checkState()>();

        $z0 = r0.<org.objectweb.asm.util.CheckClassAdapter: boolean outer>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("visitOuterClass can be called only once.");

        throw $r5;

     label1:
        r0.<org.objectweb.asm.util.CheckClassAdapter: boolean outer> = 1;

        if r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal outer class owner");

        throw $r4;

     label2:
        if r2 == null goto label3;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkMethodDesc(java.lang.String)>(r2);

     label3:
        specialinvoke r0.<org.objectweb.asm.ClassVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>(r1, r3, r2);

        return;
    }

    public void visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)
    {
        int i0;
        java.lang.String r1, r2, r3;
        org.objectweb.asm.util.CheckClassAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckClassAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        specialinvoke r0.<org.objectweb.asm.util.CheckClassAdapter: void checkState()>();

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkInternalName(java.lang.String,java.lang.String)>(r1, "class name");

        if r2 == null goto label1;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkInternalName(java.lang.String,java.lang.String)>(r2, "outer class name");

     label1:
        if r3 == null goto label2;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkIdentifier(java.lang.String,java.lang.String)>(r3, "inner class name");

     label2:
        staticinvoke <org.objectweb.asm.util.CheckClassAdapter: void checkAccess(int,int)>(i0, 30239);

        specialinvoke r0.<org.objectweb.asm.ClassVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>(r1, r2, r3, i0);

        return;
    }

    public org.objectweb.asm.FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)
    {
        org.objectweb.asm.util.CheckFieldAdapter $r6;
        org.objectweb.asm.FieldVisitor $r5;
        org.objectweb.asm.util.CheckClassAdapter r0;
        int i0, $i1;
        java.lang.Object r4;
        java.lang.String r1, r2, r3;

        r0 := @this: org.objectweb.asm.util.CheckClassAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object;

        specialinvoke r0.<org.objectweb.asm.util.CheckClassAdapter: void checkState()>();

        staticinvoke <org.objectweb.asm.util.CheckClassAdapter: void checkAccess(int,int)>(i0, 413919);

        $i1 = r0.<org.objectweb.asm.util.CheckClassAdapter: int version>;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkUnqualifiedName(int,java.lang.String,java.lang.String)>($i1, r1, "field name");

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkDesc(java.lang.String,boolean)>(r2, 0);

        if r3 == null goto label1;

        staticinvoke <org.objectweb.asm.util.CheckClassAdapter: void checkFieldSignature(java.lang.String)>(r3);

     label1:
        if r4 == null goto label2;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkConstant(java.lang.Object)>(r4);

     label2:
        $r5 = specialinvoke r0.<org.objectweb.asm.ClassVisitor: org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(i0, r1, r2, r3, r4);

        $r6 = new org.objectweb.asm.util.CheckFieldAdapter;

        specialinvoke $r6.<org.objectweb.asm.util.CheckFieldAdapter: void <init>(org.objectweb.asm.FieldVisitor)>($r5);

        return $r6;
    }

    public org.objectweb.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        org.objectweb.asm.MethodVisitor $r7, $r10;
        java.lang.String[] r5;
        java.util.Map $r8, $r11;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String r1, $r2, r3, r4, $r13, $r16, $r17;
        boolean $z0, $z1, $z2;
        org.objectweb.asm.util.CheckClassAdapter r0;
        java.lang.StringBuilder $r12, $r14, $r15;
        org.objectweb.asm.util.CheckMethodAdapter $r6, $r9, r18;

        r0 := @this: org.objectweb.asm.util.CheckClassAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String[];

        specialinvoke r0.<org.objectweb.asm.util.CheckClassAdapter: void checkState()>();

        staticinvoke <org.objectweb.asm.util.CheckClassAdapter: void checkAccess(int,int)>(i0, 400895);

        $r2 = "<init>";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r17 = "<clinit>";

        $z2 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 != 0 goto label1;

        $i3 = r0.<org.objectweb.asm.util.CheckClassAdapter: int version>;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkMethodIdentifier(int,java.lang.String,java.lang.String)>($i3, r1, "method name");

     label1:
        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkMethodDesc(java.lang.String)>(r3);

        if r4 == null goto label2;

        staticinvoke <org.objectweb.asm.util.CheckClassAdapter: void checkMethodSignature(java.lang.String)>(r4);

     label2:
        if r5 == null goto label4;

        i4 = 0;

     label3:
        $i2 = lengthof r5;

        if i4 >= $i2 goto label4;

        $r13 = r5[i4];

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception name at index ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkInternalName(java.lang.String,java.lang.String)>($r13, $r16);

        i4 = i4 + 1;

        goto label3;

     label4:
        $z1 = r0.<org.objectweb.asm.util.CheckClassAdapter: boolean checkDataFlow>;

        if $z1 == 0 goto label5;

        $r9 = new org.objectweb.asm.util.CheckMethodAdapter;

        $r10 = specialinvoke r0.<org.objectweb.asm.ClassVisitor: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i0, r1, r3, r4, r5);

        $r11 = r0.<org.objectweb.asm.util.CheckClassAdapter: java.util.Map labels>;

        specialinvoke $r9.<org.objectweb.asm.util.CheckMethodAdapter: void <init>(int,java.lang.String,java.lang.String,org.objectweb.asm.MethodVisitor,java.util.Map)>(i0, r1, r3, $r10, $r11);

        r18 = $r9;

        goto label6;

     label5:
        $r6 = new org.objectweb.asm.util.CheckMethodAdapter;

        $r7 = specialinvoke r0.<org.objectweb.asm.ClassVisitor: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i0, r1, r3, r4, r5);

        $r8 = r0.<org.objectweb.asm.util.CheckClassAdapter: java.util.Map labels>;

        specialinvoke $r6.<org.objectweb.asm.util.CheckMethodAdapter: void <init>(org.objectweb.asm.MethodVisitor,java.util.Map)>($r7, $r8);

        r18 = $r6;

     label6:
        $i1 = r0.<org.objectweb.asm.util.CheckClassAdapter: int version>;

        r18.<org.objectweb.asm.util.CheckMethodAdapter: int version> = $i1;

        return r18;
    }

    public org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)
    {
        org.objectweb.asm.AnnotationVisitor $r3;
        org.objectweb.asm.util.CheckAnnotationAdapter $r2;
        java.lang.String r1;
        org.objectweb.asm.util.CheckClassAdapter r0;
        boolean z0;

        r0 := @this: org.objectweb.asm.util.CheckClassAdapter;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.objectweb.asm.util.CheckClassAdapter: void checkState()>();

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkDesc(java.lang.String,boolean)>(r1, 0);

        $r2 = new org.objectweb.asm.util.CheckAnnotationAdapter;

        $r3 = specialinvoke r0.<org.objectweb.asm.ClassVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>(r1, z0);

        specialinvoke $r2.<org.objectweb.asm.util.CheckAnnotationAdapter: void <init>(org.objectweb.asm.AnnotationVisitor)>($r3);

        return $r2;
    }

    public void visitAttribute(org.objectweb.asm.Attribute)
    {
        org.objectweb.asm.Attribute r1;
        org.objectweb.asm.util.CheckClassAdapter r0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.objectweb.asm.util.CheckClassAdapter;

        r1 := @parameter0: org.objectweb.asm.Attribute;

        specialinvoke r0.<org.objectweb.asm.util.CheckClassAdapter: void checkState()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid attribute (must not be null)");

        throw $r2;

     label1:
        specialinvoke r0.<org.objectweb.asm.ClassVisitor: void visitAttribute(org.objectweb.asm.Attribute)>(r1);

        return;
    }

    public void visitEnd()
    {
        org.objectweb.asm.util.CheckClassAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckClassAdapter;

        specialinvoke r0.<org.objectweb.asm.util.CheckClassAdapter: void checkState()>();

        r0.<org.objectweb.asm.util.CheckClassAdapter: boolean end> = 1;

        specialinvoke r0.<org.objectweb.asm.ClassVisitor: void visitEnd()>();

        return;
    }

    private void checkState()
    {
        java.lang.IllegalStateException $r1, $r2;
        org.objectweb.asm.util.CheckClassAdapter r0;
        boolean $z0, $z1;

        r0 := @this: org.objectweb.asm.util.CheckClassAdapter;

        $z0 = r0.<org.objectweb.asm.util.CheckClassAdapter: boolean start>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot visit member before visit has been called.");

        throw $r2;

     label1:
        $z1 = r0.<org.objectweb.asm.util.CheckClassAdapter: boolean end>;

        if $z1 == 0 goto label2;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot visit member after visitEnd has been called.");

        throw $r1;

     label2:
        return;
    }

    static void checkAccess(int, int)
    {
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r2, $r3, $r7, $r8, $r12, $r13, $r15, $r17, $r19;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13;
        java.lang.String $r4, $r9, $r14;
        java.lang.IllegalArgumentException $r16, $r18, $r20;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i13 = (int) -1;

        $i2 = i1 ^ $i13;

        $i3 = i0 & $i2;

        if $i3 == 0 goto label01;

        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid access flags: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r16;

     label01:
        $i4 = i0 & 1;

        if $i4 != 0 goto label02;

        $z3 = 0;

        goto label03;

     label02:
        $z3 = 1;

     label03:
        z0 = $z3;

        $i5 = i0 & 2;

        if $i5 != 0 goto label04;

        $z4 = 0;

        goto label05;

     label04:
        $z4 = 1;

     label05:
        z1 = $z4;

        $i6 = i0 & 4;

        if $i6 != 0 goto label06;

        $z5 = 0;

        goto label07;

     label06:
        $z5 = 1;

     label07:
        $i7 = z0 + z1;

        $i8 = $i7 + $z5;

        if $i8 <= 1 goto label08;

        $r18 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("public private and protected are mutually exclusive: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r18;

     label08:
        $i9 = i0 & 16;

        if $i9 != 0 goto label09;

        $z6 = 0;

        goto label10;

     label09:
        $z6 = 1;

     label10:
        z2 = $z6;

        $i10 = i0 & 1024;

        if $i10 != 0 goto label11;

        $z7 = 0;

        goto label12;

     label11:
        $z7 = 1;

     label12:
        $i11 = z2 + $z7;

        if $i11 <= 1 goto label13;

        $r20 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("final and abstract are mutually exclusive: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r20;

     label13:
        return;
    }

    public static void checkClassSignature(java.lang.String)
    {
        char $c0, $c4;
        java.lang.IllegalArgumentException $r8;
        int $i1, i2, i3, $i5, $i6;
        java.lang.StringBuilder $r3, $r4, $r5, $r7;
        java.lang.String r0, $r6;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

        $c0 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, 0);

        $i5 = (int) $c0;

        if $i5 != 60 goto label1;

        i2 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkFormalTypeParameters(java.lang.String,int)>(r0, 0);

     label1:
        i3 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkClassTypeSignature(java.lang.String,int)>(r0, i2);

     label2:
        $c4 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, i3);

        $i6 = (int) $c4;

        if $i6 != 76 goto label3;

        i3 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkClassTypeSignature(java.lang.String,int)>(r0, i3);

        goto label2;

     label3:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 == $i1 goto label4;

        $r8 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": error at index ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label4:
        return;
    }

    public static void checkMethodSignature(java.lang.String)
    {
        int $i1, $i3, i5, i6, $i8, i9, i11, $i12, $i13, $i15, $i16, $i17, $i18;
        java.lang.String r0, $r6, $r7;
        char $c0, $c2, $c4, $c7, $c10;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r3, $r4, $r5, $r8;

        r0 := @parameter0: java.lang.String;

        i5 = 0;

        $c0 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, 0);

        $i12 = (int) $c0;

        if $i12 != 60 goto label1;

        i5 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkFormalTypeParameters(java.lang.String,int)>(r0, 0);

     label1:
        i6 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkChar(char,java.lang.String,int)>(40, r0, i5);

     label2:
        $r7 = "ZCBSIFJDL[T";

        $c7 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, i6);

        $i13 = (int) $c7;

        $i8 = virtualinvoke $r7.<java.lang.String: int indexOf(int)>($i13);

        $i15 = (int) -1;

        if $i8 == $i15 goto label3;

        i6 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkTypeSignature(java.lang.String,int)>(r0, i6);

        goto label2;

     label3:
        $i1 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkChar(char,java.lang.String,int)>(41, r0, i6);

        $c2 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, $i1);

        $i16 = (int) $c2;

        if $i16 != 86 goto label4;

        i9 = $i1 + 1;

        goto label5;

     label4:
        i9 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkTypeSignature(java.lang.String,int)>(r0, $i1);

     label5:
        $c10 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, i9);

        $i17 = (int) $c10;

        if $i17 != 94 goto label7;

        i11 = i9 + 1;

        $c4 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, i11);

        $i18 = (int) $c4;

        if $i18 != 76 goto label6;

        i9 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkClassTypeSignature(java.lang.String,int)>(r0, i11);

        goto label5;

     label6:
        i9 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkTypeVariableSignature(java.lang.String,int)>(r0, i11);

        goto label5;

     label7:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if i9 == $i3 goto label8;

        $r9 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": error at index ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r9;

     label8:
        return;
    }

    public static void checkFieldSignature(java.lang.String)
    {
        java.lang.IllegalArgumentException $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String r0, $r6;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkFieldTypeSignature(java.lang.String,int)>(r0, 0);

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == $i1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": error at index ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        return;
    }

    private static int checkFormalTypeParameters(java.lang.String, int)
    {
        int $i0, $i2, i3, i4, $i5;
        char $c1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        $i0 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkChar(char,java.lang.String,int)>(60, r0, i3);

        i4 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkFormalTypeParameter(java.lang.String,int)>(r0, $i0);

     label1:
        $c1 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, i4);

        $i5 = (int) $c1;

        if $i5 == 62 goto label2;

        i4 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkFormalTypeParameter(java.lang.String,int)>(r0, i4);

        goto label1;

     label2:
        $i2 = i4 + 1;

        return $i2;
    }

    private static int checkFormalTypeParameter(java.lang.String, int)
    {
        char $c2, $c7;
        int $i0, $i1, $i3, $i4, i5, i6, $i8, $i10, $i11;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        i5 := @parameter1: int;

        $i0 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkIdentifier(java.lang.String,int)>(r0, i5);

        $i1 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkChar(char,java.lang.String,int)>(58, r0, $i0);

        i6 = $i1;

        $r1 = "L[T";

        $c2 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, $i1);

        $i8 = (int) $c2;

        $i3 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>($i8);

        $i10 = (int) -1;

        if $i3 == $i10 goto label1;

        i6 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkFieldTypeSignature(java.lang.String,int)>(r0, $i1);

     label1:
        $c7 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, i6);

        $i11 = (int) $c7;

        if $i11 != 58 goto label2;

        $i4 = i6 + 1;

        i6 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkFieldTypeSignature(java.lang.String,int)>(r0, $i4);

        goto label1;

     label2:
        return i6;
    }

    private static int checkFieldTypeSignature(java.lang.String, int)
    {
        char $c1;
        int i0, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $c1 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, i0);

        $i6 = (int) $c1;

        lookupswitch($i6)
        {
            case 76: goto label1;
            case 91: goto label2;
            default: goto label3;
        };

     label1:
        $i4 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkClassTypeSignature(java.lang.String,int)>(r0, i0);

        return $i4;

     label2:
        $i2 = i0 + 1;

        $i3 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkTypeSignature(java.lang.String,int)>(r0, $i2);

        return $i3;

     label3:
        $i5 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkTypeVariableSignature(java.lang.String,int)>(r0, i0);

        return $i5;
    }

    private static int checkClassTypeSignature(java.lang.String, int)
    {
        int $i0, $i3, $i4, $i5, $i7, i8, i9, $i11, $i12, $i13, $i14;
        java.lang.String r0;
        char $c1, $c2, $c6, $c10;

        r0 := @parameter0: java.lang.String;

        i8 := @parameter1: int;

        $i0 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkChar(char,java.lang.String,int)>(76, r0, i8);

        i9 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkIdentifier(java.lang.String,int)>(r0, $i0);

     label1:
        $c1 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, i9);

        $i11 = (int) $c1;

        if $i11 != 47 goto label2;

        $i7 = i9 + 1;

        i9 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkIdentifier(java.lang.String,int)>(r0, $i7);

        goto label1;

     label2:
        $c2 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, i9);

        $i12 = (int) $c2;

        if $i12 != 60 goto label3;

        i9 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkTypeArguments(java.lang.String,int)>(r0, i9);

     label3:
        $c10 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, i9);

        $i13 = (int) $c10;

        if $i13 != 46 goto label4;

        $i4 = i9 + 1;

        $i5 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkIdentifier(java.lang.String,int)>(r0, $i4);

        i9 = $i5;

        $c6 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, $i5);

        $i14 = (int) $c6;

        if $i14 != 60 goto label3;

        i9 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkTypeArguments(java.lang.String,int)>(r0, $i5);

        goto label3;

     label4:
        $i3 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkChar(char,java.lang.String,int)>(59, r0, i9);

        return $i3;
    }

    private static int checkTypeArguments(java.lang.String, int)
    {
        int $i0, $i2, i3, i4, $i5;
        char $c1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        $i0 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkChar(char,java.lang.String,int)>(60, r0, i3);

        i4 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkTypeArgument(java.lang.String,int)>(r0, $i0);

     label1:
        $c1 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, i4);

        $i5 = (int) $c1;

        if $i5 == 62 goto label2;

        i4 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkTypeArgument(java.lang.String,int)>(r0, i4);

        goto label1;

     label2:
        $i2 = i4 + 1;

        return $i2;
    }

    private static int checkTypeArgument(java.lang.String, int)
    {
        char $c0;
        int $i1, i2, $i3, $i4, $i5, $i6;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        $c0 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, i2);

        $i4 = (int) $c0;

        if $i4 != 42 goto label1;

        $i1 = i2 + 1;

        return $i1;

     label1:
        $i5 = (int) $c0;

        if $i5 == 43 goto label2;

        $i6 = (int) $c0;

        if $i6 != 45 goto label3;

     label2:
        i2 = i2 + 1;

     label3:
        $i3 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkFieldTypeSignature(java.lang.String,int)>(r0, i2);

        return $i3;
    }

    private static int checkTypeVariableSignature(java.lang.String, int)
    {
        int $i0, $i1, $i2, i3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        $i0 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkChar(char,java.lang.String,int)>(84, r0, i3);

        $i1 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkIdentifier(java.lang.String,int)>(r0, $i0);

        $i2 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkChar(char,java.lang.String,int)>(59, r0, $i1);

        return $i2;
    }

    private static int checkTypeSignature(java.lang.String, int)
    {
        int i0, $i2, $i3, $i4;
        char $c1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $c1 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, i0);

        $i4 = (int) $c1;

        tableswitch($i4)
        {
            case 66: goto label1;
            case 67: goto label1;
            case 68: goto label1;
            case 69: goto label2;
            case 70: goto label1;
            case 71: goto label2;
            case 72: goto label2;
            case 73: goto label1;
            case 74: goto label1;
            case 75: goto label2;
            case 76: goto label2;
            case 77: goto label2;
            case 78: goto label2;
            case 79: goto label2;
            case 80: goto label2;
            case 81: goto label2;
            case 82: goto label2;
            case 83: goto label1;
            case 84: goto label2;
            case 85: goto label2;
            case 86: goto label2;
            case 87: goto label2;
            case 88: goto label2;
            case 89: goto label2;
            case 90: goto label1;
            default: goto label2;
        };

     label1:
        $i2 = i0 + 1;

        return $i2;

     label2:
        $i3 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: int checkFieldTypeSignature(java.lang.String,int)>(r0, i0);

        return $i3;
    }

    private static int checkIdentifier(java.lang.String, int)
    {
        char $c0, $c1;
        java.lang.IllegalArgumentException $r1;
        int i2, i3;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String r0, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        $c0 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, i2);

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c0);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": identifier expected at index ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        i3 = i2 + 1;

     label2:
        $c1 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, i3);

        $z1 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c1);

        if $z1 == 0 goto label3;

        i3 = i3 + 1;

        goto label2;

     label3:
        return i3;
    }

    private static int checkChar(char, java.lang.String, int)
    {
        char $c1, c2;
        java.lang.IllegalArgumentException $r10;
        int i0, $i3, $i4, $i5;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r9;
        java.lang.String r0, $r8;

        c2 := @parameter0: char;

        r0 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $c1 = staticinvoke <org.objectweb.asm.util.CheckClassAdapter: char getChar(java.lang.String,int)>(r0, i0);

        $i4 = (int) $c1;

        $i5 = (int) c2;

        if $i4 != $i5 goto label1;

        $i3 = i0 + 1;

        return $i3;

     label1:
        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' expected at index ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r10;
    }

    private static char getChar(java.lang.String, int)
    {
        int i0, $i1;
        char $c2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i1 goto label1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        goto label2;

     label1:
        $c2 = 0;

     label2:
        return $c2;
    }
}
