public abstract class org.apache.batik.ext.awt.image.rendered.AbstractTiledRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed implements org.apache.batik.ext.awt.image.rendered.TileGenerator
{
    private org.apache.batik.ext.awt.image.rendered.TileStore tiles;
    private static int defaultTileSize;

    public static int getDefaultTileSize()
    {
        int $i0;

        $i0 = <org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: int defaultTileSize>;

        return $i0;
    }

    protected void <init>()
    {
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>()>();

        return;
    }

    protected void <init>(java.awt.Rectangle, java.util.Map)
    {
        java.awt.Rectangle r1;
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        java.util.Map r2;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r1 := @parameter0: java.awt.Rectangle;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(java.awt.Rectangle,java.util.Map)>(r1, r2);

        return;
    }

    protected void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, java.util.Map)
    {
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.util.Map r2;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.util.Map)>(r1, r2);

        return;
    }

    protected void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.Rectangle, java.util.Map)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.util.Map r3;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r2 := @parameter1: java.awt.Rectangle;

        r3 := @parameter2: java.util.Map;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.util.Map)>(r1, r2, r3);

        return;
    }

    protected void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.Rectangle, java.awt.image.ColorModel, java.awt.image.SampleModel, java.util.Map)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.image.ColorModel r3;
        java.util.Map r5;
        java.awt.image.SampleModel r4;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r2 := @parameter1: java.awt.Rectangle;

        r3 := @parameter2: java.awt.image.ColorModel;

        r4 := @parameter3: java.awt.image.SampleModel;

        r5 := @parameter4: java.util.Map;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,java.util.Map)>(r1, r2, r3, r4, r5);

        return;
    }

    protected void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.Rectangle, java.awt.image.ColorModel, java.awt.image.SampleModel, int, int, java.util.Map)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        java.awt.image.SampleModel r4;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.image.ColorModel r3;
        java.util.Map r5;
        int i0, i1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r2 := @parameter1: java.awt.Rectangle;

        r3 := @parameter2: java.awt.image.ColorModel;

        r4 := @parameter3: java.awt.image.SampleModel;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        r5 := @parameter6: java.util.Map;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, r2, r3, r4, i0, i1, r5);

        return;
    }

    protected void init(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.Rectangle, java.awt.image.ColorModel, java.awt.image.SampleModel, int, int, java.util.Map)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        java.awt.image.SampleModel r4;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.image.ColorModel r3;
        java.util.Map r5;
        int i0, i1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r2 := @parameter1: java.awt.Rectangle;

        r3 := @parameter2: java.awt.image.ColorModel;

        r4 := @parameter3: java.awt.image.SampleModel;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        r5 := @parameter6: java.util.Map;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: void init(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,org.apache.batik.ext.awt.image.rendered.TileStore,java.util.Map)>(r1, r2, r3, r4, i0, i1, null, r5);

        return;
    }

    protected void init(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.Rectangle, java.awt.image.ColorModel, java.awt.image.SampleModel, int, int, org.apache.batik.ext.awt.image.rendered.TileStore, java.util.Map)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        java.awt.image.SampleModel r4;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.image.ColorModel r3;
        java.util.Map r5;
        int i0, i1;
        org.apache.batik.ext.awt.image.rendered.TileStore r6, $r7, $r8;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r2 := @parameter1: java.awt.Rectangle;

        r3 := @parameter2: java.awt.image.ColorModel;

        r4 := @parameter3: java.awt.image.SampleModel;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        r6 := @parameter6: org.apache.batik.ext.awt.image.rendered.TileStore;

        r5 := @parameter7: java.util.Map;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, r2, r3, r4, i0, i1, r5);

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: org.apache.batik.ext.awt.image.rendered.TileStore tiles> = r6;

        $r7 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: org.apache.batik.ext.awt.image.rendered.TileStore tiles>;

        if $r7 != null goto label1;

        $r8 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: org.apache.batik.ext.awt.image.rendered.TileStore createTileStore()>();

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: org.apache.batik.ext.awt.image.rendered.TileStore tiles> = $r8;

     label1:
        return;
    }

    protected void <init>(java.util.List, java.awt.Rectangle, java.util.Map)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        java.util.List r1;
        java.util.Map r3;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.awt.Rectangle;

        r3 := @parameter2: java.util.Map;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(java.util.List,java.awt.Rectangle,java.util.Map)>(r1, r2, r3);

        return;
    }

    protected void <init>(java.util.List, java.awt.Rectangle, java.awt.image.ColorModel, java.awt.image.SampleModel, java.util.Map)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        java.util.List r1;
        java.awt.image.ColorModel r3;
        java.util.Map r5;
        java.awt.image.SampleModel r4;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.awt.Rectangle;

        r3 := @parameter2: java.awt.image.ColorModel;

        r4 := @parameter3: java.awt.image.SampleModel;

        r5 := @parameter4: java.util.Map;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,java.util.Map)>(r1, r2, r3, r4, r5);

        return;
    }

    protected void <init>(java.util.List, java.awt.Rectangle, java.awt.image.ColorModel, java.awt.image.SampleModel, int, int, java.util.Map)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        java.awt.image.SampleModel r4;
        java.util.List r1;
        java.awt.image.ColorModel r3;
        java.util.Map r5;
        int i0, i1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.awt.Rectangle;

        r3 := @parameter2: java.awt.image.ColorModel;

        r4 := @parameter3: java.awt.image.SampleModel;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        r5 := @parameter6: java.util.Map;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, r2, r3, r4, i0, i1, r5);

        return;
    }

    protected void init(java.util.List, java.awt.Rectangle, java.awt.image.ColorModel, java.awt.image.SampleModel, int, int, java.util.Map)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        java.awt.image.SampleModel r4;
        java.util.List r1;
        java.awt.image.ColorModel r3;
        java.util.Map r5;
        int i0, i1;
        org.apache.batik.ext.awt.image.rendered.TileStore $r6;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.awt.Rectangle;

        r3 := @parameter2: java.awt.image.ColorModel;

        r4 := @parameter3: java.awt.image.SampleModel;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        r5 := @parameter6: java.util.Map;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, r2, r3, r4, i0, i1, r5);

        $r6 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: org.apache.batik.ext.awt.image.rendered.TileStore createTileStore()>();

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: org.apache.batik.ext.awt.image.rendered.TileStore tiles> = $r6;

        return;
    }

    public org.apache.batik.ext.awt.image.rendered.TileStore getTileStore()
    {
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        org.apache.batik.ext.awt.image.rendered.TileStore $r1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: org.apache.batik.ext.awt.image.rendered.TileStore tiles>;

        return $r1;
    }

    protected void setTileStore(org.apache.batik.ext.awt.image.rendered.TileStore)
    {
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        org.apache.batik.ext.awt.image.rendered.TileStore r1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.TileStore;

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: org.apache.batik.ext.awt.image.rendered.TileStore tiles> = r1;

        return;
    }

    protected org.apache.batik.ext.awt.image.rendered.TileStore createTileStore()
    {
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        org.apache.batik.ext.awt.image.rendered.TileStore $r1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        $r1 = staticinvoke <org.apache.batik.ext.awt.image.rendered.TileCache: org.apache.batik.ext.awt.image.rendered.TileStore getTileMap(org.apache.batik.ext.awt.image.rendered.TileGenerator)>(r0);

        return $r1;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        java.awt.image.WritableRaster r1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r1 := @parameter0: java.awt.image.WritableRaster;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: void copyToRasterByBlocks(java.awt.image.WritableRaster)>(r1);

        return r1;
    }

    public java.awt.image.Raster getData(java.awt.Rectangle)
    {
        java.awt.Rectangle r1;
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        java.awt.image.Raster $r2, $r3, $r4;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r1 := @parameter0: java.awt.Rectangle;

        $i0 = r1.<java.awt.Rectangle: int x>;

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getXTile(int)>($i0);

        $i3 = r1.<java.awt.Rectangle: int x>;

        $i2 = r1.<java.awt.Rectangle: int width>;

        $i4 = $i3 + $i2;

        $i5 = $i4 - 1;

        $i6 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getXTile(int)>($i5);

        $i7 = r1.<java.awt.Rectangle: int y>;

        $i8 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getYTile(int)>($i7);

        $i10 = r1.<java.awt.Rectangle: int y>;

        $i9 = r1.<java.awt.Rectangle: int height>;

        $i11 = $i10 + $i9;

        $i12 = $i11 - 1;

        $i13 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getYTile(int)>($i12);

        if $i1 != $i6 goto label1;

        if $i8 != $i13 goto label1;

        $r3 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: java.awt.image.Raster getTile(int,int)>($i1, $i8);

        $i19 = r1.<java.awt.Rectangle: int x>;

        $i18 = r1.<java.awt.Rectangle: int y>;

        $i17 = r1.<java.awt.Rectangle: int width>;

        $i16 = r1.<java.awt.Rectangle: int height>;

        $i15 = r1.<java.awt.Rectangle: int x>;

        $i14 = r1.<java.awt.Rectangle: int y>;

        $r4 = virtualinvoke $r3.<java.awt.image.Raster: java.awt.image.Raster createChild(int,int,int,int,int,int,int[])>($i19, $i18, $i17, $i16, $i15, $i14, null);

        return $r4;

     label1:
        $r2 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.Raster getData(java.awt.Rectangle)>(r1);

        return $r2;
    }

    public java.awt.image.Raster getTile(int, int)
    {
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        int i0, i1;
        java.awt.image.Raster $r2;
        org.apache.batik.ext.awt.image.rendered.TileStore $r1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: org.apache.batik.ext.awt.image.rendered.TileStore tiles>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.ext.awt.image.rendered.TileStore: java.awt.image.Raster getTile(int,int)>(i0, i1);

        return $r2;
    }

    public java.awt.image.Raster genTile(int, int)
    {
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        int i0, i1;
        java.awt.image.WritableRaster $r1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.WritableRaster makeTile(int,int)>(i0, i1);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: void genRect(java.awt.image.WritableRaster)>($r1);

        return $r1;
    }

    public abstract void genRect(java.awt.image.WritableRaster);

    public void setTile(int, int, java.awt.image.Raster)
    {
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        int i0, i1;
        java.awt.image.Raster r1;
        org.apache.batik.ext.awt.image.rendered.TileStore $r2;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.awt.image.Raster;

        $r2 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: org.apache.batik.ext.awt.image.rendered.TileStore tiles>;

        interfaceinvoke $r2.<org.apache.batik.ext.awt.image.rendered.TileStore: void setTile(int,int,java.awt.image.Raster)>(i0, i1, r1);

        return;
    }

    public void copyToRasterByBlocks(java.awt.image.WritableRaster)
    {
        java.awt.image.SampleModel $r1;
        java.lang.Thread $r15;
        org.apache.batik.ext.awt.image.rendered.TileStore $r5, $r7, $r11;
        java.awt.image.Raster $r6, $r8, $r9;
        boolean[] r13, $r14;
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, i96, i97, i98, $i99, i100, i101, i102, $i103, $i105, $i107;
        java.awt.image.WritableRaster r3, $r10;
        org.apache.batik.ext.awt.image.rendered.TileBlock $r16;
        boolean $z0, $z1, z3, $z4, $z5, $z6, $z7;
        java.awt.Rectangle $r2, $r4;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r3 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel getSampleModel()>();

        $z0 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: boolean is_INT_PACK_Data(java.awt.image.SampleModel,boolean)>($r1, 0);

        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle getBounds()>();

        $r4 = virtualinvoke r3.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $i0 = $r4.<java.awt.Rectangle: int x>;

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getXTile(int)>($i0);

        i53 = $i1;

        $i2 = $r4.<java.awt.Rectangle: int y>;

        $i3 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getYTile(int)>($i2);

        i54 = $i3;

        $i5 = $r4.<java.awt.Rectangle: int x>;

        $i4 = $r4.<java.awt.Rectangle: int width>;

        $i6 = $i5 + $i4;

        $i7 = $i6 - 1;

        $i8 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getXTile(int)>($i7);

        i55 = $i8;

        $i10 = $r4.<java.awt.Rectangle: int y>;

        $i9 = $r4.<java.awt.Rectangle: int height>;

        $i11 = $i10 + $i9;

        $i12 = $i11 - 1;

        $i13 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getYTile(int)>($i12);

        i56 = $i13;

        $i14 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX>;

        if $i1 >= $i14 goto label01;

        i53 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX>;

     label01:
        $i15 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY>;

        if $i3 >= $i15 goto label02;

        i54 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY>;

     label02:
        $i17 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX>;

        $i16 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numXTiles>;

        $i18 = $i17 + $i16;

        if $i8 < $i18 goto label03;

        $i51 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX>;

        $i50 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numXTiles>;

        $i52 = $i51 + $i50;

        i55 = $i52 - 1;

     label03:
        $i20 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY>;

        $i19 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numYTiles>;

        $i21 = $i20 + $i19;

        if $i13 < $i21 goto label04;

        $i48 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY>;

        $i47 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numYTiles>;

        $i49 = $i48 + $i47;

        i56 = $i49 - 1;

     label04:
        if i55 < i53 goto label05;

        if i56 >= i54 goto label06;

     label05:
        return;

     label06:
        i57 = i53;

        i58 = i55;

        i59 = i54;

        i60 = i56;

        $i22 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileWidth>;

        $i24 = i53 * $i22;

        $i23 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridXOff>;

        i61 = $i24 + $i23;

        $i25 = $r4.<java.awt.Rectangle: int x>;

        if i61 >= $i25 goto label07;

        $i46 = $r2.<java.awt.Rectangle: int x>;

        $i45 = $r4.<java.awt.Rectangle: int x>;

        if $i46 == $i45 goto label07;

        i57 = i53 + 1;

     label07:
        $i62 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileHeight>;

        $i63 = i54 * $i62;

        $i64 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridYOff>;

        $i65 = $i63 + $i64;

        $i66 = $r4.<java.awt.Rectangle: int y>;

        if $i65 >= $i66 goto label08;

        $i44 = $r2.<java.awt.Rectangle: int y>;

        $i43 = $r4.<java.awt.Rectangle: int y>;

        if $i44 == $i43 goto label08;

        i59 = i59 + 1;

     label08:
        $i67 = i55 + 1;

        $i68 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileWidth>;

        $i69 = $i67 * $i68;

        $i70 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridXOff>;

        $i71 = $i69 + $i70;

        $i72 = $i71 - 1;

        $i73 = $r4.<java.awt.Rectangle: int x>;

        $i74 = $r4.<java.awt.Rectangle: int width>;

        $i75 = $i73 + $i74;

        if $i72 < $i75 goto label09;

        $i38 = $r2.<java.awt.Rectangle: int x>;

        $i37 = $r2.<java.awt.Rectangle: int width>;

        $i42 = $i38 + $i37;

        $i40 = $r4.<java.awt.Rectangle: int x>;

        $i39 = $r4.<java.awt.Rectangle: int width>;

        $i41 = $i40 + $i39;

        if $i42 == $i41 goto label09;

        $i105 = (int) -1;

        i58 = i58 + $i105;

     label09:
        $i76 = i56 + 1;

        $i77 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileHeight>;

        $i78 = $i76 * $i77;

        $i79 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridYOff>;

        $i80 = $i78 + $i79;

        $i81 = $i80 - 1;

        $i82 = $r4.<java.awt.Rectangle: int y>;

        $i83 = $r4.<java.awt.Rectangle: int height>;

        $i84 = $i82 + $i83;

        if $i81 < $i84 goto label10;

        $i32 = $r2.<java.awt.Rectangle: int y>;

        $i31 = $r2.<java.awt.Rectangle: int height>;

        $i36 = $i32 + $i31;

        $i34 = $r4.<java.awt.Rectangle: int y>;

        $i33 = $r4.<java.awt.Rectangle: int height>;

        $i35 = $i34 + $i33;

        if $i36 == $i35 goto label10;

        $i107 = (int) -1;

        i60 = i60 + $i107;

     label10:
        $i85 = i58 - i57;

        $i86 = $i85 + 1;

        $i87 = i60 - i59;

        $i88 = $i87 + 1;

        r13 = null;

        if $i86 <= 0 goto label11;

        if $i88 <= 0 goto label11;

        $i30 = $i86 * $i88;

        r13 = newarray (boolean)[$i30];

     label11:
        $i89 = i55 - i53;

        $i90 = $i89 + 1;

        $i91 = 2 * $i90;

        $i92 = i56 - i54;

        $i93 = $i92 + 1;

        $i94 = 2 * $i93;

        $i95 = $i91 + $i94;

        $r14 = newarray (boolean)[$i95];

        i96 = 0;

        i97 = i54;

        goto label22;

     label12:
        i98 = i53;

        goto label21;

     label13:
        $r5 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: org.apache.batik.ext.awt.image.rendered.TileStore tiles>;

        $r6 = interfaceinvoke $r5.<org.apache.batik.ext.awt.image.rendered.TileStore: java.awt.image.Raster getTileNoCompute(int,int)>(i98, i97);

        if $r6 == null goto label14;

        $z7 = 1;

        $z6 = 1;

        goto label15;

     label14:
        $z7 = 0;

        $z6 = 0;

     label15:
        z3 = $z7;

        if i97 < i59 goto label16;

        if i97 > i60 goto label16;

        if i98 < i57 goto label16;

        if i98 > i58 goto label16;

        $i28 = i98 - i57;

        $i26 = i97 - i59;

        $i27 = $i26 * $i86;

        $i29 = $i28 + $i27;

        r13[$i29] = $z6;

        goto label17;

     label16:
        $i99 = i96;

        i96 = i96 + 1;

        $r14[$i99] = z3;

     label17:
        if z3 != 0 goto label18;

        goto label20;

     label18:
        if $z0 == 0 goto label19;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)>($r6, r3);

        goto label20;

     label19:
        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)>($r6, r3);

     label20:
        i98 = i98 + 1;

     label21:
        if i98 <= i55 goto label13;

        i97 = i97 + 1;

     label22:
        if i97 <= i56 goto label12;

        if $i86 <= 0 goto label23;

        if $i88 <= 0 goto label23;

        $r16 = new org.apache.batik.ext.awt.image.rendered.TileBlock;

        specialinvoke $r16.<org.apache.batik.ext.awt.image.rendered.TileBlock: void <init>(int,int,int,int,boolean[],int,int,int,int)>(i57, i59, $i86, $i88, r13, 0, 0, $i86, $i88);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: void drawBlock(org.apache.batik.ext.awt.image.rendered.TileBlock,java.awt.image.WritableRaster)>($r16, r3);

     label23:
        $r15 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z4 = staticinvoke <org.apache.batik.util.HaltingThread: boolean hasBeenHalted()>();

        if $z4 == 0 goto label24;

        return;

     label24:
        i100 = 0;

        i101 = i54;

        goto label36;

     label25:
        i102 = i53;

        goto label35;

     label26:
        $r7 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: org.apache.batik.ext.awt.image.rendered.TileStore tiles>;

        $r8 = interfaceinvoke $r7.<org.apache.batik.ext.awt.image.rendered.TileStore: java.awt.image.Raster getTileNoCompute(int,int)>(i102, i101);

        if i101 < i59 goto label30;

        if i101 > i60 goto label30;

        if i102 < i57 goto label30;

        if i102 > i58 goto label30;

        if $r8 == null goto label27;

        goto label34;

     label27:
        $r10 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.WritableRaster makeTile(int,int)>(i102, i101);

        if $z0 == 0 goto label28;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)>(r3, $r10);

        goto label29;

     label28:
        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)>(r3, $r10);

     label29:
        $r11 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: org.apache.batik.ext.awt.image.rendered.TileStore tiles>;

        interfaceinvoke $r11.<org.apache.batik.ext.awt.image.rendered.TileStore: void setTile(int,int,java.awt.image.Raster)>(i102, i101, $r10);

        goto label34;

     label30:
        $i103 = i100;

        i100 = i100 + 1;

        $z5 = $r14[$i103];

        if $z5 == 0 goto label31;

        goto label34;

     label31:
        $r9 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: java.awt.image.Raster getTile(int,int)>(i102, i101);

        $z1 = staticinvoke <org.apache.batik.util.HaltingThread: boolean hasBeenHalted(java.lang.Thread)>($r15);

        if $z1 == 0 goto label32;

        return;

     label32:
        if $z0 == 0 goto label33;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)>($r9, r3);

        goto label34;

     label33:
        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)>($r9, r3);

     label34:
        i102 = i102 + 1;

     label35:
        if i102 <= i55 goto label26;

        i101 = i101 + 1;

     label36:
        if i101 <= i56 goto label25;

        return;
    }

    public void copyToRaster(java.awt.image.WritableRaster)
    {
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r2;
        java.awt.image.SampleModel $r3;
        boolean $z0, $z1;
        org.apache.batik.ext.awt.image.rendered.TileStore $r4;
        java.awt.Rectangle $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, i41, i42, i43, i44, i45, i46, i47, i48;
        java.awt.image.Raster $r5, $r6;
        boolean[] $r7;
        java.awt.image.WritableRaster r0;

        r2 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $i0 = $r1.<java.awt.Rectangle: int x>;

        $i1 = virtualinvoke r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getXTile(int)>($i0);

        i41 = $i1;

        $i2 = $r1.<java.awt.Rectangle: int y>;

        $i3 = virtualinvoke r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getYTile(int)>($i2);

        i42 = $i3;

        $i5 = $r1.<java.awt.Rectangle: int x>;

        $i4 = $r1.<java.awt.Rectangle: int width>;

        $i6 = $i5 + $i4;

        $i7 = $i6 - 1;

        $i8 = virtualinvoke r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getXTile(int)>($i7);

        i43 = $i8;

        $i10 = $r1.<java.awt.Rectangle: int y>;

        $i9 = $r1.<java.awt.Rectangle: int height>;

        $i11 = $i10 + $i9;

        $i12 = $i11 - 1;

        $i13 = virtualinvoke r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getYTile(int)>($i12);

        i44 = $i13;

        $i14 = r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX>;

        if $i1 >= $i14 goto label01;

        i41 = r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX>;

     label01:
        $i15 = r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY>;

        if $i3 >= $i15 goto label02;

        i42 = r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY>;

     label02:
        $i17 = r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX>;

        $i16 = r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numXTiles>;

        $i18 = $i17 + $i16;

        if $i8 < $i18 goto label03;

        $i39 = r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX>;

        $i38 = r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numXTiles>;

        $i40 = $i39 + $i38;

        i43 = $i40 - 1;

     label03:
        $i20 = r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY>;

        $i19 = r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numYTiles>;

        $i21 = $i20 + $i19;

        if $i13 < $i21 goto label04;

        $i35 = r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY>;

        $i34 = r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numYTiles>;

        $i36 = $i35 + $i34;

        i44 = $i36 - 1;

     label04:
        $r3 = virtualinvoke r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel getSampleModel()>();

        $z0 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: boolean is_INT_PACK_Data(java.awt.image.SampleModel,boolean)>($r3, 0);

        $i22 = i43 - i41;

        $i37 = $i22 + 1;

        $i23 = i44 - i42;

        $i24 = $i23 + 1;

        $i25 = $i37 * $i24;

        $r7 = newarray (boolean)[$i25];

        i45 = i42;

        goto label11;

     label05:
        i46 = i41;

        goto label10;

     label06:
        $r4 = r2.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: org.apache.batik.ext.awt.image.rendered.TileStore tiles>;

        $r5 = interfaceinvoke $r4.<org.apache.batik.ext.awt.image.rendered.TileStore: java.awt.image.Raster getTileNoCompute(int,int)>(i46, i45);

        if $r5 != null goto label07;

        goto label09;

     label07:
        $i28 = i46 - i41;

        $i26 = i45 - i42;

        $i27 = $i26 * $i37;

        $i29 = $i28 + $i27;

        $r7[$i29] = 1;

        if $z0 == 0 goto label08;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)>($r5, r0);

        goto label09;

     label08:
        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)>($r5, r0);

     label09:
        i46 = i46 + 1;

     label10:
        if i46 <= i43 goto label06;

        i45 = i45 + 1;

     label11:
        if i45 <= i44 goto label05;

        i47 = i42;

        goto label18;

     label12:
        i48 = i41;

        goto label17;

     label13:
        $i32 = i48 - i41;

        $i30 = i47 - i42;

        $i31 = $i30 * $i37;

        $i33 = $i32 + $i31;

        $z1 = $r7[$i33];

        if $z1 == 0 goto label14;

        goto label16;

     label14:
        $r6 = virtualinvoke r2.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: java.awt.image.Raster getTile(int,int)>(i48, i47);

        if $z0 == 0 goto label15;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)>($r6, r0);

        goto label16;

     label15:
        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)>($r6, r0);

     label16:
        i48 = i48 + 1;

     label17:
        if i48 <= i43 goto label13;

        i47 = i47 + 1;

     label18:
        if i47 <= i44 goto label12;

        return;
    }

    protected void drawBlock(org.apache.batik.ext.awt.image.rendered.TileBlock, java.awt.image.WritableRaster)
    {
        org.apache.batik.ext.awt.image.rendered.TileBlock[] $r1;
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r2;
        org.apache.batik.ext.awt.image.rendered.TileBlock r0;
        java.awt.image.WritableRaster r3;

        r2 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.TileBlock;

        r3 := @parameter1: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.TileBlock: org.apache.batik.ext.awt.image.rendered.TileBlock[] getBestSplit()>();

        if $r1 != null goto label1;

        return;

     label1:
        virtualinvoke r2.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: void drawBlockInPlace(org.apache.batik.ext.awt.image.rendered.TileBlock[],java.awt.image.WritableRaster)>($r1, r3);

        return;
    }

    protected void drawBlockAndCopy(org.apache.batik.ext.awt.image.rendered.TileBlock[], java.awt.image.WritableRaster)
    {
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r1;
        java.awt.Point $r17;
        java.awt.image.SampleModel $r5;
        int[] $r3;
        java.lang.Thread $r6;
        boolean $z0, $z1;
        java.awt.Rectangle $r9, $r10, $r16;
        java.awt.image.DataBufferInt $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i33, i34, $i35, $i36, i37, i38, i39, $i40, i41, $i43;
        org.apache.batik.ext.awt.image.rendered.TileBlock[] r0;
        org.apache.batik.ext.awt.image.rendered.TileBlock r7, r13, r14;
        java.awt.image.WritableRaster r4, $r12;

        r1 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.TileBlock[];

        r4 := @parameter1: java.awt.image.WritableRaster;

        $i0 = lengthof r0;

        if $i0 != 1 goto label1;

        r13 = r0[0];

        $i23 = virtualinvoke r13.<org.apache.batik.ext.awt.image.rendered.TileBlock: int getXLoc()>();

        $i24 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileWidth>;

        $i26 = $i23 * $i24;

        $i25 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridXOff>;

        i33 = $i26 + $i25;

        $i27 = virtualinvoke r13.<org.apache.batik.ext.awt.image.rendered.TileBlock: int getYLoc()>();

        $i28 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileHeight>;

        $i30 = $i27 * $i28;

        $i29 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridYOff>;

        i34 = $i30 + $i29;

        $i31 = virtualinvoke r4.<java.awt.image.Raster: int getMinX()>();

        if i33 != $i31 goto label1;

        $i32 = virtualinvoke r4.<java.awt.image.Raster: int getMinY()>();

        if i34 != $i32 goto label1;

        virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: void drawBlockInPlace(org.apache.batik.ext.awt.image.rendered.TileBlock[],java.awt.image.WritableRaster)>(r0, r4);

        return;

     label1:
        $i35 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileWidth>;

        $i36 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileHeight>;

        i37 = 0;

        i38 = 0;

        goto label4;

     label2:
        r14 = r0[i38];

        $i1 = virtualinvoke r14.<org.apache.batik.ext.awt.image.rendered.TileBlock: int getWidth()>();

        $i2 = $i1 * $i35;

        $i3 = virtualinvoke r14.<org.apache.batik.ext.awt.image.rendered.TileBlock: int getHeight()>();

        $i4 = $i3 * $i36;

        i39 = $i2 * $i4;

        if i39 <= i37 goto label3;

        i37 = i39;

     label3:
        i38 = i38 + 1;

     label4:
        $i40 = lengthof r0;

        if i38 < $i40 goto label2;

        $r15 = new java.awt.image.DataBufferInt;

        specialinvoke $r15.<java.awt.image.DataBufferInt: void <init>(int)>(i37);

        $r3 = newarray (int)[4];

        $r3[0] = 16711680;

        $i43 = (int) 65280;

        $r3[1] = $i43;

        $r3[2] = 255;

        $r3[3] = -16777216;

        $r5 = virtualinvoke r4.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $z0 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: boolean is_INT_PACK_Data(java.awt.image.SampleModel,boolean)>($r5, 0);

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        i41 = 0;

        goto label9;

     label5:
        r7 = r0[i41];

        $i6 = virtualinvoke r7.<org.apache.batik.ext.awt.image.rendered.TileBlock: int getXLoc()>();

        $i8 = $i6 * $i35;

        $i7 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridXOff>;

        i9 = $i8 + $i7;

        $i10 = virtualinvoke r7.<org.apache.batik.ext.awt.image.rendered.TileBlock: int getYLoc()>();

        $i12 = $i10 * $i36;

        $i11 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridYOff>;

        i13 = $i12 + $i11;

        $r16 = new java.awt.Rectangle;

        $i14 = virtualinvoke r7.<org.apache.batik.ext.awt.image.rendered.TileBlock: int getWidth()>();

        $i15 = $i14 * $i35;

        $i16 = virtualinvoke r7.<org.apache.batik.ext.awt.image.rendered.TileBlock: int getHeight()>();

        $i17 = $i16 * $i36;

        specialinvoke $r16.<java.awt.Rectangle: void <init>(int,int,int,int)>(i9, i13, $i15, $i17);

        $r9 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $r10 = virtualinvoke $r16.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r9);

        $r17 = new java.awt.Point;

        $i19 = $r10.<java.awt.Rectangle: int x>;

        $i18 = $r10.<java.awt.Rectangle: int y>;

        specialinvoke $r17.<java.awt.Point: void <init>(int,int)>($i19, $i18);

        $i22 = $r10.<java.awt.Rectangle: int width>;

        $i21 = $r10.<java.awt.Rectangle: int height>;

        $i20 = $r10.<java.awt.Rectangle: int width>;

        $r12 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createPackedRaster(java.awt.image.DataBuffer,int,int,int,int[],java.awt.Point)>($r15, $i22, $i21, $i20, $r3, $r17);

        virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: void genRect(java.awt.image.WritableRaster)>($r12);

        if $z0 == 0 goto label6;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)>($r12, r4);

        goto label7;

     label6:
        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)>($r12, r4);

     label7:
        $z1 = staticinvoke <org.apache.batik.util.HaltingThread: boolean hasBeenHalted(java.lang.Thread)>($r6);

        if $z1 == 0 goto label8;

        return;

     label8:
        i41 = i41 + 1;

     label9:
        $i5 = lengthof r0;

        if i41 < $i5 goto label5;

        return;
    }

    protected void drawBlockInPlace(org.apache.batik.ext.awt.image.rendered.TileBlock[], java.awt.image.WritableRaster)
    {
        org.apache.batik.ext.awt.image.rendered.AbstractTiledRed r1;
        java.lang.Thread $r0;
        boolean $z0;
        java.awt.Rectangle $r4, $r5, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21;
        org.apache.batik.ext.awt.image.rendered.TileBlock[] r2;
        org.apache.batik.ext.awt.image.rendered.TileBlock r3;
        java.awt.image.WritableRaster r7, $r8;

        r1 := @this: org.apache.batik.ext.awt.image.rendered.AbstractTiledRed;

        r2 := @parameter0: org.apache.batik.ext.awt.image.rendered.TileBlock[];

        r7 := @parameter1: java.awt.image.WritableRaster;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        i0 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileWidth>;

        i1 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileHeight>;

        i21 = 0;

        goto label3;

     label1:
        r3 = r2[i21];

        $i3 = virtualinvoke r3.<org.apache.batik.ext.awt.image.rendered.TileBlock: int getXLoc()>();

        $i5 = $i3 * i0;

        $i4 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridXOff>;

        i6 = $i5 + $i4;

        $i7 = virtualinvoke r3.<org.apache.batik.ext.awt.image.rendered.TileBlock: int getYLoc()>();

        $i9 = $i7 * i1;

        $i8 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridYOff>;

        i10 = $i9 + $i8;

        $r4 = new java.awt.Rectangle;

        $i11 = virtualinvoke r3.<org.apache.batik.ext.awt.image.rendered.TileBlock: int getWidth()>();

        $i12 = $i11 * i0;

        $i13 = virtualinvoke r3.<org.apache.batik.ext.awt.image.rendered.TileBlock: int getHeight()>();

        $i14 = $i13 * i1;

        specialinvoke $r4.<java.awt.Rectangle: void <init>(int,int,int,int)>(i6, i10, $i12, $i14);

        $r5 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $r6 = virtualinvoke $r4.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r5);

        $i20 = $r6.<java.awt.Rectangle: int x>;

        $i19 = $r6.<java.awt.Rectangle: int y>;

        $i18 = $r6.<java.awt.Rectangle: int width>;

        $i17 = $r6.<java.awt.Rectangle: int height>;

        $i16 = $r6.<java.awt.Rectangle: int x>;

        $i15 = $r6.<java.awt.Rectangle: int y>;

        $r8 = virtualinvoke r7.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableChild(int,int,int,int,int,int,int[])>($i20, $i19, $i18, $i17, $i16, $i15, null);

        virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: void genRect(java.awt.image.WritableRaster)>($r8);

        $z0 = staticinvoke <org.apache.batik.util.HaltingThread: boolean hasBeenHalted(java.lang.Thread)>($r0);

        if $z0 == 0 goto label2;

        return;

     label2:
        i21 = i21 + 1;

     label3:
        $i2 = lengthof r2;

        if i21 < $i2 goto label1;

        return;
    }

    static void <clinit>()
    {
        <org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: int defaultTileSize> = 128;

        return;
    }
}
