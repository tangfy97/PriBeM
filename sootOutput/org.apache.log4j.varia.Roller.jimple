public class org.apache.log4j.varia.Roller extends java.lang.Object
{
    static org.apache.log4j.Logger cat;
    static java.lang.String host;
    static int port;
    static java.lang.Class class$org$apache$log4j$varia$Roller;

    void <init>()
    {
        org.apache.log4j.varia.Roller r0;

        r0 := @this: org.apache.log4j.varia.Roller;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        int $i0;
        java.lang.String[] r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <org.apache.log4j.BasicConfigurator: void configure()>();

        $i0 = lengthof r0;

        if $i0 != 2 goto label1;

        $r2 = r0[0];

        $r1 = r0[1];

        staticinvoke <org.apache.log4j.varia.Roller: void init(java.lang.String,java.lang.String)>($r2, $r1);

        goto label2;

     label1:
        staticinvoke <org.apache.log4j.varia.Roller: void usage(java.lang.String)>("Wrong number of arguments.");

     label2:
        staticinvoke <org.apache.log4j.varia.Roller: void roll()>();

        return;
    }

    static void usage(java.lang.String)
    {
        java.io.PrintStream $r1, $r3;
        java.lang.StringBuffer $r2, $r4, $r7, $r8;
        java.lang.Class $r5, $r10;
        java.lang.String r0, $r6, $r9;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Usage: java ");

        $r5 = <org.apache.log4j.varia.Roller: java.lang.Class class$org$apache$log4j$varia$Roller>;

        if $r5 != null goto label1;

        $r10 = staticinvoke <org.apache.log4j.varia.Roller: java.lang.Class class$(java.lang.String)>("org.apache.log4j.varia.Roller");

        <org.apache.log4j.varia.Roller: java.lang.Class class$org$apache$log4j$varia$Roller> = $r10;

        goto label2;

     label1:
        $r10 = <org.apache.log4j.varia.Roller: java.lang.Class class$org$apache$log4j$varia$Roller>;

     label2:
        $r6 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("host_name port_number");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r9);

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;
    }

    static void init(java.lang.String, java.lang.String)
    {
        java.lang.NumberFormatException $r2;
        java.lang.StringBuffer $r3, $r4, $r5, $r6;
        int $i0;
        java.lang.String r0, r1, $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        <org.apache.log4j.varia.Roller: java.lang.String host> = r0;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

        <org.apache.log4j.varia.Roller: int port> = $i0;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Second argument ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a valid integer.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.varia.Roller: void usage(java.lang.String)>($r7);

     label4:
        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    static void roll()
    {
        java.io.DataInputStream $r4;
        java.net.Socket $r0;
        org.apache.log4j.Logger $r9, $r14, $r17;
        java.io.DataOutputStream $r2;
        java.lang.StringBuffer $r8, $r10, $r11, $r12, $r16, $r18, $r20, $r21, $r22, $r23;
        int $i0, $i1;
        java.lang.String $r1, $r6, $r7, $r13, $r19, $r24;
        boolean $z0;
        java.io.OutputStream $r3;
        java.io.IOException $r15;
        java.io.InputStream $r5;

     label1:
        $r0 = new java.net.Socket;

        $r1 = <org.apache.log4j.varia.Roller: java.lang.String host>;

        $i0 = <org.apache.log4j.varia.Roller: int port>;

        specialinvoke $r0.<java.net.Socket: void <init>(java.lang.String,int)>($r1, $i0);

        $r2 = new java.io.DataOutputStream;

        $r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke $r2.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r3);

        $r4 = new java.io.DataInputStream;

        $r5 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>();

        specialinvoke $r4.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r5);

        virtualinvoke $r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>("RollOver");

        $r6 = virtualinvoke $r4.<java.io.DataInputStream: java.lang.String readUTF()>();

        $r7 = "OK";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r14 = <org.apache.log4j.varia.Roller: org.apache.log4j.Logger cat>;

        virtualinvoke $r14.<org.apache.log4j.Category: void info(java.lang.Object)>("Roll over signal acknowledged by remote appender.");

        goto label3;

     label2:
        $r9 = <org.apache.log4j.varia.Roller: org.apache.log4j.Logger cat>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected return code ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from remote entity.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<org.apache.log4j.Category: void warn(java.lang.Object)>($r13);

        staticinvoke <java.lang.System: void exit(int)>(2);

     label3:
        goto label5;

     label4:
        $r15 := @caughtexception;

        $r17 = <org.apache.log4j.varia.Roller: org.apache.log4j.Logger cat>;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not send roll signal on host ");

        $r19 = <org.apache.log4j.varia.Roller: java.lang.String host>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" port ");

        $i1 = <org.apache.log4j.varia.Roller: int port>;

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" .");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r17.<org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>($r24, $r15);

        staticinvoke <java.lang.System: void exit(int)>(2);

     label5:
        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.log4j.Logger $r1;
        java.lang.Class $r0, $r2;

        $r0 = <org.apache.log4j.varia.Roller: java.lang.Class class$org$apache$log4j$varia$Roller>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.log4j.varia.Roller: java.lang.Class class$(java.lang.String)>("org.apache.log4j.varia.Roller");

        <org.apache.log4j.varia.Roller: java.lang.Class class$org$apache$log4j$varia$Roller> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.log4j.varia.Roller: java.lang.Class class$org$apache$log4j$varia$Roller>;

     label2:
        $r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>($r2);

        <org.apache.log4j.varia.Roller: org.apache.log4j.Logger cat> = $r1;

        return;
    }
}
