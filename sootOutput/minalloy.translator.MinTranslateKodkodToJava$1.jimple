class minalloy.translator.MinTranslateKodkodToJava$1 extends java.lang.Object implements kodkod.ast.visitor.ReturnVisitor
{

    void <init>()
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private int max(int, int)
    {
        int i0, i1, $i2;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < i1 goto label1;

        $i2 = i0;

        goto label2;

     label1:
        $i2 = i1;

     label2:
        return $i2;
    }

    private int max(int, int, int)
    {
        int i0, i1, i2, $i3;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 < i1 goto label2;

        if i0 < i2 goto label1;

        $i3 = i0;

        goto label4;

     label1:
        $i3 = i2;

        goto label4;

     label2:
        if i1 < i2 goto label3;

        $i3 = i1;

        goto label4;

     label3:
        $i3 = i2;

     label4:
        return $i3;
    }

    public java.lang.Integer visit(kodkod.ast.Relation)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r1;
        java.lang.Integer $r0;
        kodkod.ast.Relation r2;

        r1 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r2 := @parameter0: kodkod.ast.Relation;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        return $r0;
    }

    public java.lang.Integer visit(kodkod.ast.IntConstant)
    {
        kodkod.ast.IntConstant r2;
        minalloy.translator.MinTranslateKodkodToJava$1 r1;
        java.lang.Integer $r0;

        r1 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r2 := @parameter0: kodkod.ast.IntConstant;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        return $r0;
    }

    public java.lang.Integer visit(kodkod.ast.ConstantFormula)
    {
        kodkod.ast.ConstantFormula r2;
        minalloy.translator.MinTranslateKodkodToJava$1 r1;
        java.lang.Integer $r0;

        r1 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r2 := @parameter0: kodkod.ast.ConstantFormula;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        return $r0;
    }

    public java.lang.Integer visit(kodkod.ast.Variable)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r1;
        java.lang.Integer $r0;
        kodkod.ast.Variable r2;

        r1 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r2 := @parameter0: kodkod.ast.Variable;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        return $r0;
    }

    public java.lang.Integer visit(kodkod.ast.ConstantExpression)
    {
        kodkod.ast.ConstantExpression r2;
        minalloy.translator.MinTranslateKodkodToJava$1 r1;
        java.lang.Integer $r0;

        r1 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r2 := @parameter0: kodkod.ast.ConstantExpression;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        return $r0;
    }

    public java.lang.Integer visit(kodkod.ast.NotFormula)
    {
        kodkod.ast.Formula $r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r2;
        java.lang.Integer $r4, $r5;
        kodkod.ast.NotFormula r0;
        int $i0, $i1;
        java.lang.Object $r3;

        r2 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r0 := @parameter0: kodkod.ast.NotFormula;

        $r1 = virtualinvoke r0.<kodkod.ast.NotFormula: kodkod.ast.Formula formula()>();

        $r3 = virtualinvoke $r1.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r2);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i1 = 1 + $i0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r5;
    }

    public java.lang.Integer visit(kodkod.ast.IntToExprCast)
    {
        kodkod.ast.IntExpression $r1;
        kodkod.ast.IntToExprCast r0;
        minalloy.translator.MinTranslateKodkodToJava$1 r2;
        java.lang.Integer $r4, $r5;
        int $i0, $i1;
        java.lang.Object $r3;

        r2 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r0 := @parameter0: kodkod.ast.IntToExprCast;

        $r1 = virtualinvoke r0.<kodkod.ast.IntToExprCast: kodkod.ast.IntExpression intExpr()>();

        $r3 = virtualinvoke $r1.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r2);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i1 = 1 + $i0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r5;
    }

    public java.lang.Integer visit(kodkod.ast.Decl)
    {
        kodkod.ast.Decl r0;
        kodkod.ast.Expression $r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r2;
        java.lang.Integer $r4, $r5;
        int $i0, $i1;
        java.lang.Object $r3;

        r2 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r0 := @parameter0: kodkod.ast.Decl;

        $r1 = virtualinvoke r0.<kodkod.ast.Decl: kodkod.ast.Expression expression()>();

        $r3 = virtualinvoke $r1.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r2);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i1 = 1 + $i0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r5;
    }

    public java.lang.Integer visit(kodkod.ast.ExprToIntCast)
    {
        kodkod.ast.Expression $r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r2;
        java.lang.Integer $r4, $r5;
        kodkod.ast.ExprToIntCast r0;
        int $i0, $i1;
        java.lang.Object $r3;

        r2 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r0 := @parameter0: kodkod.ast.ExprToIntCast;

        $r1 = virtualinvoke r0.<kodkod.ast.ExprToIntCast: kodkod.ast.Expression expression()>();

        $r3 = virtualinvoke $r1.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r2);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i1 = 1 + $i0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r5;
    }

    public java.lang.Integer visit(kodkod.ast.UnaryExpression)
    {
        kodkod.ast.Expression $r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r2;
        java.lang.Integer $r4, $r5;
        kodkod.ast.UnaryExpression r0;
        int $i0, $i1;
        java.lang.Object $r3;

        r2 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r0 := @parameter0: kodkod.ast.UnaryExpression;

        $r1 = virtualinvoke r0.<kodkod.ast.UnaryExpression: kodkod.ast.Expression expression()>();

        $r3 = virtualinvoke $r1.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r2);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i1 = 1 + $i0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r5;
    }

    public java.lang.Integer visit(kodkod.ast.UnaryIntExpression)
    {
        kodkod.ast.IntExpression $r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r2;
        java.lang.Integer $r4, $r5;
        int $i0, $i1;
        java.lang.Object $r3;
        kodkod.ast.UnaryIntExpression r0;

        r2 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r0 := @parameter0: kodkod.ast.UnaryIntExpression;

        $r1 = virtualinvoke r0.<kodkod.ast.UnaryIntExpression: kodkod.ast.IntExpression intExpr()>();

        $r3 = virtualinvoke $r1.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r2);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i1 = 1 + $i0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r5;
    }

    public java.lang.Integer visit(kodkod.ast.MultiplicityFormula)
    {
        kodkod.ast.MultiplicityFormula r0;
        kodkod.ast.Expression $r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r2;
        java.lang.Integer $r4, $r5;
        int $i0, $i1;
        java.lang.Object $r3;

        r2 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r0 := @parameter0: kodkod.ast.MultiplicityFormula;

        $r1 = virtualinvoke r0.<kodkod.ast.MultiplicityFormula: kodkod.ast.Expression expression()>();

        $r3 = virtualinvoke $r1.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r2);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i1 = 1 + $i0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r5;
    }

    public java.lang.Integer visit(kodkod.ast.BinaryExpression)
    {
        kodkod.ast.Expression $r2, $r5;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r4, $r7, $r8;
        kodkod.ast.BinaryExpression r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3, $r6;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.BinaryExpression;

        $r2 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left()>();

        $r3 = virtualinvoke $r2.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right()>();

        $r6 = virtualinvoke $r5.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $i2 = specialinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: int max(int,int)>($i0, $i1);

        $i3 = 1 + $i2;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        return $r8;
    }

    public java.lang.Integer visit(kodkod.ast.ComparisonFormula)
    {
        kodkod.ast.Expression $r2, $r5;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r4, $r7, $r8;
        int $i0, $i1, $i2, $i3;
        kodkod.ast.ComparisonFormula r1;
        java.lang.Object $r3, $r6;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.ComparisonFormula;

        $r2 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression left()>();

        $r3 = virtualinvoke $r2.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression right()>();

        $r6 = virtualinvoke $r5.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $i2 = specialinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: int max(int,int)>($i0, $i1);

        $i3 = 1 + $i2;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        return $r8;
    }

    public java.lang.Integer visit(kodkod.ast.BinaryFormula)
    {
        kodkod.ast.BinaryFormula r1;
        kodkod.ast.Formula $r2, $r5;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r4, $r7, $r8;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3, $r6;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.BinaryFormula;

        $r2 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        $r3 = virtualinvoke $r2.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        $r6 = virtualinvoke $r5.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $i2 = specialinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: int max(int,int)>($i0, $i1);

        $i3 = 1 + $i2;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        return $r8;
    }

    public java.lang.Integer visit(kodkod.ast.BinaryIntExpression)
    {
        kodkod.ast.IntExpression $r2, $r5;
        kodkod.ast.BinaryIntExpression r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r4, $r7, $r8;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3, $r6;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.BinaryIntExpression;

        $r2 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression left()>();

        $r3 = virtualinvoke $r2.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression right()>();

        $r6 = virtualinvoke $r5.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $i2 = specialinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: int max(int,int)>($i0, $i1);

        $i3 = 1 + $i2;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        return $r8;
    }

    public java.lang.Integer visit(kodkod.ast.IntComparisonFormula)
    {
        kodkod.ast.IntExpression $r2, $r5;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r4, $r7, $r8;
        kodkod.ast.IntComparisonFormula r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3, $r6;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.IntComparisonFormula;

        $r2 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression left()>();

        $r3 = virtualinvoke $r2.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression right()>();

        $r6 = virtualinvoke $r5.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $i2 = specialinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: int max(int,int)>($i0, $i1);

        $i3 = 1 + $i2;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        return $r8;
    }

    public java.lang.Integer visit(kodkod.ast.IfExpression)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r4, $r7, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4;
        kodkod.ast.Formula $r2;
        kodkod.ast.Expression $r5, $r8;
        java.lang.Object $r3, $r6, $r9;
        kodkod.ast.IfExpression r1;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.IfExpression;

        $r2 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Formula condition()>();

        $r3 = virtualinvoke $r2.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression thenExpr()>();

        $r6 = virtualinvoke $r5.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r8 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression elseExpr()>();

        $r9 = virtualinvoke $r8.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r10 = (java.lang.Integer) $r9;

        $i2 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $i3 = specialinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: int max(int,int,int)>($i0, $i1, $i2);

        $i4 = 1 + $i3;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        return $r11;
    }

    public java.lang.Integer visit(kodkod.ast.IfIntExpression)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r4, $r7, $r10, $r11;
        kodkod.ast.IfIntExpression r1;
        int $i0, $i1, $i2, $i3, $i4;
        kodkod.ast.IntExpression $r5, $r8;
        kodkod.ast.Formula $r2;
        java.lang.Object $r3, $r6, $r9;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.IfIntExpression;

        $r2 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.Formula condition()>();

        $r3 = virtualinvoke $r2.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression thenExpr()>();

        $r6 = virtualinvoke $r5.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r8 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression elseExpr()>();

        $r9 = virtualinvoke $r8.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r10 = (java.lang.Integer) $r9;

        $i2 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $i3 = specialinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: int max(int,int,int)>($i0, $i1, $i2);

        $i4 = 1 + $i3;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        return $r11;
    }

    public java.lang.Integer visit(kodkod.ast.SumExpression)
    {
        kodkod.ast.IntExpression $r5;
        kodkod.ast.Decls $r2;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r4, $r7, $r8;
        kodkod.ast.SumExpression r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3, $r6;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.SumExpression;

        $r2 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.Decls decls()>();

        $r3 = virtualinvoke $r2.<kodkod.ast.Decls: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.IntExpression intExpr()>();

        $r6 = virtualinvoke $r5.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $i2 = specialinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: int max(int,int)>($i0, $i1);

        $i3 = 1 + $i2;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        return $r8;
    }

    public java.lang.Integer visit(kodkod.ast.QuantifiedFormula)
    {
        kodkod.ast.QuantifiedFormula r1;
        kodkod.ast.Formula $r5;
        kodkod.ast.Decls $r2;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r4, $r7, $r8;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3, $r6;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $r2 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Decls decls()>();

        $r3 = virtualinvoke $r2.<kodkod.ast.Decls: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        $r6 = virtualinvoke $r5.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $i2 = specialinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: int max(int,int)>($i0, $i1);

        $i3 = 1 + $i2;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        return $r8;
    }

    public java.lang.Integer visit(kodkod.ast.Comprehension)
    {
        kodkod.ast.Formula $r5;
        kodkod.ast.Decls $r2;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r4, $r7, $r8;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3, $r6;
        kodkod.ast.Comprehension r1;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.Comprehension;

        $r2 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Decls decls()>();

        $r3 = virtualinvoke $r2.<kodkod.ast.Decls: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Formula formula()>();

        $r6 = virtualinvoke $r5.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $i2 = specialinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: int max(int,int)>($i0, $i1);

        $i3 = 1 + $i2;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        return $r8;
    }

    public java.lang.Integer visit(kodkod.ast.Decls)
    {
        kodkod.ast.Decl $r2;
        kodkod.ast.Decls r0;
        minalloy.translator.MinTranslateKodkodToJava$1 r1;
        java.lang.Integer $r4, $r5;
        int $i0, $i1, i2, i3;
        java.lang.Object $r3;

        r1 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r0 := @parameter0: kodkod.ast.Decls;

        i2 = 0;

        $i0 = virtualinvoke r0.<kodkod.ast.Decls: int size()>();

        i3 = 0;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<kodkod.ast.Decls: kodkod.ast.Decl get(int)>(i3);

        $r3 = virtualinvoke $r2.<kodkod.ast.Decl: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r1);

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        i2 = specialinvoke r1.<minalloy.translator.MinTranslateKodkodToJava$1: int max(int,int)>(i2, $i1);

        i3 = i3 + 1;

     label2:
        if i3 < $i0 goto label1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        return $r5;
    }

    public java.lang.Integer visit(kodkod.ast.ProjectExpression)
    {
        kodkod.ast.ProjectExpression r0;
        kodkod.ast.IntExpression $r7;
        java.util.Iterator $r5;
        kodkod.ast.Expression $r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r2;
        java.lang.Integer $r4, $r9, $r10;
        int $i0, i1;
        java.lang.Object $r3, $r6, $r8;
        boolean $z0;

        r2 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r0 := @parameter0: kodkod.ast.ProjectExpression;

        $r1 = virtualinvoke r0.<kodkod.ast.ProjectExpression: kodkod.ast.Expression expression()>();

        $r3 = virtualinvoke $r1.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r2);

        $r4 = (java.lang.Integer) $r3;

        i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = virtualinvoke r0.<kodkod.ast.ProjectExpression: java.util.Iterator columns()>();

        goto label2;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (kodkod.ast.IntExpression) $r6;

        $r8 = virtualinvoke $r7.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r2);

        $r9 = (java.lang.Integer) $r8;

        $i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        i1 = specialinvoke r2.<minalloy.translator.MinTranslateKodkodToJava$1: int max(int,int)>(i1, $i0);

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        return $r10;
    }

    public java.lang.Integer visit(kodkod.ast.RelationPredicate)
    {
        kodkod.ast.RelationPredicate$Function r2;
        kodkod.ast.Expression $r4, $r7;
        minalloy.translator.MinTranslateKodkodToJava$1 r3;
        java.lang.Integer $r1, $r6, $r9, $r10;
        int $i0, $i1, $i2;
        java.lang.Object $r5, $r8;
        kodkod.ast.RelationPredicate r0;
        boolean $z0;

        r3 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r0 := @parameter0: kodkod.ast.RelationPredicate;

        $z0 = r0 instanceof kodkod.ast.RelationPredicate$Function;

        if $z0 == 0 goto label1;

        r2 = (kodkod.ast.RelationPredicate$Function) r0;

        $r4 = virtualinvoke r2.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression domain()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r3);

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $r7 = virtualinvoke r2.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression range()>();

        $r8 = virtualinvoke $r7.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r3);

        $r9 = (java.lang.Integer) $r8;

        $i1 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $i2 = specialinvoke r3.<minalloy.translator.MinTranslateKodkodToJava$1: int max(int,int)>($i0, $i1);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        return $r10;

     label1:
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        return $r1;
    }

    public java.lang.Integer visit(kodkod.ast.NaryExpression)
    {
        kodkod.ast.Expression $r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r2;
        java.lang.Integer $r4, $r5;
        kodkod.ast.NaryExpression r0;
        int $i0, $i1, $i2, i3, i4;
        java.lang.Object $r3;

        r2 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r0 := @parameter0: kodkod.ast.NaryExpression;

        i3 = 0;

        $i0 = virtualinvoke r0.<kodkod.ast.NaryExpression: int size()>();

        i4 = 0;

        goto label4;

     label1:
        $r1 = virtualinvoke r0.<kodkod.ast.NaryExpression: kodkod.ast.Expression child(int)>(i4);

        $r3 = virtualinvoke $r1.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r2);

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if i4 == 0 goto label2;

        if i3 >= $i1 goto label3;

     label2:
        i3 = $i1;

     label3:
        i4 = i4 + 1;

     label4:
        if i4 < $i0 goto label1;

        $i2 = i3 + 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        return $r5;
    }

    public java.lang.Integer visit(kodkod.ast.NaryIntExpression)
    {
        kodkod.ast.NaryIntExpression r0;
        kodkod.ast.IntExpression $r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r2;
        java.lang.Integer $r4, $r5;
        int $i0, $i1, $i2, i3, i4;
        java.lang.Object $r3;

        r2 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r0 := @parameter0: kodkod.ast.NaryIntExpression;

        i3 = 0;

        $i0 = virtualinvoke r0.<kodkod.ast.NaryIntExpression: int size()>();

        i4 = 0;

        goto label4;

     label1:
        $r1 = virtualinvoke r0.<kodkod.ast.NaryIntExpression: kodkod.ast.IntExpression child(int)>(i4);

        $r3 = virtualinvoke $r1.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r2);

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if i4 == 0 goto label2;

        if i3 >= $i1 goto label3;

     label2:
        i3 = $i1;

     label3:
        i4 = i4 + 1;

     label4:
        if i4 < $i0 goto label1;

        $i2 = i3 + 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        return $r5;
    }

    public java.lang.Integer visit(kodkod.ast.NaryFormula)
    {
        kodkod.ast.Formula $r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r2;
        java.lang.Integer $r4, $r5;
        int $i0, $i1, $i2, i3, i4;
        java.lang.Object $r3;
        kodkod.ast.NaryFormula r0;

        r2 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r0 := @parameter0: kodkod.ast.NaryFormula;

        i3 = 0;

        $i0 = virtualinvoke r0.<kodkod.ast.NaryFormula: int size()>();

        i4 = 0;

        goto label4;

     label1:
        $r1 = virtualinvoke r0.<kodkod.ast.NaryFormula: kodkod.ast.Formula child(int)>(i4);

        $r3 = virtualinvoke $r1.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r2);

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if i4 == 0 goto label2;

        if i3 >= $i1 goto label3;

     label2:
        i3 = $i1;

     label3:
        i4 = i4 + 1;

     label4:
        if i4 < $i0 goto label1;

        $i2 = i3 + 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        return $r5;
    }

    public volatile java.lang.Object visit(kodkod.ast.NaryFormula)
    {
        kodkod.ast.NaryFormula r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.NaryFormula;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.NaryFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NaryIntExpression)
    {
        kodkod.ast.NaryIntExpression r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.NaryIntExpression;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.NaryIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NaryExpression)
    {
        kodkod.ast.NaryExpression r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.NaryExpression;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.NaryExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.RelationPredicate)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        kodkod.ast.RelationPredicate r1;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.RelationPredicate)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ProjectExpression)
    {
        kodkod.ast.ProjectExpression r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.ProjectExpression;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.ProjectExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Decls)
    {
        kodkod.ast.Decls r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.Decls;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.Decls)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Comprehension)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        kodkod.ast.Comprehension r1;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.Comprehension;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.Comprehension)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.QuantifiedFormula)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        kodkod.ast.QuantifiedFormula r1;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.QuantifiedFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.SumExpression)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;
        kodkod.ast.SumExpression r1;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.SumExpression;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.SumExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IfIntExpression)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        kodkod.ast.IfIntExpression r1;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.IfIntExpression;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.IfIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IfExpression)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        kodkod.ast.IfExpression r1;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.IfExpression;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.IfExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IntComparisonFormula)
    {
        kodkod.ast.IntComparisonFormula r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.IntComparisonFormula;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.IntComparisonFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.BinaryIntExpression)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;
        kodkod.ast.BinaryIntExpression r1;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.BinaryIntExpression;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.BinaryIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.BinaryFormula)
    {
        kodkod.ast.BinaryFormula r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.BinaryFormula;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.BinaryFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ComparisonFormula)
    {
        kodkod.ast.ComparisonFormula r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.ComparisonFormula;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.ComparisonFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.BinaryExpression)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        kodkod.ast.BinaryExpression r1;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.BinaryExpression;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.BinaryExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.MultiplicityFormula)
    {
        kodkod.ast.MultiplicityFormula r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.MultiplicityFormula;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.MultiplicityFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.UnaryIntExpression)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        kodkod.ast.UnaryIntExpression r1;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.UnaryIntExpression;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.UnaryIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.UnaryExpression)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;
        kodkod.ast.UnaryExpression r1;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.UnaryExpression;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.UnaryExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ExprToIntCast)
    {
        kodkod.ast.ExprToIntCast r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.ExprToIntCast;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.ExprToIntCast)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Decl)
    {
        kodkod.ast.Decl r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.Decl;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.Decl)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IntToExprCast)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        kodkod.ast.IntToExprCast r1;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.IntToExprCast;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.IntToExprCast)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NotFormula)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;
        kodkod.ast.NotFormula r1;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.NotFormula;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.NotFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ConstantExpression)
    {
        kodkod.ast.ConstantExpression r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.ConstantExpression;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.ConstantExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Variable)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;
        kodkod.ast.Variable r1;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.Variable;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.Variable)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ConstantFormula)
    {
        kodkod.ast.ConstantFormula r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.ConstantFormula;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.ConstantFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IntConstant)
    {
        kodkod.ast.IntConstant r1;
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.IntConstant;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.IntConstant)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Relation)
    {
        minalloy.translator.MinTranslateKodkodToJava$1 r0;
        java.lang.Integer $r2;
        kodkod.ast.Relation r1;

        r0 := @this: minalloy.translator.MinTranslateKodkodToJava$1;

        r1 := @parameter0: kodkod.ast.Relation;

        $r2 = virtualinvoke r0.<minalloy.translator.MinTranslateKodkodToJava$1: java.lang.Integer visit(kodkod.ast.Relation)>(r1);

        return $r2;
    }
}
