public class org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean extends org.springframework.scheduling.concurrent.ExecutorConfigurationSupport implements org.springframework.beans.factory.FactoryBean
{
    private int poolSize;
    private org.springframework.scheduling.concurrent.ScheduledExecutorTask[] scheduledExecutorTasks;
    private boolean continueScheduledExecutionAfterException;
    private boolean exposeUnconfigurableExecutor;
    private java.util.concurrent.ScheduledExecutorService exposedExecutor;

    public void <init>()
    {
        org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean r0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean;

        specialinvoke r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void <init>()>();

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: int poolSize> = 1;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: boolean continueScheduledExecutionAfterException> = 0;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: boolean exposeUnconfigurableExecutor> = 0;

        return;
    }

    public void setPoolSize(int)
    {
        int i0;
        org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean r0;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z0, "\'poolSize\' must be 1 or higher");

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: int poolSize> = i0;

        return;
    }

    public void setScheduledExecutorTasks(org.springframework.scheduling.concurrent.ScheduledExecutorTask[])
    {
        org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean r0;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask[] r1;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean;

        r1 := @parameter0: org.springframework.scheduling.concurrent.ScheduledExecutorTask[];

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: org.springframework.scheduling.concurrent.ScheduledExecutorTask[] scheduledExecutorTasks> = r1;

        return;
    }

    public void setContinueScheduledExecutionAfterException(boolean)
    {
        org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean r0;
        boolean z0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean;

        z0 := @parameter0: boolean;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: boolean continueScheduledExecutionAfterException> = z0;

        return;
    }

    public void setExposeUnconfigurableExecutor(boolean)
    {
        org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean r0;
        boolean z0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean;

        z0 := @parameter0: boolean;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: boolean exposeUnconfigurableExecutor> = z0;

        return;
    }

    protected java.util.concurrent.ExecutorService initializeExecutor(java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)
    {
        org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean r0;
        java.util.concurrent.RejectedExecutionHandler r2;
        int $i0;
        java.util.concurrent.ScheduledExecutorService $r3, $r6;
        java.util.concurrent.ThreadFactory r1;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask[] $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean;

        r1 := @parameter0: java.util.concurrent.ThreadFactory;

        r2 := @parameter1: java.util.concurrent.RejectedExecutionHandler;

        $i0 = r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: int poolSize>;

        $r3 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: java.util.concurrent.ScheduledExecutorService createExecutor(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>($i0, r1, r2);

        $r4 = r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: org.springframework.scheduling.concurrent.ScheduledExecutorTask[] scheduledExecutorTasks>;

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>($r4);

        if $z0 != 0 goto label1;

        $r5 = r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: org.springframework.scheduling.concurrent.ScheduledExecutorTask[] scheduledExecutorTasks>;

        virtualinvoke r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: void registerTasks(org.springframework.scheduling.concurrent.ScheduledExecutorTask[],java.util.concurrent.ScheduledExecutorService)>($r5, $r3);

     label1:
        $z1 = r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: boolean exposeUnconfigurableExecutor>;

        if $z1 == 0 goto label2;

        $r6 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)>($r3);

        goto label3;

     label2:
        $r6 = $r3;

     label3:
        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: java.util.concurrent.ScheduledExecutorService exposedExecutor> = $r6;

        return $r3;
    }

    protected java.util.concurrent.ScheduledExecutorService createExecutor(int, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)
    {
        org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean r3;
        java.util.concurrent.RejectedExecutionHandler r2;
        int i0;
        java.util.concurrent.ScheduledThreadPoolExecutor $r0;
        java.util.concurrent.ThreadFactory r1;

        r3 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.ThreadFactory;

        r2 := @parameter2: java.util.concurrent.RejectedExecutionHandler;

        $r0 = new java.util.concurrent.ScheduledThreadPoolExecutor;

        specialinvoke $r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(i0, r1, r2);

        return $r0;
    }

    protected void registerTasks(org.springframework.scheduling.concurrent.ScheduledExecutorTask[], java.util.concurrent.ScheduledExecutorService)
    {
        long $l1, $l2, $l3, $l4, $l5;
        java.lang.Runnable $r3;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r1;
        int i0, i6;
        java.util.concurrent.ScheduledExecutorService r4;
        boolean $z0, $z1;
        org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean r2;
        java.util.concurrent.TimeUnit $r5, $r6, $r7;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask[] r0;

        r2 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean;

        r0 := @parameter0: org.springframework.scheduling.concurrent.ScheduledExecutorTask[];

        r4 := @parameter1: java.util.concurrent.ScheduledExecutorService;

        i0 = lengthof r0;

        i6 = 0;

        goto label5;

     label1:
        r1 = r0[i6];

        $r3 = virtualinvoke r2.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: java.lang.Runnable getRunnableToSchedule(org.springframework.scheduling.concurrent.ScheduledExecutorTask)>(r1);

        $z0 = virtualinvoke r1.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: boolean isOneTimeTask()>();

        if $z0 == 0 goto label2;

        $l5 = virtualinvoke r1.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long getDelay()>();

        $r7 = virtualinvoke r1.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: java.util.concurrent.TimeUnit getTimeUnit()>();

        interfaceinvoke r4.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r3, $l5, $r7);

        goto label4;

     label2:
        $z1 = virtualinvoke r1.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: boolean isFixedRate()>();

        if $z1 == 0 goto label3;

        $l3 = virtualinvoke r1.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long getDelay()>();

        $l4 = virtualinvoke r1.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long getPeriod()>();

        $r6 = virtualinvoke r1.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: java.util.concurrent.TimeUnit getTimeUnit()>();

        interfaceinvoke r4.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>($r3, $l3, $l4, $r6);

        goto label4;

     label3:
        $l1 = virtualinvoke r1.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long getDelay()>();

        $l2 = virtualinvoke r1.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long getPeriod()>();

        $r5 = virtualinvoke r1.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: java.util.concurrent.TimeUnit getTimeUnit()>();

        interfaceinvoke r4.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>($r3, $l1, $l2, $r5);

     label4:
        i6 = i6 + 1;

     label5:
        if i6 < i0 goto label1;

        return;
    }

    protected java.lang.Runnable getRunnableToSchedule(org.springframework.scheduling.concurrent.ScheduledExecutorTask)
    {
        org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean r0;
        java.lang.Runnable $r2, $r4;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r1;
        org.springframework.util.ErrorHandler $r3, $r5;
        boolean $z0;
        org.springframework.scheduling.support.DelegatingErrorHandlingRunnable $r6;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean;

        r1 := @parameter0: org.springframework.scheduling.concurrent.ScheduledExecutorTask;

        $z0 = r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: boolean continueScheduledExecutionAfterException>;

        if $z0 == 0 goto label1;

        $r6 = new org.springframework.scheduling.support.DelegatingErrorHandlingRunnable;

        $r4 = virtualinvoke r1.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: java.lang.Runnable getRunnable()>();

        $r5 = <org.springframework.scheduling.support.TaskUtils: org.springframework.util.ErrorHandler LOG_AND_SUPPRESS_ERROR_HANDLER>;

        specialinvoke $r6.<org.springframework.scheduling.support.DelegatingErrorHandlingRunnable: void <init>(java.lang.Runnable,org.springframework.util.ErrorHandler)>($r4, $r5);

        goto label2;

     label1:
        $r6 = new org.springframework.scheduling.support.DelegatingErrorHandlingRunnable;

        $r2 = virtualinvoke r1.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: java.lang.Runnable getRunnable()>();

        $r3 = <org.springframework.scheduling.support.TaskUtils: org.springframework.util.ErrorHandler LOG_AND_PROPAGATE_ERROR_HANDLER>;

        specialinvoke $r6.<org.springframework.scheduling.support.DelegatingErrorHandlingRunnable: void <init>(java.lang.Runnable,org.springframework.util.ErrorHandler)>($r2, $r3);

     label2:
        return $r6;
    }

    public java.util.concurrent.ScheduledExecutorService getObject()
    {
        java.util.concurrent.ScheduledExecutorService $r1;
        org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean r0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean;

        $r1 = r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: java.util.concurrent.ScheduledExecutorService exposedExecutor>;

        return $r1;
    }

    public java.lang.Class getObjectType()
    {
        org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean r0;
        java.util.concurrent.ScheduledExecutorService $r1, $r2;
        java.lang.Class $r3;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean;

        $r1 = r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: java.util.concurrent.ScheduledExecutorService exposedExecutor>;

        if $r1 == null goto label1;

        $r2 = r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: java.util.concurrent.ScheduledExecutorService exposedExecutor>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        goto label2;

     label1:
        $r3 = class "Ljava/util/concurrent/ScheduledExecutorService;";

     label2:
        return $r3;
    }

    public boolean isSingleton()
    {
        org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean r0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean;

        return 1;
    }

    public volatile java.lang.Object getObject() throws java.lang.Exception
    {
        java.util.concurrent.ScheduledExecutorService $r1;
        org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean r0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean: java.util.concurrent.ScheduledExecutorService getObject()>();

        return $r1;
    }
}
