public class nu.xom.Comment extends nu.xom.Node
{
    private java.lang.String data;

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.Comment r0;

        r0 := @this: nu.xom.Comment;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<nu.xom.Node: void <init>()>();

        specialinvoke r0.<nu.xom.Comment: void _setValue(java.lang.String)>(r1);

        return;
    }

    public void <init>(nu.xom.Comment)
    {
        java.lang.String $r2;
        nu.xom.Comment r0, r1;

        r0 := @this: nu.xom.Comment;

        r1 := @parameter0: nu.xom.Comment;

        specialinvoke r0.<nu.xom.Node: void <init>()>();

        $r2 = r1.<nu.xom.Comment: java.lang.String data>;

        r0.<nu.xom.Comment: java.lang.String data> = $r2;

        return;
    }

    private void <init>()
    {
        nu.xom.Comment r0;

        r0 := @this: nu.xom.Comment;

        specialinvoke r0.<nu.xom.Node: void <init>()>();

        return;
    }

    static nu.xom.Comment build(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.Comment $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new nu.xom.Comment;

        specialinvoke $r0.<nu.xom.Comment: void <init>()>();

        $r0.<nu.xom.Comment: java.lang.String data> = r1;

        return $r0;
    }

    public final java.lang.String getValue()
    {
        java.lang.String $r1;
        nu.xom.Comment r0;

        r0 := @this: nu.xom.Comment;

        $r1 = r0.<nu.xom.Comment: java.lang.String data>;

        return $r1;
    }

    public void setValue(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.Comment r0;

        r0 := @this: nu.xom.Comment;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<nu.xom.Comment: void _setValue(java.lang.String)>(r1);

        return;
    }

    private void _setValue(java.lang.String)
    {
        nu.xom.IllegalDataException $r5, $r6, $r7;
        int $i0, $i1, $i3, $i5;
        java.lang.String r4;
        nu.xom.Comment r0;
        boolean $z0;

        r0 := @this: nu.xom.Comment;

        r4 := @parameter0: java.lang.String;

        if r4 != null goto label1;

        r4 = "";

        goto label4;

     label1:
        staticinvoke <nu.xom.Verifier: void checkPCDATA(java.lang.String)>(r4);

        $i0 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("--");

        $i3 = (int) -1;

        if $i0 == $i3 goto label2;

        $r5 = new nu.xom.IllegalDataException;

        specialinvoke $r5.<nu.xom.IllegalDataException: void <init>(java.lang.String)>("Comment data contains a double hyphen (--).");

        virtualinvoke $r5.<nu.xom.IllegalDataException: void setData(java.lang.String)>(r4);

        throw $r5;

     label2:
        $i1 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(13);

        $i5 = (int) -1;

        if $i1 == $i5 goto label3;

        $r6 = new nu.xom.IllegalDataException;

        specialinvoke $r6.<nu.xom.IllegalDataException: void <init>(java.lang.String)>("Comment data cannot contain carriage returns.");

        virtualinvoke $r6.<nu.xom.IllegalDataException: void setData(java.lang.String)>(r4);

        throw $r6;

     label3:
        $z0 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>("-");

        if $z0 == 0 goto label4;

        $r7 = new nu.xom.IllegalDataException;

        specialinvoke $r7.<nu.xom.IllegalDataException: void <init>(java.lang.String)>("Comment data ends with a hyphen.");

        virtualinvoke $r7.<nu.xom.IllegalDataException: void setData(java.lang.String)>(r4);

        throw $r7;

     label4:
        r0.<nu.xom.Comment: java.lang.String data> = r4;

        return;
    }

    public final nu.xom.Node getChild(int)
    {
        int i0;
        java.lang.IndexOutOfBoundsException $r0;
        nu.xom.Comment r1;

        r1 := @this: nu.xom.Comment;

        i0 := @parameter0: int;

        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("LeafNodes do not have children");

        throw $r0;
    }

    public final int getChildCount()
    {
        nu.xom.Comment r0;

        r0 := @this: nu.xom.Comment;

        return 0;
    }

    public nu.xom.Node copy()
    {
        java.lang.String $r2;
        nu.xom.Comment $r0, r1;

        r1 := @this: nu.xom.Comment;

        $r0 = new nu.xom.Comment;

        $r2 = r1.<nu.xom.Comment: java.lang.String data>;

        specialinvoke $r0.<nu.xom.Comment: void <init>(java.lang.String)>($r2);

        return $r0;
    }

    public final java.lang.String toXML()
    {
        java.lang.StringBuffer $r0;
        java.lang.String $r2, $r3;
        nu.xom.Comment r1;

        r1 := @this: nu.xom.Comment;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("<!--");

        $r2 = r1.<nu.xom.Comment: java.lang.String data>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-->");

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public final java.lang.String toString()
    {
        java.lang.StringBuffer $r2, $r3, $r6, $r7, $r10, $r11, $r13, $r14, $r17, $r18, $r20, $r21;
        int $i0;
        java.lang.String $r1, $r5, $r8, $r9, $r12, $r16, $r19, $r22;
        nu.xom.Comment r0;
        java.lang.Class $r4, $r15;

        r0 := @this: nu.xom.Comment;

        $r1 = virtualinvoke r0.<nu.xom.Comment: java.lang.String getValue()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 > 40 goto label1;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r15 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r19 = staticinvoke <nu.xom.Text: java.lang.String escapeLineBreaksAndTruncate(java.lang.String)>($r1);

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r22;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r8 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, 35);

        $r9 = staticinvoke <nu.xom.Text: java.lang.String escapeLineBreaksAndTruncate(java.lang.String)>($r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;
    }

    boolean isComment()
    {
        nu.xom.Comment r0;

        r0 := @this: nu.xom.Comment;

        return 1;
    }
}
