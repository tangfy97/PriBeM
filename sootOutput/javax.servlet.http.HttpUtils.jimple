public class javax.servlet.http.HttpUtils extends java.lang.Object
{
    private static final java.lang.String LSTRING_FILE;
    private static java.util.ResourceBundle lStrings;

    public void <init>()
    {
        javax.servlet.http.HttpUtils r0;

        r0 := @this: javax.servlet.http.HttpUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Hashtable parseQueryString(java.lang.String)
    {
        java.lang.String[] r10, r14;
        java.util.StringTokenizer $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i9;
        java.lang.String r0, $r4, $r5, $r6, $r7, $r8, $r11;
        java.util.Hashtable $r16;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r15, $r19;
        java.lang.Object $r9;
        java.lang.StringBuilder $r17;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r15;

     label1:
        $r16 = new java.util.Hashtable;

        specialinvoke $r16.<java.util.Hashtable: void <init>()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = new java.util.StringTokenizer;

        specialinvoke $r18.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r0, "&");

     label2:
        $z0 = virtualinvoke $r18.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label8;

        $r4 = virtualinvoke $r18.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(61);

        $i9 = (int) -1;

        if $i0 != $i9 goto label3;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r19;

     label3:
        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r6 = staticinvoke <javax.servlet.http.HttpUtils: java.lang.String parseName(java.lang.String,java.lang.StringBuilder)>($r5, $r17);

        $i1 = $i0 + 1;

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        $r7 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        $r8 = staticinvoke <javax.servlet.http.HttpUtils: java.lang.String parseName(java.lang.String,java.lang.StringBuilder)>($r7, $r17);

        $z1 = virtualinvoke $r16.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r6);

        if $z1 == 0 goto label6;

        $r9 = virtualinvoke $r16.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r6);

        r10 = (java.lang.String[]) $r9;

        $i3 = lengthof r10;

        $i4 = $i3 + 1;

        r14 = newarray (java.lang.String)[$i4];

        i7 = 0;

     label4:
        $i5 = lengthof r10;

        if i7 >= $i5 goto label5;

        $r11 = r10[i7];

        r14[i7] = $r11;

        i7 = i7 + 1;

        goto label4;

     label5:
        $i6 = lengthof r10;

        r14[$i6] = $r8;

        goto label7;

     label6:
        r14 = newarray (java.lang.String)[1];

        r14[0] = $r8;

     label7:
        virtualinvoke $r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r14);

        goto label2;

     label8:
        return $r16;
    }

    public static java.util.Hashtable parsePostData(int, javax.servlet.ServletInputStream)
    {
        byte[] r1;
        javax.servlet.ServletInputStream r0;
        java.util.ResourceBundle $r4;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String $r2, $r5, $r11, $r14;
        java.util.Hashtable $r3, $r8;
        java.io.IOException $r12;
        java.lang.IllegalArgumentException $r6, $r7, $r10, $r13;
        java.io.UnsupportedEncodingException $r9;

        i0 := @parameter0: int;

        r0 := @parameter1: javax.servlet.ServletInputStream;

        if i0 > 0 goto label01;

        $r8 = new java.util.Hashtable;

        specialinvoke $r8.<java.util.Hashtable: void <init>()>();

        return $r8;

     label01:
        if r0 != null goto label02;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label02:
        r1 = newarray (byte)[i0];

     label03:
        i4 = 0;

     label04:
        $i1 = i0 - i4;

        $i2 = virtualinvoke r0.<javax.servlet.ServletInputStream: int read(byte[],int,int)>(r1, i4, $i1);

        if $i2 > 0 goto label05;

        $r4 = <javax.servlet.http.HttpUtils: java.util.ResourceBundle lStrings>;

        $r5 = virtualinvoke $r4.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("err.io.short_read");

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label05:
        i4 = i4 + $i2;

        $i3 = i0 - i4;

        if $i3 > 0 goto label04;

     label06:
        goto label08;

     label07:
        $r12 := @caughtexception;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke $r12.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label08:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r1, 0, i0, "8859_1");

        $r3 = staticinvoke <javax.servlet.http.HttpUtils: java.util.Hashtable parseQueryString(java.lang.String)>($r2);

     label09:
        return $r3;

     label10:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r9.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

        catch java.io.IOException from label03 to label06 with label07;
        catch java.io.UnsupportedEncodingException from label08 to label09 with label10;
    }

    private static java.lang.String parseName(java.lang.String, java.lang.StringBuilder)
    {
        int $i0, $i2, $i3, $i4, $i6, i7, $i8;
        java.lang.String r1, $r2, $r3, $r5;
        java.lang.StringIndexOutOfBoundsException $r4;
        char $c1, $c5;
        java.lang.NumberFormatException $r6;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder r0;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.StringBuilder;

        virtualinvoke r0.<java.lang.StringBuilder: void setLength(int)>(0);

        i7 = 0;

     label01:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i7 >= $i0 goto label10;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i7);

        $i8 = (int) $c1;

        lookupswitch($i8)
        {
            case 37: goto label03;
            case 43: goto label02;
            default: goto label08;
        };

     label02:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label09;

     label03:
        $i3 = i7 + 1;

        $i2 = i7 + 3;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i3, $i2);

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r3, 16);

        $c5 = (char) $i4;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        i7 = i7 + 2;

     label04:
        goto label09;

     label05:
        $r6 := @caughtexception;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label06:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i7);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $i6 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i6 != 2 goto label07;

        i7 = i7 + 1;

     label07:
        goto label09;

     label08:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

     label09:
        i7 = i7 + 1;

        goto label01;

     label10:
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

        catch java.lang.NumberFormatException from label03 to label04 with label05;
        catch java.lang.StringIndexOutOfBoundsException from label03 to label04 with label06;
    }

    public static java.lang.StringBuffer getRequestURL(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r1;
        java.lang.StringBuffer $r0;
        int $i0, $i1;
        java.lang.String $r2, $r3, $r4;
        boolean $z0, $z1;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getScheme()>();

        $i0 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: int getServerPort()>();

        $r3 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("://");

        $r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getServerName()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z0 == 0 goto label1;

        if $i0 != 80 goto label2;

     label1:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("https");

        if $z1 == 0 goto label3;

        if $i0 == 443 goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $i1 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: int getServerPort()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        return $r0;
    }

    static void <clinit>()
    {
        java.util.ResourceBundle $r0;

        <javax.servlet.http.HttpUtils: java.lang.String LSTRING_FILE> = "javax.servlet.http.LocalStrings";

        $r0 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>("javax.servlet.http.LocalStrings");

        <javax.servlet.http.HttpUtils: java.util.ResourceBundle lStrings> = $r0;

        return;
    }
}
