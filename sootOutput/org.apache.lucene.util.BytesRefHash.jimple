public final class org.apache.lucene.util.BytesRefHash extends java.lang.Object
{
    public static final int DEFAULT_CAPACITY;
    final org.apache.lucene.util.ByteBlockPool pool;
    int[] bytesStart;
    private final org.apache.lucene.util.BytesRef scratch1;
    private int hashSize;
    private int hashHalfSize;
    private int hashMask;
    private int count;
    private int lastCount;
    private int[] ids;
    private final org.apache.lucene.util.BytesRefHash$BytesStartArray bytesStartArray;
    private org.apache.lucene.util.Counter bytesUsed;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.lucene.util.ByteBlockPool $r1;
        org.apache.lucene.util.ByteBlockPool$DirectAllocator $r2;
        org.apache.lucene.util.BytesRefHash r0;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        $r1 = new org.apache.lucene.util.ByteBlockPool;

        $r2 = new org.apache.lucene.util.ByteBlockPool$DirectAllocator;

        specialinvoke $r2.<org.apache.lucene.util.ByteBlockPool$DirectAllocator: void <init>()>();

        specialinvoke $r1.<org.apache.lucene.util.ByteBlockPool: void <init>(org.apache.lucene.util.ByteBlockPool$Allocator)>($r2);

        specialinvoke r0.<org.apache.lucene.util.BytesRefHash: void <init>(org.apache.lucene.util.ByteBlockPool)>($r1);

        return;
    }

    public void <init>(org.apache.lucene.util.ByteBlockPool)
    {
        org.apache.lucene.util.BytesRefHash$DirectBytesStartArray $r2;
        org.apache.lucene.util.ByteBlockPool r1;
        org.apache.lucene.util.BytesRefHash r0;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        r1 := @parameter0: org.apache.lucene.util.ByteBlockPool;

        $r2 = new org.apache.lucene.util.BytesRefHash$DirectBytesStartArray;

        specialinvoke $r2.<org.apache.lucene.util.BytesRefHash$DirectBytesStartArray: void <init>(int)>(16);

        specialinvoke r0.<org.apache.lucene.util.BytesRefHash: void <init>(org.apache.lucene.util.ByteBlockPool,int,org.apache.lucene.util.BytesRefHash$BytesStartArray)>(r1, 16, $r2);

        return;
    }

    public void <init>(org.apache.lucene.util.ByteBlockPool, int, org.apache.lucene.util.BytesRefHash$BytesStartArray)
    {
        org.apache.lucene.util.BytesRefHash r0;
        org.apache.lucene.util.BytesRefHash$BytesStartArray r5;
        long $l8;
        org.apache.lucene.util.ByteBlockPool r2;
        int[] $r3, $r4, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10, $i12;
        org.apache.lucene.util.BytesRef $r10;
        org.apache.lucene.util.Counter $r7, $r8, $r9;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        r2 := @parameter0: org.apache.lucene.util.ByteBlockPool;

        i0 := @parameter1: int;

        r5 := @parameter2: org.apache.lucene.util.BytesRefHash$BytesStartArray;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r10 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r10.<org.apache.lucene.util.BytesRef: void <init>()>();

        r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.BytesRef scratch1> = $r10;

        $i10 = (int) -1;

        r0.<org.apache.lucene.util.BytesRefHash: int lastCount> = $i10;

        r0.<org.apache.lucene.util.BytesRefHash: int hashSize> = i0;

        $i1 = r0.<org.apache.lucene.util.BytesRefHash: int hashSize>;

        $i2 = $i1 >> 1;

        r0.<org.apache.lucene.util.BytesRefHash: int hashHalfSize> = $i2;

        $i3 = r0.<org.apache.lucene.util.BytesRefHash: int hashSize>;

        $i4 = $i3 - 1;

        r0.<org.apache.lucene.util.BytesRefHash: int hashMask> = $i4;

        r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.ByteBlockPool pool> = r2;

        $i5 = r0.<org.apache.lucene.util.BytesRefHash: int hashSize>;

        $r3 = newarray (int)[$i5];

        r0.<org.apache.lucene.util.BytesRefHash: int[] ids> = $r3;

        $r4 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $i12 = (int) -1;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r4, $i12);

        r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.BytesRefHash$BytesStartArray bytesStartArray> = r5;

        $r6 = virtualinvoke r5.<org.apache.lucene.util.BytesRefHash$BytesStartArray: int[] init()>();

        r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart> = $r6;

        $r7 = virtualinvoke r5.<org.apache.lucene.util.BytesRefHash$BytesStartArray: org.apache.lucene.util.Counter bytesUsed()>();

        if $r7 != null goto label1;

        $r9 = staticinvoke <org.apache.lucene.util.Counter: org.apache.lucene.util.Counter newCounter()>();

        goto label2;

     label1:
        $r9 = virtualinvoke r5.<org.apache.lucene.util.BytesRefHash$BytesStartArray: org.apache.lucene.util.Counter bytesUsed()>();

     label2:
        r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.Counter bytesUsed> = $r9;

        $r8 = r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.Counter bytesUsed>;

        $i6 = r0.<org.apache.lucene.util.BytesRefHash: int hashSize>;

        $i7 = $i6 * 4;

        $l8 = (long) $i7;

        virtualinvoke $r8.<org.apache.lucene.util.Counter: long addAndGet(long)>($l8);

        return;
    }

    public int size()
    {
        int $i0;
        org.apache.lucene.util.BytesRefHash r0;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        $i0 = r0.<org.apache.lucene.util.BytesRefHash: int count>;

        return $i0;
    }

    public org.apache.lucene.util.BytesRef get(int, org.apache.lucene.util.BytesRef)
    {
        org.apache.lucene.util.BytesRefHash r0;
        java.lang.AssertionError $r5, $r12;
        org.apache.lucene.util.ByteBlockPool $r3;
        int[] $r2, $r4, $r8, $r11;
        int i0, $i1, $i2, $i3;
        java.lang.String $r10;
        boolean $z0, $z1;
        org.apache.lucene.util.BytesRef r1;
        java.lang.StringBuilder $r6, $r7, $r9;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.lucene.util.BytesRef;

        $z0 = <org.apache.lucene.util.BytesRefHash: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r11 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        if $r11 != null goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>("bytesStart is null - not initialized");

        throw $r12;

     label1:
        $z1 = <org.apache.lucene.util.BytesRefHash: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r4 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i2 = lengthof $r4;

        if i0 < $i2 goto label2;

        $r5 = new java.lang.AssertionError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bytesID exceeds byteStart len: ");

        $r8 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i3 = lengthof $r8;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r5;

     label2:
        $r3 = r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.ByteBlockPool pool>;

        $r2 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i1 = $r2[i0];

        virtualinvoke $r3.<org.apache.lucene.util.ByteBlockPool: void setBytesRef(org.apache.lucene.util.BytesRef,int)>(r1, $i1);

        return r1;
    }

    int[] compact()
    {
        org.apache.lucene.util.BytesRefHash r0;
        java.lang.AssertionError $r9, $r10;
        int[] $r1, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, $i8, $i10;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        $z0 = <org.apache.lucene.util.BytesRefHash: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r7 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        if $r7 != null goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>("bytesStart is null - not initialized");

        throw $r9;

     label1:
        i4 = 0;

        i5 = 0;

     label2:
        $i6 = r0.<org.apache.lucene.util.BytesRefHash: int hashSize>;

        if i5 >= $i6 goto label5;

        $r3 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $i2 = $r3[i5];

        $i8 = (int) -1;

        if $i2 == $i8 goto label4;

        if i4 >= i5 goto label3;

        $r5 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $r4 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $i3 = $r4[i5];

        $r5[i4] = $i3;

        $r6 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $i10 = (int) -1;

        $r6[i5] = $i10;

     label3:
        i4 = i4 + 1;

     label4:
        i5 = i5 + 1;

        goto label2;

     label5:
        $z1 = <org.apache.lucene.util.BytesRefHash: boolean $assertionsDisabled>;

        if $z1 != 0 goto label6;

        $i1 = r0.<org.apache.lucene.util.BytesRefHash: int count>;

        if i4 == $i1 goto label6;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label6:
        $i0 = r0.<org.apache.lucene.util.BytesRefHash: int count>;

        r0.<org.apache.lucene.util.BytesRefHash: int lastCount> = $i0;

        $r1 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        return $r1;
    }

    public int[] sort(java.util.Comparator)
    {
        int[] $r1;
        org.apache.lucene.util.BytesRefHash r0;
        int $i0, $i1;
        org.apache.lucene.util.BytesRefHash$1 $r2;
        java.util.Comparator r3;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        r3 := @parameter0: java.util.Comparator;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.BytesRefHash: int[] compact()>();

        $r2 = new org.apache.lucene.util.BytesRefHash$1;

        specialinvoke $r2.<org.apache.lucene.util.BytesRefHash$1: void <init>(org.apache.lucene.util.BytesRefHash,int[],java.util.Comparator)>(r0, $r1, r3);

        $i0 = r0.<org.apache.lucene.util.BytesRefHash: int count>;

        $i1 = $i0 - 1;

        virtualinvoke $r2.<org.apache.lucene.util.BytesRefHash$1: void quickSort(int,int)>(0, $i1);

        return $r1;
    }

    private boolean equals(int, org.apache.lucene.util.BytesRef)
    {
        org.apache.lucene.util.BytesRef $r2, r4, $r5;
        org.apache.lucene.util.BytesRefHash r0;
        org.apache.lucene.util.ByteBlockPool $r3;
        int[] $r1;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        i0 := @parameter0: int;

        r4 := @parameter1: org.apache.lucene.util.BytesRef;

        $r3 = r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.ByteBlockPool pool>;

        $r2 = r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.BytesRef scratch1>;

        $r1 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i1 = $r1[i0];

        virtualinvoke $r3.<org.apache.lucene.util.ByteBlockPool: void setBytesRef(org.apache.lucene.util.BytesRef,int)>($r2, $i1);

        $r5 = r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.BytesRef scratch1>;

        $z0 = virtualinvoke $r5.<org.apache.lucene.util.BytesRef: boolean bytesEquals(org.apache.lucene.util.BytesRef)>(r4);

        return $z0;
    }

    private boolean shrink(int)
    {
        org.apache.lucene.util.BytesRefHash r0;
        long $l5;
        int[] $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, i9, $i10, i11, $i13;
        org.apache.lucene.util.Counter $r1;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        i9 := @parameter0: int;

        i11 = r0.<org.apache.lucene.util.BytesRefHash: int hashSize>;

     label1:
        if i11 < 8 goto label2;

        $i10 = i11 / 4;

        if $i10 <= i9 goto label2;

        i11 = i11 / 2;

        goto label1;

     label2:
        $i0 = r0.<org.apache.lucene.util.BytesRefHash: int hashSize>;

        if i11 == $i0 goto label3;

        $r1 = r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.Counter bytesUsed>;

        $i1 = r0.<org.apache.lucene.util.BytesRefHash: int hashSize>;

        $i2 = $i1 - i11;

        $i3 = neg $i2;

        $i4 = 4 * $i3;

        $l5 = (long) $i4;

        virtualinvoke $r1.<org.apache.lucene.util.Counter: long addAndGet(long)>($l5);

        r0.<org.apache.lucene.util.BytesRefHash: int hashSize> = i11;

        $i6 = r0.<org.apache.lucene.util.BytesRefHash: int hashSize>;

        $r2 = newarray (int)[$i6];

        r0.<org.apache.lucene.util.BytesRefHash: int[] ids> = $r2;

        $r3 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $i13 = (int) -1;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r3, $i13);

        $i7 = i11 / 2;

        r0.<org.apache.lucene.util.BytesRefHash: int hashHalfSize> = $i7;

        $i8 = i11 - 1;

        r0.<org.apache.lucene.util.BytesRefHash: int hashMask> = $i8;

        return 1;

     label3:
        return 0;
    }

    public void clear(boolean)
    {
        org.apache.lucene.util.BytesRefHash r0;
        org.apache.lucene.util.BytesRefHash$BytesStartArray $r1;
        org.apache.lucene.util.ByteBlockPool $r4;
        int[] $r2, $r3;
        int $i0, $i1, $i2, $i4, $i6;
        boolean z0, $z1;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        z0 := @parameter0: boolean;

        $i0 = r0.<org.apache.lucene.util.BytesRefHash: int count>;

        r0.<org.apache.lucene.util.BytesRefHash: int lastCount> = $i0;

        r0.<org.apache.lucene.util.BytesRefHash: int count> = 0;

        if z0 == 0 goto label1;

        $r4 = r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.ByteBlockPool pool>;

        virtualinvoke $r4.<org.apache.lucene.util.ByteBlockPool: void reset(boolean,boolean)>(0, 0);

     label1:
        $r1 = r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.BytesRefHash$BytesStartArray bytesStartArray>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.util.BytesRefHash$BytesStartArray: int[] clear()>();

        r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart> = $r2;

        $i1 = r0.<org.apache.lucene.util.BytesRefHash: int lastCount>;

        $i4 = (int) -1;

        if $i1 == $i4 goto label2;

        $i2 = r0.<org.apache.lucene.util.BytesRefHash: int lastCount>;

        $z1 = specialinvoke r0.<org.apache.lucene.util.BytesRefHash: boolean shrink(int)>($i2);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r3 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $i6 = (int) -1;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r3, $i6);

        return;
    }

    public void clear()
    {
        org.apache.lucene.util.BytesRefHash r0;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        virtualinvoke r0.<org.apache.lucene.util.BytesRefHash: void clear(boolean)>(1);

        return;
    }

    public void close()
    {
        org.apache.lucene.util.Counter $r1;
        org.apache.lucene.util.BytesRefHash r0;
        int $i0, $i1, $i2;
        long $l3;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        virtualinvoke r0.<org.apache.lucene.util.BytesRefHash: void clear(boolean)>(1);

        r0.<org.apache.lucene.util.BytesRefHash: int[] ids> = null;

        $r1 = r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.Counter bytesUsed>;

        $i0 = r0.<org.apache.lucene.util.BytesRefHash: int hashSize>;

        $i1 = neg $i0;

        $i2 = 4 * $i1;

        $l3 = (long) $i2;

        virtualinvoke $r1.<org.apache.lucene.util.Counter: long addAndGet(long)>($l3);

        return;
    }

    public int add(org.apache.lucene.util.BytesRef)
    {
        org.apache.lucene.util.BytesRef r1;
        org.apache.lucene.util.BytesRefHash r0;
        int $i0, $i1;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        r1 := @parameter0: org.apache.lucene.util.BytesRef;

        $i0 = virtualinvoke r1.<org.apache.lucene.util.BytesRef: int hashCode()>();

        $i1 = virtualinvoke r0.<org.apache.lucene.util.BytesRefHash: int add(org.apache.lucene.util.BytesRef,int)>(r1, $i0);

        return $i1;
    }

    public int add(org.apache.lucene.util.BytesRef, int)
    {
        byte[] $r8, $r13, $r31;
        org.apache.lucene.util.BytesRefHash r1;
        byte $b12, $b15, $b27;
        java.lang.StringBuilder $r16, $r17, $r24, $r25, $r26, $r28, $r34, $r35, $r42, $r44, $r46;
        java.lang.AssertionError $r41, $r45, $r47, $r48;
        java.lang.String $r18, $r29, $r36;
        org.apache.lucene.util.BytesRefHash$BytesStartArray $r19;
        int[] $r2, $r6, $r9, $r10, $r20, $r21, $r27, $r37, $r39;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.util.BytesRef r0;
        org.apache.lucene.util.ByteBlockPool $r3, $r4, $r5, $r7, $r12, $r30, $r40;
        org.apache.lucene.util.BytesRefHash$MaxBytesLengthExceededException $r43;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i47, $i49, $i51, $i53;

        r1 := @this: org.apache.lucene.util.BytesRefHash;

        r0 := @parameter0: org.apache.lucene.util.BytesRef;

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.BytesRefHash: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r37 = r1.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        if $r37 != null goto label01;

        $r41 = new java.lang.AssertionError;

        specialinvoke $r41.<java.lang.AssertionError: void <init>(java.lang.Object)>("Bytesstart is null - not initialized");

        throw $r41;

     label01:
        $i40 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $i1 = specialinvoke r1.<org.apache.lucene.util.BytesRefHash: int findHash(org.apache.lucene.util.BytesRef,int)>(r0, i0);

        $r2 = r1.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $i41 = $r2[$i1];

        $i47 = (int) -1;

        if $i41 != $i47 goto label10;

        $i4 = r0.<org.apache.lucene.util.BytesRef: int length>;

        i5 = 2 + $i4;

        $r3 = r1.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.ByteBlockPool pool>;

        $i6 = $r3.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        $i7 = i5 + $i6;

        $i49 = (int) 32768;

        if $i7 <= $i49 goto label03;

        $i51 = (int) 32768;

        if i5 <= $i51 goto label02;

        $r43 = new org.apache.lucene.util.BytesRefHash$MaxBytesLengthExceededException;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bytes can be at most 32766 in length; got ");

        $i39 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i39);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<org.apache.lucene.util.BytesRefHash$MaxBytesLengthExceededException: void <init>(java.lang.String)>($r36);

        throw $r43;

     label02:
        $r30 = r1.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.ByteBlockPool pool>;

        virtualinvoke $r30.<org.apache.lucene.util.ByteBlockPool: void nextBuffer()>();

     label03:
        $r4 = r1.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.ByteBlockPool pool>;

        $r31 = $r4.<org.apache.lucene.util.ByteBlockPool: byte[] buffer>;

        $r5 = r1.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.ByteBlockPool pool>;

        $i38 = $r5.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        $i9 = r1.<org.apache.lucene.util.BytesRefHash: int count>;

        $r6 = r1.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i8 = lengthof $r6;

        if $i9 < $i8 goto label04;

        $r19 = r1.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.BytesRefHash$BytesStartArray bytesStartArray>;

        $r20 = virtualinvoke $r19.<org.apache.lucene.util.BytesRefHash$BytesStartArray: int[] grow()>();

        r1.<org.apache.lucene.util.BytesRefHash: int[] bytesStart> = $r20;

        $z3 = <org.apache.lucene.util.BytesRefHash: boolean $assertionsDisabled>;

        if $z3 != 0 goto label04;

        $i35 = r1.<org.apache.lucene.util.BytesRefHash: int count>;

        $r21 = r1.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i33 = lengthof $r21;

        $i34 = $i33 + 1;

        if $i35 < $i34 goto label04;

        $r45 = new java.lang.AssertionError;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("count: ");

        $i36 = r1.<org.apache.lucene.util.BytesRefHash: int count>;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i36);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" len: ");

        $r27 = r1.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i37 = lengthof $r27;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i37);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.AssertionError: void <init>(java.lang.Object)>($r29);

        throw $r45;

     label04:
        $i42 = r1.<org.apache.lucene.util.BytesRefHash: int count>;

        $i43 = $i42 + 1;

        r1.<org.apache.lucene.util.BytesRefHash: int count> = $i43;

        $r39 = r1.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $r40 = r1.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.ByteBlockPool pool>;

        $i44 = $r40.<org.apache.lucene.util.ByteBlockPool: int byteOffset>;

        $i45 = $i38 + $i44;

        $r39[$i42] = $i45;

        if $i40 >= 128 goto label06;

        $b27 = (byte) $i40;

        $r31[$i38] = $b27;

        $r12 = r1.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.ByteBlockPool pool>;

        $i29 = $r12.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        $i28 = $i40 + 1;

        $i30 = $i29 + $i28;

        $r12.<org.apache.lucene.util.ByteBlockPool: int byteUpto> = $i30;

        $z2 = <org.apache.lucene.util.BytesRefHash: boolean $assertionsDisabled>;

        if $z2 != 0 goto label05;

        if $i40 >= 0 goto label05;

        $r47 = new java.lang.AssertionError;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Length must be positive: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i40);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.lang.AssertionError: void <init>(java.lang.Object)>($r18);

        throw $r47;

     label05:
        $r13 = r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i32 = r0.<org.apache.lucene.util.BytesRef: int offset>;

        $i31 = $i38 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, $i32, $r31, $i31, $i40);

        goto label07;

     label06:
        $i10 = $i40 & 127;

        $i11 = 128 | $i10;

        $b12 = (byte) $i11;

        $r31[$i38] = $b12;

        $i16 = $i38 + 1;

        $i13 = $i40 >> 7;

        $i14 = $i13 & 255;

        $b15 = (byte) $i14;

        $r31[$i16] = $b15;

        $r7 = r1.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.ByteBlockPool pool>;

        $i18 = $r7.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        $i17 = $i40 + 2;

        $i19 = $i18 + $i17;

        $r7.<org.apache.lucene.util.ByteBlockPool: int byteUpto> = $i19;

        $r8 = r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i21 = r0.<org.apache.lucene.util.BytesRef: int offset>;

        $i20 = $i38 + 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i21, $r31, $i20, $i40);

     label07:
        $z1 = <org.apache.lucene.util.BytesRefHash: boolean $assertionsDisabled>;

        if $z1 != 0 goto label08;

        $r10 = r1.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $i26 = $r10[$i1];

        $i53 = (int) -1;

        if $i26 == $i53 goto label08;

        $r48 = new java.lang.AssertionError;

        specialinvoke $r48.<java.lang.AssertionError: void <init>()>();

        throw $r48;

     label08:
        $r9 = r1.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $r9[$i1] = $i42;

        $i23 = r1.<org.apache.lucene.util.BytesRefHash: int count>;

        $i22 = r1.<org.apache.lucene.util.BytesRefHash: int hashHalfSize>;

        if $i23 != $i22 goto label09;

        $i24 = r1.<org.apache.lucene.util.BytesRefHash: int hashSize>;

        $i25 = 2 * $i24;

        specialinvoke r1.<org.apache.lucene.util.BytesRefHash: void rehash(int,boolean)>($i25, 1);

     label09:
        return $i42;

     label10:
        $i2 = $i41 + 1;

        $i3 = neg $i2;

        return $i3;
    }

    public int find(org.apache.lucene.util.BytesRef)
    {
        org.apache.lucene.util.BytesRef r1;
        org.apache.lucene.util.BytesRefHash r0;
        int $i0, $i1;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        r1 := @parameter0: org.apache.lucene.util.BytesRef;

        $i0 = virtualinvoke r1.<org.apache.lucene.util.BytesRef: int hashCode()>();

        $i1 = virtualinvoke r0.<org.apache.lucene.util.BytesRefHash: int find(org.apache.lucene.util.BytesRef,int)>(r1, $i0);

        return $i1;
    }

    public int find(org.apache.lucene.util.BytesRef, int)
    {
        int[] $r2;
        org.apache.lucene.util.BytesRef r1;
        org.apache.lucene.util.BytesRefHash r0;
        int i0, $i1, $i2;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        r1 := @parameter0: org.apache.lucene.util.BytesRef;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $i1 = specialinvoke r0.<org.apache.lucene.util.BytesRefHash: int findHash(org.apache.lucene.util.BytesRef,int)>(r1, i0);

        $i2 = $r2[$i1];

        return $i2;
    }

    private final int findHash(org.apache.lucene.util.BytesRef, int)
    {
        org.apache.lucene.util.BytesRefHash r0;
        java.lang.AssertionError $r6;
        int[] $r1, $r3, $r4;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, $i13, $i15;
        boolean $z0, $z1, $z2;
        org.apache.lucene.util.BytesRef r2;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        r2 := @parameter0: org.apache.lucene.util.BytesRef;

        i10 := @parameter1: int;

        $z0 = <org.apache.lucene.util.BytesRefHash: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        if $r4 != null goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("bytesStart is null - not initialized");

        throw $r6;

     label1:
        $i0 = r0.<org.apache.lucene.util.BytesRefHash: int hashMask>;

        $i8 = i10 & $i0;

        i11 = $i8;

        $r1 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $i9 = $r1[$i8];

        $i13 = (int) -1;

        if $i9 == $i13 goto label3;

        $z1 = specialinvoke r0.<org.apache.lucene.util.BytesRefHash: boolean equals(int,org.apache.lucene.util.BytesRef)>($i9, r2);

        if $z1 != 0 goto label3;

        $i1 = i10 >> 8;

        $i2 = $i1 + i10;

        i3 = $i2 | 1;

     label2:
        $i5 = i10 + i3;

        i10 = $i5;

        $i4 = r0.<org.apache.lucene.util.BytesRefHash: int hashMask>;

        $i6 = $i5 & $i4;

        i11 = $i6;

        $r3 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $i7 = $r3[$i6];

        $i15 = (int) -1;

        if $i7 == $i15 goto label3;

        $z2 = specialinvoke r0.<org.apache.lucene.util.BytesRefHash: boolean equals(int,org.apache.lucene.util.BytesRef)>($i7, r2);

        if $z2 == 0 goto label2;

     label3:
        return i11;
    }

    public int addByPoolOffset(int)
    {
        org.apache.lucene.util.BytesRefHash r0;
        org.apache.lucene.util.BytesRefHash$BytesStartArray $r6;
        int[] $r1, $r2, $r3, $r4, $r7, $r8, $r14, $r17, $r18, $r19, $r20, $r22;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r11, $r12, $r13, $r15, $r24;
        java.lang.AssertionError $r23, $r25, $r26;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, $i30, $i31, $i33, $i35, $i37, $i39;
        java.lang.String $r16;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.BytesRefHash: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r20 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        if $r20 != null goto label1;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>(java.lang.Object)>("Bytesstart is null - not initialized");

        throw $r23;

     label1:
        i27 = i0;

        $i1 = r0.<org.apache.lucene.util.BytesRefHash: int hashMask>;

        $i25 = i0 & $i1;

        i28 = $i25;

        $r1 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $i26 = $r1[$i25];

        i29 = $i26;

        $i33 = (int) -1;

        if $i26 == $i33 goto label3;

        $r17 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i16 = $r17[$i26];

        if $i16 == i0 goto label3;

        $i17 = i0 >> 8;

        $i18 = $i17 + i0;

        i19 = $i18 | 1;

     label2:
        $i22 = i27 + i19;

        i27 = $i22;

        $i20 = r0.<org.apache.lucene.util.BytesRefHash: int hashMask>;

        $i23 = $i22 & $i20;

        i28 = $i23;

        $r18 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $i24 = $r18[$i23];

        i29 = $i24;

        $i35 = (int) -1;

        if $i24 == $i35 goto label3;

        $r19 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i21 = $r19[$i24];

        if $i21 != i0 goto label2;

     label3:
        $i37 = (int) -1;

        if i29 != $i37 goto label7;

        $i5 = r0.<org.apache.lucene.util.BytesRefHash: int count>;

        $r2 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i4 = lengthof $r2;

        if $i5 < $i4 goto label4;

        $r6 = r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.BytesRefHash$BytesStartArray bytesStartArray>;

        $r7 = virtualinvoke $r6.<org.apache.lucene.util.BytesRefHash$BytesStartArray: int[] grow()>();

        r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart> = $r7;

        $z1 = <org.apache.lucene.util.BytesRefHash: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        $i13 = r0.<org.apache.lucene.util.BytesRefHash: int count>;

        $r8 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i11 = lengthof $r8;

        $i12 = $i11 + 1;

        if $i13 < $i12 goto label4;

        $r25 = new java.lang.AssertionError;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("count: ");

        $i14 = r0.<org.apache.lucene.util.BytesRefHash: int count>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" len: ");

        $r14 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i15 = lengthof $r14;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw $r25;

     label4:
        $i30 = r0.<org.apache.lucene.util.BytesRefHash: int count>;

        $i31 = $i30 + 1;

        r0.<org.apache.lucene.util.BytesRefHash: int count> = $i31;

        $r22 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $r22[$i30] = i0;

        $z2 = <org.apache.lucene.util.BytesRefHash: boolean $assertionsDisabled>;

        if $z2 != 0 goto label5;

        $r4 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $i10 = $r4[i28];

        $i39 = (int) -1;

        if $i10 == $i39 goto label5;

        $r26 = new java.lang.AssertionError;

        specialinvoke $r26.<java.lang.AssertionError: void <init>()>();

        throw $r26;

     label5:
        $r3 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $r3[i28] = $i30;

        $i7 = r0.<org.apache.lucene.util.BytesRefHash: int count>;

        $i6 = r0.<org.apache.lucene.util.BytesRefHash: int hashHalfSize>;

        if $i7 != $i6 goto label6;

        $i8 = r0.<org.apache.lucene.util.BytesRefHash: int hashSize>;

        $i9 = 2 * $i8;

        specialinvoke r0.<org.apache.lucene.util.BytesRefHash: void rehash(int,boolean)>($i9, 0);

     label6:
        return $i30;

     label7:
        $i2 = i29 + 1;

        $i3 = neg $i2;

        return $i3;
    }

    private void rehash(int, boolean)
    {
        byte[] r11;
        org.apache.lucene.util.BytesRefHash r0;
        byte $b18, $b20, $b22, $b25, $b28;
        int[] r2, $r3, $r5, $r6, $r8;
        boolean z0, $z1;
        byte[][] $r10;
        org.apache.lucene.util.Counter $r1, $r4;
        long $l3, $l8;
        java.lang.AssertionError $r12;
        org.apache.lucene.util.ByteBlockPool $r9;
        short $s19, $s23, $s43, $s44;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, $i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i21, $i24, $i26, $i27, $i29, $i30, i31, i32, i33, i34, i35, i36, i37, i38, $i40, $i42, $i45, $i46, $i47, $i49, $i51;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 = i0 - 1;

        $r1 = r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.Counter bytesUsed>;

        $i2 = 4 * i0;

        $l3 = (long) $i2;

        virtualinvoke $r1.<org.apache.lucene.util.Counter: long addAndGet(long)>($l3);

        r2 = newarray (int)[i0];

        $i40 = (int) -1;

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r2, $i40);

        i31 = 0;

     label01:
        $i4 = r0.<org.apache.lucene.util.BytesRefHash: int hashSize>;

        if i31 >= $i4 goto label12;

        $r5 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        i10 = $r5[i31];

        $i42 = (int) -1;

        if i10 == $i42 goto label11;

        if z0 == 0 goto label06;

        $r8 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        i32 = $r8[i10];

        i33 = i32 & 32767;

        $r9 = r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.ByteBlockPool pool>;

        $r10 = $r9.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        $i17 = i32 >> 15;

        r11 = $r10[$i17];

        i34 = 0;

        $b18 = r11[i33];

        $s43 = (short) $b18;

        $s19 = $s43 & 128;

        if $s19 != 0 goto label02;

        i35 = r11[i33];

        i36 = i33 + 1;

        goto label03;

     label02:
        $b20 = r11[i33];

        $b25 = $b20 & 127;

        $i21 = i33 + 1;

        $b22 = r11[$i21];

        $s44 = (short) $b22;

        $s23 = $s44 & 255;

        $i45 = (int) $s23;

        $i24 = $i45 << 7;

        $i46 = (int) $b25;

        i35 = $i46 + $i24;

        i36 = i33 + 2;

     label03:
        $i30 = i36 + i35;

     label04:
        if i36 >= $i30 goto label05;

        $i29 = 31 * i34;

        $i27 = i36;

        i36 = i36 + 1;

        $b28 = r11[$i27];

        $i47 = (int) $b28;

        i34 = $i29 + $i47;

        goto label04;

     label05:
        goto label07;

     label06:
        $r6 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        i34 = $r6[i10];

     label07:
        $i26 = i34 & i1;

        i37 = $i26;

        $z1 = <org.apache.lucene.util.BytesRefHash: boolean $assertionsDisabled>;

        if $z1 != 0 goto label08;

        if $i26 >= 0 goto label08;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label08:
        $i11 = r2[$i26];

        $i49 = (int) -1;

        if $i11 == $i49 goto label10;

        $i12 = i34 >> 8;

        $i13 = $i12 + i34;

        i38 = $i13 | 1;

     label09:
        $i15 = i34 + i38;

        i34 = $i15;

        $i16 = $i15 & i1;

        i37 = $i16;

        $i14 = r2[$i16];

        $i51 = (int) -1;

        if $i14 != $i51 goto label09;

     label10:
        r2[i37] = i10;

     label11:
        i31 = i31 + 1;

        goto label01;

     label12:
        r0.<org.apache.lucene.util.BytesRefHash: int hashMask> = i1;

        $r4 = r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.Counter bytesUsed>;

        $r3 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        $i5 = lengthof $r3;

        $i6 = neg $i5;

        $i7 = 4 * $i6;

        $l8 = (long) $i7;

        virtualinvoke $r4.<org.apache.lucene.util.Counter: long addAndGet(long)>($l8);

        r0.<org.apache.lucene.util.BytesRefHash: int[] ids> = r2;

        r0.<org.apache.lucene.util.BytesRefHash: int hashSize> = i0;

        $i9 = i0 / 2;

        r0.<org.apache.lucene.util.BytesRefHash: int hashHalfSize> = $i9;

        return;
    }

    public void reinit()
    {
        org.apache.lucene.util.BytesRefHash r0;
        org.apache.lucene.util.BytesRefHash$BytesStartArray $r5;
        long $l3;
        org.apache.lucene.util.Counter $r4;
        int[] $r1, $r2, $r3, $r6;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        $r1 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        if $r1 != null goto label1;

        $r5 = r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.BytesRefHash$BytesStartArray bytesStartArray>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.util.BytesRefHash$BytesStartArray: int[] init()>();

        r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart> = $r6;

     label1:
        $r2 = r0.<org.apache.lucene.util.BytesRefHash: int[] ids>;

        if $r2 != null goto label2;

        $i0 = r0.<org.apache.lucene.util.BytesRefHash: int hashSize>;

        $r3 = newarray (int)[$i0];

        r0.<org.apache.lucene.util.BytesRefHash: int[] ids> = $r3;

        $r4 = r0.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.Counter bytesUsed>;

        $i1 = r0.<org.apache.lucene.util.BytesRefHash: int hashSize>;

        $i2 = 4 * $i1;

        $l3 = (long) $i2;

        virtualinvoke $r4.<org.apache.lucene.util.Counter: long addAndGet(long)>($l3);

     label2:
        return;
    }

    public int byteStart(int)
    {
        org.apache.lucene.util.BytesRefHash r0;
        java.lang.AssertionError $r2, $r4;
        int[] $r1, $r3;
        int i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.BytesRefHash;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.BytesRefHash: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        if $r3 != null goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("bytesStart is null - not initialized");

        throw $r4;

     label1:
        $z1 = <org.apache.lucene.util.BytesRefHash: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if i0 < 0 goto label2;

        $i2 = r0.<org.apache.lucene.util.BytesRefHash: int count>;

        if i0 < $i2 goto label3;

     label2:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(int)>(i0);

        throw $r2;

     label3:
        $r1 = r0.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i1 = $r1[i0];

        return $i1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.util.BytesRefHash: int DEFAULT_CAPACITY> = 16;

        $r0 = class "Lorg/apache/lucene/util/BytesRefHash;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.BytesRefHash: boolean $assertionsDisabled> = $z1;

        return;
    }
}
