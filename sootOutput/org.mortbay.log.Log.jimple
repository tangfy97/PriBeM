public class org.mortbay.log.Log extends java.lang.Object
{
    private static final java.lang.String[] __nestedEx;
    private static final java.lang.Class[] __noArgs;
    public static final java.lang.String EXCEPTION;
    public static final java.lang.String IGNORED;
    public static final java.lang.String IGNORED_FMT;
    public static final java.lang.String NOT_IMPLEMENTED;
    public static java.lang.String __logClass;
    public static boolean __verbose;
    public static boolean __ignored;
    private static org.mortbay.log.Logger __log;
    static java.lang.Class class$org$mortbay$log$Log;
    static java.lang.Class class$org$mortbay$log$StdErrLog;

    public void <init>()
    {
        org.mortbay.log.Log r0;

        r0 := @this: org.mortbay.log.Log;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setLog(org.mortbay.log.Logger)
    {
        org.mortbay.log.Logger r0;

        r0 := @parameter0: org.mortbay.log.Logger;

        <org.mortbay.log.Log: org.mortbay.log.Logger __log> = r0;

        return;
    }

    public static org.mortbay.log.Logger getLog()
    {
        org.mortbay.log.Logger $r0;

        $r0 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        return $r0;
    }

    public static void debug(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        org.mortbay.log.Logger $r0, $r2;
        boolean $z0;

        r1 := @parameter0: java.lang.Throwable;

        $r0 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        if $r0 == null goto label1;

        $z0 = staticinvoke <org.mortbay.log.Log: boolean isDebugEnabled()>();

        if $z0 != 0 goto label2;

     label1:
        return;

     label2:
        $r2 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        interfaceinvoke $r2.<org.mortbay.log.Logger: void debug(java.lang.String,java.lang.Throwable)>("EXCEPTION ", r1);

        staticinvoke <org.mortbay.log.Log: void unwind(java.lang.Throwable)>(r1);

        return;
    }

    public static void debug(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.log.Logger $r0, $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        if $r0 != null goto label1;

        return;

     label1:
        $r2 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        interfaceinvoke $r2.<org.mortbay.log.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(r1, null, null);

        return;
    }

    public static void debug(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1;
        org.mortbay.log.Logger $r0, $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r0 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        if $r0 != null goto label1;

        return;

     label1:
        $r3 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        interfaceinvoke $r3.<org.mortbay.log.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(r1, r2, null);

        return;
    }

    public static void debug(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r2, r3;
        java.lang.String r1;
        org.mortbay.log.Logger $r0, $r4;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r0 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        if $r0 != null goto label1;

        return;

     label1:
        $r4 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        interfaceinvoke $r4.<org.mortbay.log.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    public static void ignore(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        org.mortbay.log.Logger $r0, $r2, $r3;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.Throwable;

        $r0 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        if $r0 != null goto label1;

        return;

     label1:
        $z0 = <org.mortbay.log.Log: boolean __ignored>;

        if $z0 == 0 goto label2;

        $r3 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        interfaceinvoke $r3.<org.mortbay.log.Logger: void warn(java.lang.String,java.lang.Throwable)>("IGNORED", r1);

        staticinvoke <org.mortbay.log.Log: void unwind(java.lang.Throwable)>(r1);

        goto label3;

     label2:
        $z1 = <org.mortbay.log.Log: boolean __verbose>;

        if $z1 == 0 goto label3;

        $r2 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        interfaceinvoke $r2.<org.mortbay.log.Logger: void debug(java.lang.String,java.lang.Throwable)>("IGNORED", r1);

        staticinvoke <org.mortbay.log.Log: void unwind(java.lang.Throwable)>(r1);

     label3:
        return;
    }

    public static void info(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.log.Logger $r0, $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        if $r0 != null goto label1;

        return;

     label1:
        $r2 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        interfaceinvoke $r2.<org.mortbay.log.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>(r1, null, null);

        return;
    }

    public static void info(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1;
        org.mortbay.log.Logger $r0, $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r0 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        if $r0 != null goto label1;

        return;

     label1:
        $r3 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        interfaceinvoke $r3.<org.mortbay.log.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>(r1, r2, null);

        return;
    }

    public static void info(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r2, r3;
        java.lang.String r1;
        org.mortbay.log.Logger $r0, $r4;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r0 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        if $r0 != null goto label1;

        return;

     label1:
        $r4 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        interfaceinvoke $r4.<org.mortbay.log.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    public static boolean isDebugEnabled()
    {
        org.mortbay.log.Logger $r0, $r1;
        boolean $z0;

        $r0 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        if $r0 != null goto label1;

        return 0;

     label1:
        $r1 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        $z0 = interfaceinvoke $r1.<org.mortbay.log.Logger: boolean isDebugEnabled()>();

        return $z0;
    }

    public static void warn(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.log.Logger $r0, $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        if $r0 != null goto label1;

        return;

     label1:
        $r2 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        interfaceinvoke $r2.<org.mortbay.log.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>(r1, null, null);

        return;
    }

    public static void warn(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1;
        org.mortbay.log.Logger $r0, $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r0 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        if $r0 != null goto label1;

        return;

     label1:
        $r3 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        interfaceinvoke $r3.<org.mortbay.log.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>(r1, r2, null);

        return;
    }

    public static void warn(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r2, r3;
        java.lang.String r1;
        org.mortbay.log.Logger $r0, $r4;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r0 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        if $r0 != null goto label1;

        return;

     label1:
        $r4 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        interfaceinvoke $r4.<org.mortbay.log.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    public static void warn(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        org.mortbay.log.Logger $r0, $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r0 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        if $r0 != null goto label1;

        return;

     label1:
        $r3 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        interfaceinvoke $r3.<org.mortbay.log.Logger: void warn(java.lang.String,java.lang.Throwable)>(r1, r2);

        staticinvoke <org.mortbay.log.Log: void unwind(java.lang.Throwable)>(r2);

        return;
    }

    public static void warn(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        org.mortbay.log.Logger $r0, $r2;

        r1 := @parameter0: java.lang.Throwable;

        $r0 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        if $r0 != null goto label1;

        return;

     label1:
        $r2 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        interfaceinvoke $r2.<org.mortbay.log.Logger: void warn(java.lang.String,java.lang.Throwable)>("EXCEPTION ", r1);

        staticinvoke <org.mortbay.log.Log: void unwind(java.lang.Throwable)>(r1);

        return;
    }

    public static org.mortbay.log.Logger getLogger(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.log.Logger $r0, $r2, $r3, $r4, $r5;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        if $r0 != null goto label1;

        $r5 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        return $r5;

     label1:
        if r1 != null goto label2;

        $r4 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        return $r4;

     label2:
        $r2 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        $r3 = interfaceinvoke $r2.<org.mortbay.log.Logger: org.mortbay.log.Logger getLogger(java.lang.String)>(r1);

        return $r3;
    }

    private static void unwind(java.lang.Throwable)
    {
        java.lang.Throwable r0, r9;
        java.lang.Object[] $r7;
        java.lang.String[] $r1, $r3;
        java.lang.StringBuffer $r10, $r11, $r12, $r13;
        int $i0, i1;
        java.lang.String $r5, $r14;
        java.lang.reflect.Method $r6;
        java.lang.Class[] $r4;
        java.lang.Exception $r15;
        java.lang.Class $r2;
        java.lang.Object $r8;

        r0 := @parameter0: java.lang.Throwable;

        if r0 != null goto label1;

        return;

     label1:
        i1 = 0;

     label2:
        $r1 = <org.mortbay.log.Log: java.lang.String[] __nestedEx>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label7;

     label3:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = <org.mortbay.log.Log: java.lang.String[] __nestedEx>;

        $r5 = $r3[i1];

        $r4 = <org.mortbay.log.Log: java.lang.Class[] __noArgs>;

        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r5, $r4);

        $r7 = (java.lang.Object[]) null;

        $r8 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r7);

        r9 = (java.lang.Throwable) $r8;

        if r9 == null goto label4;

        if r9 == r0 goto label4;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Nested in ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String,java.lang.Throwable)>($r14, r9);

     label4:
        goto label6;

     label5:
        $r15 := @caughtexception;

     label6:
        i1 = i1 + 1;

        goto label2;

     label7:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Throwable $r8;
        java.lang.String[] $r0;
        java.lang.String $r4, $r11, $r17;
        boolean $z0;
        java.lang.Class[] $r1;
        org.mortbay.log.Logger $r7, $r15, $r16;
        org.mortbay.log.StdErrLog $r10;
        org.mortbay.log.Log$1 $r2;
        java.lang.Class $r3, $r5, $r9, $r12, r13, $r14;
        java.lang.Object $r6;

        <org.mortbay.log.Log: java.lang.String NOT_IMPLEMENTED> = "NOT IMPLEMENTED ";

        <org.mortbay.log.Log: java.lang.String IGNORED_FMT> = "IGNORED: {}";

        <org.mortbay.log.Log: java.lang.String IGNORED> = "IGNORED";

        <org.mortbay.log.Log: java.lang.String EXCEPTION> = "EXCEPTION ";

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "getTargetException";

        $r0[1] = "getTargetError";

        $r0[2] = "getException";

        $r0[3] = "getRootCause";

        <org.mortbay.log.Log: java.lang.String[] __nestedEx> = $r0;

        $r1 = newarray (java.lang.Class)[0];

        <org.mortbay.log.Log: java.lang.Class[] __noArgs> = $r1;

        $r2 = new org.mortbay.log.Log$1;

        specialinvoke $r2.<org.mortbay.log.Log$1: void <init>()>();

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);

     label1:
        $r3 = <org.mortbay.log.Log: java.lang.Class class$org$mortbay$log$Log>;

        if $r3 != null goto label2;

        $r12 = staticinvoke <org.mortbay.log.Log: java.lang.Class class$(java.lang.String)>("org.mortbay.log.Log");

        <org.mortbay.log.Log: java.lang.Class class$org$mortbay$log$Log> = $r12;

        goto label3;

     label2:
        $r12 = <org.mortbay.log.Log: java.lang.Class class$org$mortbay$log$Log>;

     label3:
        $r4 = <org.mortbay.log.Log: java.lang.String __logClass>;

        $r5 = staticinvoke <org.mortbay.util.Loader: java.lang.Class loadClass(java.lang.Class,java.lang.String)>($r12, $r4);

        r13 = $r5;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Object newInstance()>();

        $r7 = (org.mortbay.log.Logger) $r6;

        <org.mortbay.log.Log: org.mortbay.log.Logger __log> = $r7;

     label4:
        goto label8;

     label5:
        $r8 := @caughtexception;

        $r9 = <org.mortbay.log.Log: java.lang.Class class$org$mortbay$log$StdErrLog>;

        if $r9 != null goto label6;

        $r14 = staticinvoke <org.mortbay.log.Log: java.lang.Class class$(java.lang.String)>("org.mortbay.log.StdErrLog");

        <org.mortbay.log.Log: java.lang.Class class$org$mortbay$log$StdErrLog> = $r14;

        goto label7;

     label6:
        $r14 = <org.mortbay.log.Log: java.lang.Class class$org$mortbay$log$StdErrLog>;

     label7:
        r13 = $r14;

        $r10 = new org.mortbay.log.StdErrLog;

        specialinvoke $r10.<org.mortbay.log.StdErrLog: void <init>()>();

        <org.mortbay.log.Log: org.mortbay.log.Logger __log> = $r10;

        $r11 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        <org.mortbay.log.Log: java.lang.String __logClass> = $r11;

        $z0 = <org.mortbay.log.Log: boolean __verbose>;

        if $z0 == 0 goto label8;

        virtualinvoke $r8.<java.lang.Throwable: void printStackTrace()>();

     label8:
        $r15 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        $r16 = <org.mortbay.log.Log: org.mortbay.log.Logger __log>;

        $r17 = virtualinvoke r13.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r15.<org.mortbay.log.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Logging to {} via {}", $r16, $r17);

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
    }
}
