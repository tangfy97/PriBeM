final class com.mycila.inject.internal.guava.collect.BstMutationResult extends java.lang.Object
{
    private final java.lang.Object targetKey;
    private com.mycila.inject.internal.guava.collect.BstNode originalRoot;
    private com.mycila.inject.internal.guava.collect.BstNode changedRoot;
    private final com.mycila.inject.internal.guava.collect.BstModificationResult modificationResult;
    static final boolean $assertionsDisabled;

    public static com.mycila.inject.internal.guava.collect.BstMutationResult mutationResult(java.lang.Object, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstModificationResult)
    {
        com.mycila.inject.internal.guava.collect.BstMutationResult $r0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.BstModificationResult r4;
        com.mycila.inject.internal.guava.collect.BstNode r2, r3;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.BstNode;

        r3 := @parameter2: com.mycila.inject.internal.guava.collect.BstNode;

        r4 := @parameter3: com.mycila.inject.internal.guava.collect.BstModificationResult;

        $r0 = new com.mycila.inject.internal.guava.collect.BstMutationResult;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: void <init>(java.lang.Object,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstModificationResult)>(r1, r2, r3, r4);

        return $r0;
    }

    private void <init>(java.lang.Object, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstModificationResult)
    {
        com.mycila.inject.internal.guava.collect.BstNode r3, r4;
        com.mycila.inject.internal.guava.collect.BstMutationResult r0;
        java.lang.Object r1, $r2, $r6;
        com.mycila.inject.internal.guava.collect.BstModificationResult r5, $r7;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstMutationResult;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: com.mycila.inject.internal.guava.collect.BstNode;

        r4 := @parameter2: com.mycila.inject.internal.guava.collect.BstNode;

        r5 := @parameter3: com.mycila.inject.internal.guava.collect.BstModificationResult;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: java.lang.Object targetKey> = $r2;

        r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode originalRoot> = r3;

        r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode changedRoot> = r4;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r5);

        $r7 = (com.mycila.inject.internal.guava.collect.BstModificationResult) $r6;

        r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstModificationResult modificationResult> = $r7;

        return;
    }

    public java.lang.Object getTargetKey()
    {
        com.mycila.inject.internal.guava.collect.BstMutationResult r0;
        java.lang.Object $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstMutationResult;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: java.lang.Object targetKey>;

        return $r1;
    }

    public com.mycila.inject.internal.guava.collect.BstNode getOriginalRoot()
    {
        com.mycila.inject.internal.guava.collect.BstMutationResult r0;
        com.mycila.inject.internal.guava.collect.BstNode $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstMutationResult;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode originalRoot>;

        return $r1;
    }

    public com.mycila.inject.internal.guava.collect.BstNode getChangedRoot()
    {
        com.mycila.inject.internal.guava.collect.BstMutationResult r0;
        com.mycila.inject.internal.guava.collect.BstNode $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstMutationResult;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode changedRoot>;

        return $r1;
    }

    public com.mycila.inject.internal.guava.collect.BstNode getOriginalTarget()
    {
        com.mycila.inject.internal.guava.collect.BstMutationResult r0;
        com.mycila.inject.internal.guava.collect.BstModificationResult $r1;
        com.mycila.inject.internal.guava.collect.BstNode $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstMutationResult;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstModificationResult modificationResult>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.BstModificationResult: com.mycila.inject.internal.guava.collect.BstNode getOriginalTarget()>();

        return $r2;
    }

    public com.mycila.inject.internal.guava.collect.BstNode getChangedTarget()
    {
        com.mycila.inject.internal.guava.collect.BstMutationResult r0;
        com.mycila.inject.internal.guava.collect.BstModificationResult $r1;
        com.mycila.inject.internal.guava.collect.BstNode $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstMutationResult;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstModificationResult modificationResult>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.BstModificationResult: com.mycila.inject.internal.guava.collect.BstNode getChangedTarget()>();

        return $r2;
    }

    com.mycila.inject.internal.guava.collect.BstModificationResult$ModificationType modificationType()
    {
        com.mycila.inject.internal.guava.collect.BstMutationResult r0;
        com.mycila.inject.internal.guava.collect.BstModificationResult $r1;
        com.mycila.inject.internal.guava.collect.BstModificationResult$ModificationType $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstMutationResult;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstModificationResult modificationResult>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.BstModificationResult: com.mycila.inject.internal.guava.collect.BstModificationResult$ModificationType getType()>();

        return $r2;
    }

    public com.mycila.inject.internal.guava.collect.BstMutationResult lift(com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstSide, com.mycila.inject.internal.guava.collect.BstNodeFactory, com.mycila.inject.internal.guava.collect.BstBalancePolicy)
    {
        com.mycila.inject.internal.guava.collect.BstNodeFactory r11;
        java.lang.AssertionError $r14, $r15, $r16;
        int[] $r1, $r7;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.mycila.inject.internal.guava.collect.BstBalancePolicy r10;
        com.mycila.inject.internal.guava.collect.BstModificationResult$ModificationType $r2, $r8, $r9;
        com.mycila.inject.internal.guava.collect.BstNode r3, $r12, $r13, r17, r18;
        com.mycila.inject.internal.guava.collect.BstSide $r4, $r5, r6;
        com.mycila.inject.internal.guava.collect.BstMutationResult r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstMutationResult;

        r3 := @parameter0: com.mycila.inject.internal.guava.collect.BstNode;

        r6 := @parameter1: com.mycila.inject.internal.guava.collect.BstSide;

        r11 := @parameter2: com.mycila.inject.internal.guava.collect.BstNodeFactory;

        r10 := @parameter3: com.mycila.inject.internal.guava.collect.BstBalancePolicy;

        $z0 = <com.mycila.inject.internal.guava.collect.BstMutationResult: boolean $assertionsDisabled>;

        if $z0 != 0 goto label09;

        if r3 == null goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        if r6 == null goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        $z1 = $z4 & $z5;

        if r11 == null goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        $z2 = $z1 & $z6;

        if r10 == null goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        $z3 = $z2 & $z7;

        if $z3 != 0 goto label09;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label09:
        $r1 = <com.mycila.inject.internal.guava.collect.BstMutationResult$1: int[] $SwitchMap$com$google$common$collect$BstModificationResult$ModificationType>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstModificationResult$ModificationType modificationType()>();

        $i0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.BstModificationResult$ModificationType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label10;
            case 2: goto label11;
            case 3: goto label11;
            default: goto label18;
        };

     label10:
        r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode changedRoot> = r3;

        r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode originalRoot> = r3;

        return r0;

     label11:
        r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode originalRoot> = r3;

        $r4 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        r17 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r4);

        $r5 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        r18 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>($r5);

        $r7 = <com.mycila.inject.internal.guava.collect.BstMutationResult$1: int[] $SwitchMap$com$google$common$collect$BstSide>;

        $i2 = virtualinvoke r6.<com.mycila.inject.internal.guava.collect.BstSide: int ordinal()>();

        $i3 = $r7[$i2];

        lookupswitch($i3)
        {
            case 1: goto label12;
            case 2: goto label13;
            default: goto label14;
        };

     label12:
        r17 = r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode changedRoot>;

        goto label15;

     label13:
        r18 = r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode changedRoot>;

        goto label15;

     label14:
        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label15:
        $r8 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstModificationResult$ModificationType modificationType()>();

        $r9 = <com.mycila.inject.internal.guava.collect.BstModificationResult$ModificationType: com.mycila.inject.internal.guava.collect.BstModificationResult$ModificationType REBUILDING_CHANGE>;

        if $r8 != $r9 goto label16;

        $r13 = virtualinvoke r11.<com.mycila.inject.internal.guava.collect.BstNodeFactory: com.mycila.inject.internal.guava.collect.BstNode createNode(com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r3, r17, r18);

        r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode changedRoot> = $r13;

        goto label17;

     label16:
        $r12 = interfaceinvoke r10.<com.mycila.inject.internal.guava.collect.BstBalancePolicy: com.mycila.inject.internal.guava.collect.BstNode balance(com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode,com.mycila.inject.internal.guava.collect.BstNode)>(r11, r3, r17, r18);

        r0.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode changedRoot> = $r12;

     label17:
        return r0;

     label18:
        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/mycila/inject/internal/guava/collect/BstMutationResult;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.mycila.inject.internal.guava.collect.BstMutationResult: boolean $assertionsDisabled> = $z1;

        return;
    }
}
