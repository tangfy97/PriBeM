public final class org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader extends org.apache.lucene.index.Terms
{
    final long numTerms;
    final org.apache.lucene.index.FieldInfo fieldInfo;
    final long sumTotalTermFreq;
    final long sumDocFreq;
    final int docCount;
    final long indexStartFP;
    final long rootBlockFP;
    final org.apache.lucene.util.BytesRef rootCode;
    private final org.apache.lucene.util.fst.FST index;
    static final boolean $assertionsDisabled;
    final org.apache.lucene.codecs.BlockTreeTermsReader this$0;

    void <init>(org.apache.lucene.codecs.BlockTreeTermsReader, org.apache.lucene.index.FieldInfo, long, org.apache.lucene.util.BytesRef, long, long, int, long, org.apache.lucene.store.IndexInput) throws java.io.IOException
    {
        byte[] $r5;
        org.apache.lucene.codecs.BlockTreeTermsReader r1;
        org.apache.lucene.store.ByteArrayDataInput $r12;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader r0;
        long l0, l1, l2, l4, $l7, $l8;
        java.lang.AssertionError $r11;
        byte $b9;
        org.apache.lucene.util.fst.ByteSequenceOutputs $r9;
        int i3, $i5, $i6, $i10;
        boolean $z0;
        org.apache.lucene.store.IndexInput r6, $r7;
        org.apache.lucene.util.BytesRef r3;
        org.apache.lucene.index.FieldInfo r2;
        org.apache.lucene.util.fst.FST $r13;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader;

        r1 := @parameter0: org.apache.lucene.codecs.BlockTreeTermsReader;

        r2 := @parameter1: org.apache.lucene.index.FieldInfo;

        l0 := @parameter2: long;

        r3 := @parameter3: org.apache.lucene.util.BytesRef;

        l1 := @parameter4: long;

        l2 := @parameter5: long;

        i3 := @parameter6: int;

        l4 := @parameter7: long;

        r6 := @parameter8: org.apache.lucene.store.IndexInput;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: org.apache.lucene.codecs.BlockTreeTermsReader this$0> = r1;

        specialinvoke r0.<org.apache.lucene.index.Terms: void <init>()>();

        $z0 = <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b9 = l0 cmp 0L;

        $i10 = (int) $b9;

        if $i10 > 0 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: org.apache.lucene.index.FieldInfo fieldInfo> = r2;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: long numTerms> = l0;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: long sumTotalTermFreq> = l1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: long sumDocFreq> = l2;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: int docCount> = i3;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: long indexStartFP> = l4;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: org.apache.lucene.util.BytesRef rootCode> = r3;

        $r12 = new org.apache.lucene.store.ByteArrayDataInput;

        $r5 = r3.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i6 = r3.<org.apache.lucene.util.BytesRef: int offset>;

        $i5 = r3.<org.apache.lucene.util.BytesRef: int length>;

        specialinvoke $r12.<org.apache.lucene.store.ByteArrayDataInput: void <init>(byte[],int,int)>($r5, $i6, $i5);

        $l7 = virtualinvoke $r12.<org.apache.lucene.store.ByteArrayDataInput: long readVLong()>();

        $l8 = $l7 >>> 2;

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: long rootBlockFP> = $l8;

        if r6 == null goto label2;

        $r7 = virtualinvoke r6.<org.apache.lucene.store.IndexInput: org.apache.lucene.store.IndexInput clone()>();

        virtualinvoke $r7.<org.apache.lucene.store.IndexInput: void seek(long)>(l4);

        $r13 = new org.apache.lucene.util.fst.FST;

        $r9 = staticinvoke <org.apache.lucene.util.fst.ByteSequenceOutputs: org.apache.lucene.util.fst.ByteSequenceOutputs getSingleton()>();

        specialinvoke $r13.<org.apache.lucene.util.fst.FST: void <init>(org.apache.lucene.store.DataInput,org.apache.lucene.util.fst.Outputs)>($r7, $r9);

        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: org.apache.lucene.util.fst.FST index> = $r13;

        goto label3;

     label2:
        r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: org.apache.lucene.util.fst.FST index> = null;

     label3:
        return;
    }

    public org.apache.lucene.codecs.BlockTreeTermsReader$Stats computeStats() throws java.io.IOException
    {
        org.apache.lucene.codecs.BlockTreeTermsReader$Stats $r2;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader r1;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum $r0;

        r1 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader;

        $r0 = new org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum;

        specialinvoke $r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum: void <init>(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader)>(r1);

        $r2 = virtualinvoke $r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum: org.apache.lucene.codecs.BlockTreeTermsReader$Stats computeBlockStats()>();

        return $r2;
    }

    public java.util.Comparator getComparator()
    {
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader r1;
        java.util.Comparator $r0;

        r1 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader;

        $r0 = staticinvoke <org.apache.lucene.util.BytesRef: java.util.Comparator getUTF8SortedAsUnicodeComparator()>();

        return $r0;
    }

    public boolean hasOffsets()
    {
        org.apache.lucene.index.FieldInfo$IndexOptions $r2, $r3;
        int $i0;
        org.apache.lucene.index.FieldInfo $r1;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader;

        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: org.apache.lucene.index.FieldInfo fieldInfo>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions getIndexOptions()>();

        $r3 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.index.FieldInfo$IndexOptions: int compareTo(java.lang.Enum)>($r3);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasPositions()
    {
        org.apache.lucene.index.FieldInfo$IndexOptions $r2, $r3;
        int $i0;
        org.apache.lucene.index.FieldInfo $r1;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader;

        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: org.apache.lucene.index.FieldInfo fieldInfo>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions getIndexOptions()>();

        $r3 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.index.FieldInfo$IndexOptions: int compareTo(java.lang.Enum)>($r3);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasPayloads()
    {
        org.apache.lucene.index.FieldInfo $r1;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader;

        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: org.apache.lucene.index.FieldInfo fieldInfo>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.index.FieldInfo: boolean hasPayloads()>();

        return $z0;
    }

    public org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum) throws java.io.IOException
    {
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader r1;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum $r0;
        org.apache.lucene.index.TermsEnum r2;

        r1 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader;

        r2 := @parameter0: org.apache.lucene.index.TermsEnum;

        $r0 = new org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum;

        specialinvoke $r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum: void <init>(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader)>(r1);

        return $r0;
    }

    public long size()
    {
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader r0;
        long $l0;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader;

        $l0 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: long numTerms>;

        return $l0;
    }

    public long getSumTotalTermFreq()
    {
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader r0;
        long $l0;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader;

        $l0 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: long sumTotalTermFreq>;

        return $l0;
    }

    public long getSumDocFreq()
    {
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader r0;
        long $l0;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader;

        $l0 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: long sumDocFreq>;

        return $l0;
    }

    public int getDocCount()
    {
        int $i0;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader r0;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader;

        $i0 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: int docCount>;

        return $i0;
    }

    public org.apache.lucene.index.TermsEnum intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef) throws java.io.IOException
    {
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum $r3;
        org.apache.lucene.util.BytesRef r5;
        org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE $r1, $r2;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader r4;
        java.lang.IllegalArgumentException $r6;
        org.apache.lucene.util.automaton.CompiledAutomaton r0;

        r4 := @this: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader;

        r0 := @parameter0: org.apache.lucene.util.automaton.CompiledAutomaton;

        r5 := @parameter1: org.apache.lucene.util.BytesRef;

        $r2 = r0.<org.apache.lucene.util.automaton.CompiledAutomaton: org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE type>;

        $r1 = <org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE: org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE NORMAL>;

        if $r2 == $r1 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("please use CompiledAutomaton.getTermsEnum instead");

        throw $r6;

     label1:
        $r3 = new org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum;

        specialinvoke $r3.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum: void <init>(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader,org.apache.lucene.util.automaton.CompiledAutomaton,org.apache.lucene.util.BytesRef)>(r4, r0, r5);

        return $r3;
    }

    static org.apache.lucene.util.fst.FST access$500(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader)
    {
        org.apache.lucene.util.fst.FST $r1;
        org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader r0;

        r0 := @parameter0: org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader;

        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: org.apache.lucene.util.fst.FST index>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/codecs/BlockTreeTermsReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
