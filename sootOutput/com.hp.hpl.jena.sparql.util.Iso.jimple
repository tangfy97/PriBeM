public class com.hp.hpl.jena.sparql.util.Iso extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.Iso r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.Iso;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isomorphicTriples(java.util.List, java.util.List, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.graph.Triple r3, r5;
        java.util.List r0, r1;
        int $i0, $i1, $i2, i3;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r6;
        java.lang.Object $r2, $r4;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r6 := @parameter2: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i2 goto label4;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        r3 = (com.hp.hpl.jena.graph.Triple) $r2;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        r5 = (com.hp.hpl.jena.graph.Triple) $r4;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean tripleIso(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>(r3, r5, r6);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isomorphicQuads(java.util.List, java.util.List, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.core.Quad r3, r5;
        java.util.List r0, r1;
        int $i0, $i1, $i2, i3;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r6;
        java.lang.Object $r2, $r4;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r6 := @parameter2: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i2 goto label4;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        r3 = (com.hp.hpl.jena.sparql.core.Quad) $r2;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        r5 = (com.hp.hpl.jena.sparql.core.Quad) $r4;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean quadIso(com.hp.hpl.jena.sparql.core.Quad,com.hp.hpl.jena.sparql.core.Quad,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>(r3, r5, r6);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isomorphicNodes(java.util.List, java.util.List, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.graph.Node r3, r5;
        java.util.List r0, r1;
        int $i0, $i1, $i2, i3;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r6;
        java.lang.Object $r2, $r4;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r6 := @parameter2: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i2 goto label4;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        r3 = (com.hp.hpl.jena.graph.Node) $r2;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        r5 = (com.hp.hpl.jena.graph.Node) $r4;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean nodeIso(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>(r3, r5, r6);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean triplePathIso(com.hp.hpl.jena.sparql.core.TriplePath, com.hp.hpl.jena.sparql.core.TriplePath, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r5, $r6;
        com.hp.hpl.jena.sparql.path.Path $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.hp.hpl.jena.sparql.core.TriplePath r0, r1;
        com.hp.hpl.jena.graph.Triple $r9, $r10;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r4;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.TriplePath;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.TriplePath;

        r4 := @parameter2: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.TriplePath: boolean isTriple()>();

        $z1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.TriplePath: boolean isTriple()>();

        $z2 = $z0 ^ $z1;

        if $z2 == 0 goto label1;

        return 0;

     label1:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.TriplePath: boolean isTriple()>();

        if $z3 == 0 goto label2;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Triple asTriple()>();

        $r10 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Triple asTriple()>();

        $z7 = staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean tripleIso(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r9, $r10, r4);

        return $z7;

     label2:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getSubject()>();

        $z4 = staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean nodeIso(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r2, $r3, r4);

        if $z4 == 0 goto label3;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getObject()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getObject()>();

        $z5 = staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean nodeIso(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r5, $r6, r4);

        if $z5 == 0 goto label3;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.sparql.path.Path getPath()>();

        $r8 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.sparql.path.Path getPath()>();

        $z6 = interfaceinvoke $r7.<com.hp.hpl.jena.sparql.path.Path: boolean equalTo(com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r8, r4);

        if $z6 == 0 goto label3;

        $z8 = 1;

        goto label4;

     label3:
        $z8 = 0;

     label4:
        return $z8;
    }

    public static boolean tripleIso(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r5, $r6, $r7;
        com.hp.hpl.jena.graph.Triple r0, r4;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r8;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        r4 := @parameter1: com.hp.hpl.jena.graph.Triple;

        r8 := @parameter2: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r6 = virtualinvoke r4.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r7 = virtualinvoke r4.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean nodeIso(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r1, $r5, r8);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean nodeIso(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r2, $r6, r8);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $z2 = staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean nodeIso(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r3, $r7, r8);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public static boolean quadIso(com.hp.hpl.jena.sparql.core.Quad, com.hp.hpl.jena.sparql.core.Quad, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9;
        com.hp.hpl.jena.sparql.core.Quad r0, r5;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r10;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        r5 := @parameter1: com.hp.hpl.jena.sparql.core.Quad;

        r10 := @parameter2: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        $r6 = virtualinvoke r5.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r7 = virtualinvoke r5.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r8 = virtualinvoke r5.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r9 = virtualinvoke r5.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean nodeIso(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r1, $r6, r10);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean nodeIso(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r2, $r7, r10);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $z2 = staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean nodeIso(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r3, $r8, r10);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        $z3 = staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean nodeIso(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r4, $r9, r10);

        if $z3 != 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    public static boolean nodeIso(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.graph.Node r1, r2;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r0 := @parameter2: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        if r0 == null goto label2;

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 == 0 goto label1;

        $z4 = virtualinvoke r2.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z4 == 0 goto label1;

        $z5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.NodeIsomorphismMap: boolean makeIsomorphic(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2);

        return $z5;

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isBlankNodeVar(com.hp.hpl.jena.graph.Node)>(r1);

        if $z1 == 0 goto label2;

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isBlankNodeVar(com.hp.hpl.jena.graph.Node)>(r2);

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.NodeIsomorphismMap: boolean makeIsomorphic(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2);

        return $z3;

     label2:
        $z6 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r2);

        return $z6;
    }
}
