final class com.google.inject.internal.Initializer extends java.lang.Object
{
    private final java.lang.Thread creatingThread;
    private final java.util.concurrent.CountDownLatch ready;
    private final java.util.Map pendingInjection;

    void <init>()
    {
        java.util.concurrent.CountDownLatch $r2;
        java.util.IdentityHashMap $r3;
        java.lang.Thread $r1;
        com.google.inject.internal.Initializer r0;

        r0 := @this: com.google.inject.internal.Initializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<com.google.inject.internal.Initializer: java.lang.Thread creatingThread> = $r1;

        $r2 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r2.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<com.google.inject.internal.Initializer: java.util.concurrent.CountDownLatch ready> = $r2;

        $r3 = staticinvoke <com.google.inject.internal.util.$Maps: java.util.IdentityHashMap newIdentityHashMap()>();

        r0.<com.google.inject.internal.Initializer: java.util.Map pendingInjection> = $r3;

        return;
    }

    com.google.inject.internal.Initializable requestInjection(com.google.inject.internal.InjectorImpl, java.lang.Object, java.lang.Object, java.util.Set)
    {
        java.util.Set r3;
        com.google.inject.internal.Initializer r5;
        com.google.inject.internal.MembersInjectorStore $r8;
        com.google.inject.internal.Initializer$InjectableReference $r4;
        com.google.inject.internal.Initializable $r2;
        com.google.inject.internal.InjectorImpl r6;
        java.util.Map $r7;
        java.lang.Object r0, r1;
        boolean $z0, $z1;

        r5 := @this: com.google.inject.internal.Initializer;

        r6 := @parameter0: com.google.inject.internal.InjectorImpl;

        r1 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.util.Set;

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        if r1 == null goto label1;

        $z0 = interfaceinvoke r3.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r8 = r6.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.MembersInjectorStore membersInjectorStore>;

        $z1 = virtualinvoke $r8.<com.google.inject.internal.MembersInjectorStore: boolean hasTypeListeners()>();

        if $z1 != 0 goto label2;

     label1:
        $r2 = staticinvoke <com.google.inject.internal.Initializables: com.google.inject.internal.Initializable of(java.lang.Object)>(r1);

        return $r2;

     label2:
        $r4 = new com.google.inject.internal.Initializer$InjectableReference;

        specialinvoke $r4.<com.google.inject.internal.Initializer$InjectableReference: void <init>(com.google.inject.internal.Initializer,com.google.inject.internal.InjectorImpl,java.lang.Object,java.lang.Object)>(r5, r6, r1, r0);

        $r7 = r5.<com.google.inject.internal.Initializer: java.util.Map pendingInjection>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return $r4;
    }

    void validateOustandingInjections(com.google.inject.internal.Errors)
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        com.google.inject.internal.Initializer r0;
        com.google.inject.internal.Initializer$InjectableReference r5;
        com.google.inject.internal.Errors r6, $r8;
        com.google.inject.internal.ErrorsException $r7;
        java.util.Map $r1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.google.inject.internal.Initializer;

        r6 := @parameter0: com.google.inject.internal.Errors;

        $r1 = r0.<com.google.inject.internal.Initializer: java.util.Map pendingInjection>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.google.inject.internal.Initializer$InjectableReference) $r4;

     label2:
        virtualinvoke r5.<com.google.inject.internal.Initializer$InjectableReference: void validate(com.google.inject.internal.Errors)>(r6);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<com.google.inject.internal.ErrorsException: com.google.inject.internal.Errors getErrors()>();

        virtualinvoke r6.<com.google.inject.internal.Errors: com.google.inject.internal.Errors merge(com.google.inject.internal.Errors)>($r8);

     label5:
        goto label1;

     label6:
        return;

        catch com.google.inject.internal.ErrorsException from label2 to label3 with label4;
    }

    void injectAll(com.google.inject.internal.Errors)
    {
        com.google.inject.internal.Initializer$InjectableReference r14;
        java.lang.AssertionError $r7;
        java.util.ArrayList $r3;
        com.google.inject.internal.ErrorsException $r16;
        java.util.Map $r1, $r5, $r10;
        java.lang.String $r12;
        boolean $z0, $z1;
        java.util.Iterator $r4;
        java.util.Collection $r2;
        com.google.inject.internal.Initializer r0;
        java.util.concurrent.CountDownLatch $r6;
        com.google.inject.internal.Errors r15, $r17;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.Object $r13;

        r0 := @this: com.google.inject.internal.Initializer;

        r15 := @parameter0: com.google.inject.internal.Errors;

        $r1 = r0.<com.google.inject.internal.Initializer: java.util.Map pendingInjection>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r2);

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r13 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.google.inject.internal.Initializer$InjectableReference) $r13;

     label2:
        virtualinvoke r14.<com.google.inject.internal.Initializer$InjectableReference: java.lang.Object get(com.google.inject.internal.Errors)>(r15);

     label3:
        goto label5;

     label4:
        $r16 := @caughtexception;

        $r17 = virtualinvoke $r16.<com.google.inject.internal.ErrorsException: com.google.inject.internal.Errors getErrors()>();

        virtualinvoke r15.<com.google.inject.internal.Errors: com.google.inject.internal.Errors merge(com.google.inject.internal.Errors)>($r17);

     label5:
        goto label1;

     label6:
        $r5 = r0.<com.google.inject.internal.Initializer: java.util.Map pendingInjection>;

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label7;

        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to satisfy ");

        $r10 = r0.<com.google.inject.internal.Initializer: java.util.Map pendingInjection>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r7;

     label7:
        $r6 = r0.<com.google.inject.internal.Initializer: java.util.concurrent.CountDownLatch ready>;

        virtualinvoke $r6.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;

        catch com.google.inject.internal.ErrorsException from label2 to label3 with label4;
    }

    static java.util.concurrent.CountDownLatch access$000(com.google.inject.internal.Initializer)
    {
        com.google.inject.internal.Initializer r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @parameter0: com.google.inject.internal.Initializer;

        $r1 = r0.<com.google.inject.internal.Initializer: java.util.concurrent.CountDownLatch ready>;

        return $r1;
    }

    static java.lang.Thread access$100(com.google.inject.internal.Initializer)
    {
        com.google.inject.internal.Initializer r0;
        java.lang.Thread $r1;

        r0 := @parameter0: com.google.inject.internal.Initializer;

        $r1 = r0.<com.google.inject.internal.Initializer: java.lang.Thread creatingThread>;

        return $r1;
    }

    static java.util.Map access$200(com.google.inject.internal.Initializer)
    {
        com.google.inject.internal.Initializer r0;
        java.util.Map $r1;

        r0 := @parameter0: com.google.inject.internal.Initializer;

        $r1 = r0.<com.google.inject.internal.Initializer: java.util.Map pendingInjection>;

        return $r1;
    }
}
