public class org.apache.batik.ext.awt.geom.ShapeExtender extends java.lang.Object implements org.apache.batik.ext.awt.geom.ExtendedShape
{
    java.awt.Shape shape;

    public void <init>(java.awt.Shape)
    {
        java.awt.Shape r1;
        org.apache.batik.ext.awt.geom.ShapeExtender r0;

        r0 := @this: org.apache.batik.ext.awt.geom.ShapeExtender;

        r1 := @parameter0: java.awt.Shape;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.ext.awt.geom.ShapeExtender: java.awt.Shape shape> = r1;

        return;
    }

    public boolean contains(double, double)
    {
        java.awt.Shape $r1;
        org.apache.batik.ext.awt.geom.ShapeExtender r0;
        double d0, d1;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.geom.ShapeExtender;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.batik.ext.awt.geom.ShapeExtender: java.awt.Shape shape>;

        $z0 = interfaceinvoke $r1.<java.awt.Shape: boolean contains(double,double)>(d0, d1);

        return $z0;
    }

    public boolean contains(double, double, double, double)
    {
        java.awt.Shape $r1;
        org.apache.batik.ext.awt.geom.ShapeExtender r0;
        double d0, d1, d2, d3;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.geom.ShapeExtender;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $r1 = r0.<org.apache.batik.ext.awt.geom.ShapeExtender: java.awt.Shape shape>;

        $z0 = interfaceinvoke $r1.<java.awt.Shape: boolean contains(double,double,double,double)>(d0, d1, d2, d3);

        return $z0;
    }

    public boolean contains(java.awt.geom.Point2D)
    {
        java.awt.Shape $r2;
        java.awt.geom.Point2D r1;
        org.apache.batik.ext.awt.geom.ShapeExtender r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.geom.ShapeExtender;

        r1 := @parameter0: java.awt.geom.Point2D;

        $r2 = r0.<org.apache.batik.ext.awt.geom.ShapeExtender: java.awt.Shape shape>;

        $z0 = interfaceinvoke $r2.<java.awt.Shape: boolean contains(java.awt.geom.Point2D)>(r1);

        return $z0;
    }

    public boolean contains(java.awt.geom.Rectangle2D)
    {
        java.awt.Shape $r2;
        java.awt.geom.Rectangle2D r1;
        org.apache.batik.ext.awt.geom.ShapeExtender r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.geom.ShapeExtender;

        r1 := @parameter0: java.awt.geom.Rectangle2D;

        $r2 = r0.<org.apache.batik.ext.awt.geom.ShapeExtender: java.awt.Shape shape>;

        $z0 = interfaceinvoke $r2.<java.awt.Shape: boolean contains(java.awt.geom.Rectangle2D)>(r1);

        return $z0;
    }

    public java.awt.Rectangle getBounds()
    {
        java.awt.Shape $r1;
        java.awt.Rectangle $r2;
        org.apache.batik.ext.awt.geom.ShapeExtender r0;

        r0 := @this: org.apache.batik.ext.awt.geom.ShapeExtender;

        $r1 = r0.<org.apache.batik.ext.awt.geom.ShapeExtender: java.awt.Shape shape>;

        $r2 = interfaceinvoke $r1.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        return $r2;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        java.awt.Shape $r1;
        org.apache.batik.ext.awt.geom.ShapeExtender r0;
        java.awt.geom.Rectangle2D $r2;

        r0 := @this: org.apache.batik.ext.awt.geom.ShapeExtender;

        $r1 = r0.<org.apache.batik.ext.awt.geom.ShapeExtender: java.awt.Shape shape>;

        $r2 = interfaceinvoke $r1.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r2;
    }

    public java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)
    {
        java.awt.Shape $r2;
        java.awt.geom.AffineTransform r1;
        org.apache.batik.ext.awt.geom.ShapeExtender r0;
        java.awt.geom.PathIterator $r3;

        r0 := @this: org.apache.batik.ext.awt.geom.ShapeExtender;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        $r2 = r0.<org.apache.batik.ext.awt.geom.ShapeExtender: java.awt.Shape shape>;

        $r3 = interfaceinvoke $r2.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(r1);

        return $r3;
    }

    public java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform, double)
    {
        java.awt.Shape $r2;
        java.awt.geom.AffineTransform r1;
        org.apache.batik.ext.awt.geom.ShapeExtender r0;
        double d0;
        java.awt.geom.PathIterator $r3;

        r0 := @this: org.apache.batik.ext.awt.geom.ShapeExtender;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        d0 := @parameter1: double;

        $r2 = r0.<org.apache.batik.ext.awt.geom.ShapeExtender: java.awt.Shape shape>;

        $r3 = interfaceinvoke $r2.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform,double)>(r1, d0);

        return $r3;
    }

    public org.apache.batik.ext.awt.geom.ExtendedPathIterator getExtendedPathIterator()
    {
        java.awt.Shape $r2;
        org.apache.batik.ext.awt.geom.ShapeExtender$EPIWrap $r0;
        org.apache.batik.ext.awt.geom.ShapeExtender r1;
        java.awt.geom.PathIterator $r3;

        r1 := @this: org.apache.batik.ext.awt.geom.ShapeExtender;

        $r0 = new org.apache.batik.ext.awt.geom.ShapeExtender$EPIWrap;

        $r2 = r1.<org.apache.batik.ext.awt.geom.ShapeExtender: java.awt.Shape shape>;

        $r3 = interfaceinvoke $r2.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

        specialinvoke $r0.<org.apache.batik.ext.awt.geom.ShapeExtender$EPIWrap: void <init>(java.awt.geom.PathIterator)>($r3);

        return $r0;
    }

    public boolean intersects(double, double, double, double)
    {
        java.awt.Shape $r1;
        org.apache.batik.ext.awt.geom.ShapeExtender r0;
        double d0, d1, d2, d3;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.geom.ShapeExtender;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $r1 = r0.<org.apache.batik.ext.awt.geom.ShapeExtender: java.awt.Shape shape>;

        $z0 = interfaceinvoke $r1.<java.awt.Shape: boolean intersects(double,double,double,double)>(d0, d1, d2, d3);

        return $z0;
    }

    public boolean intersects(java.awt.geom.Rectangle2D)
    {
        java.awt.Shape $r2;
        java.awt.geom.Rectangle2D r1;
        org.apache.batik.ext.awt.geom.ShapeExtender r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.geom.ShapeExtender;

        r1 := @parameter0: java.awt.geom.Rectangle2D;

        $r2 = r0.<org.apache.batik.ext.awt.geom.ShapeExtender: java.awt.Shape shape>;

        $z0 = interfaceinvoke $r2.<java.awt.Shape: boolean intersects(java.awt.geom.Rectangle2D)>(r1);

        return $z0;
    }
}
