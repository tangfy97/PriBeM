public class org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font extends org.apache.pdfbox.pdmodel.font.PDCIDFont
{
    private static final org.apache.commons.logging.Log LOG;
    private java.lang.Boolean hasCIDToGIDMap;
    private int[] cid2gid;

    public void <init>()
    {
        org.apache.pdfbox.cos.COSName $r1, $r2;
        org.apache.pdfbox.cos.COSDictionary $r3;
        org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: java.lang.Boolean hasCIDToGIDMap> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: int[] cid2gid> = null;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: org.apache.pdfbox.cos.COSDictionary font>;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SUBTYPE>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CID_FONT_TYPE2>;

        virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r2, $r1);

        return;
    }

    public void <init>(org.apache.pdfbox.cos.COSDictionary)
    {
        org.apache.pdfbox.cos.COSDictionary r1;
        org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font;

        r1 := @parameter0: org.apache.pdfbox.cos.COSDictionary;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r1);

        r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: java.lang.Boolean hasCIDToGIDMap> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: int[] cid2gid> = null;

        return;
    }

    public java.awt.Font getawtFont() throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font r0;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptor $r1;
        java.awt.FontFormatException $r14;
        java.lang.String $r5, $r9, $r12, $r13, $r18, $r20;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary r2;
        java.awt.Font r21;
        org.apache.pdfbox.pdmodel.common.PDStream $r3;
        java.lang.StringBuilder $r6, $r8, $r10, $r11, $r15, $r17, $r19;
        org.apache.commons.logging.Log $r7, $r16;
        java.io.InputStream $r4;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font;

        r21 = null;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>();

        r2 = (org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary) $r1;

        $r3 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: org.apache.pdfbox.pdmodel.common.PDStream getFontFile2()>();

        if $r3 == null goto label7;

     label1:
        $r4 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.common.PDStream: java.io.InputStream createInputStream()>();

        r21 = staticinvoke <java.awt.Font: java.awt.Font createFont(int,java.io.InputStream)>(0, $r4);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $r16 = <org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: org.apache.commons.logging.Log LOG>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t read the embedded font ");

        $r18 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: java.lang.String getFontName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r20);

     label4:
        if r21 != null goto label7;

        $r5 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: java.lang.String getFontName()>();

        if $r5 == null goto label5;

        $r13 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: java.lang.String getFontName()>();

        r21 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: java.awt.Font getAwtFont(java.lang.String)>($r13);

     label5:
        if r21 == null goto label6;

        $r7 = <org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: org.apache.commons.logging.Log LOG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using font ");

        $r9 = virtualinvoke r21.<java.awt.Font: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r12);

     label6:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: void setIsFontSubstituted(boolean)>(1);

     label7:
        return r21;

        catch java.awt.FontFormatException from label1 to label2 with label3;
    }

    private void readCIDToGIDMapping()
    {
        byte[] $r6;
        org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font r0;
        int[] $r7, $r8;
        int $i0, i1, $i2, i3, i4;
        org.apache.pdfbox.cos.COSStream r4;
        boolean $z0;
        org.apache.pdfbox.cos.COSName $r1;
        java.io.IOException $r9;
        org.apache.pdfbox.cos.COSDictionary $r2;
        org.apache.pdfbox.cos.COSBase $r3;
        org.apache.commons.logging.Log $r10;
        java.io.InputStream $r5;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: org.apache.pdfbox.cos.COSDictionary font>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CID_TO_GID_MAP>;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r1);

        $z0 = $r3 instanceof org.apache.pdfbox.cos.COSStream;

        if $z0 == 0 goto label5;

        r4 = (org.apache.pdfbox.cos.COSStream) $r3;

     label1:
        $r5 = virtualinvoke r4.<org.apache.pdfbox.cos.COSStream: java.io.InputStream getUnfilteredStream()>();

        $r6 = staticinvoke <org.apache.pdfbox.io.IOUtils: byte[] toByteArray(java.io.InputStream)>($r5);

        staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.InputStream)>($r5);

        $i0 = lengthof $r6;

        i1 = $i0 / 2;

        $r7 = newarray (int)[i1];

        r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: int[] cid2gid> = $r7;

        i3 = 0;

        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $r8 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: int[] cid2gid>;

        $i2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: int getCodeFromArray(byte[],int,int)>($r6, i3, 2);

        $r8[i4] = $i2;

        i3 = i3 + 2;

        i4 = i4 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = <org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Can\'t read the CIDToGIDMap", $r9);

     label5:
        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    public boolean hasCIDToGIDMap()
    {
        org.apache.pdfbox.cos.COSName $r2;
        org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font r0;
        org.apache.pdfbox.cos.COSDictionary $r3;
        org.apache.pdfbox.cos.COSBase $r4;
        java.lang.Boolean $r1, $r5, $r6, $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: java.lang.Boolean hasCIDToGIDMap>;

        if $r1 != null goto label2;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: org.apache.pdfbox.cos.COSDictionary font>;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CID_TO_GID_MAP>;

        $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2);

        if $r4 == null goto label1;

        $z0 = $r4 instanceof org.apache.pdfbox.cos.COSStream;

        if $z0 == 0 goto label1;

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: java.lang.Boolean hasCIDToGIDMap> = $r6;

        goto label2;

     label1:
        $r5 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: java.lang.Boolean hasCIDToGIDMap> = $r5;

     label2:
        $r7 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: java.lang.Boolean hasCIDToGIDMap>;

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    public int mapCIDToGID(int)
    {
        org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font r0;
        int[] $r1, $r2, $r3, $r4;
        int i0, $i1, $i2, $i4;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: boolean hasCIDToGIDMap()>();

        if $z0 == 0 goto label3;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: int[] cid2gid>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: void readCIDToGIDMapping()>();

     label1:
        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: int[] cid2gid>;

        if $r2 == null goto label2;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: int[] cid2gid>;

        $i1 = lengthof $r3;

        if i0 >= $i1 goto label2;

        $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: int[] cid2gid>;

        $i2 = $r4[i0];

        return $i2;

     label2:
        $i4 = (int) -1;

        return $i4;

     label3:
        return i0;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/pdmodel/font/PDCIDFontType2Font;");

        <org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }
}
