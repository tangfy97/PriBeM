public class org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter extends org.codehaus.jackson.map.ser.BeanPropertyWriter
{

    public void <init>(org.codehaus.jackson.map.ser.BeanPropertyWriter)
    {
        org.codehaus.jackson.map.ser.BeanPropertyWriter r1;
        org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter;

        r1 := @parameter0: org.codehaus.jackson.map.ser.BeanPropertyWriter;

        specialinvoke r0.<org.codehaus.jackson.map.ser.BeanPropertyWriter: void <init>(org.codehaus.jackson.map.ser.BeanPropertyWriter)>(r1);

        return;
    }

    public void <init>(org.codehaus.jackson.map.ser.BeanPropertyWriter, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.BeanPropertyWriter r1;
        org.codehaus.jackson.map.JsonSerializer r2;
        org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter;

        r1 := @parameter0: org.codehaus.jackson.map.ser.BeanPropertyWriter;

        r2 := @parameter1: org.codehaus.jackson.map.JsonSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.BeanPropertyWriter: void <init>(org.codehaus.jackson.map.ser.BeanPropertyWriter,org.codehaus.jackson.map.JsonSerializer)>(r1, r2);

        return;
    }

    public org.codehaus.jackson.map.ser.BeanPropertyWriter withSerializer(org.codehaus.jackson.map.JsonSerializer)
    {
        java.lang.IllegalStateException $r3;
        java.lang.Class $r1;
        org.codehaus.jackson.map.JsonSerializer r4;
        org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter r0, $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter;

        r4 := @parameter0: org.codehaus.jackson.map.JsonSerializer;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == class "Lorg/codehaus/jackson/map/ser/impl/UnwrappingBeanPropertyWriter;" goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("UnwrappingBeanPropertyWriter sub-class does not override \'withSerializer()\'; needs to!");

        throw $r3;

     label1:
        $z0 = virtualinvoke r4.<org.codehaus.jackson.map.JsonSerializer: boolean isUnwrappingSerializer()>();

        if $z0 != 0 goto label2;

        r4 = virtualinvoke r4.<org.codehaus.jackson.map.JsonSerializer: org.codehaus.jackson.map.JsonSerializer unwrappingSerializer()>();

     label2:
        $r2 = new org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter;

        specialinvoke $r2.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void <init>(org.codehaus.jackson.map.ser.BeanPropertyWriter,org.codehaus.jackson.map.JsonSerializer)>(r0, r4);

        return $r2;
    }

    public void serializeAsField(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.lang.Exception
    {
        org.codehaus.jackson.map.SerializerProvider r6;
        org.codehaus.jackson.map.TypeSerializer $r4, $r7;
        org.codehaus.jackson.JsonGenerator r5;
        org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter r0;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r10;
        boolean $z0, $z1;
        org.codehaus.jackson.io.SerializedString $r8;
        org.codehaus.jackson.map.JsonSerializer $r11, $r13, r14;
        java.lang.Object r1, $r2, $r3, $r12;
        java.lang.Class $r9;

        r0 := @this: org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r6 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: java.lang.Object get(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        return;

     label1:
        if $r2 != r1 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: void _reportSelfReference(java.lang.Object)>(r1);

     label2:
        $r3 = r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: java.lang.Object _suppressableValue>;

        if $r3 == null goto label3;

        $r12 = r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: java.lang.Object _suppressableValue>;

        $z0 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        return;

     label3:
        $r13 = r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: org.codehaus.jackson.map.JsonSerializer _serializer>;

        r14 = $r13;

        if $r13 != null goto label4;

        $r9 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        r10 = r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers>;

        $r11 = virtualinvoke r10.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.JsonSerializer serializerFor(java.lang.Class)>($r9);

        r14 = $r11;

        if $r11 != null goto label4;

        r14 = virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap,java.lang.Class,org.codehaus.jackson.map.SerializerProvider)>(r10, $r9, r6);

     label4:
        $z1 = virtualinvoke r14.<org.codehaus.jackson.map.JsonSerializer: boolean isUnwrappingSerializer()>();

        if $z1 != 0 goto label5;

        $r8 = r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: org.codehaus.jackson.io.SerializedString _name>;

        virtualinvoke r5.<org.codehaus.jackson.JsonGenerator: void writeFieldName(org.codehaus.jackson.io.SerializedString)>($r8);

     label5:
        $r4 = r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: org.codehaus.jackson.map.TypeSerializer _typeSerializer>;

        if $r4 != null goto label6;

        virtualinvoke r14.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r2, r5, r6);

        goto label7;

     label6:
        $r7 = r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: org.codehaus.jackson.map.TypeSerializer _typeSerializer>;

        virtualinvoke r14.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r2, r5, r6, $r7);

     label7:
        return;
    }

    protected org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap, java.lang.Class, org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.map.JsonSerializer r9;
        org.codehaus.jackson.type.JavaType $r1, $r6, $r7;
        java.lang.Class r3;
        org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter r0;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap $r4, $r5, r8;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter;

        r8 := @parameter0: org.codehaus.jackson.map.ser.impl.PropertySerializerMap;

        r3 := @parameter1: java.lang.Class;

        r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: org.codehaus.jackson.type.JavaType _nonTrivialBaseType>;

        if $r1 == null goto label1;

        $r6 = r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: org.codehaus.jackson.type.JavaType _nonTrivialBaseType>;

        $r7 = virtualinvoke r2.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructSpecializedType(org.codehaus.jackson.type.JavaType,java.lang.Class)>($r6, r3);

        r9 = virtualinvoke r2.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r7, r0);

        goto label2;

     label1:
        r9 = virtualinvoke r2.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>(r3, r0);

     label2:
        $z0 = virtualinvoke r9.<org.codehaus.jackson.map.JsonSerializer: boolean isUnwrappingSerializer()>();

        if $z0 != 0 goto label3;

        r9 = virtualinvoke r9.<org.codehaus.jackson.map.JsonSerializer: org.codehaus.jackson.map.JsonSerializer unwrappingSerializer()>();

     label3:
        $r4 = r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap newWith(java.lang.Class,org.codehaus.jackson.map.JsonSerializer)>(r3, r9);

        r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanPropertyWriter: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers> = $r5;

        return r9;
    }
}
