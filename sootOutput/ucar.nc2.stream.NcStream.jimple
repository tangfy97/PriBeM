public class ucar.nc2.stream.NcStream extends java.lang.Object
{
    public static final byte[] MAGIC_START;
    public static final byte[] MAGIC_HEADER;
    public static final byte[] MAGIC_DATA;
    public static final byte[] MAGIC_VDATA;
    public static final byte[] MAGIC_VEND;
    public static final byte[] MAGIC_ERR;
    public static final byte[] MAGIC_END;

    public void <init>()
    {
        ucar.nc2.stream.NcStream r0;

        r0 := @this: ucar.nc2.stream.NcStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static ucar.nc2.stream.NcStreamProto$Group$Builder encodeGroup(ucar.nc2.Group, int) throws java.io.IOException
    {
        ucar.nc2.stream.NcStreamProto$Variable$Builder $r16;
        ucar.nc2.stream.NcStreamProto$Attribute$Builder $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        ucar.nc2.Group r1, r29;
        ucar.nc2.stream.NcStreamProto$Group$Builder $r0, $r14;
        java.util.List $r3, $r5, $r7, $r9, $r11;
        ucar.nc2.Attribute r26;
        ucar.nc2.stream.NcStreamProto$EnumTypedef$Builder $r20;
        ucar.nc2.stream.NcStreamProto$Dimension$Builder $r24;
        ucar.nc2.Structure $r17;
        ucar.nc2.stream.NcStreamProto$Structure$Builder $r18;
        int i0;
        ucar.nc2.Variable r28;
        java.lang.String $r2;
        java.util.Iterator $r4, $r6, $r8, $r10, $r12;
        ucar.nc2.EnumTypedef r27;
        java.lang.Object $r13, $r15, $r19, $r21, $r23;
        ucar.nc2.Dimension r25;

        r1 := @parameter0: ucar.nc2.Group;

        i0 := @parameter1: int;

        $r0 = staticinvoke <ucar.nc2.stream.NcStreamProto$Group: ucar.nc2.stream.NcStreamProto$Group$Builder newBuilder()>();

        $r2 = virtualinvoke r1.<ucar.nc2.Group: java.lang.String getShortName()>();

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Group$Builder: ucar.nc2.stream.NcStreamProto$Group$Builder setName(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<ucar.nc2.Group: java.util.List getDimensions()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r23 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r25 = (ucar.nc2.Dimension) $r23;

        $r24 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$Dimension$Builder encodeDim(ucar.nc2.Dimension)>(r25);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Group$Builder: ucar.nc2.stream.NcStreamProto$Group$Builder addDims(ucar.nc2.stream.NcStreamProto$Dimension$Builder)>($r24);

        goto label01;

     label02:
        $r5 = virtualinvoke r1.<ucar.nc2.Group: java.util.List getAttributes()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r21 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r26 = (ucar.nc2.Attribute) $r21;

        $r22 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$Attribute$Builder encodeAtt(ucar.nc2.Attribute)>(r26);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Group$Builder: ucar.nc2.stream.NcStreamProto$Group$Builder addAtts(ucar.nc2.stream.NcStreamProto$Attribute$Builder)>($r22);

        goto label03;

     label04:
        $r7 = virtualinvoke r1.<ucar.nc2.Group: java.util.List getEnumTypedefs()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r19 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r27 = (ucar.nc2.EnumTypedef) $r19;

        $r20 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$EnumTypedef$Builder encodeEnumTypedef(ucar.nc2.EnumTypedef)>(r27);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Group$Builder: ucar.nc2.stream.NcStreamProto$Group$Builder addEnumTypes(ucar.nc2.stream.NcStreamProto$EnumTypedef$Builder)>($r20);

        goto label05;

     label06:
        $r9 = virtualinvoke r1.<ucar.nc2.Group: java.util.List getVariables()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r15 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r28 = (ucar.nc2.Variable) $r15;

        $z5 = r28 instanceof ucar.nc2.Structure;

        if $z5 == 0 goto label08;

        $r17 = (ucar.nc2.Structure) r28;

        $r18 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$Structure$Builder encodeStructure(ucar.nc2.Structure)>($r17);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Group$Builder: ucar.nc2.stream.NcStreamProto$Group$Builder addStructs(ucar.nc2.stream.NcStreamProto$Structure$Builder)>($r18);

        goto label09;

     label08:
        $r16 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$Variable$Builder encodeVar(ucar.nc2.Variable,int)>(r28, i0);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Group$Builder: ucar.nc2.stream.NcStreamProto$Group$Builder addVars(ucar.nc2.stream.NcStreamProto$Variable$Builder)>($r16);

     label09:
        goto label07;

     label10:
        $r11 = virtualinvoke r1.<ucar.nc2.Group: java.util.List getGroups()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z4 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label12;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r29 = (ucar.nc2.Group) $r13;

        $r14 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$Group$Builder encodeGroup(ucar.nc2.Group,int)>(r29, i0);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Group$Builder: ucar.nc2.stream.NcStreamProto$Group$Builder addGroups(ucar.nc2.stream.NcStreamProto$Group$Builder)>($r14);

        goto label11;

     label12:
        return $r0;
    }

    static ucar.nc2.stream.NcStreamProto$Attribute$Builder encodeAtt(ucar.nc2.Attribute)
    {
        byte[] $r7;
        ucar.nc2.stream.NcStreamProto$Attribute$Type $r4;
        ucar.ma2.DataType $r3;
        ucar.ma2.Array $r5;
        java.nio.ByteBuffer $r6;
        com.google.protobuf.ByteString $r8;
        ucar.nc2.Attribute r1;
        ucar.nc2.stream.NcStreamProto$Attribute$Builder $r0;
        int $i0, $i1, $i2, i3;
        java.lang.String $r2, $r9;
        boolean $z0;

        r1 := @parameter0: ucar.nc2.Attribute;

        $r0 = staticinvoke <ucar.nc2.stream.NcStreamProto$Attribute: ucar.nc2.stream.NcStreamProto$Attribute$Builder newBuilder()>();

        $r2 = virtualinvoke r1.<ucar.nc2.Attribute: java.lang.String getName()>();

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Attribute$Builder: ucar.nc2.stream.NcStreamProto$Attribute$Builder setName(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<ucar.nc2.Attribute: ucar.ma2.DataType getDataType()>();

        $r4 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$Attribute$Type encodeAttributeType(ucar.ma2.DataType)>($r3);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Attribute$Builder: ucar.nc2.stream.NcStreamProto$Attribute$Builder setType(ucar.nc2.stream.NcStreamProto$Attribute$Type)>($r4);

        $i0 = virtualinvoke r1.<ucar.nc2.Attribute: int getLength()>();

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Attribute$Builder: ucar.nc2.stream.NcStreamProto$Attribute$Builder setLen(int)>($i0);

        $i1 = virtualinvoke r1.<ucar.nc2.Attribute: int getLength()>();

        if $i1 <= 0 goto label4;

        $z0 = virtualinvoke r1.<ucar.nc2.Attribute: boolean isString()>();

        if $z0 == 0 goto label3;

        i3 = 0;

     label1:
        $i2 = virtualinvoke r1.<ucar.nc2.Attribute: int getLength()>();

        if i3 >= $i2 goto label2;

        $r9 = virtualinvoke r1.<ucar.nc2.Attribute: java.lang.String getStringValue(int)>(i3);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Attribute$Builder: ucar.nc2.stream.NcStreamProto$Attribute$Builder addSdata(java.lang.String)>($r9);

        i3 = i3 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        $r5 = virtualinvoke r1.<ucar.nc2.Attribute: ucar.ma2.Array getValues()>();

        $r6 = virtualinvoke $r5.<ucar.ma2.Array: java.nio.ByteBuffer getDataAsByteBuffer()>();

        $r7 = virtualinvoke $r6.<java.nio.ByteBuffer: byte[] array()>();

        $r8 = staticinvoke <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[])>($r7);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Attribute$Builder: ucar.nc2.stream.NcStreamProto$Attribute$Builder setData(com.google.protobuf.ByteString)>($r8);

     label4:
        return $r0;
    }

    static ucar.nc2.stream.NcStreamProto$Dimension$Builder encodeDim(ucar.nc2.Dimension)
    {
        ucar.nc2.stream.NcStreamProto$Dimension$Builder $r0;
        long $l1;
        int $i0;
        ucar.nc2.Dimension r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: ucar.nc2.Dimension;

        $r0 = staticinvoke <ucar.nc2.stream.NcStreamProto$Dimension: ucar.nc2.stream.NcStreamProto$Dimension$Builder newBuilder()>();

        $r2 = virtualinvoke r1.<ucar.nc2.Dimension: java.lang.String getName()>();

        if $r2 != null goto label1;

        $r3 = "";

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<ucar.nc2.Dimension: java.lang.String getName()>();

     label2:
        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Dimension$Builder: ucar.nc2.stream.NcStreamProto$Dimension$Builder setName(java.lang.String)>($r3);

        $i0 = virtualinvoke r1.<ucar.nc2.Dimension: int getLength()>();

        $l1 = (long) $i0;

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Dimension$Builder: ucar.nc2.stream.NcStreamProto$Dimension$Builder setLength(long)>($l1);

        $z0 = virtualinvoke r1.<ucar.nc2.Dimension: boolean isShared()>();

        if $z0 != 0 goto label3;

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Dimension$Builder: ucar.nc2.stream.NcStreamProto$Dimension$Builder setIsPrivate(boolean)>(1);

     label3:
        $z1 = virtualinvoke r1.<ucar.nc2.Dimension: boolean isVariableLength()>();

        if $z1 == 0 goto label4;

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Dimension$Builder: ucar.nc2.stream.NcStreamProto$Dimension$Builder setIsVlen(boolean)>(1);

     label4:
        $z2 = virtualinvoke r1.<ucar.nc2.Dimension: boolean isUnlimited()>();

        if $z2 == 0 goto label5;

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Dimension$Builder: ucar.nc2.stream.NcStreamProto$Dimension$Builder setIsUnlimited(boolean)>(1);

     label5:
        return $r0;
    }

    static ucar.nc2.stream.NcStreamProto$EnumTypedef$Builder encodeEnumTypedef(ucar.nc2.EnumTypedef) throws java.io.IOException
    {
        java.util.Iterator $r6;
        java.util.Set $r5;
        java.lang.Integer $r8, $r9;
        ucar.nc2.EnumTypedef r1;
        ucar.nc2.stream.NcStreamProto$EnumTypedef$EnumType$Builder $r4;
        java.util.Map $r3;
        int $i0;
        java.lang.Object $r7, $r10;
        java.lang.String $r2, $r11;
        ucar.nc2.stream.NcStreamProto$EnumTypedef$Builder $r0;
        boolean $z0;

        r1 := @parameter0: ucar.nc2.EnumTypedef;

        $r0 = staticinvoke <ucar.nc2.stream.NcStreamProto$EnumTypedef: ucar.nc2.stream.NcStreamProto$EnumTypedef$Builder newBuilder()>();

        $r2 = virtualinvoke r1.<ucar.nc2.EnumTypedef: java.lang.String getName()>();

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$EnumTypedef$Builder: ucar.nc2.stream.NcStreamProto$EnumTypedef$Builder setName(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<ucar.nc2.EnumTypedef: java.util.Map getMap()>();

        $r4 = staticinvoke <ucar.nc2.stream.NcStreamProto$EnumTypedef$EnumType: ucar.nc2.stream.NcStreamProto$EnumTypedef$EnumType$Builder newBuilder()>();

        $r5 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.Integer) $r7;

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        virtualinvoke $r4.<ucar.nc2.stream.NcStreamProto$EnumTypedef$EnumType$Builder: ucar.nc2.stream.NcStreamProto$EnumTypedef$EnumType$Builder clear()>();

        virtualinvoke $r4.<ucar.nc2.stream.NcStreamProto$EnumTypedef$EnumType$Builder: ucar.nc2.stream.NcStreamProto$EnumTypedef$EnumType$Builder setCode(int)>($i0);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r10 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r11 = (java.lang.String) $r10;

        virtualinvoke $r4.<ucar.nc2.stream.NcStreamProto$EnumTypedef$EnumType$Builder: ucar.nc2.stream.NcStreamProto$EnumTypedef$EnumType$Builder setValue(java.lang.String)>($r11);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$EnumTypedef$Builder: ucar.nc2.stream.NcStreamProto$EnumTypedef$Builder addMap(ucar.nc2.stream.NcStreamProto$EnumTypedef$EnumType$Builder)>($r4);

        goto label1;

     label2:
        return $r0;
    }

    static ucar.nc2.stream.NcStreamProto$Variable$Builder encodeVar(ucar.nc2.Variable, int) throws java.io.IOException
    {
        byte[] $r11;
        ucar.nc2.stream.NcStreamProto$Variable$Builder $r0;
        java.nio.ByteBuffer $r10;
        byte $b6;
        ucar.nc2.stream.NcStreamProto$Attribute$Builder $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        ucar.nc2.stream.NcStreamProto$DataType $r4;
        ucar.ma2.DataType $r3, $r5, $r8;
        com.google.protobuf.ByteString $r12;
        java.util.List $r6, $r19;
        ucar.nc2.Attribute r22;
        ucar.nc2.stream.NcStreamProto$Dimension$Builder $r16;
        long $l0, $l2, $l4, $l5;
        int $i1, i3, $i7;
        ucar.nc2.Variable r1;
        java.lang.String $r2, $r18;
        java.util.Iterator $r7, $r20;
        ucar.ma2.Array $r9;
        ucar.nc2.EnumTypedef $r17;
        java.lang.Object $r13, $r15;
        ucar.nc2.Dimension r21;

        r1 := @parameter0: ucar.nc2.Variable;

        i3 := @parameter1: int;

        $r0 = staticinvoke <ucar.nc2.stream.NcStreamProto$Variable: ucar.nc2.stream.NcStreamProto$Variable$Builder newBuilder()>();

        $r2 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.String getShortName()>();

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Variable$Builder: ucar.nc2.stream.NcStreamProto$Variable$Builder setName(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r4 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$DataType encodeDataType(ucar.ma2.DataType)>($r3);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Variable$Builder: ucar.nc2.stream.NcStreamProto$Variable$Builder setDataType(ucar.nc2.stream.NcStreamProto$DataType)>($r4);

        $z0 = virtualinvoke r1.<ucar.nc2.Variable: boolean isUnsigned()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Variable$Builder: ucar.nc2.stream.NcStreamProto$Variable$Builder setUnsigned(boolean)>(1);

     label1:
        $r5 = virtualinvoke r1.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $z1 = virtualinvoke $r5.<ucar.ma2.DataType: boolean isEnum()>();

        if $z1 == 0 goto label2;

        $r17 = virtualinvoke r1.<ucar.nc2.Variable: ucar.nc2.EnumTypedef getEnumTypedef()>();

        if $r17 == null goto label2;

        $r18 = virtualinvoke $r17.<ucar.nc2.EnumTypedef: java.lang.String getName()>();

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Variable$Builder: ucar.nc2.stream.NcStreamProto$Variable$Builder setEnumType(java.lang.String)>($r18);

     label2:
        $r19 = virtualinvoke r1.<ucar.nc2.Variable: java.util.List getDimensions()>();

        $r20 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z6 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label4;

        $r15 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (ucar.nc2.Dimension) $r15;

        $r16 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$Dimension$Builder encodeDim(ucar.nc2.Dimension)>(r21);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Variable$Builder: ucar.nc2.stream.NcStreamProto$Variable$Builder addShape(ucar.nc2.stream.NcStreamProto$Dimension$Builder)>($r16);

        goto label3;

     label4:
        $r6 = virtualinvoke r1.<ucar.nc2.Variable: java.util.List getAttributes()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r13 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r22 = (ucar.nc2.Attribute) $r13;

        $r14 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$Attribute$Builder encodeAtt(ucar.nc2.Attribute)>(r22);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Variable$Builder: ucar.nc2.stream.NcStreamProto$Variable$Builder addAtts(ucar.nc2.stream.NcStreamProto$Attribute$Builder)>($r14);

        goto label5;

     label6:
        $z3 = virtualinvoke r1.<ucar.nc2.Variable: boolean isCaching()>();

        if $z3 == 0 goto label8;

        $r8 = virtualinvoke r1.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $z4 = virtualinvoke $r8.<ucar.ma2.DataType: boolean isNumeric()>();

        if $z4 == 0 goto label8;

        $z5 = virtualinvoke r1.<ucar.nc2.Variable: boolean isCoordinateVariable()>();

        if $z5 != 0 goto label7;

        $l0 = virtualinvoke r1.<ucar.nc2.Variable: long getSize()>();

        $i1 = virtualinvoke r1.<ucar.nc2.Variable: int getElementSize()>();

        $l2 = (long) $i1;

        $l5 = $l0 * $l2;

        $l4 = (long) i3;

        $b6 = $l5 cmp $l4;

        $i7 = (int) $b6;

        if $i7 >= 0 goto label8;

     label7:
        $r9 = virtualinvoke r1.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $r10 = virtualinvoke $r9.<ucar.ma2.Array: java.nio.ByteBuffer getDataAsByteBuffer()>();

        $r11 = virtualinvoke $r10.<java.nio.ByteBuffer: byte[] array()>();

        $r12 = staticinvoke <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[])>($r11);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Variable$Builder: ucar.nc2.stream.NcStreamProto$Variable$Builder setData(com.google.protobuf.ByteString)>($r12);

     label8:
        return $r0;
    }

    static ucar.nc2.stream.NcStreamProto$Structure$Builder encodeStructure(ucar.nc2.Structure) throws java.io.IOException
    {
        ucar.nc2.stream.NcStreamProto$Dimension$Builder $r18;
        ucar.nc2.stream.NcStreamProto$Variable$Builder $r12;
        ucar.nc2.Structure r1, $r13;
        ucar.nc2.stream.NcStreamProto$Structure$Builder $r0, $r14;
        ucar.nc2.stream.NcStreamProto$Attribute$Builder $r16;
        int $i1;
        ucar.nc2.Variable r21;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3;
        ucar.nc2.stream.NcStreamProto$DataType $r4;
        java.util.Iterator $r6, $r8, $r10;
        ucar.ma2.DataType $r3;
        java.util.List $r5, $r7, $r9;
        ucar.nc2.Attribute r20;
        java.lang.Object $r11, $r15, $r17;
        ucar.nc2.Dimension r19;

        r1 := @parameter0: ucar.nc2.Structure;

        $r0 = staticinvoke <ucar.nc2.stream.NcStreamProto$Structure: ucar.nc2.stream.NcStreamProto$Structure$Builder newBuilder()>();

        $r2 = virtualinvoke r1.<ucar.nc2.Structure: java.lang.String getShortName()>();

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Structure$Builder: ucar.nc2.stream.NcStreamProto$Structure$Builder setName(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<ucar.nc2.Structure: ucar.ma2.DataType getDataType()>();

        $r4 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$DataType encodeDataType(ucar.ma2.DataType)>($r3);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Structure$Builder: ucar.nc2.stream.NcStreamProto$Structure$Builder setDataType(ucar.nc2.stream.NcStreamProto$DataType)>($r4);

        $r5 = virtualinvoke r1.<ucar.nc2.Structure: java.util.List getDimensions()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r17 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r19 = (ucar.nc2.Dimension) $r17;

        $r18 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$Dimension$Builder encodeDim(ucar.nc2.Dimension)>(r19);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Structure$Builder: ucar.nc2.stream.NcStreamProto$Structure$Builder addShape(ucar.nc2.stream.NcStreamProto$Dimension$Builder)>($r18);

        goto label1;

     label2:
        $r7 = virtualinvoke r1.<ucar.nc2.Structure: java.util.List getAttributes()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r15 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r20 = (ucar.nc2.Attribute) $r15;

        $r16 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$Attribute$Builder encodeAtt(ucar.nc2.Attribute)>(r20);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Structure$Builder: ucar.nc2.stream.NcStreamProto$Structure$Builder addAtts(ucar.nc2.stream.NcStreamProto$Attribute$Builder)>($r16);

        goto label3;

     label4:
        $r9 = virtualinvoke r1.<ucar.nc2.Structure: java.util.List getVariables()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r21 = (ucar.nc2.Variable) $r11;

        $z3 = r21 instanceof ucar.nc2.Structure;

        if $z3 == 0 goto label6;

        $r13 = (ucar.nc2.Structure) r21;

        $r14 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$Structure$Builder encodeStructure(ucar.nc2.Structure)>($r13);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Structure$Builder: ucar.nc2.stream.NcStreamProto$Structure$Builder addStructs(ucar.nc2.stream.NcStreamProto$Structure$Builder)>($r14);

        goto label7;

     label6:
        $i1 = (int) -1;

        $r12 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$Variable$Builder encodeVar(ucar.nc2.Variable,int)>(r21, $i1);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Structure$Builder: ucar.nc2.stream.NcStreamProto$Structure$Builder addVars(ucar.nc2.stream.NcStreamProto$Variable$Builder)>($r12);

     label7:
        goto label5;

     label8:
        return $r0;
    }

    public static ucar.nc2.stream.NcStreamProto$Error encodeErrorMessage(java.lang.String)
    {
        java.lang.String r1;
        ucar.nc2.stream.NcStreamProto$Error $r2;
        ucar.nc2.stream.NcStreamProto$Error$Builder $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <ucar.nc2.stream.NcStreamProto$Error: ucar.nc2.stream.NcStreamProto$Error$Builder newBuilder()>();

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Error$Builder: ucar.nc2.stream.NcStreamProto$Error$Builder setMessage(java.lang.String)>(r1);

        $r2 = virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Error$Builder: ucar.nc2.stream.NcStreamProto$Error build()>();

        return $r2;
    }

    static ucar.nc2.stream.NcStreamProto$Data encodeDataProto(ucar.nc2.Variable, ucar.ma2.Section)
    {
        ucar.nc2.stream.NcStreamProto$DataType $r4;
        ucar.ma2.Section r5;
        ucar.nc2.stream.NcStreamProto$Section $r6;
        ucar.nc2.stream.NcStreamProto$Data$Builder $r0;
        ucar.ma2.DataType $r3;
        ucar.nc2.stream.NcStreamProto$Data $r7;
        ucar.nc2.Variable r1;
        java.lang.String $r2;

        r1 := @parameter0: ucar.nc2.Variable;

        r5 := @parameter1: ucar.ma2.Section;

        $r0 = staticinvoke <ucar.nc2.stream.NcStreamProto$Data: ucar.nc2.stream.NcStreamProto$Data$Builder newBuilder()>();

        $r2 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.String getName()>();

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Data$Builder: ucar.nc2.stream.NcStreamProto$Data$Builder setVarName(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r4 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$DataType encodeDataType(ucar.ma2.DataType)>($r3);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Data$Builder: ucar.nc2.stream.NcStreamProto$Data$Builder setDataType(ucar.nc2.stream.NcStreamProto$DataType)>($r4);

        $r6 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$Section encodeSection(ucar.ma2.Section)>(r5);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Data$Builder: ucar.nc2.stream.NcStreamProto$Data$Builder setSection(ucar.nc2.stream.NcStreamProto$Section)>($r6);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Data$Builder: ucar.nc2.stream.NcStreamProto$Data$Builder setVersion(int)>(1);

        $r7 = virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Data$Builder: ucar.nc2.stream.NcStreamProto$Data build()>();

        return $r7;
    }

    public static ucar.nc2.stream.NcStreamProto$Section encodeSection(ucar.ma2.Section)
    {
        ucar.ma2.Range r6;
        ucar.ma2.Section r1;
        java.util.Iterator $r3;
        ucar.nc2.stream.NcStreamProto$Section $r4;
        long $l1;
        java.util.List $r2;
        ucar.nc2.stream.NcStreamProto$Section$Builder $r0;
        ucar.nc2.stream.NcStreamProto$Range$Builder $r7;
        int $i0;
        java.lang.Object $r5;
        boolean $z0;

        r1 := @parameter0: ucar.ma2.Section;

        $r0 = staticinvoke <ucar.nc2.stream.NcStreamProto$Section: ucar.nc2.stream.NcStreamProto$Section$Builder newBuilder()>();

        $r2 = virtualinvoke r1.<ucar.ma2.Section: java.util.List getRanges()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (ucar.ma2.Range) $r5;

        $r7 = staticinvoke <ucar.nc2.stream.NcStreamProto$Range: ucar.nc2.stream.NcStreamProto$Range$Builder newBuilder()>();

        $i0 = virtualinvoke r6.<ucar.ma2.Range: int length()>();

        $l1 = (long) $i0;

        virtualinvoke $r7.<ucar.nc2.stream.NcStreamProto$Range$Builder: ucar.nc2.stream.NcStreamProto$Range$Builder setSize(long)>($l1);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Section$Builder: ucar.nc2.stream.NcStreamProto$Section$Builder addRange(ucar.nc2.stream.NcStreamProto$Range$Builder)>($r7);

        goto label1;

     label2:
        $r4 = virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$Section$Builder: ucar.nc2.stream.NcStreamProto$Section build()>();

        return $r4;
    }

    public static long encodeArrayStructure(ucar.ma2.ArrayStructure, java.io.OutputStream) throws java.io.IOException
    {
        byte[] $r6, $r8;
        ucar.ma2.ArrayStructure r0;
        ucar.nc2.stream.NcStreamProto$StructureData $r7;
        long $l2, $l4, $l5, $l6;
        java.lang.String[] $r12, r17;
        java.lang.Integer $r13, $r15;
        java.nio.ByteBuffer $r5;
        java.util.ArrayList $r2, $r4;
        ucar.ma2.ArrayStructureBB $r1;
        int $i0, $i1, $i3, $i7, i8, i9;
        java.lang.String r14, $r16;
        boolean $z0, $z1, $z2;
        java.io.OutputStream r9;
        java.util.Iterator $r10;
        java.util.List $r3;
        java.lang.Object $r11;

        r0 := @parameter0: ucar.ma2.ArrayStructure;

        r9 := @parameter1: java.io.OutputStream;

        $r1 = staticinvoke <ucar.nc2.iosp.IospHelper: ucar.ma2.ArrayStructureBB makeArrayBB(ucar.ma2.ArrayStructure)>(r0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke $r1.<ucar.ma2.ArrayStructureBB: java.util.List getHeap()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        if $r3 == null goto label5;

        $r10 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r11 instanceof java.lang.String;

        if $z1 == 0 goto label2;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r16 = (java.lang.String) $r11;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label4;

     label2:
        $z2 = $r11 instanceof java.lang.String[];

        if $z2 == 0 goto label4;

        $r12 = (java.lang.String[]) $r11;

        r17 = (java.lang.String[]) $r12;

        $i7 = lengthof r17;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r13);

        i8 = lengthof r17;

        i9 = 0;

     label3:
        if i9 >= i8 goto label4;

        r14 = r17[i9];

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r14);

        i9 = i9 + 1;

        goto label3;

     label4:
        goto label1;

     label5:
        $r5 = virtualinvoke $r1.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer getByteBuffer()>();

        $r6 = virtualinvoke $r5.<java.nio.ByteBuffer: byte[] array()>();

        $r7 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$StructureData encodeStructureDataProto(byte[],java.util.List,java.util.List)>($r6, $r4, $r2);

        $r8 = virtualinvoke $r7.<ucar.nc2.stream.NcStreamProto$StructureData: byte[] toByteArray()>();

        $i0 = lengthof $r8;

        $i1 = staticinvoke <ucar.nc2.stream.NcStream: int writeVInt(java.io.OutputStream,int)>(r9, $i0);

        $l2 = (long) $i1;

        $l5 = 0L + $l2;

        virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r8);

        $i3 = lengthof $r8;

        $l4 = (long) $i3;

        $l6 = $l5 + $l4;

        return $l6;
    }

    static ucar.nc2.stream.NcStreamProto$StructureData encodeStructureDataProto(byte[], java.util.List, java.util.List)
    {
        byte[] r1;
        java.util.Iterator $r4, $r6;
        ucar.nc2.stream.NcStreamProto$StructureData $r7;
        java.lang.Integer r10;
        com.google.protobuf.ByteString $r2;
        java.util.List r3, r5;
        int $i0;
        ucar.nc2.stream.NcStreamProto$StructureData$Builder $r0;
        java.lang.Object $r8, $r9;
        java.lang.String r11;
        boolean $z0, $z1;

        r1 := @parameter0: byte[];

        r3 := @parameter1: java.util.List;

        r5 := @parameter2: java.util.List;

        $r0 = staticinvoke <ucar.nc2.stream.NcStreamProto$StructureData: ucar.nc2.stream.NcStreamProto$StructureData$Builder newBuilder()>();

        $r2 = staticinvoke <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[])>(r1);

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$StructureData$Builder: ucar.nc2.stream.NcStreamProto$StructureData$Builder setData(com.google.protobuf.ByteString)>($r2);

        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.Integer) $r9;

        $i0 = virtualinvoke r10.<java.lang.Integer: int intValue()>();

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$StructureData$Builder: ucar.nc2.stream.NcStreamProto$StructureData$Builder addHeapCount(int)>($i0);

        goto label1;

     label2:
        $r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r8;

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$StructureData$Builder: ucar.nc2.stream.NcStreamProto$StructureData$Builder addSdata(java.lang.String)>(r11);

        goto label3;

     label4:
        $r7 = virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$StructureData$Builder: ucar.nc2.stream.NcStreamProto$StructureData build()>();

        return $r7;
    }

    public static ucar.ma2.ArrayStructureBB decodeArrayStructure(ucar.ma2.StructureMembers, int[], byte[]) throws java.io.IOException
    {
        byte[] r1, $r3;
        java.lang.String[] r13;
        java.lang.Integer r12;
        java.nio.ByteBuffer $r4;
        ucar.ma2.ArrayStructureBB $r5;
        int[] r7;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        ucar.nc2.stream.NcStreamProto$StructureData$Builder $r0;
        java.lang.String $r15;
        boolean $z0;
        java.util.Iterator $r10;
        com.google.protobuf.ByteString $r2;
        java.util.List $r8, $r9;
        ucar.ma2.StructureMembers r6;
        java.lang.Object $r11, $r14, $r16;

        r6 := @parameter0: ucar.ma2.StructureMembers;

        r7 := @parameter1: int[];

        r1 := @parameter2: byte[];

        $r0 = staticinvoke <ucar.nc2.stream.NcStreamProto$StructureData: ucar.nc2.stream.NcStreamProto$StructureData$Builder newBuilder()>();

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$StructureData$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(byte[])>(r1);

        $r2 = virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$StructureData$Builder: com.google.protobuf.ByteString getData()>();

        $r3 = virtualinvoke $r2.<com.google.protobuf.ByteString: byte[] toByteArray()>();

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r3);

        $r5 = new ucar.ma2.ArrayStructureBB;

        specialinvoke $r5.<ucar.ma2.ArrayStructureBB: void <init>(ucar.ma2.StructureMembers,int[],java.nio.ByteBuffer,int)>(r6, r7, $r4, 0);

        $r8 = virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$StructureData$Builder: java.util.List getSdataList()>();

        $r9 = virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$StructureData$Builder: java.util.List getHeapCountList()>();

        i5 = 0;

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.Integer) $r11;

        $i0 = virtualinvoke r12.<java.lang.Integer: int intValue()>();

        if $i0 != 1 goto label2;

        $i4 = i5;

        i5 = i5 + 1;

        $r16 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i4);

        virtualinvoke $r5.<ucar.ma2.ArrayStructureBB: int addObjectToHeap(java.lang.Object)>($r16);

        goto label5;

     label2:
        $i1 = virtualinvoke r12.<java.lang.Integer: int intValue()>();

        r13 = newarray (java.lang.String)[$i1];

        i6 = 0;

     label3:
        $i2 = virtualinvoke r12.<java.lang.Integer: int intValue()>();

        if i6 >= $i2 goto label4;

        $i3 = i5;

        i5 = i5 + 1;

        $r14 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i3);

        $r15 = (java.lang.String) $r14;

        r13[i6] = $r15;

        i6 = i6 + 1;

        goto label3;

     label4:
        virtualinvoke $r5.<ucar.ma2.ArrayStructureBB: int addObjectToHeap(java.lang.Object)>(r13);

     label5:
        goto label1;

     label6:
        return $r5;
    }

    public static ucar.ma2.StructureData decodeStructureData(ucar.ma2.StructureMembers, byte[]) throws java.io.IOException
    {
        byte[] r1, $r3;
        java.lang.String[] r14;
        java.lang.Integer r13;
        java.nio.ByteBuffer $r4;
        ucar.ma2.StructureData $r11;
        ucar.ma2.ArrayStructureBB $r5;
        int[] $r7;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        ucar.nc2.stream.NcStreamProto$StructureData$Builder $r0;
        java.lang.String $r16;
        boolean $z0;
        java.util.Iterator $r10;
        com.google.protobuf.ByteString $r2;
        java.util.List $r8, $r9;
        ucar.ma2.StructureMembers r6;
        java.lang.Object $r12, $r15, $r17;

        r6 := @parameter0: ucar.ma2.StructureMembers;

        r1 := @parameter1: byte[];

        $r0 = staticinvoke <ucar.nc2.stream.NcStreamProto$StructureData: ucar.nc2.stream.NcStreamProto$StructureData$Builder newBuilder()>();

        virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$StructureData$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(byte[])>(r1);

        $r2 = virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$StructureData$Builder: com.google.protobuf.ByteString getData()>();

        $r3 = virtualinvoke $r2.<com.google.protobuf.ByteString: byte[] toByteArray()>();

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r3);

        $r5 = new ucar.ma2.ArrayStructureBB;

        $r7 = newarray (int)[1];

        $r7[0] = 1;

        specialinvoke $r5.<ucar.ma2.ArrayStructureBB: void <init>(ucar.ma2.StructureMembers,int[],java.nio.ByteBuffer,int)>(r6, $r7, $r4, 0);

        $r8 = virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$StructureData$Builder: java.util.List getSdataList()>();

        $r9 = virtualinvoke $r0.<ucar.nc2.stream.NcStreamProto$StructureData$Builder: java.util.List getHeapCountList()>();

        i5 = 0;

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r12 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.Integer) $r12;

        $i0 = virtualinvoke r13.<java.lang.Integer: int intValue()>();

        if $i0 != 1 goto label2;

        $i4 = i5;

        i5 = i5 + 1;

        $r17 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i4);

        virtualinvoke $r5.<ucar.ma2.ArrayStructureBB: int addObjectToHeap(java.lang.Object)>($r17);

        goto label5;

     label2:
        $i1 = virtualinvoke r13.<java.lang.Integer: int intValue()>();

        r14 = newarray (java.lang.String)[$i1];

        i6 = 0;

     label3:
        $i2 = virtualinvoke r13.<java.lang.Integer: int intValue()>();

        if i6 >= $i2 goto label4;

        $i3 = i5;

        i5 = i5 + 1;

        $r15 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i3);

        $r16 = (java.lang.String) $r15;

        r14[i6] = $r16;

        i6 = i6 + 1;

        goto label3;

     label4:
        virtualinvoke $r5.<ucar.ma2.ArrayStructureBB: int addObjectToHeap(java.lang.Object)>(r14);

     label5:
        goto label1;

     label6:
        $r11 = virtualinvoke $r5.<ucar.ma2.ArrayStructureBB: ucar.ma2.StructureData getStructureData(int)>(0);

        return $r11;
    }

    static void show(ucar.nc2.stream.NcStreamProto$Header) throws com.google.protobuf.InvalidProtocolBufferException
    {
        ucar.nc2.stream.NcStreamProto$Group $r1;
        boolean $z0, $z1, $z2;
        ucar.nc2.stream.NcStreamProto$Attribute r27;
        java.util.List $r2, $r4, $r6;
        java.lang.StringBuilder $r9, $r11, $r12, $r15, $r17, $r18, $r21, $r23, $r24;
        ucar.nc2.stream.NcStreamProto$Header r0;
        ucar.nc2.stream.NcStreamProto$Dimension r26;
        java.lang.String $r13, $r19, $r25;
        java.io.PrintStream $r10, $r16, $r22;
        java.util.Iterator $r3, $r5, $r7;
        ucar.nc2.stream.NcStreamProto$Variable r28;
        java.lang.Object $r8, $r14, $r20;

        r0 := @parameter0: ucar.nc2.stream.NcStreamProto$Header;

        $r1 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Header: ucar.nc2.stream.NcStreamProto$Group getRoot()>();

        $r2 = virtualinvoke $r1.<ucar.nc2.stream.NcStreamProto$Group: java.util.List getDimsList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r20 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r26 = (ucar.nc2.stream.NcStreamProto$Dimension) $r20;

        $r22 = <java.lang.System: java.io.PrintStream out>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dim= ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r25);

        goto label1;

     label2:
        $r4 = virtualinvoke $r1.<ucar.nc2.stream.NcStreamProto$Group: java.util.List getAttsList()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r14 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r27 = (ucar.nc2.stream.NcStreamProto$Attribute) $r14;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("att= ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r27);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r19);

        goto label3;

     label4:
        $r6 = virtualinvoke $r1.<ucar.nc2.stream.NcStreamProto$Group: java.util.List getVarsList()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r28 = (ucar.nc2.stream.NcStreamProto$Variable) $r8;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("var= ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r28);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r13);

        goto label5;

     label6:
        return;
    }

    static int writeByte(java.io.OutputStream, byte) throws java.io.IOException
    {
        java.io.OutputStream r0;
        int $i1;
        byte b0;

        r0 := @parameter0: java.io.OutputStream;

        b0 := @parameter1: byte;

        $i1 = (int) b0;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i1);

        return 1;
    }

    static int writeBytes(java.io.OutputStream, byte[], int, int) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] r1;
        int i0, i1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        return i1;
    }

    public static int writeBytes(java.io.OutputStream, byte[]) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: byte[];

        $i0 = lengthof r1;

        $i1 = staticinvoke <ucar.nc2.stream.NcStream: int writeBytes(java.io.OutputStream,byte[],int,int)>(r0, r1, 0, $i0);

        return $i1;
    }

    public static int writeVInt(java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte $b3, $b4;
        int $i0, $i1, $i2, i5, $i7;

        r0 := @parameter0: java.io.OutputStream;

        i5 := @parameter1: int;

     label1:
        $i7 = (int) -128;

        $i0 = i5 & $i7;

        if $i0 != 0 goto label2;

        $b4 = (byte) i5;

        staticinvoke <ucar.nc2.stream.NcStream: int writeByte(java.io.OutputStream,byte)>(r0, $b4);

        goto label3;

     label2:
        $i1 = i5 & 127;

        $i2 = $i1 | 128;

        $b3 = (byte) $i2;

        staticinvoke <ucar.nc2.stream.NcStream: int writeByte(java.io.OutputStream,byte)>(r0, $b3);

        i5 = i5 >>> 7;

        goto label1;

     label3:
        return 1;
    }

    public static int writeVInt(java.nio.channels.WritableByteChannel, int) throws java.io.IOException
    {
        java.nio.ByteBuffer $r0;
        byte $b3, $b4;
        int $i0, $i1, $i2, $i5, i6, $i8;
        java.nio.channels.WritableByteChannel r1;

        r1 := @parameter0: java.nio.channels.WritableByteChannel;

        i6 := @parameter1: int;

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8);

     label1:
        $i8 = (int) -128;

        $i0 = i6 & $i8;

        if $i0 != 0 goto label2;

        $b4 = (byte) i6;

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b4);

        goto label3;

     label2:
        $i1 = i6 & 127;

        $i2 = $i1 | 128;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b3);

        i6 = i6 >>> 7;

        goto label1;

     label3:
        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        interfaceinvoke r1.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>($r0);

        $i5 = virtualinvoke $r0.<java.nio.ByteBuffer: int limit()>();

        return $i5;
    }

    static int writeVLong(java.io.OutputStream, long) throws java.io.IOException
    {
        java.io.OutputStream r0;
        long $l0, $l5, $l6, l9;
        byte $b1, $b3, $b8;
        int $i2, $i4, $i7, i10;

        r0 := @parameter0: java.io.OutputStream;

        l9 := @parameter1: long;

        i10 = 0;

     label1:
        $l0 = l9 & -128L;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l5 = l9 & 127L;

        $l6 = $l5 | 128L;

        $i7 = (int) $l6;

        $b8 = (byte) $i7;

        staticinvoke <ucar.nc2.stream.NcStream: int writeByte(java.io.OutputStream,byte)>(r0, $b8);

        l9 = l9 >>> 7;

        i10 = i10 + 1;

        goto label1;

     label2:
        $i2 = (int) l9;

        $b3 = (byte) $i2;

        staticinvoke <ucar.nc2.stream.NcStream: int writeByte(java.io.OutputStream,byte)>(r0, $b3);

        $i4 = i10 + 1;

        return $i4;
    }

    public static int readVInt(java.io.InputStream) throws java.io.IOException
    {
        short $s1, $s13;
        byte $b3, b5;
        int $i0, $i2, $i4, i6, i7, $i9, $i11, $i12, $i15, $i17, $i18;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i9 = (int) -1;

        if $i0 != $i9 goto label1;

        $i11 = (int) -1;

        return $i11;

     label1:
        b5 = (byte) $i0;

        $i12 = (int) b5;

        i6 = $i12 & 127;

        i7 = 7;

     label2:
        $s13 = (short) b5;

        $s1 = $s13 & 128;

        if $s1 == 0 goto label4;

        $i2 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i15 = (int) -1;

        if $i2 != $i15 goto label3;

        $i17 = (int) -1;

        return $i17;

     label3:
        b5 = (byte) $i2;

        $b3 = b5 & 127;

        $i18 = (int) $b3;

        $i4 = $i18 << i7;

        i6 = i6 | $i4;

        i7 = i7 + 7;

        goto label2;

     label4:
        return i6;
    }

    public static int readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        byte[] r0;
        int $i0, i1, i2, $i4;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r0 := @parameter1: byte[];

        i1 = 0;

        i2 = lengthof r0;

     label1:
        if i2 <= 0 goto label3;

        $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r0, i1, i2);

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        goto label3;

     label2:
        i1 = i1 + $i0;

        i2 = i2 - $i0;

        goto label1;

     label3:
        return i1;
    }

    public static boolean readAndTest(java.io.InputStream, byte[]) throws java.io.IOException
    {
        byte[] r0, r1;
        byte $b4, $b5;
        int $i0, $i1, $i2, $i3, i6, $i7, $i8;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        r0 := @parameter1: byte[];

        $i0 = lengthof r0;

        r1 = newarray (byte)[$i0];

        staticinvoke <ucar.nc2.stream.NcStream: int readFully(java.io.InputStream,byte[])>(r2, r1);

        $i2 = lengthof r1;

        $i1 = lengthof r0;

        if $i2 == $i1 goto label1;

        return 0;

     label1:
        i6 = 0;

     label2:
        $i3 = lengthof r1;

        if i6 >= $i3 goto label4;

        $b5 = r1[i6];

        $b4 = r0[i6];

        $i7 = (int) $b5;

        $i8 = (int) $b4;

        if $i7 == $i8 goto label3;

        return 0;

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static java.lang.String decodeErrorMessage(ucar.nc2.stream.NcStreamProto$Error)
    {
        java.lang.String $r1;
        ucar.nc2.stream.NcStreamProto$Error r0;

        r0 := @parameter0: ucar.nc2.stream.NcStreamProto$Error;

        $r1 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Error: java.lang.String getMessage()>();

        return $r1;
    }

    static ucar.nc2.Dimension decodeDim(ucar.nc2.stream.NcStreamProto$Dimension)
    {
        ucar.nc2.stream.NcStreamProto$Dimension r0;
        long $l0;
        int $i1;
        ucar.nc2.Dimension $r2;
        java.lang.String $r1, $r3, $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: ucar.nc2.stream.NcStreamProto$Dimension;

        $r1 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Dimension: java.lang.String getName()>();

        if $r1 != "" goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Dimension: java.lang.String getName()>();

     label2:
        $r2 = new ucar.nc2.Dimension;

        $r3 = $r4;

        $l0 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Dimension: long getLength()>();

        $i1 = (int) $l0;

        $z0 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Dimension: boolean getIsPrivate()>();

        if $z0 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        $z1 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Dimension: boolean getIsUnlimited()>();

        $z2 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Dimension: boolean getIsVlen()>();

        specialinvoke $r2.<ucar.nc2.Dimension: void <init>(java.lang.String,int,boolean,boolean,boolean)>($r3, $i1, $z3, $z1, $z2);

        return $r2;
    }

    static void readGroup(ucar.nc2.stream.NcStreamProto$Group, ucar.nc2.NetcdfFile, ucar.nc2.Group) throws com.google.protobuf.InvalidProtocolBufferException
    {
        ucar.nc2.stream.NcStreamProto$Group r0, r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        ucar.nc2.stream.NcStreamProto$Attribute r29;
        ucar.nc2.Group $r14, r16;
        java.util.List $r1, $r3, $r5, $r7, $r9, $r11;
        ucar.nc2.Attribute $r25;
        ucar.nc2.NetcdfFile r15;
        ucar.nc2.stream.NcStreamProto$Dimension r28;
        ucar.nc2.Structure $r19;
        ucar.nc2.Variable $r21;
        java.lang.String $r17;
        java.util.Iterator $r2, $r4, $r6, $r8, $r10, $r12;
        ucar.nc2.EnumTypedef $r23;
        ucar.nc2.stream.NcStreamProto$Variable r31;
        ucar.nc2.stream.NcStreamProto$Structure r32;
        java.lang.Object $r13, $r18, $r20, $r22, $r24, $r26;
        ucar.nc2.Dimension $r27;
        ucar.nc2.stream.NcStreamProto$EnumTypedef r30;

        r0 := @parameter0: ucar.nc2.stream.NcStreamProto$Group;

        r15 := @parameter1: ucar.nc2.NetcdfFile;

        r16 := @parameter2: ucar.nc2.Group;

        $r1 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Group: java.util.List getDimsList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r26 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r28 = (ucar.nc2.stream.NcStreamProto$Dimension) $r26;

        $r27 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.Dimension decodeDim(ucar.nc2.stream.NcStreamProto$Dimension)>(r28);

        virtualinvoke r16.<ucar.nc2.Group: void addDimension(ucar.nc2.Dimension)>($r27);

        goto label01;

     label02:
        $r3 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Group: java.util.List getAttsList()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r24 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r29 = (ucar.nc2.stream.NcStreamProto$Attribute) $r24;

        $r25 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.Attribute decodeAtt(ucar.nc2.stream.NcStreamProto$Attribute)>(r29);

        virtualinvoke r16.<ucar.nc2.Group: void addAttribute(ucar.nc2.Attribute)>($r25);

        goto label03;

     label04:
        $r5 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Group: java.util.List getEnumTypesList()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r22 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r30 = (ucar.nc2.stream.NcStreamProto$EnumTypedef) $r22;

        $r23 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.EnumTypedef decodeEnumTypedef(ucar.nc2.stream.NcStreamProto$EnumTypedef)>(r30);

        virtualinvoke r16.<ucar.nc2.Group: void addEnumeration(ucar.nc2.EnumTypedef)>($r23);

        goto label05;

     label06:
        $r7 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Group: java.util.List getVarsList()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r20 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r31 = (ucar.nc2.stream.NcStreamProto$Variable) $r20;

        $r21 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.Variable decodeVar(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,ucar.nc2.stream.NcStreamProto$Variable)>(r15, r16, null, r31);

        virtualinvoke r16.<ucar.nc2.Group: void addVariable(ucar.nc2.Variable)>($r21);

        goto label07;

     label08:
        $r9 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Group: java.util.List getStructsList()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z4 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r18 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r32 = (ucar.nc2.stream.NcStreamProto$Structure) $r18;

        $r19 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.Structure decodeStructure(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,ucar.nc2.stream.NcStreamProto$Structure)>(r15, r16, null, r32);

        virtualinvoke r16.<ucar.nc2.Group: void addVariable(ucar.nc2.Variable)>($r19);

        goto label09;

     label10:
        $r11 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Group: java.util.List getGroupsList()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z5 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label12;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r33 = (ucar.nc2.stream.NcStreamProto$Group) $r13;

        $r14 = new ucar.nc2.Group;

        $r17 = virtualinvoke r33.<ucar.nc2.stream.NcStreamProto$Group: java.lang.String getName()>();

        specialinvoke $r14.<ucar.nc2.Group: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,java.lang.String)>(r15, r16, $r17);

        virtualinvoke r16.<ucar.nc2.Group: void addGroup(ucar.nc2.Group)>($r14);

        staticinvoke <ucar.nc2.stream.NcStream: void readGroup(ucar.nc2.stream.NcStreamProto$Group,ucar.nc2.NetcdfFile,ucar.nc2.Group)>(r33, r15, $r14);

        goto label11;

     label12:
        return;
    }

    static ucar.nc2.EnumTypedef decodeEnumTypedef(ucar.nc2.stream.NcStreamProto$EnumTypedef)
    {
        java.util.Iterator $r3;
        java.util.HashMap $r2;
        java.lang.Integer $r8;
        ucar.nc2.EnumTypedef $r4;
        ucar.nc2.stream.NcStreamProto$EnumTypedef$EnumType r7;
        java.util.List $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r6;
        java.lang.String $r5, $r9;
        ucar.nc2.stream.NcStreamProto$EnumTypedef r0;
        boolean $z0;

        r0 := @parameter0: ucar.nc2.stream.NcStreamProto$EnumTypedef;

        $r1 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$EnumTypedef: java.util.List getMapList()>();

        $r2 = new java.util.HashMap;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = 2 * $i0;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>($i1);

        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (ucar.nc2.stream.NcStreamProto$EnumTypedef$EnumType) $r6;

        $i2 = virtualinvoke r7.<ucar.nc2.stream.NcStreamProto$EnumTypedef$EnumType: int getCode()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r9 = virtualinvoke r7.<ucar.nc2.stream.NcStreamProto$EnumTypedef$EnumType: java.lang.String getValue()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        goto label1;

     label2:
        $r4 = new ucar.nc2.EnumTypedef;

        $r5 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$EnumTypedef: java.lang.String getName()>();

        specialinvoke $r4.<ucar.nc2.EnumTypedef: void <init>(java.lang.String,java.util.Map)>($r5, $r2);

        return $r4;
    }

    static ucar.nc2.Attribute decodeAtt(ucar.nc2.stream.NcStreamProto$Attribute)
    {
        byte[] $r5;
        java.nio.ByteBuffer $r6;
        int[] $r12;
        int $i0, $i1, i2;
        java.lang.String $r8, $r15, $r16, $r18, $r19, $r22;
        java.io.PrintStream $r20;
        ucar.nc2.stream.NcStreamProto$Attribute$Type $r1, $r9, $r23;
        ucar.ma2.DataType $r2, $r3, $r10, $r24;
        ucar.nc2.stream.NcStreamProto$Attribute r0;
        ucar.ma2.Array $r11, $r13;
        com.google.protobuf.ByteString $r4;
        ucar.nc2.Attribute $r7, $r14, $r17, $r21;

        r0 := @parameter0: ucar.nc2.stream.NcStreamProto$Attribute;

        $i0 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Attribute: int getLen()>();

        if $i0 != 0 goto label1;

        $r21 = new ucar.nc2.Attribute;

        $r22 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Attribute: java.lang.String getName()>();

        $r23 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Attribute: ucar.nc2.stream.NcStreamProto$Attribute$Type getType()>();

        $r24 = staticinvoke <ucar.nc2.stream.NcStream: ucar.ma2.DataType decodeAttributeType(ucar.nc2.stream.NcStreamProto$Attribute$Type)>($r23);

        specialinvoke $r21.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.ma2.DataType)>($r22, $r24);

        return $r21;

     label1:
        $r1 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Attribute: ucar.nc2.stream.NcStreamProto$Attribute$Type getType()>();

        $r2 = staticinvoke <ucar.nc2.stream.NcStream: ucar.ma2.DataType decodeAttributeType(ucar.nc2.stream.NcStreamProto$Attribute$Type)>($r1);

        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r2 != $r3 goto label6;

        $i1 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Attribute: int getSdataCount()>();

        if $i1 == $i0 goto label2;

        $r20 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>("HEY lenp != len");

     label2:
        if $i1 != 1 goto label3;

        $r17 = new ucar.nc2.Attribute;

        $r18 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Attribute: java.lang.String getName()>();

        $r19 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Attribute: java.lang.String getSdata(int)>(0);

        specialinvoke $r17.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>($r18, $r19);

        return $r17;

     label3:
        $r12 = newarray (int)[1];

        $r12[0] = $i1;

        $r13 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>($r2, $r12);

        i2 = 0;

     label4:
        if i2 >= $i1 goto label5;

        $r16 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Attribute: java.lang.String getSdata(int)>(i2);

        virtualinvoke $r13.<ucar.ma2.Array: void setObject(int,java.lang.Object)>(i2, $r16);

        i2 = i2 + 1;

        goto label4;

     label5:
        $r14 = new ucar.nc2.Attribute;

        $r15 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Attribute: java.lang.String getName()>();

        specialinvoke $r14.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.ma2.Array)>($r15, $r13);

        return $r14;

     label6:
        $r4 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Attribute: com.google.protobuf.ByteString getData()>();

        $r5 = virtualinvoke $r4.<com.google.protobuf.ByteString: byte[] toByteArray()>();

        $r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r5);

        $r7 = new ucar.nc2.Attribute;

        $r8 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Attribute: java.lang.String getName()>();

        $r9 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Attribute: ucar.nc2.stream.NcStreamProto$Attribute$Type getType()>();

        $r10 = staticinvoke <ucar.nc2.stream.NcStream: ucar.ma2.DataType decodeAttributeType(ucar.nc2.stream.NcStreamProto$Attribute$Type)>($r9);

        $r11 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[],java.nio.ByteBuffer)>($r10, null, $r6);

        specialinvoke $r7.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.ma2.Array)>($r8, $r11);

        return $r7;
    }

    static ucar.nc2.Variable decodeVar(ucar.nc2.NetcdfFile, ucar.nc2.Group, ucar.nc2.Structure, ucar.nc2.stream.NcStreamProto$Variable)
    {
        byte[] $r13;
        java.lang.IllegalStateException $r23;
        java.nio.ByteBuffer $r14;
        int[] $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        ucar.nc2.stream.NcStreamProto$DataType $r6, $r8;
        ucar.ma2.DataType $r7, $r9;
        ucar.nc2.stream.NcStreamProto$Attribute r37;
        ucar.nc2.Group r2;
        com.google.protobuf.ByteString $r12;
        java.util.List $r10, $r34;
        ucar.nc2.Attribute $r17, $r19;
        java.lang.StringBuilder $r24, $r25, $r27;
        ucar.nc2.NetcdfFile r1;
        ucar.nc2.stream.NcStreamProto$Dimension r36;
        long $l0;
        ucar.nc2.Structure r3;
        java.util.ArrayList $r33;
        int $i1;
        ucar.nc2.Variable $r0;
        java.lang.String $r5, $r21, $r26, $r28, $r30, $r31;
        java.util.Iterator $r11, $r35;
        ucar.ma2.Array $r16;
        ucar.nc2.EnumTypedef $r32;
        ucar.nc2.stream.NcStreamProto$Variable r4;
        java.lang.Object $r18, $r20;
        ucar.nc2.Dimension $r22, $r29;

        r1 := @parameter0: ucar.nc2.NetcdfFile;

        r2 := @parameter1: ucar.nc2.Group;

        r3 := @parameter2: ucar.nc2.Structure;

        r4 := @parameter3: ucar.nc2.stream.NcStreamProto$Variable;

        $r0 = new ucar.nc2.Variable;

        $r5 = virtualinvoke r4.<ucar.nc2.stream.NcStreamProto$Variable: java.lang.String getName()>();

        specialinvoke $r0.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r1, r2, r3, $r5);

        $r6 = virtualinvoke r4.<ucar.nc2.stream.NcStreamProto$Variable: ucar.nc2.stream.NcStreamProto$DataType getDataType()>();

        $r7 = staticinvoke <ucar.nc2.stream.NcStream: ucar.ma2.DataType decodeDataType(ucar.nc2.stream.NcStreamProto$DataType)>($r6);

        $r8 = virtualinvoke r4.<ucar.nc2.stream.NcStreamProto$Variable: ucar.nc2.stream.NcStreamProto$DataType getDataType()>();

        $r9 = staticinvoke <ucar.nc2.stream.NcStream: ucar.ma2.DataType decodeDataType(ucar.nc2.stream.NcStreamProto$DataType)>($r8);

        virtualinvoke $r0.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r9);

        $z0 = virtualinvoke $r7.<ucar.ma2.DataType: boolean isEnum()>();

        if $z0 == 0 goto label01;

        $r31 = virtualinvoke r4.<ucar.nc2.stream.NcStreamProto$Variable: java.lang.String getEnumType()>();

        $r32 = virtualinvoke r2.<ucar.nc2.Group: ucar.nc2.EnumTypedef findEnumeration(java.lang.String)>($r31);

        if $r32 == null goto label01;

        virtualinvoke $r0.<ucar.nc2.Variable: void setEnumTypedef(ucar.nc2.EnumTypedef)>($r32);

     label01:
        $r33 = new java.util.ArrayList;

        specialinvoke $r33.<java.util.ArrayList: void <init>(int)>(6);

        $r34 = virtualinvoke r4.<ucar.nc2.stream.NcStreamProto$Variable: java.util.List getShapeList()>();

        $r35 = interfaceinvoke $r34.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z7 = interfaceinvoke $r35.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label06;

        $r20 = interfaceinvoke $r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (ucar.nc2.stream.NcStreamProto$Dimension) $r20;

        $z4 = virtualinvoke r36.<ucar.nc2.stream.NcStreamProto$Dimension: boolean getIsPrivate()>();

        if $z4 == 0 goto label03;

        $r29 = new ucar.nc2.Dimension;

        $r30 = virtualinvoke r36.<ucar.nc2.stream.NcStreamProto$Dimension: java.lang.String getName()>();

        $l0 = virtualinvoke r36.<ucar.nc2.stream.NcStreamProto$Dimension: long getLength()>();

        $i1 = (int) $l0;

        $z5 = virtualinvoke r36.<ucar.nc2.stream.NcStreamProto$Dimension: boolean getIsUnlimited()>();

        $z6 = virtualinvoke r36.<ucar.nc2.stream.NcStreamProto$Dimension: boolean getIsVlen()>();

        specialinvoke $r29.<ucar.nc2.Dimension: void <init>(java.lang.String,int,boolean,boolean,boolean)>($r30, $i1, 0, $z5, $z6);

        interfaceinvoke $r33.<java.util.List: boolean add(java.lang.Object)>($r29);

        goto label05;

     label03:
        $r21 = virtualinvoke r36.<ucar.nc2.stream.NcStreamProto$Dimension: java.lang.String getName()>();

        $r22 = virtualinvoke r2.<ucar.nc2.Group: ucar.nc2.Dimension findDimension(java.lang.String)>($r21);

        if $r22 != null goto label04;

        $r23 = new java.lang.IllegalStateException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can find shared dimension ");

        $r26 = virtualinvoke r36.<ucar.nc2.stream.NcStreamProto$Dimension: java.lang.String getName()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r28);

        throw $r23;

     label04:
        interfaceinvoke $r33.<java.util.List: boolean add(java.lang.Object)>($r22);

     label05:
        goto label02;

     label06:
        virtualinvoke $r0.<ucar.nc2.Variable: void setDimensions(java.util.List)>($r33);

        $r10 = virtualinvoke r4.<ucar.nc2.stream.NcStreamProto$Variable: java.util.List getAttsList()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r18 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r37 = (ucar.nc2.stream.NcStreamProto$Attribute) $r18;

        $r19 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.Attribute decodeAtt(ucar.nc2.stream.NcStreamProto$Attribute)>(r37);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r19);

        goto label07;

     label08:
        $z2 = virtualinvoke r4.<ucar.nc2.stream.NcStreamProto$Variable: boolean getUnsigned()>();

        if $z2 == 0 goto label09;

        $r17 = new ucar.nc2.Attribute;

        specialinvoke $r17.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_Unsigned", "true");

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r17);

     label09:
        $z3 = virtualinvoke r4.<ucar.nc2.stream.NcStreamProto$Variable: boolean hasData()>();

        if $z3 == 0 goto label10;

        $r12 = virtualinvoke r4.<ucar.nc2.stream.NcStreamProto$Variable: com.google.protobuf.ByteString getData()>();

        $r13 = virtualinvoke $r12.<com.google.protobuf.ByteString: byte[] toByteArray()>();

        $r14 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r13);

        $r15 = virtualinvoke $r0.<ucar.nc2.Variable: int[] getShape()>();

        $r16 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[],java.nio.ByteBuffer)>($r7, $r15, $r14);

        virtualinvoke $r0.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r16, 0);

     label10:
        return $r0;
    }

    static ucar.nc2.Structure decodeStructure(ucar.nc2.NetcdfFile, ucar.nc2.Group, ucar.nc2.Structure, ucar.nc2.stream.NcStreamProto$Structure)
    {
        java.lang.IllegalStateException $r47;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        ucar.nc2.stream.NcStreamProto$DataType $r1, $r2, $r8;
        ucar.ma2.DataType $r9;
        ucar.nc2.stream.NcStreamProto$Attribute r39;
        ucar.nc2.Group r4;
        java.util.List $r11, $r13, $r15, $r17;
        ucar.nc2.Attribute $r24;
        java.lang.StringBuilder $r32, $r34, $r46;
        ucar.nc2.NetcdfFile r3;
        ucar.nc2.stream.NcStreamProto$Dimension r38;
        long $l0;
        ucar.nc2.Structure r5, r7, $r20, $r37, $r43;
        java.util.ArrayList $r44;
        ucar.nc2.Sequence $r42;
        int $i1;
        ucar.nc2.Variable $r22;
        java.lang.String $r6, $r27, $r28, $r33, $r35, $r36;
        java.util.Iterator $r12, $r14, $r16, $r18;
        ucar.nc2.stream.NcStreamProto$Structure r0, r41;
        ucar.nc2.stream.NcStreamProto$Variable r40;
        java.lang.Object $r19, $r21, $r23, $r25;
        ucar.nc2.Dimension $r29, $r45;

        r3 := @parameter0: ucar.nc2.NetcdfFile;

        r4 := @parameter1: ucar.nc2.Group;

        r5 := @parameter2: ucar.nc2.Structure;

        r0 := @parameter3: ucar.nc2.stream.NcStreamProto$Structure;

        $r1 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Structure: ucar.nc2.stream.NcStreamProto$DataType getDataType()>();

        $r2 = <ucar.nc2.stream.NcStreamProto$DataType: ucar.nc2.stream.NcStreamProto$DataType SEQUENCE>;

        if $r1 != $r2 goto label01;

        $r42 = new ucar.nc2.Sequence;

        $r37 = $r42;

        $r36 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Structure: java.lang.String getName()>();

        specialinvoke $r42.<ucar.nc2.Sequence: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r3, r4, r5, $r36);

        goto label02;

     label01:
        $r43 = new ucar.nc2.Structure;

        $r37 = $r43;

        $r6 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Structure: java.lang.String getName()>();

        specialinvoke $r43.<ucar.nc2.Structure: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r3, r4, r5, $r6);

     label02:
        r7 = $r37;

        $r8 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Structure: ucar.nc2.stream.NcStreamProto$DataType getDataType()>();

        $r9 = staticinvoke <ucar.nc2.stream.NcStream: ucar.ma2.DataType decodeDataType(ucar.nc2.stream.NcStreamProto$DataType)>($r8);

        virtualinvoke $r37.<ucar.nc2.Structure: void setDataType(ucar.ma2.DataType)>($r9);

        $r44 = new java.util.ArrayList;

        specialinvoke $r44.<java.util.ArrayList: void <init>(int)>(6);

        $r11 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Structure: java.util.List getShapeList()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z7 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label08;

        $r25 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r38 = (ucar.nc2.stream.NcStreamProto$Dimension) $r25;

        $z3 = virtualinvoke r38.<ucar.nc2.stream.NcStreamProto$Dimension: boolean getIsPrivate()>();

        if $z3 != 0 goto label04;

        $z6 = virtualinvoke r38.<ucar.nc2.stream.NcStreamProto$Dimension: boolean getIsVlen()>();

        if $z6 == 0 goto label05;

     label04:
        $r45 = new ucar.nc2.Dimension;

        $r27 = virtualinvoke r38.<ucar.nc2.stream.NcStreamProto$Dimension: java.lang.String getName()>();

        $l0 = virtualinvoke r38.<ucar.nc2.stream.NcStreamProto$Dimension: long getLength()>();

        $i1 = (int) $l0;

        $z4 = virtualinvoke r38.<ucar.nc2.stream.NcStreamProto$Dimension: boolean getIsUnlimited()>();

        $z5 = virtualinvoke r38.<ucar.nc2.stream.NcStreamProto$Dimension: boolean getIsVlen()>();

        specialinvoke $r45.<ucar.nc2.Dimension: void <init>(java.lang.String,int,boolean,boolean,boolean)>($r27, $i1, 0, $z4, $z5);

        interfaceinvoke $r44.<java.util.List: boolean add(java.lang.Object)>($r45);

        goto label07;

     label05:
        $r28 = virtualinvoke r38.<ucar.nc2.stream.NcStreamProto$Dimension: java.lang.String getName()>();

        $r29 = virtualinvoke r4.<ucar.nc2.Group: ucar.nc2.Dimension findDimension(java.lang.String)>($r28);

        if $r29 != null goto label06;

        $r47 = new java.lang.IllegalStateException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can find shared dimension ");

        $r33 = virtualinvoke r38.<ucar.nc2.stream.NcStreamProto$Dimension: java.lang.String getName()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r35);

        throw $r47;

     label06:
        interfaceinvoke $r44.<java.util.List: boolean add(java.lang.Object)>($r29);

     label07:
        goto label03;

     label08:
        virtualinvoke r7.<ucar.nc2.Structure: void setDimensions(java.util.List)>($r44);

        $r13 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Structure: java.util.List getAttsList()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r23 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r39 = (ucar.nc2.stream.NcStreamProto$Attribute) $r23;

        $r24 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.Attribute decodeAtt(ucar.nc2.stream.NcStreamProto$Attribute)>(r39);

        virtualinvoke r7.<ucar.nc2.Structure: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r24);

        goto label09;

     label10:
        $r15 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Structure: java.util.List getVarsList()>();

        $r16 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r21 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r40 = (ucar.nc2.stream.NcStreamProto$Variable) $r21;

        $r22 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.Variable decodeVar(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,ucar.nc2.stream.NcStreamProto$Variable)>(r3, r4, r7, r40);

        virtualinvoke r7.<ucar.nc2.Structure: ucar.nc2.Variable addMemberVariable(ucar.nc2.Variable)>($r22);

        goto label11;

     label12:
        $r17 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Structure: java.util.List getStructsList()>();

        $r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z2 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label14;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r41 = (ucar.nc2.stream.NcStreamProto$Structure) $r19;

        $r20 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.Structure decodeStructure(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,ucar.nc2.stream.NcStreamProto$Structure)>(r3, r4, r7, r41);

        virtualinvoke r7.<ucar.nc2.Structure: ucar.nc2.Variable addMemberVariable(ucar.nc2.Variable)>($r20);

        goto label13;

     label14:
        return r7;
    }

    public static ucar.ma2.Section decodeSection(ucar.nc2.stream.NcStreamProto$Section)
    {
        ucar.ma2.Section $r0;
        long $l0, $l2, $l3, $l4, $l5;
        int $i1, $i6;
        boolean $z0;
        ucar.nc2.stream.NcStreamProto$Range r5;
        java.util.Iterator $r3;
        ucar.nc2.stream.NcStreamProto$Section r1;
        java.lang.RuntimeException $r7;
        java.util.List $r2;
        ucar.ma2.InvalidRangeException $r6;
        java.lang.Object $r4;

        r1 := @parameter0: ucar.nc2.stream.NcStreamProto$Section;

        $r0 = new ucar.ma2.Section;

        specialinvoke $r0.<ucar.ma2.Section: void <init>()>();

        $r2 = virtualinvoke r1.<ucar.nc2.stream.NcStreamProto$Section: java.util.List getRangeList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (ucar.nc2.stream.NcStreamProto$Range) $r4;

     label2:
        $l0 = virtualinvoke r5.<ucar.nc2.stream.NcStreamProto$Range: long getStart()>();

        $i1 = (int) $l0;

        $l2 = virtualinvoke r5.<ucar.nc2.stream.NcStreamProto$Range: long getStart()>();

        $l3 = virtualinvoke r5.<ucar.nc2.stream.NcStreamProto$Range: long getSize()>();

        $l4 = $l2 + $l3;

        $l5 = $l4 - 1L;

        $i6 = (int) $l5;

        virtualinvoke $r0.<ucar.ma2.Section: ucar.ma2.Section appendRange(int,int)>($i1, $i6);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label5:
        goto label1;

     label6:
        return $r0;

        catch ucar.ma2.InvalidRangeException from label2 to label3 with label4;
    }

    static ucar.nc2.stream.NcStreamProto$Attribute$Type encodeAttributeType(ucar.ma2.DataType)
    {
        java.lang.IllegalStateException $r9;
        int[] $r1;
        int $i0, $i1;
        java.lang.String $r13;
        ucar.nc2.stream.NcStreamProto$Attribute$Type $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        ucar.ma2.DataType r0;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @parameter0: ucar.ma2.DataType;

        $r1 = <ucar.nc2.stream.NcStream$1: int[] $SwitchMap$ucar$ma2$DataType>;

        $i0 = virtualinvoke r0.<ucar.ma2.DataType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label4;
            case 6: goto label5;
            case 7: goto label6;
            case 8: goto label7;
            default: goto label8;
        };

     label1:
        $r8 = <ucar.nc2.stream.NcStreamProto$Attribute$Type: ucar.nc2.stream.NcStreamProto$Attribute$Type STRING>;

        return $r8;

     label2:
        $r7 = <ucar.nc2.stream.NcStreamProto$Attribute$Type: ucar.nc2.stream.NcStreamProto$Attribute$Type BYTE>;

        return $r7;

     label3:
        $r6 = <ucar.nc2.stream.NcStreamProto$Attribute$Type: ucar.nc2.stream.NcStreamProto$Attribute$Type SHORT>;

        return $r6;

     label4:
        $r5 = <ucar.nc2.stream.NcStreamProto$Attribute$Type: ucar.nc2.stream.NcStreamProto$Attribute$Type INT>;

        return $r5;

     label5:
        $r4 = <ucar.nc2.stream.NcStreamProto$Attribute$Type: ucar.nc2.stream.NcStreamProto$Attribute$Type LONG>;

        return $r4;

     label6:
        $r3 = <ucar.nc2.stream.NcStreamProto$Attribute$Type: ucar.nc2.stream.NcStreamProto$Attribute$Type FLOAT>;

        return $r3;

     label7:
        $r2 = <ucar.nc2.stream.NcStreamProto$Attribute$Type: ucar.nc2.stream.NcStreamProto$Attribute$Type DOUBLE>;

        return $r2;

     label8:
        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal att type ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r9;
    }

    public static ucar.nc2.stream.NcStreamProto$DataType encodeDataType(ucar.ma2.DataType)
    {
        java.lang.IllegalStateException $r16;
        int[] $r1;
        int $i0, $i1;
        java.lang.String $r20;
        ucar.nc2.stream.NcStreamProto$DataType $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        ucar.ma2.DataType r0;
        java.lang.StringBuilder $r17, $r18, $r19;

        r0 := @parameter0: ucar.ma2.DataType;

        $r1 = <ucar.nc2.stream.NcStream$1: int[] $SwitchMap$ucar$ma2$DataType>;

        $i0 = virtualinvoke r0.<ucar.ma2.DataType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label08;
            case 3: goto label02;
            case 4: goto label03;
            case 5: goto label04;
            case 6: goto label05;
            case 7: goto label06;
            case 8: goto label07;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label11;
            case 12: goto label12;
            case 13: goto label13;
            case 14: goto label14;
            default: goto label15;
        };

     label01:
        $r15 = <ucar.nc2.stream.NcStreamProto$DataType: ucar.nc2.stream.NcStreamProto$DataType CHAR>;

        return $r15;

     label02:
        $r13 = <ucar.nc2.stream.NcStreamProto$DataType: ucar.nc2.stream.NcStreamProto$DataType BYTE>;

        return $r13;

     label03:
        $r12 = <ucar.nc2.stream.NcStreamProto$DataType: ucar.nc2.stream.NcStreamProto$DataType SHORT>;

        return $r12;

     label04:
        $r11 = <ucar.nc2.stream.NcStreamProto$DataType: ucar.nc2.stream.NcStreamProto$DataType INT>;

        return $r11;

     label05:
        $r10 = <ucar.nc2.stream.NcStreamProto$DataType: ucar.nc2.stream.NcStreamProto$DataType LONG>;

        return $r10;

     label06:
        $r9 = <ucar.nc2.stream.NcStreamProto$DataType: ucar.nc2.stream.NcStreamProto$DataType FLOAT>;

        return $r9;

     label07:
        $r8 = <ucar.nc2.stream.NcStreamProto$DataType: ucar.nc2.stream.NcStreamProto$DataType DOUBLE>;

        return $r8;

     label08:
        $r14 = <ucar.nc2.stream.NcStreamProto$DataType: ucar.nc2.stream.NcStreamProto$DataType STRING>;

        return $r14;

     label09:
        $r7 = <ucar.nc2.stream.NcStreamProto$DataType: ucar.nc2.stream.NcStreamProto$DataType STRUCTURE>;

        return $r7;

     label10:
        $r6 = <ucar.nc2.stream.NcStreamProto$DataType: ucar.nc2.stream.NcStreamProto$DataType SEQUENCE>;

        return $r6;

     label11:
        $r5 = <ucar.nc2.stream.NcStreamProto$DataType: ucar.nc2.stream.NcStreamProto$DataType ENUM1>;

        return $r5;

     label12:
        $r4 = <ucar.nc2.stream.NcStreamProto$DataType: ucar.nc2.stream.NcStreamProto$DataType ENUM2>;

        return $r4;

     label13:
        $r3 = <ucar.nc2.stream.NcStreamProto$DataType: ucar.nc2.stream.NcStreamProto$DataType ENUM4>;

        return $r3;

     label14:
        $r2 = <ucar.nc2.stream.NcStreamProto$DataType: ucar.nc2.stream.NcStreamProto$DataType OPAQUE>;

        return $r2;

     label15:
        $r16 = new java.lang.IllegalStateException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal data type ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r16;
    }

    static ucar.ma2.DataType decodeAttributeType(ucar.nc2.stream.NcStreamProto$Attribute$Type)
    {
        java.lang.IllegalStateException $r9;
        int[] $r1;
        int $i0, $i1;
        java.lang.String $r13;
        ucar.nc2.stream.NcStreamProto$Attribute$Type r0;
        ucar.ma2.DataType $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @parameter0: ucar.nc2.stream.NcStreamProto$Attribute$Type;

        $r1 = <ucar.nc2.stream.NcStream$1: int[] $SwitchMap$ucar$nc2$stream$NcStreamProto$Attribute$Type>;

        $i0 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$Attribute$Type: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label7;
            default: goto label8;
        };

     label1:
        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        return $r8;

     label2:
        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        return $r7;

     label3:
        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        return $r6;

     label4:
        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        return $r5;

     label5:
        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        return $r4;

     label6:
        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        return $r3;

     label7:
        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        return $r2;

     label8:
        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal att type ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r9;
    }

    public static ucar.ma2.DataType decodeDataType(ucar.nc2.stream.NcStreamProto$DataType)
    {
        java.lang.IllegalStateException $r16;
        int[] $r1;
        int $i0, $i1;
        java.lang.String $r20;
        ucar.nc2.stream.NcStreamProto$DataType r0;
        ucar.ma2.DataType $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.StringBuilder $r17, $r18, $r19;

        r0 := @parameter0: ucar.nc2.stream.NcStreamProto$DataType;

        $r1 = <ucar.nc2.stream.NcStream$1: int[] $SwitchMap$ucar$nc2$stream$NcStreamProto$DataType>;

        $i0 = virtualinvoke r0.<ucar.nc2.stream.NcStreamProto$DataType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label11;
            case 12: goto label12;
            case 13: goto label13;
            case 14: goto label14;
            default: goto label15;
        };

     label01:
        $r15 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        return $r15;

     label02:
        $r14 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        return $r14;

     label03:
        $r13 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        return $r13;

     label04:
        $r12 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        return $r12;

     label05:
        $r11 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        return $r11;

     label06:
        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        return $r10;

     label07:
        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        return $r9;

     label08:
        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        return $r8;

     label09:
        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        return $r7;

     label10:
        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType SEQUENCE>;

        return $r6;

     label11:
        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        return $r5;

     label12:
        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        return $r4;

     label13:
        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        return $r3;

     label14:
        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType OPAQUE>;

        return $r2;

     label15:
        $r16 = new java.lang.IllegalStateException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal data type ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r16;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        $r0 = newarray (byte)[4];

        $r0[0] = 67;

        $r0[1] = 68;

        $r0[2] = 70;

        $r0[3] = 83;

        <ucar.nc2.stream.NcStream: byte[] MAGIC_START> = $r0;

        $r1 = newarray (byte)[4];

        $r1[0] = -83;

        $r1[1] = -20;

        $r1[2] = -50;

        $r1[3] = -38;

        <ucar.nc2.stream.NcStream: byte[] MAGIC_HEADER> = $r1;

        $r2 = newarray (byte)[4];

        $r2[0] = -85;

        $r2[1] = -20;

        $r2[2] = -50;

        $r2[3] = -70;

        <ucar.nc2.stream.NcStream: byte[] MAGIC_DATA> = $r2;

        $r3 = newarray (byte)[4];

        $r3[0] = -85;

        $r3[1] = -17;

        $r3[2] = -2;

        $r3[3] = -70;

        <ucar.nc2.stream.NcStream: byte[] MAGIC_VDATA> = $r3;

        $r4 = newarray (byte)[4];

        $r4[0] = -19;

        $r4[1] = -17;

        $r4[2] = -2;

        $r4[3] = -38;

        <ucar.nc2.stream.NcStream: byte[] MAGIC_VEND> = $r4;

        $r5 = newarray (byte)[4];

        $r5[0] = -85;

        $r5[1] = -83;

        $r5[2] = -70;

        $r5[3] = -38;

        <ucar.nc2.stream.NcStream: byte[] MAGIC_ERR> = $r5;

        $r6 = newarray (byte)[4];

        $r6[0] = -19;

        $r6[1] = -19;

        $r6[2] = -34;

        $r6[3] = -34;

        <ucar.nc2.stream.NcStream: byte[] MAGIC_END> = $r6;

        return;
    }
}
