abstract class kodkod.util.ints.IntTree$Node extends java.lang.Object implements java.lang.Cloneable
{
    private kodkod.util.ints.IntTree$Node parent;
    private kodkod.util.ints.IntTree$Node left;
    private kodkod.util.ints.IntTree$Node right;
    private boolean color;
    protected int key;

    void <init>(int)
    {
        int i0;
        kodkod.util.ints.IntTree$Node r0;

        r0 := @this: kodkod.util.ints.IntTree$Node;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node right> = null;

        r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node left> = null;

        r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node parent> = null;

        r0.<kodkod.util.ints.IntTree$Node: boolean color> = 1;

        r0.<kodkod.util.ints.IntTree$Node: int key> = i0;

        return;
    }

    final kodkod.util.ints.IntTree$Node left()
    {
        kodkod.util.ints.IntTree$Node r0, $r1;

        r0 := @this: kodkod.util.ints.IntTree$Node;

        $r1 = r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node left>;

        return $r1;
    }

    final kodkod.util.ints.IntTree$Node right()
    {
        kodkod.util.ints.IntTree$Node r0, $r1;

        r0 := @this: kodkod.util.ints.IntTree$Node;

        $r1 = r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node right>;

        return $r1;
    }

    final kodkod.util.ints.IntTree$Node parent()
    {
        kodkod.util.ints.IntTree$Node r0, $r1;

        r0 := @this: kodkod.util.ints.IntTree$Node;

        $r1 = r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node parent>;

        return $r1;
    }

    protected kodkod.util.ints.IntTree$Node clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.IntTree$Node r0, r2;
        java.lang.Object $r1;

        r0 := @this: kodkod.util.ints.IntTree$Node;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (kodkod.util.ints.IntTree$Node) $r1;

        r2.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node right> = null;

        r2.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node left> = null;

        r2.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node parent> = null;

        return r2;
    }

    public java.lang.String toString()
    {
        int $i0, $i1, $i2;
        java.lang.String $r12, $r13;
        boolean $z0;
        kodkod.util.ints.IntTree$Node r1, $r6, $r9;
        java.lang.StringBuilder $r0, $r2, $r3, $r4, $r5, $r7, $r8, $r10, $r11;
        java.lang.Object $r14, $r15;

        r1 := @this: kodkod.util.ints.IntTree$Node;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        $i0 = r1.<kodkod.util.ints.IntTree$Node: int key>;

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $z0 = r1.<kodkod.util.ints.IntTree$Node: boolean color>;

        if $z0 == 0 goto label1;

        $r13 = "b";

        goto label2;

     label1:
        $r13 = "r";

     label2:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = r1.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node left>;

        if $r6 != r1 goto label3;

        $i2 = r1.<kodkod.util.ints.IntTree$Node: int key>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        goto label4;

     label3:
        $r14 = r1.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node left>;

     label4:
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = r1.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node right>;

        if $r9 != r1 goto label5;

        $i1 = r1.<kodkod.util.ints.IntTree$Node: int key>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        goto label6;

     label5:
        $r15 = r1.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node right>;

     label6:
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    protected volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.IntTree$Node r0, $r1;

        r0 := @this: kodkod.util.ints.IntTree$Node;

        $r1 = virtualinvoke r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node clone()>();

        return $r1;
    }

    static kodkod.util.ints.IntTree$Node access$1(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node r0, $r1;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        $r1 = r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node left>;

        return $r1;
    }

    static kodkod.util.ints.IntTree$Node access$2(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node r0, $r1;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        $r1 = r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node right>;

        return $r1;
    }

    static kodkod.util.ints.IntTree$Node access$3(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node r0, $r1;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        $r1 = r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node parent>;

        return $r1;
    }

    static boolean access$4(kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node r0;
        boolean $z0;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        $z0 = r0.<kodkod.util.ints.IntTree$Node: boolean color>;

        return $z0;
    }

    static void access$5(kodkod.util.ints.IntTree$Node, boolean)
    {
        kodkod.util.ints.IntTree$Node r0;
        boolean z0;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        z0 := @parameter1: boolean;

        r0.<kodkod.util.ints.IntTree$Node: boolean color> = z0;

        return;
    }

    static void access$6(kodkod.util.ints.IntTree$Node, kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node r0, r1;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        r1 := @parameter1: kodkod.util.ints.IntTree$Node;

        r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node parent> = r1;

        return;
    }

    static void access$7(kodkod.util.ints.IntTree$Node, kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node r0, r1;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        r1 := @parameter1: kodkod.util.ints.IntTree$Node;

        r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node left> = r1;

        return;
    }

    static void access$8(kodkod.util.ints.IntTree$Node, kodkod.util.ints.IntTree$Node)
    {
        kodkod.util.ints.IntTree$Node r0, r1;

        r0 := @parameter0: kodkod.util.ints.IntTree$Node;

        r1 := @parameter1: kodkod.util.ints.IntTree$Node;

        r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node right> = r1;

        return;
    }
}
