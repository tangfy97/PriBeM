public class org.apache.velocity.app.FieldMethodizer extends java.lang.Object
{
    private java.util.HashMap fieldHash;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.apache.velocity.app.FieldMethodizer r0;

        r0 := @this: org.apache.velocity.app.FieldMethodizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.velocity.app.FieldMethodizer: java.util.HashMap fieldHash> = $r1;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.io.PrintStream $r5;
        java.util.HashMap $r1;
        java.lang.Exception $r3;
        java.lang.StringBuffer $r4, $r6, $r7, $r8, $r10;
        java.lang.String r2, $r9, $r11;
        org.apache.velocity.app.FieldMethodizer r0;

        r0 := @this: org.apache.velocity.app.FieldMethodizer;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.velocity.app.FieldMethodizer: java.util.HashMap fieldHash> = $r1;

     label1:
        virtualinvoke r0.<org.apache.velocity.app.FieldMethodizer: void addObject(java.lang.String)>(r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not add ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for field methodizing: ");

        $r9 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>(java.lang.Object)
    {
        java.io.PrintStream $r5;
        java.util.HashMap $r1;
        java.lang.Exception $r3;
        java.lang.StringBuffer $r4, $r6, $r7, $r8, $r10;
        java.lang.Object r2;
        java.lang.String $r9, $r11;
        org.apache.velocity.app.FieldMethodizer r0;

        r0 := @this: org.apache.velocity.app.FieldMethodizer;

        r2 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.velocity.app.FieldMethodizer: java.util.HashMap fieldHash> = $r1;

     label1:
        virtualinvoke r0.<org.apache.velocity.app.FieldMethodizer: void addObject(java.lang.Object)>(r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not add ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for field methodizing: ");

        $r9 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void addObject(java.lang.String) throws java.lang.Exception
    {
        java.lang.Class $r2;
        java.lang.String r1;
        org.apache.velocity.app.FieldMethodizer r0;

        r0 := @this: org.apache.velocity.app.FieldMethodizer;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.velocity.util.ClassUtils: java.lang.Class getClass(java.lang.String)>(r1);

        specialinvoke r0.<org.apache.velocity.app.FieldMethodizer: void inspect(java.lang.Class)>($r2);

        return;
    }

    public void addObject(java.lang.Object) throws java.lang.Exception
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        org.apache.velocity.app.FieldMethodizer r0;

        r0 := @this: org.apache.velocity.app.FieldMethodizer;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke r0.<org.apache.velocity.app.FieldMethodizer: void inspect(java.lang.Class)>($r2);

        return;
    }

    public java.lang.Object get(java.lang.String)
    {
        java.io.PrintStream $r6;
        java.lang.IllegalAccessException $r4;
        java.util.HashMap $r2;
        java.lang.reflect.Field r14;
        java.lang.StringBuffer $r5, $r7, $r8, $r9, $r11;
        java.lang.Object $r3, r13;
        java.lang.String r1, $r10, $r12;
        org.apache.velocity.app.FieldMethodizer r0;

        r0 := @this: org.apache.velocity.app.FieldMethodizer;

        r1 := @parameter0: java.lang.String;

        r13 = null;

     label1:
        $r2 = r0.<org.apache.velocity.app.FieldMethodizer: java.util.HashMap fieldHash>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r14 = (java.lang.reflect.Field) $r3;

        if r14 == null goto label2;

        r13 = virtualinvoke r14.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("IllegalAccessException while trying to access ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r10 = virtualinvoke $r4.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label4:
        return r13;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    private void inspect(java.lang.Class)
    {
        java.util.HashMap $r5;
        java.lang.reflect.Field $r2, $r4, $r7;
        java.lang.reflect.Field[] $r1;
        int $i0, $i1, i2;
        java.lang.Class r0;
        java.lang.String $r6;
        boolean $z0, $z1;
        org.apache.velocity.app.FieldMethodizer r3;

        r3 := @this: org.apache.velocity.app.FieldMethodizer;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i2 = 0;

     label1:
        $i0 = lengthof $r1;

        if i2 >= $i0 goto label3;

        $r2 = $r1[i2];

        $i1 = virtualinvoke $r2.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z1 == 0 goto label2;

        $r5 = r3.<org.apache.velocity.app.FieldMethodizer: java.util.HashMap fieldHash>;

        $r4 = $r1[i2];

        $r6 = virtualinvoke $r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $r7 = $r1[i2];

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }
}
