class org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool extends java.lang.Object
{
    private java.util.LinkedList freeConnections;
    private java.util.LinkedList waitingThreads;
    private final java.util.Map mapHosts;
    private org.apache.commons.httpclient.util.IdleConnectionHandler idleConnectionHandler;
    private int numConnections;
    private final org.apache.commons.httpclient.MultiThreadedHttpConnectionManager this$0;

    private void <init>(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.httpclient.util.IdleConnectionHandler $r5;
        java.util.HashMap $r4;
        java.util.LinkedList $r2, $r3;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        r1 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager this$0> = r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList freeConnections> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList waitingThreads> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.Map mapHosts> = $r4;

        $r5 = new org.apache.commons.httpclient.util.IdleConnectionHandler;

        specialinvoke $r5.<org.apache.commons.httpclient.util.IdleConnectionHandler: void <init>()>();

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.util.IdleConnectionHandler idleConnectionHandler> = $r5;

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections> = 0;

        return;
    }

    public synchronized void shutdown()
    {
        java.util.Iterator $r2, $r4;
        org.apache.commons.httpclient.HttpConnection r10;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread r11;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        java.util.Map $r5;
        org.apache.commons.httpclient.util.IdleConnectionHandler $r6;
        java.lang.Thread $r8;
        java.lang.Object $r7, $r9;
        java.util.LinkedList $r1, $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList freeConnections>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.commons.httpclient.HttpConnection) $r9;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        virtualinvoke r10.<org.apache.commons.httpclient.HttpConnection: void close()>();

        goto label1;

     label2:
        staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void access$600(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>(r0);

        $r3 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList waitingThreads>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread) $r7;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        r11.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: boolean interruptedByConnectionPool> = 1;

        $r8 = r11.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: java.lang.Thread thread>;

        virtualinvoke $r8.<java.lang.Thread: void interrupt()>();

        goto label3;

     label4:
        $r5 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.Map mapHosts>;

        interfaceinvoke $r5.<java.util.Map: void clear()>();

        $r6 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.util.IdleConnectionHandler idleConnectionHandler>;

        virtualinvoke $r6.<org.apache.commons.httpclient.util.IdleConnectionHandler: void removeAll()>();

        return;
    }

    public synchronized org.apache.commons.httpclient.HttpConnection createConnection(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r2;
        org.apache.commons.httpclient.HostConfiguration r1;
        java.lang.StringBuffer $r10, $r11, $r12;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r13;
        boolean $z0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r7;
        org.apache.commons.httpclient.params.HttpConnectionParams $r5;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.logging.Log $r3, $r9;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r6, $r8;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration,boolean)>(r1, 1);

        $r3 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r9 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Allocating new connection, hostConfig=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r13);

     label1:
        $r4 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference;

        specialinvoke $r4.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference: void <init>(org.apache.commons.httpclient.HostConfiguration)>(r1);

        $r5 = virtualinvoke $r4.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>();

        $r6 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager this$0>;

        $r7 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams access$800(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager)>($r6);

        virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpConnectionParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r7);

        $r8 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager this$0>;

        virtualinvoke $r4.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference: void setHttpConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)>($r8);

        $i0 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections> = $i1;

        $i2 = $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        $i3 = $i2 + 1;

        $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections> = $i3;

        staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void access$900(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference,org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r4, r1, r0);

        return $r4;
    }

    public synchronized void handleLostConnection(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r2;
        org.apache.commons.httpclient.HostConfiguration r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        java.util.Map $r4;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.LinkedList $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration,boolean)>(r1, 1);

        $i0 = $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        $i1 = $i0 - 1;

        $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections> = $i1;

        $i2 = $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        if $i2 != 0 goto label1;

        $r3 = $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        $z0 = virtualinvoke $r3.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.Map mapHosts>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

     label1:
        $i3 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections>;

        $i4 = $i3 - 1;

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections> = $i4;

        virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void notifyWaitingThread(org.apache.commons.httpclient.HostConfiguration)>(r1);

        return;
    }

    public synchronized org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration, boolean)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r5, r7;
        org.apache.commons.httpclient.HostConfiguration r2;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r1;
        java.util.Map $r3, $r6;
        org.apache.commons.logging.Log $r0;
        java.lang.Object $r4;
        boolean z0;

        r1 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        r2 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        z0 := @parameter1: boolean;

        $r0 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnectionManager.ConnectionPool.getHostPool(HostConfiguration)");

        $r3 = r1.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.Map mapHosts>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r7 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool) $r4;

        if r7 != null goto label1;

        if z0 == 0 goto label1;

        $r5 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool;

        specialinvoke $r5.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: void <init>(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$1)>(null);

        r7 = $r5;

        $r5.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: org.apache.commons.httpclient.HostConfiguration hostConfiguration> = r2;

        $r6 = r1.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.Map mapHosts>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5);

     label1:
        return r7;
    }

    public synchronized org.apache.commons.httpclient.HttpConnection getFreeConnection(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r2;
        org.apache.commons.httpclient.HostConfiguration r1;
        java.lang.StringBuffer $r5, $r6, $r7, $r16, $r17, $r18;
        org.apache.commons.httpclient.util.IdleConnectionHandler $r14;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference r20;
        int $i0;
        java.lang.String $r8, $r19;
        java.util.LinkedList $r9, $r10, $r12;
        boolean $z0, $z1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.logging.Log $r3, $r4, $r13, $r15;
        java.lang.Object $r11;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        r20 = null;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration,boolean)>(r1, 0);

        if $r2 == null goto label2;

        $r9 = $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList freeConnections>;

        $i0 = virtualinvoke $r9.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label2;

        $r10 = $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList freeConnections>;

        $r11 = virtualinvoke $r10.<java.util.LinkedList: java.lang.Object removeLast()>();

        r20 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference) $r11;

        $r12 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList freeConnections>;

        virtualinvoke $r12.<java.util.LinkedList: boolean remove(java.lang.Object)>(r20);

        staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void access$900(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference,org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>(r20, r1, r0);

        $r13 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z1 = interfaceinvoke $r13.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label1;

        $r15 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Getting free connection, hostConfig=");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r19);

     label1:
        $r14 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.util.IdleConnectionHandler idleConnectionHandler>;

        virtualinvoke $r14.<org.apache.commons.httpclient.util.IdleConnectionHandler: void remove(org.apache.commons.httpclient.HttpConnection)>(r20);

        goto label3;

     label2:
        $r3 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label3;

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("There were no free connections to get, hostConfig=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r8);

     label3:
        return r20;
    }

    public synchronized void deleteClosedConnections()
    {
        java.util.Iterator $r2;
        org.apache.commons.httpclient.HttpConnection r4;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        java.lang.Object $r3;
        java.util.LinkedList $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList freeConnections>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.httpclient.HttpConnection) $r3;

        $z1 = virtualinvoke r4.<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>();

        if $z1 != 0 goto label2;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        specialinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void deleteConnection(org.apache.commons.httpclient.HttpConnection)>(r4);

     label2:
        goto label1;

     label3:
        return;
    }

    public synchronized void closeIdleConnections(long)
    {
        long l0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.httpclient.util.IdleConnectionHandler $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.util.IdleConnectionHandler idleConnectionHandler>;

        virtualinvoke $r1.<org.apache.commons.httpclient.util.IdleConnectionHandler: void closeIdleConnections(long)>(l0);

        return;
    }

    private synchronized void deleteConnection(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.HttpConnection r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r5;
        org.apache.commons.httpclient.HostConfiguration $r3;
        java.lang.StringBuffer $r10, $r11, $r12;
        java.util.Map $r8;
        org.apache.commons.httpclient.util.IdleConnectionHandler $r14;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r13;
        java.util.LinkedList $r6, $r7;
        boolean $z0, $z1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.logging.Log $r4, $r9;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        r1 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager this$0>;

        $r3 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HostConfiguration access$1100(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager,org.apache.commons.httpclient.HttpConnection)>($r2, r1);

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r9 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Reclaiming connection, hostConfig=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r13);

     label1:
        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void close()>();

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration,boolean)>($r3, 1);

        $r6 = $r5.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList freeConnections>;

        virtualinvoke $r6.<java.util.LinkedList: boolean remove(java.lang.Object)>(r1);

        $i0 = $r5.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        $i1 = $i0 - 1;

        $r5.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections> = $i1;

        $i2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections>;

        $i3 = $i2 - 1;

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections> = $i3;

        $i4 = $r5.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        if $i4 != 0 goto label2;

        $r7 = $r5.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        $z1 = virtualinvoke $r7.<java.util.LinkedList: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r8 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.Map mapHosts>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

     label2:
        $r14 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.util.IdleConnectionHandler idleConnectionHandler>;

        virtualinvoke $r14.<org.apache.commons.httpclient.util.IdleConnectionHandler: void remove(org.apache.commons.httpclient.HttpConnection)>(r1);

        return;
    }

    public synchronized void deleteLeastUsedConnection()
    {
        org.apache.commons.httpclient.HttpConnection r3;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        java.lang.Object $r2;
        org.apache.commons.logging.Log $r4, $r5;
        java.util.LinkedList $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList freeConnections>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r3 = (org.apache.commons.httpclient.HttpConnection) $r2;

        if r3 == null goto label1;

        specialinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void deleteConnection(org.apache.commons.httpclient.HttpConnection)>(r3);

        goto label2;

     label1:
        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r5 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Attempted to reclaim an unused connection but there were none.");

     label2:
        return;
    }

    public synchronized void notifyWaitingThread(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r2;
        org.apache.commons.httpclient.HostConfiguration r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration,boolean)>(r1, 1);

        virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void notifyWaitingThread(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool)>($r2);

        return;
    }

    public synchronized void notifyWaitingThread(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool r0, $r10;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread $r13, $r24, r25;
        org.apache.commons.httpclient.HostConfiguration $r21;
        java.lang.StringBuffer $r19, $r20, $r22;
        java.lang.Thread $r5;
        int $i0, $i1;
        java.lang.String $r23;
        java.util.LinkedList $r1, $r3, $r8, $r11, $r15, $r17;
        boolean $z0, $z1, $z2;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r2;
        org.apache.commons.logging.Log $r4, $r6, $r7, $r12, $r14, $r18;
        java.lang.Object $r9, $r16;

        r2 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool;

        r25 = null;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label2;

        $r14 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z2 = interfaceinvoke $r14.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label1;

        $r18 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Notifying thread waiting on host pool, hostConfig=");

        $r21 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r23);

     label1:
        $r15 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        $r16 = virtualinvoke $r15.<java.util.LinkedList: java.lang.Object removeFirst()>();

        $r24 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread) $r16;

        r25 = $r24;

        $r17 = r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList waitingThreads>;

        virtualinvoke $r17.<java.util.LinkedList: boolean remove(java.lang.Object)>($r24);

        goto label5;

     label2:
        $r3 = r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList waitingThreads>;

        $i1 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        if $i1 <= 0 goto label4;

        $r7 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label3;

        $r12 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("No-one waiting on host pool, notifying next waiting thread.");

     label3:
        $r8 = r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList waitingThreads>;

        $r9 = virtualinvoke $r8.<java.util.LinkedList: java.lang.Object removeFirst()>();

        $r13 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread) $r9;

        r25 = $r13;

        $r10 = $r13.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool hostConnectionPool>;

        $r11 = $r10.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        virtualinvoke $r11.<java.util.LinkedList: boolean remove(java.lang.Object)>($r13);

        goto label5;

     label4:
        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label5;

        $r6 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Notifying no-one, there are no waiting threads");

     label5:
        if r25 == null goto label6;

        r25.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: boolean interruptedByConnectionPool> = 1;

        $r5 = r25.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: java.lang.Thread thread>;

        virtualinvoke $r5.<java.lang.Thread: void interrupt()>();

     label6:
        return;
    }

    public void freeConnection(org.apache.commons.httpclient.HttpConnection)
    {
        java.lang.Throwable $r26;
        org.apache.commons.httpclient.HttpConnection r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r6;
        org.apache.commons.httpclient.HostConfiguration $r3;
        java.lang.StringBuffer $r12, $r13, $r14, $r17, $r18, $r19, $r22, $r23, $r24;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference $r9;
        org.apache.commons.httpclient.util.IdleConnectionHandler $r10;
        int $i0, $i1;
        java.lang.String $r15, $r20, $r25;
        java.util.LinkedList $r7, $r8;
        boolean $z0, $z1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.logging.Log $r4, $r11, $r16, $r21;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r2, $r5;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        r1 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager this$0>;

        $r3 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HostConfiguration access$1100(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager,org.apache.commons.httpclient.HttpConnection)>($r2, r1);

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label01;

        $r21 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Freeing connection, hostConfig=");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25);

     label01:
        entermonitor r0;

     label02:
        $r5 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager this$0>;

        $z1 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: boolean access$1200(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager)>($r5);

        if $z1 == 0 goto label04;

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void close()>();

        exitmonitor r0;

     label03:
        return;

     label04:
        $r6 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration,boolean)>($r3, 1);

        $r7 = $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList freeConnections>;

        virtualinvoke $r7.<java.util.LinkedList: boolean add(java.lang.Object)>(r1);

        $i0 = $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        if $i0 != 0 goto label05;

        $r16 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Host connection pool not found, hostConfig=");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r20);

        $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections> = 1;

     label05:
        $r8 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList freeConnections>;

        virtualinvoke $r8.<java.util.LinkedList: boolean add(java.lang.Object)>(r1);

        $r9 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference) r1;

        staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void access$1300(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference)>($r9);

        $i1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections>;

        if $i1 != 0 goto label06;

        $r11 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Host connection pool not found, hostConfig=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r15);

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections> = 1;

     label06:
        $r10 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.util.IdleConnectionHandler idleConnectionHandler>;

        virtualinvoke $r10.<org.apache.commons.httpclient.util.IdleConnectionHandler: void add(org.apache.commons.httpclient.HttpConnection)>(r1);

        virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void notifyWaitingThread(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool)>($r6);

        exitmonitor r0;

     label07:
        goto label10;

     label08:
        $r26 := @caughtexception;

        exitmonitor r0;

     label09:
        throw $r26;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    void <init>(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager, org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$1)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$1 r2;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        r1 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        r2 := @parameter1: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$1;

        specialinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void <init>(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager)>(r1);

        return;
    }

    static int access$200(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)
    {
        int $i0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;

        r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $i0 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections>;

        return $i0;
    }

    static java.util.LinkedList access$300(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)
    {
        java.util.LinkedList $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;

        r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList freeConnections>;

        return $r1;
    }

    static java.util.LinkedList access$500(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)
    {
        java.util.LinkedList $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;

        r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList waitingThreads>;

        return $r1;
    }
}
