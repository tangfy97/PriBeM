public class com.hp.hpl.jena.sparql.algebra.optimize.TransformSimplify extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformSimplify r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformSimplify;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpSequence, java.util.List)
    {
        java.util.Iterator $r2;
        java.util.ArrayList $r0;
        java.util.List r1;
        com.hp.hpl.jena.sparql.algebra.op.OpSequence r4;
        java.lang.Object $r6;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformSimplify r3;
        com.hp.hpl.jena.sparql.algebra.Op $r5, r7;
        boolean $z0, $z1;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformSimplify;

        r4 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpSequence;

        r1 := @parameter1: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r2 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.sparql.algebra.Op) $r6;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpJoin: boolean isJoinIdentify(com.hp.hpl.jena.sparql.algebra.Op)>(r7);

        if $z1 == 0 goto label2;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        $r5 = specialinvoke r3.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpSequence,java.util.List)>(r4, $r0);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpJoin, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpJoin r3;
        com.hp.hpl.jena.sparql.algebra.Op r0, r1, $r4;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformSimplify r2;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformSimplify;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpJoin;

        r0 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpJoin: boolean isJoinIdentify(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpJoin: boolean isJoinIdentify(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        if $z1 == 0 goto label2;

        return r0;

     label2:
        $r4 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpJoin,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r3, r0, r1);

        return $r4;
    }
}
