public abstract class org.apache.xmlbeans.impl.values.JavaIntHolder extends org.apache.xmlbeans.impl.values.XmlObjectBase
{
    private int _value;
    static final java.math.BigInteger _max;
    static final java.math.BigInteger _min;

    public void <init>()
    {
        org.apache.xmlbeans.impl.values.JavaIntHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntHolder;

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void <init>()>();

        return;
    }

    public org.apache.xmlbeans.SchemaType schemaType()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl $r0;
        org.apache.xmlbeans.impl.values.JavaIntHolder r1;

        r1 := @this: org.apache.xmlbeans.impl.values.JavaIntHolder;

        $r0 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_INT>;

        return $r0;
    }

    public java.lang.String compute_text(org.apache.xmlbeans.impl.values.NamespaceManager)
    {
        int $i0;
        long $l1;
        org.apache.xmlbeans.impl.values.NamespaceManager r2;
        java.lang.String $r1;
        org.apache.xmlbeans.impl.values.JavaIntHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntHolder;

        r2 := @parameter0: org.apache.xmlbeans.impl.values.NamespaceManager;

        $i0 = r0.<org.apache.xmlbeans.impl.values.JavaIntHolder: int _value>;

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        return $r1;
    }

    protected void set_text(java.lang.String)
    {
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r3;
        java.lang.Object[] $r4;
        int $i0;
        java.lang.String r1;
        java.lang.Exception $r2;
        org.apache.xmlbeans.impl.values.JavaIntHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntHolder;

        r1 := @parameter0: java.lang.String;

     label1:
        $i0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: int lexInt(java.lang.CharSequence)>(r1);

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaIntHolder: void set_int(int)>($i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        specialinvoke $r3.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>(java.lang.String,java.lang.Object[])>("int", $r4);

        throw $r3;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void set_nil()
    {
        org.apache.xmlbeans.impl.values.JavaIntHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntHolder;

        r0.<org.apache.xmlbeans.impl.values.JavaIntHolder: int _value> = 0;

        return;
    }

    public java.math.BigDecimal getBigDecimalValue()
    {
        java.math.BigDecimal $r1;
        int $i0;
        org.apache.xmlbeans.impl.values.JavaIntHolder r0;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntHolder;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaIntHolder: void check_dated()>();

        $r1 = new java.math.BigDecimal;

        $i0 = r0.<org.apache.xmlbeans.impl.values.JavaIntHolder: int _value>;

        $d0 = (double) $i0;

        specialinvoke $r1.<java.math.BigDecimal: void <init>(double)>($d0);

        return $r1;
    }

    public java.math.BigInteger getBigIntegerValue()
    {
        int $i0;
        long $l1;
        java.math.BigInteger $r1;
        org.apache.xmlbeans.impl.values.JavaIntHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntHolder;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaIntHolder: void check_dated()>();

        $i0 = r0.<org.apache.xmlbeans.impl.values.JavaIntHolder: int _value>;

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        return $r1;
    }

    public long getLongValue()
    {
        int $i0;
        long $l1;
        org.apache.xmlbeans.impl.values.JavaIntHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntHolder;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaIntHolder: void check_dated()>();

        $i0 = r0.<org.apache.xmlbeans.impl.values.JavaIntHolder: int _value>;

        $l1 = (long) $i0;

        return $l1;
    }

    public int getIntValue()
    {
        int $i0;
        org.apache.xmlbeans.impl.values.JavaIntHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntHolder;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaIntHolder: void check_dated()>();

        $i0 = r0.<org.apache.xmlbeans.impl.values.JavaIntHolder: int _value>;

        return $i0;
    }

    protected void set_BigDecimal(java.math.BigDecimal)
    {
        java.math.BigDecimal r1;
        java.math.BigInteger $r2;
        org.apache.xmlbeans.impl.values.JavaIntHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntHolder;

        r1 := @parameter0: java.math.BigDecimal;

        $r2 = virtualinvoke r1.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaIntHolder: void set_BigInteger(java.math.BigInteger)>($r2);

        return;
    }

    protected void set_BigInteger(java.math.BigInteger)
    {
        org.apache.xmlbeans.impl.values.JavaIntHolder r4;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r2;
        int $i0, $i1, $i2;
        java.math.BigInteger r0, $r1, $r3;

        r4 := @this: org.apache.xmlbeans.impl.values.JavaIntHolder;

        r0 := @parameter0: java.math.BigInteger;

        $r1 = <org.apache.xmlbeans.impl.values.JavaIntHolder: java.math.BigInteger _max>;

        $i0 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i0 > 0 goto label1;

        $r3 = <org.apache.xmlbeans.impl.values.JavaIntHolder: java.math.BigInteger _min>;

        $i1 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i1 >= 0 goto label2;

     label1:
        $r2 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        specialinvoke $r2.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>()>();

        throw $r2;

     label2:
        $i2 = virtualinvoke r0.<java.math.BigInteger: int intValue()>();

        virtualinvoke r4.<org.apache.xmlbeans.impl.values.JavaIntHolder: void set_int(int)>($i2);

        return;
    }

    protected void set_long(long)
    {
        long l0;
        org.apache.xmlbeans.impl.values.JavaIntHolder r1;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r2;
        byte $b1, $b2;
        int $i3, $i4, $i5;

        r1 := @this: org.apache.xmlbeans.impl.values.JavaIntHolder;

        l0 := @parameter0: long;

        $b1 = l0 cmp 2147483647L;

        $i4 = (int) $b1;

        if $i4 > 0 goto label1;

        $b2 = l0 cmp -2147483648L;

        $i5 = (int) $b2;

        if $i5 >= 0 goto label2;

     label1:
        $r2 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        specialinvoke $r2.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>()>();

        throw $r2;

     label2:
        $i3 = (int) l0;

        virtualinvoke r1.<org.apache.xmlbeans.impl.values.JavaIntHolder: void set_int(int)>($i3);

        return;
    }

    protected void set_int(int)
    {
        int i0;
        org.apache.xmlbeans.impl.values.JavaIntHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntHolder;

        i0 := @parameter0: int;

        r0.<org.apache.xmlbeans.impl.values.JavaIntHolder: int _value> = i0;

        return;
    }

    protected int compare_to(org.apache.xmlbeans.XmlObject)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase $r4, $r5;
        org.apache.xmlbeans.impl.values.JavaIntHolder r3;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.xmlbeans.XmlObject r0;
        org.apache.xmlbeans.SchemaType $r2;
        org.apache.xmlbeans.SimpleValue $r1;

        r3 := @this: org.apache.xmlbeans.impl.values.JavaIntHolder;

        r0 := @parameter0: org.apache.xmlbeans.XmlObject;

        $r1 = (org.apache.xmlbeans.SimpleValue) r0;

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SimpleValue: org.apache.xmlbeans.SchemaType instanceType()>();

        $i0 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: int getDecimalSize()>();

        if $i0 <= 32 goto label1;

        $i5 = interfaceinvoke r0.<org.apache.xmlbeans.XmlObject: int compareTo(java.lang.Object)>(r3);

        $i6 = neg $i5;

        return $i6;

     label1:
        $i1 = r3.<org.apache.xmlbeans.impl.values.JavaIntHolder: int _value>;

        $r4 = (org.apache.xmlbeans.impl.values.XmlObjectBase) r0;

        $i2 = virtualinvoke $r4.<org.apache.xmlbeans.impl.values.XmlObjectBase: int intValue()>();

        if $i1 != $i2 goto label2;

        $b7 = 0;

        goto label4;

     label2:
        $i3 = r3.<org.apache.xmlbeans.impl.values.JavaIntHolder: int _value>;

        $r5 = (org.apache.xmlbeans.impl.values.XmlObjectBase) r0;

        $i4 = virtualinvoke $r5.<org.apache.xmlbeans.impl.values.XmlObjectBase: int intValue()>();

        if $i3 >= $i4 goto label3;

        $b7 = -1;

        goto label4;

     label3:
        $b7 = 1;

     label4:
        return $b7;
    }

    protected boolean equal_to(org.apache.xmlbeans.XmlObject)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase $r4;
        org.apache.xmlbeans.impl.values.JavaIntHolder r3;
        int $i0, $i1, $i2;
        org.apache.xmlbeans.XmlObject r0;
        org.apache.xmlbeans.SchemaType $r2;
        org.apache.xmlbeans.SimpleValue $r1;
        boolean $z0, $z1;

        r3 := @this: org.apache.xmlbeans.impl.values.JavaIntHolder;

        r0 := @parameter0: org.apache.xmlbeans.XmlObject;

        $r1 = (org.apache.xmlbeans.SimpleValue) r0;

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SimpleValue: org.apache.xmlbeans.SchemaType instanceType()>();

        $i0 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: int getDecimalSize()>();

        if $i0 <= 32 goto label1;

        $z0 = interfaceinvoke r0.<org.apache.xmlbeans.XmlObject: boolean valueEquals(org.apache.xmlbeans.XmlObject)>(r3);

        return $z0;

     label1:
        $i1 = r3.<org.apache.xmlbeans.impl.values.JavaIntHolder: int _value>;

        $r4 = (org.apache.xmlbeans.impl.values.XmlObjectBase) r0;

        $i2 = virtualinvoke $r4.<org.apache.xmlbeans.impl.values.XmlObjectBase: int intValue()>();

        if $i1 != $i2 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    protected int value_hash_code()
    {
        int $i0;
        org.apache.xmlbeans.impl.values.JavaIntHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntHolder;

        $i0 = r0.<org.apache.xmlbeans.impl.values.JavaIntHolder: int _value>;

        return $i0;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0, $r1;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2147483647L);

        <org.apache.xmlbeans.impl.values.JavaIntHolder: java.math.BigInteger _max> = $r0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-2147483648L);

        <org.apache.xmlbeans.impl.values.JavaIntHolder: java.math.BigInteger _min> = $r1;

        return;
    }
}
