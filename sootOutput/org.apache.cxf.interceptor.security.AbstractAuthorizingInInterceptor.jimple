public abstract class org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor extends org.apache.cxf.phase.AbstractPhaseInterceptor
{
    private static final java.util.logging.Logger LOG;
    private static final java.lang.String ALL_ROLES;

    public void <init>()
    {
        org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String)>("pre-invoke");

        return;
    }

    public void handleMessage(org.apache.cxf.message.Message) throws org.apache.cxf.interceptor.Fault
    {
        org.apache.cxf.security.SecurityContext r2;
        org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor r4;
        org.apache.cxf.message.Message r0;
        org.apache.cxf.interceptor.security.AccessDeniedException $r6;
        java.security.Principal $r3;
        java.lang.Object $r1;
        java.lang.reflect.Method $r5;
        boolean $z0;

        r4 := @this: org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/security/SecurityContext;");

        r2 = (org.apache.cxf.security.SecurityContext) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.apache.cxf.security.SecurityContext: java.security.Principal getUserPrincipal()>();

        if $r3 == null goto label1;

        $r5 = virtualinvoke r4.<org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor: java.lang.reflect.Method getTargetMethod(org.apache.cxf.message.Message)>(r0);

        $z0 = virtualinvoke r4.<org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor: boolean authorize(org.apache.cxf.security.SecurityContext,java.lang.reflect.Method)>(r2, $r5);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r6 = new org.apache.cxf.interceptor.security.AccessDeniedException;

        specialinvoke $r6.<org.apache.cxf.interceptor.security.AccessDeniedException: void <init>(java.lang.String)>("Unauthorized");

        throw $r6;
    }

    protected java.lang.reflect.Method getTargetMethod(org.apache.cxf.message.Message)
    {
        org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor r13;
        org.apache.cxf.service.model.BindingOperationInfo r3;
        org.apache.cxf.service.invoker.MethodDispatcher r14;
        org.apache.cxf.service.Service $r9;
        java.lang.String $r10;
        java.lang.reflect.Method $r12, r15;
        org.apache.cxf.message.Message r0;
        org.apache.cxf.interceptor.security.AccessDeniedException $r5;
        org.apache.cxf.message.Exchange $r1, $r6;
        java.lang.Object $r2, $r4, $r7, $r11;
        java.lang.Class $r8;

        r13 := @this: org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/service/model/BindingOperationInfo;");

        r3 = (org.apache.cxf.service.model.BindingOperationInfo) $r2;

        if r3 == null goto label1;

        $r6 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r7 = interfaceinvoke $r6.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/service/Service;");

        $r9 = (org.apache.cxf.service.Service) $r7;

        $r8 = class "Lorg/apache/cxf/service/invoker/MethodDispatcher;";

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r11 = interfaceinvoke $r9.<org.apache.cxf.service.Service: java.lang.Object get(java.lang.Object)>($r10);

        r14 = (org.apache.cxf.service.invoker.MethodDispatcher) $r11;

        $r12 = interfaceinvoke r14.<org.apache.cxf.service.invoker.MethodDispatcher: java.lang.reflect.Method getMethod(org.apache.cxf.service.model.BindingOperationInfo)>(r3);

        return $r12;

     label1:
        $r4 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("org.apache.cxf.resource.method");

        r15 = (java.lang.reflect.Method) $r4;

        if r15 == null goto label2;

        return r15;

     label2:
        $r5 = new org.apache.cxf.interceptor.security.AccessDeniedException;

        specialinvoke $r5.<org.apache.cxf.interceptor.security.AccessDeniedException: void <init>(java.lang.String)>("Method is not available : Unauthorized");

        throw $r5;
    }

    protected boolean authorize(org.apache.cxf.security.SecurityContext, java.lang.reflect.Method)
    {
        org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor r0;
        java.util.logging.Level $r4;
        java.lang.String $r9, $r12;
        java.lang.reflect.Method r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.cxf.security.SecurityContext r3;
        java.util.logging.Logger $r5, $r7;
        java.util.List $r2, $r13;
        java.security.Principal $r8;
        java.lang.StringBuilder $r6, $r10, $r11;

        r0 := @this: org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor;

        r3 := @parameter0: org.apache.cxf.security.SecurityContext;

        r1 := @parameter1: java.lang.reflect.Method;

        $r2 = virtualinvoke r0.<org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor: java.util.List getExpectedRoles(java.lang.reflect.Method)>(r1);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $r13 = virtualinvoke r0.<org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor: java.util.List getDenyRoles(java.lang.reflect.Method)>(r1);

        $z3 = interfaceinvoke $r13.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = virtualinvoke r0.<org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor: boolean isUserInRole(org.apache.cxf.security.SecurityContext,java.util.List,boolean)>(r3, $r13, 1);

     label2:
        return $z4;

     label3:
        $z1 = virtualinvoke r0.<org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor: boolean isUserInRole(org.apache.cxf.security.SecurityContext,java.util.List,boolean)>(r3, $r2, 0);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        $r5 = <org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor: java.util.logging.Logger LOG>;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z2 = virtualinvoke $r5.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r4);

        if $z2 == 0 goto label5;

        $r7 = <org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor: java.util.logging.Logger LOG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = interfaceinvoke r3.<org.apache.cxf.security.SecurityContext: java.security.Principal getUserPrincipal()>();

        $r9 = interfaceinvoke $r8.<java.security.Principal: java.lang.String getName()>();

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not authorized");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void fine(java.lang.String)>($r12);

     label5:
        return 0;
    }

    protected boolean isUserInRole(org.apache.cxf.security.SecurityContext, java.util.List, boolean)
    {
        org.apache.cxf.security.SecurityContext r4;
        java.util.Iterator $r1;
        org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor r7;
        java.util.List r0;
        int $i0;
        java.lang.Object $r2, $r6;
        java.lang.String r3, $r5;
        boolean z0, $z1, $z2, $z3, $z4, $z5;

        r7 := @this: org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor;

        r4 := @parameter0: org.apache.cxf.security.SecurityContext;

        r0 := @parameter1: java.util.List;

        z0 := @parameter2: boolean;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 1 goto label3;

        $r5 = "*";

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label3;

        if z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z4 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label8;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $z1 = interfaceinvoke r4.<org.apache.cxf.security.SecurityContext: boolean isUserInRole(java.lang.String)>(r3);

        if $z1 == 0 goto label7;

        if z0 != 0 goto label5;

        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        return $z5;

     label7:
        goto label4;

     label8:
        return z0;
    }

    protected abstract java.util.List getExpectedRoles(java.lang.reflect.Method);

    protected java.util.List getDenyRoles(java.lang.reflect.Method)
    {
        java.util.List $r0;
        org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor r1;
        java.lang.reflect.Method r2;

        r1 := @this: org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor;

        r2 := @parameter0: java.lang.reflect.Method;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r0;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        <org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor: java.lang.String ALL_ROLES> = "*";

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/interceptor/security/AbstractAuthorizingInInterceptor;");

        <org.apache.cxf.interceptor.security.AbstractAuthorizingInInterceptor: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
