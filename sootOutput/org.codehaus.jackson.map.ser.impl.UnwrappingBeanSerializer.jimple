public class org.codehaus.jackson.map.ser.impl.UnwrappingBeanSerializer extends org.codehaus.jackson.map.ser.std.BeanSerializerBase
{

    public void <init>(org.codehaus.jackson.map.ser.std.BeanSerializerBase)
    {
        org.codehaus.jackson.map.ser.impl.UnwrappingBeanSerializer r0;
        org.codehaus.jackson.map.ser.std.BeanSerializerBase r1;

        r0 := @this: org.codehaus.jackson.map.ser.impl.UnwrappingBeanSerializer;

        r1 := @parameter0: org.codehaus.jackson.map.ser.std.BeanSerializerBase;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: void <init>(org.codehaus.jackson.map.ser.std.BeanSerializerBase)>(r1);

        return;
    }

    public org.codehaus.jackson.map.JsonSerializer unwrappingSerializer()
    {
        org.codehaus.jackson.map.ser.impl.UnwrappingBeanSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.UnwrappingBeanSerializer;

        return r0;
    }

    public boolean isUnwrappingSerializer()
    {
        org.codehaus.jackson.map.ser.impl.UnwrappingBeanSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.UnwrappingBeanSerializer;

        return 1;
    }

    public final void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.JsonGenerator r3;
        org.codehaus.jackson.map.SerializerProvider r4;
        java.lang.Object $r1, r2;
        org.codehaus.jackson.map.ser.impl.UnwrappingBeanSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.UnwrappingBeanSerializer;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r4 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanSerializer: java.lang.Object _propertyFilterId>;

        if $r1 == null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanSerializer: void serializeFieldsFiltered(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r2, r3, r4);

        goto label2;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanSerializer: void serializeFields(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r2, r3, r4);

     label2:
        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r5;
        java.lang.Class $r3;
        org.codehaus.jackson.map.ser.impl.UnwrappingBeanSerializer r2;
        java.lang.String $r4, $r6;

        r2 := @this: org.codehaus.jackson.map.ser.impl.UnwrappingBeanSerializer;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UnwrappingBeanSerializer for ");

        $r3 = virtualinvoke r2.<org.codehaus.jackson.map.ser.impl.UnwrappingBeanSerializer: java.lang.Class handledType()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
