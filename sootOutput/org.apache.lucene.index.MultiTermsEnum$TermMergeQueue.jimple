final class org.apache.lucene.index.MultiTermsEnum$TermMergeQueue extends org.apache.lucene.util.PriorityQueue
{
    java.util.Comparator termComp;

    void <init>(int)
    {
        int i0;
        org.apache.lucene.index.MultiTermsEnum$TermMergeQueue r0;

        r0 := @this: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.util.PriorityQueue: void <init>(int)>(i0);

        return;
    }

    protected boolean lessThan(org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice, org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)
    {
        org.apache.lucene.util.BytesRef $r3, $r4;
        org.apache.lucene.index.ReaderSlice $r6, $r7;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice r1, r2;
        org.apache.lucene.index.MultiTermsEnum$TermMergeQueue r0;
        int $i0, $i1, $i2;
        java.util.Comparator $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue;

        r1 := @parameter0: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice;

        r2 := @parameter1: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice;

        $r5 = r0.<org.apache.lucene.index.MultiTermsEnum$TermMergeQueue: java.util.Comparator termComp>;

        $r4 = r1.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.util.BytesRef current>;

        $r3 = r2.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.util.BytesRef current>;

        $i0 = interfaceinvoke $r5.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $i0 == 0 goto label3;

        if $i0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $r6 = staticinvoke <org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.ReaderSlice access$000(org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)>(r1);

        $i1 = $r6.<org.apache.lucene.index.ReaderSlice: int start>;

        $r7 = staticinvoke <org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.ReaderSlice access$000(org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)>(r2);

        $i2 = $r7.<org.apache.lucene.index.ReaderSlice: int start>;

        if $i1 >= $i2 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    protected volatile boolean lessThan(java.lang.Object, java.lang.Object)
    {
        org.apache.lucene.index.MultiTermsEnum$TermMergeQueue r0;
        java.lang.Object r1, r2;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.MultiTermsEnum$TermMergeQueue;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice) r1;

        $r3 = (org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice) r2;

        $z0 = virtualinvoke r0.<org.apache.lucene.index.MultiTermsEnum$TermMergeQueue: boolean lessThan(org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice,org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)>($r4, $r3);

        return $z0;
    }
}
