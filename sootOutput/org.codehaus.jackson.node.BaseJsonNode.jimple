public abstract class org.codehaus.jackson.node.BaseJsonNode extends org.codehaus.jackson.JsonNode implements org.codehaus.jackson.map.JsonSerializableWithType
{

    protected void <init>()
    {
        org.codehaus.jackson.node.BaseJsonNode r0;

        r0 := @this: org.codehaus.jackson.node.BaseJsonNode;

        specialinvoke r0.<org.codehaus.jackson.JsonNode: void <init>()>();

        return;
    }

    public org.codehaus.jackson.JsonNode findValue(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.jackson.node.BaseJsonNode r0;

        r0 := @this: org.codehaus.jackson.node.BaseJsonNode;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public final org.codehaus.jackson.JsonNode findPath(java.lang.String)
    {
        org.codehaus.jackson.node.BaseJsonNode r0;
        org.codehaus.jackson.node.MissingNode $r3;
        java.lang.String r1;
        org.codehaus.jackson.JsonNode $r2;

        r0 := @this: org.codehaus.jackson.node.BaseJsonNode;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.node.BaseJsonNode: org.codehaus.jackson.JsonNode findValue(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r3 = staticinvoke <org.codehaus.jackson.node.MissingNode: org.codehaus.jackson.node.MissingNode getInstance()>();

        return $r3;

     label1:
        return $r2;
    }

    public org.codehaus.jackson.node.ObjectNode findParent(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.jackson.node.BaseJsonNode r0;

        r0 := @this: org.codehaus.jackson.node.BaseJsonNode;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.util.List findValues(java.lang.String, java.util.List)
    {
        java.util.List r0;
        java.lang.String r2;
        org.codehaus.jackson.node.BaseJsonNode r1;

        r1 := @this: org.codehaus.jackson.node.BaseJsonNode;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.List;

        return r0;
    }

    public java.util.List findValuesAsText(java.lang.String, java.util.List)
    {
        java.util.List r0;
        java.lang.String r2;
        org.codehaus.jackson.node.BaseJsonNode r1;

        r1 := @this: org.codehaus.jackson.node.BaseJsonNode;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.List;

        return r0;
    }

    public java.util.List findParents(java.lang.String, java.util.List)
    {
        java.util.List r0;
        java.lang.String r2;
        org.codehaus.jackson.node.BaseJsonNode r1;

        r1 := @this: org.codehaus.jackson.node.BaseJsonNode;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.List;

        return r0;
    }

    public org.codehaus.jackson.JsonParser traverse()
    {
        org.codehaus.jackson.node.TreeTraversingParser $r0;
        org.codehaus.jackson.node.BaseJsonNode r1;

        r1 := @this: org.codehaus.jackson.node.BaseJsonNode;

        $r0 = new org.codehaus.jackson.node.TreeTraversingParser;

        specialinvoke $r0.<org.codehaus.jackson.node.TreeTraversingParser: void <init>(org.codehaus.jackson.JsonNode)>(r1);

        return $r0;
    }

    public abstract org.codehaus.jackson.JsonToken asToken();

    public org.codehaus.jackson.JsonParser$NumberType getNumberType()
    {
        org.codehaus.jackson.node.BaseJsonNode r0;

        r0 := @this: org.codehaus.jackson.node.BaseJsonNode;

        return null;
    }

    public abstract void serialize(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException;

    public abstract void serializeWithType(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException;

    public volatile org.codehaus.jackson.JsonNode findParent(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.jackson.node.BaseJsonNode r0;
        org.codehaus.jackson.node.ObjectNode $r2;

        r0 := @this: org.codehaus.jackson.node.BaseJsonNode;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.node.BaseJsonNode: org.codehaus.jackson.node.ObjectNode findParent(java.lang.String)>(r1);

        return $r2;
    }
}
