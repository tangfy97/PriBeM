public class org.apache.solr.common.cloud.DocCollection extends org.apache.solr.common.cloud.ZkNodeProps
{
    public static final java.lang.String DOC_ROUTER;
    public static final java.lang.String SHARDS;
    private final java.lang.String name;
    private final java.util.Map slices;
    private final java.util.Map activeSlices;
    private final org.apache.solr.common.cloud.DocRouter router;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String, java.util.Map, java.util.Map, org.apache.solr.common.cloud.DocRouter)
    {
        org.apache.solr.common.cloud.DocCollection r0;
        java.util.HashMap $r4;
        java.lang.AssertionError $r8;
        java.util.Map r1, r3, $r15, $r18;
        java.lang.String r2, $r13, $r14;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r10;
        org.apache.solr.common.cloud.Slice $r12;
        java.util.Iterator $r6;
        java.util.Set $r5;
        org.apache.solr.common.cloud.DocRouter r7;
        java.lang.Object $r9, $r11, $r16, $r17;

        r0 := @this: org.apache.solr.common.cloud.DocCollection;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Map;

        r1 := @parameter2: java.util.Map;

        r7 := @parameter3: org.apache.solr.common.cloud.DocRouter;

        if r1 != null goto label1;

        $r18 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        goto label2;

     label1:
        $r18 = r1;

     label2:
        specialinvoke r0.<org.apache.solr.common.cloud.ZkNodeProps: void <init>(java.util.Map)>($r18);

        r0.<org.apache.solr.common.cloud.DocCollection: java.lang.String name> = r2;

        r0.<org.apache.solr.common.cloud.DocCollection: java.util.Map slices> = r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.solr.common.cloud.DocCollection: java.util.Map activeSlices> = $r4;

        $r5 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r9 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (org.apache.solr.common.cloud.Slice) $r11;

        $r13 = virtualinvoke $r12.<org.apache.solr.common.cloud.Slice: java.lang.String getState()>();

        $r14 = <org.apache.solr.common.cloud.Slice: java.lang.String ACTIVE>;

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z1 == 0 goto label4;

        $r15 = r0.<org.apache.solr.common.cloud.DocCollection: java.util.Map activeSlices>;

        $r16 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r17);

     label4:
        goto label3;

     label5:
        r0.<org.apache.solr.common.cloud.DocCollection: org.apache.solr.common.cloud.DocRouter router> = r7;

        $z0 = <org.apache.solr.common.cloud.DocCollection: boolean $assertionsDisabled>;

        if $z0 != 0 goto label7;

        if r2 == null goto label6;

        if r3 != null goto label7;

     label6:
        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label7:
        return;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        org.apache.solr.common.cloud.DocCollection r0;

        r0 := @this: org.apache.solr.common.cloud.DocCollection;

        $r1 = r0.<org.apache.solr.common.cloud.DocCollection: java.lang.String name>;

        return $r1;
    }

    public org.apache.solr.common.cloud.Slice getSlice(java.lang.String)
    {
        org.apache.solr.common.cloud.Slice $r4;
        org.apache.solr.common.cloud.DocCollection r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.solr.common.cloud.DocCollection;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.solr.common.cloud.DocCollection: java.util.Map slices>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.solr.common.cloud.Slice) $r3;

        return $r4;
    }

    public java.util.Collection getSlices()
    {
        org.apache.solr.common.cloud.DocCollection r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.solr.common.cloud.DocCollection;

        $r1 = r0.<org.apache.solr.common.cloud.DocCollection: java.util.Map slices>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public java.util.Collection getActiveSlices()
    {
        org.apache.solr.common.cloud.DocCollection r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.solr.common.cloud.DocCollection;

        $r1 = r0.<org.apache.solr.common.cloud.DocCollection: java.util.Map activeSlices>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public java.util.Map getSlicesMap()
    {
        org.apache.solr.common.cloud.DocCollection r0;
        java.util.Map $r1;

        r0 := @this: org.apache.solr.common.cloud.DocCollection;

        $r1 = r0.<org.apache.solr.common.cloud.DocCollection: java.util.Map slices>;

        return $r1;
    }

    public java.util.Map getActiveSlicesMap()
    {
        org.apache.solr.common.cloud.DocCollection r0;
        java.util.Map $r1;

        r0 := @this: org.apache.solr.common.cloud.DocCollection;

        $r1 = r0.<org.apache.solr.common.cloud.DocCollection: java.util.Map activeSlices>;

        return $r1;
    }

    public org.apache.solr.common.cloud.DocRouter getRouter()
    {
        org.apache.solr.common.cloud.DocRouter $r1;
        org.apache.solr.common.cloud.DocCollection r0;

        r0 := @this: org.apache.solr.common.cloud.DocCollection;

        $r1 = r0.<org.apache.solr.common.cloud.DocCollection: org.apache.solr.common.cloud.DocRouter router>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.solr.common.cloud.DocCollection r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7;
        java.lang.String $r3, $r6, $r8;

        r2 := @this: org.apache.solr.common.cloud.DocCollection;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DocCollection(");

        $r3 = r2.<org.apache.solr.common.cloud.DocCollection: java.lang.String name>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")=");

        $r6 = staticinvoke <org.noggit.JSONUtil: java.lang.String toJSON(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public void write(org.noggit.JSONWriter)
    {
        org.apache.solr.common.cloud.DocCollection r1;
        org.noggit.JSONWriter r5;
        java.util.LinkedHashMap $r0;
        java.util.Map $r2, $r3, $r4;
        int $i0, $i1;

        r1 := @this: org.apache.solr.common.cloud.DocCollection;

        r5 := @parameter0: org.noggit.JSONWriter;

        $r0 = new java.util.LinkedHashMap;

        $r2 = r1.<org.apache.solr.common.cloud.DocCollection: java.util.Map slices>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $i1 = $i0 + 1;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>(int)>($i1);

        $r3 = r1.<org.apache.solr.common.cloud.DocCollection: java.util.Map propMap>;

        virtualinvoke $r0.<java.util.LinkedHashMap: void putAll(java.util.Map)>($r3);

        $r4 = r1.<org.apache.solr.common.cloud.DocCollection: java.util.Map slices>;

        virtualinvoke $r0.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("shards", $r4);

        virtualinvoke r5.<org.noggit.JSONWriter: void write(java.util.Map)>($r0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.solr.common.cloud.DocCollection: java.lang.String SHARDS> = "shards";

        <org.apache.solr.common.cloud.DocCollection: java.lang.String DOC_ROUTER> = "router";

        $r0 = class "Lorg/apache/solr/common/cloud/DocCollection;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.solr.common.cloud.DocCollection: boolean $assertionsDisabled> = $z1;

        return;
    }
}
