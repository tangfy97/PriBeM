class ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable extends ucar.nc2.ft.point.standard.CoordVarExtractor
{
    protected ucar.nc2.dataset.VariableDS coordVar;
    final ucar.nc2.ft.point.standard.NestedTable this$0;

    void <init>(ucar.nc2.ft.point.standard.NestedTable, ucar.nc2.dataset.VariableDS, java.lang.String, int)
    {
        ucar.nc2.dataset.VariableDS r3;
        ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable r0;
        int i0;
        java.lang.String r2;
        ucar.nc2.ft.point.standard.NestedTable r1;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable;

        r1 := @parameter0: ucar.nc2.ft.point.standard.NestedTable;

        r3 := @parameter1: ucar.nc2.dataset.VariableDS;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r0.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: ucar.nc2.ft.point.standard.NestedTable this$0> = r1;

        specialinvoke r0.<ucar.nc2.ft.point.standard.CoordVarExtractor: void <init>(java.lang.String,int)>(r2, i0);

        r0.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: ucar.nc2.dataset.VariableDS coordVar> = r3;

        return;
    }

    public java.lang.String getCoordValueString(ucar.ma2.StructureData)
    {
        ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable r0;
        ucar.ma2.StructureData r5;
        int $i0;
        java.lang.String $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0, $z1;
        double $d0;
        ucar.nc2.dataset.VariableDS $r1, $r3;
        ucar.ma2.DataType $r2, $r4;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable;

        r5 := @parameter0: ucar.ma2.StructureData;

        $r1 = r0.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: ucar.nc2.dataset.VariableDS coordVar>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.VariableDS: ucar.ma2.DataType getDataType()>();

        $z0 = virtualinvoke $r2.<ucar.ma2.DataType: boolean isString()>();

        if $z0 == 0 goto label1;

        $r10 = r0.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: java.lang.String axisName>;

        $r11 = virtualinvoke r5.<ucar.ma2.StructureData: java.lang.String getScalarString(java.lang.String)>($r10);

        return $r11;

     label1:
        $r3 = r0.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: ucar.nc2.dataset.VariableDS coordVar>;

        $r4 = virtualinvoke $r3.<ucar.nc2.dataset.VariableDS: ucar.ma2.DataType getDataType()>();

        $z1 = virtualinvoke $r4.<ucar.ma2.DataType: boolean isIntegral()>();

        if $z1 == 0 goto label2;

        $r8 = r0.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: java.lang.String axisName>;

        $i0 = virtualinvoke r5.<ucar.ma2.StructureData: int convertScalarInt(java.lang.String)>($r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        return $r9;

     label2:
        $r6 = r0.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: java.lang.String axisName>;

        $d0 = virtualinvoke r5.<ucar.ma2.StructureData: double convertScalarDouble(java.lang.String)>($r6);

        $r7 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        return $r7;
    }

    public java.lang.String getUnitsString()
    {
        ucar.nc2.dataset.VariableDS $r1;
        java.lang.String $r2;
        ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable r0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable;

        $r1 = r0.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: ucar.nc2.dataset.VariableDS coordVar>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.VariableDS: java.lang.String getUnitsString()>();

        return $r2;
    }

    public boolean isString()
    {
        ucar.nc2.dataset.VariableDS $r1;
        ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable r0;
        ucar.ma2.DataType $r2;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable;

        $r1 = r0.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: ucar.nc2.dataset.VariableDS coordVar>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.VariableDS: ucar.ma2.DataType getDataType()>();

        $z0 = virtualinvoke $r2.<ucar.ma2.DataType: boolean isString()>();

        return $z0;
    }

    public boolean isMissing(ucar.ma2.StructureData)
    {
        ucar.nc2.dataset.VariableDS $r2, $r4;
        ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable r0;
        char $c1;
        ucar.ma2.StructureData r1;
        int $i0;
        java.lang.String $r3;
        boolean $z0, $z1, $z2;
        double $d0, $d1;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable;

        r1 := @parameter0: ucar.ma2.StructureData;

        $z0 = virtualinvoke r0.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: boolean isString()>();

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: java.lang.String getCoordValueString(ucar.ma2.StructureData)>(r1);

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $d1 = 0.0;

        goto label2;

     label1:
        $c1 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        $d1 = (double) $c1;

     label2:
        $r4 = r0.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: ucar.nc2.dataset.VariableDS coordVar>;

        $z2 = virtualinvoke $r4.<ucar.nc2.dataset.VariableDS: boolean isMissing(double)>($d1);

        return $z2;

     label3:
        $d0 = virtualinvoke r0.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: double getCoordValue(ucar.ma2.StructureData)>(r1);

        $r2 = r0.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: ucar.nc2.dataset.VariableDS coordVar>;

        $z1 = virtualinvoke $r2.<ucar.nc2.dataset.VariableDS: boolean isMissing(double)>($d0);

        return $z1;
    }

    public double getCoordValue(ucar.ma2.StructureData)
    {
        ucar.ma2.StructureData r0;
        ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable r1;
        java.lang.String $r2;
        double $d0;

        r1 := @this: ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable;

        r0 := @parameter0: ucar.ma2.StructureData;

        $r2 = r1.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: java.lang.String axisName>;

        $d0 = virtualinvoke r0.<ucar.ma2.StructureData: double convertScalarDouble(java.lang.String)>($r2);

        return $d0;
    }

    public boolean isInt()
    {
        ucar.nc2.dataset.VariableDS $r1;
        ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable r0;
        ucar.ma2.DataType $r2;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable;

        $r1 = r0.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: ucar.nc2.dataset.VariableDS coordVar>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.VariableDS: ucar.ma2.DataType getDataType()>();

        $z0 = virtualinvoke $r2.<ucar.ma2.DataType: boolean isIntegral()>();

        return $z0;
    }

    public long getCoordValueLong(ucar.ma2.StructureData)
    {
        ucar.ma2.StructureData r0;
        ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable r1;
        long $l0;
        java.lang.String $r2;

        r1 := @this: ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable;

        r0 := @parameter0: ucar.ma2.StructureData;

        $r2 = r1.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: java.lang.String axisName>;

        $l0 = virtualinvoke r0.<ucar.ma2.StructureData: long convertScalarLong(java.lang.String)>($r2);

        return $l0;
    }
}
