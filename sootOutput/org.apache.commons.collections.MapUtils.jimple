public class org.apache.commons.collections.MapUtils extends java.lang.Object
{
    public static final java.util.Map EMPTY_MAP;
    public static final java.util.SortedMap EMPTY_SORTED_MAP;
    private static final java.lang.String INDENT_STRING;

    public void <init>()
    {
        org.apache.commons.collections.MapUtils r0;

        r0 := @this: org.apache.commons.collections.MapUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object getObject(java.util.Map, java.lang.Object)
    {
        java.lang.Object r1, $r2;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r2;

     label1:
        return null;
    }

    public static java.lang.String getString(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1, $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r3;

     label1:
        return null;
    }

    public static java.lang.Boolean getBoolean(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        int $i0;
        java.lang.Boolean $r4, $r6, $r7;
        java.lang.Object r1, $r2;
        java.lang.String $r5;
        java.lang.Number r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label5;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r2 == null goto label5;

        $z0 = $r2 instanceof java.lang.Boolean;

        if $z0 == 0 goto label1;

        $r6 = (java.lang.Boolean) $r2;

        return $r6;

     label1:
        $z1 = $r2 instanceof java.lang.String;

        if $z1 == 0 goto label2;

        $r4 = new java.lang.Boolean;

        $r5 = (java.lang.String) $r2;

        specialinvoke $r4.<java.lang.Boolean: void <init>(java.lang.String)>($r5);

        return $r4;

     label2:
        $z2 = $r2 instanceof java.lang.Number;

        if $z2 == 0 goto label5;

        r3 = (java.lang.Number) $r2;

        $i0 = virtualinvoke r3.<java.lang.Number: int intValue()>();

        if $i0 == 0 goto label3;

        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label4;

     label3:
        $r7 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label4:
        return $r7;

     label5:
        return null;
    }

    public static java.lang.Number getNumber(java.util.Map, java.lang.Object)
    {
        java.text.NumberFormat $r3;
        java.util.Map r0;
        java.lang.Object r1, $r2;
        java.lang.String r7;
        java.lang.Number $r4, $r5;
        java.text.ParseException $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label5;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r2 == null goto label5;

        $z0 = $r2 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r5 = (java.lang.Number) $r2;

        return $r5;

     label1:
        $z1 = $r2 instanceof java.lang.String;

        if $z1 == 0 goto label5;

     label2:
        r7 = (java.lang.String) $r2;

        $r3 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance()>();

        $r4 = virtualinvoke $r3.<java.text.NumberFormat: java.lang.Number parse(java.lang.String)>(r7);

     label3:
        return $r4;

     label4:
        $r6 := @caughtexception;

        staticinvoke <org.apache.commons.collections.MapUtils: void logInfo(java.lang.Exception)>($r6);

     label5:
        return null;

        catch java.text.ParseException from label2 to label3 with label4;
    }

    public static java.lang.Byte getByte(java.util.Map, java.lang.Object)
    {
        byte $b0;
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Number $r2;
        java.lang.Byte $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Number getNumber(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = $r2 instanceof java.lang.Byte;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.Byte) $r2;

        return $r4;

     label2:
        $r3 = new java.lang.Byte;

        $b0 = virtualinvoke $r2.<java.lang.Number: byte byteValue()>();

        specialinvoke $r3.<java.lang.Byte: void <init>(byte)>($b0);

        return $r3;
    }

    public static java.lang.Short getShort(java.util.Map, java.lang.Object)
    {
        short $s0;
        java.lang.Short $r3, $r4;
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Number $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Number getNumber(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = $r2 instanceof java.lang.Short;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.Short) $r2;

        return $r4;

     label2:
        $r3 = new java.lang.Short;

        $s0 = virtualinvoke $r2.<java.lang.Number: short shortValue()>();

        specialinvoke $r3.<java.lang.Short: void <init>(short)>($s0);

        return $r3;
    }

    public static java.lang.Integer getInteger(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        int $i0;
        java.lang.Object r1;
        java.lang.Number $r2;
        java.lang.Integer $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Number getNumber(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = $r2 instanceof java.lang.Integer;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.Integer) $r2;

        return $r4;

     label2:
        $r3 = new java.lang.Integer;

        $i0 = virtualinvoke $r2.<java.lang.Number: int intValue()>();

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i0);

        return $r3;
    }

    public static java.lang.Long getLong(java.util.Map, java.lang.Object)
    {
        java.lang.Long $r3, $r4;
        java.util.Map r0;
        java.lang.Object r1;
        long $l0;
        java.lang.Number $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Number getNumber(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = $r2 instanceof java.lang.Long;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.Long) $r2;

        return $r4;

     label2:
        $r3 = new java.lang.Long;

        $l0 = virtualinvoke $r2.<java.lang.Number: long longValue()>();

        specialinvoke $r3.<java.lang.Long: void <init>(long)>($l0);

        return $r3;
    }

    public static java.lang.Float getFloat(java.util.Map, java.lang.Object)
    {
        java.lang.Float $r3, $r4;
        java.util.Map r0;
        float $f0;
        java.lang.Object r1;
        java.lang.Number $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Number getNumber(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = $r2 instanceof java.lang.Float;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.Float) $r2;

        return $r4;

     label2:
        $r3 = new java.lang.Float;

        $f0 = virtualinvoke $r2.<java.lang.Number: float floatValue()>();

        specialinvoke $r3.<java.lang.Float: void <init>(float)>($f0);

        return $r3;
    }

    public static java.lang.Double getDouble(java.util.Map, java.lang.Object)
    {
        java.lang.Double $r3, $r4;
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Number $r2;
        boolean $z0;
        double $d0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Number getNumber(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = $r2 instanceof java.lang.Double;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.Double) $r2;

        return $r4;

     label2:
        $r3 = new java.lang.Double;

        $d0 = virtualinvoke $r2.<java.lang.Number: double doubleValue()>();

        specialinvoke $r3.<java.lang.Double: void <init>(double)>($d0);

        return $r3;
    }

    public static java.util.Map getMap(java.util.Map, java.lang.Object)
    {
        java.util.Map r0, $r3;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        $z0 = $r2 instanceof java.util.Map;

        if $z0 == 0 goto label1;

        $r3 = (java.util.Map) $r2;

        return $r3;

     label1:
        return null;
    }

    public static java.lang.Object getObject(java.util.Map, java.lang.Object, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1, r2, $r3;

        r0 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object;

        if r0 == null goto label1;

        $r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        if $r3 == null goto label1;

        return $r3;

     label1:
        return r1;
    }

    public static java.lang.String getString(java.util.Map, java.lang.Object, java.lang.String)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.String $r2, r3, r4;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.String getString(java.util.Map,java.lang.Object)>(r0, r1);

        r4 = $r2;

        if $r2 != null goto label1;

        r4 = r3;

     label1:
        return r4;
    }

    public static java.lang.Boolean getBoolean(java.util.Map, java.lang.Object, java.lang.Boolean)
    {
        java.util.Map r0;
        java.lang.Boolean $r2, r3, r4;
        java.lang.Object r1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Boolean;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Boolean getBoolean(java.util.Map,java.lang.Object)>(r0, r1);

        r4 = $r2;

        if $r2 != null goto label1;

        r4 = r3;

     label1:
        return r4;
    }

    public static java.lang.Number getNumber(java.util.Map, java.lang.Object, java.lang.Number)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Number $r2, r3, r4;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Number;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Number getNumber(java.util.Map,java.lang.Object)>(r0, r1);

        r4 = $r2;

        if $r2 != null goto label1;

        r4 = r3;

     label1:
        return r4;
    }

    public static java.lang.Byte getByte(java.util.Map, java.lang.Object, java.lang.Byte)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Byte $r2, r3, r4;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Byte;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Byte getByte(java.util.Map,java.lang.Object)>(r0, r1);

        r4 = $r2;

        if $r2 != null goto label1;

        r4 = r3;

     label1:
        return r4;
    }

    public static java.lang.Short getShort(java.util.Map, java.lang.Object, java.lang.Short)
    {
        java.lang.Short $r2, r3, r4;
        java.util.Map r0;
        java.lang.Object r1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Short;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Short getShort(java.util.Map,java.lang.Object)>(r0, r1);

        r4 = $r2;

        if $r2 != null goto label1;

        r4 = r3;

     label1:
        return r4;
    }

    public static java.lang.Integer getInteger(java.util.Map, java.lang.Object, java.lang.Integer)
    {
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Integer $r2, r3, r4;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Integer;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Integer getInteger(java.util.Map,java.lang.Object)>(r0, r1);

        r4 = $r2;

        if $r2 != null goto label1;

        r4 = r3;

     label1:
        return r4;
    }

    public static java.lang.Long getLong(java.util.Map, java.lang.Object, java.lang.Long)
    {
        java.lang.Long $r2, r3, r4;
        java.util.Map r0;
        java.lang.Object r1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Long;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Long getLong(java.util.Map,java.lang.Object)>(r0, r1);

        r4 = $r2;

        if $r2 != null goto label1;

        r4 = r3;

     label1:
        return r4;
    }

    public static java.lang.Float getFloat(java.util.Map, java.lang.Object, java.lang.Float)
    {
        java.lang.Float $r2, r3, r4;
        java.util.Map r0;
        java.lang.Object r1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Float;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Float getFloat(java.util.Map,java.lang.Object)>(r0, r1);

        r4 = $r2;

        if $r2 != null goto label1;

        r4 = r3;

     label1:
        return r4;
    }

    public static java.lang.Double getDouble(java.util.Map, java.lang.Object, java.lang.Double)
    {
        java.lang.Double $r2, r3, r4;
        java.util.Map r0;
        java.lang.Object r1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Double;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Double getDouble(java.util.Map,java.lang.Object)>(r0, r1);

        r4 = $r2;

        if $r2 != null goto label1;

        r4 = r3;

     label1:
        return r4;
    }

    public static java.util.Map getMap(java.util.Map, java.lang.Object, java.util.Map)
    {
        java.util.Map r0, $r2, r3, r4;
        java.lang.Object r1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Map;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.util.Map getMap(java.util.Map,java.lang.Object)>(r0, r1);

        r4 = $r2;

        if $r2 != null goto label1;

        r4 = r3;

     label1:
        return r4;
    }

    public static boolean getBooleanValue(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Boolean $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Boolean getBoolean(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public static byte getByteValue(java.util.Map, java.lang.Object)
    {
        byte $b0;
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Byte $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Byte getByte(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $b0 = virtualinvoke $r2.<java.lang.Byte: byte byteValue()>();

        return $b0;
    }

    public static short getShortValue(java.util.Map, java.lang.Object)
    {
        short $s0;
        java.lang.Short $r2;
        java.util.Map r0;
        java.lang.Object r1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Short getShort(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $s0 = virtualinvoke $r2.<java.lang.Short: short shortValue()>();

        return $s0;
    }

    public static int getIntValue(java.util.Map, java.lang.Object)
    {
        java.util.Map r0;
        int $i0;
        java.lang.Object r1;
        java.lang.Integer $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Integer getInteger(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public static long getLongValue(java.util.Map, java.lang.Object)
    {
        java.lang.Long $r2;
        java.util.Map r0;
        java.lang.Object r1;
        long $l0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Long getLong(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return 0L;

     label1:
        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public static float getFloatValue(java.util.Map, java.lang.Object)
    {
        java.lang.Float $r2;
        java.util.Map r0;
        float $f0;
        java.lang.Object r1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Float getFloat(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return 0.0F;

     label1:
        $f0 = virtualinvoke $r2.<java.lang.Float: float floatValue()>();

        return $f0;
    }

    public static double getDoubleValue(java.util.Map, java.lang.Object)
    {
        java.lang.Double $r2;
        java.util.Map r0;
        java.lang.Object r1;
        double $d0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Double getDouble(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return 0.0;

     label1:
        $d0 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public static boolean getBooleanValue(java.util.Map, java.lang.Object, boolean)
    {
        java.util.Map r0;
        java.lang.Boolean $r2;
        java.lang.Object r1;
        boolean $z0, z1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        z1 := @parameter2: boolean;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Boolean getBoolean(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return z1;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public static byte getByteValue(java.util.Map, java.lang.Object, byte)
    {
        byte $b0, b1;
        java.util.Map r0;
        java.lang.Object r1;
        java.lang.Byte $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        b1 := @parameter2: byte;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Byte getByte(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return b1;

     label1:
        $b0 = virtualinvoke $r2.<java.lang.Byte: byte byteValue()>();

        return $b0;
    }

    public static short getShortValue(java.util.Map, java.lang.Object, short)
    {
        short $s0, s1;
        java.lang.Short $r2;
        java.util.Map r0;
        java.lang.Object r1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        s1 := @parameter2: short;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Short getShort(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return s1;

     label1:
        $s0 = virtualinvoke $r2.<java.lang.Short: short shortValue()>();

        return $s0;
    }

    public static int getIntValue(java.util.Map, java.lang.Object, int)
    {
        java.util.Map r0;
        int $i0, i1;
        java.lang.Object r1;
        java.lang.Integer $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        i1 := @parameter2: int;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Integer getInteger(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return i1;

     label1:
        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public static long getLongValue(java.util.Map, java.lang.Object, long)
    {
        java.lang.Long $r2;
        java.util.Map r0;
        java.lang.Object r1;
        long $l0, l1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        l1 := @parameter2: long;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Long getLong(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return l1;

     label1:
        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public static float getFloatValue(java.util.Map, java.lang.Object, float)
    {
        java.lang.Float $r2;
        java.util.Map r0;
        float $f0, f1;
        java.lang.Object r1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        f1 := @parameter2: float;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Float getFloat(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return f1;

     label1:
        $f0 = virtualinvoke $r2.<java.lang.Float: float floatValue()>();

        return $f0;
    }

    public static double getDoubleValue(java.util.Map, java.lang.Object, double)
    {
        java.lang.Double $r2;
        java.util.Map r0;
        java.lang.Object r1;
        double $d0, d1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        d1 := @parameter2: double;

        $r2 = staticinvoke <org.apache.commons.collections.MapUtils: java.lang.Double getDouble(java.util.Map,java.lang.Object)>(r0, r1);

        if $r2 != null goto label1;

        return d1;

     label1:
        $d0 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public static java.util.Properties toProperties(java.util.Map)
    {
        java.util.Map$Entry r5;
        java.util.Properties $r0;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.Map r1;
        java.lang.Object $r4, $r6, $r7;
        boolean $z0;

        r1 := @parameter0: java.util.Map;

        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        if r1 == null goto label2;

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r0.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.Map toMap(java.util.ResourceBundle)
    {
        java.util.ResourceBundle r0;
        java.util.Enumeration $r1;
        java.util.HashMap $r2;
        java.lang.Object $r3, $r5;
        java.lang.String r4;
        boolean $z0;

        r0 := @parameter0: java.util.ResourceBundle;

        $r1 = virtualinvoke r0.<java.util.ResourceBundle: java.util.Enumeration getKeys()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (java.lang.String) $r3;

        $r5 = virtualinvoke r0.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>(r4);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r5);

        goto label1;

     label2:
        return $r2;
    }

    public static void verbosePrint(java.io.PrintStream, java.lang.Object, java.util.Map)
    {
        java.io.PrintStream r0;
        java.util.Map r2;
        org.apache.commons.collections.ArrayStack $r3;
        java.lang.Object r1;

        r0 := @parameter0: java.io.PrintStream;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Map;

        $r3 = new org.apache.commons.collections.ArrayStack;

        specialinvoke $r3.<org.apache.commons.collections.ArrayStack: void <init>()>();

        staticinvoke <org.apache.commons.collections.MapUtils: void verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections.ArrayStack,boolean)>(r0, r1, r2, $r3, 0);

        return;
    }

    public static void debugPrint(java.io.PrintStream, java.lang.Object, java.util.Map)
    {
        java.io.PrintStream r0;
        java.util.Map r2;
        org.apache.commons.collections.ArrayStack $r3;
        java.lang.Object r1;

        r0 := @parameter0: java.io.PrintStream;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Map;

        $r3 = new org.apache.commons.collections.ArrayStack;

        specialinvoke $r3.<org.apache.commons.collections.ArrayStack: void <init>()>();

        staticinvoke <org.apache.commons.collections.MapUtils: void verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections.ArrayStack,boolean)>(r0, r1, r2, $r3, 1);

        return;
    }

    protected static void logInfo(java.lang.Exception)
    {
        java.io.PrintStream $r1;
        java.lang.StringBuffer $r0, $r2, $r4;
        java.lang.String $r5;
        java.lang.Exception r3;

        r3 := @parameter0: java.lang.Exception;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("INFO: Exception: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return;
    }

    private static void verbosePrintInternal(java.io.PrintStream, java.lang.Object, java.util.Map, org.apache.commons.collections.ArrayStack, boolean)
    {
        java.util.Map r2, $r22;
        boolean z0, $z1, $z2, $z3;
        java.util.Set $r4;
        java.lang.StringBuffer $r7, $r10, $r16, $r17, $r18, $r25, $r26;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;
        org.apache.commons.collections.ArrayStack r1;
        java.lang.String $r9, $r19, $r21, $r24;
        java.io.PrintStream r0;
        java.util.Map$Entry r12;
        java.util.Iterator $r5;
        java.lang.Object r3, $r11, $r13, $r14, $r23;
        java.lang.Class $r8, $r20;

        r0 := @parameter0: java.io.PrintStream;

        r3 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Map;

        r1 := @parameter3: org.apache.commons.collections.ArrayStack;

        z0 := @parameter4: boolean;

        $i0 = virtualinvoke r1.<org.apache.commons.collections.ArrayStack: int size()>();

        staticinvoke <org.apache.commons.collections.MapUtils: void printIndent(java.io.PrintStream,int)>(r0, $i0);

        if r2 != null goto label02;

        if r3 == null goto label01;

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.Object)>(r3);

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>(" = ");

     label01:
        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>("null");

        return;

     label02:
        if r3 == null goto label03;

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.Object)>(r3);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>(" = ");

     label03:
        $i1 = virtualinvoke r1.<org.apache.commons.collections.ArrayStack: int size()>();

        staticinvoke <org.apache.commons.collections.MapUtils: void printIndent(java.io.PrintStream,int)>(r0, $i1);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>("{");

        virtualinvoke r1.<org.apache.commons.collections.ArrayStack: java.lang.Object push(java.lang.Object)>(r2);

        $r4 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label13;

        $r11 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = $r14 instanceof java.util.Map;

        if $z1 == 0 goto label07;

        $z2 = virtualinvoke r1.<org.apache.commons.collections.ArrayStack: boolean contains(java.lang.Object)>($r14);

        if $z2 != 0 goto label07;

        if $r13 != null goto label05;

        $r23 = "null";

        goto label06;

     label05:
        $r23 = $r13;

     label06:
        $r22 = (java.util.Map) $r14;

        staticinvoke <org.apache.commons.collections.MapUtils: void verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,org.apache.commons.collections.ArrayStack,boolean)>(r0, $r23, $r22, r1, z0);

        goto label12;

     label07:
        $i3 = virtualinvoke r1.<org.apache.commons.collections.ArrayStack: int size()>();

        staticinvoke <org.apache.commons.collections.MapUtils: void printIndent(java.io.PrintStream,int)>(r0, $i3);

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.Object)>($r13);

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>(" = ");

        $i4 = virtualinvoke r1.<org.apache.commons.collections.ArrayStack: int indexOf(java.lang.Object)>($r14);

        $i12 = (int) -1;

        if $i4 != $i12 goto label08;

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.Object)>($r14);

        goto label10;

     label08:
        $i5 = virtualinvoke r1.<org.apache.commons.collections.ArrayStack: int size()>();

        $i6 = $i5 - 1;

        if $i6 != $i4 goto label09;

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>("(this Map)");

        goto label10;

     label09:
        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(ancestor[");

        $i7 = virtualinvoke r1.<org.apache.commons.collections.ArrayStack: int size()>();

        $i8 = $i7 - 1;

        $i9 = $i8 - $i4;

        $i10 = $i9 - 1;

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i10);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] Map)");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>($r19);

     label10:
        if z0 == 0 goto label11;

        if $r14 == null goto label11;

        virtualinvoke r0.<java.io.PrintStream: void print(char)>(32);

        $r20 = virtualinvoke $r14.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r21);

        goto label12;

     label11:
        virtualinvoke r0.<java.io.PrintStream: void println()>();

     label12:
        goto label04;

     label13:
        virtualinvoke r1.<org.apache.commons.collections.ArrayStack: java.lang.Object pop()>();

        $i2 = virtualinvoke r1.<org.apache.commons.collections.ArrayStack: int size()>();

        staticinvoke <org.apache.commons.collections.MapUtils: void printIndent(java.io.PrintStream,int)>(r0, $i2);

        if z0 == 0 goto label14;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("} ");

        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r24 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label15;

     label14:
        $r24 = "}";

     label15:
        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r24);

        return;
    }

    private static void printIndent(java.io.PrintStream, int)
    {
        int i0, i1;
        java.io.PrintStream r0;

        r0 := @parameter0: java.io.PrintStream;

        i0 := @parameter1: int;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>("    ");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static java.util.Map invertMap(java.util.Map)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.HashMap $r0;
        java.util.Map r1;
        int $i0;
        java.lang.Object $r4, $r6, $r7;
        boolean $z0;

        r1 := @parameter0: java.util.Map;

        $r0 = new java.util.HashMap;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label1;

     label2:
        return $r0;
    }

    public static void safeAddToMap(java.util.Map, java.lang.Object, java.lang.Object) throws java.lang.NullPointerException
    {
        java.lang.Object r0, r2;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.Object;

        if r0 != null goto label1;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, "");

        goto label2;

     label1:
        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r0);

     label2:
        return;
    }

    public static java.util.Map putAll(java.util.Map, java.lang.Object[])
    {
        java.util.Map r0;
        boolean $z0, $z1, $z2;
        org.apache.commons.collections.KeyValue r21;
        java.lang.Object[] r1, $r6, r22;
        java.lang.StringBuffer $r8, $r9, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11;
        java.lang.String $r11;
        java.util.Map$Entry r20;
        java.lang.IllegalArgumentException $r7;
        java.lang.Object r2, $r3, $r4, $r5, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object[];

        interfaceinvoke r0.<java.util.Map: int size()>();

        if r1 == null goto label01;

        $i0 = lengthof r1;

        if $i0 != 0 goto label02;

     label01:
        return r0;

     label02:
        r2 = r1[0];

        $z0 = r2 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label05;

        i7 = 0;

     label03:
        $i6 = lengthof r1;

        if i7 >= $i6 goto label04;

        $r17 = r1[i7];

        r20 = (java.util.Map$Entry) $r17;

        $r18 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r19);

        i7 = i7 + 1;

        goto label03;

     label04:
        goto label15;

     label05:
        $z1 = r2 instanceof org.apache.commons.collections.KeyValue;

        if $z1 == 0 goto label08;

        i8 = 0;

     label06:
        $i5 = lengthof r1;

        if i8 >= $i5 goto label07;

        $r14 = r1[i8];

        r21 = (org.apache.commons.collections.KeyValue) $r14;

        $r15 = interfaceinvoke r21.<org.apache.commons.collections.KeyValue: java.lang.Object getKey()>();

        $r16 = interfaceinvoke r21.<org.apache.commons.collections.KeyValue: java.lang.Object getValue()>();

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16);

        i8 = i8 + 1;

        goto label06;

     label07:
        goto label15;

     label08:
        $z2 = r2 instanceof java.lang.Object[];

        if $z2 == 0 goto label13;

        i9 = 0;

     label09:
        $i3 = lengthof r1;

        if i9 >= $i3 goto label12;

        $r5 = r1[i9];

        $r6 = (java.lang.Object[]) $r5;

        r22 = (java.lang.Object[]) $r6;

        if r22 == null goto label10;

        $i4 = lengthof r22;

        if $i4 >= 2 goto label11;

     label10:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid array element: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label11:
        $r13 = r22[0];

        $r12 = r22[1];

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r12);

        i9 = i9 + 1;

        goto label09;

     label12:
        goto label15;

     label13:
        i10 = 0;

     label14:
        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        if i10 >= $i2 goto label15;

        i11 = i10 + 1;

        $r4 = r1[i10];

        i10 = i11 + 1;

        $r3 = r1[i11];

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        goto label14;

     label15:
        return r0;
    }

    public static boolean isEmpty(java.util.Map)
    {
        java.util.Map r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean isNotEmpty(java.util.Map)
    {
        java.util.Map r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map;

        $z0 = staticinvoke <org.apache.commons.collections.MapUtils: boolean isEmpty(java.util.Map)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static java.util.Map synchronizedMap(java.util.Map)
    {
        java.util.Map r0, $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>(r0);

        return $r1;
    }

    public static java.util.Map unmodifiableMap(java.util.Map)
    {
        java.util.Map r0, $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <org.apache.commons.collections.map.UnmodifiableMap: java.util.Map decorate(java.util.Map)>(r0);

        return $r1;
    }

    public static java.util.Map predicatedMap(java.util.Map, org.apache.commons.collections.Predicate, org.apache.commons.collections.Predicate)
    {
        org.apache.commons.collections.Predicate r1, r2;
        java.util.Map r0, $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.commons.collections.Predicate;

        r2 := @parameter2: org.apache.commons.collections.Predicate;

        $r3 = staticinvoke <org.apache.commons.collections.map.PredicatedMap: java.util.Map decorate(java.util.Map,org.apache.commons.collections.Predicate,org.apache.commons.collections.Predicate)>(r0, r1, r2);

        return $r3;
    }

    public static java.util.Map typedMap(java.util.Map, java.lang.Class, java.lang.Class)
    {
        java.util.Map r0, $r3;
        java.lang.Class r1, r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class;

        $r3 = staticinvoke <org.apache.commons.collections.map.TypedMap: java.util.Map decorate(java.util.Map,java.lang.Class,java.lang.Class)>(r0, r1, r2);

        return $r3;
    }

    public static java.util.Map transformedMap(java.util.Map, org.apache.commons.collections.Transformer, org.apache.commons.collections.Transformer)
    {
        org.apache.commons.collections.Transformer r1, r2;
        java.util.Map r0, $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.commons.collections.Transformer;

        r2 := @parameter2: org.apache.commons.collections.Transformer;

        $r3 = staticinvoke <org.apache.commons.collections.map.TransformedMap: java.util.Map decorate(java.util.Map,org.apache.commons.collections.Transformer,org.apache.commons.collections.Transformer)>(r0, r1, r2);

        return $r3;
    }

    public static java.util.Map fixedSizeMap(java.util.Map)
    {
        java.util.Map r0, $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <org.apache.commons.collections.map.FixedSizeMap: java.util.Map decorate(java.util.Map)>(r0);

        return $r1;
    }

    public static java.util.Map lazyMap(java.util.Map, org.apache.commons.collections.Factory)
    {
        org.apache.commons.collections.Factory r1;
        java.util.Map r0, $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.commons.collections.Factory;

        $r2 = staticinvoke <org.apache.commons.collections.map.LazyMap: java.util.Map decorate(java.util.Map,org.apache.commons.collections.Factory)>(r0, r1);

        return $r2;
    }

    public static java.util.Map lazyMap(java.util.Map, org.apache.commons.collections.Transformer)
    {
        org.apache.commons.collections.Transformer r1;
        java.util.Map r0, $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.commons.collections.Transformer;

        $r2 = staticinvoke <org.apache.commons.collections.map.LazyMap: java.util.Map decorate(java.util.Map,org.apache.commons.collections.Transformer)>(r0, r1);

        return $r2;
    }

    public static java.util.Map orderedMap(java.util.Map)
    {
        org.apache.commons.collections.OrderedMap $r1;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <org.apache.commons.collections.map.ListOrderedMap: org.apache.commons.collections.OrderedMap decorate(java.util.Map)>(r0);

        return $r1;
    }

    public static java.util.Map multiValueMap(java.util.Map)
    {
        org.apache.commons.collections.map.MultiValueMap $r1;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <org.apache.commons.collections.map.MultiValueMap: org.apache.commons.collections.map.MultiValueMap decorate(java.util.Map)>(r0);

        return $r1;
    }

    public static java.util.Map multiValueMap(java.util.Map, java.lang.Class)
    {
        org.apache.commons.collections.map.MultiValueMap $r2;
        java.lang.Class r1;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.apache.commons.collections.map.MultiValueMap: org.apache.commons.collections.map.MultiValueMap decorate(java.util.Map,java.lang.Class)>(r0, r1);

        return $r2;
    }

    public static java.util.Map multiValueMap(java.util.Map, org.apache.commons.collections.Factory)
    {
        org.apache.commons.collections.map.MultiValueMap $r2;
        org.apache.commons.collections.Factory r1;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.commons.collections.Factory;

        $r2 = staticinvoke <org.apache.commons.collections.map.MultiValueMap: org.apache.commons.collections.map.MultiValueMap decorate(java.util.Map,org.apache.commons.collections.Factory)>(r0, r1);

        return $r2;
    }

    public static java.util.Map synchronizedSortedMap(java.util.SortedMap)
    {
        java.util.SortedMap r0, $r1;

        r0 := @parameter0: java.util.SortedMap;

        $r1 = staticinvoke <java.util.Collections: java.util.SortedMap synchronizedSortedMap(java.util.SortedMap)>(r0);

        return $r1;
    }

    public static java.util.Map unmodifiableSortedMap(java.util.SortedMap)
    {
        java.util.SortedMap r0, $r1;

        r0 := @parameter0: java.util.SortedMap;

        $r1 = staticinvoke <org.apache.commons.collections.map.UnmodifiableSortedMap: java.util.SortedMap decorate(java.util.SortedMap)>(r0);

        return $r1;
    }

    public static java.util.SortedMap predicatedSortedMap(java.util.SortedMap, org.apache.commons.collections.Predicate, org.apache.commons.collections.Predicate)
    {
        org.apache.commons.collections.Predicate r1, r2;
        java.util.SortedMap r0, $r3;

        r0 := @parameter0: java.util.SortedMap;

        r1 := @parameter1: org.apache.commons.collections.Predicate;

        r2 := @parameter2: org.apache.commons.collections.Predicate;

        $r3 = staticinvoke <org.apache.commons.collections.map.PredicatedSortedMap: java.util.SortedMap decorate(java.util.SortedMap,org.apache.commons.collections.Predicate,org.apache.commons.collections.Predicate)>(r0, r1, r2);

        return $r3;
    }

    public static java.util.SortedMap typedSortedMap(java.util.SortedMap, java.lang.Class, java.lang.Class)
    {
        java.lang.Class r1, r2;
        java.util.SortedMap r0, $r3;

        r0 := @parameter0: java.util.SortedMap;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class;

        $r3 = staticinvoke <org.apache.commons.collections.map.TypedSortedMap: java.util.SortedMap decorate(java.util.SortedMap,java.lang.Class,java.lang.Class)>(r0, r1, r2);

        return $r3;
    }

    public static java.util.SortedMap transformedSortedMap(java.util.SortedMap, org.apache.commons.collections.Transformer, org.apache.commons.collections.Transformer)
    {
        org.apache.commons.collections.Transformer r1, r2;
        java.util.SortedMap r0, $r3;

        r0 := @parameter0: java.util.SortedMap;

        r1 := @parameter1: org.apache.commons.collections.Transformer;

        r2 := @parameter2: org.apache.commons.collections.Transformer;

        $r3 = staticinvoke <org.apache.commons.collections.map.TransformedSortedMap: java.util.SortedMap decorate(java.util.SortedMap,org.apache.commons.collections.Transformer,org.apache.commons.collections.Transformer)>(r0, r1, r2);

        return $r3;
    }

    public static java.util.SortedMap fixedSizeSortedMap(java.util.SortedMap)
    {
        java.util.SortedMap r0, $r1;

        r0 := @parameter0: java.util.SortedMap;

        $r1 = staticinvoke <org.apache.commons.collections.map.FixedSizeSortedMap: java.util.SortedMap decorate(java.util.SortedMap)>(r0);

        return $r1;
    }

    public static java.util.SortedMap lazySortedMap(java.util.SortedMap, org.apache.commons.collections.Factory)
    {
        org.apache.commons.collections.Factory r1;
        java.util.SortedMap r0, $r2;

        r0 := @parameter0: java.util.SortedMap;

        r1 := @parameter1: org.apache.commons.collections.Factory;

        $r2 = staticinvoke <org.apache.commons.collections.map.LazySortedMap: java.util.SortedMap decorate(java.util.SortedMap,org.apache.commons.collections.Factory)>(r0, r1);

        return $r2;
    }

    public static java.util.SortedMap lazySortedMap(java.util.SortedMap, org.apache.commons.collections.Transformer)
    {
        java.util.SortedMap r0, $r2;
        org.apache.commons.collections.Transformer r1;

        r0 := @parameter0: java.util.SortedMap;

        r1 := @parameter1: org.apache.commons.collections.Transformer;

        $r2 = staticinvoke <org.apache.commons.collections.map.LazySortedMap: java.util.SortedMap decorate(java.util.SortedMap,org.apache.commons.collections.Transformer)>(r0, r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.util.TreeMap $r2;
        java.util.Map $r1;
        java.util.HashMap $r0;
        java.util.SortedMap $r3;

        <org.apache.commons.collections.MapUtils: java.lang.String INDENT_STRING> = "    ";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(1);

        $r1 = staticinvoke <org.apache.commons.collections.map.UnmodifiableMap: java.util.Map decorate(java.util.Map)>($r0);

        <org.apache.commons.collections.MapUtils: java.util.Map EMPTY_MAP> = $r1;

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        $r3 = staticinvoke <org.apache.commons.collections.map.UnmodifiableSortedMap: java.util.SortedMap decorate(java.util.SortedMap)>($r2);

        <org.apache.commons.collections.MapUtils: java.util.SortedMap EMPTY_SORTED_MAP> = $r3;

        return;
    }
}
