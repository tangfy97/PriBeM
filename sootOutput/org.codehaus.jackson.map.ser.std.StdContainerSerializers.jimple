public class org.codehaus.jackson.map.ser.std.StdContainerSerializers extends java.lang.Object
{

    protected void <init>()
    {
        org.codehaus.jackson.map.ser.std.StdContainerSerializers r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.StdContainerSerializers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.codehaus.jackson.map.ser.std.ContainerSerializerBase indexedListSerializer(org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer $r0;
        org.codehaus.jackson.map.JsonSerializer r4;
        org.codehaus.jackson.map.BeanProperty r3;
        boolean z0;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        r4 := @parameter4: org.codehaus.jackson.map.JsonSerializer;

        $r0 = new org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>(r1, z0, r2, r3, r4);

        return $r0;
    }

    public static org.codehaus.jackson.map.ser.std.ContainerSerializerBase collectionSerializer(org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.map.ser.std.CollectionSerializer $r0;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.JsonSerializer r4;
        org.codehaus.jackson.map.BeanProperty r3;
        boolean z0;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        r4 := @parameter4: org.codehaus.jackson.map.JsonSerializer;

        $r0 = new org.codehaus.jackson.map.ser.std.CollectionSerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.std.CollectionSerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>(r1, z0, r2, r3, r4);

        return $r0;
    }

    public static org.codehaus.jackson.map.ser.std.ContainerSerializerBase iteratorSerializer(org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer $r0;
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.BeanProperty r3;
        boolean z0;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r0 = new org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>(r1, z0, r2, r3);

        return $r0;
    }

    public static org.codehaus.jackson.map.ser.std.ContainerSerializerBase iterableSerializer(org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.std.IterableSerializer $r0;
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.BeanProperty r3;
        boolean z0;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r0 = new org.codehaus.jackson.map.ser.std.IterableSerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.std.IterableSerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>(r1, z0, r2, r3);

        return $r0;
    }

    public static org.codehaus.jackson.map.JsonSerializer enumSetSerializer(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.ser.std.EnumSetSerializer $r0;
        org.codehaus.jackson.map.BeanProperty r2;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        r2 := @parameter1: org.codehaus.jackson.map.BeanProperty;

        $r0 = new org.codehaus.jackson.map.ser.std.EnumSetSerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.std.EnumSetSerializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r1, r2);

        return $r0;
    }
}
