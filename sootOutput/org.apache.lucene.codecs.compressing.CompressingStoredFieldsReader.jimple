public final class org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader extends org.apache.lucene.codecs.StoredFieldsReader
{
    private final org.apache.lucene.index.FieldInfos fieldInfos;
    private final org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader indexReader;
    private final org.apache.lucene.store.IndexInput fieldsStream;
    private final int packedIntsVersion;
    private final org.apache.lucene.codecs.compressing.CompressionMode compressionMode;
    private final org.apache.lucene.codecs.compressing.Decompressor decompressor;
    private final org.apache.lucene.util.BytesRef bytes;
    private final int numDocs;
    private boolean closed;
    static final boolean $assertionsDisabled;

    private void <init>(org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader)
    {
        byte[] $r12;
        int $i0, $i1, $i2;
        org.apache.lucene.codecs.compressing.CompressionMode $r7;
        org.apache.lucene.index.FieldInfos $r2;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader r0, r1;
        org.apache.lucene.store.IndexInput $r3, $r4;
        org.apache.lucene.util.BytesRef $r10, $r11;
        org.apache.lucene.codecs.compressing.Decompressor $r8, $r9;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader $r5, $r6;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader;

        r1 := @parameter0: org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader;

        specialinvoke r0.<org.apache.lucene.codecs.StoredFieldsReader: void <init>()>();

        $r2 = r1.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.index.FieldInfos fieldInfos>;

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.index.FieldInfos fieldInfos> = $r2;

        $r3 = r1.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.store.IndexInput: org.apache.lucene.store.IndexInput clone()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream> = $r4;

        $r5 = r1.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader indexReader>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader clone()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader indexReader> = $r6;

        $i0 = r1.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: int packedIntsVersion>;

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: int packedIntsVersion> = $i0;

        $r7 = r1.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.compressing.CompressionMode compressionMode>;

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.compressing.CompressionMode compressionMode> = $r7;

        $r8 = r1.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.compressing.Decompressor decompressor>;

        $r9 = virtualinvoke $r8.<org.apache.lucene.codecs.compressing.Decompressor: org.apache.lucene.codecs.compressing.Decompressor clone()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.compressing.Decompressor decompressor> = $r9;

        $i1 = r1.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: int numDocs>;

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: int numDocs> = $i1;

        $r10 = new org.apache.lucene.util.BytesRef;

        $r11 = r1.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $r12 = $r11.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i2 = lengthof $r12;

        specialinvoke $r10.<org.apache.lucene.util.BytesRef: void <init>(int)>($i2);

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes> = $r10;

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: boolean closed> = 0;

        return;
    }

    public void <init>(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode) throws java.io.IOException
    {
        byte $b5, $b9;
        org.apache.lucene.store.Directory r5;
        java.io.Closeable[] $r26, $r31;
        org.apache.lucene.codecs.compressing.CompressionMode r1;
        org.apache.lucene.index.FieldInfos r4;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader r0;
        org.apache.lucene.store.IOContext r8;
        boolean $z0, $z1;
        org.apache.lucene.util.BytesRef $r25;
        org.apache.lucene.index.SegmentInfo r2;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader $r22;
        java.lang.StringBuilder $r12, $r14, $r15, $r17, $r18, $r19;
        java.lang.Throwable $r30;
        long $l3, $l4, $l7, $l8;
        java.lang.AssertionError $r27, $r29;
        int $i0, $i1, $i2, $i6;
        java.lang.String r3, r6, $r7, $r10, r13, $r16, $r20;
        org.apache.lucene.store.IndexInput $r9, $r11, $r21, $r23, $r28, r32;
        org.apache.lucene.codecs.compressing.Decompressor $r24;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader;

        r5 := @parameter0: org.apache.lucene.store.Directory;

        r2 := @parameter1: org.apache.lucene.index.SegmentInfo;

        r6 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.lucene.index.FieldInfos;

        r8 := @parameter4: org.apache.lucene.store.IOContext;

        r13 := @parameter5: java.lang.String;

        r1 := @parameter6: org.apache.lucene.codecs.compressing.CompressionMode;

        specialinvoke r0.<org.apache.lucene.codecs.StoredFieldsReader: void <init>()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.compressing.CompressionMode compressionMode> = r1;

        r3 = r2.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.index.FieldInfos fieldInfos> = r4;

        $i0 = virtualinvoke r2.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: int numDocs> = $i0;

        r32 = null;

     label1:
        $r7 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>(r3, r6, "fdt");

        $r9 = virtualinvoke r5.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexInput openInput(java.lang.String,org.apache.lucene.store.IOContext)>($r7, r8);

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream> = $r9;

        $r10 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>(r3, r6, "fdx");

        $r11 = virtualinvoke r5.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexInput openInput(java.lang.String,org.apache.lucene.store.IOContext)>($r10, r8);

        r32 = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.lucene.codecs.CodecUtil: int checkHeader(org.apache.lucene.store.DataInput,java.lang.String,int,int)>($r11, $r16, 0, 0);

        $r21 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        staticinvoke <org.apache.lucene.codecs.CodecUtil: int checkHeader(org.apache.lucene.store.DataInput,java.lang.String,int,int)>($r21, $r20, 0, 0);

        $z0 = <org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i6 = staticinvoke <org.apache.lucene.codecs.CodecUtil: int headerLength(java.lang.String)>($r20);

        $l7 = (long) $i6;

        $r28 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $l8 = virtualinvoke $r28.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        $b9 = $l7 cmp $l8;

        if $b9 == 0 goto label2;

        $r29 = new java.lang.AssertionError;

        specialinvoke $r29.<java.lang.AssertionError: void <init>()>();

        throw $r29;

     label2:
        $z1 = <org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $i2 = staticinvoke <org.apache.lucene.codecs.CodecUtil: int headerLength(java.lang.String)>($r16);

        $l3 = (long) $i2;

        $l4 = virtualinvoke $r11.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        $b5 = $l3 cmp $l4;

        if $b5 == 0 goto label3;

        $r27 = new java.lang.AssertionError;

        specialinvoke $r27.<java.lang.AssertionError: void <init>()>();

        throw $r27;

     label3:
        $r22 = new org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader;

        specialinvoke $r22.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader: void <init>(org.apache.lucene.store.IndexInput,org.apache.lucene.index.SegmentInfo)>($r11, r2);

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader indexReader> = $r22;

        r32 = null;

        $r23 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i1 = virtualinvoke $r23.<org.apache.lucene.store.IndexInput: int readVInt()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: int packedIntsVersion> = $i1;

        $r24 = virtualinvoke r1.<org.apache.lucene.codecs.compressing.CompressionMode: org.apache.lucene.codecs.compressing.Decompressor newDecompressor()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.compressing.Decompressor decompressor> = $r24;

        $r25 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r25.<org.apache.lucene.util.BytesRef: void <init>()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes> = $r25;

     label4:
        if 1 != 0 goto label8;

        $r26 = newarray (java.io.Closeable)[2];

        $r26[0] = r0;

        $r26[1] = null;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r26);

        goto label8;

     label5:
        $r30 := @caughtexception;

     label6:
        if 0 != 0 goto label7;

        $r31 = newarray (java.io.Closeable)[2];

        $r31[0] = r0;

        $r31[1] = r32;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r31);

     label7:
        throw $r30;

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void ensureOpen() throws org.apache.lucene.store.AlreadyClosedException
    {
        org.apache.lucene.store.AlreadyClosedException $r1;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader;

        $z0 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new org.apache.lucene.store.AlreadyClosedException;

        specialinvoke $r1.<org.apache.lucene.store.AlreadyClosedException: void <init>(java.lang.String)>("this FieldsReader is closed");

        throw $r1;

     label1:
        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r2;
        java.io.Closeable[] $r1;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader r0;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader;

        $z0 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: boolean closed>;

        if $z0 != 0 goto label1;

        $r1 = newarray (java.io.Closeable)[2];

        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $r1[0] = $r2;

        $r3 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader indexReader>;

        $r1[1] = $r3;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r1);

        r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: boolean closed> = 1;

     label1:
        return;
    }

    private static void readField(org.apache.lucene.store.ByteArrayDataInput, org.apache.lucene.index.StoredFieldVisitor, org.apache.lucene.index.FieldInfo, int) throws java.io.IOException
    {
        byte[] r11, r12;
        org.apache.lucene.index.StoredFieldVisitor r0;
        org.apache.lucene.store.ByteArrayDataInput r2;
        long $l3, $l4;
        java.lang.AssertionError $r5;
        java.nio.charset.Charset $r4;
        int i0, $i1, $i2, $i5, $i6, $i7, $i8;
        java.lang.String $r3, $r8, $r10;
        double $d0;
        org.apache.lucene.index.FieldInfo r1;
        float $f0;
        java.lang.StringBuilder $r6, $r7, $r9;

        r2 := @parameter0: org.apache.lucene.store.ByteArrayDataInput;

        r0 := @parameter1: org.apache.lucene.index.StoredFieldVisitor;

        r1 := @parameter2: org.apache.lucene.index.FieldInfo;

        i0 := @parameter3: int;

        $i1 = <org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter: int TYPE_MASK>;

        $i2 = i0 & $i1;

        tableswitch($i2)
        {
            case 0: goto label2;
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            default: goto label7;
        };

     label1:
        $i7 = virtualinvoke r2.<org.apache.lucene.store.ByteArrayDataInput: int readVInt()>();

        r11 = newarray (byte)[$i7];

        virtualinvoke r2.<org.apache.lucene.store.ByteArrayDataInput: void readBytes(byte[],int,int)>(r11, 0, $i7);

        virtualinvoke r0.<org.apache.lucene.index.StoredFieldVisitor: void binaryField(org.apache.lucene.index.FieldInfo,byte[])>(r1, r11);

        goto label8;

     label2:
        $i8 = virtualinvoke r2.<org.apache.lucene.store.ByteArrayDataInput: int readVInt()>();

        r12 = newarray (byte)[$i8];

        virtualinvoke r2.<org.apache.lucene.store.ByteArrayDataInput: void readBytes(byte[],int,int)>(r12, 0, $i8);

        $r3 = new java.lang.String;

        $r4 = <org.apache.lucene.util.IOUtils: java.nio.charset.Charset CHARSET_UTF_8>;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r12, $r4);

        virtualinvoke r0.<org.apache.lucene.index.StoredFieldVisitor: void stringField(org.apache.lucene.index.FieldInfo,java.lang.String)>(r1, $r3);

        goto label8;

     label3:
        $i6 = virtualinvoke r2.<org.apache.lucene.store.ByteArrayDataInput: int readInt()>();

        virtualinvoke r0.<org.apache.lucene.index.StoredFieldVisitor: void intField(org.apache.lucene.index.FieldInfo,int)>(r1, $i6);

        goto label8;

     label4:
        $i5 = virtualinvoke r2.<org.apache.lucene.store.ByteArrayDataInput: int readInt()>();

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i5);

        virtualinvoke r0.<org.apache.lucene.index.StoredFieldVisitor: void floatField(org.apache.lucene.index.FieldInfo,float)>(r1, $f0);

        goto label8;

     label5:
        $l4 = virtualinvoke r2.<org.apache.lucene.store.ByteArrayDataInput: long readLong()>();

        virtualinvoke r0.<org.apache.lucene.index.StoredFieldVisitor: void longField(org.apache.lucene.index.FieldInfo,long)>(r1, $l4);

        goto label8;

     label6:
        $l3 = virtualinvoke r2.<org.apache.lucene.store.ByteArrayDataInput: long readLong()>();

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l3);

        virtualinvoke r0.<org.apache.lucene.index.StoredFieldVisitor: void doubleField(org.apache.lucene.index.FieldInfo,double)>(r1, $d0);

        goto label8;

     label7:
        $r5 = new java.lang.AssertionError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown type flag: ");

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r5;

     label8:
        return;
    }

    private static void skipField(org.apache.lucene.store.ByteArrayDataInput, int) throws java.io.IOException
    {
        org.apache.lucene.store.ByteArrayDataInput r0;
        java.lang.AssertionError $r1;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @parameter0: org.apache.lucene.store.ByteArrayDataInput;

        i0 := @parameter1: int;

        $i1 = <org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter: int TYPE_MASK>;

        $i2 = i0 & $i1;

        tableswitch($i2)
        {
            case 0: goto label1;
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label3;
            default: goto label4;
        };

     label1:
        $i3 = virtualinvoke r0.<org.apache.lucene.store.ByteArrayDataInput: int readVInt()>();

        virtualinvoke r0.<org.apache.lucene.store.ByteArrayDataInput: void skipBytes(int)>($i3);

        goto label5;

     label2:
        virtualinvoke r0.<org.apache.lucene.store.ByteArrayDataInput: int readInt()>();

        goto label5;

     label3:
        virtualinvoke r0.<org.apache.lucene.store.ByteArrayDataInput: long readLong()>();

        goto label5;

     label4:
        $r1 = new java.lang.AssertionError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown type flag: ");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r1;

     label5:
        return;
    }

    public void visitDocument(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException
    {
        byte[] $r23;
        org.apache.lucene.util.packed.PackedInts$ReaderIterator $r15;
        org.apache.lucene.index.FieldInfos $r36;
        org.apache.lucene.util.packed.PackedInts$Reader $r9;
        java.lang.StringBuilder $r27, $r28, $r29, $r31, $r32, $r34, $r44, $r45, $r46, $r48, $r50, $r55, $r56, $r57, $r59, $r61, $r64, $r65, $r67, $r72, $r73, $r74, $r75, $r76, $r79, $r80, $r81, $r85, $r86, $r87, $r93, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101;
        long $l1, $l8, $l11, $l13, $l14, $l18, $l29, $l31, $l33, $l34, $l53, $l54, $l55, $l56, $l57, $l58;
        org.apache.lucene.store.IndexInput $r2, $r3, $r4, $r5, $r6, $r8, $r11, $r12, $r14, $r17, $r83, $r89, $r90, $r91;
        int[] $r39;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i12, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $i32, i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i59, $i60, $i61, $i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, i72;
        org.apache.lucene.index.StoredFieldVisitor r38;
        org.apache.lucene.index.StoredFieldVisitor$Status $r40;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader $r1;
        java.lang.AssertionError $r26, $r43, $r54, $r63, $r70;
        java.lang.String $r35, $r51, $r62, $r66, $r68, $r77, $r82, $r88, $r102;
        org.apache.lucene.util.packed.PackedInts$Format $r7, $r10, $r13;
        org.apache.lucene.index.FieldInfo $r37;
        org.apache.lucene.store.ByteArrayDataInput $r19;
        org.apache.lucene.index.CorruptIndexException $r71, $r78, $r84, $r92;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.lucene.util.BytesRef $r16, $r20, $r21, $r22, $r24, $r25, $r30, $r33, $r41, $r42, $r47, $r49, $r52, $r53, $r58, $r60, $r69;
        org.apache.lucene.codecs.compressing.Decompressor $r18;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader;

        i0 := @parameter0: int;

        r38 := @parameter1: org.apache.lucene.index.StoredFieldVisitor;

        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader indexReader>;

        $l1 = virtualinvoke $r1.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader: long getStartPointer(int)>(i0);

        virtualinvoke $r2.<org.apache.lucene.store.IndexInput: void seek(long)>($l1);

        $r3 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i2 = virtualinvoke $r3.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $r4 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i3 = virtualinvoke $r4.<org.apache.lucene.store.IndexInput: int readVInt()>();

        if i0 < $i2 goto label01;

        $i4 = $i2 + $i3;

        if i0 >= $i4 goto label01;

        $i6 = $i2 + $i3;

        $i5 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: int numDocs>;

        if $i6 <= $i5 goto label02;

     label01:
        $r92 = new org.apache.lucene.index.CorruptIndexException;

        $r93 = new java.lang.StringBuilder;

        specialinvoke $r93.<java.lang.StringBuilder: void <init>()>();

        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Corrupted: docID=");

        $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", docBase=");

        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", chunkDocs=");

        $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", numDocs=");

        $i62 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: int numDocs>;

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i62);

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r92.<org.apache.lucene.index.CorruptIndexException: void <init>(java.lang.String)>($r102);

        throw $r92;

     label02:
        if $i3 != 1 goto label03;

        $r90 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        i63 = virtualinvoke $r90.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i64 = 0;

        $r91 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i61 = virtualinvoke $r91.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i65 = $i61;

        i66 = $i61;

        goto label13;

     label03:
        $r5 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i7 = virtualinvoke $r5.<org.apache.lucene.store.IndexInput: int readVInt()>();

        if $i7 != 0 goto label04;

        $r89 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        i63 = virtualinvoke $r89.<org.apache.lucene.store.IndexInput: int readVInt()>();

        goto label06;

     label04:
        if $i7 <= 31 goto label05;

        $r84 = new org.apache.lucene.index.CorruptIndexException;

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bitsPerStoredFields=");

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r84.<org.apache.lucene.index.CorruptIndexException: void <init>(java.lang.String)>($r88);

        throw $r84;

     label05:
        $r6 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $l8 = virtualinvoke $r6.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        $r8 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $r7 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $i9 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: int packedIntsVersion>;

        $r9 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Reader getDirectReaderNoHeader(org.apache.lucene.store.IndexInput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>($r8, $r7, $i9, $i3, $i7);

        $i10 = i0 - $i2;

        $l11 = interfaceinvoke $r9.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i10);

        i63 = (int) $l11;

        $r11 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $r10 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $i12 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: int packedIntsVersion>;

        $l13 = virtualinvoke $r10.<org.apache.lucene.util.packed.PackedInts$Format: long byteCount(int,int,int)>($i12, $i3, $i7);

        $l14 = $l8 + $l13;

        virtualinvoke $r11.<org.apache.lucene.store.IndexInput: void seek(long)>($l14);

     label06:
        $r12 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i15 = virtualinvoke $r12.<org.apache.lucene.store.IndexInput: int readVInt()>();

        if $i15 != 0 goto label07;

        $r83 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i59 = virtualinvoke $r83.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i65 = $i59;

        $i60 = i0 - $i2;

        i64 = $i60 * $i59;

        i66 = $i3 * $i59;

        goto label13;

     label07:
        if $i7 <= 31 goto label08;

        $r78 = new org.apache.lucene.index.CorruptIndexException;

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bitsPerLength=");

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r78.<org.apache.lucene.index.CorruptIndexException: void <init>(java.lang.String)>($r82);

        throw $r78;

     label08:
        $r14 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $r13 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $i16 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: int packedIntsVersion>;

        $r15 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$ReaderIterator getReaderIteratorNoHeader(org.apache.lucene.store.DataInput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int,int)>($r14, $r13, $i16, $i3, $i15, 1);

        i67 = 0;

        i68 = 0;

     label09:
        $i17 = i0 - $i2;

        if i68 >= $i17 goto label10;

        $l56 = (long) i67;

        $l57 = interfaceinvoke $r15.<org.apache.lucene.util.packed.PackedInts$ReaderIterator: long next()>();

        $l58 = $l56 + $l57;

        i67 = (int) $l58;

        i68 = i68 + 1;

        goto label09;

     label10:
        i64 = i67;

        $l18 = interfaceinvoke $r15.<org.apache.lucene.util.packed.PackedInts$ReaderIterator: long next()>();

        i65 = (int) $l18;

        i69 = i67 + i65;

        $i19 = i0 - $i2;

        i70 = $i19 + 1;

     label11:
        if i70 >= $i3 goto label12;

        $l53 = (long) i69;

        $l54 = interfaceinvoke $r15.<org.apache.lucene.util.packed.PackedInts$ReaderIterator: long next()>();

        $l55 = $l53 + $l54;

        i69 = (int) $l55;

        i70 = i70 + 1;

        goto label11;

     label12:
        i66 = i69;

     label13:
        if i65 != 0 goto label14;

        $z5 = 1;

        goto label15;

     label14:
        $z5 = 0;

     label15:
        if i63 != 0 goto label16;

        $z6 = 1;

        goto label17;

     label16:
        $z6 = 0;

     label17:
        if $z5 == $z6 goto label18;

        $r71 = new org.apache.lucene.index.CorruptIndexException;

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("length=");

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i65);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", numStoredFields=");

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i63);

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r71.<org.apache.lucene.index.CorruptIndexException: void <init>(java.lang.String)>($r77);

        throw $r71;

     label18:
        if i63 != 0 goto label19;

        return;

     label19:
        $r18 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.compressing.Decompressor decompressor>;

        $r17 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $r16 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        virtualinvoke $r18.<org.apache.lucene.codecs.compressing.Decompressor: void decompress(org.apache.lucene.store.DataInput,int,int,int,org.apache.lucene.util.BytesRef)>($r17, i66, i64, i65, $r16);

        $z0 = <org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label20;

        $r69 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $i52 = $r69.<org.apache.lucene.util.BytesRef: int length>;

        if $i52 == i65 goto label20;

        $r70 = new java.lang.AssertionError;

        specialinvoke $r70.<java.lang.AssertionError: void <init>()>();

        throw $r70;

     label20:
        $r19 = new org.apache.lucene.store.ByteArrayDataInput;

        $r20 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $r23 = $r20.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $r21 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $i21 = $r21.<org.apache.lucene.util.BytesRef: int offset>;

        $r22 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $i20 = $r22.<org.apache.lucene.util.BytesRef: int length>;

        specialinvoke $r19.<org.apache.lucene.store.ByteArrayDataInput: void <init>(byte[],int,int)>($r23, $i21, $i20);

        i71 = 0;

     label21:
        if i71 >= i63 goto label27;

        $l29 = virtualinvoke $r19.<org.apache.lucene.store.ByteArrayDataInput: long readVLong()>();

        $i30 = <org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter: int TYPE_BITS>;

        $l31 = $l29 >>> $i30;

        i72 = (int) $l31;

        $r36 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.index.FieldInfos fieldInfos>;

        $r37 = virtualinvoke $r36.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(int)>(i72);

        $i32 = <org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter: int TYPE_MASK>;

        $l33 = (long) $i32;

        $l34 = $l29 & $l33;

        i35 = (int) $l34;

        $z2 = <org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: boolean $assertionsDisabled>;

        if $z2 != 0 goto label22;

        if i35 <= 5 goto label22;

        $r63 = new java.lang.AssertionError;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bits=");

        $r66 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i35);

        $r67 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r63.<java.lang.AssertionError: void <init>(java.lang.Object)>($r68);

        throw $r63;

     label22:
        $r39 = <org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader$1: int[] $SwitchMap$org$apache$lucene$index$StoredFieldVisitor$Status>;

        $r40 = virtualinvoke r38.<org.apache.lucene.index.StoredFieldVisitor: org.apache.lucene.index.StoredFieldVisitor$Status needsField(org.apache.lucene.index.FieldInfo)>($r37);

        $i36 = virtualinvoke $r40.<org.apache.lucene.index.StoredFieldVisitor$Status: int ordinal()>();

        $i37 = $r39[$i36];

        tableswitch($i37)
        {
            case 1: goto label23;
            case 2: goto label24;
            case 3: goto label25;
            default: goto label26;
        };

     label23:
        staticinvoke <org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: void readField(org.apache.lucene.store.ByteArrayDataInput,org.apache.lucene.index.StoredFieldVisitor,org.apache.lucene.index.FieldInfo,int)>($r19, r38, $r37, i35);

        $z4 = <org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: boolean $assertionsDisabled>;

        if $z4 != 0 goto label26;

        $i45 = virtualinvoke $r19.<org.apache.lucene.store.ByteArrayDataInput: int getPosition()>();

        $r52 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $i47 = $r52.<org.apache.lucene.util.BytesRef: int offset>;

        $r53 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $i46 = $r53.<org.apache.lucene.util.BytesRef: int length>;

        $i48 = $i47 + $i46;

        if $i45 <= $i48 goto label26;

        $r54 = new java.lang.AssertionError;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $i49 = virtualinvoke $r19.<org.apache.lucene.store.ByteArrayDataInput: int getPosition()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i49);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r58 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $i50 = $r58.<org.apache.lucene.util.BytesRef: int offset>;

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i50);

        $r60 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $i51 = $r60.<org.apache.lucene.util.BytesRef: int length>;

        $r61 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i51);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r54.<java.lang.AssertionError: void <init>(java.lang.Object)>($r62);

        throw $r54;

     label24:
        staticinvoke <org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: void skipField(org.apache.lucene.store.ByteArrayDataInput,int)>($r19, i35);

        $z3 = <org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: boolean $assertionsDisabled>;

        if $z3 != 0 goto label26;

        $i38 = virtualinvoke $r19.<org.apache.lucene.store.ByteArrayDataInput: int getPosition()>();

        $r41 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $i40 = $r41.<org.apache.lucene.util.BytesRef: int offset>;

        $r42 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $i39 = $r42.<org.apache.lucene.util.BytesRef: int length>;

        $i41 = $i40 + $i39;

        if $i38 <= $i41 goto label26;

        $r43 = new java.lang.AssertionError;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $i42 = virtualinvoke $r19.<org.apache.lucene.store.ByteArrayDataInput: int getPosition()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i42);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r47 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $i43 = $r47.<org.apache.lucene.util.BytesRef: int offset>;

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i43);

        $r49 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $i44 = $r49.<org.apache.lucene.util.BytesRef: int length>;

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i44);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.AssertionError: void <init>(java.lang.Object)>($r51);

        throw $r43;

     label25:
        return;

     label26:
        i71 = i71 + 1;

        goto label21;

     label27:
        $z1 = <org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label28;

        $i22 = virtualinvoke $r19.<org.apache.lucene.store.ByteArrayDataInput: int getPosition()>();

        $r24 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $i24 = $r24.<org.apache.lucene.util.BytesRef: int offset>;

        $r25 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $i23 = $r25.<org.apache.lucene.util.BytesRef: int length>;

        $i25 = $i24 + $i23;

        if $i22 == $i25 goto label28;

        $r26 = new java.lang.AssertionError;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $i26 = virtualinvoke $r19.<org.apache.lucene.store.ByteArrayDataInput: int getPosition()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r30 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $i27 = $r30.<org.apache.lucene.util.BytesRef: int offset>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i27);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r33 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.util.BytesRef bytes>;

        $i28 = $r33.<org.apache.lucene.util.BytesRef: int length>;

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i28);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>($r35);

        throw $r26;

     label28:
        return;
    }

    public org.apache.lucene.codecs.StoredFieldsReader clone()
    {
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader r0, $r1;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader;

        specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: void ensureOpen()>();

        $r1 = new org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader;

        specialinvoke $r1.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: void <init>(org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader)>(r0);

        return $r1;
    }

    org.apache.lucene.codecs.compressing.CompressionMode getCompressionMode()
    {
        org.apache.lucene.codecs.compressing.CompressionMode $r1;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader r0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.compressing.CompressionMode compressionMode>;

        return $r1;
    }

    org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader$ChunkIterator chunkIterator(int) throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r2;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader$ChunkIterator $r3;
        int i0;
        long $l1;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader r0;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader $r1;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: void ensureOpen()>();

        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader indexReader>;

        $l1 = virtualinvoke $r1.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader: long getStartPointer(int)>(i0);

        virtualinvoke $r2.<org.apache.lucene.store.IndexInput: void seek(long)>($l1);

        $r3 = new org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader$ChunkIterator;

        specialinvoke $r3.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader$ChunkIterator: void <init>(org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader,org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader$1)>(r0, null);

        return $r3;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.codecs.StoredFieldsReader $r1;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader r0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader;

        $r1 = virtualinvoke r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.StoredFieldsReader clone()>();

        return $r1;
    }

    static org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader access$100(org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader)
    {
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader r0;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader $r1;

        r0 := @parameter0: org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader indexReader>;

        return $r1;
    }

    static org.apache.lucene.store.IndexInput access$200(org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader)
    {
        org.apache.lucene.store.IndexInput $r1;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader r0;

        r0 := @parameter0: org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        return $r1;
    }

    static int access$300(org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader)
    {
        int $i0;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader r0;

        r0 := @parameter0: org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader;

        $i0 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: int numDocs>;

        return $i0;
    }

    static int access$400(org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader)
    {
        int $i0;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader r0;

        r0 := @parameter0: org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader;

        $i0 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: int packedIntsVersion>;

        return $i0;
    }

    static org.apache.lucene.codecs.compressing.Decompressor access$500(org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader)
    {
        org.apache.lucene.codecs.compressing.Decompressor $r1;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader r0;

        r0 := @parameter0: org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: org.apache.lucene.codecs.compressing.Decompressor decompressor>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/codecs/compressing/CompressingStoredFieldsReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
