public abstract class org.eclipse.jetty.util.log.AbstractLogger extends java.lang.Object implements org.eclipse.jetty.util.log.Logger
{

    public void <init>()
    {
        org.eclipse.jetty.util.log.AbstractLogger r0;

        r0 := @this: org.eclipse.jetty.util.log.AbstractLogger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final org.eclipse.jetty.util.log.Logger getLogger(java.lang.String)
    {
        java.util.concurrent.ConcurrentMap $r6;
        org.eclipse.jetty.util.log.AbstractLogger r1;
        java.util.Map $r3;
        java.lang.String r0, $r2, $r14;
        boolean $z0, $z1;
        java.lang.Object $r4, $r7;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        org.eclipse.jetty.util.log.Logger $r5, $r8, $r13, r15;

        r1 := @this: org.eclipse.jetty.util.log.AbstractLogger;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.AbstractLogger: boolean isBlank(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.eclipse.jetty.util.log.AbstractLogger: java.lang.String getName()>();

        $z1 = staticinvoke <org.eclipse.jetty.util.log.AbstractLogger: boolean isBlank(java.lang.String)>($r2);

        if $z1 != 0 goto label2;

        $r8 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getRootLogger()>();

        if $r8 != r1 goto label3;

     label2:
        $r14 = r0;

        goto label4;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r3 = staticinvoke <org.eclipse.jetty.util.log.Log: java.util.Map getLoggers()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        $r13 = (org.eclipse.jetty.util.log.Logger) $r4;

        r15 = $r13;

        if $r13 != null goto label5;

        $r5 = virtualinvoke r1.<org.eclipse.jetty.util.log.AbstractLogger: org.eclipse.jetty.util.log.Logger newLogger(java.lang.String)>($r14);

        $r6 = staticinvoke <org.eclipse.jetty.util.log.Log: java.util.concurrent.ConcurrentMap getMutableLoggers()>();

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r14, $r5);

        r15 = (org.eclipse.jetty.util.log.Logger) $r7;

        if r15 != null goto label5;

        r15 = $r5;

     label5:
        return r15;
    }

    protected abstract org.eclipse.jetty.util.log.Logger newLogger(java.lang.String);

    private static boolean isBlank(java.lang.String)
    {
        int $i0, i2;
        char $c1;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 1;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label2:
        if i2 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }
}
