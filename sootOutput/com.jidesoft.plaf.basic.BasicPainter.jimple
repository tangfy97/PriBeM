public class com.jidesoft.plaf.basic.BasicPainter extends java.lang.Object implements javax.swing.SwingConstants, com.jidesoft.plaf.basic.ThemePainter
{
    private static com.jidesoft.plaf.basic.BasicPainter _instance;
    protected java.awt.Color _bk0;
    protected java.awt.Color _bk1;
    protected java.awt.Color _bk2;
    protected java.awt.Color _bk3;
    protected java.awt.Color _borderColor;
    public static int V_GAP;
    public static int H_GAP;
    public static int ARROW_TEXT_GAP;

    public static com.jidesoft.plaf.basic.ThemePainter getInstance()
    {
        com.jidesoft.plaf.basic.BasicPainter $r0, $r1, $r2;

        $r0 = <com.jidesoft.plaf.basic.BasicPainter: com.jidesoft.plaf.basic.BasicPainter _instance>;

        if $r0 != null goto label1;

        $r2 = new com.jidesoft.plaf.basic.BasicPainter;

        specialinvoke $r2.<com.jidesoft.plaf.basic.BasicPainter: void <init>()>();

        <com.jidesoft.plaf.basic.BasicPainter: com.jidesoft.plaf.basic.BasicPainter _instance> = $r2;

     label1:
        $r1 = <com.jidesoft.plaf.basic.BasicPainter: com.jidesoft.plaf.basic.BasicPainter _instance>;

        return $r1;
    }

    public void <init>()
    {
        com.jidesoft.plaf.basic.BasicPainter r0;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void installDefaults()
    {
        java.awt.Color $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        com.jidesoft.plaf.basic.BasicPainter r0;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r1 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk0>;

        if $r1 != null goto label1;

        $r10 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideButton.background");

        r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk0> = $r10;

     label1:
        $r2 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk1>;

        if $r2 != null goto label2;

        $r9 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideButton.focusedBackground");

        r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk1> = $r9;

     label2:
        $r3 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk2>;

        if $r3 != null goto label3;

        $r8 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideButton.selectedBackground");

        r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk2> = $r8;

     label3:
        $r4 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk3>;

        if $r4 != null goto label4;

        $r7 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideButton.selectedAndFocusedBackground");

        r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk3> = $r7;

     label4:
        $r5 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _borderColor>;

        if $r5 != null goto label5;

        $r6 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideButton.borderColor");

        r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _borderColor> = $r6;

     label5:
        return;
    }

    public void uninstallDefaults()
    {
        com.jidesoft.plaf.basic.BasicPainter r0;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _borderColor> = null;

        r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk0> = null;

        r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk1> = null;

        r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk2> = null;

        r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk3> = null;

        return;
    }

    public java.awt.Color getGripperForeground()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("Gripper.foreground");

        return $r0;
    }

    public java.awt.Color getGripperForegroundLt()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideButton.highlight");

        return $r0;
    }

    public java.awt.Color getSeparatorForeground()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideButton.shadow");

        return $r0;
    }

    public java.awt.Color getSeparatorForegroundLt()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideButton.highlight");

        return $r0;
    }

    public java.awt.Color getCollapsiblePaneContentBackground()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("CollapsiblePane.contentBackground");

        return $r0;
    }

    public java.awt.Color getCollapsiblePaneTitleForeground()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("CollapsiblePane.foreground");

        return $r0;
    }

    public java.awt.Color getCollapsiblePaneTitleForegroundEmphasized()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("CollapsiblePane.emphasizedForeground");

        return $r0;
    }

    public java.awt.Color getCollapsiblePaneFocusTitleForegroundEmphasized()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("CollapsiblePane.emphasizedForeground");

        return $r0;
    }

    public java.awt.Color getCollapsiblePaneFocusTitleForeground()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("CollapsiblePane.foreground");

        return $r0;
    }

    public javax.swing.ImageIcon getCollapsiblePaneUpIcon()
    {
        javax.swing.ImageIcon $r1;
        javax.swing.Icon $r0;
        com.jidesoft.plaf.basic.BasicPainter r2;

        r2 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: javax.swing.Icon getIcon(java.lang.Object)>("CollapsiblePane.upIcon");

        $r1 = (javax.swing.ImageIcon) $r0;

        return $r1;
    }

    public javax.swing.ImageIcon getCollapsiblePaneDownIcon()
    {
        javax.swing.ImageIcon $r1;
        javax.swing.Icon $r0;
        com.jidesoft.plaf.basic.BasicPainter r2;

        r2 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: javax.swing.Icon getIcon(java.lang.Object)>("CollapsiblePane.downIcon");

        $r1 = (javax.swing.ImageIcon) $r0;

        return $r1;
    }

    public javax.swing.ImageIcon getCollapsiblePaneUpIconEmphasized()
    {
        javax.swing.ImageIcon $r1;
        com.jidesoft.plaf.basic.BasicPainter r0;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r1 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: javax.swing.ImageIcon getCollapsiblePaneUpIcon()>();

        return $r1;
    }

    public javax.swing.ImageIcon getCollapsiblePaneDownIconEmphasized()
    {
        javax.swing.ImageIcon $r1;
        com.jidesoft.plaf.basic.BasicPainter r0;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r1 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: javax.swing.ImageIcon getCollapsiblePaneDownIcon()>();

        return $r1;
    }

    public javax.swing.ImageIcon getCollapsiblePaneTitleButtonBackground()
    {
        javax.swing.ImageIcon $r1;
        javax.swing.Icon $r0;
        com.jidesoft.plaf.basic.BasicPainter r2;

        r2 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: javax.swing.Icon getIcon(java.lang.Object)>("CollapsiblePane.titleButtonBackground");

        $r1 = (javax.swing.ImageIcon) $r0;

        return $r1;
    }

    public javax.swing.ImageIcon getCollapsiblePaneTitleButtonBackgroundEmphasized()
    {
        javax.swing.ImageIcon $r1;
        javax.swing.Icon $r0;
        com.jidesoft.plaf.basic.BasicPainter r2;

        r2 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: javax.swing.Icon getIcon(java.lang.Object)>("CollapsiblePane.titleButtonBackground.emphasized");

        $r1 = (javax.swing.ImageIcon) $r0;

        return $r1;
    }

    public javax.swing.ImageIcon getCollapsiblePaneUpMask()
    {
        javax.swing.ImageIcon $r1;
        com.jidesoft.plaf.basic.BasicPainter r0;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r1 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: javax.swing.ImageIcon getCollapsiblePaneUpIcon()>();

        return $r1;
    }

    public javax.swing.ImageIcon getCollapsiblePaneDownMask()
    {
        javax.swing.ImageIcon $r1;
        com.jidesoft.plaf.basic.BasicPainter r0;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r1 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: javax.swing.ImageIcon getCollapsiblePaneDownIcon()>();

        return $r1;
    }

    public java.awt.Color getBackgroundDk()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideButton.background");

        return $r0;
    }

    public java.awt.Color getBackgroundLt()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideButton.background");

        return $r0;
    }

    public java.awt.Color getSelectionSelectedDk()
    {
        java.awt.Color $r1;
        com.jidesoft.plaf.basic.BasicPainter r0;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r1 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk2>;

        return $r1;
    }

    public java.awt.Color getSelectionSelectedLt()
    {
        java.awt.Color $r1;
        com.jidesoft.plaf.basic.BasicPainter r0;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r1 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk2>;

        return $r1;
    }

    public java.awt.Color getMenuItemBorderColor()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("MenuItem.selectionBorderColor");

        return $r0;
    }

    public java.awt.Color getMenuItemBackground()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("MenuItem.background");

        return $r0;
    }

    public java.awt.Color getCommandBarTitleBarBackground()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("CommandBar.titleBarBackground");

        return $r0;
    }

    public java.awt.Color getControl()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideButton.background");

        return $r0;
    }

    public java.awt.Color getControlLt()
    {
        java.awt.Color $r1;
        com.jidesoft.plaf.basic.BasicPainter r0;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r1 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color getControlShadow()>();

        return $r1;
    }

    public java.awt.Color getControlDk()
    {
        java.awt.Color $r1;
        com.jidesoft.plaf.basic.BasicPainter r0;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r1 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color getControlShadow()>();

        return $r1;
    }

    public java.awt.Color getControlShadow()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideButton.shadow");

        return $r0;
    }

    public java.awt.Color getTitleBarBackground()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("DockableFrame.activeTitleBackground");

        return $r0;
    }

    public java.awt.Color getDockableFrameTitleBarActiveForeground()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("DockableFrame.activeTitleForeground");

        return $r0;
    }

    public java.awt.Color getDockableFrameTitleBarInactiveForeground()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("DockableFrame.inactiveTitleForeground");

        return $r0;
    }

    public java.awt.Color getTabbedPaneSelectDk()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideTabbedPane.selectedTabBackgroundDk");

        return $r0;
    }

    public java.awt.Color getTabbedPaneSelectLt()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideTabbedPane.selectedTabBackgroundlt");

        return $r0;
    }

    public java.awt.Color getTabAreaBackgroundDk()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideTabbedPane.tabAreaBackgroundDk");

        return $r0;
    }

    public java.awt.Color getTabAreaBackgroundLt()
    {
        java.awt.Color $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideTabbedPane.tabAreaBackgroundLt");

        return $r0;
    }

    public java.awt.Color getOptionPaneBannerForeground()
    {
        javax.swing.plaf.ColorUIResource $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r0.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(255, 255, 255);

        return $r0;
    }

    public java.awt.Color getOptionPaneBannerDk()
    {
        javax.swing.plaf.ColorUIResource $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r0.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(45, 96, 249);

        return $r0;
    }

    public java.awt.Color getOptionPaneBannerLt()
    {
        javax.swing.plaf.ColorUIResource $r0;
        com.jidesoft.plaf.basic.BasicPainter r1;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $r0 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r0.<javax.swing.plaf.ColorUIResource: void <init>(int,int,int)>(0, 52, 206);

        return $r0;
    }

    public void paintSelectedMenu(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r1, $r2;
        java.awt.Graphics r0;
        java.awt.Rectangle r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, i40;
        javax.swing.JComponent r5;
        com.jidesoft.plaf.basic.BasicPainter r4;

        r4 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r5 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i19 := @parameter3: int;

        i40 := @parameter4: int;

        $r1 = virtualinvoke r0.<java.awt.Graphics: java.awt.Color getColor()>();

        $r2 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideButton.darkShadow");

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r2);

        $i6 = r3.<java.awt.Rectangle: int x>;

        $i1 = r3.<java.awt.Rectangle: int y>;

        $i0 = r3.<java.awt.Rectangle: int height>;

        $i5 = $i1 + $i0;

        $i4 = r3.<java.awt.Rectangle: int x>;

        $i2 = r3.<java.awt.Rectangle: int y>;

        $i3 = $i2 + 1;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i6, $i5, $i4, $i3);

        $i8 = r3.<java.awt.Rectangle: int x>;

        $i7 = r3.<java.awt.Rectangle: int width>;

        $i9 = $i8 + $i7;

        $i18 = $i9 - 2;

        $i17 = r3.<java.awt.Rectangle: int y>;

        $i11 = r3.<java.awt.Rectangle: int x>;

        $i10 = r3.<java.awt.Rectangle: int width>;

        $i12 = $i11 + $i10;

        $i16 = $i12 - 2;

        $i14 = r3.<java.awt.Rectangle: int y>;

        $i13 = r3.<java.awt.Rectangle: int height>;

        $i15 = $i14 + $i13;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i18, $i17, $i16, $i15);

        if i19 != 0 goto label1;

        $i39 = r3.<java.awt.Rectangle: int x>;

        $i38 = r3.<java.awt.Rectangle: int y>;

        $i34 = r3.<java.awt.Rectangle: int x>;

        $i33 = r3.<java.awt.Rectangle: int width>;

        $i35 = $i34 + $i33;

        $i37 = $i35 - 3;

        $i36 = r3.<java.awt.Rectangle: int y>;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i39, $i38, $i37, $i36);

        goto label2;

     label1:
        $i32 = r3.<java.awt.Rectangle: int x>;

        $i21 = r3.<java.awt.Rectangle: int y>;

        $i20 = r3.<java.awt.Rectangle: int height>;

        $i22 = $i21 + $i20;

        $i31 = $i22 - 1;

        $i24 = r3.<java.awt.Rectangle: int x>;

        $i23 = r3.<java.awt.Rectangle: int width>;

        $i25 = $i24 + $i23;

        $i30 = $i25 - 3;

        $i27 = r3.<java.awt.Rectangle: int y>;

        $i26 = r3.<java.awt.Rectangle: int height>;

        $i28 = $i27 + $i26;

        $i29 = $i28 - 1;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i32, $i31, $i30, $i29);

     label2:
        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        return;
    }

    public void paintMenuItemBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        javax.swing.JComponent r1;
        java.awt.Rectangle r3;
        com.jidesoft.plaf.basic.BasicPainter r0;
        java.awt.Graphics r2;
        int i0, i1;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r1 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: void paintMenuItemBackground(javax.swing.JComponent,java.awt.Graphics,java.awt.Rectangle,int,int,boolean)>(r1, r2, r3, i0, i1, 1);

        return;
    }

    public void paintMenuItemBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int, boolean)
    {
        javax.swing.JComponent r1;
        java.awt.Rectangle r3;
        com.jidesoft.plaf.basic.BasicPainter r0;
        java.awt.Graphics r2;
        int i0, i1;
        boolean z0;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r1 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        z0 := @parameter5: boolean;

        virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: void paintButtonBackground(javax.swing.JComponent,java.awt.Graphics,java.awt.Rectangle,int,int,boolean)>(r1, r2, r3, i0, i1, z0);

        return;
    }

    public void paintButtonBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        javax.swing.JComponent r1;
        java.awt.Rectangle r3;
        com.jidesoft.plaf.basic.BasicPainter r0;
        java.awt.Graphics r2;
        int i0, i1;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r1 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: void paintButtonBackground(javax.swing.JComponent,java.awt.Graphics,java.awt.Rectangle,int,int,boolean)>(r1, r2, r3, i0, i1, 1);

        return;
    }

    public void paintButtonBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int, boolean)
    {
        java.awt.Color $r5, $r6, $r11, $r12, r13, $r14, $r15, r16, $r17, $r18, $r19, $r20, $r21;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.jidesoft.swing.ComponentStateSupport $r7, $r8, $r9, $r10;
        java.awt.Graphics r3;
        java.awt.Rectangle r4;
        int i0, i1;
        java.lang.Boolean $r1;
        javax.swing.JComponent r2;
        com.jidesoft.plaf.basic.BasicPainter r0;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r2 := @parameter0: javax.swing.JComponent;

        r3 := @parameter1: java.awt.Graphics;

        r4 := @parameter2: java.awt.Rectangle;

        i1 := @parameter3: int;

        i0 := @parameter4: int;

        z3 := @parameter5: boolean;

        virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: void installDefaults()>();

        r13 = null;

        $z0 = staticinvoke <javax.swing.UIManager: boolean getBoolean(java.lang.Object)>("Theme.highContrast");

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z1 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label07;

        $r12 = virtualinvoke r2.<javax.swing.JComponent: java.awt.Color getBackground()>();

        if i0 == 0 goto label01;

        if i0 != 4 goto label02;

     label01:
        $r14 = null;

        goto label03;

     label02:
        $r14 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _borderColor>;

     label03:
        if i0 == 1 goto label04;

        if i0 == 3 goto label04;

        if i0 != 2 goto label05;

     label04:
        $r15 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideButton.selectedBackground");

        goto label06;

     label05:
        $r15 = $r12;

     label06:
        virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: void paintBackground(javax.swing.JComponent,java.awt.Graphics,java.awt.Rectangle,java.awt.Color,java.awt.Color,int)>(r2, r3, r4, $r14, $r15, i1);

        return;

     label07:
        tableswitch(i0)
        {
            case 0: goto label08;
            case 1: goto label31;
            case 2: goto label13;
            case 3: goto label19;
            case 4: goto label37;
            case 5: goto label25;
            default: goto label37;
        };

     label08:
        $r11 = virtualinvoke r2.<javax.swing.JComponent: java.awt.Color getBackground()>();

        r16 = $r11;

        if $r11 == null goto label09;

        $z11 = $r11 instanceof javax.swing.plaf.UIResource;

        if $z11 == 0 goto label10;

     label09:
        r16 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk0>;

     label10:
        if z3 == 0 goto label11;

        $r17 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _borderColor>;

        goto label12;

     label11:
        $r17 = null;

     label12:
        virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: void paintBackground(javax.swing.JComponent,java.awt.Graphics,java.awt.Rectangle,java.awt.Color,java.awt.Color,int)>(r2, r3, r4, $r17, r16, i1);

        goto label37;

     label13:
        $z7 = r2 instanceof com.jidesoft.swing.ComponentStateSupport;

        if $z7 == 0 goto label14;

        $r9 = (com.jidesoft.swing.ComponentStateSupport) r2;

        r13 = interfaceinvoke $r9.<com.jidesoft.swing.ComponentStateSupport: java.awt.Color getBackgroundOfState(int)>(2);

     label14:
        if r13 == null goto label15;

        $z8 = r13 instanceof javax.swing.plaf.UIResource;

        if $z8 == 0 goto label16;

     label15:
        r13 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk1>;

     label16:
        if z3 == 0 goto label17;

        $r18 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _borderColor>;

        goto label18;

     label17:
        $r18 = null;

     label18:
        virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: void paintBackground(javax.swing.JComponent,java.awt.Graphics,java.awt.Rectangle,java.awt.Color,java.awt.Color,int)>(r2, r3, r4, $r18, r13, i1);

        goto label37;

     label19:
        $z5 = r2 instanceof com.jidesoft.swing.ComponentStateSupport;

        if $z5 == 0 goto label20;

        $r8 = (com.jidesoft.swing.ComponentStateSupport) r2;

        r13 = interfaceinvoke $r8.<com.jidesoft.swing.ComponentStateSupport: java.awt.Color getBackgroundOfState(int)>(3);

     label20:
        if r13 == null goto label21;

        $z6 = r13 instanceof javax.swing.plaf.UIResource;

        if $z6 == 0 goto label22;

     label21:
        r13 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk2>;

     label22:
        if z3 == 0 goto label23;

        $r19 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _borderColor>;

        goto label24;

     label23:
        $r19 = null;

     label24:
        virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: void paintBackground(javax.swing.JComponent,java.awt.Graphics,java.awt.Rectangle,java.awt.Color,java.awt.Color,int)>(r2, r3, r4, $r19, r13, i1);

        goto label37;

     label25:
        $z2 = r2 instanceof com.jidesoft.swing.ComponentStateSupport;

        if $z2 == 0 goto label26;

        $r7 = (com.jidesoft.swing.ComponentStateSupport) r2;

        r13 = interfaceinvoke $r7.<com.jidesoft.swing.ComponentStateSupport: java.awt.Color getBackgroundOfState(int)>(3);

     label26:
        if r13 == null goto label27;

        $z4 = r13 instanceof javax.swing.plaf.UIResource;

        if $z4 == 0 goto label28;

     label27:
        r13 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk2>;

     label28:
        if z3 == 0 goto label29;

        $r6 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _borderColor>;

        $r20 = staticinvoke <com.jidesoft.utils.ColorUtils: java.awt.Color toGrayscale(java.awt.Color)>($r6);

        goto label30;

     label29:
        $r20 = null;

     label30:
        $r5 = staticinvoke <com.jidesoft.utils.ColorUtils: java.awt.Color toGrayscale(java.awt.Color)>(r13);

        virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: void paintBackground(javax.swing.JComponent,java.awt.Graphics,java.awt.Rectangle,java.awt.Color,java.awt.Color,int)>(r2, r3, r4, $r20, $r5, i1);

        goto label37;

     label31:
        $z9 = r2 instanceof com.jidesoft.swing.ComponentStateSupport;

        if $z9 == 0 goto label32;

        $r10 = (com.jidesoft.swing.ComponentStateSupport) r2;

        r13 = interfaceinvoke $r10.<com.jidesoft.swing.ComponentStateSupport: java.awt.Color getBackgroundOfState(int)>(1);

     label32:
        if r13 == null goto label33;

        $z10 = r13 instanceof javax.swing.plaf.UIResource;

        if $z10 == 0 goto label34;

     label33:
        r13 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _bk3>;

     label34:
        if z3 == 0 goto label35;

        $r21 = r0.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color _borderColor>;

        goto label36;

     label35:
        $r21 = null;

     label36:
        virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: void paintBackground(javax.swing.JComponent,java.awt.Graphics,java.awt.Rectangle,java.awt.Color,java.awt.Color,int)>(r2, r3, r4, $r21, r13, i1);

     label37:
        return;
    }

    protected void paintBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, java.awt.Color, java.awt.Color, int)
    {
        java.awt.Color $r1, r2, r3;
        java.lang.String $r8, $r9, $r10, $r11;
        com.jidesoft.plaf.basic.BasicPainter r13;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.awt.Graphics r0;
        java.awt.Rectangle r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50;
        java.lang.Boolean $r12;
        javax.swing.JComponent r5;
        java.lang.Object $r6, $r7;

        r13 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r5 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r4 := @parameter2: java.awt.Rectangle;

        r2 := @parameter3: java.awt.Color;

        r3 := @parameter4: java.awt.Color;

        i10 := @parameter5: int;

        $r1 = virtualinvoke r0.<java.awt.Graphics: java.awt.Color getColor()>();

        if r2 == null goto label10;

        z5 = 1;

        $r6 = virtualinvoke r5.<javax.swing.JComponent: java.lang.Object getClientProperty(java.lang.Object)>("JideButton.paintDefaultBorder");

        $z0 = $r6 instanceof java.lang.Boolean;

        if $z0 == 0 goto label01;

        $r12 = (java.lang.Boolean) $r6;

        z5 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

     label01:
        if z5 == 0 goto label09;

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>(r2);

        $r7 = virtualinvoke r5.<javax.swing.JComponent: java.lang.Object getClientProperty(java.lang.Object)>("JButton.segmentPosition");

        if $r7 == null goto label02;

        $r8 = "only";

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label03;

     label02:
        $i9 = r4.<java.awt.Rectangle: int x>;

        $i8 = r4.<java.awt.Rectangle: int y>;

        $i4 = r4.<java.awt.Rectangle: int width>;

        $i7 = $i4 - 1;

        $i5 = r4.<java.awt.Rectangle: int height>;

        $i6 = $i5 - 1;

        virtualinvoke r0.<java.awt.Graphics: void drawRect(int,int,int,int)>($i9, $i8, $i7, $i6);

        goto label09;

     label03:
        $r9 = "first";

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label05;

        if i10 != 0 goto label04;

        $i42 = r4.<java.awt.Rectangle: int x>;

        $i41 = r4.<java.awt.Rectangle: int y>;

        $i40 = r4.<java.awt.Rectangle: int width>;

        $i38 = r4.<java.awt.Rectangle: int height>;

        $i39 = $i38 - 1;

        virtualinvoke r0.<java.awt.Graphics: void drawRect(int,int,int,int)>($i42, $i41, $i40, $i39);

        goto label09;

     label04:
        $i37 = r4.<java.awt.Rectangle: int x>;

        $i36 = r4.<java.awt.Rectangle: int y>;

        $i33 = r4.<java.awt.Rectangle: int width>;

        $i35 = $i33 - 1;

        $i34 = r4.<java.awt.Rectangle: int height>;

        virtualinvoke r0.<java.awt.Graphics: void drawRect(int,int,int,int)>($i37, $i36, $i35, $i34);

        goto label09;

     label05:
        $r10 = "middle";

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label07;

        if i10 != 0 goto label06;

        $i32 = r4.<java.awt.Rectangle: int x>;

        $i31 = r4.<java.awt.Rectangle: int y>;

        $i30 = r4.<java.awt.Rectangle: int width>;

        $i28 = r4.<java.awt.Rectangle: int height>;

        $i29 = $i28 - 1;

        virtualinvoke r0.<java.awt.Graphics: void drawRect(int,int,int,int)>($i32, $i31, $i30, $i29);

        goto label09;

     label06:
        $i27 = r4.<java.awt.Rectangle: int x>;

        $i26 = r4.<java.awt.Rectangle: int y>;

        $i23 = r4.<java.awt.Rectangle: int width>;

        $i25 = $i23 - 1;

        $i24 = r4.<java.awt.Rectangle: int height>;

        virtualinvoke r0.<java.awt.Graphics: void drawRect(int,int,int,int)>($i27, $i26, $i25, $i24);

        goto label09;

     label07:
        $r11 = "last";

        $z4 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z4 == 0 goto label09;

        if i10 != 0 goto label08;

        $i22 = r4.<java.awt.Rectangle: int x>;

        $i21 = r4.<java.awt.Rectangle: int y>;

        $i17 = r4.<java.awt.Rectangle: int width>;

        $i20 = $i17 - 1;

        $i18 = r4.<java.awt.Rectangle: int height>;

        $i19 = $i18 - 1;

        virtualinvoke r0.<java.awt.Graphics: void drawRect(int,int,int,int)>($i22, $i21, $i20, $i19);

        goto label09;

     label08:
        $i16 = r4.<java.awt.Rectangle: int x>;

        $i15 = r4.<java.awt.Rectangle: int y>;

        $i11 = r4.<java.awt.Rectangle: int width>;

        $i14 = $i11 - 1;

        $i12 = r4.<java.awt.Rectangle: int height>;

        $i13 = $i12 - 1;

        virtualinvoke r0.<java.awt.Graphics: void drawRect(int,int,int,int)>($i16, $i15, $i14, $i13);

     label09:
        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>(r3);

        $i43 = r4.<java.awt.Rectangle: int x>;

        $i44 = $i43 + 1;

        $i45 = r4.<java.awt.Rectangle: int y>;

        $i46 = $i45 + 1;

        $i47 = r4.<java.awt.Rectangle: int width>;

        $i48 = $i47 - 2;

        $i49 = r4.<java.awt.Rectangle: int height>;

        $i50 = $i49 - 2;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>($i44, $i46, $i48, $i50);

        goto label11;

     label10:
        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>(r3);

        $i3 = r4.<java.awt.Rectangle: int x>;

        $i2 = r4.<java.awt.Rectangle: int y>;

        $i1 = r4.<java.awt.Rectangle: int width>;

        $i0 = r4.<java.awt.Rectangle: int height>;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>($i3, $i2, $i1, $i0);

     label11:
        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        return;
    }

    public void paintChevronBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        javax.swing.JComponent r1;
        java.awt.Rectangle r3;
        com.jidesoft.plaf.basic.BasicPainter r0;
        int i0, i1;
        java.awt.Graphics r2;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r1 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i1 := @parameter3: int;

        i0 := @parameter4: int;

        if i0 == 0 goto label1;

        virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: void paintButtonBackground(javax.swing.JComponent,java.awt.Graphics,java.awt.Rectangle,int,int)>(r1, r2, r3, i1, i0);

     label1:
        return;
    }

    public void paintDividerBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r1, $r2;
        javax.swing.JComponent r5;
        java.awt.Rectangle r3;
        com.jidesoft.plaf.basic.BasicPainter r4;
        java.awt.Graphics r0;
        int $i0, $i1, i2, i3;

        r4 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r5 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r1 = virtualinvoke r0.<java.awt.Graphics: java.awt.Color getColor()>();

        $r2 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("SplitPane.background");

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r2);

        $i1 = r3.<java.awt.Rectangle: int width>;

        $i0 = r3.<java.awt.Rectangle: int height>;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, $i1, $i0);

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        return;
    }

    public void paintCommandBarBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r1;
        javax.swing.JComponent r4;
        java.awt.Rectangle r2;
        com.jidesoft.plaf.basic.BasicPainter r3;
        java.awt.Graphics r0;
        int $i0, $i1, $i2, $i3, i4, i5;

        r3 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r4 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r2 := @parameter2: java.awt.Rectangle;

        i4 := @parameter3: int;

        i5 := @parameter4: int;

        $r1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("CommandBar.background");

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        $i3 = r2.<java.awt.Rectangle: int x>;

        $i2 = r2.<java.awt.Rectangle: int y>;

        $i1 = r2.<java.awt.Rectangle: int width>;

        $i0 = r2.<java.awt.Rectangle: int height>;

        virtualinvoke r0.<java.awt.Graphics: void fillRoundRect(int,int,int,int,int,int)>($i3, $i2, $i1, $i0, 2, 2);

        return;
    }

    public void paintFloatingCommandBarBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r1;
        javax.swing.JComponent r4;
        java.awt.Rectangle r2;
        com.jidesoft.plaf.basic.BasicPainter r3;
        java.awt.Graphics r0;
        int $i0, $i1, $i2, $i3, i4, i5;

        r3 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r4 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r2 := @parameter2: java.awt.Rectangle;

        i4 := @parameter3: int;

        i5 := @parameter4: int;

        $r1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("CommandBar.background");

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        $i3 = r2.<java.awt.Rectangle: int x>;

        $i2 = r2.<java.awt.Rectangle: int y>;

        $i1 = r2.<java.awt.Rectangle: int width>;

        $i0 = r2.<java.awt.Rectangle: int height>;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>($i3, $i2, $i1, $i0);

        return;
    }

    public void paintMenuShadow(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r1, $r2;
        javax.swing.JComponent r5;
        java.awt.Rectangle r3;
        com.jidesoft.plaf.basic.BasicPainter r4;
        java.awt.Graphics r0;
        int $i0, $i1, $i2, $i3, i4, i5;

        r4 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r5 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i4 := @parameter3: int;

        i5 := @parameter4: int;

        $r1 = virtualinvoke r0.<java.awt.Graphics: java.awt.Color getColor()>();

        $r2 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("MenuItem.shadowColor");

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r2);

        $i3 = r3.<java.awt.Rectangle: int x>;

        $i2 = r3.<java.awt.Rectangle: int y>;

        $i1 = r3.<java.awt.Rectangle: int width>;

        $i0 = r3.<java.awt.Rectangle: int height>;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>($i3, $i2, $i1, $i0);

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        return;
    }

    public void paintContentBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r1;
        javax.swing.JComponent r4;
        java.awt.Rectangle r2;
        com.jidesoft.plaf.basic.BasicPainter r3;
        java.awt.Graphics r0;
        int $i0, $i1, $i2, $i3, i4, i5;

        r3 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r4 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r2 := @parameter2: java.awt.Rectangle;

        i4 := @parameter3: int;

        i5 := @parameter4: int;

        $r1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        $i3 = r2.<java.awt.Rectangle: int x>;

        $i2 = r2.<java.awt.Rectangle: int y>;

        $i1 = r2.<java.awt.Rectangle: int width>;

        $i0 = r2.<java.awt.Rectangle: int height>;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>($i3, $i2, $i1, $i0);

        return;
    }

    public void paintStatusBarBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        javax.swing.JComponent r0;
        java.awt.Rectangle r3;
        com.jidesoft.plaf.basic.BasicPainter r1;
        java.awt.Graphics r2;
        int i0, i1;
        boolean $z0;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r0 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        $z0 = virtualinvoke r0.<javax.swing.JComponent: boolean isOpaque()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<com.jidesoft.plaf.basic.BasicPainter: void paintContentBackground(javax.swing.JComponent,java.awt.Graphics,java.awt.Rectangle,int,int)>(r0, r2, r3, i0, i1);

     label1:
        return;
    }

    public void paintCommandBarTitlePane(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r2;
        javax.swing.JComponent r4;
        java.awt.Rectangle r3;
        com.jidesoft.plaf.basic.BasicPainter r1;
        java.awt.Graphics r0;
        int $i0, $i1, $i2, $i3, i4, i5;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r4 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i4 := @parameter3: int;

        i5 := @parameter4: int;

        $r2 = virtualinvoke r1.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color getCommandBarTitleBarBackground()>();

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r2);

        $i3 = r3.<java.awt.Rectangle: int x>;

        $i2 = r3.<java.awt.Rectangle: int y>;

        $i1 = r3.<java.awt.Rectangle: int width>;

        $i0 = r3.<java.awt.Rectangle: int height>;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>($i3, $i2, $i1, $i0);

        return;
    }

    public void paintGripper(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r2;
        com.jidesoft.plaf.basic.BasicPainter r1;
        java.awt.Graphics r0;
        java.awt.Rectangle r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, i65, i66, i67, i68, i69;
        javax.swing.JComponent r4;

        r1 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r4 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i7 := @parameter3: int;

        i65 := @parameter4: int;

        $r2 = virtualinvoke r1.<com.jidesoft.plaf.basic.BasicPainter: java.awt.Color getGripperForeground()>();

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r2);

        $i1 = r3.<java.awt.Rectangle: int width>;

        $i0 = r3.<java.awt.Rectangle: int height>;

        if $i1 <= $i0 goto label01;

        $i62 = r3.<java.awt.Rectangle: int x>;

        $i60 = r3.<java.awt.Rectangle: int width>;

        $i61 = $i60 / 2;

        $i63 = $i62 + $i61;

        $i64 = $i63 - 10;

        r3.<java.awt.Rectangle: int x> = $i64;

        r3.<java.awt.Rectangle: int width> = 22;

        goto label02;

     label01:
        $i4 = r3.<java.awt.Rectangle: int y>;

        $i2 = r3.<java.awt.Rectangle: int height>;

        $i3 = $i2 / 2;

        $i5 = $i4 + $i3;

        $i6 = $i5 - 10;

        r3.<java.awt.Rectangle: int y> = $i6;

        r3.<java.awt.Rectangle: int height> = 22;

     label02:
        if i7 != 0 goto label08;

        $i23 = r3.<java.awt.Rectangle: int width>;

        if $i23 > 30 goto label05;

        i66 = 0;

     label03:
        $i43 = r3.<java.awt.Rectangle: int height>;

        $i44 = $i43 - 6;

        $i45 = $i44 / 2;

        if i66 >= $i45 goto label04;

        $i46 = r3.<java.awt.Rectangle: int x>;

        $i59 = $i46 + 3;

        $i47 = r3.<java.awt.Rectangle: int y>;

        $i49 = $i47 + 3;

        $i48 = i66 * 2;

        $i58 = $i49 + $i48;

        $i51 = r3.<java.awt.Rectangle: int x>;

        $i50 = r3.<java.awt.Rectangle: int width>;

        $i52 = $i51 + $i50;

        $i57 = $i52 - 3;

        $i53 = r3.<java.awt.Rectangle: int y>;

        $i55 = $i53 + 3;

        $i54 = i66 * 2;

        $i56 = $i55 + $i54;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i59, $i58, $i57, $i56);

        i66 = i66 + 1;

        goto label03;

     label04:
        goto label10;

     label05:
        i67 = 0;

     label06:
        $i24 = r3.<java.awt.Rectangle: int height>;

        $i25 = $i24 - 4;

        $i26 = $i25 / 2;

        if i67 >= $i26 goto label07;

        $i28 = r3.<java.awt.Rectangle: int width>;

        $i27 = r3.<java.awt.Rectangle: int width>;

        $i29 = $i28 - $i27;

        $i42 = $i29 / 2;

        $i30 = r3.<java.awt.Rectangle: int y>;

        $i32 = $i30 + 2;

        $i31 = i67 * 2;

        $i41 = $i32 + $i31;

        $i34 = r3.<java.awt.Rectangle: int width>;

        $i33 = r3.<java.awt.Rectangle: int width>;

        $i35 = $i34 + $i33;

        $i40 = $i35 / 2;

        $i36 = r3.<java.awt.Rectangle: int y>;

        $i38 = $i36 + 2;

        $i37 = i67 * 2;

        $i39 = $i38 + $i37;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i42, $i41, $i40, $i39);

        i67 = i67 + 1;

        goto label06;

     label07:
        goto label10;

     label08:
        $i8 = r3.<java.awt.Rectangle: int width>;

        $i9 = $i8 - 6;

        i68 = $i9 / 2;

        i69 = 0;

     label09:
        if i69 >= i68 goto label10;

        $i12 = r3.<java.awt.Rectangle: int x>;

        $i10 = r3.<java.awt.Rectangle: int width>;

        $i11 = $i10 / 2;

        $i13 = $i12 + $i11;

        $i15 = $i13 - i68;

        $i14 = i69 * 2;

        i16 = $i15 + $i14;

        $i17 = r3.<java.awt.Rectangle: int y>;

        $i22 = $i17 + 3;

        $i19 = r3.<java.awt.Rectangle: int y>;

        $i18 = r3.<java.awt.Rectangle: int height>;

        $i20 = $i19 + $i18;

        $i21 = $i20 - 3;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>(i16, $i22, i16, $i21);

        i69 = i69 + 1;

        goto label09;

     label10:
        return;
    }

    public void paintChevronMore(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r1;
        boolean $z0;
        java.awt.Graphics r0;
        java.awt.Rectangle r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, $i53, $i55, $i57;
        javax.swing.JComponent r3;
        com.jidesoft.plaf.basic.BasicPainter r5;
        java.awt.ComponentOrientation $r4;

        r5 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r3 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r2 := @parameter2: java.awt.Rectangle;

        i0 := @parameter3: int;

        i43 := @parameter4: int;

        $r1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("CommandBar.darkShadow");

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        if i0 != 0 goto label6;

        $r4 = virtualinvoke r3.<javax.swing.JComponent: java.awt.ComponentOrientation getComponentOrientation()>();

        $z0 = virtualinvoke $r4.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z0 != 0 goto label3;

        $i29 = r2.<java.awt.Rectangle: int y>;

        i44 = $i29 + 4;

        $i53 = (int) -2;

        i45 = $i53;

     label1:
        if i45 > 2 goto label2;

        $i30 = staticinvoke <java.lang.Math: int abs(int)>(i45);

        $i31 = r2.<java.awt.Rectangle: int x>;

        $i32 = $i31 + 2;

        $i36 = $i32 + $i30;

        $i33 = r2.<java.awt.Rectangle: int x>;

        $i34 = $i33 + 3;

        $i35 = $i34 + $i30;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i36, i44, $i35, i44);

        $i37 = r2.<java.awt.Rectangle: int x>;

        $i38 = $i37 + 6;

        $i42 = $i38 + $i30;

        $i39 = r2.<java.awt.Rectangle: int x>;

        $i40 = $i39 + 7;

        $i41 = $i40 + $i30;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i42, i44, $i41, i44);

        i44 = i44 + 1;

        i45 = i45 + 1;

        goto label1;

     label2:
        goto label8;

     label3:
        $i15 = r2.<java.awt.Rectangle: int y>;

        i46 = $i15 + 4;

        $i55 = (int) -2;

        i47 = $i55;

     label4:
        if i47 > 2 goto label5;

        $i16 = staticinvoke <java.lang.Math: int abs(int)>(i47);

        i48 = neg $i16;

        $i17 = r2.<java.awt.Rectangle: int x>;

        $i18 = $i17 + 4;

        $i22 = $i18 + i48;

        $i19 = r2.<java.awt.Rectangle: int x>;

        $i20 = $i19 + 5;

        $i21 = $i20 + i48;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i22, i46, $i21, i46);

        $i23 = r2.<java.awt.Rectangle: int x>;

        $i24 = $i23 + 8;

        $i28 = $i24 + i48;

        $i25 = r2.<java.awt.Rectangle: int x>;

        $i26 = $i25 + 9;

        $i27 = $i26 + i48;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i28, i46, $i27, i46);

        i46 = i46 + 1;

        i47 = i47 + 1;

        goto label4;

     label5:
        goto label8;

     label6:
        if i0 != 1 goto label8;

        $i1 = r2.<java.awt.Rectangle: int x>;

        i49 = $i1 + 4;

        $i57 = (int) -2;

        i50 = $i57;

     label7:
        if i50 > 2 goto label8;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>(i50);

        i51 = neg $i2;

        $i3 = r2.<java.awt.Rectangle: int y>;

        $i4 = $i3 + 4;

        $i8 = $i4 + i51;

        $i5 = r2.<java.awt.Rectangle: int y>;

        $i6 = $i5 + 5;

        $i7 = $i6 + i51;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>(i49, $i8, i49, $i7);

        $i9 = r2.<java.awt.Rectangle: int y>;

        $i10 = $i9 + 8;

        $i14 = $i10 + i51;

        $i11 = r2.<java.awt.Rectangle: int y>;

        $i12 = $i11 + 9;

        $i13 = $i12 + i51;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>(i49, $i14, i49, $i13);

        i49 = i49 + 1;

        i50 = i50 + 1;

        goto label7;

     label8:
        return;
    }

    public void paintChevronOption(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r2, $r5;
        java.awt.Rectangle r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11;
        boolean $z0, $z1;
        javax.swing.JComponent r3;
        com.jidesoft.plaf.basic.BasicPainter r7;
        java.awt.ComponentOrientation $r4, $r6;
        java.awt.Graphics r1;

        r7 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r3 := @parameter0: javax.swing.JComponent;

        r1 := @parameter1: java.awt.Graphics;

        r0 := @parameter2: java.awt.Rectangle;

        i0 := @parameter3: int;

        i9 := @parameter4: int;

        if i0 == 0 goto label1;

        $r6 = virtualinvoke r3.<javax.swing.JComponent: java.awt.ComponentOrientation getComponentOrientation()>();

        $z1 = virtualinvoke $r6.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z1 != 0 goto label2;

     label1:
        $i1 = r0.<java.awt.Rectangle: int x>;

        i10 = $i1 + 3;

        $i3 = r0.<java.awt.Rectangle: int y>;

        $i2 = r0.<java.awt.Rectangle: int height>;

        $i4 = $i3 + $i2;

        i11 = $i4 - 7;

        goto label3;

     label2:
        $i6 = r0.<java.awt.Rectangle: int x>;

        $i5 = r0.<java.awt.Rectangle: int width>;

        $i7 = $i6 + $i5;

        i10 = $i7 - 7;

        $i8 = r0.<java.awt.Rectangle: int y>;

        i11 = $i8 + 3;

     label3:
        if i0 == 0 goto label4;

        $r4 = virtualinvoke r3.<javax.swing.JComponent: java.awt.ComponentOrientation getComponentOrientation()>();

        $z0 = virtualinvoke $r4.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z0 != 0 goto label5;

     label4:
        $r2 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("CommandBar.darkShadow");

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void paintArrow(java.awt.Graphics,java.awt.Color,int,int,int,int)>(r1, $r2, i10, i11, 5, 0);

        goto label6;

     label5:
        $r5 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("CommandBar.darkShadow");

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void paintArrow(java.awt.Graphics,java.awt.Color,int,int,int,int)>(r1, $r5, i10, i11, 5, i0);

     label6:
        return;
    }

    public void paintFloatingChevronOption(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r2, $r3;
        javax.swing.JComponent r5;
        java.awt.Rectangle r0;
        com.jidesoft.plaf.basic.BasicPainter r4;
        int $i0, $i1, i2, $i3, $i4, i5, i6, i7;
        java.awt.Graphics r1;

        r4 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r5 := @parameter0: javax.swing.JComponent;

        r1 := @parameter1: java.awt.Graphics;

        r0 := @parameter2: java.awt.Rectangle;

        i7 := @parameter3: int;

        i6 := @parameter4: int;

        $i0 = r0.<java.awt.Rectangle: int width>;

        $i1 = $i0 / 2;

        i2 = $i1 - 4;

        $i3 = r0.<java.awt.Rectangle: int height>;

        $i4 = $i3 / 2;

        i5 = $i4 - 2;

        if i6 != 2 goto label1;

        $r3 = <java.awt.Color: java.awt.Color BLACK>;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void paintArrow(java.awt.Graphics,java.awt.Color,int,int,int,int)>(r1, $r3, i2, i5, 9, i7);

        goto label2;

     label1:
        $r2 = <java.awt.Color: java.awt.Color WHITE>;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void paintArrow(java.awt.Graphics,java.awt.Color,int,int,int,int)>(r1, $r2, i2, i5, 9, i7);

     label2:
        return;
    }

    public void paintDockableFrameBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        javax.swing.JComponent r0;
        java.awt.Color $r2;
        java.awt.Rectangle r3;
        com.jidesoft.plaf.basic.BasicPainter r4;
        java.awt.Graphics r1;
        int $i0, $i1, $i2, $i3, i4, i5;
        boolean $z0;

        r4 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r0 := @parameter0: javax.swing.JComponent;

        r1 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i4 := @parameter3: int;

        i5 := @parameter4: int;

        $z0 = virtualinvoke r0.<javax.swing.JComponent: boolean isOpaque()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("DockableFrame.background");

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r2);

        $i3 = r3.<java.awt.Rectangle: int x>;

        $i2 = r3.<java.awt.Rectangle: int y>;

        $i1 = r3.<java.awt.Rectangle: int width>;

        $i0 = r3.<java.awt.Rectangle: int height>;

        virtualinvoke r1.<java.awt.Graphics: void fillRect(int,int,int,int)>($i3, $i2, $i1, $i0);

        return;
    }

    public void paintDockableFrameTitlePane(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r5, $r6, $r9, $r16;
        javax.swing.border.Border $r1, $r12;
        boolean $z0, $z1, $z2, $z3;
        java.awt.Graphics r4;
        java.awt.Rectangle $r2, r15;
        java.awt.Insets $r13;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i24, i25, i26;
        java.lang.Boolean $r3;
        java.lang.String $r7, $r8, $r10, $r11;
        javax.swing.JComponent r0;
        com.jidesoft.plaf.basic.BasicPainter r14;

        r14 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r0 := @parameter0: javax.swing.JComponent;

        r4 := @parameter1: java.awt.Graphics;

        r15 := @parameter2: java.awt.Rectangle;

        i22 := @parameter3: int;

        i5 := @parameter4: int;

        i23 = r15.<java.awt.Rectangle: int x>;

        i24 = r15.<java.awt.Rectangle: int y>;

        $i0 = r15.<java.awt.Rectangle: int width>;

        i25 = $i0 - 1;

        i26 = r15.<java.awt.Rectangle: int height>;

        $r1 = virtualinvoke r0.<javax.swing.JComponent: javax.swing.border.Border getBorder()>();

        if $r1 == null goto label1;

        $r12 = virtualinvoke r0.<javax.swing.JComponent: javax.swing.border.Border getBorder()>();

        $r13 = interfaceinvoke $r12.<javax.swing.border.Border: java.awt.Insets getBorderInsets(java.awt.Component)>(r0);

        $i14 = $r13.<java.awt.Insets: int left>;

        i23 = i23 + $i14;

        $i15 = $r13.<java.awt.Insets: int top>;

        i24 = i24 + $i15;

        $i17 = $r13.<java.awt.Insets: int right>;

        $i16 = $r13.<java.awt.Insets: int left>;

        $i18 = $i17 + $i16;

        i25 = i25 - $i18;

        $i20 = $r13.<java.awt.Insets: int top>;

        $i19 = $r13.<java.awt.Insets: int bottom>;

        $i21 = $i20 + $i19;

        i26 = i26 - $i21;

     label1:
        $r2 = new java.awt.Rectangle;

        $i4 = i23 + 1;

        $i3 = i24 + 1;

        $i2 = i25 - 1;

        $i1 = i26 - 1;

        specialinvoke $r2.<java.awt.Rectangle: void <init>(int,int,int,int)>($i4, $i3, $i2, $i1);

        $z0 = staticinvoke <javax.swing.UIManager: boolean getBoolean(java.lang.Object)>("Theme.highContrast");

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        if i5 != 3 goto label6;

        $r9 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("DockableFrame.activeTitleBorderColor");

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r9);

        $r10 = "true";

        $r11 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("shadingtheme", "false");

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z2 == 0 goto label2;

        virtualinvoke r4.<java.awt.Graphics: void drawRoundRect(int,int,int,int,int,int)>(i23, i24, i25, i26, 2, 2);

        goto label3;

     label2:
        virtualinvoke r4.<java.awt.Graphics: void drawRect(int,int,int,int)>(i23, i24, i25, i26);

     label3:
        $z3 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        if $z3 == 0 goto label4;

        $r16 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideButton.selectedBackground");

        goto label5;

     label4:
        $r16 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("DockableFrame.activeTitleBackground");

     label5:
        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r16);

        $i13 = $r2.<java.awt.Rectangle: int x>;

        $i12 = $r2.<java.awt.Rectangle: int y>;

        $i11 = $r2.<java.awt.Rectangle: int width>;

        $i10 = $r2.<java.awt.Rectangle: int height>;

        virtualinvoke r4.<java.awt.Graphics: void fillRect(int,int,int,int)>($i13, $i12, $i11, $i10);

        goto label7;

     label6:
        $r5 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("DockableFrame.inactiveTitleBorderColor");

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r5);

        virtualinvoke r4.<java.awt.Graphics: void drawRoundRect(int,int,int,int,int,int)>(i23, i24, i25, i26, 2, 2);

        $r6 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("DockableFrame.inactiveTitleBackground");

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r6);

        $i9 = $r2.<java.awt.Rectangle: int x>;

        $i8 = $r2.<java.awt.Rectangle: int y>;

        $i7 = $r2.<java.awt.Rectangle: int width>;

        $i6 = $r2.<java.awt.Rectangle: int height>;

        virtualinvoke r4.<java.awt.Graphics: void fillRect(int,int,int,int)>($i9, $i8, $i7, $i6);

     label7:
        $r7 = "true";

        $r8 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("shadingtheme", "false");

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label8;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics,java.awt.Rectangle,int)>(r4, $r2, 0);

     label8:
        return;
    }

    public void paintCollapsiblePaneTitlePaneBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r2, $r4, $r6, $r7;
        java.awt.Rectangle r5;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10;
        java.lang.Boolean $r0;
        java.lang.String $r9;
        boolean $z0, $z1, $z2, $z3;
        javax.swing.JComponent r1;
        com.jidesoft.plaf.basic.BasicPainter r8;
        java.awt.Graphics r3;

        r8 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r1 := @parameter0: javax.swing.JComponent;

        r3 := @parameter1: java.awt.Graphics;

        r5 := @parameter2: java.awt.Rectangle;

        i5 := @parameter3: int;

        i6 := @parameter4: int;

        $z0 = staticinvoke <javax.swing.UIManager: boolean getBoolean(java.lang.Object)>("Theme.highContrast");

        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r2 = virtualinvoke r1.<javax.swing.JComponent: java.awt.Color getBackground()>();

        $z1 = $r2 instanceof javax.swing.plaf.UIResource;

        if $z1 != 0 goto label1;

        $r7 = virtualinvoke r1.<javax.swing.JComponent: java.awt.Color getBackground()>();

        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r7);

        goto label4;

     label1:
        $z2 = virtualinvoke $r0.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 == 0 goto label2;

        $r9 = "JideButton.background";

        goto label3;

     label2:
        $r9 = "CollapsiblePane.background";

     label3:
        $r4 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>($r9);

        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r4);

     label4:
        $i7 = r5.<java.awt.Rectangle: int x>;

        $i8 = r5.<java.awt.Rectangle: int y>;

        $i9 = r5.<java.awt.Rectangle: int width>;

        $i10 = r5.<java.awt.Rectangle: int height>;

        virtualinvoke r3.<java.awt.Graphics: void fillRect(int,int,int,int)>($i7, $i8, $i9, $i10);

        $z3 = virtualinvoke $r0.<java.lang.Boolean: boolean booleanValue()>();

        if $z3 == 0 goto label5;

        $r6 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("CollapsiblePane.background");

        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r6);

        $i4 = r5.<java.awt.Rectangle: int x>;

        $i3 = r5.<java.awt.Rectangle: int y>;

        $i0 = r5.<java.awt.Rectangle: int width>;

        $i2 = $i0 - 1;

        $i1 = r5.<java.awt.Rectangle: int height>;

        virtualinvoke r3.<java.awt.Graphics: void drawRect(int,int,int,int)>($i4, $i3, $i2, $i1);

     label5:
        return;
    }

    public void paintCollapsiblePaneTitlePaneBackgroundEmphasized(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        javax.swing.JComponent r0;
        java.awt.Color $r1, $r3, $r5;
        java.awt.Rectangle r4;
        com.jidesoft.plaf.basic.BasicPainter r6;
        java.awt.Graphics r2;
        int $i0, $i1, $i2, $i3, i4, i5;
        boolean $z0;

        r6 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r0 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: java.awt.Graphics;

        r4 := @parameter2: java.awt.Rectangle;

        i4 := @parameter3: int;

        i5 := @parameter4: int;

        $r1 = virtualinvoke r0.<javax.swing.JComponent: java.awt.Color getBackground()>();

        $z0 = $r1 instanceof javax.swing.plaf.UIResource;

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r0.<javax.swing.JComponent: java.awt.Color getBackground()>();

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r5);

        goto label2;

     label1:
        $r3 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("CollapsiblePane.emphasizedBackground");

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r3);

     label2:
        $i3 = r4.<java.awt.Rectangle: int x>;

        $i2 = r4.<java.awt.Rectangle: int y>;

        $i1 = r4.<java.awt.Rectangle: int width>;

        $i0 = r4.<java.awt.Rectangle: int height>;

        virtualinvoke r2.<java.awt.Graphics: void fillRect(int,int,int,int)>($i3, $i2, $i1, $i0);

        return;
    }

    public void paintCollapsiblePanesBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r1, $r3, $r5;
        java.awt.Rectangle r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        boolean $z0, $z1;
        javax.swing.JComponent r0;
        com.jidesoft.plaf.basic.BasicPainter r6;
        java.awt.Graphics r2;

        r6 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r0 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: java.awt.Graphics;

        r4 := @parameter2: java.awt.Rectangle;

        i8 := @parameter3: int;

        i9 := @parameter4: int;

        $z0 = virtualinvoke r0.<javax.swing.JComponent: boolean isOpaque()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<javax.swing.JComponent: java.awt.Color getBackground()>();

        $z1 = $r1 instanceof javax.swing.plaf.UIResource;

        if $z1 != 0 goto label2;

        $r5 = virtualinvoke r0.<javax.swing.JComponent: java.awt.Color getBackground()>();

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r5);

        $i7 = r4.<java.awt.Rectangle: int x>;

        $i6 = r4.<java.awt.Rectangle: int y>;

        $i5 = r4.<java.awt.Rectangle: int width>;

        $i4 = r4.<java.awt.Rectangle: int height>;

        virtualinvoke r2.<java.awt.Graphics: void fillRect(int,int,int,int)>($i7, $i6, $i5, $i4);

        goto label3;

     label2:
        $r3 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("TextField.background");

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r3);

        $i3 = r4.<java.awt.Rectangle: int x>;

        $i2 = r4.<java.awt.Rectangle: int y>;

        $i1 = r4.<java.awt.Rectangle: int width>;

        $i0 = r4.<java.awt.Rectangle: int height>;

        virtualinvoke r2.<java.awt.Graphics: void fillRect(int,int,int,int)>($i3, $i2, $i1, $i0);

     label3:
        return;
    }

    public void paintCollapsiblePaneTitlePaneBackgroundPlainEmphasized(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r1;
        java.awt.Rectangle r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        javax.swing.JComponent r4;
        com.jidesoft.plaf.basic.BasicPainter r3;
        java.awt.Graphics r0;

        r3 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r4 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r2 := @parameter2: java.awt.Rectangle;

        i12 := @parameter3: int;

        i13 := @parameter4: int;

        $r1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("CollapsiblePane.emphasizedBackground");

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        $i11 = r2.<java.awt.Rectangle: int x>;

        $i1 = r2.<java.awt.Rectangle: int y>;

        $i0 = r2.<java.awt.Rectangle: int height>;

        $i2 = $i1 + $i0;

        $i10 = $i2 - 1;

        $i4 = r2.<java.awt.Rectangle: int x>;

        $i3 = r2.<java.awt.Rectangle: int width>;

        $i9 = $i4 + $i3;

        $i6 = r2.<java.awt.Rectangle: int y>;

        $i5 = r2.<java.awt.Rectangle: int height>;

        $i7 = $i6 + $i5;

        $i8 = $i7 - 1;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i11, $i10, $i9, $i8);

        return;
    }

    public void paintCollapsiblePaneTitlePaneBackgroundPlain(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r1, $r3, $r5;
        boolean $z0;
        java.awt.Graphics r2;
        java.awt.Rectangle r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, i39;
        javax.swing.JComponent r0;
        com.jidesoft.plaf.basic.BasicPainter r6;

        r6 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r0 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: java.awt.Graphics;

        r4 := @parameter2: java.awt.Rectangle;

        i0 := @parameter3: int;

        i39 := @parameter4: int;

        $r1 = virtualinvoke r0.<javax.swing.JComponent: java.awt.Color getBackground()>();

        $z0 = $r1 instanceof javax.swing.plaf.UIResource;

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r0.<javax.swing.JComponent: java.awt.Color getBackground()>();

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r5);

        goto label2;

     label1:
        $r3 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("CollapsiblePane.background");

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r3);

     label2:
        tableswitch(i0)
        {
            case 1: goto label5;
            case 2: goto label6;
            case 3: goto label3;
            case 4: goto label6;
            case 5: goto label6;
            case 6: goto label6;
            case 7: goto label4;
            default: goto label6;
        };

     label3:
        $i9 = r4.<java.awt.Rectangle: int x>;

        $i8 = r4.<java.awt.Rectangle: int width>;

        $i10 = $i9 + $i8;

        $i20 = $i10 - 1;

        $i19 = r4.<java.awt.Rectangle: int y>;

        $i12 = r4.<java.awt.Rectangle: int x>;

        $i11 = r4.<java.awt.Rectangle: int width>;

        $i13 = $i12 + $i11;

        $i18 = $i13 - 1;

        $i15 = r4.<java.awt.Rectangle: int y>;

        $i14 = r4.<java.awt.Rectangle: int height>;

        $i16 = $i15 + $i14;

        $i17 = $i16 - 1;

        virtualinvoke r2.<java.awt.Graphics: void drawLine(int,int,int,int)>($i20, $i19, $i18, $i17);

        goto label7;

     label4:
        $i7 = r4.<java.awt.Rectangle: int x>;

        $i6 = r4.<java.awt.Rectangle: int y>;

        $i5 = r4.<java.awt.Rectangle: int x>;

        $i2 = r4.<java.awt.Rectangle: int y>;

        $i1 = r4.<java.awt.Rectangle: int height>;

        $i3 = $i2 + $i1;

        $i4 = $i3 - 1;

        virtualinvoke r2.<java.awt.Graphics: void drawLine(int,int,int,int)>($i7, $i6, $i5, $i4);

        goto label7;

     label5:
        $i26 = r4.<java.awt.Rectangle: int x>;

        $i25 = r4.<java.awt.Rectangle: int y>;

        $i22 = r4.<java.awt.Rectangle: int x>;

        $i21 = r4.<java.awt.Rectangle: int width>;

        $i24 = $i22 + $i21;

        $i23 = r4.<java.awt.Rectangle: int y>;

        virtualinvoke r2.<java.awt.Graphics: void drawLine(int,int,int,int)>($i26, $i25, $i24, $i23);

     label6:
        $i38 = r4.<java.awt.Rectangle: int x>;

        $i28 = r4.<java.awt.Rectangle: int y>;

        $i27 = r4.<java.awt.Rectangle: int height>;

        $i29 = $i28 + $i27;

        $i37 = $i29 - 1;

        $i31 = r4.<java.awt.Rectangle: int x>;

        $i30 = r4.<java.awt.Rectangle: int width>;

        $i36 = $i31 + $i30;

        $i33 = r4.<java.awt.Rectangle: int y>;

        $i32 = r4.<java.awt.Rectangle: int height>;

        $i34 = $i33 + $i32;

        $i35 = $i34 - 1;

        virtualinvoke r2.<java.awt.Graphics: void drawLine(int,int,int,int)>($i38, $i37, $i36, $i35);

     label7:
        return;
    }

    public void paintCollapsiblePaneTitlePaneBackgroundSeparatorEmphasized(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r1;
        javax.swing.JComponent r4;
        java.awt.Rectangle r2;
        com.jidesoft.plaf.basic.BasicPainter r3;
        java.awt.Graphics r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;

        r3 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r4 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r2 := @parameter2: java.awt.Rectangle;

        i6 := @parameter3: int;

        i7 := @parameter4: int;

        $r1 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("CollapsiblePane.emphasizedBackground");

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        $i5 = r2.<java.awt.Rectangle: int x>;

        $i4 = r2.<java.awt.Rectangle: int y>;

        $i1 = r2.<java.awt.Rectangle: int x>;

        $i0 = r2.<java.awt.Rectangle: int width>;

        $i3 = $i1 + $i0;

        $i2 = r2.<java.awt.Rectangle: int height>;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>($i5, $i4, $i3, $i2);

        return;
    }

    public void paintCollapsiblePaneTitlePaneBackgroundSeparator(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r1;
        javax.swing.JComponent r4;
        java.awt.Rectangle r2;
        com.jidesoft.plaf.basic.BasicPainter r3;
        java.awt.Graphics r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;

        r3 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r4 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r2 := @parameter2: java.awt.Rectangle;

        i6 := @parameter3: int;

        i7 := @parameter4: int;

        $r1 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("CollapsiblePane.background");

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        $i5 = r2.<java.awt.Rectangle: int x>;

        $i4 = r2.<java.awt.Rectangle: int y>;

        $i1 = r2.<java.awt.Rectangle: int x>;

        $i0 = r2.<java.awt.Rectangle: int width>;

        $i3 = $i1 + $i0;

        $i2 = r2.<java.awt.Rectangle: int height>;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>($i5, $i4, $i3, $i2);

        return;
    }

    public java.awt.Color getColor(java.lang.Object)
    {
        java.awt.Color $r1;
        java.lang.Object r0;
        com.jidesoft.plaf.basic.BasicPainter r2;

        r2 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>(r0);

        return $r1;
    }

    public void paintTabAreaBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        com.jidesoft.swing.JideTabbedPane r1;
        java.awt.Color $r3, $r5, $r6, $r7;
        java.awt.Rectangle r4;
        int $i0, $i1, i2, i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;
        javax.swing.JComponent r0;
        com.jidesoft.plaf.basic.BasicPainter r8;
        java.awt.Graphics r2;

        r8 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r0 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: java.awt.Graphics;

        r4 := @parameter2: java.awt.Rectangle;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $z0 = virtualinvoke r0.<javax.swing.JComponent: boolean isOpaque()>();

        if $z0 == 0 goto label5;

        $z1 = r0 instanceof com.jidesoft.swing.JideTabbedPane;

        if $z1 == 0 goto label5;

        r1 = (com.jidesoft.swing.JideTabbedPane) r0;

        $i0 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: int getTabShape()>();

        $i1 = virtualinvoke r1.<com.jidesoft.swing.JideTabbedPane: int getColorTheme()>();

        if $i0 != 3 goto label1;

        $r7 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r7);

        goto label4;

     label1:
        if $i1 != 1 goto label2;

        $r6 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r6);

        goto label4;

     label2:
        if $i1 != 3 goto label3;

        $r5 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("JideTabbedPane.tabAreaBackground");

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r5);

        goto label4;

     label3:
        $r3 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r3);

     label4:
        $i4 = r4.<java.awt.Rectangle: int x>;

        $i5 = r4.<java.awt.Rectangle: int y>;

        $i6 = r4.<java.awt.Rectangle: int width>;

        $i7 = r4.<java.awt.Rectangle: int height>;

        virtualinvoke r2.<java.awt.Graphics: void fillRect(int,int,int,int)>($i4, $i5, $i6, $i7);

     label5:
        return;
    }

    public void paintTabBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Shape, java.awt.Color[], int, int)
    {
        java.awt.Color r4, r5;
        javax.swing.JComponent r6;
        java.awt.Shape r7;
        com.jidesoft.swing.JideTabbedPane $r8;
        com.jidesoft.plaf.basic.BasicPainter r9;
        java.awt.Graphics2D r2;
        java.awt.Graphics r0, $r1;
        int i0, i1, i2;
        java.awt.Color[] r3;
        boolean $z0;

        r9 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r6 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r7 := @parameter2: java.awt.Shape;

        r3 := @parameter3: java.awt.Color[];

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        $r1 = virtualinvoke r0.<java.awt.Graphics: java.awt.Graphics create()>();

        r2 = (java.awt.Graphics2D) $r1;

        r4 = r3[0];

        r5 = r3[1];

        if r5 == null goto label6;

        if r4 == null goto label6;

        i2 = 1;

        $z0 = r6 instanceof com.jidesoft.swing.JideTabbedPane;

        if $z0 == 0 goto label1;

        $r8 = (com.jidesoft.swing.JideTabbedPane) r6;

        i2 = virtualinvoke $r8.<com.jidesoft.swing.JideTabbedPane: int getTabPlacement()>();

     label1:
        tableswitch(i2)
        {
            case 1: goto label5;
            case 2: goto label2;
            case 3: goto label4;
            case 4: goto label3;
            default: goto label5;
        };

     label2:
        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r2, r7, r4, r5, 0);

        goto label6;

     label3:
        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r2, r7, r5, r4, 0);

        goto label6;

     label4:
        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r2, r7, r5, r4, 1);

        goto label6;

     label5:
        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r2, r7, r4, r5, 1);

     label6:
        virtualinvoke r2.<java.awt.Graphics2D: void dispose()>();

        return;
    }

    public void paintTabContentBorder(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        javax.swing.JComponent r1;
        java.awt.Rectangle r3;
        com.jidesoft.plaf.basic.BasicPainter r0;
        java.awt.Graphics r2;
        int i0, i1;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r1 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        return;
    }

    public void paintSidePaneItemBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, java.awt.Color[], int, int)
    {
        java.awt.Color r2, $r10, $r11;
        java.awt.Rectangle r4;
        java.awt.Graphics2D $r5, $r6, $r7, $r8;
        int i0, $i1, $i2, i3;
        javax.swing.JComponent r1;
        com.jidesoft.plaf.basic.BasicPainter r9;
        java.awt.Graphics r3;
        java.awt.Color[] r0;

        r9 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r1 := @parameter0: javax.swing.JComponent;

        r3 := @parameter1: java.awt.Graphics;

        r4 := @parameter2: java.awt.Rectangle;

        r0 := @parameter3: java.awt.Color[];

        i0 := @parameter4: int;

        i3 := @parameter5: int;

        if r0 == null goto label1;

        $i2 = lengthof r0;

        if $i2 <= 0 goto label1;

        $r10 = r0[0];

        goto label2;

     label1:
        $r10 = virtualinvoke r1.<javax.swing.JComponent: java.awt.Color getBackground()>();

     label2:
        r2 = $r10;

        if r0 == null goto label3;

        $i1 = lengthof r0;

        if $i1 <= 1 goto label3;

        $r11 = r0[1];

        goto label4;

     label3:
        $r11 = r2;

     label4:
        tableswitch(i0)
        {
            case 1: goto label7;
            case 2: goto label9;
            case 3: goto label6;
            case 4: goto label9;
            case 5: goto label8;
            case 6: goto label9;
            case 7: goto label5;
            default: goto label9;
        };

     label5:
        $r5 = (java.awt.Graphics2D) r3;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>($r5, r4, r2, $r11, 0);

        goto label9;

     label6:
        $r7 = (java.awt.Graphics2D) r3;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>($r7, r4, $r11, r2, 0);

        goto label9;

     label7:
        $r8 = (java.awt.Graphics2D) r3;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>($r8, r4, r2, $r11, 1);

        goto label9;

     label8:
        $r6 = (java.awt.Graphics2D) r3;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>($r6, r4, $r11, r2, 1);

     label9:
        return;
    }

    public void paintHeaderBoxBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r3, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, r17, $r18;
        com.jidesoft.plaf.basic.BasicPainter r16;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, i133;
        java.lang.Boolean $r1;
        java.lang.Object $r2;
        boolean $z0, $z1;
        java.awt.Graphics r4;
        java.awt.Rectangle r5;
        javax.swing.JComponent r0;

        r16 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r0 := @parameter0: javax.swing.JComponent;

        r4 := @parameter1: java.awt.Graphics;

        r5 := @parameter2: java.awt.Rectangle;

        i133 := @parameter3: int;

        i0 := @parameter4: int;

        $r1 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r2 = virtualinvoke r0.<javax.swing.JComponent: java.lang.Object getClientProperty(java.lang.Object)>("HeaderBox.isTableCellEditor");

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean equals(java.lang.Object)>($r2);

        $r3 = virtualinvoke r0.<javax.swing.JComponent: java.awt.Color getBackground()>();

        r17 = $r3;

        $z1 = $r3 instanceof javax.swing.plaf.UIResource;

        if $z1 == 0 goto label1;

        $r15 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("HeaderBox.background");

        r17 = $r15;

        if $r15 != null goto label1;

        r17 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("control");

     label1:
        if i0 == 1 goto label2;

        if i0 == 3 goto label2;

        if i0 != 2 goto label5;

     label2:
        $r18 = staticinvoke <com.jidesoft.utils.ColorUtils: java.awt.Color getDerivedColor(java.awt.Color,float)>(r17, 0.48F);

        if $z0 == 0 goto label3;

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r18);

        $i58 = r5.<java.awt.Rectangle: int x>;

        $i57 = r5.<java.awt.Rectangle: int y>;

        $i56 = r5.<java.awt.Rectangle: int width>;

        $i55 = r5.<java.awt.Rectangle: int height>;

        virtualinvoke r4.<java.awt.Graphics: void fillRect(int,int,int,int)>($i58, $i57, $i56, $i55);

        goto label4;

     label3:
        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r18);

        $i6 = r5.<java.awt.Rectangle: int x>;

        $i5 = r5.<java.awt.Rectangle: int y>;

        $i1 = r5.<java.awt.Rectangle: int width>;

        $i4 = $i1 - 1;

        $i2 = r5.<java.awt.Rectangle: int height>;

        $i3 = $i2 - 1;

        virtualinvoke r4.<java.awt.Graphics: void fillRoundRect(int,int,int,int,int,int)>($i6, $i5, $i4, $i3, 4, 4);

        $r6 = staticinvoke <com.jidesoft.utils.ColorUtils: java.awt.Color getDerivedColor(java.awt.Color,float)>(r17, 0.4F);

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r6);

        $i12 = r5.<java.awt.Rectangle: int x>;

        $i11 = r5.<java.awt.Rectangle: int y>;

        $i7 = r5.<java.awt.Rectangle: int width>;

        $i10 = $i7 - 1;

        $i8 = r5.<java.awt.Rectangle: int height>;

        $i9 = $i8 - 1;

        virtualinvoke r4.<java.awt.Graphics: void drawRoundRect(int,int,int,int,int,int)>($i12, $i11, $i10, $i9, 6, 6);

     label4:
        $r7 = staticinvoke <com.jidesoft.utils.ColorUtils: java.awt.Color getDerivedColor(java.awt.Color,float)>(r17, 0.45F);

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r7);

        $i13 = r5.<java.awt.Rectangle: int x>;

        $i26 = $i13 + 1;

        $i15 = r5.<java.awt.Rectangle: int y>;

        $i14 = r5.<java.awt.Rectangle: int height>;

        $i16 = $i15 + $i14;

        $i25 = $i16 - 3;

        $i18 = r5.<java.awt.Rectangle: int x>;

        $i17 = r5.<java.awt.Rectangle: int width>;

        $i19 = $i18 + $i17;

        $i24 = $i19 - 2;

        $i21 = r5.<java.awt.Rectangle: int y>;

        $i20 = r5.<java.awt.Rectangle: int height>;

        $i22 = $i21 + $i20;

        $i23 = $i22 - 3;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i26, $i25, $i24, $i23);

        $r8 = staticinvoke <com.jidesoft.utils.ColorUtils: java.awt.Color getDerivedColor(java.awt.Color,float)>(r17, 0.43F);

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r8);

        $i27 = r5.<java.awt.Rectangle: int x>;

        $i40 = $i27 + 2;

        $i29 = r5.<java.awt.Rectangle: int y>;

        $i28 = r5.<java.awt.Rectangle: int height>;

        $i30 = $i29 + $i28;

        $i39 = $i30 - 2;

        $i32 = r5.<java.awt.Rectangle: int x>;

        $i31 = r5.<java.awt.Rectangle: int width>;

        $i33 = $i32 + $i31;

        $i38 = $i33 - 3;

        $i35 = r5.<java.awt.Rectangle: int y>;

        $i34 = r5.<java.awt.Rectangle: int height>;

        $i36 = $i35 + $i34;

        $i37 = $i36 - 2;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i40, $i39, $i38, $i37);

        $r9 = staticinvoke <com.jidesoft.utils.ColorUtils: java.awt.Color getDerivedColor(java.awt.Color,float)>(r17, 0.4F);

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r9);

        $i41 = r5.<java.awt.Rectangle: int x>;

        $i54 = $i41 + 3;

        $i43 = r5.<java.awt.Rectangle: int y>;

        $i42 = r5.<java.awt.Rectangle: int height>;

        $i44 = $i43 + $i42;

        $i53 = $i44 - 1;

        $i46 = r5.<java.awt.Rectangle: int x>;

        $i45 = r5.<java.awt.Rectangle: int width>;

        $i47 = $i46 + $i45;

        $i52 = $i47 - 4;

        $i49 = r5.<java.awt.Rectangle: int y>;

        $i48 = r5.<java.awt.Rectangle: int height>;

        $i50 = $i49 + $i48;

        $i51 = $i50 - 1;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i54, $i53, $i52, $i51);

        goto label8;

     label5:
        if $z0 == 0 goto label6;

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>(r17);

        $i132 = r5.<java.awt.Rectangle: int x>;

        $i131 = r5.<java.awt.Rectangle: int y>;

        $i127 = r5.<java.awt.Rectangle: int width>;

        $i130 = $i127 - 1;

        $i128 = r5.<java.awt.Rectangle: int height>;

        $i129 = $i128 - 1;

        virtualinvoke r4.<java.awt.Graphics: void fillRect(int,int,int,int)>($i132, $i131, $i130, $i129);

        goto label7;

     label6:
        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>(r17);

        $i64 = r5.<java.awt.Rectangle: int x>;

        $i63 = r5.<java.awt.Rectangle: int y>;

        $i59 = r5.<java.awt.Rectangle: int width>;

        $i62 = $i59 - 1;

        $i60 = r5.<java.awt.Rectangle: int height>;

        $i61 = $i60 - 1;

        virtualinvoke r4.<java.awt.Graphics: void fillRoundRect(int,int,int,int,int,int)>($i64, $i63, $i62, $i61, 2, 2);

        $r10 = staticinvoke <com.jidesoft.utils.ColorUtils: java.awt.Color getDerivedColor(java.awt.Color,float)>(r17, 0.42F);

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r10);

        $i70 = r5.<java.awt.Rectangle: int x>;

        $i69 = r5.<java.awt.Rectangle: int y>;

        $i65 = r5.<java.awt.Rectangle: int width>;

        $i68 = $i65 - 1;

        $i66 = r5.<java.awt.Rectangle: int height>;

        $i67 = $i66 - 1;

        virtualinvoke r4.<java.awt.Graphics: void drawRoundRect(int,int,int,int,int,int)>($i70, $i69, $i68, $i67, 2, 4);

     label7:
        $r11 = staticinvoke <com.jidesoft.utils.ColorUtils: java.awt.Color getDerivedColor(java.awt.Color,float)>(r17, 0.48F);

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r11);

        $i71 = r5.<java.awt.Rectangle: int x>;

        $i84 = $i71 + 1;

        $i73 = r5.<java.awt.Rectangle: int y>;

        $i72 = r5.<java.awt.Rectangle: int height>;

        $i74 = $i73 + $i72;

        $i83 = $i74 - 3;

        $i76 = r5.<java.awt.Rectangle: int x>;

        $i75 = r5.<java.awt.Rectangle: int width>;

        $i77 = $i76 + $i75;

        $i82 = $i77 - 2;

        $i79 = r5.<java.awt.Rectangle: int y>;

        $i78 = r5.<java.awt.Rectangle: int height>;

        $i80 = $i79 + $i78;

        $i81 = $i80 - 3;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i84, $i83, $i82, $i81);

        $r12 = staticinvoke <com.jidesoft.utils.ColorUtils: java.awt.Color getDerivedColor(java.awt.Color,float)>(r17, 0.47F);

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r12);

        $i85 = r5.<java.awt.Rectangle: int x>;

        $i98 = $i85 + 1;

        $i87 = r5.<java.awt.Rectangle: int y>;

        $i86 = r5.<java.awt.Rectangle: int height>;

        $i88 = $i87 + $i86;

        $i97 = $i88 - 2;

        $i90 = r5.<java.awt.Rectangle: int x>;

        $i89 = r5.<java.awt.Rectangle: int width>;

        $i91 = $i90 + $i89;

        $i96 = $i91 - 2;

        $i93 = r5.<java.awt.Rectangle: int y>;

        $i92 = r5.<java.awt.Rectangle: int height>;

        $i94 = $i93 + $i92;

        $i95 = $i94 - 2;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i98, $i97, $i96, $i95);

        if $z0 == 0 goto label8;

        $r13 = new java.awt.Color;

        specialinvoke $r13.<java.awt.Color: void <init>(int,int,int)>(198, 197, 178);

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r13);

        $i100 = r5.<java.awt.Rectangle: int x>;

        $i99 = r5.<java.awt.Rectangle: int width>;

        $i101 = $i100 + $i99;

        $i112 = $i101 - 3;

        $i102 = r5.<java.awt.Rectangle: int y>;

        $i111 = $i102 + 4;

        $i104 = r5.<java.awt.Rectangle: int x>;

        $i103 = r5.<java.awt.Rectangle: int width>;

        $i105 = $i104 + $i103;

        $i110 = $i105 - 3;

        $i107 = r5.<java.awt.Rectangle: int y>;

        $i106 = r5.<java.awt.Rectangle: int height>;

        $i108 = $i107 + $i106;

        $i109 = $i108 - 7;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i112, $i111, $i110, $i109);

        $r14 = <java.awt.Color: java.awt.Color WHITE>;

        virtualinvoke r4.<java.awt.Graphics: void setColor(java.awt.Color)>($r14);

        $i114 = r5.<java.awt.Rectangle: int x>;

        $i113 = r5.<java.awt.Rectangle: int width>;

        $i115 = $i114 + $i113;

        $i126 = $i115 - 2;

        $i116 = r5.<java.awt.Rectangle: int y>;

        $i125 = $i116 + 4;

        $i118 = r5.<java.awt.Rectangle: int x>;

        $i117 = r5.<java.awt.Rectangle: int width>;

        $i119 = $i118 + $i117;

        $i124 = $i119 - 2;

        $i121 = r5.<java.awt.Rectangle: int y>;

        $i120 = r5.<java.awt.Rectangle: int height>;

        $i122 = $i121 + $i120;

        $i123 = $i122 - 7;

        virtualinvoke r4.<java.awt.Graphics: void drawLine(int,int,int,int)>($i126, $i125, $i124, $i123);

     label8:
        return;
    }

    public void paintToolBarSeparator(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r2, $r4, $r5;
        boolean $z0;
        java.awt.Graphics r1;
        java.awt.Rectangle r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i33;
        javax.swing.JComponent r0;
        com.jidesoft.plaf.basic.BasicPainter r6;

        r6 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r0 := @parameter0: javax.swing.JComponent;

        r1 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i0 := @parameter3: int;

        i33 := @parameter4: int;

        $z0 = virtualinvoke r0.<javax.swing.JComponent: boolean isOpaque()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<javax.swing.JComponent: java.awt.Color getBackground()>();

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r5);

        $i32 = r3.<java.awt.Rectangle: int x>;

        $i31 = r3.<java.awt.Rectangle: int y>;

        $i30 = r3.<java.awt.Rectangle: int width>;

        $i29 = r3.<java.awt.Rectangle: int height>;

        virtualinvoke r1.<java.awt.Graphics: void fillRect(int,int,int,int)>($i32, $i31, $i30, $i29);

     label1:
        if i0 != 0 goto label2;

        $r4 = virtualinvoke r0.<javax.swing.JComponent: java.awt.Color getForeground()>();

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r4);

        $i17 = r3.<java.awt.Rectangle: int x>;

        $i15 = r3.<java.awt.Rectangle: int width>;

        $i16 = $i15 / 2;

        $i28 = $i17 + $i16;

        $i18 = r3.<java.awt.Rectangle: int y>;

        $i27 = $i18 + 1;

        $i21 = r3.<java.awt.Rectangle: int x>;

        $i19 = r3.<java.awt.Rectangle: int width>;

        $i20 = $i19 / 2;

        $i26 = $i21 + $i20;

        $i23 = r3.<java.awt.Rectangle: int y>;

        $i22 = r3.<java.awt.Rectangle: int height>;

        $i24 = $i23 + $i22;

        $i25 = $i24 - 2;

        virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>($i28, $i27, $i26, $i25);

        goto label3;

     label2:
        $r2 = virtualinvoke r0.<javax.swing.JComponent: java.awt.Color getForeground()>();

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r2);

        $i1 = r3.<java.awt.Rectangle: int x>;

        $i14 = $i1 + 1;

        $i4 = r3.<java.awt.Rectangle: int y>;

        $i2 = r3.<java.awt.Rectangle: int height>;

        $i3 = $i2 / 2;

        $i13 = $i4 + $i3;

        $i6 = r3.<java.awt.Rectangle: int x>;

        $i5 = r3.<java.awt.Rectangle: int width>;

        $i7 = $i6 + $i5;

        $i12 = $i7 - 2;

        $i10 = r3.<java.awt.Rectangle: int y>;

        $i8 = r3.<java.awt.Rectangle: int height>;

        $i9 = $i8 / 2;

        $i11 = $i10 + $i9;

        virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>($i14, $i13, $i12, $i11);

     label3:
        return;
    }

    public void paintPopupMenuSeparator(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r0, $r1, $r2;
        java.lang.String $r7, $r8, $r10, $r11;
        com.jidesoft.plaf.basic.BasicPainter r13;
        java.awt.ComponentOrientation $r5;
        boolean $z0, $z1, $z2;
        java.awt.Graphics r3;
        java.awt.Rectangle r6, $r9, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, i47, i48;
        javax.swing.JComponent r4;

        r13 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r4 := @parameter0: javax.swing.JComponent;

        r3 := @parameter1: java.awt.Graphics;

        r6 := @parameter2: java.awt.Rectangle;

        i47 := @parameter3: int;

        i48 := @parameter4: int;

        $i0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: int getInt(java.lang.Object)>("MenuItem.shadowWidth");

        $i1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: int getInt(java.lang.Object)>("MenuItem.textIconGap");

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("MenuItem.shadowColor");

        $r1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("PopupMenuSeparator.foreground");

        $r2 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("PopupMenuSeparator.background");

        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r0);

        $r5 = virtualinvoke r4.<javax.swing.JComponent: java.awt.ComponentOrientation getComponentOrientation()>();

        $z0 = virtualinvoke $r5.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z0 == 0 goto label2;

        $i27 = r6.<java.awt.Rectangle: int height>;

        virtualinvoke r3.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, $i0, $i27);

        $r10 = "true";

        $r11 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("shadingtheme", "false");

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z2 == 0 goto label1;

        $r12 = new java.awt.Rectangle;

        $i46 = r6.<java.awt.Rectangle: int x>;

        $i45 = r6.<java.awt.Rectangle: int y>;

        $i44 = r6.<java.awt.Rectangle: int height>;

        specialinvoke $r12.<java.awt.Rectangle: void <init>(int,int,int,int)>($i46, $i45, $i0, $i44);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillSingleGradient(java.awt.Graphics,java.awt.Rectangle,int,int)>(r3, $r12, 3, 255);

     label1:
        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r2);

        $i28 = r6.<java.awt.Rectangle: int x>;

        $i33 = $i28 + $i0;

        $i32 = r6.<java.awt.Rectangle: int y>;

        $i29 = r6.<java.awt.Rectangle: int width>;

        $i31 = $i29 - $i0;

        $i30 = r6.<java.awt.Rectangle: int height>;

        virtualinvoke r3.<java.awt.Graphics: void fillRect(int,int,int,int)>($i33, $i32, $i31, $i30);

        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        $i34 = r6.<java.awt.Rectangle: int x>;

        $i35 = $i34 + $i0;

        $i43 = $i35 + $i1;

        $i36 = r6.<java.awt.Rectangle: int y>;

        $i42 = $i36 + 1;

        $i38 = r6.<java.awt.Rectangle: int x>;

        $i37 = r6.<java.awt.Rectangle: int width>;

        $i41 = $i38 + $i37;

        $i39 = r6.<java.awt.Rectangle: int y>;

        $i40 = $i39 + 1;

        virtualinvoke r3.<java.awt.Graphics: void drawLine(int,int,int,int)>($i43, $i42, $i41, $i40);

        goto label4;

     label2:
        $i3 = r6.<java.awt.Rectangle: int x>;

        $i2 = r6.<java.awt.Rectangle: int width>;

        $i6 = $i3 + $i2;

        $i5 = r6.<java.awt.Rectangle: int y>;

        $i4 = r6.<java.awt.Rectangle: int height>;

        virtualinvoke r3.<java.awt.Graphics: void fillRect(int,int,int,int)>($i6, $i5, $i0, $i4);

        $r7 = "true";

        $r8 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("shadingtheme", "false");

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label3;

        $r9 = new java.awt.Rectangle;

        $i23 = r6.<java.awt.Rectangle: int x>;

        $i22 = r6.<java.awt.Rectangle: int width>;

        $i24 = $i23 + $i22;

        $i26 = $i24 - $i1;

        $i25 = r6.<java.awt.Rectangle: int y>;

        specialinvoke $r9.<java.awt.Rectangle: void <init>(int,int,int,int)>($i26, $i25, $i0, 2);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillSingleGradient(java.awt.Graphics,java.awt.Rectangle,int,int)>(r3, $r9, 7, 255);

     label3:
        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r2);

        $i11 = r6.<java.awt.Rectangle: int x>;

        $i10 = r6.<java.awt.Rectangle: int y>;

        $i7 = r6.<java.awt.Rectangle: int width>;

        $i9 = $i7 - $i0;

        $i8 = r6.<java.awt.Rectangle: int height>;

        virtualinvoke r3.<java.awt.Graphics: void fillRect(int,int,int,int)>($i11, $i10, $i9, $i8);

        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        $i21 = r6.<java.awt.Rectangle: int x>;

        $i12 = r6.<java.awt.Rectangle: int y>;

        $i20 = $i12 + 1;

        $i14 = r6.<java.awt.Rectangle: int x>;

        $i13 = r6.<java.awt.Rectangle: int width>;

        $i15 = $i14 + $i13;

        $i16 = $i15 - $i0;

        $i19 = $i16 - $i1;

        $i17 = r6.<java.awt.Rectangle: int y>;

        $i18 = $i17 + 1;

        virtualinvoke r3.<java.awt.Graphics: void drawLine(int,int,int,int)>($i21, $i20, $i19, $i18);

     label4:
        return;
    }

    public void paintStatusBarSeparator(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        javax.swing.JComponent r1;
        java.awt.Rectangle r3;
        com.jidesoft.plaf.basic.BasicPainter r0;
        java.awt.Graphics r2;
        int i0, i1;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r1 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        return;
    }

    protected boolean shouldDisplayOnTop()
    {
        com.jidesoft.plaf.basic.BasicPainter r2;
        javax.swing.LookAndFeel $r0, $r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r2 := @this: com.jidesoft.plaf.basic.BasicPainter;

        $z0 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isWindowsVistaAbove()>();

        if $z0 == 0 goto label1;

        $r0 = staticinvoke <javax.swing.UIManager: javax.swing.LookAndFeel getLookAndFeel()>();

        $z1 = $r0 instanceof com.sun.java.swing.plaf.windows.WindowsLookAndFeel;

        if $z1 == 0 goto label1;

        $r1 = staticinvoke <javax.swing.UIManager: javax.swing.LookAndFeel getLookAndFeel()>();

        $z2 = $r1 instanceof com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel;

        if $z2 != 0 goto label1;

        $z3 = staticinvoke <com.jidesoft.plaf.XPUtils: boolean isXPStyleOn()>();

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    public void fillBackground(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int, java.awt.Color)
    {
        java.awt.Color $r1, r2;
        javax.swing.JComponent r5;
        java.awt.Rectangle r3;
        com.jidesoft.plaf.basic.BasicPainter r4;
        java.awt.Graphics r0;
        int $i0, $i1, $i2, $i3, i4, i5;

        r4 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r5 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Rectangle;

        i4 := @parameter3: int;

        i5 := @parameter4: int;

        r2 := @parameter5: java.awt.Color;

        $r1 = virtualinvoke r0.<java.awt.Graphics: java.awt.Color getColor()>();

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>(r2);

        $i3 = r3.<java.awt.Rectangle: int x>;

        $i2 = r3.<java.awt.Rectangle: int y>;

        $i1 = r3.<java.awt.Rectangle: int width>;

        $i0 = r3.<java.awt.Rectangle: int height>;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>($i3, $i2, $i1, $i0);

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        return;
    }

    public java.awt.Insets getSortableTableHeaderColumnCellDecoratorInsets(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int, int, javax.swing.Icon, int, java.awt.Color, boolean)
    {
        java.awt.Color r11;
        boolean $z0, z1;
        java.awt.Font $r5, $r6, $r7, $r8, $r9, r12;
        javax.swing.Icon r1;
        java.awt.Graphics r3;
        float $f0, $f1;
        java.lang.StringBuilder $r14, $r15, $r18;
        java.awt.Rectangle r10;
        java.awt.Insets $r19;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, $i17, $i19;
        java.lang.String $r16;
        javax.swing.JComponent r4;
        com.jidesoft.plaf.basic.BasicPainter r0;
        java.awt.FontMetrics $r17;

        r0 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r4 := @parameter0: javax.swing.JComponent;

        r3 := @parameter1: java.awt.Graphics;

        r10 := @parameter2: java.awt.Rectangle;

        i7 := @parameter3: int;

        i8 := @parameter4: int;

        i9 := @parameter5: int;

        r1 := @parameter6: javax.swing.Icon;

        i2 := @parameter7: int;

        r11 := @parameter8: java.awt.Color;

        z1 := @parameter9: boolean;

        $z0 = virtualinvoke r0.<com.jidesoft.plaf.basic.BasicPainter: boolean shouldDisplayOnTop()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        if r1 != null goto label2;

        $i10 = 0;

        goto label3;

     label2:
        $i10 = interfaceinvoke r1.<javax.swing.Icon: int getIconWidth()>();

     label3:
        i0 = $i10;

        if z1 == 0 goto label7;

        $i19 = (int) -1;

        if i2 == $i19 goto label7;

        if r3 == null goto label4;

        $r8 = virtualinvoke r3.<java.awt.Graphics: java.awt.Font getFont()>();

        $r9 = virtualinvoke r3.<java.awt.Graphics: java.awt.Font getFont()>();

        $i5 = virtualinvoke $r8.<java.awt.Font: int getSize()>();

        $i6 = $i5 - 3;

        $f1 = (float) $i6;

        r12 = virtualinvoke $r9.<java.awt.Font: java.awt.Font deriveFont(int,float)>(0, $f1);

        goto label6;

     label4:
        $r5 = virtualinvoke r4.<javax.swing.JComponent: java.awt.Font getFont()>();

        if $r5 == null goto label5;

        $r6 = virtualinvoke r4.<javax.swing.JComponent: java.awt.Font getFont()>();

        $r7 = virtualinvoke r4.<javax.swing.JComponent: java.awt.Font getFont()>();

        $i3 = virtualinvoke $r7.<java.awt.Font: int getSize()>();

        $i4 = $i3 - 3;

        $f0 = (float) $i4;

        r12 = virtualinvoke $r6.<java.awt.Font: java.awt.Font deriveFont(int,float)>(0, $f0);

        goto label6;

     label5:
        r12 = staticinvoke <java.awt.Font: java.awt.Font getFont(java.lang.String)>("Arial");

     label6:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i11 = i2 + 1;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = virtualinvoke r4.<javax.swing.JComponent: java.awt.FontMetrics getFontMetrics(java.awt.Font)>(r12);

        $i12 = staticinvoke <javax.swing.SwingUtilities: int computeStringWidth(java.awt.FontMetrics,java.lang.String)>($r17, $r16);

        $i13 = <com.jidesoft.plaf.basic.BasicPainter: int ARROW_TEXT_GAP>;

        $i14 = $i13 + $i12;

        $i15 = <com.jidesoft.plaf.basic.BasicPainter: int H_GAP>;

        i16 = $i14 + $i15;

        goto label8;

     label7:
        i16 = <com.jidesoft.plaf.basic.BasicPainter: int H_GAP>;

     label8:
        $i17 = i16 + i0;

        if $i17 != 0 goto label9;

        return null;

     label9:
        $r19 = new java.awt.Insets;

        $i1 = i16 + i0;

        specialinvoke $r19.<java.awt.Insets: void <init>(int,int,int,int)>(0, 0, 0, $i1);

        return $r19;
    }

    public void paintSortableTableHeaderColumn(javax.swing.JComponent, java.awt.Graphics, java.awt.Rectangle, int, int, int, javax.swing.Icon, int, java.awt.Color, boolean)
    {
        java.awt.Color $r35, r36;
        java.lang.StringBuilder $r31, $r32, $r59;
        com.jidesoft.plaf.basic.BasicPainter r4;
        java.awt.ComponentOrientation $r3;
        sun.swing.plaf.synth.SynthIcon $r10, $r11, $r12, $r17, $r18, $r19, $r24, $r25, $r26, $r41, $r42, $r43, $r48, $r49, $r50, $r55, $r56, $r57;
        int i0, i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, i149, i150, i151, $i152, $i153, $i154, $i156;
        javax.swing.plaf.synth.Region $r7, $r8, $r14, $r15, $r21, $r22, $r38, $r39, $r45, $r46, $r52, $r53;
        java.lang.String $r33;
        java.awt.FontMetrics $r34, $r58;
        javax.swing.plaf.synth.SynthContext $r60, $r61, $r62, $r63, $r64, $r65;
        javax.swing.plaf.synth.SynthStyle $r9, $r16, $r23, $r40, $r47, $r54;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.awt.Font $r27, $r28, $r29;
        javax.swing.Icon r0;
        java.awt.Graphics r5;
        float $f0;
        java.awt.Rectangle r1;
        javax.swing.JComponent r2;

        r4 := @this: com.jidesoft.plaf.basic.BasicPainter;

        r2 := @parameter0: javax.swing.JComponent;

        r5 := @parameter1: java.awt.Graphics;

        r1 := @parameter2: java.awt.Rectangle;

        i149 := @parameter3: int;

        i150 := @parameter4: int;

        i151 := @parameter5: int;

        r0 := @parameter6: javax.swing.Icon;

        i57 := @parameter7: int;

        r36 := @parameter8: java.awt.Color;

        z1 := @parameter9: boolean;

        if r0 != null goto label01;

        $i152 = 0;

        goto label02;

     label01:
        $i152 = interfaceinvoke r0.<javax.swing.Icon: int getIconHeight()>();

     label02:
        i0 = $i152;

        if r0 != null goto label03;

        $i153 = 0;

        goto label04;

     label03:
        $i153 = interfaceinvoke r0.<javax.swing.Icon: int getIconWidth()>();

     label04:
        i1 = $i153;

        if r0 != null goto label05;

        $i154 = 0;

        goto label06;

     label05:
        $i2 = r1.<java.awt.Rectangle: int height>;

        $i3 = $i2 - i0;

        $i5 = $i3 / 2;

        $i4 = <com.jidesoft.plaf.basic.BasicPainter: int V_GAP>;

        $i154 = $i5 - $i4;

     label06:
        i6 = $i154;

        $r3 = virtualinvoke r2.<javax.swing.JComponent: java.awt.ComponentOrientation getComponentOrientation()>();

        $z0 = virtualinvoke $r3.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if z1 == 0 goto label16;

        $i156 = (int) -1;

        if i57 == $i156 goto label16;

        $r27 = virtualinvoke r5.<java.awt.Graphics: java.awt.Font getFont()>();

        $r28 = virtualinvoke r5.<java.awt.Graphics: java.awt.Font getFont()>();

        $i58 = virtualinvoke $r27.<java.awt.Font: int getSize()>();

        $i59 = $i58 - 3;

        $f0 = (float) $i59;

        $r29 = virtualinvoke $r28.<java.awt.Font: java.awt.Font deriveFont(int,float)>(0, $f0);

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i60 = i57 + 1;

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i60);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r34 = virtualinvoke r2.<javax.swing.JComponent: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r29);

        $i61 = staticinvoke <javax.swing.SwingUtilities: int computeStringWidth(java.awt.FontMetrics,java.lang.String)>($r34, $r33);

        virtualinvoke r5.<java.awt.Graphics: void setFont(java.awt.Font)>($r29);

        $r35 = virtualinvoke r5.<java.awt.Graphics: java.awt.Color getColor()>();

        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>(r36);

        $i64 = r1.<java.awt.Rectangle: int x>;

        $i62 = r1.<java.awt.Rectangle: int width>;

        $i63 = $i62 / 2;

        $i69 = $i64 + $i63;

        $i65 = <com.jidesoft.plaf.basic.BasicPainter: int ARROW_TEXT_GAP>;

        $i66 = i1 + $i65;

        $i67 = $i66 + $i61;

        $i68 = $i67 / 2;

        i70 = $i69 - $i68;

        $z6 = virtualinvoke r4.<com.jidesoft.plaf.basic.BasicPainter: boolean shouldDisplayOnTop()>();

        if $z6 == 0 goto label07;

        $i140 = <com.jidesoft.plaf.basic.BasicPainter: int ARROW_TEXT_GAP>;

        $i141 = i70 + $i140;

        $i144 = $i141 + i1;

        $i143 = r1.<java.awt.Rectangle: int y>;

        $i142 = <com.jidesoft.plaf.basic.BasicPainter: int V_GAP>;

        $i145 = $i143 + $i142;

        $r58 = virtualinvoke r2.<javax.swing.JComponent: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r29);

        $i146 = virtualinvoke $r58.<java.awt.FontMetrics: int getAscent()>();

        $i147 = $i145 + $i146;

        $i148 = $i147 - 2;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void drawString(javax.swing.JComponent,java.awt.Graphics,java.lang.String,int,int)>(r2, r5, $r33, $i144, $i148);

        goto label09;

     label07:
        if $z0 == 0 goto label08;

        $i130 = r1.<java.awt.Rectangle: int x>;

        $i129 = r1.<java.awt.Rectangle: int width>;

        $i131 = $i130 + $i129;

        $i133 = $i131 - $i61;

        $i132 = <com.jidesoft.plaf.basic.BasicPainter: int H_GAP>;

        $i139 = $i133 - $i132;

        $i134 = r1.<java.awt.Rectangle: int y>;

        $i136 = $i134 + $i154;

        $i135 = i0 / 2;

        $i137 = $i136 + $i135;

        $i138 = $i137 + 1;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void drawString(javax.swing.JComponent,java.awt.Graphics,java.lang.String,int,int)>(r2, r5, $r33, $i139, $i138);

        goto label09;

     label08:
        $i72 = r1.<java.awt.Rectangle: int x>;

        $i71 = <com.jidesoft.plaf.basic.BasicPainter: int H_GAP>;

        $i78 = $i72 + $i71;

        $i73 = r1.<java.awt.Rectangle: int y>;

        $i75 = $i73 + $i154;

        $i74 = i0 / 2;

        $i76 = $i75 + $i74;

        $i77 = $i76 + 1;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void drawString(javax.swing.JComponent,java.awt.Graphics,java.lang.String,int,int)>(r2, r5, $r33, $i78, $i77);

     label09:
        virtualinvoke r5.<java.awt.Graphics: void setColor(java.awt.Color)>($r35);

        virtualinvoke r5.<java.awt.Graphics: void setFont(java.awt.Font)>($r27);

        if r0 == null goto label15;

        $z7 = virtualinvoke r4.<com.jidesoft.plaf.basic.BasicPainter: boolean shouldDisplayOnTop()>();

        if $z7 == 0 goto label11;

        $z10 = r0 instanceof sun.swing.plaf.synth.SynthIcon;

        if $z10 == 0 goto label10;

        $r60 = new javax.swing.plaf.synth.SynthContext;

        $r53 = <javax.swing.plaf.synth.Region: javax.swing.plaf.synth.Region TABLE_HEADER>;

        $r52 = <javax.swing.plaf.synth.Region: javax.swing.plaf.synth.Region TABLE_HEADER>;

        $r54 = staticinvoke <javax.swing.plaf.synth.SynthLookAndFeel: javax.swing.plaf.synth.SynthStyle getStyle(javax.swing.JComponent,javax.swing.plaf.synth.Region)>(r2, $r52);

        specialinvoke $r60.<javax.swing.plaf.synth.SynthContext: void <init>(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)>(r2, $r53, $r54, 0);

        $r56 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i125 = r1.<java.awt.Rectangle: int y>;

        $i124 = <com.jidesoft.plaf.basic.BasicPainter: int V_GAP>;

        $i126 = $i125 + $i124;

        $r55 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i127 = virtualinvoke $r55.<sun.swing.plaf.synth.SynthIcon: int getIconWidth(javax.swing.plaf.synth.SynthContext)>($r60);

        $r57 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i128 = virtualinvoke $r57.<sun.swing.plaf.synth.SynthIcon: int getIconHeight(javax.swing.plaf.synth.SynthContext)>($r60);

        virtualinvoke $r56.<sun.swing.plaf.synth.SynthIcon: void paintIcon(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)>($r60, r5, i70, $i126, $i127, $i128);

        goto label15;

     label10:
        $i122 = r1.<java.awt.Rectangle: int y>;

        $i121 = <com.jidesoft.plaf.basic.BasicPainter: int V_GAP>;

        $i123 = $i122 + $i121;

        interfaceinvoke r0.<javax.swing.Icon: void paintIcon(java.awt.Component,java.awt.Graphics,int,int)>(r2, r5, i70, $i123);

        goto label15;

     label11:
        if $z0 == 0 goto label13;

        $z9 = r0 instanceof sun.swing.plaf.synth.SynthIcon;

        if $z9 == 0 goto label12;

        $r61 = new javax.swing.plaf.synth.SynthContext;

        $r46 = <javax.swing.plaf.synth.Region: javax.swing.plaf.synth.Region TABLE_HEADER>;

        $r45 = <javax.swing.plaf.synth.Region: javax.swing.plaf.synth.Region TABLE_HEADER>;

        $r47 = staticinvoke <javax.swing.plaf.synth.SynthLookAndFeel: javax.swing.plaf.synth.SynthStyle getStyle(javax.swing.JComponent,javax.swing.plaf.synth.Region)>(r2, $r45);

        specialinvoke $r61.<javax.swing.plaf.synth.SynthContext: void <init>(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)>(r2, $r46, $r47, 0);

        $r49 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i109 = r1.<java.awt.Rectangle: int x>;

        $i108 = r1.<java.awt.Rectangle: int width>;

        $i110 = $i109 + $i108;

        $i111 = $i110 - i1;

        $i113 = $i111 - $i61;

        $i112 = <com.jidesoft.plaf.basic.BasicPainter: int H_GAP>;

        $i115 = $i113 - $i112;

        $i114 = <com.jidesoft.plaf.basic.BasicPainter: int ARROW_TEXT_GAP>;

        $i117 = $i115 - $i114;

        $i116 = r1.<java.awt.Rectangle: int y>;

        $i118 = $i116 + i6;

        $r48 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i119 = virtualinvoke $r48.<sun.swing.plaf.synth.SynthIcon: int getIconWidth(javax.swing.plaf.synth.SynthContext)>($r61);

        $r50 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i120 = virtualinvoke $r50.<sun.swing.plaf.synth.SynthIcon: int getIconHeight(javax.swing.plaf.synth.SynthContext)>($r61);

        virtualinvoke $r49.<sun.swing.plaf.synth.SynthIcon: void paintIcon(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)>($r61, r5, $i117, $i118, $i119, $i120);

        goto label15;

     label12:
        $i98 = r1.<java.awt.Rectangle: int x>;

        $i97 = r1.<java.awt.Rectangle: int width>;

        $i99 = $i98 + $i97;

        $i100 = $i99 - i1;

        $i102 = $i100 - $i61;

        $i101 = <com.jidesoft.plaf.basic.BasicPainter: int H_GAP>;

        $i104 = $i102 - $i101;

        $i103 = <com.jidesoft.plaf.basic.BasicPainter: int ARROW_TEXT_GAP>;

        $i107 = $i104 - $i103;

        $i105 = r1.<java.awt.Rectangle: int y>;

        $i106 = $i105 + i6;

        interfaceinvoke r0.<javax.swing.Icon: void paintIcon(java.awt.Component,java.awt.Graphics,int,int)>(r2, r5, $i107, $i106);

        goto label15;

     label13:
        $z8 = r0 instanceof sun.swing.plaf.synth.SynthIcon;

        if $z8 == 0 goto label14;

        $r62 = new javax.swing.plaf.synth.SynthContext;

        $r39 = <javax.swing.plaf.synth.Region: javax.swing.plaf.synth.Region TABLE_HEADER>;

        $r38 = <javax.swing.plaf.synth.Region: javax.swing.plaf.synth.Region TABLE_HEADER>;

        $r40 = staticinvoke <javax.swing.plaf.synth.SynthLookAndFeel: javax.swing.plaf.synth.SynthStyle getStyle(javax.swing.JComponent,javax.swing.plaf.synth.Region)>(r2, $r38);

        specialinvoke $r62.<javax.swing.plaf.synth.SynthContext: void <init>(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)>(r2, $r39, $r40, 0);

        $r42 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i87 = r1.<java.awt.Rectangle: int x>;

        $i89 = $i87 + $i61;

        $i88 = <com.jidesoft.plaf.basic.BasicPainter: int H_GAP>;

        $i91 = $i89 + $i88;

        $i90 = <com.jidesoft.plaf.basic.BasicPainter: int ARROW_TEXT_GAP>;

        $i93 = $i91 + $i90;

        $i92 = r1.<java.awt.Rectangle: int y>;

        $i94 = $i92 + i6;

        $r41 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i95 = virtualinvoke $r41.<sun.swing.plaf.synth.SynthIcon: int getIconWidth(javax.swing.plaf.synth.SynthContext)>($r62);

        $r43 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i96 = virtualinvoke $r43.<sun.swing.plaf.synth.SynthIcon: int getIconHeight(javax.swing.plaf.synth.SynthContext)>($r62);

        virtualinvoke $r42.<sun.swing.plaf.synth.SynthIcon: void paintIcon(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)>($r62, r5, $i93, $i94, $i95, $i96);

        goto label15;

     label14:
        $i79 = r1.<java.awt.Rectangle: int x>;

        $i81 = $i79 + $i61;

        $i80 = <com.jidesoft.plaf.basic.BasicPainter: int H_GAP>;

        $i83 = $i81 + $i80;

        $i82 = <com.jidesoft.plaf.basic.BasicPainter: int ARROW_TEXT_GAP>;

        $i86 = $i83 + $i82;

        $i84 = r1.<java.awt.Rectangle: int y>;

        $i85 = $i84 + i6;

        interfaceinvoke r0.<javax.swing.Icon: void paintIcon(java.awt.Component,java.awt.Graphics,int,int)>(r2, r5, $i86, $i85);

     label15:
        goto label22;

     label16:
        if r0 == null goto label22;

        $z2 = virtualinvoke r4.<com.jidesoft.plaf.basic.BasicPainter: boolean shouldDisplayOnTop()>();

        if $z2 == 0 goto label18;

        $z5 = r0 instanceof sun.swing.plaf.synth.SynthIcon;

        if $z5 == 0 goto label17;

        $r63 = new javax.swing.plaf.synth.SynthContext;

        $r22 = <javax.swing.plaf.synth.Region: javax.swing.plaf.synth.Region TABLE_HEADER>;

        $r21 = <javax.swing.plaf.synth.Region: javax.swing.plaf.synth.Region TABLE_HEADER>;

        $r23 = staticinvoke <javax.swing.plaf.synth.SynthLookAndFeel: javax.swing.plaf.synth.SynthStyle getStyle(javax.swing.JComponent,javax.swing.plaf.synth.Region)>(r2, $r21);

        specialinvoke $r63.<javax.swing.plaf.synth.SynthContext: void <init>(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)>(r2, $r22, $r23, 0);

        $r25 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i48 = r1.<java.awt.Rectangle: int x>;

        $i46 = r1.<java.awt.Rectangle: int width>;

        $i47 = $i46 / 2;

        $i50 = $i48 + $i47;

        $i49 = i1 / 2;

        $i53 = $i50 - $i49;

        $i52 = r1.<java.awt.Rectangle: int y>;

        $i51 = <com.jidesoft.plaf.basic.BasicPainter: int V_GAP>;

        $i54 = $i52 + $i51;

        $r24 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i55 = virtualinvoke $r24.<sun.swing.plaf.synth.SynthIcon: int getIconWidth(javax.swing.plaf.synth.SynthContext)>($r63);

        $r26 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i56 = virtualinvoke $r26.<sun.swing.plaf.synth.SynthIcon: int getIconHeight(javax.swing.plaf.synth.SynthContext)>($r63);

        virtualinvoke $r25.<sun.swing.plaf.synth.SynthIcon: void paintIcon(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)>($r63, r5, $i53, $i54, $i55, $i56);

        goto label22;

     label17:
        $i39 = r1.<java.awt.Rectangle: int x>;

        $i37 = r1.<java.awt.Rectangle: int width>;

        $i38 = $i37 / 2;

        $i41 = $i39 + $i38;

        $i40 = i1 / 2;

        $i45 = $i41 - $i40;

        $i43 = r1.<java.awt.Rectangle: int y>;

        $i42 = <com.jidesoft.plaf.basic.BasicPainter: int V_GAP>;

        $i44 = $i43 + $i42;

        interfaceinvoke r0.<javax.swing.Icon: void paintIcon(java.awt.Component,java.awt.Graphics,int,int)>(r2, r5, $i45, $i44);

        goto label22;

     label18:
        if $z0 == 0 goto label20;

        $z4 = r0 instanceof sun.swing.plaf.synth.SynthIcon;

        if $z4 == 0 goto label19;

        $r64 = new javax.swing.plaf.synth.SynthContext;

        $r15 = <javax.swing.plaf.synth.Region: javax.swing.plaf.synth.Region TABLE_HEADER>;

        $r14 = <javax.swing.plaf.synth.Region: javax.swing.plaf.synth.Region TABLE_HEADER>;

        $r16 = staticinvoke <javax.swing.plaf.synth.SynthLookAndFeel: javax.swing.plaf.synth.SynthStyle getStyle(javax.swing.JComponent,javax.swing.plaf.synth.Region)>(r2, $r14);

        specialinvoke $r64.<javax.swing.plaf.synth.SynthContext: void <init>(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)>(r2, $r15, $r16, 0);

        $r18 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i28 = r1.<java.awt.Rectangle: int x>;

        $i27 = r1.<java.awt.Rectangle: int width>;

        $i29 = $i28 + $i27;

        $i31 = $i29 - i1;

        $i30 = <com.jidesoft.plaf.basic.BasicPainter: int H_GAP>;

        $i33 = $i31 - $i30;

        $i32 = r1.<java.awt.Rectangle: int y>;

        $i34 = $i32 + i6;

        $r17 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i35 = virtualinvoke $r17.<sun.swing.plaf.synth.SynthIcon: int getIconWidth(javax.swing.plaf.synth.SynthContext)>($r64);

        $r19 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i36 = virtualinvoke $r19.<sun.swing.plaf.synth.SynthIcon: int getIconHeight(javax.swing.plaf.synth.SynthContext)>($r64);

        virtualinvoke $r18.<sun.swing.plaf.synth.SynthIcon: void paintIcon(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)>($r64, r5, $i33, $i34, $i35, $i36);

        goto label22;

     label19:
        $i20 = r1.<java.awt.Rectangle: int x>;

        $i19 = r1.<java.awt.Rectangle: int width>;

        $i21 = $i20 + $i19;

        $i23 = $i21 - i1;

        $i22 = <com.jidesoft.plaf.basic.BasicPainter: int H_GAP>;

        $i26 = $i23 - $i22;

        $i24 = r1.<java.awt.Rectangle: int y>;

        $i25 = $i24 + i6;

        interfaceinvoke r0.<javax.swing.Icon: void paintIcon(java.awt.Component,java.awt.Graphics,int,int)>(r2, r5, $i26, $i25);

        goto label22;

     label20:
        $z3 = r0 instanceof sun.swing.plaf.synth.SynthIcon;

        if $z3 == 0 goto label21;

        $r65 = new javax.swing.plaf.synth.SynthContext;

        $r8 = <javax.swing.plaf.synth.Region: javax.swing.plaf.synth.Region TABLE_HEADER>;

        $r7 = <javax.swing.plaf.synth.Region: javax.swing.plaf.synth.Region TABLE_HEADER>;

        $r9 = staticinvoke <javax.swing.plaf.synth.SynthLookAndFeel: javax.swing.plaf.synth.SynthStyle getStyle(javax.swing.JComponent,javax.swing.plaf.synth.Region)>(r2, $r7);

        specialinvoke $r65.<javax.swing.plaf.synth.SynthContext: void <init>(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)>(r2, $r8, $r9, 0);

        $r11 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i13 = r1.<java.awt.Rectangle: int x>;

        $i12 = <com.jidesoft.plaf.basic.BasicPainter: int H_GAP>;

        $i15 = $i13 + $i12;

        $i14 = r1.<java.awt.Rectangle: int y>;

        $i16 = $i14 + i6;

        $r10 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i17 = virtualinvoke $r10.<sun.swing.plaf.synth.SynthIcon: int getIconWidth(javax.swing.plaf.synth.SynthContext)>($r65);

        $r12 = (sun.swing.plaf.synth.SynthIcon) r0;

        $i18 = virtualinvoke $r12.<sun.swing.plaf.synth.SynthIcon: int getIconHeight(javax.swing.plaf.synth.SynthContext)>($r65);

        virtualinvoke $r11.<sun.swing.plaf.synth.SynthIcon: void paintIcon(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)>($r65, r5, $i15, $i16, $i17, $i18);

        goto label22;

     label21:
        $i8 = r1.<java.awt.Rectangle: int x>;

        $i7 = <com.jidesoft.plaf.basic.BasicPainter: int H_GAP>;

        $i11 = $i8 + $i7;

        $i9 = r1.<java.awt.Rectangle: int y>;

        $i10 = $i9 + i6;

        interfaceinvoke r0.<javax.swing.Icon: void paintIcon(java.awt.Component,java.awt.Graphics,int,int)>(r2, r5, $i11, $i10);

     label22:
        return;
    }

    static void <clinit>()
    {
        <com.jidesoft.plaf.basic.BasicPainter: int V_GAP> = 0;

        <com.jidesoft.plaf.basic.BasicPainter: int H_GAP> = 5;

        <com.jidesoft.plaf.basic.BasicPainter: int ARROW_TEXT_GAP> = 0;

        return;
    }
}
