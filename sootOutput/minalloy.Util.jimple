public final class minalloy.Util extends java.lang.Object
{
    private static java.lang.String currentDirectory;
    public static final java.util.Comparator slashComparator;

    static void <clinit>()
    {
        minalloy.Util$1 $r0;

        <minalloy.Util: java.lang.String currentDirectory> = null;

        $r0 = new minalloy.Util$1;

        specialinvoke $r0.<minalloy.Util$1: void <init>()>();

        <minalloy.Util: java.util.Comparator slashComparator> = $r0;

        return;
    }

    private void <init>()
    {
        minalloy.Util r0;

        r0 := @this: minalloy.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static edu.mit.csail.sdg.alloy4.ConstList append(java.util.List, java.lang.Object)
    {
        edu.mit.csail.sdg.alloy4.ConstList$TempList $r0, $r2;
        java.util.List r1;
        edu.mit.csail.sdg.alloy4.ConstList $r4;
        int $i0, $i1;
        java.lang.Object r3;

        r1 := @parameter0: java.util.List;

        r3 := @parameter1: java.lang.Object;

        $r0 = new edu.mit.csail.sdg.alloy4.ConstList$TempList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = $i0 + 1;

        specialinvoke $r0.<edu.mit.csail.sdg.alloy4.ConstList$TempList: void <init>(int)>($i1);

        $r2 = virtualinvoke $r0.<edu.mit.csail.sdg.alloy4.ConstList$TempList: edu.mit.csail.sdg.alloy4.ConstList$TempList addAll(java.lang.Iterable)>(r1);

        virtualinvoke $r2.<edu.mit.csail.sdg.alloy4.ConstList$TempList: edu.mit.csail.sdg.alloy4.ConstList$TempList add(java.lang.Object)>(r3);

        $r4 = virtualinvoke $r0.<edu.mit.csail.sdg.alloy4.ConstList$TempList: edu.mit.csail.sdg.alloy4.ConstList makeConst()>();

        return $r4;
    }

    public static java.lang.Object[] append(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0, r4;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Class $r1, $r2;
        java.lang.Object $r3, r5;

        r0 := @parameter0: java.lang.Object[];

        r5 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $i0 = lengthof r0;

        $i1 = $i0 + 1;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r2, $i1);

        r4 = (java.lang.Object[]) $r3;

        $i2 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r4, 0, $i2);

        $i3 = lengthof r4;

        $i4 = $i3 - 1;

        r4[$i4] = r5;

        return r4;
    }

    public static edu.mit.csail.sdg.alloy4.ConstList prepend(java.util.List, java.lang.Object)
    {
        edu.mit.csail.sdg.alloy4.ConstList$TempList $r0, $r3;
        java.util.List r1;
        edu.mit.csail.sdg.alloy4.ConstList $r4;
        int $i0, $i1;
        java.lang.Object r2;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.Object;

        $r0 = new edu.mit.csail.sdg.alloy4.ConstList$TempList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = $i0 + 1;

        specialinvoke $r0.<edu.mit.csail.sdg.alloy4.ConstList$TempList: void <init>(int)>($i1);

        $r3 = virtualinvoke $r0.<edu.mit.csail.sdg.alloy4.ConstList$TempList: edu.mit.csail.sdg.alloy4.ConstList$TempList add(java.lang.Object)>(r2);

        virtualinvoke $r3.<edu.mit.csail.sdg.alloy4.ConstList$TempList: edu.mit.csail.sdg.alloy4.ConstList$TempList addAll(java.lang.Iterable)>(r1);

        $r4 = virtualinvoke $r0.<edu.mit.csail.sdg.alloy4.ConstList$TempList: edu.mit.csail.sdg.alloy4.ConstList makeConst()>();

        return $r4;
    }

    public static transient edu.mit.csail.sdg.alloy4.ConstList asList(java.lang.Object[])
    {
        edu.mit.csail.sdg.alloy4.ConstList$TempList $r0;
        java.lang.Object[] r1;
        edu.mit.csail.sdg.alloy4.ConstList $r2;

        r1 := @parameter0: java.lang.Object[];

        $r0 = new edu.mit.csail.sdg.alloy4.ConstList$TempList;

        specialinvoke $r0.<edu.mit.csail.sdg.alloy4.ConstList$TempList: void <init>(java.lang.Object[])>(r1);

        $r2 = virtualinvoke $r0.<edu.mit.csail.sdg.alloy4.ConstList$TempList: edu.mit.csail.sdg.alloy4.ConstList makeConst()>();

        return $r2;
    }

    public static transient java.util.LinkedHashSet asSet(java.lang.Object[])
    {
        java.lang.Object[] r1;
        int $i0, i1;
        java.lang.Object $r2;
        java.util.LinkedHashSet $r0;

        r1 := @parameter0: java.lang.Object[];

        $r0 = new java.util.LinkedHashSet;

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>();

        i1 = 0;

        goto label2;

     label1:
        $r2 = r1[i1];

        virtualinvoke $r0.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

     label2:
        $i0 = lengthof r1;

        if i1 < $i0 goto label1;

        return $r0;
    }

    public static transient java.util.LinkedHashMap asMap(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r1, r2;
        java.util.LinkedHashMap $r0;
        int $i0, $i1, i2;
        java.lang.Object $r3, $r4;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object[];

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        i2 = 0;

        goto label2;

     label1:
        $r4 = r1[i2];

        $r3 = r2[i2];

        virtualinvoke $r0.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        i2 = i2 + 1;

     label2:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label3;

        $i1 = lengthof r2;

        if i2 < $i1 goto label1;

     label3:
        return $r0;
    }

    public static java.lang.Iterable fastJoin(java.lang.Iterable, java.lang.Iterable)
    {
        minalloy.Util$2 $r0;
        java.lang.Iterable r1, r2;

        r1 := @parameter0: java.lang.Iterable;

        r2 := @parameter1: java.lang.Iterable;

        $r0 = new minalloy.Util$2;

        specialinvoke $r0.<minalloy.Util$2: void <init>(java.lang.Iterable,java.lang.Iterable)>(r1, r2);

        return $r0;
    }

    public static java.lang.String convertLineBreak(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\r\n", "\n");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(13, 10);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[\u0000-\u0008\u000b\f\u000e-\u001f]", " ");

        return $r3;
    }

    public static boolean close(java.io.Closeable)
    {
        java.io.PrintWriter $r1;
        java.io.PrintStream $r2;
        java.lang.Throwable $r3;
        java.io.Closeable r0;
        boolean $z0, $z1, $z2, z3, $z4;

        r0 := @parameter0: java.io.Closeable;

        if r0 != null goto label1;

        return 1;

     label1:
        z3 = 1;

     label2:
        $z0 = r0 instanceof java.io.PrintStream;

        if $z0 == 0 goto label3;

        $r2 = (java.io.PrintStream) r0;

        $z2 = virtualinvoke $r2.<java.io.PrintStream: boolean checkError()>();

        if $z2 == 0 goto label3;

        z3 = 0;

     label3:
        $z4 = r0 instanceof java.io.PrintWriter;

        if $z4 == 0 goto label4;

        $r1 = (java.io.PrintWriter) r0;

        $z1 = virtualinvoke $r1.<java.io.PrintWriter: boolean checkError()>();

        if $z1 == 0 goto label4;

        z3 = 0;

     label4:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label5:
        return z3;

     label6:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.Throwable from label2 to label5 with label6;
    }

    public static synchronized void setCurrentDirectory(java.io.File)
    {
        java.lang.String $r1, $r2, $r3, $r4;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        if r0 != null goto label1;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        $r4 = staticinvoke <minalloy.Util: java.lang.String canon(java.lang.String)>($r3);

        <minalloy.Util: java.lang.String currentDirectory> = $r4;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r2 = staticinvoke <minalloy.Util: java.lang.String canon(java.lang.String)>($r1);

        <minalloy.Util: java.lang.String currentDirectory> = $r2;

     label2:
        return;
    }

    public static synchronized java.lang.String getCurrentDirectory()
    {
        java.lang.String $r0, $r1, $r2, $r3;

        $r0 = <minalloy.Util: java.lang.String currentDirectory>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        $r3 = staticinvoke <minalloy.Util: java.lang.String canon(java.lang.String)>($r2);

        <minalloy.Util: java.lang.String currentDirectory> = $r3;

     label1:
        $r1 = <minalloy.Util: java.lang.String currentDirectory>;

        return $r1;
    }

    public static java.lang.String jarPrefix()
    {
        java.lang.StringBuilder $r0, $r3, $r5;
        java.lang.String $r1, $r2, $r4, $r6;

        $r0 = new java.lang.StringBuilder;

        $r1 = <java.io.File: java.lang.String separator>;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$alloy4$");

        $r4 = <java.io.File: java.lang.String separator>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String readAll(java.lang.String) throws java.io.FileNotFoundException, java.io.IOException
    {
        byte[] r37, r39;
        java.nio.ByteBuffer $r1, $r19, $r26;
        byte $b2;
        boolean $z0, z1, z2, z3;
        java.nio.CharBuffer $r6, $r24, $r31;
        java.nio.charset.CharsetDecoder $r3, $r4, $r5, $r21, $r22, $r23, $r28, $r29, $r30;
        java.io.FileNotFoundException $r48;
        java.lang.StringBuilder $r10, $r11, $r47;
        java.lang.ClassLoader $r14;
        java.lang.Throwable $r32;
        java.nio.charset.CharacterCodingException $r18, $r25;
        long $l0, $l1;
        java.nio.charset.Charset $r2, $r20, $r27;
        java.nio.charset.CodingErrorAction r40, r41;
        int $i3, i4, i5, $i6, $i7;
        java.lang.String $r0, $r12, $r17, r35, r42, $r43;
        java.io.IOException $r45, $r49, $r50;
        java.io.FileInputStream $r46;
        java.io.File $r44;
        java.lang.Class $r13;
        java.lang.OutOfMemoryError $r33;
        java.io.InputStream r36, $r38;

        r35 := @parameter0: java.lang.String;

        $r0 = staticinvoke <minalloy.Util: java.lang.String jarPrefix()>();

        z1 = 0;

        z3 = 0;

        z2 = 0;

        $z0 = virtualinvoke r35.<java.lang.String: boolean startsWith(java.lang.String)>($r0);

        if $z0 == 0 goto label01;

        z1 = 1;

        z3 = 1;

        z2 = 1;

        $i3 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r17 = virtualinvoke r35.<java.lang.String: java.lang.String substring(int)>($i3);

        r35 = virtualinvoke $r17.<java.lang.String: java.lang.String replace(char,char)>(92, 47);

     label01:
        r36 = null;

        i4 = 0;

        i5 = 4096;

        if z2 != 0 goto label02;

        $r44 = new java.io.File;

        specialinvoke $r44.<java.io.File: void <init>(java.lang.String)>(r35);

        $l0 = virtualinvoke $r44.<java.io.File: long length()>();

        i5 = (int) $l0;

        $l1 = (long) i5;

        $b2 = $l1 cmp $l0;

        if $b2 == 0 goto label02;

        $r45 = new java.io.IOException;

        specialinvoke $r45.<java.io.IOException: void <init>(java.lang.String)>("File too big to fit in memory");

        throw $r45;

     label02:
        r37 = newarray (byte)[i5];

        if z3 == 0 goto label03;

        $r13 = class "Lminalloy/Util;";

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r38 = virtualinvoke $r14.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r35);

        goto label04;

     label03:
        $r46 = new java.io.FileInputStream;

        $r38 = $r46;

        specialinvoke $r46.<java.io.FileInputStream: void <init>(java.lang.String)>(r35);

     label04:
        r36 = $r38;

        if $r38 != null goto label05;

        $r48 = new java.io.FileNotFoundException;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>(java.lang.String)>("File \"");

        $r10 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" cannot be found");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r48.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r12);

        throw $r48;

     label05:
        if i4 < i5 goto label08;

        i5 = i4 + 4096;

        if i5 >= i4 goto label06;

        $r49 = new java.io.IOException;

        specialinvoke $r49.<java.io.IOException: void <init>(java.lang.String)>("File too big to fit in memory");

        throw $r49;

     label06:
        r39 = newarray (byte)[i5];

        if i4 <= 0 goto label07;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r37, 0, r39, 0, i4);

     label07:
        r37 = r39;

     label08:
        $i6 = i5 - i4;

        $i7 = virtualinvoke r36.<java.io.InputStream: int read(byte[],int,int)>(r37, i4, $i6);

        if $i7 >= 0 goto label09;

        goto label12;

     label09:
        i4 = i4 + $i7;

        goto label05;

     label10:
        $r33 := @caughtexception;

        staticinvoke <java.lang.System: void gc()>();

        $r50 = new java.io.IOException;

        specialinvoke $r50.<java.io.IOException: void <init>(java.lang.String)>("There is insufficient memory.");

        throw $r50;

     label11:
        $r32 := @caughtexception;

        staticinvoke <minalloy.Util: boolean close(java.io.Closeable)>(r36);

        throw $r32;

     label12:
        staticinvoke <minalloy.Util: boolean close(java.io.Closeable)>(r36);

        r40 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        r41 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction IGNORE>;

     label13:
        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(r37, 0, i4);

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        $r4 = virtualinvoke $r3.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>(r40);

        $r5 = virtualinvoke $r4.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>(r40);

        $r6 = virtualinvoke $r5.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r1);

        r42 = virtualinvoke $r6.<java.nio.CharBuffer: java.lang.String toString()>();

     label14:
        goto label19;

     label15:
        $r25 := @caughtexception;

     label16:
        $r26 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(r37, 0, i4);

        $r27 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        $r28 = virtualinvoke $r27.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        $r29 = virtualinvoke $r28.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>(r40);

        $r30 = virtualinvoke $r29.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>(r40);

        $r31 = virtualinvoke $r30.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r26);

        r42 = virtualinvoke $r31.<java.nio.CharBuffer: java.lang.String toString()>();

     label17:
        goto label19;

     label18:
        $r18 := @caughtexception;

        $r19 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(r37, 0, i4);

        $r20 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("ISO-8859-1");

        $r21 = virtualinvoke $r20.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        $r22 = virtualinvoke $r21.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>(r41);

        $r23 = virtualinvoke $r22.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>(r41);

        $r24 = virtualinvoke $r23.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r19);

        r42 = virtualinvoke $r24.<java.nio.CharBuffer: java.lang.String toString()>();

     label19:
        $r43 = staticinvoke <minalloy.Util: java.lang.String convertLineBreak(java.lang.String)>(r42);

        return $r43;

        catch java.lang.OutOfMemoryError from label02 to label10 with label10;
        catch java.lang.Throwable from label02 to label11 with label11;
        catch java.nio.charset.CharacterCodingException from label13 to label14 with label15;
        catch java.nio.charset.CharacterCodingException from label16 to label17 with label18;
    }

    public static long writeAll(java.lang.String, java.lang.String) throws edu.mit.csail.sdg.alloy4.Err
    {
        edu.mit.csail.sdg.alloy4.ErrorFatal $r23, $r26;
        byte[] $r20;
        long $l5;
        int $i0, $i1, $i2, $i4, $i6;
        java.lang.String r1, $r2, $r4, $r10, $r15, r16, r17, $r18, $r19;
        java.io.FileOutputStream $r21;
        char $c3;
        java.io.IOException $r6, $r11;
        java.lang.StringBuilder $r5, $r9, $r14, $r22, $r24, $r25;

        r1 := @parameter0: java.lang.String;

        r16 := @parameter1: java.lang.String;

     label1:
        $r21 = new java.io.FileOutputStream;

        specialinvoke $r21.<java.io.FileOutputStream: void <init>(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r23 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot write to the file ");

        $r14 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>($r15);

        throw $r23;

     label4:
        $r2 = staticinvoke <minalloy.Util: java.lang.String convertLineBreak(java.lang.String)>(r16);

        r17 = $r2;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label5;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i2);

        $i6 = (int) $c3;

        if $i6 == 10 goto label5;

        $r24 = new java.lang.StringBuilder;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r17 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $r18 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r19 = virtualinvoke r17.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\n", $r18);

        $r20 = virtualinvoke $r19.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r21.<java.io.FileOutputStream: void write(byte[])>($r20);

        virtualinvoke $r21.<java.io.FileOutputStream: void close()>();

        $i4 = lengthof $r20;

        $l5 = (long) $i4;

     label6:
        return $l5;

     label7:
        $r6 := @caughtexception;

        staticinvoke <minalloy.Util: boolean close(java.io.Closeable)>($r21);

        $r26 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot write to the file ");

        $r9 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r6);

        throw $r26;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public static final java.lang.String canon(java.lang.String)
    {
        java.io.IOException $r5;
        char c1, $c2;
        java.io.File $r7;
        int $i0, $i3;
        java.lang.String r0, $r1, $r3, $r4, $r6;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return "";

     label2:
        $r1 = staticinvoke <minalloy.Util: java.lang.String jarPrefix()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>($r1);

        if $z0 == 0 goto label5;

        c1 = <java.io.File: char separatorChar>;

        $i3 = (int) c1;

        if $i3 != 47 goto label3;

        $c2 = 92;

        goto label4;

     label3:
        $c2 = 47;

     label4:
        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>($c2, c1);

        return $r4;

     label5:
        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>(r0);

     label6:
        $r3 = virtualinvoke $r7.<java.io.File: java.lang.String getCanonicalPath()>();

     label7:
        return $r3;

     label8:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r6;

        catch java.io.IOException from label6 to label7 with label8;
    }

    private static boolean copy(java.lang.String, java.lang.String)
    {
        byte[] r14;
        long $l0;
        byte $b1;
        int $i2, $i3;
        java.lang.String r1, r4, $r10;
        boolean $z0, $z1, $z2, z3;
        java.io.FileOutputStream r13, $r16;
        java.io.IOException $r11;
        java.io.File $r15;
        java.lang.Class $r2;
        java.lang.StringBuilder $r8, $r9, $r17;
        java.lang.ClassLoader $r3;
        java.io.InputStream $r5, r12;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r1);

        $z0 = virtualinvoke $r15.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label01;

        $l0 = virtualinvoke $r15.<java.io.File: long length()>();

        $b1 = $l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label01;

        return 0;

     label01:
        z3 = 1;

        r12 = null;

        r13 = null;

     label02:
        $r2 = class "Lminalloy/Util;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r5 = virtualinvoke $r3.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r4);

        r12 = $r5;

        if $r5 != null goto label04;

     label03:
        return 0;

     label04:
        $r16 = new java.io.FileOutputStream;

        specialinvoke $r16.<java.io.FileOutputStream: void <init>(java.lang.String)>(r1);

        r13 = $r16;

        r14 = newarray (byte)[16384];

     label05:
        $i2 = virtualinvoke $r5.<java.io.InputStream: int read(byte[])>(r14);

        if $i2 >= 0 goto label06;

        goto label08;

     label06:
        if $i2 <= 0 goto label05;

        virtualinvoke $r16.<java.io.FileOutputStream: void write(byte[],int,int)>(r14, 0, $i2);

        goto label05;

     label07:
        $r11 := @caughtexception;

        z3 = 0;

     label08:
        $z1 = staticinvoke <minalloy.Util: boolean close(java.io.Closeable)>(r13);

        if $z1 != 0 goto label09;

        z3 = 0;

     label09:
        $z2 = staticinvoke <minalloy.Util: boolean close(java.io.Closeable)>(r12);

        if $z2 != 0 goto label10;

        z3 = 0;

     label10:
        if z3 != 0 goto label11;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error occurred in creating the file \"");

        $r8 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <edu.mit.csail.sdg.alloy4.OurDialog: void fatal(java.lang.Object)>($r10);

     label11:
        return 1;

        catch java.io.IOException from label02 to label03 with label07;
        catch java.io.IOException from label04 to label07 with label07;
    }

    public static transient void copy(boolean, boolean, java.lang.String, java.lang.String[])
    {
        boolean z0, z1, $z2, $z3;
        java.lang.Process $r5;
        java.lang.Runtime $r4;
        java.lang.StringBuilder $r12, $r13, $r19;
        java.lang.Throwable $r6;
        java.lang.String[] r0, r1, r18;
        int $i0, $i1, $i2, $i3, i4, i5, $i8, $i9, $i10, i11, $i12;
        java.lang.String r2, $r3, $r7, r8, r9, $r11, $r14, $r15, $r17;
        char $c6, $c7;
        java.io.File $r20;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        r0 := @parameter3: java.lang.String[];

        $i0 = lengthof r0;

        $i1 = $i0 + 2;

        r1 = newarray (java.lang.String)[$i1];

        r1[0] = "/bin/chmod";

        if z0 == 0 goto label01;

        $r7 = "700";

        goto label02;

     label01:
        $r7 = "600";

     label02:
        r1[1] = $r7;

        i4 = 2;

        i5 = 0;

        goto label06;

     label03:
        r8 = r0[i5];

        r9 = r8;

        if z1 != 0 goto label04;

        $i2 = virtualinvoke r8.<java.lang.String: int lastIndexOf(int)>(47);

        if $i2 < 0 goto label04;

        $i3 = $i2 + 1;

        r9 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int)>($i3);

     label04:
        $r19 = new java.lang.StringBuilder;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11);

        $r12 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $c6 = <java.io.File: char separatorChar>;

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String replace(char,char)>(47, $c6);

        $c7 = <java.io.File: char separatorChar>;

        $i12 = (int) $c7;

        $i8 = virtualinvoke $r15.<java.lang.String: int lastIndexOf(int)>($i12);

        $r20 = new java.io.File;

        $i9 = $i8 + 1;

        $r17 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int,int)>(0, $i9);

        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>($r17);

        virtualinvoke $r20.<java.io.File: boolean mkdirs()>();

        $z3 = staticinvoke <minalloy.Util: boolean copy(java.lang.String,java.lang.String)>(r8, $r15);

        if $z3 == 0 goto label05;

        r1[i4] = $r15;

        i4 = i4 + 1;

     label05:
        i5 = i5 + 1;

     label06:
        $i10 = lengthof r0;

        if i5 < $i10 goto label03;

        $z2 = staticinvoke <minalloy.Util: boolean onWindows()>();

        if $z2 != 0 goto label07;

        if i4 > 2 goto label08;

     label07:
        return;

     label08:
        r18 = newarray (java.lang.String)[i4];

        i11 = 0;

        goto label10;

     label09:
        $r3 = r1[i11];

        r18[i11] = $r3;

        i11 = i11 + 1;

     label10:
        if i11 < i4 goto label09;

     label11:
        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r5 = virtualinvoke $r4.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>(r18);

        virtualinvoke $r5.<java.lang.Process: int waitFor()>();

     label12:
        goto label14;

     label13:
        $r6 := @caughtexception;

     label14:
        return;

        catch java.lang.Throwable from label11 to label12 with label13;
    }

    public static void shift(java.io.RandomAccessFile, long, long) throws java.io.IOException
    {
        java.io.RandomAccessFile r0;
        byte[] r1;
        byte $b1, $b2, $b3, $b4, $b5, $b6, $b9, $b11, $b14;
        long $l0, $l8, $l13, $l15, $l16, $l19, $l20, $l21, $l22, $l23, $l24, $l26, $l28, $l29, l30, l31, l32, l33, l34;
        int $i7, $i10, $i12, $i17, $i18, $i25, $i27, i35, i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44;
        java.io.IOException $r4, $r5;

        r0 := @parameter0: java.io.RandomAccessFile;

        l30 := @parameter1: long;

        l31 := @parameter2: long;

        $l0 = virtualinvoke r0.<java.io.RandomAccessFile: long length()>();

        l32 = $l0;

        $b1 = l30 cmp 0L;

        $i37 = (int) $b1;

        if $i37 < 0 goto label01;

        $b2 = l30 cmp $l0;

        $i38 = (int) $b2;

        if $i38 >= 0 goto label01;

        $b3 = l31 cmp 0L;

        $i39 = (int) $b3;

        if $i39 >= 0 goto label02;

     label01:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>()>();

        throw $r4;

     label02:
        $b4 = l30 cmp l31;

        if $b4 != 0 goto label03;

        virtualinvoke r0.<java.io.RandomAccessFile: void seek(long)>(0L);

        return;

     label03:
        r1 = newarray (byte)[4096];

        $b5 = l30 cmp l31;

        $i40 = (int) $b5;

        if $i40 <= 0 goto label06;

     label04:
        virtualinvoke r0.<java.io.RandomAccessFile: void seek(long)>(l30);

        $i27 = virtualinvoke r0.<java.io.RandomAccessFile: int read(byte[])>(r1);

        if $i27 > 0 goto label05;

        virtualinvoke r0.<java.io.RandomAccessFile: void setLength(long)>(l31);

        virtualinvoke r0.<java.io.RandomAccessFile: void seek(long)>(0L);

        return;

     label05:
        virtualinvoke r0.<java.io.RandomAccessFile: void seek(long)>(l31);

        virtualinvoke r0.<java.io.RandomAccessFile: void write(byte[],int,int)>(r1, 0, $i27);

        $l28 = (long) $i27;

        l30 = l30 + $l28;

        $l29 = (long) $i27;

        l31 = l31 + $l29;

        goto label04;

     label06:
        virtualinvoke r0.<java.io.RandomAccessFile: void seek(long)>($l0);

        l33 = l31 - l30;

        goto label09;

     label07:
        $i7 = lengthof r1;

        $l8 = (long) $i7;

        $b9 = l33 cmp $l8;

        $i41 = (int) $b9;

        if $i41 < 0 goto label08;

        virtualinvoke r0.<java.io.RandomAccessFile: void write(byte[])>(r1);

        $i25 = lengthof r1;

        $l26 = (long) $i25;

        l33 = l33 - $l26;

        goto label09;

     label08:
        $i10 = (int) l33;

        virtualinvoke r0.<java.io.RandomAccessFile: void write(byte[],int,int)>(r1, 0, $i10);

        goto label10;

     label09:
        $b6 = l33 cmp 0L;

        $i42 = (int) $b6;

        if $i42 > 0 goto label07;

     label10:
        l34 = $l0 - l30;

        goto label17;

     label11:
        $i12 = lengthof r1;

        $l13 = (long) $i12;

        $b14 = l34 cmp $l13;

        $i43 = (int) $b14;

        if $i43 <= 0 goto label12;

        i35 = lengthof r1;

        goto label13;

     label12:
        i35 = (int) l34;

     label13:
        $l15 = (long) i35;

        $l16 = l32 - $l15;

        virtualinvoke r0.<java.io.RandomAccessFile: void seek(long)>($l16);

        i36 = 0;

        goto label16;

     label14:
        $i17 = i35 - i36;

        $i18 = virtualinvoke r0.<java.io.RandomAccessFile: int read(byte[],int,int)>(r1, i36, $i17);

        if $i18 > 0 goto label15;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>()>();

        throw $r5;

     label15:
        i36 = i36 + $i18;

     label16:
        if i36 < i35 goto label14;

        $l19 = (long) i35;

        $l21 = l32 - $l19;

        $l20 = l31 - l30;

        $l22 = $l21 + $l20;

        virtualinvoke r0.<java.io.RandomAccessFile: void seek(long)>($l22);

        virtualinvoke r0.<java.io.RandomAccessFile: void write(byte[],int,int)>(r1, 0, i35);

        $l23 = (long) i35;

        l32 = l32 - $l23;

        $l24 = (long) i35;

        l34 = l34 - $l24;

     label17:
        $b11 = l34 cmp 0L;

        $i44 = (int) $b11;

        if $i44 > 0 goto label11;

        virtualinvoke r0.<java.io.RandomAccessFile: void seek(long)>(0L);

        return;
    }

    public static void encodeXML(java.io.PrintWriter, java.lang.String)
    {
        int $i0, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String r0, $r2;
        java.io.PrintWriter r1;
        char $c1;

        r1 := @parameter0: java.io.PrintWriter;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

        goto label11;

     label01:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i4 = (int) $c1;

        if $i4 != 60 goto label02;

        virtualinvoke r1.<java.io.PrintWriter: void write(java.lang.String)>("&lt;");

        goto label10;

     label02:
        $i5 = (int) $c1;

        if $i5 != 62 goto label03;

        virtualinvoke r1.<java.io.PrintWriter: void write(java.lang.String)>("&gt;");

        goto label10;

     label03:
        $i6 = (int) $c1;

        if $i6 != 38 goto label04;

        virtualinvoke r1.<java.io.PrintWriter: void write(java.lang.String)>("&amp;");

        goto label10;

     label04:
        $i7 = (int) $c1;

        if $i7 != 39 goto label05;

        virtualinvoke r1.<java.io.PrintWriter: void write(java.lang.String)>("&apos;");

        goto label10;

     label05:
        $i8 = (int) $c1;

        if $i8 != 34 goto label06;

        virtualinvoke r1.<java.io.PrintWriter: void write(java.lang.String)>("&quot;");

        goto label10;

     label06:
        $i9 = (int) $c1;

        if $i9 < 32 goto label07;

        $i10 = (int) $c1;

        if $i10 > 126 goto label07;

        $i11 = (int) $c1;

        virtualinvoke r1.<java.io.PrintWriter: void write(int)>($i11);

        goto label10;

     label07:
        virtualinvoke r1.<java.io.PrintWriter: void write(java.lang.String)>("&#x");

        $i12 = (int) $c1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i12, 16);

        i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        goto label09;

     label08:
        virtualinvoke r1.<java.io.PrintWriter: void write(int)>(48);

        i3 = i3 + 1;

     label09:
        if i3 < 4 goto label08;

        virtualinvoke r1.<java.io.PrintWriter: void write(java.lang.String)>($r2);

        virtualinvoke r1.<java.io.PrintWriter: void write(int)>(59);

     label10:
        i2 = i2 + 1;

     label11:
        if i2 < $i0 goto label01;

        return;
    }

    public static void encodeXML(java.lang.StringBuilder, java.lang.String)
    {
        int $i0, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String r0, $r2;
        char $c1;
        java.lang.StringBuilder r1, $r3;

        r1 := @parameter0: java.lang.StringBuilder;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

        goto label11;

     label01:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i4 = (int) $c1;

        if $i4 != 60 goto label02;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&lt;");

        goto label10;

     label02:
        $i5 = (int) $c1;

        if $i5 != 62 goto label03;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&gt;");

        goto label10;

     label03:
        $i6 = (int) $c1;

        if $i6 != 38 goto label04;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&amp;");

        goto label10;

     label04:
        $i7 = (int) $c1;

        if $i7 != 39 goto label05;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&apos;");

        goto label10;

     label05:
        $i8 = (int) $c1;

        if $i8 != 34 goto label06;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&quot;");

        goto label10;

     label06:
        $i9 = (int) $c1;

        if $i9 < 32 goto label07;

        $i10 = (int) $c1;

        if $i10 > 126 goto label07;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label10;

     label07:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#x");

        $i11 = (int) $c1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i11, 16);

        i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        goto label09;

     label08:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        i3 = i3 + 1;

     label09:
        if i3 < 4 goto label08;

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

     label10:
        i2 = i2 + 1;

     label11:
        if i2 < $i0 goto label01;

        return;
    }

    public static java.lang.String encode(java.lang.String)
    {
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        staticinvoke <minalloy.Util: void encodeXML(java.lang.StringBuilder,java.lang.String)>($r1, r0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static transient void encodeXMLs(java.io.PrintWriter, java.lang.String[])
    {
        java.io.PrintWriter r1;
        int $i0, i1, $i2;
        java.lang.String[] r0;
        java.lang.String $r2, $r3;

        r1 := @parameter0: java.io.PrintWriter;

        r0 := @parameter1: java.lang.String[];

        i1 = 0;

        goto label4;

     label1:
        $i0 = i1 % 2;

        if $i0 != 0 goto label2;

        $r3 = r0[i1];

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r3);

        goto label3;

     label2:
        $r2 = r0[i1];

        staticinvoke <minalloy.Util: void encodeXML(java.io.PrintWriter,java.lang.String)>(r1, $r2);

     label3:
        i1 = i1 + 1;

     label4:
        $i2 = lengthof r0;

        if i1 < $i2 goto label1;

        return;
    }

    public static transient void encodeXMLs(java.lang.StringBuilder, java.lang.String[])
    {
        int $i0, i1, $i2;
        java.lang.String[] r0;
        java.lang.StringBuilder r1;
        java.lang.String $r2, $r3;

        r1 := @parameter0: java.lang.StringBuilder;

        r0 := @parameter1: java.lang.String[];

        i1 = 0;

        goto label4;

     label1:
        $i0 = i1 % 2;

        if $i0 != 0 goto label2;

        $r3 = r0[i1];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        goto label3;

     label2:
        $r2 = r0[i1];

        staticinvoke <minalloy.Util: void encodeXML(java.lang.StringBuilder,java.lang.String)>(r1, $r2);

     label3:
        i1 = i1 + 1;

     label4:
        $i2 = lengthof r0;

        if i1 < $i2 goto label1;

        return;
    }

    public static int indexOf(java.lang.String, java.lang.String, int, boolean, boolean)
    {
        int $i0, $i1, $i2, $i3, $i6, $i7, i8, i9, i10, i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i25;
        java.lang.String r0, r1;
        boolean z0, z1;
        char $c4, $c5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i8 := @parameter2: int;

        z1 := @parameter3: boolean;

        z0 := @parameter4: boolean;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label10;

        $i13 = (int) -1;

        return $i13;

     label01:
        i9 = 0;

     label02:
        if i9 < $i1 goto label03;

        return i8;

     label03:
        $i2 = i8 + i9;

        if $i2 < $i0 goto label04;

        goto label08;

     label04:
        $i3 = i8 + i9;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $i14 = (int) $c4;

        i10 = $i14;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i9);

        $i15 = (int) $c5;

        i11 = $i15;

        if z0 != 0 goto label05;

        $i16 = (int) $c4;

        if $i16 < 65 goto label05;

        $i17 = (int) $c4;

        if $i17 > 90 goto label05;

        $i18 = (int) $c4;

        $i7 = $i18 - 65;

        i10 = $i7 + 97;

     label05:
        if z0 != 0 goto label06;

        $i19 = (int) $c5;

        if $i19 < 65 goto label06;

        $i20 = (int) $c5;

        if $i20 > 90 goto label06;

        $i21 = (int) $c5;

        $i6 = $i21 - 65;

        i11 = $i6 + 97;

     label06:
        if i10 == i11 goto label07;

        goto label08;

     label07:
        i9 = i9 + 1;

        goto label02;

     label08:
        if z1 == 0 goto label09;

        i8 = i8 + 1;

        goto label10;

     label09:
        $i23 = (int) -1;

        i8 = i8 + $i23;

     label10:
        if i8 < 0 goto label11;

        if i8 < $i0 goto label01;

     label11:
        $i25 = (int) -1;

        return $i25;
    }

    public static boolean onWindows()
    {
        java.util.Locale $r1;
        java.lang.String $r0, $r2;
        boolean $z0;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $r1 = <java.util.Locale: java.util.Locale US>;

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("windows");

        return $z0;
    }

    public static boolean onMac()
    {
        java.util.Locale $r2;
        java.lang.String $r0, $r1, $r3;
        boolean $z0;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("mrj.version");

        if $r0 != null goto label1;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $r2 = <java.util.Locale: java.util.Locale US>;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("mac ");

        if $z0 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public static java.lang.String tail(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);

        if $i0 >= 0 goto label1;

        $r1 = r0;

        goto label2;

     label1:
        $i1 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

     label2:
        return $r1;
    }
}
