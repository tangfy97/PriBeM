class org.apache.commons.compress.archivers.sevenz.Coders extends java.lang.Object
{
    private static final java.util.Map CODER_MAP;

    void <init>()
    {
        org.apache.commons.compress.archivers.sevenz.Coders r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.Coders;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static org.apache.commons.compress.archivers.sevenz.CoderBase findByMethod(org.apache.commons.compress.archivers.sevenz.SevenZMethod)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZMethod r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        org.apache.commons.compress.archivers.sevenz.CoderBase $r3;

        r0 := @parameter0: org.apache.commons.compress.archivers.sevenz.SevenZMethod;

        $r1 = <org.apache.commons.compress.archivers.sevenz.Coders: java.util.Map CODER_MAP>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.apache.commons.compress.archivers.sevenz.CoderBase) $r2;

        return $r3;
    }

    static java.io.InputStream addDecoder(java.io.InputStream, org.apache.commons.compress.archivers.sevenz.Coder, byte[]) throws java.io.IOException
    {
        byte[] $r1, r5, $r10;
        org.apache.commons.compress.archivers.sevenz.SevenZMethod $r2;
        java.io.IOException $r7;
        org.apache.commons.compress.archivers.sevenz.Coder r0;
        java.lang.StringBuilder $r8, $r9, $r12;
        java.lang.String $r11, $r13;
        org.apache.commons.compress.archivers.sevenz.CoderBase $r3;
        java.io.InputStream r4, $r6;

        r4 := @parameter0: java.io.InputStream;

        r0 := @parameter1: org.apache.commons.compress.archivers.sevenz.Coder;

        r5 := @parameter2: byte[];

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.Coder: byte[] decompressionMethodId>;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.sevenz.SevenZMethod: org.apache.commons.compress.archivers.sevenz.SevenZMethod byId(byte[])>($r1);

        $r3 = staticinvoke <org.apache.commons.compress.archivers.sevenz.Coders: org.apache.commons.compress.archivers.sevenz.CoderBase findByMethod(org.apache.commons.compress.archivers.sevenz.SevenZMethod)>($r2);

        if $r3 != null goto label1;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported compression method ");

        $r10 = r0.<org.apache.commons.compress.archivers.sevenz.Coder: byte[] decompressionMethodId>;

        $r11 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label1:
        $r6 = virtualinvoke $r3.<org.apache.commons.compress.archivers.sevenz.CoderBase: java.io.InputStream decode(java.io.InputStream,org.apache.commons.compress.archivers.sevenz.Coder,byte[])>(r4, r0, r5);

        return $r6;
    }

    static java.io.OutputStream addEncoder(java.io.OutputStream, org.apache.commons.compress.archivers.sevenz.SevenZMethod, java.lang.Object) throws java.io.IOException
    {
        java.io.OutputStream r2, $r4;
        org.apache.commons.compress.archivers.sevenz.SevenZMethod r0;
        java.io.IOException $r5;
        java.lang.Object r3;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        org.apache.commons.compress.archivers.sevenz.CoderBase $r1;

        r2 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: org.apache.commons.compress.archivers.sevenz.SevenZMethod;

        r3 := @parameter2: java.lang.Object;

        $r1 = staticinvoke <org.apache.commons.compress.archivers.sevenz.Coders: org.apache.commons.compress.archivers.sevenz.CoderBase findByMethod(org.apache.commons.compress.archivers.sevenz.SevenZMethod)>(r0);

        if $r1 != null goto label1;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported compression method ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $r4 = virtualinvoke $r1.<org.apache.commons.compress.archivers.sevenz.CoderBase: java.io.OutputStream encode(java.io.OutputStream,java.lang.Object)>(r2, r3);

        return $r4;
    }

    static void <clinit>()
    {
        org.apache.commons.compress.archivers.sevenz.Coders$1 $r0;

        $r0 = new org.apache.commons.compress.archivers.sevenz.Coders$1;

        specialinvoke $r0.<org.apache.commons.compress.archivers.sevenz.Coders$1: void <init>()>();

        <org.apache.commons.compress.archivers.sevenz.Coders: java.util.Map CODER_MAP> = $r0;

        return;
    }
}
