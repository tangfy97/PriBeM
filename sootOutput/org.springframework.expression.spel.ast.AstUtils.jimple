public class org.springframework.expression.spel.ast.AstUtils extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.expression.spel.ast.AstUtils r0;

        r0 := @this: org.springframework.expression.spel.ast.AstUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List getPropertyAccessorsToTry(java.lang.Class, org.springframework.expression.spel.ExpressionState)
    {
        org.springframework.expression.PropertyAccessor r10;
        java.util.ArrayList $r0, $r1, $r9;
        int i0, $i1, i2, i3;
        boolean $z0, $z1;
        java.util.Iterator $r4;
        java.lang.Class[] $r6;
        java.util.List $r3;
        org.springframework.expression.spel.ExpressionState r2;
        java.lang.Object $r5;
        java.lang.Class r7, r8;

        r7 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.expression.spel.ExpressionState;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: java.util.List getPropertyAccessors()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label7;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.springframework.expression.PropertyAccessor) $r5;

        $r6 = interfaceinvoke r10.<org.springframework.expression.PropertyAccessor: java.lang.Class[] getSpecificTargetClasses()>();

        if $r6 != null goto label2;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r10);

        goto label7;

     label2:
        if r7 == null goto label7;

        i2 = 0;

        i0 = lengthof $r6;

        i3 = 0;

        goto label6;

     label3:
        r8 = $r6[i3];

        if r8 != r7 goto label4;

        $i1 = i2;

        i2 = i2 + 1;

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>($i1, r10);

        goto label5;

     label4:
        $z0 = virtualinvoke r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r7);

        if $z0 == 0 goto label5;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r10);

     label5:
        i3 = i3 + 1;

     label6:
        if i3 < i0 goto label3;

     label7:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r9.<java.util.List: boolean addAll(java.util.Collection)>($r0);

        interfaceinvoke $r9.<java.util.List: boolean addAll(java.util.Collection)>($r1);

        return $r9;
    }
}
