public class org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer
{
    private final org.waveprotocol.wave.model.id.WaveId waveId;
    private final java.util.Map channels;
    private final org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$DeltaChannelFactory deltaChannelFactory;
    private final org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$OperationChannelFactory opChannelFactory;
    private final org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelFactory viewFactory;
    private final org.waveprotocol.wave.common.logging.LoggerBundle logger;
    private final org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory unsavedDataListenerFactory;
    private final org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory dataFactory;
    private final org.waveprotocol.wave.model.version.HashedVersionFactory hashFactory;
    private final java.util.List onConnected;
    private org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State state;
    private boolean openFinished;
    private org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel viewChannel;
    private int connectionTag;
    private org.waveprotocol.wave.model.id.IdFilter waveletFilter;
    private org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener muxListener;
    private final org.waveprotocol.wave.model.util.Scheduler scheduler;

    private static org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$DeltaChannelFactory createDeltaChannelFactory(org.waveprotocol.wave.common.logging.LoggerBundle)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$1 $r0;
        org.waveprotocol.wave.common.logging.LoggerBundle r1;

        r1 := @parameter0: org.waveprotocol.wave.common.logging.LoggerBundle;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$1;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$1: void <init>(org.waveprotocol.wave.common.logging.LoggerBundle)>(r1);

        return $r0;
    }

    private static org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$OperationChannelFactory createOperationChannelFactory(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory, org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$2 $r0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext r1;
        org.waveprotocol.wave.model.id.WaveId r3;
        org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory r2;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory;

        r1 := @parameter2: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$2;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$2: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext,org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory)>(r1, r2);

        return $r0;
    }

    public void <init>(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelFactory, org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory, org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext, org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory, org.waveprotocol.wave.model.util.Scheduler, org.waveprotocol.wave.model.version.HashedVersionFactory)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext r2;
        org.waveprotocol.wave.model.id.WaveId r1;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelFactory r7;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory r5;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3, $r11;
        org.waveprotocol.wave.model.version.HashedVersionFactory r10;
        org.waveprotocol.wave.model.util.Scheduler r9;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$OperationChannelFactory $r6;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory r8;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$DeltaChannelFactory $r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r7 := @parameter1: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelFactory;

        r8 := @parameter2: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory;

        r2 := @parameter3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext;

        r5 := @parameter4: org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory;

        r9 := @parameter5: org.waveprotocol.wave.model.util.Scheduler;

        r10 := @parameter6: org.waveprotocol.wave.model.version.HashedVersionFactory;

        $r3 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext: org.waveprotocol.wave.common.logging.LoggerBundle delta>;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$DeltaChannelFactory createDeltaChannelFactory(org.waveprotocol.wave.common.logging.LoggerBundle)>($r3);

        $r6 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$OperationChannelFactory createOperationChannelFactory(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory,org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext)>(r1, r5, r2);

        $r11 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$LoggerContext: org.waveprotocol.wave.common.logging.LoggerBundle view>;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$DeltaChannelFactory,org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$OperationChannelFactory,org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelFactory,org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory,org.waveprotocol.wave.model.util.Scheduler,org.waveprotocol.wave.common.logging.LoggerBundle,org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory,org.waveprotocol.wave.model.version.HashedVersionFactory)>(r1, $r4, $r6, r7, r8, r9, $r11, r5, r10);

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r8, "null dataFactory");

        return;
    }

    void <init>(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$DeltaChannelFactory, org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$OperationChannelFactory, org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelFactory, org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory, org.waveprotocol.wave.model.util.Scheduler, org.waveprotocol.wave.common.logging.LoggerBundle, org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory, org.waveprotocol.wave.model.version.HashedVersionFactory)
    {
        org.waveprotocol.wave.model.id.WaveId r3;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelFactory r6;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State $r10;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        java.util.HashMap $r1;
        org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory r9;
        org.waveprotocol.wave.common.logging.LoggerBundle r8;
        java.util.ArrayList $r2;
        org.waveprotocol.wave.model.version.HashedVersionFactory r12;
        org.waveprotocol.wave.model.util.Scheduler r11;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$OperationChannelFactory r5;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory r7;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$DeltaChannelFactory r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r4 := @parameter1: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$DeltaChannelFactory;

        r5 := @parameter2: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$OperationChannelFactory;

        r6 := @parameter3: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelFactory;

        r7 := @parameter4: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory;

        r11 := @parameter5: org.waveprotocol.wave.model.util.Scheduler;

        r8 := @parameter6: org.waveprotocol.wave.common.logging.LoggerBundle;

        r9 := @parameter7: org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory;

        r12 := @parameter8: org.waveprotocol.wave.model.version.HashedVersionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map channels> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.List onConnected> = $r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: boolean openFinished> = 0;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: int connectionTag> = 0;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.WaveId waveId> = r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$DeltaChannelFactory deltaChannelFactory> = r4;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$OperationChannelFactory opChannelFactory> = r5;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelFactory viewFactory> = r6;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory dataFactory> = r7;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger> = r8;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory unsavedDataListenerFactory> = r9;

        $r10 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State NOT_CONNECTED>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State state> = $r10;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.util.Scheduler scheduler> = r11;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.version.HashedVersionFactory hashFactory> = r12;

        return;
    }

    public void open(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener, org.waveprotocol.wave.model.id.IdFilter, java.util.Collection)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.model.id.WaveletId $r11;
        java.util.Map $r4;
        org.waveprotocol.wave.model.version.HashedVersion $r9, $r13;
        org.waveprotocol.wave.model.id.IdFilter r2;
        boolean $z0, $z1;
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility $r12;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener r1;
        java.util.Iterator $r5;
        java.util.Collection r3;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r8, $r10, $r14;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r15;
        java.lang.Object $r6;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet r7;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener;

        r2 := @parameter1: org.waveprotocol.wave.model.id.IdFilter;

        r3 := @parameter2: java.util.Collection;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener muxListener> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.IdFilter waveletFilter> = r2;

     label1:
        $z0 = interfaceinvoke r3.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r5 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet) $r6;

        $r8 = r7.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData snapshot>;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r8, "Snapshot has no wavelet");

        $r9 = r7.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet: org.waveprotocol.wave.model.version.HashedVersion committedVersion>;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r9, "Known wavelet has null committed version");

        $r10 = r7.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData snapshot>;

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r14 = r7.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData snapshot>;

        $r13 = r7.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet: org.waveprotocol.wave.model.version.HashedVersion committedVersion>;

        $r12 = r7.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility accessibility>;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void addOperationChannel(org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.concurrencycontrol.channel.Accessibility,boolean)>($r11, $r14, $r13, $r12, 0);

        goto label2;

     label3:
        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void maybeOpenFinished()>();

     label4:
        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map signaturesFromWavelets(java.util.Collection)>(r3);

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void connect(java.util.Map)>($r4);

     label5:
        goto label7;

     label6:
        $r15 := @caughtexception;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void shutdown(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.ChannelException)>("Multiplexer open failed.", $r15);

     label7:
        return;

        catch org.waveprotocol.wave.concurrencycontrol.common.ChannelException from label1 to label5 with label6;
    }

    public void open(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener, org.waveprotocol.wave.model.id.IdFilter)
    {
        java.util.List $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener r1;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.model.id.IdFilter r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener;

        r2 := @parameter1: org.waveprotocol.wave.model.id.IdFilter;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void open(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener,org.waveprotocol.wave.model.id.IdFilter,java.util.Collection)>(r1, r2, $r3);

        return;
    }

    public void close()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode OK>;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void shutdown(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,java.lang.Throwable)>($r1, "View closed.", null);

        return;
    }

    public void createOperationChannel(org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        long $l0;
        org.waveprotocol.wave.model.wave.ParticipantId r8;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r11;
        org.waveprotocol.wave.model.version.HashedVersionFactory $r4;
        java.util.Map $r2;
        org.waveprotocol.wave.model.version.HashedVersion $r6;
        java.lang.String $r16;
        boolean $z0;
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility $r12;
        org.waveprotocol.wave.model.id.WaveletName $r5;
        org.waveprotocol.wave.model.id.WaveId $r3, $r10;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r17;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r18;
        org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot $r7;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory $r9;
        java.lang.StringBuilder $r13, $r14, $r15;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r8 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map channels>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation channel already exists for: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r16);

     label1:
        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.version.HashedVersionFactory hashFactory>;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r3, r1);

        $r6 = interfaceinvoke $r4.<org.waveprotocol.wave.model.version.HashedVersionFactory: org.waveprotocol.wave.model.version.HashedVersion createVersionZero(org.waveprotocol.wave.model.id.WaveletName)>($r5);

        $r9 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory dataFactory>;

        $r7 = new org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot;

        $r10 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke $r7.<org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,long)>($r10, r1, r8, $r6, $l0);

        $r11 = interfaceinvoke $r9.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory: org.waveprotocol.wave.model.wave.data.ReadableWaveletData create(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>($r7);

        $r17 = (org.waveprotocol.wave.model.wave.data.ObservableWaveletData) $r11;

     label2:
        $r12 = <org.waveprotocol.wave.concurrencycontrol.channel.Accessibility: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility READ_WRITE>;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void addOperationChannel(org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.concurrencycontrol.channel.Accessibility,boolean)>(r1, $r17, $r6, $r12, 1);

     label3:
        goto label5;

     label4:
        $r18 := @caughtexception;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void shutdown(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.ChannelException)>("Creating operation channel failed.", $r18);

     label5:
        return;

        catch org.waveprotocol.wave.concurrencycontrol.common.ChannelException from label2 to label3 with label4;
    }

    private org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener createViewListener(java.util.Map)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3 $r1;
        java.util.Map r2;
        int i0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r2 := @parameter0: java.util.Map;

        i0 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: int connectionTag>;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl,java.util.Map,int)>(r0, r2, i0);

        return $r1;
    }

    private void addOperationChannel(org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.wave.data.ObservableWaveletData, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.concurrencycontrol.channel.Accessibility, boolean) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility r3;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet $r4;
        org.waveprotocol.wave.model.version.HashedVersion $r5, r6;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        r6 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        r3 := @parameter3: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility;

        z0 := @parameter4: boolean;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet createStacklet(org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.concurrencycontrol.channel.Accessibility,boolean)>(r1, r2, r3, z0);

        if z0 == 0 goto label1;

        $r5 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void initialiseLocallyCreatedStacklet(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>($r4, r1, r2, r6, $r5);

     label1:
        return;
    }

    private void initialiseLocallyCreatedStacklet(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet, org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.wave.data.ObservableWaveletData, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r5;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r8;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r10, $r11;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet r4;
        java.util.List $r9;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4 $r3;
        org.waveprotocol.wave.model.version.HashedVersion r6, r7;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r4 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet;

        r8 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r5 := @parameter2: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        r6 := @parameter3: org.waveprotocol.wave.model.version.HashedVersion;

        r7 := @parameter4: org.waveprotocol.wave.model.version.HashedVersion;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State state>;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State CONNECTED>;

        if $r2 != $r1 goto label4;

     label1:
        virtualinvoke r4.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: void onWaveletSnapshot(org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>(r5, r6, r7);

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;

        $r11 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.common.ChannelException exceptionWithContext(org.waveprotocol.wave.concurrencycontrol.common.ChannelException,org.waveprotocol.wave.model.id.WaveletId)>($r10, r8);

        throw $r11;

     label4:
        $r9 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.List onConnected>;

        $r3 = new org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4;

        specialinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl,org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.id.WaveletId)>(r0, r4, r5, r6, r7, r8);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r3);

     label5:
        return;

        catch org.waveprotocol.wave.concurrencycontrol.common.ChannelException from label1 to label2 with label3;
    }

    private org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet createStacklet(org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.wave.data.ObservableWaveletData, org.waveprotocol.wave.concurrencycontrol.channel.Accessibility, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel $r10;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet $r11;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$OperationChannelFactory $r7;
        java.util.Map $r2, $r12;
        org.waveprotocol.wave.model.version.HashedVersion $r8;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$DeltaChannelFactory $r4;
        java.lang.String $r22;
        boolean $z0, z1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletChannel $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility r9;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener $r13, $r14;
        org.waveprotocol.wave.model.id.WaveId $r18;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r6;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel $r5;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel $r15;
        java.lang.StringBuilder $r16, $r17, $r19, $r20, $r21;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        r9 := @parameter2: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility;

        z1 := @parameter3: boolean;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map channels>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create duplicate channel for wavelet: ");

        $r18 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r22);

     label1:
        $r3 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletChannel createWaveletChannel(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$DeltaChannelFactory deltaChannelFactory>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$DeltaChannelFactory: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel create(org.waveprotocol.wave.concurrencycontrol.channel.WaveletChannel)>($r3);

        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$OperationChannelFactory opChannelFactory>;

        $r8 = interfaceinvoke r6.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        $r10 = interfaceinvoke $r7.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$OperationChannelFactory: org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel create(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.concurrencycontrol.channel.Accessibility)>($r5, r1, $r8, r9);

        $r11 = new org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet;

        specialinvoke $r11.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$MultiplexedDeltaChannel,org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel,boolean,org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$1)>($r5, $r10, z1, null);

        virtualinvoke $r11.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: void reset()>();

        $r12 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map channels>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r11);

        $r13 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener muxListener>;

        if $r13 == null goto label2;

        $r14 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener muxListener>;

        $r15 = virtualinvoke $r11.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel getOperationChannel()>();

        interfaceinvoke $r14.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener: void onOperationChannelCreated(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.concurrencycontrol.channel.Accessibility)>($r15, r6, r9);

     label2:
        return $r11;
    }

    private void onConnected()
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State $r1;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        java.lang.Runnable r6;
        java.util.List $r2, $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State CONNECTED>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State state> = $r1;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.List onConnected>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.Runnable) $r5;

        interfaceinvoke r6.<java.lang.Runnable: void run()>();

        goto label1;

     label2:
        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.List onConnected>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        return;
    }

    private void onChannelException(org.waveprotocol.wave.concurrencycontrol.common.ChannelException)
    {
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r3;
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode $r4;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException r0;

        r3 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: org.waveprotocol.wave.concurrencycontrol.common.Recoverable getRecoverable()>();

        $r2 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable RECOVERABLE>;

        if $r1 == $r2 goto label1;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode getResponseCode()>();

        specialinvoke r3.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void shutdown(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,java.lang.Throwable)>($r4, "Channel Exception", r0);

        goto label2;

     label1:
        specialinvoke r3.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void reconnect(org.waveprotocol.wave.concurrencycontrol.common.ChannelException)>(r0);

     label2:
        return;
    }

    private void connect(java.util.Map)
    {
        org.waveprotocol.wave.common.logging.Logger $r5;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelFactory $r12;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel $r13, $r14;
        java.util.Map r3;
        org.waveprotocol.wave.model.id.IdFilter $r16;
        java.lang.String $r10;
        boolean $z0;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener $r15;
        org.waveprotocol.wave.model.id.WaveId $r8, $r11;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State $r1, $r2;
        org.waveprotocol.wave.common.logging.LoggerBundle $r4;
        java.lang.StringBuilder $r6, $r7, $r9;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r3 := @parameter0: java.util.Map;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State state>;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State CONNECTED>;

        if $r2 == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cannot connect already-connected channel");

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void checkConnectVersions(java.util.Map)>(r3);

        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiplexer reconnecting wave ");

        $r8 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r10);

        $r12 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelFactory viewFactory>;

        $r11 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelFactory: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel create(org.waveprotocol.wave.model.id.WaveId)>($r11);

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel viewChannel> = $r13;

        $r14 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel viewChannel>;

        $r15 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener createViewListener(java.util.Map)>(r3);

        $r16 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.IdFilter waveletFilter>;

        interfaceinvoke $r14.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel: void open(org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener,org.waveprotocol.wave.model.id.IdFilter,java.util.Map)>($r15, $r16, r3);

        return;
    }

    private void checkConnectVersions(java.util.Map)
    {
        byte $b0, $b2;
        java.util.Map r0;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.id.WaveId $r13, $r29;
        java.util.Set $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle $r9;
        java.util.List $r22;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r17, $r19, $r28, $r30, $r31, $r32, $r34, $r36, $r38;
        org.waveprotocol.wave.common.logging.Logger $r10;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r7;
        org.waveprotocol.wave.model.id.WaveletId r6;
        long $l1, l3;
        org.waveprotocol.wave.model.version.HashedVersion r25;
        int $i4;
        org.waveprotocol.wave.model.id.IdFilter $r8, $r18;
        java.lang.String $r20, $r35;
        java.util.Map$Entry r4;
        java.util.Iterator $r2, $r23;
        java.lang.IllegalArgumentException $r37;
        java.lang.Object $r3, $r5, $r21, $r24, $r33;

        r7 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (org.waveprotocol.wave.model.id.WaveletId) $r5;

        $r8 = r7.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.IdFilter waveletFilter>;

        $z1 = staticinvoke <org.waveprotocol.wave.model.id.IdFilter: boolean accepts(org.waveprotocol.wave.model.id.IdFilter,org.waveprotocol.wave.model.id.WaveletId)>($r8, r6);

        if $z1 == 0 goto label5;

        l3 = -1L;

        $r21 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r22 = (java.util.List) $r21;

        $r23 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r24 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.waveprotocol.wave.model.version.HashedVersion) $r24;

        $b0 = l3 cmp -1L;

        if $b0 == 0 goto label3;

        $l1 = virtualinvoke r25.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b2 = $l1 cmp l3;

        $i4 = (int) $b2;

        if $i4 > 0 goto label3;

        $r37 = new java.lang.IllegalArgumentException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid reconnect versions for ");

        $r29 = r7.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r33 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r35);

        throw $r37;

     label3:
        l3 = virtualinvoke r25.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        goto label2;

     label4:
        goto label6;

     label5:
        $r9 = r7.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mux for ");

        $r13 = r7.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dropping resync versions for filtered wavelet ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", filter ");

        $r18 = r7.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.IdFilter waveletFilter>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r20);

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

     label6:
        goto label1;

     label7:
        return;
    }

    private void reconnect(org.waveprotocol.wave.concurrencycontrol.common.ChannelException)
    {
        java.lang.Object[] $r3;
        org.waveprotocol.wave.common.logging.Logger $r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        java.util.HashMap $r6;
        org.waveprotocol.wave.model.id.WaveletId r14;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel $r10;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet r17;
        java.util.Map $r7, $r15;
        int $i0, $i1;
        boolean $z0;
        java.util.Iterator $r9;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State $r4, $r5;
        java.util.Set $r8;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException r20;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1;
        java.util.List $r19;
        org.waveprotocol.wave.model.util.Scheduler $r12;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel $r18;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$5 $r11;
        java.lang.Object $r13, $r16;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r20 := @parameter0: org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = "Multiplexer disconnected in state ";

        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State state>;

        $r3[1] = $r4;

        $r3[2] = ", reconnecting.";

        interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.Logger: void logLazyObjects(java.lang.Object[])>($r3);

        $r5 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State RECONNECTING>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State state> = $r5;

        $r6 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map channels>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set keySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.waveprotocol.wave.model.id.WaveletId) $r13;

        $r15 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map channels>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r14);

        r17 = (org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet) $r16;

        virtualinvoke r17.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: void reset()>();

        $r18 = virtualinvoke r17.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel getOperationChannel()>();

        $r19 = interfaceinvoke $r18.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel: java.util.List getReconnectVersions()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, $r19);

        goto label1;

     label2:
        $i0 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: int connectionTag>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: int connectionTag> = $i1;

        $r10 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel viewChannel>;

        interfaceinvoke $r10.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel: void close()>();

        $r12 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.util.Scheduler scheduler>;

        $r11 = new org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$5;

        specialinvoke $r11.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$5: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl,java.util.Map)>(r0, $r6);

        interfaceinvoke $r12.<org.waveprotocol.wave.model.util.Scheduler: boolean schedule(org.waveprotocol.wave.model.util.Scheduler$Command)>($r11);

        return;
    }

    private void shutdown(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r11;
        org.waveprotocol.wave.common.logging.Logger $r16, $r18;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r2;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel $r8, $r20;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet r14;
        java.util.Map $r4, $r7;
        int $i0, $i1;
        java.lang.String r19;
        org.waveprotocol.wave.concurrencycontrol.common.CorruptionDetail $r10;
        boolean z0, $z1, $z3, $z4;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener $r9, $r12;
        java.util.Iterator $r6;
        java.util.Collection $r5;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State $r3;
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode r0, $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle $r15, $r17;
        java.lang.Object $r13;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode;

        r19 := @parameter1: java.lang.String;

        r11 := @parameter2: java.lang.Throwable;

        if r19 != null goto label1;

        r19 = "(No error description provided)";

     label1:
        $r1 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode OK>;

        if r0 == $r1 goto label2;

        $z4 = 1;

        $z3 = 1;

        goto label3;

     label2:
        $z4 = 0;

        $z3 = 0;

     label3:
        z0 = $z3;

        if $z4 == 0 goto label5;

        if r11 != null goto label4;

        $r17 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r18 = interfaceinvoke $r17.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r18.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>(r19);

        goto label5;

     label4:
        $r15 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r16 = interfaceinvoke $r15.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r16.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String,java.lang.Throwable)>(r19, r11);

     label5:
        $r20 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel viewChannel>;

        if $r20 == null goto label9;

        $i0 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: int connectionTag>;

        $i1 = $i0 + 1;

        r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: int connectionTag> = $i1;

        $r3 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State NOT_CONNECTED>;

        r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$State state> = $r3;

        $r4 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map channels>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r13 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet) $r13;

        virtualinvoke r14.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: void close()>();

        goto label6;

     label7:
        $r7 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map channels>;

        interfaceinvoke $r7.<java.util.Map: void clear()>();

        $r8 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel viewChannel>;

        interfaceinvoke $r8.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel: void close()>();

        r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel viewChannel> = null;

        $r9 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener muxListener>;

        if $r9 == null goto label8;

        if z0 == 0 goto label8;

        $r12 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener muxListener>;

        $r10 = new org.waveprotocol.wave.concurrencycontrol.common.CorruptionDetail;

        specialinvoke $r10.<org.waveprotocol.wave.concurrencycontrol.common.CorruptionDetail: void <init>(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,java.lang.Throwable)>(r0, r19, r11);

        interfaceinvoke $r12.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener: void onFailed(org.waveprotocol.wave.concurrencycontrol.common.CorruptionDetail)>($r10);

     label8:
        r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener muxListener> = null;

     label9:
        return;
    }

    private void shutdown(java.lang.String, org.waveprotocol.wave.concurrencycontrol.common.ChannelException)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode $r2;
        java.lang.String r3;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode getResponseCode()>();

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void shutdown(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,java.lang.Throwable)>($r2, r3, r1);

        return;
    }

    private org.waveprotocol.wave.concurrencycontrol.channel.WaveletChannel createWaveletChannel(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r1;
        org.waveprotocol.wave.model.id.WaveletId r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$6 $r0;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$6;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$6: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl,org.waveprotocol.wave.model.id.WaveletId)>(r1, r2);

        return $r0;
    }

    private void maybeOpenFinished()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: boolean openFinished>;

        if $z0 != 0 goto label1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: boolean openFinished> = 1;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener muxListener>;

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener: void onOpenFinished()>();

     label1:
        return;
    }

    private org.waveprotocol.wave.concurrencycontrol.common.ChannelException exceptionWithContext(org.waveprotocol.wave.concurrencycontrol.common.ChannelException, org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r3;
        org.waveprotocol.wave.model.id.WaveId $r6;
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode $r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r4;
        org.waveprotocol.wave.model.id.WaveletId r5;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r0, r1;

        r4 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        r5 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode getResponseCode()>();

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: org.waveprotocol.wave.concurrencycontrol.common.Recoverable getRecoverable()>();

        $r6 = r4.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,java.lang.Throwable,org.waveprotocol.wave.concurrencycontrol.common.Recoverable,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r2, "Nested ChannelException", r1, $r3, $r6, r5);

        return $r0;
    }

    static java.util.Map signaturesFromWavelets(java.util.Collection)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility $r5;
        java.util.Iterator $r2;
        java.util.Collection r1;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r6;
        java.util.HashMap $r0;
        org.waveprotocol.wave.model.id.WaveletId $r7;
        java.util.List $r9;
        org.waveprotocol.wave.model.version.HashedVersion $r8;
        java.lang.Object $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet r4;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Collection;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet) $r3;

        $r5 = r4.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility accessibility>;

        $z1 = virtualinvoke $r5.<org.waveprotocol.wave.concurrencycontrol.channel.Accessibility: boolean isReadable()>();

        if $z1 == 0 goto label2;

        r6 = r4.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$KnownWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData snapshot>;

        $r7 = interfaceinvoke r6.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r8 = interfaceinvoke r6.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        $r9 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r8);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r9);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    private java.util.List createVersionZeroResync(org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r2;
        java.util.List $r5, $r6;
        org.waveprotocol.wave.model.version.HashedVersionFactory $r3;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r0;
        org.waveprotocol.wave.model.version.HashedVersion $r4;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r0 = new org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        $r3 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.version.HashedVersionFactory hashFactory>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.version.HashedVersionFactory: org.waveprotocol.wave.model.version.HashedVersion createVersionZero(org.waveprotocol.wave.model.id.WaveletName)>(r2);

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,long,java.lang.Iterable)>(null, $r4, 0L, $r5);

        $r6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r0);

        return $r6;
    }

    static int access$000(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        $i0 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: int connectionTag>;

        return $i0;
    }

    static java.util.Map access$100(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        java.util.Map $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map channels>;

        return $r1;
    }

    static org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet access$200(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl, org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.wave.data.ObservableWaveletData, org.waveprotocol.wave.concurrencycontrol.channel.Accessibility, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet $r4;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter2: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        r3 := @parameter3: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility;

        z0 := @parameter4: boolean;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet createStacklet(org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.concurrencycontrol.channel.Accessibility,boolean)>(r1, r2, r3, z0);

        return $r4;
    }

    static org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory access$300(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory unsavedDataListenerFactory>;

        return $r1;
    }

    static org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener access$400(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener muxListener>;

        return $r1;
    }

    static org.waveprotocol.wave.concurrencycontrol.common.ChannelException access$500(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl, org.waveprotocol.wave.concurrencycontrol.common.ChannelException, org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r2;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException r1, $r3;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r1 := @parameter1: org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        r2 := @parameter2: org.waveprotocol.wave.model.id.WaveletId;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.common.ChannelException exceptionWithContext(org.waveprotocol.wave.concurrencycontrol.common.ChannelException,org.waveprotocol.wave.model.id.WaveletId)>(r1, r2);

        return $r3;
    }

    static org.waveprotocol.wave.common.logging.LoggerBundle access$600(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        return $r1;
    }

    static org.waveprotocol.wave.model.id.WaveId access$700(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.model.id.WaveId $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        return $r1;
    }

    static java.util.List access$800(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl, org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.model.id.WaveletName r1;
        java.util.List $r2;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.List createVersionZeroResync(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        return $r2;
    }

    static org.waveprotocol.wave.model.version.HashedVersionFactory access$900(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.model.version.HashedVersionFactory $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.version.HashedVersionFactory hashFactory>;

        return $r1;
    }

    static void access$1000(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void maybeOpenFinished()>();

        return;
    }

    static void access$1100(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void onConnected()>();

        return;
    }

    static void access$1200(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl, org.waveprotocol.wave.concurrencycontrol.common.ChannelException)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r1 := @parameter1: org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void reconnect(org.waveprotocol.wave.concurrencycontrol.common.ChannelException)>(r1);

        return;
    }

    static void access$1300(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl, org.waveprotocol.wave.concurrencycontrol.common.ChannelException)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r1 := @parameter1: org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void onChannelException(org.waveprotocol.wave.concurrencycontrol.common.ChannelException)>(r1);

        return;
    }

    static org.waveprotocol.wave.model.util.Scheduler access$1400(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.model.util.Scheduler $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.util.Scheduler scheduler>;

        return $r1;
    }

    static void access$1500(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl, java.lang.String, org.waveprotocol.wave.concurrencycontrol.common.ChannelException)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        java.lang.String r1;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException r2;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void shutdown(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.ChannelException)>(r1, r2);

        return;
    }

    static void access$1700(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl, java.util.Map)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        java.util.Map r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r1 := @parameter1: java.util.Map;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void connect(java.util.Map)>(r1);

        return;
    }

    static org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel access$1800(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r0;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel viewChannel>;

        return $r1;
    }
}
