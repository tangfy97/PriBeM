public class org.bouncycastle.crypto.generators.ECKeyPairGenerator extends java.lang.Object implements org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator, org.bouncycastle.math.ec.ECConstants
{
    org.bouncycastle.crypto.params.ECDomainParameters params;
    java.security.SecureRandom random;

    public void <init>()
    {
        org.bouncycastle.crypto.generators.ECKeyPairGenerator r0;

        r0 := @this: org.bouncycastle.crypto.generators.ECKeyPairGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init(org.bouncycastle.crypto.KeyGenerationParameters)
    {
        java.security.SecureRandom $r3;
        org.bouncycastle.crypto.KeyGenerationParameters r0;
        org.bouncycastle.crypto.generators.ECKeyPairGenerator r2;
        org.bouncycastle.crypto.params.ECDomainParameters $r4;
        org.bouncycastle.crypto.params.ECKeyGenerationParameters r1;

        r2 := @this: org.bouncycastle.crypto.generators.ECKeyPairGenerator;

        r0 := @parameter0: org.bouncycastle.crypto.KeyGenerationParameters;

        r1 = (org.bouncycastle.crypto.params.ECKeyGenerationParameters) r0;

        $r3 = virtualinvoke r1.<org.bouncycastle.crypto.params.ECKeyGenerationParameters: java.security.SecureRandom getRandom()>();

        r2.<org.bouncycastle.crypto.generators.ECKeyPairGenerator: java.security.SecureRandom random> = $r3;

        $r4 = virtualinvoke r1.<org.bouncycastle.crypto.params.ECKeyGenerationParameters: org.bouncycastle.crypto.params.ECDomainParameters getDomainParameters()>();

        r2.<org.bouncycastle.crypto.generators.ECKeyPairGenerator: org.bouncycastle.crypto.params.ECDomainParameters params> = $r4;

        return;
    }

    public org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        org.bouncycastle.crypto.params.ECPublicKeyParameters $r7;
        org.bouncycastle.crypto.params.ECPrivateKeyParameters $r9;
        java.security.SecureRandom $r12;
        org.bouncycastle.math.ec.ECPoint $r4, $r5;
        org.bouncycastle.crypto.params.ECDomainParameters $r1, $r3, $r8, $r10;
        org.bouncycastle.crypto.AsymmetricCipherKeyPair $r6;
        int $i0, $i1;
        java.math.BigInteger $r2, $r11, $r13;
        boolean $z0;
        org.bouncycastle.crypto.generators.ECKeyPairGenerator r0;

        r0 := @this: org.bouncycastle.crypto.generators.ECKeyPairGenerator;

        $r1 = r0.<org.bouncycastle.crypto.generators.ECKeyPairGenerator: org.bouncycastle.crypto.params.ECDomainParameters params>;

        $r2 = virtualinvoke $r1.<org.bouncycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

     label1:
        $r11 = new java.math.BigInteger;

        $r12 = r0.<org.bouncycastle.crypto.generators.ECKeyPairGenerator: java.security.SecureRandom random>;

        specialinvoke $r11.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, $r12);

        $r13 = <org.bouncycastle.crypto.generators.ECKeyPairGenerator: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r11.<java.math.BigInteger: boolean equals(java.lang.Object)>($r13);

        if $z0 != 0 goto label1;

        $i1 = virtualinvoke $r11.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i1 >= 0 goto label1;

        $r3 = r0.<org.bouncycastle.crypto.generators.ECKeyPairGenerator: org.bouncycastle.crypto.params.ECDomainParameters params>;

        $r4 = virtualinvoke $r3.<org.bouncycastle.crypto.params.ECDomainParameters: org.bouncycastle.math.ec.ECPoint getG()>();

        $r5 = virtualinvoke $r4.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECPoint multiply(java.math.BigInteger)>($r11);

        $r6 = new org.bouncycastle.crypto.AsymmetricCipherKeyPair;

        $r7 = new org.bouncycastle.crypto.params.ECPublicKeyParameters;

        $r8 = r0.<org.bouncycastle.crypto.generators.ECKeyPairGenerator: org.bouncycastle.crypto.params.ECDomainParameters params>;

        specialinvoke $r7.<org.bouncycastle.crypto.params.ECPublicKeyParameters: void <init>(org.bouncycastle.math.ec.ECPoint,org.bouncycastle.crypto.params.ECDomainParameters)>($r5, $r8);

        $r9 = new org.bouncycastle.crypto.params.ECPrivateKeyParameters;

        $r10 = r0.<org.bouncycastle.crypto.generators.ECKeyPairGenerator: org.bouncycastle.crypto.params.ECDomainParameters params>;

        specialinvoke $r9.<org.bouncycastle.crypto.params.ECPrivateKeyParameters: void <init>(java.math.BigInteger,org.bouncycastle.crypto.params.ECDomainParameters)>($r11, $r10);

        specialinvoke $r6.<org.bouncycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters)>($r7, $r9);

        return $r6;
    }
}
