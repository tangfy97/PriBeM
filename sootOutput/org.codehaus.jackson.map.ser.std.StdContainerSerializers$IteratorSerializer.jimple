public class org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer extends org.codehaus.jackson.map.ser.std.AsArraySerializerBase
{

    public void <init>(org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer r0;
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.BeanProperty r3;
        boolean z0;

        r0 := @this: org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>(class "Ljava/util/Iterator;", r1, z0, r2, r3, null);

        return;
    }

    public org.codehaus.jackson.map.ser.std.ContainerSerializerBase _withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer $r0, r1;
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.type.JavaType $r4;
        org.codehaus.jackson.map.BeanProperty $r3;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer;

        r2 := @parameter0: org.codehaus.jackson.map.TypeSerializer;

        $r0 = new org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer;

        $r4 = r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $z0 = r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer: boolean _staticTyping>;

        $r3 = r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>($r4, $z0, r2, $r3);

        return $r0;
    }

    public void serializeContents(java.util.Iterator, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        java.util.Iterator r0;
        org.codehaus.jackson.map.SerializerProvider r5;
        org.codehaus.jackson.map.JsonSerializer $r7, r9, r11;
        org.codehaus.jackson.map.BeanProperty $r6;
        org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer r1;
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.JsonGenerator r8;
        java.lang.Object $r3;
        java.lang.Class $r4, r10;
        boolean $z0, $z1;

        r1 := @this: org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer;

        r0 := @parameter0: java.util.Iterator;

        r8 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r5 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        r2 = r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        r9 = null;

        r10 = null;

     label1:
        $r3 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        if $r3 != null goto label2;

        virtualinvoke r5.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>(r8);

        goto label6;

     label2:
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        if $r4 != r10 goto label3;

        r11 = r9;

        goto label4;

     label3:
        $r6 = r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r7 = virtualinvoke r5.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>($r4, $r6);

        r11 = $r7;

        r9 = $r7;

        r10 = $r4;

     label4:
        if r2 != null goto label5;

        virtualinvoke r11.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r3, r8, r5);

        goto label6;

     label5:
        virtualinvoke r11.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r3, r8, r5, r2);

     label6:
        $z1 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

     label7:
        return;
    }

    public volatile void serializeContents(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        java.util.Iterator $r4;
        org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Object r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.util.Iterator) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IteratorSerializer: void serializeContents(java.util.Iterator,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r2, r3);

        return;
    }
}
