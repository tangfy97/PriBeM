class org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter extends java.lang.Object
{
    private static final java.lang.String GENERIC_CLASS_LOADER_NAME;
    private static final java.lang.String CLASS_PRE_PROCESSOR_NAME;
    private final java.lang.ClassLoader classLoader;
    private final java.lang.Class wlPreProcessorClass;
    private final java.lang.reflect.Method addPreProcessorMethod;
    private final java.lang.reflect.Method getClassFinderMethod;
    private final java.lang.reflect.Method getParentMethod;
    private final java.lang.reflect.Constructor wlGenericClassLoaderConstructor;

    public void <init>(java.lang.ClassLoader)
    {
        java.lang.IllegalStateException $r24;
        java.lang.reflect.Constructor $r17;
        org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter r0;
        java.lang.String $r19, $r22;
        java.lang.reflect.Method $r7, $r10, $r13, $r15;
        java.lang.Class[] $r5, $r9, $r12, $r14;
        java.lang.Exception $r23;
        java.lang.Class $r2, $r3, $r4, $r6, $r8, $r11, $r16;
        java.lang.StringBuilder $r18, $r20, $r21;
        java.lang.ClassLoader r1;

        r0 := @this: org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r2 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("weblogic.utils.classloaders.GenericClassLoader");

        $r3 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("weblogic.utils.classloaders.ClassPreProcessor");

        r0.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.Class wlPreProcessorClass> = $r3;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = newarray (java.lang.Class)[1];

        $r6 = r0.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.Class wlPreProcessorClass>;

        $r5[0] = $r6;

        $r7 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("addInstanceClassPreProcessor", $r5);

        r0.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.reflect.Method addPreProcessorMethod> = $r7;

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = newarray (java.lang.Class)[0];

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getClassFinder", $r9);

        r0.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.reflect.Method getClassFinderMethod> = $r10;

        $r11 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = newarray (java.lang.Class)[0];

        $r13 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getParent", $r12);

        r0.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.reflect.Method getParentMethod> = $r13;

        $r14 = newarray (java.lang.Class)[2];

        $r15 = r0.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.reflect.Method getClassFinderMethod>;

        $r16 = virtualinvoke $r15.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r14[0] = $r16;

        $r14[1] = class "Ljava/lang/ClassLoader;";

        $r17 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r14);

        r0.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.reflect.Constructor wlGenericClassLoaderConstructor> = $r17;

     label2:
        goto label4;

     label3:
        $r23 := @caughtexception;

        $r24 = new java.lang.IllegalStateException;

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not initialize WebLogic LoadTimeWeaver because WebLogic 10 API classes are not available", $r23);

        throw $r24;

     label4:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("ClassLoader must be instance of [");

        $r19 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.springframework.util.Assert: void isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String)>($r2, r1, $r22);

        r0.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.ClassLoader classLoader> = r1;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void addTransformer(java.lang.instrument.ClassFileTransformer)
    {
        java.lang.Throwable $r16;
        java.lang.IllegalStateException $r13, $r15;
        java.lang.Object[] $r9;
        org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter r2;
        java.lang.instrument.ClassFileTransformer r0;
        java.lang.reflect.Method $r11;
        java.lang.Class[] $r6;
        org.springframework.instrument.classloading.weblogic.WebLogicClassPreProcessorAdapter $r1;
        java.lang.Exception $r12;
        java.lang.reflect.InvocationTargetException $r14;
        java.lang.Class $r4, $r7;
        java.lang.Object $r8;
        java.lang.ClassLoader $r3, $r5, $r10;

        r2 := @this: org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter;

        r0 := @parameter0: java.lang.instrument.ClassFileTransformer;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ClassFileTransformer must not be null");

     label1:
        $r1 = new org.springframework.instrument.classloading.weblogic.WebLogicClassPreProcessorAdapter;

        $r3 = r2.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.ClassLoader classLoader>;

        specialinvoke $r1.<org.springframework.instrument.classloading.weblogic.WebLogicClassPreProcessorAdapter: void <init>(java.lang.instrument.ClassFileTransformer,java.lang.ClassLoader)>(r0, $r3);

        $r4 = r2.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.Class wlPreProcessorClass>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r6 = newarray (java.lang.Class)[1];

        $r7 = r2.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.Class wlPreProcessorClass>;

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r5, $r6, $r1);

        $r11 = r2.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.reflect.Method addPreProcessorMethod>;

        $r10 = r2.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.ClassLoader classLoader>;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = $r8;

        virtualinvoke $r11.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r10, $r9);

     label2:
        goto label5;

     label3:
        $r14 := @caughtexception;

        $r15 = new java.lang.IllegalStateException;

        $r16 = virtualinvoke $r14.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("WebLogic addInstanceClassPreProcessor method threw exception", $r16);

        throw $r15;

     label4:
        $r12 := @caughtexception;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not invoke WebLogic addInstanceClassPreProcessor method", $r12);

        throw $r13;

     label5:
        return;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter r0;
        java.lang.ClassLoader $r1;

        r0 := @this: org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter;

        $r1 = r0.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.ClassLoader classLoader>;

        return $r1;
    }

    public java.lang.ClassLoader getThrowawayClassLoader()
    {
        java.lang.Throwable $r17;
        java.lang.IllegalStateException $r14, $r16;
        java.lang.Object[] $r1, $r5, $r9;
        java.lang.reflect.Constructor $r10;
        org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter r0;
        java.lang.reflect.Method $r3, $r7;
        java.lang.Exception $r13;
        java.lang.reflect.InvocationTargetException $r15;
        java.lang.Object $r4, $r8, $r11;
        java.lang.ClassLoader $r2, $r6, $r12;

        r0 := @this: org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter;

     label1:
        $r3 = r0.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.reflect.Method getClassFinderMethod>;

        $r2 = r0.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.ClassLoader classLoader>;

        $r1 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r1);

        $r7 = r0.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.reflect.Method getParentMethod>;

        $r6 = r0.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.ClassLoader classLoader>;

        $r5 = newarray (java.lang.Object)[0];

        $r8 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r5);

        $r10 = r0.<org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.reflect.Constructor wlGenericClassLoaderConstructor>;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = $r4;

        $r9[1] = $r8;

        $r11 = virtualinvoke $r10.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9);

        $r12 = (java.lang.ClassLoader) $r11;

     label2:
        return $r12;

     label3:
        $r15 := @caughtexception;

        $r16 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke $r15.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("WebLogic GenericClassLoader constructor failed", $r17);

        throw $r16;

     label4:
        $r13 := @caughtexception;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not construct WebLogic GenericClassLoader", $r13);

        throw $r14;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static void <clinit>()
    {
        <org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.String CLASS_PRE_PROCESSOR_NAME> = "weblogic.utils.classloaders.ClassPreProcessor";

        <org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter: java.lang.String GENERIC_CLASS_LOADER_NAME> = "weblogic.utils.classloaders.GenericClassLoader";

        return;
    }
}
