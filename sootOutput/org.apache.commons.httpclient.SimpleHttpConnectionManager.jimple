public class org.apache.commons.httpclient.SimpleHttpConnectionManager extends java.lang.Object implements org.apache.commons.httpclient.HttpConnectionManager
{
    private static final org.apache.commons.logging.Log LOG;
    private static final java.lang.String MISUSE_MESSAGE;
    protected org.apache.commons.httpclient.HttpConnection httpConnection;
    private org.apache.commons.httpclient.params.HttpConnectionManagerParams params;
    private long idleStartTime;
    private volatile boolean inUse;
    private boolean alwaysClose;
    static java.lang.Class class$org$apache$commons$httpclient$SimpleHttpConnectionManager;

    static void finishLastResponse(org.apache.commons.httpclient.HttpConnection)
    {
        java.io.IOException $r2;
        org.apache.commons.httpclient.HttpConnection r0;
        java.io.InputStream $r1;

        r0 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream getLastResponseInputStream()>();

        if $r1 == null goto label4;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void setLastResponseInputStream(java.io.InputStream)>(null);

     label1:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void <init>(boolean)
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.httpclient.params.HttpConnectionManagerParams;

        specialinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void <init>()>();

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params> = $r1;

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: long idleStartTime> = 9223372036854775807L;

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean inUse> = 0;

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean alwaysClose> = 0;

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean alwaysClose> = z0;

        return;
    }

    public void <init>()
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.httpclient.params.HttpConnectionManagerParams;

        specialinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void <init>()>();

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params> = $r1;

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: long idleStartTime> = 9223372036854775807L;

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean inUse> = 0;

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean alwaysClose> = 0;

        return;
    }

    public org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.HostConfiguration r1;
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.HttpConnection $r2;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration,long)>(r1, 0L);

        return $r2;
    }

    public boolean isConnectionStaleCheckingEnabled()
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: boolean isStaleCheckingEnabled()>();

        return $z0;
    }

    public void setConnectionStaleCheckingEnabled(boolean)
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setStaleCheckingEnabled(boolean)>(z0);

        return;
    }

    public org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration, long)
    {
        java.net.InetAddress $r11;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r24;
        org.apache.commons.httpclient.params.HttpConnectionParams $r23;
        org.apache.commons.httpclient.HttpConnection $r1, $r3, $r4, $r5, $r7, $r8, $r10, $r12, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r22;
        long l2;
        org.apache.commons.httpclient.HostConfiguration r2;
        int $i0, $i1;
        java.lang.String $r6, $r13;
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.protocol.Protocol $r9;
        org.apache.commons.logging.Log $r16;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        r2 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        l2 := @parameter1: long;

        $r1 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        if $r1 != null goto label1;

        $r20 = new org.apache.commons.httpclient.HttpConnection;

        specialinvoke $r20.<org.apache.commons.httpclient.HttpConnection: void <init>(org.apache.commons.httpclient.HostConfiguration)>(r2);

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection> = $r20;

        $r21 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        virtualinvoke $r21.<org.apache.commons.httpclient.HttpConnection: void setHttpConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)>(r0);

        $r22 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $r23 = virtualinvoke $r22.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>();

        $r24 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        virtualinvoke $r23.<org.apache.commons.httpclient.params.HttpConnectionParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r24);

        goto label5;

     label1:
        $r3 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $z0 = virtualinvoke r2.<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>($r3);

        if $z0 == 0 goto label2;

        $r18 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $z2 = virtualinvoke r2.<org.apache.commons.httpclient.HostConfiguration: boolean proxyEquals(org.apache.commons.httpclient.HttpConnection)>($r18);

        if $z2 != 0 goto label4;

     label2:
        $r4 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $z1 = virtualinvoke $r4.<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>();

        if $z1 == 0 goto label3;

        $r17 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        virtualinvoke $r17.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label3:
        $r5 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $r6 = virtualinvoke r2.<org.apache.commons.httpclient.HostConfiguration: java.lang.String getHost()>();

        virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: void setHost(java.lang.String)>($r6);

        $r7 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $i0 = virtualinvoke r2.<org.apache.commons.httpclient.HostConfiguration: int getPort()>();

        virtualinvoke $r7.<org.apache.commons.httpclient.HttpConnection: void setPort(int)>($i0);

        $r8 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $r9 = virtualinvoke r2.<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        virtualinvoke $r8.<org.apache.commons.httpclient.HttpConnection: void setProtocol(org.apache.commons.httpclient.protocol.Protocol)>($r9);

        $r10 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $r11 = virtualinvoke r2.<org.apache.commons.httpclient.HostConfiguration: java.net.InetAddress getLocalAddress()>();

        virtualinvoke $r10.<org.apache.commons.httpclient.HttpConnection: void setLocalAddress(java.net.InetAddress)>($r11);

        $r12 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $r13 = virtualinvoke r2.<org.apache.commons.httpclient.HostConfiguration: java.lang.String getProxyHost()>();

        virtualinvoke $r12.<org.apache.commons.httpclient.HttpConnection: void setProxyHost(java.lang.String)>($r13);

        $r14 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $i1 = virtualinvoke r2.<org.apache.commons.httpclient.HostConfiguration: int getProxyPort()>();

        virtualinvoke $r14.<org.apache.commons.httpclient.HttpConnection: void setProxyPort(int)>($i1);

        goto label5;

     label4:
        $r19 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        staticinvoke <org.apache.commons.httpclient.SimpleHttpConnectionManager: void finishLastResponse(org.apache.commons.httpclient.HttpConnection)>($r19);

     label5:
        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: long idleStartTime> = 9223372036854775807L;

        $z3 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean inUse>;

        if $z3 == 0 goto label6;

        $r16 = <org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("SimpleHttpConnectionManager being used incorrectly.  Be sure that HttpMethod.releaseConnection() is always called and that only one thread and/or method is using this connection manager at a time.");

     label6:
        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean inUse> = 1;

        $r15 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        return $r15;
    }

    public org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration, long)
    {
        org.apache.commons.httpclient.HostConfiguration r1;
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.HttpConnection $r2;
        long l0;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        l0 := @parameter1: long;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>(r1, l0);

        return $r2;
    }

    public void releaseConnection(org.apache.commons.httpclient.HttpConnection)
    {
        java.lang.IllegalStateException $r5;
        org.apache.commons.httpclient.SimpleHttpConnectionManager r1;
        org.apache.commons.httpclient.HttpConnection r0, $r2, $r3, $r4;
        long $l0;
        boolean $z0;

        r1 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        r0 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r2 = r1.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        if r0 == $r2 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unexpected release of an unknown connection.");

        throw $r5;

     label1:
        $z0 = r1.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean alwaysClose>;

        if $z0 == 0 goto label2;

        $r4 = r1.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        virtualinvoke $r4.<org.apache.commons.httpclient.HttpConnection: void close()>();

        goto label3;

     label2:
        $r3 = r1.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        staticinvoke <org.apache.commons.httpclient.SimpleHttpConnectionManager: void finishLastResponse(org.apache.commons.httpclient.HttpConnection)>($r3);

     label3:
        r1.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean inUse> = 0;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r1.<org.apache.commons.httpclient.SimpleHttpConnectionManager: long idleStartTime> = $l0;

        return;
    }

    public org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        return $r1;
    }

    public void setParams(org.apache.commons.httpclient.params.HttpConnectionManagerParams)
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams r0;

        r1 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        r0 := @parameter0: org.apache.commons.httpclient.params.HttpConnectionManagerParams;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null");

        throw $r2;

     label1:
        r1.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params> = r0;

        return;
    }

    public void closeIdleConnections(long)
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.HttpConnection $r1;
        long $l0, l1, l2, $l3;
        byte $b4;
        int $i5;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        l1 := @parameter0: long;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = $l0 - l1;

        $l3 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: long idleStartTime>;

        $b4 = $l3 cmp l2;

        $i5 = (int) $b4;

        if $i5 > 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label1:
        return;
    }

    public void shutdown()
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void close()>();

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        <org.apache.commons.httpclient.SimpleHttpConnectionManager: java.lang.String MISUSE_MESSAGE> = "SimpleHttpConnectionManager being used incorrectly.  Be sure that HttpMethod.releaseConnection() is always called and that only one thread and/or method is using this connection manager at a time.";

        $r0 = <org.apache.commons.httpclient.SimpleHttpConnectionManager: java.lang.Class class$org$apache$commons$httpclient$SimpleHttpConnectionManager>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.httpclient.SimpleHttpConnectionManager: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.SimpleHttpConnectionManager");

        <org.apache.commons.httpclient.SimpleHttpConnectionManager: java.lang.Class class$org$apache$commons$httpclient$SimpleHttpConnectionManager> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.httpclient.SimpleHttpConnectionManager: java.lang.Class class$org$apache$commons$httpclient$SimpleHttpConnectionManager>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
