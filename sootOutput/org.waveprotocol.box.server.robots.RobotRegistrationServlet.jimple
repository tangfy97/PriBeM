public class org.waveprotocol.box.server.robots.RobotRegistrationServlet extends javax.servlet.http.HttpServlet
{
    private static final java.lang.String CREATE_PATH;
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private final org.waveprotocol.box.server.robots.register.RobotRegistrar robotRegistrar;
    private final java.lang.String domain;
    private final java.lang.String analyticsAccount;

    private void <init>(java.lang.String, org.waveprotocol.box.server.robots.register.RobotRegistrar, java.lang.String)
    {
        org.waveprotocol.box.server.robots.RobotRegistrationServlet r0;
        java.lang.String r2, r3;
        org.waveprotocol.box.server.robots.register.RobotRegistrar r1;

        r0 := @this: org.waveprotocol.box.server.robots.RobotRegistrationServlet;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.box.server.robots.register.RobotRegistrar;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<javax.servlet.http.HttpServlet: void <init>()>();

        r0.<org.waveprotocol.box.server.robots.RobotRegistrationServlet: org.waveprotocol.box.server.robots.register.RobotRegistrar robotRegistrar> = r1;

        r0.<org.waveprotocol.box.server.robots.RobotRegistrationServlet: java.lang.String domain> = r2;

        r0.<org.waveprotocol.box.server.robots.RobotRegistrationServlet: java.lang.String analyticsAccount> = r3;

        return;
    }

    protected void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        javax.servlet.http.HttpServletRequest r0;
        org.waveprotocol.box.server.robots.RobotRegistrationServlet r4;
        javax.servlet.http.HttpServletResponse r3;
        java.lang.String $r1, $r2;
        boolean $z0;

        r4 := @this: org.waveprotocol.box.server.robots.RobotRegistrationServlet;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r3 := @parameter1: javax.servlet.http.HttpServletResponse;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>();

        $r2 = "/create";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        specialinvoke r4.<org.waveprotocol.box.server.robots.RobotRegistrationServlet: void doRegisterGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>(r0, r3, "");

        goto label2;

     label1:
        interfaceinvoke r3.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(404);

     label2:
        return;
    }

    protected void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        javax.servlet.http.HttpServletRequest r0;
        org.waveprotocol.box.server.robots.RobotRegistrationServlet r4;
        javax.servlet.http.HttpServletResponse r3;
        java.lang.String $r1, $r2;
        boolean $z0;

        r4 := @this: org.waveprotocol.box.server.robots.RobotRegistrationServlet;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r3 := @parameter1: javax.servlet.http.HttpServletResponse;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>();

        $r2 = "/create";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        specialinvoke r4.<org.waveprotocol.box.server.robots.RobotRegistrationServlet: void doRegisterPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r0, r3);

        goto label2;

     label1:
        interfaceinvoke r3.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(404);

     label2:
        return;
    }

    private void doRegisterGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.String) throws java.io.IOException
    {
        java.io.PrintWriter $r1;
        javax.servlet.http.HttpServletResponse r0;
        javax.servlet.http.HttpServletRequest r3;
        com.google.gxp.base.GxpContext $r2;
        org.waveprotocol.box.server.robots.RobotRegistrationServlet r5;
        java.util.Locale $r4;
        java.lang.String r6, $r7, $r8;

        r5 := @this: org.waveprotocol.box.server.robots.RobotRegistrationServlet;

        r3 := @parameter0: javax.servlet.http.HttpServletRequest;

        r0 := @parameter1: javax.servlet.http.HttpServletResponse;

        r6 := @parameter2: java.lang.String;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter()>();

        $r2 = new com.google.gxp.base.GxpContext;

        $r4 = interfaceinvoke r3.<javax.servlet.http.HttpServletRequest: java.util.Locale getLocale()>();

        specialinvoke $r2.<com.google.gxp.base.GxpContext: void <init>(java.util.Locale)>($r4);

        $r8 = r5.<org.waveprotocol.box.server.robots.RobotRegistrationServlet: java.lang.String domain>;

        $r7 = r5.<org.waveprotocol.box.server.robots.RobotRegistrationServlet: java.lang.String analyticsAccount>;

        staticinvoke <org.waveprotocol.box.server.gxp.RobotRegistrationPage: void write(java.lang.Appendable,com.google.gxp.base.GxpContext,java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r8, r6, $r7);

        interfaceinvoke r0.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>("text/html");

        interfaceinvoke r0.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(200);

        return;
    }

    private void doRegisterPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        org.waveprotocol.wave.model.wave.InvalidParticipantAddress $r27;
        org.waveprotocol.box.server.account.RobotAccountData $r13;
        org.waveprotocol.wave.model.wave.ParticipantId $r11;
        org.waveprotocol.box.server.persistence.PersistenceException $r14;
        javax.servlet.http.HttpServletRequest r0;
        org.waveprotocol.wave.util.logging.Log $r16;
        java.lang.String $r1, $r2, $r8, $r10, $r19, $r22, $r24, $r26;
        boolean $z0, $z1;
        org.waveprotocol.box.server.robots.util.RobotsUtil$RobotRegistrationException $r25;
        javax.servlet.http.HttpServletResponse r4;
        org.waveprotocol.box.server.robots.RobotRegistrationServlet r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r15, $r17, $r18, $r20, $r21, $r23;
        org.waveprotocol.box.server.robots.register.RobotRegistrar $r12;

        r3 := @this: org.waveprotocol.box.server.robots.RobotRegistrationServlet;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r4 := @parameter1: javax.servlet.http.HttpServletResponse;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("username");

        $r2 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>("location");

        $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r2);

        if $z1 == 0 goto label2;

     label1:
        specialinvoke r3.<org.waveprotocol.box.server.robots.RobotRegistrationServlet: void doRegisterGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>(r0, r4, "Please complete all fields.");

        return;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r8 = r3.<org.waveprotocol.box.server.robots.RobotRegistrationServlet: java.lang.String domain>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId of(java.lang.String)>($r10);

     label3:
        goto label5;

     label4:
        $r27 := @caughtexception;

        specialinvoke r3.<org.waveprotocol.box.server.robots.RobotRegistrationServlet: void doRegisterGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>(r0, r4, "Invalid username specified, use alphanumeric characters only.");

        return;

     label5:
        $r12 = r3.<org.waveprotocol.box.server.robots.RobotRegistrationServlet: org.waveprotocol.box.server.robots.register.RobotRegistrar robotRegistrar>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.box.server.robots.register.RobotRegistrar: org.waveprotocol.box.server.account.RobotAccountData registerNew(org.waveprotocol.wave.model.wave.ParticipantId,java.lang.String)>($r11, $r2);

     label6:
        goto label9;

     label7:
        $r25 := @caughtexception;

        $r26 = virtualinvoke $r25.<org.waveprotocol.box.server.robots.util.RobotsUtil$RobotRegistrationException: java.lang.String getMessage()>();

        specialinvoke r3.<org.waveprotocol.box.server.robots.RobotRegistrationServlet: void doRegisterGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>(r0, r4, $r26);

        return;

     label8:
        $r14 := @caughtexception;

        $r16 = <org.waveprotocol.box.server.robots.RobotRegistrationServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to retrieve account data for ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String,java.lang.Throwable)>($r19, $r14);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to retrieve account data for ");

        $r22 = virtualinvoke $r11.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<org.waveprotocol.box.server.robots.RobotRegistrationServlet: void doRegisterGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>(r0, r4, $r24);

        return;

     label9:
        specialinvoke r3.<org.waveprotocol.box.server.robots.RobotRegistrationServlet: void onRegisterSuccess(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.waveprotocol.box.server.account.RobotAccountData)>(r0, r4, $r13);

        return;

        catch org.waveprotocol.wave.model.wave.InvalidParticipantAddress from label2 to label3 with label4;
        catch org.waveprotocol.box.server.robots.util.RobotsUtil$RobotRegistrationException from label5 to label6 with label7;
        catch org.waveprotocol.box.server.persistence.PersistenceException from label5 to label6 with label8;
    }

    private void onRegisterSuccess(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.waveprotocol.box.server.account.RobotAccountData) throws java.io.IOException
    {
        java.io.PrintWriter $r1;
        org.waveprotocol.box.server.account.RobotAccountData r5;
        javax.servlet.http.HttpServletResponse r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r6;
        javax.servlet.http.HttpServletRequest r3;
        com.google.gxp.base.GxpContext $r2;
        org.waveprotocol.box.server.robots.RobotRegistrationServlet r9;
        java.util.Locale $r4;
        java.lang.String $r7, $r8, $r10;

        r9 := @this: org.waveprotocol.box.server.robots.RobotRegistrationServlet;

        r3 := @parameter0: javax.servlet.http.HttpServletRequest;

        r0 := @parameter1: javax.servlet.http.HttpServletResponse;

        r5 := @parameter2: org.waveprotocol.box.server.account.RobotAccountData;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter()>();

        $r2 = new com.google.gxp.base.GxpContext;

        $r4 = interfaceinvoke r3.<javax.servlet.http.HttpServletRequest: java.util.Locale getLocale()>();

        specialinvoke $r2.<com.google.gxp.base.GxpContext: void <init>(java.util.Locale)>($r4);

        $r6 = interfaceinvoke r5.<org.waveprotocol.box.server.account.RobotAccountData: org.waveprotocol.wave.model.wave.ParticipantId getId()>();

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r8 = interfaceinvoke r5.<org.waveprotocol.box.server.account.RobotAccountData: java.lang.String getConsumerSecret()>();

        $r10 = r9.<org.waveprotocol.box.server.robots.RobotRegistrationServlet: java.lang.String analyticsAccount>;

        staticinvoke <org.waveprotocol.box.server.gxp.RobotRegistrationSuccessPage: void write(java.lang.Appendable,com.google.gxp.base.GxpContext,java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r7, $r8, $r10);

        interfaceinvoke r0.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>("text/html");

        interfaceinvoke r0.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(200);

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        <org.waveprotocol.box.server.robots.RobotRegistrationServlet: java.lang.String CREATE_PATH> = "/create";

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/robots/RobotRegistrationServlet;");

        <org.waveprotocol.box.server.robots.RobotRegistrationServlet: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
