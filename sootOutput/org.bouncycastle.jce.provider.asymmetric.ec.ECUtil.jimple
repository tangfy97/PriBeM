public class org.bouncycastle.jce.provider.asymmetric.ec.ECUtil extends java.lang.Object
{

    public void <init>()
    {
        org.bouncycastle.jce.provider.asymmetric.ec.ECUtil r0;

        r0 := @this: org.bouncycastle.jce.provider.asymmetric.ec.ECUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static int[] convertMidTerms(int[])
    {
        int[] r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;
        java.lang.IllegalArgumentException $r2;

        r1 := @parameter0: int[];

        r0 = newarray (int)[3];

        $i0 = lengthof r1;

        if $i0 != 1 goto label1;

        $i29 = r1[0];

        r0[0] = $i29;

        goto label8;

     label1:
        $i1 = lengthof r1;

        if $i1 == 3 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only Trinomials and pentanomials supported");

        throw $r2;

     label2:
        $i3 = r1[0];

        $i2 = r1[1];

        if $i3 >= $i2 goto label4;

        $i21 = r1[0];

        $i20 = r1[2];

        if $i21 >= $i20 goto label4;

        $i22 = r1[0];

        r0[0] = $i22;

        $i24 = r1[1];

        $i23 = r1[2];

        if $i24 >= $i23 goto label3;

        $i27 = r1[1];

        r0[1] = $i27;

        $i28 = r1[2];

        r0[2] = $i28;

        goto label8;

     label3:
        $i25 = r1[2];

        r0[1] = $i25;

        $i26 = r1[1];

        r0[2] = $i26;

        goto label8;

     label4:
        $i5 = r1[1];

        $i4 = r1[2];

        if $i5 >= $i4 goto label6;

        $i13 = r1[1];

        r0[0] = $i13;

        $i15 = r1[0];

        $i14 = r1[2];

        if $i15 >= $i14 goto label5;

        $i18 = r1[0];

        r0[1] = $i18;

        $i19 = r1[2];

        r0[2] = $i19;

        goto label8;

     label5:
        $i16 = r1[2];

        r0[1] = $i16;

        $i17 = r1[0];

        r0[2] = $i17;

        goto label8;

     label6:
        $i6 = r1[2];

        r0[0] = $i6;

        $i8 = r1[0];

        $i7 = r1[1];

        if $i8 >= $i7 goto label7;

        $i11 = r1[0];

        r0[1] = $i11;

        $i12 = r1[1];

        r0[2] = $i12;

        goto label8;

     label7:
        $i9 = r1[1];

        r0[1] = $i9;

        $i10 = r1[0];

        r0[2] = $i10;

     label8:
        return r0;
    }

    public static org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        byte[] $r13, $r22, $r32;
        java.math.BigInteger $r11, $r12, $r20, $r21, $r30, $r31;
        boolean $z0, $z1;
        java.security.InvalidKeyException $r1;
        java.security.interfaces.ECPublicKey r34;
        org.bouncycastle.jce.interfaces.ECPublicKey r33;
        org.bouncycastle.crypto.params.ECPublicKeyParameters $r4, $r15, $r24;
        org.bouncycastle.math.ec.ECPoint $r7, $r10, $r16, $r19, $r26, $r29;
        org.bouncycastle.crypto.params.ECDomainParameters $r8, $r17, $r27;
        org.bouncycastle.math.ec.ECCurve $r9, $r18, $r28;
        java.security.PublicKey r0;
        org.bouncycastle.jce.provider.JCEECPublicKey $r25;
        java.security.spec.ECParameterSpec $r2, $r5;
        java.security.spec.ECPoint $r6;
        org.bouncycastle.jce.spec.ECParameterSpec $r3, $r14, $r23;

        r0 := @parameter0: java.security.PublicKey;

        $z0 = r0 instanceof org.bouncycastle.jce.interfaces.ECPublicKey;

        if $z0 == 0 goto label2;

        r33 = (org.bouncycastle.jce.interfaces.ECPublicKey) r0;

        $r14 = interfaceinvoke r33.<org.bouncycastle.jce.interfaces.ECPublicKey: org.bouncycastle.jce.spec.ECParameterSpec getParameters()>();

        if $r14 != null goto label1;

        $r23 = staticinvoke <org.bouncycastle.jce.provider.ProviderUtil: org.bouncycastle.jce.spec.ECParameterSpec getEcImplicitlyCa()>();

        $r24 = new org.bouncycastle.crypto.params.ECPublicKeyParameters;

        $r25 = (org.bouncycastle.jce.provider.JCEECPublicKey) r33;

        $r26 = virtualinvoke $r25.<org.bouncycastle.jce.provider.JCEECPublicKey: org.bouncycastle.math.ec.ECPoint engineGetQ()>();

        $r27 = new org.bouncycastle.crypto.params.ECDomainParameters;

        $r28 = virtualinvoke $r23.<org.bouncycastle.jce.spec.ECParameterSpec: org.bouncycastle.math.ec.ECCurve getCurve()>();

        $r29 = virtualinvoke $r23.<org.bouncycastle.jce.spec.ECParameterSpec: org.bouncycastle.math.ec.ECPoint getG()>();

        $r30 = virtualinvoke $r23.<org.bouncycastle.jce.spec.ECParameterSpec: java.math.BigInteger getN()>();

        $r31 = virtualinvoke $r23.<org.bouncycastle.jce.spec.ECParameterSpec: java.math.BigInteger getH()>();

        $r32 = virtualinvoke $r23.<org.bouncycastle.jce.spec.ECParameterSpec: byte[] getSeed()>();

        specialinvoke $r27.<org.bouncycastle.crypto.params.ECDomainParameters: void <init>(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>($r28, $r29, $r30, $r31, $r32);

        specialinvoke $r24.<org.bouncycastle.crypto.params.ECPublicKeyParameters: void <init>(org.bouncycastle.math.ec.ECPoint,org.bouncycastle.crypto.params.ECDomainParameters)>($r26, $r27);

        return $r24;

     label1:
        $r15 = new org.bouncycastle.crypto.params.ECPublicKeyParameters;

        $r16 = interfaceinvoke r33.<org.bouncycastle.jce.interfaces.ECPublicKey: org.bouncycastle.math.ec.ECPoint getQ()>();

        $r17 = new org.bouncycastle.crypto.params.ECDomainParameters;

        $r18 = virtualinvoke $r14.<org.bouncycastle.jce.spec.ECParameterSpec: org.bouncycastle.math.ec.ECCurve getCurve()>();

        $r19 = virtualinvoke $r14.<org.bouncycastle.jce.spec.ECParameterSpec: org.bouncycastle.math.ec.ECPoint getG()>();

        $r20 = virtualinvoke $r14.<org.bouncycastle.jce.spec.ECParameterSpec: java.math.BigInteger getN()>();

        $r21 = virtualinvoke $r14.<org.bouncycastle.jce.spec.ECParameterSpec: java.math.BigInteger getH()>();

        $r22 = virtualinvoke $r14.<org.bouncycastle.jce.spec.ECParameterSpec: byte[] getSeed()>();

        specialinvoke $r17.<org.bouncycastle.crypto.params.ECDomainParameters: void <init>(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>($r18, $r19, $r20, $r21, $r22);

        specialinvoke $r15.<org.bouncycastle.crypto.params.ECPublicKeyParameters: void <init>(org.bouncycastle.math.ec.ECPoint,org.bouncycastle.crypto.params.ECDomainParameters)>($r16, $r17);

        return $r15;

     label2:
        $z1 = r0 instanceof java.security.interfaces.ECPublicKey;

        if $z1 == 0 goto label3;

        r34 = (java.security.interfaces.ECPublicKey) r0;

        $r2 = interfaceinvoke r34.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

        $r3 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.EC5Util: org.bouncycastle.jce.spec.ECParameterSpec convertSpec(java.security.spec.ECParameterSpec,boolean)>($r2, 0);

        $r4 = new org.bouncycastle.crypto.params.ECPublicKeyParameters;

        $r5 = interfaceinvoke r34.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

        $r6 = interfaceinvoke r34.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        $r7 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.EC5Util: org.bouncycastle.math.ec.ECPoint convertPoint(java.security.spec.ECParameterSpec,java.security.spec.ECPoint,boolean)>($r5, $r6, 0);

        $r8 = new org.bouncycastle.crypto.params.ECDomainParameters;

        $r9 = virtualinvoke $r3.<org.bouncycastle.jce.spec.ECParameterSpec: org.bouncycastle.math.ec.ECCurve getCurve()>();

        $r10 = virtualinvoke $r3.<org.bouncycastle.jce.spec.ECParameterSpec: org.bouncycastle.math.ec.ECPoint getG()>();

        $r11 = virtualinvoke $r3.<org.bouncycastle.jce.spec.ECParameterSpec: java.math.BigInteger getN()>();

        $r12 = virtualinvoke $r3.<org.bouncycastle.jce.spec.ECParameterSpec: java.math.BigInteger getH()>();

        $r13 = virtualinvoke $r3.<org.bouncycastle.jce.spec.ECParameterSpec: byte[] getSeed()>();

        specialinvoke $r8.<org.bouncycastle.crypto.params.ECDomainParameters: void <init>(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>($r9, $r10, $r11, $r12, $r13);

        specialinvoke $r4.<org.bouncycastle.crypto.params.ECPublicKeyParameters: void <init>(org.bouncycastle.math.ec.ECPoint,org.bouncycastle.crypto.params.ECDomainParameters)>($r7, $r8);

        return $r4;

     label3:
        $r1 = new java.security.InvalidKeyException;

        specialinvoke $r1.<java.security.InvalidKeyException: void <init>(java.lang.String)>("cannot identify EC public key.");

        throw $r1;
    }

    public static org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        byte[] $r11;
        org.bouncycastle.math.ec.ECCurve $r7;
        org.bouncycastle.crypto.params.ECPrivateKeyParameters $r4;
        org.bouncycastle.jce.interfaces.ECPrivateKey r2;
        org.bouncycastle.math.ec.ECPoint $r8;
        org.bouncycastle.crypto.params.ECDomainParameters $r6;
        java.security.PrivateKey r0;
        java.security.InvalidKeyException $r1;
        org.bouncycastle.jce.spec.ECParameterSpec $r3, r12;
        java.math.BigInteger $r5, $r9, $r10;
        boolean $z0;

        r0 := @parameter0: java.security.PrivateKey;

        $z0 = r0 instanceof org.bouncycastle.jce.interfaces.ECPrivateKey;

        if $z0 == 0 goto label2;

        r2 = (org.bouncycastle.jce.interfaces.ECPrivateKey) r0;

        $r3 = interfaceinvoke r2.<org.bouncycastle.jce.interfaces.ECPrivateKey: org.bouncycastle.jce.spec.ECParameterSpec getParameters()>();

        r12 = $r3;

        if $r3 != null goto label1;

        r12 = staticinvoke <org.bouncycastle.jce.provider.ProviderUtil: org.bouncycastle.jce.spec.ECParameterSpec getEcImplicitlyCa()>();

     label1:
        $r4 = new org.bouncycastle.crypto.params.ECPrivateKeyParameters;

        $r5 = interfaceinvoke r2.<org.bouncycastle.jce.interfaces.ECPrivateKey: java.math.BigInteger getD()>();

        $r6 = new org.bouncycastle.crypto.params.ECDomainParameters;

        $r7 = virtualinvoke r12.<org.bouncycastle.jce.spec.ECParameterSpec: org.bouncycastle.math.ec.ECCurve getCurve()>();

        $r8 = virtualinvoke r12.<org.bouncycastle.jce.spec.ECParameterSpec: org.bouncycastle.math.ec.ECPoint getG()>();

        $r9 = virtualinvoke r12.<org.bouncycastle.jce.spec.ECParameterSpec: java.math.BigInteger getN()>();

        $r10 = virtualinvoke r12.<org.bouncycastle.jce.spec.ECParameterSpec: java.math.BigInteger getH()>();

        $r11 = virtualinvoke r12.<org.bouncycastle.jce.spec.ECParameterSpec: byte[] getSeed()>();

        specialinvoke $r6.<org.bouncycastle.crypto.params.ECDomainParameters: void <init>(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>($r7, $r8, $r9, $r10, $r11);

        specialinvoke $r4.<org.bouncycastle.crypto.params.ECPrivateKeyParameters: void <init>(java.math.BigInteger,org.bouncycastle.crypto.params.ECDomainParameters)>($r5, $r6);

        return $r4;

     label2:
        $r1 = new java.security.InvalidKeyException;

        specialinvoke $r1.<java.security.InvalidKeyException: void <init>(java.lang.String)>("can\'t identify EC private key.");

        throw $r1;
    }

    public static org.bouncycastle.asn1.DERObjectIdentifier getNamedCurveOid(java.lang.String)
    {
        java.lang.String r0;
        org.bouncycastle.asn1.DERObjectIdentifier $r1, $r2, r3;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.bouncycastle.asn1.x9.X962NamedCurves: org.bouncycastle.asn1.DERObjectIdentifier getOID(java.lang.String)>(r0);

        r3 = $r1;

        if $r1 != null goto label3;

        $r2 = staticinvoke <org.bouncycastle.asn1.sec.SECNamedCurves: org.bouncycastle.asn1.DERObjectIdentifier getOID(java.lang.String)>(r0);

        r3 = $r2;

        if $r2 != null goto label1;

        r3 = staticinvoke <org.bouncycastle.asn1.nist.NISTNamedCurves: org.bouncycastle.asn1.DERObjectIdentifier getOID(java.lang.String)>(r0);

     label1:
        if r3 != null goto label2;

        r3 = staticinvoke <org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves: org.bouncycastle.asn1.DERObjectIdentifier getOID(java.lang.String)>(r0);

     label2:
        if r3 != null goto label3;

        r3 = staticinvoke <org.bouncycastle.asn1.cryptopro.ECGOST3410NamedCurves: org.bouncycastle.asn1.DERObjectIdentifier getOID(java.lang.String)>(r0);

     label3:
        return r3;
    }

    public static org.bouncycastle.asn1.x9.X9ECParameters getNamedCurveByOid(org.bouncycastle.asn1.DERObjectIdentifier)
    {
        org.bouncycastle.asn1.x9.X9ECParameters $r1, $r2, r3;
        org.bouncycastle.asn1.DERObjectIdentifier r0;

        r0 := @parameter0: org.bouncycastle.asn1.DERObjectIdentifier;

        $r1 = staticinvoke <org.bouncycastle.asn1.x9.X962NamedCurves: org.bouncycastle.asn1.x9.X9ECParameters getByOID(org.bouncycastle.asn1.DERObjectIdentifier)>(r0);

        r3 = $r1;

        if $r1 != null goto label2;

        $r2 = staticinvoke <org.bouncycastle.asn1.sec.SECNamedCurves: org.bouncycastle.asn1.x9.X9ECParameters getByOID(org.bouncycastle.asn1.DERObjectIdentifier)>(r0);

        r3 = $r2;

        if $r2 != null goto label1;

        r3 = staticinvoke <org.bouncycastle.asn1.nist.NISTNamedCurves: org.bouncycastle.asn1.x9.X9ECParameters getByOID(org.bouncycastle.asn1.DERObjectIdentifier)>(r0);

     label1:
        if r3 != null goto label2;

        r3 = staticinvoke <org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves: org.bouncycastle.asn1.x9.X9ECParameters getByOID(org.bouncycastle.asn1.DERObjectIdentifier)>(r0);

     label2:
        return r3;
    }

    public static java.lang.String getCurveName(org.bouncycastle.asn1.DERObjectIdentifier)
    {
        java.lang.String $r1, $r2, r3;
        org.bouncycastle.asn1.DERObjectIdentifier r0;

        r0 := @parameter0: org.bouncycastle.asn1.DERObjectIdentifier;

        $r1 = staticinvoke <org.bouncycastle.asn1.x9.X962NamedCurves: java.lang.String getName(org.bouncycastle.asn1.DERObjectIdentifier)>(r0);

        r3 = $r1;

        if $r1 != null goto label3;

        $r2 = staticinvoke <org.bouncycastle.asn1.sec.SECNamedCurves: java.lang.String getName(org.bouncycastle.asn1.DERObjectIdentifier)>(r0);

        r3 = $r2;

        if $r2 != null goto label1;

        r3 = staticinvoke <org.bouncycastle.asn1.nist.NISTNamedCurves: java.lang.String getName(org.bouncycastle.asn1.DERObjectIdentifier)>(r0);

     label1:
        if r3 != null goto label2;

        r3 = staticinvoke <org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves: java.lang.String getName(org.bouncycastle.asn1.DERObjectIdentifier)>(r0);

     label2:
        if r3 != null goto label3;

        r3 = staticinvoke <org.bouncycastle.asn1.cryptopro.ECGOST3410NamedCurves: java.lang.String getName(org.bouncycastle.asn1.DERObjectIdentifier)>(r0);

     label3:
        return r3;
    }
}
