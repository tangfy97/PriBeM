public class org.json.XMLTokener extends org.json.JSONTokener
{
    public static final java.util.HashMap entity;

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.json.XMLTokener r0;

        r0 := @this: org.json.XMLTokener;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.json.JSONTokener: void <init>(java.lang.String)>(r1);

        return;
    }

    public java.lang.String nextCDATA() throws org.json.JSONException
    {
        char $c2, $c4, $c6, $c7;
        org.json.JSONException $r3;
        java.lang.StringBuffer $r4;
        int $i0, i1, $i3, $i5, $i8, $i9, $i10;
        java.lang.String $r2;
        org.json.XMLTokener r1;

        r1 := @this: org.json.XMLTokener;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

     label1:
        $c7 = virtualinvoke r1.<org.json.XMLTokener: char next()>();

        if $c7 != 0 goto label2;

        $r3 = virtualinvoke r1.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Unclosed CDATA");

        throw $r3;

     label2:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c7);

        $i0 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>();

        i1 = $i0 - 3;

        if i1 < 0 goto label1;

        $c2 = virtualinvoke $r4.<java.lang.StringBuffer: char charAt(int)>(i1);

        $i8 = (int) $c2;

        if $i8 != 93 goto label1;

        $i3 = i1 + 1;

        $c4 = virtualinvoke $r4.<java.lang.StringBuffer: char charAt(int)>($i3);

        $i9 = (int) $c4;

        if $i9 != 93 goto label1;

        $i5 = i1 + 2;

        $c6 = virtualinvoke $r4.<java.lang.StringBuffer: char charAt(int)>($i5);

        $i10 = (int) $c6;

        if $i10 != 62 goto label1;

        virtualinvoke $r4.<java.lang.StringBuffer: void setLength(int)>(i1);

        $r2 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.Object nextContent() throws org.json.JSONException
    {
        char $c0, c1;
        java.lang.Character $r5;
        java.lang.StringBuffer $r6;
        int $i2, $i3, $i4;
        java.lang.Object $r4;
        java.lang.String $r2, $r3;
        org.json.XMLTokener r0;
        boolean $z0;

        r0 := @this: org.json.XMLTokener;

     label1:
        $c0 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        c1 = $c0;

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        if $z0 != 0 goto label1;

        if $c0 != 0 goto label2;

        return null;

     label2:
        $i2 = (int) $c0;

        if $i2 != 60 goto label3;

        $r5 = <org.json.XML: java.lang.Character LT>;

        return $r5;

     label3:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

     label4:
        $i3 = (int) c1;

        if $i3 == 60 goto label5;

        if c1 != 0 goto label6;

     label5:
        virtualinvoke r0.<org.json.XMLTokener: void back()>();

        $r2 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        return $r3;

     label6:
        $i4 = (int) c1;

        if $i4 != 38 goto label7;

        $r4 = virtualinvoke r0.<org.json.XMLTokener: java.lang.Object nextEntity(char)>(c1);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        goto label8;

     label7:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

     label8:
        c1 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        goto label4;
    }

    public java.lang.Object nextEntity(char) throws org.json.JSONException
    {
        java.util.HashMap $r8;
        org.json.JSONException $r6;
        java.lang.StringBuffer $r15;
        int $i3, $i4;
        java.lang.String $r5, $r7;
        boolean $z0;
        char $c0, $c1, c2;
        java.lang.StringBuilder $r3, $r4, $r11, $r12, $r13, $r16, $r17;
        java.lang.Object $r9, $r14;
        org.json.XMLTokener r1;

        r1 := @this: org.json.XMLTokener;

        c2 := @parameter0: char;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

     label1:
        $c0 = virtualinvoke r1.<org.json.XMLTokener: char next()>();

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c0);

        if $z0 != 0 goto label2;

        $i3 = (int) $c0;

        if $i3 != 35 goto label3;

     label2:
        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c0);

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        goto label5;

     label3:
        $i4 = (int) $c0;

        if $i4 != 59 goto label4;

        goto label6;

     label4:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing \';\' in XML entity: &");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r1.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>($r5);

        throw $r6;

     label5:
        goto label1;

     label6:
        $r7 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = <org.json.XMLTokener: java.util.HashMap entity>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r7);

        if $r9 == null goto label7;

        $r14 = $r9;

        goto label8;

     label7:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label8:
        return $r14;
    }

    public java.lang.Object nextMeta() throws org.json.JSONException
    {
        org.json.JSONException $r7, $r9;
        java.lang.Character $r1, $r2, $r3, $r4, $r5, $r8;
        int $i3, $i4, $i5, $i6;
        java.lang.Boolean $r6, $r10, $r11;
        boolean $z0, $z1;
        char $c0, $c1, $c2;
        org.json.XMLTokener r0;

        r0 := @this: org.json.XMLTokener;

     label01:
        $c0 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        if $z0 != 0 goto label01;

        $i3 = (int) $c0;

        lookupswitch($i3)
        {
            case 0: goto label02;
            case 33: goto label07;
            case 34: goto label09;
            case 39: goto label09;
            case 47: goto label05;
            case 60: goto label03;
            case 61: goto label06;
            case 62: goto label04;
            case 63: goto label08;
            default: goto label11;
        };

     label02:
        $r9 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Misshaped meta tag");

        throw $r9;

     label03:
        $r4 = <org.json.XML: java.lang.Character LT>;

        return $r4;

     label04:
        $r2 = <org.json.XML: java.lang.Character GT>;

        return $r2;

     label05:
        $r5 = <org.json.XML: java.lang.Character SLASH>;

        return $r5;

     label06:
        $r3 = <org.json.XML: java.lang.Character EQ>;

        return $r3;

     label07:
        $r8 = <org.json.XML: java.lang.Character BANG>;

        return $r8;

     label08:
        $r1 = <org.json.XML: java.lang.Character QUEST>;

        return $r1;

     label09:
        $c1 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        if $c1 != 0 goto label10;

        $r7 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Unterminated string");

        throw $r7;

     label10:
        $i4 = (int) $c1;

        $i5 = (int) $c0;

        if $i4 != $i5 goto label09;

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r6;

     label11:
        $c2 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2);

        if $z1 == 0 goto label12;

        $r11 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r11;

     label12:
        $i6 = (int) $c2;

        lookupswitch($i6)
        {
            case 0: goto label13;
            case 33: goto label13;
            case 34: goto label13;
            case 39: goto label13;
            case 47: goto label13;
            case 60: goto label13;
            case 61: goto label13;
            case 62: goto label13;
            case 63: goto label13;
            default: goto label14;
        };

     label13:
        virtualinvoke r0.<org.json.XMLTokener: void back()>();

        $r10 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r10;

     label14:
        goto label11;
    }

    public java.lang.Object nextToken() throws org.json.JSONException
    {
        org.json.JSONException $r4, $r9, $r11, $r13;
        java.lang.Character $r1, $r2, $r3, $r5, $r10;
        java.lang.StringBuffer $r16, $r17;
        int $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r8, $r14, $r15;
        boolean $z0, $z1;
        char $c0, $c1, c2, $c3;
        java.lang.Object $r7;
        org.json.XMLTokener r0;

        r0 := @this: org.json.XMLTokener;

     label01:
        $c0 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        c2 = $c0;

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        if $z0 != 0 goto label01;

        $i4 = (int) $c0;

        lookupswitch($i4)
        {
            case 0: goto label02;
            case 33: goto label07;
            case 34: goto label09;
            case 39: goto label09;
            case 47: goto label05;
            case 60: goto label03;
            case 61: goto label06;
            case 62: goto label04;
            case 63: goto label08;
            default: goto label14;
        };

     label02:
        $r11 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Misshaped element");

        throw $r11;

     label03:
        $r4 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Misplaced \'<\'");

        throw $r4;

     label04:
        $r2 = <org.json.XML: java.lang.Character GT>;

        return $r2;

     label05:
        $r5 = <org.json.XML: java.lang.Character SLASH>;

        return $r5;

     label06:
        $r3 = <org.json.XML: java.lang.Character EQ>;

        return $r3;

     label07:
        $r10 = <org.json.XML: java.lang.Character BANG>;

        return $r10;

     label08:
        $r1 = <org.json.XML: java.lang.Character QUEST>;

        return $r1;

     label09:
        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

     label10:
        $c3 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        if $c3 != 0 goto label11;

        $r9 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Unterminated string");

        throw $r9;

     label11:
        $i5 = (int) $c3;

        $i6 = (int) $c0;

        if $i5 != $i6 goto label12;

        $r8 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;

     label12:
        $i7 = (int) $c3;

        if $i7 != 38 goto label13;

        $r7 = virtualinvoke r0.<org.json.XMLTokener: java.lang.Object nextEntity(char)>($c3);

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        goto label10;

     label13:
        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        goto label10;

     label14:
        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

     label15:
        virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2);

        $c1 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        c2 = $c1;

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z1 == 0 goto label16;

        $r15 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r15;

     label16:
        $i8 = (int) $c1;

        lookupswitch($i8)
        {
            case 0: goto label17;
            case 33: goto label17;
            case 34: goto label18;
            case 39: goto label18;
            case 47: goto label17;
            case 60: goto label18;
            case 61: goto label17;
            case 62: goto label17;
            case 63: goto label17;
            case 91: goto label17;
            case 93: goto label17;
            default: goto label19;
        };

     label17:
        virtualinvoke r0.<org.json.XMLTokener: void back()>();

        $r14 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r14;

     label18:
        $r13 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Bad character in a name");

        throw $r13;

     label19:
        goto label15;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0, $r2, $r4, $r6, $r8, $r10;
        java.lang.Character $r1, $r3, $r5, $r7, $r9;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(8);

        <org.json.XMLTokener: java.util.HashMap entity> = $r0;

        $r2 = <org.json.XMLTokener: java.util.HashMap entity>;

        $r1 = <org.json.XML: java.lang.Character AMP>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("amp", $r1);

        $r4 = <org.json.XMLTokener: java.util.HashMap entity>;

        $r3 = <org.json.XML: java.lang.Character APOS>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("apos", $r3);

        $r6 = <org.json.XMLTokener: java.util.HashMap entity>;

        $r5 = <org.json.XML: java.lang.Character GT>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("gt", $r5);

        $r8 = <org.json.XMLTokener: java.util.HashMap entity>;

        $r7 = <org.json.XML: java.lang.Character LT>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("lt", $r7);

        $r10 = <org.json.XMLTokener: java.util.HashMap entity>;

        $r9 = <org.json.XML: java.lang.Character QUOT>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("quot", $r9);

        return;
    }
}
