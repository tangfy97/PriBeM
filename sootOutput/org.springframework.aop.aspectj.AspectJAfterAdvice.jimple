public class org.springframework.aop.aspectj.AspectJAfterAdvice extends org.springframework.aop.aspectj.AbstractAspectJAdvice implements org.aopalliance.intercept.MethodInterceptor, org.springframework.aop.AfterAdvice
{

    public void <init>(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory)
    {
        org.springframework.aop.aspectj.AspectJAfterAdvice r0;
        org.springframework.aop.aspectj.AspectInstanceFactory r3;
        java.lang.reflect.Method r1;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r2;

        r0 := @this: org.springframework.aop.aspectj.AspectJAfterAdvice;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r3 := @parameter2: org.springframework.aop.aspectj.AspectInstanceFactory;

        specialinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: void <init>(java.lang.reflect.Method,org.springframework.aop.aspectj.AspectJExpressionPointcut,org.springframework.aop.aspectj.AspectInstanceFactory)>(r1, r2, r3);

        return;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.Throwable $r4;
        org.springframework.aop.aspectj.AspectJAfterAdvice r2;
        org.aopalliance.intercept.MethodInvocation r0;
        org.aspectj.weaver.tools.JoinPointMatch $r3, $r5;
        java.lang.Object $r1;

        r2 := @this: org.springframework.aop.aspectj.AspectJAfterAdvice;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

     label1:
        $r1 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.Object proceed()>();

     label2:
        $r3 = virtualinvoke r2.<org.springframework.aop.aspectj.AspectJAfterAdvice: org.aspectj.weaver.tools.JoinPointMatch getJoinPointMatch()>();

        virtualinvoke r2.<org.springframework.aop.aspectj.AspectJAfterAdvice: java.lang.Object invokeAdviceMethod(org.aspectj.weaver.tools.JoinPointMatch,java.lang.Object,java.lang.Throwable)>($r3, null, null);

        return $r1;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r2.<org.springframework.aop.aspectj.AspectJAfterAdvice: org.aspectj.weaver.tools.JoinPointMatch getJoinPointMatch()>();

        virtualinvoke r2.<org.springframework.aop.aspectj.AspectJAfterAdvice: java.lang.Object invokeAdviceMethod(org.aspectj.weaver.tools.JoinPointMatch,java.lang.Object,java.lang.Throwable)>($r5, null, null);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isBeforeAdvice()
    {
        org.springframework.aop.aspectj.AspectJAfterAdvice r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJAfterAdvice;

        return 0;
    }

    public boolean isAfterAdvice()
    {
        org.springframework.aop.aspectj.AspectJAfterAdvice r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJAfterAdvice;

        return 1;
    }
}
