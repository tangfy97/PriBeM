public class com.ctc.wstx.dtd.MinimalDTDReader extends com.ctc.wstx.sr.StreamScanner
{
    final boolean mIsExternal;

    private void <init>(com.ctc.wstx.io.WstxInputSource, com.ctc.wstx.api.ReaderConfig)
    {
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        com.ctc.wstx.api.ReaderConfig r2;
        com.ctc.wstx.io.WstxInputSource r1;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

        r1 := @parameter0: com.ctc.wstx.io.WstxInputSource;

        r2 := @parameter1: com.ctc.wstx.api.ReaderConfig;

        specialinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: void <init>(com.ctc.wstx.io.WstxInputSource,com.ctc.wstx.api.ReaderConfig,boolean)>(r1, r2, 0);

        return;
    }

    protected void <init>(com.ctc.wstx.io.WstxInputSource, com.ctc.wstx.api.ReaderConfig, boolean)
    {
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        com.ctc.wstx.api.ReaderConfig r2;
        javax.xml.stream.XMLResolver $r3;
        com.ctc.wstx.io.WstxInputSource r1;
        boolean z0;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

        r1 := @parameter0: com.ctc.wstx.io.WstxInputSource;

        r2 := @parameter1: com.ctc.wstx.api.ReaderConfig;

        z0 := @parameter2: boolean;

        $r3 = virtualinvoke r2.<com.ctc.wstx.api.ReaderConfig: javax.xml.stream.XMLResolver getDtdResolver()>();

        specialinvoke r0.<com.ctc.wstx.sr.StreamScanner: void <init>(com.ctc.wstx.io.WstxInputSource,com.ctc.wstx.api.ReaderConfig,javax.xml.stream.XMLResolver)>(r1, r2, $r3);

        r0.<com.ctc.wstx.dtd.MinimalDTDReader: boolean mIsExternal> = z0;

        r0.<com.ctc.wstx.dtd.MinimalDTDReader: boolean mCfgReplaceEntities> = 1;

        return;
    }

    public static void skipInternalSubset(com.ctc.wstx.io.WstxInputData, com.ctc.wstx.io.WstxInputSource, com.ctc.wstx.api.ReaderConfig) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        java.lang.Throwable $r4;
        com.ctc.wstx.io.WstxInputData r3;
        com.ctc.wstx.dtd.MinimalDTDReader $r0;
        com.ctc.wstx.api.ReaderConfig r2;
        com.ctc.wstx.io.WstxInputSource r1;

        r3 := @parameter0: com.ctc.wstx.io.WstxInputData;

        r1 := @parameter1: com.ctc.wstx.io.WstxInputSource;

        r2 := @parameter2: com.ctc.wstx.api.ReaderConfig;

        $r0 = new com.ctc.wstx.dtd.MinimalDTDReader;

        specialinvoke $r0.<com.ctc.wstx.dtd.MinimalDTDReader: void <init>(com.ctc.wstx.io.WstxInputSource,com.ctc.wstx.api.ReaderConfig)>(r1, r2);

        virtualinvoke $r0.<com.ctc.wstx.dtd.MinimalDTDReader: void copyBufferStateFrom(com.ctc.wstx.io.WstxInputData)>(r3);

     label1:
        virtualinvoke $r0.<com.ctc.wstx.dtd.MinimalDTDReader: void skipInternalSubset()>();

     label2:
        virtualinvoke r3.<com.ctc.wstx.io.WstxInputData: void copyBufferStateFrom(com.ctc.wstx.io.WstxInputData)>($r0);

        goto label5;

     label3:
        $r4 := @caughtexception;

     label4:
        virtualinvoke r3.<com.ctc.wstx.io.WstxInputData: void copyBufferStateFrom(com.ctc.wstx.io.WstxInputData)>($r0);

        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final javax.xml.stream.Location getLocation()
    {
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        org.codehaus.stax2.XMLStreamLocation2 $r1;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

        $r1 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: org.codehaus.stax2.XMLStreamLocation2 getStartLocation()>();

        return $r1;
    }

    protected com.ctc.wstx.ent.EntityDecl findEntity(java.lang.String, java.lang.Object)
    {
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: void throwIllegalCall()>();

        return null;
    }

    protected void handleUndeclaredEntity(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        java.lang.String r1;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

        r1 := @parameter0: java.lang.String;

        return;
    }

    protected void handleIncompleteEntityProblem(com.ctc.wstx.io.WstxInputSource) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        com.ctc.wstx.io.WstxInputSource r1;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

        r1 := @parameter0: com.ctc.wstx.io.WstxInputSource;

        return;
    }

    protected char handleExpandedSurrogate(char, char)
    {
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        char c0, c1;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        return c0;
    }

    public com.ctc.wstx.ent.EntityDecl findEntity(java.lang.String)
    {
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        java.lang.String r1;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    protected void skipInternalSubset() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        char $c0, $c3;
        int $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        com.ctc.wstx.io.WstxInputSource $r1, $r2;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

     label01:
        $i4 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: int getNextAfterWS()>();

        if $i4 >= 0 goto label02;

        virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: void throwUnexpectedEOF(java.lang.String)>(" in internal DTD subset");

     label02:
        if $i4 != 37 goto label03;

        specialinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: void skipPE()>();

        goto label01;

     label03:
        if $i4 != 60 goto label09;

        $c0 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: char getNextSkippingPEs()>();

        $i5 = (int) $c0;

        if $i5 != 63 goto label04;

        virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: void skipPI()>();

        goto label01;

     label04:
        $i6 = (int) $c0;

        if $i6 != 33 goto label08;

        $c3 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: char getNextSkippingPEs()>();

        $i7 = (int) $c3;

        if $i7 != 91 goto label05;

        goto label01;

     label05:
        $i8 = (int) $c3;

        if $i8 != 45 goto label06;

        virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: void skipComment()>();

        goto label01;

     label06:
        $i9 = (int) $c3;

        if $i9 < 65 goto label07;

        $i10 = (int) $c3;

        if $i10 > 90 goto label07;

        specialinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: void skipDeclaration(char)>($c3);

        goto label01;

     label07:
        specialinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: void skipDeclaration(char)>($c3);

        goto label01;

     label08:
        $i1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i2 = $i1 - 1;

        r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr> = $i2;

        goto label01;

     label09:
        if $i4 != 93 goto label10;

        $r2 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: com.ctc.wstx.io.WstxInputSource mInput>;

        $r1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: com.ctc.wstx.io.WstxInputSource mRootInput>;

        if $r2 == $r1 goto label11;

        virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: void throwParseError(java.lang.String)>("Encountered int. subset end marker \']]>\' in an expanded entity; has to be at main level.");

        goto label11;

     label10:
        virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: void throwUnexpectedChar(int,java.lang.String)>($i4, " in internal DTD subset; expected a \'<\' to start a directive, or \"]>\" to end internal subset.");

        goto label01;

     label11:
        return;
    }

    protected char dtdNextFromCurr() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        char $c4;
        int $i0, $i1, $i2, $i3;
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        char[] $r2;
        java.lang.String $r1;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

        $i1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputLen>;

        if $i1 >= $i0 goto label1;

        $r2 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: char[] mInputBuffer>;

        $i2 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i3 = $i2 + 1;

        r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr> = $i3;

        $c4 = $r2[$i2];

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: java.lang.String getErrorMsg()>();

        $c4 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: char getNextCharFromCurrent(java.lang.String)>($r1);

     label2:
        return $c4;
    }

    protected char dtdNextChar() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        char $c4;
        int $i0, $i1, $i2, $i3;
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        char[] $r2;
        java.lang.String $r1;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

        $i1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputLen>;

        if $i1 >= $i0 goto label1;

        $r2 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: char[] mInputBuffer>;

        $i2 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i3 = $i2 + 1;

        r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr> = $i3;

        $c4 = $r2[$i2];

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: java.lang.String getErrorMsg()>();

        $c4 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: char getNextChar(java.lang.String)>($r1);

     label2:
        return $c4;
    }

    protected char getNextSkippingPEs() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        char $c4;
        int $i0, $i1, $i2, $i3, $i5;
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        char[] $r2;
        java.lang.String $r1;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

     label1:
        $i1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputLen>;

        if $i1 >= $i0 goto label2;

        $r2 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: char[] mInputBuffer>;

        $i2 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i3 = $i2 + 1;

        r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr> = $i3;

        $c4 = $r2[$i2];

        goto label3;

     label2:
        $r1 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: java.lang.String getErrorMsg()>();

        $c4 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: char getNextChar(java.lang.String)>($r1);

     label3:
        $i5 = (int) $c4;

        if $i5 == 37 goto label4;

        return $c4;

     label4:
        specialinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: void skipPE()>();

        goto label1;
    }

    private void skipPE() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        char $c6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        char[] $r1;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

        specialinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: void skipDTDName()>();

        $i1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputLen>;

        if $i1 >= $i0 goto label1;

        $r1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: char[] mInputBuffer>;

        $i4 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i5 = $i4 + 1;

        r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr> = $i5;

        $c6 = $r1[$i4];

        goto label2;

     label1:
        $c6 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: char dtdNextFromCurr()>();

     label2:
        $i7 = (int) $c6;

        if $i7 == 59 goto label3;

        $i2 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i3 = $i2 - 1;

        r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr> = $i3;

     label3:
        return;
    }

    protected void skipComment() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        char $c4;
        int $i0, $i1, $i2, $i3, $i5;
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        char[] $r1;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

        virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: void skipCommentContent()>();

        $i1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputLen>;

        if $i1 >= $i0 goto label1;

        $r1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: char[] mInputBuffer>;

        $i2 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i3 = $i2 + 1;

        r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr> = $i3;

        $c4 = $r1[$i2];

        goto label2;

     label1:
        $c4 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: char dtdNextFromCurr()>();

     label2:
        $i5 = (int) $c4;

        if $i5 == 62 goto label3;

        virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: void throwParseError(java.lang.String)>("String \'--\' not allowed in comment (missing \'>\'?)");

     label3:
        return;
    }

    protected void skipCommentContent() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i11, $i12, $i13, $i14;
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        char $c8, c9, $c10;
        char[] $r1, $r2;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

     label1:
        $i1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputLen>;

        if $i1 >= $i0 goto label2;

        $r2 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: char[] mInputBuffer>;

        $i6 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i7 = $i6 + 1;

        r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr> = $i7;

        $c8 = $r2[$i6];

        goto label3;

     label2:
        $c8 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: char dtdNextFromCurr()>();

     label3:
        c9 = $c8;

        $i11 = (int) $c8;

        if $i11 != 45 goto label6;

        $i3 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i2 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputLen>;

        if $i3 >= $i2 goto label4;

        $r1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: char[] mInputBuffer>;

        $i4 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i5 = $i4 + 1;

        r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr> = $i5;

        $c10 = $r1[$i4];

        goto label5;

     label4:
        $c10 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: char dtdNextFromCurr()>();

     label5:
        $i12 = (int) $c10;

        if $i12 != 45 goto label8;

        return;

     label6:
        $i13 = (int) $c8;

        if $i13 == 10 goto label7;

        $i14 = (int) $c8;

        if $i14 != 13 goto label8;

     label7:
        virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: boolean skipCRLF(char)>(c9);

     label8:
        goto label1;
    }

    protected void skipPI() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i11, $i12, $i13, $i14, $i15;
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        char $c8, c9, $c10;
        char[] $r1, $r2;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

     label01:
        $i1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputLen>;

        if $i1 >= $i0 goto label02;

        $r2 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: char[] mInputBuffer>;

        $i6 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i7 = $i6 + 1;

        r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr> = $i7;

        $c8 = $r2[$i6];

        goto label03;

     label02:
        $c8 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: char dtdNextFromCurr()>();

     label03:
        c9 = $c8;

        $i11 = (int) $c8;

        if $i11 != 63 goto label07;

     label04:
        $i3 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i2 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputLen>;

        if $i3 >= $i2 goto label05;

        $r1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: char[] mInputBuffer>;

        $i4 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i5 = $i4 + 1;

        r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr> = $i5;

        $c10 = $r1[$i4];

        goto label06;

     label05:
        $c10 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: char dtdNextFromCurr()>();

     label06:
        c9 = $c10;

        $i12 = (int) $c10;

        if $i12 == 63 goto label04;

        $i13 = (int) $c10;

        if $i13 != 62 goto label07;

        goto label10;

     label07:
        $i14 = (int) c9;

        if $i14 == 10 goto label08;

        $i15 = (int) c9;

        if $i15 != 13 goto label09;

     label08:
        virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: boolean skipCRLF(char)>(c9);

     label09:
        goto label01;

     label10:
        return;
    }

    private void skipDeclaration(char) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        char c4, $c5;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10;
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        char[] $r1;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

        c4 := @parameter0: char;

     label1:
        $i6 = (int) c4;

        if $i6 == 62 goto label7;

        $i1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputLen>;

        if $i1 >= $i0 goto label2;

        $r1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: char[] mInputBuffer>;

        $i2 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i3 = $i2 + 1;

        r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr> = $i3;

        $c5 = $r1[$i2];

        goto label3;

     label2:
        $c5 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: char dtdNextFromCurr()>();

     label3:
        c4 = $c5;

        $i7 = (int) $c5;

        if $i7 == 10 goto label4;

        $i8 = (int) $c5;

        if $i8 != 13 goto label5;

     label4:
        virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: boolean skipCRLF(char)>(c4);

        goto label1;

     label5:
        $i9 = (int) $c5;

        if $i9 == 39 goto label6;

        $i10 = (int) $c5;

        if $i10 != 34 goto label1;

     label6:
        specialinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: void skipLiteral(char)>(c4);

        goto label1;

     label7:
        return;
    }

    private void skipLiteral(char) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        char c2, c3, $c6;
        int $i0, $i1, $i4, $i5, $i7, $i8, $i9, $i10;
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        char[] $r1;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

        c3 := @parameter0: char;

     label1:
        $i1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputLen>;

        if $i1 >= $i0 goto label2;

        $r1 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: char[] mInputBuffer>;

        $i4 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr>;

        $i5 = $i4 + 1;

        r0.<com.ctc.wstx.dtd.MinimalDTDReader: int mInputPtr> = $i5;

        $c6 = $r1[$i4];

        goto label3;

     label2:
        $c6 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: char dtdNextFromCurr()>();

     label3:
        c2 = $c6;

        $i7 = (int) $c6;

        if $i7 == 10 goto label4;

        $i8 = (int) $c6;

        if $i8 != 13 goto label5;

     label4:
        virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: boolean skipCRLF(char)>(c2);

        goto label6;

     label5:
        $i9 = (int) $c6;

        $i10 = (int) c3;

        if $i9 != $i10 goto label6;

        goto label7;

     label6:
        goto label1;

     label7:
        return;
    }

    private void skipDTDName() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        char $c0;
        java.lang.String $r1;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

        $r1 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: java.lang.String getErrorMsg()>();

        $c0 = virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: char getNextChar(java.lang.String)>($r1);

        virtualinvoke r0.<com.ctc.wstx.dtd.MinimalDTDReader: int skipFullName(char)>($c0);

        return;
    }

    protected java.lang.String getErrorMsg()
    {
        com.ctc.wstx.dtd.MinimalDTDReader r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dtd.MinimalDTDReader;

        $z0 = r0.<com.ctc.wstx.dtd.MinimalDTDReader: boolean mIsExternal>;

        if $z0 == 0 goto label1;

        $r1 = " in external DTD subset";

        goto label2;

     label1:
        $r1 = " in internal DTD subset";

     label2:
        return $r1;
    }
}
