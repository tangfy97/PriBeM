class com.jhlabs.image.CurlFilter$Sampler extends java.lang.Object
{
    private int edgeAction;
    private int width;
    private int height;
    private int[] inPixels;

    public void <init>(java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage r1;
        int[] $r2;
        com.jhlabs.image.CurlFilter$Sampler r0;
        int $i0, $i1;

        r0 := @this: com.jhlabs.image.CurlFilter$Sampler;

        r1 := @parameter0: java.awt.image.BufferedImage;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r1.<java.awt.image.BufferedImage: int getType()>();

        $r2 = staticinvoke <com.jhlabs.image.ImageUtils: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r1, 0, 0, $i0, $i1, null);

        r0.<com.jhlabs.image.CurlFilter$Sampler: int[] inPixels> = $r2;

        return;
    }

    public int sample(float, float)
    {
        com.jhlabs.image.CurlFilter$Sampler r0;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        float f0, f1, $f2, f3, $f4, f5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.jhlabs.image.CurlFilter$Sampler;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        i0 = (int) $d1;

        $d2 = (double) f1;

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        i1 = (int) $d3;

        $f2 = (float) i0;

        f3 = f0 - $f2;

        $f4 = (float) i1;

        f5 = f1 - $f4;

        if i0 < 0 goto label1;

        $i2 = r0.<com.jhlabs.image.CurlFilter$Sampler: int width>;

        $i3 = $i2 - 1;

        if i0 >= $i3 goto label1;

        if i1 < 0 goto label1;

        $i4 = r0.<com.jhlabs.image.CurlFilter$Sampler: int height>;

        $i5 = $i4 - 1;

        if i1 >= $i5 goto label1;

        $i6 = r0.<com.jhlabs.image.CurlFilter$Sampler: int width>;

        $i7 = $i6 * i1;

        i8 = $i7 + i0;

        $r1 = r0.<com.jhlabs.image.CurlFilter$Sampler: int[] inPixels>;

        i15 = $r1[i8];

        $r2 = r0.<com.jhlabs.image.CurlFilter$Sampler: int[] inPixels>;

        $i9 = i8 + 1;

        i16 = $r2[$i9];

        $r3 = r0.<com.jhlabs.image.CurlFilter$Sampler: int[] inPixels>;

        $i10 = r0.<com.jhlabs.image.CurlFilter$Sampler: int width>;

        $i11 = i8 + $i10;

        i17 = $r3[$i11];

        $r4 = r0.<com.jhlabs.image.CurlFilter$Sampler: int[] inPixels>;

        $i12 = r0.<com.jhlabs.image.CurlFilter$Sampler: int width>;

        $i13 = i8 + $i12;

        $i14 = $i13 + 1;

        i18 = $r4[$i14];

        goto label2;

     label1:
        $r5 = r0.<com.jhlabs.image.CurlFilter$Sampler: int[] inPixels>;

        $i19 = r0.<com.jhlabs.image.CurlFilter$Sampler: int width>;

        $i20 = r0.<com.jhlabs.image.CurlFilter$Sampler: int height>;

        i15 = specialinvoke r0.<com.jhlabs.image.CurlFilter$Sampler: int getPixel(int[],int,int,int,int)>($r5, i0, i1, $i19, $i20);

        $r6 = r0.<com.jhlabs.image.CurlFilter$Sampler: int[] inPixels>;

        $i21 = i0 + 1;

        $i22 = r0.<com.jhlabs.image.CurlFilter$Sampler: int width>;

        $i23 = r0.<com.jhlabs.image.CurlFilter$Sampler: int height>;

        i16 = specialinvoke r0.<com.jhlabs.image.CurlFilter$Sampler: int getPixel(int[],int,int,int,int)>($r6, $i21, i1, $i22, $i23);

        $r7 = r0.<com.jhlabs.image.CurlFilter$Sampler: int[] inPixels>;

        $i24 = i1 + 1;

        $i25 = r0.<com.jhlabs.image.CurlFilter$Sampler: int width>;

        $i26 = r0.<com.jhlabs.image.CurlFilter$Sampler: int height>;

        i17 = specialinvoke r0.<com.jhlabs.image.CurlFilter$Sampler: int getPixel(int[],int,int,int,int)>($r7, i0, $i24, $i25, $i26);

        $r8 = r0.<com.jhlabs.image.CurlFilter$Sampler: int[] inPixels>;

        $i27 = i0 + 1;

        $i28 = i1 + 1;

        $i29 = r0.<com.jhlabs.image.CurlFilter$Sampler: int width>;

        $i30 = r0.<com.jhlabs.image.CurlFilter$Sampler: int height>;

        i18 = specialinvoke r0.<com.jhlabs.image.CurlFilter$Sampler: int getPixel(int[],int,int,int,int)>($r8, $i27, $i28, $i29, $i30);

     label2:
        $i31 = staticinvoke <com.jhlabs.image.ImageMath: int bilinearInterpolate(float,float,int,int,int,int)>(f3, f5, i15, i16, i17, i18);

        return $i31;
    }

    private final int getPixel(int[], int, int, int, int)
    {
        com.jhlabs.image.CurlFilter$Sampler r0;
        int[] r1;
        int i0, i1, i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;

        r0 := @this: com.jhlabs.image.CurlFilter$Sampler;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i4 := @parameter3: int;

        i2 := @parameter4: int;

        if i0 < 0 goto label1;

        if i0 >= i4 goto label1;

        if i1 < 0 goto label1;

        if i1 < i2 goto label5;

     label1:
        $i19 = r0.<com.jhlabs.image.CurlFilter$Sampler: int edgeAction>;

        tableswitch($i19)
        {
            case 0: goto label2;
            case 1: goto label4;
            case 2: goto label3;
            default: goto label2;
        };

     label2:
        return 0;

     label3:
        $i3 = staticinvoke <com.jhlabs.image.ImageMath: int mod(int,int)>(i1, i2);

        $i5 = $i3 * i4;

        $i6 = staticinvoke <com.jhlabs.image.ImageMath: int mod(int,int)>(i0, i4);

        $i7 = $i5 + $i6;

        $i8 = r1[$i7];

        return $i8;

     label4:
        $i9 = i2 - 1;

        $i10 = staticinvoke <com.jhlabs.image.ImageMath: int clamp(int,int,int)>(i1, 0, $i9);

        $i12 = $i10 * i4;

        $i11 = i4 - 1;

        $i13 = staticinvoke <com.jhlabs.image.ImageMath: int clamp(int,int,int)>(i0, 0, $i11);

        $i14 = $i12 + $i13;

        $i15 = r1[$i14];

        return $i15;

     label5:
        $i16 = i1 * i4;

        $i17 = $i16 + i0;

        $i18 = r1[$i17];

        return $i18;
    }
}
