public final class com.mycila.inject.jsr250.Jsr250 extends java.lang.Object
{

    private void <init>()
    {
        com.mycila.inject.jsr250.Jsr250 r0;

        r0 := @this: com.mycila.inject.jsr250.Jsr250;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient com.mycila.inject.jsr250.Jsr250Injector createInjector(com.google.inject.Module[])
    {
        com.mycila.inject.jsr250.Jsr250Injector $r2;
        java.util.List $r1;
        com.google.inject.Module[] r0;

        r0 := @parameter0: com.google.inject.Module[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <com.mycila.inject.jsr250.Jsr250: com.mycila.inject.jsr250.Jsr250Injector createInjector(java.lang.Iterable)>($r1);

        return $r2;
    }

    public static com.mycila.inject.jsr250.Jsr250Injector createInjector(java.lang.Iterable)
    {
        com.google.inject.Stage $r1;
        com.mycila.inject.jsr250.Jsr250Injector $r2;
        java.lang.Iterable r0;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = <com.google.inject.Stage: com.google.inject.Stage DEVELOPMENT>;

        $r2 = staticinvoke <com.mycila.inject.jsr250.Jsr250: com.mycila.inject.jsr250.Jsr250Injector createInjector(com.google.inject.Stage,java.lang.Iterable)>($r1, r0);

        return $r2;
    }

    public static transient com.mycila.inject.jsr250.Jsr250Injector createInjector(com.google.inject.Stage, com.google.inject.Module[])
    {
        com.google.inject.Stage r0;
        com.mycila.inject.jsr250.Jsr250Injector $r3;
        java.util.List $r2;
        com.google.inject.Module[] r1;

        r0 := @parameter0: com.google.inject.Stage;

        r1 := @parameter1: com.google.inject.Module[];

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r3 = staticinvoke <com.mycila.inject.jsr250.Jsr250: com.mycila.inject.jsr250.Jsr250Injector createInjector(com.google.inject.Stage,java.lang.Iterable)>(r0, $r2);

        return $r3;
    }

    public static com.mycila.inject.jsr250.Jsr250Injector createInjector(com.google.inject.Stage, java.lang.Iterable)
    {
        com.mycila.inject.jsr250.Jsr250Injector $r10;
        java.lang.RuntimeException $r11;
        com.mycila.inject.jsr250.Jsr250Module[] $r5;
        com.mycila.inject.jsr250.Jsr250$DestroyModule[] $r1;
        java.lang.Iterable $r3, r12, $r13;
        com.google.inject.Stage r4;
        com.google.inject.Injector $r8;
        com.mycila.inject.jsr250.Jsr250Module $r6;
        java.util.List $r2, $r7;
        com.mycila.inject.jsr250.Jsr250$DestroyModule $r0;
        java.lang.Object $r9;
        boolean $z0;

        r4 := @parameter0: com.google.inject.Stage;

        r12 := @parameter1: java.lang.Iterable;

        $r0 = new com.mycila.inject.jsr250.Jsr250$DestroyModule;

        specialinvoke $r0.<com.mycila.inject.jsr250.Jsr250$DestroyModule: void <init>(com.mycila.inject.jsr250.Jsr250$1)>(null);

        $r1 = newarray (com.mycila.inject.jsr250.Jsr250$DestroyModule)[1];

        $r1[0] = $r0;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>($r2, r12);

     label1:
        $z0 = staticinvoke <com.mycila.inject.jsr250.Jsr250: boolean hasJSR250Module(com.google.inject.Stage,java.lang.Iterable)>(r4, $r3);

        if $z0 == 0 goto label2;

        $r13 = $r3;

        goto label3;

     label2:
        $r5 = newarray (com.mycila.inject.jsr250.Jsr250Module)[1];

        $r6 = new com.mycila.inject.jsr250.Jsr250Module;

        specialinvoke $r6.<com.mycila.inject.jsr250.Jsr250Module: void <init>()>();

        $r5[0] = $r6;

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r13 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>($r3, $r7);

     label3:
        $r8 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Stage,java.lang.Iterable)>(r4, $r13);

        $r9 = interfaceinvoke $r8.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lcom/mycila/inject/jsr250/Jsr250Injector;");

        $r10 = (com.mycila.inject.jsr250.Jsr250Injector) $r9;

     label4:
        return $r10;

     label5:
        $r11 := @caughtexception;

        virtualinvoke $r0.<com.mycila.inject.jsr250.Jsr250$DestroyModule: void destroy()>();

        throw $r11;

        catch java.lang.RuntimeException from label1 to label4 with label5;
    }

    private static boolean hasJSR250Module(com.google.inject.Stage, java.lang.Iterable)
    {
        java.util.Iterator $r4;
        com.google.inject.Key $r0;
        java.lang.Iterable r2;
        com.google.inject.Stage r1;
        com.mycila.inject.jsr250.Jsr250$1 $r7;
        java.util.List $r3;
        com.google.inject.spi.Element r6;
        java.lang.Boolean r9;
        java.lang.Object $r5, $r8;
        boolean $z0, $z1;

        r1 := @parameter0: com.google.inject.Stage;

        r2 := @parameter1: java.lang.Iterable;

        $r0 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class)>(class "Lcom/mycila/inject/jsr250/Jsr250Destroyer;");

        $r3 = staticinvoke <com.google.inject.spi.Elements: java.util.List getElements(com.google.inject.Stage,java.lang.Iterable)>(r1, r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.google.inject.spi.Element) $r5;

        $r7 = new com.mycila.inject.jsr250.Jsr250$1;

        specialinvoke $r7.<com.mycila.inject.jsr250.Jsr250$1: void <init>(com.google.inject.Key)>($r0);

        $r8 = interfaceinvoke r6.<com.google.inject.spi.Element: java.lang.Object acceptVisitor(com.google.inject.spi.ElementVisitor)>($r7);

        r9 = (java.lang.Boolean) $r8;

        if r9 == null goto label2;

        $z1 = virtualinvoke r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public static com.google.inject.Module newJsr250Module()
    {
        com.mycila.inject.jsr250.Jsr250Module $r0;

        $r0 = new com.mycila.inject.jsr250.Jsr250Module;

        specialinvoke $r0.<com.mycila.inject.jsr250.Jsr250Module: void <init>()>();

        return $r0;
    }

    public static boolean hasJSR250Module(com.google.inject.Injector)
    {
        com.google.inject.Injector r0;
        java.util.Map $r1;
        com.google.inject.Key $r2;
        boolean $z0;

        r0 := @parameter0: com.google.inject.Injector;

        $r1 = interfaceinvoke r0.<com.google.inject.Injector: java.util.Map getBindings()>();

        $r2 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class)>(class "Lcom/mycila/inject/jsr250/Jsr250Destroyer;");

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public static void preDestroy(java.lang.Object)
    {
        com.mycila.inject.internal.guava.base.Predicate $r6;
        java.util.Iterator $r8;
        com.mycila.inject.jsr250.Jsr250PreDestroyHandler $r3;
        java.lang.Iterable $r5, $r7;
        java.lang.'annotation'.Annotation $r11;
        java.lang.Object r0, $r9;
        java.lang.Class $r1, $r4;
        com.google.inject.TypeLiteral $r2;
        java.lang.reflect.Method r10;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <com.mycila.inject.internal.Reflect: java.lang.Class getTargetClass(java.lang.Object)>(r0);

        $r2 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>($r1);

        $r3 = new com.mycila.inject.jsr250.Jsr250PreDestroyHandler;

        specialinvoke $r3.<com.mycila.inject.jsr250.Jsr250PreDestroyHandler: void <init>()>();

        $r4 = virtualinvoke $r2.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $r5 = staticinvoke <com.mycila.inject.internal.Reflect: java.lang.Iterable findMethods(java.lang.Class)>($r4);

        $r6 = staticinvoke <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.guava.base.Predicate annotatedBy(java.lang.Class)>(class "Ljavax/annotation/PreDestroy;");

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,com.mycila.inject.internal.guava.base.Predicate)>($r5, $r6);

        $r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.reflect.Method) $r9;

        $r11 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljavax/annotation/PreDestroy;");

        interfaceinvoke $r3.<com.mycila.inject.injector.MethodHandler: void handle(com.google.inject.TypeLiteral,java.lang.Object,java.lang.reflect.Member,java.lang.'annotation'.Annotation)>($r2, r0, r10, $r11);

        goto label1;

     label2:
        return;
    }
}
