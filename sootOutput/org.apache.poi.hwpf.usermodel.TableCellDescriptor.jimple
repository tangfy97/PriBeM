public final class org.apache.poi.hwpf.usermodel.TableCellDescriptor extends org.apache.poi.hwpf.model.types.TCAbstractType implements java.lang.Cloneable
{
    public static final int SIZE;

    public void <init>()
    {
        org.apache.poi.hwpf.usermodel.TableCellDescriptor r0;

        r0 := @this: org.apache.poi.hwpf.usermodel.TableCellDescriptor;

        specialinvoke r0.<org.apache.poi.hwpf.model.types.TCAbstractType: void <init>()>();

        return;
    }

    protected void fillFields(byte[], int)
    {
        byte[] r1;
        org.apache.poi.hwpf.usermodel.BorderCode $r2, $r3, $r4, $r5;
        org.apache.poi.hwpf.usermodel.TableCellDescriptor r0;
        short $s2, $s4;
        int i0, $i1, $i3, $i5, $i6, $i7, $i8;

        r0 := @this: org.apache.poi.hwpf.usermodel.TableCellDescriptor;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = 0 + i0;

        $s2 = staticinvoke <org.apache.poi.util.LittleEndian: short getShort(byte[],int)>(r1, $i1);

        r0.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: short field_1_rgf> = $s2;

        $i3 = 2 + i0;

        $s4 = staticinvoke <org.apache.poi.util.LittleEndian: short getShort(byte[],int)>(r1, $i3);

        r0.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: short field_2_wWidth> = $s4;

        $r2 = new org.apache.poi.hwpf.usermodel.BorderCode;

        $i5 = 4 + i0;

        specialinvoke $r2.<org.apache.poi.hwpf.usermodel.BorderCode: void <init>(byte[],int)>(r1, $i5);

        virtualinvoke r0.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: void setBrcTop(org.apache.poi.hwpf.usermodel.BorderCode)>($r2);

        $r3 = new org.apache.poi.hwpf.usermodel.BorderCode;

        $i6 = 8 + i0;

        specialinvoke $r3.<org.apache.poi.hwpf.usermodel.BorderCode: void <init>(byte[],int)>(r1, $i6);

        virtualinvoke r0.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: void setBrcLeft(org.apache.poi.hwpf.usermodel.BorderCode)>($r3);

        $r4 = new org.apache.poi.hwpf.usermodel.BorderCode;

        $i7 = 12 + i0;

        specialinvoke $r4.<org.apache.poi.hwpf.usermodel.BorderCode: void <init>(byte[],int)>(r1, $i7);

        virtualinvoke r0.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: void setBrcBottom(org.apache.poi.hwpf.usermodel.BorderCode)>($r4);

        $r5 = new org.apache.poi.hwpf.usermodel.BorderCode;

        $i8 = 16 + i0;

        specialinvoke $r5.<org.apache.poi.hwpf.usermodel.BorderCode: void <init>(byte[],int)>(r1, $i8);

        virtualinvoke r0.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: void setBrcRight(org.apache.poi.hwpf.usermodel.BorderCode)>($r5);

        return;
    }

    public void serialize(byte[], int)
    {
        byte[] r0;
        org.apache.poi.hwpf.usermodel.BorderCode $r2, $r3, $r4, $r5;
        org.apache.poi.hwpf.usermodel.TableCellDescriptor r1;
        short $s1, $s3;
        int i0, $i2, $i4, $i5, $i6, $i7, $i8;

        r1 := @this: org.apache.poi.hwpf.usermodel.TableCellDescriptor;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i2 = 0 + i0;

        $s1 = r1.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: short field_1_rgf>;

        staticinvoke <org.apache.poi.util.LittleEndian: void putShort(byte[],int,short)>(r0, $i2, $s1);

        $i4 = 2 + i0;

        $s3 = r1.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: short field_2_wWidth>;

        staticinvoke <org.apache.poi.util.LittleEndian: void putShort(byte[],int,short)>(r0, $i4, $s3);

        $r2 = virtualinvoke r1.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: org.apache.poi.hwpf.usermodel.BorderCode getBrcTop()>();

        $i5 = 4 + i0;

        virtualinvoke $r2.<org.apache.poi.hwpf.usermodel.BorderCode: void serialize(byte[],int)>(r0, $i5);

        $r3 = virtualinvoke r1.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: org.apache.poi.hwpf.usermodel.BorderCode getBrcLeft()>();

        $i6 = 8 + i0;

        virtualinvoke $r3.<org.apache.poi.hwpf.usermodel.BorderCode: void serialize(byte[],int)>(r0, $i6);

        $r4 = virtualinvoke r1.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: org.apache.poi.hwpf.usermodel.BorderCode getBrcBottom()>();

        $i7 = 12 + i0;

        virtualinvoke $r4.<org.apache.poi.hwpf.usermodel.BorderCode: void serialize(byte[],int)>(r0, $i7);

        $r5 = virtualinvoke r1.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: org.apache.poi.hwpf.usermodel.BorderCode getBrcRight()>();

        $i8 = 16 + i0;

        virtualinvoke $r5.<org.apache.poi.hwpf.usermodel.BorderCode: void serialize(byte[],int)>(r0, $i8);

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.poi.hwpf.usermodel.BorderCode $r5, $r7, $r8, $r10, $r11, $r13, $r14, $r16;
        org.apache.poi.hwpf.usermodel.ShadingDescriptor $r3, $r4;
        org.apache.poi.hwpf.usermodel.TableCellDescriptor r0, r2;
        java.lang.Object $r1, $r6, $r9, $r12, $r15;

        r0 := @this: org.apache.poi.hwpf.usermodel.TableCellDescriptor;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (org.apache.poi.hwpf.usermodel.TableCellDescriptor) $r1;

        $r3 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: org.apache.poi.hwpf.usermodel.ShadingDescriptor getShd()>();

        $r4 = virtualinvoke $r3.<org.apache.poi.hwpf.usermodel.ShadingDescriptor: org.apache.poi.hwpf.usermodel.ShadingDescriptor clone()>();

        virtualinvoke r2.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: void setShd(org.apache.poi.hwpf.usermodel.ShadingDescriptor)>($r4);

        $r5 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: org.apache.poi.hwpf.usermodel.BorderCode getBrcTop()>();

        $r6 = virtualinvoke $r5.<org.apache.poi.hwpf.usermodel.BorderCode: java.lang.Object clone()>();

        $r7 = (org.apache.poi.hwpf.usermodel.BorderCode) $r6;

        virtualinvoke r2.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: void setBrcTop(org.apache.poi.hwpf.usermodel.BorderCode)>($r7);

        $r8 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: org.apache.poi.hwpf.usermodel.BorderCode getBrcLeft()>();

        $r9 = virtualinvoke $r8.<org.apache.poi.hwpf.usermodel.BorderCode: java.lang.Object clone()>();

        $r10 = (org.apache.poi.hwpf.usermodel.BorderCode) $r9;

        virtualinvoke r2.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: void setBrcLeft(org.apache.poi.hwpf.usermodel.BorderCode)>($r10);

        $r11 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: org.apache.poi.hwpf.usermodel.BorderCode getBrcBottom()>();

        $r12 = virtualinvoke $r11.<org.apache.poi.hwpf.usermodel.BorderCode: java.lang.Object clone()>();

        $r13 = (org.apache.poi.hwpf.usermodel.BorderCode) $r12;

        virtualinvoke r2.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: void setBrcBottom(org.apache.poi.hwpf.usermodel.BorderCode)>($r13);

        $r14 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: org.apache.poi.hwpf.usermodel.BorderCode getBrcRight()>();

        $r15 = virtualinvoke $r14.<org.apache.poi.hwpf.usermodel.BorderCode: java.lang.Object clone()>();

        $r16 = (org.apache.poi.hwpf.usermodel.BorderCode) $r15;

        virtualinvoke r2.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: void setBrcRight(org.apache.poi.hwpf.usermodel.BorderCode)>($r16);

        return r2;
    }

    public static org.apache.poi.hwpf.usermodel.TableCellDescriptor convertBytesToTC(byte[], int)
    {
        int i0;
        org.apache.poi.hwpf.usermodel.TableCellDescriptor $r0;
        byte[] r1;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r0 = new org.apache.poi.hwpf.usermodel.TableCellDescriptor;

        specialinvoke $r0.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: void <init>()>();

        virtualinvoke $r0.<org.apache.poi.hwpf.usermodel.TableCellDescriptor: void fillFields(byte[],int)>(r1, i0);

        return $r0;
    }

    public static void <clinit>()
    {
        <org.apache.poi.hwpf.usermodel.TableCellDescriptor: int SIZE> = 20;

        return;
    }
}
