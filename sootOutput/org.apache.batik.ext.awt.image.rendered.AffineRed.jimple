public class org.apache.batik.ext.awt.image.rendered.AffineRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{
    java.awt.RenderingHints hints;
    java.awt.geom.AffineTransform src2me;
    java.awt.geom.AffineTransform me2src;

    public java.awt.geom.AffineTransform getTransform()
    {
        org.apache.batik.ext.awt.image.rendered.AffineRed r0;
        java.lang.Object $r2;
        java.awt.geom.AffineTransform $r1, $r3;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AffineRed;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.AffineRed: java.awt.geom.AffineTransform src2me>;

        $r2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r3 = (java.awt.geom.AffineTransform) $r2;

        return $r3;
    }

    public org.apache.batik.ext.awt.image.rendered.CachableRed getSource()
    {
        org.apache.batik.ext.awt.image.rendered.AffineRed r0;
        java.util.Vector $r1;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AffineRed;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r2;

        return $r3;
    }

    public void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.geom.AffineTransform, java.awt.RenderingHints)
    {
        java.awt.Rectangle $r5, $r7;
        java.awt.geom.Point2D $r11;
        java.awt.RenderingHints r2;
        java.awt.image.SampleModel $r9;
        int $i0, $i1, $i2, $i3;
        java.awt.geom.NoninvertibleTransformException $r12;
        double $d0, $d1;
        org.apache.batik.ext.awt.image.rendered.AffineRed r0;
        java.awt.Shape $r6;
        java.awt.geom.AffineTransform r1, $r3;
        java.awt.geom.Point2D$Float $r10;
        org.apache.batik.ext.awt.image.rendered.CachableRed r4;
        java.awt.image.ColorModel $r8;
        float $f0, $f1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AffineRed;

        r4 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r1 := @parameter1: java.awt.geom.AffineTransform;

        r2 := @parameter2: java.awt.RenderingHints;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.rendered.AffineRed: java.awt.geom.AffineTransform src2me> = r1;

        r0.<org.apache.batik.ext.awt.image.rendered.AffineRed: java.awt.RenderingHints hints> = r2;

     label1:
        $r3 = virtualinvoke r1.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

        r0.<org.apache.batik.ext.awt.image.rendered.AffineRed: java.awt.geom.AffineTransform me2src> = $r3;

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        r0.<org.apache.batik.ext.awt.image.rendered.AffineRed: java.awt.geom.AffineTransform me2src> = null;

     label4:
        $r5 = interfaceinvoke r4.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r6 = virtualinvoke r1.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r5);

        $r7 = interfaceinvoke $r6.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $r8 = staticinvoke <org.apache.batik.ext.awt.image.rendered.AffineRed: java.awt.image.ColorModel fixColorModel(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r4);

        $r9 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AffineRed: java.awt.image.SampleModel fixSampleModel(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.image.ColorModel,java.awt.Rectangle)>(r4, $r8, $r7);

        $r10 = new java.awt.geom.Point2D$Float;

        $i0 = interfaceinvoke r4.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $f0 = (float) $i0;

        $i1 = interfaceinvoke r4.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        $f1 = (float) $i1;

        specialinvoke $r10.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f0, $f1);

        $r11 = virtualinvoke r1.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r10, null);

        $d0 = virtualinvoke $r11.<java.awt.geom.Point2D: double getX()>();

        $i2 = (int) $d0;

        $d1 = virtualinvoke $r11.<java.awt.geom.Point2D: double getY()>();

        $i3 = (int) $d1;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r4, $r7, $r8, $r9, $i2, $i3, null);

        return;

        catch java.awt.geom.NoninvertibleTransformException from label1 to label2 with label3;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        org.apache.batik.ext.awt.image.rendered.AffineRed r3;
        java.awt.Rectangle $r2;
        org.apache.batik.ext.awt.image.rendered.PadRed$ZeroRecter $r1;
        int $i0, $i1, $i2, $i3;
        java.awt.image.WritableRaster r0;

        r3 := @this: org.apache.batik.ext.awt.image.rendered.AffineRed;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $r1 = staticinvoke <org.apache.batik.ext.awt.image.rendered.PadRed$ZeroRecter: org.apache.batik.ext.awt.image.rendered.PadRed$ZeroRecter getZeroRecter(java.awt.image.WritableRaster)>(r0);

        $r2 = new java.awt.Rectangle;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i2 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i3 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        specialinvoke $r2.<java.awt.Rectangle: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        virtualinvoke $r1.<org.apache.batik.ext.awt.image.rendered.PadRed$ZeroRecter: void zeroRect(java.awt.Rectangle)>($r2);

        virtualinvoke r3.<org.apache.batik.ext.awt.image.rendered.AffineRed: void genRect(java.awt.image.WritableRaster)>(r0);

        return r0;
    }

    public java.awt.image.Raster getTile(int, int)
    {
        org.apache.batik.ext.awt.image.rendered.AffineRed r0;
        java.awt.Point $r2;
        java.awt.geom.AffineTransform $r1;
        java.awt.image.SampleModel $r3;
        int i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i8, i9;
        java.awt.image.WritableRaster $r4;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AffineRed;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.AffineRed: java.awt.geom.AffineTransform me2src>;

        if $r1 != null goto label1;

        return null;

     label1:
        $i3 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridXOff>;

        $i1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileWidth>;

        $i2 = i0 * $i1;

        i4 = $i3 + $i2;

        $i8 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridYOff>;

        $i6 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileHeight>;

        $i7 = i5 * $i6;

        i9 = $i8 + $i7;

        $r2 = new java.awt.Point;

        specialinvoke $r2.<java.awt.Point: void <init>(int,int)>(i4, i9);

        $r3 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel sm>;

        $r4 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($r3, $r2);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AffineRed: void genRect(java.awt.image.WritableRaster)>($r4);

        return $r4;
    }

    public void genRect(java.awt.image.WritableRaster)
    {
        java.util.Vector $r7;
        org.apache.batik.ext.awt.image.rendered.AffineRed r0;
        java.awt.geom.AffineTransform $r1, $r3, $r14, r16, $r17, $r19, $r23;
        org.apache.batik.ext.awt.image.rendered.CachableRed r9;
        java.awt.geom.Point2D$Double $r21;
        java.awt.image.AffineTransformOp $r24;
        java.awt.image.Raster $r13;
        java.awt.geom.Point2D$Float $r18;
        java.awt.geom.Point2D $r20, $r22;
        java.awt.RenderingHints $r25;
        boolean $z0, $z1, $z2;
        java.awt.Shape $r5;
        java.awt.image.BufferedImage $r30, $r32;
        float $f0, $f1;
        java.awt.Rectangle $r4, $r6, $r10, $r11, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        java.awt.image.ColorModel $r26, $r27, $r29;
        java.awt.image.WritableRaster r2, r28, $r31, $r33;
        java.lang.Object $r8, $r15;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AffineRed;

        r2 := @parameter0: java.awt.image.WritableRaster;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.AffineRed: java.awt.geom.AffineTransform me2src>;

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = r0.<org.apache.batik.ext.awt.image.rendered.AffineRed: java.awt.geom.AffineTransform me2src>;

        $r4 = virtualinvoke r2.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r5 = virtualinvoke $r3.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r4);

        $r6 = interfaceinvoke $r5.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $i0 = $r6.<java.awt.Rectangle: int x>;

        $i7 = $i0 - 1;

        $i1 = $r6.<java.awt.Rectangle: int y>;

        $i6 = $i1 - 1;

        $i2 = $r6.<java.awt.Rectangle: int width>;

        $i5 = $i2 + 2;

        $i3 = $r6.<java.awt.Rectangle: int height>;

        $i4 = $i3 + 2;

        virtualinvoke $r6.<java.awt.Rectangle: void setBounds(int,int,int,int)>($i7, $i6, $i5, $i4);

        $r7 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r8 = virtualinvoke $r7.<java.util.Vector: java.lang.Object get(int)>(0);

        r9 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r8;

        $r10 = interfaceinvoke r9.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $z0 = virtualinvoke $r6.<java.awt.Rectangle: boolean intersects(java.awt.Rectangle)>($r10);

        if $z0 != 0 goto label2;

        return;

     label2:
        $r11 = interfaceinvoke r9.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r12 = virtualinvoke $r6.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r11);

        $r13 = interfaceinvoke r9.<java.awt.image.RenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>($r12);

        if $r13 != null goto label3;

        return;

     label3:
        $r14 = r0.<org.apache.batik.ext.awt.image.rendered.AffineRed: java.awt.geom.AffineTransform src2me>;

        $r15 = virtualinvoke $r14.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        r16 = (java.awt.geom.AffineTransform) $r15;

        $i8 = virtualinvoke $r13.<java.awt.image.Raster: int getMinX()>();

        $d0 = (double) $i8;

        $i9 = virtualinvoke $r13.<java.awt.image.Raster: int getMinY()>();

        $d1 = (double) $i9;

        $r17 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d0, $d1);

        virtualinvoke r16.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r17);

        $r18 = new java.awt.geom.Point2D$Float;

        $i10 = virtualinvoke r2.<java.awt.image.Raster: int getMinX()>();

        $f0 = (float) $i10;

        $i11 = virtualinvoke r2.<java.awt.image.Raster: int getMinY()>();

        $f1 = (float) $i11;

        specialinvoke $r18.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f0, $f1);

        $r19 = r0.<org.apache.batik.ext.awt.image.rendered.AffineRed: java.awt.geom.AffineTransform me2src>;

        $r20 = virtualinvoke $r19.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r18, null);

        $r21 = new java.awt.geom.Point2D$Double;

        $d2 = virtualinvoke $r20.<java.awt.geom.Point2D: double getX()>();

        $i12 = virtualinvoke $r13.<java.awt.image.Raster: int getMinX()>();

        $d3 = (double) $i12;

        $d4 = $d2 - $d3;

        $d5 = virtualinvoke $r20.<java.awt.geom.Point2D: double getY()>();

        $i13 = virtualinvoke $r13.<java.awt.image.Raster: int getMinY()>();

        $d6 = (double) $i13;

        $d7 = $d5 - $d6;

        specialinvoke $r21.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d4, $d7);

        $r22 = virtualinvoke r16.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r21, null);

        $d8 = virtualinvoke $r22.<java.awt.geom.Point2D: double getX()>();

        $d9 = neg $d8;

        $d10 = virtualinvoke $r22.<java.awt.geom.Point2D: double getY()>();

        $d11 = neg $d10;

        $r23 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d9, $d11);

        virtualinvoke r16.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>($r23);

        $r24 = new java.awt.image.AffineTransformOp;

        $r25 = r0.<org.apache.batik.ext.awt.image.rendered.AffineRed: java.awt.RenderingHints hints>;

        specialinvoke $r24.<java.awt.image.AffineTransformOp: void <init>(java.awt.geom.AffineTransform,java.awt.RenderingHints)>(r16, $r25);

        $r26 = interfaceinvoke r9.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r27 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.ColorModel getColorModel()>();

        r28 = (java.awt.image.WritableRaster) $r13;

        $r29 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,java.awt.image.ColorModel,boolean)>(r28, $r26, 1);

        $r30 = new java.awt.image.BufferedImage;

        $r31 = virtualinvoke r28.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>(0, 0);

        $z1 = virtualinvoke $r29.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r30.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r29, $r31, $z1, null);

        $r32 = new java.awt.image.BufferedImage;

        $r33 = virtualinvoke r2.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>(0, 0);

        $z2 = virtualinvoke $r27.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r32.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r27, $r33, $z2, null);

        virtualinvoke $r24.<java.awt.image.AffineTransformOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r30, $r32);

        return;
    }

    protected static java.awt.image.ColorModel fixColorModel(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.color.ColorSpace $r2;
        java.awt.image.SampleModel $r3;
        int[] r7, r8;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14;
        boolean $z0, $z1;
        java.awt.image.DirectColorModel $r5;
        java.awt.image.ComponentColorModel $r4;
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.image.ColorModel $r1, r6;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        r6 = $r1;

        $z0 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z1 != 0 goto label1;

        r6 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceColorModel(java.awt.image.ColorModel,boolean)>($r1, 1);

     label1:
        return r6;

     label2:
        $r2 = virtualinvoke $r1.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $r3 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = virtualinvoke $r3.<java.awt.image.SampleModel: int getNumBands()>();

        i1 = $i0 + 1;

        if i1 != 4 goto label5;

        r7 = newarray (int)[4];

        i13 = 0;

        goto label4;

     label3:
        $i3 = 8 * i13;

        $i4 = 16711680 >> $i3;

        r7[i13] = $i4;

        i13 = i13 + 1;

     label4:
        $i2 = i1 - 1;

        if i13 < $i2 goto label3;

        $i5 = i1 - 1;

        $i6 = 8 * $i5;

        $i7 = 255 << $i6;

        r7[3] = $i7;

        $r5 = new java.awt.image.DirectColorModel;

        $i12 = 8 * i1;

        $i11 = r7[0];

        $i10 = r7[1];

        $i9 = r7[2];

        $i8 = r7[3];

        specialinvoke $r5.<java.awt.image.DirectColorModel: void <init>(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int)>($r2, $i12, $i11, $i10, $i9, $i8, 1, 3);

        return $r5;

     label5:
        r8 = newarray (int)[i1];

        i14 = 0;

        goto label7;

     label6:
        r8[i14] = 8;

        i14 = i14 + 1;

     label7:
        if i14 < i1 goto label6;

        $r4 = new java.awt.image.ComponentColorModel;

        specialinvoke $r4.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r2, r8, 1, 1, 3, 3);

        return $r4;
    }

    protected java.awt.image.SampleModel fixSampleModel(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.image.ColorModel, java.awt.Rectangle)
    {
        org.apache.batik.ext.awt.image.rendered.AffineRed r4;
        java.awt.Rectangle r2;
        java.awt.image.SampleModel $r1, $r5;
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.image.ColorModel r3;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;

        r4 := @this: org.apache.batik.ext.awt.image.rendered.AffineRed;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r3 := @parameter1: java.awt.image.ColorModel;

        r2 := @parameter2: java.awt.Rectangle;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = staticinvoke <org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: int getDefaultTileSize()>();

        $i1 = virtualinvoke $r1.<java.awt.image.SampleModel: int getWidth()>();

        i5 = $i1;

        if $i1 >= $i0 goto label1;

        i5 = $i0;

     label1:
        $i2 = r2.<java.awt.Rectangle: int width>;

        if i5 <= $i2 goto label2;

        i5 = r2.<java.awt.Rectangle: int width>;

     label2:
        $i3 = virtualinvoke $r1.<java.awt.image.SampleModel: int getHeight()>();

        i6 = $i3;

        if $i3 >= $i0 goto label3;

        i6 = $i0;

     label3:
        $i4 = r2.<java.awt.Rectangle: int height>;

        if i6 <= $i4 goto label4;

        i6 = r2.<java.awt.Rectangle: int height>;

     label4:
        if i5 <= 0 goto label5;

        if i6 > 0 goto label6;

     label5:
        i5 = 1;

        i6 = 1;

     label6:
        $r5 = virtualinvoke r3.<java.awt.image.ColorModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>(i5, i6);

        return $r5;
    }
}
