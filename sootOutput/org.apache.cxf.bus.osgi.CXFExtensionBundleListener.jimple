public class org.apache.cxf.bus.osgi.CXFExtensionBundleListener extends java.lang.Object implements org.osgi.framework.SynchronousBundleListener
{
    private static final java.util.logging.Logger LOG;
    private long id;
    private java.util.concurrent.ConcurrentMap extensions;

    public void <init>(long)
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.cxf.bus.osgi.CXFExtensionBundleListener r0;
        long l0;

        r0 := @this: org.apache.cxf.bus.osgi.CXFExtensionBundleListener;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(16, 0.75F, 4);

        r0.<org.apache.cxf.bus.osgi.CXFExtensionBundleListener: java.util.concurrent.ConcurrentMap extensions> = $r1;

        r0.<org.apache.cxf.bus.osgi.CXFExtensionBundleListener: long id> = l0;

        return;
    }

    public void registerExistingBundles(org.osgi.framework.BundleContext) throws java.io.IOException
    {
        long $l6, $l7;
        org.osgi.framework.Bundle[] $r1;
        org.osgi.framework.BundleContext r0;
        org.apache.cxf.bus.osgi.CXFExtensionBundleListener r3;
        byte $b8;
        int i0, $i1, $i2, $i3, $i4, i5;
        org.osgi.framework.Bundle r2, $r4;

        r3 := @this: org.apache.cxf.bus.osgi.CXFExtensionBundleListener;

        r0 := @parameter0: org.osgi.framework.BundleContext;

        $r1 = interfaceinvoke r0.<org.osgi.framework.BundleContext: org.osgi.framework.Bundle[] getBundles()>();

        i0 = lengthof $r1;

        i5 = 0;

     label1:
        if i5 >= i0 goto label4;

        r2 = $r1[i5];

        $i1 = interfaceinvoke r2.<org.osgi.framework.Bundle: int getState()>();

        if $i1 == 4 goto label2;

        $i2 = interfaceinvoke r2.<org.osgi.framework.Bundle: int getState()>();

        if $i2 == 8 goto label2;

        $i3 = interfaceinvoke r2.<org.osgi.framework.Bundle: int getState()>();

        if $i3 == 32 goto label2;

        $i4 = interfaceinvoke r2.<org.osgi.framework.Bundle: int getState()>();

        if $i4 != 16 goto label3;

     label2:
        $l6 = interfaceinvoke r2.<org.osgi.framework.Bundle: long getBundleId()>();

        $r4 = interfaceinvoke r0.<org.osgi.framework.BundleContext: org.osgi.framework.Bundle getBundle()>();

        $l7 = interfaceinvoke $r4.<org.osgi.framework.Bundle: long getBundleId()>();

        $b8 = $l6 cmp $l7;

        if $b8 == 0 goto label3;

        virtualinvoke r3.<org.apache.cxf.bus.osgi.CXFExtensionBundleListener: void register(org.osgi.framework.Bundle)>(r2);

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        return;
    }

    public void bundleChanged(org.osgi.framework.BundleEvent)
    {
        long $l2, $l4, $l5;
        org.osgi.framework.BundleEvent r0;
        org.apache.cxf.bus.osgi.CXFExtensionBundleListener r1;
        byte $b6;
        int $i0, $i1, $i3;
        org.osgi.framework.Bundle $r2, $r3, $r4;

        r1 := @this: org.apache.cxf.bus.osgi.CXFExtensionBundleListener;

        r0 := @parameter0: org.osgi.framework.BundleEvent;

        $i0 = virtualinvoke r0.<org.osgi.framework.BundleEvent: int getType()>();

        if $i0 != 32 goto label1;

        $l4 = r1.<org.apache.cxf.bus.osgi.CXFExtensionBundleListener: long id>;

        $r3 = virtualinvoke r0.<org.osgi.framework.BundleEvent: org.osgi.framework.Bundle getBundle()>();

        $l5 = interfaceinvoke $r3.<org.osgi.framework.Bundle: long getBundleId()>();

        $b6 = $l4 cmp $l5;

        if $b6 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.osgi.framework.BundleEvent: org.osgi.framework.Bundle getBundle()>();

        virtualinvoke r1.<org.apache.cxf.bus.osgi.CXFExtensionBundleListener: void register(org.osgi.framework.Bundle)>($r4);

        goto label3;

     label1:
        $i1 = virtualinvoke r0.<org.osgi.framework.BundleEvent: int getType()>();

        if $i1 == 64 goto label2;

        $i3 = virtualinvoke r0.<org.osgi.framework.BundleEvent: int getType()>();

        if $i3 != 16 goto label3;

     label2:
        $r2 = virtualinvoke r0.<org.osgi.framework.BundleEvent: org.osgi.framework.Bundle getBundle()>();

        $l2 = interfaceinvoke $r2.<org.osgi.framework.Bundle: long getBundleId()>();

        virtualinvoke r1.<org.apache.cxf.bus.osgi.CXFExtensionBundleListener: void unregister(long)>($l2);

     label3:
        return;
    }

    protected void register(org.osgi.framework.Bundle)
    {
        java.util.Enumeration $r1;
        java.net.URL $r4;
        java.util.List $r5;
        org.apache.cxf.bus.osgi.CXFExtensionBundleListener r6;
        java.lang.Object $r3;
        org.osgi.framework.Bundle r0;
        org.apache.cxf.bus.extension.TextExtensionFragmentParser $r2;
        boolean $z0;

        r6 := @this: org.apache.cxf.bus.osgi.CXFExtensionBundleListener;

        r0 := @parameter0: org.osgi.framework.Bundle;

        $r1 = interfaceinvoke r0.<org.osgi.framework.Bundle: java.util.Enumeration findEntries(java.lang.String,java.lang.String,boolean)>("META-INF/cxf/", "bus-extensions.txt", 0);

     label1:
        if $r1 == null goto label2;

        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r2 = new org.apache.cxf.bus.extension.TextExtensionFragmentParser;

        specialinvoke $r2.<org.apache.cxf.bus.extension.TextExtensionFragmentParser: void <init>(java.lang.ClassLoader)>(null);

        $r3 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r4 = (java.net.URL) $r3;

        $r5 = virtualinvoke $r2.<org.apache.cxf.bus.extension.TextExtensionFragmentParser: java.util.List getExtensions(java.net.URL)>($r4);

        specialinvoke r6.<org.apache.cxf.bus.osgi.CXFExtensionBundleListener: void addExtensions(org.osgi.framework.Bundle,java.util.List)>(r0, $r5);

        goto label1;

     label2:
        return;
    }

    private void addExtensions(org.osgi.framework.Bundle, java.util.List)
    {
        java.lang.Long $r16, $r23;
        org.osgi.framework.Bundle r6;
        boolean $z0, $z1, $z2;
        java.util.logging.Logger $r4;
        java.util.List r0, r28, r29;
        org.apache.cxf.bus.extension.Extension r19, r27;
        java.lang.StringBuilder $r3, $r5, $r8, $r9, $r10, $r11, $r12;
        java.util.concurrent.CopyOnWriteArrayList $r21;
        long $l1, $l2, $l3;
        java.util.ArrayList $r1;
        java.util.concurrent.ConcurrentMap $r15, $r22;
        int $i0;
        java.lang.String $r7, $r13, $r26;
        java.util.Iterator $r2, $r30;
        org.apache.cxf.bus.osgi.CXFExtensionBundleListener$OSGiExtension $r20;
        org.apache.cxf.bus.osgi.CXFExtensionBundleListener r14;
        java.lang.Object $r17, $r18, $r24, $r25;

        r14 := @this: org.apache.cxf.bus.osgi.CXFExtensionBundleListener;

        r6 := @parameter0: org.osgi.framework.Bundle;

        r0 := @parameter1: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r25 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r27 = (org.apache.cxf.bus.extension.Extension) $r25;

        $r26 = virtualinvoke r27.<org.apache.cxf.bus.extension.Extension: java.lang.String getName()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r26);

        goto label2;

     label3:
        $r4 = <org.apache.cxf.bus.osgi.CXFExtensionBundleListener: java.util.logging.Logger LOG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding the extensions from bundle ");

        $r7 = interfaceinvoke r6.<org.osgi.framework.Bundle: java.lang.String getSymbolicName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $l1 = interfaceinvoke r6.<org.osgi.framework.Bundle: long getBundleId()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void info(java.lang.String)>($r13);

        $r15 = r14.<org.apache.cxf.bus.osgi.CXFExtensionBundleListener: java.util.concurrent.ConcurrentMap extensions>;

        $l2 = interfaceinvoke r6.<org.osgi.framework.Bundle: long getBundleId()>();

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r17 = interfaceinvoke $r15.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r16);

        r28 = (java.util.List) $r17;

        if r28 != null goto label4;

        $r21 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r21.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r28 = $r21;

        $r22 = r14.<org.apache.cxf.bus.osgi.CXFExtensionBundleListener: java.util.concurrent.ConcurrentMap extensions>;

        $l3 = interfaceinvoke r6.<org.osgi.framework.Bundle: long getBundleId()>();

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r24 = interfaceinvoke $r22.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r23, $r21);

        r29 = (java.util.List) $r24;

        if r29 == null goto label4;

        r28 = r29;

     label4:
        $r30 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r30.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r18 = interfaceinvoke $r30.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.cxf.bus.extension.Extension) $r18;

        $r20 = new org.apache.cxf.bus.osgi.CXFExtensionBundleListener$OSGiExtension;

        specialinvoke $r20.<org.apache.cxf.bus.osgi.CXFExtensionBundleListener$OSGiExtension: void <init>(org.apache.cxf.bus.osgi.CXFExtensionBundleListener,org.apache.cxf.bus.extension.Extension,org.osgi.framework.Bundle)>(r14, r19, r6);

        interfaceinvoke r28.<java.util.List: boolean add(java.lang.Object)>($r20);

        goto label5;

     label6:
        staticinvoke <org.apache.cxf.bus.extension.ExtensionRegistry: void addExtensions(java.util.List)>(r28);

        return;
    }

    protected void unregister(long)
    {
        long l0;
        java.util.logging.Logger $r6;
        java.util.concurrent.ConcurrentMap $r1;
        org.apache.cxf.bus.osgi.CXFExtensionBundleListener r0;
        java.util.List r4;
        java.lang.Long $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: org.apache.cxf.bus.osgi.CXFExtensionBundleListener;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.cxf.bus.osgi.CXFExtensionBundleListener: java.util.concurrent.ConcurrentMap extensions>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r3 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r2);

        r4 = (java.util.List) $r3;

        if r4 == null goto label1;

        $r6 = <org.apache.cxf.bus.osgi.CXFExtensionBundleListener: java.util.logging.Logger LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing the extensions for bundle ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void info(java.lang.String)>($r9);

        staticinvoke <org.apache.cxf.bus.extension.ExtensionRegistry: void removeExtensions(java.util.List)>(r4);

     label1:
        return;
    }

    public void shutdown()
    {
        java.util.Iterator $r4;
        java.util.Set $r3;
        long $l0;
        java.util.concurrent.ConcurrentMap $r1, $r2;
        org.apache.cxf.bus.osgi.CXFExtensionBundleListener r0;
        java.lang.Long $r6;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.apache.cxf.bus.osgi.CXFExtensionBundleListener;

     label1:
        $r1 = r0.<org.apache.cxf.bus.osgi.CXFExtensionBundleListener: java.util.concurrent.ConcurrentMap extensions>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r2 = r0.<org.apache.cxf.bus.osgi.CXFExtensionBundleListener: java.util.concurrent.ConcurrentMap extensions>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Long) $r5;

        $l0 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<org.apache.cxf.bus.osgi.CXFExtensionBundleListener: void unregister(long)>($l0);

        goto label1;

     label2:
        return;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/bus/osgi/CXFActivator;");

        <org.apache.cxf.bus.osgi.CXFExtensionBundleListener: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
