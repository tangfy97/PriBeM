class org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator extends java.lang.Object implements java.util.Comparator
{

    private void <init>()
    {
        org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator r0;

        r0 := @this: org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)
    {
        byte[] r1, r3;
        short s9, s12, $s16, $s17;
        byte $b8, $b11;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i10, i13, i14, i15, $i18, $i19;
        org.apache.lucene.util.BytesRef r0, r2;
        org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator r4;

        r4 := @this: org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator;

        r0 := @parameter0: org.apache.lucene.util.BytesRef;

        r2 := @parameter1: org.apache.lucene.util.BytesRef;

        r1 = r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        i14 = r0.<org.apache.lucene.util.BytesRef: int offset>;

        r3 = r2.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        i15 = r2.<org.apache.lucene.util.BytesRef: int offset>;

        $i1 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $i0 = r2.<org.apache.lucene.util.BytesRef: int length>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        i3 = i14 + $i2;

     label1:
        if i14 >= i3 goto label3;

        $i7 = i14;

        i14 = i14 + 1;

        $b8 = r1[$i7];

        $s16 = (short) $b8;

        s9 = $s16 & 255;

        $i10 = i15;

        i15 = i15 + 1;

        $b11 = r3[$i10];

        $s17 = (short) $b11;

        s12 = $s17 & 255;

        $i18 = (int) s9;

        $i19 = (int) s12;

        i13 = $i18 - $i19;

        if i13 == 0 goto label2;

        return i13;

     label2:
        goto label1;

     label3:
        $i5 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $i4 = r2.<org.apache.lucene.util.BytesRef: int length>;

        $i6 = $i5 - $i4;

        return $i6;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.lucene.util.BytesRef $r3, $r4;
        int $i0;
        org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator r0;
        java.lang.Object r1, r2;

        r0 := @this: org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.lucene.util.BytesRef) r1;

        $r3 = (org.apache.lucene.util.BytesRef) r2;

        $i0 = virtualinvoke r0.<org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator: int compare(org.apache.lucene.util.BytesRef,org.apache.lucene.util.BytesRef)>($r4, $r3);

        return $i0;
    }

    void <init>(org.apache.lucene.util.BytesRef$1)
    {
        org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator r0;
        org.apache.lucene.util.BytesRef$1 r1;

        r0 := @this: org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator;

        r1 := @parameter0: org.apache.lucene.util.BytesRef$1;

        specialinvoke r0.<org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator: void <init>()>();

        return;
    }
}
