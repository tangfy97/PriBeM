final class org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry extends java.lang.Object
{
    private final org.apache.commons.compress.archivers.zip.ZipArchiveEntry entry;
    private long localDataStart;
    private long dataStart;
    private long bytesRead;
    private boolean causedUseOfZip64;
    private boolean hasWritten;

    private void <init>(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry r0;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry;

        r1 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long localDataStart> = 0L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long dataStart> = 0L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long bytesRead> = 0L;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: boolean causedUseOfZip64> = 0;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry entry> = r1;

        return;
    }

    static boolean access$000(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry r0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: boolean hasWritten>;

        return $z0;
    }

    static org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry r0;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r1;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry entry>;

        return $r1;
    }

    static long access$200(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry r0;
        long $l0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry;

        $l0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long dataStart>;

        return $l0;
    }

    static long access$300(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry r0;
        long $l0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry;

        $l0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long bytesRead>;

        return $l0;
    }

    static long access$400(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry r0;
        long $l0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry;

        $l0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long localDataStart>;

        return $l0;
    }

    static boolean access$500(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry r0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: boolean causedUseOfZip64>;

        return $z0;
    }

    void <init>(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry r0;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1 r2;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry;

        r1 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveEntry;

        r2 := @parameter1: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: void <init>(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r1);

        return;
    }

    static boolean access$002(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry, boolean)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry r0;
        boolean z0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry;

        z0 := @parameter1: boolean;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: boolean hasWritten> = z0;

        return z0;
    }

    static long access$314(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry, long)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry r0;
        long l0, $l1, $l2;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry;

        l0 := @parameter1: long;

        $l1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long bytesRead>;

        $l2 = $l1 + l0;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long bytesRead> = $l2;

        return $l2;
    }

    static long access$402(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry, long)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry r0;
        long l0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry;

        l0 := @parameter1: long;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long localDataStart> = l0;

        return l0;
    }

    static long access$202(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry, long)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry r0;
        long l0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry;

        l0 := @parameter1: long;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: long dataStart> = l0;

        return l0;
    }

    static boolean access$502(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry, boolean)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry r0;
        boolean z0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry;

        z0 := @parameter1: boolean;

        r0.<org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry: boolean causedUseOfZip64> = z0;

        return z0;
    }
}
