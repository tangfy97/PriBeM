class org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl extends java.lang.Object implements org.apache.commons.fileupload.FileItemIterator
{
    private final org.apache.commons.fileupload.MultipartStream multi;
    private final org.apache.commons.fileupload.MultipartStream$ProgressNotifier notifier;
    private final byte[] boundary;
    private org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl currentItem;
    private java.lang.String currentFieldName;
    private boolean skipPreamble;
    private boolean itemValid;
    private boolean eof;
    private final org.apache.commons.fileupload.FileUploadBase this$0;

    void <init>(org.apache.commons.fileupload.FileUploadBase, org.apache.commons.fileupload.RequestContext) throws org.apache.commons.fileupload.FileUploadException, java.io.IOException
    {
        byte[] $r11, $r12, $r17;
        org.apache.commons.fileupload.MultipartStream$ProgressNotifier $r16, $r40;
        org.apache.commons.fileupload.RequestContext r2;
        java.lang.NullPointerException $r33;
        byte $b1, $b6, $b9;
        org.apache.commons.fileupload.FileUploadBase r1;
        boolean $z0;
        org.apache.commons.fileupload.FileUploadBase$SizeLimitExceededException $r38;
        org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl r0;
        org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$1 $r36;
        org.apache.commons.fileupload.FileUploadBase$InvalidContentTypeException $r35;
        long $l0, $l3, $l5, $l7, $l8, $l10, $l11, $l12, $l13;
        org.apache.commons.fileupload.ProgressListener $r14;
        java.lang.StringBuffer $r6, $r7, $r22, $r23, $r24, $r25, $r26, $r34, $r37;
        int $i2, $i4, $i14, $i16, $i17, $i18;
        java.lang.String $r3, $r8, $r9, $r27, $r31, r32;
        org.apache.commons.fileupload.MultipartStream $r18, $r41;
        org.apache.commons.fileupload.FileUploadException $r39;
        java.io.InputStream $r10, r30;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl;

        r1 := @parameter0: org.apache.commons.fileupload.FileUploadBase;

        r2 := @parameter1: org.apache.commons.fileupload.RequestContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.FileUploadBase this$0> = r1;

        if r2 != null goto label1;

        $r33 = new java.lang.NullPointerException;

        specialinvoke $r33.<java.lang.NullPointerException: void <init>(java.lang.String)>("ctx parameter");

        throw $r33;

     label1:
        $r3 = interfaceinvoke r2.<org.apache.commons.fileupload.RequestContext: java.lang.String getContentType()>();

        if null == $r3 goto label2;

        $r9 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("multipart/");

        if $z0 != 0 goto label3;

     label2:
        $r35 = new org.apache.commons.fileupload.FileUploadBase$InvalidContentTypeException;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("the request doesn\'t contain a multipart/form-data or multipart/mixed stream, content type header is ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r35.<org.apache.commons.fileupload.FileUploadBase$InvalidContentTypeException: void <init>(java.lang.String)>($r8);

        throw $r35;

     label3:
        $r10 = interfaceinvoke r2.<org.apache.commons.fileupload.RequestContext: java.io.InputStream getInputStream()>();

        r30 = $r10;

        $l0 = staticinvoke <org.apache.commons.fileupload.FileUploadBase: long access$500(org.apache.commons.fileupload.FileUploadBase)>(r1);

        $b1 = $l0 cmp 0L;

        $i14 = (int) $b1;

        if $i14 < 0 goto label5;

        $i4 = interfaceinvoke r2.<org.apache.commons.fileupload.RequestContext: int getContentLength()>();

        $i16 = (int) -1;

        if $i4 != $i16 goto label4;

        $r36 = new org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$1;

        $l13 = staticinvoke <org.apache.commons.fileupload.FileUploadBase: long access$500(org.apache.commons.fileupload.FileUploadBase)>(r1);

        specialinvoke $r36.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$1: void <init>(org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl,java.io.InputStream,long,org.apache.commons.fileupload.FileUploadBase)>(r0, $r10, $l13, r1);

        r30 = $r36;

        goto label5;

     label4:
        $l5 = staticinvoke <org.apache.commons.fileupload.FileUploadBase: long access$500(org.apache.commons.fileupload.FileUploadBase)>(r1);

        $b6 = $l5 cmp 0L;

        $i17 = (int) $b6;

        if $i17 < 0 goto label5;

        $l7 = (long) $i4;

        $l8 = staticinvoke <org.apache.commons.fileupload.FileUploadBase: long access$500(org.apache.commons.fileupload.FileUploadBase)>(r1);

        $b9 = $l7 cmp $l8;

        $i18 = (int) $b9;

        if $i18 <= 0 goto label5;

        $r38 = new org.apache.commons.fileupload.FileUploadBase$SizeLimitExceededException;

        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("the request was rejected because its size (");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") exceeds the configured maximum (");

        $l10 = staticinvoke <org.apache.commons.fileupload.FileUploadBase: long access$500(org.apache.commons.fileupload.FileUploadBase)>(r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l10);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        $l11 = (long) $i4;

        $l12 = staticinvoke <org.apache.commons.fileupload.FileUploadBase: long access$500(org.apache.commons.fileupload.FileUploadBase)>(r1);

        specialinvoke $r38.<org.apache.commons.fileupload.FileUploadBase$SizeLimitExceededException: void <init>(java.lang.String,long,long)>($r27, $l11, $l12);

        throw $r38;

     label5:
        $r31 = staticinvoke <org.apache.commons.fileupload.FileUploadBase: java.lang.String access$600(org.apache.commons.fileupload.FileUploadBase)>(r1);

        r32 = $r31;

        if $r31 != null goto label6;

        r32 = interfaceinvoke r2.<org.apache.commons.fileupload.RequestContext: java.lang.String getCharacterEncoding()>();

     label6:
        $r11 = virtualinvoke r1.<org.apache.commons.fileupload.FileUploadBase: byte[] getBoundary(java.lang.String)>($r3);

        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: byte[] boundary> = $r11;

        $r12 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: byte[] boundary>;

        if $r12 != null goto label7;

        $r39 = new org.apache.commons.fileupload.FileUploadException;

        specialinvoke $r39.<org.apache.commons.fileupload.FileUploadException: void <init>(java.lang.String)>("the request was rejected because no multipart boundary was found");

        throw $r39;

     label7:
        $r40 = new org.apache.commons.fileupload.MultipartStream$ProgressNotifier;

        $r14 = staticinvoke <org.apache.commons.fileupload.FileUploadBase: org.apache.commons.fileupload.ProgressListener access$700(org.apache.commons.fileupload.FileUploadBase)>(r1);

        $i2 = interfaceinvoke r2.<org.apache.commons.fileupload.RequestContext: int getContentLength()>();

        $l3 = (long) $i2;

        specialinvoke $r40.<org.apache.commons.fileupload.MultipartStream$ProgressNotifier: void <init>(org.apache.commons.fileupload.ProgressListener,long)>($r14, $l3);

        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.MultipartStream$ProgressNotifier notifier> = $r40;

        $r41 = new org.apache.commons.fileupload.MultipartStream;

        $r17 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: byte[] boundary>;

        $r16 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.MultipartStream$ProgressNotifier notifier>;

        specialinvoke $r41.<org.apache.commons.fileupload.MultipartStream: void <init>(java.io.InputStream,byte[],org.apache.commons.fileupload.MultipartStream$ProgressNotifier)>(r30, $r17, $r16);

        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.MultipartStream multi> = $r41;

        $r18 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.MultipartStream multi>;

        virtualinvoke $r18.<org.apache.commons.fileupload.MultipartStream: void setHeaderEncoding(java.lang.String)>(r32);

        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: boolean skipPreamble> = 1;

        specialinvoke r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: boolean findNextItem()>();

        return;
    }

    private boolean findNextItem() throws java.io.IOException
    {
        byte[] $r25, $r28;
        org.apache.commons.fileupload.MultipartStream$ProgressNotifier $r14, $r22;
        org.apache.commons.fileupload.FileUploadBase $r4, $r8, $r15, $r18, $r24;
        boolean $z0, $z1, $z2, z3, $z4;
        org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl $r1, $r11, $r20, $r31;
        org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl r0;
        long $l0, $l1;
        java.lang.String $r5, $r7, $r9, $r12, $r13, $r16, $r17, $r19, $r21, $r23, $r27;
        org.apache.commons.fileupload.MultipartStream $r2, $r3, $r10, $r26, $r29, $r30;
        org.apache.commons.fileupload.FileItemHeaders $r6;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl;

        $z0 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: boolean eof>;

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $r1 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl currentItem>;

        if $r1 == null goto label02;

        $r31 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl currentItem>;

        virtualinvoke $r31.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl: void close()>();

        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl currentItem> = null;

     label02:
        $z2 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: boolean skipPreamble>;

        if $z2 == 0 goto label03;

        $r30 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.MultipartStream multi>;

        z3 = virtualinvoke $r30.<org.apache.commons.fileupload.MultipartStream: boolean skipPreamble()>();

        goto label04;

     label03:
        $r2 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.MultipartStream multi>;

        z3 = virtualinvoke $r2.<org.apache.commons.fileupload.MultipartStream: boolean readBoundary()>();

     label04:
        if z3 != 0 goto label06;

        $r27 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: java.lang.String currentFieldName>;

        if $r27 != null goto label05;

        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: boolean eof> = 1;

        return 0;

     label05:
        $r29 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.MultipartStream multi>;

        $r28 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: byte[] boundary>;

        virtualinvoke $r29.<org.apache.commons.fileupload.MultipartStream: void setBoundary(byte[])>($r28);

        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: java.lang.String currentFieldName> = null;

        goto label02;

     label06:
        $r4 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.FileUploadBase this$0>;

        $r3 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.MultipartStream multi>;

        $r5 = virtualinvoke $r3.<org.apache.commons.fileupload.MultipartStream: java.lang.String readHeaders()>();

        $r6 = virtualinvoke $r4.<org.apache.commons.fileupload.FileUploadBase: org.apache.commons.fileupload.FileItemHeaders getParsedHeaders(java.lang.String)>($r5);

        $r7 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: java.lang.String currentFieldName>;

        if $r7 != null goto label11;

        $r15 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.FileUploadBase this$0>;

        $r16 = virtualinvoke $r15.<org.apache.commons.fileupload.FileUploadBase: java.lang.String getFieldName(org.apache.commons.fileupload.FileItemHeaders)>($r6);

        if $r16 == null goto label10;

        $r17 = interfaceinvoke $r6.<org.apache.commons.fileupload.FileItemHeaders: java.lang.String getHeader(java.lang.String)>("Content-type");

        if $r17 == null goto label07;

        $r23 = virtualinvoke $r17.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r23.<java.lang.String: boolean startsWith(java.lang.String)>("multipart/mixed");

        if $z1 == 0 goto label07;

        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: java.lang.String currentFieldName> = $r16;

        $r24 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.FileUploadBase this$0>;

        $r25 = virtualinvoke $r24.<org.apache.commons.fileupload.FileUploadBase: byte[] getBoundary(java.lang.String)>($r17);

        $r26 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.MultipartStream multi>;

        virtualinvoke $r26.<org.apache.commons.fileupload.MultipartStream: void setBoundary(byte[])>($r25);

        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: boolean skipPreamble> = 1;

        goto label02;

     label07:
        $r18 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.FileUploadBase this$0>;

        $r19 = virtualinvoke $r18.<org.apache.commons.fileupload.FileUploadBase: java.lang.String getFileName(org.apache.commons.fileupload.FileItemHeaders)>($r6);

        $r20 = new org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl;

        $r21 = interfaceinvoke $r6.<org.apache.commons.fileupload.FileItemHeaders: java.lang.String getHeader(java.lang.String)>("Content-type");

        if $r19 != null goto label08;

        $z4 = 1;

        goto label09;

     label08:
        $z4 = 0;

     label09:
        $l1 = specialinvoke r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: long getContentLength(org.apache.commons.fileupload.FileItemHeaders)>($r6);

        specialinvoke $r20.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl: void <init>(org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl,java.lang.String,java.lang.String,java.lang.String,boolean,long)>(r0, $r19, $r16, $r21, $z4, $l1);

        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl currentItem> = $r20;

        $r22 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.MultipartStream$ProgressNotifier notifier>;

        virtualinvoke $r22.<org.apache.commons.fileupload.MultipartStream$ProgressNotifier: void noteItem()>();

        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: boolean itemValid> = 1;

        return 1;

     label10:
        goto label12;

     label11:
        $r8 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.FileUploadBase this$0>;

        $r9 = virtualinvoke $r8.<org.apache.commons.fileupload.FileUploadBase: java.lang.String getFileName(org.apache.commons.fileupload.FileItemHeaders)>($r6);

        if $r9 == null goto label12;

        $r11 = new org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl;

        $r12 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: java.lang.String currentFieldName>;

        $r13 = interfaceinvoke $r6.<org.apache.commons.fileupload.FileItemHeaders: java.lang.String getHeader(java.lang.String)>("Content-type");

        $l0 = specialinvoke r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: long getContentLength(org.apache.commons.fileupload.FileItemHeaders)>($r6);

        specialinvoke $r11.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl: void <init>(org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl,java.lang.String,java.lang.String,java.lang.String,boolean,long)>(r0, $r9, $r12, $r13, 0, $l0);

        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl currentItem> = $r11;

        $r14 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.MultipartStream$ProgressNotifier notifier>;

        virtualinvoke $r14.<org.apache.commons.fileupload.MultipartStream$ProgressNotifier: void noteItem()>();

        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: boolean itemValid> = 1;

        return 1;

     label12:
        $r10 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.MultipartStream multi>;

        virtualinvoke $r10.<org.apache.commons.fileupload.MultipartStream: int discardBodyData()>();

        goto label02;
    }

    private long getContentLength(org.apache.commons.fileupload.FileItemHeaders)
    {
        org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl r3;
        long $l0;
        org.apache.commons.fileupload.FileItemHeaders r0;
        java.lang.String $r1;
        java.lang.Exception $r2;

        r3 := @this: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl;

        r0 := @parameter0: org.apache.commons.fileupload.FileItemHeaders;

     label1:
        $r1 = interfaceinvoke r0.<org.apache.commons.fileupload.FileItemHeaders: java.lang.String getHeader(java.lang.String)>("Content-length");

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

     label2:
        return $l0;

     label3:
        $r2 := @caughtexception;

        return -1L;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean hasNext() throws org.apache.commons.fileupload.FileUploadException, java.io.IOException
    {
        org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl;

        $z0 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: boolean eof>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: boolean itemValid>;

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: boolean findNextItem()>();

        return $z2;
    }

    public org.apache.commons.fileupload.FileItemStream next() throws org.apache.commons.fileupload.FileUploadException, java.io.IOException
    {
        org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl r0;
        java.util.NoSuchElementException $r1;
        boolean $z0, $z1, $z2;
        org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl $r2;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl;

        $z0 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: boolean eof>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: boolean itemValid>;

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: boolean hasNext()>();

        if $z2 != 0 goto label2;

     label1:
        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;

     label2:
        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: boolean itemValid> = 0;

        $r2 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl currentItem>;

        return $r2;
    }

    static org.apache.commons.fileupload.MultipartStream access$100(org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl)
    {
        org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl r0;
        org.apache.commons.fileupload.MultipartStream $r1;

        r0 := @parameter0: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl;

        $r1 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.MultipartStream multi>;

        return $r1;
    }

    static org.apache.commons.fileupload.FileUploadBase access$200(org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl)
    {
        org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl r0;
        org.apache.commons.fileupload.FileUploadBase $r1;

        r0 := @parameter0: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl;

        $r1 = r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: org.apache.commons.fileupload.FileUploadBase this$0>;

        return $r1;
    }
}
