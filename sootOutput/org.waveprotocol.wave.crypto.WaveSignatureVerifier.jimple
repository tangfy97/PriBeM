public class org.waveprotocol.wave.crypto.WaveSignatureVerifier extends java.lang.Object
{
    private static final java.util.regex.Pattern CN_PATTERN;
    private static final java.lang.Integer ALT_NAME_TYPE_DNS;
    private final org.waveprotocol.wave.crypto.WaveCertPathValidator pathValidator;
    private final org.waveprotocol.wave.crypto.CertPathStore pathStore;

    public void <init>(org.waveprotocol.wave.crypto.WaveCertPathValidator, org.waveprotocol.wave.crypto.CertPathStore)
    {
        org.waveprotocol.wave.crypto.CertPathStore r2;
        org.waveprotocol.wave.crypto.WaveSignatureVerifier r0;
        org.waveprotocol.wave.crypto.WaveCertPathValidator r1;

        r0 := @this: org.waveprotocol.wave.crypto.WaveSignatureVerifier;

        r1 := @parameter0: org.waveprotocol.wave.crypto.WaveCertPathValidator;

        r2 := @parameter1: org.waveprotocol.wave.crypto.CertPathStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.crypto.WaveSignatureVerifier: org.waveprotocol.wave.crypto.WaveCertPathValidator pathValidator> = r1;

        r0.<org.waveprotocol.wave.crypto.WaveSignatureVerifier: org.waveprotocol.wave.crypto.CertPathStore pathStore> = r2;

        return;
    }

    public void verify(byte[], org.waveprotocol.wave.federation.Proto$ProtocolSignature, java.lang.String) throws org.waveprotocol.wave.crypto.SignatureException, org.waveprotocol.wave.crypto.UnknownSignerException
    {
        java.security.cert.X509Certificate r38;
        byte[] $r4, r11, $r13, $r20, $r21;
        java.lang.IllegalStateException $r27;
        boolean $z0;
        java.security.SignatureException $r24, $r26;
        java.security.Signature $r8;
        com.google.protobuf.ByteString $r3, $r12, $r19;
        java.util.List $r9;
        java.security.NoSuchAlgorithmException $r30;
        org.waveprotocol.wave.crypto.CertPathStore $r2;
        java.lang.StringBuilder $r17, $r18, $r22, $r32, $r33, $r36;
        java.security.InvalidKeyException $r28;
        org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm $r6, $r34;
        org.waveprotocol.wave.crypto.WaveSignatureVerifier r0;
        java.lang.String $r7, r14, $r23, $r35, $r37;
        org.waveprotocol.wave.federation.Proto$ProtocolSignature r1;
        org.waveprotocol.wave.crypto.SignatureException $r15, $r25, $r29, $r31;
        org.waveprotocol.wave.crypto.SignerInfo $r5;
        java.lang.Object $r10;
        org.waveprotocol.wave.crypto.UnknownSignerException $r16;

        r0 := @this: org.waveprotocol.wave.crypto.WaveSignatureVerifier;

        r11 := @parameter0: byte[];

        r1 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolSignature;

        r14 := @parameter2: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.crypto.WaveSignatureVerifier: org.waveprotocol.wave.crypto.CertPathStore pathStore>;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolSignature: com.google.protobuf.ByteString getSignerId()>();

        $r4 = virtualinvoke $r3.<com.google.protobuf.ByteString: byte[] toByteArray()>();

        $r5 = interfaceinvoke $r2.<org.waveprotocol.wave.crypto.CertPathStore: org.waveprotocol.wave.crypto.SignerInfo getSignerInfo(byte[])>($r4);

        if $r5 != null goto label01;

        $r16 = new org.waveprotocol.wave.crypto.UnknownSignerException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("could not find information about signer ");

        $r19 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolSignature: com.google.protobuf.ByteString getSignerId()>();

        $r20 = virtualinvoke $r19.<com.google.protobuf.ByteString: byte[] toByteArray()>();

        $r21 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r20);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.waveprotocol.wave.crypto.UnknownSignerException: void <init>(java.lang.String)>($r23);

        throw $r16;

     label01:
        virtualinvoke r0.<org.waveprotocol.wave.crypto.WaveSignatureVerifier: void verifySignerInfo(org.waveprotocol.wave.crypto.SignerInfo)>($r5);

     label02:
        $r6 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolSignature: org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm getSignatureAlgorithm()>();

        $r7 = staticinvoke <org.waveprotocol.wave.crypto.AlgorithmUtil: java.lang.String getJceName(org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm)>($r6);

        $r8 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r7);

     label03:
        goto label05;

     label04:
        $r30 := @caughtexception;

        $r31 = new org.waveprotocol.wave.crypto.SignatureException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t verify signatures of type ");

        $r34 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolSignature: org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm getSignatureAlgorithm()>();

        $r35 = virtualinvoke $r34.<org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm: java.lang.String toString()>();

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>($r37, $r30);

        throw $r31;

     label05:
        $r9 = virtualinvoke $r5.<org.waveprotocol.wave.crypto.SignerInfo: java.util.List getCertificates()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(0);

        r38 = (java.security.cert.X509Certificate) $r10;

     label06:
        virtualinvoke $r8.<java.security.Signature: void initVerify(java.security.cert.Certificate)>(r38);

     label07:
        goto label09;

     label08:
        $r28 := @caughtexception;

        $r29 = new org.waveprotocol.wave.crypto.SignatureException;

        specialinvoke $r29.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.String)>("certificate of signer was not issued for message signing");

        throw $r29;

     label09:
        virtualinvoke $r8.<java.security.Signature: void update(byte[])>(r11);

     label10:
        goto label12;

     label11:
        $r26 := @caughtexception;

        $r27 = new java.lang.IllegalStateException;

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r26);

        throw $r27;

     label12:
        $r12 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolSignature: com.google.protobuf.ByteString getSignatureBytes()>();

        $r13 = virtualinvoke $r12.<com.google.protobuf.ByteString: byte[] toByteArray()>();

        $z0 = virtualinvoke $r8.<java.security.Signature: boolean verify(byte[])>($r13);

        if $z0 != 0 goto label13;

        $r15 = new org.waveprotocol.wave.crypto.SignatureException;

        specialinvoke $r15.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.String)>("signature did not verify");

        throw $r15;

     label13:
        goto label15;

     label14:
        $r24 := @caughtexception;

        $r25 = new org.waveprotocol.wave.crypto.SignatureException;

        specialinvoke $r25.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.Throwable)>($r24);

        throw $r25;

     label15:
        specialinvoke r0.<org.waveprotocol.wave.crypto.WaveSignatureVerifier: void verifyMatchingAuthority(java.lang.String,java.security.cert.X509Certificate)>(r14, r38);

        return;

        catch java.security.NoSuchAlgorithmException from label02 to label03 with label04;
        catch java.security.InvalidKeyException from label06 to label07 with label08;
        catch java.security.SignatureException from label09 to label10 with label11;
        catch java.security.SignatureException from label12 to label13 with label14;
    }

    public void verifySignerInfo(org.waveprotocol.wave.crypto.SignerInfo) throws org.waveprotocol.wave.crypto.SignatureException
    {
        org.waveprotocol.wave.crypto.WaveSignatureVerifier r0;
        java.util.List $r3;
        org.waveprotocol.wave.crypto.WaveCertPathValidator $r2;
        org.waveprotocol.wave.crypto.SignerInfo r1;

        r0 := @this: org.waveprotocol.wave.crypto.WaveSignatureVerifier;

        r1 := @parameter0: org.waveprotocol.wave.crypto.SignerInfo;

        $r2 = r0.<org.waveprotocol.wave.crypto.WaveSignatureVerifier: org.waveprotocol.wave.crypto.WaveCertPathValidator pathValidator>;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.crypto.SignerInfo: java.util.List getCertificates()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.crypto.WaveCertPathValidator: void validate(java.util.List)>($r3);

        return;
    }

    private void verifyMatchingAuthority(java.lang.String, java.security.cert.X509Certificate) throws org.waveprotocol.wave.crypto.SignatureException
    {
        java.security.cert.X509Certificate r1;
        javax.security.auth.x500.X500Principal $r2;
        org.waveprotocol.wave.crypto.WaveSignatureVerifier r0;
        java.lang.String $r3, $r4, r5, $r11, $r16, $r18;
        boolean $z0, $z1;
        java.security.Principal $r15;
        org.waveprotocol.wave.crypto.SignatureException $r6, $r12;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r13, $r14, $r17;

        r0 := @this: org.waveprotocol.wave.crypto.WaveSignatureVerifier;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.cert.X509Certificate;

        $r2 = virtualinvoke r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        $r3 = virtualinvoke $r2.<javax.security.auth.x500.X500Principal: java.lang.String getName()>();

        $r4 = specialinvoke r0.<org.waveprotocol.wave.crypto.WaveSignatureVerifier: java.lang.String getCommonNameFromDistinguishedName(java.lang.String)>($r3);

        if $r4 != null goto label1;

        $r12 = new org.waveprotocol.wave.crypto.SignatureException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no common name found in signer certificate ");

        $r15 = virtualinvoke r1.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>();

        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.String)>($r18);

        throw $r12;

     label1:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label2;

        return;

     label2:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.crypto.WaveSignatureVerifier: boolean authorityMatchesSubjectAlternativeNames(java.lang.String,java.security.cert.X509Certificate)>(r5, r1);

        if $z1 == 0 goto label3;

        return;

     label3:
        $r6 = new org.waveprotocol.wave.crypto.SignatureException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as CN or alternative name in cert, but didn\'t find it");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.String)>($r11);

        throw $r6;
    }

    private boolean authorityMatchesSubjectAlternativeNames(java.lang.String, java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate r0;
        java.security.cert.CertificateParsingException $r10;
        java.lang.Integer r5, $r6;
        org.waveprotocol.wave.crypto.WaveSignatureVerifier r11;
        java.lang.String r8, r9;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r1;
        java.util.Collection r12;
        java.util.List r3;
        java.lang.Object $r2, $r4, $r7;

        r11 := @this: org.waveprotocol.wave.crypto.WaveSignatureVerifier;

        r9 := @parameter0: java.lang.String;

        r0 := @parameter1: java.security.cert.X509Certificate;

        r12 = null;

     label1:
        r12 = virtualinvoke r0.<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()>();

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        if r12 != null goto label5;

        return 0;

     label5:
        $r1 = interfaceinvoke r12.<java.util.Collection: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label9;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.List) $r2;

        $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        r5 = (java.lang.Integer) $r4;

        $r6 = <org.waveprotocol.wave.crypto.WaveSignatureVerifier: java.lang.Integer ALT_NAME_TYPE_DNS>;

        $z0 = virtualinvoke $r6.<java.lang.Integer: boolean equals(java.lang.Object)>(r5);

        if $z0 != 0 goto label7;

        goto label6;

     label7:
        $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(1);

        r8 = (java.lang.String) $r7;

        $z1 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z1 == 0 goto label8;

        return 1;

     label8:
        goto label6;

     label9:
        return 0;

        catch java.security.cert.CertificateParsingException from label1 to label2 with label3;
    }

    private java.lang.String getCommonNameFromDistinguishedName(java.lang.String)
    {
        org.waveprotocol.wave.crypto.WaveSignatureVerifier r4;
        java.util.regex.Matcher $r2;
        java.lang.String r0, $r3;
        java.util.regex.Pattern $r1;
        boolean $z0;

        r4 := @this: org.waveprotocol.wave.crypto.WaveSignatureVerifier;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.waveprotocol.wave.crypto.WaveSignatureVerifier: java.util.regex.Pattern CN_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        return $r3;

     label1:
        return null;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;
        java.lang.Integer $r1;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("CN=([^,]+)");

        <org.waveprotocol.wave.crypto.WaveSignatureVerifier: java.util.regex.Pattern CN_PATTERN> = $r0;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        <org.waveprotocol.wave.crypto.WaveSignatureVerifier: java.lang.Integer ALT_NAME_TYPE_DNS> = $r1;

        return;
    }
}
