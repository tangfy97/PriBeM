public class org.apache.lucene.queryparser.flexible.standard.processors.PhraseSlopQueryNodeProcessor extends org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl
{

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.processors.PhraseSlopQueryNodeProcessor r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.PhraseSlopQueryNodeProcessor;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: void <init>()>();

        return;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.processors.PhraseSlopQueryNodeProcessor r5;
        org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode r1;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, $r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r5 := @this: org.apache.lucene.queryparser.flexible.standard.processors.PhraseSlopQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode;

        if $z0 == 0 goto label1;

        r1 = (org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode) r0;

        $r2 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getChild()>();

        $z1 = $r2 instanceof org.apache.lucene.queryparser.flexible.core.nodes.TokenizedPhraseQueryNode;

        if $z1 != 0 goto label1;

        $r3 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getChild()>();

        $z2 = $r3 instanceof org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode;

        if $z2 != 0 goto label1;

        $r4 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getChild()>();

        return $r4;

     label1:
        return r0;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        org.apache.lucene.queryparser.flexible.standard.processors.PhraseSlopQueryNodeProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.PhraseSlopQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        return r0;
    }

    protected java.util.List setChildrenOrder(java.util.List) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        java.util.List r0;
        org.apache.lucene.queryparser.flexible.standard.processors.PhraseSlopQueryNodeProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.PhraseSlopQueryNodeProcessor;

        r0 := @parameter0: java.util.List;

        return r0;
    }
}
