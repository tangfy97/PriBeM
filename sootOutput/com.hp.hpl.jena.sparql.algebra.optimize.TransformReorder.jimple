public class com.hp.hpl.jena.sparql.algebra.optimize.TransformReorder extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{
    private com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation reorder;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformReorder r0;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformReorder;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderLib: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation fixed()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformReorder: void <init>(com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation)>($r1);

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformReorder r0;
        java.lang.IllegalArgumentException $r2;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformReorder;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("reorder cannot be null");

        throw $r2;

     label1:
        r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformReorder: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation reorder> = r1;

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformReorder r2;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r0, $r5;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation $r3;
        com.hp.hpl.jena.sparql.core.BasicPattern $r1, $r4;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformReorder;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.algebra.optimize.TransformReorder: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation reorder>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation: com.hp.hpl.jena.sparql.core.BasicPattern reorder(com.hp.hpl.jena.sparql.core.BasicPattern)>($r1);

        $r5 = new com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>($r4);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformReorder r2;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation $r3;
        com.hp.hpl.jena.sparql.core.BasicPattern $r1, $r4;
        com.hp.hpl.jena.graph.Node $r6;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0, $r5;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformReorder;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.algebra.optimize.TransformReorder: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation reorder>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation: com.hp.hpl.jena.sparql.core.BasicPattern reorder(com.hp.hpl.jena.sparql.core.BasicPattern)>($r1);

        $r5 = new com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern)>($r6, $r4);

        return $r5;
    }
}
