public final class org.waveprotocol.wave.concurrencycontrol.WaveletUpdateUtil extends java.lang.Object
{

    private void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdateUtil r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.WaveletUpdateUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isEqual(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate, org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)
    {
        org.waveprotocol.wave.federation.ProtocolWaveletDelta $r1, $r3;
        long $l0, $l1;
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdate r0, r2;
        byte $b2;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r4, $r5;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletUpdate;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.WaveletUpdate;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdate: org.waveprotocol.wave.federation.ProtocolWaveletDelta getDelta()>();

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdate: org.waveprotocol.wave.federation.ProtocolWaveletDelta getDelta()>();

        $z0 = staticinvoke <org.waveprotocol.wave.federation.ProtocolWaveletDeltaUtil: boolean isEqual(org.waveprotocol.wave.federation.ProtocolWaveletDelta,org.waveprotocol.wave.federation.ProtocolWaveletDelta)>($r1, $r3);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdate: org.waveprotocol.wave.federation.ProtocolHashedVersion getResultingVersion()>();

        $r5 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdate: org.waveprotocol.wave.federation.ProtocolHashedVersion getResultingVersion()>();

        $z1 = staticinvoke <org.waveprotocol.wave.federation.ProtocolHashedVersionUtil: boolean isEqual(org.waveprotocol.wave.federation.ProtocolHashedVersion,org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r4, $r5);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $l0 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdate: long getApplicationTimpstamp()>();

        $l1 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdate: long getApplicationTimpstamp()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public static boolean areAllEqual(java.util.List, java.util.List)
    {
        java.util.Iterator $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdate $r5, $r7;
        java.util.List r0, r1;
        int $i0, $i1;
        java.lang.Object $r4, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.waveprotocol.wave.concurrencycontrol.WaveletUpdate) $r4;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.waveprotocol.wave.concurrencycontrol.WaveletUpdate) $r6;

        $z1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.WaveletUpdateUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate,org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)>($r5, $r7);

        if $z1 != 0 goto label2;

        return 0;

     label3:
        return 1;
    }

    public static int getHashCode(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)
    {
        org.waveprotocol.wave.federation.ProtocolWaveletDelta $r1;
        long $l4;
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdate r0;
        java.lang.Long $r3;
        int $i0, $i1, $i2, $i3, $i5, i6, i7, i8;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r2;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletUpdate;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdate: org.waveprotocol.wave.federation.ProtocolWaveletDelta getDelta()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        i6 = 31 + $i0;

        $i1 = 31 * i6;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdate: org.waveprotocol.wave.federation.ProtocolHashedVersion getResultingVersion()>();

        $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        i7 = $i1 + $i2;

        $i3 = 31 * i7;

        $l4 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdate: long getApplicationTimpstamp()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $i5 = virtualinvoke $r3.<java.lang.Long: int hashCode()>();

        i8 = $i3 + $i5;

        return i8;
    }
}
