public class org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate
{
    private final org.waveprotocol.wave.model.schema.SchemaProvider schemas;
    private final org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory dataFactory;
    public java.lang.String channelId;
    public org.waveprotocol.wave.model.id.WaveletId waveletId;
    public org.waveprotocol.wave.model.version.HashedVersion lastCommittedVersion;
    public org.waveprotocol.wave.model.version.HashedVersion currentVersion;
    public org.waveprotocol.wave.model.wave.data.ObservableWaveletData waveletSnapshot;
    public java.util.ArrayList deltaList;
    public java.lang.Boolean marker;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory $r4;
        org.waveprotocol.wave.model.schema.SchemaProvider $r2;
        org.waveprotocol.wave.model.wave.data.DocumentFactory $r3;
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        org.waveprotocol.wave.model.schema.SchemaCollection $r1;
        java.util.ArrayList $r5;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.schema.SchemaCollection: org.waveprotocol.wave.model.schema.SchemaCollection empty()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.schema.SchemaProvider schemas> = $r1;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.schema.SchemaProvider schemas>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument: org.waveprotocol.wave.model.wave.data.DocumentFactory createFactory(org.waveprotocol.wave.model.schema.SchemaProvider)>($r2);

        $r4 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory create(org.waveprotocol.wave.model.wave.data.DocumentFactory)>($r3);

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory dataFactory> = $r4;

        $r5 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: java.util.ArrayList deltaList> = $r5;

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate setChannelId(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: java.lang.String channelId> = r1;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate setWaveletId(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.id.WaveletId waveletId> = r1;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate setLastCommittedVersion(org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.version.HashedVersion r1;
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.version.HashedVersion lastCommittedVersion> = r1;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate setCurrentVersion(org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.version.HashedVersion r1;
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.version.HashedVersion currentVersion> = r1;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate setWaveletSnapshot(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.wave.ParticipantId, long, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory $r6;
        org.waveprotocol.wave.model.id.WaveId r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl $r7;
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        long l0;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        org.waveprotocol.wave.model.wave.ParticipantId r3;
        java.lang.AssertionError $r8;
        org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot $r1;
        org.waveprotocol.wave.model.version.HashedVersion r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r3 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        l0 := @parameter2: long;

        r4 := @parameter3: org.waveprotocol.wave.model.version.HashedVersion;

        $z0 = <org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: boolean hasWaveletId()>();

        if $z1 != 0 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $r6 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory dataFactory>;

        $r1 = new org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot;

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        specialinvoke $r1.<org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,long)>(r2, $r5, r3, r4, l0);

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl create(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>($r1);

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.wave.data.ObservableWaveletData waveletSnapshot> = $r7;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate addDelta(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r1;
        java.util.ArrayList $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: java.util.ArrayList deltaList>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate setMarker(java.lang.Boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        java.lang.Boolean r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        r1 := @parameter0: java.lang.Boolean;

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: java.lang.Boolean marker> = r1;

        return r0;
    }

    public boolean hasChannelId()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: java.lang.String channelId>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getChannelId()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: java.lang.String channelId>;

        return $r1;
    }

    public boolean hasWaveletId()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        org.waveprotocol.wave.model.id.WaveletId $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.waveprotocol.wave.model.id.WaveletId getWaveletId()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        org.waveprotocol.wave.model.id.WaveletId $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        return $r1;
    }

    public boolean hasLastCommittedVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion $r1;
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.version.HashedVersion lastCommittedVersion>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getLastCommittedVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion $r1;
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.version.HashedVersion lastCommittedVersion>;

        return $r1;
    }

    public boolean hasCurrentVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion $r1;
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.version.HashedVersion currentVersion>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion $r1;
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.version.HashedVersion currentVersion>;

        return $r1;
    }

    public boolean hasWaveletSnapshot()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.wave.data.ObservableWaveletData waveletSnapshot>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.waveprotocol.wave.model.wave.data.ObservableWaveletData getWaveletSnapshot()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: org.waveprotocol.wave.model.wave.data.ObservableWaveletData waveletSnapshot>;

        return $r1;
    }

    public boolean hasDeltas()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        java.util.ArrayList $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: java.util.ArrayList deltaList>;

        $z0 = virtualinvoke $r1.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.util.List getDeltaList()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: java.util.ArrayList deltaList>;

        return $r1;
    }

    public boolean hasMarker()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate r0;
        java.lang.Boolean $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: java.lang.Boolean marker>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/concurrencycontrol/testing/FakeWaveViewServiceUpdate;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.concurrencycontrol.testing.FakeWaveViewServiceUpdate: boolean $assertionsDisabled> = $z1;

        return;
    }
}
