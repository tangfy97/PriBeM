class groovyjarjarantlr.TreeWalkerGrammar extends groovyjarjarantlr.Grammar
{
    protected boolean transform;

    void <init>(java.lang.String, groovyjarjarantlr.Tool, java.lang.String)
    {
        groovyjarjarantlr.Tool r2;
        groovyjarjarantlr.TreeWalkerGrammar r0;
        java.lang.String r1, r3;

        r0 := @this: groovyjarjarantlr.TreeWalkerGrammar;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: groovyjarjarantlr.Tool;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<groovyjarjarantlr.Grammar: void <init>(java.lang.String,groovyjarjarantlr.Tool,java.lang.String)>(r1, r2, r3);

        r0.<groovyjarjarantlr.TreeWalkerGrammar: boolean transform> = 0;

        return;
    }

    public void generate() throws java.io.IOException
    {
        groovyjarjarantlr.TreeWalkerGrammar r0;
        groovyjarjarantlr.CodeGenerator $r1;

        r0 := @this: groovyjarjarantlr.TreeWalkerGrammar;

        $r1 = r0.<groovyjarjarantlr.TreeWalkerGrammar: groovyjarjarantlr.CodeGenerator generator>;

        virtualinvoke $r1.<groovyjarjarantlr.CodeGenerator: void gen(groovyjarjarantlr.TreeWalkerGrammar)>(r0);

        return;
    }

    protected java.lang.String getSuperClass()
    {
        groovyjarjarantlr.TreeWalkerGrammar r0;

        r0 := @this: groovyjarjarantlr.TreeWalkerGrammar;

        return "TreeParser";
    }

    public void processArguments(java.lang.String[])
    {
        java.lang.String[] r0;
        groovyjarjarantlr.Tool $r4, $r5;
        int $i0, i1;
        groovyjarjarantlr.TreeWalkerGrammar r3;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;

        r3 := @this: groovyjarjarantlr.TreeWalkerGrammar;

        r0 := @parameter0: java.lang.String[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label4;

        $r1 = r0[i1];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("-trace");

        if $z0 == 0 goto label2;

        r3.<groovyjarjarantlr.TreeWalkerGrammar: boolean traceRules> = 1;

        $r5 = r3.<groovyjarjarantlr.TreeWalkerGrammar: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r5.<groovyjarjarantlr.Tool: void setArgOK(int)>(i1);

        goto label3;

     label2:
        $r2 = r0[i1];

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-traceTreeParser");

        if $z1 == 0 goto label3;

        r3.<groovyjarjarantlr.TreeWalkerGrammar: boolean traceRules> = 1;

        $r4 = r3.<groovyjarjarantlr.TreeWalkerGrammar: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r4.<groovyjarjarantlr.Tool: void setArgOK(int)>(i1);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public boolean setOption(java.lang.String, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.Tool $r4, $r11;
        java.lang.StringBuffer $r3, $r5, $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.String r0, $r7, $r8, $r9, $r10, $r12;
        groovyjarjarantlr.Token r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        groovyjarjarantlr.TreeWalkerGrammar r1;

        r1 := @this: groovyjarjarantlr.TreeWalkerGrammar;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: groovyjarjarantlr.Token;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("buildAST");

        if $z0 == 0 goto label4;

        $r9 = virtualinvoke r2.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z4 == 0 goto label1;

        r1.<groovyjarjarantlr.TreeWalkerGrammar: boolean buildAST> = 1;

        goto label3;

     label1:
        $r10 = virtualinvoke r2.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z5 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z5 == 0 goto label2;

        r1.<groovyjarjarantlr.TreeWalkerGrammar: boolean buildAST> = 0;

        goto label3;

     label2:
        $r11 = r1.<groovyjarjarantlr.TreeWalkerGrammar: groovyjarjarantlr.Tool antlrTool>;

        $r12 = virtualinvoke r1.<groovyjarjarantlr.TreeWalkerGrammar: java.lang.String getFilename()>();

        $i2 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i3 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r11.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("buildAST option must be true or false", $r12, $i2, $i3);

     label3:
        return 1;

     label4:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("ASTLabelType");

        if $z1 == 0 goto label5;

        specialinvoke r1.<groovyjarjarantlr.Grammar: boolean setOption(java.lang.String,groovyjarjarantlr.Token)>(r0, r2);

        return 1;

     label5:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("className");

        if $z2 == 0 goto label6;

        specialinvoke r1.<groovyjarjarantlr.Grammar: boolean setOption(java.lang.String,groovyjarjarantlr.Token)>(r0, r2);

        return 1;

     label6:
        $z3 = specialinvoke r1.<groovyjarjarantlr.Grammar: boolean setOption(java.lang.String,groovyjarjarantlr.Token)>(r0, r2);

        if $z3 == 0 goto label7;

        return 1;

     label7:
        $r4 = r1.<groovyjarjarantlr.TreeWalkerGrammar: groovyjarjarantlr.Tool antlrTool>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid option: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = virtualinvoke r1.<groovyjarjarantlr.TreeWalkerGrammar: java.lang.String getFilename()>();

        $i0 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i1 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r4.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r7, $r8, $i0, $i1);

        return 0;
    }
}
