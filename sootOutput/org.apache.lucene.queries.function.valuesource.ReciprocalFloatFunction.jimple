public class org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction extends org.apache.lucene.queries.function.ValueSource
{
    protected final org.apache.lucene.queries.function.ValueSource source;
    protected final float m;
    protected final float a;
    protected final float b;

    public void <init>(org.apache.lucene.queries.function.ValueSource, float, float, float)
    {
        org.apache.lucene.queries.function.ValueSource r1;
        org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction r0;
        float f0, f1, f2;

        r0 := @this: org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction;

        r1 := @parameter0: org.apache.lucene.queries.function.ValueSource;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        specialinvoke r0.<org.apache.lucene.queries.function.ValueSource: void <init>()>();

        r0.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: org.apache.lucene.queries.function.ValueSource source> = r1;

        r0.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: float m> = f0;

        r0.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: float a> = f1;

        r0.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: float b> = f2;

        return;
    }

    public org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException
    {
        org.apache.lucene.queries.function.ValueSource $r3;
        org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction$1 $r5;
        org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction r0;
        java.util.Map r1;
        org.apache.lucene.queries.function.FunctionValues $r4;
        org.apache.lucene.index.AtomicReaderContext r2;

        r0 := @this: org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.lucene.index.AtomicReaderContext;

        $r3 = r0.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.queries.function.ValueSource: org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map,org.apache.lucene.index.AtomicReaderContext)>(r1, r2);

        $r5 = new org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction$1;

        specialinvoke $r5.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction$1: void <init>(org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction,org.apache.lucene.queries.function.ValueSource,org.apache.lucene.queries.function.FunctionValues)>(r0, r0, $r4);

        return $r5;
    }

    public void createWeight(java.util.Map, org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        org.apache.lucene.queries.function.ValueSource $r3;
        org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction r0;
        java.util.Map r1;
        org.apache.lucene.search.IndexSearcher r2;

        r0 := @this: org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.lucene.search.IndexSearcher;

        $r3 = r0.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        virtualinvoke $r3.<org.apache.lucene.queries.function.ValueSource: void createWeight(java.util.Map,org.apache.lucene.search.IndexSearcher)>(r1, r2);

        return;
    }

    public java.lang.String description()
    {
        org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction r1;
        java.lang.String $r2, $r8, $r14;
        org.apache.lucene.queries.function.ValueSource $r7;
        float $f0, $f1, $f2;
        java.lang.StringBuilder $r0, $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r13;

        r1 := @this: org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $f0 = r1.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: float a>;

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/(");

        $f1 = r1.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: float m>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*float(");

        $r7 = r1.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $r8 = virtualinvoke $r7.<org.apache.lucene.queries.function.ValueSource: java.lang.String description()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        $f2 = r1.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: float b>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    public int hashCode()
    {
        org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        org.apache.lucene.queries.function.ValueSource $r1;
        float $f0, $f1, $f2;

        r0 := @this: org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction;

        $f0 = r0.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: float a>;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        $f1 = r0.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: float m>;

        $i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f1);

        i9 = $i0 + $i1;

        $i3 = i9 << 13;

        $i2 = i9 >>> 20;

        $i4 = $i3 | $i2;

        i10 = i9 ^ $i4;

        $f2 = r0.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: float b>;

        $i5 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f2);

        $i6 = i10 + $i5;

        $r1 = r0.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $i7 = virtualinvoke $r1.<org.apache.lucene.queries.function.ValueSource: int hashCode()>();

        $i8 = $i6 + $i7;

        return $i8;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction r2, r3;
        byte $b0, $b1, $b2;
        boolean $z0, $z1;
        org.apache.lucene.queries.function.ValueSource $r4, $r5;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        java.lang.Object r0;
        java.lang.Class $r1;

        r3 := @this: org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if class "Lorg/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction;" == $r1 goto label1;

        return 0;

     label1:
        r2 = (org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction) r0;

        $f1 = r3.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: float m>;

        $f0 = r2.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: float m>;

        $b0 = $f1 cmpl $f0;

        if $b0 != 0 goto label2;

        $f3 = r3.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: float a>;

        $f2 = r2.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: float a>;

        $b1 = $f3 cmpl $f2;

        if $b1 != 0 goto label2;

        $f5 = r3.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: float b>;

        $f4 = r2.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: float b>;

        $b2 = $f5 cmpl $f4;

        if $b2 != 0 goto label2;

        $r5 = r3.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $r4 = r2.<org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $z0 = virtualinvoke $r5.<org.apache.lucene.queries.function.ValueSource: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }
}
