public class org.eclipse.jetty.server.handler.GzipHandler extends org.eclipse.jetty.server.handler.HandlerWrapper
{
    private static final org.eclipse.jetty.util.log.Logger LOG;
    protected java.util.Set _mimeTypes;
    protected java.util.Set _excluded;
    protected int _bufferSize;
    protected int _minGzipSize;
    protected java.lang.String _vary;

    public void <init>()
    {
        org.eclipse.jetty.server.handler.GzipHandler r0;

        r0 := @this: org.eclipse.jetty.server.handler.GzipHandler;

        specialinvoke r0.<org.eclipse.jetty.server.handler.HandlerWrapper: void <init>()>();

        r0.<org.eclipse.jetty.server.handler.GzipHandler: int _bufferSize> = 8192;

        r0.<org.eclipse.jetty.server.handler.GzipHandler: int _minGzipSize> = 256;

        r0.<org.eclipse.jetty.server.handler.GzipHandler: java.lang.String _vary> = "Accept-Encoding, User-Agent";

        return;
    }

    public java.util.Set getMimeTypes()
    {
        java.util.Set $r1;
        org.eclipse.jetty.server.handler.GzipHandler r0;

        r0 := @this: org.eclipse.jetty.server.handler.GzipHandler;

        $r1 = r0.<org.eclipse.jetty.server.handler.GzipHandler: java.util.Set _mimeTypes>;

        return $r1;
    }

    public void setMimeTypes(java.util.Set)
    {
        java.util.Set r1;
        org.eclipse.jetty.server.handler.GzipHandler r0;

        r0 := @this: org.eclipse.jetty.server.handler.GzipHandler;

        r1 := @parameter0: java.util.Set;

        r0.<org.eclipse.jetty.server.handler.GzipHandler: java.util.Set _mimeTypes> = r1;

        return;
    }

    public void setMimeTypes(java.lang.String)
    {
        java.util.HashSet $r2;
        java.util.StringTokenizer $r3;
        java.util.Set $r4;
        java.lang.String r0, $r5;
        org.eclipse.jetty.server.handler.GzipHandler r1;
        boolean $z0;

        r1 := @this: org.eclipse.jetty.server.handler.GzipHandler;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label2;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r1.<org.eclipse.jetty.server.handler.GzipHandler: java.util.Set _mimeTypes> = $r2;

        $r3 = new java.util.StringTokenizer;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r0, ",", 0);

     label1:
        $z0 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r4 = r1.<org.eclipse.jetty.server.handler.GzipHandler: java.util.Set _mimeTypes>;

        $r5 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return;
    }

    public java.util.Set getExcluded()
    {
        java.util.Set $r1;
        org.eclipse.jetty.server.handler.GzipHandler r0;

        r0 := @this: org.eclipse.jetty.server.handler.GzipHandler;

        $r1 = r0.<org.eclipse.jetty.server.handler.GzipHandler: java.util.Set _excluded>;

        return $r1;
    }

    public void setExcluded(java.util.Set)
    {
        java.util.Set r1;
        org.eclipse.jetty.server.handler.GzipHandler r0;

        r0 := @this: org.eclipse.jetty.server.handler.GzipHandler;

        r1 := @parameter0: java.util.Set;

        r0.<org.eclipse.jetty.server.handler.GzipHandler: java.util.Set _excluded> = r1;

        return;
    }

    public void setExcluded(java.lang.String)
    {
        java.util.HashSet $r2;
        java.util.StringTokenizer $r3;
        java.util.Set $r4;
        java.lang.String r0, $r5;
        org.eclipse.jetty.server.handler.GzipHandler r1;
        boolean $z0;

        r1 := @this: org.eclipse.jetty.server.handler.GzipHandler;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label2;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r1.<org.eclipse.jetty.server.handler.GzipHandler: java.util.Set _excluded> = $r2;

        $r3 = new java.util.StringTokenizer;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r0, ",", 0);

     label1:
        $z0 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r4 = r1.<org.eclipse.jetty.server.handler.GzipHandler: java.util.Set _excluded>;

        $r5 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return;
    }

    public java.lang.String getVary()
    {
        java.lang.String $r1;
        org.eclipse.jetty.server.handler.GzipHandler r0;

        r0 := @this: org.eclipse.jetty.server.handler.GzipHandler;

        $r1 = r0.<org.eclipse.jetty.server.handler.GzipHandler: java.lang.String _vary>;

        return $r1;
    }

    public void setVary(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.server.handler.GzipHandler r0;

        r0 := @this: org.eclipse.jetty.server.handler.GzipHandler;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.server.handler.GzipHandler: java.lang.String _vary> = r1;

        return;
    }

    public int getBufferSize()
    {
        int $i0;
        org.eclipse.jetty.server.handler.GzipHandler r0;

        r0 := @this: org.eclipse.jetty.server.handler.GzipHandler;

        $i0 = r0.<org.eclipse.jetty.server.handler.GzipHandler: int _bufferSize>;

        return $i0;
    }

    public void setBufferSize(int)
    {
        int i0;
        org.eclipse.jetty.server.handler.GzipHandler r0;

        r0 := @this: org.eclipse.jetty.server.handler.GzipHandler;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.server.handler.GzipHandler: int _bufferSize> = i0;

        return;
    }

    public int getMinGzipSize()
    {
        int $i0;
        org.eclipse.jetty.server.handler.GzipHandler r0;

        r0 := @this: org.eclipse.jetty.server.handler.GzipHandler;

        $i0 = r0.<org.eclipse.jetty.server.handler.GzipHandler: int _minGzipSize>;

        return $i0;
    }

    public void setMinGzipSize(int)
    {
        int i0;
        org.eclipse.jetty.server.handler.GzipHandler r0;

        r0 := @this: org.eclipse.jetty.server.handler.GzipHandler;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.server.handler.GzipHandler: int _minGzipSize> = i0;

        return;
    }

    public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException
    {
        org.eclipse.jetty.server.Request r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.util.Set $r9, $r15;
        org.eclipse.jetty.server.handler.GzipHandler$1 $r13, $r19;
        org.eclipse.jetty.server.handler.GzipHandler r0;
        java.lang.Throwable $r17;
        org.eclipse.jetty.server.Handler $r1, $r11, $r16, $r20;
        org.eclipse.jetty.continuation.Continuation $r12, $r18;
        javax.servlet.http.HttpServletRequest r2;
        int $i0;
        java.lang.String $r3, r4, $r7, $r8, $r14;
        javax.servlet.http.HttpServletResponse r6;
        org.eclipse.jetty.http.gzip.CompressedResponseWrapper $r10;

        r0 := @this: org.eclipse.jetty.server.handler.GzipHandler;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: org.eclipse.jetty.server.Request;

        r2 := @parameter2: javax.servlet.http.HttpServletRequest;

        r6 := @parameter3: javax.servlet.http.HttpServletResponse;

        $r1 = r0.<org.eclipse.jetty.server.handler.GzipHandler: org.eclipse.jetty.server.Handler _handler>;

        if $r1 == null goto label14;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.server.handler.GzipHandler: boolean isStarted()>();

        if $z0 == 0 goto label14;

        $r3 = interfaceinvoke r2.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("accept-encoding");

        if $r3 == null goto label13;

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("gzip");

        if $i0 < 0 goto label13;

        $z1 = interfaceinvoke r6.<javax.servlet.http.HttpServletResponse: boolean containsHeader(java.lang.String)>("Content-Encoding");

        if $z1 != 0 goto label13;

        $r7 = "HEAD";

        $r8 = interfaceinvoke r2.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r8);

        if $z2 != 0 goto label13;

        $r9 = r0.<org.eclipse.jetty.server.handler.GzipHandler: java.util.Set _excluded>;

        if $r9 == null goto label01;

        $r14 = interfaceinvoke r2.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("User-Agent");

        $r15 = r0.<org.eclipse.jetty.server.handler.GzipHandler: java.util.Set _excluded>;

        $z6 = interfaceinvoke $r15.<java.util.Set: boolean contains(java.lang.Object)>($r14);

        if $z6 == 0 goto label01;

        $r16 = r0.<org.eclipse.jetty.server.handler.GzipHandler: org.eclipse.jetty.server.Handler _handler>;

        interfaceinvoke $r16.<org.eclipse.jetty.server.Handler: void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r4, r5, r2, r6);

        return;

     label01:
        $r10 = virtualinvoke r0.<org.eclipse.jetty.server.handler.GzipHandler: org.eclipse.jetty.http.gzip.CompressedResponseWrapper newGzipResponseWrapper(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r2, r6);

     label02:
        $r11 = r0.<org.eclipse.jetty.server.handler.GzipHandler: org.eclipse.jetty.server.Handler _handler>;

        interfaceinvoke $r11.<org.eclipse.jetty.server.Handler: void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r4, r5, r2, $r10);

     label03:
        $r12 = staticinvoke <org.eclipse.jetty.continuation.ContinuationSupport: org.eclipse.jetty.continuation.Continuation getContinuation(javax.servlet.ServletRequest)>(r2);

        $z3 = interfaceinvoke $r12.<org.eclipse.jetty.continuation.Continuation: boolean isSuspended()>();

        if $z3 == 0 goto label04;

        $z5 = interfaceinvoke $r12.<org.eclipse.jetty.continuation.Continuation: boolean isResponseWrapped()>();

        if $z5 == 0 goto label04;

        $r13 = new org.eclipse.jetty.server.handler.GzipHandler$1;

        specialinvoke $r13.<org.eclipse.jetty.server.handler.GzipHandler$1: void <init>(org.eclipse.jetty.server.handler.GzipHandler,org.eclipse.jetty.http.gzip.CompressedResponseWrapper)>(r0, $r10);

        interfaceinvoke $r12.<org.eclipse.jetty.continuation.Continuation: void addContinuationListener(org.eclipse.jetty.continuation.ContinuationListener)>($r13);

        goto label06;

     label04:
        if 0 == 0 goto label05;

        $z4 = interfaceinvoke r6.<javax.servlet.http.HttpServletResponse: boolean isCommitted()>();

        if $z4 != 0 goto label05;

        virtualinvoke $r10.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void resetBuffer()>();

        virtualinvoke $r10.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void noCompression()>();

        goto label06;

     label05:
        virtualinvoke $r10.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void finish()>();

     label06:
        goto label12;

     label07:
        $r17 := @caughtexception;

     label08:
        $r18 = staticinvoke <org.eclipse.jetty.continuation.ContinuationSupport: org.eclipse.jetty.continuation.Continuation getContinuation(javax.servlet.ServletRequest)>(r2);

        $z7 = interfaceinvoke $r18.<org.eclipse.jetty.continuation.Continuation: boolean isSuspended()>();

        if $z7 == 0 goto label09;

        $z9 = interfaceinvoke $r18.<org.eclipse.jetty.continuation.Continuation: boolean isResponseWrapped()>();

        if $z9 == 0 goto label09;

        $r19 = new org.eclipse.jetty.server.handler.GzipHandler$1;

        specialinvoke $r19.<org.eclipse.jetty.server.handler.GzipHandler$1: void <init>(org.eclipse.jetty.server.handler.GzipHandler,org.eclipse.jetty.http.gzip.CompressedResponseWrapper)>(r0, $r10);

        interfaceinvoke $r18.<org.eclipse.jetty.continuation.Continuation: void addContinuationListener(org.eclipse.jetty.continuation.ContinuationListener)>($r19);

        goto label11;

     label09:
        if 1 == 0 goto label10;

        $z8 = interfaceinvoke r6.<javax.servlet.http.HttpServletResponse: boolean isCommitted()>();

        if $z8 != 0 goto label10;

        virtualinvoke $r10.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void resetBuffer()>();

        virtualinvoke $r10.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void noCompression()>();

        goto label11;

     label10:
        virtualinvoke $r10.<org.eclipse.jetty.http.gzip.CompressedResponseWrapper: void finish()>();

     label11:
        throw $r17;

     label12:
        goto label14;

     label13:
        $r20 = r0.<org.eclipse.jetty.server.handler.GzipHandler: org.eclipse.jetty.server.Handler _handler>;

        interfaceinvoke $r20.<org.eclipse.jetty.server.Handler: void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r4, r5, r2, r6);

     label14:
        return;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    protected org.eclipse.jetty.http.gzip.CompressedResponseWrapper newGzipResponseWrapper(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
    {
        javax.servlet.http.HttpServletRequest r2;
        javax.servlet.http.HttpServletResponse r3;
        org.eclipse.jetty.server.handler.GzipHandler$2 $r0;
        org.eclipse.jetty.server.handler.GzipHandler r1;

        r1 := @this: org.eclipse.jetty.server.handler.GzipHandler;

        r2 := @parameter0: javax.servlet.http.HttpServletRequest;

        r3 := @parameter1: javax.servlet.http.HttpServletResponse;

        $r0 = new org.eclipse.jetty.server.handler.GzipHandler$2;

        specialinvoke $r0.<org.eclipse.jetty.server.handler.GzipHandler$2: void <init>(org.eclipse.jetty.server.handler.GzipHandler,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2, r3);

        return $r0;
    }

    protected java.io.PrintWriter newWriter(java.io.OutputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream r2;
        java.io.PrintWriter $r4;
        java.io.OutputStreamWriter $r1;
        java.lang.String r0;
        org.eclipse.jetty.server.handler.GzipHandler r3;

        r3 := @this: org.eclipse.jetty.server.handler.GzipHandler;

        r2 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r4 = new java.io.PrintWriter;

        specialinvoke $r4.<java.io.PrintWriter: void <init>(java.io.OutputStream)>(r2);

        goto label2;

     label1:
        $r4 = new java.io.PrintWriter;

        $r1 = new java.io.OutputStreamWriter;

        specialinvoke $r1.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r2, r0);

        specialinvoke $r4.<java.io.PrintWriter: void <init>(java.io.Writer)>($r1);

     label2:
        return $r4;
    }

    static org.eclipse.jetty.util.log.Logger access$000()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = <org.eclipse.jetty.server.handler.GzipHandler: org.eclipse.jetty.util.log.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)>(class "Lorg/eclipse/jetty/server/handler/GzipHandler;");

        <org.eclipse.jetty.server.handler.GzipHandler: org.eclipse.jetty.util.log.Logger LOG> = $r0;

        return;
    }
}
