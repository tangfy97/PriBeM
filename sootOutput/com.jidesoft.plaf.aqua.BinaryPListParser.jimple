class com.jidesoft.plaf.aqua.BinaryPListParser extends java.lang.Object
{
    private int refCount;
    private int offsetCount;
    private int objectCount;
    private int topLevelOffset;
    private java.util.ArrayList objectTable;

    public void <init>()
    {
        com.jidesoft.plaf.aqua.BinaryPListParser r0;

        r0 := @this: com.jidesoft.plaf.aqua.BinaryPListParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.jidesoft.plaf.aqua.XMLElement parse(java.io.File) throws java.io.IOException
    {
        java.lang.Throwable $r11, $r12;
        java.io.RandomAccessFile $r0, r13;
        java.io.DataInputStream $r5, r15;
        byte[] r14;
        long $l2, $l3, $l4, $l6, $l8, $l10;
        java.util.HashMap $r8;
        java.util.ArrayList $r4, $r9;
        java.io.ByteArrayInputStream $r6;
        int $i0, $i1, $i5, $i7, $i9, $i11, $i12, $i13;
        com.jidesoft.plaf.aqua.XMLElement $r7;
        java.io.IOException $r2;
        java.io.File r1;
        com.jidesoft.plaf.aqua.BinaryPListParser r3;
        java.lang.Object $r10;

        r3 := @this: com.jidesoft.plaf.aqua.BinaryPListParser;

        r1 := @parameter0: java.io.File;

        r13 = null;

     label01:
        $r0 = new java.io.RandomAccessFile;

        specialinvoke $r0.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r1, "r");

        r13 = $r0;

        $i0 = virtualinvoke $r0.<java.io.RandomAccessFile: int readInt()>();

        $i1 = virtualinvoke $r0.<java.io.RandomAccessFile: int readInt()>();

        if $i0 != 1651534953 goto label02;

        if $i1 == 1936994352 goto label03;

     label02:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("parseHeader: File does not start with \'bplist00\' magic.");

        throw $r2;

     label03:
        $l2 = virtualinvoke $r0.<java.io.RandomAccessFile: long length()>();

        $l3 = $l2 - 32L;

        virtualinvoke $r0.<java.io.RandomAccessFile: void seek(long)>($l3);

        $l4 = virtualinvoke $r0.<java.io.RandomAccessFile: long readLong()>();

        $i5 = (int) $l4;

        r3.<com.jidesoft.plaf.aqua.BinaryPListParser: int offsetCount> = $i5;

        $l6 = virtualinvoke $r0.<java.io.RandomAccessFile: long readLong()>();

        $i7 = (int) $l6;

        r3.<com.jidesoft.plaf.aqua.BinaryPListParser: int refCount> = $i7;

        $l8 = virtualinvoke $r0.<java.io.RandomAccessFile: long readLong()>();

        $i9 = (int) $l8;

        r3.<com.jidesoft.plaf.aqua.BinaryPListParser: int objectCount> = $i9;

        $l10 = virtualinvoke $r0.<java.io.RandomAccessFile: long readLong()>();

        $i11 = (int) $l10;

        r3.<com.jidesoft.plaf.aqua.BinaryPListParser: int topLevelOffset> = $i11;

        $i12 = r3.<com.jidesoft.plaf.aqua.BinaryPListParser: int topLevelOffset>;

        $i13 = $i12 - 8;

        r14 = newarray (byte)[$i13];

        virtualinvoke $r0.<java.io.RandomAccessFile: void seek(long)>(8L);

        virtualinvoke $r0.<java.io.RandomAccessFile: void readFully(byte[])>(r14);

     label04:
        if $r0 == null goto label08;

        virtualinvoke $r0.<java.io.RandomAccessFile: void close()>();

        goto label08;

     label05:
        $r12 := @caughtexception;

     label06:
        if r13 == null goto label07;

        virtualinvoke r13.<java.io.RandomAccessFile: void close()>();

     label07:
        throw $r12;

     label08:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r3.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable> = $r4;

        r15 = null;

     label09:
        $r5 = new java.io.DataInputStream;

        $r6 = new java.io.ByteArrayInputStream;

        specialinvoke $r6.<java.io.ByteArrayInputStream: void <init>(byte[])>(r14);

        specialinvoke $r5.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r6);

        r15 = $r5;

        specialinvoke r3.<com.jidesoft.plaf.aqua.BinaryPListParser: void parseObjectTable(java.io.DataInputStream)>($r5);

     label10:
        if $r5 == null goto label14;

        virtualinvoke $r5.<java.io.DataInputStream: void close()>();

        goto label14;

     label11:
        $r11 := @caughtexception;

     label12:
        if r15 == null goto label13;

        virtualinvoke r15.<java.io.DataInputStream: void close()>();

     label13:
        throw $r11;

     label14:
        $r7 = new com.jidesoft.plaf.aqua.XMLElement;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        specialinvoke $r7.<com.jidesoft.plaf.aqua.XMLElement: void <init>(java.util.HashMap,boolean,boolean)>($r8, 0, 0);

        virtualinvoke $r7.<com.jidesoft.plaf.aqua.XMLElement: void setName(java.lang.String)>("plist");

        virtualinvoke $r7.<com.jidesoft.plaf.aqua.XMLElement: void setAttribute(java.lang.String,java.lang.Object)>("version", "1.0");

        $r9 = r3.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(0);

        specialinvoke r3.<com.jidesoft.plaf.aqua.BinaryPListParser: void convertObjectTableToXML(com.jidesoft.plaf.aqua.XMLElement,java.lang.Object)>($r7, $r10);

        return $r7;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private void convertObjectTableToXML(com.jidesoft.plaf.aqua.XMLElement, java.lang.Object)
    {
        byte[] $r7, $r8;
        java.util.Date $r5;
        int[] $r16, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.jidesoft.plaf.aqua.XMLElement r0, $r1, $r20;
        com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray r24;
        java.text.SimpleDateFormat $r4;
        int $i0, $i1, i2, i3;
        java.lang.String $r3, $r6, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r21;
        com.jidesoft.plaf.aqua.BinaryPListParser r17;
        com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict r23;
        java.lang.Object r2, $r18, $r22;

        r17 := @this: com.jidesoft.plaf.aqua.BinaryPListParser;

        r0 := @parameter0: com.jidesoft.plaf.aqua.XMLElement;

        r2 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLElement createAnotherElement()>();

        $z0 = r2 instanceof com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict;

        if $z0 == 0 goto label03;

        r23 = (com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict) r2;

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setName(java.lang.String)>("dict");

        i2 = 0;

     label01:
        $r19 = r23.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict: int[] keyref>;

        $i1 = lengthof $r19;

        if i2 >= $i1 goto label02;

        $r20 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLElement createAnotherElement()>();

        virtualinvoke $r20.<com.jidesoft.plaf.aqua.XMLElement: void setName(java.lang.String)>("key");

        $r21 = virtualinvoke r23.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict: java.lang.String getKey(int)>(i2);

        virtualinvoke $r20.<com.jidesoft.plaf.aqua.XMLElement: void setContent(java.lang.String)>($r21);

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void addChild(com.jidesoft.plaf.aqua.XMLElement)>($r20);

        $r22 = virtualinvoke r23.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict: java.lang.Object getValue(int)>(i2);

        specialinvoke r17.<com.jidesoft.plaf.aqua.BinaryPListParser: void convertObjectTableToXML(com.jidesoft.plaf.aqua.XMLElement,java.lang.Object)>($r1, $r22);

        i2 = i2 + 1;

        goto label01;

     label02:
        goto label15;

     label03:
        $z1 = r2 instanceof com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray;

        if $z1 == 0 goto label06;

        r24 = (com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray) r2;

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setName(java.lang.String)>("array");

        i3 = 0;

     label04:
        $r16 = r24.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: int[] objref>;

        $i0 = lengthof $r16;

        if i3 >= $i0 goto label05;

        $r18 = virtualinvoke r24.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: java.lang.Object getValue(int)>(i3);

        specialinvoke r17.<com.jidesoft.plaf.aqua.BinaryPListParser: void convertObjectTableToXML(com.jidesoft.plaf.aqua.XMLElement,java.lang.Object)>($r1, $r18);

        i3 = i3 + 1;

        goto label04;

     label05:
        goto label15;

     label06:
        $z2 = r2 instanceof java.lang.String;

        if $z2 == 0 goto label07;

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setName(java.lang.String)>("string");

        $r15 = (java.lang.String) r2;

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setContent(java.lang.String)>($r15);

        goto label15;

     label07:
        $z3 = r2 instanceof java.lang.Integer;

        if $z3 == 0 goto label08;

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setName(java.lang.String)>("integer");

        $r14 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setContent(java.lang.String)>($r14);

        goto label15;

     label08:
        $z4 = r2 instanceof java.lang.Long;

        if $z4 == 0 goto label09;

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setName(java.lang.String)>("integer");

        $r13 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setContent(java.lang.String)>($r13);

        goto label15;

     label09:
        $z5 = r2 instanceof java.lang.Float;

        if $z5 == 0 goto label10;

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setName(java.lang.String)>("real");

        $r12 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setContent(java.lang.String)>($r12);

        goto label15;

     label10:
        $z6 = r2 instanceof java.lang.Double;

        if $z6 == 0 goto label11;

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setName(java.lang.String)>("real");

        $r11 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setContent(java.lang.String)>($r11);

        goto label15;

     label11:
        $z7 = r2 instanceof java.lang.Boolean;

        if $z7 == 0 goto label12;

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setName(java.lang.String)>("boolean");

        $r10 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setContent(java.lang.String)>($r10);

        goto label15;

     label12:
        $z8 = r2 instanceof byte[];

        if $z8 == 0 goto label13;

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setName(java.lang.String)>("data");

        $r7 = (byte[]) r2;

        $r8 = (byte[]) $r7;

        $r9 = staticinvoke <com.jidesoft.utils.Base64: java.lang.String encodeBytes(byte[])>($r8);

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setContent(java.lang.String)>($r9);

        goto label15;

     label13:
        $z9 = r2 instanceof java.util.Date;

        if $z9 == 0 goto label14;

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setName(java.lang.String)>("date");

        $r4 = new java.text.SimpleDateFormat;

        specialinvoke $r4.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss\'Z\'");

        $r5 = (java.util.Date) r2;

        $r6 = virtualinvoke $r4.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r5);

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setContent(java.lang.String)>($r6);

        goto label15;

     label14:
        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setName(java.lang.String)>("unsupported");

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<com.jidesoft.plaf.aqua.XMLElement: void setContent(java.lang.String)>($r3);

     label15:
        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void addChild(com.jidesoft.plaf.aqua.XMLElement)>($r1);

        return;
    }

    private void parseObjectTable(java.io.DataInputStream) throws java.io.IOException
    {
        java.lang.StringBuilder $r3, $r5, $r9, $r11, $r16, $r18, $r22, $r24, $r28, $r30, $r34, $r35, $r39, $r41, $r45, $r47, $r49, $r51, $r52, $r53, $r55, $r57, $r59, $r61;
        java.lang.String $r4, $r6, $r10, $r12, $r17, $r19, $r23, $r25, $r29, $r31, $r36, $r40, $r42, $r46, $r48;
        java.io.IOException $r50, $r54, $r56, $r58, $r60, $r62;
        com.jidesoft.plaf.aqua.BinaryPListParser r13;
        java.io.DataInputStream r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15, i16, i17, $i19;
        java.io.PrintStream $r33, $r38;

        r13 := @this: com.jidesoft.plaf.aqua.BinaryPListParser;

        r0 := @parameter0: java.io.DataInputStream;

     label01:
        $i0 = virtualinvoke r0.<java.io.DataInputStream: int read()>();

        $i19 = (int) -1;

        if $i0 == $i19 goto label27;

        $i1 = $i0 & 240;

        $i2 = $i1 >> 4;

        tableswitch($i2)
        {
            case 0: goto label02;
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label07;
            case 5: goto label09;
            case 6: goto label11;
            case 7: goto label13;
            case 8: goto label14;
            case 9: goto label15;
            case 10: goto label16;
            case 11: goto label19;
            case 12: goto label20;
            case 13: goto label21;
            case 14: goto label24;
            case 15: goto label25;
            default: goto label26;
        };

     label02:
        $i9 = $i0 & 15;

        specialinvoke r13.<com.jidesoft.plaf.aqua.BinaryPListParser: void parsePrimitive(java.io.DataInputStream,int)>(r0, $i9);

        goto label26;

     label03:
        $i8 = $i0 & 15;

        i10 = 1 << $i8;

        specialinvoke r13.<com.jidesoft.plaf.aqua.BinaryPListParser: void parseInt(java.io.DataInputStream,int)>(r0, i10);

        goto label26;

     label04:
        $i7 = $i0 & 15;

        i11 = 1 << $i7;

        specialinvoke r13.<com.jidesoft.plaf.aqua.BinaryPListParser: void parseReal(java.io.DataInputStream,int)>(r0, i11);

        goto label26;

     label05:
        $i6 = $i0 & 15;

        if $i6 == 3 goto label06;

        $r50 = new java.io.IOException;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parseObjectTable: illegal marker ");

        $r46 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>($i0);

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r50.<java.io.IOException: void <init>(java.lang.String)>($r48);

        throw $r50;

     label06:
        specialinvoke r13.<com.jidesoft.plaf.aqua.BinaryPListParser: void parseDate(java.io.DataInputStream)>(r0);

        goto label26;

     label07:
        i12 = $i0 & 15;

        if i12 != 15 goto label08;

        i12 = specialinvoke r13.<com.jidesoft.plaf.aqua.BinaryPListParser: int readCount(java.io.DataInputStream)>(r0);

     label08:
        specialinvoke r13.<com.jidesoft.plaf.aqua.BinaryPListParser: void parseData(java.io.DataInputStream,int)>(r0, i12);

        goto label26;

     label09:
        i13 = $i0 & 15;

        if i13 != 15 goto label10;

        i13 = specialinvoke r13.<com.jidesoft.plaf.aqua.BinaryPListParser: int readCount(java.io.DataInputStream)>(r0);

     label10:
        specialinvoke r13.<com.jidesoft.plaf.aqua.BinaryPListParser: void parseAsciiString(java.io.DataInputStream,int)>(r0, i13);

        goto label26;

     label11:
        i14 = $i0 & 15;

        if i14 != 15 goto label12;

        i14 = specialinvoke r13.<com.jidesoft.plaf.aqua.BinaryPListParser: int readCount(java.io.DataInputStream)>(r0);

     label12:
        specialinvoke r13.<com.jidesoft.plaf.aqua.BinaryPListParser: void parseUnicodeString(java.io.DataInputStream,int)>(r0, i14);

        goto label26;

     label13:
        $r38 = <java.lang.System: java.io.PrintStream out>;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parseObjectTable: illegal marker ");

        $r40 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>($i0);

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r38.<java.io.PrintStream: void println(java.lang.String)>($r42);

        return;

     label14:
        $i5 = $i0 & 15;

        i15 = $i5 + 1;

        $r33 = <java.lang.System: java.io.PrintStream out>;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i15);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>($r36);

        goto label26;

     label15:
        $r54 = new java.io.IOException;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parseObjectTable: illegal marker ");

        $r29 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>($i0);

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r54.<java.io.IOException: void <init>(java.lang.String)>($r31);

        throw $r54;

     label16:
        i16 = $i0 & 15;

        if i16 != 15 goto label17;

        i16 = specialinvoke r13.<com.jidesoft.plaf.aqua.BinaryPListParser: int readCount(java.io.DataInputStream)>(r0);

     label17:
        $i4 = r13.<com.jidesoft.plaf.aqua.BinaryPListParser: int refCount>;

        if $i4 <= 255 goto label18;

        specialinvoke r13.<com.jidesoft.plaf.aqua.BinaryPListParser: void parseShortArray(java.io.DataInputStream,int)>(r0, i16);

        goto label26;

     label18:
        specialinvoke r13.<com.jidesoft.plaf.aqua.BinaryPListParser: void parseByteArray(java.io.DataInputStream,int)>(r0, i16);

        goto label26;

     label19:
        $r56 = new java.io.IOException;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parseObjectTable: illegal marker ");

        $r23 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>($i0);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r56.<java.io.IOException: void <init>(java.lang.String)>($r25);

        throw $r56;

     label20:
        $r58 = new java.io.IOException;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parseObjectTable: illegal marker ");

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>($i0);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r58.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r58;

     label21:
        i17 = $i0 & 15;

        if i17 != 15 goto label22;

        i17 = specialinvoke r13.<com.jidesoft.plaf.aqua.BinaryPListParser: int readCount(java.io.DataInputStream)>(r0);

     label22:
        $i3 = r13.<com.jidesoft.plaf.aqua.BinaryPListParser: int refCount>;

        if $i3 <= 256 goto label23;

        specialinvoke r13.<com.jidesoft.plaf.aqua.BinaryPListParser: void parseShortDict(java.io.DataInputStream,int)>(r0, i17);

        goto label26;

     label23:
        specialinvoke r13.<com.jidesoft.plaf.aqua.BinaryPListParser: void parseByteDict(java.io.DataInputStream,int)>(r0, i17);

        goto label26;

     label24:
        $r60 = new java.io.IOException;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parseObjectTable: illegal marker ");

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>($i0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r60.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r60;

     label25:
        $r62 = new java.io.IOException;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parseObjectTable: illegal marker ");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>($i0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r62.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r62;

     label26:
        goto label01;

     label27:
        return;
    }

    private int readCount(java.io.DataInputStream) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, i7, i8, $i10, $i12;
        java.lang.String $r5, $r7;
        java.io.IOException $r10, $r12, $r13;
        com.jidesoft.plaf.aqua.BinaryPListParser r9;
        java.lang.StringBuilder $r4, $r6, $r11;

        r9 := @this: com.jidesoft.plaf.aqua.BinaryPListParser;

        r0 := @parameter0: java.io.DataInputStream;

        $i0 = virtualinvoke r0.<java.io.DataInputStream: int read()>();

        $i10 = (int) -1;

        if $i0 != $i10 goto label1;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("variableLengthInt: Illegal EOF in marker");

        throw $r10;

     label1:
        $i1 = $i0 & 240;

        $i2 = $i1 >> 4;

        if $i2 == 1 goto label2;

        $r12 = new java.io.IOException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("variableLengthInt: Illegal marker ");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>($i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r12;

     label2:
        $i3 = $i0 & 15;

        i4 = 1 << $i3;

        i7 = 0;

        i8 = 0;

     label3:
        if i8 >= i4 goto label5;

        $i5 = virtualinvoke r0.<java.io.DataInputStream: int read()>();

        $i12 = (int) -1;

        if $i5 != $i12 goto label4;

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("variableLengthInt: Illegal EOF in value");

        throw $r13;

     label4:
        $i6 = i7 << 8;

        i7 = $i6 | $i5;

        i8 = i8 + 1;

        goto label3;

     label5:
        return i7;
    }

    private void parsePrimitive(java.io.DataInputStream, int) throws java.io.IOException
    {
        java.io.DataInputStream r12;
        java.io.IOException $r6;
        java.util.ArrayList $r2, $r4, $r5;
        com.jidesoft.plaf.aqua.BinaryPListParser r0;
        int i0;
        java.lang.Boolean $r1, $r3;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9, $r11;

        r0 := @this: com.jidesoft.plaf.aqua.BinaryPListParser;

        r12 := @parameter0: java.io.DataInputStream;

        i0 := @parameter1: int;

        lookupswitch(i0)
        {
            case 0: goto label1;
            case 8: goto label2;
            case 9: goto label3;
            case 15: goto label4;
            default: goto label5;
        };

     label1:
        $r5 = r0.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(null);

        goto label6;

     label2:
        $r4 = r0.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label6;

     label3:
        $r2 = r0.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        $r1 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        goto label6;

     label4:
        goto label6;

     label5:
        $r6 = new java.io.IOException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parsePrimitive: illegal primitive ");

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>(i0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label6:
        return;
    }

    private void parseByteArray(java.io.DataInputStream, int) throws java.io.IOException
    {
        java.io.DataInputStream r5;
        com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray $r9;
        java.util.ArrayList $r2, $r4;
        short $s2, $s5;
        byte $b1;
        int[] $r3, $r6, $r7;
        int i0, $i3, i4, $i6, $i8;
        java.io.IOException $r10;
        com.jidesoft.plaf.aqua.BinaryPListParser r1;

        r1 := @this: com.jidesoft.plaf.aqua.BinaryPListParser;

        r5 := @parameter0: java.io.DataInputStream;

        i0 := @parameter1: int;

        $r9 = new com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray;

        specialinvoke $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: void <init>(com.jidesoft.plaf.aqua.BinaryPListParser$1)>(null);

        $r2 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: java.util.ArrayList objectTable> = $r2;

        $r3 = newarray (int)[i0];

        $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: int[] objref> = $r3;

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        $r6 = $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: int[] objref>;

        $b1 = virtualinvoke r5.<java.io.DataInputStream: byte readByte()>();

        $s5 = (short) $b1;

        $s2 = $s5 & 255;

        $i6 = (int) $s2;

        $r6[i4] = $i6;

        $r7 = $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: int[] objref>;

        $i3 = $r7[i4];

        $i8 = (int) -1;

        if $i3 != $i8 goto label2;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("parseByteArray: illegal EOF in objref*");

        throw $r10;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $r4 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        return;
    }

    private void parseShortArray(java.io.DataInputStream, int) throws java.io.IOException
    {
        java.io.DataInputStream r5;
        com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray $r9;
        java.util.ArrayList $r2, $r4;
        short $s1;
        int[] $r3, $r6, $r7;
        int i0, $i2, $i3, i4, $i5, $i7, $i9;
        java.io.IOException $r10;
        com.jidesoft.plaf.aqua.BinaryPListParser r1;

        r1 := @this: com.jidesoft.plaf.aqua.BinaryPListParser;

        r5 := @parameter0: java.io.DataInputStream;

        i0 := @parameter1: int;

        $r9 = new com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray;

        specialinvoke $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: void <init>(com.jidesoft.plaf.aqua.BinaryPListParser$1)>(null);

        $r2 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: java.util.ArrayList objectTable> = $r2;

        $r3 = newarray (int)[i0];

        $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: int[] objref> = $r3;

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        $r6 = $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: int[] objref>;

        $s1 = virtualinvoke r5.<java.io.DataInputStream: short readShort()>();

        $i5 = (int) $s1;

        $i7 = (int) 65535;

        $i2 = $i5 & $i7;

        $r6[i4] = $i2;

        $r7 = $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLArray: int[] objref>;

        $i3 = $r7[i4];

        $i9 = (int) -1;

        if $i3 != $i9 goto label2;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("parseShortArray: illegal EOF in objref*");

        throw $r10;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $r4 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        return;
    }

    private void parseData(java.io.DataInputStream, int) throws java.io.IOException
    {
        byte[] r0;
        java.io.DataInputStream r1;
        com.jidesoft.plaf.aqua.BinaryPListParser r2;
        int i0;
        java.util.ArrayList $r3;

        r2 := @this: com.jidesoft.plaf.aqua.BinaryPListParser;

        r1 := @parameter0: java.io.DataInputStream;

        i0 := @parameter1: int;

        r0 = newarray (byte)[i0];

        virtualinvoke r1.<java.io.DataInputStream: void readFully(byte[])>(r0);

        $r3 = r2.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        return;
    }

    private void parseByteDict(java.io.DataInputStream, int) throws java.io.IOException
    {
        java.io.DataInputStream r6;
        java.util.ArrayList $r2, $r5;
        short $s2, $s4, $s7, $s9;
        byte $b1, $b3;
        int[] $r3, $r4, $r7, $r8;
        int i0, i5, i6, $i8, $i10;
        com.jidesoft.plaf.aqua.BinaryPListParser r1;
        com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict $r9;

        r1 := @this: com.jidesoft.plaf.aqua.BinaryPListParser;

        r6 := @parameter0: java.io.DataInputStream;

        i0 := @parameter1: int;

        $r9 = new com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict;

        specialinvoke $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict: void <init>(com.jidesoft.plaf.aqua.BinaryPListParser$1)>(null);

        $r2 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict: java.util.ArrayList objectTable> = $r2;

        $r3 = newarray (int)[i0];

        $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict: int[] keyref> = $r3;

        $r4 = newarray (int)[i0];

        $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict: int[] objref> = $r4;

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $r8 = $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict: int[] keyref>;

        $b3 = virtualinvoke r6.<java.io.DataInputStream: byte readByte()>();

        $s7 = (short) $b3;

        $s4 = $s7 & 255;

        $i8 = (int) $s4;

        $r8[i5] = $i8;

        i5 = i5 + 1;

        goto label1;

     label2:
        i6 = 0;

     label3:
        if i6 >= i0 goto label4;

        $r7 = $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict: int[] objref>;

        $b1 = virtualinvoke r6.<java.io.DataInputStream: byte readByte()>();

        $s9 = (short) $b1;

        $s2 = $s9 & 255;

        $i10 = (int) $s2;

        $r7[i6] = $i10;

        i6 = i6 + 1;

        goto label3;

     label4:
        $r5 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        return;
    }

    private void parseShortDict(java.io.DataInputStream, int) throws java.io.IOException
    {
        java.io.DataInputStream r6;
        java.util.ArrayList $r2, $r5;
        short $s1, $s3;
        int[] $r3, $r4, $r7, $r8;
        int i0, $i2, $i4, i5, i6, $i7, $i9, $i10, $i12;
        com.jidesoft.plaf.aqua.BinaryPListParser r1;
        com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict $r9;

        r1 := @this: com.jidesoft.plaf.aqua.BinaryPListParser;

        r6 := @parameter0: java.io.DataInputStream;

        i0 := @parameter1: int;

        $r9 = new com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict;

        specialinvoke $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict: void <init>(com.jidesoft.plaf.aqua.BinaryPListParser$1)>(null);

        $r2 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict: java.util.ArrayList objectTable> = $r2;

        $r3 = newarray (int)[i0];

        $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict: int[] keyref> = $r3;

        $r4 = newarray (int)[i0];

        $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict: int[] objref> = $r4;

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $r8 = $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict: int[] keyref>;

        $s3 = virtualinvoke r6.<java.io.DataInputStream: short readShort()>();

        $i7 = (int) $s3;

        $i9 = (int) 65535;

        $i4 = $i7 & $i9;

        $r8[i5] = $i4;

        i5 = i5 + 1;

        goto label1;

     label2:
        i6 = 0;

     label3:
        if i6 >= i0 goto label4;

        $r7 = $r9.<com.jidesoft.plaf.aqua.BinaryPListParser$BPLDict: int[] objref>;

        $s1 = virtualinvoke r6.<java.io.DataInputStream: short readShort()>();

        $i10 = (int) $s1;

        $i12 = (int) 65535;

        $i2 = $i10 & $i12;

        $r7[i6] = $i2;

        i6 = i6 + 1;

        goto label3;

     label4:
        $r5 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        return;
    }

    private void parseAsciiString(java.io.DataInputStream, int) throws java.io.IOException
    {
        byte[] r0;
        java.io.DataInputStream r1;
        com.jidesoft.plaf.aqua.BinaryPListParser r3;
        int i0;
        java.lang.String $r2;
        java.util.ArrayList $r4;

        r3 := @this: com.jidesoft.plaf.aqua.BinaryPListParser;

        r1 := @parameter0: java.io.DataInputStream;

        i0 := @parameter1: int;

        r0 = newarray (byte)[i0];

        virtualinvoke r1.<java.io.DataInputStream: void readFully(byte[])>(r0);

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>(r0, "ASCII");

        $r4 = r3.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        return;
    }

    private void parseInt(java.io.DataInputStream, int) throws java.io.IOException
    {
        java.io.DataInputStream r3;
        long $l2, $l3, l4;
        java.util.ArrayList $r1;
        java.lang.Long $r2;
        int i0, $i1, i5, $i7;
        java.lang.String $r9;
        java.io.IOException $r11, $r12;
        com.jidesoft.plaf.aqua.BinaryPListParser r0;
        java.lang.StringBuilder $r7, $r8, $r10;

        r0 := @this: com.jidesoft.plaf.aqua.BinaryPListParser;

        r3 := @parameter0: java.io.DataInputStream;

        i0 := @parameter1: int;

        if i0 <= 8 goto label1;

        $r11 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parseInt: unsupported byte count:");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label1:
        l4 = 0L;

        i5 = 0;

     label2:
        if i5 >= i0 goto label4;

        $i1 = virtualinvoke r3.<java.io.DataInputStream: int read()>();

        $i7 = (int) -1;

        if $i1 != $i7 goto label3;

        $r12 = new java.io.IOException;

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("parseInt: Illegal EOF in value");

        throw $r12;

     label3:
        $l3 = l4 << 8;

        $l2 = (long) $i1;

        l4 = $l3 | $l2;

        i5 = i5 + 1;

        goto label2;

     label4:
        $r1 = r0.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        return;
    }

    private void parseReal(java.io.DataInputStream, int) throws java.io.IOException
    {
        java.io.DataInputStream r1;
        java.lang.Float $r5;
        java.lang.Double $r3;
        java.io.IOException $r6;
        java.util.ArrayList $r2, $r4;
        com.jidesoft.plaf.aqua.BinaryPListParser r0;
        int i0;
        float $f0;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        double $d0;

        r0 := @this: com.jidesoft.plaf.aqua.BinaryPListParser;

        r1 := @parameter0: java.io.DataInputStream;

        i0 := @parameter1: int;

        lookupswitch(i0)
        {
            case 4: goto label1;
            case 8: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = r0.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        $f0 = virtualinvoke r1.<java.io.DataInputStream: float readFloat()>();

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        goto label4;

     label2:
        $r2 = r0.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        $d0 = virtualinvoke r1.<java.io.DataInputStream: double readDouble()>();

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label4;

     label3:
        $r6 = new java.io.IOException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parseReal: unsupported byte count:");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label4:
        return;
    }

    private void parseDate(java.io.DataInputStream) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        com.jidesoft.plaf.aqua.BinaryPListParser r1;
        java.util.Date $r2;
        java.util.ArrayList $r3;

        r1 := @this: com.jidesoft.plaf.aqua.BinaryPListParser;

        r0 := @parameter0: java.io.DataInputStream;

        virtualinvoke r0.<java.io.DataInputStream: double readDouble()>();

        $r3 = r1.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        return;
    }

    private void parseUnicodeString(java.io.DataInputStream, int) throws java.io.IOException
    {
        java.io.DataInputStream r4;
        char $c1;
        java.util.ArrayList $r3;
        com.jidesoft.plaf.aqua.BinaryPListParser r2;
        int i0, i2;
        char[] r0;
        java.lang.String $r1;

        r2 := @this: com.jidesoft.plaf.aqua.BinaryPListParser;

        r4 := @parameter0: java.io.DataInputStream;

        i0 := @parameter1: int;

        r0 = newarray (char)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $c1 = virtualinvoke r4.<java.io.DataInputStream: char readChar()>();

        r0[i2] = $c1;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[])>(r0);

        $r3 = r2.<com.jidesoft.plaf.aqua.BinaryPListParser: java.util.ArrayList objectTable>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.Throwable $r12;
        java.lang.String[] r18;
        int $i0, i1;
        java.lang.String $r1, $r4, $r14, $r15, $r17;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.PrintStream $r7, $r11, $r16;
        com.jidesoft.plaf.aqua.XMLElement $r10;
        java.io.IOException $r13;
        java.io.File $r0, $r3, $r5, $r6, $r9;
        com.jidesoft.plaf.aqua.BinaryPListParser $r8;
        java.io.File[] $r2;

        r18 := @parameter0: java.lang.String[];

     label01:
        $r0 = new java.io.File;

        $r1 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("user.home", "");

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, "Library/Preferences");

        $r2 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        i1 = 0;

     label02:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label09;

        $r3 = $r2[i1];

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getName()>();

        $r5 = $r2[i1];

        $z0 = virtualinvoke $r5.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label08;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>(".plist");

        if $z1 == 0 goto label08;

        $z2 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>("internetconfig.plist");

        if $z2 == 0 goto label03;

        goto label08;

     label03:
        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r6 = $r2[i1];

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.Object)>($r6);

        $r8 = new com.jidesoft.plaf.aqua.BinaryPListParser;

        specialinvoke $r8.<com.jidesoft.plaf.aqua.BinaryPListParser: void <init>()>();

        $r9 = $r2[i1];

        $r10 = virtualinvoke $r8.<com.jidesoft.plaf.aqua.BinaryPListParser: com.jidesoft.plaf.aqua.XMLElement parse(java.io.File)>($r9);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.Object)>($r10);

     label04:
        goto label08;

     label05:
        $r13 := @caughtexception;

        $r14 = virtualinvoke $r13.<java.io.IOException: java.lang.String getMessage()>();

        if $r14 == null goto label07;

        $r15 = virtualinvoke $r13.<java.io.IOException: java.lang.String getMessage()>();

        $z3 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>("parseHeader");

        if $z3 != 0 goto label06;

        $r17 = virtualinvoke $r13.<java.io.IOException: java.lang.String getMessage()>();

        $z4 = virtualinvoke $r17.<java.lang.String: boolean startsWith(java.lang.String)>("parseTrailer");

        if $z4 == 0 goto label07;

     label06:
        $r16 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.Object)>($r13);

        goto label08;

     label07:
        throw $r13;

     label08:
        i1 = i1 + 1;

        goto label02;

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.Throwable: void printStackTrace()>();

     label11:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label09 with label10;
    }
}
