public class ucar.nc2.dataset.conv.AvhrrConvention extends ucar.nc2.dataset.CoordSysBuilder
{
    static final boolean $assertionsDisabled;

    public static boolean isMine(ucar.nc2.NetcdfFile)
    {
        ucar.nc2.Variable $r3, $r4;
        ucar.nc2.NetcdfFile r0;
        java.lang.String $r1;
        ucar.nc2.Group $r2, $r5;
        boolean $z0;

        r0 := @parameter0: ucar.nc2.NetcdfFile;

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.lang.String getFileTypeId()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("HDF5");

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group findGroup(java.lang.String)>("VHRR/Geo-Location");

        if null != $r2 goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke $r2.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>("Latitude");

        if null != $r3 goto label3;

        return 0;

     label3:
        $r4 = virtualinvoke $r2.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>("Longitude");

        if null != $r4 goto label4;

        return 0;

     label4:
        $r5 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group findGroup(java.lang.String)>("VHRR/Image Data");

        if null != $r5 goto label5;

        return 0;

     label5:
        return 1;
    }

    public void <init>()
    {
        ucar.nc2.dataset.conv.AvhrrConvention r0;

        r0 := @this: ucar.nc2.dataset.conv.AvhrrConvention;

        specialinvoke r0.<ucar.nc2.dataset.CoordSysBuilder: void <init>()>();

        r0.<ucar.nc2.dataset.conv.AvhrrConvention: java.lang.String conventionName> = "AvhrrSatellite";

        return;
    }

    public void augmentDataset(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        ucar.ma2.ArrayLong$D0 $r42;
        ucar.nc2.util.CancelTask r51;
        ucar.nc2.constants.AxisType $r9, $r14, $r37;
        ucar.nc2.constants.FeatureType $r2;
        ucar.nc2.Group $r4, $r5, $r19, $r22;
        ucar.nc2.Attribute $r1, $r7, $r8, $r12, $r13, $r23, $r25, $r36, $r39, $r45;
        java.lang.StringBuilder $r29, $r30, $r31;
        java.text.SimpleDateFormat $r27;
        long $l2, $l3;
        java.lang.AssertionError $r46;
        java.lang.String $r3, $r10, $r15, $r24, $r26, $r32, $r38, $r41, $r49;
        java.io.IOException $r48;
        ucar.nc2.Dimension $r17, $r18;
        ucar.nc2.dataset.NetcdfDataset r0;
        java.util.Date $r33;
        int[] $r16, $r44;
        java.text.ParseException $r47;
        boolean $z0, $z1;
        ucar.nc2.dataset.VariableDS $r34;
        java.util.TimeZone $r28;
        ucar.ma2.DataType $r35;
        ucar.nc2.dataset.conv.AvhrrConvention r50;
        java.util.List $r20;
        ucar.nc2.units.DateFormatter $r40;
        int $i0, $i1, $i4, $i5, $i6, $i7, $i8, $i9;
        ucar.nc2.Variable $r6, $r11, r52;
        java.util.Iterator $r21;
        java.lang.Object $r43;

        r50 := @this: ucar.nc2.dataset.conv.AvhrrConvention;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r51 := @parameter1: ucar.nc2.util.CancelTask;

        $r1 = new ucar.nc2.Attribute;

        $r2 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType IMAGE>;

        $r3 = virtualinvoke $r2.<ucar.nc2.constants.FeatureType: java.lang.String toString()>();

        specialinvoke $r1.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("FeatureType", $r3);

        virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r1);

        $r4 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group findGroup(java.lang.String)>("VHRR");

        $r5 = virtualinvoke $r4.<ucar.nc2.Group: ucar.nc2.Group findGroup(java.lang.String)>("Geo-Location");

        $r6 = virtualinvoke $r5.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>("Latitude");

        $r7 = new ucar.nc2.Attribute;

        specialinvoke $r7.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "degrees_north");

        virtualinvoke $r6.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r7);

        $r8 = new ucar.nc2.Attribute;

        $r9 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lat>;

        $r10 = virtualinvoke $r9.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r8.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r10);

        virtualinvoke $r6.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r8);

        $r11 = virtualinvoke $r5.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>("Longitude");

        $r12 = new ucar.nc2.Attribute;

        specialinvoke $r12.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "degrees_east");

        virtualinvoke $r11.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r12);

        $r13 = new ucar.nc2.Attribute;

        $r14 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lon>;

        $r15 = virtualinvoke $r14.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r13.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r15);

        virtualinvoke $r11.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r13);

        $r16 = virtualinvoke $r6.<ucar.nc2.Variable: int[] getShape()>();

        $z0 = <ucar.nc2.dataset.conv.AvhrrConvention: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i9 = lengthof $r16;

        if $i9 == 2 goto label1;

        $r46 = new java.lang.AssertionError;

        specialinvoke $r46.<java.lang.AssertionError: void <init>()>();

        throw $r46;

     label1:
        $r17 = new ucar.nc2.Dimension;

        $i0 = $r16[0];

        specialinvoke $r17.<ucar.nc2.Dimension: void <init>(java.lang.String,int)>("scan", $i0);

        $r18 = new ucar.nc2.Dimension;

        $i1 = $r16[1];

        specialinvoke $r18.<ucar.nc2.Dimension: void <init>(java.lang.String,int)>("xscan", $i1);

        virtualinvoke $r4.<ucar.nc2.Group: void addDimension(ucar.nc2.Dimension)>($r17);

        virtualinvoke $r4.<ucar.nc2.Group: void addDimension(ucar.nc2.Dimension)>($r18);

        virtualinvoke $r6.<ucar.nc2.Variable: void setDimensions(java.lang.String)>("scan xscan");

        virtualinvoke $r11.<ucar.nc2.Variable: void setDimensions(java.lang.String)>("scan xscan");

        $r19 = virtualinvoke $r4.<ucar.nc2.Group: ucar.nc2.Group findGroup(java.lang.String)>("Image Data");

        $r20 = virtualinvoke $r19.<ucar.nc2.Group: java.util.List getVariables()>();

        $r21 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r43 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r52 = (ucar.nc2.Variable) $r43;

        $r44 = virtualinvoke r52.<ucar.nc2.Variable: int[] getShape()>();

        $i4 = lengthof $r44;

        if $i4 != 2 goto label3;

        $i6 = $r44[0];

        $i5 = $r16[0];

        if $i6 != $i5 goto label3;

        $i8 = $r44[1];

        $i7 = $r16[1];

        if $i8 != $i7 goto label3;

        virtualinvoke r52.<ucar.nc2.Variable: void setDimensions(java.lang.String)>("scan xscan");

        $r45 = new ucar.nc2.Attribute;

        specialinvoke $r45.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxes", "lat lon time");

        virtualinvoke r52.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r45);

     label3:
        goto label2;

     label4:
        $r22 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group findGroup(java.lang.String)>("PRODUCT_METADATA/PRODUCT_DETAILS");

        $r23 = virtualinvoke $r22.<ucar.nc2.Group: ucar.nc2.Attribute findAttribute(java.lang.String)>("ACQUISITION_DATE");

        $r24 = virtualinvoke $r23.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $r25 = virtualinvoke $r22.<ucar.nc2.Group: ucar.nc2.Attribute findAttribute(java.lang.String)>("ACQUISITION_TIME_IN_GMT");

        $r26 = virtualinvoke $r25.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $r27 = new java.text.SimpleDateFormat;

        specialinvoke $r27.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("ddMMMyyyyHHmm");

        $r28 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke $r27.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r28);

     label5:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = virtualinvoke $r27.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r32);

        $r34 = new ucar.nc2.dataset.VariableDS;

        $r35 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        specialinvoke $r34.<ucar.nc2.dataset.VariableDS: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String,ucar.ma2.DataType,java.lang.String,java.lang.String,java.lang.String)>(r0, $r4, null, "time", $r35, "", "seconds since 1970-01-01 00:00", "time generated from PRODUCT_METADATA/PRODUCT_DETAILS");

        $r36 = new ucar.nc2.Attribute;

        $r37 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Time>;

        $r38 = virtualinvoke $r37.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r36.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r38);

        virtualinvoke $r34.<ucar.nc2.dataset.VariableDS: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r36);

        $r39 = new ucar.nc2.Attribute;

        $r40 = new ucar.nc2.units.DateFormatter;

        specialinvoke $r40.<ucar.nc2.units.DateFormatter: void <init>()>();

        $r41 = virtualinvoke $r40.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r33);

        specialinvoke $r39.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("IsoDate", $r41);

        virtualinvoke $r34.<ucar.nc2.dataset.VariableDS: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r39);

        virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>($r4, $r34);

        $r42 = new ucar.ma2.ArrayLong$D0;

        specialinvoke $r42.<ucar.ma2.ArrayLong$D0: void <init>()>();

        $l2 = virtualinvoke $r33.<java.util.Date: long getTime()>();

        $l3 = $l2 / 1000L;

        virtualinvoke $r42.<ucar.ma2.ArrayLong$D0: void set(long)>($l3);

        virtualinvoke $r34.<ucar.nc2.dataset.VariableDS: void setCachedData(ucar.ma2.Array,boolean)>($r42, 1);

     label6:
        goto label8;

     label7:
        $r47 := @caughtexception;

        virtualinvoke $r47.<java.text.ParseException: void printStackTrace()>();

        $r48 = new java.io.IOException;

        $r49 = virtualinvoke $r47.<java.text.ParseException: java.lang.String getMessage()>();

        specialinvoke $r48.<java.io.IOException: void <init>(java.lang.String)>($r49);

        throw $r48;

     label8:
        virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: void finish()>();

        return;

        catch java.text.ParseException from label5 to label6 with label7;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/dataset/conv/AvhrrConvention;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.dataset.conv.AvhrrConvention: boolean $assertionsDisabled> = $z1;

        return;
    }
}
