public class net.oauth.SimpleOAuthValidator extends java.lang.Object implements net.oauth.OAuthValidator
{
    public static final long DEFAULT_MAX_TIMESTAMP_AGE;
    public static final long DEFAULT_TIMESTAMP_WINDOW;
    public static final java.util.Set SINGLE_PARAMETERS;
    protected final double minVersion;
    protected final double maxVersion;
    protected final long maxTimestampAgeMsec;
    private final java.util.Set usedNonces;

    private static java.util.Set constructSingleParameters()
    {
        java.util.HashSet $r0;
        int i0, i1;
        java.util.Set $r2;
        java.lang.String[] $r1;
        java.lang.String r3;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r1 = newarray (java.lang.String)[9];

        $r1[0] = "oauth_consumer_key";

        $r1[1] = "oauth_token";

        $r1[2] = "oauth_token_secret";

        $r1[3] = "oauth_callback";

        $r1[4] = "oauth_signature_method";

        $r1[5] = "oauth_signature";

        $r1[6] = "oauth_timestamp";

        $r1[7] = "oauth_nonce";

        $r1[8] = "oauth_version";

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = $r1[i1];

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0);

        return $r2;
    }

    public void <init>()
    {
        net.oauth.SimpleOAuthValidator r0;
        double $d0;

        r0 := @this: net.oauth.SimpleOAuthValidator;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>("1.0");

        specialinvoke r0.<net.oauth.SimpleOAuthValidator: void <init>(long,double)>(300000L, $d0);

        return;
    }

    public void <init>(long, double)
    {
        net.oauth.SimpleOAuthValidator r0;
        long l0;
        java.util.TreeSet $r1;
        double d0;

        r0 := @this: net.oauth.SimpleOAuthValidator;

        l0 := @parameter0: long;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.oauth.SimpleOAuthValidator: double minVersion> = 1.0;

        r0.<net.oauth.SimpleOAuthValidator: double minVersion> = 1.0;

        $r1 = new java.util.TreeSet;

        specialinvoke $r1.<java.util.TreeSet: void <init>()>();

        r0.<net.oauth.SimpleOAuthValidator: java.util.Set usedNonces> = $r1;

        r0.<net.oauth.SimpleOAuthValidator: long maxTimestampAgeMsec> = l0;

        r0.<net.oauth.SimpleOAuthValidator: double maxVersion> = d0;

        return;
    }

    public java.util.Date releaseGarbage()
    {
        net.oauth.SimpleOAuthValidator r0;
        long $l0;
        java.util.Date $r1;

        r0 := @this: net.oauth.SimpleOAuthValidator;

        $l0 = virtualinvoke r0.<net.oauth.SimpleOAuthValidator: long currentTimeMsec()>();

        $r1 = specialinvoke r0.<net.oauth.SimpleOAuthValidator: java.util.Date removeOldNonces(long)>($l0);

        return $r1;
    }

    private java.util.Date removeOldNonces(long)
    {
        java.lang.Throwable $r9;
        java.util.Date $r6;
        long l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9;
        java.lang.String[] $r2;
        net.oauth.SimpleOAuthValidator$UsedNonce $r0, r8, r10;
        int $i10;
        boolean $z0;
        net.oauth.SimpleOAuthValidator r1;
        java.util.Iterator $r5;
        java.util.Set $r3, $r4;
        java.lang.Object $r7;

        r1 := @this: net.oauth.SimpleOAuthValidator;

        l0 := @parameter0: long;

        r10 = null;

        $r0 = new net.oauth.SimpleOAuthValidator$UsedNonce;

        $l1 = r1.<net.oauth.SimpleOAuthValidator: long maxTimestampAgeMsec>;

        $l2 = l0 - $l1;

        $l3 = $l2 + 500L;

        $l4 = $l3 / 1000L;

        $r2 = newarray (java.lang.String)[0];

        specialinvoke $r0.<net.oauth.SimpleOAuthValidator$UsedNonce: void <init>(long,java.lang.String[])>($l4, $r2);

        $r3 = r1.<net.oauth.SimpleOAuthValidator: java.util.Set usedNonces>;

        entermonitor $r3;

     label1:
        $r4 = r1.<net.oauth.SimpleOAuthValidator: java.util.Set usedNonces>;

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.oauth.SimpleOAuthValidator$UsedNonce) $r7;

        $i10 = virtualinvoke $r0.<net.oauth.SimpleOAuthValidator$UsedNonce: int compareTo(net.oauth.SimpleOAuthValidator$UsedNonce)>(r8);

        if $i10 > 0 goto label3;

        r10 = r8;

        goto label4;

     label3:
        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        goto label2;

     label4:
        exitmonitor $r3;

     label5:
        goto label8;

     label6:
        $r9 := @caughtexception;

        exitmonitor $r3;

     label7:
        throw $r9;

     label8:
        if r10 != null goto label9;

        return null;

     label9:
        $r6 = new java.util.Date;

        $l5 = virtualinvoke r10.<net.oauth.SimpleOAuthValidator$UsedNonce: long getTimestamp()>();

        $l7 = $l5 * 1000L;

        $l6 = r1.<net.oauth.SimpleOAuthValidator: long maxTimestampAgeMsec>;

        $l8 = $l7 + $l6;

        $l9 = $l8 + 500L;

        specialinvoke $r6.<java.util.Date: void <init>(long)>($l9);

        return $r6;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void validateMessage(net.oauth.OAuthMessage, net.oauth.OAuthAccessor) throws net.oauth.OAuthException, java.io.IOException, java.net.URISyntaxException
    {
        net.oauth.SimpleOAuthValidator r0;
        net.oauth.OAuthAccessor r2;
        net.oauth.OAuthMessage r1;

        r0 := @this: net.oauth.SimpleOAuthValidator;

        r1 := @parameter0: net.oauth.OAuthMessage;

        r2 := @parameter1: net.oauth.OAuthAccessor;

        virtualinvoke r0.<net.oauth.SimpleOAuthValidator: void checkSingleParameters(net.oauth.OAuthMessage)>(r1);

        virtualinvoke r0.<net.oauth.SimpleOAuthValidator: void validateVersion(net.oauth.OAuthMessage)>(r1);

        virtualinvoke r0.<net.oauth.SimpleOAuthValidator: void validateTimestampAndNonce(net.oauth.OAuthMessage)>(r1);

        virtualinvoke r0.<net.oauth.SimpleOAuthValidator: void validateSignature(net.oauth.OAuthMessage,net.oauth.OAuthAccessor)>(r1, r2);

        return;
    }

    protected void checkSingleParameters(net.oauth.OAuthMessage) throws java.io.IOException, net.oauth.OAuthException
    {
        net.oauth.OAuth$Parameter $r16;
        boolean $z0, $z1, $z2, $z3, z4;
        net.oauth.SimpleOAuthValidator r23;
        java.util.Collection r12, r26;
        java.util.Set $r5, $r19;
        java.util.List $r2;
        java.util.HashMap $r0;
        net.oauth.OAuthProblemException $r7;
        java.util.ArrayList $r4, $r22;
        int $i0;
        java.lang.String $r8, r15, r25, r28;
        java.util.Map$Entry r24, r27;
        java.util.Iterator $r3, $r6, $r13;
        net.oauth.OAuthMessage r1;
        java.lang.Object $r9, $r10, $r11, $r14, $r17, $r18, $r20, $r21;

        r23 := @this: net.oauth.SimpleOAuthValidator;

        r1 := @parameter0: net.oauth.OAuthMessage;

        z4 = 0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke r1.<net.oauth.OAuthMessage: java.util.List getParameters()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r17 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.util.Map$Entry) $r17;

        $r18 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getKey()>();

        r25 = (java.lang.String) $r18;

        $r19 = <net.oauth.SimpleOAuthValidator: java.util.Set SINGLE_PARAMETERS>;

        $z3 = interfaceinvoke $r19.<java.util.Set: boolean contains(java.lang.Object)>(r25);

        if $z3 == 0 goto label04;

        $r20 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r25);

        r26 = (java.util.Collection) $r20;

        if r26 != null goto label02;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        r26 = $r22;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, $r22);

        goto label03;

     label02:
        z4 = 1;

     label03:
        $r21 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r26.<java.util.Collection: boolean add(java.lang.Object)>($r21);

     label04:
        goto label01;

     label05:
        if z4 == 0 goto label10;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r9 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r27 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>();

        r28 = (java.lang.String) $r10;

        $r11 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>();

        r12 = (java.util.Collection) $r11;

        $i0 = interfaceinvoke r12.<java.util.Collection: int size()>();

        if $i0 <= 1 goto label08;

        $r13 = interfaceinvoke r12.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label08;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.String) $r14;

        $r16 = new net.oauth.OAuth$Parameter;

        specialinvoke $r16.<net.oauth.OAuth$Parameter: void <init>(java.lang.String,java.lang.String)>(r28, r15);

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>($r16);

        goto label07;

     label08:
        goto label06;

     label09:
        $r7 = new net.oauth.OAuthProblemException;

        specialinvoke $r7.<net.oauth.OAuthProblemException: void <init>(java.lang.String)>("parameter_rejected");

        $r8 = staticinvoke <net.oauth.OAuth: java.lang.String formEncode(java.lang.Iterable)>($r4);

        virtualinvoke $r7.<net.oauth.OAuthProblemException: void setParameter(java.lang.String,java.lang.Object)>("oauth_parameters_rejected", $r8);

        throw $r7;

     label10:
        return;
    }

    protected void validateVersion(net.oauth.OAuthMessage) throws net.oauth.OAuthException, java.io.IOException
    {
        net.oauth.SimpleOAuthValidator r5;
        net.oauth.OAuthProblemException $r8;
        byte $b0, $b1;
        net.oauth.OAuthMessage r0;
        int $i2, $i3;
        java.lang.StringBuilder $r4, $r6, $r9;
        java.lang.String $r1, $r7;
        double $d0, $d1, $d2;

        r5 := @this: net.oauth.SimpleOAuthValidator;

        r0 := @parameter0: net.oauth.OAuthMessage;

        $r1 = virtualinvoke r0.<net.oauth.OAuthMessage: java.lang.String getParameter(java.lang.String)>("oauth_version");

        if $r1 == null goto label2;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r1);

        $b0 = $d0 cmpg 1.0;

        $i2 = (int) $b0;

        if $i2 < 0 goto label1;

        $d2 = r5.<net.oauth.SimpleOAuthValidator: double maxVersion>;

        $b1 = $d2 cmpg $d0;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label2;

     label1:
        $r8 = new net.oauth.OAuthProblemException;

        specialinvoke $r8.<net.oauth.OAuthProblemException: void <init>(java.lang.String)>("version_rejected");

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("1.0-");

        $d1 = r5.<net.oauth.SimpleOAuthValidator: double maxVersion>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<net.oauth.OAuthProblemException: void setParameter(java.lang.String,java.lang.Object)>("oauth_acceptable_versions", $r7);

        throw $r8;

     label2:
        return;
    }

    protected void validateTimestampAndNonce(net.oauth.OAuthMessage) throws java.io.IOException, net.oauth.OAuthProblemException
    {
        net.oauth.SimpleOAuthValidator r3;
        net.oauth.OAuthMessage r0;
        java.lang.String[] $r1;
        long $l0, $l1;
        java.lang.String $r2;

        r3 := @this: net.oauth.SimpleOAuthValidator;

        r0 := @parameter0: net.oauth.OAuthMessage;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "oauth_timestamp";

        $r1[1] = "oauth_nonce";

        virtualinvoke r0.<net.oauth.OAuthMessage: void requireParameters(java.lang.String[])>($r1);

        $r2 = virtualinvoke r0.<net.oauth.OAuthMessage: java.lang.String getParameter(java.lang.String)>("oauth_timestamp");

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

        $l1 = virtualinvoke r3.<net.oauth.SimpleOAuthValidator: long currentTimeMsec()>();

        virtualinvoke r3.<net.oauth.SimpleOAuthValidator: void validateTimestamp(net.oauth.OAuthMessage,long,long)>(r0, $l0, $l1);

        virtualinvoke r3.<net.oauth.SimpleOAuthValidator: java.util.Date validateNonce(net.oauth.OAuthMessage,long,long)>(r0, $l0, $l1);

        return;
    }

    protected void validateTimestamp(net.oauth.OAuthMessage, long, long) throws java.io.IOException, net.oauth.OAuthProblemException
    {
        long l0, $l1, $l2, $l3, l4, $l5, $l6, $l7, l8, l9;
        net.oauth.OAuthProblemException $r8;
        byte $b10, $b11;
        int $i12, $i13;
        java.lang.String $r6;
        net.oauth.SimpleOAuthValidator r0;
        net.oauth.OAuthMessage r7;
        java.lang.StringBuilder $r3, $r4, $r5, $r9;

        r0 := @this: net.oauth.SimpleOAuthValidator;

        r7 := @parameter0: net.oauth.OAuthMessage;

        l9 := @parameter1: long;

        l0 := @parameter2: long;

        $l1 = r0.<net.oauth.SimpleOAuthValidator: long maxTimestampAgeMsec>;

        $l2 = l0 - $l1;

        $l3 = $l2 + 500L;

        l4 = $l3 / 1000L;

        $l5 = r0.<net.oauth.SimpleOAuthValidator: long maxTimestampAgeMsec>;

        $l6 = l0 + $l5;

        $l7 = $l6 + 500L;

        l8 = $l7 / 1000L;

        $b10 = l9 cmp l4;

        $i12 = (int) $b10;

        if $i12 < 0 goto label1;

        $b11 = l8 cmp l9;

        $i13 = (int) $b11;

        if $i13 >= 0 goto label2;

     label1:
        $r8 = new net.oauth.OAuthProblemException;

        specialinvoke $r8.<net.oauth.OAuthProblemException: void <init>(java.lang.String)>("timestamp_refused");

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l8);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<net.oauth.OAuthProblemException: void setParameter(java.lang.String,java.lang.Object)>("oauth_acceptable_timestamps", $r6);

        throw $r8;

     label2:
        return;
    }

    protected java.util.Date validateNonce(net.oauth.OAuthMessage, long, long) throws java.io.IOException, net.oauth.OAuthProblemException
    {
        java.lang.Throwable $r11;
        net.oauth.SimpleOAuthValidator r6;
        java.util.Date $r9;
        java.util.Set $r7, $r8;
        long l0, l1;
        java.lang.String[] $r1;
        net.oauth.OAuthProblemException $r10;
        net.oauth.SimpleOAuthValidator$UsedNonce $r0;
        net.oauth.OAuthMessage r2;
        java.lang.String $r3, $r4, $r5;
        boolean $z0;

        r6 := @this: net.oauth.SimpleOAuthValidator;

        r2 := @parameter0: net.oauth.OAuthMessage;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r0 = new net.oauth.SimpleOAuthValidator$UsedNonce;

        $r1 = newarray (java.lang.String)[3];

        $r3 = virtualinvoke r2.<net.oauth.OAuthMessage: java.lang.String getParameter(java.lang.String)>("oauth_nonce");

        $r1[0] = $r3;

        $r4 = virtualinvoke r2.<net.oauth.OAuthMessage: java.lang.String getConsumerKey()>();

        $r1[1] = $r4;

        $r5 = virtualinvoke r2.<net.oauth.OAuthMessage: java.lang.String getToken()>();

        $r1[2] = $r5;

        specialinvoke $r0.<net.oauth.SimpleOAuthValidator$UsedNonce: void <init>(long,java.lang.String[])>(l0, $r1);

        $r7 = r6.<net.oauth.SimpleOAuthValidator: java.util.Set usedNonces>;

        entermonitor $r7;

     label1:
        $r8 = r6.<net.oauth.SimpleOAuthValidator: java.util.Set usedNonces>;

        $z0 = interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r0);

        exitmonitor $r7;

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        exitmonitor $r7;

     label4:
        throw $r11;

     label5:
        if $z0 != 0 goto label6;

        $r10 = new net.oauth.OAuthProblemException;

        specialinvoke $r10.<net.oauth.OAuthProblemException: void <init>(java.lang.String)>("nonce_used");

        throw $r10;

     label6:
        $r9 = specialinvoke r6.<net.oauth.SimpleOAuthValidator: java.util.Date removeOldNonces(long)>(l1);

        return $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void validateSignature(net.oauth.OAuthMessage, net.oauth.OAuthAccessor) throws net.oauth.OAuthException, java.io.IOException, java.net.URISyntaxException
    {
        net.oauth.SimpleOAuthValidator r4;
        net.oauth.OAuthAccessor r2;
        net.oauth.OAuthMessage r0;
        java.lang.String[] $r1;
        net.oauth.signature.OAuthSignatureMethod $r3;

        r4 := @this: net.oauth.SimpleOAuthValidator;

        r0 := @parameter0: net.oauth.OAuthMessage;

        r2 := @parameter1: net.oauth.OAuthAccessor;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "oauth_consumer_key";

        $r1[1] = "oauth_signature_method";

        $r1[2] = "oauth_signature";

        virtualinvoke r0.<net.oauth.OAuthMessage: void requireParameters(java.lang.String[])>($r1);

        $r3 = staticinvoke <net.oauth.signature.OAuthSignatureMethod: net.oauth.signature.OAuthSignatureMethod newSigner(net.oauth.OAuthMessage,net.oauth.OAuthAccessor)>(r0, r2);

        virtualinvoke $r3.<net.oauth.signature.OAuthSignatureMethod: void validate(net.oauth.OAuthMessage)>(r0);

        return;
    }

    protected long currentTimeMsec()
    {
        net.oauth.SimpleOAuthValidator r0;
        long $l0;

        r0 := @this: net.oauth.SimpleOAuthValidator;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        return $l0;
    }

    static void <clinit>()
    {
        java.util.Set $r0;

        <net.oauth.SimpleOAuthValidator: long DEFAULT_TIMESTAMP_WINDOW> = 300000L;

        <net.oauth.SimpleOAuthValidator: long DEFAULT_MAX_TIMESTAMP_AGE> = 300000L;

        $r0 = staticinvoke <net.oauth.SimpleOAuthValidator: java.util.Set constructSingleParameters()>();

        <net.oauth.SimpleOAuthValidator: java.util.Set SINGLE_PARAMETERS> = $r0;

        return;
    }
}
