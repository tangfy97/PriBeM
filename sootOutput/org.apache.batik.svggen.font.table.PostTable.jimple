public class org.apache.batik.svggen.font.table.PostTable extends java.lang.Object implements org.apache.batik.svggen.font.table.Table
{
    private static final java.lang.String[] macGlyphName;
    private int version;
    private int italicAngle;
    private short underlinePosition;
    private short underlineThickness;
    private int isFixedPitch;
    private int minMemType42;
    private int maxMemType42;
    private int minMemType1;
    private int maxMemType1;
    private int numGlyphs;
    private int[] glyphNameIndex;
    private java.lang.String[] psGlyphName;

    protected void <init>(org.apache.batik.svggen.font.table.DirectoryEntry, java.io.RandomAccessFile) throws java.io.IOException
    {
        java.io.RandomAccessFile r1;
        byte[] r6;
        long $l1;
        java.lang.String[] $r5, $r8;
        org.apache.batik.svggen.font.table.PostTable r0;
        short $s4, $s5;
        int[] $r3, $r4;
        int $i0, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21;
        java.lang.String $r7;
        org.apache.batik.svggen.font.table.DirectoryEntry r2;

        r0 := @this: org.apache.batik.svggen.font.table.PostTable;

        r2 := @parameter0: org.apache.batik.svggen.font.table.DirectoryEntry;

        r1 := @parameter1: java.io.RandomAccessFile;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r2.<org.apache.batik.svggen.font.table.DirectoryEntry: int getOffset()>();

        $l1 = (long) $i0;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>($l1);

        $i2 = virtualinvoke r1.<java.io.RandomAccessFile: int readInt()>();

        r0.<org.apache.batik.svggen.font.table.PostTable: int version> = $i2;

        $i3 = virtualinvoke r1.<java.io.RandomAccessFile: int readInt()>();

        r0.<org.apache.batik.svggen.font.table.PostTable: int italicAngle> = $i3;

        $s4 = virtualinvoke r1.<java.io.RandomAccessFile: short readShort()>();

        r0.<org.apache.batik.svggen.font.table.PostTable: short underlinePosition> = $s4;

        $s5 = virtualinvoke r1.<java.io.RandomAccessFile: short readShort()>();

        r0.<org.apache.batik.svggen.font.table.PostTable: short underlineThickness> = $s5;

        $i6 = virtualinvoke r1.<java.io.RandomAccessFile: int readInt()>();

        r0.<org.apache.batik.svggen.font.table.PostTable: int isFixedPitch> = $i6;

        $i7 = virtualinvoke r1.<java.io.RandomAccessFile: int readInt()>();

        r0.<org.apache.batik.svggen.font.table.PostTable: int minMemType42> = $i7;

        $i8 = virtualinvoke r1.<java.io.RandomAccessFile: int readInt()>();

        r0.<org.apache.batik.svggen.font.table.PostTable: int maxMemType42> = $i8;

        $i9 = virtualinvoke r1.<java.io.RandomAccessFile: int readInt()>();

        r0.<org.apache.batik.svggen.font.table.PostTable: int minMemType1> = $i9;

        $i10 = virtualinvoke r1.<java.io.RandomAccessFile: int readInt()>();

        r0.<org.apache.batik.svggen.font.table.PostTable: int maxMemType1> = $i10;

        $i11 = r0.<org.apache.batik.svggen.font.table.PostTable: int version>;

        if $i11 != 131072 goto label6;

        $i13 = virtualinvoke r1.<java.io.RandomAccessFile: int readUnsignedShort()>();

        r0.<org.apache.batik.svggen.font.table.PostTable: int numGlyphs> = $i13;

        $i14 = r0.<org.apache.batik.svggen.font.table.PostTable: int numGlyphs>;

        $r3 = newarray (int)[$i14];

        r0.<org.apache.batik.svggen.font.table.PostTable: int[] glyphNameIndex> = $r3;

        i19 = 0;

        goto label2;

     label1:
        $r4 = r0.<org.apache.batik.svggen.font.table.PostTable: int[] glyphNameIndex>;

        $i16 = virtualinvoke r1.<java.io.RandomAccessFile: int readUnsignedShort()>();

        $r4[i19] = $i16;

        i19 = i19 + 1;

     label2:
        $i15 = r0.<org.apache.batik.svggen.font.table.PostTable: int numGlyphs>;

        if i19 < $i15 goto label1;

        $i17 = specialinvoke r0.<org.apache.batik.svggen.font.table.PostTable: int highestGlyphNameIndex()>();

        if $i17 <= 257 goto label5;

        i20 = $i17 - 257;

        $r5 = newarray (java.lang.String)[i20];

        r0.<org.apache.batik.svggen.font.table.PostTable: java.lang.String[] psGlyphName> = $r5;

        i21 = 0;

        goto label4;

     label3:
        $i18 = virtualinvoke r1.<java.io.RandomAccessFile: int readUnsignedByte()>();

        r6 = newarray (byte)[$i18];

        virtualinvoke r1.<java.io.RandomAccessFile: void readFully(byte[])>(r6);

        $r8 = r0.<org.apache.batik.svggen.font.table.PostTable: java.lang.String[] psGlyphName>;

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(byte[])>(r6);

        $r8[i21] = $r7;

        i21 = i21 + 1;

     label4:
        if i21 < i20 goto label3;

     label5:
        goto label7;

     label6:
        $i12 = r0.<org.apache.batik.svggen.font.table.PostTable: int version>;

        if $i12 != 131077 goto label7;

     label7:
        return;
    }

    private int highestGlyphNameIndex()
    {
        org.apache.batik.svggen.font.table.PostTable r0;
        int[] $r1, $r2;
        int $i0, i1, i2, $i3;

        r0 := @this: org.apache.batik.svggen.font.table.PostTable;

        i1 = 0;

        i2 = 0;

        goto label3;

     label1:
        $r1 = r0.<org.apache.batik.svggen.font.table.PostTable: int[] glyphNameIndex>;

        $i0 = $r1[i2];

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.apache.batik.svggen.font.table.PostTable: int[] glyphNameIndex>;

        i1 = $r2[i2];

     label2:
        i2 = i2 + 1;

     label3:
        $i3 = r0.<org.apache.batik.svggen.font.table.PostTable: int numGlyphs>;

        if i2 < $i3 goto label1;

        return i1;
    }

    public java.lang.String getGlyphName(int)
    {
        java.lang.String[] $r3, $r5;
        org.apache.batik.svggen.font.table.PostTable r0;
        int[] $r1, $r2, $r4;
        int $i0, i1, $i2, $i3, $i4, $i5;
        java.lang.String $r6;

        r0 := @this: org.apache.batik.svggen.font.table.PostTable;

        i1 := @parameter0: int;

        $i0 = r0.<org.apache.batik.svggen.font.table.PostTable: int version>;

        if $i0 != 131072 goto label3;

        $r1 = r0.<org.apache.batik.svggen.font.table.PostTable: int[] glyphNameIndex>;

        $i2 = $r1[i1];

        if $i2 <= 257 goto label1;

        $r5 = r0.<org.apache.batik.svggen.font.table.PostTable: java.lang.String[] psGlyphName>;

        $r4 = r0.<org.apache.batik.svggen.font.table.PostTable: int[] glyphNameIndex>;

        $i4 = $r4[i1];

        $i5 = $i4 - 258;

        $r6 = $r5[$i5];

        goto label2;

     label1:
        $r3 = <org.apache.batik.svggen.font.table.PostTable: java.lang.String[] macGlyphName>;

        $r2 = r0.<org.apache.batik.svggen.font.table.PostTable: int[] glyphNameIndex>;

        $i3 = $r2[i1];

        $r6 = $r3[$i3];

     label2:
        return $r6;

     label3:
        return null;
    }

    public int getType()
    {
        org.apache.batik.svggen.font.table.PostTable r0;

        r0 := @this: org.apache.batik.svggen.font.table.PostTable;

        return 1886352244;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[258];

        $r0[0] = ".notdef";

        $r0[1] = "null";

        $r0[2] = "CR";

        $r0[3] = "space";

        $r0[4] = "exclam";

        $r0[5] = "quotedbl";

        $r0[6] = "numbersign";

        $r0[7] = "dollar";

        $r0[8] = "percent";

        $r0[9] = "ampersand";

        $r0[10] = "quotesingle";

        $r0[11] = "parenleft";

        $r0[12] = "parenright";

        $r0[13] = "asterisk";

        $r0[14] = "plus";

        $r0[15] = "comma";

        $r0[16] = "hyphen";

        $r0[17] = "period";

        $r0[18] = "slash";

        $r0[19] = "zero";

        $r0[20] = "one";

        $r0[21] = "two";

        $r0[22] = "three";

        $r0[23] = "four";

        $r0[24] = "five";

        $r0[25] = "six";

        $r0[26] = "seven";

        $r0[27] = "eight";

        $r0[28] = "nine";

        $r0[29] = "colon";

        $r0[30] = "semicolon";

        $r0[31] = "less";

        $r0[32] = "equal";

        $r0[33] = "greater";

        $r0[34] = "question";

        $r0[35] = "at";

        $r0[36] = "A";

        $r0[37] = "B";

        $r0[38] = "C";

        $r0[39] = "D";

        $r0[40] = "E";

        $r0[41] = "F";

        $r0[42] = "G";

        $r0[43] = "H";

        $r0[44] = "I";

        $r0[45] = "J";

        $r0[46] = "K";

        $r0[47] = "L";

        $r0[48] = "M";

        $r0[49] = "N";

        $r0[50] = "O";

        $r0[51] = "P";

        $r0[52] = "Q";

        $r0[53] = "R";

        $r0[54] = "S";

        $r0[55] = "T";

        $r0[56] = "U";

        $r0[57] = "V";

        $r0[58] = "W";

        $r0[59] = "X";

        $r0[60] = "Y";

        $r0[61] = "Z";

        $r0[62] = "bracketleft";

        $r0[63] = "backslash";

        $r0[64] = "bracketright";

        $r0[65] = "asciicircum";

        $r0[66] = "underscore";

        $r0[67] = "grave";

        $r0[68] = "a";

        $r0[69] = "b";

        $r0[70] = "c";

        $r0[71] = "d";

        $r0[72] = "e";

        $r0[73] = "f";

        $r0[74] = "g";

        $r0[75] = "h";

        $r0[76] = "i";

        $r0[77] = "j";

        $r0[78] = "k";

        $r0[79] = "l";

        $r0[80] = "m";

        $r0[81] = "n";

        $r0[82] = "o";

        $r0[83] = "p";

        $r0[84] = "q";

        $r0[85] = "r";

        $r0[86] = "s";

        $r0[87] = "t";

        $r0[88] = "u";

        $r0[89] = "v";

        $r0[90] = "w";

        $r0[91] = "x";

        $r0[92] = "y";

        $r0[93] = "z";

        $r0[94] = "braceleft";

        $r0[95] = "bar";

        $r0[96] = "braceright";

        $r0[97] = "asciitilde";

        $r0[98] = "Adieresis";

        $r0[99] = "Aring";

        $r0[100] = "Ccedilla";

        $r0[101] = "Eacute";

        $r0[102] = "Ntilde";

        $r0[103] = "Odieresis";

        $r0[104] = "Udieresis";

        $r0[105] = "aacute";

        $r0[106] = "agrave";

        $r0[107] = "acircumflex";

        $r0[108] = "adieresis";

        $r0[109] = "atilde";

        $r0[110] = "aring";

        $r0[111] = "ccedilla";

        $r0[112] = "eacute";

        $r0[113] = "egrave";

        $r0[114] = "ecircumflex";

        $r0[115] = "edieresis";

        $r0[116] = "iacute";

        $r0[117] = "igrave";

        $r0[118] = "icircumflex";

        $r0[119] = "idieresis";

        $r0[120] = "ntilde";

        $r0[121] = "oacute";

        $r0[122] = "ograve";

        $r0[123] = "ocircumflex";

        $r0[124] = "odieresis";

        $r0[125] = "otilde";

        $r0[126] = "uacute";

        $r0[127] = "ugrave";

        $r0[128] = "ucircumflex";

        $r0[129] = "udieresis";

        $r0[130] = "dagger";

        $r0[131] = "degree";

        $r0[132] = "cent";

        $r0[133] = "sterling";

        $r0[134] = "section";

        $r0[135] = "bullet";

        $r0[136] = "paragraph";

        $r0[137] = "germandbls";

        $r0[138] = "registered";

        $r0[139] = "copyright";

        $r0[140] = "trademark";

        $r0[141] = "acute";

        $r0[142] = "dieresis";

        $r0[143] = "notequal";

        $r0[144] = "AE";

        $r0[145] = "Oslash";

        $r0[146] = "infinity";

        $r0[147] = "plusminus";

        $r0[148] = "lessequal";

        $r0[149] = "greaterequal";

        $r0[150] = "yen";

        $r0[151] = "mu";

        $r0[152] = "partialdiff";

        $r0[153] = "summation";

        $r0[154] = "product";

        $r0[155] = "pi";

        $r0[156] = "integral\'";

        $r0[157] = "ordfeminine";

        $r0[158] = "ordmasculine";

        $r0[159] = "Omega";

        $r0[160] = "ae";

        $r0[161] = "oslash";

        $r0[162] = "questiondown";

        $r0[163] = "exclamdown";

        $r0[164] = "logicalnot";

        $r0[165] = "radical";

        $r0[166] = "florin";

        $r0[167] = "approxequal";

        $r0[168] = "increment";

        $r0[169] = "guillemotleft";

        $r0[170] = "guillemotright";

        $r0[171] = "ellipsis";

        $r0[172] = "nbspace";

        $r0[173] = "Agrave";

        $r0[174] = "Atilde";

        $r0[175] = "Otilde";

        $r0[176] = "OE";

        $r0[177] = "oe";

        $r0[178] = "endash";

        $r0[179] = "emdash";

        $r0[180] = "quotedblleft";

        $r0[181] = "quotedblright";

        $r0[182] = "quoteleft";

        $r0[183] = "quoteright";

        $r0[184] = "divide";

        $r0[185] = "lozenge";

        $r0[186] = "ydieresis";

        $r0[187] = "Ydieresis";

        $r0[188] = "fraction";

        $r0[189] = "currency";

        $r0[190] = "guilsinglleft";

        $r0[191] = "guilsinglright";

        $r0[192] = "fi";

        $r0[193] = "fl";

        $r0[194] = "daggerdbl";

        $r0[195] = "middot";

        $r0[196] = "quotesinglbase";

        $r0[197] = "quotedblbase";

        $r0[198] = "perthousand";

        $r0[199] = "Acircumflex";

        $r0[200] = "Ecircumflex";

        $r0[201] = "Aacute";

        $r0[202] = "Edieresis";

        $r0[203] = "Egrave";

        $r0[204] = "Iacute";

        $r0[205] = "Icircumflex";

        $r0[206] = "Idieresis";

        $r0[207] = "Igrave";

        $r0[208] = "Oacute";

        $r0[209] = "Ocircumflex";

        $r0[210] = "";

        $r0[211] = "Ograve";

        $r0[212] = "Uacute";

        $r0[213] = "Ucircumflex";

        $r0[214] = "Ugrave";

        $r0[215] = "dotlessi";

        $r0[216] = "circumflex";

        $r0[217] = "tilde";

        $r0[218] = "overscore";

        $r0[219] = "breve";

        $r0[220] = "dotaccent";

        $r0[221] = "ring";

        $r0[222] = "cedilla";

        $r0[223] = "hungarumlaut";

        $r0[224] = "ogonek";

        $r0[225] = "caron";

        $r0[226] = "Lslash";

        $r0[227] = "lslash";

        $r0[228] = "Scaron";

        $r0[229] = "scaron";

        $r0[230] = "Zcaron";

        $r0[231] = "zcaron";

        $r0[232] = "brokenbar";

        $r0[233] = "Eth";

        $r0[234] = "eth";

        $r0[235] = "Yacute";

        $r0[236] = "yacute";

        $r0[237] = "Thorn";

        $r0[238] = "thorn";

        $r0[239] = "minus";

        $r0[240] = "multiply";

        $r0[241] = "onesuperior";

        $r0[242] = "twosuperior";

        $r0[243] = "threesuperior";

        $r0[244] = "onehalf";

        $r0[245] = "onequarter";

        $r0[246] = "threequarters";

        $r0[247] = "franc";

        $r0[248] = "Gbreve";

        $r0[249] = "gbreve";

        $r0[250] = "Idot";

        $r0[251] = "Scedilla";

        $r0[252] = "scedilla";

        $r0[253] = "Cacute";

        $r0[254] = "cacute";

        $r0[255] = "Ccaron";

        $r0[256] = "ccaron";

        $r0[257] = "";

        <org.apache.batik.svggen.font.table.PostTable: java.lang.String[] macGlyphName> = $r0;

        return;
    }
}
