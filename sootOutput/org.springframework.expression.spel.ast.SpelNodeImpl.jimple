public abstract class org.springframework.expression.spel.ast.SpelNodeImpl extends java.lang.Object implements org.springframework.expression.spel.SpelNode
{
    private static org.springframework.expression.spel.ast.SpelNodeImpl[] NO_CHILDREN;
    protected int pos;
    protected org.springframework.expression.spel.ast.SpelNodeImpl[] children;
    private org.springframework.expression.spel.ast.SpelNodeImpl parent;

    static void <clinit>()
    {
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r0;

        $r0 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[0];

        <org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.spel.ast.SpelNodeImpl[] NO_CHILDREN> = $r0;

        return;
    }

    public transient void <init>(int, org.springframework.expression.spel.ast.SpelNodeImpl[])
    {
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1, r2;
        int i0, $i1, i2, i3;
        org.springframework.expression.spel.ast.SpelNodeImpl r0, r3;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.ast.SpelNodeImpl;

        i0 := @parameter0: int;

        r2 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.spel.ast.SpelNodeImpl[] NO_CHILDREN>;

        r0.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.spel.ast.SpelNodeImpl[] children> = $r1;

        r0.<org.springframework.expression.spel.ast.SpelNodeImpl: int pos> = i0;

        if i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean)>($z0);

        if r2 == null goto label5;

        $i1 = lengthof r2;

        if $i1 <= 0 goto label5;

        r0.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.spel.ast.SpelNodeImpl[] children> = r2;

        i2 = lengthof r2;

        i3 = 0;

        goto label4;

     label3:
        r3 = r2[i3];

        r3.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.spel.ast.SpelNodeImpl parent> = r0;

        i3 = i3 + 1;

     label4:
        if i3 < i2 goto label3;

     label5:
        return;
    }

    protected org.springframework.expression.spel.ast.SpelNodeImpl getPreviousChild()
    {
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r3;
        int i0, i1;
        org.springframework.expression.spel.ast.SpelNodeImpl r0, $r1, $r2, r4, r5;

        r0 := @this: org.springframework.expression.spel.ast.SpelNodeImpl;

        r5 = null;

        $r1 = r0.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.spel.ast.SpelNodeImpl parent>;

        if $r1 == null goto label4;

        $r2 = r0.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.spel.ast.SpelNodeImpl parent>;

        $r3 = $r2.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        i0 = lengthof $r3;

        i1 = 0;

        goto label3;

     label1:
        r4 = $r3[i1];

        if r0 != r4 goto label2;

        goto label4;

     label2:
        r5 = r4;

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

     label4:
        return r5;
    }

    protected transient boolean nextChildIs(java.lang.Class[])
    {
        int i0, $i1, $i2, i3, i4, i5;
        boolean $z0;
        java.lang.Class[] r7;
        org.springframework.expression.spel.ast.SpelNodeImpl[] r3;
        java.lang.Class $r6, r8;
        org.springframework.expression.spel.ast.SpelNodeImpl r0, $r1, $r2, $r4, $r5;

        r0 := @this: org.springframework.expression.spel.ast.SpelNodeImpl;

        r7 := @parameter0: java.lang.Class[];

        $r1 = r0.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.spel.ast.SpelNodeImpl parent>;

        if $r1 == null goto label8;

        $r2 = r0.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.spel.ast.SpelNodeImpl parent>;

        r3 = $r2.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        i4 = 0;

        i0 = lengthof r3;

        goto label7;

     label1:
        $r4 = r3[i4];

        if $r4 != r0 goto label6;

        $i1 = i4 + 1;

        if $i1 < i0 goto label2;

        return 0;

     label2:
        $i2 = i4 + 1;

        $r5 = r3[$i2];

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        i3 = lengthof r7;

        i5 = 0;

        goto label5;

     label3:
        r8 = r7[i5];

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r8);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        i5 = i5 + 1;

     label5:
        if i5 < i3 goto label3;

        return 0;

     label6:
        i4 = i4 + 1;

     label7:
        if i4 < i0 goto label1;

     label8:
        return 0;
    }

    public final java.lang.Object getValue(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.ExpressionState r0, $r2;
        java.lang.Object $r4, $r6;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.support.StandardEvaluationContext $r3;
        org.springframework.expression.spel.ast.SpelNodeImpl r1;

        r1 := @this: org.springframework.expression.spel.ast.SpelNodeImpl;

        r0 := @parameter0: org.springframework.expression.spel.ExpressionState;

        if r0 == null goto label1;

        $r5 = virtualinvoke r1.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r0);

        $r6 = virtualinvoke $r5.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        return $r6;

     label1:
        $r2 = new org.springframework.expression.spel.ExpressionState;

        $r3 = new org.springframework.expression.spel.support.StandardEvaluationContext;

        specialinvoke $r3.<org.springframework.expression.spel.support.StandardEvaluationContext: void <init>()>();

        specialinvoke $r2.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext)>($r3);

        $r4 = virtualinvoke r1.<org.springframework.expression.spel.ast.SpelNodeImpl: java.lang.Object getValue(org.springframework.expression.spel.ExpressionState)>($r2);

        return $r4;
    }

    public final org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.ExpressionState r0, $r2;
        org.springframework.expression.TypedValue $r4, $r5;
        org.springframework.expression.spel.support.StandardEvaluationContext $r3;
        org.springframework.expression.spel.ast.SpelNodeImpl r1;

        r1 := @this: org.springframework.expression.spel.ast.SpelNodeImpl;

        r0 := @parameter0: org.springframework.expression.spel.ExpressionState;

        if r0 == null goto label1;

        $r5 = virtualinvoke r1.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r0);

        return $r5;

     label1:
        $r2 = new org.springframework.expression.spel.ExpressionState;

        $r3 = new org.springframework.expression.spel.support.StandardEvaluationContext;

        specialinvoke $r3.<org.springframework.expression.spel.support.StandardEvaluationContext: void <init>()>();

        specialinvoke $r2.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext)>($r3);

        $r4 = virtualinvoke r1.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>($r2);

        return $r4;
    }

    public boolean isWritable(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.ExpressionState r1;
        org.springframework.expression.spel.ast.SpelNodeImpl r0;

        r0 := @this: org.springframework.expression.spel.ast.SpelNodeImpl;

        r1 := @parameter0: org.springframework.expression.spel.ExpressionState;

        return 0;
    }

    public void setValue(org.springframework.expression.spel.ExpressionState, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelEvaluationException $r0;
        org.springframework.expression.spel.SpelMessage $r3;
        java.lang.Object[] $r2;
        int $i0;
        java.lang.Class $r4;
        org.springframework.expression.spel.ExpressionState r5;
        java.lang.Object r6;
        org.springframework.expression.spel.ast.SpelNodeImpl r1;

        r1 := @this: org.springframework.expression.spel.ast.SpelNodeImpl;

        r5 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r6 := @parameter1: java.lang.Object;

        $r0 = new org.springframework.expression.spel.SpelEvaluationException;

        $i0 = virtualinvoke r1.<org.springframework.expression.spel.ast.SpelNodeImpl: int getStartPosition()>();

        $r3 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage SETVALUE_NOT_SUPPORTED>;

        $r2 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r2[0] = $r4;

        specialinvoke $r0.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r3, $r2);

        throw $r0;
    }

    public org.springframework.expression.spel.SpelNode getChild(int)
    {
        int i0;
        org.springframework.expression.spel.ast.SpelNodeImpl r0, $r2;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1;

        r0 := @this: org.springframework.expression.spel.ast.SpelNodeImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r2 = $r1[i0];

        return $r2;
    }

    public int getChildCount()
    {
        int $i0;
        org.springframework.expression.spel.ast.SpelNodeImpl r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1;

        r0 := @this: org.springframework.expression.spel.ast.SpelNodeImpl;

        $r1 = r0.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public java.lang.Class getObjectClass(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r2;
        org.springframework.expression.spel.ast.SpelNodeImpl r1;
        boolean $z0;

        r1 := @this: org.springframework.expression.spel.ast.SpelNodeImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        $r2 = (java.lang.Class) r0;

        goto label3;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label3:
        return $r2;
    }

    protected final java.lang.Object getValue(org.springframework.expression.spel.ExpressionState, java.lang.Class) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.EvaluationContext $r6;
        org.springframework.expression.spel.ExpressionState r1;
        java.lang.Object $r3, $r7;
        java.lang.Class r4, $r5;
        org.springframework.expression.TypedValue $r2;
        org.springframework.expression.spel.ast.SpelNodeImpl r0;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.ast.SpelNodeImpl;

        r1 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r4 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r1);

        $r3 = virtualinvoke $r2.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        if $r3 == null goto label2;

        if r4 == null goto label2;

        $r5 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label1;

        return $r3;

     label1:
        $r6 = virtualinvoke r1.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r7 = staticinvoke <org.springframework.expression.common.ExpressionUtils: java.lang.Object convert(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Class)>($r6, $r3, r4);

        return $r7;

     label2:
        return $r3;
    }

    public abstract org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException;

    public abstract java.lang.String toStringAST();

    public int getStartPosition()
    {
        int $i0, $i1;
        org.springframework.expression.spel.ast.SpelNodeImpl r0;

        r0 := @this: org.springframework.expression.spel.ast.SpelNodeImpl;

        $i0 = r0.<org.springframework.expression.spel.ast.SpelNodeImpl: int pos>;

        $i1 = $i0 >> 16;

        return $i1;
    }

    public int getEndPosition()
    {
        int $i0, $i1, $i3;
        org.springframework.expression.spel.ast.SpelNodeImpl r0;

        r0 := @this: org.springframework.expression.spel.ast.SpelNodeImpl;

        $i0 = r0.<org.springframework.expression.spel.ast.SpelNodeImpl: int pos>;

        $i3 = (int) 65535;

        $i1 = $i0 & $i3;

        return $i1;
    }
}
