public final class org.apache.commons.lang.math.NumberRange extends org.apache.commons.lang.math.Range implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.lang.Number min;
    private final java.lang.Number max;
    private transient int hashCode;
    private transient java.lang.String toString;

    public void <init>(java.lang.Number)
    {
        java.lang.Float $r2;
        org.apache.commons.lang.math.NumberRange r0;
        java.lang.Double $r4;
        java.lang.IllegalArgumentException $r3, $r5, $r6, $r7;
        java.lang.Number r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.commons.lang.math.NumberRange;

        r1 := @parameter0: java.lang.Number;

        specialinvoke r0.<org.apache.commons.lang.math.Range: void <init>()>();

        r0.<org.apache.commons.lang.math.NumberRange: int hashCode> = 0;

        r0.<org.apache.commons.lang.math.NumberRange: java.lang.String toString> = null;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number must not be null");

        throw $r7;

     label1:
        $z0 = r1 instanceof java.lang.Comparable;

        if $z0 != 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number must implement Comparable");

        throw $r6;

     label2:
        $z1 = r1 instanceof java.lang.Double;

        if $z1 == 0 goto label3;

        $r4 = (java.lang.Double) r1;

        $z4 = virtualinvoke $r4.<java.lang.Double: boolean isNaN()>();

        if $z4 == 0 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number must not be NaN");

        throw $r5;

     label3:
        $z2 = r1 instanceof java.lang.Float;

        if $z2 == 0 goto label4;

        $r2 = (java.lang.Float) r1;

        $z3 = virtualinvoke $r2.<java.lang.Float: boolean isNaN()>();

        if $z3 == 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number must not be NaN");

        throw $r3;

     label4:
        r0.<org.apache.commons.lang.math.NumberRange: java.lang.Number min> = r1;

        r0.<org.apache.commons.lang.math.NumberRange: java.lang.Number max> = r1;

        return;
    }

    public void <init>(java.lang.Number, java.lang.Number)
    {
        java.lang.Float $r6, $r8;
        org.apache.commons.lang.math.NumberRange r0;
        java.lang.Double $r9, $r11;
        int $i0;
        java.lang.Number r1, r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.IllegalArgumentException $r2, $r7, $r10, $r12, $r13;
        java.lang.Class $r4, $r5;
        java.lang.Comparable $r14;

        r0 := @this: org.apache.commons.lang.math.NumberRange;

        r1 := @parameter0: java.lang.Number;

        r3 := @parameter1: java.lang.Number;

        specialinvoke r0.<org.apache.commons.lang.math.Range: void <init>()>();

        r0.<org.apache.commons.lang.math.NumberRange: int hashCode> = 0;

        r0.<org.apache.commons.lang.math.NumberRange: java.lang.String toString> = null;

        if r1 == null goto label01;

        if r3 != null goto label02;

     label01:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The numbers must not be null");

        throw $r2;

     label02:
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        if $r4 == $r5 goto label03;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The numbers must be of the same type");

        throw $r13;

     label03:
        $z0 = r1 instanceof java.lang.Comparable;

        if $z0 != 0 goto label04;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The numbers must implement Comparable");

        throw $r12;

     label04:
        $z1 = r1 instanceof java.lang.Double;

        if $z1 == 0 goto label06;

        $r9 = (java.lang.Double) r1;

        $z5 = virtualinvoke $r9.<java.lang.Double: boolean isNaN()>();

        if $z5 != 0 goto label05;

        $r11 = (java.lang.Double) r3;

        $z6 = virtualinvoke $r11.<java.lang.Double: boolean isNaN()>();

        if $z6 == 0 goto label08;

     label05:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number must not be NaN");

        throw $r10;

     label06:
        $z2 = r1 instanceof java.lang.Float;

        if $z2 == 0 goto label08;

        $r6 = (java.lang.Float) r1;

        $z3 = virtualinvoke $r6.<java.lang.Float: boolean isNaN()>();

        if $z3 != 0 goto label07;

        $r8 = (java.lang.Float) r3;

        $z4 = virtualinvoke $r8.<java.lang.Float: boolean isNaN()>();

        if $z4 == 0 goto label08;

     label07:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number must not be NaN");

        throw $r7;

     label08:
        $r14 = (java.lang.Comparable) r1;

        $i0 = interfaceinvoke $r14.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);

        if $i0 != 0 goto label09;

        r0.<org.apache.commons.lang.math.NumberRange: java.lang.Number min> = r1;

        r0.<org.apache.commons.lang.math.NumberRange: java.lang.Number max> = r1;

        goto label11;

     label09:
        if $i0 <= 0 goto label10;

        r0.<org.apache.commons.lang.math.NumberRange: java.lang.Number min> = r3;

        r0.<org.apache.commons.lang.math.NumberRange: java.lang.Number max> = r1;

        goto label11;

     label10:
        r0.<org.apache.commons.lang.math.NumberRange: java.lang.Number min> = r1;

        r0.<org.apache.commons.lang.math.NumberRange: java.lang.Number max> = r3;

     label11:
        return;
    }

    public java.lang.Number getMinimumNumber()
    {
        org.apache.commons.lang.math.NumberRange r0;
        java.lang.Number $r1;

        r0 := @this: org.apache.commons.lang.math.NumberRange;

        $r1 = r0.<org.apache.commons.lang.math.NumberRange: java.lang.Number min>;

        return $r1;
    }

    public java.lang.Number getMaximumNumber()
    {
        org.apache.commons.lang.math.NumberRange r0;
        java.lang.Number $r1;

        r0 := @this: org.apache.commons.lang.math.NumberRange;

        $r1 = r0.<org.apache.commons.lang.math.NumberRange: java.lang.Number max>;

        return $r1;
    }

    public boolean containsNumber(java.lang.Number)
    {
        org.apache.commons.lang.math.NumberRange r2;
        java.lang.IllegalArgumentException $r9;
        int $i0, $i1;
        java.lang.Class $r1, $r4;
        java.lang.Comparable $r6, $r8;
        java.lang.Number r0, $r3, $r5, $r7;
        boolean $z0;

        r2 := @this: org.apache.commons.lang.math.NumberRange;

        r0 := @parameter0: java.lang.Number;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = r2.<org.apache.commons.lang.math.NumberRange: java.lang.Number min>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r4 goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number must be of the same type as the range numbers");

        throw $r9;

     label2:
        $r5 = r2.<org.apache.commons.lang.math.NumberRange: java.lang.Number min>;

        $r6 = (java.lang.Comparable) $r5;

        $i0 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>(r0);

        $r7 = r2.<org.apache.commons.lang.math.NumberRange: java.lang.Number max>;

        $r8 = (java.lang.Comparable) $r7;

        $i1 = interfaceinvoke $r8.<java.lang.Comparable: int compareTo(java.lang.Object)>(r0);

        if $i0 > 0 goto label3;

        if $i1 < 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.lang.math.NumberRange r1, r2;
        java.lang.Object r0;
        java.lang.Number $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.apache.commons.lang.math.NumberRange;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.apache.commons.lang.math.NumberRange;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.lang.math.NumberRange) r0;

        $r4 = r1.<org.apache.commons.lang.math.NumberRange: java.lang.Number min>;

        $r3 = r2.<org.apache.commons.lang.math.NumberRange: java.lang.Number min>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        $r6 = r1.<org.apache.commons.lang.math.NumberRange: java.lang.Number max>;

        $r5 = r2.<org.apache.commons.lang.math.NumberRange: java.lang.Number max>;

        $z2 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public int hashCode()
    {
        org.apache.commons.lang.math.NumberRange r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.Number $r2, $r3;
        java.lang.Class $r1;

        r0 := @this: org.apache.commons.lang.math.NumberRange;

        $i0 = r0.<org.apache.commons.lang.math.NumberRange: int hashCode>;

        if $i0 != 0 goto label1;

        r0.<org.apache.commons.lang.math.NumberRange: int hashCode> = 17;

        $i2 = r0.<org.apache.commons.lang.math.NumberRange: int hashCode>;

        $i3 = 37 * $i2;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i4 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i5 = $i3 + $i4;

        r0.<org.apache.commons.lang.math.NumberRange: int hashCode> = $i5;

        $i6 = r0.<org.apache.commons.lang.math.NumberRange: int hashCode>;

        $i7 = 37 * $i6;

        $r2 = r0.<org.apache.commons.lang.math.NumberRange: java.lang.Number min>;

        $i8 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i9 = $i7 + $i8;

        r0.<org.apache.commons.lang.math.NumberRange: int hashCode> = $i9;

        $i10 = r0.<org.apache.commons.lang.math.NumberRange: int hashCode>;

        $i11 = 37 * $i10;

        $r3 = r0.<org.apache.commons.lang.math.NumberRange: java.lang.Number max>;

        $i12 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        $i13 = $i11 + $i12;

        r0.<org.apache.commons.lang.math.NumberRange: int hashCode> = $i13;

     label1:
        $i1 = r0.<org.apache.commons.lang.math.NumberRange: int hashCode>;

        return $i1;
    }

    public java.lang.String toString()
    {
        org.apache.commons.lang.math.NumberRange r0;
        java.lang.StringBuffer $r3;
        java.lang.String $r1, $r2, $r6;
        java.lang.Number $r4, $r5;

        r0 := @this: org.apache.commons.lang.math.NumberRange;

        $r1 = r0.<org.apache.commons.lang.math.NumberRange: java.lang.String toString>;

        if $r1 != null goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>(32);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Range[");

        $r4 = r0.<org.apache.commons.lang.math.NumberRange: java.lang.Number min>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        $r5 = r0.<org.apache.commons.lang.math.NumberRange: java.lang.Number max>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.apache.commons.lang.math.NumberRange: java.lang.String toString> = $r6;

     label1:
        $r2 = r0.<org.apache.commons.lang.math.NumberRange: java.lang.String toString>;

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.lang.math.NumberRange: long serialVersionUID> = 71849363892710L;

        return;
    }
}
