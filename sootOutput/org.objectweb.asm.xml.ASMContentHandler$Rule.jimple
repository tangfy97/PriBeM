public abstract class org.objectweb.asm.xml.ASMContentHandler$Rule extends java.lang.Object
{
    final org.objectweb.asm.xml.ASMContentHandler this$0;

    protected void <init>(org.objectweb.asm.xml.ASMContentHandler)
    {
        org.objectweb.asm.xml.ASMContentHandler$Rule r0;
        org.objectweb.asm.xml.ASMContentHandler r1;

        r0 := @this: org.objectweb.asm.xml.ASMContentHandler$Rule;

        r1 := @parameter0: org.objectweb.asm.xml.ASMContentHandler;

        r0.<org.objectweb.asm.xml.ASMContentHandler$Rule: org.objectweb.asm.xml.ASMContentHandler this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void begin(java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        org.objectweb.asm.xml.ASMContentHandler$Rule r0;
        org.xml.sax.Attributes r2;
        java.lang.String r1;

        r0 := @this: org.objectweb.asm.xml.ASMContentHandler$Rule;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.xml.sax.Attributes;

        return;
    }

    public void end(java.lang.String)
    {
        org.objectweb.asm.xml.ASMContentHandler$Rule r0;
        java.lang.String r1;

        r0 := @this: org.objectweb.asm.xml.ASMContentHandler$Rule;

        r1 := @parameter0: java.lang.String;

        return;
    }

    protected final java.lang.Object getValue(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.Float $r17;
        java.lang.Integer $r39;
        java.lang.Character $r34;
        java.lang.Long $r14;
        java.lang.Short $r37;
        java.lang.Byte $r36;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        org.xml.sax.SAXException $r24;
        java.lang.StringBuilder $r25, $r26, $r27, $r28, $r29, $r30, $r32;
        java.lang.Double $r20;
        org.objectweb.asm.xml.ASMContentHandler$Rule r31;
        java.lang.String r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22, $r23, $r33, $r35;
        char $c0;
        java.lang.Object r38;

        r31 := @this: org.objectweb.asm.xml.ASMContentHandler$Rule;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r38 = null;

        if r0 == null goto label16;

        $r2 = "Ljava/lang/String;";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label01;

        r38 = specialinvoke r31.<org.objectweb.asm.xml.ASMContentHandler$Rule: java.lang.String decode(java.lang.String)>(r0);

        goto label16;

     label01:
        $r3 = "Ljava/lang/Integer;";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label02;

        $r4 = "I";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 != 0 goto label02;

        $r5 = "S";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 != 0 goto label02;

        $r6 = "B";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 != 0 goto label02;

        $r7 = "C";

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z5 != 0 goto label02;

        $r8 = "Z";

        $z6 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z6 == 0 goto label03;

     label02:
        $r39 = new java.lang.Integer;

        specialinvoke $r39.<java.lang.Integer: void <init>(java.lang.String)>(r0);

        r38 = $r39;

        goto label16;

     label03:
        $r9 = "Ljava/lang/Short;";

        $z7 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z7 == 0 goto label04;

        $r37 = new java.lang.Short;

        specialinvoke $r37.<java.lang.Short: void <init>(java.lang.String)>(r0);

        r38 = $r37;

        goto label16;

     label04:
        $r10 = "Ljava/lang/Byte;";

        $z8 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z8 == 0 goto label05;

        $r36 = new java.lang.Byte;

        specialinvoke $r36.<java.lang.Byte: void <init>(java.lang.String)>(r0);

        r38 = $r36;

        goto label16;

     label05:
        $r11 = "Ljava/lang/Character;";

        $z9 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z9 == 0 goto label06;

        $r34 = new java.lang.Character;

        $r35 = specialinvoke r31.<org.objectweb.asm.xml.ASMContentHandler$Rule: java.lang.String decode(java.lang.String)>(r0);

        $c0 = virtualinvoke $r35.<java.lang.String: char charAt(int)>(0);

        specialinvoke $r34.<java.lang.Character: void <init>(char)>($c0);

        r38 = $r34;

        goto label16;

     label06:
        $r12 = "Ljava/lang/Boolean;";

        $z10 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z10 == 0 goto label07;

        r38 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r0);

        goto label16;

     label07:
        $r13 = "Ljava/lang/Long;";

        $z11 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z11 != 0 goto label08;

        $r15 = "J";

        $z12 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z12 == 0 goto label09;

     label08:
        $r14 = new java.lang.Long;

        specialinvoke $r14.<java.lang.Long: void <init>(java.lang.String)>(r0);

        r38 = $r14;

        goto label16;

     label09:
        $r16 = "Ljava/lang/Float;";

        $z13 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z13 != 0 goto label10;

        $r18 = "F";

        $z14 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z14 == 0 goto label11;

     label10:
        $r17 = new java.lang.Float;

        specialinvoke $r17.<java.lang.Float: void <init>(java.lang.String)>(r0);

        r38 = $r17;

        goto label16;

     label11:
        $r19 = "Ljava/lang/Double;";

        $z15 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z15 != 0 goto label12;

        $r21 = "D";

        $z16 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z16 == 0 goto label13;

     label12:
        $r20 = new java.lang.Double;

        specialinvoke $r20.<java.lang.Double: void <init>(java.lang.String)>(r0);

        r38 = $r20;

        goto label16;

     label13:
        $r22 = staticinvoke <org.objectweb.asm.Type: java.lang.String getDescriptor(java.lang.Class)>(class "Lorg/objectweb/asm/Type;");

        $z17 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z17 == 0 goto label14;

        r38 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>(r0);

        goto label16;

     label14:
        $r23 = staticinvoke <org.objectweb.asm.Type: java.lang.String getDescriptor(java.lang.Class)>(class "Lorg/objectweb/asm/Handle;");

        $z18 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z18 == 0 goto label15;

        r38 = virtualinvoke r31.<org.objectweb.asm.xml.ASMContentHandler$Rule: org.objectweb.asm.Handle decodeHandle(java.lang.String)>(r0);

        goto label16;

     label15:
        $r24 = new org.xml.sax.SAXException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value:");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" desc:");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ctx:");

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<org.xml.sax.SAXException: void <init>(java.lang.String)>($r33);

        throw $r24;

     label16:
        return r38;
    }

    org.objectweb.asm.Handle decodeHandle(java.lang.String) throws org.xml.sax.SAXException
    {
        org.objectweb.asm.xml.ASMContentHandler$Rule r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String r0, $r1, $r2, $r3, $r4, $r11;
        java.lang.RuntimeException $r6;
        org.objectweb.asm.Handle $r5;
        org.xml.sax.SAXException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;

        r12 := @this: org.objectweb.asm.xml.ASMContentHandler$Rule;

        r0 := @parameter0: java.lang.String;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46);

        $i1 = $i0 + 1;

        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(40, $i1);

        $i3 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(40);

        $i4 = $i3 + 1;

        $i5 = virtualinvoke r0.<java.lang.String: int length()>();

        $i6 = $i5 - 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i4, $i6);

        $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i8 = $i0 + 1;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i8, $i2);

        $i9 = $i3 - 1;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i9);

        $r5 = new org.objectweb.asm.Handle;

        specialinvoke $r5.<org.objectweb.asm.Handle: void <init>(int,java.lang.String,java.lang.String,java.lang.String)>($i7, $r2, $r3, $r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.xml.sax.SAXException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed handle ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.xml.sax.SAXException: void <init>(java.lang.String,java.lang.Exception)>($r11, $r6);

        throw $r7;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private final java.lang.String decode(java.lang.String) throws org.xml.sax.SAXException
    {
        org.objectweb.asm.xml.ASMContentHandler$Rule r6;
        java.lang.StringBuffer $r7;
        int $i0, $i1, $i4, $i5, i7, i8, $i9, $i10;
        java.lang.String r1, $r2, $r3;
        char $c2, $c3, $c6;
        java.lang.RuntimeException $r4;
        org.xml.sax.SAXException $r8;

        r6 := @this: org.objectweb.asm.xml.ASMContentHandler$Rule;

        r1 := @parameter0: java.lang.String;

        $r7 = new java.lang.StringBuffer;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r7.<java.lang.StringBuffer: void <init>(int)>($i0);

     label1:
        i7 = 0;

     label2:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if i7 >= $i1 goto label6;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i7);

        $i9 = (int) $c2;

        if $i9 != 92 goto label4;

        i7 = i7 + 1;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i7);

        $i10 = (int) $c3;

        if $i10 != 92 goto label3;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

        goto label5;

     label3:
        i8 = i7 + 1;

        $i4 = i8 + 4;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i8, $i4);

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r3, 16);

        $c6 = (char) $i5;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c6);

        i7 = i8 + 3;

        goto label5;

     label4:
        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label5:
        i7 = i7 + 1;

        goto label2;

     label6:
        goto label8;

     label7:
        $r4 := @caughtexception;

        $r8 = new org.xml.sax.SAXException;

        specialinvoke $r8.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>($r4);

        throw $r8;

     label8:
        $r2 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

        catch java.lang.RuntimeException from label1 to label6 with label7;
    }

    protected final org.objectweb.asm.Label getLabel(java.lang.Object)
    {
        org.objectweb.asm.Label $r5, r8;
        org.objectweb.asm.xml.ASMContentHandler$Rule r0;
        org.objectweb.asm.xml.ASMContentHandler $r1, $r6;
        java.util.Map $r3, $r7;
        java.lang.Object r2, $r4;

        r0 := @this: org.objectweb.asm.xml.ASMContentHandler$Rule;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.objectweb.asm.xml.ASMContentHandler$Rule: org.objectweb.asm.xml.ASMContentHandler this$0>;

        $r3 = $r1.<org.objectweb.asm.xml.ASMContentHandler: java.util.Map labels>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r8 = (org.objectweb.asm.Label) $r4;

        if r8 != null goto label1;

        $r5 = new org.objectweb.asm.Label;

        specialinvoke $r5.<org.objectweb.asm.Label: void <init>()>();

        r8 = $r5;

        $r6 = r0.<org.objectweb.asm.xml.ASMContentHandler$Rule: org.objectweb.asm.xml.ASMContentHandler this$0>;

        $r7 = $r6.<org.objectweb.asm.xml.ASMContentHandler: java.util.Map labels>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5);

     label1:
        return r8;
    }

    protected final org.objectweb.asm.MethodVisitor getCodeVisitor()
    {
        org.objectweb.asm.xml.ASMContentHandler$Rule r0;
        org.objectweb.asm.xml.ASMContentHandler $r1;
        org.objectweb.asm.MethodVisitor $r3;
        java.lang.Object $r2;

        r0 := @this: org.objectweb.asm.xml.ASMContentHandler$Rule;

        $r1 = r0.<org.objectweb.asm.xml.ASMContentHandler$Rule: org.objectweb.asm.xml.ASMContentHandler this$0>;

        $r2 = virtualinvoke $r1.<org.objectweb.asm.xml.ASMContentHandler: java.lang.Object peek()>();

        $r3 = (org.objectweb.asm.MethodVisitor) $r2;

        return $r3;
    }

    protected final int getAccess(java.lang.String)
    {
        org.objectweb.asm.xml.ASMContentHandler$Rule r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, $i21, $i23, $i25, $i27, $i29, $i31, $i33, $i35, $i37, $i39, $i41, $i43, $i45, $i47, $i49, $i51, $i53, $i55, $i57;
        java.lang.String r0;

        r1 := @this: org.objectweb.asm.xml.ASMContentHandler$Rule;

        r0 := @parameter0: java.lang.String;

        i19 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("public");

        $i21 = (int) -1;

        if $i0 == $i21 goto label01;

        i19 = 1;

     label01:
        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("private");

        $i23 = (int) -1;

        if $i1 == $i23 goto label02;

        i19 = i19 | 2;

     label02:
        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("protected");

        $i25 = (int) -1;

        if $i2 == $i25 goto label03;

        i19 = i19 | 4;

     label03:
        $i3 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("static");

        $i27 = (int) -1;

        if $i3 == $i27 goto label04;

        i19 = i19 | 8;

     label04:
        $i4 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("final");

        $i29 = (int) -1;

        if $i4 == $i29 goto label05;

        i19 = i19 | 16;

     label05:
        $i5 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("super");

        $i31 = (int) -1;

        if $i5 == $i31 goto label06;

        i19 = i19 | 32;

     label06:
        $i6 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("synchronized");

        $i33 = (int) -1;

        if $i6 == $i33 goto label07;

        i19 = i19 | 32;

     label07:
        $i7 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("volatile");

        $i35 = (int) -1;

        if $i7 == $i35 goto label08;

        i19 = i19 | 64;

     label08:
        $i8 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("bridge");

        $i37 = (int) -1;

        if $i8 == $i37 goto label09;

        i19 = i19 | 64;

     label09:
        $i9 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("varargs");

        $i39 = (int) -1;

        if $i9 == $i39 goto label10;

        i19 = i19 | 128;

     label10:
        $i10 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("transient");

        $i41 = (int) -1;

        if $i10 == $i41 goto label11;

        i19 = i19 | 128;

     label11:
        $i11 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("native");

        $i43 = (int) -1;

        if $i11 == $i43 goto label12;

        i19 = i19 | 256;

     label12:
        $i12 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("interface");

        $i45 = (int) -1;

        if $i12 == $i45 goto label13;

        i19 = i19 | 512;

     label13:
        $i13 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("abstract");

        $i47 = (int) -1;

        if $i13 == $i47 goto label14;

        i19 = i19 | 1024;

     label14:
        $i14 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("strict");

        $i49 = (int) -1;

        if $i14 == $i49 goto label15;

        i19 = i19 | 2048;

     label15:
        $i15 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("synthetic");

        $i51 = (int) -1;

        if $i15 == $i51 goto label16;

        i19 = i19 | 4096;

     label16:
        $i16 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("annotation");

        $i53 = (int) -1;

        if $i16 == $i53 goto label17;

        i19 = i19 | 8192;

     label17:
        $i17 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("enum");

        $i55 = (int) -1;

        if $i17 == $i55 goto label18;

        i19 = i19 | 16384;

     label18:
        $i18 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("deprecated");

        $i57 = (int) -1;

        if $i18 == $i57 goto label19;

        i19 = i19 | 131072;

     label19:
        return i19;
    }
}
