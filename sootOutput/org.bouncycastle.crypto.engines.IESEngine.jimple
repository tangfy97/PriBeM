public class org.bouncycastle.crypto.engines.IESEngine extends java.lang.Object
{
    org.bouncycastle.crypto.BasicAgreement agree;
    org.bouncycastle.crypto.DerivationFunction kdf;
    org.bouncycastle.crypto.Mac mac;
    org.bouncycastle.crypto.BufferedBlockCipher cipher;
    byte[] macBuf;
    boolean forEncryption;
    org.bouncycastle.crypto.CipherParameters privParam;
    org.bouncycastle.crypto.CipherParameters pubParam;
    org.bouncycastle.crypto.params.IESParameters param;

    public void <init>(org.bouncycastle.crypto.BasicAgreement, org.bouncycastle.crypto.DerivationFunction, org.bouncycastle.crypto.Mac)
    {
        org.bouncycastle.crypto.DerivationFunction r2;
        byte[] $r4;
        org.bouncycastle.crypto.BasicAgreement r1;
        int $i0;
        org.bouncycastle.crypto.Mac r3;
        org.bouncycastle.crypto.engines.IESEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.IESEngine;

        r1 := @parameter0: org.bouncycastle.crypto.BasicAgreement;

        r2 := @parameter1: org.bouncycastle.crypto.DerivationFunction;

        r3 := @parameter2: org.bouncycastle.crypto.Mac;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree> = r1;

        r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.DerivationFunction kdf> = r2;

        r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac> = r3;

        $i0 = interfaceinvoke r3.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        $r4 = newarray (byte)[$i0];

        r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] macBuf> = $r4;

        r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher> = null;

        return;
    }

    public void <init>(org.bouncycastle.crypto.BasicAgreement, org.bouncycastle.crypto.DerivationFunction, org.bouncycastle.crypto.Mac, org.bouncycastle.crypto.BufferedBlockCipher)
    {
        org.bouncycastle.crypto.DerivationFunction r2;
        byte[] $r4;
        org.bouncycastle.crypto.BasicAgreement r1;
        int $i0;
        org.bouncycastle.crypto.BufferedBlockCipher r5;
        org.bouncycastle.crypto.Mac r3;
        org.bouncycastle.crypto.engines.IESEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.IESEngine;

        r1 := @parameter0: org.bouncycastle.crypto.BasicAgreement;

        r2 := @parameter1: org.bouncycastle.crypto.DerivationFunction;

        r3 := @parameter2: org.bouncycastle.crypto.Mac;

        r5 := @parameter3: org.bouncycastle.crypto.BufferedBlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree> = r1;

        r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.DerivationFunction kdf> = r2;

        r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac> = r3;

        $i0 = interfaceinvoke r3.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        $r4 = newarray (byte)[$i0];

        r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] macBuf> = $r4;

        r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher> = r5;

        return;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters, org.bouncycastle.crypto.CipherParameters, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.params.IESParameters $r4;
        org.bouncycastle.crypto.engines.IESEngine r0;
        boolean z0;
        org.bouncycastle.crypto.CipherParameters r1, r2, r3;

        r0 := @this: org.bouncycastle.crypto.engines.IESEngine;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        r2 := @parameter2: org.bouncycastle.crypto.CipherParameters;

        r3 := @parameter3: org.bouncycastle.crypto.CipherParameters;

        r0.<org.bouncycastle.crypto.engines.IESEngine: boolean forEncryption> = z0;

        r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters privParam> = r1;

        r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters pubParam> = r2;

        $r4 = (org.bouncycastle.crypto.params.IESParameters) r3;

        r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param> = $r4;

        return;
    }

    private byte[] decryptBlock(byte[], int, int, byte[]) throws org.bouncycastle.crypto.InvalidCipherTextException
    {
        byte[] r1, $r4, $r11, r15, r16, $r21, $r25, $r27, $r29, r31, $r33;
        byte $b14, $b15, $b21, $b22, $b23, $b24;
        org.bouncycastle.crypto.params.KDFParameters $r34;
        org.bouncycastle.crypto.DerivationFunction $r6;
        org.bouncycastle.crypto.params.IESParameters $r3, $r5, $r9, $r20;
        org.bouncycastle.crypto.BufferedBlockCipher $r8, $r13, $r14, $r17, $r18;
        org.bouncycastle.crypto.InvalidCipherTextException $r38;
        org.bouncycastle.crypto.Mac $r7, $r22, $r23, $r24, $r26;
        org.bouncycastle.crypto.engines.IESEngine r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i16, $i17, $i18, $i19, $i20, i25, i26, i27, i28, i29, i30, $i31, $i32, $i33;
        org.bouncycastle.crypto.params.KeyParameter r32, $r35, $r36, $r37;
        org.bouncycastle.crypto.params.IESWithCipherParameters $r10;

        r2 := @this: org.bouncycastle.crypto.engines.IESEngine;

        r16 := @parameter0: byte[];

        i25 := @parameter1: int;

        i26 := @parameter2: int;

        r1 := @parameter3: byte[];

        $r34 = new org.bouncycastle.crypto.params.KDFParameters;

        $r3 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>;

        $r4 = virtualinvoke $r3.<org.bouncycastle.crypto.params.IESParameters: byte[] getDerivationV()>();

        specialinvoke $r34.<org.bouncycastle.crypto.params.KDFParameters: void <init>(byte[],byte[])>(r1, $r4);

        $r5 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>;

        $i0 = virtualinvoke $r5.<org.bouncycastle.crypto.params.IESParameters: int getMacKeySize()>();

        $r6 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.DerivationFunction kdf>;

        interfaceinvoke $r6.<org.bouncycastle.crypto.DerivationFunction: void init(org.bouncycastle.crypto.DerivationParameters)>($r34);

        $r7 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        $i1 = interfaceinvoke $r7.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        i27 = i26 - $i1;

        $r8 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        if $r8 != null goto label3;

        $i16 = $i0 / 8;

        $i17 = i27 + $i16;

        $r29 = specialinvoke r2.<org.bouncycastle.crypto.engines.IESEngine: byte[] generateKdfBytes(org.bouncycastle.crypto.params.KDFParameters,int)>($r34, $i17);

        r31 = newarray (byte)[i27];

        i28 = 0;

     label1:
        if i28 == i27 goto label2;

        $i20 = i25 + i28;

        $b22 = r16[$i20];

        $b21 = $r29[i28];

        $b23 = $b22 ^ $b21;

        $b24 = (byte) $b23;

        r31[i28] = $b24;

        i28 = i28 + 1;

        goto label1;

     label2:
        $r35 = new org.bouncycastle.crypto.params.KeyParameter;

        $i18 = $i0 / 8;

        specialinvoke $r35.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r29, i27, $i18);

        r32 = $r35;

        goto label4;

     label3:
        $r9 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>;

        $r10 = (org.bouncycastle.crypto.params.IESWithCipherParameters) $r9;

        $i2 = virtualinvoke $r10.<org.bouncycastle.crypto.params.IESWithCipherParameters: int getCipherKeySize()>();

        $i4 = $i2 / 8;

        $i3 = $i0 / 8;

        $i5 = $i4 + $i3;

        $r11 = specialinvoke r2.<org.bouncycastle.crypto.engines.IESEngine: byte[] generateKdfBytes(org.bouncycastle.crypto.params.KDFParameters,int)>($r34, $i5);

        $r13 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        $r36 = new org.bouncycastle.crypto.params.KeyParameter;

        $i6 = $i2 / 8;

        specialinvoke $r36.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r11, 0, $i6);

        virtualinvoke $r13.<org.bouncycastle.crypto.BufferedBlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(0, $r36);

        $r14 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        $i7 = virtualinvoke $r14.<org.bouncycastle.crypto.BufferedBlockCipher: int getOutputSize(int)>(i27);

        r15 = newarray (byte)[$i7];

        $r17 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        $i8 = virtualinvoke $r17.<org.bouncycastle.crypto.BufferedBlockCipher: int processBytes(byte[],int,int,byte[],int)>(r16, i25, i27, r15, 0);

        $r18 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        $i9 = virtualinvoke $r18.<org.bouncycastle.crypto.BufferedBlockCipher: int doFinal(byte[],int)>(r15, $i8);

        i29 = $i8 + $i9;

        r31 = newarray (byte)[i29];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r15, 0, r31, 0, i29);

        $r37 = new org.bouncycastle.crypto.params.KeyParameter;

        $i11 = $i2 / 8;

        $i10 = $i0 / 8;

        specialinvoke $r37.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r11, $i11, $i10);

        r32 = $r37;

     label4:
        $r20 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>;

        $r21 = virtualinvoke $r20.<org.bouncycastle.crypto.params.IESParameters: byte[] getEncodingV()>();

        $r22 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        interfaceinvoke $r22.<org.bouncycastle.crypto.Mac: void init(org.bouncycastle.crypto.CipherParameters)>(r32);

        $r23 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        interfaceinvoke $r23.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>(r16, i25, i27);

        $r24 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        $i12 = lengthof $r21;

        interfaceinvoke $r24.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r21, 0, $i12);

        $r26 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        $r25 = r2.<org.bouncycastle.crypto.engines.IESEngine: byte[] macBuf>;

        interfaceinvoke $r26.<org.bouncycastle.crypto.Mac: int doFinal(byte[],int)>($r25, 0);

        $i19 = i25 + i27;

        i30 = 0;

     label5:
        $r33 = r2.<org.bouncycastle.crypto.engines.IESEngine: byte[] macBuf>;

        $i31 = lengthof $r33;

        if i30 >= $i31 goto label7;

        $r27 = r2.<org.bouncycastle.crypto.engines.IESEngine: byte[] macBuf>;

        $b15 = $r27[i30];

        $i13 = $i19 + i30;

        $b14 = r16[$i13];

        $i32 = (int) $b15;

        $i33 = (int) $b14;

        if $i32 == $i33 goto label6;

        $r38 = new org.bouncycastle.crypto.InvalidCipherTextException;

        specialinvoke $r38.<org.bouncycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("Mac codes failed to equal.");

        throw $r38;

     label6:
        i30 = i30 + 1;

        goto label5;

     label7:
        return r31;
    }

    private byte[] encryptBlock(byte[], int, int, byte[]) throws org.bouncycastle.crypto.InvalidCipherTextException
    {
        byte[] r1, $r4, $r9, r13, r14, $r20, $r25, r28;
        byte $b22, $b23, $b24, $b25;
        org.bouncycastle.crypto.params.KDFParameters $r0;
        org.bouncycastle.crypto.Mac $r17, $r21, $r22, $r23, $r24, $r26;
        org.bouncycastle.crypto.engines.IESEngine r2;
        org.bouncycastle.crypto.params.IESParameters $r3, $r5, $r7, $r19;
        org.bouncycastle.crypto.BufferedBlockCipher $r6, $r11, $r12, $r15, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i26, i27, i28;
        org.bouncycastle.crypto.params.KeyParameter $r10, $r18, $r27, r29;
        org.bouncycastle.crypto.params.IESWithCipherParameters $r8;

        r2 := @this: org.bouncycastle.crypto.engines.IESEngine;

        r14 := @parameter0: byte[];

        i8 := @parameter1: int;

        i6 := @parameter2: int;

        r1 := @parameter3: byte[];

        $r0 = new org.bouncycastle.crypto.params.KDFParameters;

        $r3 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>;

        $r4 = virtualinvoke $r3.<org.bouncycastle.crypto.params.IESParameters: byte[] getDerivationV()>();

        specialinvoke $r0.<org.bouncycastle.crypto.params.KDFParameters: void <init>(byte[],byte[])>(r1, $r4);

        $r5 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>;

        $i0 = virtualinvoke $r5.<org.bouncycastle.crypto.params.IESParameters: int getMacKeySize()>();

        $r6 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        if $r6 != null goto label3;

        $i16 = $i0 / 8;

        $i17 = i6 + $i16;

        $r25 = specialinvoke r2.<org.bouncycastle.crypto.engines.IESEngine: byte[] generateKdfBytes(org.bouncycastle.crypto.params.KDFParameters,int)>($r0, $i17);

        $r26 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        $i18 = interfaceinvoke $r26.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        $i19 = i6 + $i18;

        r28 = newarray (byte)[$i19];

        i26 = i6;

        i27 = 0;

     label1:
        if i27 == i6 goto label2;

        $i21 = i8 + i27;

        $b23 = r14[$i21];

        $b22 = $r25[i27];

        $b24 = $b23 ^ $b22;

        $b25 = (byte) $b24;

        r28[i27] = $b25;

        i27 = i27 + 1;

        goto label1;

     label2:
        $r27 = new org.bouncycastle.crypto.params.KeyParameter;

        $i20 = $i0 / 8;

        specialinvoke $r27.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r25, i6, $i20);

        r29 = $r27;

        goto label4;

     label3:
        $r7 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>;

        $r8 = (org.bouncycastle.crypto.params.IESWithCipherParameters) $r7;

        $i1 = virtualinvoke $r8.<org.bouncycastle.crypto.params.IESWithCipherParameters: int getCipherKeySize()>();

        $i3 = $i1 / 8;

        $i2 = $i0 / 8;

        $i4 = $i3 + $i2;

        $r9 = specialinvoke r2.<org.bouncycastle.crypto.engines.IESEngine: byte[] generateKdfBytes(org.bouncycastle.crypto.params.KDFParameters,int)>($r0, $i4);

        $r11 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        $r10 = new org.bouncycastle.crypto.params.KeyParameter;

        $i5 = $i1 / 8;

        specialinvoke $r10.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r9, 0, $i5);

        virtualinvoke $r11.<org.bouncycastle.crypto.BufferedBlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, $r10);

        $r12 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        $i7 = virtualinvoke $r12.<org.bouncycastle.crypto.BufferedBlockCipher: int getOutputSize(int)>(i6);

        r13 = newarray (byte)[$i7];

        $r15 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        $i9 = virtualinvoke $r15.<org.bouncycastle.crypto.BufferedBlockCipher: int processBytes(byte[],int,int,byte[],int)>(r14, i8, i6, r13, 0);

        $r16 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        $i10 = virtualinvoke $r16.<org.bouncycastle.crypto.BufferedBlockCipher: int doFinal(byte[],int)>(r13, $i9);

        i28 = $i9 + $i10;

        $r17 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        $i11 = interfaceinvoke $r17.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        $i12 = i28 + $i11;

        r28 = newarray (byte)[$i12];

        i26 = i28;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r13, 0, r28, 0, i28);

        $r18 = new org.bouncycastle.crypto.params.KeyParameter;

        $i14 = $i1 / 8;

        $i13 = $i0 / 8;

        specialinvoke $r18.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r9, $i14, $i13);

        r29 = $r18;

     label4:
        $r19 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>;

        $r20 = virtualinvoke $r19.<org.bouncycastle.crypto.params.IESParameters: byte[] getEncodingV()>();

        $r21 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        interfaceinvoke $r21.<org.bouncycastle.crypto.Mac: void init(org.bouncycastle.crypto.CipherParameters)>(r29);

        $r22 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        interfaceinvoke $r22.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>(r28, 0, i26);

        $r23 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        $i15 = lengthof $r20;

        interfaceinvoke $r23.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r20, 0, $i15);

        $r24 = r2.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        interfaceinvoke $r24.<org.bouncycastle.crypto.Mac: int doFinal(byte[],int)>(r28, i26);

        return r28;
    }

    private byte[] generateKdfBytes(org.bouncycastle.crypto.params.KDFParameters, int)
    {
        org.bouncycastle.crypto.DerivationFunction $r3, $r4;
        byte[] r0;
        int i0, $i1;
        org.bouncycastle.crypto.params.KDFParameters r2;
        org.bouncycastle.crypto.engines.IESEngine r1;

        r1 := @this: org.bouncycastle.crypto.engines.IESEngine;

        r2 := @parameter0: org.bouncycastle.crypto.params.KDFParameters;

        i0 := @parameter1: int;

        r0 = newarray (byte)[i0];

        $r3 = r1.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.DerivationFunction kdf>;

        interfaceinvoke $r3.<org.bouncycastle.crypto.DerivationFunction: void init(org.bouncycastle.crypto.DerivationParameters)>(r2);

        $r4 = r1.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.DerivationFunction kdf>;

        $i1 = lengthof r0;

        interfaceinvoke $r4.<org.bouncycastle.crypto.DerivationFunction: int generateBytes(byte[],int,int)>(r0, 0, $i1);

        return r0;
    }

    public byte[] processBlock(byte[], int, int) throws org.bouncycastle.crypto.InvalidCipherTextException
    {
        byte[] r6, $r7, $r8, $r9, $r10;
        org.bouncycastle.crypto.BasicAgreement $r2, $r4;
        int i0, i1;
        java.math.BigInteger $r5;
        org.bouncycastle.crypto.engines.IESEngine r0;
        org.bouncycastle.crypto.CipherParameters $r1, $r3;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.engines.IESEngine;

        r6 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>;

        $r1 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters privParam>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.BasicAgreement: void init(org.bouncycastle.crypto.CipherParameters)>($r1);

        $r4 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>;

        $r3 = r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters pubParam>;

        $r5 = interfaceinvoke $r4.<org.bouncycastle.crypto.BasicAgreement: java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters)>($r3);

        $z0 = r0.<org.bouncycastle.crypto.engines.IESEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke $r5.<java.math.BigInteger: byte[] toByteArray()>();

        $r10 = specialinvoke r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] encryptBlock(byte[],int,int,byte[])>(r6, i0, i1, $r9);

        return $r10;

     label1:
        $r7 = virtualinvoke $r5.<java.math.BigInteger: byte[] toByteArray()>();

        $r8 = specialinvoke r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] decryptBlock(byte[],int,int,byte[])>(r6, i0, i1, $r7);

        return $r8;
    }
}
