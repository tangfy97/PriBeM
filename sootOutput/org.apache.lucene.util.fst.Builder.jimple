public class org.apache.lucene.util.fst.Builder extends java.lang.Object
{
    private final org.apache.lucene.util.fst.NodeHash dedupHash;
    private final org.apache.lucene.util.fst.FST fst;
    private final java.lang.Object NO_OUTPUT;
    private final int minSuffixCount1;
    private final int minSuffixCount2;
    private final boolean doShareNonSingletonNodes;
    private final int shareMaxTailLength;
    private final org.apache.lucene.util.IntsRef lastInput;
    private final boolean doPackFST;
    private final float acceptableOverheadRatio;
    private org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier;
    private final org.apache.lucene.util.fst.Builder$FreezeTail freezeTail;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.util.fst.FST$INPUT_TYPE, org.apache.lucene.util.fst.Outputs)
    {
        org.apache.lucene.util.fst.FST$INPUT_TYPE r1;
        org.apache.lucene.util.fst.Outputs r2;
        org.apache.lucene.util.fst.Builder r0;

        r0 := @this: org.apache.lucene.util.fst.Builder;

        r1 := @parameter0: org.apache.lucene.util.fst.FST$INPUT_TYPE;

        r2 := @parameter1: org.apache.lucene.util.fst.Outputs;

        specialinvoke r0.<org.apache.lucene.util.fst.Builder: void <init>(org.apache.lucene.util.fst.FST$INPUT_TYPE,int,int,boolean,boolean,int,org.apache.lucene.util.fst.Outputs,org.apache.lucene.util.fst.Builder$FreezeTail,boolean,float,boolean,int)>(r1, 0, 0, 1, 1, 2147483647, r2, null, 0, 0.0F, 1, 15);

        return;
    }

    public void <init>(org.apache.lucene.util.fst.FST$INPUT_TYPE, int, int, boolean, boolean, int, org.apache.lucene.util.fst.Outputs, org.apache.lucene.util.fst.Builder$FreezeTail, boolean, float, boolean, int)
    {
        org.apache.lucene.util.fst.BytesStore $r12;
        org.apache.lucene.util.fst.FST$BytesReader $r14;
        org.apache.lucene.util.fst.Builder$FreezeTail r2;
        org.apache.lucene.util.fst.Builder$UnCompiledNode $r8;
        org.apache.lucene.util.fst.Outputs r5;
        org.apache.lucene.util.IntsRef $r1;
        org.apache.lucene.util.fst.NodeHash $r10;
        org.apache.lucene.util.fst.Builder r0;
        int i0, i1, i2, i3, i4, $i5;
        org.apache.lucene.util.fst.FST$INPUT_TYPE r4;
        org.apache.lucene.util.fst.Builder$UnCompiledNode[] $r7, $r9, $r15, $r16;
        boolean z0, z1, z2, z3;
        float f0;
        org.apache.lucene.util.fst.FST $r3, $r11, $r13;
        java.lang.Object $r6;

        r0 := @this: org.apache.lucene.util.fst.Builder;

        r4 := @parameter0: org.apache.lucene.util.fst.FST$INPUT_TYPE;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z3 := @parameter3: boolean;

        z0 := @parameter4: boolean;

        i2 := @parameter5: int;

        r5 := @parameter6: org.apache.lucene.util.fst.Outputs;

        r2 := @parameter7: org.apache.lucene.util.fst.Builder$FreezeTail;

        z1 := @parameter8: boolean;

        f0 := @parameter9: float;

        z2 := @parameter10: boolean;

        i3 := @parameter11: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.lucene.util.IntsRef;

        specialinvoke $r1.<org.apache.lucene.util.IntsRef: void <init>()>();

        r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput> = $r1;

        r0.<org.apache.lucene.util.fst.Builder: int minSuffixCount1> = i0;

        r0.<org.apache.lucene.util.fst.Builder: int minSuffixCount2> = i1;

        r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$FreezeTail freezeTail> = r2;

        r0.<org.apache.lucene.util.fst.Builder: boolean doShareNonSingletonNodes> = z0;

        r0.<org.apache.lucene.util.fst.Builder: int shareMaxTailLength> = i2;

        r0.<org.apache.lucene.util.fst.Builder: boolean doPackFST> = z1;

        r0.<org.apache.lucene.util.fst.Builder: float acceptableOverheadRatio> = f0;

        $r3 = new org.apache.lucene.util.fst.FST;

        specialinvoke $r3.<org.apache.lucene.util.fst.FST: void <init>(org.apache.lucene.util.fst.FST$INPUT_TYPE,org.apache.lucene.util.fst.Outputs,boolean,float,boolean,int)>(r4, r5, z1, f0, z2, i3);

        r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst> = $r3;

        if z3 == 0 goto label1;

        $r10 = new org.apache.lucene.util.fst.NodeHash;

        $r13 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        $r11 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        $r12 = $r11.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        $r14 = virtualinvoke $r12.<org.apache.lucene.util.fst.BytesStore: org.apache.lucene.util.fst.FST$BytesReader getReverseReader(boolean)>(0);

        specialinvoke $r10.<org.apache.lucene.util.fst.NodeHash: void <init>(org.apache.lucene.util.fst.FST,org.apache.lucene.util.fst.FST$BytesReader)>($r13, $r14);

        r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.NodeHash dedupHash> = $r10;

        goto label2;

     label1:
        r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.NodeHash dedupHash> = null;

     label2:
        $r6 = virtualinvoke r5.<org.apache.lucene.util.fst.Outputs: java.lang.Object getNoOutput()>();

        r0.<org.apache.lucene.util.fst.Builder: java.lang.Object NO_OUTPUT> = $r6;

        $r7 = newarray (org.apache.lucene.util.fst.Builder$UnCompiledNode)[10];

        $r15 = (org.apache.lucene.util.fst.Builder$UnCompiledNode[]) $r7;

        r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier> = $r15;

        i4 = 0;

     label3:
        $r16 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $i5 = lengthof $r16;

        if i4 >= $i5 goto label4;

        $r9 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $r8 = new org.apache.lucene.util.fst.Builder$UnCompiledNode;

        specialinvoke $r8.<org.apache.lucene.util.fst.Builder$UnCompiledNode: void <init>(org.apache.lucene.util.fst.Builder,int)>(r0, i4);

        $r9[i4] = $r8;

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }

    public long getTotStateCount()
    {
        org.apache.lucene.util.fst.FST $r1;
        long $l0;
        org.apache.lucene.util.fst.Builder r0;

        r0 := @this: org.apache.lucene.util.fst.Builder;

        $r1 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        $l0 = $r1.<org.apache.lucene.util.fst.FST: long nodeCount>;

        return $l0;
    }

    public long getTermCount()
    {
        org.apache.lucene.util.fst.Builder r0;
        org.apache.lucene.util.fst.Builder$UnCompiledNode $r2;
        org.apache.lucene.util.fst.Builder$UnCompiledNode[] $r1;
        long $l0;

        r0 := @this: org.apache.lucene.util.fst.Builder;

        $r1 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $r2 = $r1[0];

        $l0 = $r2.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount>;

        return $l0;
    }

    public long getMappedStateCount()
    {
        org.apache.lucene.util.fst.NodeHash $r1;
        org.apache.lucene.util.fst.Builder r0;
        org.apache.lucene.util.fst.FST $r2;
        long $l0;

        r0 := @this: org.apache.lucene.util.fst.Builder;

        $r1 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.NodeHash dedupHash>;

        if $r1 != null goto label1;

        $l0 = 0L;

        goto label2;

     label1:
        $r2 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        $l0 = $r2.<org.apache.lucene.util.fst.FST: long nodeCount>;

     label2:
        return $l0;
    }

    private org.apache.lucene.util.fst.Builder$CompiledNode compileNode(org.apache.lucene.util.fst.Builder$UnCompiledNode, int) throws java.io.IOException
    {
        org.apache.lucene.util.fst.Builder$UnCompiledNode r2;
        long l5;
        org.apache.lucene.util.fst.Builder$CompiledNode $r3;
        java.lang.AssertionError $r4;
        org.apache.lucene.util.fst.NodeHash $r1, $r5;
        byte $b0;
        org.apache.lucene.util.fst.Builder r0;
        int i1, $i2, $i3, $i4;
        boolean $z0, $z1;
        org.apache.lucene.util.fst.FST $r6, $r7;

        r0 := @this: org.apache.lucene.util.fst.Builder;

        r2 := @parameter0: org.apache.lucene.util.fst.Builder$UnCompiledNode;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.NodeHash dedupHash>;

        if $r1 == null goto label3;

        $z0 = r0.<org.apache.lucene.util.fst.Builder: boolean doShareNonSingletonNodes>;

        if $z0 != 0 goto label1;

        $i4 = r2.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if $i4 > 1 goto label3;

     label1:
        $i2 = r0.<org.apache.lucene.util.fst.Builder: int shareMaxTailLength>;

        if i1 > $i2 goto label3;

        $i3 = r2.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if $i3 != 0 goto label2;

        $r6 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        l5 = virtualinvoke $r6.<org.apache.lucene.util.fst.FST: long addNode(org.apache.lucene.util.fst.Builder$UnCompiledNode)>(r2);

        goto label4;

     label2:
        $r5 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.NodeHash dedupHash>;

        l5 = virtualinvoke $r5.<org.apache.lucene.util.fst.NodeHash: long add(org.apache.lucene.util.fst.Builder$UnCompiledNode)>(r2);

        goto label4;

     label3:
        $r7 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        l5 = virtualinvoke $r7.<org.apache.lucene.util.fst.FST: long addNode(org.apache.lucene.util.fst.Builder$UnCompiledNode)>(r2);

     label4:
        $z1 = <org.apache.lucene.util.fst.Builder: boolean $assertionsDisabled>;

        if $z1 != 0 goto label5;

        $b0 = l5 cmp -2L;

        if $b0 != 0 goto label5;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label5:
        virtualinvoke r2.<org.apache.lucene.util.fst.Builder$UnCompiledNode: void clear()>();

        $r3 = new org.apache.lucene.util.fst.Builder$CompiledNode;

        specialinvoke $r3.<org.apache.lucene.util.fst.Builder$CompiledNode: void <init>()>();

        $r3.<org.apache.lucene.util.fst.Builder$CompiledNode: long node> = l5;

        return $r3;
    }

    private void freezeTail(int) throws java.io.IOException
    {
        org.apache.lucene.util.fst.Builder$FreezeTail $r1, $r27;
        org.apache.lucene.util.fst.Builder$UnCompiledNode r4, r6, r28, $r29;
        byte $b6, $b29, $b33, $b36, $b41;
        org.apache.lucene.util.fst.Builder$UnCompiledNode[] $r3, $r5, $r11, $r26;
        long $l4, $l5, $l28, $l31, $l32, $l35, $l38, $l40;
        org.apache.lucene.util.fst.Builder$CompiledNode $r16;
        org.apache.lucene.util.fst.Builder$Arc $r23;
        org.apache.lucene.util.fst.Builder$Node $r24;
        org.apache.lucene.util.IntsRef $r2, $r7, $r8, $r12, $r13, $r15, $r17, $r19, $r20, $r25;
        org.apache.lucene.util.fst.Builder r0;
        int[] $r9, $r14, $r21;
        boolean $z0, z1, z2, $z3, $z5, $z6;
        org.apache.lucene.util.fst.Builder$Arc[] $r22;
        int i0, $i1, $i2, $i3, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i30, $i34, i37, $i39, i42, $i43, $i44, $i45, $i46, $i48;
        java.lang.Object $r18;

        r0 := @this: org.apache.lucene.util.fst.Builder;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$FreezeTail freezeTail>;

        if $r1 == null goto label01;

        $r27 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$FreezeTail freezeTail>;

        $r26 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $r25 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        virtualinvoke $r27.<org.apache.lucene.util.fst.Builder$FreezeTail: void freeze(org.apache.lucene.util.fst.Builder$UnCompiledNode[],int,org.apache.lucene.util.IntsRef)>($r26, i0, $r25);

        goto label22;

     label01:
        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(1, i0);

        $r2 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        i37 = $r2.<org.apache.lucene.util.IntsRef: int length>;

     label02:
        if i37 < $i1 goto label22;

        z1 = 0;

        $r3 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        r4 = $r3[i37];

        $r5 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $i2 = i37 - 1;

        r6 = $r5[$i2];

        $l5 = r4.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount>;

        $i3 = r0.<org.apache.lucene.util.fst.Builder: int minSuffixCount1>;

        $l4 = (long) $i3;

        $b6 = $l5 cmp $l4;

        $i44 = (int) $b6;

        if $i44 >= 0 goto label03;

        z1 = 1;

        z2 = 1;

        goto label10;

     label03:
        if i37 <= i0 goto label07;

        $l32 = r6.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount>;

        $i30 = r0.<org.apache.lucene.util.fst.Builder: int minSuffixCount2>;

        $l31 = (long) $i30;

        $b33 = $l32 cmp $l31;

        $i45 = (int) $b33;

        if $i45 < 0 goto label04;

        $i34 = r0.<org.apache.lucene.util.fst.Builder: int minSuffixCount2>;

        if $i34 != 1 goto label05;

        $l35 = r6.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount>;

        $b36 = $l35 cmp 1L;

        if $b36 != 0 goto label05;

        if i37 <= 1 goto label05;

     label04:
        z1 = 1;

        goto label06;

     label05:
        z1 = 0;

     label06:
        z2 = 1;

        goto label10;

     label07:
        $i7 = r0.<org.apache.lucene.util.fst.Builder: int minSuffixCount2>;

        if $i7 != 0 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        z2 = $z3;

     label10:
        $l38 = r4.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount>;

        $i39 = r0.<org.apache.lucene.util.fst.Builder: int minSuffixCount2>;

        $l40 = (long) $i39;

        $b41 = $l38 cmp $l40;

        $i46 = (int) $b41;

        if $i46 < 0 goto label11;

        $i27 = r0.<org.apache.lucene.util.fst.Builder: int minSuffixCount2>;

        if $i27 != 1 goto label14;

        $l28 = r4.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount>;

        $b29 = $l28 cmp 1L;

        if $b29 != 0 goto label14;

        if i37 <= 1 goto label14;

     label11:
        i42 = 0;

     label12:
        $i43 = r4.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if i42 >= $i43 goto label13;

        $r22 = r4.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        $r23 = $r22[i42];

        $r24 = $r23.<org.apache.lucene.util.fst.Builder$Arc: org.apache.lucene.util.fst.Builder$Node target>;

        r28 = (org.apache.lucene.util.fst.Builder$UnCompiledNode) $r24;

        virtualinvoke r28.<org.apache.lucene.util.fst.Builder$UnCompiledNode: void clear()>();

        i42 = i42 + 1;

        goto label12;

     label13:
        r4.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs> = 0;

     label14:
        if z1 == 0 goto label15;

        virtualinvoke r4.<org.apache.lucene.util.fst.Builder$UnCompiledNode: void clear()>();

        $r19 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $r21 = $r19.<org.apache.lucene.util.IntsRef: int[] ints>;

        $r20 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $i23 = $r20.<org.apache.lucene.util.IntsRef: int offset>;

        $i24 = $i23 + i37;

        $i25 = $i24 - 1;

        $i26 = $r21[$i25];

        virtualinvoke r6.<org.apache.lucene.util.fst.Builder$UnCompiledNode: void deleteLast(int,org.apache.lucene.util.fst.Builder$Node)>($i26, r4);

        goto label21;

     label15:
        $i8 = r0.<org.apache.lucene.util.fst.Builder: int minSuffixCount2>;

        if $i8 == 0 goto label16;

        $r17 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $i21 = $r17.<org.apache.lucene.util.IntsRef: int length>;

        $i22 = $i21 - i37;

        specialinvoke r0.<org.apache.lucene.util.fst.Builder: void compileAllTargets(org.apache.lucene.util.fst.Builder$UnCompiledNode,int)>(r4, $i22);

     label16:
        $r18 = r4.<org.apache.lucene.util.fst.Builder$UnCompiledNode: java.lang.Object output>;

        $z0 = r4.<org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean isFinal>;

        if $z0 != 0 goto label17;

        $i20 = r4.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if $i20 != 0 goto label18;

     label17:
        $z6 = 1;

        $z5 = 1;

        goto label19;

     label18:
        $z6 = 0;

        $z5 = 0;

     label19:
        if z2 == 0 goto label20;

        $r12 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $r14 = $r12.<org.apache.lucene.util.IntsRef: int[] ints>;

        $r13 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $i13 = $r13.<org.apache.lucene.util.IntsRef: int offset>;

        $i14 = $i13 + i37;

        $i15 = $i14 - 1;

        $i19 = $r14[$i15];

        $r15 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $i16 = $r15.<org.apache.lucene.util.IntsRef: int length>;

        $i17 = 1 + $i16;

        $i18 = $i17 - i37;

        $r16 = specialinvoke r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$CompiledNode compileNode(org.apache.lucene.util.fst.Builder$UnCompiledNode,int)>(r4, $i18);

        virtualinvoke r6.<org.apache.lucene.util.fst.Builder$UnCompiledNode: void replaceLast(int,org.apache.lucene.util.fst.Builder$Node,java.lang.Object,boolean)>($i19, $r16, $r18, $z6);

        goto label21;

     label20:
        $r7 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $r9 = $r7.<org.apache.lucene.util.IntsRef: int[] ints>;

        $r8 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $i9 = $r8.<org.apache.lucene.util.IntsRef: int offset>;

        $i10 = $i9 + i37;

        $i11 = $i10 - 1;

        $i12 = $r9[$i11];

        virtualinvoke r6.<org.apache.lucene.util.fst.Builder$UnCompiledNode: void replaceLast(int,org.apache.lucene.util.fst.Builder$Node,java.lang.Object,boolean)>($i12, r4, $r18, $z5);

        $r11 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $r29 = new org.apache.lucene.util.fst.Builder$UnCompiledNode;

        specialinvoke $r29.<org.apache.lucene.util.fst.Builder$UnCompiledNode: void <init>(org.apache.lucene.util.fst.Builder,int)>(r0, i37);

        $r11[i37] = $r29;

     label21:
        $i48 = (int) -1;

        i37 = i37 + $i48;

        goto label02;

     label22:
        return;
    }

    public void add(org.apache.lucene.util.IntsRef, java.lang.Object) throws java.io.IOException
    {
        org.apache.lucene.util.fst.Builder$UnCompiledNode $r5, $r13, r19, r21, $r42, $r43, $r45, $r49, $r54, $r56, r71;
        org.apache.lucene.util.fst.Builder$UnCompiledNode[] $r4, $r6, $r7, $r11, $r18, $r20, $r39, $r41, $r44, $r46, $r47, $r48, $r53, $r55, r70;
        java.lang.StringBuilder $r62, $r63, $r65, $r66, $r67;
        long $l4, $l5, $l37, $l38, $l48, $l49;
        org.apache.lucene.util.IntsRef r2, $r3, $r8, $r10, $r50, $r59, $r60, $r64, $r73;
        org.apache.lucene.util.fst.Builder r0;
        int[] $r12, $r22, $r35, $r40, $r51, $r52;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i50, $i51, i52, i53, i54, i55, $i56, i57;
        java.lang.Object $r1, $r9, $r15, $r17, $r23, $r24, $r27, $r31, $r34, r69, r72;
        java.lang.AssertionError $r28, $r36, $r37, $r38, $r58, $r61;
        org.apache.lucene.util.fst.Outputs $r16, $r26, $r30, $r33;
        java.lang.String $r68;
        org.apache.lucene.util.fst.FST $r14, $r25, $r29, $r32, $r57;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;

        r0 := @this: org.apache.lucene.util.fst.Builder;

        r2 := @parameter0: org.apache.lucene.util.IntsRef;

        r69 := @parameter1: java.lang.Object;

        $r1 = r0.<org.apache.lucene.util.fst.Builder: java.lang.Object NO_OUTPUT>;

        $z0 = virtualinvoke r69.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label01;

        r69 = r0.<org.apache.lucene.util.fst.Builder: java.lang.Object NO_OUTPUT>;

     label01:
        $z1 = <org.apache.lucene.util.fst.Builder: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        $r59 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $i50 = $r59.<org.apache.lucene.util.IntsRef: int length>;

        if $i50 == 0 goto label02;

        $r60 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $i51 = virtualinvoke r2.<org.apache.lucene.util.IntsRef: int compareTo(org.apache.lucene.util.IntsRef)>($r60);

        if $i51 >= 0 goto label02;

        $r61 = new java.lang.AssertionError;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inputs are added out of order lastInput=");

        $r64 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r64);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs input=");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r61.<java.lang.AssertionError: void <init>(java.lang.Object)>($r68);

        throw $r61;

     label02:
        $z11 = <org.apache.lucene.util.fst.Builder: boolean $assertionsDisabled>;

        if $z11 != 0 goto label03;

        $z10 = specialinvoke r0.<org.apache.lucene.util.fst.Builder: boolean validOutput(java.lang.Object)>(r69);

        if $z10 != 0 goto label03;

        $r58 = new java.lang.AssertionError;

        specialinvoke $r58.<java.lang.AssertionError: void <init>()>();

        throw $r58;

     label03:
        $i0 = r2.<org.apache.lucene.util.IntsRef: int length>;

        if $i0 != 0 goto label04;

        $r53 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $r54 = $r53[0];

        $l48 = $r54.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount>;

        $l49 = $l48 + 1L;

        $r54.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount> = $l49;

        $r55 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $r56 = $r55[0];

        $r56.<org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean isFinal> = 1;

        $r57 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        virtualinvoke $r57.<org.apache.lucene.util.fst.FST: void setEmptyOutput(java.lang.Object)>(r69);

        return;

     label04:
        i52 = 0;

        i53 = r2.<org.apache.lucene.util.IntsRef: int offset>;

        $r3 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $i2 = $r3.<org.apache.lucene.util.IntsRef: int length>;

        $i1 = r2.<org.apache.lucene.util.IntsRef: int length>;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

     label05:
        $r4 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $r5 = $r4[i52];

        $l4 = $r5.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount>;

        $l5 = $l4 + 1L;

        $r5.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount> = $l5;

        if i52 >= $i3 goto label07;

        $r50 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $r51 = $r50.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i46 = $r51[i52];

        $r52 = r2.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i45 = $r52[i53];

        if $i46 == $i45 goto label06;

        goto label07;

     label06:
        i52 = i52 + 1;

        i53 = i53 + 1;

        goto label05;

     label07:
        $i47 = i52 + 1;

        $r6 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $i8 = lengthof $r6;

        $i6 = r2.<org.apache.lucene.util.IntsRef: int length>;

        $i7 = $i6 + 1;

        if $i8 >= $i7 goto label10;

        $i39 = r2.<org.apache.lucene.util.IntsRef: int length>;

        $i41 = $i39 + 1;

        $i40 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i42 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i41, $i40);

        r70 = newarray (org.apache.lucene.util.fst.Builder$UnCompiledNode)[$i42];

        $r47 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $r46 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $i43 = lengthof $r46;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r47, 0, r70, 0, $i43);

        $r48 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        i54 = lengthof $r48;

     label08:
        $i44 = lengthof r70;

        if i54 >= $i44 goto label09;

        $r49 = new org.apache.lucene.util.fst.Builder$UnCompiledNode;

        specialinvoke $r49.<org.apache.lucene.util.fst.Builder$UnCompiledNode: void <init>(org.apache.lucene.util.fst.Builder,int)>(r0, i54);

        r70[i54] = $r49;

        i54 = i54 + 1;

        goto label08;

     label09:
        r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier> = r70;

     label10:
        specialinvoke r0.<org.apache.lucene.util.fst.Builder: void freezeTail(int)>($i47);

        i55 = $i47;

     label11:
        $i56 = r2.<org.apache.lucene.util.IntsRef: int length>;

        if i55 > $i56 goto label12;

        $r39 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $i32 = i55 - 1;

        $r43 = $r39[$i32];

        $r40 = r2.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i33 = r2.<org.apache.lucene.util.IntsRef: int offset>;

        $i34 = $i33 + i55;

        $i35 = $i34 - 1;

        $i36 = $r40[$i35];

        $r41 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $r42 = $r41[i55];

        virtualinvoke $r43.<org.apache.lucene.util.fst.Builder$UnCompiledNode: void addArc(int,org.apache.lucene.util.fst.Builder$Node)>($i36, $r42);

        $r44 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $r45 = $r44[i55];

        $l37 = $r45.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount>;

        $l38 = $l37 + 1L;

        $r45.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount> = $l38;

        i55 = i55 + 1;

        goto label11;

     label12:
        $r7 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $i9 = r2.<org.apache.lucene.util.IntsRef: int length>;

        r71 = $r7[$i9];

        $r8 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $i11 = $r8.<org.apache.lucene.util.IntsRef: int length>;

        $i10 = r2.<org.apache.lucene.util.IntsRef: int length>;

        if $i11 != $i10 goto label13;

        $i30 = r2.<org.apache.lucene.util.IntsRef: int length>;

        $i31 = $i30 + 1;

        if $i47 == $i31 goto label14;

     label13:
        r71.<org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean isFinal> = 1;

        $r9 = r0.<org.apache.lucene.util.fst.Builder: java.lang.Object NO_OUTPUT>;

        r71.<org.apache.lucene.util.fst.Builder$UnCompiledNode: java.lang.Object output> = $r9;

     label14:
        i57 = 1;

     label15:
        if i57 >= $i47 goto label22;

        $r18 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        r19 = $r18[i57];

        $r20 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $i21 = i57 - 1;

        r21 = $r20[$i21];

        $r22 = r2.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i22 = r2.<org.apache.lucene.util.IntsRef: int offset>;

        $i23 = $i22 + i57;

        $i24 = $i23 - 1;

        $i25 = $r22[$i24];

        $r23 = virtualinvoke r21.<org.apache.lucene.util.fst.Builder$UnCompiledNode: java.lang.Object getLastOutput(int)>($i25);

        $z2 = <org.apache.lucene.util.fst.Builder: boolean $assertionsDisabled>;

        if $z2 != 0 goto label16;

        $z9 = specialinvoke r0.<org.apache.lucene.util.fst.Builder: boolean validOutput(java.lang.Object)>($r23);

        if $z9 != 0 goto label16;

        $r38 = new java.lang.AssertionError;

        specialinvoke $r38.<java.lang.AssertionError: void <init>()>();

        throw $r38;

     label16:
        $r24 = r0.<org.apache.lucene.util.fst.Builder: java.lang.Object NO_OUTPUT>;

        if $r23 == $r24 goto label19;

        $r29 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        $r30 = $r29.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r31 = virtualinvoke $r30.<org.apache.lucene.util.fst.Outputs: java.lang.Object common(java.lang.Object,java.lang.Object)>(r69, $r23);

        r72 = $r31;

        $z5 = <org.apache.lucene.util.fst.Builder: boolean $assertionsDisabled>;

        if $z5 != 0 goto label17;

        $z8 = specialinvoke r0.<org.apache.lucene.util.fst.Builder: boolean validOutput(java.lang.Object)>($r31);

        if $z8 != 0 goto label17;

        $r37 = new java.lang.AssertionError;

        specialinvoke $r37.<java.lang.AssertionError: void <init>()>();

        throw $r37;

     label17:
        $r32 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        $r33 = $r32.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r34 = virtualinvoke $r33.<org.apache.lucene.util.fst.Outputs: java.lang.Object subtract(java.lang.Object,java.lang.Object)>($r23, $r31);

        $z6 = <org.apache.lucene.util.fst.Builder: boolean $assertionsDisabled>;

        if $z6 != 0 goto label18;

        $z7 = specialinvoke r0.<org.apache.lucene.util.fst.Builder: boolean validOutput(java.lang.Object)>($r34);

        if $z7 != 0 goto label18;

        $r36 = new java.lang.AssertionError;

        specialinvoke $r36.<java.lang.AssertionError: void <init>()>();

        throw $r36;

     label18:
        $r35 = r2.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i26 = r2.<org.apache.lucene.util.IntsRef: int offset>;

        $i27 = $i26 + i57;

        $i28 = $i27 - 1;

        $i29 = $r35[$i28];

        virtualinvoke r21.<org.apache.lucene.util.fst.Builder$UnCompiledNode: void setLastOutput(int,java.lang.Object)>($i29, $r31);

        virtualinvoke r19.<org.apache.lucene.util.fst.Builder$UnCompiledNode: void prependOutput(java.lang.Object)>($r34);

        goto label20;

     label19:
        r72 = r0.<org.apache.lucene.util.fst.Builder: java.lang.Object NO_OUTPUT>;

     label20:
        $r25 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        $r26 = $r25.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r27 = virtualinvoke $r26.<org.apache.lucene.util.fst.Outputs: java.lang.Object subtract(java.lang.Object,java.lang.Object)>(r69, r72);

        r69 = $r27;

        $z3 = <org.apache.lucene.util.fst.Builder: boolean $assertionsDisabled>;

        if $z3 != 0 goto label21;

        $z4 = specialinvoke r0.<org.apache.lucene.util.fst.Builder: boolean validOutput(java.lang.Object)>($r27);

        if $z4 != 0 goto label21;

        $r28 = new java.lang.AssertionError;

        specialinvoke $r28.<java.lang.AssertionError: void <init>()>();

        throw $r28;

     label21:
        i57 = i57 + 1;

        goto label15;

     label22:
        $r10 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $i13 = $r10.<org.apache.lucene.util.IntsRef: int length>;

        $i12 = r2.<org.apache.lucene.util.IntsRef: int length>;

        if $i13 != $i12 goto label23;

        $i19 = r2.<org.apache.lucene.util.IntsRef: int length>;

        $i20 = 1 + $i19;

        if $i47 != $i20 goto label23;

        $r14 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        $r16 = $r14.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r15 = r71.<org.apache.lucene.util.fst.Builder$UnCompiledNode: java.lang.Object output>;

        $r17 = virtualinvoke $r16.<org.apache.lucene.util.fst.Outputs: java.lang.Object merge(java.lang.Object,java.lang.Object)>($r15, r69);

        r71.<org.apache.lucene.util.fst.Builder$UnCompiledNode: java.lang.Object output> = $r17;

        goto label24;

     label23:
        $r11 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        $i14 = $i47 - 1;

        $r13 = $r11[$i14];

        $r12 = r2.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i15 = r2.<org.apache.lucene.util.IntsRef: int offset>;

        $i16 = $i15 + $i47;

        $i17 = $i16 - 1;

        $i18 = $r12[$i17];

        virtualinvoke $r13.<org.apache.lucene.util.fst.Builder$UnCompiledNode: void setLastOutput(int,java.lang.Object)>($i18, r69);

     label24:
        $r73 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        virtualinvoke $r73.<org.apache.lucene.util.IntsRef: void copyInts(org.apache.lucene.util.IntsRef)>(r2);

        return;
    }

    private boolean validOutput(java.lang.Object)
    {
        org.apache.lucene.util.fst.Builder r1;
        java.lang.Object r0, $r2, $r3;
        boolean $z0, $z1;

        r1 := @this: org.apache.lucene.util.fst.Builder;

        r0 := @parameter0: java.lang.Object;

        $r2 = r1.<org.apache.lucene.util.fst.Builder: java.lang.Object NO_OUTPUT>;

        if r0 == $r2 goto label1;

        $r3 = r1.<org.apache.lucene.util.fst.Builder: java.lang.Object NO_OUTPUT>;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public org.apache.lucene.util.fst.FST finish() throws java.io.IOException
    {
        org.apache.lucene.util.fst.Builder$UnCompiledNode r2;
        org.apache.lucene.util.IntsRef $r7, $r11;
        byte $b3, $b13;
        org.apache.lucene.util.fst.Builder r0;
        org.apache.lucene.util.fst.Builder$UnCompiledNode[] $r1;
        boolean $z0;
        float $f0;
        long $l1, $l2, $l6, $l7, $l11, $l12, $l18;
        org.apache.lucene.util.fst.Builder$CompiledNode $r12;
        int $i0, $i4, $i5, $i8, $i9, $i10, $i14, $i15, $i16, $i17, $i19, $i20;
        org.apache.lucene.util.fst.FST $r3, $r4, $r5, $r6, $r8, $r10;
        java.lang.Object $r9;

        r0 := @this: org.apache.lucene.util.fst.Builder;

        $r1 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$UnCompiledNode[] frontier>;

        r2 = $r1[0];

        specialinvoke r0.<org.apache.lucene.util.fst.Builder: void freezeTail(int)>(0);

        $l2 = r2.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount>;

        $i0 = r0.<org.apache.lucene.util.fst.Builder: int minSuffixCount1>;

        $l1 = (long) $i0;

        $b3 = $l2 cmp $l1;

        $i19 = (int) $b3;

        if $i19 < 0 goto label1;

        $l12 = r2.<org.apache.lucene.util.fst.Builder$UnCompiledNode: long inputCount>;

        $i10 = r0.<org.apache.lucene.util.fst.Builder: int minSuffixCount2>;

        $l11 = (long) $i10;

        $b13 = $l12 cmp $l11;

        $i20 = (int) $b13;

        if $i20 < 0 goto label1;

        $i14 = r2.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if $i14 != 0 goto label4;

     label1:
        $r8 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        $r9 = $r8.<org.apache.lucene.util.fst.FST: java.lang.Object emptyOutput>;

        if $r9 != null goto label2;

        return null;

     label2:
        $i4 = r0.<org.apache.lucene.util.fst.Builder: int minSuffixCount1>;

        if $i4 > 0 goto label3;

        $i5 = r0.<org.apache.lucene.util.fst.Builder: int minSuffixCount2>;

        if $i5 <= 0 goto label5;

     label3:
        return null;

     label4:
        $i15 = r0.<org.apache.lucene.util.fst.Builder: int minSuffixCount2>;

        if $i15 == 0 goto label5;

        $r7 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $i16 = $r7.<org.apache.lucene.util.IntsRef: int length>;

        specialinvoke r0.<org.apache.lucene.util.fst.Builder: void compileAllTargets(org.apache.lucene.util.fst.Builder$UnCompiledNode,int)>(r2, $i16);

     label5:
        $r10 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        $r11 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.IntsRef lastInput>;

        $i17 = $r11.<org.apache.lucene.util.IntsRef: int length>;

        $r12 = specialinvoke r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$CompiledNode compileNode(org.apache.lucene.util.fst.Builder$UnCompiledNode,int)>(r2, $i17);

        $l18 = $r12.<org.apache.lucene.util.fst.Builder$CompiledNode: long node>;

        virtualinvoke $r10.<org.apache.lucene.util.fst.FST: void finish(long)>($l18);

        $z0 = r0.<org.apache.lucene.util.fst.Builder: boolean doPackFST>;

        if $z0 == 0 goto label6;

        $r5 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        $r4 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        $l6 = virtualinvoke $r4.<org.apache.lucene.util.fst.FST: long getNodeCount()>();

        $l7 = $l6 / 4L;

        $i8 = (int) $l7;

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>(10, $i8);

        $f0 = r0.<org.apache.lucene.util.fst.Builder: float acceptableOverheadRatio>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST pack(int,int,float)>(3, $i9, $f0);

        return $r6;

     label6:
        $r3 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        return $r3;
    }

    private void compileAllTargets(org.apache.lucene.util.fst.Builder$UnCompiledNode, int) throws java.io.IOException
    {
        org.apache.lucene.util.fst.Builder$UnCompiledNode r0, r5;
        org.apache.lucene.util.fst.Builder$CompiledNode $r7;
        org.apache.lucene.util.fst.Builder$Arc[] $r1;
        org.apache.lucene.util.fst.Builder$Node $r3, $r4;
        org.apache.lucene.util.fst.Builder r6;
        int $i0, $i1, i2, $i3, i4;
        org.apache.lucene.util.fst.Builder$Arc r2;
        boolean $z0;

        r6 := @this: org.apache.lucene.util.fst.Builder;

        r0 := @parameter0: org.apache.lucene.util.fst.Builder$UnCompiledNode;

        i2 := @parameter1: int;

        i4 = 0;

     label1:
        $i0 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if i4 >= $i0 goto label4;

        $r1 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        r2 = $r1[i4];

        $r3 = r2.<org.apache.lucene.util.fst.Builder$Arc: org.apache.lucene.util.fst.Builder$Node target>;

        $z0 = interfaceinvoke $r3.<org.apache.lucene.util.fst.Builder$Node: boolean isCompiled()>();

        if $z0 != 0 goto label3;

        $r4 = r2.<org.apache.lucene.util.fst.Builder$Arc: org.apache.lucene.util.fst.Builder$Node target>;

        r5 = (org.apache.lucene.util.fst.Builder$UnCompiledNode) $r4;

        $i1 = r5.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if $i1 != 0 goto label2;

        r5.<org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean isFinal> = 1;

        r2.<org.apache.lucene.util.fst.Builder$Arc: boolean isFinal> = 1;

     label2:
        $i3 = i2 - 1;

        $r7 = specialinvoke r6.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.Builder$CompiledNode compileNode(org.apache.lucene.util.fst.Builder$UnCompiledNode,int)>(r5, $i3);

        r2.<org.apache.lucene.util.fst.Builder$Arc: org.apache.lucene.util.fst.Builder$Node target> = $r7;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return;
    }

    public long fstSizeInBytes()
    {
        org.apache.lucene.util.fst.FST $r1;
        long $l0;
        org.apache.lucene.util.fst.Builder r0;

        r0 := @this: org.apache.lucene.util.fst.Builder;

        $r1 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.util.fst.FST: long sizeInBytes()>();

        return $l0;
    }

    static java.lang.Object access$000(org.apache.lucene.util.fst.Builder)
    {
        java.lang.Object $r1;
        org.apache.lucene.util.fst.Builder r0;

        r0 := @parameter0: org.apache.lucene.util.fst.Builder;

        $r1 = r0.<org.apache.lucene.util.fst.Builder: java.lang.Object NO_OUTPUT>;

        return $r1;
    }

    static boolean access$100(org.apache.lucene.util.fst.Builder, java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.lucene.util.fst.Builder r0;
        boolean $z0;

        r0 := @parameter0: org.apache.lucene.util.fst.Builder;

        r1 := @parameter1: java.lang.Object;

        $z0 = specialinvoke r0.<org.apache.lucene.util.fst.Builder: boolean validOutput(java.lang.Object)>(r1);

        return $z0;
    }

    static org.apache.lucene.util.fst.FST access$200(org.apache.lucene.util.fst.Builder)
    {
        org.apache.lucene.util.fst.FST $r1;
        org.apache.lucene.util.fst.Builder r0;

        r0 := @parameter0: org.apache.lucene.util.fst.Builder;

        $r1 = r0.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST fst>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/fst/Builder;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.fst.Builder: boolean $assertionsDisabled> = $z1;

        return;
    }
}
