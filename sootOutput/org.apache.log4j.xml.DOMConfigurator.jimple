public class org.apache.log4j.xml.DOMConfigurator extends java.lang.Object implements org.apache.log4j.spi.Configurator
{
    static final java.lang.String CONFIGURATION_TAG;
    static final java.lang.String OLD_CONFIGURATION_TAG;
    static final java.lang.String RENDERER_TAG;
    private static final java.lang.String THROWABLE_RENDERER_TAG;
    static final java.lang.String APPENDER_TAG;
    static final java.lang.String APPENDER_REF_TAG;
    static final java.lang.String PARAM_TAG;
    static final java.lang.String LAYOUT_TAG;
    static final java.lang.String CATEGORY;
    static final java.lang.String LOGGER;
    static final java.lang.String LOGGER_REF;
    static final java.lang.String CATEGORY_FACTORY_TAG;
    static final java.lang.String LOGGER_FACTORY_TAG;
    static final java.lang.String NAME_ATTR;
    static final java.lang.String CLASS_ATTR;
    static final java.lang.String VALUE_ATTR;
    static final java.lang.String ROOT_TAG;
    static final java.lang.String ROOT_REF;
    static final java.lang.String LEVEL_TAG;
    static final java.lang.String PRIORITY_TAG;
    static final java.lang.String FILTER_TAG;
    static final java.lang.String ERROR_HANDLER_TAG;
    static final java.lang.String REF_ATTR;
    static final java.lang.String ADDITIVITY_ATTR;
    static final java.lang.String THRESHOLD_ATTR;
    static final java.lang.String CONFIG_DEBUG_ATTR;
    static final java.lang.String INTERNAL_DEBUG_ATTR;
    private static final java.lang.String RESET_ATTR;
    static final java.lang.String RENDERING_CLASS_ATTR;
    static final java.lang.String RENDERED_CLASS_ATTR;
    static final java.lang.String EMPTY_STR;
    static final java.lang.Class[] ONE_STRING_PARAM;
    static final java.lang.String dbfKey;
    java.util.Hashtable appenderBag;
    java.util.Properties props;
    org.apache.log4j.spi.LoggerRepository repository;
    protected org.apache.log4j.spi.LoggerFactory catFactory;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$org$apache$log4j$spi$ErrorHandler;
    static java.lang.Class class$org$apache$log4j$spi$Filter;
    static java.lang.Class class$org$apache$log4j$spi$LoggerFactory;

    public void <init>()
    {
        org.apache.log4j.xml.DOMConfigurator r0;
        java.util.Hashtable $r1;

        r0 := @this: org.apache.log4j.xml.DOMConfigurator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerFactory catFactory> = null;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.log4j.xml.DOMConfigurator: java.util.Hashtable appenderBag> = $r1;

        return;
    }

    protected org.apache.log4j.Appender findAppenderByName(org.w3c.dom.Document, java.lang.String)
    {
        org.apache.log4j.xml.DOMConfigurator r0;
        org.apache.log4j.Appender $r6, r17;
        org.w3c.dom.Document r4;
        java.lang.StringBuffer $r8, $r9, $r10, $r11;
        org.w3c.dom.Node $r13, $r15;
        int $i0, i1;
        org.w3c.dom.NamedNodeMap $r14;
        java.lang.String r1, $r12, $r16;
        java.util.Hashtable $r2, $r7;
        boolean $z0;
        org.w3c.dom.NodeList $r5;
        org.w3c.dom.Element r18;
        java.lang.Object $r3;

        r0 := @this: org.apache.log4j.xml.DOMConfigurator;

        r4 := @parameter0: org.w3c.dom.Document;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.log4j.xml.DOMConfigurator: java.util.Hashtable appenderBag>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r17 = (org.apache.log4j.Appender) $r3;

        if r17 == null goto label1;

        return r17;

     label1:
        r18 = null;

        $r5 = interfaceinvoke r4.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("appender");

        i1 = 0;

     label2:
        $i0 = interfaceinvoke $r5.<org.w3c.dom.NodeList: int getLength()>();

        if i1 >= $i0 goto label4;

        $r13 = interfaceinvoke $r5.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $r14 = interfaceinvoke $r13.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r15 = interfaceinvoke $r14.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>("name");

        $r16 = interfaceinvoke $r15.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z0 == 0 goto label3;

        r18 = (org.w3c.dom.Element) $r13;

        goto label4;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        if r18 != null goto label5;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No appender named [");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] could be found.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r12);

        return null;

     label5:
        $r6 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.Appender parseAppender(org.w3c.dom.Element)>(r18);

        if $r6 == null goto label6;

        $r7 = r0.<org.apache.log4j.xml.DOMConfigurator: java.util.Hashtable appenderBag>;

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

     label6:
        return $r6;
    }

    protected org.apache.log4j.Appender findAppenderByReference(org.w3c.dom.Element)
    {
        org.apache.log4j.xml.DOMConfigurator r0;
        org.w3c.dom.Element r1;
        org.apache.log4j.Appender $r5;
        org.w3c.dom.Document $r4;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.log4j.xml.DOMConfigurator;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("ref");

        $r3 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r2);

        $r4 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r5 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.Appender findAppenderByName(org.w3c.dom.Document,java.lang.String)>($r4, $r3);

        return $r5;
    }

    private static void parseUnrecognizedElement(java.lang.Object, org.w3c.dom.Element, java.util.Properties) throws java.lang.Exception
    {
        java.util.Properties r7;
        org.w3c.dom.Element r3;
        java.lang.StringBuffer $r1, $r2, $r5;
        java.lang.Object r0;
        java.lang.String $r4, $r6;
        org.apache.log4j.xml.UnrecognizedElementHandler $r8;
        boolean $z0, z1;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: org.w3c.dom.Element;

        r7 := @parameter2: java.util.Properties;

        z1 = 0;

        $z0 = r0 instanceof org.apache.log4j.xml.UnrecognizedElementHandler;

        if $z0 == 0 goto label1;

        $r8 = (org.apache.log4j.xml.UnrecognizedElementHandler) r0;

        z1 = interfaceinvoke $r8.<org.apache.log4j.xml.UnrecognizedElementHandler: boolean parseUnrecognizedElement(org.w3c.dom.Element,java.util.Properties)>(r3, r7);

     label1:
        if z1 != 0 goto label2;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unrecognized element ");

        $r4 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r6);

     label2:
        return;
    }

    private static void quietParseUnrecognizedElement(java.lang.Object, org.w3c.dom.Element, java.util.Properties)
    {
        org.w3c.dom.Element r1;
        java.util.Properties r2;
        java.lang.Thread $r4;
        java.lang.Object r0;
        java.lang.Exception $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.w3c.dom.Element;

        r2 := @parameter2: java.util.Properties;

     label1:
        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void parseUnrecognizedElement(java.lang.Object,org.w3c.dom.Element,java.util.Properties)>(r0, r1, r2);

     label2:
        goto label6;

     label3:
        $r3 := @caughtexception;

        $z0 = $r3 instanceof java.lang.InterruptedException;

        if $z0 != 0 goto label4;

        $z1 = $r3 instanceof java.io.InterruptedIOException;

        if $z1 == 0 goto label5;

     label4:
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r4.<java.lang.Thread: void interrupt()>();

     label5:
        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>("Error in extension content: ", $r3);

     label6:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected org.apache.log4j.Appender parseAppender(org.w3c.dom.Element)
    {
        java.lang.Thread $r46;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Exception $r45;
        org.apache.log4j.config.PropertySetter $r12;
        org.apache.log4j.Layout $r44;
        org.apache.log4j.xml.DOMConfigurator r0;
        short $s1;
        org.apache.log4j.Appender r11, $r43;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r26, $r27, $r28, $r29, $r31, $r32, $r35, $r36, $r37, $r38, $r40, $r41;
        org.w3c.dom.Node $r16;
        int $i0, i2;
        java.lang.String $r2, $r3, $r8, $r13, $r14, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r30, $r33, $r39, $r42;
        org.w3c.dom.NodeList $r15;
        java.util.Properties $r23;
        org.apache.log4j.spi.AppenderAttachable r34;
        org.w3c.dom.Element r1, r17;
        java.lang.Class $r9;
        java.lang.Object $r10;

        r0 := @this: org.apache.log4j.xml.DOMConfigurator;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

        $r3 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r2);

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class name: [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r8);

     label01:
        $r9 = staticinvoke <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>($r3);

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Object newInstance()>();

        r11 = (org.apache.log4j.Appender) $r10;

        $r12 = new org.apache.log4j.config.PropertySetter;

        specialinvoke $r12.<org.apache.log4j.config.PropertySetter: void <init>(java.lang.Object)>(r11);

        $r13 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        $r14 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r13);

        interfaceinvoke r11.<org.apache.log4j.Appender: void setName(java.lang.String)>($r14);

        $r15 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i0 = interfaceinvoke $r15.<org.w3c.dom.NodeList: int getLength()>();

        i2 = 0;

     label02:
        if i2 >= $i0 goto label11;

        $r16 = interfaceinvoke $r15.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $s1 = interfaceinvoke $r16.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label10;

        r17 = (org.w3c.dom.Element) $r16;

        $r18 = interfaceinvoke r17.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("param");

        if $z0 == 0 goto label03;

        virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: void setParameter(org.w3c.dom.Element,org.apache.log4j.config.PropertySetter)>(r17, $r12);

        goto label10;

     label03:
        $r19 = interfaceinvoke r17.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z1 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("layout");

        if $z1 == 0 goto label04;

        $r44 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.Layout parseLayout(org.w3c.dom.Element)>(r17);

        interfaceinvoke r11.<org.apache.log4j.Appender: void setLayout(org.apache.log4j.Layout)>($r44);

        goto label10;

     label04:
        $r20 = interfaceinvoke r17.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z2 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("filter");

        if $z2 == 0 goto label05;

        virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: void parseFilters(org.w3c.dom.Element,org.apache.log4j.Appender)>(r17, r11);

        goto label10;

     label05:
        $r21 = interfaceinvoke r17.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z3 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>("errorHandler");

        if $z3 == 0 goto label06;

        virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: void parseErrorHandler(org.w3c.dom.Element,org.apache.log4j.Appender)>(r17, r11);

        goto label10;

     label06:
        $r22 = interfaceinvoke r17.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z4 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("appender-ref");

        if $z4 == 0 goto label09;

        $r24 = interfaceinvoke r17.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("ref");

        $r25 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r24);

        $z5 = r11 instanceof org.apache.log4j.spi.AppenderAttachable;

        if $z5 == 0 goto label07;

        r34 = (org.apache.log4j.spi.AppenderAttachable) r11;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attaching appender named [");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] to appender named [");

        $r39 = interfaceinvoke r11.<org.apache.log4j.Appender: java.lang.String getName()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r42);

        $r43 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.Appender findAppenderByReference(org.w3c.dom.Element)>(r17);

        interfaceinvoke r34.<org.apache.log4j.spi.AppenderAttachable: void addAppender(org.apache.log4j.Appender)>($r43);

        goto label08;

     label07:
        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Requesting attachment of appender named [");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] to appender named [");

        $r30 = interfaceinvoke r11.<org.apache.log4j.Appender: java.lang.String getName()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] which does not implement org.apache.log4j.spi.AppenderAttachable.");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r33);

     label08:
        goto label10;

     label09:
        $r23 = r0.<org.apache.log4j.xml.DOMConfigurator: java.util.Properties props>;

        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void parseUnrecognizedElement(java.lang.Object,org.w3c.dom.Element,java.util.Properties)>($r10, r17, $r23);

     label10:
        i2 = i2 + 1;

        goto label02;

     label11:
        virtualinvoke $r12.<org.apache.log4j.config.PropertySetter: void activate()>();

     label12:
        return r11;

     label13:
        $r45 := @caughtexception;

        $z6 = $r45 instanceof java.lang.InterruptedException;

        if $z6 != 0 goto label14;

        $z7 = $r45 instanceof java.io.InterruptedIOException;

        if $z7 == 0 goto label15;

     label14:
        $r46 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r46.<java.lang.Thread: void interrupt()>();

     label15:
        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>("Could not create an Appender. Reported error follows.", $r45);

        return null;

        catch java.lang.Exception from label01 to label12 with label13;
    }

    protected void parseErrorHandler(org.w3c.dom.Element, org.apache.log4j.Appender)
    {
        org.apache.log4j.xml.DOMConfigurator r0;
        org.apache.log4j.Logger $r14, $r23;
        short $s1;
        org.apache.log4j.Appender r6, $r20;
        org.w3c.dom.Node $r9;
        int $i0, i2;
        java.lang.String $r2, $r3, $r11, $r15;
        boolean $z0, $z1, $z2, $z3;
        org.w3c.dom.NodeList $r8;
        java.util.Properties $r12;
        org.apache.log4j.spi.ErrorHandler $r21;
        org.apache.log4j.config.PropertySetter $r7;
        org.w3c.dom.Element r1, r10;
        org.apache.log4j.spi.LoggerFactory $r16, $r17;
        java.lang.Class $r4, $r22;
        java.lang.Object $r5;
        org.apache.log4j.spi.LoggerRepository $r13, $r18, $r19;

        r0 := @this: org.apache.log4j.xml.DOMConfigurator;

        r1 := @parameter0: org.w3c.dom.Element;

        r6 := @parameter1: org.apache.log4j.Appender;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

        $r3 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r2);

        $r4 = <org.apache.log4j.xml.DOMConfigurator: java.lang.Class class$org$apache$log4j$spi$ErrorHandler>;

        if $r4 != null goto label01;

        $r22 = staticinvoke <org.apache.log4j.xml.DOMConfigurator: java.lang.Class class$(java.lang.String)>("org.apache.log4j.spi.ErrorHandler");

        <org.apache.log4j.xml.DOMConfigurator: java.lang.Class class$org$apache$log4j$spi$ErrorHandler> = $r22;

        goto label02;

     label01:
        $r22 = <org.apache.log4j.xml.DOMConfigurator: java.lang.Class class$org$apache$log4j$spi$ErrorHandler>;

     label02:
        $r5 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>($r3, $r22, null);

        $r21 = (org.apache.log4j.spi.ErrorHandler) $r5;

        if $r21 == null goto label12;

        interfaceinvoke $r21.<org.apache.log4j.spi.ErrorHandler: void setAppender(org.apache.log4j.Appender)>(r6);

        $r7 = new org.apache.log4j.config.PropertySetter;

        specialinvoke $r7.<org.apache.log4j.config.PropertySetter: void <init>(java.lang.Object)>($r21);

        $r8 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i0 = interfaceinvoke $r8.<org.w3c.dom.NodeList: int getLength()>();

        i2 = 0;

     label03:
        if i2 >= $i0 goto label11;

        $r9 = interfaceinvoke $r8.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $s1 = interfaceinvoke $r9.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label10;

        r10 = (org.w3c.dom.Element) $r9;

        $r11 = interfaceinvoke r10.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("param");

        if $z0 == 0 goto label04;

        virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: void setParameter(org.w3c.dom.Element,org.apache.log4j.config.PropertySetter)>(r10, $r7);

        goto label10;

     label04:
        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("appender-ref");

        if $z1 == 0 goto label05;

        $r20 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.Appender findAppenderByReference(org.w3c.dom.Element)>(r10);

        interfaceinvoke $r21.<org.apache.log4j.spi.ErrorHandler: void setBackupAppender(org.apache.log4j.Appender)>($r20);

        goto label10;

     label05:
        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("logger-ref");

        if $z2 == 0 goto label08;

        $r15 = interfaceinvoke r10.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("ref");

        $r16 = r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerFactory catFactory>;

        if $r16 != null goto label06;

        $r19 = r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerRepository repository>;

        $r23 = interfaceinvoke $r19.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String)>($r15);

        goto label07;

     label06:
        $r18 = r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerRepository repository>;

        $r17 = r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerFactory catFactory>;

        $r23 = interfaceinvoke $r18.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>($r15, $r17);

     label07:
        interfaceinvoke $r21.<org.apache.log4j.spi.ErrorHandler: void setLogger(org.apache.log4j.Logger)>($r23);

        goto label10;

     label08:
        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("root-ref");

        if $z3 == 0 goto label09;

        $r13 = r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerRepository repository>;

        $r14 = interfaceinvoke $r13.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getRootLogger()>();

        interfaceinvoke $r21.<org.apache.log4j.spi.ErrorHandler: void setLogger(org.apache.log4j.Logger)>($r14);

        goto label10;

     label09:
        $r12 = r0.<org.apache.log4j.xml.DOMConfigurator: java.util.Properties props>;

        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void quietParseUnrecognizedElement(java.lang.Object,org.w3c.dom.Element,java.util.Properties)>($r21, r10, $r12);

     label10:
        i2 = i2 + 1;

        goto label03;

     label11:
        virtualinvoke $r7.<org.apache.log4j.config.PropertySetter: void activate()>();

        interfaceinvoke r6.<org.apache.log4j.Appender: void setErrorHandler(org.apache.log4j.spi.ErrorHandler)>($r21);

     label12:
        return;
    }

    protected void parseFilters(org.w3c.dom.Element, org.apache.log4j.Appender)
    {
        org.apache.log4j.xml.DOMConfigurator r0;
        short $s1;
        org.apache.log4j.Appender r13;
        java.lang.StringBuffer $r8, $r9, $r11, $r12, $r15, $r16;
        org.w3c.dom.Node $r18;
        int $i0, i2;
        java.lang.String $r2, $r3, $r14, $r17, $r20;
        boolean $z0;
        org.w3c.dom.NodeList $r7;
        java.util.Properties $r21;
        org.apache.log4j.spi.Filter $r22;
        org.apache.log4j.config.PropertySetter $r6;
        org.w3c.dom.Element r1, r19;
        java.lang.Class $r4, $r10, $r23;
        java.lang.Object $r5;

        r0 := @this: org.apache.log4j.xml.DOMConfigurator;

        r1 := @parameter0: org.w3c.dom.Element;

        r13 := @parameter1: org.apache.log4j.Appender;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

        $r3 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r2);

        $r4 = <org.apache.log4j.xml.DOMConfigurator: java.lang.Class class$org$apache$log4j$spi$Filter>;

        if $r4 != null goto label1;

        $r23 = staticinvoke <org.apache.log4j.xml.DOMConfigurator: java.lang.Class class$(java.lang.String)>("org.apache.log4j.spi.Filter");

        <org.apache.log4j.xml.DOMConfigurator: java.lang.Class class$org$apache$log4j$spi$Filter> = $r23;

        goto label2;

     label1:
        $r23 = <org.apache.log4j.xml.DOMConfigurator: java.lang.Class class$org$apache$log4j$spi$Filter>;

     label2:
        $r5 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>($r3, $r23, null);

        $r22 = (org.apache.log4j.spi.Filter) $r5;

        if $r22 == null goto label7;

        $r6 = new org.apache.log4j.config.PropertySetter;

        specialinvoke $r6.<org.apache.log4j.config.PropertySetter: void <init>(java.lang.Object)>($r22);

        $r7 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i0 = interfaceinvoke $r7.<org.w3c.dom.NodeList: int getLength()>();

        i2 = 0;

     label3:
        if i2 >= $i0 goto label6;

        $r18 = interfaceinvoke $r7.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $s1 = interfaceinvoke $r18.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label5;

        r19 = (org.w3c.dom.Element) $r18;

        $r20 = interfaceinvoke r19.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("param");

        if $z0 == 0 goto label4;

        virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: void setParameter(org.w3c.dom.Element,org.apache.log4j.config.PropertySetter)>(r19, $r6);

        goto label5;

     label4:
        $r21 = r0.<org.apache.log4j.xml.DOMConfigurator: java.util.Properties props>;

        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void quietParseUnrecognizedElement(java.lang.Object,org.w3c.dom.Element,java.util.Properties)>($r22, r19, $r21);

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        virtualinvoke $r6.<org.apache.log4j.config.PropertySetter: void activate()>();

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Adding filter of type [");

        $r10 = virtualinvoke $r22.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] to appender named [");

        $r14 = interfaceinvoke r13.<org.apache.log4j.Appender: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r17);

        interfaceinvoke r13.<org.apache.log4j.Appender: void addFilter(org.apache.log4j.spi.Filter)>($r22);

     label7:
        return;
    }

    protected void parseCategory(org.w3c.dom.Element)
    {
        org.apache.log4j.Logger $r42, r43, r49;
        java.lang.Thread $r40;
        java.lang.reflect.Method $r14;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Exception $r32;
        java.lang.reflect.InvocationTargetException $r38;
        org.apache.log4j.spi.LoggerFactory $r27, $r28;
        java.lang.Throwable $r31, $r39, $r41;
        java.lang.Object[] $r15;
        org.apache.log4j.xml.DOMConfigurator r0;
        java.lang.StringBuffer $r7, $r8, $r9, $r10, $r19, $r20, $r22, $r23, $r24, $r25, $r33, $r34, $r35, $r36, $r44, $r45, $r46, $r47;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r11, $r17, $r18, $r21, $r26, $r37, $r48;
        java.lang.Class[] $r13;
        org.w3c.dom.Element r1;
        java.lang.Class $r12;
        java.lang.Object $r16;
        org.apache.log4j.spi.LoggerRepository $r29, $r30;

        r0 := @this: org.apache.log4j.xml.DOMConfigurator;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        $r3 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r2);

        $r4 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

        $r5 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r4);

        $r6 = "";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label03;

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>("Retreiving an instance of org.apache.log4j.Logger.");

        $r27 = r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerFactory catFactory>;

        if $r27 != null goto label01;

        $r30 = r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerRepository repository>;

        $r42 = interfaceinvoke $r30.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String)>($r3);

        goto label02;

     label01:
        $r29 = r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerRepository repository>;

        $r28 = r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerFactory catFactory>;

        $r42 = interfaceinvoke $r29.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>($r3, $r28);

     label02:
        r43 = $r42;

        goto label10;

     label03:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Desired logger sub-class: [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r11);

     label04:
        $r12 = staticinvoke <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>($r5);

        $r13 = <org.apache.log4j.xml.DOMConfigurator: java.lang.Class[] ONE_STRING_PARAM>;

        $r14 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getLogger", $r13);

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = $r3;

        $r16 = virtualinvoke $r14.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r15);

        r43 = (org.apache.log4j.Logger) $r16;

     label05:
        goto label10;

     label06:
        $r38 := @caughtexception;

        $r39 = virtualinvoke $r38.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z2 = $r39 instanceof java.lang.InterruptedException;

        if $z2 != 0 goto label07;

        $r41 = virtualinvoke $r38.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z3 = $r41 instanceof java.io.InterruptedIOException;

        if $z3 == 0 goto label08;

     label07:
        $r40 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r40.<java.lang.Thread: void interrupt()>();

     label08:
        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not retrieve category [");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]. Reported error follows.");

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r48, $r38);

        return;

     label09:
        $r32 := @caughtexception;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not retrieve category [");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]. Reported error follows.");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r37, $r32);

        return;

     label10:
        r49 = r43;

        entermonitor r43;

     label11:
        $r17 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("additivity");

        $r18 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r17);

        $z1 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>($r18, 1);

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Setting [");

        $r21 = virtualinvoke r43.<org.apache.log4j.Category: java.lang.String getName()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] additivity to [");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r26);

        virtualinvoke r43.<org.apache.log4j.Category: void setAdditivity(boolean)>($z1);

        virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: void parseChildrenOfLoggerElement(org.w3c.dom.Element,org.apache.log4j.Logger,boolean)>(r1, r43, 0);

        exitmonitor r43;

     label12:
        goto label15;

     label13:
        $r31 := @caughtexception;

        exitmonitor r49;

     label14:
        throw $r31;

     label15:
        return;

        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label06;
        catch java.lang.Exception from label04 to label05 with label09;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    protected void parseCategoryFactory(org.w3c.dom.Element)
    {
        org.apache.log4j.xml.DOMConfigurator r0;
        short $s1;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r12, $r13, $r14, $r15;
        org.w3c.dom.Node $r19;
        int $i0, i2;
        java.lang.String $r2, $r3, $r4, $r9, $r16, $r20;
        boolean $z0, $z1, $z2;
        org.w3c.dom.NodeList $r18;
        java.util.Properties $r21;
        org.apache.log4j.config.PropertySetter $r17;
        org.w3c.dom.Element r1, r24;
        org.apache.log4j.spi.LoggerFactory $r22;
        java.lang.Class $r10, $r23;
        java.lang.Object $r11;

        r0 := @this: org.apache.log4j.xml.DOMConfigurator;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

        $r3 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r2);

        $r4 = "";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>("Category Factory tag class attribute not found.");

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>("No Category Factory configured.");

        goto label9;

     label1:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Desired category factory: [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r9);

        $r10 = <org.apache.log4j.xml.DOMConfigurator: java.lang.Class class$org$apache$log4j$spi$LoggerFactory>;

        if $r10 != null goto label2;

        $r23 = staticinvoke <org.apache.log4j.xml.DOMConfigurator: java.lang.Class class$(java.lang.String)>("org.apache.log4j.spi.LoggerFactory");

        <org.apache.log4j.xml.DOMConfigurator: java.lang.Class class$org$apache$log4j$spi$LoggerFactory> = $r23;

        goto label3;

     label2:
        $r23 = <org.apache.log4j.xml.DOMConfigurator: java.lang.Class class$org$apache$log4j$spi$LoggerFactory>;

     label3:
        $r11 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>($r3, $r23, null);

        $z1 = $r11 instanceof org.apache.log4j.spi.LoggerFactory;

        if $z1 == 0 goto label4;

        $r22 = (org.apache.log4j.spi.LoggerFactory) $r11;

        r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerFactory catFactory> = $r22;

        goto label5;

     label4:
        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Category Factory class ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not implement org.apache.log4j.LoggerFactory");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r16);

     label5:
        $r17 = new org.apache.log4j.config.PropertySetter;

        specialinvoke $r17.<org.apache.log4j.config.PropertySetter: void <init>(java.lang.Object)>($r11);

        $r18 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i0 = interfaceinvoke $r18.<org.w3c.dom.NodeList: int getLength()>();

        i2 = 0;

     label6:
        if i2 >= $i0 goto label9;

        $r19 = interfaceinvoke $r18.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $s1 = interfaceinvoke $r19.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label8;

        r24 = (org.w3c.dom.Element) $r19;

        $r20 = interfaceinvoke r24.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z2 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("param");

        if $z2 == 0 goto label7;

        virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: void setParameter(org.w3c.dom.Element,org.apache.log4j.config.PropertySetter)>(r24, $r17);

        goto label8;

     label7:
        $r21 = r0.<org.apache.log4j.xml.DOMConfigurator: java.util.Properties props>;

        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void quietParseUnrecognizedElement(java.lang.Object,org.w3c.dom.Element,java.util.Properties)>($r11, r24, $r21);

     label8:
        i2 = i2 + 1;

        goto label6;

     label9:
        return;
    }

    protected void parseRoot(org.w3c.dom.Element)
    {
        org.apache.log4j.xml.DOMConfigurator r0;
        java.lang.Throwable $r4;
        org.apache.log4j.Logger $r2;
        org.w3c.dom.Element r3;
        org.apache.log4j.spi.LoggerRepository $r1;

        r0 := @this: org.apache.log4j.xml.DOMConfigurator;

        r3 := @parameter0: org.w3c.dom.Element;

        $r1 = r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerRepository repository>;

        $r2 = interfaceinvoke $r1.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getRootLogger()>();

        entermonitor $r2;

     label1:
        virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: void parseChildrenOfLoggerElement(org.w3c.dom.Element,org.apache.log4j.Logger,boolean)>(r3, $r2, 1);

        exitmonitor $r2;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void parseChildrenOfLoggerElement(org.w3c.dom.Element, org.apache.log4j.Logger, boolean)
    {
        org.apache.log4j.Logger r1;
        boolean $z0, $z1, $z2, $z3, z4;
        org.apache.log4j.config.PropertySetter $r0;
        org.apache.log4j.xml.DOMConfigurator r7;
        short $s1;
        org.apache.log4j.Appender $r10;
        java.lang.StringBuffer $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r23, $r24;
        org.w3c.dom.Node $r4;
        int $i0, i2;
        java.lang.String $r6, $r11, $r12, $r17, $r22, $r25;
        org.w3c.dom.NodeList $r3;
        java.util.Properties $r8;
        org.w3c.dom.Element r2, r5, r9;

        r7 := @this: org.apache.log4j.xml.DOMConfigurator;

        r2 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: org.apache.log4j.Logger;

        z4 := @parameter2: boolean;

        $r0 = new org.apache.log4j.config.PropertySetter;

        specialinvoke $r0.<org.apache.log4j.config.PropertySetter: void <init>(java.lang.Object)>(r1);

        virtualinvoke r1.<org.apache.log4j.Category: void removeAllAppenders()>();

        $r3 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label9;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $s1 = interfaceinvoke $r4.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label8;

        r5 = (org.w3c.dom.Element) $r4;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("appender-ref");

        if $z0 == 0 goto label4;

        r9 = (org.w3c.dom.Element) $r4;

        $r10 = virtualinvoke r7.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.Appender findAppenderByReference(org.w3c.dom.Element)>(r9);

        $r11 = interfaceinvoke r9.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("ref");

        $r12 = virtualinvoke r7.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r11);

        if $r10 == null goto label2;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Adding appender named [");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] to category [");

        $r22 = virtualinvoke r1.<org.apache.log4j.Category: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r25);

        goto label3;

     label2:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Appender named [");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] not found.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r17);

     label3:
        virtualinvoke r1.<org.apache.log4j.Category: void addAppender(org.apache.log4j.Appender)>($r10);

        goto label8;

     label4:
        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("level");

        if $z1 == 0 goto label5;

        virtualinvoke r7.<org.apache.log4j.xml.DOMConfigurator: void parseLevel(org.w3c.dom.Element,org.apache.log4j.Logger,boolean)>(r5, r1, z4);

        goto label8;

     label5:
        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("priority");

        if $z2 == 0 goto label6;

        virtualinvoke r7.<org.apache.log4j.xml.DOMConfigurator: void parseLevel(org.w3c.dom.Element,org.apache.log4j.Logger,boolean)>(r5, r1, z4);

        goto label8;

     label6:
        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("param");

        if $z3 == 0 goto label7;

        virtualinvoke r7.<org.apache.log4j.xml.DOMConfigurator: void setParameter(org.w3c.dom.Element,org.apache.log4j.config.PropertySetter)>(r5, $r0);

        goto label8;

     label7:
        $r8 = r7.<org.apache.log4j.xml.DOMConfigurator: java.util.Properties props>;

        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void quietParseUnrecognizedElement(java.lang.Object,org.w3c.dom.Element,java.util.Properties)>(r1, r5, $r8);

     label8:
        i2 = i2 + 1;

        goto label1;

     label9:
        virtualinvoke $r0.<org.apache.log4j.config.PropertySetter: void activate()>();

        return;
    }

    protected org.apache.log4j.Layout parseLayout(org.w3c.dom.Element)
    {
        org.apache.log4j.xml.DOMConfigurator r0;
        short $s1;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        org.w3c.dom.Node $r14;
        java.lang.Thread $r19;
        int $i0, i2;
        java.lang.String $r2, $r3, $r8, $r16;
        boolean $z0, $z1, $z2;
        org.w3c.dom.NodeList $r13;
        java.util.Properties $r17;
        java.lang.Exception $r18;
        org.apache.log4j.config.PropertySetter $r12;
        org.w3c.dom.Element r1, r15;
        java.lang.Class $r9;
        java.lang.Object $r10;
        org.apache.log4j.Layout r11;

        r0 := @this: org.apache.log4j.xml.DOMConfigurator;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

        $r3 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r2);

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Parsing layout of class: \"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r8);

     label1:
        $r9 = staticinvoke <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>($r3);

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Object newInstance()>();

        r11 = (org.apache.log4j.Layout) $r10;

        $r12 = new org.apache.log4j.config.PropertySetter;

        specialinvoke $r12.<org.apache.log4j.config.PropertySetter: void <init>(java.lang.Object)>(r11);

        $r13 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i0 = interfaceinvoke $r13.<org.w3c.dom.NodeList: int getLength()>();

        i2 = 0;

     label2:
        if i2 >= $i0 goto label5;

        $r14 = interfaceinvoke $r13.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $s1 = interfaceinvoke $r14.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label4;

        r15 = (org.w3c.dom.Element) $r14;

        $r16 = interfaceinvoke r15.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("param");

        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: void setParameter(org.w3c.dom.Element,org.apache.log4j.config.PropertySetter)>(r15, $r12);

        goto label4;

     label3:
        $r17 = r0.<org.apache.log4j.xml.DOMConfigurator: java.util.Properties props>;

        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void parseUnrecognizedElement(java.lang.Object,org.w3c.dom.Element,java.util.Properties)>($r10, r15, $r17);

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        virtualinvoke $r12.<org.apache.log4j.config.PropertySetter: void activate()>();

     label6:
        return r11;

     label7:
        $r18 := @caughtexception;

        $z1 = $r18 instanceof java.lang.InterruptedException;

        if $z1 != 0 goto label8;

        $z2 = $r18 instanceof java.io.InterruptedIOException;

        if $z2 == 0 goto label9;

     label8:
        $r19 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r19.<java.lang.Thread: void interrupt()>();

     label9:
        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>("Could not create the Layout. Reported error follows.", $r18);

        return null;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    protected void parseRenderer(org.w3c.dom.Element)
    {
        org.apache.log4j.spi.RendererSupport $r8;
        org.apache.log4j.xml.DOMConfigurator r0;
        org.w3c.dom.Element r1;
        org.apache.log4j.spi.LoggerRepository $r6, $r7;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.log4j.xml.DOMConfigurator;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("renderingClass");

        $r3 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r2);

        $r4 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("renderedClass");

        $r5 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r4);

        $r6 = r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerRepository repository>;

        $z0 = $r6 instanceof org.apache.log4j.spi.RendererSupport;

        if $z0 == 0 goto label1;

        $r7 = r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerRepository repository>;

        $r8 = (org.apache.log4j.spi.RendererSupport) $r7;

        staticinvoke <org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>($r8, $r5, $r3);

     label1:
        return;
    }

    protected org.apache.log4j.spi.ThrowableRenderer parseThrowableRenderer(org.w3c.dom.Element)
    {
        org.apache.log4j.spi.ThrowableRenderer r11;
        org.apache.log4j.xml.DOMConfigurator r0;
        short $s1;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        org.w3c.dom.Node $r14;
        java.lang.Thread $r19;
        int $i0, i2;
        java.lang.String $r2, $r3, $r8, $r16;
        boolean $z0, $z1, $z2;
        org.w3c.dom.NodeList $r13;
        java.util.Properties $r17;
        java.lang.Exception $r18;
        org.apache.log4j.config.PropertySetter $r12;
        org.w3c.dom.Element r1, r15;
        java.lang.Class $r9;
        java.lang.Object $r10;

        r0 := @this: org.apache.log4j.xml.DOMConfigurator;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

        $r3 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r2);

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Parsing throwableRenderer of class: \"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r8);

     label1:
        $r9 = staticinvoke <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>($r3);

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Object newInstance()>();

        r11 = (org.apache.log4j.spi.ThrowableRenderer) $r10;

        $r12 = new org.apache.log4j.config.PropertySetter;

        specialinvoke $r12.<org.apache.log4j.config.PropertySetter: void <init>(java.lang.Object)>(r11);

        $r13 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i0 = interfaceinvoke $r13.<org.w3c.dom.NodeList: int getLength()>();

        i2 = 0;

     label2:
        if i2 >= $i0 goto label5;

        $r14 = interfaceinvoke $r13.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $s1 = interfaceinvoke $r14.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label4;

        r15 = (org.w3c.dom.Element) $r14;

        $r16 = interfaceinvoke r15.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("param");

        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: void setParameter(org.w3c.dom.Element,org.apache.log4j.config.PropertySetter)>(r15, $r12);

        goto label4;

     label3:
        $r17 = r0.<org.apache.log4j.xml.DOMConfigurator: java.util.Properties props>;

        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void parseUnrecognizedElement(java.lang.Object,org.w3c.dom.Element,java.util.Properties)>($r10, r15, $r17);

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        virtualinvoke $r12.<org.apache.log4j.config.PropertySetter: void activate()>();

     label6:
        return r11;

     label7:
        $r18 := @caughtexception;

        $z1 = $r18 instanceof java.lang.InterruptedException;

        if $z1 != 0 goto label8;

        $z2 = $r18 instanceof java.io.InterruptedIOException;

        if $z2 == 0 goto label9;

     label8:
        $r19 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r19.<java.lang.Thread: void interrupt()>();

     label9:
        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>("Could not create the ThrowableRenderer. Reported error follows.", $r18);

        return null;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    protected void parseLevel(org.w3c.dom.Element, org.apache.log4j.Logger, boolean)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r27, $r28, $r29, $r41;
        java.lang.Thread $r31;
        java.lang.reflect.Method $r24;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Exception $r30;
        java.lang.Object[] $r25;
        org.apache.log4j.xml.DOMConfigurator r1;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r9, $r10, $r17, $r18, $r19, $r20, $r33, $r34, $r35, $r36, $r38, $r39, $r40, $r42;
        java.lang.String $r3, $r4, $r11, $r12, $r13, $r14, $r15, $r16, $r21, r32, $r37, $r43;
        java.lang.Class[] $r23;
        org.w3c.dom.Element r2;
        java.lang.Class $r22;
        java.lang.Object $r26;

        r1 := @this: org.apache.log4j.xml.DOMConfigurator;

        r2 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.apache.log4j.Logger;

        z0 := @parameter2: boolean;

        r32 = virtualinvoke r0.<org.apache.log4j.Category: java.lang.String getName()>();

        if z0 == 0 goto label01;

        r32 = "root";

     label01:
        $r3 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

        $r4 = virtualinvoke r1.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r3);

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Level value for ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r32);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is  [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r11);

        $r12 = "inherited";

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z1 != 0 goto label02;

        $r13 = "null";

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z2 == 0 goto label04;

     label02:
        if z0 == 0 goto label03;

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>("Root level cannot be inherited. Ignoring directive.");

        goto label11;

     label03:
        virtualinvoke r0.<org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)>(null);

        goto label11;

     label04:
        $r14 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

        $r15 = virtualinvoke r1.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r14);

        $r16 = "";

        $z3 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z3 == 0 goto label05;

        $r28 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r29 = staticinvoke <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>($r4, $r28);

        virtualinvoke r0.<org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)>($r29);

        goto label11;

     label05:
        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Desired Level sub-class: [");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r21);

     label06:
        $r22 = staticinvoke <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>($r15);

        $r23 = <org.apache.log4j.xml.DOMConfigurator: java.lang.Class[] ONE_STRING_PARAM>;

        $r24 = virtualinvoke $r22.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("toLevel", $r23);

        $r25 = newarray (java.lang.Object)[1];

        $r25[0] = $r4;

        $r26 = virtualinvoke $r24.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r25);

        r27 = (org.apache.log4j.Level) $r26;

        virtualinvoke r0.<org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)>(r27);

     label07:
        goto label11;

     label08:
        $r30 := @caughtexception;

        $z4 = $r30 instanceof java.lang.InterruptedException;

        if $z4 != 0 goto label09;

        $z5 = $r30 instanceof java.io.InterruptedIOException;

        if $z5 == 0 goto label10;

     label09:
        $r31 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r31.<java.lang.Thread: void interrupt()>();

     label10:
        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not create level [");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]. Reported error follows.");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r37, $r30);

        return;

     label11:
        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r32);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" level set to ");

        $r41 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getLevel()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r43);

        return;

        catch java.lang.Exception from label06 to label07 with label08;
    }

    protected void setParameter(org.w3c.dom.Element, org.apache.log4j.config.PropertySetter)
    {
        org.apache.log4j.xml.DOMConfigurator r0;
        org.apache.log4j.config.PropertySetter r7;
        org.w3c.dom.Element r1;
        java.lang.String $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.log4j.xml.DOMConfigurator;

        r1 := @parameter0: org.w3c.dom.Element;

        r7 := @parameter1: org.apache.log4j.config.PropertySetter;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        $r3 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r2);

        $r4 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

        $r5 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String convertSpecialChars(java.lang.String)>($r4);

        $r6 = virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r5);

        virtualinvoke r7.<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>($r3, $r6);

        return;
    }

    public static void configure(org.w3c.dom.Element)
    {
        org.apache.log4j.xml.DOMConfigurator $r0;
        org.apache.log4j.spi.LoggerRepository $r2;
        org.w3c.dom.Element r1;

        r1 := @parameter0: org.w3c.dom.Element;

        $r0 = new org.apache.log4j.xml.DOMConfigurator;

        specialinvoke $r0.<org.apache.log4j.xml.DOMConfigurator: void <init>()>();

        $r2 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        virtualinvoke $r0.<org.apache.log4j.xml.DOMConfigurator: void doConfigure(org.w3c.dom.Element,org.apache.log4j.spi.LoggerRepository)>(r1, $r2);

        return;
    }

    public static void configureAndWatch(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void configureAndWatch(java.lang.String,long)>(r0, 60000L);

        return;
    }

    public static void configureAndWatch(java.lang.String, long)
    {
        long l0;
        java.lang.String r1;
        org.apache.log4j.xml.XMLWatchdog $r0;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r0 = new org.apache.log4j.xml.XMLWatchdog;

        specialinvoke $r0.<org.apache.log4j.xml.XMLWatchdog: void <init>(java.lang.String)>(r1);

        virtualinvoke $r0.<org.apache.log4j.helpers.FileWatchdog: void setDelay(long)>(l0);

        virtualinvoke $r0.<java.lang.Thread: void start()>();

        return;
    }

    public void doConfigure(java.lang.String, org.apache.log4j.spi.LoggerRepository)
    {
        org.apache.log4j.xml.DOMConfigurator r1;
        org.apache.log4j.spi.LoggerRepository r3;
        java.lang.String r2;
        org.apache.log4j.xml.DOMConfigurator$1 $r0;

        r1 := @this: org.apache.log4j.xml.DOMConfigurator;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.log4j.spi.LoggerRepository;

        $r0 = new org.apache.log4j.xml.DOMConfigurator$1;

        specialinvoke $r0.<org.apache.log4j.xml.DOMConfigurator$1: void <init>(org.apache.log4j.xml.DOMConfigurator,java.lang.String)>(r1, r2);

        specialinvoke r1.<org.apache.log4j.xml.DOMConfigurator: void doConfigure(org.apache.log4j.xml.DOMConfigurator$ParseAction,org.apache.log4j.spi.LoggerRepository)>($r0, r3);

        return;
    }

    public void doConfigure(java.net.URL, org.apache.log4j.spi.LoggerRepository)
    {
        org.apache.log4j.xml.DOMConfigurator r1;
        java.net.URL r2;
        org.apache.log4j.xml.DOMConfigurator$2 $r0;
        org.apache.log4j.spi.LoggerRepository r3;

        r1 := @this: org.apache.log4j.xml.DOMConfigurator;

        r2 := @parameter0: java.net.URL;

        r3 := @parameter1: org.apache.log4j.spi.LoggerRepository;

        $r0 = new org.apache.log4j.xml.DOMConfigurator$2;

        specialinvoke $r0.<org.apache.log4j.xml.DOMConfigurator$2: void <init>(org.apache.log4j.xml.DOMConfigurator,java.net.URL)>(r1, r2);

        specialinvoke r1.<org.apache.log4j.xml.DOMConfigurator: void doConfigure(org.apache.log4j.xml.DOMConfigurator$ParseAction,org.apache.log4j.spi.LoggerRepository)>($r0, r3);

        return;
    }

    public void doConfigure(java.io.InputStream, org.apache.log4j.spi.LoggerRepository) throws javax.xml.parsers.FactoryConfigurationError
    {
        org.apache.log4j.xml.DOMConfigurator r1;
        org.apache.log4j.xml.DOMConfigurator$3 $r0;
        org.apache.log4j.spi.LoggerRepository r3;
        java.io.InputStream r2;

        r1 := @this: org.apache.log4j.xml.DOMConfigurator;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: org.apache.log4j.spi.LoggerRepository;

        $r0 = new org.apache.log4j.xml.DOMConfigurator$3;

        specialinvoke $r0.<org.apache.log4j.xml.DOMConfigurator$3: void <init>(org.apache.log4j.xml.DOMConfigurator,java.io.InputStream)>(r1, r2);

        specialinvoke r1.<org.apache.log4j.xml.DOMConfigurator: void doConfigure(org.apache.log4j.xml.DOMConfigurator$ParseAction,org.apache.log4j.spi.LoggerRepository)>($r0, r3);

        return;
    }

    public void doConfigure(java.io.Reader, org.apache.log4j.spi.LoggerRepository) throws javax.xml.parsers.FactoryConfigurationError
    {
        org.apache.log4j.xml.DOMConfigurator r1;
        org.apache.log4j.xml.DOMConfigurator$4 $r0;
        org.apache.log4j.spi.LoggerRepository r3;
        java.io.Reader r2;

        r1 := @this: org.apache.log4j.xml.DOMConfigurator;

        r2 := @parameter0: java.io.Reader;

        r3 := @parameter1: org.apache.log4j.spi.LoggerRepository;

        $r0 = new org.apache.log4j.xml.DOMConfigurator$4;

        specialinvoke $r0.<org.apache.log4j.xml.DOMConfigurator$4: void <init>(org.apache.log4j.xml.DOMConfigurator,java.io.Reader)>(r1, r2);

        specialinvoke r1.<org.apache.log4j.xml.DOMConfigurator: void doConfigure(org.apache.log4j.xml.DOMConfigurator$ParseAction,org.apache.log4j.spi.LoggerRepository)>($r0, r3);

        return;
    }

    protected void doConfigure(org.xml.sax.InputSource, org.apache.log4j.spi.LoggerRepository) throws javax.xml.parsers.FactoryConfigurationError
    {
        org.apache.log4j.xml.DOMConfigurator r3;
        org.xml.sax.InputSource r0;
        org.apache.log4j.spi.LoggerRepository r4;
        java.lang.String $r1;
        org.apache.log4j.xml.DOMConfigurator$5 $r2;

        r3 := @this: org.apache.log4j.xml.DOMConfigurator;

        r0 := @parameter0: org.xml.sax.InputSource;

        r4 := @parameter1: org.apache.log4j.spi.LoggerRepository;

        $r1 = virtualinvoke r0.<org.xml.sax.InputSource: java.lang.String getSystemId()>();

        if $r1 != null goto label1;

        virtualinvoke r0.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>("dummy://log4j.dtd");

     label1:
        $r2 = new org.apache.log4j.xml.DOMConfigurator$5;

        specialinvoke $r2.<org.apache.log4j.xml.DOMConfigurator$5: void <init>(org.apache.log4j.xml.DOMConfigurator,org.xml.sax.InputSource)>(r3, r0);

        specialinvoke r3.<org.apache.log4j.xml.DOMConfigurator: void doConfigure(org.apache.log4j.xml.DOMConfigurator$ParseAction,org.apache.log4j.spi.LoggerRepository)>($r2, r4);

        return;
    }

    private final void doConfigure(org.apache.log4j.xml.DOMConfigurator$ParseAction, org.apache.log4j.spi.LoggerRepository) throws javax.xml.parsers.FactoryConfigurationError
    {
        org.w3c.dom.Document $r18;
        java.lang.Thread $r21;
        boolean $z0, $z1;
        java.lang.Exception $r20, $r23;
        javax.xml.parsers.DocumentBuilderFactory $r7;
        org.apache.log4j.xml.Log4jEntityResolver $r16;
        org.apache.log4j.xml.DOMConfigurator$ParseAction r17;
        org.apache.log4j.xml.DOMConfigurator r0;
        java.lang.StringBuffer $r2, $r3, $r5, $r8, $r9, $r12, $r24, $r25, $r27, $r28;
        org.apache.log4j.xml.SAXErrorHandler $r15;
        java.lang.String $r4, $r6, $r11, $r13, $r26, $r29;
        javax.xml.parsers.FactoryConfigurationError $r22;
        org.w3c.dom.Element $r19;
        javax.xml.parsers.DocumentBuilder $r14;
        org.apache.log4j.spi.LoggerRepository r1;
        java.lang.Class $r10;

        r0 := @this: org.apache.log4j.xml.DOMConfigurator;

        r17 := @parameter0: org.apache.log4j.xml.DOMConfigurator$ParseAction;

        r1 := @parameter1: org.apache.log4j.spi.LoggerRepository;

        r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerRepository repository> = r1;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("System property is :");

        $r4 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("javax.xml.parsers.DocumentBuilderFactory", null);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r6);

        $r7 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>("Standard DocumentBuilderFactory search succeded.");

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DocumentBuilderFactory is: ");

        $r10 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r13);

     label2:
        goto label4;

     label3:
        $r22 := @caughtexception;

        $r23 = virtualinvoke $r22.<javax.xml.parsers.FactoryConfigurationError: java.lang.Exception getException()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String,java.lang.Throwable)>("Could not instantiate a DocumentBuilderFactory.", $r23);

        throw $r22;

     label4:
        virtualinvoke $r7.<javax.xml.parsers.DocumentBuilderFactory: void setValidating(boolean)>(1);

        $r14 = virtualinvoke $r7.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r15 = new org.apache.log4j.xml.SAXErrorHandler;

        specialinvoke $r15.<org.apache.log4j.xml.SAXErrorHandler: void <init>()>();

        virtualinvoke $r14.<javax.xml.parsers.DocumentBuilder: void setErrorHandler(org.xml.sax.ErrorHandler)>($r15);

        $r16 = new org.apache.log4j.xml.Log4jEntityResolver;

        specialinvoke $r16.<org.apache.log4j.xml.Log4jEntityResolver: void <init>()>();

        virtualinvoke $r14.<javax.xml.parsers.DocumentBuilder: void setEntityResolver(org.xml.sax.EntityResolver)>($r16);

        $r18 = interfaceinvoke r17.<org.apache.log4j.xml.DOMConfigurator$ParseAction: org.w3c.dom.Document parse(javax.xml.parsers.DocumentBuilder)>($r14);

        $r19 = interfaceinvoke $r18.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: void parse(org.w3c.dom.Element)>($r19);

     label5:
        goto label9;

     label6:
        $r20 := @caughtexception;

        $z0 = $r20 instanceof java.lang.InterruptedException;

        if $z0 != 0 goto label7;

        $z1 = $r20 instanceof java.io.InterruptedIOException;

        if $z1 == 0 goto label8;

     label7:
        $r21 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r21.<java.lang.Thread: void interrupt()>();

     label8:
        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not parse ");

        $r26 = virtualinvoke r17.<java.lang.Object: java.lang.String toString()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r29, $r20);

     label9:
        return;

        catch javax.xml.parsers.FactoryConfigurationError from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public void doConfigure(org.w3c.dom.Element, org.apache.log4j.spi.LoggerRepository)
    {
        org.apache.log4j.xml.DOMConfigurator r0;
        org.apache.log4j.spi.LoggerRepository r1;
        org.w3c.dom.Element r2;

        r0 := @this: org.apache.log4j.xml.DOMConfigurator;

        r2 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: org.apache.log4j.spi.LoggerRepository;

        r0.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerRepository repository> = r1;

        virtualinvoke r0.<org.apache.log4j.xml.DOMConfigurator: void parse(org.w3c.dom.Element)>(r2);

        return;
    }

    public static void configure(java.lang.String) throws javax.xml.parsers.FactoryConfigurationError
    {
        org.apache.log4j.xml.DOMConfigurator $r0;
        org.apache.log4j.spi.LoggerRepository $r2;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.log4j.xml.DOMConfigurator;

        specialinvoke $r0.<org.apache.log4j.xml.DOMConfigurator: void <init>()>();

        $r2 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        virtualinvoke $r0.<org.apache.log4j.xml.DOMConfigurator: void doConfigure(java.lang.String,org.apache.log4j.spi.LoggerRepository)>(r1, $r2);

        return;
    }

    public static void configure(java.net.URL) throws javax.xml.parsers.FactoryConfigurationError
    {
        org.apache.log4j.xml.DOMConfigurator $r0;
        org.apache.log4j.spi.LoggerRepository $r2;
        java.net.URL r1;

        r1 := @parameter0: java.net.URL;

        $r0 = new org.apache.log4j.xml.DOMConfigurator;

        specialinvoke $r0.<org.apache.log4j.xml.DOMConfigurator: void <init>()>();

        $r2 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        virtualinvoke $r0.<org.apache.log4j.xml.DOMConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>(r1, $r2);

        return;
    }

    protected void parse(org.w3c.dom.Element)
    {
        short $s0, $s1;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r25, $r26, $r27, $r28, $r35, $r36, $r37, $r38;
        java.lang.String $r1, $r3, $r4, $r9, $r11, $r19, $r20, $r23, $r24, $r29, $r30, $r31, $r32, $r33, $r34, $r39, $r40;
        java.util.Properties $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22;
        org.apache.log4j.spi.ThrowableRendererSupport $r17;
        org.apache.log4j.spi.ThrowableRenderer $r15;
        org.apache.log4j.xml.DOMConfigurator r2;
        org.w3c.dom.Node $r10, $r18;
        int $i2, i3, i4;
        org.w3c.dom.NodeList $r41;
        org.w3c.dom.Element r0, r42, r43;
        org.apache.log4j.spi.LoggerRepository $r13, $r14, $r16, $r21, $r22;

        r2 := @this: org.apache.log4j.xml.DOMConfigurator;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("log4j:configuration");

        if $z0 != 0 goto label02;

        $z19 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("configuration");

        if $z19 == 0 goto label01;

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("The <configuration> element has been deprecated.");

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("Use the <log4j:configuration> element instead.");

        goto label02;

     label01:
        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>("DOM element is - not a <log4j:configuration> element.");

        return;

     label02:
        $r3 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("debug");

        $r4 = virtualinvoke r2.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r3);

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("debug attribute= \"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\".");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r9);

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label03;

        $z17 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("null");

        if $z17 != 0 goto label03;

        $z18 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>($r4, 1);

        staticinvoke <org.apache.log4j.helpers.LogLog: void setInternalDebugging(boolean)>($z18);

        goto label04;

     label03:
        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>("Ignoring debug attribute.");

     label04:
        $r23 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("reset");

        $r24 = virtualinvoke r2.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r23);

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("reset attribute= \"");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\".");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r29);

        $r30 = "";

        $z20 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        if $z20 != 0 goto label05;

        $z16 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>($r24, 0);

        if $z16 == 0 goto label05;

        $r22 = r2.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerRepository repository>;

        interfaceinvoke $r22.<org.apache.log4j.spi.LoggerRepository: void resetConfiguration()>();

     label05:
        $r31 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("configDebug");

        $r32 = virtualinvoke r2.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r31);

        $z21 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z21 != 0 goto label06;

        $z14 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>("null");

        if $z14 != 0 goto label06;

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("The \"configDebug\" attribute is deprecated.");

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("Use the \"debug\" attribute instead.");

        $z15 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>($r32, 1);

        staticinvoke <org.apache.log4j.helpers.LogLog: void setInternalDebugging(boolean)>($z15);

     label06:
        $r33 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("threshold");

        $r34 = virtualinvoke r2.<org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String)>($r33);

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Threshold =\"");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\".");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r39);

        $r40 = "";

        $z22 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r34);

        if $z22 != 0 goto label07;

        $r20 = "null";

        $z13 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r34);

        if $z13 != 0 goto label07;

        $r21 = r2.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerRepository repository>;

        interfaceinvoke $r21.<org.apache.log4j.spi.LoggerRepository: void setThreshold(java.lang.String)>($r34);

     label07:
        $r41 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i2 = interfaceinvoke $r41.<org.w3c.dom.NodeList: int getLength()>();

        i3 = 0;

     label08:
        if i3 >= $i2 goto label11;

        $r18 = interfaceinvoke $r41.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        $s1 = interfaceinvoke $r18.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label10;

        r42 = (org.w3c.dom.Element) $r18;

        $r19 = interfaceinvoke r42.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z11 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("categoryFactory");

        if $z11 != 0 goto label09;

        $z12 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("loggerFactory");

        if $z12 == 0 goto label10;

     label09:
        virtualinvoke r2.<org.apache.log4j.xml.DOMConfigurator: void parseCategoryFactory(org.w3c.dom.Element)>(r42);

     label10:
        i3 = i3 + 1;

        goto label08;

     label11:
        i4 = 0;

     label12:
        if i4 >= $i2 goto label20;

        $r10 = interfaceinvoke $r41.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i4);

        $s0 = interfaceinvoke $r10.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label19;

        r43 = (org.w3c.dom.Element) $r10;

        $r11 = interfaceinvoke r43.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("category");

        if $z2 != 0 goto label13;

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("logger");

        if $z3 == 0 goto label14;

     label13:
        virtualinvoke r2.<org.apache.log4j.xml.DOMConfigurator: void parseCategory(org.w3c.dom.Element)>(r43);

        goto label19;

     label14:
        $z4 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("root");

        if $z4 == 0 goto label15;

        virtualinvoke r2.<org.apache.log4j.xml.DOMConfigurator: void parseRoot(org.w3c.dom.Element)>(r43);

        goto label19;

     label15:
        $z5 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("renderer");

        if $z5 == 0 goto label16;

        virtualinvoke r2.<org.apache.log4j.xml.DOMConfigurator: void parseRenderer(org.w3c.dom.Element)>(r43);

        goto label19;

     label16:
        $z6 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("throwableRenderer");

        if $z6 == 0 goto label18;

        $r14 = r2.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerRepository repository>;

        $z10 = $r14 instanceof org.apache.log4j.spi.ThrowableRendererSupport;

        if $z10 == 0 goto label19;

        $r15 = virtualinvoke r2.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.ThrowableRenderer parseThrowableRenderer(org.w3c.dom.Element)>(r43);

        if $r15 == null goto label17;

        $r16 = r2.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerRepository repository>;

        $r17 = (org.apache.log4j.spi.ThrowableRendererSupport) $r16;

        interfaceinvoke $r17.<org.apache.log4j.spi.ThrowableRendererSupport: void setThrowableRenderer(org.apache.log4j.spi.ThrowableRenderer)>($r15);

     label17:
        goto label19;

     label18:
        $z7 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("appender");

        if $z7 != 0 goto label19;

        $z8 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("categoryFactory");

        if $z8 != 0 goto label19;

        $z9 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("loggerFactory");

        if $z9 != 0 goto label19;

        $r13 = r2.<org.apache.log4j.xml.DOMConfigurator: org.apache.log4j.spi.LoggerRepository repository>;

        $r12 = r2.<org.apache.log4j.xml.DOMConfigurator: java.util.Properties props>;

        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void quietParseUnrecognizedElement(java.lang.Object,org.w3c.dom.Element,java.util.Properties)>($r13, r43, $r12);

     label19:
        i4 = i4 + 1;

        goto label12;

     label20:
        return;
    }

    protected java.lang.String subst(java.lang.String)
    {
        org.apache.log4j.xml.DOMConfigurator r1;
        java.util.Properties $r2;
        java.lang.String r0, $r3;

        r1 := @this: org.apache.log4j.xml.DOMConfigurator;

        r0 := @parameter0: java.lang.String;

        $r2 = r1.<org.apache.log4j.xml.DOMConfigurator: java.util.Properties props>;

        $r3 = staticinvoke <org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String,java.util.Properties)>(r0, $r2);

        return $r3;
    }

    public static java.lang.String subst(java.lang.String, java.util.Properties)
    {
        java.util.Properties r1;
        java.lang.String r0, $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Properties;

     label1:
        $r2 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>(r0, r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>("Could not perform variable substitution.", $r3);

        return r0;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static void setParameter(org.w3c.dom.Element, org.apache.log4j.config.PropertySetter, java.util.Properties)
    {
        java.util.Properties r2;
        org.apache.log4j.config.PropertySetter r7;
        org.w3c.dom.Element r0;
        java.lang.String $r1, $r3, $r4, $r5, $r6;

        r0 := @parameter0: org.w3c.dom.Element;

        r7 := @parameter1: org.apache.log4j.config.PropertySetter;

        r2 := @parameter2: java.util.Properties;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        $r3 = staticinvoke <org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String,java.util.Properties)>($r1, r2);

        $r4 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

        $r5 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String convertSpecialChars(java.lang.String)>($r4);

        $r6 = staticinvoke <org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String,java.util.Properties)>($r5, r2);

        virtualinvoke r7.<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>($r3, $r6);

        return;
    }

    public static java.lang.Object parseElement(org.w3c.dom.Element, java.util.Properties, java.lang.Class) throws java.lang.Exception
    {
        java.util.Properties r2;
        org.w3c.dom.NodeList $r7;
        org.apache.log4j.config.PropertySetter $r6;
        short $s1;
        org.w3c.dom.Element r0, r9;
        org.w3c.dom.Node $r8;
        int $i0, i2;
        java.lang.Class r4;
        java.lang.Object $r5;
        java.lang.String $r1, $r3, $r10;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.util.Properties;

        r4 := @parameter2: java.lang.Class;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

        $r3 = staticinvoke <org.apache.log4j.xml.DOMConfigurator: java.lang.String subst(java.lang.String,java.util.Properties)>($r1, r2);

        $r5 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>($r3, r4, null);

        if $r5 == null goto label5;

        $r6 = new org.apache.log4j.config.PropertySetter;

        specialinvoke $r6.<org.apache.log4j.config.PropertySetter: void <init>(java.lang.Object)>($r5);

        $r7 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i0 = interfaceinvoke $r7.<org.w3c.dom.NodeList: int getLength()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        $r8 = interfaceinvoke $r7.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $s1 = interfaceinvoke $r8.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label3;

        r9 = (org.w3c.dom.Element) $r8;

        $r10 = interfaceinvoke r9.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("param");

        if $z0 == 0 goto label2;

        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void setParameter(org.w3c.dom.Element,org.apache.log4j.config.PropertySetter,java.util.Properties)>(r9, $r6, r2);

        goto label3;

     label2:
        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void parseUnrecognizedElement(java.lang.Object,org.w3c.dom.Element,java.util.Properties)>($r5, r9, r2);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return $r5;

     label5:
        return null;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r0;
        java.lang.Class $r1, $r2;

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String dbfKey> = "javax.xml.parsers.DocumentBuilderFactory";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String EMPTY_STR> = "";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String RENDERED_CLASS_ATTR> = "renderedClass";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String RENDERING_CLASS_ATTR> = "renderingClass";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String RESET_ATTR> = "reset";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String INTERNAL_DEBUG_ATTR> = "debug";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String CONFIG_DEBUG_ATTR> = "configDebug";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String THRESHOLD_ATTR> = "threshold";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String ADDITIVITY_ATTR> = "additivity";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String REF_ATTR> = "ref";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String ERROR_HANDLER_TAG> = "errorHandler";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String FILTER_TAG> = "filter";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String PRIORITY_TAG> = "priority";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String LEVEL_TAG> = "level";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String ROOT_REF> = "root-ref";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String ROOT_TAG> = "root";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String VALUE_ATTR> = "value";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String CLASS_ATTR> = "class";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String NAME_ATTR> = "name";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String LOGGER_FACTORY_TAG> = "loggerFactory";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String CATEGORY_FACTORY_TAG> = "categoryFactory";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String LOGGER_REF> = "logger-ref";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String LOGGER> = "logger";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String CATEGORY> = "category";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String LAYOUT_TAG> = "layout";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String PARAM_TAG> = "param";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String APPENDER_REF_TAG> = "appender-ref";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String APPENDER_TAG> = "appender";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String THROWABLE_RENDERER_TAG> = "throwableRenderer";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String RENDERER_TAG> = "renderer";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String OLD_CONFIGURATION_TAG> = "configuration";

        <org.apache.log4j.xml.DOMConfigurator: java.lang.String CONFIGURATION_TAG> = "log4j:configuration";

        $r0 = newarray (java.lang.Class)[1];

        $r1 = <org.apache.log4j.xml.DOMConfigurator: java.lang.Class class$java$lang$String>;

        if $r1 != null goto label1;

        $r2 = staticinvoke <org.apache.log4j.xml.DOMConfigurator: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.log4j.xml.DOMConfigurator: java.lang.Class class$java$lang$String> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.log4j.xml.DOMConfigurator: java.lang.Class class$java$lang$String>;

     label2:
        $r0[0] = $r2;

        <org.apache.log4j.xml.DOMConfigurator: java.lang.Class[] ONE_STRING_PARAM> = $r0;

        return;
    }
}
