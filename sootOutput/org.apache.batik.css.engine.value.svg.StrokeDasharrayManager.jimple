public class org.apache.batik.css.engine.value.svg.StrokeDasharrayManager extends org.apache.batik.css.engine.value.LengthManager
{

    public void <init>()
    {
        org.apache.batik.css.engine.value.svg.StrokeDasharrayManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.StrokeDasharrayManager;

        specialinvoke r0.<org.apache.batik.css.engine.value.LengthManager: void <init>()>();

        return;
    }

    public boolean isInheritedProperty()
    {
        org.apache.batik.css.engine.value.svg.StrokeDasharrayManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.StrokeDasharrayManager;

        return 1;
    }

    public boolean isAnimatableProperty()
    {
        org.apache.batik.css.engine.value.svg.StrokeDasharrayManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.StrokeDasharrayManager;

        return 1;
    }

    public boolean isAdditiveProperty()
    {
        org.apache.batik.css.engine.value.svg.StrokeDasharrayManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.StrokeDasharrayManager;

        return 0;
    }

    public int getPropertyType()
    {
        org.apache.batik.css.engine.value.svg.StrokeDasharrayManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.StrokeDasharrayManager;

        return 34;
    }

    public java.lang.String getPropertyName()
    {
        org.apache.batik.css.engine.value.svg.StrokeDasharrayManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.StrokeDasharrayManager;

        return "stroke-dasharray";
    }

    public org.apache.batik.css.engine.value.Value getDefaultValue()
    {
        org.apache.batik.css.engine.value.Value $r0;
        org.apache.batik.css.engine.value.svg.StrokeDasharrayManager r1;

        r1 := @this: org.apache.batik.css.engine.value.svg.StrokeDasharrayManager;

        $r0 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value NONE_VALUE>;

        return $r0;
    }

    public org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException
    {
        org.apache.batik.css.engine.value.Value $r4, $r5, $r8;
        org.apache.batik.css.engine.CSSEngine r7;
        org.apache.batik.css.engine.value.ListValue $r11;
        short $s0, $s1;
        org.w3c.dom.DOMException $r3;
        org.w3c.css.sac.LexicalUnit $r9, r10;
        int $i2;
        java.lang.String $r0, $r2;
        org.apache.batik.css.engine.value.svg.StrokeDasharrayManager r1;
        boolean $z0;

        r1 := @this: org.apache.batik.css.engine.value.svg.StrokeDasharrayManager;

        r10 := @parameter0: org.w3c.css.sac.LexicalUnit;

        r7 := @parameter1: org.apache.batik.css.engine.CSSEngine;

        $s0 = interfaceinvoke r10.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i2 = (int) $s0;

        lookupswitch($i2)
        {
            case 12: goto label1;
            case 35: goto label2;
            default: goto label4;
        };

     label1:
        $r5 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value INHERIT_VALUE>;

        return $r5;

     label2:
        $r0 = interfaceinvoke r10.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("none");

        if $z0 == 0 goto label3;

        $r4 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value NONE_VALUE>;

        return $r4;

     label3:
        $r2 = interfaceinvoke r10.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $r3 = virtualinvoke r1.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidIdentifierDOMException(java.lang.String)>($r2);

        throw $r3;

     label4:
        $r11 = new org.apache.batik.css.engine.value.ListValue;

        specialinvoke $r11.<org.apache.batik.css.engine.value.ListValue: void <init>(char)>(32);

     label5:
        $r8 = specialinvoke r1.<org.apache.batik.css.engine.value.LengthManager: org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit,org.apache.batik.css.engine.CSSEngine)>(r10, r7);

        virtualinvoke $r11.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r8);

        $r9 = interfaceinvoke r10.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        r10 = $r9;

        if $r9 == null goto label6;

        $s1 = interfaceinvoke $r9.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        if $s1 != 0 goto label6;

        r10 = interfaceinvoke $r9.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

     label6:
        if r10 != null goto label5;

        return $r11;
    }

    public org.apache.batik.css.engine.value.Value createStringValue(short, java.lang.String, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException
    {
        org.apache.batik.css.engine.value.Value $r3;
        org.apache.batik.css.engine.CSSEngine r5;
        short s0;
        org.w3c.dom.DOMException $r2, $r4;
        int $i1;
        java.lang.String r0;
        org.apache.batik.css.engine.value.svg.StrokeDasharrayManager r1;
        boolean $z0;

        r1 := @this: org.apache.batik.css.engine.value.svg.StrokeDasharrayManager;

        s0 := @parameter0: short;

        r0 := @parameter1: java.lang.String;

        r5 := @parameter2: org.apache.batik.css.engine.CSSEngine;

        $i1 = (int) s0;

        if $i1 == 21 goto label1;

        $r4 = virtualinvoke r1.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidStringTypeDOMException(short)>(s0);

        throw $r4;

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("none");

        if $z0 == 0 goto label2;

        $r3 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value NONE_VALUE>;

        return $r3;

     label2:
        $r2 = virtualinvoke r1.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidIdentifierDOMException(java.lang.String)>(r0);

        throw $r2;
    }

    public org.apache.batik.css.engine.value.Value computeValue(org.apache.batik.css.engine.CSSStylableElement, java.lang.String, org.apache.batik.css.engine.CSSEngine, int, org.apache.batik.css.engine.StyleMap, org.apache.batik.css.engine.value.Value)
    {
        org.apache.batik.css.engine.CSSStylableElement r4;
        org.apache.batik.css.engine.value.Value r0, $r8, $r9;
        org.apache.batik.css.engine.value.ListValue r1, $r10;
        org.apache.batik.css.engine.CSSEngine r6;
        short $s0;
        org.apache.batik.css.engine.StyleMap r7;
        int $i1, i2, i3, $i4;
        java.lang.String r5;
        org.apache.batik.css.engine.value.svg.StrokeDasharrayManager r3;

        r3 := @this: org.apache.batik.css.engine.value.svg.StrokeDasharrayManager;

        r4 := @parameter0: org.apache.batik.css.engine.CSSStylableElement;

        r5 := @parameter1: java.lang.String;

        r6 := @parameter2: org.apache.batik.css.engine.CSSEngine;

        i2 := @parameter3: int;

        r7 := @parameter4: org.apache.batik.css.engine.StyleMap;

        r0 := @parameter5: org.apache.batik.css.engine.value.Value;

        $s0 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        $i4 = (int) $s0;

        lookupswitch($i4)
        {
            case 1: goto label1;
            default: goto label2;
        };

     label1:
        return r0;

     label2:
        r1 = (org.apache.batik.css.engine.value.ListValue) r0;

        $r10 = new org.apache.batik.css.engine.value.ListValue;

        specialinvoke $r10.<org.apache.batik.css.engine.value.ListValue: void <init>(char)>(32);

        i3 = 0;

        goto label4;

     label3:
        $r8 = virtualinvoke r1.<org.apache.batik.css.engine.value.ListValue: org.apache.batik.css.engine.value.Value item(int)>(i3);

        $r9 = specialinvoke r3.<org.apache.batik.css.engine.value.LengthManager: org.apache.batik.css.engine.value.Value computeValue(org.apache.batik.css.engine.CSSStylableElement,java.lang.String,org.apache.batik.css.engine.CSSEngine,int,org.apache.batik.css.engine.StyleMap,org.apache.batik.css.engine.value.Value)>(r4, r5, r6, i2, r7, $r8);

        virtualinvoke $r10.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r9);

        i3 = i3 + 1;

     label4:
        $i1 = virtualinvoke r1.<org.apache.batik.css.engine.value.ListValue: int getLength()>();

        if i3 < $i1 goto label3;

        return $r10;
    }

    protected int getOrientation()
    {
        org.apache.batik.css.engine.value.svg.StrokeDasharrayManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.StrokeDasharrayManager;

        return 2;
    }
}
