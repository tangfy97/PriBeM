public class org.apache.commons.configuration.reloading.ManagedReloadingStrategy extends java.lang.Object implements org.apache.commons.configuration.reloading.ReloadingStrategy, org.apache.commons.configuration.reloading.ManagedReloadingStrategyMBean
{
    private org.apache.commons.logging.Log log;
    private org.apache.commons.configuration.FileConfiguration configuration;
    private boolean reloadingRequired;
    static java.lang.Class class$org$apache$commons$configuration$reloading$ManagedReloadingStrategy;

    public void <init>()
    {
        java.lang.Class $r1, $r3;
        org.apache.commons.logging.Log $r2;
        org.apache.commons.configuration.reloading.ManagedReloadingStrategy r0;

        r0 := @this: org.apache.commons.configuration.reloading.ManagedReloadingStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.commons.configuration.reloading.ManagedReloadingStrategy: java.lang.Class class$org$apache$commons$configuration$reloading$ManagedReloadingStrategy>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.apache.commons.configuration.reloading.ManagedReloadingStrategy: java.lang.Class class$(java.lang.String)>("org.apache.commons.configuration.reloading.ManagedReloadingStrategy");

        <org.apache.commons.configuration.reloading.ManagedReloadingStrategy: java.lang.Class class$org$apache$commons$configuration$reloading$ManagedReloadingStrategy> = $r3;

        goto label2;

     label1:
        $r3 = <org.apache.commons.configuration.reloading.ManagedReloadingStrategy: java.lang.Class class$org$apache$commons$configuration$reloading$ManagedReloadingStrategy>;

     label2:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r3);

        r0.<org.apache.commons.configuration.reloading.ManagedReloadingStrategy: org.apache.commons.logging.Log log> = $r2;

        return;
    }

    public void init()
    {
        org.apache.commons.configuration.reloading.ManagedReloadingStrategy r0;

        r0 := @this: org.apache.commons.configuration.reloading.ManagedReloadingStrategy;

        return;
    }

    public void reloadingPerformed()
    {
        org.apache.commons.configuration.reloading.ManagedReloadingStrategy r0;

        r0 := @this: org.apache.commons.configuration.reloading.ManagedReloadingStrategy;

        r0.<org.apache.commons.configuration.reloading.ManagedReloadingStrategy: boolean reloadingRequired> = 0;

        return;
    }

    public boolean reloadingRequired()
    {
        org.apache.commons.configuration.reloading.ManagedReloadingStrategy r0;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.reloading.ManagedReloadingStrategy;

        $z0 = r0.<org.apache.commons.configuration.reloading.ManagedReloadingStrategy: boolean reloadingRequired>;

        return $z0;
    }

    public void setConfiguration(org.apache.commons.configuration.FileConfiguration)
    {
        org.apache.commons.configuration.FileConfiguration r1;
        org.apache.commons.configuration.reloading.ManagedReloadingStrategy r0;

        r0 := @this: org.apache.commons.configuration.reloading.ManagedReloadingStrategy;

        r1 := @parameter0: org.apache.commons.configuration.FileConfiguration;

        r0.<org.apache.commons.configuration.reloading.ManagedReloadingStrategy: org.apache.commons.configuration.FileConfiguration configuration> = r1;

        return;
    }

    public void refresh()
    {
        org.apache.commons.logging.Log $r1;
        org.apache.commons.configuration.FileConfiguration $r2;
        org.apache.commons.configuration.reloading.ManagedReloadingStrategy r0;

        r0 := @this: org.apache.commons.configuration.reloading.ManagedReloadingStrategy;

        $r1 = r0.<org.apache.commons.configuration.reloading.ManagedReloadingStrategy: org.apache.commons.logging.Log log>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Reloading configuration.");

        r0.<org.apache.commons.configuration.reloading.ManagedReloadingStrategy: boolean reloadingRequired> = 1;

        $r2 = r0.<org.apache.commons.configuration.reloading.ManagedReloadingStrategy: org.apache.commons.configuration.FileConfiguration configuration>;

        interfaceinvoke $r2.<org.apache.commons.configuration.FileConfiguration: boolean isEmpty()>();

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
