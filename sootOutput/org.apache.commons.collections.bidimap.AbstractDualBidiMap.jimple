public abstract class org.apache.commons.collections.bidimap.AbstractDualBidiMap extends java.lang.Object implements org.apache.commons.collections.BidiMap
{
    protected final transient java.util.Map[] maps;
    protected transient org.apache.commons.collections.BidiMap inverseBidiMap;
    protected transient java.util.Set keySet;
    protected transient java.util.Collection values;
    protected transient java.util.Set entrySet;

    protected void <init>()
    {
        java.util.Map[] $r1, $r2, $r4;
        java.util.Map $r3, $r5;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.util.Map)[2];

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps> = $r1;

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: org.apache.commons.collections.BidiMap inverseBidiMap> = null;

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Set keySet> = null;

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Collection values> = null;

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Set entrySet> = null;

        $r2 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r3 = virtualinvoke r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map createMap()>();

        $r2[0] = $r3;

        $r4 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r5 = virtualinvoke r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map createMap()>();

        $r4[1] = $r5;

        return;
    }

    protected void <init>(java.util.Map, java.util.Map)
    {
        java.util.Map[] $r1, $r3, $r5;
        java.util.Map r2, r4;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        r2 := @parameter0: java.util.Map;

        r4 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.util.Map)[2];

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps> = $r1;

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: org.apache.commons.collections.BidiMap inverseBidiMap> = null;

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Set keySet> = null;

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Collection values> = null;

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Set entrySet> = null;

        $r3 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r3[0] = r2;

        $r5 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r5[1] = r4;

        return;
    }

    protected void <init>(java.util.Map, java.util.Map, org.apache.commons.collections.BidiMap)
    {
        java.util.Map[] $r1, $r3, $r5;
        java.util.Map r2, r4;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;
        org.apache.commons.collections.BidiMap r6;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        r2 := @parameter0: java.util.Map;

        r4 := @parameter1: java.util.Map;

        r6 := @parameter2: org.apache.commons.collections.BidiMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.util.Map)[2];

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps> = $r1;

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: org.apache.commons.collections.BidiMap inverseBidiMap> = null;

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Set keySet> = null;

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Collection values> = null;

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Set entrySet> = null;

        $r3 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r3[0] = r2;

        $r5 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r5[1] = r4;

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: org.apache.commons.collections.BidiMap inverseBidiMap> = r6;

        return;
    }

    protected java.util.Map createMap()
    {
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        return null;
    }

    protected abstract org.apache.commons.collections.BidiMap createBidiMap(java.util.Map, java.util.Map, org.apache.commons.collections.BidiMap);

    public java.lang.Object get(java.lang.Object)
    {
        java.util.Map[] $r1;
        java.util.Map $r3;
        java.lang.Object r2, $r4;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r3 = $r1[0];

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        return $r4;
    }

    public int size()
    {
        java.util.Map[] $r1;
        java.util.Map $r2;
        int $i0;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r2 = $r1[0];

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.Map[] $r1;
        java.util.Map $r2;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r2 = $r1[0];

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.Map[] $r1;
        java.util.Map $r3;
        java.lang.Object r2;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r3 = $r1[0];

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Map[] $r1;
        java.util.Map $r3;
        java.lang.Object r2;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r3 = $r1[0];

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        return $z0;
    }

    public int hashCode()
    {
        java.util.Map[] $r1;
        java.util.Map $r2;
        int $i0;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r2 = $r1[0];

        $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.util.Map[] $r1;
        java.util.Map $r2;
        java.lang.String $r3;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r2 = $r1[0];

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.Map $r3, $r6, $r8, $r11, $r14, $r15, $r19, $r20;
        boolean $z0, $z1;
        java.util.Map[] $r1, $r4, $r7, $r10, $r12, $r13, $r17, $r18;
        java.lang.Object r2, r5, $r9, $r16, $r21;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        r2 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r3 = $r1[0];

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r17 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r20 = $r17[1];

        $r18 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r19 = $r18[0];

        $r21 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        interfaceinvoke $r20.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r21);

     label1:
        $r4 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r6 = $r4[1];

        $z1 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        $r12 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r15 = $r12[0];

        $r13 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r14 = $r13[1];

        $r16 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r16);

     label2:
        $r7 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r8 = $r7[0];

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5);

        $r10 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r11 = $r10[1];

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r2);

        return $r9;
    }

    public void putAll(java.util.Map)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.util.Map r0;
        java.lang.Object $r3, $r6, $r7;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r5;
        boolean $z0;

        r5 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r5.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.Map[] $r1, $r4, $r7;
        java.util.Map $r3, $r5, $r8;
        java.lang.Object r2, $r6, r9;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        r2 := @parameter0: java.lang.Object;

        r9 = null;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r3 = $r1[0];

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r5 = $r4[0];

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        r9 = $r6;

        $r7 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r8 = $r7[1];

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);

     label1:
        return r9;
    }

    public void clear()
    {
        java.util.Map[] $r1, $r3;
        java.util.Map $r2, $r4;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r2 = $r1[0];

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r4 = $r3[1];

        interfaceinvoke $r4.<java.util.Map: void clear()>();

        return;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Map[] $r1;
        java.util.Map $r3;
        java.lang.Object r2;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r3 = $r1[1];

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        return $z0;
    }

    public org.apache.commons.collections.MapIterator mapIterator()
    {
        org.apache.commons.collections.bidimap.AbstractDualBidiMap$BidiMapIterator $r0;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r1;

        r1 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        $r0 = new org.apache.commons.collections.bidimap.AbstractDualBidiMap$BidiMapIterator;

        specialinvoke $r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap$BidiMapIterator: void <init>(org.apache.commons.collections.bidimap.AbstractDualBidiMap)>(r1);

        return $r0;
    }

    public java.lang.Object getKey(java.lang.Object)
    {
        java.util.Map[] $r1;
        java.util.Map $r3;
        java.lang.Object r2, $r4;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r3 = $r1[1];

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        return $r4;
    }

    public java.lang.Object removeValue(java.lang.Object)
    {
        java.util.Map[] $r1, $r4, $r7;
        java.util.Map $r3, $r5, $r8;
        java.lang.Object r2, $r6, r9;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        r2 := @parameter0: java.lang.Object;

        r9 = null;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r3 = $r1[1];

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r5 = $r4[1];

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        r9 = $r6;

        $r7 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r8 = $r7[0];

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);

     label1:
        return r9;
    }

    public org.apache.commons.collections.BidiMap inverseBidiMap()
    {
        java.util.Map[] $r3, $r4;
        java.util.Map $r5, $r6;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;
        org.apache.commons.collections.BidiMap $r1, $r2, $r7;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: org.apache.commons.collections.BidiMap inverseBidiMap>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r6 = $r3[1];

        $r4 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Map[] maps>;

        $r5 = $r4[0];

        $r7 = virtualinvoke r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: org.apache.commons.collections.BidiMap createBidiMap(java.util.Map,java.util.Map,org.apache.commons.collections.BidiMap)>($r6, $r5, r0);

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: org.apache.commons.collections.BidiMap inverseBidiMap> = $r7;

     label1:
        $r2 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: org.apache.commons.collections.BidiMap inverseBidiMap>;

        return $r2;
    }

    public java.util.Set keySet()
    {
        org.apache.commons.collections.bidimap.AbstractDualBidiMap$KeySet $r3;
        java.util.Set $r1, $r2;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Set keySet>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections.bidimap.AbstractDualBidiMap$KeySet;

        specialinvoke $r3.<org.apache.commons.collections.bidimap.AbstractDualBidiMap$KeySet: void <init>(org.apache.commons.collections.bidimap.AbstractDualBidiMap)>(r0);

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Set keySet> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Set keySet>;

        return $r2;
    }

    protected java.util.Iterator createKeySetIterator(java.util.Iterator)
    {
        org.apache.commons.collections.bidimap.AbstractDualBidiMap$KeySetIterator $r0;
        java.util.Iterator r1;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r2;

        r2 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        r1 := @parameter0: java.util.Iterator;

        $r0 = new org.apache.commons.collections.bidimap.AbstractDualBidiMap$KeySetIterator;

        specialinvoke $r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap$KeySetIterator: void <init>(java.util.Iterator,org.apache.commons.collections.bidimap.AbstractDualBidiMap)>(r1, r2);

        return $r0;
    }

    public java.util.Collection values()
    {
        org.apache.commons.collections.bidimap.AbstractDualBidiMap$Values $r3;
        java.util.Collection $r1, $r2;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Collection values>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections.bidimap.AbstractDualBidiMap$Values;

        specialinvoke $r3.<org.apache.commons.collections.bidimap.AbstractDualBidiMap$Values: void <init>(org.apache.commons.collections.bidimap.AbstractDualBidiMap)>(r0);

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Collection values> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Collection values>;

        return $r2;
    }

    protected java.util.Iterator createValuesIterator(java.util.Iterator)
    {
        org.apache.commons.collections.bidimap.AbstractDualBidiMap$ValuesIterator $r0;
        java.util.Iterator r1;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r2;

        r2 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        r1 := @parameter0: java.util.Iterator;

        $r0 = new org.apache.commons.collections.bidimap.AbstractDualBidiMap$ValuesIterator;

        specialinvoke $r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap$ValuesIterator: void <init>(java.util.Iterator,org.apache.commons.collections.bidimap.AbstractDualBidiMap)>(r1, r2);

        return $r0;
    }

    public java.util.Set entrySet()
    {
        java.util.Set $r1, $r2;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r0;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap$EntrySet $r3;

        r0 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        $r1 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Set entrySet>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections.bidimap.AbstractDualBidiMap$EntrySet;

        specialinvoke $r3.<org.apache.commons.collections.bidimap.AbstractDualBidiMap$EntrySet: void <init>(org.apache.commons.collections.bidimap.AbstractDualBidiMap)>(r0);

        r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Set entrySet> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: java.util.Set entrySet>;

        return $r2;
    }

    protected java.util.Iterator createEntrySetIterator(java.util.Iterator)
    {
        java.util.Iterator r1;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap$EntrySetIterator $r0;
        org.apache.commons.collections.bidimap.AbstractDualBidiMap r2;

        r2 := @this: org.apache.commons.collections.bidimap.AbstractDualBidiMap;

        r1 := @parameter0: java.util.Iterator;

        $r0 = new org.apache.commons.collections.bidimap.AbstractDualBidiMap$EntrySetIterator;

        specialinvoke $r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap$EntrySetIterator: void <init>(java.util.Iterator,org.apache.commons.collections.bidimap.AbstractDualBidiMap)>(r1, r2);

        return $r0;
    }
}
