public class org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo extends java.lang.Object
{
    public final org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind kind;
    public int[] argsRequiringConversion;

    void <init>(org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind, int[])
    {
        org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo r0;
        org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind r1;
        int[] r2;

        r0 := @this: org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo;

        r1 := @parameter0: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind;

        r2 := @parameter1: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind kind> = r1;

        r0.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: int[] argsRequiringConversion> = r2;

        return;
    }

    void <init>(org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind)
    {
        org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo r0;
        org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind r1;

        r0 := @this: org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo;

        r1 := @parameter0: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind kind> = r1;

        return;
    }

    public boolean isExactMatch()
    {
        org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo r0;
        org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind $r1, $r2;

        r0 := @this: org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo;

        $r2 = r0.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind kind>;

        $r1 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind EXACT>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isCloseMatch()
    {
        org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo r0;
        org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind $r1, $r2;

        r0 := @this: org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo;

        $r2 = r0.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind kind>;

        $r1 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind CLOSE>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isMatchRequiringConversion()
    {
        org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo r0;
        org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind $r1, $r2;

        r0 := @this: org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo;

        $r2 = r0.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind kind>;

        $r1 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind REQUIRES_CONVERSION>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String toString()
    {
        org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind $r3;
        int[] $r4, $r6, $r7;
        org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo r2;
        int $i0, i1, $i2;
        java.lang.StringBuilder $r0, $r1;
        java.lang.String $r5;

        r2 := @this: org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ArgumentMatch: ");

        $r3 = r2.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind kind>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r4 = r2.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: int[] argsRequiringConversion>;

        if $r4 == null goto label4;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  (argsForConversion:");

        i1 = 0;

        goto label3;

     label1:
        if i1 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $r6 = r2.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: int[] argsRequiringConversion>;

        $i0 = $r6[i1];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        i1 = i1 + 1;

     label3:
        $r7 = r2.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: int[] argsRequiringConversion>;

        $i2 = lengthof $r7;

        if i1 < $i2 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

     label4:
        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
