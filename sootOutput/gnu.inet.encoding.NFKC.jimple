public class gnu.inet.encoding.NFKC extends java.lang.Object
{
    static final int SBase;
    static final int LBase;
    static final int VBase;
    static final int TBase;
    static final int LCount;
    static final int VCount;
    static final int TCount;
    static final int NCount;
    static final int SCount;

    public void <init>()
    {
        gnu.inet.encoding.NFKC r0;

        r0 := @this: gnu.inet.encoding.NFKC;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String normalizeNFKC(java.lang.String)
    {
        java.lang.String[] $r2;
        java.lang.StringBuffer $r6;
        int $i1, $i3, $i6, $i8, i10, $i11, i12, i13, i14, $i15, $i16, $i18, $i19, $i21, $i23, $i25, $i27;
        java.lang.String r1, $r3, $r4, $r5;
        char $c0, $c2, $c4, $c5, $c7, $c9;

        r1 := @parameter0: java.lang.String;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        i10 = 0;

        goto label05;

     label01:
        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i10);

        $i16 = (int) $c0;

        $i18 = (int) 44032;

        if $i16 < $i18 goto label02;

        $i19 = (int) $c0;

        $i21 = (int) 55215;

        if $i19 > $i21 goto label02;

        $r4 = staticinvoke <gnu.inet.encoding.NFKC: java.lang.String decomposeHangul(char)>($c0);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        goto label04;

     label02:
        $i1 = staticinvoke <gnu.inet.encoding.NFKC: int decomposeIndex(char)>($c0);

        $i23 = (int) -1;

        if $i1 != $i23 goto label03;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label04;

     label03:
        $r2 = <gnu.inet.encoding.DecompositionMappings: java.lang.String[] m>;

        $r3 = $r2[$i1];

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label04:
        i10 = i10 + 1;

     label05:
        $i11 = virtualinvoke r1.<java.lang.String: int length()>();

        if i10 < $i11 goto label01;

        staticinvoke <gnu.inet.encoding.NFKC: void canonicalOrdering(java.lang.StringBuffer)>($r6);

        i12 = 0;

        i13 = 0;

        i14 = 0;

        goto label12;

     label06:
        $c2 = virtualinvoke $r6.<java.lang.StringBuffer: char charAt(int)>(i14);

        $i3 = staticinvoke <gnu.inet.encoding.NFKC: int combiningClass(char)>($c2);

        if i14 <= 0 goto label09;

        if i12 == 0 goto label07;

        if i12 == $i3 goto label09;

     label07:
        $c4 = virtualinvoke $r6.<java.lang.StringBuffer: char charAt(int)>(i13);

        $c5 = virtualinvoke $r6.<java.lang.StringBuffer: char charAt(int)>(i14);

        $i6 = staticinvoke <gnu.inet.encoding.NFKC: int compose(char,char)>($c4, $c5);

        $i25 = (int) -1;

        if $i6 == $i25 goto label09;

        $c7 = (char) $i6;

        virtualinvoke $r6.<java.lang.StringBuffer: void setCharAt(int,char)>(i13, $c7);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>(i14);

        $i27 = (int) -1;

        i14 = i14 + $i27;

        if i14 != i13 goto label08;

        i12 = 0;

        goto label11;

     label08:
        $i8 = i14 - 1;

        $c9 = virtualinvoke $r6.<java.lang.StringBuffer: char charAt(int)>($i8);

        i12 = staticinvoke <gnu.inet.encoding.NFKC: int combiningClass(char)>($c9);

        goto label11;

     label09:
        if $i3 != 0 goto label10;

        i13 = i14;

     label10:
        i12 = $i3;

     label11:
        i14 = i14 + 1;

     label12:
        $i15 = virtualinvoke $r6.<java.lang.StringBuffer: int length()>();

        if i14 < $i15 goto label06;

        $r5 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    static int decomposeIndex(char)
    {
        int[] $r0, $r1, $r2;
        int $i0, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14;
        char c1;

        c1 := @parameter0: char;

        i5 = 0;

        $r0 = <gnu.inet.encoding.DecompositionKeys: int[] k>;

        $i0 = lengthof $r0;

        i6 = $i0 / 2;

     label1:
        $i7 = i5 + i6;

        $i8 = $i7 / 2;

        $r2 = <gnu.inet.encoding.DecompositionKeys: int[] k>;

        $i9 = $i8 * 2;

        $i10 = $r2[$i9];

        $i11 = (int) c1;

        if $i11 != $i10 goto label2;

        $r1 = <gnu.inet.encoding.DecompositionKeys: int[] k>;

        $i2 = $i8 * 2;

        $i3 = $i2 + 1;

        $i4 = $r1[$i3];

        return $i4;

     label2:
        if $i8 != i5 goto label3;

        $i13 = (int) -1;

        return $i13;

     label3:
        $i14 = (int) c1;

        if $i14 <= $i10 goto label4;

        i5 = $i8;

        goto label1;

     label4:
        i6 = $i8;

        goto label1;
    }

    static int combiningClass(char)
    {
        int[][] $r1;
        char c0, c2;
        int[] $r0, $r2;
        int i1, i3, $i4, $i5, $i7, $i8;

        c0 := @parameter0: char;

        $i5 = (int) c0;

        i1 = $i5 >> 8;

        c2 = c0 & 255;

        $r0 = <gnu.inet.encoding.CombiningClass: int[] i>;

        i3 = $r0[i1];

        $i7 = (int) -1;

        if i3 <= $i7 goto label1;

        $r1 = <gnu.inet.encoding.CombiningClass: int[][] c>;

        $r2 = $r1[i3];

        $i8 = (int) c2;

        $i4 = $r2[$i8];

        return $i4;

     label1:
        return 0;
    }

    static void canonicalOrdering(java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0;
        int $i1, $i3, $i4, $i6, $i8, $i10, i11, i12, i13, i14, $i15, $i16, $i18;
        boolean z0;
        char $c0, $c2, $c5, $c7, $c9;

        r0 := @parameter0: java.lang.StringBuffer;

        z0 = 0;

        goto label9;

     label1:
        z0 = 1;

        $c0 = virtualinvoke r0.<java.lang.StringBuffer: char charAt(int)>(0);

        i11 = staticinvoke <gnu.inet.encoding.NFKC: int combiningClass(char)>($c0);

        i12 = 0;

        goto label8;

     label2:
        $i1 = i12 + 1;

        $c2 = virtualinvoke r0.<java.lang.StringBuffer: char charAt(int)>($i1);

        $i3 = staticinvoke <gnu.inet.encoding.NFKC: int combiningClass(char)>($c2);

        i13 = $i3;

        if $i3 == 0 goto label7;

        if i11 <= $i3 goto label7;

        i14 = i12 + 1;

        goto label5;

     label3:
        $i4 = i14 - 1;

        $c5 = virtualinvoke r0.<java.lang.StringBuffer: char charAt(int)>($i4);

        $i6 = staticinvoke <gnu.inet.encoding.NFKC: int combiningClass(char)>($c5);

        if $i6 > $i3 goto label4;

        goto label6;

     label4:
        $c7 = virtualinvoke r0.<java.lang.StringBuffer: char charAt(int)>(i14);

        $i8 = i14 - 1;

        $c9 = virtualinvoke r0.<java.lang.StringBuffer: char charAt(int)>($i8);

        virtualinvoke r0.<java.lang.StringBuffer: void setCharAt(int,char)>(i14, $c9);

        $i10 = i14 - 1;

        virtualinvoke r0.<java.lang.StringBuffer: void setCharAt(int,char)>($i10, $c7);

        z0 = 0;

        $i18 = (int) -1;

        i14 = i14 + $i18;

     label5:
        if i14 > 0 goto label3;

     label6:
        i13 = i11;

     label7:
        i11 = i13;

        i12 = i12 + 1;

     label8:
        $i15 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

        $i16 = $i15 - 1;

        if i12 < $i16 goto label2;

     label9:
        if z0 == 0 goto label1;

        return;
    }

    static int composeIndex(char)
    {
        int[][] $r2;
        int[] $r0, $r1, $r3;
        int $i1, $i2, $i3, i4, $i6, $i7, $i9, $i10, $i12, $i14, $i15;
        char c0, $c5;

        c0 := @parameter0: char;

        $i7 = (int) c0;

        $i2 = $i7 >> 8;

        $r0 = <gnu.inet.encoding.Composition: int[] composePage>;

        $i1 = lengthof $r0;

        if $i2 < $i1 goto label1;

        $i9 = (int) -1;

        return $i9;

     label1:
        $r1 = <gnu.inet.encoding.Composition: int[] composePage>;

        $i10 = (int) c0;

        $i3 = $i10 >> 8;

        i4 = $r1[$i3];

        $i12 = (int) -1;

        if i4 != $i12 goto label2;

        $i14 = (int) -1;

        return $i14;

     label2:
        $r2 = <gnu.inet.encoding.Composition: int[][] composeData>;

        $r3 = $r2[i4];

        $c5 = c0 & 255;

        $i15 = (int) $c5;

        $i6 = $r3[$i15];

        return $i6;
    }

    static int compose(char, char)
    {
        char[][] $r0, $r2, $r4, $r6, $r8;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i11, $i13, $i15, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i28, $i30, $i31, $i33;
        char c0, c1, c8, $c10, $c12, $c14, $c16;
        char[] r1, $r3, $r5, $r7, $r9;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $i2 = staticinvoke <gnu.inet.encoding.NFKC: int composeHangul(char,char)>(c0, c1);

        $i18 = (int) -1;

        if $i2 == $i18 goto label1;

        return $i2;

     label1:
        $i3 = staticinvoke <gnu.inet.encoding.NFKC: int composeIndex(char)>(c0);

        if $i3 < 181 goto label3;

        if $i3 >= 391 goto label3;

        $r6 = <gnu.inet.encoding.Composition: char[][] singleFirst>;

        $i13 = $i3 - 181;

        $r7 = $r6[$i13];

        $c14 = $r7[0];

        $i19 = (int) c1;

        $i20 = (int) $c14;

        if $i19 != $i20 goto label2;

        $r8 = <gnu.inet.encoding.Composition: char[][] singleFirst>;

        $i15 = $i3 - 181;

        $r9 = $r8[$i15];

        $c16 = $r9[1];

        $i21 = (int) $c16;

        return $i21;

     label2:
        $i23 = (int) -1;

        return $i23;

     label3:
        $i4 = staticinvoke <gnu.inet.encoding.NFKC: int composeIndex(char)>(c1);

        if $i4 < 391 goto label5;

        $r2 = <gnu.inet.encoding.Composition: char[][] singleSecond>;

        $i9 = $i4 - 391;

        $r3 = $r2[$i9];

        $c10 = $r3[0];

        $i24 = (int) c0;

        $i25 = (int) $c10;

        if $i24 != $i25 goto label4;

        $r4 = <gnu.inet.encoding.Composition: char[][] singleSecond>;

        $i11 = $i4 - 391;

        $r5 = $r4[$i11];

        $c12 = $r5[1];

        $i26 = (int) $c12;

        return $i26;

     label4:
        $i28 = (int) -1;

        return $i28;

     label5:
        if $i3 < 0 goto label7;

        if $i3 >= 144 goto label7;

        if $i4 < 144 goto label7;

        if $i4 >= 181 goto label7;

        $r0 = <gnu.inet.encoding.Composition: char[][] multiFirst>;

        r1 = $r0[$i3];

        $i6 = $i4 - 144;

        $i5 = lengthof r1;

        if $i6 >= $i5 goto label7;

        $i7 = $i4 - 144;

        c8 = r1[$i7];

        if c8 != 0 goto label6;

        $i30 = (int) -1;

        return $i30;

     label6:
        $i31 = (int) c8;

        return $i31;

     label7:
        $i33 = (int) -1;

        return $i33;
    }

    static java.lang.String decomposeHangul(char)
    {
        java.lang.StringBuffer $r3;
        int i1, $i2, i3, $i4, $i5, i6, $i7, i8, $i12, $i14;
        java.lang.String $r0, $r2;
        char c0, $c9, $c10, $c11;

        c0 := @parameter0: char;

        $i12 = (int) c0;

        $i14 = (int) 44032;

        i1 = $i12 - $i14;

        if i1 < 0 goto label1;

        if i1 < 11172 goto label2;

     label1:
        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        return $r0;

     label2:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $i2 = i1 / 588;

        i3 = 4352 + $i2;

        $i4 = i1 % 588;

        $i5 = $i4 / 28;

        i6 = 4449 + $i5;

        $i7 = i1 % 28;

        i8 = 4519 + $i7;

        $c9 = (char) i3;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c9);

        $c10 = (char) i6;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c10);

        if i8 == 4519 goto label3;

        $c11 = (char) i8;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c11);

     label3:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    static int composeHangul(char, char)
    {
        int i1, $i2, i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i15, $i16, $i18, $i19, $i20, $i22;
        char c0, c3;

        c0 := @parameter0: char;

        c3 := @parameter1: char;

        $i12 = (int) c0;

        i1 = $i12 - 4352;

        if i1 < 0 goto label1;

        if i1 >= 19 goto label1;

        $i13 = (int) c3;

        i10 = $i13 - 4449;

        if i10 < 0 goto label1;

        if i10 >= 21 goto label1;

        $i6 = i1 * 21;

        $i7 = $i6 + i10;

        $i8 = $i7 * 28;

        $i15 = (int) 44032;

        $i9 = $i15 + $i8;

        return $i9;

     label1:
        $i16 = (int) c0;

        $i18 = (int) 44032;

        $i11 = $i16 - $i18;

        if $i11 < 0 goto label2;

        if $i11 >= 11172 goto label2;

        $i2 = $i11 % 28;

        if $i2 != 0 goto label2;

        $i19 = (int) c3;

        i4 = $i19 - 4519;

        if i4 < 0 goto label2;

        if i4 > 28 goto label2;

        $i20 = (int) c0;

        $i5 = $i20 + i4;

        return $i5;

     label2:
        $i22 = (int) -1;

        return $i22;
    }

    public static void <clinit>()
    {
        <gnu.inet.encoding.NFKC: int SCount> = 11172;

        <gnu.inet.encoding.NFKC: int NCount> = 588;

        <gnu.inet.encoding.NFKC: int TCount> = 28;

        <gnu.inet.encoding.NFKC: int VCount> = 21;

        <gnu.inet.encoding.NFKC: int LCount> = 19;

        <gnu.inet.encoding.NFKC: int TBase> = 4519;

        <gnu.inet.encoding.NFKC: int VBase> = 4449;

        <gnu.inet.encoding.NFKC: int LBase> = 4352;

        <gnu.inet.encoding.NFKC: int SBase> = 44032;

        return;
    }
}
