public final class org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream, org.waveprotocol.wave.communication.gson.GsonSerializable, org.waveprotocol.wave.communication.proto.ProtoWrapper
{
    private org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto;
    private org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder> = $r1;

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder> = $r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto> = r2;

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder> = $r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream)>(r2);

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream getPB()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto>;

        return $r1;
    }

    public void setPB(org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder> = null;

        return;
    }

    public void copyFrom(org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl $r6;
        org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl $r2;
        org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator $r3;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r4;
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdate $r7;
        org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream r0;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r1;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r5;
        java.lang.String $r8;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream;

        $z0 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream: boolean hasChannelId()>();

        if $z0 == 0 goto label1;

        $r8 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream: java.lang.String getChannelId()>();

        virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void setChannelId(java.lang.String)>($r8);

        goto label2;

     label1:
        virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void clearChannelId()>();

     label2:
        $z1 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream: boolean hasDelta()>();

        if $z1 == 0 goto label3;

        $r6 = new org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl;

        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream: org.waveprotocol.wave.concurrencycontrol.WaveletUpdate getDelta()>();

        specialinvoke $r6.<org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)>($r7);

        virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void setDelta(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)>($r6);

        goto label4;

     label3:
        virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void clearDelta()>();

     label4:
        $z2 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream: boolean hasCommitVersion()>();

        if $z2 == 0 goto label5;

        $r4 = new org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream: org.waveprotocol.wave.federation.ProtocolHashedVersion getCommitVersion()>();

        specialinvoke $r4.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r5);

        virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void setCommitVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r4);

        goto label6;

     label5:
        virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void clearCommitVersion()>();

     label6:
        $z3 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream: boolean hasTerminator()>();

        if $z3 == 0 goto label7;

        $r2 = new org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream: org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator getTerminator()>();

        specialinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)>($r3);

        virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void setTerminator(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)>($r2);

        goto label8;

     label7:
        virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void clearTerminator()>();

     label8:
        return;
    }

    public boolean hasChannelId()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: boolean hasChannelId()>();

        return $z0;
    }

    public void clearChannelId()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder clearChannelId()>();

        return;
    }

    public java.lang.String getChannelId()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream $r1;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: java.lang.String getChannelId()>();

        return $r2;
    }

    public void setChannelId(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder $r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder>;

        virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder setChannelId(java.lang.String)>(r1);

        return;
    }

    public boolean hasDelta()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: boolean hasDelta()>();

        return $z0;
    }

    public void clearDelta()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder clearDelta()>();

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl getDelta()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProto()>();

        $r1 = new org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate getDelta()>();

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate)>($r3);

        return $r1;
    }

    public void setDelta(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder $r1, $r3;
        org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl $r4;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate $r5;
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdate r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletUpdate;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder clearDelta()>();

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl getOrCreateWaveletUpdateProtoImpl(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)>(r2);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate getPB()>();

        virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder setDelta(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletUpdate)>($r5);

        return;
    }

    public boolean hasCommitVersion()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: boolean hasCommitVersion()>();

        return $z0;
    }

    public void clearCommitVersion()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder clearCommitVersion()>();

        return;
    }

    public org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getCommitVersion()
    {
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream $r2;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProto()>();

        $r1 = new org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getCommitVersion()>();

        specialinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r3);

        return $r1;
    }

    public void setCommitVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder $r1, $r3;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r4;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r2;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r5;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder clearCommitVersion()>();

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getOrCreateProtocolHashedVersionProtoImpl(org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r2);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getPB()>();

        virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder setCommitVersion(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r5);

        return;
    }

    public boolean hasTerminator()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: boolean hasTerminator()>();

        return $z0;
    }

    public void clearTerminator()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder clearTerminator()>();

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl getTerminator()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelTerminator $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProto()>();

        $r1 = new org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelTerminator getTerminator()>();

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelTerminator)>($r3);

        return $r1;
    }

    public void setTerminator(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder $r1, $r3;
        org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl $r4;
        org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator r2;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelTerminator $r5;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder clearTerminator()>();

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl getOrCreateWaveletChannelTerminatorProtoImpl(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)>(r2);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelTerminator getPB()>();

        virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder setTerminator(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelTerminator)>($r5);

        return;
    }

    private org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl getOrCreateWaveletUpdateProtoImpl(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r3;
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdate r0;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletUpdate;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl) r0;

        return $r2;

     label1:
        $r1 = new org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl: void <init>()>();

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)>(r0);

        return $r1;
    }

    private org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getOrCreateProtocolHashedVersionProtoImpl(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r3;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r0;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r0 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        $z0 = r0 instanceof org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl) r0;

        return $r2;

     label1:
        $r1 = new org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void <init>()>();

        virtualinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void copyFrom(org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r0);

        return $r1;
    }

    private org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl getOrCreateWaveletChannelTerminatorProtoImpl(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator r0;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r3;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl) r0;

        return $r2;

     label1:
        $r1 = new org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl: void <init>()>();

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)>(r0);

        return $r1;
    }

    private void switchToProto()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream $r1, $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto>;

        if $r1 != null goto label1;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream build()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto> = $r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder> = null;

     label1:
        return;
    }

    private void switchToProtoBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder $r1, $r4;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream $r2, $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder>;

        if $r1 != null goto label3;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto>;

        if $r2 != null goto label1;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder newBuilder()>();

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto>;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder newBuilder(org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream)>($r3);

     label2:
        r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder> = $r4;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto> = null;

     label3:
        return;
    }

    private void invalidateAll()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream$Builder protoBuilder> = $r1;

        return;
    }

    public com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData, com.google.gson.Gson)
    {
        com.google.gson.JsonObject $r0;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r6;
        com.google.gson.JsonElement $r5, $r7, $r9;
        com.google.gson.Gson r4;
        com.google.gson.JsonPrimitive $r10;
        java.lang.String $r11;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl $r8;
        org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl $r2;
        org.waveprotocol.wave.communication.json.RawStringData r3;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r3 := @parameter0: org.waveprotocol.wave.communication.json.RawStringData;

        r4 := @parameter1: com.google.gson.Gson;

        $r0 = new com.google.gson.JsonObject;

        specialinvoke $r0.<com.google.gson.JsonObject: void <init>()>();

        $z0 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: boolean hasChannelId()>();

        if $z0 == 0 goto label1;

        $r10 = new com.google.gson.JsonPrimitive;

        $r11 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: java.lang.String getChannelId()>();

        specialinvoke $r10.<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>($r11);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("1", $r10);

     label1:
        $z1 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: boolean hasDelta()>();

        if $z1 == 0 goto label2;

        $r8 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl getDelta()>();

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.communication.gson.GsonSerializable: com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData,com.google.gson.Gson)>(r3, r4);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("2", $r9);

     label2:
        $z2 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: boolean hasCommitVersion()>();

        if $z2 == 0 goto label3;

        $r6 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getCommitVersion()>();

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.communication.gson.GsonSerializable: com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData,com.google.gson.Gson)>(r3, r4);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("3", $r7);

     label3:
        $z3 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: boolean hasTerminator()>();

        if $z3 == 0 goto label4;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl getTerminator()>();

        $r5 = interfaceinvoke $r2.<org.waveprotocol.wave.communication.gson.GsonSerializable: com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData,com.google.gson.Gson)>(r3, r4);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("4", $r5);

     label4:
        return $r0;
    }

    public void fromGson(com.google.gson.JsonElement, com.google.gson.Gson, org.waveprotocol.wave.communication.json.RawStringData) throws org.waveprotocol.wave.communication.gson.GsonException
    {
        com.google.gson.JsonObject $r1;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r8;
        com.google.gson.JsonElement r0, $r3, $r7, $r9, $r11;
        com.google.gson.Gson r5;
        java.lang.String $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl $r10;
        org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl $r4;
        org.waveprotocol.wave.communication.json.RawStringData r6;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r2;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r0 := @parameter0: com.google.gson.JsonElement;

        r5 := @parameter1: com.google.gson.Gson;

        r6 := @parameter2: org.waveprotocol.wave.communication.json.RawStringData;

        $r1 = virtualinvoke r0.<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>();

        specialinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void invalidateAll()>();

        $z0 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("1");

        if $z0 == 0 goto label1;

        $r11 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("1");

        $z4 = virtualinvoke $r11.<com.google.gson.JsonElement: boolean isJsonNull()>();

        if $z4 != 0 goto label1;

        $r12 = virtualinvoke $r11.<com.google.gson.JsonElement: java.lang.String getAsString()>();

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void setChannelId(java.lang.String)>($r12);

     label1:
        $z5 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("2");

        if $z5 == 0 goto label2;

        $r9 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("2");

        $z3 = virtualinvoke $r9.<com.google.gson.JsonElement: boolean isJsonNull()>();

        if $z3 != 0 goto label2;

        $r10 = new org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl;

        specialinvoke $r10.<org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl: void <init>()>();

        staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: void extractJsonObject(org.waveprotocol.wave.communication.gson.GsonSerializable,com.google.gson.JsonElement,com.google.gson.Gson,org.waveprotocol.wave.communication.json.RawStringData)>($r10, $r9, r5, r6);

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void setDelta(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)>($r10);

     label2:
        $z6 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("3");

        if $z6 == 0 goto label3;

        $r7 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("3");

        $z2 = virtualinvoke $r7.<com.google.gson.JsonElement: boolean isJsonNull()>();

        if $z2 != 0 goto label3;

        $r8 = new org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        specialinvoke $r8.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void <init>()>();

        staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: void extractJsonObject(org.waveprotocol.wave.communication.gson.GsonSerializable,com.google.gson.JsonElement,com.google.gson.Gson,org.waveprotocol.wave.communication.json.RawStringData)>($r8, $r7, r5, r6);

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void setCommitVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r8);

     label3:
        $z7 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("4");

        if $z7 == 0 goto label4;

        $r3 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("4");

        $z1 = virtualinvoke $r3.<com.google.gson.JsonElement: boolean isJsonNull()>();

        if $z1 != 0 goto label4;

        $r4 = new org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl;

        specialinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl: void <init>()>();

        staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: void extractJsonObject(org.waveprotocol.wave.communication.gson.GsonSerializable,com.google.gson.JsonElement,com.google.gson.Gson,org.waveprotocol.wave.communication.json.RawStringData)>($r4, $r3, r5, r6);

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void setTerminator(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)>($r4);

     label4:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0, $r3;
        java.lang.Object r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream $r2, $r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream getPB()>();

        $r3 = (org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl) r1;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream getPB()>();

        $z1 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label2:
        return 0;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r1 instanceof org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream;

        if $z1 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream) r1;

        $z2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStreamUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream,org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream)>(r0, $r2);

        return $z2;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream getPB()>();

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream $r1;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream getPB()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream: java.lang.String toString()>();

        return $r2;
    }

    public volatile org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator getTerminator()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.proto.WaveletChannelTerminatorProtoImpl getTerminator()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolHashedVersion getCommitVersion()
    {
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getCommitVersion()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.concurrencycontrol.WaveletUpdate getDelta()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.proto.WaveletUpdateProtoImpl getDelta()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite getPB()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream getPB()>();

        return $r1;
    }

    public volatile void setPB(com.google.protobuf.MessageLite)
    {
        com.google.protobuf.MessageLite r1;
        org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl;

        r1 := @parameter0: com.google.protobuf.MessageLite;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream) r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.OpenWaveletChannelStreamProtoImpl: void setPB(org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelStream)>($r2);

        return;
    }
}
