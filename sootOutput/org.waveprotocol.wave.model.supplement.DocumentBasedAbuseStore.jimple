public final class org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore extends java.lang.Object implements org.waveprotocol.wave.model.supplement.ObservableAbuseStore
{
    public static final java.lang.String AGENT_ATTR;
    public static final java.lang.String CERTAINTY_ATTR;
    public static final java.lang.String COMMENT_ATTR;
    public static final java.lang.String TIMESTAMP_ATTR;
    public static final java.lang.String WANTED_ATTR;
    public static final java.lang.String WANTED_EVAL_TAG;
    public static final java.lang.String WAVELET_ID_ATTR;
    public static final java.lang.String IGNORED_ATTR;
    public static final java.lang.String ADDER_ATTR;
    private final org.waveprotocol.wave.model.adt.ObservableElementList list;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;

    public static org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore create(org.waveprotocol.wave.model.document.util.DocumentEventRouter)
    {
        org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore$ElementFactory $r3;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList $r4;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r0;
        org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore $r5;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getDocumentElement()>();

        $r3 = new org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore$ElementFactory;

        specialinvoke $r3.<org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore$ElementFactory: void <init>(org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore$1)>(null);

        $r4 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,java.lang.String,org.waveprotocol.wave.model.adt.docbased.Factory)>(r0, $r2, "wanted", $r3);

        $r5 = new org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore;

        specialinvoke $r5.<org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: void <init>(org.waveprotocol.wave.model.adt.ObservableElementList)>($r4);

        return $r5;
    }

    private void <init>(org.waveprotocol.wave.model.adt.ObservableElementList)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.adt.ObservableElementList r2, $r4;
        org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore r0;
        org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore$1 $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore;

        r2 := @parameter0: org.waveprotocol.wave.model.adt.ObservableElementList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r1;

        r0.<org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: org.waveprotocol.wave.model.adt.ObservableElementList list> = r2;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: org.waveprotocol.wave.model.adt.ObservableElementList list>;

        $r3 = new org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore$1;

        specialinvoke $r3.<org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore$1: void <init>(org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore)>(r0);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.adt.ObservableElementList: void addListener(java.lang.Object)>($r3);

        return;
    }

    public void addListener(org.waveprotocol.wave.model.supplement.ObservableAbuseStore$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.supplement.ObservableAbuseStore$Listener r1;
        org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.ObservableAbuseStore$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addWantedEvaluation(org.waveprotocol.wave.model.supplement.WantedEvaluation)
    {
        org.waveprotocol.wave.model.adt.ObservableElementList $r2;
        org.waveprotocol.wave.model.supplement.WantedEvaluation r1;
        org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.WantedEvaluation;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: org.waveprotocol.wave.model.adt.ObservableElementList list>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableElementList: java.lang.Object add(java.lang.Object)>(r1);

        return;
    }

    public java.util.Set getWantedEvaluations()
    {
        org.waveprotocol.wave.model.supplement.WantedEvaluation r6;
        java.util.Iterator $r4;
        org.waveprotocol.wave.model.adt.ObservableElementList $r2;
        java.lang.Iterable $r3;
        java.util.HashSet $r0;
        java.lang.Object $r5;
        org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: org.waveprotocol.wave.model.adt.ObservableElementList list>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableElementList: java.lang.Iterable getValues()>();

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.supplement.WantedEvaluation) $r5;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r6);

        goto label1;

     label2:
        return $r0;
    }

    public void removeListener(org.waveprotocol.wave.model.supplement.ObservableAbuseStore$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.supplement.ObservableAbuseStore$Listener r1;
        org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.ObservableAbuseStore$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private void triggerEvaluationAdded(org.waveprotocol.wave.model.supplement.WantedEvaluation)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.supplement.WantedEvaluation r5;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.supplement.ObservableAbuseStore$Listener r4;
        org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore;

        r5 := @parameter0: org.waveprotocol.wave.model.supplement.WantedEvaluation;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.supplement.ObservableAbuseStore$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.ObservableAbuseStore$Listener: void onEvaluationAdded(org.waveprotocol.wave.model.supplement.WantedEvaluation)>(r5);

        goto label1;

     label2:
        return;
    }

    public volatile void removeListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.supplement.ObservableAbuseStore$Listener $r2;
        org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.supplement.ObservableAbuseStore$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: void removeListener(org.waveprotocol.wave.model.supplement.ObservableAbuseStore$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.supplement.ObservableAbuseStore$Listener $r2;
        org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.supplement.ObservableAbuseStore$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: void addListener(org.waveprotocol.wave.model.supplement.ObservableAbuseStore$Listener)>($r2);

        return;
    }

    static void access$100(org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore, org.waveprotocol.wave.model.supplement.WantedEvaluation)
    {
        org.waveprotocol.wave.model.supplement.WantedEvaluation r1;
        org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore r0;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore;

        r1 := @parameter1: org.waveprotocol.wave.model.supplement.WantedEvaluation;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: void triggerEvaluationAdded(org.waveprotocol.wave.model.supplement.WantedEvaluation)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: java.lang.String ADDER_ATTR> = "adder";

        <org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: java.lang.String IGNORED_ATTR> = "ignored";

        <org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: java.lang.String WAVELET_ID_ATTR> = "wavelet_id";

        <org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: java.lang.String WANTED_EVAL_TAG> = "wanted";

        <org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: java.lang.String WANTED_ATTR> = "wanted";

        <org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: java.lang.String TIMESTAMP_ATTR> = "timestamp";

        <org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: java.lang.String COMMENT_ATTR> = "comment";

        <org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: java.lang.String CERTAINTY_ATTR> = "certainty";

        <org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: java.lang.String AGENT_ATTR> = "agent";

        return;
    }
}
