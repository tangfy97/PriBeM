public class org.apache.cxf.transport.TransportFinder extends java.lang.Object
{
    java.util.Map map;
    java.util.Set loaded;
    java.lang.Class 'cls';
    org.apache.cxf.configuration.ConfiguredBeanLocator locator;

    public void <init>(org.apache.cxf.Bus, java.util.Map, java.util.Set, java.lang.Class)
    {
        org.apache.cxf.Bus r3;
        java.util.Map r1;
        java.util.Set r6;
        org.apache.cxf.transport.TransportFinder r0;
        java.lang.Class r2;
        java.lang.Object $r4;
        org.apache.cxf.configuration.ConfiguredBeanLocator $r5;

        r0 := @this: org.apache.cxf.transport.TransportFinder;

        r3 := @parameter0: org.apache.cxf.Bus;

        r1 := @parameter1: java.util.Map;

        r6 := @parameter2: java.util.Set;

        r2 := @parameter3: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.cxf.transport.TransportFinder: java.util.Map map> = r1;

        r0.<org.apache.cxf.transport.TransportFinder: java.lang.Class 'cls'> = r2;

        $r4 = interfaceinvoke r3.<org.apache.cxf.Bus: java.lang.Object getExtension(java.lang.Class)>(class "Lorg/apache/cxf/configuration/ConfiguredBeanLocator;");

        $r5 = (org.apache.cxf.configuration.ConfiguredBeanLocator) $r4;

        r0.<org.apache.cxf.transport.TransportFinder: org.apache.cxf.configuration.ConfiguredBeanLocator locator> = $r5;

        r0.<org.apache.cxf.transport.TransportFinder: java.util.Set loaded> = r6;

        return;
    }

    public java.lang.Object findTransportForNamespace(java.lang.String)
    {
        java.util.Map $r4;
        org.apache.cxf.transport.TransportFinder r0;
        org.apache.cxf.configuration.ConfiguredBeanLocator $r1;
        java.lang.Object $r3, r5;
        java.lang.String r2;

        r0 := @this: org.apache.cxf.transport.TransportFinder;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.cxf.transport.TransportFinder: org.apache.cxf.configuration.ConfiguredBeanLocator locator>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = specialinvoke r0.<org.apache.cxf.transport.TransportFinder: java.lang.Object loadActivationNamespaces(java.lang.String)>(r2);

        r5 = $r3;

        if $r3 != null goto label2;

        r5 = specialinvoke r0.<org.apache.cxf.transport.TransportFinder: java.lang.Object loadDefaultNamespace(java.lang.String)>(r2);

     label2:
        if r5 != null goto label3;

        r5 = specialinvoke r0.<org.apache.cxf.transport.TransportFinder: java.lang.Object loadNoDefaultNamespace(java.lang.String)>(r2);

     label3:
        if r5 != null goto label4;

        specialinvoke r0.<org.apache.cxf.transport.TransportFinder: void loadAll()>();

        $r4 = r0.<org.apache.cxf.transport.TransportFinder: java.util.Map map>;

        r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

     label4:
        return r5;
    }

    public java.lang.Object findTransportForURI(java.lang.String)
    {
        org.apache.cxf.configuration.ConfiguredBeanLocator $r1;
        int $i0;
        org.apache.cxf.transport.TransportFinder r0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.Object $r5, $r7, r8;
        java.lang.String r6;
        boolean $z0;

        r0 := @this: org.apache.cxf.transport.TransportFinder;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.cxf.transport.TransportFinder: org.apache.cxf.configuration.ConfiguredBeanLocator locator>;

        if $r1 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 != 0 goto label2;

        $i0 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i0 >= 0 goto label3;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r7 = virtualinvoke r0.<org.apache.cxf.transport.TransportFinder: java.lang.Object checkForURI(java.lang.String)>(r6);

        r8 = $r7;

        if $r7 != null goto label4;

        $r5 = specialinvoke r0.<org.apache.cxf.transport.TransportFinder: java.lang.Object loadDefaultURIs(java.lang.String)>(r6);

        r8 = $r5;

        if $r5 != null goto label4;

        specialinvoke r0.<org.apache.cxf.transport.TransportFinder: void loadAll()>();

        r8 = virtualinvoke r0.<org.apache.cxf.transport.TransportFinder: java.lang.Object checkForURI(java.lang.String)>(r6);

     label4:
        return r8;
    }

    private static java.util.Set getPrefixes(java.lang.Object)
    {
        org.apache.cxf.transport.DestinationFactory r3;
        java.util.Set r1;
        org.apache.cxf.transport.AbstractTransportFactory r2;
        org.apache.cxf.transport.ConduitInitiator r4;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Object;

        r1 = null;

        $z0 = r0 instanceof org.apache.cxf.transport.AbstractTransportFactory;

        if $z0 == 0 goto label1;

        r2 = (org.apache.cxf.transport.AbstractTransportFactory) r0;

        r1 = virtualinvoke r2.<org.apache.cxf.transport.AbstractTransportFactory: java.util.Set getUriPrefixes()>();

        goto label3;

     label1:
        $z1 = r0 instanceof org.apache.cxf.transport.DestinationFactory;

        if $z1 == 0 goto label2;

        r3 = (org.apache.cxf.transport.DestinationFactory) r0;

        r1 = interfaceinvoke r3.<org.apache.cxf.transport.DestinationFactory: java.util.Set getUriPrefixes()>();

        goto label3;

     label2:
        $z2 = r0 instanceof org.apache.cxf.transport.ConduitInitiator;

        if $z2 == 0 goto label3;

        r4 = (org.apache.cxf.transport.ConduitInitiator) r0;

        r1 = interfaceinvoke r4.<org.apache.cxf.transport.ConduitInitiator: java.util.Set getUriPrefixes()>();

     label3:
        return r1;
    }

    private boolean hasPrefix(java.lang.String, java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.Object $r2;
        org.apache.cxf.transport.TransportFinder r5;
        java.lang.String r3, r4;
        boolean $z0, $z1;

        r5 := @this: org.apache.cxf.transport.TransportFinder;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.Collection;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $z1 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>(r3);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public java.lang.Object checkForURI(java.lang.String)
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        java.util.Set $r6;
        java.util.Map $r1;
        org.apache.cxf.transport.TransportFinder r0;
        java.lang.Object $r4;
        java.lang.String r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.cxf.transport.TransportFinder;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.cxf.transport.TransportFinder: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = staticinvoke <org.apache.cxf.transport.TransportFinder: java.util.Set getPrefixes(java.lang.Object)>($r4);

        $z1 = specialinvoke r0.<org.apache.cxf.transport.TransportFinder: boolean hasPrefix(java.lang.String,java.util.Collection)>(r5, $r6);

        if $z1 == 0 goto label2;

        return $r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    private void loadAll()
    {
        org.apache.cxf.transport.TransportFinder r1;
        java.lang.Class $r2;
        org.apache.cxf.configuration.ConfiguredBeanLocator $r3;
        org.apache.cxf.transport.TransportFinder$1 $r0;

        r1 := @this: org.apache.cxf.transport.TransportFinder;

        $r0 = new org.apache.cxf.transport.TransportFinder$1;

        specialinvoke $r0.<org.apache.cxf.transport.TransportFinder$1: void <init>(org.apache.cxf.transport.TransportFinder)>(r1);

        $r3 = r1.<org.apache.cxf.transport.TransportFinder: org.apache.cxf.configuration.ConfiguredBeanLocator locator>;

        $r2 = r1.<org.apache.cxf.transport.TransportFinder: java.lang.Class 'cls'>;

        interfaceinvoke $r3.<org.apache.cxf.configuration.ConfiguredBeanLocator: boolean loadBeansOfType(java.lang.Class,org.apache.cxf.configuration.ConfiguredBeanLocator$BeanLoaderListener)>($r2, $r0);

        return;
    }

    private void registerBean(java.lang.Object)
    {
        java.lang.Object[] $r4;
        java.util.Map $r12, $r13, $r20, $r21;
        java.lang.String r10, r23;
        java.lang.reflect.Method $r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r8, $r18;
        java.util.Collection $r6, $r7;
        java.lang.Class[] $r2;
        org.apache.cxf.transport.AbstractTransportFactory $r14, $r16;
        java.lang.Exception $r22;
        java.util.List $r15, $r17;
        java.lang.Object r0, $r5, $r9, $r19;
        java.lang.Class $r1;
        org.apache.cxf.transport.TransportFinder r11;

        r11 := @this: org.apache.cxf.transport.TransportFinder;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.cxf.transport.AbstractTransportFactory;

        if $z0 == 0 goto label4;

        $r14 = (org.apache.cxf.transport.AbstractTransportFactory) r0;

        $r15 = virtualinvoke $r14.<org.apache.cxf.transport.AbstractTransportFactory: java.util.List getTransportIds()>();

        if $r15 == null goto label9;

        $r16 = (org.apache.cxf.transport.AbstractTransportFactory) r0;

        $r17 = virtualinvoke $r16.<org.apache.cxf.transport.AbstractTransportFactory: java.util.List getTransportIds()>();

        $r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.lang.String) $r19;

        $r20 = r11.<org.apache.cxf.transport.TransportFinder: java.util.Map map>;

        $z4 = interfaceinvoke $r20.<java.util.Map: boolean containsKey(java.lang.Object)>(r23);

        if $z4 != 0 goto label2;

        $r21 = r11.<org.apache.cxf.transport.TransportFinder: java.util.Map map>;

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r23, r0);

     label2:
        goto label1;

     label3:
        goto label9;

     label4:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = newarray (java.lang.Class)[0];

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getActivationNamespaces", $r2);

        $r4 = newarray (java.lang.Object)[0];

        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r4);

        $r6 = (java.util.Collection) $r5;

        $r7 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Collection cast(java.util.Collection)>($r6);

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r9;

        $r12 = r11.<org.apache.cxf.transport.TransportFinder: java.util.Map map>;

        $z2 = interfaceinvoke $r12.<java.util.Map: boolean containsKey(java.lang.Object)>(r10);

        if $z2 != 0 goto label6;

        $r13 = r11.<org.apache.cxf.transport.TransportFinder: java.util.Map map>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r0);

     label6:
        goto label5;

     label7:
        goto label9;

     label8:
        $r22 := @caughtexception;

     label9:
        return;

        catch java.lang.Exception from label4 to label7 with label8;
    }

    private java.lang.Object loadActivationNamespaces(java.lang.String)
    {
        java.util.Map $r5;
        org.apache.cxf.transport.TransportFinder r1;
        java.lang.Class $r3;
        org.apache.cxf.configuration.ConfiguredBeanLocator $r4;
        java.lang.Object $r6;
        java.lang.String r2;
        org.apache.cxf.transport.TransportFinder$2 $r0;

        r1 := @this: org.apache.cxf.transport.TransportFinder;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.cxf.transport.TransportFinder$2;

        specialinvoke $r0.<org.apache.cxf.transport.TransportFinder$2: void <init>(org.apache.cxf.transport.TransportFinder,java.lang.String)>(r1, r2);

        $r4 = r1.<org.apache.cxf.transport.TransportFinder: org.apache.cxf.configuration.ConfiguredBeanLocator locator>;

        $r3 = r1.<org.apache.cxf.transport.TransportFinder: java.lang.Class 'cls'>;

        interfaceinvoke $r4.<org.apache.cxf.configuration.ConfiguredBeanLocator: boolean loadBeansOfType(java.lang.Class,org.apache.cxf.configuration.ConfiguredBeanLocator$BeanLoaderListener)>($r3, $r0);

        $r5 = r1.<org.apache.cxf.transport.TransportFinder: java.util.Map map>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        return $r6;
    }

    private java.lang.Object loadDefaultURIs(java.lang.String)
    {
        org.apache.cxf.transport.TransportFinder r1;
        java.lang.Class $r3;
        org.apache.cxf.configuration.ConfiguredBeanLocator $r4;
        java.lang.Object $r5;
        java.lang.String r2;
        org.apache.cxf.transport.TransportFinder$3 $r0;

        r1 := @this: org.apache.cxf.transport.TransportFinder;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.cxf.transport.TransportFinder$3;

        specialinvoke $r0.<org.apache.cxf.transport.TransportFinder$3: void <init>(org.apache.cxf.transport.TransportFinder,java.lang.String)>(r1, r2);

        $r4 = r1.<org.apache.cxf.transport.TransportFinder: org.apache.cxf.configuration.ConfiguredBeanLocator locator>;

        $r3 = r1.<org.apache.cxf.transport.TransportFinder: java.lang.Class 'cls'>;

        interfaceinvoke $r4.<org.apache.cxf.configuration.ConfiguredBeanLocator: boolean loadBeansOfType(java.lang.Class,org.apache.cxf.configuration.ConfiguredBeanLocator$BeanLoaderListener)>($r3, $r0);

        $r5 = virtualinvoke $r0.<org.apache.cxf.transport.TransportFinder$URIBeanLoaderListener: java.lang.Object getFactory()>();

        return $r5;
    }

    private java.lang.Object loadDefaultNamespace(java.lang.String)
    {
        java.util.Map $r5;
        org.apache.cxf.transport.TransportFinder r1;
        java.lang.Class $r3;
        org.apache.cxf.configuration.ConfiguredBeanLocator $r4;
        java.lang.Object $r6;
        java.lang.String r2;
        org.apache.cxf.transport.TransportFinder$4 $r0;

        r1 := @this: org.apache.cxf.transport.TransportFinder;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.cxf.transport.TransportFinder$4;

        specialinvoke $r0.<org.apache.cxf.transport.TransportFinder$4: void <init>(org.apache.cxf.transport.TransportFinder,java.lang.String)>(r1, r2);

        $r4 = r1.<org.apache.cxf.transport.TransportFinder: org.apache.cxf.configuration.ConfiguredBeanLocator locator>;

        $r3 = r1.<org.apache.cxf.transport.TransportFinder: java.lang.Class 'cls'>;

        interfaceinvoke $r4.<org.apache.cxf.configuration.ConfiguredBeanLocator: boolean loadBeansOfType(java.lang.Class,org.apache.cxf.configuration.ConfiguredBeanLocator$BeanLoaderListener)>($r3, $r0);

        $r5 = r1.<org.apache.cxf.transport.TransportFinder: java.util.Map map>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        return $r6;
    }

    private java.lang.Object loadNoDefaultNamespace(java.lang.String)
    {
        org.apache.cxf.transport.TransportFinder$5 $r0;
        java.util.Map $r5;
        org.apache.cxf.transport.TransportFinder r1;
        java.lang.Class $r3;
        org.apache.cxf.configuration.ConfiguredBeanLocator $r4;
        java.lang.Object $r6;
        java.lang.String r2;

        r1 := @this: org.apache.cxf.transport.TransportFinder;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.cxf.transport.TransportFinder$5;

        specialinvoke $r0.<org.apache.cxf.transport.TransportFinder$5: void <init>(org.apache.cxf.transport.TransportFinder,java.lang.String)>(r1, r2);

        $r4 = r1.<org.apache.cxf.transport.TransportFinder: org.apache.cxf.configuration.ConfiguredBeanLocator locator>;

        $r3 = r1.<org.apache.cxf.transport.TransportFinder: java.lang.Class 'cls'>;

        interfaceinvoke $r4.<org.apache.cxf.configuration.ConfiguredBeanLocator: boolean loadBeansOfType(java.lang.Class,org.apache.cxf.configuration.ConfiguredBeanLocator$BeanLoaderListener)>($r3, $r0);

        $r5 = r1.<org.apache.cxf.transport.TransportFinder: java.util.Map map>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        return $r6;
    }

    static void access$000(org.apache.cxf.transport.TransportFinder, java.lang.Object)
    {
        org.apache.cxf.transport.TransportFinder r0;
        java.lang.Object r1;

        r0 := @parameter0: org.apache.cxf.transport.TransportFinder;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.apache.cxf.transport.TransportFinder: void registerBean(java.lang.Object)>(r1);

        return;
    }

    static boolean access$100(org.apache.cxf.transport.TransportFinder, java.lang.String, java.util.Collection)
    {
        java.util.Collection r2;
        org.apache.cxf.transport.TransportFinder r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: org.apache.cxf.transport.TransportFinder;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Collection;

        $z0 = specialinvoke r0.<org.apache.cxf.transport.TransportFinder: boolean hasPrefix(java.lang.String,java.util.Collection)>(r1, r2);

        return $z0;
    }

    static java.util.Set access$200(java.lang.Object)
    {
        java.util.Set $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.apache.cxf.transport.TransportFinder: java.util.Set getPrefixes(java.lang.Object)>(r0);

        return $r1;
    }
}
