class com.hp.hpl.jena.sparql.sse.builders.BuilderOp$3 extends java.lang.Object implements com.hp.hpl.jena.sparql.sse.builders.BuilderOp$Build
{
    final com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0;

    void <init>(com.hp.hpl.jena.sparql.sse.builders.BuilderOp)
    {
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp r1;
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp$3 r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.builders.BuilderOp$3;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.builders.BuilderOp;

        r0.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp$3: com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op make(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.graph.Node $r6, r12;
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp$3 r11;
        int $i0, i1;
        java.lang.String $r10;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.sse.ItemList r1, $r4;
        com.hp.hpl.jena.sparql.core.BasicPattern $r0;
        com.hp.hpl.jena.sparql.sse.Item $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern $r2;
        com.hp.hpl.jena.sparql.core.Quad $r5;
        com.hp.hpl.jena.graph.Triple $r13;
        java.lang.StringBuilder $r7, $r8, $r9;

        r11 := @this: com.hp.hpl.jena.sparql.sse.builders.BuilderOp$3;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        r12 = null;

        $r0 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        i1 = 1;

     label1:
        $i0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if i1 >= $i0 goto label5;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(i1);

        $z0 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.sse.Item: boolean isList()>();

        if $z0 != 0 goto label2;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>($r3, "Not a quad structure");

     label2:
        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.sparql.core.Quad buildQuad(com.hp.hpl.jena.sparql.sse.ItemList)>($r4);

        if r12 != null goto label3;

        r12 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        goto label4;

     label3:
        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $z1 = virtualinvoke r12.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label4;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Quad has different graph node in quadapttern: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>($r3, $r10);

     label4:
        $r13 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Triple asTriple()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.core.BasicPattern: void add(com.hp.hpl.jena.graph.Triple)>($r13);

        i1 = i1 + 1;

        goto label1;

     label5:
        $r2 = new com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern)>(r12, $r0);

        return $r2;
    }
}
