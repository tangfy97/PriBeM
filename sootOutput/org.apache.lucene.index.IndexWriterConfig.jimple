public final class org.apache.lucene.index.IndexWriterConfig extends org.apache.lucene.index.LiveIndexWriterConfig implements java.lang.Cloneable
{
    public static final int DEFAULT_TERM_INDEX_INTERVAL;
    public static final int DISABLE_AUTO_FLUSH;
    public static final int DEFAULT_MAX_BUFFERED_DELETE_TERMS;
    public static final int DEFAULT_MAX_BUFFERED_DOCS;
    public static final double DEFAULT_RAM_BUFFER_SIZE_MB;
    public static long WRITE_LOCK_TIMEOUT;
    public static final boolean DEFAULT_READER_POOLING;
    public static final int DEFAULT_READER_TERMS_INDEX_DIVISOR;
    public static final int DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;
    public static final int DEFAULT_MAX_THREAD_STATES;

    public static void setDefaultWriteLockTimeout(long)
    {
        long l0;

        l0 := @parameter0: long;

        <org.apache.lucene.index.IndexWriterConfig: long WRITE_LOCK_TIMEOUT> = l0;

        return;
    }

    public static long getDefaultWriteLockTimeout()
    {
        long $l0;

        $l0 = <org.apache.lucene.index.IndexWriterConfig: long WRITE_LOCK_TIMEOUT>;

        return $l0;
    }

    public void <init>(org.apache.lucene.util.Version, org.apache.lucene.analysis.Analyzer)
    {
        org.apache.lucene.index.IndexWriterConfig r0;
        org.apache.lucene.util.Version r2;
        org.apache.lucene.analysis.Analyzer r1;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        r2 := @parameter0: org.apache.lucene.util.Version;

        r1 := @parameter1: org.apache.lucene.analysis.Analyzer;

        specialinvoke r0.<org.apache.lucene.index.LiveIndexWriterConfig: void <init>(org.apache.lucene.analysis.Analyzer,org.apache.lucene.util.Version)>(r1, r2);

        return;
    }

    public org.apache.lucene.index.IndexWriterConfig clone()
    {
        java.lang.CloneNotSupportedException $r14;
        org.apache.lucene.index.MergeScheduler $r12, $r13;
        org.apache.lucene.index.MergePolicy $r10, $r11;
        org.apache.lucene.index.IndexDeletionPolicy $r2, $r3;
        org.apache.lucene.index.DocumentsWriterPerThreadPool $r6, $r7;
        java.lang.RuntimeException $r15;
        org.apache.lucene.util.InfoStream $r8, $r9;
        org.apache.lucene.index.FlushPolicy $r4, $r5;
        java.lang.Object $r1;
        org.apache.lucene.index.IndexWriterConfig r0, r16;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r16 = (org.apache.lucene.index.IndexWriterConfig) $r1;

        $r2 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexDeletionPolicy delPolicy>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.IndexDeletionPolicy: org.apache.lucene.index.IndexDeletionPolicy clone()>();

        r16.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexDeletionPolicy delPolicy> = $r3;

        $r4 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.FlushPolicy flushPolicy>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.FlushPolicy: org.apache.lucene.index.FlushPolicy clone()>();

        r16.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.FlushPolicy flushPolicy> = $r5;

        $r6 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.DocumentsWriterPerThreadPool indexerThreadPool>;

        $r7 = virtualinvoke $r6.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool clone()>();

        r16.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.DocumentsWriterPerThreadPool indexerThreadPool> = $r7;

        $r8 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.util.InfoStream infoStream>;

        $r9 = virtualinvoke $r8.<org.apache.lucene.util.InfoStream: org.apache.lucene.util.InfoStream clone()>();

        r16.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.util.InfoStream infoStream> = $r9;

        $r10 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.MergePolicy mergePolicy>;

        $r11 = virtualinvoke $r10.<org.apache.lucene.index.MergePolicy: org.apache.lucene.index.MergePolicy clone()>();

        r16.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.MergePolicy mergePolicy> = $r11;

        $r12 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.MergeScheduler mergeScheduler>;

        $r13 = virtualinvoke $r12.<org.apache.lucene.index.MergeScheduler: org.apache.lucene.index.MergeScheduler clone()>();

        r16.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.MergeScheduler mergeScheduler> = $r13;

     label2:
        return r16;

     label3:
        $r14 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r14);

        throw $r15;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public org.apache.lucene.index.IndexWriterConfig setOpenMode(org.apache.lucene.index.IndexWriterConfig$OpenMode)
    {
        java.lang.IllegalArgumentException $r2;
        org.apache.lucene.index.IndexWriterConfig r1;
        org.apache.lucene.index.IndexWriterConfig$OpenMode r0;

        r1 := @this: org.apache.lucene.index.IndexWriterConfig;

        r0 := @parameter0: org.apache.lucene.index.IndexWriterConfig$OpenMode;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("openMode must not be null");

        throw $r2;

     label1:
        r1.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexWriterConfig$OpenMode openMode> = r0;

        return r1;
    }

    public org.apache.lucene.index.IndexWriterConfig$OpenMode getOpenMode()
    {
        org.apache.lucene.index.IndexWriterConfig r0;
        org.apache.lucene.index.IndexWriterConfig$OpenMode $r1;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $r1 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexWriterConfig$OpenMode openMode>;

        return $r1;
    }

    public org.apache.lucene.index.IndexWriterConfig setIndexDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)
    {
        org.apache.lucene.index.IndexDeletionPolicy r0;
        java.lang.IllegalArgumentException $r2;
        org.apache.lucene.index.IndexWriterConfig r1;

        r1 := @this: org.apache.lucene.index.IndexWriterConfig;

        r0 := @parameter0: org.apache.lucene.index.IndexDeletionPolicy;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("indexDeletionPolicy must not be null");

        throw $r2;

     label1:
        r1.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexDeletionPolicy delPolicy> = r0;

        return r1;
    }

    public org.apache.lucene.index.IndexDeletionPolicy getIndexDeletionPolicy()
    {
        org.apache.lucene.index.IndexDeletionPolicy $r1;
        org.apache.lucene.index.IndexWriterConfig r0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $r1 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexDeletionPolicy delPolicy>;

        return $r1;
    }

    public org.apache.lucene.index.IndexWriterConfig setIndexCommit(org.apache.lucene.index.IndexCommit)
    {
        org.apache.lucene.index.IndexCommit r1;
        org.apache.lucene.index.IndexWriterConfig r0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        r1 := @parameter0: org.apache.lucene.index.IndexCommit;

        r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexCommit commit> = r1;

        return r0;
    }

    public org.apache.lucene.index.IndexCommit getIndexCommit()
    {
        org.apache.lucene.index.IndexCommit $r1;
        org.apache.lucene.index.IndexWriterConfig r0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $r1 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexCommit commit>;

        return $r1;
    }

    public org.apache.lucene.index.IndexWriterConfig setSimilarity(org.apache.lucene.search.similarities.Similarity)
    {
        java.lang.IllegalArgumentException $r2;
        org.apache.lucene.index.IndexWriterConfig r1;
        org.apache.lucene.search.similarities.Similarity r0;

        r1 := @this: org.apache.lucene.index.IndexWriterConfig;

        r0 := @parameter0: org.apache.lucene.search.similarities.Similarity;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("similarity must not be null");

        throw $r2;

     label1:
        r1.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.search.similarities.Similarity similarity> = r0;

        return r1;
    }

    public org.apache.lucene.search.similarities.Similarity getSimilarity()
    {
        org.apache.lucene.index.IndexWriterConfig r0;
        org.apache.lucene.search.similarities.Similarity $r1;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $r1 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.search.similarities.Similarity similarity>;

        return $r1;
    }

    public org.apache.lucene.index.IndexWriterConfig setMergeScheduler(org.apache.lucene.index.MergeScheduler)
    {
        org.apache.lucene.index.MergeScheduler r0;
        java.lang.IllegalArgumentException $r2;
        org.apache.lucene.index.IndexWriterConfig r1;

        r1 := @this: org.apache.lucene.index.IndexWriterConfig;

        r0 := @parameter0: org.apache.lucene.index.MergeScheduler;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mergeScheduler must not be null");

        throw $r2;

     label1:
        r1.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.MergeScheduler mergeScheduler> = r0;

        return r1;
    }

    public org.apache.lucene.index.MergeScheduler getMergeScheduler()
    {
        org.apache.lucene.index.MergeScheduler $r1;
        org.apache.lucene.index.IndexWriterConfig r0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $r1 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.MergeScheduler mergeScheduler>;

        return $r1;
    }

    public org.apache.lucene.index.IndexWriterConfig setWriteLockTimeout(long)
    {
        long l0;
        org.apache.lucene.index.IndexWriterConfig r0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        l0 := @parameter0: long;

        r0.<org.apache.lucene.index.IndexWriterConfig: long writeLockTimeout> = l0;

        return r0;
    }

    public long getWriteLockTimeout()
    {
        long $l0;
        org.apache.lucene.index.IndexWriterConfig r0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $l0 = r0.<org.apache.lucene.index.IndexWriterConfig: long writeLockTimeout>;

        return $l0;
    }

    public org.apache.lucene.index.IndexWriterConfig setMergePolicy(org.apache.lucene.index.MergePolicy)
    {
        java.lang.IllegalArgumentException $r2;
        org.apache.lucene.index.IndexWriterConfig r1;
        org.apache.lucene.index.MergePolicy r0;

        r1 := @this: org.apache.lucene.index.IndexWriterConfig;

        r0 := @parameter0: org.apache.lucene.index.MergePolicy;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mergePolicy must not be null");

        throw $r2;

     label1:
        r1.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.MergePolicy mergePolicy> = r0;

        return r1;
    }

    public org.apache.lucene.index.IndexWriterConfig setCodec(org.apache.lucene.codecs.Codec)
    {
        java.lang.IllegalArgumentException $r2;
        org.apache.lucene.index.IndexWriterConfig r1;
        org.apache.lucene.codecs.Codec r0;

        r1 := @this: org.apache.lucene.index.IndexWriterConfig;

        r0 := @parameter0: org.apache.lucene.codecs.Codec;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("codec must not be null");

        throw $r2;

     label1:
        r1.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.codecs.Codec codec> = r0;

        return r1;
    }

    public org.apache.lucene.codecs.Codec getCodec()
    {
        org.apache.lucene.index.IndexWriterConfig r0;
        org.apache.lucene.codecs.Codec $r1;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $r1 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.codecs.Codec codec>;

        return $r1;
    }

    public org.apache.lucene.index.MergePolicy getMergePolicy()
    {
        org.apache.lucene.index.IndexWriterConfig r0;
        org.apache.lucene.index.MergePolicy $r1;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $r1 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.MergePolicy mergePolicy>;

        return $r1;
    }

    org.apache.lucene.index.IndexWriterConfig setIndexerThreadPool(org.apache.lucene.index.DocumentsWriterPerThreadPool)
    {
        org.apache.lucene.index.DocumentsWriterPerThreadPool r0;
        java.lang.IllegalArgumentException $r2;
        org.apache.lucene.index.IndexWriterConfig r1;

        r1 := @this: org.apache.lucene.index.IndexWriterConfig;

        r0 := @parameter0: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("threadPool must not be null");

        throw $r2;

     label1:
        r1.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.DocumentsWriterPerThreadPool indexerThreadPool> = r0;

        return r1;
    }

    org.apache.lucene.index.DocumentsWriterPerThreadPool getIndexerThreadPool()
    {
        org.apache.lucene.index.DocumentsWriterPerThreadPool $r1;
        org.apache.lucene.index.IndexWriterConfig r0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $r1 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.DocumentsWriterPerThreadPool indexerThreadPool>;

        return $r1;
    }

    public org.apache.lucene.index.IndexWriterConfig setMaxThreadStates(int)
    {
        int i0;
        org.apache.lucene.index.IndexWriterConfig r0;
        org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool $r1;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        i0 := @parameter0: int;

        $r1 = new org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool;

        specialinvoke $r1.<org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool: void <init>(int)>(i0);

        r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.DocumentsWriterPerThreadPool indexerThreadPool> = $r1;

        return r0;
    }

    public int getMaxThreadStates()
    {
        java.lang.IllegalStateException $r4;
        org.apache.lucene.index.DocumentsWriterPerThreadPool $r1;
        org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool $r2;
        int $i0;
        org.apache.lucene.index.IndexWriterConfig r0;
        java.lang.ClassCastException $r3;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

     label1:
        $r1 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.DocumentsWriterPerThreadPool indexerThreadPool>;

        $r2 = (org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool) $r1;

        $i0 = virtualinvoke $r2.<org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool: int getMaxThreadStates()>();

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.lucene.index.IndexWriterConfig setReaderPooling(boolean)
    {
        org.apache.lucene.index.IndexWriterConfig r0;
        boolean z0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.index.IndexWriterConfig: boolean readerPooling> = z0;

        return r0;
    }

    public boolean getReaderPooling()
    {
        org.apache.lucene.index.IndexWriterConfig r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $z0 = r0.<org.apache.lucene.index.IndexWriterConfig: boolean readerPooling>;

        return $z0;
    }

    org.apache.lucene.index.IndexWriterConfig setIndexingChain(org.apache.lucene.index.DocumentsWriterPerThread$IndexingChain)
    {
        java.lang.IllegalArgumentException $r2;
        org.apache.lucene.index.IndexWriterConfig r1;
        org.apache.lucene.index.DocumentsWriterPerThread$IndexingChain r0;

        r1 := @this: org.apache.lucene.index.IndexWriterConfig;

        r0 := @parameter0: org.apache.lucene.index.DocumentsWriterPerThread$IndexingChain;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("indexingChain must not be null");

        throw $r2;

     label1:
        r1.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.DocumentsWriterPerThread$IndexingChain indexingChain> = r0;

        return r1;
    }

    org.apache.lucene.index.DocumentsWriterPerThread$IndexingChain getIndexingChain()
    {
        org.apache.lucene.index.IndexWriterConfig r0;
        org.apache.lucene.index.DocumentsWriterPerThread$IndexingChain $r1;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $r1 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.DocumentsWriterPerThread$IndexingChain indexingChain>;

        return $r1;
    }

    org.apache.lucene.index.IndexWriterConfig setFlushPolicy(org.apache.lucene.index.FlushPolicy)
    {
        org.apache.lucene.index.FlushPolicy r0;
        java.lang.IllegalArgumentException $r2;
        org.apache.lucene.index.IndexWriterConfig r1;

        r1 := @this: org.apache.lucene.index.IndexWriterConfig;

        r0 := @parameter0: org.apache.lucene.index.FlushPolicy;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("flushPolicy must not be null");

        throw $r2;

     label1:
        r1.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.FlushPolicy flushPolicy> = r0;

        return r1;
    }

    public org.apache.lucene.index.IndexWriterConfig setRAMPerThreadHardLimitMB(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        org.apache.lucene.index.IndexWriterConfig r1;

        r1 := @this: org.apache.lucene.index.IndexWriterConfig;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        if i0 < 2048 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("PerThreadHardLimit must be greater than 0 and less than 2048MB");

        throw $r0;

     label2:
        r1.<org.apache.lucene.index.IndexWriterConfig: int perThreadHardLimitMB> = i0;

        return r1;
    }

    public int getRAMPerThreadHardLimitMB()
    {
        int $i0;
        org.apache.lucene.index.IndexWriterConfig r0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $i0 = r0.<org.apache.lucene.index.IndexWriterConfig: int perThreadHardLimitMB>;

        return $i0;
    }

    org.apache.lucene.index.FlushPolicy getFlushPolicy()
    {
        org.apache.lucene.index.FlushPolicy $r1;
        org.apache.lucene.index.IndexWriterConfig r0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $r1 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.FlushPolicy flushPolicy>;

        return $r1;
    }

    public org.apache.lucene.util.InfoStream getInfoStream()
    {
        org.apache.lucene.util.InfoStream $r1;
        org.apache.lucene.index.IndexWriterConfig r0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $r1 = r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.util.InfoStream infoStream>;

        return $r1;
    }

    public org.apache.lucene.analysis.Analyzer getAnalyzer()
    {
        org.apache.lucene.index.IndexWriterConfig r0;
        org.apache.lucene.analysis.Analyzer $r1;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $r1 = specialinvoke r0.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.analysis.Analyzer getAnalyzer()>();

        return $r1;
    }

    public int getMaxBufferedDeleteTerms()
    {
        int $i0;
        org.apache.lucene.index.IndexWriterConfig r0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $i0 = specialinvoke r0.<org.apache.lucene.index.LiveIndexWriterConfig: int getMaxBufferedDeleteTerms()>();

        return $i0;
    }

    public int getMaxBufferedDocs()
    {
        int $i0;
        org.apache.lucene.index.IndexWriterConfig r0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $i0 = specialinvoke r0.<org.apache.lucene.index.LiveIndexWriterConfig: int getMaxBufferedDocs()>();

        return $i0;
    }

    public org.apache.lucene.index.IndexWriter$IndexReaderWarmer getMergedSegmentWarmer()
    {
        org.apache.lucene.index.IndexWriter$IndexReaderWarmer $r1;
        org.apache.lucene.index.IndexWriterConfig r0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $r1 = specialinvoke r0.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.index.IndexWriter$IndexReaderWarmer getMergedSegmentWarmer()>();

        return $r1;
    }

    public double getRAMBufferSizeMB()
    {
        org.apache.lucene.index.IndexWriterConfig r0;
        double $d0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $d0 = specialinvoke r0.<org.apache.lucene.index.LiveIndexWriterConfig: double getRAMBufferSizeMB()>();

        return $d0;
    }

    public int getReaderTermsIndexDivisor()
    {
        int $i0;
        org.apache.lucene.index.IndexWriterConfig r0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $i0 = specialinvoke r0.<org.apache.lucene.index.LiveIndexWriterConfig: int getReaderTermsIndexDivisor()>();

        return $i0;
    }

    public int getTermIndexInterval()
    {
        int $i0;
        org.apache.lucene.index.IndexWriterConfig r0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $i0 = specialinvoke r0.<org.apache.lucene.index.LiveIndexWriterConfig: int getTermIndexInterval()>();

        return $i0;
    }

    public org.apache.lucene.index.IndexWriterConfig setInfoStream(org.apache.lucene.util.InfoStream)
    {
        org.apache.lucene.util.InfoStream r0;
        java.lang.IllegalArgumentException $r2;
        org.apache.lucene.index.IndexWriterConfig r1;

        r1 := @this: org.apache.lucene.index.IndexWriterConfig;

        r0 := @parameter0: org.apache.lucene.util.InfoStream;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot set InfoStream implementation to null. To disable logging use InfoStream.NO_OUTPUT");

        throw $r2;

     label1:
        r1.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.util.InfoStream infoStream> = r0;

        return r1;
    }

    public org.apache.lucene.index.IndexWriterConfig setInfoStream(java.io.PrintStream)
    {
        java.io.PrintStream r0;
        java.lang.IllegalArgumentException $r4;
        org.apache.lucene.index.IndexWriterConfig r1, $r3;
        org.apache.lucene.util.PrintStreamInfoStream $r2;

        r1 := @this: org.apache.lucene.index.IndexWriterConfig;

        r0 := @parameter0: java.io.PrintStream;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("printStream must not be null");

        throw $r4;

     label1:
        $r2 = new org.apache.lucene.util.PrintStreamInfoStream;

        specialinvoke $r2.<org.apache.lucene.util.PrintStreamInfoStream: void <init>(java.io.PrintStream)>(r0);

        $r3 = virtualinvoke r1.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexWriterConfig setInfoStream(org.apache.lucene.util.InfoStream)>($r2);

        return $r3;
    }

    public org.apache.lucene.index.IndexWriterConfig setMaxBufferedDeleteTerms(int)
    {
        org.apache.lucene.index.LiveIndexWriterConfig $r1;
        int i0;
        org.apache.lucene.index.IndexWriterConfig r0, $r2;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.index.LiveIndexWriterConfig setMaxBufferedDeleteTerms(int)>(i0);

        $r2 = (org.apache.lucene.index.IndexWriterConfig) $r1;

        return $r2;
    }

    public org.apache.lucene.index.IndexWriterConfig setMaxBufferedDocs(int)
    {
        org.apache.lucene.index.LiveIndexWriterConfig $r1;
        int i0;
        org.apache.lucene.index.IndexWriterConfig r0, $r2;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.index.LiveIndexWriterConfig setMaxBufferedDocs(int)>(i0);

        $r2 = (org.apache.lucene.index.IndexWriterConfig) $r1;

        return $r2;
    }

    public org.apache.lucene.index.IndexWriterConfig setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)
    {
        org.apache.lucene.index.IndexWriter$IndexReaderWarmer r1;
        org.apache.lucene.index.LiveIndexWriterConfig $r2;
        org.apache.lucene.index.IndexWriterConfig r0, $r3;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        r1 := @parameter0: org.apache.lucene.index.IndexWriter$IndexReaderWarmer;

        $r2 = specialinvoke r0.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.index.LiveIndexWriterConfig setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)>(r1);

        $r3 = (org.apache.lucene.index.IndexWriterConfig) $r2;

        return $r3;
    }

    public org.apache.lucene.index.IndexWriterConfig setRAMBufferSizeMB(double)
    {
        org.apache.lucene.index.LiveIndexWriterConfig $r1;
        org.apache.lucene.index.IndexWriterConfig r0, $r2;
        double d0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        d0 := @parameter0: double;

        $r1 = specialinvoke r0.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.index.LiveIndexWriterConfig setRAMBufferSizeMB(double)>(d0);

        $r2 = (org.apache.lucene.index.IndexWriterConfig) $r1;

        return $r2;
    }

    public org.apache.lucene.index.IndexWriterConfig setReaderTermsIndexDivisor(int)
    {
        org.apache.lucene.index.LiveIndexWriterConfig $r1;
        int i0;
        org.apache.lucene.index.IndexWriterConfig r0, $r2;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.index.LiveIndexWriterConfig setReaderTermsIndexDivisor(int)>(i0);

        $r2 = (org.apache.lucene.index.IndexWriterConfig) $r1;

        return $r2;
    }

    public org.apache.lucene.index.IndexWriterConfig setTermIndexInterval(int)
    {
        org.apache.lucene.index.LiveIndexWriterConfig $r1;
        int i0;
        org.apache.lucene.index.IndexWriterConfig r0, $r2;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.index.LiveIndexWriterConfig setTermIndexInterval(int)>(i0);

        $r2 = (org.apache.lucene.index.IndexWriterConfig) $r1;

        return $r2;
    }

    public volatile org.apache.lucene.index.LiveIndexWriterConfig setReaderTermsIndexDivisor(int)
    {
        int i0;
        org.apache.lucene.index.IndexWriterConfig r0, $r1;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexWriterConfig setReaderTermsIndexDivisor(int)>(i0);

        return $r1;
    }

    public volatile org.apache.lucene.index.LiveIndexWriterConfig setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)
    {
        org.apache.lucene.index.IndexWriter$IndexReaderWarmer r1;
        org.apache.lucene.index.IndexWriterConfig r0, $r2;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        r1 := @parameter0: org.apache.lucene.index.IndexWriter$IndexReaderWarmer;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexWriterConfig setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)>(r1);

        return $r2;
    }

    public volatile org.apache.lucene.index.LiveIndexWriterConfig setMaxBufferedDocs(int)
    {
        int i0;
        org.apache.lucene.index.IndexWriterConfig r0, $r1;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexWriterConfig setMaxBufferedDocs(int)>(i0);

        return $r1;
    }

    public volatile org.apache.lucene.index.LiveIndexWriterConfig setRAMBufferSizeMB(double)
    {
        org.apache.lucene.index.IndexWriterConfig r0, $r1;
        double d0;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexWriterConfig setRAMBufferSizeMB(double)>(d0);

        return $r1;
    }

    public volatile org.apache.lucene.index.LiveIndexWriterConfig setMaxBufferedDeleteTerms(int)
    {
        int i0;
        org.apache.lucene.index.IndexWriterConfig r0, $r1;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexWriterConfig setMaxBufferedDeleteTerms(int)>(i0);

        return $r1;
    }

    public volatile org.apache.lucene.index.LiveIndexWriterConfig setTermIndexInterval(int)
    {
        int i0;
        org.apache.lucene.index.IndexWriterConfig r0, $r1;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexWriterConfig setTermIndexInterval(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.index.IndexWriterConfig r0, $r1;

        r0 := @this: org.apache.lucene.index.IndexWriterConfig;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexWriterConfig clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        <org.apache.lucene.index.IndexWriterConfig: int DEFAULT_MAX_THREAD_STATES> = 8;

        <org.apache.lucene.index.IndexWriterConfig: int DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB> = 1945;

        <org.apache.lucene.index.IndexWriterConfig: int DEFAULT_READER_TERMS_INDEX_DIVISOR> = 1;

        <org.apache.lucene.index.IndexWriterConfig: boolean DEFAULT_READER_POOLING> = 0;

        <org.apache.lucene.index.IndexWriterConfig: double DEFAULT_RAM_BUFFER_SIZE_MB> = 16.0;

        <org.apache.lucene.index.IndexWriterConfig: int DEFAULT_MAX_BUFFERED_DOCS> = -1;

        <org.apache.lucene.index.IndexWriterConfig: int DEFAULT_MAX_BUFFERED_DELETE_TERMS> = -1;

        <org.apache.lucene.index.IndexWriterConfig: int DISABLE_AUTO_FLUSH> = -1;

        <org.apache.lucene.index.IndexWriterConfig: int DEFAULT_TERM_INDEX_INTERVAL> = 32;

        <org.apache.lucene.index.IndexWriterConfig: long WRITE_LOCK_TIMEOUT> = 1000L;

        return;
    }
}
