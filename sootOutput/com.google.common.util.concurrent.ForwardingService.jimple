public abstract class com.google.common.util.concurrent.ForwardingService extends com.google.common.collect.ForwardingObject implements com.google.common.util.concurrent.Service
{

    protected void <init>()
    {
        com.google.common.util.concurrent.ForwardingService r0;

        r0 := @this: com.google.common.util.concurrent.ForwardingService;

        specialinvoke r0.<com.google.common.collect.ForwardingObject: void <init>()>();

        return;
    }

    protected abstract com.google.common.util.concurrent.Service delegate();

    public com.google.common.util.concurrent.ListenableFuture start()
    {
        com.google.common.util.concurrent.ForwardingService r0;
        com.google.common.util.concurrent.ListenableFuture $r2;
        com.google.common.util.concurrent.Service $r1;

        r0 := @this: com.google.common.util.concurrent.ForwardingService;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingService: com.google.common.util.concurrent.Service delegate()>();

        $r2 = interfaceinvoke $r1.<com.google.common.util.concurrent.Service: com.google.common.util.concurrent.ListenableFuture start()>();

        return $r2;
    }

    public com.google.common.util.concurrent.Service$State state()
    {
        com.google.common.util.concurrent.Service$State $r2;
        com.google.common.util.concurrent.ForwardingService r0;
        com.google.common.util.concurrent.Service $r1;

        r0 := @this: com.google.common.util.concurrent.ForwardingService;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingService: com.google.common.util.concurrent.Service delegate()>();

        $r2 = interfaceinvoke $r1.<com.google.common.util.concurrent.Service: com.google.common.util.concurrent.Service$State state()>();

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture stop()
    {
        com.google.common.util.concurrent.ForwardingService r0;
        com.google.common.util.concurrent.ListenableFuture $r2;
        com.google.common.util.concurrent.Service $r1;

        r0 := @this: com.google.common.util.concurrent.ForwardingService;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingService: com.google.common.util.concurrent.Service delegate()>();

        $r2 = interfaceinvoke $r1.<com.google.common.util.concurrent.Service: com.google.common.util.concurrent.ListenableFuture stop()>();

        return $r2;
    }

    public com.google.common.util.concurrent.Service$State startAndWait()
    {
        com.google.common.util.concurrent.Service$State $r2;
        com.google.common.util.concurrent.ForwardingService r0;
        com.google.common.util.concurrent.Service $r1;

        r0 := @this: com.google.common.util.concurrent.ForwardingService;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingService: com.google.common.util.concurrent.Service delegate()>();

        $r2 = interfaceinvoke $r1.<com.google.common.util.concurrent.Service: com.google.common.util.concurrent.Service$State startAndWait()>();

        return $r2;
    }

    public com.google.common.util.concurrent.Service$State stopAndWait()
    {
        com.google.common.util.concurrent.Service$State $r2;
        com.google.common.util.concurrent.ForwardingService r0;
        com.google.common.util.concurrent.Service $r1;

        r0 := @this: com.google.common.util.concurrent.ForwardingService;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingService: com.google.common.util.concurrent.Service delegate()>();

        $r2 = interfaceinvoke $r1.<com.google.common.util.concurrent.Service: com.google.common.util.concurrent.Service$State stopAndWait()>();

        return $r2;
    }

    public boolean isRunning()
    {
        com.google.common.util.concurrent.ForwardingService r0;
        com.google.common.util.concurrent.Service $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.ForwardingService;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingService: com.google.common.util.concurrent.Service delegate()>();

        $z0 = interfaceinvoke $r1.<com.google.common.util.concurrent.Service: boolean isRunning()>();

        return $z0;
    }

    protected com.google.common.util.concurrent.Service$State standardStartAndWait()
    {
        java.lang.Throwable $r6;
        com.google.common.util.concurrent.ListenableFuture $r1;
        com.google.common.util.concurrent.UninterruptibleFuture $r2;
        java.lang.RuntimeException $r7;
        java.util.concurrent.ExecutionException $r5;
        com.google.common.util.concurrent.Service$State $r4;
        com.google.common.util.concurrent.ForwardingService r0;
        java.lang.Object $r3;

        r0 := @this: com.google.common.util.concurrent.ForwardingService;

     label1:
        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingService: com.google.common.util.concurrent.ListenableFuture start()>();

        $r2 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.UninterruptibleFuture makeUninterruptible(java.util.concurrent.Future)>($r1);

        $r3 = interfaceinvoke $r2.<com.google.common.util.concurrent.UninterruptibleFuture: java.lang.Object get()>();

        $r4 = (com.google.common.util.concurrent.Service$State) $r3;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        $r7 = staticinvoke <com.google.common.base.Throwables: java.lang.RuntimeException propagate(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    protected com.google.common.util.concurrent.Service$State standardStopAndWait()
    {
        java.lang.Throwable $r6;
        com.google.common.util.concurrent.ListenableFuture $r1;
        com.google.common.util.concurrent.UninterruptibleFuture $r2;
        java.lang.RuntimeException $r7;
        java.util.concurrent.ExecutionException $r5;
        com.google.common.util.concurrent.Service$State $r4;
        com.google.common.util.concurrent.ForwardingService r0;
        java.lang.Object $r3;

        r0 := @this: com.google.common.util.concurrent.ForwardingService;

     label1:
        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingService: com.google.common.util.concurrent.ListenableFuture stop()>();

        $r2 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.UninterruptibleFuture makeUninterruptible(java.util.concurrent.Future)>($r1);

        $r3 = interfaceinvoke $r2.<com.google.common.util.concurrent.UninterruptibleFuture: java.lang.Object get()>();

        $r4 = (com.google.common.util.concurrent.Service$State) $r3;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        $r7 = staticinvoke <com.google.common.base.Throwables: java.lang.RuntimeException propagate(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    protected volatile java.lang.Object delegate()
    {
        com.google.common.util.concurrent.ForwardingService r0;
        com.google.common.util.concurrent.Service $r1;

        r0 := @this: com.google.common.util.concurrent.ForwardingService;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingService: com.google.common.util.concurrent.Service delegate()>();

        return $r1;
    }
}
