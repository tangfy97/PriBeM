public class groovy.mock.interceptor.StrictExpectation extends java.lang.Object implements groovy.lang.GroovyObject
{
    private groovy.mock.interceptor.Demand fDemand;
    private int fCallSpecIdx;
    private java.util.List fCalls;
    transient groovy.lang.MetaClass metaClass;
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119696535;
    static java.lang.Class class$java$util$List;
    static java.lang.Class class$groovy$mock$interceptor$Demand;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$junit$framework$AssertionFailedError;
    static java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter;
    static java.lang.Class class$java$lang$Integer;
    static java.lang.Class class$groovy$lang$Closure;

    public void <init>(groovy.mock.interceptor.Demand)
    {
        java.lang.Integer $r11;
        java.util.List $r13, $r16;
        java.lang.Object[] $r12, $r18;
        groovy.mock.interceptor.Demand $r7, $r10, r24, $r27;
        int $i0;
        groovy.lang.MetaClass $r21, $r23;
        groovy.mock.interceptor.StrictExpectation r0;
        java.lang.Class $r1, r2, $r3, r4, $r5, $r8, $r14, $r17, $r25, $r28, $r29, $r30, $r31, $r32, $r33, $r34;
        java.lang.Object $r6, $r9, $r15, $r19, $r20, $r22, $r26;

        r0 := @this: groovy.mock.interceptor.StrictExpectation;

        r24 := @parameter0: groovy.mock.interceptor.Demand;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

        if $r1 != null goto label01;

        $r28 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0> = $r28;

        goto label02;

     label01:
        $r28 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

     label02:
        r2 = $r28;

        $r3 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r3 != null goto label03;

        $r29 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r29;

        goto label04;

     label03:
        $r29 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        r4 = $r29;

        $r5 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

        if $r5 != null goto label05;

        $r30 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$mock$interceptor$Demand> = $r30;

        goto label06;

     label05:
        $r30 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

     label06:
        $r6 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(null, $r30);

        $r7 = (groovy.mock.interceptor.Demand) $r6;

        $r8 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

        if $r8 != null goto label07;

        $r31 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$mock$interceptor$Demand> = $r31;

        goto label08;

     label07:
        $r31 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

     label08:
        $r9 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r7, $r31);

        $r10 = (groovy.mock.interceptor.Demand) $r9;

        r0.<groovy.mock.interceptor.StrictExpectation: groovy.mock.interceptor.Demand fDemand> = $r10;

        $r11 = new java.lang.Integer;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>(0);

        $i0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r11);

        r0.<groovy.mock.interceptor.StrictExpectation: int fCallSpecIdx> = $i0;

        $r12 = newarray (java.lang.Object)[0];

        $r13 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.List createList(java.lang.Object[])>($r12);

        $r14 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$java$util$List>;

        if $r14 != null goto label09;

        $r32 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("java.util.List");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$java$util$List> = $r32;

        goto label10;

     label09:
        $r32 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$java$util$List>;

     label10:
        $r15 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r13, $r32);

        $r16 = (java.util.List) $r15;

        r0.<groovy.mock.interceptor.StrictExpectation: java.util.List fCalls> = $r16;

        $r17 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r17 != null goto label11;

        $r33 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r33;

        goto label12;

     label11:
        $r33 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label12:
        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = r0;

        $r19 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeStaticMethodN(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r2, $r33, "initMetaClass", $r18);

        $r20 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r19, r4);

        $r21 = (groovy.lang.MetaClass) $r20;

        $r22 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r21, r4);

        $r23 = (groovy.lang.MetaClass) $r22;

        r0.<groovy.mock.interceptor.StrictExpectation: groovy.lang.MetaClass metaClass> = $r23;

        $r25 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

        if $r25 != null goto label13;

        $r34 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$mock$interceptor$Demand> = $r34;

        goto label14;

     label13:
        $r34 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

     label14:
        $r26 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r24, $r34);

        $r27 = (groovy.mock.interceptor.Demand) $r26;

        r0.<groovy.mock.interceptor.StrictExpectation: groovy.mock.interceptor.Demand fDemand> = $r27;

        return;
    }

    public groovy.lang.Closure match(java.lang.String)
    {
        groovy.lang.Closure $r35, $r53;
        java.lang.Integer $r23, $r46, $r74;
        java.lang.Throwable $r66, $r73;
        java.lang.Object[] $r4, $r14, $r20, $r22, $r25, $r27, $r40, $r41, $r49, $r55, $r57, $r59, $r61, $r68, $r70, $r75;
        groovy.mock.interceptor.Demand $r9, $r12;
        java.lang.String r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.codehaus.groovy.runtime.GStringImpl $r56, $r60, $r69;
        java.util.List $r5, $r28, $r42, $r76, r83;
        java.lang.String[] $r58, $r63, $r71;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        groovy.mock.interceptor.StrictExpectation r3;
        java.lang.Class $r0, r1, $r2, $r33, $r51, $r54, $r67, $r78, $r79, $r80, $r81, $r82, $r84;
        java.lang.Object $r6, $r7, $r8, $r10, $r11, $r13, $r15, $r16, $r18, $r19, $r21, $r24, $r26, $r29, $r30, $r31, $r32, $r34, $r36, $r37, $r38, $r39, $r43, $r44, $r45, $r47, $r48, $r50, $r52, $r62, $r64, $r65, $r72, $r77;

        r3 := @this: groovy.mock.interceptor.StrictExpectation;

        r17 := @parameter0: java.lang.String;

        $r0 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r78 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0> = $r78;

        goto label02;

     label01:
        $r78 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

     label02:
        r1 = $r78;

        $r2 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r79 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r79;

        goto label04;

     label03:
        $r79 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r5 = r3.<groovy.mock.interceptor.StrictExpectation: java.util.List fCalls>;

        $r4 = newarray (java.lang.Object)[1];

        $i0 = r3.<groovy.mock.interceptor.StrictExpectation: int fCallSpecIdx>;

        $r6 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>($i0);

        $r4[0] = $r6;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r5, "getAt", $r4);

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r7);

        if $z0 != 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        if $z5 == 0 goto label07;

        $r74 = new java.lang.Integer;

        specialinvoke $r74.<java.lang.Integer: void <init>(int)>(0);

        $r76 = r3.<groovy.mock.interceptor.StrictExpectation: java.util.List fCalls>;

        $r75 = newarray (java.lang.Object)[2];

        $i12 = r3.<groovy.mock.interceptor.StrictExpectation: int fCallSpecIdx>;

        $r77 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>($i12);

        $r75[0] = $r77;

        $r75[1] = $r74;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r76, "putAt", $r75);

        goto label07;

     label07:
        $i1 = r3.<groovy.mock.interceptor.StrictExpectation: int fCallSpecIdx>;

        $r8 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>($i1);

        $r9 = r3.<groovy.mock.interceptor.StrictExpectation: groovy.mock.interceptor.Demand fDemand>;

        $r10 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r9, "recorded");

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r10, "size");

        $z1 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareGreaterThanEqual(java.lang.Object,java.lang.Object)>($r8, $r11);

        if $z1 == 0 goto label10;

        $r67 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$junit$framework$AssertionFailedError>;

        if $r67 != null goto label08;

        $r80 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("junit.framework.AssertionFailedError");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$junit$framework$AssertionFailedError> = $r80;

        goto label09;

     label08:
        $r80 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$junit$framework$AssertionFailedError>;

     label09:
        $r68 = newarray (java.lang.Object)[1];

        $r69 = new org.codehaus.groovy.runtime.GStringImpl;

        $r70 = newarray (java.lang.Object)[1];

        $r70[0] = r17;

        $r71 = newarray (java.lang.String)[2];

        $r71[0] = "No more calls to \'";

        $r71[1] = "\' expected at this point. End of demands.";

        specialinvoke $r69.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r70, $r71);

        $r68[0] = $r69;

        $r72 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r80, $r68);

        $r73 = (java.lang.Throwable) $r72;

        throw $r73;

     label10:
        $r12 = r3.<groovy.mock.interceptor.StrictExpectation: groovy.mock.interceptor.Demand fDemand>;

        $r13 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r12, "recorded");

        $r14 = newarray (java.lang.Object)[1];

        $i2 = r3.<groovy.mock.interceptor.StrictExpectation: int fCallSpecIdx>;

        $r15 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>($i2);

        $r14[0] = $r15;

        $r16 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r13, "getAt", $r14);

        $r18 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r16, "name");

        $z2 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareNotEqual(java.lang.Object,java.lang.Object)>(r17, $r18);

        if $z2 == 0 goto label16;

        $r38 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r16, "range");

        $r39 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r38, "from");

        $r40 = newarray (java.lang.Object)[1];

        $r42 = r3.<groovy.mock.interceptor.StrictExpectation: java.util.List fCalls>;

        $r41 = newarray (java.lang.Object)[1];

        $i8 = r3.<groovy.mock.interceptor.StrictExpectation: int fCallSpecIdx>;

        $r43 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>($i8);

        $r41[0] = $r43;

        $r44 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r42, "getAt", $r41);

        $r40[0] = $r44;

        $r45 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r39, "minus", $r40);

        $r46 = new java.lang.Integer;

        specialinvoke $r46.<java.lang.Integer: void <init>(int)>(0);

        $z4 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareGreaterThan(java.lang.Object,java.lang.Object)>($r45, $r46);

        if $z4 == 0 goto label13;

        $r54 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$junit$framework$AssertionFailedError>;

        if $r54 != null goto label11;

        $r81 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("junit.framework.AssertionFailedError");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$junit$framework$AssertionFailedError> = $r81;

        goto label12;

     label11:
        $r81 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$junit$framework$AssertionFailedError>;

     label12:
        $r55 = newarray (java.lang.Object)[1];

        $r56 = new org.codehaus.groovy.runtime.GStringImpl;

        $r57 = newarray (java.lang.Object)[1];

        $r57[0] = r17;

        $r58 = newarray (java.lang.String)[2];

        $r58[0] = "No call to \'";

        $r58[1] = "\' expected at this point. ";

        specialinvoke $r56.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r57, $r58);

        $r59 = newarray (java.lang.Object)[1];

        $r60 = new org.codehaus.groovy.runtime.GStringImpl;

        $r61 = newarray (java.lang.Object)[2];

        $r61[0] = $r45;

        $r62 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r16, "name");

        $r61[1] = $r62;

        $r63 = newarray (java.lang.String)[3];

        $r63[0] = "Still ";

        $r63[1] = " call(s) to \'";

        $r63[2] = "\' expected.";

        specialinvoke $r60.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r61, $r63);

        $r59[0] = $r60;

        $r64 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r56, "plus", $r59);

        $r55[0] = $r64;

        $r65 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r81, $r55);

        $r66 = (java.lang.Throwable) $r65;

        throw $r66;

     label13:
        $i9 = r3.<groovy.mock.interceptor.StrictExpectation: int fCallSpecIdx>;

        staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>($i9);

        $i10 = r3.<groovy.mock.interceptor.StrictExpectation: int fCallSpecIdx>;

        $r47 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>($i10);

        $r48 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r47, "next");

        $i11 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r48);

        r3.<groovy.mock.interceptor.StrictExpectation: int fCallSpecIdx> = $i11;

        $r49 = newarray (java.lang.Object)[1];

        $r49[0] = r17;

        $r50 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodOnCurrentN(java.lang.Class,groovy.lang.GroovyObject,java.lang.String,java.lang.Object[])>(r1, r3, "match", $r49);

        $r51 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$Closure>;

        if $r51 != null goto label14;

        $r82 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.Closure");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$Closure> = $r82;

        goto label15;

     label14:
        $r82 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$Closure>;

     label15:
        $r52 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r50, $r82);

        $r53 = (groovy.lang.Closure) $r52;

        return $r53;

     label16:
        r83 = r3.<groovy.mock.interceptor.StrictExpectation: java.util.List fCalls>;

        $i3 = r3.<groovy.mock.interceptor.StrictExpectation: int fCallSpecIdx>;

        $r19 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>($i3);

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = $r19;

        $r21 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r83, "getAt", $r20);

        $r22 = newarray (java.lang.Object)[1];

        $r23 = new java.lang.Integer;

        specialinvoke $r23.<java.lang.Integer: void <init>(int)>(1);

        $r22[0] = $r23;

        $r24 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r21, "plus", $r22);

        $r25 = newarray (java.lang.Object)[2];

        $r25[0] = $r19;

        $r25[1] = $r24;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r83, "putAt", $r25);

        $r26 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r16, "behavior");

        $r28 = r3.<groovy.mock.interceptor.StrictExpectation: java.util.List fCalls>;

        $r27 = newarray (java.lang.Object)[1];

        $i4 = r3.<groovy.mock.interceptor.StrictExpectation: int fCallSpecIdx>;

        $r29 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>($i4);

        $r27[0] = $r29;

        $r30 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r28, "getAt", $r27);

        $r31 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r16, "range");

        $r32 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r31, "to");

        $z3 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareGreaterThanEqual(java.lang.Object,java.lang.Object)>($r30, $r32);

        if $z3 == 0 goto label17;

        $i5 = r3.<groovy.mock.interceptor.StrictExpectation: int fCallSpecIdx>;

        staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>($i5);

        $i6 = r3.<groovy.mock.interceptor.StrictExpectation: int fCallSpecIdx>;

        $r36 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>($i6);

        $r37 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r36, "next");

        $i7 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r37);

        r3.<groovy.mock.interceptor.StrictExpectation: int fCallSpecIdx> = $i7;

        goto label17;

     label17:
        $r33 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$Closure>;

        if $r33 != null goto label18;

        $r84 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.Closure");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$Closure> = $r84;

        goto label19;

     label18:
        $r84 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$Closure>;

     label19:
        $r34 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r26, $r84);

        $r35 = (groovy.lang.Closure) $r34;

        return $r35;
    }

    public void verify()
    {
        java.lang.Object[] $r4;
        groovy.mock.interceptor.Demand $r6;
        java.util.List $r5;
        groovy.mock.interceptor.StrictExpectation r3;
        java.lang.Class $r0, r1, $r2, $r7, $r8;

        r3 := @this: groovy.mock.interceptor.StrictExpectation;

        $r0 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

     label2:
        r1 = $r7;

        $r2 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r6 = r3.<groovy.mock.interceptor.StrictExpectation: groovy.mock.interceptor.Demand fDemand>;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r3.<groovy.mock.interceptor.StrictExpectation: java.util.List fCalls>;

        $r4[0] = $r5;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r6, "verify", $r4);

        return;
    }

    public groovy.lang.MetaClass getMetaClass()
    {
        java.lang.Object[] $r10;
        boolean $z0;
        groovy.lang.MetaClass $r5, $r6, $r8, $r13, $r15;
        groovy.mock.interceptor.StrictExpectation r4;
        java.lang.Class $r0, r1, $r2, r3, $r9, $r16, $r17, $r18;
        java.lang.Object $r7, $r11, $r12, $r14;

        r4 := @this: groovy.mock.interceptor.StrictExpectation;

        $r0 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r16 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0> = $r16;

        goto label2;

     label1:
        $r16 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

     label2:
        r1 = $r16;

        $r2 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r17 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r17;

        goto label4;

     label3:
        $r17 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r3 = $r17;

        $r5 = r4.<groovy.mock.interceptor.StrictExpectation: groovy.lang.MetaClass metaClass>;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r5, null);

        if $z0 == 0 goto label7;

        $r9 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r9 != null goto label5;

        $r18 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r18;

        goto label6;

     label5:
        $r18 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label6:
        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r4;

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeStaticMethodN(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r1, $r18, "initMetaClass", $r10);

        $r12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r11, r3);

        $r13 = (groovy.lang.MetaClass) $r12;

        $r14 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r13, r3);

        $r15 = (groovy.lang.MetaClass) $r14;

        r4.<groovy.mock.interceptor.StrictExpectation: groovy.lang.MetaClass metaClass> = $r15;

        goto label7;

     label7:
        $r6 = r4.<groovy.mock.interceptor.StrictExpectation: groovy.lang.MetaClass metaClass>;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r6, r3);

        $r8 = (groovy.lang.MetaClass) $r7;

        return $r8;
    }

    public void setMetaClass(groovy.lang.MetaClass)
    {
        groovy.lang.MetaClass r3;
        groovy.mock.interceptor.StrictExpectation r2;
        java.lang.Class $r0, $r1, $r4, $r5;

        r2 := @this: groovy.mock.interceptor.StrictExpectation;

        r3 := @parameter0: groovy.lang.MetaClass;

        $r0 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0> = $r4;

        goto label2;

     label1:
        $r4 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r5 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r5;

        goto label4;

     label3:
        $r5 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r2.<groovy.mock.interceptor.StrictExpectation: groovy.lang.MetaClass metaClass> = r3;

        return;
    }

    public java.lang.Object invokeMethod(java.lang.String, java.lang.Object)
    {
        groovy.lang.MetaClass $r3;
        groovy.mock.interceptor.StrictExpectation r2;
        java.lang.Class $r0, $r1, $r7, $r8;
        java.lang.Object r5, $r6;
        java.lang.String r4;

        r2 := @this: groovy.mock.interceptor.StrictExpectation;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r0 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.mock.interceptor.StrictExpectation: groovy.lang.MetaClass getMetaClass()>();

        $r6 = interfaceinvoke $r3.<groovy.lang.MetaClass: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>(r2, r4, r5);

        return $r6;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        groovy.lang.MetaClass $r3;
        groovy.mock.interceptor.StrictExpectation r2;
        java.lang.Class $r0, $r1, $r6, $r7;
        java.lang.Object $r5;
        java.lang.String r4;

        r2 := @this: groovy.mock.interceptor.StrictExpectation;

        r4 := @parameter0: java.lang.String;

        $r0 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.mock.interceptor.StrictExpectation: groovy.lang.MetaClass getMetaClass()>();

        $r5 = interfaceinvoke $r3.<groovy.lang.MetaClass: java.lang.Object getProperty(java.lang.Object,java.lang.String)>(r2, r4);

        return $r5;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        groovy.lang.MetaClass $r3;
        groovy.mock.interceptor.StrictExpectation r2;
        java.lang.Class $r0, $r1, $r6, $r7;
        java.lang.Object r5;
        java.lang.String r4;

        r2 := @this: groovy.mock.interceptor.StrictExpectation;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r0 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.mock.interceptor.StrictExpectation: groovy.lang.MetaClass getMetaClass()>();

        interfaceinvoke $r3.<groovy.lang.MetaClass: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>(r2, r4, r5);

        return;
    }

    static void <clinit>()
    {
        java.lang.Long $r2, $r3, $r4, $r5;
        java.lang.Class $r0, $r1, $r6, $r7;

        $r0 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1239119696535L);

        $r3 = (java.lang.Long) $r2;

        <groovy.mock.interceptor.StrictExpectation: java.lang.Long __timeStamp> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(0L);

        $r5 = (java.lang.Long) $r4;

        <groovy.mock.interceptor.StrictExpectation: java.lang.Long __timeStamp__239_neverHappen1239119696535> = $r5;

        return;
    }

    public groovy.mock.interceptor.Demand getFDemand()
    {
        groovy.mock.interceptor.Demand $r4, $r6;
        groovy.mock.interceptor.StrictExpectation r2;
        java.lang.Class $r0, $r1, $r3, $r7, $r8, $r9;
        java.lang.Object $r5;

        r2 := @this: groovy.mock.interceptor.StrictExpectation;

        $r0 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r4 = r2.<groovy.mock.interceptor.StrictExpectation: groovy.mock.interceptor.Demand fDemand>;

        $r3 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$mock$interceptor$Demand> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

     label6:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r4, $r9);

        $r6 = (groovy.mock.interceptor.Demand) $r5;

        return $r6;
    }

    public void setFDemand(groovy.mock.interceptor.Demand)
    {
        groovy.mock.interceptor.Demand r2, $r6;
        groovy.mock.interceptor.StrictExpectation r5;
        java.lang.Class $r0, $r1, $r3, $r7, $r8, $r9;
        java.lang.Object $r4;

        r5 := @this: groovy.mock.interceptor.StrictExpectation;

        r2 := @parameter0: groovy.mock.interceptor.Demand;

        $r0 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$mock$interceptor$Demand> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$mock$interceptor$Demand>;

     label6:
        $r4 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r2, $r9);

        $r6 = (groovy.mock.interceptor.Demand) $r4;

        r5.<groovy.mock.interceptor.StrictExpectation: groovy.mock.interceptor.Demand fDemand> = $r6;

        return;
    }

    public int getFCallSpecIdx()
    {
        java.lang.Integer $r6;
        groovy.mock.interceptor.StrictExpectation r2;
        int $i0, $i1;
        java.lang.Class $r0, $r1, $r4, $r7, $r8, $r9;
        java.lang.Object $r3, $r5;

        r2 := @this: groovy.mock.interceptor.StrictExpectation;

        $r0 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $i0 = r2.<groovy.mock.interceptor.StrictExpectation: int fCallSpecIdx>;

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>($i0);

        $r4 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$java$lang$Integer>;

        if $r4 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$java$lang$Integer> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$java$lang$Integer>;

     label6:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r3, $r9);

        $r6 = (java.lang.Integer) $r5;

        $i1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r6);

        return $i1;
    }

    public void setFCallSpecIdx(int)
    {
        groovy.mock.interceptor.StrictExpectation r3;
        int i0, $i1;
        java.lang.Class $r0, $r1, $r4, $r5;
        java.lang.Object $r2;

        r3 := @this: groovy.mock.interceptor.StrictExpectation;

        i0 := @parameter0: int;

        $r0 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0> = $r4;

        goto label2;

     label1:
        $r4 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r5 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r5;

        goto label4;

     label3:
        $r5 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object box(int)>(i0);

        $i1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r2);

        r3.<groovy.mock.interceptor.StrictExpectation: int fCallSpecIdx> = $i1;

        return;
    }

    public java.util.List getFCalls()
    {
        java.util.List $r4, $r6;
        groovy.mock.interceptor.StrictExpectation r2;
        java.lang.Class $r0, $r1, $r3, $r7, $r8, $r9;
        java.lang.Object $r5;

        r2 := @this: groovy.mock.interceptor.StrictExpectation;

        $r0 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r4 = r2.<groovy.mock.interceptor.StrictExpectation: java.util.List fCalls>;

        $r3 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$java$util$List>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("java.util.List");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$java$util$List> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$java$util$List>;

     label6:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r4, $r9);

        $r6 = (java.util.List) $r5;

        return $r6;
    }

    public void setFCalls(java.util.List)
    {
        java.util.List r2, $r6;
        groovy.mock.interceptor.StrictExpectation r5;
        java.lang.Class $r0, $r1, $r3, $r7, $r8, $r9;
        java.lang.Object $r4;

        r5 := @this: groovy.mock.interceptor.StrictExpectation;

        r2 := @parameter0: java.util.List;

        $r0 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$java$util$List>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$(java.lang.String)>("java.util.List");

        <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$java$util$List> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.StrictExpectation: java.lang.Class class$java$util$List>;

     label6:
        $r4 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r2, $r9);

        $r6 = (java.util.List) $r4;

        r5.<groovy.mock.interceptor.StrictExpectation: java.util.List fCalls> = $r6;

        return;
    }

    void super$1$wait()
    {
        groovy.mock.interceptor.StrictExpectation r0;

        r0 := @this: groovy.mock.interceptor.StrictExpectation;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    java.lang.String super$1$toString()
    {
        java.lang.String $r1;
        groovy.mock.interceptor.StrictExpectation r0;

        r0 := @this: groovy.mock.interceptor.StrictExpectation;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    void super$1$wait(long)
    {
        long l0;
        groovy.mock.interceptor.StrictExpectation r0;

        r0 := @this: groovy.mock.interceptor.StrictExpectation;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    void super$1$wait(long, int)
    {
        int i1;
        long l0;
        groovy.mock.interceptor.StrictExpectation r0;

        r0 := @this: groovy.mock.interceptor.StrictExpectation;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    void super$1$notify()
    {
        groovy.mock.interceptor.StrictExpectation r0;

        r0 := @this: groovy.mock.interceptor.StrictExpectation;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$1$notifyAll()
    {
        groovy.mock.interceptor.StrictExpectation r0;

        r0 := @this: groovy.mock.interceptor.StrictExpectation;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    java.lang.Class super$1$getClass()
    {
        java.lang.Class $r1;
        groovy.mock.interceptor.StrictExpectation r0;

        r0 := @this: groovy.mock.interceptor.StrictExpectation;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    boolean super$1$equals(java.lang.Object)
    {
        java.lang.Object r1;
        groovy.mock.interceptor.StrictExpectation r0;
        boolean $z0;

        r0 := @this: groovy.mock.interceptor.StrictExpectation;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    java.lang.Object super$1$clone()
    {
        java.lang.Object $r1;
        groovy.mock.interceptor.StrictExpectation r0;

        r0 := @this: groovy.mock.interceptor.StrictExpectation;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    int super$1$hashCode()
    {
        int $i0;
        groovy.mock.interceptor.StrictExpectation r0;

        r0 := @this: groovy.mock.interceptor.StrictExpectation;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    void super$1$finalize()
    {
        groovy.mock.interceptor.StrictExpectation r0;

        r0 := @this: groovy.mock.interceptor.StrictExpectation;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
