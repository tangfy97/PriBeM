public class org.eclipse.jetty.server.nio.SelectChannelConnector extends org.eclipse.jetty.server.nio.AbstractNIOConnector
{
    protected java.nio.channels.ServerSocketChannel _acceptChannel;
    private int _lowResourcesConnections;
    private int _lowResourcesMaxIdleTime;
    private int _localPort;
    private final org.eclipse.jetty.io.nio.SelectorManager _manager;

    public void <init>()
    {
        java.lang.Runtime $r4;
        long $l1;
        org.eclipse.jetty.io.nio.SelectorManager $r2, $r3;
        org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager $r5;
        int $i0, $i2, $i3, $i4, $i5, $i7;
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;

        r0 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        specialinvoke r0.<org.eclipse.jetty.server.nio.AbstractNIOConnector: void <init>()>();

        $i7 = (int) -1;

        r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int _localPort> = $i7;

        $r5 = new org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager;

        specialinvoke $r5.<org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager: void <init>(org.eclipse.jetty.server.nio.SelectChannelConnector,org.eclipse.jetty.server.nio.SelectChannelConnector$1)>(r0, null);

        r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: org.eclipse.jetty.io.nio.SelectorManager _manager> = $r5;

        $r2 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: org.eclipse.jetty.io.nio.SelectorManager _manager>;

        $i0 = virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int getMaxIdleTime()>();

        $l1 = (long) $i0;

        virtualinvoke $r2.<org.eclipse.jetty.io.nio.SelectorManager: void setMaxIdleTime(long)>($l1);

        $r3 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: org.eclipse.jetty.io.nio.SelectorManager _manager>;

        virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: boolean addBean(java.lang.Object,boolean)>($r3, 1);

        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i2 = virtualinvoke $r4.<java.lang.Runtime: int availableProcessors()>();

        $i3 = $i2 + 3;

        $i4 = $i3 / 4;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i4);

        virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: void setAcceptors(int)>($i5);

        return;
    }

    public void setThreadPool(org.eclipse.jetty.util.thread.ThreadPool)
    {
        org.eclipse.jetty.io.nio.SelectorManager $r2, $r3;
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;
        org.eclipse.jetty.util.thread.ThreadPool r1;

        r0 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        r1 := @parameter0: org.eclipse.jetty.util.thread.ThreadPool;

        specialinvoke r0.<org.eclipse.jetty.server.nio.AbstractNIOConnector: void setThreadPool(org.eclipse.jetty.util.thread.ThreadPool)>(r1);

        $r2 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: org.eclipse.jetty.io.nio.SelectorManager _manager>;

        virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: boolean removeBean(java.lang.Object)>($r2);

        $r3 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: org.eclipse.jetty.io.nio.SelectorManager _manager>;

        virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: boolean addBean(java.lang.Object,boolean)>($r3, 1);

        return;
    }

    public void accept(int) throws java.io.IOException
    {
        java.lang.Throwable $r6;
        java.net.Socket $r4;
        java.nio.channels.ServerSocketChannel r1;
        org.eclipse.jetty.io.nio.SelectorManager $r2, $r5;
        java.nio.channels.SocketChannel $r3;
        int i0;
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        r1 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r6;

     label5:
        if r1 == null goto label6;

        $z0 = virtualinvoke r1.<java.nio.channels.ServerSocketChannel: boolean isOpen()>();

        if $z0 == 0 goto label6;

        $r2 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: org.eclipse.jetty.io.nio.SelectorManager _manager>;

        $z1 = virtualinvoke $r2.<org.eclipse.jetty.io.nio.SelectorManager: boolean isStarted()>();

        if $z1 == 0 goto label6;

        $r3 = virtualinvoke r1.<java.nio.channels.ServerSocketChannel: java.nio.channels.SocketChannel accept()>();

        virtualinvoke $r3.<java.nio.channels.SocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0);

        $r4 = virtualinvoke $r3.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: void configure(java.net.Socket)>($r4);

        $r5 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: org.eclipse.jetty.io.nio.SelectorManager _manager>;

        virtualinvoke $r5.<org.eclipse.jetty.io.nio.SelectorManager: void register(java.nio.channels.SocketChannel)>($r3);

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void close() throws java.io.IOException
    {
        java.lang.Throwable $r5;
        java.nio.channels.ServerSocketChannel $r1, $r2, $r3, $r4;
        int $i1;
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        entermonitor r0;

     label1:
        $r1 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        if $r1 == null goto label2;

        $r2 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: boolean removeBean(java.lang.Object)>($r2);

        $r3 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        $z0 = virtualinvoke $r3.<java.nio.channels.ServerSocketChannel: boolean isOpen()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        virtualinvoke $r4.<java.nio.channels.ServerSocketChannel: void close()>();

     label2:
        r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel> = null;

        $i1 = (int) -2;

        r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int _localPort> = $i1;

        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void customize(org.eclipse.jetty.io.EndPoint, org.eclipse.jetty.server.Request) throws java.io.IOException
    {
        org.eclipse.jetty.server.Request r0;
        org.eclipse.jetty.io.EndPoint r1;
        int $i1;
        long $l0;
        org.eclipse.jetty.server.nio.SelectChannelConnector r2;

        r2 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        r1 := @parameter0: org.eclipse.jetty.io.EndPoint;

        r0 := @parameter1: org.eclipse.jetty.server.Request;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r0.<org.eclipse.jetty.server.Request: void setTimeStamp(long)>($l0);

        $i1 = r2.<org.eclipse.jetty.server.nio.SelectChannelConnector: int _maxIdleTime>;

        interfaceinvoke r1.<org.eclipse.jetty.io.EndPoint: void setMaxIdleTime(int)>($i1);

        specialinvoke r2.<org.eclipse.jetty.server.nio.AbstractNIOConnector: void customize(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)>(r1, r0);

        return;
    }

    public void persist(org.eclipse.jetty.io.EndPoint) throws java.io.IOException
    {
        org.eclipse.jetty.io.AsyncEndPoint r1;
        org.eclipse.jetty.io.EndPoint r0;
        org.eclipse.jetty.server.nio.SelectChannelConnector r2;

        r2 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        r0 := @parameter0: org.eclipse.jetty.io.EndPoint;

        r1 = (org.eclipse.jetty.io.AsyncEndPoint) r0;

        interfaceinvoke r1.<org.eclipse.jetty.io.AsyncEndPoint: void setCheckForIdle(boolean)>(1);

        specialinvoke r2.<org.eclipse.jetty.server.nio.AbstractNIOConnector: void persist(org.eclipse.jetty.io.EndPoint)>(r0);

        return;
    }

    public org.eclipse.jetty.io.nio.SelectorManager getSelectorManager()
    {
        org.eclipse.jetty.io.nio.SelectorManager $r1;
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;

        r0 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: org.eclipse.jetty.io.nio.SelectorManager _manager>;

        return $r1;
    }

    public synchronized java.lang.Object getConnection()
    {
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;
        java.nio.channels.ServerSocketChannel $r1;

        r0 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        return $r1;
    }

    public int getLocalPort()
    {
        int $i0;
        java.lang.Throwable $r1;
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;

        r0 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        entermonitor r0;

     label1:
        $i0 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int _localPort>;

        exitmonitor r0;

     label2:
        return $i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void open() throws java.io.IOException
    {
        java.lang.Throwable $r14;
        java.net.ServerSocket $r5, $r9, $r11;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r6, $r7;
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;
        boolean $z0;
        java.io.IOException $r13;
        java.net.InetSocketAddress $r15;
        java.nio.channels.ServerSocketChannel $r1, $r2, $r3, $r4, $r8, $r10, $r12;

        r0 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        entermonitor r0;

     label1:
        $r1 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        if $r1 != null goto label5;

        $r2 = staticinvoke <java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()>();

        r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel> = $r2;

        $r3 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        virtualinvoke $r3.<java.nio.channels.ServerSocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

        $r4 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        $r5 = virtualinvoke $r4.<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>();

        $z0 = virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: boolean getReuseAddress()>();

        virtualinvoke $r5.<java.net.ServerSocket: void setReuseAddress(boolean)>($z0);

        $r6 = virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: java.lang.String getHost()>();

        if $r6 != null goto label2;

        $r15 = new java.net.InetSocketAddress;

        $i4 = virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int getPort()>();

        specialinvoke $r15.<java.net.InetSocketAddress: void <init>(int)>($i4);

        goto label3;

     label2:
        $r15 = new java.net.InetSocketAddress;

        $r7 = virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: java.lang.String getHost()>();

        $i0 = virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int getPort()>();

        specialinvoke $r15.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r7, $i0);

     label3:
        $r8 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        $r9 = virtualinvoke $r8.<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>();

        $i1 = virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int getAcceptQueueSize()>();

        virtualinvoke $r9.<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>($r15, $i1);

        $r10 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        $r11 = virtualinvoke $r10.<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>();

        $i2 = virtualinvoke $r11.<java.net.ServerSocket: int getLocalPort()>();

        r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int _localPort> = $i2;

        $i3 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int _localPort>;

        if $i3 > 0 goto label4;

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("Server channel not bound");

        throw $r13;

     label4:
        $r12 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: java.nio.channels.ServerSocketChannel _acceptChannel>;

        virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: boolean addBean(java.lang.Object)>($r12);

     label5:
        exitmonitor r0;

     label6:
        goto label9;

     label7:
        $r14 := @caughtexception;

        exitmonitor r0;

     label8:
        throw $r14;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void setMaxIdleTime(int)
    {
        org.eclipse.jetty.io.nio.SelectorManager $r1;
        int i0;
        long $l1;
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;

        r0 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        i0 := @parameter0: int;

        $r1 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: org.eclipse.jetty.io.nio.SelectorManager _manager>;

        $l1 = (long) i0;

        virtualinvoke $r1.<org.eclipse.jetty.io.nio.SelectorManager: void setMaxIdleTime(long)>($l1);

        specialinvoke r0.<org.eclipse.jetty.server.nio.AbstractNIOConnector: void setMaxIdleTime(int)>(i0);

        return;
    }

    public int getLowResourcesConnections()
    {
        int $i0;
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;

        r0 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        $i0 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int _lowResourcesConnections>;

        return $i0;
    }

    public void setLowResourcesConnections(int)
    {
        int i0;
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;

        r0 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int _lowResourcesConnections> = i0;

        return;
    }

    public int getLowResourcesMaxIdleTime()
    {
        int $i0;
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;

        r0 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        $i0 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int _lowResourcesMaxIdleTime>;

        return $i0;
    }

    public void setLowResourcesMaxIdleTime(int)
    {
        int i0;
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;

        r0 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int _lowResourcesMaxIdleTime> = i0;

        specialinvoke r0.<org.eclipse.jetty.server.nio.AbstractNIOConnector: void setLowResourcesMaxIdleTime(int)>(i0);

        return;
    }

    protected void doStart() throws java.lang.Exception
    {
        long $l2, $l4, $l6;
        org.eclipse.jetty.io.nio.SelectorManager $r1, $r2, $r3, $r4;
        int $i0, $i1, $i3, $i5;
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;

        r0 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: org.eclipse.jetty.io.nio.SelectorManager _manager>;

        $i0 = virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int getAcceptors()>();

        virtualinvoke $r1.<org.eclipse.jetty.io.nio.SelectorManager: void setSelectSets(int)>($i0);

        $r2 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: org.eclipse.jetty.io.nio.SelectorManager _manager>;

        $i1 = virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int getMaxIdleTime()>();

        $l2 = (long) $i1;

        virtualinvoke $r2.<org.eclipse.jetty.io.nio.SelectorManager: void setMaxIdleTime(long)>($l2);

        $r3 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: org.eclipse.jetty.io.nio.SelectorManager _manager>;

        $i3 = virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int getLowResourcesConnections()>();

        $l4 = (long) $i3;

        virtualinvoke $r3.<org.eclipse.jetty.io.nio.SelectorManager: void setLowResourcesConnections(long)>($l4);

        $r4 = r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: org.eclipse.jetty.io.nio.SelectorManager _manager>;

        $i5 = virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: int getLowResourcesMaxIdleTime()>();

        $l6 = (long) $i5;

        virtualinvoke $r4.<org.eclipse.jetty.io.nio.SelectorManager: void setLowResourcesMaxIdleTime(long)>($l6);

        specialinvoke r0.<org.eclipse.jetty.server.nio.AbstractNIOConnector: void doStart()>();

        return;
    }

    protected org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel, org.eclipse.jetty.io.nio.SelectorManager$SelectSet, java.nio.channels.SelectionKey) throws java.io.IOException
    {
        java.nio.channels.SelectionKey r3;
        org.eclipse.jetty.io.nio.SelectChannelEndPoint $r0;
        org.eclipse.jetty.io.nio.AsyncConnection $r7;
        org.eclipse.jetty.io.nio.SelectorManager $r5;
        org.eclipse.jetty.io.nio.SelectorManager$SelectSet r2;
        java.nio.channels.SocketChannel r1;
        int $i0;
        java.lang.Object $r6;
        org.eclipse.jetty.server.nio.SelectChannelConnector r4;

        r4 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        r1 := @parameter0: java.nio.channels.SocketChannel;

        r2 := @parameter1: org.eclipse.jetty.io.nio.SelectorManager$SelectSet;

        r3 := @parameter2: java.nio.channels.SelectionKey;

        $r0 = new org.eclipse.jetty.io.nio.SelectChannelEndPoint;

        $i0 = r4.<org.eclipse.jetty.server.nio.SelectChannelConnector: int _maxIdleTime>;

        specialinvoke $r0.<org.eclipse.jetty.io.nio.SelectChannelEndPoint: void <init>(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey,int)>(r1, r2, r3, $i0);

        $r5 = virtualinvoke r2.<org.eclipse.jetty.io.nio.SelectorManager$SelectSet: org.eclipse.jetty.io.nio.SelectorManager getManager()>();

        $r6 = virtualinvoke r3.<java.nio.channels.SelectionKey: java.lang.Object attachment()>();

        $r7 = virtualinvoke $r5.<org.eclipse.jetty.io.nio.SelectorManager: org.eclipse.jetty.io.nio.AsyncConnection newConnection(java.nio.channels.SocketChannel,org.eclipse.jetty.io.AsyncEndPoint,java.lang.Object)>(r1, $r0, $r6);

        virtualinvoke $r0.<org.eclipse.jetty.io.nio.SelectChannelEndPoint: void setConnection(org.eclipse.jetty.io.Connection)>($r7);

        return $r0;
    }

    protected void endPointClosed(org.eclipse.jetty.io.nio.SelectChannelEndPoint)
    {
        org.eclipse.jetty.io.nio.SelectChannelEndPoint r1;
        org.eclipse.jetty.io.Connection $r2;
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;

        r0 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        r1 := @parameter0: org.eclipse.jetty.io.nio.SelectChannelEndPoint;

        $r2 = virtualinvoke r1.<org.eclipse.jetty.io.nio.SelectChannelEndPoint: org.eclipse.jetty.io.Connection getConnection()>();

        virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: void connectionClosed(org.eclipse.jetty.io.Connection)>($r2);

        return;
    }

    protected org.eclipse.jetty.io.nio.AsyncConnection newConnection(java.nio.channels.SocketChannel, org.eclipse.jetty.io.AsyncEndPoint)
    {
        org.eclipse.jetty.server.AsyncHttpConnection $r0;
        java.nio.channels.SocketChannel r4;
        org.eclipse.jetty.io.AsyncEndPoint r2;
        org.eclipse.jetty.server.Server $r3;
        org.eclipse.jetty.server.nio.SelectChannelConnector r1;

        r1 := @this: org.eclipse.jetty.server.nio.SelectChannelConnector;

        r4 := @parameter0: java.nio.channels.SocketChannel;

        r2 := @parameter1: org.eclipse.jetty.io.AsyncEndPoint;

        $r0 = new org.eclipse.jetty.server.AsyncHttpConnection;

        $r3 = virtualinvoke r1.<org.eclipse.jetty.server.nio.SelectChannelConnector: org.eclipse.jetty.server.Server getServer()>();

        specialinvoke $r0.<org.eclipse.jetty.server.AsyncHttpConnection: void <init>(org.eclipse.jetty.server.Connector,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Server)>(r1, r2, $r3);

        return $r0;
    }

    static void access$100(org.eclipse.jetty.server.nio.SelectChannelConnector, org.eclipse.jetty.io.Connection)
    {
        org.eclipse.jetty.io.Connection r1;
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;

        r0 := @parameter0: org.eclipse.jetty.server.nio.SelectChannelConnector;

        r1 := @parameter1: org.eclipse.jetty.io.Connection;

        virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: void connectionOpened(org.eclipse.jetty.io.Connection)>(r1);

        return;
    }

    static void access$200(org.eclipse.jetty.server.nio.SelectChannelConnector, org.eclipse.jetty.io.Connection, org.eclipse.jetty.io.Connection)
    {
        org.eclipse.jetty.io.Connection r1, r2;
        org.eclipse.jetty.server.nio.SelectChannelConnector r0;

        r0 := @parameter0: org.eclipse.jetty.server.nio.SelectChannelConnector;

        r1 := @parameter1: org.eclipse.jetty.io.Connection;

        r2 := @parameter2: org.eclipse.jetty.io.Connection;

        virtualinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: void connectionUpgraded(org.eclipse.jetty.io.Connection,org.eclipse.jetty.io.Connection)>(r1, r2);

        return;
    }
}
