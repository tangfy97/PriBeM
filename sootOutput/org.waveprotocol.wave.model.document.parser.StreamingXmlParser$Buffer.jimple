class org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer extends java.lang.Object
{
    int position;
    private final java.lang.String str;

    private void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: java.lang.String str> = r1;

        return;
    }

    private int peek() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer r0;
        org.waveprotocol.wave.model.document.parser.XmlParseException $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        $i0 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int position>;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: java.lang.String str>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 < $i1 goto label1;

        $r3 = new org.waveprotocol.wave.model.document.parser.XmlParseException;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.parser.XmlParseException: void <init>(java.lang.String)>("Reading past end of input.");

        throw $r3;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: java.lang.String str>;

        $i2 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int position>;

        $i3 = virtualinvoke $r2.<java.lang.String: int codePointAt(int)>($i2);

        return $i3;
    }

    private void advanceCodeUnit(int)
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer r0;
        int i0, $i1, $i2;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        i0 := @parameter0: int;

        $i1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int position>;

        $i2 = $i1 + i0;

        r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int position> = $i2;

        return;
    }

    private void advanceCodePoint()
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer r0;
        char $c1;
        int $i0, $i2, $i3, $i4, $i5;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: java.lang.String str>;

        $i0 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int position>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isHighSurrogate(char)>($c1);

        if $z0 == 0 goto label1;

        $i4 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int position>;

        $i5 = $i4 + 2;

        r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int position> = $i5;

        goto label2;

     label1:
        $i2 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int position>;

        $i3 = $i2 + 1;

        r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int position> = $i3;

     label2:
        return;
    }

    private boolean startsWith(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, i9, $i10, $i11;
        java.lang.String $r1, r2, $r3;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer r0;
        char $c5, $c8;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: java.lang.String str>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int position>;

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        $i3 = $i1 + $i2;

        if $i0 >= $i3 goto label1;

        return 0;

     label1:
        i9 = 0;

     label2:
        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        if i9 >= $i4 goto label4;

        $c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i9);

        $r3 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: java.lang.String str>;

        $i6 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int position>;

        $i7 = i9 + $i6;

        $c8 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i7);

        $i10 = (int) $c5;

        $i11 = (int) $c8;

        if $i10 == $i11 goto label3;

        return 0;

     label3:
        i9 = i9 + 1;

        goto label2;

     label4:
        return 1;
    }

    private int getPosition()
    {
        int $i0;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        $i0 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int position>;

        return $i0;
    }

    private java.lang.String substring(int, int)
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer r0;
        int i0, i1;
        java.lang.String $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: java.lang.String str>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        return $r2;
    }

    private boolean hasMore()
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer r0;
        int $i0, $i1;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        $i0 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int position>;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: java.lang.String str>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 == $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void <init>(java.lang.String, org.waveprotocol.wave.model.document.parser.StreamingXmlParser$1)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$1 r2;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: void <init>(java.lang.String)>(r1);

        return;
    }

    static int access$100(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)
    {
        int $i0;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        $i0 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int getPosition()>();

        return $i0;
    }

    static int access$200(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer) throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        int $i0;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        $i0 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int peek()>();

        return $i0;
    }

    static boolean access$300(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: boolean hasMore()>();

        return $z0;
    }

    static void access$400(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer, int)
    {
        int i0;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        i0 := @parameter1: int;

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: void advanceCodeUnit(int)>(i0);

        return;
    }

    static java.lang.String access$500(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer, int, int)
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer r0;
        int i0, i1;
        java.lang.String $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: java.lang.String substring(int,int)>(i0, i1);

        return $r1;
    }

    static void access$600(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: void advanceCodePoint()>();

        return;
    }

    static boolean access$700(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer, java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: boolean startsWith(java.lang.String)>(r1);

        return $z0;
    }
}
