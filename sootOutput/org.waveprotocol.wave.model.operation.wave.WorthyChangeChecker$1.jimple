final class org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$1 extends java.lang.Object implements org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$ReusableWorthyChangeChecker
{

    void <init>()
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$1 r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean isWorthy(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$1 r3;
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True $r2;
        org.waveprotocol.wave.model.document.operation.DocOpCursor $r1;
        org.waveprotocol.wave.model.document.operation.DocOp r0;

        r3 := @this: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

     label1:
        $r1 = staticinvoke <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: org.waveprotocol.wave.model.document.operation.DocOpCursor access$000()>();

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.DocOp: void apply(org.waveprotocol.wave.model.document.operation.DocOpCursor)>($r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        return 1;

     label4:
        return 0;

        catch org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True from label1 to label2 with label3;
    }
}
