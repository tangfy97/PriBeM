public abstract class org.apache.cxf.feature.transform.AbstractXSLTInterceptor extends org.apache.cxf.phase.AbstractPhaseInterceptor
{
    private static final javax.xml.transform.TransformerFactory TRANSFORM_FACTORIY;
    private java.lang.String contextPropertyName;
    private final javax.xml.transform.Templates xsltTemplate;

    public void <init>(java.lang.String, java.lang.Class, java.lang.Class, java.lang.String)
    {
        java.lang.Throwable $r20;
        javax.xml.transform.Templates $r9;
        java.lang.Object[] $r19;
        javax.xml.transform.stream.StreamSource $r7;
        java.lang.String r1, r4, $r14, $r15, $r16, $r21;
        javax.xml.transform.TransformerConfigurationException $r17;
        org.apache.cxf.feature.transform.AbstractXSLTInterceptor r0;
        java.lang.IllegalArgumentException $r10, $r18;
        java.lang.Class r2, r3, $r5;
        java.lang.StringBuilder $r11, $r12, $r13;
        javax.xml.transform.TransformerFactory $r8;
        java.io.InputStream $r6;

        r0 := @this: org.apache.cxf.feature.transform.AbstractXSLTInterceptor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.Class;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r16 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<org.apache.cxf.feature.transform.AbstractXSLTInterceptor: void addBefore(java.lang.String)>($r16);

     label1:
        if r3 == null goto label2;

        $r15 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<org.apache.cxf.feature.transform.AbstractXSLTInterceptor: void addAfter(java.lang.String)>($r15);

     label2:
        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>(r4, $r5);

        if $r6 != null goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot load XSLT from path: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label3:
        $r7 = new javax.xml.transform.stream.StreamSource;

        specialinvoke $r7.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r6);

        $r8 = <org.apache.cxf.feature.transform.AbstractXSLTInterceptor: javax.xml.transform.TransformerFactory TRANSFORM_FACTORIY>;

        $r9 = virtualinvoke $r8.<javax.xml.transform.TransformerFactory: javax.xml.transform.Templates newTemplates(javax.xml.transform.Source)>($r7);

        r0.<org.apache.cxf.feature.transform.AbstractXSLTInterceptor: javax.xml.transform.Templates xsltTemplate> = $r9;

     label4:
        goto label6;

     label5:
        $r17 := @caughtexception;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = newarray (java.lang.Object)[2];

        $r19[0] = r4;

        $r20 = virtualinvoke $r17.<javax.xml.transform.TransformerConfigurationException: java.lang.Throwable getException()>();

        $r19[1] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot create XSLT template from path: %s, error: ", $r19);

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r17);

        throw $r18;

     label6:
        return;

        catch javax.xml.transform.TransformerConfigurationException from label2 to label4 with label5;
    }

    public void setContextPropertyName(java.lang.String)
    {
        org.apache.cxf.feature.transform.AbstractXSLTInterceptor r0;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.feature.transform.AbstractXSLTInterceptor;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.cxf.feature.transform.AbstractXSLTInterceptor: java.lang.String contextPropertyName> = r1;

        return;
    }

    protected boolean checkContextProperty(org.apache.cxf.message.Message)
    {
        org.apache.cxf.message.Message r2;
        org.apache.cxf.feature.transform.AbstractXSLTInterceptor r0;
        java.lang.String $r1, $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.cxf.feature.transform.AbstractXSLTInterceptor;

        r2 := @parameter0: org.apache.cxf.message.Message;

        $r1 = r0.<org.apache.cxf.feature.transform.AbstractXSLTInterceptor: java.lang.String contextPropertyName>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.cxf.feature.transform.AbstractXSLTInterceptor: java.lang.String contextPropertyName>;

        $z0 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean getContextualBoolean(org.apache.cxf.message.Message,java.lang.String,boolean)>(r2, $r3, 0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected javax.xml.transform.Templates getXSLTTemplate()
    {
        org.apache.cxf.feature.transform.AbstractXSLTInterceptor r0;
        javax.xml.transform.Templates $r1;

        r0 := @this: org.apache.cxf.feature.transform.AbstractXSLTInterceptor;

        $r1 = r0.<org.apache.cxf.feature.transform.AbstractXSLTInterceptor: javax.xml.transform.Templates xsltTemplate>;

        return $r1;
    }

    static void <clinit>()
    {
        javax.xml.transform.TransformerFactory $r0;

        $r0 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();

        <org.apache.cxf.feature.transform.AbstractXSLTInterceptor: javax.xml.transform.TransformerFactory TRANSFORM_FACTORIY> = $r0;

        return;
    }
}
