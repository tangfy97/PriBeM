public class org.apache.batik.transcoder.image.TIFFTranscoder extends org.apache.batik.transcoder.image.ImageTranscoder
{
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_FORCE_TRANSPARENT_WHITE;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_COMPRESSION_METHOD;

    public void <init>()
    {
        org.apache.batik.transcoder.TranscodingHints $r3;
        java.lang.Boolean $r1;
        org.apache.batik.transcoder.TranscodingHints$Key $r2;
        org.apache.batik.transcoder.image.TIFFTranscoder r0;

        r0 := @this: org.apache.batik.transcoder.image.TIFFTranscoder;

        specialinvoke r0.<org.apache.batik.transcoder.image.ImageTranscoder: void <init>()>();

        $r3 = r0.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r2 = <org.apache.batik.transcoder.image.TIFFTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_FORCE_TRANSPARENT_WHITE>;

        $r1 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r3.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        return;
    }

    public org.apache.batik.bridge.UserAgent getUserAgent()
    {
        org.apache.batik.bridge.UserAgent $r1;
        org.apache.batik.transcoder.image.TIFFTranscoder r0;

        r0 := @this: org.apache.batik.transcoder.image.TIFFTranscoder;

        $r1 = r0.<org.apache.batik.transcoder.SVGAbstractTranscoder: org.apache.batik.bridge.UserAgent userAgent>;

        return $r1;
    }

    public java.awt.image.BufferedImage createImage(int, int)
    {
        java.awt.image.BufferedImage $r0;
        int i0, i1;
        org.apache.batik.transcoder.image.TIFFTranscoder r1;

        r1 := @this: org.apache.batik.transcoder.image.TIFFTranscoder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.awt.image.BufferedImage;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 2);

        return $r0;
    }

    private org.apache.batik.transcoder.image.TIFFTranscoder$WriteAdapter getWriteAdapter(java.lang.String)
    {
        java.lang.IllegalAccessException $r4;
        org.apache.batik.transcoder.image.TIFFTranscoder$WriteAdapter r3;
        java.lang.InstantiationException $r5;
        java.lang.Class $r1;
        java.lang.Object $r2;
        java.lang.ClassNotFoundException $r6;
        java.lang.String r0;
        org.apache.batik.transcoder.image.TIFFTranscoder r7;

        r7 := @this: org.apache.batik.transcoder.image.TIFFTranscoder;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

        r3 = (org.apache.batik.transcoder.image.TIFFTranscoder$WriteAdapter) $r2;

        return r3;

     label2:
        $r6 := @caughtexception;

        return null;

     label3:
        $r5 := @caughtexception;

        return null;

     label4:
        $r4 := @caughtexception;

        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    public void writeImage(java.awt.image.BufferedImage, org.apache.batik.transcoder.TranscoderOutput) throws org.apache.batik.transcoder.TranscoderException
    {
        java.awt.image.SampleModel $r7;
        org.apache.batik.transcoder.image.TIFFTranscoder$WriteAdapter $r3, r13;
        java.lang.Boolean $r11;
        java.awt.image.SinglePixelPackedSampleModel r12;
        org.apache.batik.transcoder.TranscodingHints$Key $r1, $r8;
        boolean $z0, z1;
        java.awt.image.BufferedImage r4;
        org.apache.batik.transcoder.TranscoderOutput r5;
        org.apache.batik.transcoder.TranscodingHints $r2, $r9;
        org.apache.batik.transcoder.TranscoderException $r6;
        java.lang.Object $r10;
        org.apache.batik.transcoder.image.TIFFTranscoder r0;

        r0 := @this: org.apache.batik.transcoder.image.TIFFTranscoder;

        r4 := @parameter0: java.awt.image.BufferedImage;

        r5 := @parameter1: org.apache.batik.transcoder.TranscoderOutput;

        z1 = 0;

        $r2 = r0.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r1 = <org.apache.batik.transcoder.image.ImageTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_FORCE_TRANSPARENT_WHITE>;

        $z0 = virtualinvoke $r2.<org.apache.batik.transcoder.TranscodingHints: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r9 = r0.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r8 = <org.apache.batik.transcoder.image.ImageTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_FORCE_TRANSPARENT_WHITE>;

        $r10 = virtualinvoke $r9.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r8);

        $r11 = (java.lang.Boolean) $r10;

        z1 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

     label1:
        if z1 == 0 goto label2;

        $r7 = virtualinvoke r4.<java.awt.image.BufferedImage: java.awt.image.SampleModel getSampleModel()>();

        r12 = (java.awt.image.SinglePixelPackedSampleModel) $r7;

        virtualinvoke r0.<org.apache.batik.transcoder.image.ImageTranscoder: void forceTransparentWhite(java.awt.image.BufferedImage,java.awt.image.SinglePixelPackedSampleModel)>(r4, r12);

     label2:
        $r3 = specialinvoke r0.<org.apache.batik.transcoder.image.TIFFTranscoder: org.apache.batik.transcoder.image.TIFFTranscoder$WriteAdapter getWriteAdapter(java.lang.String)>("org.apache.batik.ext.awt.image.codec.tiff.TIFFTranscoderInternalCodecWriteAdapter");

        r13 = $r3;

        if $r3 != null goto label3;

        r13 = specialinvoke r0.<org.apache.batik.transcoder.image.TIFFTranscoder: org.apache.batik.transcoder.image.TIFFTranscoder$WriteAdapter getWriteAdapter(java.lang.String)>("org.apache.batik.transcoder.image.TIFFTranscoderImageIOWriteAdapter");

     label3:
        if r13 != null goto label4;

        $r6 = new org.apache.batik.transcoder.TranscoderException;

        specialinvoke $r6.<org.apache.batik.transcoder.TranscoderException: void <init>(java.lang.String)>("Could not write TIFF file because no WriteAdapter is availble");

        throw $r6;

     label4:
        interfaceinvoke r13.<org.apache.batik.transcoder.image.TIFFTranscoder$WriteAdapter: void writeImage(org.apache.batik.transcoder.image.TIFFTranscoder,java.awt.image.BufferedImage,org.apache.batik.transcoder.TranscoderOutput)>(r0, r4, r5);

        return;
    }

    static void <clinit>()
    {
        org.apache.batik.transcoder.TranscodingHints$Key $r0;
        org.apache.batik.transcoder.keys.StringKey $r1;

        $r0 = <org.apache.batik.transcoder.image.ImageTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_FORCE_TRANSPARENT_WHITE>;

        <org.apache.batik.transcoder.image.TIFFTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_FORCE_TRANSPARENT_WHITE> = $r0;

        $r1 = new org.apache.batik.transcoder.keys.StringKey;

        specialinvoke $r1.<org.apache.batik.transcoder.keys.StringKey: void <init>()>();

        <org.apache.batik.transcoder.image.TIFFTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_COMPRESSION_METHOD> = $r1;

        return;
    }
}
