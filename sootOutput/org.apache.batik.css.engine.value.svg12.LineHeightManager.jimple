public class org.apache.batik.css.engine.value.svg12.LineHeightManager extends org.apache.batik.css.engine.value.LengthManager
{

    public void <init>()
    {
        org.apache.batik.css.engine.value.svg12.LineHeightManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg12.LineHeightManager;

        specialinvoke r0.<org.apache.batik.css.engine.value.LengthManager: void <init>()>();

        return;
    }

    public boolean isInheritedProperty()
    {
        org.apache.batik.css.engine.value.svg12.LineHeightManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg12.LineHeightManager;

        return 1;
    }

    public boolean isAnimatableProperty()
    {
        org.apache.batik.css.engine.value.svg12.LineHeightManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg12.LineHeightManager;

        return 1;
    }

    public boolean isAdditiveProperty()
    {
        org.apache.batik.css.engine.value.svg12.LineHeightManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg12.LineHeightManager;

        return 1;
    }

    public int getPropertyType()
    {
        org.apache.batik.css.engine.value.svg12.LineHeightManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg12.LineHeightManager;

        return 43;
    }

    public java.lang.String getPropertyName()
    {
        org.apache.batik.css.engine.value.svg12.LineHeightManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg12.LineHeightManager;

        return "line-height";
    }

    public org.apache.batik.css.engine.value.Value getDefaultValue()
    {
        org.apache.batik.css.engine.value.svg12.LineHeightManager r1;
        org.apache.batik.css.engine.value.Value $r0;

        r1 := @this: org.apache.batik.css.engine.value.svg12.LineHeightManager;

        $r0 = <org.apache.batik.css.engine.value.svg12.SVG12ValueConstants: org.apache.batik.css.engine.value.Value NORMAL_VALUE>;

        return $r0;
    }

    public org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException
    {
        org.apache.batik.css.engine.value.Value $r7, $r8, $r10;
        org.apache.batik.css.engine.CSSEngine r9;
        short $s0;
        org.apache.batik.css.engine.value.svg12.LineHeightManager r4;
        org.w3c.dom.DOMException $r6;
        org.w3c.css.sac.LexicalUnit r0;
        int $i1;
        java.lang.String $r1, $r2, $r3, $r5;
        boolean $z0;

        r4 := @this: org.apache.batik.css.engine.value.svg12.LineHeightManager;

        r0 := @parameter0: org.w3c.css.sac.LexicalUnit;

        r9 := @parameter1: org.apache.batik.css.engine.CSSEngine;

        $s0 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i1 = (int) $s0;

        lookupswitch($i1)
        {
            case 12: goto label1;
            case 35: goto label2;
            default: goto label4;
        };

     label1:
        $r8 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value INHERIT_VALUE>;

        return $r8;

     label2:
        $r1 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = "normal";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r7 = <org.apache.batik.css.engine.value.svg12.SVG12ValueConstants: org.apache.batik.css.engine.value.Value NORMAL_VALUE>;

        return $r7;

     label3:
        $r5 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $r6 = virtualinvoke r4.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidIdentifierDOMException(java.lang.String)>($r5);

        throw $r6;

     label4:
        $r10 = specialinvoke r4.<org.apache.batik.css.engine.value.LengthManager: org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit,org.apache.batik.css.engine.CSSEngine)>(r0, r9);

        return $r10;
    }

    protected int getOrientation()
    {
        org.apache.batik.css.engine.value.svg12.LineHeightManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg12.LineHeightManager;

        return 1;
    }

    public org.apache.batik.css.engine.value.Value computeValue(org.apache.batik.css.engine.CSSStylableElement, java.lang.String, org.apache.batik.css.engine.CSSEngine, int, org.apache.batik.css.engine.StyleMap, org.apache.batik.css.engine.value.Value)
    {
        org.apache.batik.css.engine.value.svg12.LineHeightValue $r10;
        org.apache.batik.css.engine.CSSStylableElement r2;
        org.apache.batik.css.engine.CSSEngine r1;
        short $s0, $s1;
        org.apache.batik.css.engine.StyleMap r8;
        int $i2, i3, $i4;
        java.lang.String r3;
        org.apache.batik.css.engine.value.FloatValue $r11;
        org.apache.batik.css.engine.value.Value r0, $r4, $r9;
        org.apache.batik.css.engine.value.svg12.LineHeightManager r7;
        float $f0, $f1, $f2, $f3, $f4;

        r7 := @this: org.apache.batik.css.engine.value.svg12.LineHeightManager;

        r2 := @parameter0: org.apache.batik.css.engine.CSSStylableElement;

        r3 := @parameter1: java.lang.String;

        r1 := @parameter2: org.apache.batik.css.engine.CSSEngine;

        i3 := @parameter3: int;

        r8 := @parameter4: org.apache.batik.css.engine.StyleMap;

        r0 := @parameter5: org.apache.batik.css.engine.value.Value;

        $s0 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        if $s0 == 1 goto label1;

        return r0;

     label1:
        $s1 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i4 = (int) $s1;

        lookupswitch($i4)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label2:
        $r10 = new org.apache.batik.css.engine.value.svg12.LineHeightValue;

        $f4 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        specialinvoke $r10.<org.apache.batik.css.engine.value.svg12.LineHeightValue: void <init>(short,float,boolean)>(1, $f4, 1);

        return $r10;

     label3:
        $f0 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $i2 = virtualinvoke r1.<org.apache.batik.css.engine.CSSEngine: int getFontSizeIndex()>();

        $r4 = virtualinvoke r1.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.value.Value getComputedStyle(org.apache.batik.css.engine.CSSStylableElement,java.lang.String,int)>(r2, r3, $i2);

        $f1 = interfaceinvoke $r4.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $r11 = new org.apache.batik.css.engine.value.FloatValue;

        $f2 = $f0 * $f1;

        $f3 = $f2 * 0.01F;

        specialinvoke $r11.<org.apache.batik.css.engine.value.FloatValue: void <init>(short,float)>(1, $f3);

        return $r11;

     label4:
        $r9 = specialinvoke r7.<org.apache.batik.css.engine.value.LengthManager: org.apache.batik.css.engine.value.Value computeValue(org.apache.batik.css.engine.CSSStylableElement,java.lang.String,org.apache.batik.css.engine.CSSEngine,int,org.apache.batik.css.engine.StyleMap,org.apache.batik.css.engine.value.Value)>(r2, r3, r1, i3, r8, r0);

        return $r9;
    }
}
