public class org.apache.lucene.search.TermQuery extends org.apache.lucene.search.Query
{
    private final org.apache.lucene.index.Term term;
    private final int docFreq;
    private final org.apache.lucene.index.TermContext perReaderTermState;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.index.Term)
    {
        org.apache.lucene.index.Term r1;
        int $i1;
        org.apache.lucene.search.TermQuery r0;

        r0 := @this: org.apache.lucene.search.TermQuery;

        r1 := @parameter0: org.apache.lucene.index.Term;

        $i1 = (int) -1;

        specialinvoke r0.<org.apache.lucene.search.TermQuery: void <init>(org.apache.lucene.index.Term,int)>(r1, $i1);

        return;
    }

    public void <init>(org.apache.lucene.index.Term, int)
    {
        org.apache.lucene.index.Term r1;
        int i0;
        org.apache.lucene.search.TermQuery r0;

        r0 := @this: org.apache.lucene.search.TermQuery;

        r1 := @parameter0: org.apache.lucene.index.Term;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.search.Query: void <init>()>();

        r0.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term term> = r1;

        r0.<org.apache.lucene.search.TermQuery: int docFreq> = i0;

        r0.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.TermContext perReaderTermState> = null;

        return;
    }

    public void <init>(org.apache.lucene.index.Term, org.apache.lucene.index.TermContext)
    {
        org.apache.lucene.search.TermQuery r0;
        org.apache.lucene.index.Term r1;
        int $i0;
        java.lang.AssertionError $r3;
        org.apache.lucene.index.TermContext r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.TermQuery;

        r1 := @parameter0: org.apache.lucene.index.Term;

        r2 := @parameter1: org.apache.lucene.index.TermContext;

        specialinvoke r0.<org.apache.lucene.search.Query: void <init>()>();

        $z0 = <org.apache.lucene.search.TermQuery: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        r0.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term term> = r1;

        $i0 = virtualinvoke r2.<org.apache.lucene.index.TermContext: int docFreq()>();

        r0.<org.apache.lucene.search.TermQuery: int docFreq> = $i0;

        r0.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.TermContext perReaderTermState> = r2;

        return;
    }

    public org.apache.lucene.index.Term getTerm()
    {
        org.apache.lucene.index.Term $r1;
        org.apache.lucene.search.TermQuery r0;

        r0 := @this: org.apache.lucene.search.TermQuery;

        $r1 = r0.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term term>;

        return $r1;
    }

    public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        org.apache.lucene.index.Term $r4;
        org.apache.lucene.search.TermQuery$TermWeight $r9;
        org.apache.lucene.index.TermContext $r3, $r6, r8;
        org.apache.lucene.search.TermQuery r2;
        int $i0, $i1, $i3;
        org.apache.lucene.search.IndexSearcher r0;
        org.apache.lucene.index.IndexReaderContext $r1, $r7;

        r2 := @this: org.apache.lucene.search.TermQuery;

        r0 := @parameter0: org.apache.lucene.search.IndexSearcher;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReaderContext getTopReaderContext()>();

        $r3 = r2.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.TermContext perReaderTermState>;

        if $r3 == null goto label1;

        $r6 = r2.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.TermContext perReaderTermState>;

        $r7 = $r6.<org.apache.lucene.index.TermContext: org.apache.lucene.index.IndexReaderContext topReaderContext>;

        if $r7 == $r1 goto label2;

     label1:
        $r4 = r2.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term term>;

        r8 = staticinvoke <org.apache.lucene.index.TermContext: org.apache.lucene.index.TermContext build(org.apache.lucene.index.IndexReaderContext,org.apache.lucene.index.Term,boolean)>($r1, $r4, 1);

        goto label3;

     label2:
        r8 = r2.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.TermContext perReaderTermState>;

     label3:
        $i0 = r2.<org.apache.lucene.search.TermQuery: int docFreq>;

        $i3 = (int) -1;

        if $i0 == $i3 goto label4;

        $i1 = r2.<org.apache.lucene.search.TermQuery: int docFreq>;

        virtualinvoke r8.<org.apache.lucene.index.TermContext: void setDocFreq(int)>($i1);

     label4:
        $r9 = new org.apache.lucene.search.TermQuery$TermWeight;

        specialinvoke $r9.<org.apache.lucene.search.TermQuery$TermWeight: void <init>(org.apache.lucene.search.TermQuery,org.apache.lucene.search.IndexSearcher,org.apache.lucene.index.TermContext)>(r2, r0, r8);

        return $r9;
    }

    public void extractTerms(java.util.Set)
    {
        org.apache.lucene.index.Term $r2;
        java.util.Set r0;
        org.apache.lucene.search.TermQuery r1;

        r1 := @this: org.apache.lucene.search.TermQuery;

        r0 := @parameter0: java.util.Set;

        $r2 = virtualinvoke r1.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term getTerm()>();

        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>($r2);

        return;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.apache.lucene.index.Term $r2, $r5, $r9;
        org.apache.lucene.search.TermQuery r1;
        float $f0;
        java.lang.StringBuilder $r0;
        java.lang.String $r3, r4, $r6, $r7, $r8, $r10;
        boolean $z0;

        r1 := @this: org.apache.lucene.search.TermQuery;

        r4 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term term>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.Term: java.lang.String field()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 != 0 goto label1;

        $r9 = r1.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term term>;

        $r10 = virtualinvoke $r9.<org.apache.lucene.index.Term: java.lang.String field()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

     label1:
        $r5 = r1.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term term>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.index.Term: java.lang.String text()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $f0 = virtualinvoke r1.<org.apache.lucene.search.TermQuery: float getBoost()>();

        $r7 = staticinvoke <org.apache.lucene.util.ToStringUtils: java.lang.String boost(float)>($f0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.index.Term $r3, $r4;
        org.apache.lucene.search.TermQuery r1, r2;
        byte $b0;
        float $f0, $f1;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r2 := @this: org.apache.lucene.search.TermQuery;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.lucene.search.TermQuery;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.apache.lucene.search.TermQuery) r0;

        $f0 = virtualinvoke r2.<org.apache.lucene.search.TermQuery: float getBoost()>();

        $f1 = virtualinvoke r1.<org.apache.lucene.search.TermQuery: float getBoost()>();

        $b0 = $f0 cmpl $f1;

        if $b0 != 0 goto label2;

        $r4 = r2.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term term>;

        $r3 = r1.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term term>;

        $z1 = virtualinvoke $r4.<org.apache.lucene.index.Term: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public int hashCode()
    {
        org.apache.lucene.search.TermQuery r0;
        int $i0, $i1, $i2;
        org.apache.lucene.index.Term $r1;
        float $f0;

        r0 := @this: org.apache.lucene.search.TermQuery;

        $f0 = virtualinvoke r0.<org.apache.lucene.search.TermQuery: float getBoost()>();

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        $r1 = r0.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term term>;

        $i1 = virtualinvoke $r1.<org.apache.lucene.index.Term: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    static org.apache.lucene.index.Term access$000(org.apache.lucene.search.TermQuery)
    {
        org.apache.lucene.index.Term $r1;
        org.apache.lucene.search.TermQuery r0;

        r0 := @parameter0: org.apache.lucene.search.TermQuery;

        $r1 = r0.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term term>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/TermQuery;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.TermQuery: boolean $assertionsDisabled> = $z1;

        return;
    }
}
