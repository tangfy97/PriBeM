class org.apache.lucene.search.spans.SpanOrQuery$1 extends org.apache.lucene.search.spans.Spans
{
    private org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue;
    private long cost;
    final org.apache.lucene.index.AtomicReaderContext val$context;
    final org.apache.lucene.util.Bits val$acceptDocs;
    final java.util.Map val$termContexts;
    final org.apache.lucene.search.spans.SpanOrQuery this$0;

    void <init>(org.apache.lucene.search.spans.SpanOrQuery, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map)
    {
        java.util.Map r4;
        org.apache.lucene.search.spans.SpanOrQuery r1;
        org.apache.lucene.search.spans.SpanOrQuery$1 r0;
        org.apache.lucene.util.Bits r3;
        org.apache.lucene.index.AtomicReaderContext r2;

        r0 := @this: org.apache.lucene.search.spans.SpanOrQuery$1;

        r1 := @parameter0: org.apache.lucene.search.spans.SpanOrQuery;

        r2 := @parameter1: org.apache.lucene.index.AtomicReaderContext;

        r3 := @parameter2: org.apache.lucene.util.Bits;

        r4 := @parameter3: java.util.Map;

        r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery this$0> = r1;

        r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.index.AtomicReaderContext val$context> = r2;

        r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.util.Bits val$acceptDocs> = r3;

        r0.<org.apache.lucene.search.spans.SpanOrQuery$1: java.util.Map val$termContexts> = r4;

        specialinvoke r0.<org.apache.lucene.search.spans.Spans: void <init>()>();

        r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue> = null;

        return;
    }

    private boolean initSpanQueue(int) throws java.io.IOException
    {
        long $l2, $l3, $l4;
        java.util.Map $r10;
        int $i0, $i1, i5, $i7, $i9;
        org.apache.lucene.search.spans.SpanOrQuery$1 r0;
        org.apache.lucene.search.spans.SpanQuery $r13;
        org.apache.lucene.util.Bits $r11;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.search.spans.SpanOrQuery$SpanQueue $r8, $r15, $r16;
        java.util.Iterator $r7;
        java.util.List $r4, $r6;
        org.apache.lucene.search.spans.SpanOrQuery $r2, $r3, $r5;
        java.lang.Object $r9;
        org.apache.lucene.index.AtomicReaderContext $r12;
        org.apache.lucene.search.spans.Spans $r14;

        r0 := @this: org.apache.lucene.search.spans.SpanOrQuery$1;

        i5 := @parameter0: int;

        $r16 = new org.apache.lucene.search.spans.SpanOrQuery$SpanQueue;

        $r3 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery this$0>;

        $r2 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery this$0>;

        $r4 = staticinvoke <org.apache.lucene.search.spans.SpanOrQuery: java.util.List access$000(org.apache.lucene.search.spans.SpanOrQuery)>($r2);

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        specialinvoke $r16.<org.apache.lucene.search.spans.SpanOrQuery$SpanQueue: void <init>(org.apache.lucene.search.spans.SpanOrQuery,int)>($r3, $i0);

        r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue> = $r16;

        $r5 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery this$0>;

        $r6 = staticinvoke <org.apache.lucene.search.spans.SpanOrQuery: java.util.List access$000(org.apache.lucene.search.spans.SpanOrQuery)>($r5);

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (org.apache.lucene.search.spans.SpanQuery) $r9;

        $r12 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.index.AtomicReaderContext val$context>;

        $r11 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.util.Bits val$acceptDocs>;

        $r10 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: java.util.Map val$termContexts>;

        $r14 = virtualinvoke $r13.<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext,org.apache.lucene.util.Bits,java.util.Map)>($r12, $r11, $r10);

        $l2 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: long cost>;

        $l3 = virtualinvoke $r14.<org.apache.lucene.search.spans.Spans: long cost()>();

        $l4 = $l2 + $l3;

        r0.<org.apache.lucene.search.spans.SpanOrQuery$1: long cost> = $l4;

        $i7 = (int) -1;

        if i5 != $i7 goto label2;

        $z2 = virtualinvoke $r14.<org.apache.lucene.search.spans.Spans: boolean next()>();

        if $z2 != 0 goto label3;

     label2:
        $i9 = (int) -1;

        if i5 == $i9 goto label4;

        $z1 = virtualinvoke $r14.<org.apache.lucene.search.spans.Spans: boolean skipTo(int)>(i5);

        if $z1 == 0 goto label4;

     label3:
        $r15 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue>;

        virtualinvoke $r15.<org.apache.lucene.search.spans.SpanOrQuery$SpanQueue: java.lang.Object add(java.lang.Object)>($r14);

     label4:
        goto label1;

     label5:
        $r8 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue>;

        $i1 = virtualinvoke $r8.<org.apache.lucene.search.spans.SpanOrQuery$SpanQueue: int size()>();

        if $i1 == 0 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        return $z3;
    }

    public boolean next() throws java.io.IOException
    {
        org.apache.lucene.search.spans.SpanOrQuery$SpanQueue $r1, $r2, $r4, $r5, $r6;
        int $i0, $i1, $i3;
        org.apache.lucene.search.spans.SpanOrQuery$1 r0;
        org.apache.lucene.search.spans.Spans $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.search.spans.SpanOrQuery$1;

        $r1 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue>;

        if $r1 != null goto label1;

        $i3 = (int) -1;

        $z1 = specialinvoke r0.<org.apache.lucene.search.spans.SpanOrQuery$1: boolean initSpanQueue(int)>($i3);

        return $z1;

     label1:
        $r2 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.search.spans.SpanOrQuery$SpanQueue: int size()>();

        if $i0 != 0 goto label2;

        return 0;

     label2:
        $r3 = specialinvoke r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.Spans top()>();

        $z0 = virtualinvoke $r3.<org.apache.lucene.search.spans.Spans: boolean next()>();

        if $z0 == 0 goto label3;

        $r6 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue>;

        virtualinvoke $r6.<org.apache.lucene.search.spans.SpanOrQuery$SpanQueue: java.lang.Object updateTop()>();

        return 1;

     label3:
        $r4 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue>;

        virtualinvoke $r4.<org.apache.lucene.search.spans.SpanOrQuery$SpanQueue: java.lang.Object pop()>();

        $r5 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue>;

        $i1 = virtualinvoke $r5.<org.apache.lucene.search.spans.SpanOrQuery$SpanQueue: int size()>();

        if $i1 == 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    private org.apache.lucene.search.spans.Spans top()
    {
        org.apache.lucene.search.spans.SpanOrQuery$SpanQueue $r1;
        java.lang.Object $r2;
        org.apache.lucene.search.spans.SpanOrQuery$1 r0;
        org.apache.lucene.search.spans.Spans $r3;

        r0 := @this: org.apache.lucene.search.spans.SpanOrQuery$1;

        $r1 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.search.spans.SpanOrQuery$SpanQueue: java.lang.Object top()>();

        $r3 = (org.apache.lucene.search.spans.Spans) $r2;

        return $r3;
    }

    public boolean skipTo(int) throws java.io.IOException
    {
        int $i0, $i1, $i2, i3;
        org.apache.lucene.search.spans.SpanOrQuery$1 r0;
        boolean $z0, $z1, $z2, z3, $z4;
        org.apache.lucene.search.spans.SpanOrQuery$SpanQueue $r1, $r2, $r3, $r6, $r7;
        org.apache.lucene.search.spans.Spans $r4, $r5;

        r0 := @this: org.apache.lucene.search.spans.SpanOrQuery$1;

        i3 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue>;

        if $r1 != null goto label1;

        $z2 = specialinvoke r0.<org.apache.lucene.search.spans.SpanOrQuery$1: boolean initSpanQueue(int)>(i3);

        return $z2;

     label1:
        z3 = 0;

     label2:
        $r2 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.search.spans.SpanOrQuery$SpanQueue: int size()>();

        if $i0 == 0 goto label5;

        $r4 = specialinvoke r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.Spans top()>();

        $i2 = virtualinvoke $r4.<org.apache.lucene.search.spans.Spans: int doc()>();

        if $i2 >= i3 goto label5;

        $r5 = specialinvoke r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.Spans top()>();

        $z1 = virtualinvoke $r5.<org.apache.lucene.search.spans.Spans: boolean skipTo(int)>(i3);

        if $z1 == 0 goto label3;

        $r7 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue>;

        virtualinvoke $r7.<org.apache.lucene.search.spans.SpanOrQuery$SpanQueue: java.lang.Object updateTop()>();

        goto label4;

     label3:
        $r6 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue>;

        virtualinvoke $r6.<org.apache.lucene.search.spans.SpanOrQuery$SpanQueue: java.lang.Object pop()>();

     label4:
        z3 = 1;

        goto label2;

     label5:
        if z3 == 0 goto label8;

        $r3 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue>;

        $i1 = virtualinvoke $r3.<org.apache.lucene.search.spans.SpanOrQuery$SpanQueue: int size()>();

        if $i1 == 0 goto label6;

        $z4 = 1;

        goto label7;

     label6:
        $z4 = 0;

     label7:
        return $z4;

     label8:
        $z0 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanOrQuery$1: boolean next()>();

        return $z0;
    }

    public int doc()
    {
        int $i0;
        org.apache.lucene.search.spans.SpanOrQuery$1 r0;
        org.apache.lucene.search.spans.Spans $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanOrQuery$1;

        $r1 = specialinvoke r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.Spans top()>();

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.Spans: int doc()>();

        return $i0;
    }

    public int start()
    {
        int $i0;
        org.apache.lucene.search.spans.SpanOrQuery$1 r0;
        org.apache.lucene.search.spans.Spans $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanOrQuery$1;

        $r1 = specialinvoke r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.Spans top()>();

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.Spans: int start()>();

        return $i0;
    }

    public int end()
    {
        int $i0;
        org.apache.lucene.search.spans.SpanOrQuery$1 r0;
        org.apache.lucene.search.spans.Spans $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanOrQuery$1;

        $r1 = specialinvoke r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.Spans top()>();

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.Spans: int end()>();

        return $i0;
    }

    public java.util.Collection getPayload() throws java.io.IOException
    {
        java.util.Collection $r3;
        org.apache.lucene.search.spans.SpanOrQuery$1 r0;
        org.apache.lucene.search.spans.Spans $r1;
        boolean $z0;
        java.util.ArrayList $r2, r4;

        r0 := @this: org.apache.lucene.search.spans.SpanOrQuery$1;

        r4 = null;

        $r1 = specialinvoke r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.Spans top()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<org.apache.lucene.search.spans.Spans: boolean isPayloadAvailable()>();

        if $z0 == 0 goto label1;

        $r2 = new java.util.ArrayList;

        $r3 = virtualinvoke $r1.<org.apache.lucene.search.spans.Spans: java.util.Collection getPayload()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        r4 = $r2;

     label1:
        return r4;
    }

    public boolean isPayloadAvailable() throws java.io.IOException
    {
        org.apache.lucene.search.spans.SpanOrQuery$1 r0;
        org.apache.lucene.search.spans.Spans $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.search.spans.SpanOrQuery$1;

        $r1 = specialinvoke r0.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.Spans top()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<org.apache.lucene.search.spans.Spans: boolean isPayloadAvailable()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String toString()
    {
        int $i0, $i1, $i2, $i3;
        org.apache.lucene.search.spans.SpanOrQuery$1 r2;
        java.lang.String $r14, $r16;
        org.apache.lucene.search.spans.SpanOrQuery$SpanQueue $r5, $r6;
        java.lang.StringBuilder $r0, $r1, $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15;
        org.apache.lucene.search.spans.SpanOrQuery $r3;

        r2 := @this: org.apache.lucene.search.spans.SpanOrQuery$1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("spans(");

        $r3 = r2.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery this$0>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r13 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")@");

        $r5 = r2.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue>;

        if $r5 != null goto label1;

        $r14 = "START";

        goto label3;

     label1:
        $r6 = r2.<org.apache.lucene.search.spans.SpanOrQuery$1: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue queue>;

        $i0 = virtualinvoke $r6.<org.apache.lucene.search.spans.SpanOrQuery$SpanQueue: int size()>();

        if $i0 <= 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $i1 = virtualinvoke r2.<org.apache.lucene.search.spans.SpanOrQuery$1: int doc()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i2 = virtualinvoke r2.<org.apache.lucene.search.spans.SpanOrQuery$1: int start()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i3 = virtualinvoke r2.<org.apache.lucene.search.spans.SpanOrQuery$1: int end()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        $r14 = "END";

     label3:
        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }

    public long cost()
    {
        long $l0;
        org.apache.lucene.search.spans.SpanOrQuery$1 r0;

        r0 := @this: org.apache.lucene.search.spans.SpanOrQuery$1;

        $l0 = r0.<org.apache.lucene.search.spans.SpanOrQuery$1: long cost>;

        return $l0;
    }
}
