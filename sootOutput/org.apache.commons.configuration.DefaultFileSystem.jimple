public class org.apache.commons.configuration.DefaultFileSystem extends org.apache.commons.configuration.FileSystem
{
    private org.apache.commons.logging.Log log;

    public void <init>()
    {
        org.apache.commons.logging.Log $r1;
        org.apache.commons.configuration.DefaultFileSystem r0;

        r0 := @this: org.apache.commons.configuration.DefaultFileSystem;

        specialinvoke r0.<org.apache.commons.configuration.FileSystem: void <init>()>();

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/commons/configuration/DefaultFileSystem;");

        r0.<org.apache.commons.configuration.DefaultFileSystem: org.apache.commons.logging.Log log> = $r1;

        return;
    }

    public java.io.InputStream getInputStream(java.lang.String, java.lang.String) throws org.apache.commons.configuration.ConfigurationException
    {
        java.net.URL $r3;
        java.lang.String r1, r2, $r9, $r15;
        java.lang.Exception $r10;
        org.apache.commons.configuration.DefaultFileSystem r0;
        java.lang.StringBuilder $r6, $r7, $r8, $r12, $r13, $r14;
        org.apache.commons.configuration.ConfigurationException $r5, $r11, $r16;
        java.io.InputStream $r4;

        r0 := @this: org.apache.commons.configuration.DefaultFileSystem;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r3 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.net.URL locate(org.apache.commons.configuration.FileSystem,java.lang.String,java.lang.String)>(r0, r1, r2);

        if $r3 != null goto label2;

        $r5 = new org.apache.commons.configuration.ConfigurationException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot locate configuration source ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.apache.commons.configuration.ConfigurationException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        $r4 = virtualinvoke r0.<org.apache.commons.configuration.DefaultFileSystem: java.io.InputStream getInputStream(java.net.URL)>($r3);

     label3:
        return $r4;

     label4:
        $r16 := @caughtexception;

        throw $r16;

     label5:
        $r10 := @caughtexception;

        $r11 = new org.apache.commons.configuration.ConfigurationException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load the configuration file ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.commons.configuration.ConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r10);

        throw $r11;

        catch org.apache.commons.configuration.ConfigurationException from label1 to label3 with label4;
        catch java.lang.Exception from label1 to label3 with label5;
    }

    public java.io.InputStream getInputStream(java.net.URL) throws org.apache.commons.configuration.ConfigurationException
    {
        java.net.URL r0;
        java.io.File $r1;
        java.lang.Exception $r4;
        org.apache.commons.configuration.DefaultFileSystem r10;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        org.apache.commons.configuration.ConfigurationException $r3, $r5;
        java.io.InputStream $r2;
        boolean $z0;

        r10 := @this: org.apache.commons.configuration.DefaultFileSystem;

        r0 := @parameter0: java.net.URL;

        $r1 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.io.File fileFromURL(java.net.URL)>(r0);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $r3 = new org.apache.commons.configuration.ConfigurationException;

        specialinvoke $r3.<org.apache.commons.configuration.ConfigurationException: void <init>(java.lang.String)>("Cannot load a configuration from a directory");

        throw $r3;

     label1:
        $r2 = virtualinvoke r0.<java.net.URL: java.io.InputStream openStream()>();

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.commons.configuration.ConfigurationException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load the configuration from the URL ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.apache.commons.configuration.ConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r4);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.io.OutputStream getOutputStream(java.net.URL) throws org.apache.commons.configuration.ConfigurationException
    {
        java.net.HttpURLConnection $r5, r6;
        java.net.URL r0;
        java.net.URLConnection $r2;
        java.lang.String $r14;
        org.apache.commons.configuration.DefaultFileSystem$HttpOutputStream $r4;
        boolean $z0, $z1;
        java.io.OutputStream $r3, $r8, r15;
        java.io.IOException $r9;
        java.io.File $r1;
        org.apache.commons.configuration.DefaultFileSystem r7;
        java.lang.StringBuilder $r11, $r12, $r13;
        org.apache.commons.configuration.ConfigurationException $r10;

        r7 := @this: org.apache.commons.configuration.DefaultFileSystem;

        r0 := @parameter0: java.net.URL;

        $r1 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.io.File fileFromURL(java.net.URL)>(r0);

        if $r1 == null goto label1;

        $r8 = virtualinvoke r7.<org.apache.commons.configuration.DefaultFileSystem: java.io.OutputStream getOutputStream(java.io.File)>($r1);

        return $r8;

     label1:
        $r2 = virtualinvoke r0.<java.net.URL: java.net.URLConnection openConnection()>();

        virtualinvoke $r2.<java.net.URLConnection: void setDoOutput(boolean)>(1);

        $z0 = $r2 instanceof java.net.HttpURLConnection;

        if $z0 == 0 goto label2;

        r6 = (java.net.HttpURLConnection) $r2;

        virtualinvoke r6.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>("PUT");

     label2:
        $r3 = virtualinvoke $r2.<java.net.URLConnection: java.io.OutputStream getOutputStream()>();

        r15 = $r3;

        $z1 = $r2 instanceof java.net.HttpURLConnection;

        if $z1 == 0 goto label3;

        $r4 = new org.apache.commons.configuration.DefaultFileSystem$HttpOutputStream;

        $r5 = (java.net.HttpURLConnection) $r2;

        specialinvoke $r4.<org.apache.commons.configuration.DefaultFileSystem$HttpOutputStream: void <init>(java.io.OutputStream,java.net.HttpURLConnection)>($r3, $r5);

        r15 = $r4;

     label3:
        return r15;

     label4:
        $r9 := @caughtexception;

        $r10 = new org.apache.commons.configuration.ConfigurationException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not save to URL ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.commons.configuration.ConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r9);

        throw $r10;

        catch java.io.IOException from label1 to label3 with label4;
    }

    public java.io.OutputStream getOutputStream(java.io.File) throws org.apache.commons.configuration.ConfigurationException
    {
        java.io.FileOutputStream $r2;
        java.io.File r1;
        java.io.FileNotFoundException $r3;
        org.apache.commons.configuration.DefaultFileSystem r0;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        org.apache.commons.configuration.ConfigurationException $r4;

        r0 := @this: org.apache.commons.configuration.DefaultFileSystem;

        r1 := @parameter0: java.io.File;

     label1:
        specialinvoke r0.<org.apache.commons.configuration.DefaultFileSystem: void createPath(java.io.File)>(r1);

        $r2 = new java.io.FileOutputStream;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.commons.configuration.ConfigurationException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to save to file ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.commons.configuration.ConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r3);

        throw $r4;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public java.lang.String getPath(java.io.File, java.net.URL, java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r8;
        java.net.URL r1, $r5;
        java.io.File r0;
        java.lang.Exception $r6;
        org.apache.commons.configuration.DefaultFileSystem r2;
        org.apache.commons.logging.Log $r7, $r9;
        java.lang.String r3, r4, $r10, r11;
        boolean $z0;

        r2 := @this: org.apache.commons.configuration.DefaultFileSystem;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.net.URL;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r11 = null;

        if r0 == null goto label1;

        r11 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

     label1:
        if r11 != null goto label5;

        if r1 == null goto label2;

        r11 = virtualinvoke r1.<java.net.URL: java.lang.String getPath()>();

        goto label5;

     label2:
        $r5 = virtualinvoke r2.<org.apache.commons.configuration.DefaultFileSystem: java.net.URL getURL(java.lang.String,java.lang.String)>(r3, r4);

        r11 = virtualinvoke $r5.<java.net.URL: java.lang.String getPath()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = r2.<org.apache.commons.configuration.DefaultFileSystem: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label5;

        $r9 = r2.<org.apache.commons.configuration.DefaultFileSystem: org.apache.commons.logging.Log log>;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = r3;

        $r8[1] = r4;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not determine URL for basePath = %s, fileName = %s.", $r8);

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r10, $r6);

     label5:
        return r11;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public java.lang.String getBasePath(java.lang.String)
    {
        org.apache.commons.configuration.DefaultFileSystem r0;
        java.net.URL $r2;
        java.lang.String r1, $r3;
        java.lang.Exception $r4;

        r0 := @this: org.apache.commons.configuration.DefaultFileSystem;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.configuration.DefaultFileSystem: java.net.URL getURL(java.lang.String,java.lang.String)>(null, r1);

        $r3 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.lang.String getBasePath(java.net.URL)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String getFileName(java.lang.String)
    {
        org.apache.commons.configuration.DefaultFileSystem r0;
        java.net.URL $r2;
        java.lang.String r1, $r3;
        java.lang.Exception $r4;

        r0 := @this: org.apache.commons.configuration.DefaultFileSystem;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.configuration.DefaultFileSystem: java.net.URL getURL(java.lang.String,java.lang.String)>(null, r1);

        $r3 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.lang.String getFileName(java.net.URL)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.net.URL getURL(java.lang.String, java.lang.String) throws java.net.MalformedURLException
    {
        java.net.MalformedURLException $r7;
        java.net.URL $r3, $r4, $r5, $r6, $r9;
        java.io.File $r0, $r8;
        org.apache.commons.configuration.DefaultFileSystem r10;
        java.lang.String r1, r2;
        boolean $z0;

        r10 := @this: org.apache.commons.configuration.DefaultFileSystem;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean isAbsolute()>();

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)>($r0);

        return $r6;

     label1:
        if r2 != null goto label3;

        $r5 = new java.net.URL;

        specialinvoke $r5.<java.net.URL: void <init>(java.lang.String)>(r1);

     label2:
        return $r5;

     label3:
        $r3 = new java.net.URL;

        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>(r2);

        $r4 = new java.net.URL;

        specialinvoke $r4.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r3, r1);

     label4:
        return $r4;

     label5:
        $r7 := @caughtexception;

        $r8 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.io.File constructFile(java.lang.String,java.lang.String)>(r2, r1);

        $r9 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)>($r8);

        return $r9;

        catch java.net.MalformedURLException from label1 to label2 with label5;
        catch java.net.MalformedURLException from label3 to label4 with label5;
    }

    public java.net.URL locateFromURL(java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r19;
        java.net.URL $r1, $r2, $r5;
        java.lang.NullPointerException r20;
        java.lang.String r0, r3, $r16, $r18;
        boolean $z0;
        java.io.IOException $r6;
        org.apache.commons.configuration.DefaultFileSystem r7;
        org.apache.commons.logging.Log $r8, $r10;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r14, $r15, $r17;
        java.io.InputStream $r4;

        r7 := @this: org.apache.commons.configuration.DefaultFileSystem;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

     label01:
        if r0 != null goto label03;

        $r5 = new java.net.URL;

        specialinvoke $r5.<java.net.URL: void <init>(java.lang.String)>(r3);

     label02:
        return $r5;

     label03:
        $r1 = new java.net.URL;

        specialinvoke $r1.<java.net.URL: void <init>(java.lang.String)>(r0);

        $r2 = new java.net.URL;

        specialinvoke $r2.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r1, r3);

     label04:
        $r4 = virtualinvoke $r2.<java.net.URL: java.io.InputStream openStream()>();

     label05:
        if $r4 == null goto label09;

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        goto label09;

     label06:
        $r19 := @caughtexception;

     label07:
        if null == null goto label08;

        r20 = new java.lang.NullPointerException;

        specialinvoke r20.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: virtualinvoke in#2.<java.io.InputStream: void close()>()");

        throw r20;

     label08:
        throw $r19;

     label09:
        return $r2;

     label10:
        $r6 := @caughtexception;

        $r8 = r7.<org.apache.commons.configuration.DefaultFileSystem: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r8.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label11;

        $r10 = r7.<org.apache.commons.configuration.DefaultFileSystem: org.apache.commons.logging.Log log>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not locate file ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r16 = virtualinvoke $r6.<java.io.IOException: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r18);

     label11:
        return null;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.io.IOException from label01 to label02 with label10;
        catch java.io.IOException from label03 to label09 with label10;
    }

    private void createPath(java.io.File)
    {
        org.apache.commons.configuration.DefaultFileSystem r2;
        java.io.File r0, $r1;
        boolean $z0, $z1;

        r2 := @this: org.apache.commons.configuration.DefaultFileSystem;

        r0 := @parameter0: java.io.File;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        if $r1 == null goto label1;

        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label1;

        virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

     label1:
        return;
    }
}
