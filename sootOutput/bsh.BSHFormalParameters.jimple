class bsh.BSHFormalParameters extends bsh.SimpleNode
{
    private java.lang.String[] paramNames;
    java.lang.Class[] paramTypes;
    int numArgs;
    java.lang.String[] typeDescriptors;

    void <init>(int)
    {
        int i0;
        bsh.BSHFormalParameters r0;

        r0 := @this: bsh.BSHFormalParameters;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    void insureParsed()
    {
        java.lang.String[] $r1, r2;
        bsh.BSHFormalParameter r4;
        bsh.BSHFormalParameters r0;
        int $i0, $i1, $i2, i3;
        java.lang.String $r5;
        bsh.Node $r3;

        r0 := @this: bsh.BSHFormalParameters;

        $r1 = r0.<bsh.BSHFormalParameters: java.lang.String[] paramNames>;

        if $r1 == null goto label1;

        return;

     label1:
        $i0 = virtualinvoke r0.<bsh.BSHFormalParameters: int jjtGetNumChildren()>();

        r0.<bsh.BSHFormalParameters: int numArgs> = $i0;

        $i1 = r0.<bsh.BSHFormalParameters: int numArgs>;

        r2 = newarray (java.lang.String)[$i1];

        i3 = 0;

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<bsh.BSHFormalParameters: bsh.Node jjtGetChild(int)>(i3);

        r4 = (bsh.BSHFormalParameter) $r3;

        $r5 = r4.<bsh.BSHFormalParameter: java.lang.String name>;

        r2[i3] = $r5;

        i3 = i3 + 1;

     label3:
        $i2 = r0.<bsh.BSHFormalParameters: int numArgs>;

        if i3 < $i2 goto label2;

        r0.<bsh.BSHFormalParameters: java.lang.String[] paramNames> = r2;

        return;
    }

    public java.lang.String[] getParamNames()
    {
        java.lang.String[] $r1;
        bsh.BSHFormalParameters r0;

        r0 := @this: bsh.BSHFormalParameters;

        virtualinvoke r0.<bsh.BSHFormalParameters: void insureParsed()>();

        $r1 = r0.<bsh.BSHFormalParameters: java.lang.String[] paramNames>;

        return $r1;
    }

    public java.lang.String[] getTypeDescriptors(bsh.CallStack, bsh.Interpreter, java.lang.String)
    {
        bsh.Interpreter r6;
        java.lang.String[] $r1, r2, $r9;
        bsh.CallStack r5;
        bsh.BSHFormalParameter r4;
        bsh.BSHFormalParameters r0;
        int $i0, $i1, i2;
        java.lang.String r7, $r8;
        bsh.Node $r3;

        r0 := @this: bsh.BSHFormalParameters;

        r5 := @parameter0: bsh.CallStack;

        r6 := @parameter1: bsh.Interpreter;

        r7 := @parameter2: java.lang.String;

        $r1 = r0.<bsh.BSHFormalParameters: java.lang.String[] typeDescriptors>;

        if $r1 == null goto label1;

        $r9 = r0.<bsh.BSHFormalParameters: java.lang.String[] typeDescriptors>;

        return $r9;

     label1:
        virtualinvoke r0.<bsh.BSHFormalParameters: void insureParsed()>();

        $i0 = r0.<bsh.BSHFormalParameters: int numArgs>;

        r2 = newarray (java.lang.String)[$i0];

        i2 = 0;

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<bsh.BSHFormalParameters: bsh.Node jjtGetChild(int)>(i2);

        r4 = (bsh.BSHFormalParameter) $r3;

        $r8 = virtualinvoke r4.<bsh.BSHFormalParameter: java.lang.String getTypeDescriptor(bsh.CallStack,bsh.Interpreter,java.lang.String)>(r5, r6, r7);

        r2[i2] = $r8;

        i2 = i2 + 1;

     label3:
        $i1 = r0.<bsh.BSHFormalParameters: int numArgs>;

        if i2 < $i1 goto label2;

        r0.<bsh.BSHFormalParameters: java.lang.String[] typeDescriptors> = r2;

        return r2;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.Interpreter r6;
        java.lang.Class[] $r1, r2, $r9;
        bsh.CallStack r5;
        bsh.BSHFormalParameter r4;
        bsh.BSHFormalParameters r0;
        int $i0, $i1, i2;
        java.lang.Object $r7;
        java.lang.Class $r8;
        bsh.Node $r3;

        r0 := @this: bsh.BSHFormalParameters;

        r5 := @parameter0: bsh.CallStack;

        r6 := @parameter1: bsh.Interpreter;

        $r1 = r0.<bsh.BSHFormalParameters: java.lang.Class[] paramTypes>;

        if $r1 == null goto label1;

        $r9 = r0.<bsh.BSHFormalParameters: java.lang.Class[] paramTypes>;

        return $r9;

     label1:
        virtualinvoke r0.<bsh.BSHFormalParameters: void insureParsed()>();

        $i0 = r0.<bsh.BSHFormalParameters: int numArgs>;

        r2 = newarray (java.lang.Class)[$i0];

        i2 = 0;

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<bsh.BSHFormalParameters: bsh.Node jjtGetChild(int)>(i2);

        r4 = (bsh.BSHFormalParameter) $r3;

        $r7 = virtualinvoke r4.<bsh.BSHFormalParameter: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r5, r6);

        $r8 = (java.lang.Class) $r7;

        r2[i2] = $r8;

        i2 = i2 + 1;

     label3:
        $i1 = r0.<bsh.BSHFormalParameters: int numArgs>;

        if i2 < $i1 goto label2;

        r0.<bsh.BSHFormalParameters: java.lang.Class[] paramTypes> = r2;

        return r2;
    }
}
