public class com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment extends java.lang.Object implements com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment
{
    protected com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter interpreter;

    public void <init>(com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment: com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter interpreter> = r1;

        return;
    }

    public com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment r2;
        com.hp.hpl.jena.graph.Node r0, $r1;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: com.hp.hpl.jena.graph.Node deref(com.hp.hpl.jena.graph.Node)>(r0);

        return $r1;
    }

    public boolean bind(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r4;
        com.hp.hpl.jena.graph.Node r0, r1, r5;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment r2;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 = r0;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label1;

        $r4 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r0;

        r5 = virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.graph.Node deref()>();

     label1:
        $z1 = r5 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z1 == 0 goto label2;

        $r3 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment: com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter interpreter>;

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: void bind(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r5, r1);

        return 1;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>(r1);

        return $z2;
    }

    public com.hp.hpl.jena.graph.Triple instantiate(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r5, $r6, $r7, r9, r10, r11;
        com.hp.hpl.jena.graph.Triple $r8;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment: com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)>($r2);

        r9 = $r3;

        $z0 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label1;

        r9 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

     label1:
        $r4 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment: com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)>($r4);

        r10 = $r5;

        $z1 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 == 0 goto label2;

        r10 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

     label2:
        $r6 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment: com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)>($r6);

        r11 = $r7;

        $z2 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z2 == 0 goto label3;

        r11 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

     label3:
        $r8 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r8.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r9, r10, r11);

        return $r8;
    }
}
