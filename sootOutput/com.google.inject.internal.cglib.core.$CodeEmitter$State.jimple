class com.google.inject.internal.cglib.core.$CodeEmitter$State extends com.google.inject.internal.cglib.core.$MethodInfo
{
    com.google.inject.internal.cglib.core.$ClassInfo classInfo;
    int access;
    com.google.inject.internal.cglib.core.$Signature sig;
    com.google.inject.internal.asm.$Type[] argumentTypes;
    int localOffset;
    com.google.inject.internal.asm.$Type[] exceptionTypes;

    void <init>(com.google.inject.internal.cglib.core.$ClassInfo, int, com.google.inject.internal.cglib.core.$Signature, com.google.inject.internal.asm.$Type[])
    {
        com.google.inject.internal.cglib.core.$ClassInfo r1;
        com.google.inject.internal.cglib.core.$CodeEmitter$State r0;
        com.google.inject.internal.asm.$Type[] r3, $r4;
        byte $b1;
        int i0;
        com.google.inject.internal.cglib.core.$Signature r2;
        boolean $z0;

        r0 := @this: com.google.inject.internal.cglib.core.$CodeEmitter$State;

        r1 := @parameter0: com.google.inject.internal.cglib.core.$ClassInfo;

        i0 := @parameter1: int;

        r2 := @parameter2: com.google.inject.internal.cglib.core.$Signature;

        r3 := @parameter3: com.google.inject.internal.asm.$Type[];

        specialinvoke r0.<com.google.inject.internal.cglib.core.$MethodInfo: void <init>()>();

        r0.<com.google.inject.internal.cglib.core.$CodeEmitter$State: com.google.inject.internal.cglib.core.$ClassInfo classInfo> = r1;

        r0.<com.google.inject.internal.cglib.core.$CodeEmitter$State: int access> = i0;

        r0.<com.google.inject.internal.cglib.core.$CodeEmitter$State: com.google.inject.internal.cglib.core.$Signature sig> = r2;

        r0.<com.google.inject.internal.cglib.core.$CodeEmitter$State: com.google.inject.internal.asm.$Type[] exceptionTypes> = r3;

        $z0 = staticinvoke <com.google.inject.internal.cglib.core.$TypeUtils: boolean isStatic(int)>(i0);

        if $z0 == 0 goto label1;

        $b1 = 0;

        goto label2;

     label1:
        $b1 = 1;

     label2:
        r0.<com.google.inject.internal.cglib.core.$CodeEmitter$State: int localOffset> = $b1;

        $r4 = virtualinvoke r2.<com.google.inject.internal.cglib.core.$Signature: com.google.inject.internal.asm.$Type[] getArgumentTypes()>();

        r0.<com.google.inject.internal.cglib.core.$CodeEmitter$State: com.google.inject.internal.asm.$Type[] argumentTypes> = $r4;

        return;
    }

    public com.google.inject.internal.cglib.core.$ClassInfo getClassInfo()
    {
        com.google.inject.internal.cglib.core.$CodeEmitter$State r0;
        com.google.inject.internal.cglib.core.$ClassInfo $r1;

        r0 := @this: com.google.inject.internal.cglib.core.$CodeEmitter$State;

        $r1 = r0.<com.google.inject.internal.cglib.core.$CodeEmitter$State: com.google.inject.internal.cglib.core.$ClassInfo classInfo>;

        return $r1;
    }

    public int getModifiers()
    {
        int $i0;
        com.google.inject.internal.cglib.core.$CodeEmitter$State r0;

        r0 := @this: com.google.inject.internal.cglib.core.$CodeEmitter$State;

        $i0 = r0.<com.google.inject.internal.cglib.core.$CodeEmitter$State: int access>;

        return $i0;
    }

    public com.google.inject.internal.cglib.core.$Signature getSignature()
    {
        com.google.inject.internal.cglib.core.$CodeEmitter$State r0;
        com.google.inject.internal.cglib.core.$Signature $r1;

        r0 := @this: com.google.inject.internal.cglib.core.$CodeEmitter$State;

        $r1 = r0.<com.google.inject.internal.cglib.core.$CodeEmitter$State: com.google.inject.internal.cglib.core.$Signature sig>;

        return $r1;
    }

    public com.google.inject.internal.asm.$Type[] getExceptionTypes()
    {
        com.google.inject.internal.cglib.core.$CodeEmitter$State r0;
        com.google.inject.internal.asm.$Type[] $r1;

        r0 := @this: com.google.inject.internal.cglib.core.$CodeEmitter$State;

        $r1 = r0.<com.google.inject.internal.cglib.core.$CodeEmitter$State: com.google.inject.internal.asm.$Type[] exceptionTypes>;

        return $r1;
    }

    public com.google.inject.internal.asm.$Attribute getAttribute()
    {
        com.google.inject.internal.cglib.core.$CodeEmitter$State r0;

        r0 := @this: com.google.inject.internal.cglib.core.$CodeEmitter$State;

        return null;
    }
}
