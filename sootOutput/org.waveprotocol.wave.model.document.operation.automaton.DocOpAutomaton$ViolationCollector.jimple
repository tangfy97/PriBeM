public final class org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector extends java.lang.Object
{
    private final java.util.List operationIllFormed;
    private final java.util.List operationInvalid;
    private final java.util.List schemaViolations;

    public void <init>()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        java.util.ArrayList $r1, $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List operationIllFormed> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List operationInvalid> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List schemaViolations> = $r3;

        return;
    }

    public void add(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        java.util.List $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List operationIllFormed>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void add(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        java.util.List $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List operationInvalid>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void add(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        java.util.List $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List schemaViolations>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public boolean isIllFormed()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult getValidationResult()>();

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isIllFormed()>();

        return $z0;
    }

    public boolean isInvalidDocument()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult getValidationResult()>();

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isInvalidDocument()>();

        return $z0;
    }

    public boolean isInvalidSchema()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult getValidationResult()>();

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isInvalidSchema()>();

        return $z0;
    }

    public boolean isValid()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult getValidationResult()>();

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        return $z0;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult getValidationResult()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        java.util.List $r1, $r2, $r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List operationIllFormed>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r7 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult ILL_FORMED>;

        return $r7;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List operationInvalid>;

        $z1 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r6 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult INVALID_DOCUMENT>;

        return $r6;

     label2:
        $r3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List schemaViolations>;

        $z2 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        $r5 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult INVALID_SCHEMA>;

        return $r5;

     label3:
        $r4 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        return $r4;
    }

    public java.lang.String firstDescription()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid r26;
        java.lang.String $r10, $r12, $r16, $r18, $r22, $r24;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed r25;
        java.util.Iterator $r2, $r4, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        java.util.List $r1, $r3, $r5;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation r27;
        java.lang.Object $r7, $r13, $r19;
        java.lang.StringBuilder $r8, $r9, $r11, $r14, $r15, $r17, $r20, $r21, $r23;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List operationIllFormed>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r19 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed) $r19;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ill-formed: ");

        $r22 = virtualinvoke r25.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed: java.lang.String description()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r24;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List operationInvalid>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r13 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r26 = (org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid) $r13;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid operation: ");

        $r16 = virtualinvoke r26.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid: java.lang.String description()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;

     label2:
        $r5 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List schemaViolations>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r27 = (org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation) $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("schema violation: ");

        $r10 = virtualinvoke r27.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation: java.lang.String description()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;

     label3:
        return null;
    }

    public void printDescriptions(java.io.PrintStream)
    {
        java.io.PrintStream r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r1 := @parameter0: java.io.PrintStream;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: void printDescriptions(java.io.PrintStream,java.lang.String)>(r1, "");

        return;
    }

    public void printDescriptions(java.io.PrintStream, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid r35;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed r34;
        java.util.List $r1, $r3, $r5;
        java.lang.StringBuilder $r9, $r11, $r12, $r14, $r17, $r18, $r19, $r21, $r24, $r25, $r26, $r28, $r30, $r31, $r32;
        java.lang.String r10, $r13, $r15, $r20, $r22, $r27, $r29, $r33;
        java.io.PrintStream r8;
        java.util.Iterator $r2, $r4, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation r36;
        java.lang.Object $r7, $r16, $r23;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r8 := @parameter0: java.io.PrintStream;

        r10 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: boolean isValid()>();

        if $z0 == 0 goto label1;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no violations");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r8.<java.io.PrintStream: void println(java.lang.String)>($r33);

        return;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List operationIllFormed>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r23 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r34 = (org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed) $r23;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ill-formed: ");

        $r27 = virtualinvoke r34.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed: java.lang.String description()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r8.<java.io.PrintStream: void println(java.lang.String)>($r29);

        goto label2;

     label3:
        $r3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List operationInvalid>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r16 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r35 = (org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid) $r16;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid operation: ");

        $r20 = virtualinvoke r35.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid: java.lang.String description()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r8.<java.io.PrintStream: void println(java.lang.String)>($r22);

        goto label4;

     label5:
        $r5 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List schemaViolations>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z3 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r36 = (org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation) $r7;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("schema violation: ");

        $r13 = virtualinvoke r36.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation: java.lang.String description()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r8.<java.io.PrintStream: void println(java.lang.String)>($r15);

        goto label6;

     label7:
        return;
    }

    private int size()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        java.util.List $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List operationIllFormed>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List operationInvalid>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = $i0 + $i1;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.util.List schemaViolations>;

        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i4 = $i2 + $i3;

        return $i4;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        int $i0, $i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r7, $r8;
        java.lang.String $r6, $r9, $r10;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $i0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: int size()>();

        if $i0 != 0 goto label1;

        return "ViolationCollector[0]";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ViolationCollector[");

        $i1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: int size()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.lang.String firstDescription()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }
}
