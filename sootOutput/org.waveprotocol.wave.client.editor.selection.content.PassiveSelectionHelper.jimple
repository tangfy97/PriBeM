public class org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper extends java.lang.Object implements org.waveprotocol.wave.client.editor.selection.content.SelectionHelper
{
    static org.waveprotocol.wave.common.logging.LoggerBundle logger;
    final org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper htmlHelper;
    final org.waveprotocol.wave.model.document.indexed.LocationMapper mapper;
    final org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager;
    final org.waveprotocol.wave.client.editor.content.ContentView renderedContentView;
    boolean needsCorrection;
    private org.waveprotocol.wave.model.document.util.RangeTracker savedSelection;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper, org.waveprotocol.wave.client.editor.impl.NodeManager, org.waveprotocol.wave.client.editor.content.ContentView, org.waveprotocol.wave.model.document.indexed.LocationMapper)
    {
        org.waveprotocol.wave.client.editor.content.ContentView r4;
        org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper r1;
        org.waveprotocol.wave.client.editor.impl.NodeManager r3;
        org.waveprotocol.wave.model.document.indexed.LocationMapper r2;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r4 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentView;

        r2 := @parameter3: org.waveprotocol.wave.model.document.indexed.LocationMapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper htmlHelper> = r1;

        r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper> = r2;

        r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager> = r3;

        r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.content.ContentView renderedContentView> = r4;

        return;
    }

    public void clearSelection()
    {
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void clear()>();

        return;
    }

    public org.waveprotocol.wave.client.editor.content.FocusedContentRange getSelectionPoints()
    {
        java.lang.Throwable $r9;
        org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper $r1;
        org.waveprotocol.wave.model.document.util.Point $r4, $r5, $r6, $r7, $r8, $r10;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r11, r12;
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r2, $r3;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        $r1 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper htmlHelper>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper: org.waveprotocol.wave.model.document.util.FocusedPointRange getHtmlSelection()>();

     label01:
        r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean needsCorrection> = 0;

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.selection.content.SelectionUtil: org.waveprotocol.wave.model.document.util.FocusedPointRange filterNonContentSelection(org.waveprotocol.wave.model.document.util.FocusedPointRange)>($r2);

        if $r3 != null goto label03;

     label02:
        r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean needsCorrection> = 0;

        return null;

     label03:
        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getAnchor()>();

        $r5 = specialinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.Point nodeletPointToFixedContentPoint(org.waveprotocol.wave.model.document.util.Point)>($r4);

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.FocusedPointRange: boolean isCollapsed()>();

        if $z0 == 0 goto label04;

        $r10 = $r5;

        goto label05;

     label04:
        $r6 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $r10 = specialinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.Point nodeletPointToFixedContentPoint(org.waveprotocol.wave.model.document.util.Point)>($r6);

     label05:
        if $r5 == null goto label06;

        if $r10 != null goto label07;

     label06:
        r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean needsCorrection> = 0;

        return null;

     label07:
        $z1 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.FocusedPointRange: boolean isCollapsed()>();

        if $z1 == 0 goto label08;

        $r11 = new org.waveprotocol.wave.client.editor.content.FocusedContentRange;

        specialinvoke $r11.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: void <init>(org.waveprotocol.wave.model.document.util.Point)>($r5);

        goto label09;

     label08:
        $r11 = new org.waveprotocol.wave.client.editor.content.FocusedContentRange;

        specialinvoke $r11.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: void <init>(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r5, $r10);

     label09:
        r12 = $r11;

        $z2 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean needsCorrection>;

        if $z2 == 0 goto label10;

        if $r11 == null goto label10;

        $r7 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getAnchor()>();

        $r8 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: void setSelectionPoints(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r7, $r8);

     label10:
        r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean needsCorrection> = 0;

        return r12;

     label11:
        $r9 := @caughtexception;

     label12:
        r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean needsCorrection> = 0;

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label06 with label11;
        catch java.lang.Throwable from label07 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public org.waveprotocol.wave.client.editor.content.ContentRange getOrderedSelectionPoints()
    {
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r1;
        org.waveprotocol.wave.client.editor.content.ContentRange $r2;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.content.FocusedContentRange getSelectionPoints()>();

        if $r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: boolean isOrdered()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.client.editor.content.ContentRange asOrderedRange(boolean)>($z0);

     label2:
        return $r2;
    }

    public org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()
    {
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r1;
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r3, $r5;
        org.waveprotocol.wave.model.document.util.FocusedRange $r2;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.Point $r4, $r6;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.content.FocusedContentRange getSelectionPoints()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = new org.waveprotocol.wave.model.document.util.FocusedRange;

        $r3 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper>;

        $r4 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getAnchor()>();

        $i0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r4);

        $r5 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper>;

        $r6 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $i1 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r6);

        specialinvoke $r2.<org.waveprotocol.wave.model.document.util.FocusedRange: void <init>(int,int)>($i0, $i1);

        return $r2;
    }

    public org.waveprotocol.wave.model.document.util.Range getOrderedSelectionRange()
    {
        org.waveprotocol.wave.model.document.util.Range $r2;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r0;
        org.waveprotocol.wave.model.document.util.FocusedRange $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.FocusedRange: org.waveprotocol.wave.model.document.util.Range asRange()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public void setSelectionRange(org.waveprotocol.wave.model.document.util.FocusedRange)
    {
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r2, $r4;
        org.waveprotocol.wave.model.document.util.FocusedRange r0;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.Point $r3, $r5;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.FocusedRange;

        if r0 == null goto label3;

        $r2 = r1.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper>;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int getAnchor()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.indexed.LocationMapper: org.waveprotocol.wave.model.document.util.Point locate(int)>($i0);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.FocusedRange: boolean isCollapsed()>();

        if $z0 == 0 goto label1;

        $r5 = $r3;

        goto label2;

     label1:
        $r4 = r1.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper>;

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.FocusedRange: int getFocus()>();

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.indexed.LocationMapper: org.waveprotocol.wave.model.document.util.Point locate(int)>($i1);

     label2:
        virtualinvoke r1.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: void setSelectionPoints(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r3, $r5);

     label3:
        return;
    }

    public void setCaret(int)
    {
        int i0;
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r1;
        org.waveprotocol.wave.model.document.util.Point $r2;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.indexed.LocationMapper: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r2);

        return;
    }

    public boolean isValidSelectionPoint(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r2, $r4, r11;
        int $i0, $i1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r7;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r10;
        java.lang.Object $r1, $r3, $r5, $r6, $r8;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r9;

        r9 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r1;

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isContentAttached()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r4 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r3;

        $z1 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isTextNode()>();

        if $z1 == 0 goto label4;

        $r8 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        r10 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) $r8;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $i1 = virtualinvoke r10.<org.waveprotocol.wave.client.editor.content.ContentTextNode: int getLength()>();

        if $i0 > $i1 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        $r5 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        r11 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r5;

        if r11 == null goto label5;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r7 = virtualinvoke r11.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r6 != $r7 goto label6;

     label5:
        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        return $z3;
    }

    public void setSelectionPoints(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r4, $r5;
        org.waveprotocol.wave.model.document.util.RangeTracker $r6, $r16;
        org.waveprotocol.wave.model.document.util.FocusedRange $r3;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.Point $r1, r2, r10, r11, $r12, r13, $r14, $r15;
        boolean $z0;
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r8;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r7, $r9;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        r10 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r11 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        if r10 != r11 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.Point findOrCreateValidSelectionPoint2(org.waveprotocol.wave.model.document.util.Point)>(r10);

        if $z0 == 0 goto label03;

        $r12 = $r1;

        goto label04;

     label03:
        $r12 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.Point findOrCreateValidSelectionPoint2(org.waveprotocol.wave.model.document.util.Point)>(r11);

     label04:
        r13 = $r12;

        if $r1 == null goto label05;

        $r9 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager>;

        $r14 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point wrapperPointToNodeletPoint(org.waveprotocol.wave.model.document.util.Point)>($r1);

        goto label06;

     label05:
        $r14 = null;

     label06:
        r2 = $r14;

        if $r14 == null goto label09;

        if $r1 != r13 goto label07;

        $r15 = $r14;

        goto label08;

     label07:
        $r7 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager>;

        $r15 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point wrapperPointToNodeletPoint(org.waveprotocol.wave.model.document.util.Point)>(r13);

     label08:
        if $r15 == null goto label09;

        $r8 = new org.waveprotocol.wave.model.document.util.FocusedPointRange;

        specialinvoke $r8.<org.waveprotocol.wave.model.document.util.FocusedPointRange: void <init>(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>(r2, $r15);

        if $r8 == null goto label09;

        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void set(org.waveprotocol.wave.model.document.util.FocusedPointRange)>($r8);

     label09:
        $r16 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.RangeTracker savedSelection>;

        if $r16 == null goto label10;

        $r3 = new org.waveprotocol.wave.model.document.util.FocusedRange;

        $r4 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper>;

        $i0 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r1);

        $r5 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper>;

        $i1 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r13);

        specialinvoke $r3.<org.waveprotocol.wave.model.document.util.FocusedRange: void <init>(int,int)>($i0, $i1);

        $r6 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.RangeTracker savedSelection>;

        virtualinvoke $r6.<org.waveprotocol.wave.model.document.util.RangeTracker: void trackRange(org.waveprotocol.wave.model.document.util.FocusedRange)>($r3);

     label10:
        return;
    }

    private void saveSelection()
    {
        org.waveprotocol.wave.model.document.util.RangeTracker $r1, $r3;
        org.waveprotocol.wave.model.document.util.FocusedRange $r2;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        $r1 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.RangeTracker savedSelection>;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()>();

        if $r2 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.RangeTracker savedSelection>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.RangeTracker: void trackRange(org.waveprotocol.wave.model.document.util.FocusedRange)>($r2);

     label1:
        return;
    }

    public void setCaret(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.impl.NodeManager $r2;
        java.lang.IllegalArgumentException $r3;
        org.waveprotocol.wave.model.document.util.Point $r1, r4, $r5;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        r4 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        if r4 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("setCaret: caret may not be null");

        throw $r3;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.Point findOrCreateValidSelectionPoint2(org.waveprotocol.wave.model.document.util.Point)>(r4);

        if $r1 != null goto label2;

        $r5 = null;

        goto label3;

     label2:
        $r2 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager>;

        $r5 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point wrapperPointToNodeletPoint(org.waveprotocol.wave.model.document.util.Point)>($r1);

     label3:
        if $r5 == null goto label4;

        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r5);

     label4:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: void saveSelection()>();

        return;
    }

    private org.waveprotocol.wave.model.document.util.Point nodeletPointToFixedContentPoint(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r5, $r10, $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.client.editor.content.ContentView $r24;
        org.waveprotocol.wave.model.document.util.Point$El $r8;
        org.waveprotocol.wave.common.logging.LoggerBundle $r13, $r28;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r11;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r30, $r31, $r32, $r35, $r36, $r37;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted $r26;
        org.waveprotocol.wave.common.logging.Logger $r14, $r29;
        java.lang.AssertionError $r7, $r34;
        int $i0, $i1;
        org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper $r12, $r21;
        java.lang.String $r19, $r33, $r38, $r40, r41;
        org.waveprotocol.wave.model.document.util.Point r1, r39;
        org.waveprotocol.wave.client.editor.EditorImpl $r22;
        java.lang.RuntimeException $r27;
        java.lang.Object $r3, $r4, $r6, $r9, $r20;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing $r23;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r2;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

     label01:
        $r2 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager>;

        r39 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point nodeletPointToWrapperPoint(org.waveprotocol.wave.model.document.util.Point)>(r1);

     label02:
        goto label05;

     label03:
        $r27 := @caughtexception;

        $r28 = <org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r29 = interfaceinvoke $r28.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CAUGHT RUNTIME EXCEPTION in nodeletPointToFixedContentPoint ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r33);

        $z4 = <org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean $assertionsDisabled>;

        if $z4 != 0 goto label04;

        $r34 = new java.lang.AssertionError;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>($r38);

        throw $r34;

     label04:
        r39 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.Point nodeletPointToWrapperPointAttempt2(org.waveprotocol.wave.model.document.util.Point)>(r1);

     label05:
        goto label08;

     label06:
        $r26 := @caughtexception;

        r39 = virtualinvoke $r26.<org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted: org.waveprotocol.wave.model.document.util.Point$El getContentPoint()>();

        r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean needsCorrection> = 1;

        goto label08;

     label07:
        $r23 := @caughtexception;

        $r24 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.content.ContentView renderedContentView>;

        $r25 = virtualinvoke $r23.<org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing: org.waveprotocol.wave.client.editor.content.ContentNode getBrokenNode()>();

        r39 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r24, $r25);

        r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean needsCorrection> = 1;

     label08:
        if r39 == null goto label09;

        $r3 = virtualinvoke r39.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        if $r3 != null goto label10;

     label09:
        return null;

     label10:
        $z0 = virtualinvoke r39.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label16;

        $r9 = virtualinvoke r39.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r10 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r9;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentTextNode asText()>();

        $i0 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.content.ContentTextNode: int getLength()>();

        $i1 = virtualinvoke r39.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        if $i1 <= $i0 goto label15;

        $r12 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper htmlHelper>;

        $z2 = $r12 instanceof org.waveprotocol.wave.client.editor.EditorImpl;

        if $z2 == 0 goto label13;

        $r21 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper htmlHelper>;

        $r22 = (org.waveprotocol.wave.client.editor.EditorImpl) $r21;

        $z3 = virtualinvoke $r22.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isConsistent()>();

        if $z3 == 0 goto label11;

        $r40 = "YES";

        goto label12;

     label11:
        $r40 = "NO";

     label12:
        r41 = $r40;

        goto label14;

     label13:
        r41 = "(no editor available)";

     label14:
        $r13 = <org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Text offset too big for text node, editor consistency: \'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r19);

        $r20 = virtualinvoke r39.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        r39 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r20, $i0);

     label15:
        goto label17;

     label16:
        $r4 = virtualinvoke r39.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r5 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r4;

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean isKnownInvalidTopContainerForCursor(org.waveprotocol.wave.client.editor.content.ContentNode)>($r5);

        if $z1 == 0 goto label17;

        $r8 = virtualinvoke r39.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El asElementPoint()>();

        r39 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.Point findOrCreateValidSelectionPoint(org.waveprotocol.wave.model.document.util.Point$El)>($r8);

        r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean needsCorrection> = 1;

     label17:
        $z5 = <org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean $assertionsDisabled>;

        if $z5 != 0 goto label18;

        if r39 == null goto label18;

        $r6 = virtualinvoke r39.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        if $r6 != null goto label18;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label18:
        return r39;

        catch java.lang.RuntimeException from label01 to label02 with label03;
        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted from label01 to label05 with label06;
        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing from label01 to label05 with label07;
    }

    protected org.waveprotocol.wave.model.document.util.Point nodeletPointToWrapperPointAttempt2(org.waveprotocol.wave.model.document.util.Point) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted, org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        org.waveprotocol.wave.model.document.util.Point r1;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        return null;
    }

    org.waveprotocol.wave.model.document.util.Point findOrCreateValidSelectionPoint(org.waveprotocol.wave.model.document.util.Point$El)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r7, $r13, r27, r28;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.client.editor.content.ContentView $r2, $r10, $r20;
        org.waveprotocol.wave.model.document.util.Point$El r3, $r12, $r14, $r18, $r29;
        java.lang.StringBuilder $r23, $r24, $r25;
        java.lang.AssertionError $r22;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper$ValidSelectionContainerView $r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r5, $r15, $r17;
        java.lang.String $r26;
        java.lang.Object $r4, $r6, $r8, $r9, $r11, $r16, $r19, $r21;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r1;

        r1 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        r3 := @parameter0: org.waveprotocol.wave.model.document.util.Point$El;

        $r0 = new org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper$ValidSelectionContainerView;

        $r2 = r1.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.content.ContentView renderedContentView>;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper$ValidSelectionContainerView: void <init>(org.waveprotocol.wave.client.editor.content.ContentView)>($r2);

        $r4 = virtualinvoke r3.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        r5 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r4;

        $z0 = <org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r20 = r1.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.content.ContentView renderedContentView>;

        $r21 = interfaceinvoke $r20.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getVisibleNode(java.lang.Object)>(r5);

        if $r21 == r5 goto label1;

        $r22 = new java.lang.AssertionError;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Container: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>($r26);

        throw $r22;

     label1:
        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean isKnownInvalidTopContainerForCursor(org.waveprotocol.wave.client.editor.content.ContentNode)>(r5);

        if $z1 != 0 goto label2;

        return r3;

     label2:
        $r6 = virtualinvoke r3.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getNodeAfter()>();

        r7 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r6;

        if r7 != null goto label3;

        $r19 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper$ValidSelectionContainerView: java.lang.Object getLastChild(java.lang.Object)>(r5);

        r27 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r19;

        goto label6;

     label3:
        $r8 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper$ValidSelectionContainerView: java.lang.Object getVisibleNodePrevious(java.lang.Object)>(r7);

        r28 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r8;

        if r28 == null goto label5;

        $z2 = virtualinvoke r28.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

        if $z2 == 0 goto label4;

        $r15 = virtualinvoke r7.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        $r16 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper$ValidSelectionContainerView: java.lang.Object getVisibleNodePrevious(java.lang.Object)>($r15);

        r28 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r16;

        $r17 = virtualinvoke r7.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if r28 != $r17 goto label4;

        $r18 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r0, r7);

        return $r18;

     label4:
        if r28 == null goto label5;

        $r14 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>(r28);

        return $r14;

     label5:
        $r9 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper$ValidSelectionContainerView: java.lang.Object getVisibleNodeFirst(java.lang.Object)>(r7);

        $r13 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r9;

        r27 = $r13;

        if $r13 == null goto label6;

        $r10 = r1.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.content.ContentView renderedContentView>;

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getFirstChild(java.lang.Object)>($r13);

        $r12 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r13, $r11);

        return $r12;

     label6:
        if r27 != null goto label7;

        r27 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.content.ContentElement maybePlaceMissingCursorContainer(org.waveprotocol.wave.model.document.util.Point$El)>(r3);

     label7:
        if r27 == null goto label8;

        $r29 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>(r27);

        goto label9;

     label8:
        $r29 = null;

     label9:
        return $r29;
    }

    org.waveprotocol.wave.model.document.util.Point findOrCreateValidSelectionPoint2(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.util.Point$El $r1;
        org.waveprotocol.wave.model.document.util.Point r0, $r3;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r2;

        r2 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El asElementPoint()>();

        if $r1 != null goto label1;

        $r3 = r0;

        goto label2;

     label1:
        $r3 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.Point findOrCreateValidSelectionPoint(org.waveprotocol.wave.model.document.util.Point$El)>($r1);

     label2:
        return $r3;
    }

    private static boolean isKnownInvalidTopContainerForCursor(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        if r0 != null goto label1;

        return 1;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r1 == null goto label2;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLineContainerElement(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        if $z0 == 0 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    protected org.waveprotocol.wave.client.editor.content.ContentElement maybePlaceMissingCursorContainer(org.waveprotocol.wave.model.document.util.Point$El)
    {
        org.waveprotocol.wave.model.document.util.Point$El r1;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point$El;

        return null;
    }

    public org.waveprotocol.wave.model.document.util.Point getFirstValidSelectionPoint()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r6;
        org.waveprotocol.wave.client.editor.content.ContentView $r1, $r4;
        java.lang.RuntimeException $r7;
        java.lang.AssertionError $r9;
        org.waveprotocol.wave.model.document.util.Point$El $r10;
        java.lang.Object $r2, $r5;
        org.waveprotocol.wave.client.editor.content.ContentElement r3, $r8;
        org.waveprotocol.wave.model.document.util.Point $r11;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        $r1 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.content.ContentView renderedContentView>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getDocumentElement()>();

        r3 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r2;

        $r4 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.content.ContentView renderedContentView>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getFirstChild(java.lang.Object)>(r3);

        r6 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r5;

        $z0 = <org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r6 == null goto label1;

        $r8 = virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r8 == r3 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $r10 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>(r3, r6);

        $r11 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.Point findOrCreateValidSelectionPoint(org.waveprotocol.wave.model.document.util.Point$El)>($r10);

        if $r11 != null goto label2;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not create a valid selection point!");

        throw $r7;

     label2:
        return $r11;
    }

    public org.waveprotocol.wave.model.document.util.Point getLastValidSelectionPoint()
    {
        org.waveprotocol.wave.client.editor.content.ContentView $r1;
        java.lang.Object $r2;
        java.lang.RuntimeException $r5;
        org.waveprotocol.wave.model.document.util.Point$El $r3;
        org.waveprotocol.wave.model.document.util.Point $r4;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        $r1 = r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.content.ContentView renderedContentView>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getDocumentElement()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>($r2);

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.Point findOrCreateValidSelectionPoint(org.waveprotocol.wave.model.document.util.Point$El)>($r3);

        if $r4 != null goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not create a valid selection point!");

        throw $r5;

     label1:
        return $r4;
    }

    public void setSelectionTracker(org.waveprotocol.wave.model.document.util.RangeTracker)
    {
        org.waveprotocol.wave.model.document.util.RangeTracker r1;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.RangeTracker;

        r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.RangeTracker savedSelection> = r1;

        return;
    }

    static boolean access$000(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean isKnownInvalidTopContainerForCursor(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/selection/content/PassiveSelectionHelper;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: boolean $assertionsDisabled> = $z1;

        $r1 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        <org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.common.logging.LoggerBundle logger> = $r1;

        return;
    }
}
