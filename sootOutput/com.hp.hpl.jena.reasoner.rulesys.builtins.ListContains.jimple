public class com.hp.hpl.jena.reasoner.rulesys.builtins.ListContains extends com.hp.hpl.jena.reasoner.rulesys.builtins.BaseBuiltin
{

    public void <init>()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.ListContains r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.ListContains;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.BaseBuiltin: void <init>()>();

        return;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.ListContains r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.ListContains;

        return "listContains";
    }

    public int getArgLength()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.ListContains r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.ListContains;

        return 2;
    }

    public boolean bodyCall(com.hp.hpl.jena.graph.Node[], int, com.hp.hpl.jena.reasoner.rulesys.RuleContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r1;
        com.hp.hpl.jena.graph.Node[] r2;
        int i0;
        com.hp.hpl.jena.graph.Node $r3, $r4;
        com.hp.hpl.jena.reasoner.rulesys.builtins.ListContains r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.ListContains;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node[];

        i0 := @parameter1: int;

        r1 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.ListContains: void checkArgs(int,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(i0, r1);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.ListContains: com.hp.hpl.jena.graph.Node getArg(int,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(0, r2, r1);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.ListContains: com.hp.hpl.jena.graph.Node getArg(int,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(1, r2, r1);

        $z0 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.builtins.ListContains: boolean listContains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>($r3, $r4, r1);

        return $z0;
    }

    protected static boolean listContains(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.reasoner.rulesys.RuleContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r2;
        com.hp.hpl.jena.graph.Node r0, $r1, $r3, $r4, r5, $r6, $r7;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r5 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        if r0 == null goto label1;

        $r1 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node nil>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        $r3 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node first>;

        $r4 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.graph.Node getPropValue(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(r0, $r3, r2);

        $z1 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>(r5);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        $r6 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node rest>;

        $r7 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.graph.Node getPropValue(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(r0, $r6, r2);

        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.builtins.ListContains: boolean listContains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>($r7, r5, r2);

        return $z2;
    }
}
