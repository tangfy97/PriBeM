class org.apache.lucene.index.SegmentTermVector extends java.lang.Object implements org.apache.lucene.index.TermFreqVector
{
    private java.lang.String field;
    private java.lang.String[] terms;
    private int[] termFreqs;

    void <init>(java.lang.String, java.lang.String[], int[])
    {
        org.apache.lucene.index.SegmentTermVector r0;
        int[] r3;
        java.lang.String[] r2;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.index.SegmentTermVector;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.index.SegmentTermVector: java.lang.String field> = r1;

        r0.<org.apache.lucene.index.SegmentTermVector: java.lang.String[] terms> = r2;

        r0.<org.apache.lucene.index.SegmentTermVector: int[] termFreqs> = r3;

        return;
    }

    public java.lang.String getField()
    {
        org.apache.lucene.index.SegmentTermVector r0;
        java.lang.String $r1;

        r0 := @this: org.apache.lucene.index.SegmentTermVector;

        $r1 = r0.<org.apache.lucene.index.SegmentTermVector: java.lang.String field>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.index.SegmentTermVector r1;
        java.lang.String[] $r4, $r6, $r7;
        int[] $r11;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r0, $r3, $r9, $r10;
        java.lang.String $r2, $r5, $r8;

        r1 := @this: org.apache.lucene.index.SegmentTermVector;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        $r2 = r1.<org.apache.lucene.index.SegmentTermVector: java.lang.String field>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r4 = r1.<org.apache.lucene.index.SegmentTermVector: java.lang.String[] terms>;

        if $r4 == null goto label3;

        i2 = 0;

     label1:
        $r6 = r1.<org.apache.lucene.index.SegmentTermVector: java.lang.String[] terms>;

        $i0 = lengthof $r6;

        if i2 >= $i0 goto label3;

        if i2 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $r7 = r1.<org.apache.lucene.index.SegmentTermVector: java.lang.String[] terms>;

        $r8 = $r7[i2];

        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r11 = r1.<org.apache.lucene.index.SegmentTermVector: int[] termFreqs>;

        $i1 = $r11[i2];

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        i2 = i2 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public int size()
    {
        org.apache.lucene.index.SegmentTermVector r0;
        int $i0;
        java.lang.String[] $r1, $r2;

        r0 := @this: org.apache.lucene.index.SegmentTermVector;

        $r1 = r0.<org.apache.lucene.index.SegmentTermVector: java.lang.String[] terms>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.lucene.index.SegmentTermVector: java.lang.String[] terms>;

        $i0 = lengthof $r2;

     label2:
        return $i0;
    }

    public java.lang.String[] getTerms()
    {
        org.apache.lucene.index.SegmentTermVector r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.lucene.index.SegmentTermVector;

        $r1 = r0.<org.apache.lucene.index.SegmentTermVector: java.lang.String[] terms>;

        return $r1;
    }

    public int[] getTermFrequencies()
    {
        org.apache.lucene.index.SegmentTermVector r0;
        int[] $r1;

        r0 := @this: org.apache.lucene.index.SegmentTermVector;

        $r1 = r0.<org.apache.lucene.index.SegmentTermVector: int[] termFreqs>;

        return $r1;
    }

    public int indexOf(java.lang.String)
    {
        org.apache.lucene.index.SegmentTermVector r0;
        java.lang.String[] $r1, $r3;
        int $i0, $i1, $i3, $i5;
        java.lang.String r2;

        r0 := @this: org.apache.lucene.index.SegmentTermVector;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.lucene.index.SegmentTermVector: java.lang.String[] terms>;

        if $r1 != null goto label1;

        $i3 = (int) -1;

        return $i3;

     label1:
        $r3 = r0.<org.apache.lucene.index.SegmentTermVector: java.lang.String[] terms>;

        $i0 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>($r3, r2);

        if $i0 < 0 goto label2;

        $i1 = $i0;

        goto label3;

     label2:
        $i5 = (int) -1;

        $i1 = $i5;

     label3:
        return $i1;
    }

    public int[] indexesOf(java.lang.String[], int, int)
    {
        org.apache.lucene.index.SegmentTermVector r1;
        java.lang.String[] r2;
        int[] r0;
        int i0, i1, $i2, $i3, i4;
        java.lang.String $r3;

        r1 := @this: org.apache.lucene.index.SegmentTermVector;

        r2 := @parameter0: java.lang.String[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r0 = newarray (int)[i0];

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $i2 = i1 + i4;

        $r3 = r2[$i2];

        $i3 = virtualinvoke r1.<org.apache.lucene.index.SegmentTermVector: int indexOf(java.lang.String)>($r3);

        r0[i4] = $i3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r0;
    }
}
