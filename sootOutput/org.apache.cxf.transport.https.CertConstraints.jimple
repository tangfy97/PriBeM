public class org.apache.cxf.transport.https.CertConstraints extends java.lang.Object
{
    private final org.apache.cxf.transport.https.CertConstraints$DNConstraints subjectDNConstraints;
    private final org.apache.cxf.transport.https.CertConstraints$DNConstraints issuerDNConstraints;

    public void <init>(java.util.List, org.apache.cxf.transport.https.CertConstraints$Combinator, java.util.List, org.apache.cxf.transport.https.CertConstraints$Combinator) throws java.util.regex.PatternSyntaxException
    {
        java.util.List r2, r5;
        org.apache.cxf.transport.https.CertConstraints$Combinator r3, r6;
        org.apache.cxf.transport.https.CertConstraints r0;
        org.apache.cxf.transport.https.CertConstraints$DNConstraints $r1, $r4;

        r0 := @this: org.apache.cxf.transport.https.CertConstraints;

        r2 := @parameter0: java.util.List;

        r3 := @parameter1: org.apache.cxf.transport.https.CertConstraints$Combinator;

        r5 := @parameter2: java.util.List;

        r6 := @parameter3: org.apache.cxf.transport.https.CertConstraints$Combinator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.cxf.transport.https.CertConstraints$DNConstraints;

        specialinvoke $r1.<org.apache.cxf.transport.https.CertConstraints$DNConstraints: void <init>(java.util.List,org.apache.cxf.transport.https.CertConstraints$Combinator)>(r2, r3);

        r0.<org.apache.cxf.transport.https.CertConstraints: org.apache.cxf.transport.https.CertConstraints$DNConstraints subjectDNConstraints> = $r1;

        $r4 = new org.apache.cxf.transport.https.CertConstraints$DNConstraints;

        specialinvoke $r4.<org.apache.cxf.transport.https.CertConstraints$DNConstraints: void <init>(java.util.List,org.apache.cxf.transport.https.CertConstraints$Combinator)>(r5, r6);

        r0.<org.apache.cxf.transport.https.CertConstraints: org.apache.cxf.transport.https.CertConstraints$DNConstraints issuerDNConstraints> = $r4;

        return;
    }

    public boolean matches(java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate r1;
        javax.security.auth.x500.X500Principal $r3, $r5;
        org.apache.cxf.transport.https.CertConstraints r0;
        org.apache.cxf.transport.https.CertConstraints$DNConstraints $r2, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.cxf.transport.https.CertConstraints;

        r1 := @parameter0: java.security.cert.X509Certificate;

        $r2 = r0.<org.apache.cxf.transport.https.CertConstraints: org.apache.cxf.transport.https.CertConstraints$DNConstraints subjectDNConstraints>;

        $r3 = virtualinvoke r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        $z0 = virtualinvoke $r2.<org.apache.cxf.transport.https.CertConstraints$DNConstraints: boolean matches(javax.security.auth.x500.X500Principal)>($r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.cxf.transport.https.CertConstraints: org.apache.cxf.transport.https.CertConstraints$DNConstraints issuerDNConstraints>;

        $r5 = virtualinvoke r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $z1 = virtualinvoke $r4.<org.apache.cxf.transport.https.CertConstraints$DNConstraints: boolean matches(javax.security.auth.x500.X500Principal)>($r5);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }
}
