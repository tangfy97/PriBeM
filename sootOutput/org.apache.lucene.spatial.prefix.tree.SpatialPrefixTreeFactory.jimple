public abstract class org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory extends java.lang.Object
{
    private static final double DEFAULT_GEO_MAX_DETAIL_KM;
    public static final java.lang.String PREFIX_TREE;
    public static final java.lang.String MAX_LEVELS;
    public static final java.lang.String MAX_DIST_ERR;
    protected java.util.Map args;
    protected com.spatial4j.core.context.SpatialContext ctx;
    protected java.lang.Integer maxLevels;

    public void <init>()
    {
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory r0;

        r0 := @this: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree makeSPT(java.util.Map, java.lang.ClassLoader, com.spatial4j.core.context.SpatialContext)
    {
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory r14;
        java.util.Map r0;
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree$Factory $r7;
        java.lang.String $r2, r11, $r12, $r13;
        boolean $z0, $z1, $z2;
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree $r15;
        com.spatial4j.core.context.SpatialContext r6;
        java.lang.RuntimeException $r10;
        org.apache.lucene.spatial.prefix.tree.GeohashPrefixTree$Factory $r8;
        java.lang.Exception $r9;
        java.lang.Object $r1, $r5;
        java.lang.Class $r4;
        java.lang.ClassLoader r3;

        r0 := @parameter0: java.util.Map;

        r3 := @parameter1: java.lang.ClassLoader;

        r6 := @parameter2: com.spatial4j.core.context.SpatialContext;

        $r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("prefixTree");

        r11 = (java.lang.String) $r1;

        if r11 != null goto label3;

        $z1 = virtualinvoke r6.<com.spatial4j.core.context.SpatialContext: boolean isGeo()>();

        if $z1 == 0 goto label1;

        $r12 = "geohash";

        goto label2;

     label1:
        $r12 = "quad";

     label2:
        r11 = $r12;

     label3:
        $r13 = "geohash";

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r11);

        if $z2 == 0 goto label4;

        $r8 = new org.apache.lucene.spatial.prefix.tree.GeohashPrefixTree$Factory;

        specialinvoke $r8.<org.apache.lucene.spatial.prefix.tree.GeohashPrefixTree$Factory: void <init>()>();

        r14 = $r8;

        goto label8;

     label4:
        $r2 = "quad";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r11);

        if $z0 == 0 goto label5;

        $r7 = new org.apache.lucene.spatial.prefix.tree.QuadPrefixTree$Factory;

        specialinvoke $r7.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree$Factory: void <init>()>();

        r14 = $r7;

        goto label8;

     label5:
        $r4 = virtualinvoke r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r11);

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Object newInstance()>();

        r14 = (org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory) $r5;

     label6:
        goto label8;

     label7:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label8:
        virtualinvoke r14.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory: void init(java.util.Map,com.spatial4j.core.context.SpatialContext)>(r0, r6);

        $r15 = virtualinvoke r14.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree newSPT()>();

        return $r15;

        catch java.lang.Exception from label5 to label6 with label7;
    }

    protected void init(java.util.Map, com.spatial4j.core.context.SpatialContext)
    {
        com.spatial4j.core.context.SpatialContext r2;
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory r0;
        java.util.Map r1;

        r0 := @this: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: com.spatial4j.core.context.SpatialContext;

        r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory: java.util.Map args> = r1;

        r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory: com.spatial4j.core.context.SpatialContext ctx> = r2;

        virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory: void initMaxLevels()>();

        return;
    }

    protected void initMaxLevels()
    {
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory r0;
        com.spatial4j.core.context.SpatialContext $r8;
        java.lang.Integer $r7, $r9;
        java.util.Map $r1, $r4;
        int $i0;
        java.lang.Object $r2, $r5;
        java.lang.String r3, r6;
        boolean $z0;
        double d0;

        r0 := @this: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory;

        $r1 = r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory: java.util.Map args>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("maxLevels");

        r3 = (java.lang.String) $r2;

        if r3 == null goto label1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r3);

        r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory: java.lang.Integer maxLevels> = $r9;

        return;

     label1:
        $r4 = r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory: java.util.Map args>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("maxDistErr");

        r6 = (java.lang.String) $r5;

        if r6 != null goto label3;

        $r8 = r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory: com.spatial4j.core.context.SpatialContext ctx>;

        $z0 = virtualinvoke $r8.<com.spatial4j.core.context.SpatialContext: boolean isGeo()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        d0 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double dist2Degrees(double,double)>(0.001, 6371.0087714);

        goto label4;

     label3:
        d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r6);

     label4:
        $i0 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory: int getLevelForDistance(double)>(d0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory: java.lang.Integer maxLevels> = $r7;

        return;
    }

    protected abstract int getLevelForDistance(double);

    protected abstract org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree newSPT();

    public static void <clinit>()
    {
        <org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory: java.lang.String MAX_DIST_ERR> = "maxDistErr";

        <org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory: java.lang.String MAX_LEVELS> = "maxLevels";

        <org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory: java.lang.String PREFIX_TREE> = "prefixTree";

        <org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory: double DEFAULT_GEO_MAX_DETAIL_KM> = 0.001;

        return;
    }
}
