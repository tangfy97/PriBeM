final class com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy extends com.mycila.inject.internal.guava.cache.ForwardingCache implements java.io.Serializable
{
    private static final long serialVersionUID;
    final com.mycila.inject.internal.guava.cache.CacheLoader loader;
    final com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength keyStrength;
    final com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength valueStrength;
    final com.mycila.inject.internal.guava.base.Equivalence keyEquivalence;
    final com.mycila.inject.internal.guava.base.Equivalence valueEquivalence;
    final long expireAfterWriteNanos;
    final long expireAfterAccessNanos;
    final int maximumSize;
    final int concurrencyLevel;
    final com.mycila.inject.internal.guava.cache.RemovalListener removalListener;
    final com.mycila.inject.internal.guava.base.Ticker ticker;
    transient com.mycila.inject.internal.guava.cache.Cache delegate;

    void <init>(com.mycila.inject.internal.guava.cache.CacheLoader, com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength, com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength, com.mycila.inject.internal.guava.base.Equivalence, com.mycila.inject.internal.guava.base.Equivalence, long, long, int, int, com.mycila.inject.internal.guava.cache.RemovalListener, com.mycila.inject.internal.guava.base.Ticker)
    {
        com.mycila.inject.internal.guava.base.Equivalence r4, r5;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength r2, r3;
        long l0, l1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy r0;
        com.mycila.inject.internal.guava.cache.RemovalListener r6;
        com.mycila.inject.internal.guava.base.Ticker r7;
        int i2, i3;
        com.mycila.inject.internal.guava.cache.CacheLoader r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy;

        r1 := @parameter0: com.mycila.inject.internal.guava.cache.CacheLoader;

        r2 := @parameter1: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength;

        r3 := @parameter2: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength;

        r4 := @parameter3: com.mycila.inject.internal.guava.base.Equivalence;

        r5 := @parameter4: com.mycila.inject.internal.guava.base.Equivalence;

        l0 := @parameter5: long;

        l1 := @parameter6: long;

        i2 := @parameter7: int;

        i3 := @parameter8: int;

        r6 := @parameter9: com.mycila.inject.internal.guava.cache.RemovalListener;

        r7 := @parameter10: com.mycila.inject.internal.guava.base.Ticker;

        specialinvoke r0.<com.mycila.inject.internal.guava.cache.ForwardingCache: void <init>()>();

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.cache.CacheLoader loader> = r1;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength keyStrength> = r2;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength valueStrength> = r3;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence> = r4;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.base.Equivalence valueEquivalence> = r5;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: long expireAfterWriteNanos> = l0;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: long expireAfterAccessNanos> = l1;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: int maximumSize> = i2;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: int concurrencyLevel> = i3;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.cache.RemovalListener removalListener> = r6;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.base.Ticker ticker> = r7;

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.mycila.inject.internal.guava.base.Equivalence $r7, $r9;
        java.io.ObjectInputStream r0;
        byte $b2, $b4;
        com.mycila.inject.internal.guava.cache.RemovalListener $r12;
        com.mycila.inject.internal.guava.cache.CacheLoader $r15;
        com.mycila.inject.internal.guava.cache.Cache $r16;
        com.mycila.inject.internal.guava.base.Ticker $r13, $r14, $r17;
        long $l1, $l3, $l7, $l8;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy r2;
        int $i0, $i5, $i6, $i9, $i10, $i12;
        com.mycila.inject.internal.guava.cache.CacheBuilder $r1, $r4, $r6, $r8, $r10, $r11;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength $r3, $r5;
        java.util.concurrent.TimeUnit $r18, $r19;

        r2 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r1 = staticinvoke <com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheBuilder newBuilder()>();

        $r3 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength keyStrength>;

        $r4 = virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheBuilder setKeyStrength(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength)>($r3);

        $r5 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength valueStrength>;

        $r6 = virtualinvoke $r4.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheBuilder setValueStrength(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength)>($r5);

        $r7 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence>;

        $r8 = virtualinvoke $r6.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheBuilder keyEquivalence(com.mycila.inject.internal.guava.base.Equivalence)>($r7);

        $r9 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.base.Equivalence valueEquivalence>;

        $r10 = virtualinvoke $r8.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheBuilder valueEquivalence(com.mycila.inject.internal.guava.base.Equivalence)>($r9);

        $i0 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: int concurrencyLevel>;

        $r11 = virtualinvoke $r10.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheBuilder concurrencyLevel(int)>($i0);

        $r12 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.cache.RemovalListener removalListener>;

        virtualinvoke $r11.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheBuilder removalListener(com.mycila.inject.internal.guava.cache.RemovalListener)>($r12);

        $l1 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: long expireAfterWriteNanos>;

        $b2 = $l1 cmp 0L;

        $i9 = (int) $b2;

        if $i9 <= 0 goto label1;

        $l8 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: long expireAfterWriteNanos>;

        $r19 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        virtualinvoke $r11.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>($l8, $r19);

     label1:
        $l3 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: long expireAfterAccessNanos>;

        $b4 = $l3 cmp 0L;

        $i10 = (int) $b4;

        if $i10 <= 0 goto label2;

        $l7 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: long expireAfterAccessNanos>;

        $r18 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        virtualinvoke $r11.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheBuilder expireAfterAccess(long,java.util.concurrent.TimeUnit)>($l7, $r18);

     label2:
        $i5 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: int maximumSize>;

        $i12 = (int) -1;

        if $i5 == $i12 goto label3;

        $i6 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: int maximumSize>;

        virtualinvoke $r11.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheBuilder maximumSize(int)>($i6);

     label3:
        $r13 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.base.Ticker ticker>;

        $r14 = staticinvoke <com.mycila.inject.internal.guava.base.Ticker: com.mycila.inject.internal.guava.base.Ticker systemTicker()>();

        if $r13 == $r14 goto label4;

        $r17 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.base.Ticker ticker>;

        virtualinvoke $r11.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.CacheBuilder ticker(com.mycila.inject.internal.guava.base.Ticker)>($r17);

     label4:
        $r15 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.cache.CacheLoader loader>;

        $r16 = virtualinvoke $r11.<com.mycila.inject.internal.guava.cache.CacheBuilder: com.mycila.inject.internal.guava.cache.Cache build(com.mycila.inject.internal.guava.cache.CacheLoader)>($r15);

        r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.cache.Cache delegate> = $r16;

        return;
    }

    private java.lang.Object readResolve()
    {
        com.mycila.inject.internal.guava.cache.Cache $r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.cache.Cache delegate>;

        return $r1;
    }

    protected com.mycila.inject.internal.guava.cache.Cache delegate()
    {
        com.mycila.inject.internal.guava.cache.Cache $r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.cache.Cache delegate>;

        return $r1;
    }

    protected volatile java.lang.Object delegate()
    {
        com.mycila.inject.internal.guava.cache.Cache $r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: com.mycila.inject.internal.guava.cache.Cache delegate()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$SerializationProxy: long serialVersionUID> = 1L;

        return;
    }
}
