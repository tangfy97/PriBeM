public final class org.apache.lucene.index.TermContext extends java.lang.Object
{
    public final org.apache.lucene.index.IndexReaderContext topReaderContext;
    private final org.apache.lucene.index.TermState[] states;
    private int docFreq;
    private long totalTermFreq;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.index.IndexReaderContext)
    {
        java.lang.AssertionError $r5;
        org.apache.lucene.index.TermContext r0;
        java.util.List $r2, $r3;
        org.apache.lucene.index.TermState[] $r4;
        int i0;
        boolean $z0, $z1;
        org.apache.lucene.index.IndexReaderContext r1;

        r0 := @this: org.apache.lucene.index.TermContext;

        r1 := @parameter0: org.apache.lucene.index.IndexReaderContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.apache.lucene.index.TermContext: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if r1 == null goto label1;

        $z1 = r1.<org.apache.lucene.index.IndexReaderContext: boolean isTopLevel>;

        if $z1 != 0 goto label2;

     label1:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        r0.<org.apache.lucene.index.TermContext: org.apache.lucene.index.IndexReaderContext topReaderContext> = r1;

        r0.<org.apache.lucene.index.TermContext: int docFreq> = 0;

        $r2 = virtualinvoke r1.<org.apache.lucene.index.IndexReaderContext: java.util.List leaves()>();

        if $r2 != null goto label3;

        i0 = 1;

        goto label4;

     label3:
        $r3 = virtualinvoke r1.<org.apache.lucene.index.IndexReaderContext: java.util.List leaves()>();

        i0 = interfaceinvoke $r3.<java.util.List: int size()>();

     label4:
        $r4 = newarray (org.apache.lucene.index.TermState)[i0];

        r0.<org.apache.lucene.index.TermContext: org.apache.lucene.index.TermState[] states> = $r4;

        return;
    }

    public void <init>(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.TermState, int, int, long)
    {
        org.apache.lucene.index.TermState r2;
        int i0, i1;
        long l2;
        org.apache.lucene.index.TermContext r0;
        org.apache.lucene.index.IndexReaderContext r1;

        r0 := @this: org.apache.lucene.index.TermContext;

        r1 := @parameter0: org.apache.lucene.index.IndexReaderContext;

        r2 := @parameter1: org.apache.lucene.index.TermState;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        l2 := @parameter4: long;

        specialinvoke r0.<org.apache.lucene.index.TermContext: void <init>(org.apache.lucene.index.IndexReaderContext)>(r1);

        virtualinvoke r0.<org.apache.lucene.index.TermContext: void register(org.apache.lucene.index.TermState,int,int,long)>(r2, i0, i1, l2);

        return;
    }

    public static org.apache.lucene.index.TermContext build(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.Term, boolean) throws java.io.IOException
    {
        org.apache.lucene.index.Term r0;
        org.apache.lucene.index.Fields $r10;
        long $l2;
        java.lang.AssertionError $r14;
        org.apache.lucene.index.TermsEnum $r12;
        int $i0, $i1;
        java.lang.String $r1;
        boolean $z0, z1, $z2, $z3, $z4;
        org.apache.lucene.index.TermState $r13;
        org.apache.lucene.index.Terms $r11;
        java.util.Iterator $r6;
        org.apache.lucene.util.BytesRef $r2;
        org.apache.lucene.index.TermContext $r3;
        java.util.List $r5;
        java.lang.Object $r7;
        org.apache.lucene.index.AtomicReaderContext r8;
        org.apache.lucene.index.AtomicReader $r9;
        org.apache.lucene.index.IndexReaderContext r4;

        r4 := @parameter0: org.apache.lucene.index.IndexReaderContext;

        r0 := @parameter1: org.apache.lucene.index.Term;

        z1 := @parameter2: boolean;

        $z0 = <org.apache.lucene.index.TermContext: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if r4 == null goto label1;

        $z3 = r4.<org.apache.lucene.index.IndexReaderContext: boolean isTopLevel>;

        if $z3 != 0 goto label2;

     label1:
        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label2:
        $r1 = virtualinvoke r0.<org.apache.lucene.index.Term: java.lang.String field()>();

        $r2 = virtualinvoke r0.<org.apache.lucene.index.Term: org.apache.lucene.util.BytesRef bytes()>();

        $r3 = new org.apache.lucene.index.TermContext;

        specialinvoke $r3.<org.apache.lucene.index.TermContext: void <init>(org.apache.lucene.index.IndexReaderContext)>(r4);

        $r5 = virtualinvoke r4.<org.apache.lucene.index.IndexReaderContext: java.util.List leaves()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z4 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label5;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.lucene.index.AtomicReaderContext) $r7;

        $r9 = virtualinvoke r8.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r10 = virtualinvoke $r9.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Fields fields()>();

        if $r10 == null goto label4;

        $r11 = virtualinvoke $r10.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>($r1);

        if $r11 == null goto label4;

        $r12 = virtualinvoke $r11.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null);

        $z2 = virtualinvoke $r12.<org.apache.lucene.index.TermsEnum: boolean seekExact(org.apache.lucene.util.BytesRef,boolean)>($r2, z1);

        if $z2 == 0 goto label4;

        $r13 = virtualinvoke $r12.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.TermState termState()>();

        $i0 = r8.<org.apache.lucene.index.AtomicReaderContext: int ord>;

        $i1 = virtualinvoke $r12.<org.apache.lucene.index.TermsEnum: int docFreq()>();

        $l2 = virtualinvoke $r12.<org.apache.lucene.index.TermsEnum: long totalTermFreq()>();

        virtualinvoke $r3.<org.apache.lucene.index.TermContext: void register(org.apache.lucene.index.TermState,int,int,long)>($r13, $i0, $i1, $l2);

     label4:
        goto label3;

     label5:
        return $r3;
    }

    public void clear()
    {
        org.apache.lucene.index.TermContext r0;
        org.apache.lucene.index.TermState[] $r1;

        r0 := @this: org.apache.lucene.index.TermContext;

        r0.<org.apache.lucene.index.TermContext: int docFreq> = 0;

        $r1 = r0.<org.apache.lucene.index.TermContext: org.apache.lucene.index.TermState[] states>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r1, null);

        return;
    }

    public void register(org.apache.lucene.index.TermState, int, int, long)
    {
        long $l3, l6, $l8, $l9;
        java.lang.AssertionError $r14, $r15, $r17;
        byte $b4, $b7;
        int i0, $i1, $i2, i5, $i10, $i11, $i12;
        java.lang.String $r9;
        boolean $z0, $z1, $z2;
        org.apache.lucene.index.TermState r1, $r3;
        org.apache.lucene.index.TermContext r0;
        org.apache.lucene.index.TermState[] $r2, $r11, $r13;
        java.lang.StringBuilder $r6, $r7, $r8, $r16;

        r0 := @this: org.apache.lucene.index.TermContext;

        r1 := @parameter0: org.apache.lucene.index.TermState;

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        l6 := @parameter3: long;

        $z0 = <org.apache.lucene.index.TermContext: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>("state must not be null");

        throw $r14;

     label1:
        $z1 = <org.apache.lucene.index.TermContext: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if i5 < 0 goto label2;

        $r11 = r0.<org.apache.lucene.index.TermContext: org.apache.lucene.index.TermState[] states>;

        $i10 = lengthof $r11;

        if i5 < $i10 goto label3;

     label2:
        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label3:
        $z2 = <org.apache.lucene.index.TermContext: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $r2 = r0.<org.apache.lucene.index.TermContext: org.apache.lucene.index.TermState[] states>;

        $r3 = $r2[i5];

        if $r3 == null goto label4;

        $r17 = new java.lang.AssertionError;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("state for ord: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already registered");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r17;

     label4:
        $i1 = r0.<org.apache.lucene.index.TermContext: int docFreq>;

        $i2 = $i1 + i0;

        r0.<org.apache.lucene.index.TermContext: int docFreq> = $i2;

        $l3 = r0.<org.apache.lucene.index.TermContext: long totalTermFreq>;

        $b4 = $l3 cmp 0L;

        $i11 = (int) $b4;

        if $i11 < 0 goto label5;

        $b7 = l6 cmp 0L;

        $i12 = (int) $b7;

        if $i12 < 0 goto label5;

        $l8 = r0.<org.apache.lucene.index.TermContext: long totalTermFreq>;

        $l9 = $l8 + l6;

        r0.<org.apache.lucene.index.TermContext: long totalTermFreq> = $l9;

        goto label6;

     label5:
        r0.<org.apache.lucene.index.TermContext: long totalTermFreq> = -1L;

     label6:
        $r13 = r0.<org.apache.lucene.index.TermContext: org.apache.lucene.index.TermState[] states>;

        $r13[i5] = r1;

        return;
    }

    public org.apache.lucene.index.TermState get(int)
    {
        org.apache.lucene.index.TermState $r2;
        java.lang.AssertionError $r3;
        org.apache.lucene.index.TermContext r0;
        org.apache.lucene.index.TermState[] $r1, $r4;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.TermContext;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.index.TermContext: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        $r4 = r0.<org.apache.lucene.index.TermContext: org.apache.lucene.index.TermState[] states>;

        $i1 = lengthof $r4;

        if i0 < $i1 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $r1 = r0.<org.apache.lucene.index.TermContext: org.apache.lucene.index.TermState[] states>;

        $r2 = $r1[i0];

        return $r2;
    }

    public int docFreq()
    {
        int $i0;
        org.apache.lucene.index.TermContext r0;

        r0 := @this: org.apache.lucene.index.TermContext;

        $i0 = r0.<org.apache.lucene.index.TermContext: int docFreq>;

        return $i0;
    }

    public long totalTermFreq()
    {
        long $l0;
        org.apache.lucene.index.TermContext r0;

        r0 := @this: org.apache.lucene.index.TermContext;

        $l0 = r0.<org.apache.lucene.index.TermContext: long totalTermFreq>;

        return $l0;
    }

    public void setDocFreq(int)
    {
        int i0;
        org.apache.lucene.index.TermContext r0;

        r0 := @this: org.apache.lucene.index.TermContext;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.index.TermContext: int docFreq> = i0;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/TermContext;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.TermContext: boolean $assertionsDisabled> = $z1;

        return;
    }
}
