public class com.jidesoft.hints.ListDataIntelliHints extends com.jidesoft.hints.AbstractListIntelliHints
{
    private boolean _caseSensitive;
    private java.util.List _completionList;

    public void <init>(javax.swing.text.JTextComponent, java.util.List)
    {
        java.util.List r2;
        com.jidesoft.hints.ListDataIntelliHints r0;
        javax.swing.text.JTextComponent r1;

        r0 := @this: com.jidesoft.hints.ListDataIntelliHints;

        r1 := @parameter0: javax.swing.text.JTextComponent;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<com.jidesoft.hints.AbstractListIntelliHints: void <init>(javax.swing.text.JTextComponent)>(r1);

        r0.<com.jidesoft.hints.ListDataIntelliHints: boolean _caseSensitive> = 0;

        virtualinvoke r0.<com.jidesoft.hints.ListDataIntelliHints: void setCompletionList(java.util.List)>(r2);

        return;
    }

    public void <init>(javax.swing.text.JTextComponent, java.lang.Object[])
    {
        com.jidesoft.hints.ListDataIntelliHints r0;
        java.lang.Object[] r2;
        javax.swing.text.JTextComponent r1;

        r0 := @this: com.jidesoft.hints.ListDataIntelliHints;

        r1 := @parameter0: javax.swing.text.JTextComponent;

        r2 := @parameter1: java.lang.Object[];

        specialinvoke r0.<com.jidesoft.hints.AbstractListIntelliHints: void <init>(javax.swing.text.JTextComponent)>(r1);

        r0.<com.jidesoft.hints.ListDataIntelliHints: boolean _caseSensitive> = 0;

        virtualinvoke r0.<com.jidesoft.hints.ListDataIntelliHints: void setCompletionList(java.lang.Object[])>(r2);

        return;
    }

    public java.util.List getCompletionList()
    {
        java.util.List $r1;
        com.jidesoft.hints.ListDataIntelliHints r0;

        r0 := @this: com.jidesoft.hints.ListDataIntelliHints;

        $r1 = r0.<com.jidesoft.hints.ListDataIntelliHints: java.util.List _completionList>;

        return $r1;
    }

    public void setCompletionList(java.util.List)
    {
        java.util.List r1;
        com.jidesoft.hints.ListDataIntelliHints r0;

        r0 := @this: com.jidesoft.hints.ListDataIntelliHints;

        r1 := @parameter0: java.util.List;

        r0.<com.jidesoft.hints.ListDataIntelliHints: java.util.List _completionList> = r1;

        return;
    }

    public void setCompletionList(java.lang.Object[])
    {
        java.lang.Object[] r0;
        com.jidesoft.hints.ListDataIntelliHints r1;
        com.jidesoft.hints.ListDataIntelliHints$1 $r2;

        r1 := @this: com.jidesoft.hints.ListDataIntelliHints;

        r0 := @parameter0: java.lang.Object[];

        $r2 = new com.jidesoft.hints.ListDataIntelliHints$1;

        specialinvoke $r2.<com.jidesoft.hints.ListDataIntelliHints$1: void <init>(com.jidesoft.hints.ListDataIntelliHints,java.lang.Object[])>(r1, r0);

        r1.<com.jidesoft.hints.ListDataIntelliHints: java.util.List _completionList> = $r2;

        return;
    }

    public boolean updateHints(java.lang.Object)
    {
        java.lang.Object[] $r5;
        java.util.Iterator $r4;
        com.jidesoft.hints.ListDataIntelliHints r2;
        java.util.ArrayList $r1;
        java.util.List $r3;
        int $i0;
        java.lang.Object r0, $r6;
        boolean $z0, $z1, $z2;

        r2 := @this: com.jidesoft.hints.ListDataIntelliHints;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r2.<com.jidesoft.hints.ListDataIntelliHints: java.util.List getCompletionList()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r2.<com.jidesoft.hints.ListDataIntelliHints: boolean compare(java.lang.Object,java.lang.Object)>(r0, $r6);

        if $z1 == 0 goto label3;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        goto label2;

     label4:
        $r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray()>();

        virtualinvoke r2.<com.jidesoft.hints.ListDataIntelliHints: void setListData(java.lang.Object[])>($r5);

        $i0 = lengthof $r5;

        if $i0 <= 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    protected boolean compare(java.lang.Object, java.lang.Object)
    {
        com.jidesoft.hints.ListDataIntelliHints r3;
        int $i0, $i1;
        java.lang.Object r0, r1;
        java.lang.String $r2, $r4, $r5;
        boolean $z0, $z1, $z2, z3;

        r3 := @this: com.jidesoft.hints.ListDataIntelliHints;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object;

        z3 = 0;

        if r0 != null goto label1;

        $r5 = "";

        goto label2;

     label1:
        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label2:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 > $i1 goto label4;

        $z0 = virtualinvoke r3.<com.jidesoft.hints.ListDataIntelliHints: boolean isCaseSensitive()>();

        if $z0 != 0 goto label3;

        $r4 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z2 == 0 goto label4;

        z3 = 1;

        goto label4;

     label3:
        $z1 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>($r2);

        if $z1 == 0 goto label4;

        z3 = 1;

     label4:
        return z3;
    }

    public boolean isCaseSensitive()
    {
        com.jidesoft.hints.ListDataIntelliHints r0;
        boolean $z0;

        r0 := @this: com.jidesoft.hints.ListDataIntelliHints;

        $z0 = r0.<com.jidesoft.hints.ListDataIntelliHints: boolean _caseSensitive>;

        return $z0;
    }

    public void setCaseSensitive(boolean)
    {
        com.jidesoft.hints.ListDataIntelliHints r0;
        boolean z0;

        r0 := @this: com.jidesoft.hints.ListDataIntelliHints;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.hints.ListDataIntelliHints: boolean _caseSensitive> = z0;

        return;
    }
}
