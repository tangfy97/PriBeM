class org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener
{
    private final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory waveletFactory;
    private final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler disconnectedHandler;
    private final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener listener;
    private final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView$OpenListener openListener;
    private final java.util.Map wavelets;
    private final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets terminalWavelets;

    void <init>(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory, org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler, org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener, org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView$OpenListener, org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener r4;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets r6;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler r3;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView$OpenListener r5;
        java.util.HashMap $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory;

        r3 := @parameter1: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler;

        r4 := @parameter2: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener;

        r5 := @parameter3: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView$OpenListener;

        r6 := @parameter4: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: java.util.Map wavelets> = $r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory waveletFactory> = r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler disconnectedHandler> = r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener listener> = r4;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView$OpenListener openListener> = r5;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets terminalWavelets> = r6;

        return;
    }

    public void onOperationChannelCreated(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel, org.waveprotocol.wave.model.wave.data.ObservableWaveletData, org.waveprotocol.wave.concurrencycontrol.channel.Accessibility)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility r7, $r8;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener $r9;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener r0;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r2;
        org.waveprotocol.wave.model.id.WaveletId $r6;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets $r10;
        java.util.Map $r5;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory $r3;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        r7 := @parameter2: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory waveletFactory>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet create(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel,org.waveprotocol.wave.model.wave.data.ObservableWaveletData)>(r1, r2);

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: java.util.Map wavelets>;

        $r6 = virtualinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r4);

        $r8 = <org.waveprotocol.wave.concurrencycontrol.channel.Accessibility: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility INACCESSIBLE>;

        if r7 != $r8 goto label1;

        $r10 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets terminalWavelets>;

        virtualinvoke $r10.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets: void markTerminal(org.waveprotocol.wave.model.wave.Wavelet)>($r4);

     label1:
        $r9 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener listener>;

        interfaceinvoke $r9.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener: void onWaveletAdded(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet)>($r4);

        return;
    }

    public void onOperationChannelRemoved(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel, org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener $r6;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel r7;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets $r5;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener;

        r7 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: java.util.Map wavelets>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet) $r3;

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets terminalWavelets>;

        virtualinvoke $r5.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets: void clearTerminal(org.waveprotocol.wave.model.wave.Wavelet)>(r4);

        $r6 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener listener>;

        interfaceinvoke $r6.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener: void onWaveletRemoved(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet)>(r4);

        return;
    }

    public void onFailed(org.waveprotocol.wave.concurrencycontrol.common.CorruptionDetail)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler $r1, $r3;
        org.waveprotocol.wave.concurrencycontrol.common.CorruptionDetail r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.common.CorruptionDetail;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler disconnectedHandler>;

        if $r1 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler disconnectedHandler>;

        interfaceinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler: void onWaveDisconnected(org.waveprotocol.wave.concurrencycontrol.common.CorruptionDetail)>(r2);

     label1:
        return;
    }

    public void onOpenFinished()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView$OpenListener $r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView$OpenListener openListener>;

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView$OpenListener: void onOpenFinished()>();

        return;
    }
}
