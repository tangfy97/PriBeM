public class com.hp.hpl.jena.sparql.graph.GraphWrapper extends java.lang.Object implements com.hp.hpl.jena.graph.Graph
{
    private final com.hp.hpl.jena.graph.Graph graph;

    public void <init>(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph> = r1;

        return;
    }

    public com.hp.hpl.jena.graph.Graph get()
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        $r1 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        return $r1;
    }

    public void add(com.hp.hpl.jena.graph.Triple) throws com.hp.hpl.jena.shared.AddDeniedException
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r1);

        return;
    }

    public boolean dependsOn(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Graph r1, $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r2 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: boolean dependsOn(com.hp.hpl.jena.graph.Graph)>(r1);

        return $z0;
    }

    public com.hp.hpl.jena.graph.TransactionHandler getTransactionHandler()
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.TransactionHandler $r2;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        $r1 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.TransactionHandler getTransactionHandler()>();

        return $r2;
    }

    public com.hp.hpl.jena.graph.BulkUpdateHandler getBulkUpdateHandler()
    {
        com.hp.hpl.jena.graph.BulkUpdateHandler $r2;
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        $r1 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.BulkUpdateHandler getBulkUpdateHandler()>();

        return $r2;
    }

    public com.hp.hpl.jena.graph.Capabilities getCapabilities()
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Graph $r1;
        com.hp.hpl.jena.graph.Capabilities $r2;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        $r1 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.Capabilities getCapabilities()>();

        return $r2;
    }

    public com.hp.hpl.jena.graph.GraphEventManager getEventManager()
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.GraphEventManager $r2;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        $r1 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        return $r2;
    }

    public com.hp.hpl.jena.graph.GraphStatisticsHandler getStatisticsHandler()
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.GraphStatisticsHandler $r2;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        $r1 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.GraphStatisticsHandler getStatisticsHandler()>();

        return $r2;
    }

    public com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Graph $r1;
        com.hp.hpl.jena.shared.PrefixMapping $r2;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        $r1 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        return $r2;
    }

    public void delete(com.hp.hpl.jena.graph.Triple) throws com.hp.hpl.jena.shared.DeleteDeniedException
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r1);

        return;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.TripleMatch r1;
        com.hp.hpl.jena.graph.Graph $r2;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        r1 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        $r2 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>(r1);

        return $r3;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.Graph $r4;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r4 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        return $r5;
    }

    public boolean isIsomorphicWith(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Graph r1, $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r2 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: boolean isIsomorphicWith(com.hp.hpl.jena.graph.Graph)>(r1);

        return $z0;
    }

    public boolean contains(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.Graph $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r4 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        return $z0;
    }

    public boolean contains(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Triple)>(r1);

        return $z0;
    }

    public void close()
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        $r1 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: void close()>();

        return;
    }

    public boolean isEmpty()
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Graph $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        $r1 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: boolean isEmpty()>();

        return $z0;
    }

    public int size()
    {
        int $i0;
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        $r1 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        $i0 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: int size()>();

        return $i0;
    }

    public boolean isClosed()
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Graph $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        $r1 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: boolean isClosed()>();

        return $z0;
    }

    public void clear()
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        $r1 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: void clear()>();

        return;
    }

    public void remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.graph.GraphWrapper r0;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.Graph $r4;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphWrapper;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r4 = r0.<com.hp.hpl.jena.sparql.graph.GraphWrapper: com.hp.hpl.jena.graph.Graph graph>;

        interfaceinvoke $r4.<com.hp.hpl.jena.graph.Graph: void remove(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        return;
    }
}
