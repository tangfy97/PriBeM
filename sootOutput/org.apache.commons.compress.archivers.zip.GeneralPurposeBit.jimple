public final class org.apache.commons.compress.archivers.zip.GeneralPurposeBit extends java.lang.Object
{
    private static final int ENCRYPTION_FLAG;
    private static final int SLIDING_DICTIONARY_SIZE_FLAG;
    private static final int NUMBER_OF_SHANNON_FANO_TREES_FLAG;
    private static final int DATA_DESCRIPTOR_FLAG;
    private static final int STRONG_ENCRYPTION_FLAG;
    public static final int UFT8_NAMES_FLAG;
    private boolean languageEncodingFlag;
    private boolean dataDescriptorFlag;
    private boolean encryptionFlag;
    private boolean strongEncryptionFlag;
    private int slidingDictionarySize;
    private int numberOfShannonFanoTrees;

    public void <init>()
    {
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean languageEncodingFlag> = 0;

        r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean dataDescriptorFlag> = 0;

        r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean encryptionFlag> = 0;

        r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean strongEncryptionFlag> = 0;

        return;
    }

    public boolean usesUTF8ForNames()
    {
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean languageEncodingFlag>;

        return $z0;
    }

    public void useUTF8ForNames(boolean)
    {
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean languageEncodingFlag> = z0;

        return;
    }

    public boolean usesDataDescriptor()
    {
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean dataDescriptorFlag>;

        return $z0;
    }

    public void useDataDescriptor(boolean)
    {
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean dataDescriptorFlag> = z0;

        return;
    }

    public boolean usesEncryption()
    {
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean encryptionFlag>;

        return $z0;
    }

    public void useEncryption(boolean)
    {
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean encryptionFlag> = z0;

        return;
    }

    public boolean usesStrongEncryption()
    {
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean encryptionFlag>;

        if $z0 == 0 goto label1;

        $z1 = r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean strongEncryptionFlag>;

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void useStrongEncryption(boolean)
    {
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean strongEncryptionFlag> = z0;

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: void useEncryption(boolean)>(1);

     label1:
        return;
    }

    int getSlidingDictionarySize()
    {
        int $i0;
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        $i0 = r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: int slidingDictionarySize>;

        return $i0;
    }

    int getNumberOfShannonFanoTrees()
    {
        int $i0;
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        $i0 = r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: int numberOfShannonFanoTrees>;

        return $i0;
    }

    public byte[] encode()
    {
        byte[] $r1;
        short $s0, $s1, $s2, $s4;
        byte $b3, $b5;
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean dataDescriptorFlag>;

        if $z0 == 0 goto label1;

        $b3 = 8;

        goto label2;

     label1:
        $b3 = 0;

     label2:
        $z1 = r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean languageEncodingFlag>;

        if $z1 == 0 goto label3;

        $s4 = 2048;

        goto label4;

     label3:
        $s4 = 0;

     label4:
        $s0 = $b3 | $s4;

        $z3 = r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean encryptionFlag>;

        if $z3 == 0 goto label5;

        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        $s1 = $s0 | $z4;

        $z2 = r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean strongEncryptionFlag>;

        if $z2 == 0 goto label7;

        $b5 = 64;

        goto label8;

     label7:
        $b5 = 0;

     label8:
        $s2 = $s1 | $b5;

        $r1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>($s2);

        return $r1;
    }

    public static org.apache.commons.compress.archivers.zip.GeneralPurposeBit parse(byte[], int)
    {
        byte[] r0;
        short $s8;
        byte $b9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[],int)>(r0, i0);

        $r1 = new org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        specialinvoke $r1.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: void <init>()>();

        $i2 = $i1 & 8;

        if $i2 == 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        virtualinvoke $r1.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: void useDataDescriptor(boolean)>($z0);

        $i3 = $i1 & 2048;

        if $i3 == 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        virtualinvoke $r1.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: void useUTF8ForNames(boolean)>($z1);

        $i4 = $i1 & 64;

        if $i4 == 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        virtualinvoke $r1.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: void useStrongEncryption(boolean)>($z2);

        $i5 = $i1 & 1;

        if $i5 == 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        virtualinvoke $r1.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: void useEncryption(boolean)>($z3);

        $i6 = $i1 & 2;

        if $i6 == 0 goto label09;

        $s8 = 8192;

        goto label10;

     label09:
        $s8 = 4096;

     label10:
        $r1.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: int slidingDictionarySize> = $s8;

        $i7 = $i1 & 4;

        if $i7 == 0 goto label11;

        $b9 = 3;

        goto label12;

     label11:
        $b9 = 2;

     label12:
        $r1.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: int numberOfShannonFanoTrees> = $b9;

        return $r1;
    }

    public int hashCode()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean encryptionFlag>;

        if $z0 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        $i0 = 17 * $z4;

        $z1 = r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean strongEncryptionFlag>;

        if $z1 == 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        $i1 = $i0 + $z5;

        $i2 = 13 * $i1;

        $z2 = r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean languageEncodingFlag>;

        if $z2 == 0 goto label5;

        $z6 = 1;

        goto label6;

     label5:
        $z6 = 0;

     label6:
        $i3 = $i2 + $z6;

        $i4 = 7 * $i3;

        $z3 = r0.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean dataDescriptorFlag>;

        if $z3 == 0 goto label7;

        $z7 = 1;

        goto label8;

     label7:
        $z7 = 0;

     label8:
        $i5 = $i4 + $z7;

        $i6 = 3 * $i5;

        return $i6;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit r1, r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;

        r2 := @this: org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.commons.compress.archivers.zip.GeneralPurposeBit;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.apache.commons.compress.archivers.zip.GeneralPurposeBit) r0;

        $z2 = r1.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean encryptionFlag>;

        $z1 = r2.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean encryptionFlag>;

        if $z2 != $z1 goto label2;

        $z4 = r1.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean strongEncryptionFlag>;

        $z3 = r2.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean strongEncryptionFlag>;

        if $z4 != $z3 goto label2;

        $z6 = r1.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean languageEncodingFlag>;

        $z5 = r2.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean languageEncodingFlag>;

        if $z6 != $z5 goto label2;

        $z8 = r1.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean dataDescriptorFlag>;

        $z7 = r2.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: boolean dataDescriptorFlag>;

        if $z8 != $z7 goto label2;

        $z9 = 1;

        goto label3;

     label2:
        $z9 = 0;

     label3:
        return $z9;
    }

    public static void <clinit>()
    {
        <org.apache.commons.compress.archivers.zip.GeneralPurposeBit: int UFT8_NAMES_FLAG> = 2048;

        <org.apache.commons.compress.archivers.zip.GeneralPurposeBit: int STRONG_ENCRYPTION_FLAG> = 64;

        <org.apache.commons.compress.archivers.zip.GeneralPurposeBit: int DATA_DESCRIPTOR_FLAG> = 8;

        <org.apache.commons.compress.archivers.zip.GeneralPurposeBit: int NUMBER_OF_SHANNON_FANO_TREES_FLAG> = 4;

        <org.apache.commons.compress.archivers.zip.GeneralPurposeBit: int SLIDING_DICTIONARY_SIZE_FLAG> = 2;

        <org.apache.commons.compress.archivers.zip.GeneralPurposeBit: int ENCRYPTION_FLAG> = 1;

        return;
    }
}
