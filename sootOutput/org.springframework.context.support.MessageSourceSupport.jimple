public abstract class org.springframework.context.support.MessageSourceSupport extends java.lang.Object
{
    private static final java.text.MessageFormat INVALID_MESSAGE_FORMAT;
    protected final org.apache.commons.logging.Log logger;
    private boolean alwaysUseMessageFormat;
    private final java.util.Map cachedMessageFormats;

    static void <clinit>()
    {
        java.text.MessageFormat $r0;

        $r0 = new java.text.MessageFormat;

        specialinvoke $r0.<java.text.MessageFormat: void <init>(java.lang.String)>("");

        <org.springframework.context.support.MessageSourceSupport: java.text.MessageFormat INVALID_MESSAGE_FORMAT> = $r0;

        return;
    }

    public void <init>()
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.util.HashMap $r3;
        org.springframework.context.support.MessageSourceSupport r0;

        r0 := @this: org.springframework.context.support.MessageSourceSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.context.support.MessageSourceSupport: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.context.support.MessageSourceSupport: boolean alwaysUseMessageFormat> = 0;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.context.support.MessageSourceSupport: java.util.Map cachedMessageFormats> = $r3;

        return;
    }

    public void setAlwaysUseMessageFormat(boolean)
    {
        org.springframework.context.support.MessageSourceSupport r0;
        boolean z0;

        r0 := @this: org.springframework.context.support.MessageSourceSupport;

        z0 := @parameter0: boolean;

        r0.<org.springframework.context.support.MessageSourceSupport: boolean alwaysUseMessageFormat> = z0;

        return;
    }

    protected boolean isAlwaysUseMessageFormat()
    {
        org.springframework.context.support.MessageSourceSupport r0;
        boolean $z0;

        r0 := @this: org.springframework.context.support.MessageSourceSupport;

        $z0 = r0.<org.springframework.context.support.MessageSourceSupport: boolean alwaysUseMessageFormat>;

        return $z0;
    }

    protected java.lang.String renderDefaultMessage(java.lang.String, java.lang.Object[], java.util.Locale)
    {
        java.lang.Object[] r2;
        java.util.Locale r3;
        java.lang.String r1, $r4;
        org.springframework.context.support.MessageSourceSupport r0;

        r0 := @this: org.springframework.context.support.MessageSourceSupport;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: java.util.Locale;

        $r4 = virtualinvoke r0.<org.springframework.context.support.MessageSourceSupport: java.lang.String formatMessage(java.lang.String,java.lang.Object[],java.util.Locale)>(r1, r2, r3);

        return $r4;
    }

    protected java.lang.String formatMessage(java.lang.String, java.lang.Object[], java.util.Locale)
    {
        java.lang.Throwable $r12, $r13;
        java.lang.Object[] r6, $r8;
        java.text.MessageFormat $r5, $r11, r15, r16;
        java.util.Locale r7;
        java.util.Map $r2, $r3, $r10;
        java.lang.String r0, $r9;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r14;
        java.lang.Object $r4;
        org.springframework.context.support.MessageSourceSupport r1;

        r1 := @this: org.springframework.context.support.MessageSourceSupport;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.Object[];

        r7 := @parameter2: java.util.Locale;

        if r0 == null goto label01;

        $z0 = r1.<org.springframework.context.support.MessageSourceSupport: boolean alwaysUseMessageFormat>;

        if $z0 != 0 goto label02;

        $z1 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>(r6);

        if $z1 == 0 goto label02;

     label01:
        return r0;

     label02:
        $r2 = r1.<org.springframework.context.support.MessageSourceSupport: java.util.Map cachedMessageFormats>;

        entermonitor $r2;

     label03:
        $r3 = r1.<org.springframework.context.support.MessageSourceSupport: java.util.Map cachedMessageFormats>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r11 = (java.text.MessageFormat) $r4;

        r15 = $r11;

        if $r11 != null goto label09;

     label04:
        r15 = virtualinvoke r1.<org.springframework.context.support.MessageSourceSupport: java.text.MessageFormat createMessageFormat(java.lang.String,java.util.Locale)>(r0, r7);

     label05:
        goto label08;

     label06:
        $r14 := @caughtexception;

        $z2 = r1.<org.springframework.context.support.MessageSourceSupport: boolean alwaysUseMessageFormat>;

        if $z2 == 0 goto label07;

        throw $r14;

     label07:
        r15 = <org.springframework.context.support.MessageSourceSupport: java.text.MessageFormat INVALID_MESSAGE_FORMAT>;

     label08:
        $r10 = r1.<org.springframework.context.support.MessageSourceSupport: java.util.Map cachedMessageFormats>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r15);

     label09:
        exitmonitor $r2;

     label10:
        goto label13;

     label11:
        $r13 := @caughtexception;

        exitmonitor $r2;

     label12:
        throw $r13;

     label13:
        $r5 = <org.springframework.context.support.MessageSourceSupport: java.text.MessageFormat INVALID_MESSAGE_FORMAT>;

        if r15 != $r5 goto label14;

        return r0;

     label14:
        r16 = r15;

        entermonitor r15;

     label15:
        $r8 = virtualinvoke r1.<org.springframework.context.support.MessageSourceSupport: java.lang.Object[] resolveArguments(java.lang.Object[],java.util.Locale)>(r6, r7);

        $r9 = virtualinvoke r15.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>($r8);

        exitmonitor r15;

     label16:
        return $r9;

     label17:
        $r12 := @caughtexception;

        exitmonitor r16;

     label18:
        throw $r12;

        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.Throwable from label03 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    protected java.text.MessageFormat createMessageFormat(java.lang.String, java.util.Locale)
    {
        java.util.Locale r2;
        java.lang.String r1, $r4;
        org.springframework.context.support.MessageSourceSupport r3;
        java.text.MessageFormat $r0;

        r3 := @this: org.springframework.context.support.MessageSourceSupport;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Locale;

        $r0 = new java.text.MessageFormat;

        if r1 == null goto label1;

        $r4 = r1;

        goto label2;

     label1:
        $r4 = "";

     label2:
        specialinvoke $r0.<java.text.MessageFormat: void <init>(java.lang.String,java.util.Locale)>($r4, r2);

        return $r0;
    }

    protected java.lang.Object[] resolveArguments(java.lang.Object[], java.util.Locale)
    {
        java.lang.Object[] r0;
        org.springframework.context.support.MessageSourceSupport r1;
        java.util.Locale r2;

        r1 := @this: org.springframework.context.support.MessageSourceSupport;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.util.Locale;

        return r0;
    }
}
