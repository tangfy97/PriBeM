public class org.apache.lucene.search.spans.NearSpansOrdered extends org.apache.lucene.search.spans.Spans
{
    private final int allowedSlop;
    private boolean firstTime;
    private boolean more;
    private final org.apache.lucene.search.spans.Spans[] subSpans;
    private boolean inSameDoc;
    private int matchDoc;
    private int matchStart;
    private int matchEnd;
    private java.util.List matchPayload;
    private final org.apache.lucene.search.spans.Spans[] subSpansByDoc;
    private final java.util.Comparator spanDocComparator;
    private org.apache.lucene.search.spans.SpanNearQuery query;
    private boolean collectPayloads;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map) throws java.io.IOException
    {
        org.apache.lucene.search.spans.SpanNearQuery r1;
        java.util.Map r4;
        org.apache.lucene.util.Bits r3;
        org.apache.lucene.index.AtomicReaderContext r2;
        org.apache.lucene.search.spans.NearSpansOrdered r0;

        r0 := @this: org.apache.lucene.search.spans.NearSpansOrdered;

        r1 := @parameter0: org.apache.lucene.search.spans.SpanNearQuery;

        r2 := @parameter1: org.apache.lucene.index.AtomicReaderContext;

        r3 := @parameter2: org.apache.lucene.util.Bits;

        r4 := @parameter3: java.util.Map;

        specialinvoke r0.<org.apache.lucene.search.spans.NearSpansOrdered: void <init>(org.apache.lucene.search.spans.SpanNearQuery,org.apache.lucene.index.AtomicReaderContext,org.apache.lucene.util.Bits,java.util.Map,boolean)>(r1, r2, r3, r4, 1);

        return;
    }

    public void <init>(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map, boolean) throws java.io.IOException
    {
        org.apache.lucene.search.spans.NearSpansOrdered$1 $r22;
        org.apache.lucene.search.spans.Spans[] $r5, $r7, $r12, $r14, $r16;
        org.apache.lucene.search.spans.NearSpansOrdered r0;
        java.util.Map r10;
        boolean z0;
        java.lang.StringBuilder $r19, $r20, $r23;
        org.apache.lucene.search.spans.SpanQuery[] $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7, $i9, $i11;
        java.lang.String $r21;
        org.apache.lucene.search.spans.SpanQuery $r11;
        java.util.LinkedList $r25;
        org.apache.lucene.util.Bits r9;
        org.apache.lucene.search.spans.SpanNearQuery r2;
        java.lang.IllegalArgumentException $r24;
        org.apache.lucene.index.AtomicReaderContext r8;
        org.apache.lucene.search.spans.Spans $r13, $r15;

        r0 := @this: org.apache.lucene.search.spans.NearSpansOrdered;

        r2 := @parameter0: org.apache.lucene.search.spans.SpanNearQuery;

        r8 := @parameter1: org.apache.lucene.index.AtomicReaderContext;

        r9 := @parameter2: org.apache.lucene.util.Bits;

        r10 := @parameter3: java.util.Map;

        z0 := @parameter4: boolean;

        specialinvoke r0.<org.apache.lucene.search.spans.Spans: void <init>()>();

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean firstTime> = 1;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean more> = 0;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean inSameDoc> = 0;

        $i7 = (int) -1;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchDoc> = $i7;

        $i9 = (int) -1;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchStart> = $i9;

        $i11 = (int) -1;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchEnd> = $i11;

        $r22 = new org.apache.lucene.search.spans.NearSpansOrdered$1;

        specialinvoke $r22.<org.apache.lucene.search.spans.NearSpansOrdered$1: void <init>(org.apache.lucene.search.spans.NearSpansOrdered)>(r0);

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: java.util.Comparator spanDocComparator> = $r22;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean collectPayloads> = 1;

        $r3 = virtualinvoke r2.<org.apache.lucene.search.spans.SpanNearQuery: org.apache.lucene.search.spans.SpanQuery[] getClauses()>();

        $i0 = lengthof $r3;

        if $i0 >= 2 goto label1;

        $r24 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Less than 2 clauses: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r24;

     label1:
        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean collectPayloads> = z0;

        $i1 = virtualinvoke r2.<org.apache.lucene.search.spans.SpanNearQuery: int getSlop()>();

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: int allowedSlop> = $i1;

        $r4 = virtualinvoke r2.<org.apache.lucene.search.spans.SpanNearQuery: org.apache.lucene.search.spans.SpanQuery[] getClauses()>();

        $i2 = lengthof $r4;

        $r5 = newarray (org.apache.lucene.search.spans.Spans)[$i2];

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans> = $r5;

        $r25 = new java.util.LinkedList;

        specialinvoke $r25.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: java.util.List matchPayload> = $r25;

        $i3 = lengthof $r4;

        $r7 = newarray (org.apache.lucene.search.spans.Spans)[$i3];

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpansByDoc> = $r7;

        i5 = 0;

     label2:
        $i4 = lengthof $r4;

        if i5 >= $i4 goto label3;

        $r12 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r11 = $r4[i5];

        $r13 = virtualinvoke $r11.<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext,org.apache.lucene.util.Bits,java.util.Map)>(r8, r9, r10);

        $r12[i5] = $r13;

        $r16 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpansByDoc>;

        $r14 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r15 = $r14[i5];

        $r16[i5] = $r15;

        i5 = i5 + 1;

        goto label2;

     label3:
        r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.SpanNearQuery query> = r2;

        return;
    }

    public int doc()
    {
        int $i0;
        org.apache.lucene.search.spans.NearSpansOrdered r0;

        r0 := @this: org.apache.lucene.search.spans.NearSpansOrdered;

        $i0 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchDoc>;

        return $i0;
    }

    public int start()
    {
        int $i0;
        org.apache.lucene.search.spans.NearSpansOrdered r0;

        r0 := @this: org.apache.lucene.search.spans.NearSpansOrdered;

        $i0 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchStart>;

        return $i0;
    }

    public int end()
    {
        int $i0;
        org.apache.lucene.search.spans.NearSpansOrdered r0;

        r0 := @this: org.apache.lucene.search.spans.NearSpansOrdered;

        $i0 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchEnd>;

        return $i0;
    }

    public org.apache.lucene.search.spans.Spans[] getSubSpans()
    {
        org.apache.lucene.search.spans.Spans[] $r1;
        org.apache.lucene.search.spans.NearSpansOrdered r0;

        r0 := @this: org.apache.lucene.search.spans.NearSpansOrdered;

        $r1 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        return $r1;
    }

    public java.util.Collection getPayload() throws java.io.IOException
    {
        java.util.List $r1;
        org.apache.lucene.search.spans.NearSpansOrdered r0;

        r0 := @this: org.apache.lucene.search.spans.NearSpansOrdered;

        $r1 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: java.util.List matchPayload>;

        return $r1;
    }

    public boolean isPayloadAvailable()
    {
        java.util.List $r1;
        org.apache.lucene.search.spans.NearSpansOrdered r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.search.spans.NearSpansOrdered;

        $r1 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: java.util.List matchPayload>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public long cost()
    {
        long $l1, l2;
        org.apache.lucene.search.spans.Spans[] $r1, $r2;
        org.apache.lucene.search.spans.NearSpansOrdered r0;
        int $i0, i3;
        org.apache.lucene.search.spans.Spans $r3;

        r0 := @this: org.apache.lucene.search.spans.NearSpansOrdered;

        l2 = 9223372036854775807L;

        i3 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label2;

        $r2 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r3 = $r2[i3];

        $l1 = virtualinvoke $r3.<org.apache.lucene.search.spans.Spans: long cost()>();

        l2 = staticinvoke <java.lang.Math: long min(long,long)>(l2, $l1);

        i3 = i3 + 1;

        goto label1;

     label2:
        return l2;
    }

    public boolean next() throws java.io.IOException
    {
        org.apache.lucene.search.spans.Spans[] $r2, $r3;
        org.apache.lucene.search.spans.NearSpansOrdered r0;
        java.util.List $r1;
        int $i0, i1;
        org.apache.lucene.search.spans.Spans $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.lucene.search.spans.NearSpansOrdered;

        $z0 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean firstTime>;

        if $z0 == 0 goto label4;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean firstTime> = 0;

        i1 = 0;

     label1:
        $r2 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label3;

        $r3 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r4 = $r3[i1];

        $z3 = virtualinvoke $r4.<org.apache.lucene.search.spans.Spans: boolean next()>();

        if $z3 != 0 goto label2;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean more> = 0;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean more> = 1;

     label4:
        $z1 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean collectPayloads>;

        if $z1 == 0 goto label5;

        $r1 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: java.util.List matchPayload>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

     label5:
        $z2 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean advanceAfterOrdered()>();

        return $z2;
    }

    public boolean skipTo(int) throws java.io.IOException
    {
        org.apache.lucene.search.spans.Spans[] $r2, $r4, $r6, $r7;
        org.apache.lucene.search.spans.NearSpansOrdered r0;
        int $i0, i1, $i2, i3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r1;
        org.apache.lucene.search.spans.Spans $r3, $r5, $r8;

        r0 := @this: org.apache.lucene.search.spans.NearSpansOrdered;

        i1 := @parameter0: int;

        $z0 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean firstTime>;

        if $z0 == 0 goto label4;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean firstTime> = 0;

        i3 = 0;

     label1:
        $r6 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $i2 = lengthof $r6;

        if i3 >= $i2 goto label3;

        $r7 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r8 = $r7[i3];

        $z4 = virtualinvoke $r8.<org.apache.lucene.search.spans.Spans: boolean skipTo(int)>(i1);

        if $z4 != 0 goto label2;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean more> = 0;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean more> = 1;

        goto label6;

     label4:
        $z1 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean more>;

        if $z1 == 0 goto label6;

        $r2 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r3 = $r2[0];

        $i0 = virtualinvoke $r3.<org.apache.lucene.search.spans.Spans: int doc()>();

        if $i0 >= i1 goto label6;

        $r4 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r5 = $r4[0];

        $z3 = virtualinvoke $r5.<org.apache.lucene.search.spans.Spans: boolean skipTo(int)>(i1);

        if $z3 == 0 goto label5;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean inSameDoc> = 0;

        goto label6;

     label5:
        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean more> = 0;

        return 0;

     label6:
        $z5 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean collectPayloads>;

        if $z5 == 0 goto label7;

        $r1 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: java.util.List matchPayload>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

     label7:
        $z2 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean advanceAfterOrdered()>();

        return $z2;
    }

    private boolean advanceAfterOrdered() throws java.io.IOException
    {
        org.apache.lucene.search.spans.NearSpansOrdered r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.lucene.search.spans.NearSpansOrdered;

     label1:
        $z4 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean more>;

        if $z4 == 0 goto label3;

        $z0 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean inSameDoc>;

        if $z0 != 0 goto label2;

        $z3 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean toSameDoc()>();

        if $z3 == 0 goto label3;

     label2:
        $z1 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean stretchToOrder()>();

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean shrinkToAfterShortestMatch()>();

        if $z2 == 0 goto label1;

        return 1;

     label3:
        return 0;
    }

    private boolean toSameDoc() throws java.io.IOException
    {
        org.apache.lucene.search.spans.Spans[] $r2, $r3, $r4, $r6, $r7, $r12, $r16, $r22, $r24, $r26, $r27;
        org.apache.lucene.search.spans.NearSpansOrdered r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r10, $r11, $r14, $r15, $r18, $r19, $r20;
        java.lang.AssertionError $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8, i9;
        java.lang.String $r21;
        java.util.Comparator $r1;
        org.apache.lucene.search.spans.Spans $r5, $r8, $r13, $r17, $r23, $r25, $r28;

        r0 := @this: org.apache.lucene.search.spans.NearSpansOrdered;

        $r2 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpansByDoc>;

        $r1 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: java.util.Comparator spanDocComparator>;

        staticinvoke <org.apache.lucene.util.ArrayUtil: void mergeSort(java.lang.Object[],java.util.Comparator)>($r2, $r1);

        i6 = 0;

        $r4 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpansByDoc>;

        $r3 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpansByDoc>;

        $i0 = lengthof $r3;

        $i1 = $i0 - 1;

        $r5 = $r4[$i1];

        i7 = virtualinvoke $r5.<org.apache.lucene.search.spans.Spans: int doc()>();

     label1:
        $r27 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpansByDoc>;

        $r28 = $r27[i6];

        $i8 = virtualinvoke $r28.<org.apache.lucene.search.spans.Spans: int doc()>();

        if $i8 == i7 goto label3;

        $r22 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpansByDoc>;

        $r23 = $r22[i6];

        $z1 = virtualinvoke $r23.<org.apache.lucene.search.spans.Spans: boolean skipTo(int)>(i7);

        if $z1 != 0 goto label2;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean more> = 0;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean inSameDoc> = 0;

        return 0;

     label2:
        $r24 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpansByDoc>;

        $r25 = $r24[i6];

        i7 = virtualinvoke $r25.<org.apache.lucene.search.spans.Spans: int doc()>();

        i6 = i6 + 1;

        $r26 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpansByDoc>;

        $i5 = lengthof $r26;

        if i6 != $i5 goto label1;

        i6 = 0;

        goto label1;

     label3:
        i9 = 0;

     label4:
        $r6 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpansByDoc>;

        $i2 = lengthof $r6;

        if i9 >= $i2 goto label6;

        $z0 = <org.apache.lucene.search.spans.NearSpansOrdered: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        $r7 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpansByDoc>;

        $r8 = $r7[i9];

        $i3 = virtualinvoke $r8.<org.apache.lucene.search.spans.Spans: int doc()>();

        if $i3 == i7 goto label5;

        $r9 = new java.lang.AssertionError;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" NearSpansOrdered.toSameDoc() spans ");

        $r12 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpansByDoc>;

        $r13 = $r12[0];

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n at doc ");

        $r16 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpansByDoc>;

        $r17 = $r16[i9];

        $i4 = virtualinvoke $r17.<org.apache.lucene.search.spans.Spans: int doc()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but should be at ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r21);

        throw $r9;

     label5:
        i9 = i9 + 1;

        goto label4;

     label6:
        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean inSameDoc> = 1;

        return 1;
    }

    static final boolean docSpansOrdered(org.apache.lucene.search.spans.Spans, org.apache.lucene.search.spans.Spans)
    {
        java.lang.AssertionError $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r8;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        org.apache.lucene.search.spans.Spans r0, r1;

        r0 := @parameter0: org.apache.lucene.search.spans.Spans;

        r1 := @parameter1: org.apache.lucene.search.spans.Spans;

        $z0 = <org.apache.lucene.search.spans.NearSpansOrdered: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i4 = virtualinvoke r0.<org.apache.lucene.search.spans.Spans: int doc()>();

        $i5 = virtualinvoke r1.<org.apache.lucene.search.spans.Spans: int doc()>();

        if $i4 == $i5 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("doc1 ");

        $i6 = virtualinvoke r0.<org.apache.lucene.search.spans.Spans: int doc()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != doc2 ");

        $i7 = virtualinvoke r1.<org.apache.lucene.search.spans.Spans: int doc()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r2;

     label1:
        $i0 = virtualinvoke r0.<org.apache.lucene.search.spans.Spans: int start()>();

        $i1 = virtualinvoke r1.<org.apache.lucene.search.spans.Spans: int start()>();

        if $i0 != $i1 goto label3;

        $i2 = virtualinvoke r0.<org.apache.lucene.search.spans.Spans: int end()>();

        $i3 = virtualinvoke r1.<org.apache.lucene.search.spans.Spans: int end()>();

        if $i2 >= $i3 goto label2;

        $z1 = 1;

        goto label5;

     label2:
        $z1 = 0;

        goto label5;

     label3:
        if $i0 >= $i1 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    private static final boolean docSpansOrdered(int, int, int, int)
    {
        int i0, i1, i2, i3;
        boolean $z0;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        i3 := @parameter3: int;

        if i0 != i1 goto label2;

        if i2 >= i3 goto label1;

        $z0 = 1;

        goto label4;

     label1:
        $z0 = 0;

        goto label4;

     label2:
        if i0 >= i1 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private boolean stretchToOrder() throws java.io.IOException
    {
        org.apache.lucene.search.spans.Spans[] $r1, $r3, $r4, $r5, $r8, $r10;
        org.apache.lucene.search.spans.NearSpansOrdered r0;
        int $i0, $i1, $i2, $i3, $i4, i5;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.search.spans.Spans $r2, $r6, $r7, $r9, $r11;

        r0 := @this: org.apache.lucene.search.spans.NearSpansOrdered;

        $r1 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r2 = $r1[0];

        $i0 = virtualinvoke $r2.<org.apache.lucene.search.spans.Spans: int doc()>();

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchDoc> = $i0;

        i5 = 1;

     label1:
        $z0 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean inSameDoc>;

        if $z0 == 0 goto label5;

        $r3 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $i1 = lengthof $r3;

        if i5 >= $i1 goto label5;

     label2:
        $r4 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $i2 = i5 - 1;

        $r7 = $r4[$i2];

        $r5 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r6 = $r5[i5];

        $z2 = staticinvoke <org.apache.lucene.search.spans.NearSpansOrdered: boolean docSpansOrdered(org.apache.lucene.search.spans.Spans,org.apache.lucene.search.spans.Spans)>($r7, $r6);

        if $z2 != 0 goto label4;

        $r8 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r9 = $r8[i5];

        $z3 = virtualinvoke $r9.<org.apache.lucene.search.spans.Spans: boolean next()>();

        if $z3 != 0 goto label3;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean inSameDoc> = 0;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean more> = 0;

        goto label4;

     label3:
        $i3 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchDoc>;

        $r10 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r11 = $r10[i5];

        $i4 = virtualinvoke $r11.<org.apache.lucene.search.spans.Spans: int doc()>();

        if $i3 == $i4 goto label2;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean inSameDoc> = 0;

        goto label4;

     label4:
        i5 = i5 + 1;

        goto label1;

     label5:
        $z1 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean inSameDoc>;

        return $z1;
    }

    private boolean shrinkToAfterShortestMatch() throws java.io.IOException
    {
        java.lang.AssertionError $r28;
        java.util.ArrayList r24, $r26, $r27;
        org.apache.lucene.search.spans.Spans[] $r1, $r2, $r4, $r5, $r8, $r9, $r11, $r13, $r20, $r21;
        org.apache.lucene.search.spans.NearSpansOrdered r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z11, $z12, $z13;
        java.util.Collection $r15, $r18, $r23;
        java.util.List $r12;
        java.util.HashSet $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25, i26, i27, i28, $i30;
        org.apache.lucene.search.spans.Spans $r3, $r6, $r10, r14, $r22;

        r0 := @this: org.apache.lucene.search.spans.NearSpansOrdered;

        $r2 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r1 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        $r3 = $r2[$i1];

        $i2 = virtualinvoke $r3.<org.apache.lucene.search.spans.Spans: int start()>();

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchStart> = $i2;

        $r5 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r4 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $i3 = lengthof $r4;

        $i4 = $i3 - 1;

        $r6 = $r5[$i4];

        $i5 = virtualinvoke $r6.<org.apache.lucene.search.spans.Spans: int end()>();

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchEnd> = $i5;

        $r25 = new java.util.HashSet;

        specialinvoke $r25.<java.util.HashSet: void <init>()>();

        $r9 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r8 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $i6 = lengthof $r8;

        $i7 = $i6 - 1;

        $r10 = $r9[$i7];

        $z0 = virtualinvoke $r10.<org.apache.lucene.search.spans.Spans: boolean isPayloadAvailable()>();

        if $z0 == 0 goto label01;

        $r21 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r20 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $i21 = lengthof $r20;

        $i22 = $i21 - 1;

        $r22 = $r21[$i22];

        $r23 = virtualinvoke $r22.<org.apache.lucene.search.spans.Spans: java.util.Collection getPayload()>();

        interfaceinvoke $r25.<java.util.Set: boolean addAll(java.util.Collection)>($r23);

     label01:
        r24 = null;

        i23 = 0;

        i24 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchStart>;

        i25 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchEnd>;

        $r11 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $i8 = lengthof $r11;

        i26 = $i8 - 2;

     label02:
        if i26 < 0 goto label13;

        $r13 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.Spans[] subSpans>;

        r14 = $r13[i26];

        $z2 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean collectPayloads>;

        if $z2 == 0 goto label03;

        $z6 = virtualinvoke r14.<org.apache.lucene.search.spans.Spans: boolean isPayloadAvailable()>();

        if $z6 == 0 goto label03;

        $r18 = virtualinvoke r14.<org.apache.lucene.search.spans.Spans: java.util.Collection getPayload()>();

        $r26 = new java.util.ArrayList;

        $i20 = interfaceinvoke $r18.<java.util.Collection: int size()>();

        specialinvoke $r26.<java.util.ArrayList: void <init>(int)>($i20);

        r24 = $r26;

        interfaceinvoke $r26.<java.util.Collection: boolean addAll(java.util.Collection)>($r18);

     label03:
        i27 = virtualinvoke r14.<org.apache.lucene.search.spans.Spans: int start()>();

        i28 = virtualinvoke r14.<org.apache.lucene.search.spans.Spans: int end()>();

     label04:
        $z7 = virtualinvoke r14.<org.apache.lucene.search.spans.Spans: boolean next()>();

        if $z7 != 0 goto label05;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean inSameDoc> = 0;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean more> = 0;

        goto label09;

     label05:
        $i11 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchDoc>;

        $i12 = virtualinvoke r14.<org.apache.lucene.search.spans.Spans: int doc()>();

        if $i11 == $i12 goto label06;

        r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean inSameDoc> = 0;

        goto label09;

     label06:
        $i13 = virtualinvoke r14.<org.apache.lucene.search.spans.Spans: int start()>();

        $i14 = virtualinvoke r14.<org.apache.lucene.search.spans.Spans: int end()>();

        $z3 = staticinvoke <org.apache.lucene.search.spans.NearSpansOrdered: boolean docSpansOrdered(int,int,int,int)>($i13, $i14, i24, i25);

        if $z3 != 0 goto label07;

        goto label09;

     label07:
        i27 = $i13;

        i28 = $i14;

        $z4 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean collectPayloads>;

        if $z4 == 0 goto label08;

        $z5 = virtualinvoke r14.<org.apache.lucene.search.spans.Spans: boolean isPayloadAvailable()>();

        if $z5 == 0 goto label08;

        $r15 = virtualinvoke r14.<org.apache.lucene.search.spans.Spans: java.util.Collection getPayload()>();

        $r27 = new java.util.ArrayList;

        $i15 = interfaceinvoke $r15.<java.util.Collection: int size()>();

        specialinvoke $r27.<java.util.ArrayList: void <init>(int)>($i15);

        r24 = $r27;

        interfaceinvoke $r27.<java.util.Collection: boolean addAll(java.util.Collection)>($r15);

     label08:
        goto label04;

     label09:
        $z8 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean collectPayloads>;

        if $z8 == 0 goto label10;

        if r24 == null goto label10;

        interfaceinvoke $r25.<java.util.Set: boolean addAll(java.util.Collection)>(r24);

     label10:
        $z9 = <org.apache.lucene.search.spans.NearSpansOrdered: boolean $assertionsDisabled>;

        if $z9 != 0 goto label11;

        $i19 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchStart>;

        if i27 <= $i19 goto label11;

        $r28 = new java.lang.AssertionError;

        specialinvoke $r28.<java.lang.AssertionError: void <init>()>();

        throw $r28;

     label11:
        $i16 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchStart>;

        if $i16 <= i28 goto label12;

        $i17 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchStart>;

        $i18 = $i17 - i28;

        i23 = i23 + $i18;

     label12:
        r0.<org.apache.lucene.search.spans.NearSpansOrdered: int matchStart> = i27;

        i24 = i27;

        i25 = i28;

        $i30 = (int) -1;

        i26 = i26 + $i30;

        goto label02;

     label13:
        $i9 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: int allowedSlop>;

        if i23 > $i9 goto label14;

        $z13 = 1;

        $z12 = 1;

        goto label15;

     label14:
        $z13 = 0;

        $z12 = 0;

     label15:
        z11 = $z12;

        $z1 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: boolean collectPayloads>;

        if $z1 == 0 goto label16;

        if $z13 == 0 goto label16;

        $i10 = interfaceinvoke $r25.<java.util.Set: int size()>();

        if $i10 <= 0 goto label16;

        $r12 = r0.<org.apache.lucene.search.spans.NearSpansOrdered: java.util.List matchPayload>;

        interfaceinvoke $r12.<java.util.List: boolean addAll(java.util.Collection)>($r25);

     label16:
        return z11;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.search.spans.NearSpansOrdered r1;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r7, $r16, $r18;
        boolean $z0, $z1;
        org.apache.lucene.search.spans.SpanNearQuery $r6;
        java.lang.StringBuilder $r0, $r4, $r5, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17;
        java.lang.Class $r2;

        r1 := @this: org.apache.lucene.search.spans.NearSpansOrdered;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r6 = r1.<org.apache.lucene.search.spans.NearSpansOrdered: org.apache.lucene.search.spans.SpanNearQuery query>;

        $r7 = virtualinvoke $r6.<org.apache.lucene.search.spans.SpanNearQuery: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")@");

        $z0 = r1.<org.apache.lucene.search.spans.NearSpansOrdered: boolean firstTime>;

        if $z0 == 0 goto label1;

        $r16 = "START";

        goto label3;

     label1:
        $z1 = r1.<org.apache.lucene.search.spans.NearSpansOrdered: boolean more>;

        if $z1 == 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.lucene.search.spans.NearSpansOrdered: int doc()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i1 = virtualinvoke r1.<org.apache.lucene.search.spans.NearSpansOrdered: int start()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i2 = virtualinvoke r1.<org.apache.lucene.search.spans.NearSpansOrdered: int end()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        $r16 = "END";

     label3:
        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/spans/NearSpansOrdered;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.spans.NearSpansOrdered: boolean $assertionsDisabled> = $z1;

        return;
    }
}
