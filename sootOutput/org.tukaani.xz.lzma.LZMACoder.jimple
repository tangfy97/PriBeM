abstract class org.tukaani.xz.lzma.LZMACoder extends java.lang.Object
{
    static final int POS_STATES_MAX;
    static final int MATCH_LEN_MIN;
    static final int MATCH_LEN_MAX;
    static final int DIST_STATES;
    static final int DIST_SLOTS;
    static final int DIST_MODEL_START;
    static final int DIST_MODEL_END;
    static final int FULL_DISTANCES;
    static final int ALIGN_BITS;
    static final int ALIGN_SIZE;
    static final int ALIGN_MASK;
    static final int REPS;
    final int posMask;
    final int[] reps;
    final org.tukaani.xz.lzma.State state;
    final short[][] isMatch;
    final short[] isRep;
    final short[] isRep0;
    final short[] isRep1;
    final short[] isRep2;
    final short[][] isRep0Long;
    final short[][] distSlots;
    final short[][] distSpecial;
    final short[] distAlign;

    static final int getDistState(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        if i0 >= 6 goto label1;

        $i1 = i0 - 2;

        goto label2;

     label1:
        $i1 = 3;

     label2:
        return $i1;
    }

    void <init>(int)
    {
        short[][] $r3, $r8, $r9, $r10;
        org.tukaani.xz.lzma.State $r2;
        int[] $r1;
        int i0, $i1, $i2;
        org.tukaani.xz.lzma.LZMACoder r0;
        short[] $r4, $r5, $r6, $r7, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;

        r0 := @this: org.tukaani.xz.lzma.LZMACoder;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[4];

        r0.<org.tukaani.xz.lzma.LZMACoder: int[] reps> = $r1;

        $r2 = new org.tukaani.xz.lzma.State;

        specialinvoke $r2.<org.tukaani.xz.lzma.State: void <init>()>();

        r0.<org.tukaani.xz.lzma.LZMACoder: org.tukaani.xz.lzma.State state> = $r2;

        $r3 = newmultiarray (short)[12][16];

        r0.<org.tukaani.xz.lzma.LZMACoder: short[][] isMatch> = $r3;

        $r4 = newarray (short)[12];

        r0.<org.tukaani.xz.lzma.LZMACoder: short[] isRep> = $r4;

        $r5 = newarray (short)[12];

        r0.<org.tukaani.xz.lzma.LZMACoder: short[] isRep0> = $r5;

        $r6 = newarray (short)[12];

        r0.<org.tukaani.xz.lzma.LZMACoder: short[] isRep1> = $r6;

        $r7 = newarray (short)[12];

        r0.<org.tukaani.xz.lzma.LZMACoder: short[] isRep2> = $r7;

        $r8 = newmultiarray (short)[12][16];

        r0.<org.tukaani.xz.lzma.LZMACoder: short[][] isRep0Long> = $r8;

        $r9 = newmultiarray (short)[4][64];

        r0.<org.tukaani.xz.lzma.LZMACoder: short[][] distSlots> = $r9;

        $r10 = newarray (short[])[10];

        $r11 = newarray (short)[2];

        $r10[0] = $r11;

        $r12 = newarray (short)[2];

        $r10[1] = $r12;

        $r13 = newarray (short)[4];

        $r10[2] = $r13;

        $r14 = newarray (short)[4];

        $r10[3] = $r14;

        $r15 = newarray (short)[8];

        $r10[4] = $r15;

        $r16 = newarray (short)[8];

        $r10[5] = $r16;

        $r17 = newarray (short)[16];

        $r10[6] = $r17;

        $r18 = newarray (short)[16];

        $r10[7] = $r18;

        $r19 = newarray (short)[32];

        $r10[8] = $r19;

        $r20 = newarray (short)[32];

        $r10[9] = $r20;

        r0.<org.tukaani.xz.lzma.LZMACoder: short[][] distSpecial> = $r10;

        $r21 = newarray (short)[16];

        r0.<org.tukaani.xz.lzma.LZMACoder: short[] distAlign> = $r21;

        $i1 = 1 << i0;

        $i2 = $i1 - 1;

        r0.<org.tukaani.xz.lzma.LZMACoder: int posMask> = $i2;

        return;
    }

    void reset()
    {
        short[][] $r6, $r11, $r12, $r13, $r15, $r17, $r19, $r21;
        org.tukaani.xz.lzma.State $r5;
        int[] $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7;
        org.tukaani.xz.lzma.LZMACoder r0;
        short[] $r7, $r8, $r9, $r10, $r14, $r16, $r18, $r20, $r22;

        r0 := @this: org.tukaani.xz.lzma.LZMACoder;

        $r1 = r0.<org.tukaani.xz.lzma.LZMACoder: int[] reps>;

        $r1[0] = 0;

        $r2 = r0.<org.tukaani.xz.lzma.LZMACoder: int[] reps>;

        $r2[1] = 0;

        $r3 = r0.<org.tukaani.xz.lzma.LZMACoder: int[] reps>;

        $r3[2] = 0;

        $r4 = r0.<org.tukaani.xz.lzma.LZMACoder: int[] reps>;

        $r4[3] = 0;

        $r5 = r0.<org.tukaani.xz.lzma.LZMACoder: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r5.<org.tukaani.xz.lzma.State: void reset()>();

        i4 = 0;

     label1:
        $r6 = r0.<org.tukaani.xz.lzma.LZMACoder: short[][] isMatch>;

        $i0 = lengthof $r6;

        if i4 >= $i0 goto label2;

        $r21 = r0.<org.tukaani.xz.lzma.LZMACoder: short[][] isMatch>;

        $r22 = $r21[i4];

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r22);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r7 = r0.<org.tukaani.xz.lzma.LZMACoder: short[] isRep>;

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r7);

        $r8 = r0.<org.tukaani.xz.lzma.LZMACoder: short[] isRep0>;

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r8);

        $r9 = r0.<org.tukaani.xz.lzma.LZMACoder: short[] isRep1>;

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r9);

        $r10 = r0.<org.tukaani.xz.lzma.LZMACoder: short[] isRep2>;

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r10);

        i5 = 0;

     label3:
        $r11 = r0.<org.tukaani.xz.lzma.LZMACoder: short[][] isRep0Long>;

        $i1 = lengthof $r11;

        if i5 >= $i1 goto label4;

        $r19 = r0.<org.tukaani.xz.lzma.LZMACoder: short[][] isRep0Long>;

        $r20 = $r19[i5];

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r20);

        i5 = i5 + 1;

        goto label3;

     label4:
        i6 = 0;

     label5:
        $r12 = r0.<org.tukaani.xz.lzma.LZMACoder: short[][] distSlots>;

        $i2 = lengthof $r12;

        if i6 >= $i2 goto label6;

        $r17 = r0.<org.tukaani.xz.lzma.LZMACoder: short[][] distSlots>;

        $r18 = $r17[i6];

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r18);

        i6 = i6 + 1;

        goto label5;

     label6:
        i7 = 0;

     label7:
        $r13 = r0.<org.tukaani.xz.lzma.LZMACoder: short[][] distSpecial>;

        $i3 = lengthof $r13;

        if i7 >= $i3 goto label8;

        $r15 = r0.<org.tukaani.xz.lzma.LZMACoder: short[][] distSpecial>;

        $r16 = $r15[i7];

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r16);

        i7 = i7 + 1;

        goto label7;

     label8:
        $r14 = r0.<org.tukaani.xz.lzma.LZMACoder: short[] distAlign>;

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r14);

        return;
    }

    public static void <clinit>()
    {
        <org.tukaani.xz.lzma.LZMACoder: int REPS> = 4;

        <org.tukaani.xz.lzma.LZMACoder: int ALIGN_MASK> = 15;

        <org.tukaani.xz.lzma.LZMACoder: int ALIGN_SIZE> = 16;

        <org.tukaani.xz.lzma.LZMACoder: int ALIGN_BITS> = 4;

        <org.tukaani.xz.lzma.LZMACoder: int FULL_DISTANCES> = 128;

        <org.tukaani.xz.lzma.LZMACoder: int DIST_MODEL_END> = 14;

        <org.tukaani.xz.lzma.LZMACoder: int DIST_MODEL_START> = 4;

        <org.tukaani.xz.lzma.LZMACoder: int DIST_SLOTS> = 64;

        <org.tukaani.xz.lzma.LZMACoder: int DIST_STATES> = 4;

        <org.tukaani.xz.lzma.LZMACoder: int MATCH_LEN_MAX> = 273;

        <org.tukaani.xz.lzma.LZMACoder: int MATCH_LEN_MIN> = 2;

        <org.tukaani.xz.lzma.LZMACoder: int POS_STATES_MAX> = 16;

        return;
    }
}
