public class org.bouncycastle.mozilla.SignedPublicKeyAndChallenge extends org.bouncycastle.asn1.ASN1Encodable
{
    private org.bouncycastle.asn1.ASN1Sequence spkacSeq;
    private org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge pkac;
    private org.bouncycastle.asn1.x509.AlgorithmIdentifier signatureAlgorithm;
    private org.bouncycastle.asn1.DERBitString signature;

    private static org.bouncycastle.asn1.ASN1Sequence toDERSequence(byte[])
    {
        byte[] r1;
        org.bouncycastle.asn1.ASN1Sequence $r4;
        java.io.ByteArrayInputStream $r0;
        org.bouncycastle.asn1.DERObject $r3;
        org.bouncycastle.asn1.ASN1InputStream $r2;
        java.lang.IllegalArgumentException $r6;
        java.lang.Exception $r5;

        r1 := @parameter0: byte[];

     label1:
        $r0 = new java.io.ByteArrayInputStream;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r2 = new org.bouncycastle.asn1.ASN1InputStream;

        specialinvoke $r2.<org.bouncycastle.asn1.ASN1InputStream: void <init>(java.io.InputStream)>($r0);

        $r3 = virtualinvoke $r2.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.DERObject readObject()>();

        $r4 = (org.bouncycastle.asn1.ASN1Sequence) $r3;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("badly encoded request");

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>(byte[])
    {
        byte[] r1;
        org.bouncycastle.asn1.ASN1Sequence $r2, $r3, $r6, $r9;
        org.bouncycastle.asn1.DEREncodable $r4, $r7, $r10;
        org.bouncycastle.asn1.DERBitString $r11;
        org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge $r5;
        org.bouncycastle.asn1.x509.AlgorithmIdentifier $r8;
        org.bouncycastle.mozilla.SignedPublicKeyAndChallenge r0;

        r0 := @this: org.bouncycastle.mozilla.SignedPublicKeyAndChallenge;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.bouncycastle.asn1.ASN1Encodable: void <init>()>();

        $r2 = staticinvoke <org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: org.bouncycastle.asn1.ASN1Sequence toDERSequence(byte[])>(r1);

        r0.<org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: org.bouncycastle.asn1.ASN1Sequence spkacSeq> = $r2;

        $r3 = r0.<org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: org.bouncycastle.asn1.ASN1Sequence spkacSeq>;

        $r4 = virtualinvoke $r3.<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.DEREncodable getObjectAt(int)>(0);

        $r5 = staticinvoke <org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge: org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge getInstance(java.lang.Object)>($r4);

        r0.<org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge pkac> = $r5;

        $r6 = r0.<org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: org.bouncycastle.asn1.ASN1Sequence spkacSeq>;

        $r7 = virtualinvoke $r6.<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.DEREncodable getObjectAt(int)>(1);

        $r8 = staticinvoke <org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object)>($r7);

        r0.<org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: org.bouncycastle.asn1.x509.AlgorithmIdentifier signatureAlgorithm> = $r8;

        $r9 = r0.<org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: org.bouncycastle.asn1.ASN1Sequence spkacSeq>;

        $r10 = virtualinvoke $r9.<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.DEREncodable getObjectAt(int)>(2);

        $r11 = (org.bouncycastle.asn1.DERBitString) $r10;

        r0.<org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: org.bouncycastle.asn1.DERBitString signature> = $r11;

        return;
    }

    public org.bouncycastle.asn1.DERObject toASN1Object()
    {
        org.bouncycastle.asn1.ASN1Sequence $r1;
        org.bouncycastle.mozilla.SignedPublicKeyAndChallenge r0;

        r0 := @this: org.bouncycastle.mozilla.SignedPublicKeyAndChallenge;

        $r1 = r0.<org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: org.bouncycastle.asn1.ASN1Sequence spkacSeq>;

        return $r1;
    }

    public org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge getPublicKeyAndChallenge()
    {
        org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge $r1;
        org.bouncycastle.mozilla.SignedPublicKeyAndChallenge r0;

        r0 := @this: org.bouncycastle.mozilla.SignedPublicKeyAndChallenge;

        $r1 = r0.<org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge pkac>;

        return $r1;
    }

    public boolean verify() throws java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.NoSuchProviderException, java.security.InvalidKeyException
    {
        org.bouncycastle.mozilla.SignedPublicKeyAndChallenge r0;
        boolean $z0;

        r0 := @this: org.bouncycastle.mozilla.SignedPublicKeyAndChallenge;

        $z0 = virtualinvoke r0.<org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: boolean verify(java.lang.String)>(null);

        return $z0;
    }

    public boolean verify(java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.NoSuchProviderException, java.security.InvalidKeyException
    {
        byte[] $r8, $r10;
        org.bouncycastle.asn1.DERBitString $r6, $r9;
        org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge $r7;
        java.lang.String r0, $r4, $r13;
        org.bouncycastle.mozilla.SignedPublicKeyAndChallenge r1;
        org.bouncycastle.asn1.DERObjectIdentifier $r3, $r12;
        boolean $z0;
        java.security.Signature r14;
        java.security.PublicKey $r5;
        org.bouncycastle.asn1.x509.AlgorithmIdentifier $r2, $r11;

        r1 := @this: org.bouncycastle.mozilla.SignedPublicKeyAndChallenge;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r11 = r1.<org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: org.bouncycastle.asn1.x509.AlgorithmIdentifier signatureAlgorithm>;

        $r12 = virtualinvoke $r11.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.DERObjectIdentifier getObjectId()>();

        $r13 = virtualinvoke $r12.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        r14 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r13);

        goto label2;

     label1:
        $r2 = r1.<org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: org.bouncycastle.asn1.x509.AlgorithmIdentifier signatureAlgorithm>;

        $r3 = virtualinvoke $r2.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.DERObjectIdentifier getObjectId()>();

        $r4 = virtualinvoke $r3.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        r14 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>($r4, r0);

     label2:
        $r5 = virtualinvoke r1.<org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: java.security.PublicKey getPublicKey(java.lang.String)>(r0);

        virtualinvoke r14.<java.security.Signature: void initVerify(java.security.PublicKey)>($r5);

        $r6 = new org.bouncycastle.asn1.DERBitString;

        $r7 = r1.<org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge pkac>;

        specialinvoke $r6.<org.bouncycastle.asn1.DERBitString: void <init>(org.bouncycastle.asn1.DEREncodable)>($r7);

        $r8 = virtualinvoke $r6.<org.bouncycastle.asn1.DERBitString: byte[] getBytes()>();

        virtualinvoke r14.<java.security.Signature: void update(byte[])>($r8);

        $r9 = r1.<org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: org.bouncycastle.asn1.DERBitString signature>;

        $r10 = virtualinvoke $r9.<org.bouncycastle.asn1.DERBitString: byte[] getBytes()>();

        $z0 = virtualinvoke r14.<java.security.Signature: boolean verify(byte[])>($r10);

        return $z0;
    }

    public java.security.PublicKey getPublicKey(java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.InvalidKeyException
    {
        byte[] $r5;
        org.bouncycastle.asn1.x509.SubjectPublicKeyInfo $r2;
        java.security.spec.InvalidKeySpecException $r12;
        org.bouncycastle.asn1.DERBitString $r3;
        java.security.PublicKey $r11;
        java.security.spec.X509EncodedKeySpec $r4;
        java.security.KeyFactory $r10;
        org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge $r1;
        java.security.InvalidKeyException $r13;
        java.lang.String $r8, r9;
        org.bouncycastle.asn1.x509.AlgorithmIdentifier $r6;
        org.bouncycastle.mozilla.SignedPublicKeyAndChallenge r0;
        org.bouncycastle.asn1.DERObjectIdentifier $r7;

        r0 := @this: org.bouncycastle.mozilla.SignedPublicKeyAndChallenge;

        r9 := @parameter0: java.lang.String;

        $r1 = r0.<org.bouncycastle.mozilla.SignedPublicKeyAndChallenge: org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge pkac>;

        $r2 = virtualinvoke $r1.<org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge: org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()>();

     label1:
        $r3 = new org.bouncycastle.asn1.DERBitString;

        specialinvoke $r3.<org.bouncycastle.asn1.DERBitString: void <init>(org.bouncycastle.asn1.DEREncodable)>($r2);

        $r4 = new java.security.spec.X509EncodedKeySpec;

        $r5 = virtualinvoke $r3.<org.bouncycastle.asn1.DERBitString: byte[] getBytes()>();

        specialinvoke $r4.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r5);

        $r6 = virtualinvoke $r2.<org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId()>();

        $r7 = virtualinvoke $r6.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.DERObjectIdentifier getObjectId()>();

        $r8 = virtualinvoke $r7.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        $r10 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>($r8, r9);

        $r11 = virtualinvoke $r10.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r4);

     label2:
        return $r11;

     label3:
        $r12 := @caughtexception;

        $r13 = new java.security.InvalidKeyException;

        specialinvoke $r13.<java.security.InvalidKeyException: void <init>(java.lang.String)>("error encoding public key");

        throw $r13;

        catch java.security.spec.InvalidKeySpecException from label1 to label2 with label3;
    }
}
