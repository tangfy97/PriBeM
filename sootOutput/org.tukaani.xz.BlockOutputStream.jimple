class org.tukaani.xz.BlockOutputStream extends org.tukaani.xz.FinishableOutputStream
{
    private final java.io.OutputStream out;
    private final org.tukaani.xz.CountingOutputStream outCounted;
    private org.tukaani.xz.FinishableOutputStream filterChain;
    private final org.tukaani.xz.check.Check check;
    private final int headerSize;
    private final long compressedSizeLimit;
    private long uncompressedSize;
    private final byte[] tempBuf;

    public void <init>(java.io.OutputStream, org.tukaani.xz.FilterEncoder[], org.tukaani.xz.check.Check) throws java.io.IOException
    {
        byte[] $r1, $r8, $r12;
        byte $b11;
        org.tukaani.xz.CountingOutputStream $r5, $r16;
        org.tukaani.xz.UnsupportedOptionsException $r18;
        org.tukaani.xz.check.Check r3;
        java.io.ByteArrayOutputStream $r17;
        long $l13, $l14, $l16, $l17, $l18, $l20;
        org.tukaani.xz.FilterEncoder $r10, $r11, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i15, $i19, i21, i22, $i24;
        java.io.OutputStream r2;
        org.tukaani.xz.BlockOutputStream r0;
        org.tukaani.xz.FinishableOutputStream $r13, $r15;
        org.tukaani.xz.FilterEncoder[] r6;

        r0 := @this: org.tukaani.xz.BlockOutputStream;

        r2 := @parameter0: java.io.OutputStream;

        r6 := @parameter1: org.tukaani.xz.FilterEncoder[];

        r3 := @parameter2: org.tukaani.xz.check.Check;

        specialinvoke r0.<org.tukaani.xz.FinishableOutputStream: void <init>()>();

        r0.<org.tukaani.xz.BlockOutputStream: long uncompressedSize> = 0L;

        $r1 = newarray (byte)[1];

        r0.<org.tukaani.xz.BlockOutputStream: byte[] tempBuf> = $r1;

        r0.<org.tukaani.xz.BlockOutputStream: java.io.OutputStream out> = r2;

        r0.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.check.Check check> = r3;

        $r16 = new org.tukaani.xz.CountingOutputStream;

        specialinvoke $r16.<org.tukaani.xz.CountingOutputStream: void <init>(java.io.OutputStream)>(r2);

        r0.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.CountingOutputStream outCounted> = $r16;

        $r5 = r0.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.CountingOutputStream outCounted>;

        r0.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.FinishableOutputStream filterChain> = $r5;

        $i0 = lengthof r6;

        i21 = $i0 - 1;

     label1:
        if i21 < 0 goto label2;

        $r14 = r6[i21];

        $r13 = r0.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.FinishableOutputStream filterChain>;

        $r15 = interfaceinvoke $r14.<org.tukaani.xz.FilterEncoder: org.tukaani.xz.FinishableOutputStream getOutputStream(org.tukaani.xz.FinishableOutputStream)>($r13);

        r0.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.FinishableOutputStream filterChain> = $r15;

        $i24 = (int) -1;

        i21 = i21 + $i24;

        goto label1;

     label2:
        $r17 = new java.io.ByteArrayOutputStream;

        specialinvoke $r17.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke $r17.<java.io.ByteArrayOutputStream: void write(int)>(0);

        $i1 = lengthof r6;

        $i2 = $i1 - 1;

        virtualinvoke $r17.<java.io.ByteArrayOutputStream: void write(int)>($i2);

        i22 = 0;

     label3:
        $i3 = lengthof r6;

        if i22 >= $i3 goto label4;

        $r10 = r6[i22];

        $l18 = interfaceinvoke $r10.<org.tukaani.xz.FilterEncoder: long getFilterID()>();

        staticinvoke <org.tukaani.xz.common.EncoderUtil: void encodeVLI(java.io.OutputStream,long)>($r17, $l18);

        $r11 = r6[i22];

        $r12 = interfaceinvoke $r11.<org.tukaani.xz.FilterEncoder: byte[] getFilterProps()>();

        $i19 = lengthof $r12;

        $l20 = (long) $i19;

        staticinvoke <org.tukaani.xz.common.EncoderUtil: void encodeVLI(java.io.OutputStream,long)>($r17, $l20);

        virtualinvoke $r17.<java.io.ByteArrayOutputStream: void write(byte[])>($r12);

        i22 = i22 + 1;

        goto label3;

     label4:
        $i4 = virtualinvoke $r17.<java.io.ByteArrayOutputStream: int size()>();

        $i5 = $i4 & 3;

        if $i5 == 0 goto label5;

        virtualinvoke $r17.<java.io.ByteArrayOutputStream: void write(int)>(0);

        goto label4;

     label5:
        $r8 = virtualinvoke $r17.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i6 = lengthof $r8;

        $i7 = $i6 + 4;

        r0.<org.tukaani.xz.BlockOutputStream: int headerSize> = $i7;

        $i8 = r0.<org.tukaani.xz.BlockOutputStream: int headerSize>;

        if $i8 <= 1024 goto label6;

        $r18 = new org.tukaani.xz.UnsupportedOptionsException;

        specialinvoke $r18.<org.tukaani.xz.UnsupportedOptionsException: void <init>()>();

        throw $r18;

     label6:
        $i9 = lengthof $r8;

        $i10 = $i9 / 4;

        $b11 = (byte) $i10;

        $r8[0] = $b11;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r8);

        staticinvoke <org.tukaani.xz.common.EncoderUtil: void writeCRC32(java.io.OutputStream,byte[])>(r2, $r8);

        $i12 = r0.<org.tukaani.xz.BlockOutputStream: int headerSize>;

        $l13 = (long) $i12;

        $l14 = 9223372036854775804L - $l13;

        $i15 = virtualinvoke r3.<org.tukaani.xz.check.Check: int getSize()>();

        $l16 = (long) $i15;

        $l17 = $l14 - $l16;

        r0.<org.tukaani.xz.BlockOutputStream: long compressedSizeLimit> = $l17;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        byte[] $r1, $r2;
        byte $b1;
        int i0;
        org.tukaani.xz.BlockOutputStream r0;

        r0 := @this: org.tukaani.xz.BlockOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.tukaani.xz.BlockOutputStream: byte[] tempBuf>;

        $b1 = (byte) i0;

        $r1[0] = $b1;

        $r2 = r0.<org.tukaani.xz.BlockOutputStream: byte[] tempBuf>;

        virtualinvoke r0.<org.tukaani.xz.BlockOutputStream: void write(byte[],int,int)>($r2, 0, 1);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        org.tukaani.xz.check.Check $r3;
        long $l2, $l3, $l4;
        org.tukaani.xz.BlockOutputStream r0;
        int i0, i1;
        org.tukaani.xz.FinishableOutputStream $r2;

        r0 := @this: org.tukaani.xz.BlockOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.FinishableOutputStream filterChain>;

        virtualinvoke $r2.<org.tukaani.xz.FinishableOutputStream: void write(byte[],int,int)>(r1, i0, i1);

        $r3 = r0.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.check.Check check>;

        virtualinvoke $r3.<org.tukaani.xz.check.Check: void update(byte[],int,int)>(r1, i0, i1);

        $l3 = r0.<org.tukaani.xz.BlockOutputStream: long uncompressedSize>;

        $l2 = (long) i1;

        $l4 = $l3 + $l2;

        r0.<org.tukaani.xz.BlockOutputStream: long uncompressedSize> = $l4;

        specialinvoke r0.<org.tukaani.xz.BlockOutputStream: void validate()>();

        return;
    }

    public void flush() throws java.io.IOException
    {
        org.tukaani.xz.FinishableOutputStream $r1;
        org.tukaani.xz.BlockOutputStream r0;

        r0 := @this: org.tukaani.xz.BlockOutputStream;

        $r1 = r0.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.FinishableOutputStream filterChain>;

        virtualinvoke $r1.<org.tukaani.xz.FinishableOutputStream: void flush()>();

        specialinvoke r0.<org.tukaani.xz.BlockOutputStream: void validate()>();

        return;
    }

    public void finish() throws java.io.IOException
    {
        java.io.OutputStream $r4, $r6;
        byte[] $r5;
        org.tukaani.xz.check.Check $r3;
        org.tukaani.xz.CountingOutputStream $r2;
        long $l0, l2;
        org.tukaani.xz.BlockOutputStream r0;
        byte $b1;
        org.tukaani.xz.FinishableOutputStream $r1;

        r0 := @this: org.tukaani.xz.BlockOutputStream;

        $r1 = r0.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.FinishableOutputStream filterChain>;

        virtualinvoke $r1.<org.tukaani.xz.FinishableOutputStream: void finish()>();

        specialinvoke r0.<org.tukaani.xz.BlockOutputStream: void validate()>();

        $r2 = r0.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.CountingOutputStream outCounted>;

        l2 = virtualinvoke $r2.<org.tukaani.xz.CountingOutputStream: long getSize()>();

     label1:
        $l0 = l2 & 3L;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $r6 = r0.<org.tukaani.xz.BlockOutputStream: java.io.OutputStream out>;

        virtualinvoke $r6.<java.io.OutputStream: void write(int)>(0);

        l2 = l2 + 1L;

        goto label1;

     label2:
        $r4 = r0.<org.tukaani.xz.BlockOutputStream: java.io.OutputStream out>;

        $r3 = r0.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.check.Check check>;

        $r5 = virtualinvoke $r3.<org.tukaani.xz.check.Check: byte[] finish()>();

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[])>($r5);

        return;
    }

    private void validate() throws java.io.IOException
    {
        org.tukaani.xz.CountingOutputStream $r1;
        long $l0, $l2, $l4;
        org.tukaani.xz.BlockOutputStream r0;
        org.tukaani.xz.XZIOException $r3;
        byte $b1, $b3, $b5;
        int $i6, $i7, $i8;

        r0 := @this: org.tukaani.xz.BlockOutputStream;

        $r1 = r0.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.CountingOutputStream outCounted>;

        $l0 = virtualinvoke $r1.<org.tukaani.xz.CountingOutputStream: long getSize()>();

        $b1 = $l0 cmp 0L;

        $i6 = (int) $b1;

        if $i6 < 0 goto label1;

        $l2 = r0.<org.tukaani.xz.BlockOutputStream: long compressedSizeLimit>;

        $b3 = $l0 cmp $l2;

        $i7 = (int) $b3;

        if $i7 > 0 goto label1;

        $l4 = r0.<org.tukaani.xz.BlockOutputStream: long uncompressedSize>;

        $b5 = $l4 cmp 0L;

        $i8 = (int) $b5;

        if $i8 >= 0 goto label2;

     label1:
        $r3 = new org.tukaani.xz.XZIOException;

        specialinvoke $r3.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("XZ Stream has grown too big");

        throw $r3;

     label2:
        return;
    }

    public long getUnpaddedSize()
    {
        org.tukaani.xz.check.Check $r2;
        org.tukaani.xz.CountingOutputStream $r1;
        long $l1, $l2, $l3, $l5, $l6;
        org.tukaani.xz.BlockOutputStream r0;
        int $i0, $i4;

        r0 := @this: org.tukaani.xz.BlockOutputStream;

        $i0 = r0.<org.tukaani.xz.BlockOutputStream: int headerSize>;

        $l1 = (long) $i0;

        $r1 = r0.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.CountingOutputStream outCounted>;

        $l2 = virtualinvoke $r1.<org.tukaani.xz.CountingOutputStream: long getSize()>();

        $l3 = $l1 + $l2;

        $r2 = r0.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.check.Check check>;

        $i4 = virtualinvoke $r2.<org.tukaani.xz.check.Check: int getSize()>();

        $l5 = (long) $i4;

        $l6 = $l3 + $l5;

        return $l6;
    }

    public long getUncompressedSize()
    {
        long $l0;
        org.tukaani.xz.BlockOutputStream r0;

        r0 := @this: org.tukaani.xz.BlockOutputStream;

        $l0 = r0.<org.tukaani.xz.BlockOutputStream: long uncompressedSize>;

        return $l0;
    }
}
