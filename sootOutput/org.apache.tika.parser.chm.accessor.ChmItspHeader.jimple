public class org.apache.tika.parser.chm.accessor.ChmItspHeader extends java.lang.Object implements org.apache.tika.parser.chm.accessor.ChmAccessor
{
    private static final long serialVersionUID;
    private byte[] signature;
    private int version;
    private int header_len;
    private int unknown_000c;
    private long block_len;
    private int blockidx_intvl;
    private int index_depth;
    private int index_root;
    private int index_head;
    private int unknown_0024;
    private long num_blocks;
    private int unknown_002c;
    private long lang_id;
    private byte[] system_uuid;
    private byte[] unknown_0044;
    private int dataRemained;
    private int currentPlace;

    public void <init>()
    {
        byte[] $r1, $r2, $r4;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;
        java.lang.String $r3;
        java.lang.AssertionError $r6;
        java.io.UnsupportedEncodingException $r5;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[16];

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] system_uuid> = $r1;

        $r2 = newarray (byte)[16];

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] unknown_0044> = $r2;

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int currentPlace> = 0;

     label1:
        $r3 = "ITSP";

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] signature> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("UTF-8 not supported.");

        throw $r6;

     label4:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        byte[] $r5, $r95, $r102;
        java.lang.StringBuilder $r0, $r1, $r2, $r6, $r8, $r10, $r11, $r12, $r14, $r16, $r17, $r18, $r20, $r22, $r23, $r24, $r26, $r28, $r29, $r30, $r31, $r33, $r35, $r36, $r37, $r38, $r40, $r42, $r43, $r44, $r45, $r47, $r49, $r50, $r51, $r52, $r54, $r56, $r57, $r58, $r59, $r61, $r63, $r64, $r65, $r66, $r68, $r70, $r71, $r72, $r73, $r75, $r77, $r78, $r79, $r80, $r82, $r84, $r85, $r86, $r87, $r89, $r91, $r93, $r94, $r96, $r98, $r100, $r101, $r103, $r104;
        long $l3, $l9, $l11, $l12;
        java.lang.AssertionError $r108;
        java.lang.String $r3, $r7, $r9, $r13, $r15, $r19, $r21, $r25, $r27, $r32, $r34, $r39, $r41, $r46, $r48, $r53, $r55, $r60, $r62, $r67, $r69, $r74, $r76, $r81, $r83, $r88, $r90, $r92, $r97, $r99, $r105, $r106;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r4;
        java.io.UnsupportedEncodingException $r107;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i10;

        r4 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ signature:=");

        $r3 = new java.lang.String;

        $r5 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] getSignature()>();

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, "UTF-8");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

     label2:
        goto label4;

     label3:
        $r107 := @caughtexception;

        $r108 = new java.lang.AssertionError;

        specialinvoke $r108.<java.lang.AssertionError: void <init>(java.lang.Object)>("UTF-8 not supported.");

        throw $r108;

     label4:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("version:=\t");

        $i0 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getVersion()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r13 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("header_len:=\t");

        $i1 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getHeader_len()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r19 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown_00c:=\t");

        $i2 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getUnknown_000c()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r25 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("block_len:=\t");

        $l3 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmItspHeader: long getBlock_len()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [directory chunk size]");

        $r32 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("blockidx_intvl:=");

        $i4 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getBlockidx_intvl()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", density of quickref section, usually 2");

        $r39 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index_depth:=\t");

        $i5 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getIndex_depth()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", depth of the index tree - 1 there is no index, 2 if there is one level of PMGI chunk");

        $r46 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index_root:=\t");

        $i6 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getIndex_root()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", chunk number of root index chunk, -1 if there is none");

        $r53 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index_head:=\t");

        $i7 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getIndex_head()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", chunk number of first PMGL (listing) chunk");

        $r60 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r61 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown_0024:=\t");

        $i8 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getUnknown_0024()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", chunk number of last PMGL (listing) chunk");

        $r67 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r68 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("num_blocks:=\t");

        $l9 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmItspHeader: long getNum_blocks()>();

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", -1 (unknown)");

        $r74 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r75 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r74);

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76);

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown_002c:=\t");

        $i10 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getUnknown_002c()>();

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", number of directory chunks (total)");

        $r81 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r82 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r83);

        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lang_id:=\t");

        $l11 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmItspHeader: long getLang_id()>();

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l11);

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $l12 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmItspHeader: long getLang_id()>();

        $r88 = staticinvoke <org.apache.tika.parser.chm.core.ChmCommons: java.lang.String getLanguage(long)>($l12);

        $r89 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r88);

        $r90 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r91 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r90);

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r92);

        $r93 = new java.lang.StringBuilder;

        specialinvoke $r93.<java.lang.StringBuilder: void <init>()>();

        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("system_uuid:=");

        $r95 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] getSystem_uuid()>();

        $r96 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r95);

        $r97 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r98 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r97);

        $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r99);

        $r100 = new java.lang.StringBuilder;

        specialinvoke $r100.<java.lang.StringBuilder: void <init>()>();

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown_0044:=");

        $r102 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] getUnknown_0044()>();

        $r103 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r102);

        $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ]");

        $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r105);

        $r106 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r106;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    private void unmarshalCharArray(byte[], org.apache.tika.parser.chm.accessor.ChmItspHeader, int) throws org.apache.tika.exception.TikaException
    {
        byte[] r0, $r3;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r1, r2;
        int $i0, i1, $i2, $i3, $i4, $i5;

        r2 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        r0 := @parameter0: byte[];

        r1 := @parameter1: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        i1 := @parameter2: int;

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertByteArrayNotNull(byte[])>(r0);

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertChmAccessorNotNull(org.apache.tika.parser.chm.accessor.ChmAccessor)>(r1);

        $i0 = lengthof r0;

        specialinvoke r2.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setDataRemained(int)>($i0);

        $r3 = r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] signature>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r3, 0, i1);

        $i2 = specialinvoke r2.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getCurrentPlace()>();

        $i3 = $i2 + i1;

        specialinvoke r2.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setCurrentPlace(int)>($i3);

        $i4 = specialinvoke r2.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $i5 = $i4 - i1;

        specialinvoke r2.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setDataRemained(int)>($i5);

        return;
    }

    private int unmarshalInt32(byte[], int, int) throws org.apache.tika.exception.TikaException
    {
        byte[] r0;
        byte $b2, $b5, $b10, $b15;
        org.apache.tika.exception.TikaException $r3;
        int $i0, $i1, $i3, $i4, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, $i24, $i25, $i26, $i27;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r1;

        r1 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        r0 := @parameter0: byte[];

        i21 := @parameter1: int;

        i22 := @parameter2: int;

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertByteArrayNotNull(byte[])>(r0);

        $i0 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        if 4 <= $i0 goto label1;

        $r3 = new org.apache.tika.exception.TikaException;

        specialinvoke $r3.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>("4 > dataLenght");

        throw $r3;

     label1:
        $i1 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getCurrentPlace()>();

        $b2 = r0[$i1];

        $i3 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getCurrentPlace()>();

        $i4 = $i3 + 1;

        $b5 = r0[$i4];

        $i24 = (int) $b5;

        $i6 = $i24 << 8;

        $i25 = (int) $b2;

        $i7 = $i25 | $i6;

        $i8 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getCurrentPlace()>();

        $i9 = $i8 + 2;

        $b10 = r0[$i9];

        $i26 = (int) $b10;

        $i11 = $i26 << 16;

        $i12 = $i7 | $i11;

        $i13 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getCurrentPlace()>();

        $i14 = $i13 + 3;

        $b15 = r0[$i14];

        $i27 = (int) $b15;

        $i16 = $i27 << 24;

        i23 = $i12 | $i16;

        $i17 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getCurrentPlace()>();

        $i18 = $i17 + 4;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setCurrentPlace(int)>($i18);

        $i19 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $i20 = $i19 - 4;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setDataRemained(int)>($i20);

        return i23;
    }

    private long unmarshalUInt32(byte[], int, long) throws org.apache.tika.exception.TikaException
    {
        byte[] r0;
        long l22, l23;
        byte $b2, $b5, $b10, $b15;
        org.apache.tika.exception.TikaException $r3;
        int i0, $i1, $i3, $i4, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i24, $i25, $i26, $i27;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r1;

        r1 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        l22 := @parameter2: long;

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertByteArrayNotNull(byte[])>(r0);

        if 4 <= i0 goto label1;

        $r3 = new org.apache.tika.exception.TikaException;

        specialinvoke $r3.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>("4 > dataLenght");

        throw $r3;

     label1:
        $i1 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getCurrentPlace()>();

        $b2 = r0[$i1];

        $i3 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getCurrentPlace()>();

        $i4 = $i3 + 1;

        $b5 = r0[$i4];

        $i24 = (int) $b5;

        $i6 = $i24 << 8;

        $i25 = (int) $b2;

        $i7 = $i25 | $i6;

        $i8 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getCurrentPlace()>();

        $i9 = $i8 + 2;

        $b10 = r0[$i9];

        $i26 = (int) $b10;

        $i11 = $i26 << 16;

        $i12 = $i7 | $i11;

        $i13 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getCurrentPlace()>();

        $i14 = $i13 + 3;

        $b15 = r0[$i14];

        $i27 = (int) $b15;

        $i16 = $i27 << 24;

        $i17 = $i12 | $i16;

        l23 = (long) $i17;

        $i18 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $i19 = $i18 - 4;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setDataRemained(int)>($i19);

        $i20 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getCurrentPlace()>();

        $i21 = $i20 + 4;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setCurrentPlace(int)>($i21);

        return l23;
    }

    private byte[] unmarshalUuid(byte[], int, byte[], int)
    {
        byte[] r0, r2;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r1;
        int $i0, i1, $i2, $i3, $i4, $i5, i6;

        r1 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        r0 := @parameter0: byte[];

        i6 := @parameter1: int;

        r2 := @parameter2: byte[];

        i1 := @parameter3: int;

        $i0 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getCurrentPlace()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i0, r2, 0, i1);

        $i2 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getCurrentPlace()>();

        $i3 = $i2 + i1;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setCurrentPlace(int)>($i3);

        $i4 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $i5 = $i4 - i1;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setDataRemained(int)>($i5);

        return r2;
    }

    private int getDataRemained()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int dataRemained>;

        return $i0;
    }

    private void setDataRemained(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int dataRemained> = i0;

        return;
    }

    private int getCurrentPlace()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int currentPlace>;

        return $i0;
    }

    private void setCurrentPlace(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int currentPlace> = i0;

        return;
    }

    public byte[] getSignature()
    {
        byte[] $r1;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $r1 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] signature>;

        return $r1;
    }

    protected void setSignature(byte[])
    {
        byte[] r1;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        r1 := @parameter0: byte[];

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] signature> = r1;

        return;
    }

    public int getVersion()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int version>;

        return $i0;
    }

    protected void setVersion(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int version> = i0;

        return;
    }

    public int getHeader_len()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int header_len>;

        return $i0;
    }

    protected void setHeader_len(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int header_len> = i0;

        return;
    }

    public int getUnknown_000c()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int unknown_000c>;

        return $i0;
    }

    protected void setUnknown_000c(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int unknown_000c> = i0;

        return;
    }

    public long getBlock_len()
    {
        long $l0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: long block_len>;

        return $l0;
    }

    protected void setBlock_len(long)
    {
        long l0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: long block_len> = l0;

        return;
    }

    public int getBlockidx_intvl()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int blockidx_intvl>;

        return $i0;
    }

    protected void setBlockidx_intvl(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int blockidx_intvl> = i0;

        return;
    }

    public int getIndex_depth()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int index_depth>;

        return $i0;
    }

    protected void setIndex_depth(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int index_depth> = i0;

        return;
    }

    public int getIndex_root()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int index_root>;

        return $i0;
    }

    protected void setIndex_root(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int index_root> = i0;

        return;
    }

    public int getIndex_head()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int index_head>;

        return $i0;
    }

    protected void setIndex_head(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int index_head> = i0;

        return;
    }

    public int getUnknown_0024()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int unknown_0024>;

        return $i0;
    }

    protected void setUnknown_0024(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int unknown_0024> = i0;

        return;
    }

    public long getNum_blocks()
    {
        long $l0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: long num_blocks>;

        return $l0;
    }

    protected void setNum_blocks(long)
    {
        long l0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: long num_blocks> = l0;

        return;
    }

    public int getUnknown_002c()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int unknown_002c>;

        return $i0;
    }

    protected void setUnknown_002c(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int unknown_002c> = i0;

        return;
    }

    public long getLang_id()
    {
        long $l0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: long lang_id>;

        return $l0;
    }

    protected void setLang_id(long)
    {
        long l0;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: long lang_id> = l0;

        return;
    }

    public byte[] getSystem_uuid()
    {
        byte[] $r1;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $r1 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] system_uuid>;

        return $r1;
    }

    protected void setSystem_uuid(byte[])
    {
        byte[] r1;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        r1 := @parameter0: byte[];

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] system_uuid> = r1;

        return;
    }

    public byte[] getUnknown_0044()
    {
        byte[] $r1;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $r1 = r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] unknown_0044>;

        return $r1;
    }

    protected void setUnknown_0044(byte[])
    {
        byte[] r1;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        r1 := @parameter0: byte[];

        r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] unknown_0044> = r1;

        return;
    }

    public void parse(byte[], org.apache.tika.parser.chm.accessor.ChmItspHeader) throws org.apache.tika.exception.TikaException
    {
        byte[] r0, $r2, $r3, $r4, $r5, $r7;
        org.apache.tika.parser.chm.exception.ChmParsingException $r8, $r9, $r10, $r11;
        boolean $z0;
        java.io.UnsupportedEncodingException $r12;
        long $l11, $l12, $l29, $l30, $l35, $l36;
        java.lang.AssertionError $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i31, $i32, $i33, $i34, $i37, $i38, $i39, $i40;
        java.lang.String $r6;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r1, r14;

        r14 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        r0 := @parameter0: byte[];

        r1 := @parameter1: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        $i0 = lengthof r0;

        if $i0 == 84 goto label1;

        $r11 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r11.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("we only know how to deal with the 0x58 and 0x60 byte structures");

        throw $r11;

     label1:
        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void unmarshalCharArray(byte[],org.apache.tika.parser.chm.accessor.ChmItspHeader,int)>(r0, r1, 4);

        $i1 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $i2 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getVersion()>();

        $i3 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int unmarshalInt32(byte[],int,int)>(r0, $i1, $i2);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setVersion(int)>($i3);

        $i4 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $i5 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getHeader_len()>();

        $i6 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int unmarshalInt32(byte[],int,int)>(r0, $i4, $i5);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setHeader_len(int)>($i6);

        $i7 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $i8 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getUnknown_000c()>();

        $i9 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int unmarshalInt32(byte[],int,int)>(r0, $i7, $i8);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setUnknown_000c(int)>($i9);

        $i10 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $l11 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: long getBlock_len()>();

        $l12 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: long unmarshalUInt32(byte[],int,long)>(r0, $i10, $l11);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setBlock_len(long)>($l12);

        $i13 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $i14 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getBlockidx_intvl()>();

        $i15 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int unmarshalInt32(byte[],int,int)>(r0, $i13, $i14);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setBlockidx_intvl(int)>($i15);

        $i16 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $i17 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getIndex_depth()>();

        $i18 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int unmarshalInt32(byte[],int,int)>(r0, $i16, $i17);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setIndex_depth(int)>($i18);

        $i19 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $i20 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getIndex_root()>();

        $i21 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int unmarshalInt32(byte[],int,int)>(r0, $i19, $i20);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setIndex_root(int)>($i21);

        $i22 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $i23 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getIndex_head()>();

        $i24 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int unmarshalInt32(byte[],int,int)>(r0, $i22, $i23);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setIndex_head(int)>($i24);

        $i25 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $i26 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getUnknown_0024()>();

        $i27 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int unmarshalInt32(byte[],int,int)>(r0, $i25, $i26);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setUnknown_0024(int)>($i27);

        $i28 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $l29 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: long getNum_blocks()>();

        $l30 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: long unmarshalUInt32(byte[],int,long)>(r0, $i28, $l29);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setNum_blocks(long)>($l30);

        $i31 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $i32 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getUnknown_002c()>();

        $i33 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int unmarshalInt32(byte[],int,int)>(r0, $i31, $i32);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setUnknown_002c(int)>($i33);

        $i34 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $l35 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: long getLang_id()>();

        $l36 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: long unmarshalUInt32(byte[],int,long)>(r0, $i34, $l35);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setLang_id(long)>($l36);

        $i37 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $r2 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] getSystem_uuid()>();

        $r3 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] unmarshalUuid(byte[],int,byte[],int)>(r0, $i37, $r2, 16);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setSystem_uuid(byte[])>($r3);

        $i38 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getDataRemained()>();

        $r4 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] getUnknown_0044()>();

        $r5 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] unmarshalUuid(byte[],int,byte[],int)>(r0, $i38, $r4, 16);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void setUnknown_0044(byte[])>($r5);

     label2:
        $r6 = new java.lang.String;

        $r7 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: byte[] getSignature()>();

        specialinvoke $r6.<java.lang.String: void <init>(byte[],java.lang.String)>($r7, "UTF-8");

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("ITSP");

        if $z0 != 0 goto label3;

        $r10 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r10.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("seems not valid signature");

        throw $r10;

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>("UTF-8 not supported.");

        throw $r13;

     label5:
        $i39 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getVersion()>();

        if $i39 == 1 goto label6;

        $r9 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r9.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("!=ChmConstants.CHM_VER_1");

        throw $r9;

     label6:
        $i40 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmItspHeader: int getHeader_len()>();

        if $i40 == 84 goto label7;

        $r8 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r8.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("!= ChmConstants.CHM_ITSP_V1_LEN");

        throw $r8;

     label7:
        return;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        return;
    }

    public volatile void parse(byte[], java.lang.Object) throws org.apache.tika.exception.TikaException
    {
        byte[] r1;
        org.apache.tika.parser.chm.accessor.ChmItspHeader r0, $r3;
        java.lang.Object r2;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmItspHeader;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.Object;

        $r3 = (org.apache.tika.parser.chm.accessor.ChmItspHeader) r2;

        virtualinvoke r0.<org.apache.tika.parser.chm.accessor.ChmItspHeader: void parse(byte[],org.apache.tika.parser.chm.accessor.ChmItspHeader)>(r1, $r3);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.tika.parser.chm.accessor.ChmItspHeader: long serialVersionUID> = 1962394421998181341L;

        return;
    }
}
