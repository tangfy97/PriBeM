public class org.objectweb.asm.commons.GeneratorAdapter extends org.objectweb.asm.commons.LocalVariablesSorter
{
    private static final java.lang.String CLDESC;
    private static final org.objectweb.asm.Type BYTE_TYPE;
    private static final org.objectweb.asm.Type BOOLEAN_TYPE;
    private static final org.objectweb.asm.Type SHORT_TYPE;
    private static final org.objectweb.asm.Type CHARACTER_TYPE;
    private static final org.objectweb.asm.Type INTEGER_TYPE;
    private static final org.objectweb.asm.Type FLOAT_TYPE;
    private static final org.objectweb.asm.Type LONG_TYPE;
    private static final org.objectweb.asm.Type DOUBLE_TYPE;
    private static final org.objectweb.asm.Type NUMBER_TYPE;
    private static final org.objectweb.asm.Type OBJECT_TYPE;
    private static final org.objectweb.asm.commons.Method BOOLEAN_VALUE;
    private static final org.objectweb.asm.commons.Method CHAR_VALUE;
    private static final org.objectweb.asm.commons.Method INT_VALUE;
    private static final org.objectweb.asm.commons.Method FLOAT_VALUE;
    private static final org.objectweb.asm.commons.Method LONG_VALUE;
    private static final org.objectweb.asm.commons.Method DOUBLE_VALUE;
    public static final int ADD;
    public static final int SUB;
    public static final int MUL;
    public static final int DIV;
    public static final int REM;
    public static final int NEG;
    public static final int SHL;
    public static final int SHR;
    public static final int USHR;
    public static final int AND;
    public static final int OR;
    public static final int XOR;
    public static final int EQ;
    public static final int NE;
    public static final int LT;
    public static final int GE;
    public static final int GT;
    public static final int LE;
    private final int access;
    private final org.objectweb.asm.Type returnType;
    private final org.objectweb.asm.Type[] argumentTypes;
    private final java.util.List localTypes;

    public void <init>(org.objectweb.asm.MethodVisitor, int, java.lang.String, java.lang.String)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor r1;
        int i0;
        java.lang.String r2, r3;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.MethodVisitor;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void <init>(int,org.objectweb.asm.MethodVisitor,int,java.lang.String,java.lang.String)>(262144, r1, i0, r2, r3);

        return;
    }

    protected void <init>(int, org.objectweb.asm.MethodVisitor, int, java.lang.String, java.lang.String)
    {
        org.objectweb.asm.MethodVisitor r2;
        org.objectweb.asm.Type $r4;
        java.util.ArrayList $r3;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        int i0, i1;
        org.objectweb.asm.Type[] $r5;
        java.lang.String r1, r6;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        r2 := @parameter1: org.objectweb.asm.MethodVisitor;

        i1 := @parameter2: int;

        r6 := @parameter3: java.lang.String;

        r1 := @parameter4: java.lang.String;

        specialinvoke r0.<org.objectweb.asm.commons.LocalVariablesSorter: void <init>(int,int,java.lang.String,org.objectweb.asm.MethodVisitor)>(i0, i1, r1, r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.objectweb.asm.commons.GeneratorAdapter: java.util.List localTypes> = $r3;

        r0.<org.objectweb.asm.commons.GeneratorAdapter: int access> = i1;

        $r4 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getReturnType(java.lang.String)>(r1);

        r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type returnType> = $r4;

        $r5 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)>(r1);

        r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type[] argumentTypes> = $r5;

        return;
    }

    public void <init>(int, org.objectweb.asm.commons.Method, org.objectweb.asm.MethodVisitor)
    {
        org.objectweb.asm.commons.Method r2;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor r1;
        int i0;
        java.lang.String $r3;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        r2 := @parameter1: org.objectweb.asm.commons.Method;

        r1 := @parameter2: org.objectweb.asm.MethodVisitor;

        $r3 = virtualinvoke r2.<org.objectweb.asm.commons.Method: java.lang.String getDescriptor()>();

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void <init>(org.objectweb.asm.MethodVisitor,int,java.lang.String,java.lang.String)>(r1, i0, null, $r3);

        return;
    }

    public void <init>(int, org.objectweb.asm.commons.Method, java.lang.String, org.objectweb.asm.Type[], org.objectweb.asm.ClassVisitor)
    {
        org.objectweb.asm.MethodVisitor $r8;
        java.lang.String[] $r7;
        org.objectweb.asm.commons.Method r1;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        int i0;
        org.objectweb.asm.Type[] r6;
        java.lang.String $r3, $r4, r5;
        org.objectweb.asm.ClassVisitor r2;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: org.objectweb.asm.commons.Method;

        r5 := @parameter2: java.lang.String;

        r6 := @parameter3: org.objectweb.asm.Type[];

        r2 := @parameter4: org.objectweb.asm.ClassVisitor;

        $r3 = virtualinvoke r1.<org.objectweb.asm.commons.Method: java.lang.String getName()>();

        $r4 = virtualinvoke r1.<org.objectweb.asm.commons.Method: java.lang.String getDescriptor()>();

        $r7 = staticinvoke <org.objectweb.asm.commons.GeneratorAdapter: java.lang.String[] getInternalNames(org.objectweb.asm.Type[])>(r6);

        $r8 = virtualinvoke r2.<org.objectweb.asm.ClassVisitor: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i0, $r3, $r4, r5, $r7);

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void <init>(int,org.objectweb.asm.commons.Method,org.objectweb.asm.MethodVisitor)>(i0, r1, $r8);

        return;
    }

    private static java.lang.String[] getInternalNames(org.objectweb.asm.Type[])
    {
        int $i0, $i1, i2;
        org.objectweb.asm.Type[] r0;
        java.lang.String[] r1;
        java.lang.String $r3;
        org.objectweb.asm.Type $r2;

        r0 := @parameter0: org.objectweb.asm.Type[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label2:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label3;

        $r2 = r0[i2];

        $r3 = virtualinvoke $r2.<org.objectweb.asm.Type: java.lang.String getInternalName()>();

        r1[i2] = $r3;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r1;
    }

    public void push(boolean)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        byte $b0;
        boolean z0;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void push(int)>($b0);

        return;
    }

    public void push(int)
    {
        org.objectweb.asm.MethodVisitor $r2, $r3, $r4, $r5;
        java.lang.Integer $r6;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        int i0, $i1, $i3, $i5, $i7;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        $i3 = (int) -1;

        if i0 < $i3 goto label1;

        if i0 > 5 goto label1;

        $r5 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $i1 = 3 + i0;

        virtualinvoke $r5.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>($i1);

        goto label4;

     label1:
        $i5 = (int) -128;

        if i0 < $i5 goto label2;

        if i0 > 127 goto label2;

        $r4 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r4.<org.objectweb.asm.MethodVisitor: void visitIntInsn(int,int)>(16, i0);

        goto label4;

     label2:
        $i7 = (int) -32768;

        if i0 < $i7 goto label3;

        if i0 > 32767 goto label3;

        $r3 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r3.<org.objectweb.asm.MethodVisitor: void visitIntInsn(int,int)>(17, i0);

        goto label4;

     label3:
        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $r6 = new java.lang.Integer;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r6);

     label4:
        return;
    }

    public void push(long)
    {
        org.objectweb.asm.MethodVisitor $r1, $r3;
        long l0;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        byte $b1, $b4;
        java.lang.Long $r2;
        int $i2, $i3;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        $b4 = l0 cmp 1L;

        if $b4 != 0 goto label2;

     label1:
        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $i2 = (int) l0;

        $i3 = 9 + $i2;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>($i3);

        goto label3;

     label2:
        $r3 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(l0);

        virtualinvoke $r3.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r2);

     label3:
        return;
    }

    public void push(float)
    {
        java.lang.Float $r1;
        org.objectweb.asm.MethodVisitor $r2, $r3;
        long $l1;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        byte $b2;
        int $i0, $i3, $i4;
        float f0;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        $l1 = (long) $i0;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        if $i0 == 1065353216 goto label1;

        if $i0 != 1073741824 goto label2;

     label1:
        $r3 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $i3 = (int) f0;

        $i4 = 11 + $i3;

        virtualinvoke $r3.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>($i4);

        goto label3;

     label2:
        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $r1 = new java.lang.Float;

        specialinvoke $r1.<java.lang.Float: void <init>(float)>(f0);

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r1);

     label3:
        return;
    }

    public void push(double)
    {
        org.objectweb.asm.MethodVisitor $r1, $r3;
        java.lang.Double $r2;
        long $l0;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        byte $b1, $b4;
        int $i2, $i3;
        double d0;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $b4 = $l0 cmp 4607182418800017408L;

        if $b4 != 0 goto label2;

     label1:
        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $i2 = (int) d0;

        $i3 = 14 + $i2;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>($i3);

        goto label3;

     label2:
        $r3 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $r2 = new java.lang.Double;

        specialinvoke $r2.<java.lang.Double: void <init>(double)>(d0);

        virtualinvoke $r3.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r2);

     label3:
        return;
    }

    public void push(java.lang.String)
    {
        org.objectweb.asm.commons.GeneratorAdapter r1;
        org.objectweb.asm.MethodVisitor $r2, $r3;
        java.lang.String r0;

        r1 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r3 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r3.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(1);

        goto label2;

     label1:
        $r2 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r0);

     label2:
        return;
    }

    public void push(org.objectweb.asm.Type)
    {
        org.objectweb.asm.MethodVisitor $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        org.objectweb.asm.Type r0;
        org.objectweb.asm.commons.GeneratorAdapter r1;
        int $i0;

        r1 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r0 := @parameter0: org.objectweb.asm.Type;

        if r0 != null goto label01;

        $r11 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r11.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(1);

        goto label11;

     label01:
        $i0 = virtualinvoke r0.<org.objectweb.asm.Type: int getSort()>();

        tableswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label08;
            case 8: goto label09;
            default: goto label10;
        };

     label02:
        $r9 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r9.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Boolean", "TYPE", "Ljava/lang/Class;");

        goto label11;

     label03:
        $r8 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r8.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Character", "TYPE", "Ljava/lang/Class;");

        goto label11;

     label04:
        $r7 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Byte", "TYPE", "Ljava/lang/Class;");

        goto label11;

     label05:
        $r6 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r6.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Short", "TYPE", "Ljava/lang/Class;");

        goto label11;

     label06:
        $r5 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r5.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Integer", "TYPE", "Ljava/lang/Class;");

        goto label11;

     label07:
        $r4 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r4.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Float", "TYPE", "Ljava/lang/Class;");

        goto label11;

     label08:
        $r3 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r3.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Long", "TYPE", "Ljava/lang/Class;");

        goto label11;

     label09:
        $r2 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Double", "TYPE", "Ljava/lang/Class;");

        goto label11;

     label10:
        $r10 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r10.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r0);

     label11:
        return;
    }

    public void push(org.objectweb.asm.Handle)
    {
        org.objectweb.asm.Handle r1;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r2;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Handle;

        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r1);

        return;
    }

    private int getArgIndex(int)
    {
        org.objectweb.asm.Type $r2;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        byte $b4;
        int $i0, $i1, i2, $i3, i5, i6;
        org.objectweb.asm.Type[] $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i2 := @parameter0: int;

        $i0 = r0.<org.objectweb.asm.commons.GeneratorAdapter: int access>;

        $i1 = $i0 & 8;

        if $i1 != 0 goto label1;

        $b4 = 1;

        goto label2;

     label1:
        $b4 = 0;

     label2:
        i5 = $b4;

        i6 = 0;

     label3:
        if i6 >= i2 goto label4;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type[] argumentTypes>;

        $r2 = $r1[i6];

        $i3 = virtualinvoke $r2.<org.objectweb.asm.Type: int getSize()>();

        i5 = i5 + $i3;

        i6 = i6 + 1;

        goto label3;

     label4:
        return i5;
    }

    private void loadInsn(org.objectweb.asm.Type, int)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r2;
        int $i0, i1;
        org.objectweb.asm.Type r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Type;

        i1 := @parameter1: int;

        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<org.objectweb.asm.Type: int getOpcode(int)>(21);

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>($i0, i1);

        return;
    }

    private void storeInsn(org.objectweb.asm.Type, int)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r2;
        int $i0, i1;
        org.objectweb.asm.Type r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Type;

        i1 := @parameter1: int;

        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<org.objectweb.asm.Type: int getOpcode(int)>(54);

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>($i0, i1);

        return;
    }

    public void loadThis()
    {
        java.lang.IllegalStateException $r2;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1;
        int $i0, $i1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $i0 = r0.<org.objectweb.asm.commons.GeneratorAdapter: int access>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("no \'this\' pointer within static method");

        throw $r2;

     label1:
        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        return;
    }

    public void loadArg(int)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        int i0, $i1;
        org.objectweb.asm.Type[] $r1;
        org.objectweb.asm.Type $r2;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type[] argumentTypes>;

        $r2 = $r1[i0];

        $i1 = specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: int getArgIndex(int)>(i0);

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void loadInsn(org.objectweb.asm.Type,int)>($r2, $i1);

        return;
    }

    public void loadArgs(int, int)
    {
        org.objectweb.asm.Type r2;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        int i0, i1, $i2, $i3, i4, i5;
        org.objectweb.asm.Type[] $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i4 = specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: int getArgIndex(int)>(i0);

        i5 = 0;

     label1:
        if i5 >= i1 goto label2;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type[] argumentTypes>;

        $i2 = i0 + i5;

        r2 = $r1[$i2];

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void loadInsn(org.objectweb.asm.Type,int)>(r2, i4);

        $i3 = virtualinvoke r2.<org.objectweb.asm.Type: int getSize()>();

        i4 = i4 + $i3;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public void loadArgs()
    {
        int $i0;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.Type[] $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type[] argumentTypes>;

        $i0 = lengthof $r1;

        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void loadArgs(int,int)>(0, $i0);

        return;
    }

    public void loadArgArray()
    {
        org.objectweb.asm.Type $r2, $r5, $r6;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        int $i0, $i1, i2;
        org.objectweb.asm.Type[] $r1, $r3, $r4;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type[] argumentTypes>;

        $i0 = lengthof $r1;

        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void push(int)>($i0);

        $r2 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type OBJECT_TYPE>;

        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void newArray(org.objectweb.asm.Type)>($r2);

        i2 = 0;

     label1:
        $r3 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type[] argumentTypes>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label2;

        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void dup()>();

        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void push(int)>(i2);

        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void loadArg(int)>(i2);

        $r4 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type[] argumentTypes>;

        $r5 = $r4[i2];

        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void box(org.objectweb.asm.Type)>($r5);

        $r6 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type OBJECT_TYPE>;

        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void arrayStore(org.objectweb.asm.Type)>($r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void storeArg(int)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        int i0, $i1;
        org.objectweb.asm.Type[] $r1;
        org.objectweb.asm.Type $r2;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type[] argumentTypes>;

        $r2 = $r1[i0];

        $i1 = specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: int getArgIndex(int)>(i0);

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void storeInsn(org.objectweb.asm.Type,int)>($r2, $i1);

        return;
    }

    public org.objectweb.asm.Type getLocalType(int)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        java.util.List $r1;
        int i0, $i1, $i2;
        java.lang.Object $r2;
        org.objectweb.asm.Type $r3;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: java.util.List localTypes>;

        $i1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: int firstLocal>;

        $i2 = i0 - $i1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i2);

        $r3 = (org.objectweb.asm.Type) $r2;

        return $r3;
    }

    protected void setLocalType(int, org.objectweb.asm.Type)
    {
        org.objectweb.asm.Type r2;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        java.util.List $r1, $r3, $r4;
        int i0, $i1, i2, $i3, $i4;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        r2 := @parameter1: org.objectweb.asm.Type;

        $i1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: int firstLocal>;

        i2 = i0 - $i1;

     label1:
        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: java.util.List localTypes>;

        $i3 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i4 = i2 + 1;

        if $i3 >= $i4 goto label2;

        $r4 = r0.<org.objectweb.asm.commons.GeneratorAdapter: java.util.List localTypes>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(null);

        goto label1;

     label2:
        $r3 = r0.<org.objectweb.asm.commons.GeneratorAdapter: java.util.List localTypes>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i2, r2);

        return;
    }

    public void loadLocal(int)
    {
        int i0;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.Type $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type getLocalType(int)>(i0);

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void loadInsn(org.objectweb.asm.Type,int)>($r1, i0);

        return;
    }

    public void loadLocal(int, org.objectweb.asm.Type)
    {
        int i0;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.Type r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: org.objectweb.asm.Type;

        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void setLocalType(int,org.objectweb.asm.Type)>(i0, r1);

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void loadInsn(org.objectweb.asm.Type,int)>(r1, i0);

        return;
    }

    public void storeLocal(int)
    {
        int i0;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.Type $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type getLocalType(int)>(i0);

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void storeInsn(org.objectweb.asm.Type,int)>($r1, i0);

        return;
    }

    public void storeLocal(int, org.objectweb.asm.Type)
    {
        int i0;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.Type r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: org.objectweb.asm.Type;

        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void setLocalType(int,org.objectweb.asm.Type)>(i0, r1);

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void storeInsn(org.objectweb.asm.Type,int)>(r1, i0);

        return;
    }

    public void arrayLoad(org.objectweb.asm.Type)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r2;
        int $i0;
        org.objectweb.asm.Type r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Type;

        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<org.objectweb.asm.Type: int getOpcode(int)>(46);

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void arrayStore(org.objectweb.asm.Type)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r2;
        int $i0;
        org.objectweb.asm.Type r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Type;

        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<org.objectweb.asm.Type: int getOpcode(int)>(79);

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void pop()
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(87);

        return;
    }

    public void pop2()
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(88);

        return;
    }

    public void dup()
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(89);

        return;
    }

    public void dup2()
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(92);

        return;
    }

    public void dupX1()
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(90);

        return;
    }

    public void dupX2()
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(91);

        return;
    }

    public void dup2X1()
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(93);

        return;
    }

    public void dup2X2()
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(94);

        return;
    }

    public void swap()
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(95);

        return;
    }

    public void swap(org.objectweb.asm.Type, org.objectweb.asm.Type)
    {
        org.objectweb.asm.commons.GeneratorAdapter r2;
        int $i0, $i1, $i2;
        org.objectweb.asm.Type r0, r1;

        r2 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Type;

        r0 := @parameter1: org.objectweb.asm.Type;

        $i0 = virtualinvoke r0.<org.objectweb.asm.Type: int getSize()>();

        if $i0 != 1 goto label2;

        $i2 = virtualinvoke r1.<org.objectweb.asm.Type: int getSize()>();

        if $i2 != 1 goto label1;

        virtualinvoke r2.<org.objectweb.asm.commons.GeneratorAdapter: void swap()>();

        goto label4;

     label1:
        virtualinvoke r2.<org.objectweb.asm.commons.GeneratorAdapter: void dupX2()>();

        virtualinvoke r2.<org.objectweb.asm.commons.GeneratorAdapter: void pop()>();

        goto label4;

     label2:
        $i1 = virtualinvoke r1.<org.objectweb.asm.Type: int getSize()>();

        if $i1 != 1 goto label3;

        virtualinvoke r2.<org.objectweb.asm.commons.GeneratorAdapter: void dup2X1()>();

        virtualinvoke r2.<org.objectweb.asm.commons.GeneratorAdapter: void pop2()>();

        goto label4;

     label3:
        virtualinvoke r2.<org.objectweb.asm.commons.GeneratorAdapter: void dup2X2()>();

        virtualinvoke r2.<org.objectweb.asm.commons.GeneratorAdapter: void pop2()>();

     label4:
        return;
    }

    public void math(int, org.objectweb.asm.Type)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r2;
        int i0, $i1;
        org.objectweb.asm.Type r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: org.objectweb.asm.Type;

        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $i1 = virtualinvoke r1.<org.objectweb.asm.Type: int getOpcode(int)>(i0);

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>($i1);

        return;
    }

    public void not()
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1, $r2;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(4);

        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(130);

        return;
    }

    public void iinc(int, int)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1;
        int i0, i1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitIincInsn(int,int)>(i0, i1);

        return;
    }

    public void cast(org.objectweb.asm.Type, org.objectweb.asm.Type)
    {
        org.objectweb.asm.MethodVisitor $r12, $r13, $r14, $r15, $r16, $r17, $r20, $r22, $r23, $r26, $r28, $r29, $r32, $r34, $r35;
        org.objectweb.asm.Type r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r18, $r19, $r21, $r24, $r25, $r27, $r30, $r31, $r33;
        org.objectweb.asm.commons.GeneratorAdapter r11;

        r11 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r0 := @parameter0: org.objectweb.asm.Type;

        r1 := @parameter1: org.objectweb.asm.Type;

        if r0 == r1 goto label15;

        $r2 = <org.objectweb.asm.Type: org.objectweb.asm.Type DOUBLE_TYPE>;

        if r0 != $r2 goto label03;

        $r30 = <org.objectweb.asm.Type: org.objectweb.asm.Type FLOAT_TYPE>;

        if r1 != $r30 goto label01;

        $r35 = r11.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r35.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(144);

        goto label15;

     label01:
        $r31 = <org.objectweb.asm.Type: org.objectweb.asm.Type LONG_TYPE>;

        if r1 != $r31 goto label02;

        $r34 = r11.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r34.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(143);

        goto label15;

     label02:
        $r32 = r11.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r32.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(142);

        $r33 = <org.objectweb.asm.Type: org.objectweb.asm.Type INT_TYPE>;

        virtualinvoke r11.<org.objectweb.asm.commons.GeneratorAdapter: void cast(org.objectweb.asm.Type,org.objectweb.asm.Type)>($r33, r1);

        goto label15;

     label03:
        $r3 = <org.objectweb.asm.Type: org.objectweb.asm.Type FLOAT_TYPE>;

        if r0 != $r3 goto label06;

        $r24 = <org.objectweb.asm.Type: org.objectweb.asm.Type DOUBLE_TYPE>;

        if r1 != $r24 goto label04;

        $r29 = r11.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r29.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(141);

        goto label15;

     label04:
        $r25 = <org.objectweb.asm.Type: org.objectweb.asm.Type LONG_TYPE>;

        if r1 != $r25 goto label05;

        $r28 = r11.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r28.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(140);

        goto label15;

     label05:
        $r26 = r11.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r26.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(139);

        $r27 = <org.objectweb.asm.Type: org.objectweb.asm.Type INT_TYPE>;

        virtualinvoke r11.<org.objectweb.asm.commons.GeneratorAdapter: void cast(org.objectweb.asm.Type,org.objectweb.asm.Type)>($r27, r1);

        goto label15;

     label06:
        $r4 = <org.objectweb.asm.Type: org.objectweb.asm.Type LONG_TYPE>;

        if r0 != $r4 goto label09;

        $r18 = <org.objectweb.asm.Type: org.objectweb.asm.Type DOUBLE_TYPE>;

        if r1 != $r18 goto label07;

        $r23 = r11.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r23.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(138);

        goto label15;

     label07:
        $r19 = <org.objectweb.asm.Type: org.objectweb.asm.Type FLOAT_TYPE>;

        if r1 != $r19 goto label08;

        $r22 = r11.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r22.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(137);

        goto label15;

     label08:
        $r20 = r11.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r20.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(136);

        $r21 = <org.objectweb.asm.Type: org.objectweb.asm.Type INT_TYPE>;

        virtualinvoke r11.<org.objectweb.asm.commons.GeneratorAdapter: void cast(org.objectweb.asm.Type,org.objectweb.asm.Type)>($r21, r1);

        goto label15;

     label09:
        $r5 = <org.objectweb.asm.Type: org.objectweb.asm.Type BYTE_TYPE>;

        if r1 != $r5 goto label10;

        $r17 = r11.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r17.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(145);

        goto label15;

     label10:
        $r6 = <org.objectweb.asm.Type: org.objectweb.asm.Type CHAR_TYPE>;

        if r1 != $r6 goto label11;

        $r16 = r11.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r16.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(146);

        goto label15;

     label11:
        $r7 = <org.objectweb.asm.Type: org.objectweb.asm.Type DOUBLE_TYPE>;

        if r1 != $r7 goto label12;

        $r15 = r11.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r15.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(135);

        goto label15;

     label12:
        $r8 = <org.objectweb.asm.Type: org.objectweb.asm.Type FLOAT_TYPE>;

        if r1 != $r8 goto label13;

        $r14 = r11.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r14.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(134);

        goto label15;

     label13:
        $r9 = <org.objectweb.asm.Type: org.objectweb.asm.Type LONG_TYPE>;

        if r1 != $r9 goto label14;

        $r13 = r11.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r13.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(133);

        goto label15;

     label14:
        $r10 = <org.objectweb.asm.Type: org.objectweb.asm.Type SHORT_TYPE>;

        if r1 != $r10 goto label15;

        $r12 = r11.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r12.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(147);

     label15:
        return;
    }

    private static org.objectweb.asm.Type getBoxedType(org.objectweb.asm.Type)
    {
        org.objectweb.asm.Type r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0;

        r0 := @parameter0: org.objectweb.asm.Type;

        $i0 = virtualinvoke r0.<org.objectweb.asm.Type: int getSort()>();

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label1;
            case 4: goto label3;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label7;
            case 8: goto label8;
            default: goto label9;
        };

     label1:
        $r6 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type BYTE_TYPE>;

        return $r6;

     label2:
        $r8 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type BOOLEAN_TYPE>;

        return $r8;

     label3:
        $r5 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type SHORT_TYPE>;

        return $r5;

     label4:
        $r7 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type CHARACTER_TYPE>;

        return $r7;

     label5:
        $r4 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type INTEGER_TYPE>;

        return $r4;

     label6:
        $r3 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type FLOAT_TYPE>;

        return $r3;

     label7:
        $r2 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type LONG_TYPE>;

        return $r2;

     label8:
        $r1 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type DOUBLE_TYPE>;

        return $r1;

     label9:
        return r0;
    }

    public void box(org.objectweb.asm.Type)
    {
        org.objectweb.asm.Type r0, $r1, $r2, $r6;
        org.objectweb.asm.commons.Method $r4;
        org.objectweb.asm.commons.GeneratorAdapter r3;
        int $i0, $i1, $i2;
        org.objectweb.asm.Type[] $r5;

        r3 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r0 := @parameter0: org.objectweb.asm.Type;

        $i0 = virtualinvoke r0.<org.objectweb.asm.Type: int getSort()>();

        if $i0 == 10 goto label1;

        $i1 = virtualinvoke r0.<org.objectweb.asm.Type: int getSort()>();

        if $i1 != 9 goto label2;

     label1:
        return;

     label2:
        $r1 = <org.objectweb.asm.Type: org.objectweb.asm.Type VOID_TYPE>;

        if r0 != $r1 goto label3;

        virtualinvoke r3.<org.objectweb.asm.commons.GeneratorAdapter: void push(java.lang.String)>(null);

        goto label6;

     label3:
        $r2 = staticinvoke <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type getBoxedType(org.objectweb.asm.Type)>(r0);

        virtualinvoke r3.<org.objectweb.asm.commons.GeneratorAdapter: void newInstance(org.objectweb.asm.Type)>($r2);

        $i2 = virtualinvoke r0.<org.objectweb.asm.Type: int getSize()>();

        if $i2 != 2 goto label4;

        virtualinvoke r3.<org.objectweb.asm.commons.GeneratorAdapter: void dupX2()>();

        virtualinvoke r3.<org.objectweb.asm.commons.GeneratorAdapter: void dupX2()>();

        virtualinvoke r3.<org.objectweb.asm.commons.GeneratorAdapter: void pop()>();

        goto label5;

     label4:
        virtualinvoke r3.<org.objectweb.asm.commons.GeneratorAdapter: void dupX1()>();

        virtualinvoke r3.<org.objectweb.asm.commons.GeneratorAdapter: void swap()>();

     label5:
        $r4 = new org.objectweb.asm.commons.Method;

        $r6 = <org.objectweb.asm.Type: org.objectweb.asm.Type VOID_TYPE>;

        $r5 = newarray (org.objectweb.asm.Type)[1];

        $r5[0] = r0;

        specialinvoke $r4.<org.objectweb.asm.commons.Method: void <init>(java.lang.String,org.objectweb.asm.Type,org.objectweb.asm.Type[])>("<init>", $r6, $r5);

        virtualinvoke r3.<org.objectweb.asm.commons.GeneratorAdapter: void invokeConstructor(org.objectweb.asm.Type,org.objectweb.asm.commons.Method)>($r2, $r4);

     label6:
        return;
    }

    public void valueOf(org.objectweb.asm.Type)
    {
        org.objectweb.asm.Type r0, $r1, $r2;
        org.objectweb.asm.commons.Method $r4;
        org.objectweb.asm.commons.GeneratorAdapter r3;
        int $i0, $i1;
        org.objectweb.asm.Type[] $r5;

        r3 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r0 := @parameter0: org.objectweb.asm.Type;

        $i0 = virtualinvoke r0.<org.objectweb.asm.Type: int getSort()>();

        if $i0 == 10 goto label1;

        $i1 = virtualinvoke r0.<org.objectweb.asm.Type: int getSort()>();

        if $i1 != 9 goto label2;

     label1:
        return;

     label2:
        $r1 = <org.objectweb.asm.Type: org.objectweb.asm.Type VOID_TYPE>;

        if r0 != $r1 goto label3;

        virtualinvoke r3.<org.objectweb.asm.commons.GeneratorAdapter: void push(java.lang.String)>(null);

        goto label4;

     label3:
        $r2 = staticinvoke <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type getBoxedType(org.objectweb.asm.Type)>(r0);

        $r4 = new org.objectweb.asm.commons.Method;

        $r5 = newarray (org.objectweb.asm.Type)[1];

        $r5[0] = r0;

        specialinvoke $r4.<org.objectweb.asm.commons.Method: void <init>(java.lang.String,org.objectweb.asm.Type,org.objectweb.asm.Type[])>("valueOf", $r2, $r5);

        virtualinvoke r3.<org.objectweb.asm.commons.GeneratorAdapter: void invokeStatic(org.objectweb.asm.Type,org.objectweb.asm.commons.Method)>($r2, $r4);

     label4:
        return;
    }

    public void unbox(org.objectweb.asm.Type)
    {
        org.objectweb.asm.commons.Method r3;
        org.objectweb.asm.commons.GeneratorAdapter r1;
        int $i0;
        org.objectweb.asm.Type r0, r2;

        r1 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r0 := @parameter0: org.objectweb.asm.Type;

        r2 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type NUMBER_TYPE>;

        r3 = null;

        $i0 = virtualinvoke r0.<org.objectweb.asm.Type: int getSort()>();

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label03;
            case 2: goto label02;
            case 3: goto label07;
            case 4: goto label07;
            case 5: goto label07;
            case 6: goto label05;
            case 7: goto label06;
            case 8: goto label04;
            default: goto label08;
        };

     label01:
        return;

     label02:
        r2 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type CHARACTER_TYPE>;

        r3 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.commons.Method CHAR_VALUE>;

        goto label08;

     label03:
        r2 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type BOOLEAN_TYPE>;

        r3 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.commons.Method BOOLEAN_VALUE>;

        goto label08;

     label04:
        r3 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.commons.Method DOUBLE_VALUE>;

        goto label08;

     label05:
        r3 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.commons.Method FLOAT_VALUE>;

        goto label08;

     label06:
        r3 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.commons.Method LONG_VALUE>;

        goto label08;

     label07:
        r3 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.commons.Method INT_VALUE>;

     label08:
        if r3 != null goto label09;

        virtualinvoke r1.<org.objectweb.asm.commons.GeneratorAdapter: void checkCast(org.objectweb.asm.Type)>(r0);

        goto label10;

     label09:
        virtualinvoke r1.<org.objectweb.asm.commons.GeneratorAdapter: void checkCast(org.objectweb.asm.Type)>(r2);

        virtualinvoke r1.<org.objectweb.asm.commons.GeneratorAdapter: void invokeVirtual(org.objectweb.asm.Type,org.objectweb.asm.commons.Method)>(r2, r3);

     label10:
        return;
    }

    public org.objectweb.asm.Label newLabel()
    {
        org.objectweb.asm.Label $r0;
        org.objectweb.asm.commons.GeneratorAdapter r1;

        r1 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r0 = new org.objectweb.asm.Label;

        specialinvoke $r0.<org.objectweb.asm.Label: void <init>()>();

        return $r0;
    }

    public void mark(org.objectweb.asm.Label)
    {
        org.objectweb.asm.Label r1;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r2;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Label;

        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(r1);

        return;
    }

    public org.objectweb.asm.Label mark()
    {
        org.objectweb.asm.Label $r0;
        org.objectweb.asm.commons.GeneratorAdapter r1;
        org.objectweb.asm.MethodVisitor $r2;

        r1 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r0 = new org.objectweb.asm.Label;

        specialinvoke $r0.<org.objectweb.asm.Label: void <init>()>();

        $r2 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>($r0);

        return $r0;
    }

    public void ifCmp(org.objectweb.asm.Type, int, org.objectweb.asm.Label)
    {
        org.objectweb.asm.MethodVisitor $r3, $r4, $r10, $r11, $r12, $r13, $r14;
        org.objectweb.asm.Label r2;
        org.objectweb.asm.Type r0;
        org.objectweb.asm.commons.GeneratorAdapter r1;
        short $s2, $s3, s4;
        int $i0, i1;
        java.lang.String $r9;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r1 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r0 := @parameter0: org.objectweb.asm.Type;

        i1 := @parameter1: int;

        r2 := @parameter2: org.objectweb.asm.Label;

        $i0 = virtualinvoke r0.<org.objectweb.asm.Type: int getSort()>();

        tableswitch($i0)
        {
            case 6: goto label06;
            case 7: goto label01;
            case 8: goto label02;
            case 9: goto label10;
            case 10: goto label10;
            default: goto label14;
        };

     label01:
        $r11 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r11.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(148);

        goto label22;

     label02:
        $r10 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        if i1 == 156 goto label03;

        if i1 != 157 goto label04;

     label03:
        $s2 = 151;

        goto label05;

     label04:
        $s2 = 152;

     label05:
        virtualinvoke $r10.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>($s2);

        goto label22;

     label06:
        $r12 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        if i1 == 156 goto label07;

        if i1 != 157 goto label08;

     label07:
        $s3 = 149;

        goto label09;

     label08:
        $s3 = 150;

     label09:
        virtualinvoke $r12.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>($s3);

        goto label22;

     label10:
        lookupswitch(i1)
        {
            case 153: goto label11;
            case 154: goto label12;
            default: goto label13;
        };

     label11:
        $r4 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r4.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(165, r2);

        return;

     label12:
        $r3 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r3.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(166, r2);

        return;

     label13:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad comparison for type ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label14:
        s4 = -1;

        tableswitch(i1)
        {
            case 153: goto label15;
            case 154: goto label16;
            case 155: goto label18;
            case 156: goto label17;
            case 157: goto label20;
            case 158: goto label19;
            default: goto label21;
        };

     label15:
        s4 = 159;

        goto label21;

     label16:
        s4 = 160;

        goto label21;

     label17:
        s4 = 162;

        goto label21;

     label18:
        s4 = 161;

        goto label21;

     label19:
        s4 = 164;

        goto label21;

     label20:
        s4 = 163;

     label21:
        $r13 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r13.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(s4, r2);

        return;

     label22:
        $r14 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r14.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(i1, r2);

        return;
    }

    public void ifICmp(int, org.objectweb.asm.Label)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        int i0;
        org.objectweb.asm.Label r1;
        org.objectweb.asm.Type $r2;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: org.objectweb.asm.Label;

        $r2 = <org.objectweb.asm.Type: org.objectweb.asm.Type INT_TYPE>;

        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void ifCmp(org.objectweb.asm.Type,int,org.objectweb.asm.Label)>($r2, i0, r1);

        return;
    }

    public void ifZCmp(int, org.objectweb.asm.Label)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r2;
        int i0;
        org.objectweb.asm.Label r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: org.objectweb.asm.Label;

        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(i0, r1);

        return;
    }

    public void ifNull(org.objectweb.asm.Label)
    {
        org.objectweb.asm.Label r1;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r2;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Label;

        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(198, r1);

        return;
    }

    public void ifNonNull(org.objectweb.asm.Label)
    {
        org.objectweb.asm.Label r1;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r2;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Label;

        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(199, r1);

        return;
    }

    public void goTo(org.objectweb.asm.Label)
    {
        org.objectweb.asm.Label r1;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r2;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Label;

        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(167, r1);

        return;
    }

    public void 'ret'(int)
    {
        int i0;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(169, i0);

        return;
    }

    public void tableSwitch(int[], org.objectweb.asm.commons.TableSwitchGenerator)
    {
        org.objectweb.asm.commons.GeneratorAdapter r1;
        org.objectweb.asm.commons.TableSwitchGenerator r2;
        byte $b8;
        int[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        boolean $z0;
        float $f0, $f1, f2;

        r1 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r0 := @parameter0: int[];

        r2 := @parameter1: org.objectweb.asm.commons.TableSwitchGenerator;

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        f2 = 0.0F;

        goto label2;

     label1:
        $i1 = lengthof r0;

        $f1 = (float) $i1;

        $i2 = lengthof r0;

        $i3 = $i2 - 1;

        $i5 = r0[$i3];

        $i4 = r0[0];

        $i6 = $i5 - $i4;

        $i7 = $i6 + 1;

        $f0 = (float) $i7;

        f2 = $f1 / $f0;

     label2:
        $b8 = f2 cmpl 0.5F;

        $i9 = (int) $b8;

        if $i9 < 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        virtualinvoke r1.<org.objectweb.asm.commons.GeneratorAdapter: void tableSwitch(int[],org.objectweb.asm.commons.TableSwitchGenerator,boolean)>(r0, r2, $z0);

        return;
    }

    public void tableSwitch(int[], org.objectweb.asm.commons.TableSwitchGenerator, boolean)
    {
        org.objectweb.asm.MethodVisitor $r5, $r8;
        int[] r0;
        boolean z0;
        org.objectweb.asm.Label $r2, $r3, $r6, $r7, r9, $r10;
        org.objectweb.asm.commons.GeneratorAdapter r1;
        org.objectweb.asm.commons.TableSwitchGenerator r4;
        int $i0, $i1, i2, i3, $i4, i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19;
        org.objectweb.asm.Label[] r12, r13;
        java.lang.IllegalArgumentException $r11;

        r1 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r0 := @parameter0: int[];

        r4 := @parameter1: org.objectweb.asm.commons.TableSwitchGenerator;

        z0 := @parameter2: boolean;

        i15 = 1;

     label01:
        $i0 = lengthof r0;

        if i15 >= $i0 goto label03;

        $i14 = r0[i15];

        $i12 = i15 - 1;

        $i13 = r0[$i12];

        if $i14 >= $i13 goto label02;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keys must be sorted ascending");

        throw $r11;

     label02:
        i15 = i15 + 1;

        goto label01;

     label03:
        $r2 = virtualinvoke r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Label newLabel()>();

        $r3 = virtualinvoke r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Label newLabel()>();

        $i1 = lengthof r0;

        if $i1 <= 0 goto label13;

        i2 = lengthof r0;

        i3 = r0[0];

        $i4 = i2 - 1;

        i5 = r0[$i4];

        $i6 = i5 - i3;

        i7 = $i6 + 1;

        if z0 == 0 goto label09;

        r12 = newarray (org.objectweb.asm.Label)[i7];

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r12, $r2);

        i16 = 0;

     label04:
        if i16 >= i2 goto label05;

        $i10 = r0[i16];

        $i11 = $i10 - i3;

        $r10 = virtualinvoke r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Label newLabel()>();

        r12[$i11] = $r10;

        i16 = i16 + 1;

        goto label04;

     label05:
        $r8 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r8.<org.objectweb.asm.MethodVisitor: void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])>(i3, i5, $r2, r12);

        i17 = 0;

     label06:
        if i17 >= i7 goto label08;

        r9 = r12[i17];

        if r9 == $r2 goto label07;

        virtualinvoke r1.<org.objectweb.asm.commons.GeneratorAdapter: void mark(org.objectweb.asm.Label)>(r9);

        $i9 = i17 + i3;

        interfaceinvoke r4.<org.objectweb.asm.commons.TableSwitchGenerator: void generateCase(int,org.objectweb.asm.Label)>($i9, $r3);

     label07:
        i17 = i17 + 1;

        goto label06;

     label08:
        goto label13;

     label09:
        r13 = newarray (org.objectweb.asm.Label)[i2];

        i18 = 0;

     label10:
        if i18 >= i2 goto label11;

        $r7 = virtualinvoke r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Label newLabel()>();

        r13[i18] = $r7;

        i18 = i18 + 1;

        goto label10;

     label11:
        $r5 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r5.<org.objectweb.asm.MethodVisitor: void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])>($r2, r0, r13);

        i19 = 0;

     label12:
        if i19 >= i2 goto label13;

        $r6 = r13[i19];

        virtualinvoke r1.<org.objectweb.asm.commons.GeneratorAdapter: void mark(org.objectweb.asm.Label)>($r6);

        $i8 = r0[i19];

        interfaceinvoke r4.<org.objectweb.asm.commons.TableSwitchGenerator: void generateCase(int,org.objectweb.asm.Label)>($i8, $r3);

        i19 = i19 + 1;

        goto label12;

     label13:
        virtualinvoke r1.<org.objectweb.asm.commons.GeneratorAdapter: void mark(org.objectweb.asm.Label)>($r2);

        interfaceinvoke r4.<org.objectweb.asm.commons.TableSwitchGenerator: void generateDefault()>();

        virtualinvoke r1.<org.objectweb.asm.commons.GeneratorAdapter: void mark(org.objectweb.asm.Label)>($r3);

        return;
    }

    public void returnValue()
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r2;
        int $i0;
        org.objectweb.asm.Type $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type returnType>;

        $i0 = virtualinvoke $r1.<org.objectweb.asm.Type: int getOpcode(int)>(172);

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    private void fieldInsn(int, org.objectweb.asm.Type, java.lang.String, org.objectweb.asm.Type)
    {
        org.objectweb.asm.MethodVisitor $r2;
        org.objectweb.asm.Type r1, r5;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        int i0;
        java.lang.String $r3, r4, $r6;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: org.objectweb.asm.Type;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: org.objectweb.asm.Type;

        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $r3 = virtualinvoke r1.<org.objectweb.asm.Type: java.lang.String getInternalName()>();

        $r6 = virtualinvoke r5.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(i0, $r3, r4, $r6);

        return;
    }

    public void getStatic(org.objectweb.asm.Type, java.lang.String, org.objectweb.asm.Type)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        java.lang.String r2;
        org.objectweb.asm.Type r1, r3;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Type;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.objectweb.asm.Type;

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void fieldInsn(int,org.objectweb.asm.Type,java.lang.String,org.objectweb.asm.Type)>(178, r1, r2, r3);

        return;
    }

    public void putStatic(org.objectweb.asm.Type, java.lang.String, org.objectweb.asm.Type)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        java.lang.String r2;
        org.objectweb.asm.Type r1, r3;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Type;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.objectweb.asm.Type;

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void fieldInsn(int,org.objectweb.asm.Type,java.lang.String,org.objectweb.asm.Type)>(179, r1, r2, r3);

        return;
    }

    public void getField(org.objectweb.asm.Type, java.lang.String, org.objectweb.asm.Type)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        java.lang.String r2;
        org.objectweb.asm.Type r1, r3;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Type;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.objectweb.asm.Type;

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void fieldInsn(int,org.objectweb.asm.Type,java.lang.String,org.objectweb.asm.Type)>(180, r1, r2, r3);

        return;
    }

    public void putField(org.objectweb.asm.Type, java.lang.String, org.objectweb.asm.Type)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        java.lang.String r2;
        org.objectweb.asm.Type r1, r3;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Type;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.objectweb.asm.Type;

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void fieldInsn(int,org.objectweb.asm.Type,java.lang.String,org.objectweb.asm.Type)>(181, r1, r2, r3);

        return;
    }

    private void invokeInsn(int, org.objectweb.asm.Type, org.objectweb.asm.commons.Method)
    {
        org.objectweb.asm.MethodVisitor $r3;
        org.objectweb.asm.Type r0;
        org.objectweb.asm.commons.Method r2;
        org.objectweb.asm.commons.GeneratorAdapter r1;
        int $i0, i1;
        java.lang.String $r4, $r5, $r6;

        r1 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i1 := @parameter0: int;

        r0 := @parameter1: org.objectweb.asm.Type;

        r2 := @parameter2: org.objectweb.asm.commons.Method;

        $i0 = virtualinvoke r0.<org.objectweb.asm.Type: int getSort()>();

        if $i0 != 9 goto label1;

        $r6 = virtualinvoke r0.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        goto label2;

     label1:
        $r6 = virtualinvoke r0.<org.objectweb.asm.Type: java.lang.String getInternalName()>();

     label2:
        $r3 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $r4 = virtualinvoke r2.<org.objectweb.asm.commons.Method: java.lang.String getName()>();

        $r5 = virtualinvoke r2.<org.objectweb.asm.commons.Method: java.lang.String getDescriptor()>();

        virtualinvoke $r3.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(i1, $r6, $r4, $r5);

        return;
    }

    public void invokeVirtual(org.objectweb.asm.Type, org.objectweb.asm.commons.Method)
    {
        org.objectweb.asm.commons.Method r2;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.Type r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Type;

        r2 := @parameter1: org.objectweb.asm.commons.Method;

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void invokeInsn(int,org.objectweb.asm.Type,org.objectweb.asm.commons.Method)>(182, r1, r2);

        return;
    }

    public void invokeConstructor(org.objectweb.asm.Type, org.objectweb.asm.commons.Method)
    {
        org.objectweb.asm.commons.Method r2;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.Type r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Type;

        r2 := @parameter1: org.objectweb.asm.commons.Method;

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void invokeInsn(int,org.objectweb.asm.Type,org.objectweb.asm.commons.Method)>(183, r1, r2);

        return;
    }

    public void invokeStatic(org.objectweb.asm.Type, org.objectweb.asm.commons.Method)
    {
        org.objectweb.asm.commons.Method r2;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.Type r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Type;

        r2 := @parameter1: org.objectweb.asm.commons.Method;

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void invokeInsn(int,org.objectweb.asm.Type,org.objectweb.asm.commons.Method)>(184, r1, r2);

        return;
    }

    public void invokeInterface(org.objectweb.asm.Type, org.objectweb.asm.commons.Method)
    {
        org.objectweb.asm.commons.Method r2;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.Type r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Type;

        r2 := @parameter1: org.objectweb.asm.commons.Method;

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void invokeInsn(int,org.objectweb.asm.Type,org.objectweb.asm.commons.Method)>(185, r1, r2);

        return;
    }

    public transient void invokeDynamic(java.lang.String, java.lang.String, org.objectweb.asm.Handle, java.lang.Object[])
    {
        org.objectweb.asm.Handle r3;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        java.lang.Object[] r4;
        org.objectweb.asm.MethodVisitor $r5;
        java.lang.String r1, r2;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.objectweb.asm.Handle;

        r4 := @parameter3: java.lang.Object[];

        $r5 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r5.<org.objectweb.asm.MethodVisitor: void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>(r1, r2, r3, r4);

        return;
    }

    private void typeInsn(int, org.objectweb.asm.Type)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r2;
        int i0;
        java.lang.String $r3;
        org.objectweb.asm.Type r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: org.objectweb.asm.Type;

        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $r3 = virtualinvoke r1.<org.objectweb.asm.Type: java.lang.String getInternalName()>();

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(i0, $r3);

        return;
    }

    public void newInstance(org.objectweb.asm.Type)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.Type r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Type;

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void typeInsn(int,org.objectweb.asm.Type)>(187, r1);

        return;
    }

    public void newArray(org.objectweb.asm.Type)
    {
        org.objectweb.asm.commons.GeneratorAdapter r1;
        org.objectweb.asm.MethodVisitor $r2;
        byte b1;
        int $i0;
        org.objectweb.asm.Type r0;

        r1 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r0 := @parameter0: org.objectweb.asm.Type;

        $i0 = virtualinvoke r0.<org.objectweb.asm.Type: int getSort()>();

        tableswitch($i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            default: goto label09;
        };

     label01:
        b1 = 4;

        goto label10;

     label02:
        b1 = 5;

        goto label10;

     label03:
        b1 = 8;

        goto label10;

     label04:
        b1 = 9;

        goto label10;

     label05:
        b1 = 10;

        goto label10;

     label06:
        b1 = 6;

        goto label10;

     label07:
        b1 = 11;

        goto label10;

     label08:
        b1 = 7;

        goto label10;

     label09:
        specialinvoke r1.<org.objectweb.asm.commons.GeneratorAdapter: void typeInsn(int,org.objectweb.asm.Type)>(189, r0);

        return;

     label10:
        $r2 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitIntInsn(int,int)>(188, b1);

        return;
    }

    public void arrayLength()
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(190);

        return;
    }

    public void throwException()
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(191);

        return;
    }

    public void throwException(org.objectweb.asm.Type, java.lang.String)
    {
        org.objectweb.asm.commons.Method $r3;
        org.objectweb.asm.commons.GeneratorAdapter r0;
        java.lang.String r2;
        org.objectweb.asm.Type r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Type;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void newInstance(org.objectweb.asm.Type)>(r1);

        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void dup()>();

        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void push(java.lang.String)>(r2);

        $r3 = staticinvoke <org.objectweb.asm.commons.Method: org.objectweb.asm.commons.Method getMethod(java.lang.String)>("void <init> (String)");

        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void invokeConstructor(org.objectweb.asm.Type,org.objectweb.asm.commons.Method)>(r1, $r3);

        virtualinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void throwException()>();

        return;
    }

    public void checkCast(org.objectweb.asm.Type)
    {
        org.objectweb.asm.commons.GeneratorAdapter r2;
        org.objectweb.asm.Type r0, $r1;
        boolean $z0;

        r2 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r0 := @parameter0: org.objectweb.asm.Type;

        $r1 = <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type OBJECT_TYPE>;

        $z0 = virtualinvoke r0.<org.objectweb.asm.Type: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        specialinvoke r2.<org.objectweb.asm.commons.GeneratorAdapter: void typeInsn(int,org.objectweb.asm.Type)>(192, r0);

     label1:
        return;
    }

    public void instanceOf(org.objectweb.asm.Type)
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.Type r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r1 := @parameter0: org.objectweb.asm.Type;

        specialinvoke r0.<org.objectweb.asm.commons.GeneratorAdapter: void typeInsn(int,org.objectweb.asm.Type)>(193, r1);

        return;
    }

    public void monitorEnter()
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(194);

        return;
    }

    public void monitorExit()
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(195);

        return;
    }

    public void endMethod()
    {
        org.objectweb.asm.commons.GeneratorAdapter r0;
        org.objectweb.asm.MethodVisitor $r1, $r2;
        int $i0, $i1;

        r0 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        $i0 = r0.<org.objectweb.asm.commons.GeneratorAdapter: int access>;

        $i1 = $i0 & 1024;

        if $i1 != 0 goto label1;

        $r2 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>(0, 0);

     label1:
        $r1 = r0.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitEnd()>();

        return;
    }

    public void catchException(org.objectweb.asm.Label, org.objectweb.asm.Label, org.objectweb.asm.Type)
    {
        org.objectweb.asm.MethodVisitor $r4, $r7;
        org.objectweb.asm.Label r2, r3, $r5, $r8;
        org.objectweb.asm.Type r0;
        org.objectweb.asm.commons.GeneratorAdapter r1;
        java.lang.String $r6;

        r1 := @this: org.objectweb.asm.commons.GeneratorAdapter;

        r2 := @parameter0: org.objectweb.asm.Label;

        r3 := @parameter1: org.objectweb.asm.Label;

        r0 := @parameter2: org.objectweb.asm.Type;

        if r0 != null goto label1;

        $r7 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $r8 = virtualinvoke r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Label mark()>();

        virtualinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)>(r2, r3, $r8, null);

        goto label2;

     label1:
        $r4 = r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.MethodVisitor mv>;

        $r5 = virtualinvoke r1.<org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Label mark()>();

        $r6 = virtualinvoke r0.<org.objectweb.asm.Type: java.lang.String getInternalName()>();

        virtualinvoke $r4.<org.objectweb.asm.MethodVisitor: void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)>(r2, r3, $r5, $r6);

     label2:
        return;
    }

    static void <clinit>()
    {
        org.objectweb.asm.Type $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        org.objectweb.asm.commons.Method $r10, $r11, $r12, $r13, $r14, $r15;

        <org.objectweb.asm.commons.GeneratorAdapter: int LE> = 158;

        <org.objectweb.asm.commons.GeneratorAdapter: int GT> = 157;

        <org.objectweb.asm.commons.GeneratorAdapter: int GE> = 156;

        <org.objectweb.asm.commons.GeneratorAdapter: int LT> = 155;

        <org.objectweb.asm.commons.GeneratorAdapter: int NE> = 154;

        <org.objectweb.asm.commons.GeneratorAdapter: int EQ> = 153;

        <org.objectweb.asm.commons.GeneratorAdapter: int XOR> = 130;

        <org.objectweb.asm.commons.GeneratorAdapter: int OR> = 128;

        <org.objectweb.asm.commons.GeneratorAdapter: int AND> = 126;

        <org.objectweb.asm.commons.GeneratorAdapter: int USHR> = 124;

        <org.objectweb.asm.commons.GeneratorAdapter: int SHR> = 122;

        <org.objectweb.asm.commons.GeneratorAdapter: int SHL> = 120;

        <org.objectweb.asm.commons.GeneratorAdapter: int NEG> = 116;

        <org.objectweb.asm.commons.GeneratorAdapter: int REM> = 112;

        <org.objectweb.asm.commons.GeneratorAdapter: int DIV> = 108;

        <org.objectweb.asm.commons.GeneratorAdapter: int MUL> = 104;

        <org.objectweb.asm.commons.GeneratorAdapter: int SUB> = 100;

        <org.objectweb.asm.commons.GeneratorAdapter: int ADD> = 96;

        <org.objectweb.asm.commons.GeneratorAdapter: java.lang.String CLDESC> = "Ljava/lang/Class;";

        $r0 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>("java/lang/Byte");

        <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type BYTE_TYPE> = $r0;

        $r1 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>("java/lang/Boolean");

        <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type BOOLEAN_TYPE> = $r1;

        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>("java/lang/Short");

        <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type SHORT_TYPE> = $r2;

        $r3 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>("java/lang/Character");

        <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type CHARACTER_TYPE> = $r3;

        $r4 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>("java/lang/Integer");

        <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type INTEGER_TYPE> = $r4;

        $r5 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>("java/lang/Float");

        <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type FLOAT_TYPE> = $r5;

        $r6 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>("java/lang/Long");

        <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type LONG_TYPE> = $r6;

        $r7 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>("java/lang/Double");

        <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type DOUBLE_TYPE> = $r7;

        $r8 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>("java/lang/Number");

        <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type NUMBER_TYPE> = $r8;

        $r9 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>("java/lang/Object");

        <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.Type OBJECT_TYPE> = $r9;

        $r10 = staticinvoke <org.objectweb.asm.commons.Method: org.objectweb.asm.commons.Method getMethod(java.lang.String)>("boolean booleanValue()");

        <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.commons.Method BOOLEAN_VALUE> = $r10;

        $r11 = staticinvoke <org.objectweb.asm.commons.Method: org.objectweb.asm.commons.Method getMethod(java.lang.String)>("char charValue()");

        <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.commons.Method CHAR_VALUE> = $r11;

        $r12 = staticinvoke <org.objectweb.asm.commons.Method: org.objectweb.asm.commons.Method getMethod(java.lang.String)>("int intValue()");

        <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.commons.Method INT_VALUE> = $r12;

        $r13 = staticinvoke <org.objectweb.asm.commons.Method: org.objectweb.asm.commons.Method getMethod(java.lang.String)>("float floatValue()");

        <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.commons.Method FLOAT_VALUE> = $r13;

        $r14 = staticinvoke <org.objectweb.asm.commons.Method: org.objectweb.asm.commons.Method getMethod(java.lang.String)>("long longValue()");

        <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.commons.Method LONG_VALUE> = $r14;

        $r15 = staticinvoke <org.objectweb.asm.commons.Method: org.objectweb.asm.commons.Method getMethod(java.lang.String)>("double doubleValue()");

        <org.objectweb.asm.commons.GeneratorAdapter: org.objectweb.asm.commons.Method DOUBLE_VALUE> = $r15;

        return;
    }
}
