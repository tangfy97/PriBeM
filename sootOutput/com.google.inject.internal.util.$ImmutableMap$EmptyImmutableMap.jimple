final class com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap extends com.google.inject.internal.util.$ImmutableMap
{

    private void <init>()
    {
        com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap r0;

        r0 := @this: com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap;

        specialinvoke r0.<com.google.inject.internal.util.$ImmutableMap: void <init>()>();

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap r0;
        java.lang.Object r1;

        r0 := @this: com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap;

        r1 := @parameter0: java.lang.Object;

        return null;
    }

    public int size()
    {
        com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap r0;

        r0 := @this: com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap;

        return 0;
    }

    public boolean isEmpty()
    {
        com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap r0;

        r0 := @this: com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap;

        return 1;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap r0;
        java.lang.Object r1;

        r0 := @this: com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap r0;
        java.lang.Object r1;

        r0 := @this: com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public com.google.inject.internal.util.$ImmutableSet entrySet()
    {
        com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap r1;
        com.google.inject.internal.util.$ImmutableSet $r0;

        r1 := @this: com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap;

        $r0 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet of()>();

        return $r0;
    }

    public com.google.inject.internal.util.$ImmutableSet keySet()
    {
        com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap r1;
        com.google.inject.internal.util.$ImmutableSet $r0;

        r1 := @this: com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap;

        $r0 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet of()>();

        return $r0;
    }

    public com.google.inject.internal.util.$ImmutableCollection values()
    {
        com.google.inject.internal.util.$ImmutableCollection $r0;
        com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap r1;

        r1 := @this: com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap;

        $r0 = <com.google.inject.internal.util.$ImmutableCollection: com.google.inject.internal.util.$ImmutableCollection EMPTY_IMMUTABLE_COLLECTION>;

        return $r0;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap r2;
        java.util.Map r1;
        java.lang.Object r0;
        boolean $z0, $z1;

        r2 := @this: com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.util.Map;

        if $z0 == 0 goto label1;

        r1 = (java.util.Map) r0;

        $z1 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        return $z1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap r0;

        r0 := @this: com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap;

        return 0;
    }

    public java.lang.String toString()
    {
        com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap r0;

        r0 := @this: com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap;

        return "{}";
    }

    public volatile java.util.Set entrySet()
    {
        com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap r0;
        com.google.inject.internal.util.$ImmutableSet $r1;

        r0 := @this: com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap;

        $r1 = virtualinvoke r0.<com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap: com.google.inject.internal.util.$ImmutableSet entrySet()>();

        return $r1;
    }

    public volatile java.util.Collection values()
    {
        com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap r0;
        com.google.inject.internal.util.$ImmutableCollection $r1;

        r0 := @this: com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap;

        $r1 = virtualinvoke r0.<com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap: com.google.inject.internal.util.$ImmutableCollection values()>();

        return $r1;
    }

    public volatile java.util.Set keySet()
    {
        com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap r0;
        com.google.inject.internal.util.$ImmutableSet $r1;

        r0 := @this: com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap;

        $r1 = virtualinvoke r0.<com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap: com.google.inject.internal.util.$ImmutableSet keySet()>();

        return $r1;
    }

    void <init>(com.google.inject.internal.util.$ImmutableMap$1)
    {
        com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap r0;
        com.google.inject.internal.util.$ImmutableMap$1 r1;

        r0 := @this: com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap;

        r1 := @parameter0: com.google.inject.internal.util.$ImmutableMap$1;

        specialinvoke r0.<com.google.inject.internal.util.$ImmutableMap$EmptyImmutableMap: void <init>()>();

        return;
    }
}
