class bsh.BSHMethodDeclaration extends bsh.SimpleNode
{
    public java.lang.String name;
    bsh.BSHReturnType returnTypeNode;
    bsh.BSHFormalParameters paramsNode;
    bsh.BSHBlock blockNode;
    int firstThrowsClause;
    public bsh.Modifiers modifiers;
    java.lang.Class returnType;
    int numThrows;

    void <init>(int)
    {
        int i0;
        bsh.BSHMethodDeclaration r0;

        r0 := @this: bsh.BSHMethodDeclaration;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        r0.<bsh.BSHMethodDeclaration: int numThrows> = 0;

        return;
    }

    synchronized void insureNodesParsed()
    {
        bsh.BSHBlock $r6, $r11;
        bsh.BSHReturnType $r7;
        bsh.BSHMethodDeclaration r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;
        bsh.BSHFormalParameters $r1, $r4, $r9;
        bsh.Node $r2, $r3, $r5, $r8, $r10;

        r0 := @this: bsh.BSHMethodDeclaration;

        $r1 = r0.<bsh.BSHMethodDeclaration: bsh.BSHFormalParameters paramsNode>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<bsh.BSHMethodDeclaration: bsh.Node jjtGetChild(int)>(0);

        r0.<bsh.BSHMethodDeclaration: int firstThrowsClause> = 1;

        $z0 = $r2 instanceof bsh.BSHReturnType;

        if $z0 == 0 goto label3;

        $r7 = (bsh.BSHReturnType) $r2;

        r0.<bsh.BSHMethodDeclaration: bsh.BSHReturnType returnTypeNode> = $r7;

        $r8 = virtualinvoke r0.<bsh.BSHMethodDeclaration: bsh.Node jjtGetChild(int)>(1);

        $r9 = (bsh.BSHFormalParameters) $r8;

        r0.<bsh.BSHMethodDeclaration: bsh.BSHFormalParameters paramsNode> = $r9;

        $i2 = virtualinvoke r0.<bsh.BSHMethodDeclaration: int jjtGetNumChildren()>();

        $i3 = r0.<bsh.BSHMethodDeclaration: int numThrows>;

        $i4 = 2 + $i3;

        if $i2 <= $i4 goto label2;

        $i7 = r0.<bsh.BSHMethodDeclaration: int numThrows>;

        $i8 = 2 + $i7;

        $r10 = virtualinvoke r0.<bsh.BSHMethodDeclaration: bsh.Node jjtGetChild(int)>($i8);

        $r11 = (bsh.BSHBlock) $r10;

        r0.<bsh.BSHMethodDeclaration: bsh.BSHBlock blockNode> = $r11;

     label2:
        $i5 = r0.<bsh.BSHMethodDeclaration: int firstThrowsClause>;

        $i6 = $i5 + 1;

        r0.<bsh.BSHMethodDeclaration: int firstThrowsClause> = $i6;

        goto label4;

     label3:
        $r3 = virtualinvoke r0.<bsh.BSHMethodDeclaration: bsh.Node jjtGetChild(int)>(0);

        $r4 = (bsh.BSHFormalParameters) $r3;

        r0.<bsh.BSHMethodDeclaration: bsh.BSHFormalParameters paramsNode> = $r4;

        $i0 = r0.<bsh.BSHMethodDeclaration: int numThrows>;

        $i1 = 1 + $i0;

        $r5 = virtualinvoke r0.<bsh.BSHMethodDeclaration: bsh.Node jjtGetChild(int)>($i1);

        $r6 = (bsh.BSHBlock) $r5;

        r0.<bsh.BSHMethodDeclaration: bsh.BSHBlock blockNode> = $r6;

     label4:
        return;
    }

    java.lang.Class evalReturnType(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.Interpreter r3;
        bsh.BSHMethodDeclaration r0;
        bsh.BSHReturnType $r1, $r4;
        java.lang.Class $r5;
        bsh.CallStack r2;

        r0 := @this: bsh.BSHMethodDeclaration;

        r2 := @parameter0: bsh.CallStack;

        r3 := @parameter1: bsh.Interpreter;

        virtualinvoke r0.<bsh.BSHMethodDeclaration: void insureNodesParsed()>();

        $r1 = r0.<bsh.BSHMethodDeclaration: bsh.BSHReturnType returnTypeNode>;

        if $r1 == null goto label1;

        $r4 = r0.<bsh.BSHMethodDeclaration: bsh.BSHReturnType returnTypeNode>;

        $r5 = virtualinvoke $r4.<bsh.BSHReturnType: java.lang.Class evalReturnType(bsh.CallStack,bsh.Interpreter)>(r2, r3);

        return $r5;

     label1:
        return null;
    }

    java.lang.String getReturnTypeDescriptor(bsh.CallStack, bsh.Interpreter, java.lang.String)
    {
        bsh.Interpreter r3;
        bsh.BSHMethodDeclaration r0;
        bsh.BSHReturnType $r1, $r5;
        java.lang.String r4, $r6;
        bsh.CallStack r2;

        r0 := @this: bsh.BSHMethodDeclaration;

        r2 := @parameter0: bsh.CallStack;

        r3 := @parameter1: bsh.Interpreter;

        r4 := @parameter2: java.lang.String;

        virtualinvoke r0.<bsh.BSHMethodDeclaration: void insureNodesParsed()>();

        $r1 = r0.<bsh.BSHMethodDeclaration: bsh.BSHReturnType returnTypeNode>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r5 = r0.<bsh.BSHMethodDeclaration: bsh.BSHReturnType returnTypeNode>;

        $r6 = virtualinvoke $r5.<bsh.BSHReturnType: java.lang.String getTypeDescriptor(bsh.CallStack,bsh.Interpreter,java.lang.String)>(r2, r3, r4);

        return $r6;
    }

    bsh.BSHReturnType getReturnTypeNode()
    {
        bsh.BSHReturnType $r1;
        bsh.BSHMethodDeclaration r0;

        r0 := @this: bsh.BSHMethodDeclaration;

        virtualinvoke r0.<bsh.BSHMethodDeclaration: void insureNodesParsed()>();

        $r1 = r0.<bsh.BSHMethodDeclaration: bsh.BSHReturnType returnTypeNode>;

        return $r1;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.EvalError $r10;
        bsh.Interpreter r2;
        bsh.NameSpace $r4;
        bsh.UtilEvalError $r9;
        bsh.CallStack r1;
        bsh.BshMethod $r5;
        bsh.Primitive $r8;
        bsh.Modifiers $r6;
        bsh.BSHMethodDeclaration r0;
        java.lang.Class $r3;
        java.lang.String $r7;

        r0 := @this: bsh.BSHMethodDeclaration;

        r1 := @parameter0: bsh.CallStack;

        r2 := @parameter1: bsh.Interpreter;

        $r3 = virtualinvoke r0.<bsh.BSHMethodDeclaration: java.lang.Class evalReturnType(bsh.CallStack,bsh.Interpreter)>(r1, r2);

        r0.<bsh.BSHMethodDeclaration: java.lang.Class returnType> = $r3;

        specialinvoke r0.<bsh.BSHMethodDeclaration: void evalNodes(bsh.CallStack,bsh.Interpreter)>(r1, r2);

        $r4 = virtualinvoke r1.<bsh.CallStack: bsh.NameSpace top()>();

        $r5 = new bsh.BshMethod;

        $r6 = r0.<bsh.BSHMethodDeclaration: bsh.Modifiers modifiers>;

        specialinvoke $r5.<bsh.BshMethod: void <init>(bsh.BSHMethodDeclaration,bsh.NameSpace,bsh.Modifiers)>(r0, $r4, $r6);

     label1:
        $r7 = r0.<bsh.BSHMethodDeclaration: java.lang.String name>;

        virtualinvoke $r4.<bsh.NameSpace: void setMethod(java.lang.String,bsh.BshMethod)>($r7, $r5);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r0, r1);

        throw $r10;

     label4:
        $r8 = <bsh.Primitive: bsh.Primitive VOID>;

        return $r8;

        catch bsh.UtilEvalError from label1 to label2 with label3;
    }

    private void evalNodes(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        boolean $z0;
        bsh.Interpreter r3;
        bsh.Node $r1;
        java.lang.String[] $r15;
        bsh.CallStack r2;
        bsh.BSHAmbiguousName $r4;
        java.lang.StringBuffer $r12, $r13, $r17, $r18, $r20, $r24, $r25, $r27;
        bsh.BSHMethodDeclaration r0;
        int $i0, $i1, $i2, $i3, i4, i5;
        java.lang.String $r16, $r19, $r21, $r26, $r28;
        bsh.EvalError $r11, $r23;
        java.lang.Class[] $r7, $r9;
        bsh.BSHFormalParameters $r5, $r6, $r8, $r14;
        java.lang.Class $r10, $r22;

        r0 := @this: bsh.BSHMethodDeclaration;

        r2 := @parameter0: bsh.CallStack;

        r3 := @parameter1: bsh.Interpreter;

        virtualinvoke r0.<bsh.BSHMethodDeclaration: void insureNodesParsed()>();

        i4 = r0.<bsh.BSHMethodDeclaration: int firstThrowsClause>;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<bsh.BSHMethodDeclaration: bsh.Node jjtGetChild(int)>(i4);

        $r4 = (bsh.BSHAmbiguousName) $r1;

        virtualinvoke $r4.<bsh.BSHAmbiguousName: java.lang.Class toClass(bsh.CallStack,bsh.Interpreter)>(r2, r3);

        i4 = i4 + 1;

     label2:
        $i1 = r0.<bsh.BSHMethodDeclaration: int numThrows>;

        $i0 = r0.<bsh.BSHMethodDeclaration: int firstThrowsClause>;

        $i2 = $i1 + $i0;

        if i4 < $i2 goto label1;

        $r5 = r0.<bsh.BSHMethodDeclaration: bsh.BSHFormalParameters paramsNode>;

        virtualinvoke $r5.<bsh.BSHFormalParameters: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r2, r3);

        $z0 = virtualinvoke r3.<bsh.Interpreter: boolean getStrictJava()>();

        if $z0 == 0 goto label6;

        i5 = 0;

        goto label5;

     label3:
        $r8 = r0.<bsh.BSHMethodDeclaration: bsh.BSHFormalParameters paramsNode>;

        $r9 = $r8.<bsh.BSHFormalParameters: java.lang.Class[] paramTypes>;

        $r10 = $r9[i5];

        if $r10 != null goto label4;

        $r11 = new bsh.EvalError;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(Strict Java Mode) Undeclared argument type, parameter: ");

        $r14 = r0.<bsh.BSHMethodDeclaration: bsh.BSHFormalParameters paramsNode>;

        $r15 = virtualinvoke $r14.<bsh.BSHFormalParameters: java.lang.String[] getParamNames()>();

        $r16 = $r15[i5];

        $r17 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in method: ");

        $r19 = r0.<bsh.BSHMethodDeclaration: java.lang.String name>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r21, r0, null);

        throw $r11;

     label4:
        i5 = i5 + 1;

     label5:
        $r6 = r0.<bsh.BSHMethodDeclaration: bsh.BSHFormalParameters paramsNode>;

        $r7 = $r6.<bsh.BSHFormalParameters: java.lang.Class[] paramTypes>;

        $i3 = lengthof $r7;

        if i5 < $i3 goto label3;

        $r22 = r0.<bsh.BSHMethodDeclaration: java.lang.Class returnType>;

        if $r22 != null goto label6;

        $r23 = new bsh.EvalError;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(Strict Java Mode) Undeclared return type for method: ");

        $r26 = r0.<bsh.BSHMethodDeclaration: java.lang.String name>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r23.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r28, r0, null);

        throw $r23;

     label6:
        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r1, $r4;
        bsh.BSHMethodDeclaration r2;
        java.lang.String $r3, $r5;

        r2 := @this: bsh.BSHMethodDeclaration;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("MethodDeclaration: ");

        $r3 = r2.<bsh.BSHMethodDeclaration: java.lang.String name>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }
}
