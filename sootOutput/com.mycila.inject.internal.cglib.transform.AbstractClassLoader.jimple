public abstract class com.mycila.inject.internal.cglib.transform.AbstractClassLoader extends java.lang.ClassLoader
{
    private com.mycila.inject.internal.cglib.transform.ClassFilter filter;
    private java.lang.ClassLoader classPath;
    private static java.security.ProtectionDomain DOMAIN;
    static java.lang.Class class$net$sf$cglib$transform$AbstractClassLoader;

    protected void <init>(java.lang.ClassLoader, java.lang.ClassLoader, com.mycila.inject.internal.cglib.transform.ClassFilter)
    {
        com.mycila.inject.internal.cglib.transform.ClassFilter r2;
        com.mycila.inject.internal.cglib.transform.AbstractClassLoader r0;
        java.lang.ClassLoader r1, r3;

        r0 := @this: com.mycila.inject.internal.cglib.transform.AbstractClassLoader;

        r1 := @parameter0: java.lang.ClassLoader;

        r3 := @parameter1: java.lang.ClassLoader;

        r2 := @parameter2: com.mycila.inject.internal.cglib.transform.ClassFilter;

        specialinvoke r0.<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>(r1);

        r0.<com.mycila.inject.internal.cglib.transform.AbstractClassLoader: com.mycila.inject.internal.cglib.transform.ClassFilter filter> = r2;

        r0.<com.mycila.inject.internal.cglib.transform.AbstractClassLoader: java.lang.ClassLoader classPath> = r3;

        return;
    }

    public java.lang.Class loadClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        byte[] $r14;
        com.mycila.inject.internal.cglib.core.ClassGenerator $r13;
        boolean $z0;
        com.mycila.inject.internal.cglib.core.CodeGenerationException $r21;
        java.lang.Exception $r20;
        java.lang.ClassLoader $r5, $r19;
        java.lang.Throwable $r32;
        com.mycila.inject.internal.cglib.transform.ClassFilter $r3;
        java.lang.Error $r22;
        com.mycila.inject.internal.asm.ClassReader $r11;
        com.mycila.inject.internal.cglib.transform.AbstractClassLoader r0;
        java.lang.StringBuffer $r4, $r7, $r8, $r26, $r27, $r28, $r30;
        int $i0;
        java.lang.String r1, $r6, $r9, $r29, $r31;
        java.io.IOException $r24;
        java.lang.RuntimeException $r23;
        com.mycila.inject.internal.cglib.core.DebuggingClassWriter $r12;
        java.security.ProtectionDomain $r15;
        java.lang.Class $r2, $r16, $r18;
        java.lang.ClassNotFoundException $r17, $r25;
        java.io.InputStream $r10;

        r0 := @this: com.mycila.inject.internal.cglib.transform.AbstractClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractClassLoader: java.lang.Class findLoadedClass(java.lang.String)>(r1);

        if $r2 == null goto label01;

        $r19 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r19 != r0 goto label01;

        return $r2;

     label01:
        $r3 = r0.<com.mycila.inject.internal.cglib.transform.AbstractClassLoader: com.mycila.inject.internal.cglib.transform.ClassFilter filter>;

        $z0 = interfaceinvoke $r3.<com.mycila.inject.internal.cglib.transform.ClassFilter: boolean accept(java.lang.String)>(r1);

        if $z0 != 0 goto label02;

        $r18 = specialinvoke r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        return $r18;

     label02:
        $r5 = r0.<com.mycila.inject.internal.cglib.transform.AbstractClassLoader: java.lang.ClassLoader classPath>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = virtualinvoke $r5.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r9);

        if $r10 != null goto label03;

        $r17 = new java.lang.ClassNotFoundException;

        specialinvoke $r17.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r17;

     label03:
        $r11 = new com.mycila.inject.internal.asm.ClassReader;

        specialinvoke $r11.<com.mycila.inject.internal.asm.ClassReader: void <init>(java.io.InputStream)>($r10);

     label04:
        virtualinvoke $r10.<java.io.InputStream: void close()>();

        goto label07;

     label05:
        $r32 := @caughtexception;

     label06:
        virtualinvoke $r10.<java.io.InputStream: void close()>();

        throw $r32;

     label07:
        goto label09;

     label08:
        $r24 := @caughtexception;

        $r25 = new java.lang.ClassNotFoundException;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r29 = virtualinvoke $r24.<java.io.IOException: java.lang.String getMessage()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>($r31);

        throw $r25;

     label09:
        $r12 = new com.mycila.inject.internal.cglib.core.DebuggingClassWriter;

        specialinvoke $r12.<com.mycila.inject.internal.cglib.core.DebuggingClassWriter: void <init>(int)>(1);

        $r13 = virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractClassLoader: com.mycila.inject.internal.cglib.core.ClassGenerator getGenerator(com.mycila.inject.internal.asm.ClassReader)>($r11);

        interfaceinvoke $r13.<com.mycila.inject.internal.cglib.core.ClassGenerator: void generateClass(com.mycila.inject.internal.asm.ClassVisitor)>($r12);

        $r14 = virtualinvoke $r12.<com.mycila.inject.internal.asm.ClassWriter: byte[] toByteArray()>();

        $i0 = lengthof $r14;

        $r15 = <com.mycila.inject.internal.cglib.transform.AbstractClassLoader: java.security.ProtectionDomain DOMAIN>;

        $r16 = specialinvoke r0.<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>(r1, $r14, 0, $i0, $r15);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractClassLoader: void postProcess(java.lang.Class)>($r16);

     label10:
        return $r16;

     label11:
        $r23 := @caughtexception;

        throw $r23;

     label12:
        $r22 := @caughtexception;

        throw $r22;

     label13:
        $r20 := @caughtexception;

        $r21 = new com.mycila.inject.internal.cglib.core.CodeGenerationException;

        specialinvoke $r21.<com.mycila.inject.internal.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>($r20);

        throw $r21;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.io.IOException from label02 to label07 with label08;
        catch java.lang.RuntimeException from label09 to label10 with label11;
        catch java.lang.Error from label09 to label10 with label12;
        catch java.lang.Exception from label09 to label10 with label13;
    }

    protected com.mycila.inject.internal.cglib.core.ClassGenerator getGenerator(com.mycila.inject.internal.asm.ClassReader)
    {
        com.mycila.inject.internal.asm.Attribute[] $r3;
        com.mycila.inject.internal.cglib.transform.AbstractClassLoader r2;
        int $i0;
        com.mycila.inject.internal.cglib.transform.ClassReaderGenerator $r0;
        com.mycila.inject.internal.asm.ClassReader r1;

        r2 := @this: com.mycila.inject.internal.cglib.transform.AbstractClassLoader;

        r1 := @parameter0: com.mycila.inject.internal.asm.ClassReader;

        $r0 = new com.mycila.inject.internal.cglib.transform.ClassReaderGenerator;

        $r3 = virtualinvoke r2.<com.mycila.inject.internal.cglib.transform.AbstractClassLoader: com.mycila.inject.internal.asm.Attribute[] attributes()>();

        $i0 = virtualinvoke r2.<com.mycila.inject.internal.cglib.transform.AbstractClassLoader: int getFlags()>();

        specialinvoke $r0.<com.mycila.inject.internal.cglib.transform.ClassReaderGenerator: void <init>(com.mycila.inject.internal.asm.ClassReader,com.mycila.inject.internal.asm.Attribute[],int)>(r1, $r3, $i0);

        return $r0;
    }

    protected int getFlags()
    {
        com.mycila.inject.internal.cglib.transform.AbstractClassLoader r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.AbstractClassLoader;

        return 0;
    }

    protected com.mycila.inject.internal.asm.Attribute[] attributes()
    {
        com.mycila.inject.internal.cglib.transform.AbstractClassLoader r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.AbstractClassLoader;

        return null;
    }

    protected void postProcess(java.lang.Class)
    {
        java.lang.Class r1;
        com.mycila.inject.internal.cglib.transform.AbstractClassLoader r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.AbstractClassLoader;

        r1 := @parameter0: java.lang.Class;

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.transform.AbstractClassLoader$1 $r0;
        java.lang.Object $r1;
        java.security.ProtectionDomain $r2;

        $r0 = new com.mycila.inject.internal.cglib.transform.AbstractClassLoader$1;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.transform.AbstractClassLoader$1: void <init>()>();

        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        $r2 = (java.security.ProtectionDomain) $r1;

        <com.mycila.inject.internal.cglib.transform.AbstractClassLoader: java.security.ProtectionDomain DOMAIN> = $r2;

        return;
    }
}
