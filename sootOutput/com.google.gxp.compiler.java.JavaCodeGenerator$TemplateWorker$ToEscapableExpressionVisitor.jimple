public class com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor extends com.google.gxp.compiler.base.DefaultingExpressionVisitor implements com.google.gxp.compiler.base.CallVisitor
{
    final com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0;

    protected void <init>(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker r1;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker;

        r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0> = r1;

        specialinvoke r0.<com.google.gxp.compiler.base.DefaultingExpressionVisitor: void <init>()>();

        return;
    }

    public java.lang.String defaultVisitExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.base.Expression r1;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r2;

        r2 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.String visitAttrBundleReference(com.google.gxp.compiler.base.AttrBundleReference)
    {
        com.google.gxp.compiler.base.AttrBundleReference r0;
        java.lang.String $r1;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r2;

        r2 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.AttrBundleReference;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.AttrBundleReference: java.lang.String getName()>();

        return $r1;
    }

    public java.lang.String visitNativeExpression(com.google.gxp.compiler.base.NativeExpression)
    {
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker $r2;
        com.google.gxp.compiler.base.NativeExpression r5;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r1;
        com.google.gxp.compiler.base.OutputLanguage $r3;
        com.google.gxp.compiler.alerts.AlertSink $r4;
        java.lang.StringBuilder $r0;
        java.lang.String $r6, $r7;

        r1 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r5 := @parameter0: com.google.gxp.compiler.base.NativeExpression;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r3 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        $r2 = r1.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r4 = staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$4500(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker)>($r2);

        $r6 = virtualinvoke $r3.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String validateExpression(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.NativeExpression)>($r4, r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public java.lang.String visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)
    {
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker $r5;
        com.google.gxp.compiler.base.Expression $r6;
        com.google.gxp.compiler.schema.Schema $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r4;
        java.lang.StringBuilder $r0;
        java.lang.String $r3, $r7, $r8;
        com.google.gxp.compiler.base.EscapeExpression r1;

        r4 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.EscapeExpression;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<com.google.gxp.compiler.base.EscapeExpression: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r3 = virtualinvoke $r2.<com.google.gxp.compiler.schema.Schema: java.lang.String getJavaAppender()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".INSTANCE.append(new StringBuilder(), ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gxp_context");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = r4.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r6 = virtualinvoke r1.<com.google.gxp.compiler.base.EscapeExpression: com.google.gxp.compiler.base.Expression getSubexpression()>();

        $r7 = staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String access$500(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker,com.google.gxp.compiler.base.Expression)>($r5, $r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.String visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)
    {
        com.google.transconsole.common.messages.Message $r4;
        com.google.gxp.compiler.base.Expression r18;
        java.lang.Object[] $r6;
        com.google.gxp.compiler.alerts.AlertSink $r22;
        java.lang.String $r2, $r8, $r9, $r10, $r11, $r12, $r13, $r16, $r20;
        boolean $z0;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker $r1, $r19, $r21;
        com.google.gxp.com.google.common.base.CharEscaper $r7;
        java.util.Iterator $r15;
        com.google.gxp.compiler.java.NoMessageSourceError $r23;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;
        java.util.List $r14;
        com.google.gxp.compiler.base.ExtractedMessage r3;
        java.lang.StringBuilder $r5;
        java.lang.Object $r17;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r3 := @parameter0: com.google.gxp.compiler.base.ExtractedMessage;

        $r1 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r2 = staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String access$4200(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker)>($r1);

        if $r2 != null goto label1;

        $r21 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r22 = staticinvoke <com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$4600(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker)>($r21);

        $r23 = new com.google.gxp.compiler.java.NoMessageSourceError;

        specialinvoke $r23.<com.google.gxp.compiler.java.NoMessageSourceError: void <init>(com.google.gxp.compiler.base.Node)>(r3);

        interfaceinvoke $r22.<com.google.gxp.compiler.alerts.AlertSink: void add(com.google.gxp.compiler.alerts.Alert)>($r23);

     label1:
        $r4 = virtualinvoke r3.<com.google.gxp.compiler.base.ExtractedMessage: com.google.transconsole.common.messages.Message getTcMessage()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("GxpTemplate.getMessage(GXP$MESSAGE_SOURCE, ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gxp_context.getLocale(), ");

        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <com.google.gxp.com.google.common.base.CharEscapers: com.google.gxp.com.google.common.base.CharEscaper javaStringUnicodeEscaper()>();

        $r8 = virtualinvoke $r4.<com.google.transconsole.common.messages.Message: java.lang.String getOriginal()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\n", " ");

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\*/", "*/");

        $r11 = virtualinvoke $r7.<com.google.gxp.com.google.common.base.CharEscaper: java.lang.String escape(java.lang.String)>($r10);

        $r6[0] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/* \"%s\" */ ", $r6);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r13 = virtualinvoke $r4.<com.google.transconsole.common.messages.Message: java.lang.String getId()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("L");

        $r14 = virtualinvoke r3.<com.google.gxp.compiler.base.ExtractedMessage: java.util.List getParameters()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r17 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r18 = (com.google.gxp.compiler.base.Expression) $r17;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r19 = r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r20 = virtualinvoke $r19.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String getEscapedString(com.google.gxp.compiler.base.Expression)>(r18);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        goto label2;

     label3:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }

    public java.lang.String visitCall(com.google.gxp.compiler.base.Call)
    {
        java.lang.Object $r2;
        java.lang.String $r3;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r1;
        com.google.gxp.compiler.base.Call r0;

        r1 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.Call;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.Call: java.lang.Object acceptCallVisitor(com.google.gxp.compiler.base.CallVisitor)>(r1);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public java.lang.String visitBoundCall(com.google.gxp.compiler.base.BoundCall)
    {
        com.google.gxp.compiler.base.BoundCall r1;
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r2;

        r2 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.BoundCall;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.String visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)
    {
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.base.UnboundCall r1;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r2;

        r2 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.UnboundCall;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.String visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)
    {
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker $r3;
        java.lang.StringBuilder $r0;
        com.google.gxp.compiler.base.ValidatedCall r2;
        java.lang.String $r4, $r5;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r1;

        r1 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r2 := @parameter0: com.google.gxp.compiler.base.ValidatedCall;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("gxp_context");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".getString(");

        $r3 = r1.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker this$0>;

        $r4 = virtualinvoke $r3.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker: java.lang.String getJavaExpression(com.google.gxp.compiler.base.Expression)>(r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public volatile java.lang.Object visitNativeExpression(com.google.gxp.compiler.base.NativeExpression)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.base.NativeExpression r1;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.NativeExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitNativeExpression(com.google.gxp.compiler.base.NativeExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.base.ExtractedMessage r1;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExtractedMessage;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;
        com.google.gxp.compiler.base.EscapeExpression r1;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.EscapeExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitCall(com.google.gxp.compiler.base.Call)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;
        com.google.gxp.compiler.base.Call r1;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Call;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitCall(com.google.gxp.compiler.base.Call)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitAttrBundleReference(com.google.gxp.compiler.base.AttrBundleReference)
    {
        com.google.gxp.compiler.base.AttrBundleReference r1;
        java.lang.String $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.AttrBundleReference;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitAttrBundleReference(com.google.gxp.compiler.base.AttrBundleReference)>(r1);

        return $r2;
    }

    public volatile java.lang.Object defaultVisitExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.Expression r1;
        java.lang.String $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String defaultVisitExpression(com.google.gxp.compiler.base.Expression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)
    {
        com.google.gxp.compiler.base.ValidatedCall r1;
        java.lang.String $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ValidatedCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitBoundCall(com.google.gxp.compiler.base.BoundCall)
    {
        com.google.gxp.compiler.base.BoundCall r1;
        java.lang.String $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.BoundCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitBoundCall(com.google.gxp.compiler.base.BoundCall)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)
    {
        com.google.gxp.compiler.base.UnboundCall r1;
        java.lang.String $r2;
        com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.UnboundCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)>(r1);

        return $r2;
    }
}
