public final class org.waveprotocol.wave.model.wave.ParticipantIdUtil extends java.lang.Object
{
    public static final org.waveprotocol.wave.model.wave.ParticipantId UNKNOWN;

    private void <init>()
    {
        org.waveprotocol.wave.model.wave.ParticipantIdUtil r0;

        r0 := @this: org.waveprotocol.wave.model.wave.ParticipantIdUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String normalize(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        return $r1;
    }

    public static boolean isNormalizedAddress(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0, $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Null address");

        $r1 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantIdUtil: java.lang.String normalize(java.lang.String)>(r0);

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(64);

        if $i0 <= 0 goto label2;

        $i1 = $i0 + 1;

        $z1 = staticinvoke <org.waveprotocol.wave.model.id.WaveIdentifiers: boolean isValidDomain(int,java.lang.String)>($i1, r0);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static boolean isDomainAddress(java.lang.String)
    {
        int $i0;
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("@");

        if $i0 != 0 goto label1;

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.WaveIdentifiers: boolean isValidDomain(int,java.lang.String)>(1, r0);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static java.lang.String makeDomainAddress(java.lang.String)
    {
        java.lang.Object[] $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String r0, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.WaveIdentifiers: boolean isValidDomain(int,java.lang.String)>(0, r0);

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r0;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid domain: %s", $r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static org.waveprotocol.wave.model.wave.ParticipantId makeUnsafeSharedDomainParticipantId(java.lang.String)
    {
        java.lang.String r0, $r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantIdUtil: java.lang.String makeDomainAddress(java.lang.String)>(r0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId ofUnsafe(java.lang.String)>($r1);

        return $r2;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.wave.ParticipantId $r0;

        $r0 = new org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.ParticipantId: void <init>(java.lang.String)>("unknown");

        <org.waveprotocol.wave.model.wave.ParticipantIdUtil: org.waveprotocol.wave.model.wave.ParticipantId UNKNOWN> = $r0;

        return;
    }
}
