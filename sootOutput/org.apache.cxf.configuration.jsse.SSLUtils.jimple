public final class org.apache.cxf.configuration.jsse.SSLUtils extends java.lang.Object
{
    static final java.lang.String PKCS12_TYPE;
    private static final java.lang.String DEFAULT_KEYSTORE_TYPE;
    private static final java.lang.String DEFAULT_TRUST_STORE_TYPE;
    private static final java.lang.String DEFAULT_SECURE_SOCKET_PROTOCOL;
    private static final java.lang.String CERTIFICATE_FACTORY_TYPE;
    private static final boolean DEFAULT_REQUIRE_CLIENT_AUTHENTICATION;
    private static final boolean DEFAULT_WANT_CLIENT_AUTHENTICATION;
    private static final java.util.List DEFAULT_CIPHERSUITE_FILTERS_INCLUDE;
    private static final java.util.List DEFAULT_CIPHERSUITE_FILTERS_EXCLUDE;

    private void <init>()
    {
        org.apache.cxf.configuration.jsse.SSLUtils r0;

        r0 := @this: org.apache.cxf.configuration.jsse.SSLUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static javax.net.ssl.KeyManager[] getKeyStoreManagers(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.logging.Logger) throws java.lang.Exception
    {
        java.lang.Throwable $r13;
        byte[] $r4, r19;
        java.io.DataInputStream $r9, r18;
        java.util.logging.Level $r6, $r12;
        java.io.ByteArrayInputStream $r7, $r10;
        int $i0, $i1;
        java.lang.String r0, r1, r2, r3, r11, r14;
        boolean $z0, $z1;
        javax.net.ssl.KeyManagerFactory $r16;
        java.security.KeyStore $r17;
        java.io.FileInputStream $r8;
        java.util.logging.Logger r5;
        javax.net.ssl.KeyManager[] r15;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        r11 := @parameter3: java.lang.String;

        r1 := @parameter4: java.lang.String;

        r14 := @parameter5: java.lang.String;

        r5 := @parameter6: java.util.logging.Logger;

        if r0 == null goto label01;

        if r11 == null goto label01;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r11);

        if $z0 != 0 goto label01;

        $r12 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>(r5, $r12, "KEY_PASSWORD_NOT_SAME_KEYSTORE_PASSWORD");

     label01:
        r15 = null;

        $r16 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(r1);

        $r17 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r2);

        $z1 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("PKCS12");

        if $z1 == 0 goto label09;

        r18 = null;

     label02:
        $r8 = new java.io.FileInputStream;

        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.lang.String)>(r3);

        $r9 = new java.io.DataInputStream;

        specialinvoke $r9.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r8);

        r18 = $r9;

        $i1 = virtualinvoke $r9.<java.io.DataInputStream: int available()>();

        r19 = newarray (byte)[$i1];

        virtualinvoke $r9.<java.io.DataInputStream: void readFully(byte[])>(r19);

     label03:
        if $r9 == null goto label07;

        virtualinvoke $r9.<java.io.DataInputStream: void close()>();

        goto label07;

     label04:
        $r13 := @caughtexception;

     label05:
        if r18 == null goto label06;

        virtualinvoke r18.<java.io.DataInputStream: void close()>();

     label06:
        throw $r13;

     label07:
        $r10 = new java.io.ByteArrayInputStream;

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>(r19);

        if r0 == null goto label08;

        r15 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: javax.net.ssl.KeyManager[] loadKeyStore(javax.net.ssl.KeyManagerFactory,java.security.KeyStore,java.io.ByteArrayInputStream,java.lang.String,java.lang.String,java.util.logging.Logger)>($r16, $r17, $r10, r3, r0, r5);

     label08:
        goto label10;

     label09:
        $r4 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: byte[] loadClientCredential(java.lang.String)>(r3);

        if $r4 == null goto label10;

        $i0 = lengthof $r4;

        if $i0 <= 0 goto label10;

        if r0 == null goto label10;

        $r7 = new java.io.ByteArrayInputStream;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        r15 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: javax.net.ssl.KeyManager[] loadKeyStore(javax.net.ssl.KeyManagerFactory,java.security.KeyStore,java.io.ByteArrayInputStream,java.lang.String,java.lang.String,java.util.logging.Logger)>($r16, $r17, $r7, r3, r0, r5);

     label10:
        if r0 != null goto label11;

        if r3 == null goto label11;

        $r6 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r5, $r6, "FAILED_TO_LOAD_KEYSTORE_NULL_PASSWORD", r3);

     label11:
        return r15;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
    }

    public static javax.net.ssl.KeyManager[] loadKeyStore(javax.net.ssl.KeyManagerFactory, java.security.KeyStore, java.io.ByteArrayInputStream, java.lang.String, java.lang.String, java.util.logging.Logger)
    {
        java.lang.Object[] $r10;
        javax.net.ssl.KeyManagerFactory r4;
        java.security.KeyStore r0;
        java.util.logging.Logger r6;
        java.lang.Exception $r9;
        java.util.logging.Level $r8, $r11;
        java.io.ByteArrayInputStream r1;
        char[] $r3, $r5;
        java.lang.String r2, r7, $r12;
        javax.net.ssl.KeyManager[] r13;

        r4 := @parameter0: javax.net.ssl.KeyManagerFactory;

        r0 := @parameter1: java.security.KeyStore;

        r1 := @parameter2: java.io.ByteArrayInputStream;

        r7 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        r6 := @parameter5: java.util.logging.Logger;

        r13 = null;

     label1:
        $r3 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        virtualinvoke r0.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r1, $r3);

        $r5 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        virtualinvoke r4.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r0, $r5);

        r13 = virtualinvoke r4.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r6, $r8, "LOADED_KEYSTORE", r7);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r11 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = r7;

        $r12 = virtualinvoke $r9.<java.lang.Exception: java.lang.String getMessage()>();

        $r10[1] = $r12;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object[])>(r6, $r11, "FAILED_TO_LOAD_KEYSTORE", $r10);

     label4:
        return r13;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static javax.net.ssl.TrustManager[] getTrustStoreManagers(boolean, java.lang.String, java.lang.String, java.lang.String, java.util.logging.Logger) throws java.lang.Exception
    {
        java.security.cert.X509Certificate r12;
        java.lang.Throwable $r15;
        byte[] $r9;
        java.lang.Object[] $r17;
        java.security.cert.CertificateFactory $r8;
        java.util.logging.Level $r18, $r22;
        java.io.ByteArrayInputStream $r10;
        java.lang.String r0, r3, r4, $r6, $r14, $r19;
        boolean z0;
        javax.net.ssl.TrustManagerFactory $r21;
        java.security.KeyStore $r1;
        java.io.FileInputStream $r2, r20;
        java.util.logging.Logger r5;
        java.lang.Exception $r16;
        java.security.cert.Certificate $r11;
        java.security.Principal $r13;
        javax.net.ssl.TrustManager[] $r23;
        char[] $r7;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.util.logging.Logger;

        $r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r0);

        if z0 == 0 goto label05;

        $r6 = "";

        $r7 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r1.<java.security.KeyStore: void load(java.io.InputStream,char[])>(null, $r7);

        $r8 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r9 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: byte[] loadCACert(java.lang.String)>(r3);

     label01:
        if $r9 == null goto label02;

        $r10 = new java.io.ByteArrayInputStream;

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9);

        $r11 = virtualinvoke $r8.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r10);

        r12 = (java.security.cert.X509Certificate) $r11;

        $r13 = virtualinvoke r12.<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>();

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>($r14, r12);

        virtualinvoke $r10.<java.io.ByteArrayInputStream: void close()>();

     label02:
        goto label04;

     label03:
        $r16 := @caughtexception;

        $r18 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r17 = newarray (java.lang.Object)[2];

        $r17[0] = r3;

        $r19 = virtualinvoke $r16.<java.lang.Exception: java.lang.String getMessage()>();

        $r17[1] = $r19;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object[])>(r5, $r18, "FAILED_TO_LOAD_TRUST_STORE", $r17);

     label04:
        goto label11;

     label05:
        r20 = null;

     label06:
        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.lang.String)>(r3);

        r20 = $r2;

        virtualinvoke $r1.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r2, null);

     label07:
        if $r2 == null goto label11;

        virtualinvoke $r2.<java.io.FileInputStream: void close()>();

        goto label11;

     label08:
        $r15 := @caughtexception;

     label09:
        if r20 == null goto label10;

        virtualinvoke r20.<java.io.FileInputStream: void close()>();

     label10:
        throw $r15;

     label11:
        $r21 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(r4);

        virtualinvoke $r21.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r1);

        $r22 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r5, $r22, "LOADED_TRUST_STORE", r3);

        $r23 = virtualinvoke $r21.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        return $r23;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    protected static byte[] loadClientCredential(java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        byte[] r3, $r4;
        java.io.ByteArrayOutputStream $r2;
        java.io.FileInputStream $r1, r6;
        int i0;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        r6 = null;

     label2:
        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.lang.String)>(r0);

        r6 = $r1;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        r3 = newarray (byte)[512];

        i0 = virtualinvoke $r1.<java.io.FileInputStream: int read(byte[])>(r3);

     label3:
        if i0 <= 0 goto label4;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r3, 0, i0);

        i0 = virtualinvoke $r1.<java.io.FileInputStream: int read(byte[])>(r3);

        goto label3;

     label4:
        $r4 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label5:
        if $r1 == null goto label6;

        virtualinvoke $r1.<java.io.FileInputStream: void close()>();

     label6:
        return $r4;

     label7:
        $r5 := @caughtexception;

     label8:
        if r6 == null goto label9;

        virtualinvoke r6.<java.io.FileInputStream: void close()>();

     label9:
        throw $r5;

        catch java.lang.Throwable from label2 to label5 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected static byte[] loadCACert(java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        byte[] r3, $r4;
        java.io.ByteArrayOutputStream $r2;
        java.io.FileInputStream $r1, r6;
        int i0;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        r6 = null;

     label2:
        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.lang.String)>(r0);

        r6 = $r1;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        r3 = newarray (byte)[512];

        i0 = virtualinvoke $r1.<java.io.FileInputStream: int read(byte[])>(r3);

     label3:
        if i0 <= 0 goto label4;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r3, 0, i0);

        i0 = virtualinvoke $r1.<java.io.FileInputStream: int read(byte[])>(r3);

        goto label3;

     label4:
        $r4 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label5:
        if $r1 == null goto label6;

        virtualinvoke $r1.<java.io.FileInputStream: void close()>();

     label6:
        return $r4;

     label7:
        $r5 := @caughtexception;

     label8:
        if r6 == null goto label9;

        virtualinvoke r6.<java.io.FileInputStream: void close()>();

     label9:
        throw $r5;

        catch java.lang.Throwable from label2 to label5 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public static java.lang.String getKeystore(java.lang.String, java.util.logging.Logger)
    {
        java.util.logging.Logger r5;
        java.util.logging.Level $r8;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r0, $r2, r6, r7;

        r6 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.logging.Logger;

        if r6 == null goto label1;

        r7 = "KEY_STORE_SET";

        goto label3;

     label1:
        $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStore");

        r6 = $r0;

        if $r0 == null goto label2;

        r7 = "KEY_STORE_SYSTEM_PROPERTY_SET";

        goto label3;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("user.home");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/.keystore");

        r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r7 = "KEY_STORE_NOT_SET";

     label3:
        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r5, $r8, r7, r6);

        return r6;
    }

    public static java.lang.String getKeystoreType(java.lang.String, java.util.logging.Logger)
    {
        java.lang.String r0, $r2;
        java.util.logging.Logger r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.logging.Logger;

        $r2 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: java.lang.String getKeystoreType(java.lang.String,java.util.logging.Logger,java.lang.String)>(r0, r1, "PKCS12");

        return $r2;
    }

    public static java.lang.String getKeystoreType(java.lang.String, java.util.logging.Logger, java.lang.String)
    {
        java.lang.String $r0, r2, r3, r4;
        java.util.logging.Logger r1;
        java.util.logging.Level $r5;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.logging.Logger;

        r2 := @parameter2: java.lang.String;

        if r3 == null goto label1;

        r4 = "KEY_STORE_TYPE_SET";

        goto label3;

     label1:
        $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String,java.lang.String)>("javax.net.ssl.keyStoreType", null);

        r3 = $r0;

        if $r0 != null goto label2;

        r3 = r2;

        r4 = "KEY_STORE_TYPE_NOT_SET";

        goto label3;

     label2:
        r4 = "KEY_STORE_TYPE_SYSTEM_SET";

     label3:
        $r5 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r1, $r5, r4, r3);

        return r3;
    }

    public static java.lang.String getKeystoreProvider(java.lang.String, java.util.logging.Logger)
    {
        java.lang.String $r0, r2, r3;
        java.util.logging.Logger r1;
        java.util.logging.Level $r4;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.logging.Logger;

        if r2 == null goto label1;

        r3 = "KEY_STORE_PROVIDER_SET";

        goto label3;

     label1:
        $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String,java.lang.String)>("javax.net.ssl.keyStoreProvider", null);

        r2 = $r0;

        if $r0 != null goto label2;

        r3 = "KEY_STORE_PROVIDER_NOT_SET";

        goto label3;

     label2:
        r3 = "KEY_STORE_PROVIDER_SYSTEM_SET";

     label3:
        $r4 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r1, $r4, r3, r2);

        return r2;
    }

    public static java.lang.String getKeystorePassword(java.lang.String, java.util.logging.Logger)
    {
        java.lang.String $r0, r2, r3, $r4;
        java.util.logging.Logger r1;
        java.util.logging.Level $r5;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.logging.Logger;

        if r2 == null goto label1;

        r3 = "KEY_STORE_PASSWORD_SET";

        goto label4;

     label1:
        $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStorePassword");

        r2 = $r0;

        if $r0 == null goto label2;

        $r4 = "KEY_STORE_PASSWORD_SYSTEM_PROPERTY_SET";

        goto label3;

     label2:
        $r4 = "KEY_STORE_PASSWORD_NOT_SET";

     label3:
        r3 = $r4;

     label4:
        $r5 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>(r1, $r5, r3);

        return r2;
    }

    public static java.lang.String getKeyPassword(java.lang.String, java.util.logging.Logger)
    {
        java.lang.String $r0, r2, r3, $r4;
        java.util.logging.Logger r1;
        java.util.logging.Level $r5;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.logging.Logger;

        if r2 == null goto label1;

        r3 = "KEY_PASSWORD_SET";

        goto label5;

     label1:
        $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyPassword");

        r2 = $r0;

        if $r0 != null goto label2;

        r2 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStorePassword");

     label2:
        if r2 == null goto label3;

        $r4 = "KEY_PASSWORD_SYSTEM_PROPERTY_SET";

        goto label4;

     label3:
        $r4 = "KEY_PASSWORD_NOT_SET";

     label4:
        r3 = $r4;

     label5:
        $r5 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>(r1, $r5, r3);

        return r2;
    }

    public static java.lang.String getKeystoreAlgorithm(java.lang.String, java.util.logging.Logger)
    {
        java.lang.String r2, r3;
        java.util.logging.Logger r0;
        java.util.logging.Level $r1;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.logging.Logger;

        if r2 == null goto label1;

        r3 = "KEY_STORE_ALGORITHM_SET";

        goto label2;

     label1:
        r2 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        r3 = "KEY_STORE_ALGORITHM_NOT_SET";

     label2:
        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r0, $r1, r3, r2);

        return r2;
    }

    public static java.lang.String getTrustStoreAlgorithm(java.lang.String, java.util.logging.Logger)
    {
        java.lang.String r2, r3;
        java.util.logging.Logger r0;
        java.util.logging.Level $r1;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.logging.Logger;

        if r2 == null goto label1;

        r3 = "TRUST_STORE_ALGORITHM_SET";

        goto label2;

     label1:
        r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        r3 = "TRUST_STORE_ALGORITHM_NOT_SET";

     label2:
        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r0, $r1, r3, r2);

        return r2;
    }

    public static javax.net.ssl.SSLContext getSSLContext(java.lang.String, javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[]) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        javax.net.ssl.SSLContext $r1;
        javax.net.ssl.TrustManager[] r3;
        java.lang.String r0;
        javax.net.ssl.KeyManager[] r2;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: javax.net.ssl.KeyManager[];

        r3 := @parameter2: javax.net.ssl.TrustManager[];

        $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(r0);

        virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r2, r3, null);

        return $r1;
    }

    public static java.lang.String[] getSupportedCipherSuites(javax.net.ssl.SSLContext)
    {
        javax.net.ssl.SSLContext r0;
        java.lang.String[] $r2;
        javax.net.ssl.SSLSocketFactory $r1;

        r0 := @parameter0: javax.net.ssl.SSLContext;

        $r1 = virtualinvoke r0.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocketFactory: java.lang.String[] getSupportedCipherSuites()>();

        return $r2;
    }

    public static java.lang.String[] getServerSupportedCipherSuites(javax.net.ssl.SSLContext)
    {
        javax.net.ssl.SSLContext r0;
        java.lang.String[] $r2;
        javax.net.ssl.SSLServerSocketFactory $r1;

        r0 := @parameter0: javax.net.ssl.SSLContext;

        $r1 = virtualinvoke r0.<javax.net.ssl.SSLContext: javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()>();

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLServerSocketFactory: java.lang.String[] getSupportedCipherSuites()>();

        return $r2;
    }

    public static java.lang.String[] getCiphersuites(java.util.List, java.lang.String[], org.apache.cxf.configuration.security.FiltersType, java.util.logging.Logger, boolean)
    {
        org.apache.cxf.configuration.security.FiltersType r3;
        boolean z0, $z1, $z2, $z3;
        java.util.logging.Logger r1;
        java.util.List r0, $r6, r7, $r8, r9, $r21, $r22, $r25, $r26;
        java.lang.String[] r10, r24;
        java.util.logging.Level $r2, $r11, $r12, $r15, $r19, $r23;
        java.util.ArrayList $r4, $r5;
        int i0, $i1;
        java.lang.String $r13, $r14, $r16, $r17, $r18, $r20;

        r0 := @parameter0: java.util.List;

        r10 := @parameter1: java.lang.String[];

        r3 := @parameter2: org.apache.cxf.configuration.security.FiltersType;

        r1 := @parameter3: java.util.logging.Logger;

        z0 := @parameter4: boolean;

        if r0 == null goto label01;

        $z3 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label01;

        r24 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: java.lang.String[] getCiphersFromList(java.util.List,java.util.logging.Logger,boolean)>(r0, r1, z0);

        goto label12;

     label01:
        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>(r1, $r2, "CIPHERSUITES_NOT_SET");

        if r3 != null goto label02;

        $r23 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>(r1, $r23, "CIPHERSUITE_FILTERS_NOT_SET");

     label02:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        if r3 == null goto label03;

        $r22 = virtualinvoke r3.<org.apache.cxf.configuration.security.FiltersType: java.util.List getInclude()>();

        $r25 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: java.util.List compileRegexPatterns(java.util.List,boolean,java.util.logging.Logger)>($r22, 1, r1);

        goto label04;

     label03:
        $r6 = <org.apache.cxf.configuration.jsse.SSLUtils: java.util.List DEFAULT_CIPHERSUITE_FILTERS_INCLUDE>;

        $r25 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: java.util.List compileRegexPatterns(java.util.List,boolean,java.util.logging.Logger)>($r6, 1, r1);

     label04:
        r7 = $r25;

        if r3 == null goto label05;

        $r21 = virtualinvoke r3.<org.apache.cxf.configuration.security.FiltersType: java.util.List getExclude()>();

        $r26 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: java.util.List compileRegexPatterns(java.util.List,boolean,java.util.logging.Logger)>($r21, 0, r1);

        goto label06;

     label05:
        $r8 = <org.apache.cxf.configuration.jsse.SSLUtils: java.util.List DEFAULT_CIPHERSUITE_FILTERS_EXCLUDE>;

        $r26 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: java.util.List compileRegexPatterns(java.util.List,boolean,java.util.logging.Logger)>($r8, 1, r1);

     label06:
        r9 = $r26;

        i0 = 0;

     label07:
        $i1 = lengthof r10;

        if i0 >= $i1 goto label10;

        $r13 = r10[i0];

        $z1 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: boolean matchesOneOf(java.lang.String,java.util.List)>($r13, r7);

        if $z1 == 0 goto label08;

        $r17 = r10[i0];

        $z2 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: boolean matchesOneOf(java.lang.String,java.util.List)>($r17, r9);

        if $z2 != 0 goto label08;

        $r19 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r18 = r10[i0];

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r1, $r19, "CIPHERSUITE_INCLUDED", $r18);

        $r20 = r10[i0];

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r20);

        goto label09;

     label08:
        $r15 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r14 = r10[i0];

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r1, $r15, "CIPHERSUITE_EXCLUDED", $r14);

        $r16 = r10[i0];

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r16);

     label09:
        i0 = i0 + 1;

        goto label07;

     label10:
        $r11 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r1, $r11, "CIPHERSUITES_FILTERED", $r4);

        $r12 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r1, $r12, "CIPHERSUITES_EXCLUDED", $r5);

        if z0 == 0 goto label11;

        r24 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: java.lang.String[] getCiphersFromList(java.util.List,java.util.logging.Logger,boolean)>($r5, r1, z0);

        goto label12;

     label11:
        r24 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: java.lang.String[] getCiphersFromList(java.util.List,java.util.logging.Logger,boolean)>($r4, r1, z0);

     label12:
        return r24;
    }

    private static java.util.List compileRegexPatterns(java.util.List, boolean, java.util.logging.Logger)
    {
        java.util.Iterator $r3;
        java.util.logging.Logger r6;
        java.util.ArrayList $r0;
        java.util.logging.Level $r7;
        java.util.List r1;
        java.lang.Object $r4;
        java.lang.String r2, r5, $r9;
        java.util.regex.Pattern $r8;
        boolean z0, $z1;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        r6 := @parameter2: java.util.logging.Logger;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        if r1 == null goto label4;

        if z0 == 0 goto label1;

        $r9 = "CIPHERSUITE_INCLUDE_FILTER";

        goto label2;

     label1:
        $r9 = "CIPHERSUITE_EXCLUDE_FILTER";

     label2:
        r2 = $r9;

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r7 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r6, $r7, r2, r5);

        $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r5);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label3;

     label4:
        return $r0;
    }

    private static boolean matchesOneOf(java.lang.String, java.util.List)
    {
        java.util.Iterator $r1;
        java.util.List r0;
        java.util.regex.Matcher $r5;
        java.lang.Object $r2;
        java.util.regex.Pattern r3;
        java.lang.String r4;
        boolean $z0, $z1, z2;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.List;

        z2 = 0;

        if r0 == null goto label3;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.regex.Pattern) $r2;

        $r5 = virtualinvoke r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r4);

        $z1 = virtualinvoke $r5.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        goto label1;

     label3:
        return z2;
    }

    private static java.lang.String[] getCiphersFromList(java.util.List, java.util.logging.Logger, boolean)
    {
        java.lang.Object[] $r2;
        java.lang.String[] $r1, r3;
        java.util.logging.Level $r5, $r7;
        int $i0, i1, $i2, i3;
        java.lang.String $r8, r9, $r10;
        boolean $z0, z1;
        java.util.logging.Logger r4;
        java.util.List r0;
        java.lang.StringBuilder $r6;

        r0 := @parameter0: java.util.List;

        r4 := @parameter1: java.util.logging.Logger;

        z1 := @parameter2: boolean;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r1 = newarray (java.lang.String)[$i0];

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        r3 = (java.lang.String[]) $r2;

        $r5 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke r4.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r5);

        if $z0 == 0 goto label6;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        i1 = lengthof r3;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        r9 = r3[i3];

        $i2 = virtualinvoke $r6.<java.lang.StringBuilder: int length()>();

        if $i2 == 0 goto label2;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        i3 = i3 + 1;

        goto label1;

     label3:
        $r7 = <java.util.logging.Level: java.util.logging.Level FINE>;

        if z1 == 0 goto label4;

        $r10 = "CIPHERSUITES_EXCLUDED";

        goto label5;

     label4:
        $r10 = "CIPHERSUITES_SET";

     label5:
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r4, $r7, $r10, $r8);

     label6:
        return r3;
    }

    public static java.lang.String getTrustStore(java.lang.String, java.util.logging.Logger)
    {
        java.util.logging.Logger r5;
        java.util.logging.Level $r8;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r0, $r2, r6, r7;

        r6 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.logging.Logger;

        if r6 == null goto label1;

        r7 = "TRUST_STORE_SET";

        goto label3;

     label1:
        $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStore");

        r6 = $r0;

        if $r0 == null goto label2;

        r7 = "TRUST_STORE_SYSTEM_PROPERTY_SET";

        goto label3;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("java.home");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/lib/security/cacerts");

        r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r7 = "TRUST_STORE_NOT_SET";

     label3:
        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r5, $r8, r7, r6);

        return r6;
    }

    public static java.lang.String getTrustStoreType(java.lang.String, java.util.logging.Logger)
    {
        java.lang.String $r0, r2, r3;
        java.util.logging.Logger r1;
        java.util.logging.Level $r4;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.logging.Logger;

        if r2 == null goto label1;

        r3 = "TRUST_STORE_TYPE_SET";

        goto label3;

     label1:
        $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStoreType");

        r2 = $r0;

        if $r0 != null goto label2;

        r2 = "JKS";

        r3 = "TRUST_STORE_TYPE_NOT_SET";

        goto label3;

     label2:
        r3 = "TRUST_STORE_TYPE_SYSTEM_SET";

     label3:
        $r4 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r1, $r4, r3, r2);

        return r2;
    }

    public static java.lang.String getSecureSocketProtocol(java.lang.String, java.util.logging.Logger)
    {
        java.lang.String r3;
        java.util.logging.Logger r0;
        java.util.logging.Level $r1, $r2;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.logging.Logger;

        if r3 == null goto label1;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r0, $r2, "SECURE_SOCKET_PROTOCOL_SET", r3);

        goto label2;

     label1:
        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>(r0, $r1, "SECURE_SOCKET_PROTOCOL_NOT_SET");

        r3 = "TLSv1";

     label2:
        return r3;
    }

    public static boolean getRequireClientAuthentication(boolean, java.lang.Boolean, java.util.logging.Logger)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level $r1, $r3;
        java.lang.Boolean r2, $r4;
        boolean z0, $z1, z2;

        z0 := @parameter0: boolean;

        r2 := @parameter1: java.lang.Boolean;

        r0 := @parameter2: java.util.logging.Logger;

        z2 = 0;

        if z0 == 0 goto label1;

        $z1 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        z2 = $z1;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r0, $r3, "REQUIRE_CLIENT_AUTHENTICATION_SET", $r4);

        goto label2;

     label1:
        $r1 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>(r0, $r1, "REQUIRE_CLIENT_AUTHENTICATION_NOT_SET");

     label2:
        return z2;
    }

    public static boolean getWantClientAuthentication(boolean, java.lang.Boolean, java.util.logging.Logger)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level $r1, $r3;
        java.lang.Boolean r2, $r4;
        boolean z0, $z1, z2;

        z0 := @parameter0: boolean;

        r2 := @parameter1: java.lang.Boolean;

        r0 := @parameter2: java.util.logging.Logger;

        z2 = 1;

        if z0 == 0 goto label1;

        $z1 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        z2 = $z1;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r0, $r3, "WANT_CLIENT_AUTHENTICATION_SET", $r4);

        goto label2;

     label1:
        $r1 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>(r0, $r1, "WANT_CLIENT_AUTHENTICATION_NOT_SET");

     label2:
        return z2;
    }

    public static void logUnSupportedPolicies(java.lang.Object, boolean, java.lang.String[], java.util.logging.Logger)
    {
        java.lang.Object[] $r10;
        java.lang.String[] r0;
        int $i0, i1;
        java.lang.Boolean $r12;
        java.lang.String $r5, $r7, $r14;
        java.lang.reflect.Method $r9;
        boolean $z0, z1;
        java.lang.Class[] $r8;
        java.util.logging.Logger r13;
        java.lang.Exception $r15;
        java.lang.Object r1, $r11;
        java.lang.Class $r2;
        java.lang.StringBuilder $r3, $r4, $r6;

        r1 := @parameter0: java.lang.Object;

        z1 := @parameter1: boolean;

        r0 := @parameter2: java.lang.String[];

        r13 := @parameter3: java.util.logging.Logger;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label6;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isSet");

        $r5 = r0[i1];

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = newarray (java.lang.Class)[0];

        $r9 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r7, $r8);

        $r10 = (java.lang.Object[]) null;

        $r11 = virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r10);

        $r12 = (java.lang.Boolean) $r11;

        $z0 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        $r14 = r0[i1];

        staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: void logUnSupportedPolicy(boolean,boolean,java.lang.String,java.util.logging.Logger)>($z0, z1, $r14, r13);

     label3:
        goto label5;

     label4:
        $r15 := @caughtexception;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private static void logUnSupportedPolicy(boolean, boolean, java.lang.String, java.util.logging.Logger)
    {
        java.lang.String r1, $r3;
        java.util.logging.Logger r0;
        boolean z0, z1;
        java.util.logging.Level $r2;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        r0 := @parameter3: java.util.logging.Logger;

        if z0 == 0 goto label3;

        $r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        if z1 == 0 goto label1;

        $r3 = "UNSUPPORTED_SSL_CLIENT_POLICY_DATA";

        goto label2;

     label1:
        $r3 = "UNSUPPORTED_SSL_SERVER_POLICY_DATA";

     label2:
        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r0, $r2, $r3, r1);

     label3:
        return;
    }

    public static boolean testAllDataHasSetupMethod(java.lang.Object, java.lang.String[], java.lang.String[])
    {
        java.lang.String[] r13, r14;
        java.lang.reflect.Method[] $r2, $r4;
        int $i0, $i1, $i2, i3;
        java.lang.String $r6, $r7, $r8, $r12;
        java.lang.reflect.Method $r5;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        java.lang.Object r0;
        java.lang.Class $r1, $r3;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @parameter0: java.lang.Object;

        r13 := @parameter1: java.lang.String[];

        r14 := @parameter2: java.lang.String[];

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $r3 = class "Lorg/apache/cxf/configuration/jsse/SSLUtils;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        z4 = 1;

        i3 = 0;

     label1:
        $i0 = lengthof $r2;

        if i3 >= $i0 goto label6;

        if z4 == 0 goto label6;

        $r5 = $r2[i3];

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("isSet");

        if $z0 == 0 goto label5;

        $r7 = "isSet";

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        $r8 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: boolean hasMethod(java.lang.reflect.Method[],java.lang.String)>($r4, $r12);

        if $z1 != 0 goto label2;

        $z2 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: boolean isExcluded(java.lang.String[],java.lang.String)>(r13, $r8);

        if $z2 != 0 goto label2;

        $z3 = staticinvoke <org.apache.cxf.configuration.jsse.SSLUtils: boolean isExcluded(java.lang.String[],java.lang.String)>(r14, $r8);

        if $z3 == 0 goto label3;

     label2:
        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        z4 = $z5;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        return z4;
    }

    private static boolean hasMethod(java.lang.reflect.Method[], java.lang.String)
    {
        int $i0, i1;
        java.lang.String $r2, r3;
        java.lang.reflect.Method $r1;
        java.lang.reflect.Method[] r0;
        boolean z0;

        r0 := @parameter0: java.lang.reflect.Method[];

        r3 := @parameter1: java.lang.String;

        z0 = 0;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        if z0 != 0 goto label2;

        $r1 = r0[i1];

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return z0;
    }

    private static boolean isExcluded(java.lang.String[], java.lang.String)
    {
        int $i0, i1;
        java.lang.String[] r0;
        java.lang.String r1, $r2;
        boolean z0;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        z0 = 0;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        if z0 != 0 goto label2;

        $r2 = r0[i1];

        z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return z0;
    }

    static void <clinit>()
    {
        java.util.List $r1, $r3;
        java.lang.String[] $r0, $r2;

        <org.apache.cxf.configuration.jsse.SSLUtils: boolean DEFAULT_WANT_CLIENT_AUTHENTICATION> = 1;

        <org.apache.cxf.configuration.jsse.SSLUtils: boolean DEFAULT_REQUIRE_CLIENT_AUTHENTICATION> = 0;

        <org.apache.cxf.configuration.jsse.SSLUtils: java.lang.String CERTIFICATE_FACTORY_TYPE> = "X.509";

        <org.apache.cxf.configuration.jsse.SSLUtils: java.lang.String DEFAULT_SECURE_SOCKET_PROTOCOL> = "TLSv1";

        <org.apache.cxf.configuration.jsse.SSLUtils: java.lang.String DEFAULT_TRUST_STORE_TYPE> = "JKS";

        <org.apache.cxf.configuration.jsse.SSLUtils: java.lang.String DEFAULT_KEYSTORE_TYPE> = "PKCS12";

        <org.apache.cxf.configuration.jsse.SSLUtils: java.lang.String PKCS12_TYPE> = "PKCS12";

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = ".*";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        <org.apache.cxf.configuration.jsse.SSLUtils: java.util.List DEFAULT_CIPHERSUITE_FILTERS_INCLUDE> = $r1;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = ".*_NULL_.*";

        $r2[1] = ".*_anon_.*";

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        <org.apache.cxf.configuration.jsse.SSLUtils: java.util.List DEFAULT_CIPHERSUITE_FILTERS_EXCLUDE> = $r3;

        return;
    }
}
