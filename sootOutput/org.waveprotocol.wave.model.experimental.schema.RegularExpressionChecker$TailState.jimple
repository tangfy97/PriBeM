final class org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$TailState extends org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State
{
    private final org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State stack;

    void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State)
    {
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$TailState r0;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State r1;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$TailState;

        r1 := @parameter0: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State;

        specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State: void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1)>(null);

        r0.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$TailState: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State stack> = r1;

        return;
    }

    org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State nextState(int, char)
    {
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState $r5;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState $r4;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State $r2;
        int i1, $i2;
        char c0;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$TailState r1;

        r1 := @this: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$TailState;

        i1 := @parameter0: int;

        c0 := @parameter1: char;

        $i2 = (int) c0;

        lookupswitch($i2)
        {
            case 40: goto label2;
            case 41: goto label3;
            case 92: goto label1;
            default: goto label4;
        };

     label1:
        $r4 = new org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState;

        specialinvoke $r4.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState: void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State)>(r1);

        return $r4;

     label2:
        $r5 = new org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState;

        specialinvoke $r5.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState: void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State)>(r1);

        return $r5;

     label3:
        $r2 = r1.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$TailState: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State stack>;

        return $r2;

     label4:
        return r1;
    }

    void endOfInput() throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r0;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$TailState r1;

        r1 := @this: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$TailState;

        $r0 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        specialinvoke $r0.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>("Unmatched \'(\'");

        throw $r0;
    }
}
