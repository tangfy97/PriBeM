public class ucar.nc2.iosp.netcdf3.SPFactory extends java.lang.Object
{
    private static java.lang.Class spClass;
    private static boolean debug;

    public void <init>()
    {
        ucar.nc2.iosp.netcdf3.SPFactory r0;

        r0 := @this: ucar.nc2.iosp.netcdf3.SPFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static ucar.nc2.iosp.IOServiceProvider getServiceProvider()
    {
        java.io.PrintStream $r4;
        java.lang.IllegalAccessException $r10;
        ucar.nc2.iosp.IOServiceProvider $r2;
        java.lang.InstantiationException $r11;
        java.lang.Class $r0, $r6;
        java.lang.Object $r1;
        java.lang.StringBuilder $r3, $r5, $r8;
        java.lang.String $r7, $r9;
        boolean $z0;

     label1:
        $z0 = <ucar.nc2.iosp.netcdf3.SPFactory: boolean debug>;

        if $z0 == 0 goto label2;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("**********using Service Provider Class = ");

        $r6 = <ucar.nc2.iosp.netcdf3.SPFactory: java.lang.Class spClass>;

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label2:
        $r0 = <ucar.nc2.iosp.netcdf3.SPFactory: java.lang.Class spClass>;

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

        $r2 = (ucar.nc2.iosp.IOServiceProvider) $r1;

     label3:
        return $r2;

     label4:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.InstantiationException: void printStackTrace()>();

        goto label6;

     label5:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.IllegalAccessException: void printStackTrace()>();

     label6:
        return null;

        catch java.lang.InstantiationException from label1 to label3 with label4;
        catch java.lang.IllegalAccessException from label1 to label3 with label5;
    }

    public static void setServiceProvider(java.lang.String) throws java.lang.ClassNotFoundException, java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        java.io.PrintStream $r4;
        java.lang.Class $r1, $r2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String r0, $r7;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        <ucar.nc2.iosp.netcdf3.SPFactory: java.lang.Class spClass> = $r1;

        $r2 = <ucar.nc2.iosp.netcdf3.SPFactory: java.lang.Class spClass>;

        virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

        $z0 = <ucar.nc2.iosp.netcdf3.SPFactory: boolean debug>;

        if $z0 == 0 goto label1;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("**********NetcCDF Service Provider Class set to = ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        return;
    }

    static void <clinit>()
    {
        <ucar.nc2.iosp.netcdf3.SPFactory: java.lang.Class spClass> = class "Lucar/nc2/iosp/netcdf3/N3raf;";

        <ucar.nc2.iosp.netcdf3.SPFactory: boolean debug> = 0;

        return;
    }
}
