public class org.mozilla.classfile.ClassFileWriter extends java.lang.Object
{
    public static final short ACC_PUBLIC;
    public static final short ACC_PRIVATE;
    public static final short ACC_PROTECTED;
    public static final short ACC_STATIC;
    public static final short ACC_FINAL;
    public static final short ACC_SYNCHRONIZED;
    public static final short ACC_VOLATILE;
    public static final short ACC_TRANSIENT;
    public static final short ACC_NATIVE;
    public static final short ACC_ABSTRACT;
    private static final int LineNumberTableSize;
    private static final int ExceptionTableSize;
    private static final long FileHeaderConstant;
    private static final boolean DEBUGSTACK;
    private static final boolean DEBUGLABELS;
    private static final boolean DEBUGCODE;
    private java.lang.String generatedClassName;
    private org.mozilla.classfile.ExceptionTableEntry[] itsExceptionTable;
    private int itsExceptionTableTop;
    private int[] itsLineNumberTable;
    private int itsLineNumberTableTop;
    private byte[] itsCodeBuffer;
    private int itsCodeBufferTop;
    private org.mozilla.classfile.ConstantPool itsConstantPool;
    private org.mozilla.classfile.ClassFileMethod itsCurrentMethod;
    private short itsStackTop;
    private short itsMaxStack;
    private short itsMaxLocals;
    private org.mozilla.javascript.ObjArray itsMethods;
    private org.mozilla.javascript.ObjArray itsFields;
    private org.mozilla.javascript.ObjArray itsInterfaces;
    private short itsFlags;
    private short itsThisClassIndex;
    private short itsSuperClassIndex;
    private short itsSourceFileNameIndex;
    private static final int MIN_LABEL_TABLE_SIZE;
    private int[] itsLabelTable;
    private int itsLabelTableTop;
    private static final int MIN_FIXUP_TABLE_SIZE;
    private long[] itsFixupTable;
    private int itsFixupTableTop;
    private org.mozilla.javascript.ObjArray itsVarDescriptors;
    private char[] tmpCharBuffer;

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        byte[] $r1;
        short $s0, $s1, $s2;
        java.lang.String r6, r9, r11;
        org.mozilla.classfile.ConstantPool $r7, $r8, $r10, $r12;
        org.mozilla.classfile.ClassFileWriter r0;
        org.mozilla.javascript.ObjArray $r2, $r3, $r4;
        char[] $r5;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        r6 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        r11 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[256];

        r0.<org.mozilla.classfile.ClassFileWriter: byte[] itsCodeBuffer> = $r1;

        $r2 = new org.mozilla.javascript.ObjArray;

        specialinvoke $r2.<org.mozilla.javascript.ObjArray: void <init>()>();

        r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsMethods> = $r2;

        $r3 = new org.mozilla.javascript.ObjArray;

        specialinvoke $r3.<org.mozilla.javascript.ObjArray: void <init>()>();

        r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsFields> = $r3;

        $r4 = new org.mozilla.javascript.ObjArray;

        specialinvoke $r4.<org.mozilla.javascript.ObjArray: void <init>()>();

        r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsInterfaces> = $r4;

        $r5 = newarray (char)[64];

        r0.<org.mozilla.classfile.ClassFileWriter: char[] tmpCharBuffer> = $r5;

        r0.<org.mozilla.classfile.ClassFileWriter: java.lang.String generatedClassName> = r6;

        $r7 = new org.mozilla.classfile.ConstantPool;

        specialinvoke $r7.<org.mozilla.classfile.ConstantPool: void <init>(org.mozilla.classfile.ClassFileWriter)>(r0);

        r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool> = $r7;

        $r8 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s0 = virtualinvoke $r8.<org.mozilla.classfile.ConstantPool: short addClass(java.lang.String)>(r6);

        r0.<org.mozilla.classfile.ClassFileWriter: short itsThisClassIndex> = $s0;

        $r10 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s1 = virtualinvoke $r10.<org.mozilla.classfile.ConstantPool: short addClass(java.lang.String)>(r9);

        r0.<org.mozilla.classfile.ClassFileWriter: short itsSuperClassIndex> = $s1;

        if r11 == null goto label1;

        $r12 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s2 = virtualinvoke $r12.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r11);

        r0.<org.mozilla.classfile.ClassFileWriter: short itsSourceFileNameIndex> = $s2;

     label1:
        r0.<org.mozilla.classfile.ClassFileWriter: short itsFlags> = 1;

        return;
    }

    public final java.lang.String getClassName()
    {
        java.lang.String $r1;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: java.lang.String generatedClassName>;

        return $r1;
    }

    public void addInterface(java.lang.String)
    {
        short $s0;
        java.lang.Short $r3;
        org.mozilla.classfile.ConstantPool $r2;
        org.mozilla.javascript.ObjArray $r4;
        java.lang.String r1;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s0 = virtualinvoke $r2.<org.mozilla.classfile.ConstantPool: short addClass(java.lang.String)>(r1);

        $r4 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsInterfaces>;

        $r3 = new java.lang.Short;

        specialinvoke $r3.<java.lang.Short: void <init>(short)>($s0);

        virtualinvoke $r4.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>($r3);

        return;
    }

    public void setFlags(short)
    {
        short s0;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        s0 := @parameter0: short;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsFlags> = s0;

        return;
    }

    static java.lang.String getSlashedForm(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        return $r1;
    }

    public static java.lang.String classNameToSignature(java.lang.String)
    {
        char $c4;
        int $i0, i1, $i2, $i3, i5, $i6;
        char[] r1;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = 1 + $i0;

        $i2 = i1 + 1;

        r1 = newarray (char)[$i2];

        r1[0] = 76;

        r1[i1] = 59;

        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(0, $i0, r1, 1);

        i5 = 1;

     label1:
        if i5 == i1 goto label3;

        $c4 = r1[i5];

        $i6 = (int) $c4;

        if $i6 != 46 goto label2;

        r1[i5] = 47;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $r3 = new java.lang.String;

        $i3 = i1 + 1;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>(r1, 0, $i3);

        return $r3;
    }

    public void addField(java.lang.String, java.lang.String, short)
    {
        org.mozilla.classfile.ConstantPool $r2, $r4;
        org.mozilla.classfile.ClassFileWriter r0;
        short $s0, $s1, s2;
        org.mozilla.javascript.ObjArray $r6;
        java.lang.String r1, r3;
        org.mozilla.classfile.ClassFileField $r5;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        s2 := @parameter2: short;

        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s0 = virtualinvoke $r2.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r1);

        $r4 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s1 = virtualinvoke $r4.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r3);

        $r6 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsFields>;

        $r5 = new org.mozilla.classfile.ClassFileField;

        specialinvoke $r5.<org.mozilla.classfile.ClassFileField: void <init>(short,short,short)>($s0, $s1, s2);

        virtualinvoke $r6.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>($r5);

        return;
    }

    public void addField(java.lang.String, java.lang.String, short, int)
    {
        org.mozilla.classfile.ConstantPool $r2, $r4, $r6, $r7;
        org.mozilla.classfile.ClassFileWriter r0;
        short $s0, $s1, s2, $s3;
        org.mozilla.javascript.ObjArray $r8;
        int i4, $i5;
        java.lang.String r1, r3;
        org.mozilla.classfile.ClassFileField $r5;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        s2 := @parameter2: short;

        i4 := @parameter3: int;

        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s0 = virtualinvoke $r2.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r1);

        $r4 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s1 = virtualinvoke $r4.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r3);

        $r5 = new org.mozilla.classfile.ClassFileField;

        specialinvoke $r5.<org.mozilla.classfile.ClassFileField: void <init>(short,short,short)>($s0, $s1, s2);

        $r6 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s3 = virtualinvoke $r6.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>("ConstantValue");

        $r7 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $i5 = virtualinvoke $r7.<org.mozilla.classfile.ConstantPool: int addConstant(int)>(i4);

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileField: void setAttributes(short,short,short,int)>($s3, 0, 0, $i5);

        $r8 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsFields>;

        virtualinvoke $r8.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>($r5);

        return;
    }

    public void addField(java.lang.String, java.lang.String, short, long)
    {
        org.mozilla.classfile.ConstantPool $r2, $r4, $r6, $r7;
        long l4;
        org.mozilla.classfile.ClassFileWriter r0;
        short $s0, $s1, s2, $s3;
        org.mozilla.javascript.ObjArray $r8;
        int $i5;
        java.lang.String r1, r3;
        org.mozilla.classfile.ClassFileField $r5;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        s2 := @parameter2: short;

        l4 := @parameter3: long;

        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s0 = virtualinvoke $r2.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r1);

        $r4 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s1 = virtualinvoke $r4.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r3);

        $r5 = new org.mozilla.classfile.ClassFileField;

        specialinvoke $r5.<org.mozilla.classfile.ClassFileField: void <init>(short,short,short)>($s0, $s1, s2);

        $r6 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s3 = virtualinvoke $r6.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>("ConstantValue");

        $r7 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $i5 = virtualinvoke $r7.<org.mozilla.classfile.ConstantPool: int addConstant(long)>(l4);

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileField: void setAttributes(short,short,short,int)>($s3, 0, 2, $i5);

        $r8 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsFields>;

        virtualinvoke $r8.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>($r5);

        return;
    }

    public void addField(java.lang.String, java.lang.String, short, double)
    {
        org.mozilla.classfile.ConstantPool $r2, $r4, $r6, $r7;
        org.mozilla.classfile.ClassFileWriter r0;
        short $s0, $s1, s2, $s3;
        org.mozilla.javascript.ObjArray $r8;
        int $i4;
        java.lang.String r1, r3;
        org.mozilla.classfile.ClassFileField $r5;
        double d0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        s2 := @parameter2: short;

        d0 := @parameter3: double;

        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s0 = virtualinvoke $r2.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r1);

        $r4 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s1 = virtualinvoke $r4.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r3);

        $r5 = new org.mozilla.classfile.ClassFileField;

        specialinvoke $r5.<org.mozilla.classfile.ClassFileField: void <init>(short,short,short)>($s0, $s1, s2);

        $r6 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s3 = virtualinvoke $r6.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>("ConstantValue");

        $r7 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $i4 = virtualinvoke $r7.<org.mozilla.classfile.ConstantPool: int addConstant(double)>(d0);

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileField: void setAttributes(short,short,short,int)>($s3, 0, 2, $i4);

        $r8 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsFields>;

        virtualinvoke $r8.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>($r5);

        return;
    }

    public void addVariableDescriptor(java.lang.String, java.lang.String, int, int)
    {
        org.mozilla.classfile.ConstantPool $r2, $r4;
        org.mozilla.classfile.ClassFileWriter r0;
        short $s0, $s1;
        int[] $r5;
        org.mozilla.javascript.ObjArray $r6, $r7, $r9;
        int i2, i3, $i4, $i5;
        java.lang.String r1, r3;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s0 = virtualinvoke $r2.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r1);

        $r4 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s1 = virtualinvoke $r4.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r3);

        $r5 = newarray (int)[4];

        $i4 = (int) $s0;

        $r5[0] = $i4;

        $i5 = (int) $s1;

        $r5[1] = $i5;

        $r5[2] = i2;

        $r5[3] = i3;

        $r6 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsVarDescriptors>;

        if $r6 != null goto label1;

        $r9 = new org.mozilla.javascript.ObjArray;

        specialinvoke $r9.<org.mozilla.javascript.ObjArray: void <init>()>();

        r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsVarDescriptors> = $r9;

     label1:
        $r7 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsVarDescriptors>;

        virtualinvoke $r7.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>($r5);

        return;
    }

    public void startMethod(java.lang.String, java.lang.String, short)
    {
        org.mozilla.classfile.ConstantPool $r2, $r4;
        org.mozilla.classfile.ClassFileWriter r0;
        short $s0, $s1, s2;
        org.mozilla.classfile.ClassFileMethod $r5, $r6;
        org.mozilla.javascript.ObjArray $r7;
        java.lang.String r1, r3;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        s2 := @parameter2: short;

        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s0 = virtualinvoke $r2.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r1);

        $r4 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s1 = virtualinvoke $r4.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>(r3);

        $r5 = new org.mozilla.classfile.ClassFileMethod;

        specialinvoke $r5.<org.mozilla.classfile.ClassFileMethod: void <init>(short,short,short)>($s0, $s1, s2);

        r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ClassFileMethod itsCurrentMethod> = $r5;

        $r7 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsMethods>;

        $r6 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ClassFileMethod itsCurrentMethod>;

        virtualinvoke $r7.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>($r6);

        return;
    }

    public void stopMethod(short)
    {
        byte[] $r5, $r22;
        org.mozilla.classfile.ConstantPool $r4, $r11, $r15;
        org.mozilla.javascript.ObjArray $r3, $r7, $r9, $r12, $r13, $r21;
        short s0, $s9, $s12, $s14, $s22, $s37, s67, s68, s69, s70;
        org.mozilla.classfile.ExceptionTableEntry r24;
        java.lang.IllegalStateException $r26, $r27, $r28, $r29;
        org.mozilla.classfile.ClassFileMethod $r1, $r10;
        int[] $r2, $r6, $r8, $r16, r25;
        org.mozilla.classfile.ExceptionTableEntry[] $r17;
        org.mozilla.classfile.ClassFileWriter r0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, i27, i28, i29, i30, $i31, i32, $i33, $i34, $i35, $i36, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, i62, i63, i64, i65, i66, i71, i72, i73, i74, i75, i76, i77, $i78, $i80, $i81, $i82, $i83, $i85, $i86, $i88, $i89, $i91, $i92, $i93, $i94, $i95, $i96, $i97;
        java.lang.Object $r14;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        s0 := @parameter0: short;

        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ClassFileMethod itsCurrentMethod>;

        if $r1 != null goto label01;

        $r26 = new java.lang.IllegalStateException;

        specialinvoke $r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No method to stop");

        throw $r26;

     label01:
        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void fixLabelGotos()>();

        r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxLocals> = s0;

        i62 = 0;

        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLineNumberTable>;

        if $r2 == null goto label02;

        $i60 = r0.<org.mozilla.classfile.ClassFileWriter: int itsLineNumberTableTop>;

        $i61 = $i60 * 4;

        i62 = 8 + $i61;

     label02:
        i63 = 0;

        $r3 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsVarDescriptors>;

        if $r3 == null goto label03;

        $r21 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsVarDescriptors>;

        $i56 = virtualinvoke $r21.<org.mozilla.javascript.ObjArray: int size()>();

        $i57 = $i56 * 10;

        i63 = 8 + $i57;

     label03:
        $i1 = r0.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        $i2 = 14 + $i1;

        $i5 = $i2 + 2;

        $i3 = r0.<org.mozilla.classfile.ClassFileWriter: int itsExceptionTableTop>;

        $i4 = $i3 * 8;

        $i6 = $i5 + $i4;

        $i7 = $i6 + 2;

        $i8 = $i7 + i62;

        $i58 = $i8 + i63;

        $r22 = newarray (byte)[$i58];

        $r4 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s9 = virtualinvoke $r4.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>("Code");

        $i78 = (int) $s9;

        $i10 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i78, $r22, 0);

        $i80 = (int) -6;

        i64 = $i58 + $i80;

        $i11 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt32(int,byte[],int)>(i64, $r22, $i10);

        $s12 = r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack>;

        $i81 = (int) $s12;

        $i13 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i81, $r22, $i11);

        $s14 = r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxLocals>;

        $i82 = (int) $s14;

        $i15 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i82, $r22, $i13);

        $i16 = r0.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        $i17 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt32(int,byte[],int)>($i16, $r22, $i15);

        $r5 = r0.<org.mozilla.classfile.ClassFileWriter: byte[] itsCodeBuffer>;

        $i18 = r0.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r22, $i17, $i18);

        $i19 = r0.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        $i59 = $i17 + $i19;

        $i20 = r0.<org.mozilla.classfile.ClassFileWriter: int itsExceptionTableTop>;

        if $i20 <= 0 goto label08;

        $i45 = r0.<org.mozilla.classfile.ClassFileWriter: int itsExceptionTableTop>;

        i65 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i45, $r22, $i59);

        i66 = 0;

     label04:
        $i46 = r0.<org.mozilla.classfile.ClassFileWriter: int itsExceptionTableTop>;

        if i66 >= $i46 goto label09;

        $r17 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ExceptionTableEntry[] itsExceptionTable>;

        r24 = $r17[i66];

        $i47 = r24.<org.mozilla.classfile.ExceptionTableEntry: int itsStartLabel>;

        $i48 = specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: int getLabelPC(int)>($i47);

        s67 = (short) $i48;

        $i49 = r24.<org.mozilla.classfile.ExceptionTableEntry: int itsEndLabel>;

        $i50 = specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: int getLabelPC(int)>($i49);

        s68 = (short) $i50;

        $i51 = r24.<org.mozilla.classfile.ExceptionTableEntry: int itsHandlerLabel>;

        $i52 = specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: int getLabelPC(int)>($i51);

        s69 = (short) $i52;

        s70 = r24.<org.mozilla.classfile.ExceptionTableEntry: short itsCatchType>;

        $i83 = (int) s67;

        $i85 = (int) -1;

        if $i83 != $i85 goto label05;

        $r27 = new java.lang.IllegalStateException;

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>("start label not defined");

        throw $r27;

     label05:
        $i86 = (int) s68;

        $i88 = (int) -1;

        if $i86 != $i88 goto label06;

        $r28 = new java.lang.IllegalStateException;

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>("end label not defined");

        throw $r28;

     label06:
        $i89 = (int) s69;

        $i91 = (int) -1;

        if $i89 != $i91 goto label07;

        $r29 = new java.lang.IllegalStateException;

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>("handler label not defined");

        throw $r29;

     label07:
        $i92 = (int) s67;

        $i53 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i92, $r22, i65);

        $i93 = (int) s68;

        $i54 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i93, $r22, $i53);

        $i94 = (int) s69;

        $i55 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i94, $r22, $i54);

        $i95 = (int) s70;

        i65 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i95, $r22, $i55);

        i66 = i66 + 1;

        goto label04;

     label08:
        i65 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>(0, $r22, $i59);

     label09:
        i71 = 0;

        $r6 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLineNumberTable>;

        if $r6 == null goto label10;

        i71 = 1;

     label10:
        $r7 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsVarDescriptors>;

        if $r7 == null goto label11;

        i71 = i71 + 1;

     label11:
        $i21 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>(i71, $r22, i65);

        i72 = $i21;

        $r8 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLineNumberTable>;

        if $r8 == null goto label13;

        $r15 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s37 = virtualinvoke $r15.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>("LineNumberTable");

        $i96 = (int) $s37;

        $i38 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i96, $r22, $i21);

        $i39 = r0.<org.mozilla.classfile.ClassFileWriter: int itsLineNumberTableTop>;

        $i40 = $i39 * 4;

        i73 = 2 + $i40;

        $i41 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt32(int,byte[],int)>(i73, $r22, $i38);

        $i42 = r0.<org.mozilla.classfile.ClassFileWriter: int itsLineNumberTableTop>;

        i72 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i42, $r22, $i41);

        i74 = 0;

     label12:
        $i43 = r0.<org.mozilla.classfile.ClassFileWriter: int itsLineNumberTableTop>;

        if i74 >= $i43 goto label13;

        $r16 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLineNumberTable>;

        $i44 = $r16[i74];

        i72 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt32(int,byte[],int)>($i44, $r22, i72);

        i74 = i74 + 1;

        goto label12;

     label13:
        $r9 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsVarDescriptors>;

        if $r9 == null goto label15;

        $r11 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s22 = virtualinvoke $r11.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>("LocalVariableTable");

        $i97 = (int) $s22;

        $i23 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i97, $r22, i72);

        $r12 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsVarDescriptors>;

        $i24 = virtualinvoke $r12.<org.mozilla.javascript.ObjArray: int size()>();

        $i25 = $i24 * 10;

        i75 = 2 + $i25;

        $i26 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt32(int,byte[],int)>(i75, $r22, $i23);

        i76 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i24, $r22, $i26);

        i77 = 0;

     label14:
        if i77 >= $i24 goto label15;

        $r13 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsVarDescriptors>;

        $r14 = virtualinvoke $r13.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>(i77);

        r25 = (int[]) $r14;

        i27 = r25[0];

        i28 = r25[1];

        i29 = r25[2];

        i30 = r25[3];

        $i31 = r0.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        i32 = $i31 - i29;

        $i33 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>(i29, $r22, i76);

        $i34 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>(i32, $r22, $i33);

        $i35 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>(i27, $r22, $i34);

        $i36 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>(i28, $r22, $i35);

        i76 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>(i30, $r22, $i36);

        i77 = i77 + 1;

        goto label14;

     label15:
        $r10 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ClassFileMethod itsCurrentMethod>;

        virtualinvoke $r10.<org.mozilla.classfile.ClassFileMethod: void setCodeAttribute(byte[])>($r22);

        r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ExceptionTableEntry[] itsExceptionTable> = null;

        r0.<org.mozilla.classfile.ClassFileWriter: int itsExceptionTableTop> = 0;

        r0.<org.mozilla.classfile.ClassFileWriter: int itsLineNumberTableTop> = 0;

        r0.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop> = 0;

        r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ClassFileMethod itsCurrentMethod> = null;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack> = 0;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop> = 0;

        r0.<org.mozilla.classfile.ClassFileWriter: int itsLabelTableTop> = 0;

        r0.<org.mozilla.classfile.ClassFileWriter: int itsFixupTableTop> = 0;

        r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsVarDescriptors> = null;

        return;
    }

    public void add(int)
    {
        org.mozilla.classfile.ClassFileWriter r0;
        java.lang.IllegalArgumentException $r2;
        short $s2, $s5, $s6, $s7;
        int i0, $i1, $i3, i4, $i8, $i9;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        $i1 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int opcodeCount(int)>(i0);

        if $i1 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unexpected operands");

        throw $r2;

     label1:
        $s2 = r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop>;

        $i3 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int stackChange(int)>(i0);

        $i8 = (int) $s2;

        i4 = $i8 + $i3;

        if i4 < 0 goto label2;

        if 32767 >= i4 goto label3;

     label2:
        staticinvoke <org.mozilla.classfile.ClassFileWriter: void badStack(int)>(i4);

     label3:
        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i0);

        $s6 = (short) i4;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop> = $s6;

        $s7 = r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack>;

        $i9 = (int) $s7;

        if i4 <= $i9 goto label4;

        $s5 = (short) i4;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack> = $s5;

     label4:
        return;
    }

    public void add(int, int)
    {
        byte $b13, $b14;
        org.mozilla.classfile.ClassFileWriter r0;
        short $s1, $s5, $s12, $s15, $s16;
        int i0, $i2, i3, i4, $i6, $i7, $i8, $i9, i10, $i11, $i17, $i19, $i21, $i22, $i23, $i24, $i25;
        java.lang.IllegalArgumentException $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        $s1 = r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop>;

        $i2 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int stackChange(int)>(i0);

        $i17 = (int) $s1;

        i3 = $i17 + $i2;

        if i3 < 0 goto label01;

        if 32767 >= i3 goto label02;

     label01:
        staticinvoke <org.mozilla.classfile.ClassFileWriter: void badStack(int)>(i3);

     label02:
        lookupswitch(i0)
        {
            case 16: goto label08;
            case 17: goto label10;
            case 18: goto label18;
            case 19: goto label18;
            case 20: goto label18;
            case 21: goto label25;
            case 22: goto label25;
            case 23: goto label25;
            case 24: goto label25;
            case 25: goto label25;
            case 54: goto label25;
            case 55: goto label25;
            case 56: goto label25;
            case 57: goto label25;
            case 58: goto label25;
            case 153: goto label03;
            case 154: goto label03;
            case 155: goto label03;
            case 156: goto label03;
            case 157: goto label03;
            case 158: goto label03;
            case 159: goto label03;
            case 160: goto label03;
            case 161: goto label03;
            case 162: goto label03;
            case 163: goto label03;
            case 164: goto label03;
            case 165: goto label03;
            case 166: goto label03;
            case 167: goto label03;
            case 168: goto label03;
            case 169: goto label25;
            case 180: goto label15;
            case 181: goto label15;
            case 188: goto label12;
            case 198: goto label03;
            case 199: goto label03;
            default: goto label29;
        };

     label03:
        $i6 = i4 & -2147483648;

        if $i6 == -2147483648 goto label05;

        if i4 < 0 goto label04;

        $i19 = (int) 65535;

        if i4 <= $i19 goto label05;

     label04:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad label for branch");

        throw $r9;

     label05:
        $i11 = r0.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i0);

        $i7 = i4 & -2147483648;

        if $i7 == -2147483648 goto label06;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeInt16(int)>(i4);

        goto label30;

     label06:
        $i8 = specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: int getLabelPC(int)>(i4);

        $i21 = (int) -1;

        if $i8 == $i21 goto label07;

        i10 = $i8 - $i11;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeInt16(int)>(i10);

        goto label30;

     label07:
        $i9 = $i11 + 1;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addLabelFixup(int,int)>(i4, $i9);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeInt16(int)>(0);

        goto label30;

     label08:
        $b13 = (byte) i4;

        $i22 = (int) $b13;

        if $i22 == i4 goto label09;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("out of range byte");

        throw $r10;

     label09:
        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i0);

        $b14 = (byte) i4;

        $i23 = (int) $b14;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>($i23);

        goto label30;

     label10:
        $s12 = (short) i4;

        $i24 = (int) $s12;

        if $i24 == i4 goto label11;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("out of range short");

        throw $r11;

     label11:
        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i0);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeInt16(int)>(i4);

        goto label30;

     label12:
        if 0 > i4 goto label13;

        if i4 < 256 goto label14;

     label13:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("out of range index");

        throw $r12;

     label14:
        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i0);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i4);

        goto label30;

     label15:
        if 0 > i4 goto label16;

        if i4 < 65536 goto label17;

     label16:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("out of range field");

        throw $r13;

     label17:
        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i0);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeInt16(int)>(i4);

        goto label30;

     label18:
        if 0 > i4 goto label19;

        if i4 < 65536 goto label20;

     label19:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("out of range index");

        throw $r14;

     label20:
        if i4 >= 256 goto label21;

        if i0 == 19 goto label21;

        if i0 != 20 goto label24;

     label21:
        if i0 != 18 goto label22;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(19);

        goto label23;

     label22:
        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i0);

     label23:
        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeInt16(int)>(i4);

        goto label30;

     label24:
        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i0);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i4);

        goto label30;

     label25:
        if 0 > i4 goto label26;

        if i4 < 65536 goto label27;

     label26:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("out of range variable");

        throw $r15;

     label27:
        if i4 < 256 goto label28;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(196);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i0);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeInt16(int)>(i4);

        goto label30;

     label28:
        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i0);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i4);

        goto label30;

     label29:
        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unexpected opcode for 1 operand");

        throw $r16;

     label30:
        $s15 = (short) i3;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop> = $s15;

        $s16 = r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack>;

        $i25 = (int) $s16;

        if i3 <= $i25 goto label31;

        $s5 = (short) i3;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack> = $s5;

     label31:
        return;
    }

    public void addLoadConstant(int)
    {
        org.mozilla.classfile.ConstantPool $r1;
        int i0, $i1;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $i1 = virtualinvoke $r1.<org.mozilla.classfile.ConstantPool: int addConstant(int)>(i0);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(18, $i1);

        return;
    }

    public void addLoadConstant(long)
    {
        org.mozilla.classfile.ConstantPool $r1;
        int $i1;
        long l0;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        l0 := @parameter0: long;

        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $i1 = virtualinvoke $r1.<org.mozilla.classfile.ConstantPool: int addConstant(long)>(l0);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(20, $i1);

        return;
    }

    public void addLoadConstant(float)
    {
        org.mozilla.classfile.ConstantPool $r1;
        int $i0;
        float f0;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        f0 := @parameter0: float;

        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $i0 = virtualinvoke $r1.<org.mozilla.classfile.ConstantPool: int addConstant(float)>(f0);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(18, $i0);

        return;
    }

    public void addLoadConstant(double)
    {
        org.mozilla.classfile.ConstantPool $r1;
        int $i0;
        org.mozilla.classfile.ClassFileWriter r0;
        double d0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        d0 := @parameter0: double;

        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $i0 = virtualinvoke $r1.<org.mozilla.classfile.ConstantPool: int addConstant(double)>(d0);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(20, $i0);

        return;
    }

    public void addLoadConstant(java.lang.String)
    {
        org.mozilla.classfile.ConstantPool $r2;
        int $i0;
        java.lang.String r1;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $i0 = virtualinvoke $r2.<org.mozilla.classfile.ConstantPool: int addConstant(java.lang.String)>(r1);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(18, $i0);

        return;
    }

    public void add(int, int, int)
    {
        short $s1, $s6, $s7, $s8;
        int i0, $i2, i3, i4, i5, $i9, $i11, $i12;
        org.mozilla.classfile.ClassFileWriter r0;
        java.lang.IllegalArgumentException $r6, $r7, $r8, $r9, $r10;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        $s1 = r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop>;

        $i2 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int stackChange(int)>(i0);

        $i9 = (int) $s1;

        i3 = $i9 + $i2;

        if i3 < 0 goto label01;

        if 32767 >= i3 goto label02;

     label01:
        staticinvoke <org.mozilla.classfile.ClassFileWriter: void badStack(int)>(i3);

     label02:
        if i0 != 132 goto label09;

        if 0 > i4 goto label03;

        if i4 < 65536 goto label04;

     label03:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("out of range variable");

        throw $r6;

     label04:
        if 0 > i5 goto label05;

        if i5 < 65536 goto label06;

     label05:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("out of range increment");

        throw $r7;

     label06:
        if i4 > 255 goto label07;

        $i11 = (int) -128;

        if i5 < $i11 goto label07;

        if i5 <= 127 goto label08;

     label07:
        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(196);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(132);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeInt16(int)>(i4);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeInt16(int)>(i5);

        goto label15;

     label08:
        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(196);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(132);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i4);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i5);

        goto label15;

     label09:
        if i0 != 197 goto label14;

        if 0 > i4 goto label10;

        if i4 < 65536 goto label11;

     label10:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("out of range index");

        throw $r8;

     label11:
        if 0 > i5 goto label12;

        if i5 < 256 goto label13;

     label12:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("out of range dimensions");

        throw $r9;

     label13:
        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(197);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeInt16(int)>(i4);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i5);

        goto label15;

     label14:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unexpected opcode for 2 operands");

        throw $r10;

     label15:
        $s7 = (short) i3;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop> = $s7;

        $s8 = r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack>;

        $i12 = (int) $s8;

        if i3 <= $i12 goto label16;

        $s6 = (short) i3;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack> = $s6;

     label16:
        return;
    }

    public void add(int, java.lang.String)
    {
        org.mozilla.classfile.ConstantPool $r2;
        org.mozilla.classfile.ClassFileWriter r0;
        java.lang.IllegalArgumentException $r4;
        short $s1, $s4, $s5, $s6, $s7;
        int i0, $i2, i3, $i8, $i9, $i10;
        java.lang.String r1;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $s1 = r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop>;

        $i2 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int stackChange(int)>(i0);

        $i8 = (int) $s1;

        i3 = $i8 + $i2;

        if i3 < 0 goto label1;

        if 32767 >= i3 goto label2;

     label1:
        staticinvoke <org.mozilla.classfile.ClassFileWriter: void badStack(int)>(i3);

     label2:
        tableswitch(i0)
        {
            case 187: goto label3;
            case 188: goto label4;
            case 189: goto label3;
            case 190: goto label4;
            case 191: goto label4;
            case 192: goto label3;
            case 193: goto label3;
            default: goto label4;
        };

     label3:
        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s4 = virtualinvoke $r2.<org.mozilla.classfile.ConstantPool: short addClass(java.lang.String)>(r1);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i0);

        $i9 = (int) $s4;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeInt16(int)>($i9);

        goto label5;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bad opcode for class reference");

        throw $r4;

     label5:
        $s5 = (short) i3;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop> = $s5;

        $s6 = r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack>;

        $i10 = (int) $s6;

        if i3 <= $i10 goto label6;

        $s7 = (short) i3;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack> = $s7;

     label6:
        return;
    }

    public void add(int, java.lang.String, java.lang.String, java.lang.String)
    {
        short $s1, $s4, $s8, $s9, $s10;
        byte $b11, $b12;
        int i0, $i2, i5, i7, $i13, $i14, $i15, $i16, $i17;
        java.lang.String r1, r2, r3;
        org.mozilla.classfile.ConstantPool $r5;
        char $c3;
        org.mozilla.classfile.ClassFileWriter r0;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        $s1 = r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop>;

        $i2 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int stackChange(int)>(i0);

        $i13 = (int) $s1;

        i5 = $i13 + $i2;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $i14 = (int) $c3;

        if $i14 == 74 goto label01;

        $i15 = (int) $c3;

        if $i15 != 68 goto label02;

     label01:
        $b12 = 2;

        $b11 = 2;

        goto label03;

     label02:
        $b12 = 1;

        $b11 = 1;

     label03:
        tableswitch(i0)
        {
            case 178: goto label04;
            case 179: goto label05;
            case 180: goto label04;
            case 181: goto label05;
            default: goto label06;
        };

     label04:
        i7 = i5 + $b12;

        goto label07;

     label05:
        i7 = i5 - $b11;

        goto label07;

     label06:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bad opcode for field reference");

        throw $r6;

     label07:
        if i7 < 0 goto label08;

        if 32767 >= i7 goto label09;

     label08:
        staticinvoke <org.mozilla.classfile.ClassFileWriter: void badStack(int)>(i7);

     label09:
        $r5 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s8 = virtualinvoke $r5.<org.mozilla.classfile.ConstantPool: short addFieldRef(java.lang.String,java.lang.String,java.lang.String)>(r2, r3, r1);

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i0);

        $i16 = (int) $s8;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addToCodeInt16(int)>($i16);

        $s9 = (short) i7;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop> = $s9;

        $s10 = r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack>;

        $i17 = (int) $s10;

        if i7 <= $i17 goto label10;

        $s4 = (short) i7;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack> = $s4;

     label10:
        return;
    }

    public void addInvoke(int, java.lang.String, java.lang.String, java.lang.String)
    {
        short s2, $s3, $s6, $s7, $s8, $s9, $s10;
        int $i0, i1, i4, $i5, $i11, i12, i13, $i14, $i15, $i16, $i17, $i18;
        java.lang.String r0, r2, r3;
        org.mozilla.classfile.ConstantPool $r4, $r5;
        org.mozilla.classfile.ClassFileWriter r1;
        java.lang.IllegalArgumentException $r7;

        r1 := @this: org.mozilla.classfile.ClassFileWriter;

        i4 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r0 := @parameter3: java.lang.String;

        $i0 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int sizeOfParameters(java.lang.String)>(r0);

        i1 = $i0 >>> 16;

        s2 = (short) $i0;

        $s3 = r1.<org.mozilla.classfile.ClassFileWriter: short itsStackTop>;

        $i14 = (int) $s3;

        $i15 = (int) s2;

        i12 = $i14 + $i15;

        $i5 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int stackChange(int)>(i4);

        i13 = i12 + $i5;

        if i13 < 0 goto label1;

        if 32767 >= i13 goto label2;

     label1:
        staticinvoke <org.mozilla.classfile.ClassFileWriter: void badStack(int)>(i13);

     label2:
        tableswitch(i4)
        {
            case 182: goto label3;
            case 183: goto label3;
            case 184: goto label3;
            case 185: goto label3;
            default: goto label5;
        };

     label3:
        specialinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(i4);

        if i4 != 185 goto label4;

        $r5 = r1.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s10 = virtualinvoke $r5.<org.mozilla.classfile.ConstantPool: short addInterfaceMethodRef(java.lang.String,java.lang.String,java.lang.String)>(r2, r3, r0);

        $i16 = (int) $s10;

        specialinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addToCodeInt16(int)>($i16);

        $i11 = i1 + 1;

        specialinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>($i11);

        specialinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addToCodeBuffer(int)>(0);

        goto label6;

     label4:
        $r4 = r1.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s6 = virtualinvoke $r4.<org.mozilla.classfile.ConstantPool: short addMethodRef(java.lang.String,java.lang.String,java.lang.String)>(r2, r3, r0);

        $i17 = (int) $s6;

        specialinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addToCodeInt16(int)>($i17);

        goto label6;

     label5:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bad opcode for method reference");

        throw $r7;

     label6:
        $s7 = (short) i13;

        r1.<org.mozilla.classfile.ClassFileWriter: short itsStackTop> = $s7;

        $s8 = r1.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack>;

        $i18 = (int) $s8;

        if i13 <= $i18 goto label7;

        $s9 = (short) i13;

        r1.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack> = $s9;

     label7:
        return;
    }

    public void addPush(int)
    {
        org.mozilla.classfile.ClassFileWriter r0;
        short $s2, $s3;
        byte $b1, $b4, $b6;
        int i0, $i5, $i7, $i9, $i10, $i11, $i12, $i13;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        $b1 = (byte) i0;

        $i7 = (int) $b1;

        if $i7 != i0 goto label3;

        $i9 = (int) -1;

        if i0 != $i9 goto label1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(2);

        goto label5;

     label1:
        if 0 > i0 goto label2;

        if i0 > 5 goto label2;

        $i5 = 3 + i0;

        $b6 = (byte) $i5;

        $i10 = (int) $b6;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>($i10);

        goto label5;

     label2:
        $b4 = (byte) i0;

        $i11 = (int) $b4;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(16, $i11);

        goto label5;

     label3:
        $s2 = (short) i0;

        $i12 = (int) $s2;

        if $i12 != i0 goto label4;

        $s3 = (short) i0;

        $i13 = (int) $s3;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(17, $i13);

        goto label5;

     label4:
        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addLoadConstant(int)>(i0);

     label5:
        return;
    }

    public void addPush(boolean)
    {
        org.mozilla.classfile.ClassFileWriter r0;
        byte $b0;
        boolean z0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $b0 = 4;

        goto label2;

     label1:
        $b0 = 3;

     label2:
        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>($b0);

        return;
    }

    public void addPush(long)
    {
        byte $b3;
        int i1;
        long l0, $l2;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        l0 := @parameter0: long;

        i1 = (int) l0;

        $l2 = (long) i1;

        $b3 = $l2 cmp l0;

        if $b3 != 0 goto label1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(i1);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(133);

        goto label2;

     label1:
        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addLoadConstant(long)>(l0);

     label2:
        return;
    }

    public void addPush(double)
    {
        org.mozilla.classfile.ClassFileWriter r0;
        byte $b0, $b1, $b2, $b3, $b4;
        int $i5, $i6;
        double d0, $d1;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(14);

        $d1 = 1.0 / d0;

        $b4 = $d1 cmpg 0.0;

        $i5 = (int) $b4;

        if $i5 >= 0 goto label4;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(119);

        goto label4;

     label1:
        $b1 = d0 cmpl 1.0;

        if $b1 == 0 goto label2;

        $b3 = d0 cmpl -1.0;

        if $b3 != 0 goto label3;

     label2:
        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(15);

        $b2 = d0 cmpg 0.0;

        $i6 = (int) $b2;

        if $i6 >= 0 goto label4;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(119);

        goto label4;

     label3:
        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addLoadConstant(double)>(d0);

     label4:
        return;
    }

    public void addPush(java.lang.String)
    {
        org.mozilla.classfile.ConstantPool $r2, $r4;
        org.mozilla.classfile.ClassFileWriter r1;
        int $i0, $i1, i2, i3;
        java.lang.String r0, $r3;

        r1 := @this: org.mozilla.classfile.ClassFileWriter;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r2 = r1.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $i1 = virtualinvoke $r2.<org.mozilla.classfile.ConstantPool: int getUtfEncodingLimit(java.lang.String,int,int)>(r0, 0, $i0);

        i2 = $i1;

        if $i1 != $i0 goto label1;

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addLoadConstant(java.lang.String)>(r0);

        return;

     label1:
        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String)>(187, "java/lang/StringBuffer");

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i0);

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(183, "java/lang/StringBuffer", "<init>", "(I)V");

        i3 = 0;

     label2:
        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, i2);

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addLoadConstant(java.lang.String)>($r3);

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(182, "java/lang/StringBuffer", "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void add(int)>(87);

        if i2 != $i0 goto label3;

        goto label4;

     label3:
        i3 = i2;

        $r4 = r1.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        i2 = virtualinvoke $r4.<org.mozilla.classfile.ConstantPool: int getUtfEncodingLimit(java.lang.String,int,int)>(r0, i2, $i0);

        goto label2;

     label4:
        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(182, "java/lang/StringBuffer", "toString", "()Ljava/lang/String;");

        return;
    }

    public boolean isUnderStringSizeLimit(java.lang.String)
    {
        org.mozilla.classfile.ConstantPool $r2;
        java.lang.String r1;
        org.mozilla.classfile.ClassFileWriter r0;
        boolean $z0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $z0 = virtualinvoke $r2.<org.mozilla.classfile.ConstantPool: boolean isUnderUtfEncodingLimit(java.lang.String)>(r1);

        return $z0;
    }

    public void addIStore(int)
    {
        int i0;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void xop(int,int,int)>(59, 54, i0);

        return;
    }

    public void addLStore(int)
    {
        int i0;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void xop(int,int,int)>(63, 55, i0);

        return;
    }

    public void addFStore(int)
    {
        int i0;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void xop(int,int,int)>(67, 56, i0);

        return;
    }

    public void addDStore(int)
    {
        int i0;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void xop(int,int,int)>(71, 57, i0);

        return;
    }

    public void addAStore(int)
    {
        int i0;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void xop(int,int,int)>(75, 58, i0);

        return;
    }

    public void addILoad(int)
    {
        int i0;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void xop(int,int,int)>(26, 21, i0);

        return;
    }

    public void addLLoad(int)
    {
        int i0;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void xop(int,int,int)>(30, 22, i0);

        return;
    }

    public void addFLoad(int)
    {
        int i0;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void xop(int,int,int)>(34, 23, i0);

        return;
    }

    public void addDLoad(int)
    {
        int i0;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void xop(int,int,int)>(38, 24, i0);

        return;
    }

    public void addALoad(int)
    {
        int i0;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: void xop(int,int,int)>(42, 25, i0);

        return;
    }

    public void addLoadThis()
    {
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(42);

        return;
    }

    private void xop(int, int, int)
    {
        int i0, i1, $i2, $i3, $i4, i5;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i1 := @parameter0: int;

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(i1);

        goto label6;

     label2:
        $i4 = i1 + 1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>($i4);

        goto label6;

     label3:
        $i3 = i1 + 2;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>($i3);

        goto label6;

     label4:
        $i2 = i1 + 3;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>($i2);

        goto label6;

     label5:
        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(i5, i0);

     label6:
        return;
    }

    public int addTableSwitch(int, int)
    {
        byte[] $r1, $r2, $r3, $r11;
        org.mozilla.classfile.ClassFileWriter r0;
        short $s2, $s6, $s7, $s8;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r12;
        int i0, i1, $i3, i4, $i5, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, $i19, $i20, i21, i22, $i23, $i25, $i27, $i28;
        java.lang.String $r10;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= i1 goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad bounds: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r13;

     label1:
        $s2 = r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop>;

        $i3 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int stackChange(int)>(170);

        $i23 = (int) $s2;

        i4 = $i23 + $i3;

        if i4 < 0 goto label2;

        if 32767 >= i4 goto label3;

     label2:
        staticinvoke <org.mozilla.classfile.ClassFileWriter: void badStack(int)>(i4);

     label3:
        $i10 = i1 - i0;

        $i11 = $i10 + 1;

        $i12 = r0.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        $i25 = (int) -1;

        $i13 = $i12 ^ $i25;

        $i14 = 3 & $i13;

        i15 = $i14;

        $i16 = 1 + $i14;

        $i17 = 3 + $i11;

        $i18 = 4 * $i17;

        $i19 = $i16 + $i18;

        $i20 = specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: int addReservedCodeSpace(int)>($i19);

        $r11 = r0.<org.mozilla.classfile.ClassFileWriter: byte[] itsCodeBuffer>;

        i21 = $i20 + 1;

        $r11[$i20] = -86;

     label4:
        if i15 == 0 goto label5;

        $r3 = r0.<org.mozilla.classfile.ClassFileWriter: byte[] itsCodeBuffer>;

        $i9 = i21;

        i21 = i21 + 1;

        $r3[$i9] = 0;

        $i27 = (int) -1;

        i15 = i15 + $i27;

        goto label4;

     label5:
        i22 = i21 + 4;

        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: byte[] itsCodeBuffer>;

        $i5 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt32(int,byte[],int)>(i0, $r1, i22);

        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: byte[] itsCodeBuffer>;

        staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt32(int,byte[],int)>(i1, $r2, $i5);

        $s6 = (short) i4;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop> = $s6;

        $s7 = r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack>;

        $i28 = (int) $s7;

        if i4 <= $i28 goto label6;

        $s8 = (short) i4;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack> = $s8;

     label6:
        return $i20;
    }

    public final void markTableSwitchDefault(int)
    {
        int i0, $i1, $i3;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        $i1 = r0.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        $i3 = (int) -1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void setTableSwitchJump(int,int,int)>(i0, $i3, $i1);

        return;
    }

    public final void markTableSwitchCase(int, int)
    {
        int i0, i1, $i2;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = r0.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void setTableSwitchJump(int,int,int)>(i0, i1, $i2);

        return;
    }

    public final void markTableSwitchCase(int, int, int)
    {
        org.mozilla.classfile.ClassFileWriter r5;
        java.lang.IllegalArgumentException $r7;
        short $s1, $s2;
        java.lang.StringBuffer $r2, $r3, $r6;
        int i0, i3, i4, $i5, $i6;
        java.lang.String $r4;

        r5 := @this: org.mozilla.classfile.ClassFileWriter;

        i3 := @parameter0: int;

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        if 0 > i0 goto label1;

        $s1 = r5.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack>;

        $i6 = (int) $s1;

        if i0 <= $i6 goto label2;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad stack index: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r7;

     label2:
        $s2 = (short) i0;

        r5.<org.mozilla.classfile.ClassFileWriter: short itsStackTop> = $s2;

        $i5 = r5.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        virtualinvoke r5.<org.mozilla.classfile.ClassFileWriter: void setTableSwitchJump(int,int,int)>(i3, i4, $i5);

        return;
    }

    public void setTableSwitchJump(int, int, int)
    {
        byte[] $r12, $r18;
        byte $b14;
        org.mozilla.classfile.ClassFileWriter r5;
        short $s15, $s25;
        java.lang.StringBuffer $r2, $r3, $r8, $r9, $r10, $r15, $r16, $r21, $r22, $r26, $r27, $r29, $r31, $r33, $r35, $r37;
        int i0, $i1, i2, i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i16, $i17, $i18, $i19, i20, $i22, $i24, $i26;
        java.lang.String $r4, $r11, $r17, $r23, $r28;
        java.lang.IllegalArgumentException $r30, $r32, $r34, $r36, $r38;

        r5 := @this: org.mozilla.classfile.ClassFileWriter;

        i3 := @parameter0: int;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        if 0 > i0 goto label01;

        $i1 = r5.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        if i0 <= $i1 goto label02;

     label01:
        $r30 = new java.lang.IllegalArgumentException;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad jump target: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r30;

     label02:
        $i22 = (int) -1;

        if i2 >= $i22 goto label03;

        $r32 = new java.lang.IllegalArgumentException;

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad case index: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r32;

     label03:
        $i24 = (int) -1;

        $i4 = i3 ^ $i24;

        i5 = 3 & $i4;

        if i2 >= 0 goto label04;

        $i19 = i3 + 1;

        i20 = $i19 + i5;

        goto label05;

     label04:
        $i6 = i3 + 1;

        $i9 = $i6 + i5;

        $i7 = 3 + i2;

        $i8 = 4 * $i7;

        i20 = $i9 + $i8;

     label05:
        if 0 > i3 goto label06;

        $i10 = r5.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        $i11 = $i10 - 16;

        $i12 = $i11 - i5;

        $i13 = $i12 - 1;

        if i3 <= $i13 goto label07;

     label06:
        $r34 = new java.lang.IllegalArgumentException;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is outside a possible range of tableswitch");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in already generated code");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r34;

     label07:
        $r12 = r5.<org.mozilla.classfile.ClassFileWriter: byte[] itsCodeBuffer>;

        $b14 = $r12[i3];

        $s25 = (short) $b14;

        $s15 = 255 & $s25;

        $i26 = (int) $s15;

        if $i26 == 170 goto label08;

        $r36 = new java.lang.IllegalArgumentException;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not offset of tableswitch statement");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r36;

     label08:
        if 0 > i20 goto label09;

        $i17 = i20 + 4;

        $i16 = r5.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        if $i17 <= $i16 goto label10;

     label09:
        $r38 = new java.lang.IllegalArgumentException;

        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Too big case index: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r38;

     label10:
        $i18 = i0 - i3;

        $r18 = r5.<org.mozilla.classfile.ClassFileWriter: byte[] itsCodeBuffer>;

        staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt32(int,byte[],int)>($i18, $r18, i20);

        return;
    }

    public int acquireLabel()
    {
        int[] $r1, $r2, $r3, r4, $r5, $r6, $r7, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 = r0.<org.mozilla.classfile.ClassFileWriter: int itsLabelTableTop>;

        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLabelTable>;

        if $r1 == null goto label1;

        $r7 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLabelTable>;

        $i3 = lengthof $r7;

        if i0 != $i3 goto label3;

     label1:
        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLabelTable>;

        if $r2 != null goto label2;

        $r6 = newarray (int)[32];

        r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLabelTable> = $r6;

        goto label3;

     label2:
        $r3 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLabelTable>;

        $i1 = lengthof $r3;

        $i2 = $i1 * 2;

        r4 = newarray (int)[$i2];

        $r5 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLabelTable>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r4, 0, i0);

        r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLabelTable> = r4;

     label3:
        $i4 = i0 + 1;

        r0.<org.mozilla.classfile.ClassFileWriter: int itsLabelTableTop> = $i4;

        $r8 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLabelTable>;

        $i7 = (int) -1;

        $r8[i0] = $i7;

        $i5 = i0 | -2147483648;

        return $i5;
    }

    public void markLabel(int)
    {
        java.lang.IllegalStateException $r8;
        org.mozilla.classfile.ClassFileWriter r0;
        java.lang.IllegalArgumentException $r6, $r7;
        int[] $r1, $r2;
        int $i0, $i1, $i2, i3, i4, $i6;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i3 := @parameter0: int;

        if i3 < 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad label, no biscuit");

        throw $r6;

     label1:
        i4 = i3 & 2147483647;

        $i0 = r0.<org.mozilla.classfile.ClassFileWriter: int itsLabelTableTop>;

        if i4 <= $i0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad label");

        throw $r7;

     label2:
        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLabelTable>;

        $i1 = $r1[i4];

        $i6 = (int) -1;

        if $i1 == $i6 goto label3;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can only mark label once");

        throw $r8;

     label3:
        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLabelTable>;

        $i2 = r0.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        $r2[i4] = $i2;

        return;
    }

    public void markLabel(int, short)
    {
        int i0;
        short s1;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        s1 := @parameter1: short;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>(i0);

        r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop> = s1;

        return;
    }

    public void markHandler(int)
    {
        int i0;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop> = 1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>(i0);

        return;
    }

    private int getLabelPC(int)
    {
        org.mozilla.classfile.ClassFileWriter r0;
        java.lang.IllegalArgumentException $r2, $r3;
        int[] $r1;
        int $i0, $i1, i2, i3;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i2 := @parameter0: int;

        if i2 < 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad label, no biscuit");

        throw $r3;

     label1:
        i3 = i2 & 2147483647;

        $i0 = r0.<org.mozilla.classfile.ClassFileWriter: int itsLabelTableTop>;

        if i3 < $i0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad label");

        throw $r2;

     label2:
        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLabelTable>;

        $i1 = $r1[i3];

        return $i1;
    }

    private void addLabelFixup(int, int)
    {
        long $l9, $l10, $l11, $l12;
        long[] $r1, $r2, $r3, r4, $r5, $r6, $r7, $r10;
        int $i0, i1, $i2, $i3, i4, $i5, i6, i7, $i8;
        org.mozilla.classfile.ClassFileWriter r0;
        java.lang.IllegalArgumentException $r8, $r9;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i6 := @parameter0: int;

        i4 := @parameter1: int;

        if i6 < 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad label, no biscuit");

        throw $r9;

     label1:
        i7 = i6 & 2147483647;

        $i0 = r0.<org.mozilla.classfile.ClassFileWriter: int itsLabelTableTop>;

        if i7 < $i0 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad label");

        throw $r8;

     label2:
        i1 = r0.<org.mozilla.classfile.ClassFileWriter: int itsFixupTableTop>;

        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: long[] itsFixupTable>;

        if $r1 == null goto label3;

        $r7 = r0.<org.mozilla.classfile.ClassFileWriter: long[] itsFixupTable>;

        $i5 = lengthof $r7;

        if i1 != $i5 goto label5;

     label3:
        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: long[] itsFixupTable>;

        if $r2 != null goto label4;

        $r6 = newarray (long)[40];

        r0.<org.mozilla.classfile.ClassFileWriter: long[] itsFixupTable> = $r6;

        goto label5;

     label4:
        $r3 = r0.<org.mozilla.classfile.ClassFileWriter: long[] itsFixupTable>;

        $i2 = lengthof $r3;

        $i3 = $i2 * 2;

        r4 = newarray (long)[$i3];

        $r5 = r0.<org.mozilla.classfile.ClassFileWriter: long[] itsFixupTable>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r4, 0, i1);

        r0.<org.mozilla.classfile.ClassFileWriter: long[] itsFixupTable> = r4;

     label5:
        $i8 = i1 + 1;

        r0.<org.mozilla.classfile.ClassFileWriter: int itsFixupTableTop> = $i8;

        $r10 = r0.<org.mozilla.classfile.ClassFileWriter: long[] itsFixupTable>;

        $l9 = (long) i7;

        $l10 = $l9 << 32;

        $l11 = (long) i4;

        $l12 = $l10 | $l11;

        $r10[i1] = $l12;

        return;
    }

    private void fixLabelGotos()
    {
        byte[] r1;
        long l1, $l2;
        short $s8;
        long[] $r2;
        byte $b10, $b11;
        int[] $r3;
        int $i0, i3, i4, i5, $i6, i7, $i9, $i12, i13, $i15, $i16;
        java.lang.RuntimeException $r6, $r7;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        r1 = r0.<org.mozilla.classfile.ClassFileWriter: byte[] itsCodeBuffer>;

        i13 = 0;

     label1:
        $i0 = r0.<org.mozilla.classfile.ClassFileWriter: int itsFixupTableTop>;

        if i13 >= $i0 goto label4;

        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: long[] itsFixupTable>;

        l1 = $r2[i13];

        $l2 = l1 >> 32;

        i3 = (int) $l2;

        i4 = (int) l1;

        $r3 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLabelTable>;

        i5 = $r3[i3];

        $i15 = (int) -1;

        if i5 != $i15 goto label2;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>()>();

        throw $r6;

     label2:
        $i6 = i4 - 1;

        i7 = i5 - $i6;

        $s8 = (short) i7;

        $i16 = (int) $s8;

        if $i16 == i7 goto label3;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Program too complex: too big jump offset");

        throw $r7;

     label3:
        $i9 = i7 >> 8;

        $b10 = (byte) $i9;

        r1[i4] = $b10;

        $i12 = i4 + 1;

        $b11 = (byte) i7;

        r1[$i12] = $b11;

        i13 = i13 + 1;

        goto label1;

     label4:
        r0.<org.mozilla.classfile.ClassFileWriter: int itsFixupTableTop> = 0;

        return;
    }

    public int getCurrentCodeOffset()
    {
        int $i0;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        $i0 = r0.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        return $i0;
    }

    public short getStackTop()
    {
        short $s0;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        $s0 = r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop>;

        return $s0;
    }

    public void adjustStackTop(int)
    {
        org.mozilla.classfile.ClassFileWriter r0;
        short $s1, $s3, $s4, $s5;
        int i0, i2, $i6, $i7;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        $s1 = r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop>;

        $i6 = (int) $s1;

        i2 = $i6 + i0;

        if i2 < 0 goto label1;

        if 32767 >= i2 goto label2;

     label1:
        staticinvoke <org.mozilla.classfile.ClassFileWriter: void badStack(int)>(i2);

     label2:
        $s4 = (short) i2;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsStackTop> = $s4;

        $s5 = r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack>;

        $i7 = (int) $s5;

        if i2 <= $i7 goto label3;

        $s3 = (short) i2;

        r0.<org.mozilla.classfile.ClassFileWriter: short itsMaxStack> = $s3;

     label3:
        return;
    }

    private void addToCodeBuffer(int)
    {
        byte[] $r1;
        byte $b2;
        int $i0, i1;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i1 := @parameter0: int;

        $i0 = specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: int addReservedCodeSpace(int)>(1);

        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: byte[] itsCodeBuffer>;

        $b2 = (byte) i1;

        $r1[$i0] = $b2;

        return;
    }

    private void addToCodeInt16(int)
    {
        byte[] $r1;
        int $i0, i1;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i1 := @parameter0: int;

        $i0 = specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: int addReservedCodeSpace(int)>(2);

        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: byte[] itsCodeBuffer>;

        staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>(i1, $r1, $i0);

        return;
    }

    private int addReservedCodeSpace(int)
    {
        byte[] $r2, $r3, $r4, $r5;
        org.mozilla.classfile.ClassFileWriter r0;
        java.lang.IllegalArgumentException $r6;
        org.mozilla.classfile.ClassFileMethod $r1;
        int i0, i1, i2, $i3, $i4, i5;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i1 := @parameter0: int;

        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ClassFileMethod itsCurrentMethod>;

        if $r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No method to add to");

        throw $r6;

     label1:
        i0 = r0.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        i2 = i0 + i1;

        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: byte[] itsCodeBuffer>;

        $i3 = lengthof $r2;

        if i2 <= $i3 goto label3;

        $r3 = r0.<org.mozilla.classfile.ClassFileWriter: byte[] itsCodeBuffer>;

        $i4 = lengthof $r3;

        i5 = $i4 * 2;

        if i2 <= i5 goto label2;

        i5 = i2;

     label2:
        $r5 = newarray (byte)[i5];

        $r4 = r0.<org.mozilla.classfile.ClassFileWriter: byte[] itsCodeBuffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r5, 0, i0);

        r0.<org.mozilla.classfile.ClassFileWriter: byte[] itsCodeBuffer> = $r5;

     label3:
        r0.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop> = i2;

        return i0;
    }

    public void addExceptionHandler(int, int, int, java.lang.String)
    {
        org.mozilla.classfile.ExceptionTableEntry $r3;
        short $s9;
        int i0, $i1, i2, $i3, i4, $i5, $i6, $i7, $i8, $i10;
        java.lang.String r0;
        org.mozilla.classfile.ExceptionTableEntry[] $r4, r5, $r6, $r7, $r11;
        org.mozilla.classfile.ConstantPool $r2;
        org.mozilla.classfile.ClassFileWriter r1;
        java.lang.IllegalArgumentException $r8, $r9, $r10;

        r1 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i4 := @parameter2: int;

        r0 := @parameter3: java.lang.String;

        $i1 = i0 & -2147483648;

        if $i1 == -2147483648 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad startLabel");

        throw $r10;

     label1:
        $i3 = i2 & -2147483648;

        if $i3 == -2147483648 goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad endLabel");

        throw $r9;

     label2:
        $i5 = i4 & -2147483648;

        if $i5 == -2147483648 goto label3;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad handlerLabel");

        throw $r8;

     label3:
        if r0 != null goto label4;

        $s9 = 0;

        goto label5;

     label4:
        $r2 = r1.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $s9 = virtualinvoke $r2.<org.mozilla.classfile.ConstantPool: short addClass(java.lang.String)>(r0);

     label5:
        $r3 = new org.mozilla.classfile.ExceptionTableEntry;

        specialinvoke $r3.<org.mozilla.classfile.ExceptionTableEntry: void <init>(int,int,int,short)>(i0, i2, i4, $s9);

        $i8 = r1.<org.mozilla.classfile.ClassFileWriter: int itsExceptionTableTop>;

        if $i8 != 0 goto label6;

        $r7 = newarray (org.mozilla.classfile.ExceptionTableEntry)[4];

        r1.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ExceptionTableEntry[] itsExceptionTable> = $r7;

        goto label7;

     label6:
        $r4 = r1.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ExceptionTableEntry[] itsExceptionTable>;

        $i6 = lengthof $r4;

        if $i8 != $i6 goto label7;

        $i7 = $i8 * 2;

        r5 = newarray (org.mozilla.classfile.ExceptionTableEntry)[$i7];

        $r6 = r1.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ExceptionTableEntry[] itsExceptionTable>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r5, 0, $i8);

        r1.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ExceptionTableEntry[] itsExceptionTable> = r5;

     label7:
        $r11 = r1.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ExceptionTableEntry[] itsExceptionTable>;

        $r11[$i8] = $r3;

        $i10 = $i8 + 1;

        r1.<org.mozilla.classfile.ClassFileWriter: int itsExceptionTableTop> = $i10;

        return;
    }

    public void addLineNumberEntry(short)
    {
        short s2;
        org.mozilla.classfile.ClassFileMethod $r1;
        int[] $r2, r3, $r4, $r5, $r7;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8;
        org.mozilla.classfile.ClassFileWriter r0;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        s2 := @parameter0: short;

        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ClassFileMethod itsCurrentMethod>;

        if $r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No method to stop");

        throw $r8;

     label1:
        i0 = r0.<org.mozilla.classfile.ClassFileWriter: int itsLineNumberTableTop>;

        if i0 != 0 goto label2;

        $r5 = newarray (int)[16];

        r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLineNumberTable> = $r5;

        goto label3;

     label2:
        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLineNumberTable>;

        $i1 = lengthof $r2;

        if i0 != $i1 goto label3;

        $i3 = i0 * 2;

        r3 = newarray (int)[$i3];

        $r4 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLineNumberTable>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r3, 0, i0);

        r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLineNumberTable> = r3;

     label3:
        $r7 = r0.<org.mozilla.classfile.ClassFileWriter: int[] itsLineNumberTable>;

        $i4 = r0.<org.mozilla.classfile.ClassFileWriter: int itsCodeBufferTop>;

        $i5 = $i4 << 16;

        $i8 = (int) s2;

        $i6 = $i5 + $i8;

        $r7[i0] = $i6;

        $i7 = i0 + 1;

        r0.<org.mozilla.classfile.ClassFileWriter: int itsLineNumberTableTop> = $i7;

        return;
    }

    public void write(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] $r1;
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        r2 := @parameter0: java.io.OutputStream;

        $r1 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: byte[] toByteArray()>();

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r1);

        return;
    }

    private int getWriteSize()
    {
        org.mozilla.classfile.ClassFileMethod $r6;
        org.mozilla.classfile.ConstantPool $r1, $r10;
        org.mozilla.classfile.ClassFileWriter r0;
        org.mozilla.javascript.ObjArray $r2, $r3, $r4, $r7, $r11;
        short $s0, $s5;
        int $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15, $i16, i17, i18, i19, i20, i21, i22;
        java.lang.Object $r5, $r8;
        org.mozilla.classfile.ClassFileField $r9;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        $s0 = r0.<org.mozilla.classfile.ClassFileWriter: short itsSourceFileNameIndex>;

        if $s0 == 0 goto label1;

        $r10 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        virtualinvoke $r10.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>("SourceFile");

     label1:
        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $i1 = virtualinvoke $r1.<org.mozilla.classfile.ConstantPool: int getWriteSize()>();

        $i8 = 8 + $i1;

        i10 = $i8 + 2;

        i11 = i10 + 2;

        i12 = i11 + 2;

        i13 = i12 + 2;

        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsInterfaces>;

        $i2 = virtualinvoke $r2.<org.mozilla.javascript.ObjArray: int size()>();

        $i3 = 2 * $i2;

        $i9 = i13 + $i3;

        i14 = $i9 + 2;

        i15 = 0;

     label2:
        $r11 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsFields>;

        $i16 = virtualinvoke $r11.<org.mozilla.javascript.ObjArray: int size()>();

        if i15 >= $i16 goto label3;

        $r7 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsFields>;

        $r8 = virtualinvoke $r7.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>(i15);

        $r9 = (org.mozilla.classfile.ClassFileField) $r8;

        $i7 = virtualinvoke $r9.<org.mozilla.classfile.ClassFileField: int getWriteSize()>();

        i14 = i14 + $i7;

        i15 = i15 + 1;

        goto label2;

     label3:
        i17 = i14 + 2;

        i18 = 0;

     label4:
        $r3 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsMethods>;

        $i4 = virtualinvoke $r3.<org.mozilla.javascript.ObjArray: int size()>();

        if i18 >= $i4 goto label5;

        $r4 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsMethods>;

        $r5 = virtualinvoke $r4.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>(i18);

        $r6 = (org.mozilla.classfile.ClassFileMethod) $r5;

        $i6 = virtualinvoke $r6.<org.mozilla.classfile.ClassFileMethod: int getWriteSize()>();

        i17 = i17 + $i6;

        i18 = i18 + 1;

        goto label4;

     label5:
        $s5 = r0.<org.mozilla.classfile.ClassFileWriter: short itsSourceFileNameIndex>;

        if $s5 == 0 goto label6;

        i19 = i17 + 2;

        i20 = i19 + 2;

        i21 = i20 + 4;

        i22 = i21 + 2;

        goto label7;

     label6:
        i22 = i17 + 2;

     label7:
        return i22;
    }

    public byte[] toByteArray()
    {
        byte[] r1;
        org.mozilla.classfile.ClassFileMethod r19;
        java.lang.Short $r15;
        org.mozilla.classfile.ConstantPool $r2, $r16;
        org.mozilla.classfile.ClassFileWriter r0;
        org.mozilla.javascript.ObjArray $r3, $r4, $r5, $r6, $r7, $r9, $r11, $r13, $r17;
        short $s1, $s4, $s6, $s8, $s15, $s19, $s20, s21;
        int $i0, $i2, $i3, $i5, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, i22, i23, $i24, i25, i26, i27, i28, i29, $i30, $i31, $i32, $i33, $i34;
        java.lang.RuntimeException $r20;
        java.lang.Object $r10, $r12, $r14;
        org.mozilla.classfile.ClassFileField r18;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        $i0 = specialinvoke r0.<org.mozilla.classfile.ClassFileWriter: int getWriteSize()>();

        r1 = newarray (byte)[$i0];

        s21 = 0;

        $s1 = r0.<org.mozilla.classfile.ClassFileWriter: short itsSourceFileNameIndex>;

        if $s1 == 0 goto label01;

        $r16 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        s21 = virtualinvoke $r16.<org.mozilla.classfile.ConstantPool: short addUtf8(java.lang.String)>("SourceFile");

     label01:
        $i2 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt64(long,byte[],int)>(-3819410108756852691L, r1, 0);

        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.classfile.ConstantPool itsConstantPool>;

        $i3 = virtualinvoke $r2.<org.mozilla.classfile.ConstantPool: int write(byte[],int)>(r1, $i2);

        $s4 = r0.<org.mozilla.classfile.ClassFileWriter: short itsFlags>;

        $i30 = (int) $s4;

        $i5 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i30, r1, $i3);

        $s6 = r0.<org.mozilla.classfile.ClassFileWriter: short itsThisClassIndex>;

        $i31 = (int) $s6;

        $i7 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i31, r1, $i5);

        $s8 = r0.<org.mozilla.classfile.ClassFileWriter: short itsSuperClassIndex>;

        $i32 = (int) $s8;

        $i9 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i32, r1, $i7);

        $r3 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsInterfaces>;

        $i10 = virtualinvoke $r3.<org.mozilla.javascript.ObjArray: int size()>();

        i22 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i10, r1, $i9);

        i23 = 0;

     label02:
        $r17 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsInterfaces>;

        $i24 = virtualinvoke $r17.<org.mozilla.javascript.ObjArray: int size()>();

        if i23 >= $i24 goto label03;

        $r13 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsInterfaces>;

        $r14 = virtualinvoke $r13.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>(i23);

        $r15 = (java.lang.Short) $r14;

        $s20 = virtualinvoke $r15.<java.lang.Short: short shortValue()>();

        $i33 = (int) $s20;

        i22 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i33, r1, i22);

        i23 = i23 + 1;

        goto label02;

     label03:
        $r4 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsFields>;

        $i11 = virtualinvoke $r4.<org.mozilla.javascript.ObjArray: int size()>();

        i25 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i11, r1, i22);

        i26 = 0;

     label04:
        $r5 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsFields>;

        $i12 = virtualinvoke $r5.<org.mozilla.javascript.ObjArray: int size()>();

        if i26 >= $i12 goto label05;

        $r11 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsFields>;

        $r12 = virtualinvoke $r11.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>(i26);

        r18 = (org.mozilla.classfile.ClassFileField) $r12;

        i25 = virtualinvoke r18.<org.mozilla.classfile.ClassFileField: int write(byte[],int)>(r1, i25);

        i26 = i26 + 1;

        goto label04;

     label05:
        $r6 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsMethods>;

        $i13 = virtualinvoke $r6.<org.mozilla.javascript.ObjArray: int size()>();

        i27 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i13, r1, i25);

        i28 = 0;

     label06:
        $r7 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsMethods>;

        $i14 = virtualinvoke $r7.<org.mozilla.javascript.ObjArray: int size()>();

        if i28 >= $i14 goto label07;

        $r9 = r0.<org.mozilla.classfile.ClassFileWriter: org.mozilla.javascript.ObjArray itsMethods>;

        $r10 = virtualinvoke $r9.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>(i28);

        r19 = (org.mozilla.classfile.ClassFileMethod) $r10;

        i27 = virtualinvoke r19.<org.mozilla.classfile.ClassFileMethod: int write(byte[],int)>(r1, i27);

        i28 = i28 + 1;

        goto label06;

     label07:
        $s15 = r0.<org.mozilla.classfile.ClassFileWriter: short itsSourceFileNameIndex>;

        if $s15 == 0 goto label08;

        $i16 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>(1, r1, i27);

        $i17 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>(s21, r1, $i16);

        $i18 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt32(int,byte[],int)>(2, r1, $i17);

        $s19 = r0.<org.mozilla.classfile.ClassFileWriter: short itsSourceFileNameIndex>;

        $i34 = (int) $s19;

        i29 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>($i34, r1, $i18);

        goto label09;

     label08:
        i29 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt16(int,byte[],int)>(0, r1, i27);

     label09:
        if i29 == $i0 goto label10;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>()>();

        throw $r20;

     label10:
        return r1;
    }

    static int putInt64(long, byte[], int)
    {
        byte[] r0;
        long l0, $l1;
        int $i2, $i3, $i4, $i5, i6;

        l0 := @parameter0: long;

        r0 := @parameter1: byte[];

        i6 := @parameter2: int;

        $l1 = l0 >>> 32;

        $i2 = (int) $l1;

        $i3 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt32(int,byte[],int)>($i2, r0, i6);

        $i4 = (int) l0;

        $i5 = staticinvoke <org.mozilla.classfile.ClassFileWriter: int putInt32(int,byte[],int)>($i4, r0, $i3);

        return $i5;
    }

    private static void badStack(int)
    {
        java.lang.IllegalStateException $r3;
        java.lang.StringBuffer $r0, $r1, $r2, $r4, $r5, $r6;
        int i0;
        java.lang.String r7;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Stack underflow: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label1:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Too big stack: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        r7 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r7);

        throw $r3;
    }

    private static int sizeOfParameters(java.lang.String)
    {
        boolean z0, z1, z2;
        java.lang.StringBuffer $r3, $r4, $r6;
        int $i0, $i1, $i3, $i4, $i6, $i7, $i8, $i10, $i11, i12, i13, i14, i16, $i17, $i18, $i20, $i22, $i23, $i24, $i26, $i28, $i29, $i31;
        java.lang.String r0, $r5;
        char $c2, $c5, $c9, c15;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(41);

        if 3 > $i0 goto label18;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i17 = (int) $c2;

        if $i17 != 40 goto label18;

        if 1 > $i1 goto label18;

        $i3 = $i1 + 1;

        if $i3 >= $i0 goto label18;

        z0 = 1;

        z2 = 1;

        z1 = 1;

        i12 = 1;

        i13 = 0;

        i14 = 0;

     label01:
        if i12 == $i1 goto label13;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        $i18 = (int) $c9;

        tableswitch($i18)
        {
            case 66: goto label04;
            case 67: goto label04;
            case 68: goto label03;
            case 69: goto label02;
            case 70: goto label04;
            case 71: goto label02;
            case 72: goto label02;
            case 73: goto label04;
            case 74: goto label03;
            case 75: goto label02;
            case 76: goto label10;
            case 77: goto label02;
            case 78: goto label02;
            case 79: goto label02;
            case 80: goto label02;
            case 81: goto label02;
            case 82: goto label02;
            case 83: goto label04;
            case 84: goto label02;
            case 85: goto label02;
            case 86: goto label02;
            case 87: goto label02;
            case 88: goto label02;
            case 89: goto label02;
            case 90: goto label04;
            case 91: goto label05;
            default: goto label02;
        };

     label02:
        z0 = 0;

        z2 = 0;

        z1 = 0;

        goto label13;

     label03:
        $i20 = (int) -1;

        i13 = i13 + $i20;

     label04:
        $i22 = (int) -1;

        i13 = i13 + $i22;

        i14 = i14 + 1;

        i12 = i12 + 1;

        goto label01;

     label05:
        i12 = i12 + 1;

        c15 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

     label06:
        $i23 = (int) c15;

        if $i23 != 91 goto label07;

        i12 = i12 + 1;

        c15 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        goto label06;

     label07:
        $i24 = (int) c15;

        tableswitch($i24)
        {
            case 66: goto label09;
            case 67: goto label09;
            case 68: goto label09;
            case 69: goto label08;
            case 70: goto label09;
            case 71: goto label08;
            case 72: goto label08;
            case 73: goto label09;
            case 74: goto label09;
            case 75: goto label08;
            case 76: goto label10;
            case 77: goto label08;
            case 78: goto label08;
            case 79: goto label08;
            case 80: goto label08;
            case 81: goto label08;
            case 82: goto label08;
            case 83: goto label09;
            case 84: goto label08;
            case 85: goto label08;
            case 86: goto label08;
            case 87: goto label08;
            case 88: goto label08;
            case 89: goto label08;
            case 90: goto label09;
            default: goto label08;
        };

     label08:
        z0 = 0;

        z2 = 0;

        z1 = 0;

        goto label13;

     label09:
        $i26 = (int) -1;

        i13 = i13 + $i26;

        i14 = i14 + 1;

        i12 = i12 + 1;

        goto label01;

     label10:
        $i28 = (int) -1;

        i13 = i13 + $i28;

        i14 = i14 + 1;

        i16 = i12 + 1;

        $i10 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(59, i16);

        $i11 = i16 + 1;

        if $i11 > $i10 goto label11;

        if $i10 < $i1 goto label12;

     label11:
        z0 = 0;

        z2 = 0;

        z1 = 0;

        goto label13;

     label12:
        i12 = $i10 + 1;

        goto label01;

     label13:
        if z2 == 0 goto label18;

        $i4 = $i1 + 1;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        $i29 = (int) $c5;

        tableswitch($i29)
        {
            case 66: goto label16;
            case 67: goto label16;
            case 68: goto label15;
            case 69: goto label14;
            case 70: goto label16;
            case 71: goto label14;
            case 72: goto label14;
            case 73: goto label16;
            case 74: goto label15;
            case 75: goto label14;
            case 76: goto label16;
            case 77: goto label14;
            case 78: goto label14;
            case 79: goto label14;
            case 80: goto label14;
            case 81: goto label14;
            case 82: goto label14;
            case 83: goto label16;
            case 84: goto label14;
            case 85: goto label14;
            case 86: goto label17;
            case 87: goto label14;
            case 88: goto label14;
            case 89: goto label14;
            case 90: goto label16;
            case 91: goto label16;
            default: goto label14;
        };

     label14:
        z0 = 0;

        z1 = 0;

        goto label17;

     label15:
        i13 = i13 + 1;

     label16:
        i13 = i13 + 1;

     label17:
        if z1 == 0 goto label18;

        $i7 = i14 << 16;

        $i31 = (int) 65535;

        $i6 = $i31 & i13;

        $i8 = $i7 | $i6;

        return $i8;

     label18:
        $r7 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad parameter signature: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r7;
    }

    static int putInt16(int, byte[], int)
    {
        byte[] r0;
        byte $b3, $b5;
        int i0, i1, $i2, $i4, $i6, $i7;

        i1 := @parameter0: int;

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        $i4 = i0 + 0;

        $i2 = i1 >>> 8;

        $b3 = (byte) $i2;

        r0[$i4] = $b3;

        $i6 = i0 + 1;

        $b5 = (byte) i1;

        r0[$i6] = $b5;

        $i7 = i0 + 2;

        return $i7;
    }

    static int putInt32(int, byte[], int)
    {
        byte[] r0;
        byte $b3, $b6, $b9, $b11;
        int i0, i1, $i2, $i4, $i5, $i7, $i8, $i10, $i12, $i13;

        i1 := @parameter0: int;

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        $i4 = i0 + 0;

        $i2 = i1 >>> 24;

        $b3 = (byte) $i2;

        r0[$i4] = $b3;

        $i7 = i0 + 1;

        $i5 = i1 >>> 16;

        $b6 = (byte) $i5;

        r0[$i7] = $b6;

        $i10 = i0 + 2;

        $i8 = i1 >>> 8;

        $b9 = (byte) $i8;

        r0[$i10] = $b9;

        $i12 = i0 + 3;

        $b11 = (byte) i1;

        r0[$i12] = $b11;

        $i13 = i0 + 4;

        return $i13;
    }

    static int opcodeCount(int)
    {
        java.lang.StringBuffer $r2, $r3, $r5;
        int i0, $i2;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r6;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label1;
            case 9: goto label1;
            case 10: goto label1;
            case 11: goto label1;
            case 12: goto label1;
            case 13: goto label1;
            case 14: goto label1;
            case 15: goto label1;
            case 16: goto label2;
            case 17: goto label2;
            case 18: goto label2;
            case 19: goto label2;
            case 20: goto label2;
            case 21: goto label2;
            case 22: goto label2;
            case 23: goto label2;
            case 24: goto label2;
            case 25: goto label2;
            case 26: goto label1;
            case 27: goto label1;
            case 28: goto label1;
            case 29: goto label1;
            case 30: goto label1;
            case 31: goto label1;
            case 32: goto label1;
            case 33: goto label1;
            case 34: goto label1;
            case 35: goto label1;
            case 36: goto label1;
            case 37: goto label1;
            case 38: goto label1;
            case 39: goto label1;
            case 40: goto label1;
            case 41: goto label1;
            case 42: goto label1;
            case 43: goto label1;
            case 44: goto label1;
            case 45: goto label1;
            case 46: goto label1;
            case 47: goto label1;
            case 48: goto label1;
            case 49: goto label1;
            case 50: goto label1;
            case 51: goto label1;
            case 52: goto label1;
            case 53: goto label1;
            case 54: goto label2;
            case 55: goto label2;
            case 56: goto label2;
            case 57: goto label2;
            case 58: goto label2;
            case 59: goto label1;
            case 60: goto label1;
            case 61: goto label1;
            case 62: goto label1;
            case 63: goto label1;
            case 64: goto label1;
            case 65: goto label1;
            case 66: goto label1;
            case 67: goto label1;
            case 68: goto label1;
            case 69: goto label1;
            case 70: goto label1;
            case 71: goto label1;
            case 72: goto label1;
            case 73: goto label1;
            case 74: goto label1;
            case 75: goto label1;
            case 76: goto label1;
            case 77: goto label1;
            case 78: goto label1;
            case 79: goto label1;
            case 80: goto label1;
            case 81: goto label1;
            case 82: goto label1;
            case 83: goto label1;
            case 84: goto label1;
            case 85: goto label1;
            case 86: goto label1;
            case 87: goto label1;
            case 88: goto label1;
            case 89: goto label1;
            case 90: goto label1;
            case 91: goto label1;
            case 92: goto label1;
            case 93: goto label1;
            case 94: goto label1;
            case 95: goto label1;
            case 96: goto label1;
            case 97: goto label1;
            case 98: goto label1;
            case 99: goto label1;
            case 100: goto label1;
            case 101: goto label1;
            case 102: goto label1;
            case 103: goto label1;
            case 104: goto label1;
            case 105: goto label1;
            case 106: goto label1;
            case 107: goto label1;
            case 108: goto label1;
            case 109: goto label1;
            case 110: goto label1;
            case 111: goto label1;
            case 112: goto label1;
            case 113: goto label1;
            case 114: goto label1;
            case 115: goto label1;
            case 116: goto label1;
            case 117: goto label1;
            case 118: goto label1;
            case 119: goto label1;
            case 120: goto label1;
            case 121: goto label1;
            case 122: goto label1;
            case 123: goto label1;
            case 124: goto label1;
            case 125: goto label1;
            case 126: goto label1;
            case 127: goto label1;
            case 128: goto label1;
            case 129: goto label1;
            case 130: goto label1;
            case 131: goto label1;
            case 132: goto label3;
            case 133: goto label1;
            case 134: goto label1;
            case 135: goto label1;
            case 136: goto label1;
            case 137: goto label1;
            case 138: goto label1;
            case 139: goto label1;
            case 140: goto label1;
            case 141: goto label1;
            case 142: goto label1;
            case 143: goto label1;
            case 144: goto label1;
            case 145: goto label1;
            case 146: goto label1;
            case 147: goto label1;
            case 148: goto label1;
            case 149: goto label1;
            case 150: goto label1;
            case 151: goto label1;
            case 152: goto label1;
            case 153: goto label2;
            case 154: goto label2;
            case 155: goto label2;
            case 156: goto label2;
            case 157: goto label2;
            case 158: goto label2;
            case 159: goto label2;
            case 160: goto label2;
            case 161: goto label2;
            case 162: goto label2;
            case 163: goto label2;
            case 164: goto label2;
            case 165: goto label2;
            case 166: goto label2;
            case 167: goto label2;
            case 168: goto label2;
            case 169: goto label2;
            case 170: goto label4;
            case 171: goto label4;
            case 172: goto label1;
            case 173: goto label1;
            case 174: goto label1;
            case 175: goto label1;
            case 176: goto label1;
            case 177: goto label1;
            case 178: goto label2;
            case 179: goto label2;
            case 180: goto label2;
            case 181: goto label2;
            case 182: goto label2;
            case 183: goto label2;
            case 184: goto label2;
            case 185: goto label2;
            case 186: goto label5;
            case 187: goto label2;
            case 188: goto label2;
            case 189: goto label2;
            case 190: goto label1;
            case 191: goto label1;
            case 192: goto label2;
            case 193: goto label2;
            case 194: goto label1;
            case 195: goto label1;
            case 196: goto label1;
            case 197: goto label3;
            case 198: goto label2;
            case 199: goto label2;
            case 200: goto label2;
            case 201: goto label2;
            case 202: goto label1;
            case 203: goto label5;
            case 204: goto label5;
            case 205: goto label5;
            case 206: goto label5;
            case 207: goto label5;
            case 208: goto label5;
            case 209: goto label5;
            case 210: goto label5;
            case 211: goto label5;
            case 212: goto label5;
            case 213: goto label5;
            case 214: goto label5;
            case 215: goto label5;
            case 216: goto label5;
            case 217: goto label5;
            case 218: goto label5;
            case 219: goto label5;
            case 220: goto label5;
            case 221: goto label5;
            case 222: goto label5;
            case 223: goto label5;
            case 224: goto label5;
            case 225: goto label5;
            case 226: goto label5;
            case 227: goto label5;
            case 228: goto label5;
            case 229: goto label5;
            case 230: goto label5;
            case 231: goto label5;
            case 232: goto label5;
            case 233: goto label5;
            case 234: goto label5;
            case 235: goto label5;
            case 236: goto label5;
            case 237: goto label5;
            case 238: goto label5;
            case 239: goto label5;
            case 240: goto label5;
            case 241: goto label5;
            case 242: goto label5;
            case 243: goto label5;
            case 244: goto label5;
            case 245: goto label5;
            case 246: goto label5;
            case 247: goto label5;
            case 248: goto label5;
            case 249: goto label5;
            case 250: goto label5;
            case 251: goto label5;
            case 252: goto label5;
            case 253: goto label5;
            case 254: goto label1;
            case 255: goto label1;
            default: goto label5;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        return 2;

     label4:
        $i2 = (int) -1;

        return $i2;

     label5:
        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad opcode: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r6;
    }

    static int stackChange(int)
    {
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuffer $r2, $r3, $r5;
        int i0, $i2, $i4, $i6, $i8;
        java.lang.String $r4;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label5;
            case 1: goto label6;
            case 2: goto label6;
            case 3: goto label6;
            case 4: goto label6;
            case 5: goto label6;
            case 6: goto label6;
            case 7: goto label6;
            case 8: goto label6;
            case 9: goto label7;
            case 10: goto label7;
            case 11: goto label6;
            case 12: goto label6;
            case 13: goto label6;
            case 14: goto label7;
            case 15: goto label7;
            case 16: goto label6;
            case 17: goto label6;
            case 18: goto label6;
            case 19: goto label6;
            case 20: goto label7;
            case 21: goto label6;
            case 22: goto label7;
            case 23: goto label6;
            case 24: goto label7;
            case 25: goto label6;
            case 26: goto label6;
            case 27: goto label6;
            case 28: goto label6;
            case 29: goto label6;
            case 30: goto label7;
            case 31: goto label7;
            case 32: goto label7;
            case 33: goto label7;
            case 34: goto label6;
            case 35: goto label6;
            case 36: goto label6;
            case 37: goto label6;
            case 38: goto label7;
            case 39: goto label7;
            case 40: goto label7;
            case 41: goto label7;
            case 42: goto label6;
            case 43: goto label6;
            case 44: goto label6;
            case 45: goto label6;
            case 46: goto label4;
            case 47: goto label5;
            case 48: goto label4;
            case 49: goto label5;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label3;
            case 56: goto label4;
            case 57: goto label3;
            case 58: goto label4;
            case 59: goto label4;
            case 60: goto label4;
            case 61: goto label4;
            case 62: goto label4;
            case 63: goto label3;
            case 64: goto label3;
            case 65: goto label3;
            case 66: goto label3;
            case 67: goto label4;
            case 68: goto label4;
            case 69: goto label4;
            case 70: goto label4;
            case 71: goto label3;
            case 72: goto label3;
            case 73: goto label3;
            case 74: goto label3;
            case 75: goto label4;
            case 76: goto label4;
            case 77: goto label4;
            case 78: goto label4;
            case 79: goto label2;
            case 80: goto label1;
            case 81: goto label2;
            case 82: goto label1;
            case 83: goto label2;
            case 84: goto label2;
            case 85: goto label2;
            case 86: goto label2;
            case 87: goto label4;
            case 88: goto label3;
            case 89: goto label6;
            case 90: goto label6;
            case 91: goto label6;
            case 92: goto label7;
            case 93: goto label7;
            case 94: goto label7;
            case 95: goto label5;
            case 96: goto label4;
            case 97: goto label3;
            case 98: goto label4;
            case 99: goto label3;
            case 100: goto label4;
            case 101: goto label3;
            case 102: goto label4;
            case 103: goto label3;
            case 104: goto label4;
            case 105: goto label3;
            case 106: goto label4;
            case 107: goto label3;
            case 108: goto label4;
            case 109: goto label3;
            case 110: goto label4;
            case 111: goto label3;
            case 112: goto label4;
            case 113: goto label3;
            case 114: goto label4;
            case 115: goto label3;
            case 116: goto label5;
            case 117: goto label5;
            case 118: goto label5;
            case 119: goto label5;
            case 120: goto label4;
            case 121: goto label4;
            case 122: goto label4;
            case 123: goto label4;
            case 124: goto label4;
            case 125: goto label4;
            case 126: goto label4;
            case 127: goto label3;
            case 128: goto label4;
            case 129: goto label3;
            case 130: goto label4;
            case 131: goto label3;
            case 132: goto label5;
            case 133: goto label6;
            case 134: goto label5;
            case 135: goto label6;
            case 136: goto label4;
            case 137: goto label4;
            case 138: goto label5;
            case 139: goto label5;
            case 140: goto label6;
            case 141: goto label6;
            case 142: goto label4;
            case 143: goto label5;
            case 144: goto label4;
            case 145: goto label5;
            case 146: goto label5;
            case 147: goto label5;
            case 148: goto label2;
            case 149: goto label4;
            case 150: goto label4;
            case 151: goto label2;
            case 152: goto label2;
            case 153: goto label4;
            case 154: goto label4;
            case 155: goto label4;
            case 156: goto label4;
            case 157: goto label4;
            case 158: goto label4;
            case 159: goto label3;
            case 160: goto label3;
            case 161: goto label3;
            case 162: goto label3;
            case 163: goto label3;
            case 164: goto label3;
            case 165: goto label3;
            case 166: goto label3;
            case 167: goto label5;
            case 168: goto label6;
            case 169: goto label5;
            case 170: goto label4;
            case 171: goto label4;
            case 172: goto label4;
            case 173: goto label3;
            case 174: goto label4;
            case 175: goto label3;
            case 176: goto label4;
            case 177: goto label5;
            case 178: goto label5;
            case 179: goto label5;
            case 180: goto label4;
            case 181: goto label4;
            case 182: goto label4;
            case 183: goto label4;
            case 184: goto label5;
            case 185: goto label4;
            case 186: goto label8;
            case 187: goto label6;
            case 188: goto label5;
            case 189: goto label5;
            case 190: goto label5;
            case 191: goto label4;
            case 192: goto label5;
            case 193: goto label5;
            case 194: goto label4;
            case 195: goto label4;
            case 196: goto label5;
            case 197: goto label6;
            case 198: goto label4;
            case 199: goto label4;
            case 200: goto label5;
            case 201: goto label6;
            case 202: goto label5;
            case 203: goto label8;
            case 204: goto label8;
            case 205: goto label8;
            case 206: goto label8;
            case 207: goto label8;
            case 208: goto label8;
            case 209: goto label8;
            case 210: goto label8;
            case 211: goto label8;
            case 212: goto label8;
            case 213: goto label8;
            case 214: goto label8;
            case 215: goto label8;
            case 216: goto label8;
            case 217: goto label8;
            case 218: goto label8;
            case 219: goto label8;
            case 220: goto label8;
            case 221: goto label8;
            case 222: goto label8;
            case 223: goto label8;
            case 224: goto label8;
            case 225: goto label8;
            case 226: goto label8;
            case 227: goto label8;
            case 228: goto label8;
            case 229: goto label8;
            case 230: goto label8;
            case 231: goto label8;
            case 232: goto label8;
            case 233: goto label8;
            case 234: goto label8;
            case 235: goto label8;
            case 236: goto label8;
            case 237: goto label8;
            case 238: goto label8;
            case 239: goto label8;
            case 240: goto label8;
            case 241: goto label8;
            case 242: goto label8;
            case 243: goto label8;
            case 244: goto label8;
            case 245: goto label8;
            case 246: goto label8;
            case 247: goto label8;
            case 248: goto label8;
            case 249: goto label8;
            case 250: goto label8;
            case 251: goto label8;
            case 252: goto label8;
            case 253: goto label8;
            case 254: goto label5;
            case 255: goto label5;
            default: goto label8;
        };

     label1:
        $i2 = (int) -4;

        return $i2;

     label2:
        $i4 = (int) -3;

        return $i4;

     label3:
        $i6 = (int) -2;

        return $i6;

     label4:
        $i8 = (int) -1;

        return $i8;

     label5:
        return 0;

     label6:
        return 1;

     label7:
        return 2;

     label8:
        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad opcode: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r6;
    }

    private static java.lang.String bytecodeStr(int)
    {
        int i0;

        i0 := @parameter0: int;

        return "";
    }

    final char[] getCharBuffer(int)
    {
        org.mozilla.classfile.ClassFileWriter r0;
        int i0, $i1, $i2, i3;
        char[] $r1, $r2, $r3, $r4;

        r0 := @this: org.mozilla.classfile.ClassFileWriter;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.classfile.ClassFileWriter: char[] tmpCharBuffer>;

        $i1 = lengthof $r1;

        if i0 <= $i1 goto label2;

        $r2 = r0.<org.mozilla.classfile.ClassFileWriter: char[] tmpCharBuffer>;

        $i2 = lengthof $r2;

        i3 = $i2 * 2;

        if i0 <= i3 goto label1;

        i3 = i0;

     label1:
        $r3 = newarray (char)[i3];

        r0.<org.mozilla.classfile.ClassFileWriter: char[] tmpCharBuffer> = $r3;

     label2:
        $r4 = r0.<org.mozilla.classfile.ClassFileWriter: char[] tmpCharBuffer>;

        return $r4;
    }

    public static void <clinit>()
    {
        <org.mozilla.classfile.ClassFileWriter: int MIN_FIXUP_TABLE_SIZE> = 40;

        <org.mozilla.classfile.ClassFileWriter: int MIN_LABEL_TABLE_SIZE> = 32;

        <org.mozilla.classfile.ClassFileWriter: boolean DEBUGCODE> = 0;

        <org.mozilla.classfile.ClassFileWriter: boolean DEBUGLABELS> = 0;

        <org.mozilla.classfile.ClassFileWriter: boolean DEBUGSTACK> = 0;

        <org.mozilla.classfile.ClassFileWriter: long FileHeaderConstant> = -3819410108756852691L;

        <org.mozilla.classfile.ClassFileWriter: int ExceptionTableSize> = 4;

        <org.mozilla.classfile.ClassFileWriter: int LineNumberTableSize> = 16;

        <org.mozilla.classfile.ClassFileWriter: short ACC_ABSTRACT> = 1024;

        <org.mozilla.classfile.ClassFileWriter: short ACC_NATIVE> = 256;

        <org.mozilla.classfile.ClassFileWriter: short ACC_TRANSIENT> = 128;

        <org.mozilla.classfile.ClassFileWriter: short ACC_VOLATILE> = 64;

        <org.mozilla.classfile.ClassFileWriter: short ACC_SYNCHRONIZED> = 32;

        <org.mozilla.classfile.ClassFileWriter: short ACC_FINAL> = 16;

        <org.mozilla.classfile.ClassFileWriter: short ACC_STATIC> = 8;

        <org.mozilla.classfile.ClassFileWriter: short ACC_PROTECTED> = 4;

        <org.mozilla.classfile.ClassFileWriter: short ACC_PRIVATE> = 2;

        <org.mozilla.classfile.ClassFileWriter: short ACC_PUBLIC> = 1;

        return;
    }
}
