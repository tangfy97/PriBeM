public class org.apache.log4j.helpers.OnlyOnceErrorHandler extends java.lang.Object implements org.apache.log4j.spi.ErrorHandler
{
    final java.lang.String WARN_PREFIX;
    final java.lang.String ERROR_PREFIX;
    boolean firstTime;

    public void <init>()
    {
        org.apache.log4j.helpers.OnlyOnceErrorHandler r0;

        r0 := @this: org.apache.log4j.helpers.OnlyOnceErrorHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.log4j.helpers.OnlyOnceErrorHandler: java.lang.String ERROR_PREFIX> = "log4j error: ";

        r0.<org.apache.log4j.helpers.OnlyOnceErrorHandler: java.lang.String WARN_PREFIX> = "log4j warning: ";

        r0.<org.apache.log4j.helpers.OnlyOnceErrorHandler: java.lang.String WARN_PREFIX> = "log4j warning: ";

        r0.<org.apache.log4j.helpers.OnlyOnceErrorHandler: java.lang.String ERROR_PREFIX> = "log4j error: ";

        r0.<org.apache.log4j.helpers.OnlyOnceErrorHandler: boolean firstTime> = 1;

        return;
    }

    public void setLogger(org.apache.log4j.Logger)
    {
        org.apache.log4j.helpers.OnlyOnceErrorHandler r0;
        org.apache.log4j.Logger r1;

        r0 := @this: org.apache.log4j.helpers.OnlyOnceErrorHandler;

        r1 := @parameter0: org.apache.log4j.Logger;

        return;
    }

    public void activateOptions()
    {
        org.apache.log4j.helpers.OnlyOnceErrorHandler r0;

        r0 := @this: org.apache.log4j.helpers.OnlyOnceErrorHandler;

        return;
    }

    public void error(java.lang.String, java.lang.Exception, int)
    {
        org.apache.log4j.helpers.OnlyOnceErrorHandler r0;
        int i0;
        java.lang.String r1;
        java.lang.Exception r2;

        r0 := @this: org.apache.log4j.helpers.OnlyOnceErrorHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Exception;

        i0 := @parameter2: int;

        virtualinvoke r0.<org.apache.log4j.helpers.OnlyOnceErrorHandler: void error(java.lang.String,java.lang.Exception,int,org.apache.log4j.spi.LoggingEvent)>(r1, r2, i0, null);

        return;
    }

    public void error(java.lang.String, java.lang.Exception, int, org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.helpers.OnlyOnceErrorHandler r2;
        org.apache.log4j.spi.LoggingEvent r4;
        java.lang.Exception r0;
        java.lang.Thread $r1;
        int i0;
        java.lang.String r3;
        boolean $z0, $z1, $z2;

        r2 := @this: org.apache.log4j.helpers.OnlyOnceErrorHandler;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Exception;

        i0 := @parameter2: int;

        r4 := @parameter3: org.apache.log4j.spi.LoggingEvent;

        $z0 = r0 instanceof java.io.InterruptedIOException;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.lang.InterruptedException;

        if $z1 == 0 goto label2;

     label1:
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void interrupt()>();

     label2:
        $z2 = r2.<org.apache.log4j.helpers.OnlyOnceErrorHandler: boolean firstTime>;

        if $z2 == 0 goto label3;

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>(r3, r0);

        r2.<org.apache.log4j.helpers.OnlyOnceErrorHandler: boolean firstTime> = 0;

     label3:
        return;
    }

    public void error(java.lang.String)
    {
        org.apache.log4j.helpers.OnlyOnceErrorHandler r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.log4j.helpers.OnlyOnceErrorHandler;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.apache.log4j.helpers.OnlyOnceErrorHandler: boolean firstTime>;

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>(r1);

        r0.<org.apache.log4j.helpers.OnlyOnceErrorHandler: boolean firstTime> = 0;

     label1:
        return;
    }

    public void setAppender(org.apache.log4j.Appender)
    {
        org.apache.log4j.helpers.OnlyOnceErrorHandler r0;
        org.apache.log4j.Appender r1;

        r0 := @this: org.apache.log4j.helpers.OnlyOnceErrorHandler;

        r1 := @parameter0: org.apache.log4j.Appender;

        return;
    }

    public void setBackupAppender(org.apache.log4j.Appender)
    {
        org.apache.log4j.helpers.OnlyOnceErrorHandler r0;
        org.apache.log4j.Appender r1;

        r0 := @this: org.apache.log4j.helpers.OnlyOnceErrorHandler;

        r1 := @parameter0: org.apache.log4j.Appender;

        return;
    }
}
