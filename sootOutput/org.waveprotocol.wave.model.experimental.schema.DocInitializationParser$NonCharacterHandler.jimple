final class org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler extends org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$EventHandler
{

    private void <init>()
    {
        org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler;

        specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$EventHandler: void <init>(org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$1)>(null);

        return;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)
    {
        org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler r0;
        org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder $r3;
        org.waveprotocol.wave.model.document.operation.Attributes $r4;
        int $i0, $i1, $i2;
        org.xml.sax.Attributes r2;
        java.lang.String r1, r5, r6;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: org.xml.sax.Attributes;

        $i0 = r0.<org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler: int depth>;

        if $i0 <= 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler: org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder builder>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler: org.waveprotocol.wave.model.document.operation.Attributes convertAttributes(org.xml.sax.Attributes)>(r2);

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder elementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r1, $r4);

     label1:
        $i1 = r0.<org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler: int depth>;

        $i2 = $i1 + 1;

        r0.<org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler: int depth> = $i2;

        return;
    }

    public void endElement(java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler r0;
        org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder $r1;
        int $i0, $i1, $i2;
        java.lang.String r2, r3, r4;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $i0 = r0.<org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler: int depth>;

        $i1 = $i0 - 1;

        r0.<org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler: int depth> = $i1;

        $i2 = r0.<org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler: int depth>;

        if $i2 <= 0 goto label1;

        $r1 = r0.<org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler: org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder builder>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder elementEnd()>();

     label1:
        return;
    }

    public void characters(char[], int, int) throws org.xml.sax.SAXException
    {
        char $c3, $c4;
        org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler r6;
        org.xml.sax.SAXException $r1;
        int i0, i1, $i2, i5;
        char[] r0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0;

        r6 := @this: org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i5 = i0;

     label1:
        $i2 = i0 + i1;

        if i5 >= $i2 goto label3;

        $c3 = r0[i5];

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3);

        if $z0 != 0 goto label2;

        $r1 = new org.xml.sax.SAXException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-whitespace character encountered: ");

        $c4 = r0[i5];

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.xml.sax.SAXException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return;
    }

    private static org.waveprotocol.wave.model.document.operation.Attributes convertAttributes(org.xml.sax.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute $r3;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r2;
        org.xml.sax.Attributes r1;
        int $i0, i1;
        java.lang.String $r4, $r5;

        r1 := @parameter0: org.xml.sax.Attributes;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r1.<org.xml.sax.Attributes: int getLength()>();

        if i1 >= $i0 goto label2;

        $r3 = new org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute;

        $r4 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i1);

        $r5 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i1);

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: void <init>(java.lang.String,java.lang.String)>($r4, $r5);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl fromUnsortedAttributes(java.util.List)>($r0);

        return $r2;
    }

    void <init>(org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$1)
    {
        org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler r0;
        org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$1 r1;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler;

        r1 := @parameter0: org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$1;

        specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.DocInitializationParser$NonCharacterHandler: void <init>()>();

        return;
    }
}
