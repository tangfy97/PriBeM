public class org.eclipse.jetty.util.log.Log extends java.lang.Object
{
    public static final java.lang.String EXCEPTION;
    public static final java.lang.String IGNORED;
    protected static java.util.Properties __props;
    public static java.lang.String __logClass;
    public static boolean __ignored;
    private static final java.util.concurrent.ConcurrentMap __loggers;
    private static org.eclipse.jetty.util.log.Logger LOG;
    private static boolean __initialized;

    public void <init>()
    {
        org.eclipse.jetty.util.log.Log r0;

        r0 := @this: org.eclipse.jetty.util.log.Log;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean initialized()
    {
        java.lang.Throwable $r14, $r15;
        java.lang.Object[] $r6;
        java.lang.String $r1, $r9;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r2, $r12;
        java.lang.Object $r4;
        org.eclipse.jetty.util.log.Logger $r0, $r3, $r5, $r7, $r8, $r10, $r11, $r13;

        $r0 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        if $r0 == null goto label01;

        return 1;

     label01:
        entermonitor class "Lorg/eclipse/jetty/util/log/Log;";

     label02:
        $z0 = <org.eclipse.jetty.util.log.Log: boolean __initialized>;

        if $z0 == 0 goto label06;

        $r13 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        if $r13 == null goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        exitmonitor class "Lorg/eclipse/jetty/util/log/Log;";

     label05:
        return $z2;

     label06:
        <org.eclipse.jetty.util.log.Log: boolean __initialized> = 1;

        exitmonitor class "Lorg/eclipse/jetty/util/log/Log;";

     label07:
        goto label10;

     label08:
        $r15 := @caughtexception;

        exitmonitor class "Lorg/eclipse/jetty/util/log/Log;";

     label09:
        throw $r15;

     label10:
        $r1 = <org.eclipse.jetty.util.log.Log: java.lang.String __logClass>;

        $r2 = staticinvoke <org.eclipse.jetty.util.Loader: java.lang.Class loadClass(java.lang.Class,java.lang.String)>(class "Lorg/eclipse/jetty/util/log/Log;", $r1);

        $r3 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        if $r3 == null goto label11;

        $r11 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z1 != 0 goto label12;

     label11:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

        $r5 = (org.eclipse.jetty.util.log.Logger) $r4;

        <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG> = $r5;

        $r8 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        $r6 = newarray (java.lang.Object)[2];

        $r7 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        $r6[0] = $r7;

        $r9 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r6[1] = $r9;

        interfaceinvoke $r8.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("Logging to {} via {}", $r6);

     label12:
        goto label14;

     label13:
        $r14 := @caughtexception;

        staticinvoke <org.eclipse.jetty.util.log.Log: void initStandardLogging(java.lang.Throwable)>($r14);

     label14:
        $r10 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        if $r10 == null goto label15;

        $z3 = 1;

        goto label16;

     label15:
        $z3 = 0;

     label16:
        return $z3;

        catch java.lang.Throwable from label02 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label10 to label12 with label13;
    }

    private static void initStandardLogging(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.lang.Object[] $r3;
        java.lang.Class r1;
        org.eclipse.jetty.util.log.Logger $r4, $r5, $r7;
        java.lang.String $r6;
        org.eclipse.jetty.util.log.StdErrLog $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Throwable;

        if r0 == null goto label1;

        $z0 = <org.eclipse.jetty.util.log.Log: boolean __ignored>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<java.lang.Throwable: void printStackTrace()>();

     label1:
        $r7 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        if $r7 != null goto label2;

        r1 = class "Lorg/eclipse/jetty/util/log/StdErrLog;";

        $r2 = new org.eclipse.jetty.util.log.StdErrLog;

        specialinvoke $r2.<org.eclipse.jetty.util.log.StdErrLog: void <init>()>();

        <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG> = $r2;

        $r5 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        $r3[0] = $r4;

        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3[1] = $r6;

        interfaceinvoke $r5.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("Logging to {} via {}", $r3);

     label2:
        return;
    }

    public static void setLog(org.eclipse.jetty.util.log.Logger)
    {
        org.eclipse.jetty.util.log.Logger r0;

        r0 := @parameter0: org.eclipse.jetty.util.log.Logger;

        <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG> = r0;

        return;
    }

    public static org.eclipse.jetty.util.log.Logger getLog()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        staticinvoke <org.eclipse.jetty.util.log.Log: boolean initialized()>();

        $r0 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        return $r0;
    }

    public static org.eclipse.jetty.util.log.Logger getRootLogger()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        staticinvoke <org.eclipse.jetty.util.log.Log: boolean initialized()>();

        $r0 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        return $r0;
    }

    static boolean isIgnored()
    {
        boolean $z0;

        $z0 = <org.eclipse.jetty.util.log.Log: boolean __ignored>;

        return $z0;
    }

    public static void setLogToParent(java.lang.String)
    {
        java.lang.Object[] $r9;
        java.lang.Class[] $r7;
        java.lang.Exception $r12;
        org.eclipse.jetty.util.log.LoggerLog $r11;
        java.lang.Class $r0, $r6;
        java.lang.Object $r10;
        java.lang.ClassLoader $r1, $r4, $r5;
        java.lang.String r2;
        org.eclipse.jetty.util.log.Logger $r3;
        java.lang.reflect.Method $r8;

        r2 := @parameter0: java.lang.String;

        $r0 = class "Lorg/eclipse/jetty/util/log/Log;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r1 == null goto label4;

        $r4 = virtualinvoke $r1.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        if $r4 == null goto label4;

     label1:
        $r5 = virtualinvoke $r1.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        $r6 = virtualinvoke $r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.eclipse.jetty.util.log.Log");

        $r7 = newarray (java.lang.Class)[1];

        $r7[0] = class "Ljava/lang/String;";

        $r8 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getLogger", $r7);

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r2;

        $r10 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r9);

        $r11 = new org.eclipse.jetty.util.log.LoggerLog;

        specialinvoke $r11.<org.eclipse.jetty.util.log.LoggerLog: void <init>(java.lang.Object)>($r10);

        staticinvoke <org.eclipse.jetty.util.log.Log: void setLog(org.eclipse.jetty.util.log.Logger)>($r11);

     label2:
        goto label5;

     label3:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.Exception: void printStackTrace()>();

        goto label5;

     label4:
        $r3 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.String)>(r2);

        staticinvoke <org.eclipse.jetty.util.log.Log: void setLog(org.eclipse.jetty.util.log.Logger)>($r3);

     label5:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void debug(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        org.eclipse.jetty.util.log.Logger $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.Log: boolean isDebugEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r1.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Throwable)>("EXCEPTION ", r0);

        return;
    }

    public static void debug(java.lang.String)
    {
        java.lang.Object[] $r1;
        java.lang.String r0;
        org.eclipse.jetty.util.log.Logger $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.Log: boolean initialized()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        $r1 = newarray (java.lang.Object)[0];

        interfaceinvoke $r2.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>(r0, $r1);

        return;
    }

    public static void debug(java.lang.String, java.lang.Object)
    {
        java.lang.Object[] $r1;
        java.lang.Object r2;
        java.lang.String r0;
        org.eclipse.jetty.util.log.Logger $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.Log: boolean initialized()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        interfaceinvoke $r3.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>(r0, $r1);

        return;
    }

    public static void debug(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r1;
        java.lang.Object r2, r3;
        java.lang.String r0;
        org.eclipse.jetty.util.log.Logger $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.Log: boolean initialized()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        interfaceinvoke $r4.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>(r0, $r1);

        return;
    }

    public static void ignore(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        org.eclipse.jetty.util.log.Logger $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.Log: boolean initialized()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r1.<org.eclipse.jetty.util.log.Logger: void ignore(java.lang.Throwable)>(r0);

        return;
    }

    public static void info(java.lang.String)
    {
        java.lang.Object[] $r1;
        java.lang.String r0;
        org.eclipse.jetty.util.log.Logger $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.Log: boolean initialized()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        $r1 = newarray (java.lang.Object)[0];

        interfaceinvoke $r2.<org.eclipse.jetty.util.log.Logger: void info(java.lang.String,java.lang.Object[])>(r0, $r1);

        return;
    }

    public static void info(java.lang.String, java.lang.Object)
    {
        java.lang.Object[] $r1;
        java.lang.Object r2;
        java.lang.String r0;
        org.eclipse.jetty.util.log.Logger $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.Log: boolean initialized()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        interfaceinvoke $r3.<org.eclipse.jetty.util.log.Logger: void info(java.lang.String,java.lang.Object[])>(r0, $r1);

        return;
    }

    public static void info(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r1;
        java.lang.Object r2, r3;
        java.lang.String r0;
        org.eclipse.jetty.util.log.Logger $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.Log: boolean initialized()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        interfaceinvoke $r4.<org.eclipse.jetty.util.log.Logger: void info(java.lang.String,java.lang.Object[])>(r0, $r1);

        return;
    }

    public static boolean isDebugEnabled()
    {
        org.eclipse.jetty.util.log.Logger $r0;
        boolean $z0, $z1;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.Log: boolean initialized()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r0 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        $z1 = interfaceinvoke $r0.<org.eclipse.jetty.util.log.Logger: boolean isDebugEnabled()>();

        return $z1;
    }

    public static void warn(java.lang.String)
    {
        java.lang.Object[] $r1;
        java.lang.String r0;
        org.eclipse.jetty.util.log.Logger $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.Log: boolean initialized()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        $r1 = newarray (java.lang.Object)[0];

        interfaceinvoke $r2.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.String,java.lang.Object[])>(r0, $r1);

        return;
    }

    public static void warn(java.lang.String, java.lang.Object)
    {
        java.lang.Object[] $r1;
        java.lang.Object r2;
        java.lang.String r0;
        org.eclipse.jetty.util.log.Logger $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.Log: boolean initialized()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        interfaceinvoke $r3.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.String,java.lang.Object[])>(r0, $r1);

        return;
    }

    public static void warn(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r1;
        java.lang.Object r2, r3;
        java.lang.String r0;
        org.eclipse.jetty.util.log.Logger $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.Log: boolean initialized()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        interfaceinvoke $r4.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.String,java.lang.Object[])>(r0, $r1);

        return;
    }

    public static void warn(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r1;
        java.lang.String r0;
        org.eclipse.jetty.util.log.Logger $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.Log: boolean initialized()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r2.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.String,java.lang.Throwable)>(r0, r1);

        return;
    }

    public static void warn(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        org.eclipse.jetty.util.log.Logger $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.Log: boolean initialized()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r1.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.String,java.lang.Throwable)>("EXCEPTION ", r0);

        return;
    }

    public static org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;
        org.eclipse.jetty.util.log.Logger $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.String)>($r1);

        return $r2;
    }

    public static org.eclipse.jetty.util.log.Logger getLogger(java.lang.String)
    {
        java.lang.Object $r2;
        java.lang.String r0;
        org.eclipse.jetty.util.log.Logger $r3, $r4, r5;
        boolean $z0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.Log: boolean initialized()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        if r0 != null goto label2;

        $r4 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        return $r4;

     label2:
        $r1 = <org.eclipse.jetty.util.log.Log: java.util.concurrent.ConcurrentMap __loggers>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0);

        r5 = (org.eclipse.jetty.util.log.Logger) $r2;

        if r5 != null goto label3;

        $r3 = <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger LOG>;

        r5 = interfaceinvoke $r3.<org.eclipse.jetty.util.log.Logger: org.eclipse.jetty.util.log.Logger getLogger(java.lang.String)>(r0);

     label3:
        return r5;
    }

    static java.util.concurrent.ConcurrentMap getMutableLoggers()
    {
        java.util.concurrent.ConcurrentMap $r0;

        $r0 = <org.eclipse.jetty.util.log.Log: java.util.concurrent.ConcurrentMap __loggers>;

        return $r0;
    }

    public static java.util.Map getLoggers()
    {
        java.util.concurrent.ConcurrentMap $r0;
        java.util.Map $r1;

        $r0 = <org.eclipse.jetty.util.log.Log: java.util.concurrent.ConcurrentMap __loggers>;

        $r1 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r0);

        return $r1;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;
        java.util.Properties $r1;
        org.eclipse.jetty.util.log.Log$1 $r2;

        <org.eclipse.jetty.util.log.Log: java.lang.String IGNORED> = "IGNORED ";

        <org.eclipse.jetty.util.log.Log: java.lang.String EXCEPTION> = "EXCEPTION ";

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.eclipse.jetty.util.log.Log: java.util.concurrent.ConcurrentMap __loggers> = $r0;

        $r1 = new java.util.Properties;

        specialinvoke $r1.<java.util.Properties: void <init>()>();

        <org.eclipse.jetty.util.log.Log: java.util.Properties __props> = $r1;

        $r2 = new org.eclipse.jetty.util.log.Log$1;

        specialinvoke $r2.<org.eclipse.jetty.util.log.Log$1: void <init>()>();

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);

        return;
    }
}
