final class org.apache.cxf.transport.http.ChunkedUtil extends java.lang.Object
{

    private void <init>()
    {
        org.apache.cxf.transport.http.ChunkedUtil r0;

        r0 := @this: org.apache.cxf.transport.http.ChunkedUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.InputStream getPartialResponse(java.net.HttpURLConnection, int) throws java.io.IOException
    {
        java.net.HttpURLConnection r0;
        int i0, $i1;
        boolean $z0, $z1;
        java.io.InputStream r1;

        r0 := @parameter0: java.net.HttpURLConnection;

        i0 := @parameter1: int;

        r1 = null;

        if i0 == 202 goto label1;

        if i0 != 200 goto label4;

     label1:
        $i1 = virtualinvoke r0.<java.net.HttpURLConnection: int getContentLength()>();

        if $i1 <= 0 goto label2;

        r1 = virtualinvoke r0.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();

        goto label4;

     label2:
        $z0 = staticinvoke <org.apache.cxf.transport.http.ChunkedUtil: boolean hasChunkedResponse(java.net.HttpURLConnection)>(r0);

        if $z0 != 0 goto label3;

        $z1 = staticinvoke <org.apache.cxf.transport.http.ChunkedUtil: boolean hasEofTerminatedResponse(java.net.HttpURLConnection)>(r0);

        if $z1 == 0 goto label4;

     label3:
        r1 = staticinvoke <org.apache.cxf.transport.http.ChunkedUtil: java.io.InputStream getNonEmptyContent(java.net.HttpURLConnection)>(r0);

     label4:
        return r1;
    }

    private static boolean hasChunkedResponse(java.net.HttpURLConnection)
    {
        java.net.HttpURLConnection r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.net.HttpURLConnection;

        $r1 = "chunked";

        $r2 = virtualinvoke r0.<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>("Transfer-Encoding");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        return $z0;
    }

    private static boolean hasEofTerminatedResponse(java.net.HttpURLConnection)
    {
        java.net.HttpURLConnection r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.net.HttpURLConnection;

        $r1 = "close";

        $r2 = virtualinvoke r0.<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>("Connection");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        return $z0;
    }

    private static java.io.InputStream getNonEmptyContent(java.net.HttpURLConnection)
    {
        java.net.HttpURLConnection r1;
        java.io.PushbackInputStream r4, $r5;
        java.io.IOException $r3;
        byte $b1;
        int $i0, $i3, $i4;
        java.io.InputStream $r2;

        r1 := @parameter0: java.net.HttpURLConnection;

        r4 = null;

     label1:
        $r5 = new java.io.PushbackInputStream;

        $r2 = virtualinvoke r1.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();

        specialinvoke $r5.<java.io.PushbackInputStream: void <init>(java.io.InputStream)>($r2);

        $i0 = virtualinvoke $r5.<java.io.PushbackInputStream: int read()>();

        $i3 = (int) -1;

        if $i0 == $i3 goto label2;

        $b1 = (byte) $i0;

        $i4 = (int) $b1;

        virtualinvoke $r5.<java.io.PushbackInputStream: void unread(int)>($i4);

        r4 = $r5;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return r4;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
