public final class com.hp.hpl.jena.tdb.base.block.Block extends java.lang.Object
{
    private final java.lang.Long id;
    private boolean readOnly;
    private boolean modified;
    private final java.nio.ByteBuffer byteBuffer;
    private java.nio.ByteBuffer underlyingByteBuffer;

    public void <init>(long, java.nio.ByteBuffer)
    {
        java.lang.Long $r1;
        com.hp.hpl.jena.tdb.base.block.Block r0;
        long l0;
        java.nio.ByteBuffer r2;

        r0 := @this: com.hp.hpl.jena.tdb.base.block.Block;

        l0 := @parameter0: long;

        r2 := @parameter1: java.nio.ByteBuffer;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.block.Block: void <init>(java.lang.Long,java.nio.ByteBuffer)>($r1, r2);

        return;
    }

    public void <init>(java.lang.Long, java.nio.ByteBuffer)
    {
        java.lang.Long r1;
        java.nio.ByteBuffer r2;
        com.hp.hpl.jena.tdb.base.block.Block r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.block.Block;

        r1 := @parameter0: java.lang.Long;

        r2 := @parameter1: java.nio.ByteBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.base.block.Block: boolean readOnly> = 0;

        r0.<com.hp.hpl.jena.tdb.base.block.Block: boolean modified> = 0;

        r0.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long id> = r1;

        r0.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer byteBuffer> = r2;

        r0.<com.hp.hpl.jena.tdb.base.block.Block: boolean readOnly> = 0;

        r0.<com.hp.hpl.jena.tdb.base.block.Block: boolean modified> = 0;

        r0.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer underlyingByteBuffer> = null;

        return;
    }

    public com.hp.hpl.jena.tdb.base.page.Page convert(com.hp.hpl.jena.tdb.base.block.BlockConverter)
    {
        com.hp.hpl.jena.tdb.base.page.Page $r2;
        com.hp.hpl.jena.tdb.base.block.BlockConverter r0;
        com.hp.hpl.jena.tdb.base.block.Block r1;

        r1 := @this: com.hp.hpl.jena.tdb.base.block.Block;

        r0 := @parameter0: com.hp.hpl.jena.tdb.base.block.BlockConverter;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.tdb.base.block.BlockConverter: com.hp.hpl.jena.tdb.base.page.Page fromBlock(com.hp.hpl.jena.tdb.base.block.Block)>(r1);

        return $r2;
    }

    public final java.lang.Long getId()
    {
        java.lang.Long $r1;
        com.hp.hpl.jena.tdb.base.block.Block r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.block.Block;

        $r1 = r0.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long id>;

        return $r1;
    }

    public final java.nio.ByteBuffer getByteBuffer()
    {
        java.nio.ByteBuffer $r1;
        com.hp.hpl.jena.tdb.base.block.Block r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.block.Block;

        $r1 = r0.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer byteBuffer>;

        return $r1;
    }

    public boolean isReadOnly()
    {
        com.hp.hpl.jena.tdb.base.block.Block r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.base.block.Block;

        $z0 = r0.<com.hp.hpl.jena.tdb.base.block.Block: boolean readOnly>;

        return $z0;
    }

    public void setReadOnly(boolean)
    {
        com.hp.hpl.jena.tdb.base.block.Block r0;
        com.hp.hpl.jena.tdb.base.block.BlockException $r1;
        boolean z0, $z1;

        r0 := @this: com.hp.hpl.jena.tdb.base.block.Block;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $z1 = r0.<com.hp.hpl.jena.tdb.base.block.Block: boolean modified>;

        if $z1 == 0 goto label1;

        $r1 = new com.hp.hpl.jena.tdb.base.block.BlockException;

        specialinvoke $r1.<com.hp.hpl.jena.tdb.base.block.BlockException: void <init>(java.lang.String)>("Attempt to mark a modified block as read-only");

        throw $r1;

     label1:
        r0.<com.hp.hpl.jena.tdb.base.block.Block: boolean readOnly> = z0;

        return;
    }

    public boolean isModified()
    {
        com.hp.hpl.jena.tdb.base.block.Block r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.base.block.Block;

        $z0 = r0.<com.hp.hpl.jena.tdb.base.block.Block: boolean modified>;

        return $z0;
    }

    public void setModified(boolean)
    {
        com.hp.hpl.jena.tdb.base.block.Block r0;
        com.hp.hpl.jena.tdb.base.block.BlockException $r1;
        boolean $z0, z1;

        r0 := @this: com.hp.hpl.jena.tdb.base.block.Block;

        z1 := @parameter0: boolean;

        $z0 = r0.<com.hp.hpl.jena.tdb.base.block.Block: boolean readOnly>;

        if $z0 == 0 goto label1;

        if z1 == 0 goto label1;

        $r1 = new com.hp.hpl.jena.tdb.base.block.BlockException;

        specialinvoke $r1.<com.hp.hpl.jena.tdb.base.block.BlockException: void <init>(java.lang.String)>("Attempt to mark a readonly block as modified");

        throw $r1;

     label1:
        r0.<com.hp.hpl.jena.tdb.base.block.Block: boolean modified> = z1;

        return;
    }

    public java.nio.ByteBuffer getUnderlyingByteBuffer()
    {
        java.nio.ByteBuffer $r1;
        com.hp.hpl.jena.tdb.base.block.Block r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.block.Block;

        $r1 = r0.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer underlyingByteBuffer>;

        return $r1;
    }

    public void setUnderlyingByteBuffer(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r1;
        com.hp.hpl.jena.tdb.base.block.Block r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.block.Block;

        r1 := @parameter0: java.nio.ByteBuffer;

        r0.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer underlyingByteBuffer> = r1;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $r2;
        java.lang.Integer $r4, $r5, $r6;
        java.nio.ByteBuffer $r1;
        java.lang.Long $r3;
        com.hp.hpl.jena.tdb.base.block.Block r0;
        int $i0, $i1, $i2;
        java.lang.String $r7;

        r0 := @this: com.hp.hpl.jena.tdb.base.block.Block;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer getByteBuffer()>();

        $r2 = newarray (java.lang.Object)[4];

        $r3 = r0.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long id>;

        $r2[0] = $r3;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[1] = $r4;

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int limit()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[2] = $r5;

        $i2 = virtualinvoke $r1.<java.nio.ByteBuffer: int capacity()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r2[3] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Block: %d (posn=%d, limit=%d, cap=%d)", $r2);

        return $r7;
    }

    public com.hp.hpl.jena.tdb.base.block.Block replicate()
    {
        java.lang.Long $r4;
        com.hp.hpl.jena.tdb.base.block.Block r0, $r3;
        java.nio.ByteBuffer $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.tdb.base.block.Block;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer getByteBuffer()>();

        $r2 = staticinvoke <com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer replicate(java.nio.ByteBuffer)>($r1);

        $r3 = new com.hp.hpl.jena.tdb.base.block.Block;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        specialinvoke $r3.<com.hp.hpl.jena.tdb.base.block.Block: void <init>(java.lang.Long,java.nio.ByteBuffer)>($r4, $r2);

        $z0 = r0.<com.hp.hpl.jena.tdb.base.block.Block: boolean modified>;

        $r3.<com.hp.hpl.jena.tdb.base.block.Block: boolean modified> = $z0;

        $z1 = r0.<com.hp.hpl.jena.tdb.base.block.Block: boolean readOnly>;

        $r3.<com.hp.hpl.jena.tdb.base.block.Block: boolean readOnly> = $z1;

        return $r3;
    }

    public static void replicate(com.hp.hpl.jena.tdb.base.block.Block, com.hp.hpl.jena.tdb.base.block.Block)
    {
        java.nio.ByteBuffer $r4, $r5;
        java.lang.Long $r1, $r3, $r9, $r12;
        com.hp.hpl.jena.tdb.base.block.BlockException $r6;
        java.lang.String $r14;
        boolean $z0;
        com.hp.hpl.jena.tdb.base.block.Block r0, r2;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r13;

        r0 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        r2 := @parameter1: com.hp.hpl.jena.tdb.base.block.Block;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $z0 = virtualinvoke $r1.<java.lang.Long: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r6 = new com.hp.hpl.jena.tdb.base.block.BlockException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FileAccessMem: Attempt to copy across blocks: ");

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" => ");

        $r12 = virtualinvoke r2.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.tdb.base.block.BlockException: void <init>(java.lang.String)>($r14);

        throw $r6;

     label1:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer getByteBuffer()>();

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer getByteBuffer()>();

        staticinvoke <com.hp.hpl.jena.tdb.base.block.Block: void replicate(java.nio.ByteBuffer,java.nio.ByteBuffer)>($r4, $r5);

        return;
    }

    private static java.nio.ByteBuffer replicate(java.nio.ByteBuffer)
    {
        byte[] $r2, $r3;
        java.nio.ByteBuffer r0, $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int capacity()>();

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i2 = virtualinvoke r0.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z1 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>();

        $r3 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        $i3 = virtualinvoke r0.<java.nio.ByteBuffer: int capacity()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i3);

        goto label2;

     label1:
        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r0);

     label2:
        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i1);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i1);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i2);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i2);

        return $r1;
    }

    private static void replicate(java.nio.ByteBuffer, java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0, r1;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.nio.ByteBuffer;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r0);

        return;
    }
}
