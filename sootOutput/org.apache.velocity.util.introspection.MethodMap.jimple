public class org.apache.velocity.util.introspection.MethodMap extends java.lang.Object
{
    private static final int MORE_SPECIFIC;
    private static final int LESS_SPECIFIC;
    private static final int INCOMPARABLE;
    java.util.Map methodByNameMap;
    static java.lang.Class class$java$lang$Object;

    public void <init>()
    {
        org.apache.velocity.util.introspection.MethodMap r0;
        java.util.Map $r1;

        r0 := @this: org.apache.velocity.util.introspection.MethodMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.apache.velocity.util.MapFactory: java.util.Map create(boolean)>(0);

        r0.<org.apache.velocity.util.introspection.MethodMap: java.util.Map methodByNameMap> = $r1;

        return;
    }

    public void add(java.lang.reflect.Method)
    {
        java.util.List $r3, r6;
        java.util.Map $r5;
        java.lang.String $r1;
        java.lang.reflect.Method r0;
        org.apache.velocity.util.introspection.MethodMap r2;
        java.util.ArrayList $r4;

        r2 := @this: org.apache.velocity.util.introspection.MethodMap;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r3 = virtualinvoke r2.<org.apache.velocity.util.introspection.MethodMap: java.util.List get(java.lang.String)>($r1);

        r6 = $r3;

        if $r3 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r6 = $r4;

        $r5 = r2.<org.apache.velocity.util.introspection.MethodMap: java.util.Map methodByNameMap>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

     label1:
        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public java.util.List get(java.lang.String)
    {
        java.util.List $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        org.apache.velocity.util.introspection.MethodMap r0;

        r0 := @this: org.apache.velocity.util.introspection.MethodMap;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.velocity.util.introspection.MethodMap: java.util.Map methodByNameMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public java.lang.reflect.Method find(java.lang.String, java.lang.Object[]) throws org.apache.velocity.util.introspection.MethodMap$AmbiguousException
    {
        java.lang.Object[] r3;
        java.lang.Class[] r4;
        java.util.List $r2;
        int i0, $i1, i2;
        java.lang.Object r6;
        java.lang.Class $r7;
        java.lang.String r1;
        java.lang.reflect.Method $r5;
        org.apache.velocity.util.introspection.MethodMap r0;

        r0 := @this: org.apache.velocity.util.introspection.MethodMap;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object[];

        $r2 = virtualinvoke r0.<org.apache.velocity.util.introspection.MethodMap: java.util.List get(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        i0 = lengthof r3;

        r4 = newarray (java.lang.Class)[i0];

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        r6 = r3[i2];

        $i1 = i2;

        if r6 != null goto label3;

        $r7 = null;

        goto label4;

     label3:
        $r7 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

     label4:
        r4[$i1] = $r7;

        i2 = i2 + 1;

        goto label2;

     label5:
        $r5 = staticinvoke <org.apache.velocity.util.introspection.MethodMap: java.lang.reflect.Method getBestMatch(java.util.List,java.lang.Class[])>($r2, r4);

        return $r5;
    }

    private static java.lang.reflect.Method getBestMatch(java.util.List, java.lang.Class[])
    {
        java.util.ArrayList $r7, r11;
        int $i0, $i1, $i2, i3, i4;
        java.lang.reflect.Method r4, r9, r12;
        boolean $z0, $z1;
        java.util.Iterator $r1;
        java.lang.Class[] r5, $r6, $r10, r13;
        java.util.List r0;
        org.apache.velocity.util.introspection.MethodMap$AmbiguousException $r2;
        java.lang.Object $r3, $r8;

        r0 := @parameter0: java.util.List;

        r5 := @parameter1: java.lang.Class[];

        r11 = null;

        r12 = null;

        r13 = null;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.reflect.Method) $r3;

        $z1 = staticinvoke <org.apache.velocity.util.introspection.MethodMap: boolean isApplicable(java.lang.reflect.Method,java.lang.Class[])>(r4, r5);

        if $z1 == 0 goto label12;

        if r12 != null goto label02;

        r12 = r4;

        r13 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        goto label12;

     label02:
        $r6 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = staticinvoke <org.apache.velocity.util.introspection.MethodMap: int compare(java.lang.Class[],java.lang.Class[])>($r6, r13);

        tableswitch($i0)
        {
            case 0: goto label03;
            case 1: goto label12;
            case 2: goto label10;
            default: goto label12;
        };

     label03:
        if r11 != null goto label04;

        r12 = r4;

        r13 = $r6;

        goto label12;

     label04:
        i3 = interfaceinvoke r11.<java.util.List: int size()>();

        i4 = 0;

     label05:
        if i4 >= i3 goto label09;

        $r8 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(i4);

        r9 = (java.lang.reflect.Method) $r8;

        $r10 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = staticinvoke <org.apache.velocity.util.introspection.MethodMap: int compare(java.lang.Class[],java.lang.Class[])>($r6, $r10);

        tableswitch($i2)
        {
            case 0: goto label06;
            case 1: goto label08;
            case 2: goto label07;
            default: goto label08;
        };

     label06:
        r12 = r4;

        r13 = $r6;

        r11 = null;

        i3 = 0;

        goto label08;

     label07:
        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label08;

     label08:
        i4 = i4 + 1;

        goto label05;

     label09:
        goto label12;

     label10:
        if r11 != null goto label11;

        $r7 = new java.util.ArrayList;

        $i1 = lengthof r13;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i1);

        r11 = $r7;

     label11:
        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label12;

     label12:
        goto label01;

     label13:
        if r11 == null goto label14;

        $r2 = new org.apache.velocity.util.introspection.MethodMap$AmbiguousException;

        specialinvoke $r2.<org.apache.velocity.util.introspection.MethodMap$AmbiguousException: void <init>()>();

        throw $r2;

     label14:
        return r12;
    }

    private static int compare(java.lang.Class[], java.lang.Class[])
    {
        boolean $z0, $z1, $z2, $z3, z4, z5, z7, $z8, $z9, $z10, $z11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        java.lang.Class[] r0, r1;
        java.lang.Class $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.Class[];

        z4 = 0;

        z5 = 0;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 <= $i0 goto label01;

        return 0;

     label01:
        $i3 = lengthof r1;

        $i2 = lengthof r0;

        if $i3 <= $i2 goto label02;

        return 1;

     label02:
        i11 = 0;

     label03:
        $i4 = lengthof r0;

        if i11 >= $i4 goto label17;

        $r5 = r0[i11];

        $r4 = r1[i11];

        if $r5 == $r4 goto label16;

        $i9 = lengthof r0;

        $i10 = $i9 - 1;

        if i11 != $i10 goto label04;

        $z11 = 1;

        $z10 = 1;

        goto label05;

     label04:
        $z11 = 0;

        $z10 = 0;

     label05:
        z7 = $z11;

        if z4 != 0 goto label08;

        $r11 = r1[i11];

        $r10 = r0[i11];

        $z3 = staticinvoke <org.apache.velocity.util.introspection.MethodMap: boolean isStrictConvertible(java.lang.Class,java.lang.Class,boolean)>($r11, $r10, $z10);

        if $z3 != 0 goto label08;

        $r13 = r1[i11];

        $r12 = <org.apache.velocity.util.introspection.MethodMap: java.lang.Class class$java$lang$Object>;

        if $r12 != null goto label06;

        $r14 = staticinvoke <org.apache.velocity.util.introspection.MethodMap: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.apache.velocity.util.introspection.MethodMap: java.lang.Class class$java$lang$Object> = $r14;

        goto label07;

     label06:
        $r14 = <org.apache.velocity.util.introspection.MethodMap: java.lang.Class class$java$lang$Object>;

     label07:
        if $r13 != $r14 goto label09;

     label08:
        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        z4 = $z8;

        if z5 != 0 goto label13;

        $r7 = r0[i11];

        $r6 = r1[i11];

        $z2 = staticinvoke <org.apache.velocity.util.introspection.MethodMap: boolean isStrictConvertible(java.lang.Class,java.lang.Class,boolean)>($r7, $r6, z7);

        if $z2 != 0 goto label13;

        $r9 = r0[i11];

        $r8 = <org.apache.velocity.util.introspection.MethodMap: java.lang.Class class$java$lang$Object>;

        if $r8 != null goto label11;

        $r15 = staticinvoke <org.apache.velocity.util.introspection.MethodMap: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.apache.velocity.util.introspection.MethodMap: java.lang.Class class$java$lang$Object> = $r15;

        goto label12;

     label11:
        $r15 = <org.apache.velocity.util.introspection.MethodMap: java.lang.Class class$java$lang$Object>;

     label12:
        if $r9 != $r15 goto label14;

     label13:
        $z9 = 1;

        goto label15;

     label14:
        $z9 = 0;

     label15:
        z5 = $z9;

     label16:
        i11 = i11 + 1;

        goto label03;

     label17:
        if z4 == 0 goto label21;

        if z5 == 0 goto label20;

        $i5 = lengthof r0;

        $i6 = $i5 - 1;

        $r2 = r0[$i6];

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isArray()>();

        $i7 = lengthof r1;

        $i8 = $i7 - 1;

        $r3 = r1[$i8];

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label18;

        if $z1 != 0 goto label18;

        return 1;

     label18:
        if $z0 != 0 goto label19;

        if $z1 == 0 goto label19;

        return 0;

     label19:
        return 2;

     label20:
        return 0;

     label21:
        if z5 == 0 goto label22;

        return 1;

     label22:
        return 2;
    }

    private static boolean isApplicable(java.lang.reflect.Method, java.lang.Class[])
    {
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23;
        java.lang.Class[] $r1, r2;
        java.lang.Class $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, r15;

        r0 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.Class[];

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r1;

        $i0 = lengthof r2;

        if $i1 <= $i0 goto label05;

        $i16 = lengthof $r1;

        $i14 = lengthof r2;

        $i15 = $i14 + 1;

        if $i16 != $i15 goto label04;

        $i17 = lengthof $r1;

        $i18 = $i17 - 1;

        $r12 = $r1[$i18];

        $z6 = virtualinvoke $r12.<java.lang.Class: boolean isArray()>();

        if $z6 == 0 goto label04;

        i20 = 0;

     label01:
        $i19 = lengthof r2;

        if i20 >= $i19 goto label03;

        $r14 = $r1[i20];

        $r13 = r2[i20];

        $z7 = staticinvoke <org.apache.velocity.util.introspection.MethodMap: boolean isConvertible(java.lang.Class,java.lang.Class,boolean)>($r14, $r13, 0);

        if $z7 != 0 goto label02;

        return 0;

     label02:
        i20 = i20 + 1;

        goto label01;

     label03:
        return 1;

     label04:
        return 0;

     label05:
        $i3 = lengthof $r1;

        $i2 = lengthof r2;

        if $i3 != $i2 goto label10;

        i21 = 0;

     label06:
        $i11 = lengthof r2;

        if i21 >= $i11 goto label09;

        $r8 = $r1[i21];

        $r7 = r2[i21];

        $z3 = staticinvoke <org.apache.velocity.util.introspection.MethodMap: boolean isConvertible(java.lang.Class,java.lang.Class,boolean)>($r8, $r7, 0);

        if $z3 != 0 goto label08;

        $i12 = lengthof r2;

        $i13 = $i12 - 1;

        if i21 != $i13 goto label07;

        $r9 = $r1[i21];

        $z4 = virtualinvoke $r9.<java.lang.Class: boolean isArray()>();

        if $z4 == 0 goto label07;

        $r11 = $r1[i21];

        $r10 = r2[i21];

        $z5 = staticinvoke <org.apache.velocity.util.introspection.MethodMap: boolean isConvertible(java.lang.Class,java.lang.Class,boolean)>($r11, $r10, 1);

        return $z5;

     label07:
        return 0;

     label08:
        i21 = i21 + 1;

        goto label06;

     label09:
        goto label17;

     label10:
        $i4 = lengthof $r1;

        if $i4 <= 0 goto label17;

        $i5 = lengthof $r1;

        $i6 = $i5 - 1;

        r15 = $r1[$i6];

        $z0 = virtualinvoke r15.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label11;

        return 0;

     label11:
        i22 = 0;

     label12:
        $i7 = lengthof $r1;

        $i8 = $i7 - 1;

        if i22 >= $i8 goto label14;

        $r6 = $r1[i22];

        $r5 = r2[i22];

        $z2 = staticinvoke <org.apache.velocity.util.introspection.MethodMap: boolean isConvertible(java.lang.Class,java.lang.Class,boolean)>($r6, $r5, 0);

        if $z2 != 0 goto label13;

        return 0;

     label13:
        i22 = i22 + 1;

        goto label12;

     label14:
        $r3 = virtualinvoke r15.<java.lang.Class: java.lang.Class getComponentType()>();

        $i9 = lengthof $r1;

        i23 = $i9 - 1;

     label15:
        $i10 = lengthof r2;

        if i23 >= $i10 goto label17;

        $r4 = r2[i23];

        $z1 = staticinvoke <org.apache.velocity.util.introspection.MethodMap: boolean isConvertible(java.lang.Class,java.lang.Class,boolean)>($r3, $r4, 0);

        if $z1 != 0 goto label16;

        return 0;

     label16:
        i23 = i23 + 1;

        goto label15;

     label17:
        return 1;
    }

    private static boolean isConvertible(java.lang.Class, java.lang.Class, boolean)
    {
        java.lang.Class r0, r1;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        $z1 = staticinvoke <org.apache.velocity.util.introspection.IntrospectionUtils: boolean isMethodInvocationConvertible(java.lang.Class,java.lang.Class,boolean)>(r0, r1, z0);

        return $z1;
    }

    private static boolean isStrictConvertible(java.lang.Class, java.lang.Class, boolean)
    {
        java.lang.Class r0, r1;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        $z1 = staticinvoke <org.apache.velocity.util.introspection.IntrospectionUtils: boolean isStrictMethodInvocationConvertible(java.lang.Class,java.lang.Class,boolean)>(r0, r1, z0);

        return $z1;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.velocity.util.introspection.MethodMap: int INCOMPARABLE> = 2;

        <org.apache.velocity.util.introspection.MethodMap: int LESS_SPECIFIC> = 1;

        <org.apache.velocity.util.introspection.MethodMap: int MORE_SPECIFIC> = 0;

        return;
    }
}
