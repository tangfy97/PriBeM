public abstract class org.apache.lucene.analysis.TokenStream extends org.apache.lucene.util.AttributeSource implements java.io.Closeable
{
    static final boolean $assertionsDisabled;

    protected void <init>()
    {
        org.apache.lucene.analysis.TokenStream r0;
        java.lang.AssertionError $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.analysis.TokenStream;

        specialinvoke r0.<org.apache.lucene.util.AttributeSource: void <init>()>();

        $z0 = <org.apache.lucene.analysis.TokenStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<org.apache.lucene.analysis.TokenStream: boolean assertFinal()>();

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    protected void <init>(org.apache.lucene.util.AttributeSource)
    {
        org.apache.lucene.analysis.TokenStream r0;
        org.apache.lucene.util.AttributeSource r1;
        java.lang.AssertionError $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.analysis.TokenStream;

        r1 := @parameter0: org.apache.lucene.util.AttributeSource;

        specialinvoke r0.<org.apache.lucene.util.AttributeSource: void <init>(org.apache.lucene.util.AttributeSource)>(r1);

        $z0 = <org.apache.lucene.analysis.TokenStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<org.apache.lucene.analysis.TokenStream: boolean assertFinal()>();

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    protected void <init>(org.apache.lucene.util.AttributeSource$AttributeFactory)
    {
        org.apache.lucene.analysis.TokenStream r0;
        org.apache.lucene.util.AttributeSource$AttributeFactory r1;
        java.lang.AssertionError $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.analysis.TokenStream;

        r1 := @parameter0: org.apache.lucene.util.AttributeSource$AttributeFactory;

        specialinvoke r0.<org.apache.lucene.util.AttributeSource: void <init>(org.apache.lucene.util.AttributeSource$AttributeFactory)>(r1);

        $z0 = <org.apache.lucene.analysis.TokenStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<org.apache.lucene.analysis.TokenStream: boolean assertFinal()>();

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    private boolean assertFinal()
    {
        org.apache.lucene.analysis.TokenStream r0;
        java.lang.NoSuchMethodException $r5;
        java.lang.Class[] $r2;
        java.lang.AssertionError $r4;
        int $i0, $i1, $i2;
        java.lang.Class $r1;
        java.lang.reflect.Method $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.lucene.analysis.TokenStream;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

     label2:
        return 1;

     label3:
        $z1 = <org.apache.lucene.analysis.TokenStream: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke $r1.<java.lang.Class: boolean isAnonymousClass()>();

        if $z2 != 0 goto label4;

        $i0 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        $i1 = $i0 & 18;

        if $i1 != 0 goto label4;

        $r2 = newarray (java.lang.Class)[0];

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("incrementToken", $r2);

        $i2 = virtualinvoke $r3.<java.lang.reflect.Method: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i2);

        if $z3 != 0 goto label4;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("TokenStream implementation classes or at least their incrementToken() implementation must be final");

        throw $r4;

     label4:
        return 1;

     label5:
        $r5 := @caughtexception;

        return 0;

        catch java.lang.NoSuchMethodException from label1 to label2 with label5;
        catch java.lang.NoSuchMethodException from label3 to label4 with label5;
    }

    public abstract boolean incrementToken() throws java.io.IOException;

    public void end() throws java.io.IOException
    {
        org.apache.lucene.analysis.TokenStream r0;

        r0 := @this: org.apache.lucene.analysis.TokenStream;

        return;
    }

    public void reset() throws java.io.IOException
    {
        org.apache.lucene.analysis.TokenStream r0;

        r0 := @this: org.apache.lucene.analysis.TokenStream;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.lucene.analysis.TokenStream r0;

        r0 := @this: org.apache.lucene.analysis.TokenStream;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/analysis/TokenStream;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.analysis.TokenStream: boolean $assertionsDisabled> = $z1;

        return;
    }
}
