public class org.apache.commons.compress.archivers.zip.AsiExtraField extends java.lang.Object implements org.apache.commons.compress.archivers.zip.ZipExtraField, org.apache.commons.compress.archivers.zip.UnixStat, java.lang.Cloneable
{
    private static final org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID;
    private static final int WORD;
    private int mode;
    private int uid;
    private int gid;
    private java.lang.String link;
    private boolean dirFlag;
    private java.util.zip.CRC32 crc;

    public void <init>()
    {
        java.util.zip.CRC32 $r1;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int mode> = 0;

        r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int uid> = 0;

        r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int gid> = 0;

        r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: java.lang.String link> = "";

        r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: boolean dirFlag> = 0;

        $r1 = new java.util.zip.CRC32;

        specialinvoke $r1.<java.util.zip.CRC32: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: java.util.zip.CRC32 crc> = $r1;

        return;
    }

    public org.apache.commons.compress.archivers.zip.ZipShort getHeaderId()
    {
        org.apache.commons.compress.archivers.zip.ZipShort $r0;
        org.apache.commons.compress.archivers.zip.AsiExtraField r1;

        r1 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        $r0 = <org.apache.commons.compress.archivers.zip.AsiExtraField: org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID>;

        return $r0;
    }

    public org.apache.commons.compress.archivers.zip.ZipShort getLocalFileDataLength()
    {
        byte[] $r3;
        org.apache.commons.compress.archivers.zip.ZipShort $r0;
        int $i0, $i1;
        java.lang.String $r2;
        org.apache.commons.compress.archivers.zip.AsiExtraField r1;

        r1 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        $r0 = new org.apache.commons.compress.archivers.zip.ZipShort;

        $r2 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.AsiExtraField: java.lang.String getLinkedFile()>();

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        $i0 = lengthof $r3;

        $i1 = 14 + $i0;

        specialinvoke $r0.<org.apache.commons.compress.archivers.zip.ZipShort: void <init>(int)>($i1);

        return $r0;
    }

    public org.apache.commons.compress.archivers.zip.ZipShort getCentralDirectoryLength()
    {
        org.apache.commons.compress.archivers.zip.ZipShort $r1;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: org.apache.commons.compress.archivers.zip.ZipShort getLocalFileDataLength()>();

        return $r1;
    }

    public byte[] getLocalFileDataData()
    {
        byte[] r2, $r3, $r5, $r6, $r7, $r8, r12, $r13;
        long $l4, $l8;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i9, $i10, $i11;
        java.lang.String $r4;
        org.apache.commons.compress.archivers.zip.ZipShort $r1;
        java.util.zip.CRC32 $r9, $r10, $r11;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: org.apache.commons.compress.archivers.zip.ZipShort getLocalFileDataLength()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.compress.archivers.zip.ZipShort: int getValue()>();

        $i1 = $i0 - 4;

        r2 = newarray (byte)[$i1];

        $i2 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int getMode()>();

        $r3 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>($i2);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, 2);

        $r4 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: java.lang.String getLinkedFile()>();

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        $i3 = lengthof $r5;

        $l4 = (long) $i3;

        $r6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l4);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, 2, 4);

        $i5 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int getUserId()>();

        $r7 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>($i5);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r2, 6, 2);

        $i6 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int getGroupId()>();

        $r8 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: byte[] getBytes(int)>($i6);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r2, 8, 2);

        $i7 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r2, 10, $i7);

        $r9 = r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: java.util.zip.CRC32 crc>;

        virtualinvoke $r9.<java.util.zip.CRC32: void reset()>();

        $r10 = r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: java.util.zip.CRC32 crc>;

        virtualinvoke $r10.<java.util.zip.CRC32: void update(byte[])>(r2);

        $r11 = r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: java.util.zip.CRC32 crc>;

        $l8 = virtualinvoke $r11.<java.util.zip.CRC32: long getValue()>();

        $i9 = lengthof r2;

        $i10 = $i9 + 4;

        r12 = newarray (byte)[$i10];

        $r13 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: byte[] getBytes(long)>($l8);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, r12, 0, 4);

        $i11 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r12, 4, $i11);

        return r12;
    }

    public byte[] getCentralDirectoryData()
    {
        byte[] $r1;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: byte[] getLocalFileDataData()>();

        return $r1;
    }

    public void setUserId(int)
    {
        int i0;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        i0 := @parameter0: int;

        r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int uid> = i0;

        return;
    }

    public int getUserId()
    {
        int $i0;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        $i0 = r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int uid>;

        return $i0;
    }

    public void setGroupId(int)
    {
        int i0;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        i0 := @parameter0: int;

        r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int gid> = i0;

        return;
    }

    public int getGroupId()
    {
        int $i0;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        $i0 = r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int gid>;

        return $i0;
    }

    public void setLinkedFile(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r1;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: java.lang.String link> = r1;

        $i0 = r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int mode>;

        $i1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int getMode(int)>($i0);

        r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int mode> = $i1;

        return;
    }

    public java.lang.String getLinkedFile()
    {
        java.lang.String $r1;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: java.lang.String link>;

        return $r1;
    }

    public boolean isLink()
    {
        int $i0;
        java.lang.String $r1;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: java.lang.String getLinkedFile()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setMode(int)
    {
        int i0, $i1;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int getMode(int)>(i0);

        r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int mode> = $i1;

        return;
    }

    public int getMode()
    {
        int $i0;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        $i0 = r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int mode>;

        return $i0;
    }

    public void setDirectory(boolean)
    {
        int $i0, $i1;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: boolean dirFlag> = z0;

        $i0 = r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int mode>;

        $i1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int getMode(int)>($i0);

        r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: int mode> = $i1;

        return;
    }

    public boolean isDirectory()
    {
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: boolean dirFlag>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: boolean isLink()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void parseFromLocalFileData(byte[], int, int) throws java.util.zip.ZipException
    {
        byte[] r0, r1, r6;
        byte $b7;
        boolean $z0;
        java.util.zip.ZipException $r8;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r15;
        long $l1, $l6, $l9;
        org.apache.commons.compress.archivers.zip.AsiExtraField r2;
        int i0, i2, $i3, $i4, $i5, $i8, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String $r7, $r11, $r14, $r16;
        java.util.zip.CRC32 $r3, $r4, $r5;

        r2 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        $l1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: long getValue(byte[],int)>(r0, i0);

        $i3 = i2 - 4;

        r1 = newarray (byte)[$i3];

        $i5 = i0 + 4;

        $i4 = i2 - 4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i5, r1, 0, $i4);

        $r3 = r2.<org.apache.commons.compress.archivers.zip.AsiExtraField: java.util.zip.CRC32 crc>;

        virtualinvoke $r3.<java.util.zip.CRC32: void reset()>();

        $r4 = r2.<org.apache.commons.compress.archivers.zip.AsiExtraField: java.util.zip.CRC32 crc>;

        virtualinvoke $r4.<java.util.zip.CRC32: void update(byte[])>(r1);

        $r5 = r2.<org.apache.commons.compress.archivers.zip.AsiExtraField: java.util.zip.CRC32 crc>;

        $l6 = virtualinvoke $r5.<java.util.zip.CRC32: long getValue()>();

        $b7 = $l1 cmp $l6;

        if $b7 == 0 goto label1;

        $r8 = new java.util.zip.ZipException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad CRC checksum ");

        $r11 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead of ");

        $r14 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l6);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.util.zip.ZipException: void <init>(java.lang.String)>($r16);

        throw $r8;

     label1:
        $i8 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[],int)>(r1, 0);

        $l9 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: long getValue(byte[],int)>(r1, 2);

        $i10 = (int) $l9;

        r6 = newarray (byte)[$i10];

        $i11 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[],int)>(r1, 6);

        r2.<org.apache.commons.compress.archivers.zip.AsiExtraField: int uid> = $i11;

        $i12 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[],int)>(r1, 8);

        r2.<org.apache.commons.compress.archivers.zip.AsiExtraField: int gid> = $i12;

        $i13 = lengthof r6;

        if $i13 != 0 goto label2;

        r2.<org.apache.commons.compress.archivers.zip.AsiExtraField: java.lang.String link> = "";

        goto label3;

     label2:
        $i14 = lengthof r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 10, r6, 0, $i14);

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(byte[])>(r6);

        r2.<org.apache.commons.compress.archivers.zip.AsiExtraField: java.lang.String link> = $r7;

     label3:
        $i15 = $i8 & 16384;

        if $i15 == 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        virtualinvoke r2.<org.apache.commons.compress.archivers.zip.AsiExtraField: void setDirectory(boolean)>($z0);

        virtualinvoke r2.<org.apache.commons.compress.archivers.zip.AsiExtraField: void setMode(int)>($i8);

        return;
    }

    public void parseFromCentralDirectoryData(byte[], int, int) throws java.util.zip.ZipException
    {
        byte[] r1;
        int i0, i1;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: void parseFromLocalFileData(byte[],int,int)>(r1, i0, i1);

        return;
    }

    protected int getMode(int)
    {
        int i0, i1, $i2, $i3;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

        i0 := @parameter0: int;

        i1 = 32768;

        $z0 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: boolean isLink()>();

        if $z0 == 0 goto label1;

        i1 = 40960;

        goto label2;

     label1:
        $z1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.AsiExtraField: boolean isDirectory()>();

        if $z1 == 0 goto label2;

        i1 = 16384;

     label2:
        $i2 = i0 & 4095;

        $i3 = i1 | $i2;

        return $i3;
    }

    public java.lang.Object clone()
    {
        java.util.zip.CRC32 $r2;
        java.lang.Object $r1;
        java.lang.RuntimeException $r4;
        org.apache.commons.compress.archivers.zip.AsiExtraField r0, r5;
        java.lang.CloneNotSupportedException $r3;

        r0 := @this: org.apache.commons.compress.archivers.zip.AsiExtraField;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r5 = (org.apache.commons.compress.archivers.zip.AsiExtraField) $r1;

        $r2 = new java.util.zip.CRC32;

        specialinvoke $r2.<java.util.zip.CRC32: void <init>()>();

        r5.<org.apache.commons.compress.archivers.zip.AsiExtraField: java.util.zip.CRC32 crc> = $r2;

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.commons.compress.archivers.zip.ZipShort $r0;

        <org.apache.commons.compress.archivers.zip.AsiExtraField: int WORD> = 4;

        $r0 = new org.apache.commons.compress.archivers.zip.ZipShort;

        specialinvoke $r0.<org.apache.commons.compress.archivers.zip.ZipShort: void <init>(int)>(30062);

        <org.apache.commons.compress.archivers.zip.AsiExtraField: org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID> = $r0;

        return;
    }
}
