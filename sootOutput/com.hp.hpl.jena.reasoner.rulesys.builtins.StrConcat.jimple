public class com.hp.hpl.jena.reasoner.rulesys.builtins.StrConcat extends com.hp.hpl.jena.reasoner.rulesys.builtins.BaseBuiltin
{

    public void <init>()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.StrConcat r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.StrConcat;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.BaseBuiltin: void <init>()>();

        return;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.StrConcat r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.StrConcat;

        return "strConcat";
    }

    public int getArgLength()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.StrConcat r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.StrConcat;

        return 0;
    }

    public boolean bodyCall(com.hp.hpl.jena.graph.Node[], int, com.hp.hpl.jena.reasoner.rulesys.RuleContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r3;
        com.hp.hpl.jena.graph.Node $r2, $r6, $r8;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment $r4;
        com.hp.hpl.jena.reasoner.rulesys.BuiltinException $r10;
        java.lang.StringBuffer $r0;
        int i0, $i1, $i2, i3;
        java.lang.String $r1, $r9, $r13, $r15;
        boolean $z0;
        com.hp.hpl.jena.graph.Node[] r5;
        com.hp.hpl.jena.reasoner.rulesys.builtins.StrConcat r7;
        java.lang.StringBuilder $r11, $r12, $r14;

        r7 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.StrConcat;

        r5 := @parameter0: com.hp.hpl.jena.graph.Node[];

        i0 := @parameter1: int;

        r3 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        if i0 >= 1 goto label1;

        $r10 = new com.hp.hpl.jena.reasoner.rulesys.BuiltinException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must have at least 1 argument to ");

        $r13 = virtualinvoke r7.<com.hp.hpl.jena.reasoner.rulesys.builtins.StrConcat: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.hp.hpl.jena.reasoner.rulesys.BuiltinException: void <init>(com.hp.hpl.jena.reasoner.rulesys.Builtin,com.hp.hpl.jena.reasoner.rulesys.RuleContext,java.lang.String)>(r7, r3, $r15);

        throw $r10;

     label1:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i3 = 0;

     label2:
        $i1 = i0 - 1;

        if i3 >= $i1 goto label3;

        $r8 = virtualinvoke r7.<com.hp.hpl.jena.reasoner.rulesys.builtins.StrConcat: com.hp.hpl.jena.graph.Node getArg(int,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(i3, r5, r3);

        $r9 = virtualinvoke r7.<com.hp.hpl.jena.reasoner.rulesys.builtins.StrConcat: java.lang.String lex(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>($r8, r3);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        i3 = i3 + 1;

        goto label2;

     label3:
        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String)>($r1);

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.RuleContext: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment getEnv()>();

        $i2 = i0 - 1;

        $r6 = r5[$i2];

        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment: boolean bind(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r6, $r2);

        return $z0;
    }

    protected java.lang.String lex(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.reasoner.rulesys.RuleContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r3;
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.reasoner.rulesys.BuiltinException $r1;
        com.hp.hpl.jena.reasoner.rulesys.builtins.StrConcat r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.StrConcat;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getBlankNodeLabel()>();

        return $r10;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 == 0 goto label2;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        return $r9;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label3;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        return $r8;

     label3:
        $r1 = new com.hp.hpl.jena.reasoner.rulesys.BuiltinException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal node type: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.BuiltinException: void <init>(com.hp.hpl.jena.reasoner.rulesys.Builtin,com.hp.hpl.jena.reasoner.rulesys.RuleContext,java.lang.String)>(r2, r3, $r7);

        throw $r1;
    }
}
