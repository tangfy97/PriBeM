final class kodkod.instance.TupleFactory$IntTuple extends kodkod.instance.Tuple
{
    private final int arity;
    private final int index;
    final kodkod.instance.TupleFactory this$0;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/instance/TupleFactory$IntTuple;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.instance.TupleFactory$IntTuple: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(kodkod.instance.TupleFactory, int, int)
    {
        kodkod.instance.TupleFactory$IntTuple r0;
        java.lang.IllegalArgumentException $r3;
        byte $b3;
        int i0, i1, $i2, $i4;
        kodkod.instance.TupleFactory r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: kodkod.instance.TupleFactory$IntTuple;

        r1 := @parameter0: kodkod.instance.TupleFactory;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<kodkod.instance.TupleFactory$IntTuple: kodkod.instance.TupleFactory this$0> = r1;

        specialinvoke r0.<kodkod.instance.Tuple: void <init>()>();

        virtualinvoke r1.<kodkod.instance.TupleFactory: void checkCapacity(int)>(i0);

        if i0 < 1 goto label1;

        if i1 < 0 goto label1;

        $d0 = (double) i1;

        $i2 = staticinvoke <kodkod.instance.TupleFactory: int access$0(kodkod.instance.TupleFactory)>(r1);

        $d2 = (double) $i2;

        $d1 = (double) i0;

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>($d2, $d1);

        $b3 = $d0 cmpl $d3;

        $i4 = (int) $b3;

        if $i4 < 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("arity < 1 || index < 0 || index >= universe.size^arity");

        throw $r3;

     label2:
        r0.<kodkod.instance.TupleFactory$IntTuple: int arity> = i0;

        r0.<kodkod.instance.TupleFactory$IntTuple: int index> = i1;

        return;
    }

    transient void <init>(kodkod.instance.TupleFactory, java.lang.Object[])
    {
        java.lang.Object[] r2;
        java.lang.AssertionError $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i11;
        kodkod.instance.Universe $r3;
        kodkod.instance.TupleFactory r1;
        boolean $z0;
        kodkod.instance.TupleFactory$IntTuple r0;
        java.lang.Object $r4;

        r0 := @this: kodkod.instance.TupleFactory$IntTuple;

        r1 := @parameter0: kodkod.instance.TupleFactory;

        r2 := @parameter1: java.lang.Object[];

        r0.<kodkod.instance.TupleFactory$IntTuple: kodkod.instance.TupleFactory this$0> = r1;

        specialinvoke r0.<kodkod.instance.Tuple: void <init>()>();

        $i0 = lengthof r2;

        r0.<kodkod.instance.TupleFactory$IntTuple: int arity> = $i0;

        $i1 = r0.<kodkod.instance.TupleFactory$IntTuple: int arity>;

        virtualinvoke r1.<kodkod.instance.TupleFactory: void checkCapacity(int)>($i1);

        i7 = 0;

        i8 = 1;

        $i2 = r0.<kodkod.instance.TupleFactory$IntTuple: int arity>;

        i9 = $i2 - 1;

        goto label2;

     label1:
        $r3 = staticinvoke <kodkod.instance.TupleFactory: kodkod.instance.Universe access$1(kodkod.instance.TupleFactory)>(r1);

        $r4 = r2[i9];

        $i3 = virtualinvoke $r3.<kodkod.instance.Universe: int index(java.lang.Object)>($r4);

        $i4 = $i3 * i8;

        i7 = i7 + $i4;

        $i5 = staticinvoke <kodkod.instance.TupleFactory: int access$0(kodkod.instance.TupleFactory)>(r1);

        i8 = i8 * $i5;

        $i11 = (int) -1;

        i9 = i9 + $i11;

     label2:
        if i9 >= 0 goto label1;

        r0.<kodkod.instance.TupleFactory$IntTuple: int index> = i7;

        $z0 = <kodkod.instance.TupleFactory$IntTuple: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $i6 = r0.<kodkod.instance.TupleFactory$IntTuple: int index>;

        if $i6 >= 0 goto label3;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label3:
        return;
    }

    void <init>(kodkod.instance.TupleFactory, int, java.lang.Object)
    {
        kodkod.instance.TupleFactory$IntTuple r0;
        java.lang.AssertionError $r4;
        java.lang.IllegalArgumentException $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.Object r3;
        kodkod.instance.Universe $r2;
        kodkod.instance.TupleFactory r1;
        boolean $z0;

        r0 := @this: kodkod.instance.TupleFactory$IntTuple;

        r1 := @parameter0: kodkod.instance.TupleFactory;

        i0 := @parameter1: int;

        r3 := @parameter2: java.lang.Object;

        r0.<kodkod.instance.TupleFactory$IntTuple: kodkod.instance.TupleFactory this$0> = r1;

        specialinvoke r0.<kodkod.instance.Tuple: void <init>()>();

        virtualinvoke r1.<kodkod.instance.TupleFactory: void checkCapacity(int)>(i0);

        if i0 >= 1 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("arity < 1");

        throw $r5;

     label1:
        r0.<kodkod.instance.TupleFactory$IntTuple: int arity> = i0;

        i6 = 1;

        i7 = 0;

        goto label3;

     label2:
        $i1 = staticinvoke <kodkod.instance.TupleFactory: int access$0(kodkod.instance.TupleFactory)>(r1);

        $i2 = i6 * $i1;

        i6 = $i2 + 1;

        i7 = i7 + 1;

     label3:
        if i7 < i0 goto label2;

        $r2 = staticinvoke <kodkod.instance.TupleFactory: kodkod.instance.Universe access$1(kodkod.instance.TupleFactory)>(r1);

        $i3 = virtualinvoke $r2.<kodkod.instance.Universe: int index(java.lang.Object)>(r3);

        $i4 = $i3 * i6;

        r0.<kodkod.instance.TupleFactory$IntTuple: int index> = $i4;

        $z0 = <kodkod.instance.TupleFactory$IntTuple: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $i5 = r0.<kodkod.instance.TupleFactory$IntTuple: int index>;

        if $i5 >= 0 goto label4;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        return;
    }

    public kodkod.instance.Universe universe()
    {
        kodkod.instance.TupleFactory$IntTuple r0;
        kodkod.instance.Universe $r2;
        kodkod.instance.TupleFactory $r1;

        r0 := @this: kodkod.instance.TupleFactory$IntTuple;

        $r1 = r0.<kodkod.instance.TupleFactory$IntTuple: kodkod.instance.TupleFactory this$0>;

        $r2 = staticinvoke <kodkod.instance.TupleFactory: kodkod.instance.Universe access$1(kodkod.instance.TupleFactory)>($r1);

        return $r2;
    }

    public int arity()
    {
        int $i0;
        kodkod.instance.TupleFactory$IntTuple r0;

        r0 := @this: kodkod.instance.TupleFactory$IntTuple;

        $i0 = r0.<kodkod.instance.TupleFactory$IntTuple: int arity>;

        return $i0;
    }

    public int index()
    {
        int $i0;
        kodkod.instance.TupleFactory$IntTuple r0;

        r0 := @this: kodkod.instance.TupleFactory$IntTuple;

        $i0 = r0.<kodkod.instance.TupleFactory$IntTuple: int index>;

        return $i0;
    }

    public java.lang.Object atom(int)
    {
        int i0, $i1;
        kodkod.instance.TupleFactory$IntTuple r0;
        java.lang.Object $r3;
        kodkod.instance.Universe $r2;
        kodkod.instance.TupleFactory $r1;

        r0 := @this: kodkod.instance.TupleFactory$IntTuple;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.instance.TupleFactory$IntTuple: kodkod.instance.TupleFactory this$0>;

        $r2 = staticinvoke <kodkod.instance.TupleFactory: kodkod.instance.Universe access$1(kodkod.instance.TupleFactory)>($r1);

        $i1 = virtualinvoke r0.<kodkod.instance.TupleFactory$IntTuple: int atomIndex(int)>(i0);

        $r3 = virtualinvoke $r2.<kodkod.instance.Universe: java.lang.Object atom(int)>($i1);

        return $r3;
    }

    public int atomIndex(int)
    {
        int i0, $i1, $i2, $i3;
        kodkod.instance.TupleFactory$IntTuple r0;
        kodkod.instance.TupleFactory $r1;

        r0 := @this: kodkod.instance.TupleFactory$IntTuple;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.instance.TupleFactory$IntTuple: kodkod.instance.TupleFactory this$0>;

        $i2 = r0.<kodkod.instance.TupleFactory$IntTuple: int index>;

        $i1 = r0.<kodkod.instance.TupleFactory$IntTuple: int arity>;

        $i3 = virtualinvoke $r1.<kodkod.instance.TupleFactory: int project(int,int,int)>($i2, $i1, i0);

        return $i3;
    }

    public boolean contains(java.lang.Object)
    {
        kodkod.instance.TupleFactory$IntTuple r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object r3;
        kodkod.instance.Universe $r2;
        kodkod.instance.TupleFactory $r1, $r4, $r5;

        r0 := @this: kodkod.instance.TupleFactory$IntTuple;

        r3 := @parameter0: java.lang.Object;

        i4 = r0.<kodkod.instance.TupleFactory$IntTuple: int index>;

        $r1 = r0.<kodkod.instance.TupleFactory$IntTuple: kodkod.instance.TupleFactory this$0>;

        $r2 = staticinvoke <kodkod.instance.TupleFactory: kodkod.instance.Universe access$1(kodkod.instance.TupleFactory)>($r1);

        $i0 = virtualinvoke $r2.<kodkod.instance.Universe: int index(java.lang.Object)>(r3);

        goto label3;

     label1:
        $r4 = r0.<kodkod.instance.TupleFactory$IntTuple: kodkod.instance.TupleFactory this$0>;

        $i1 = staticinvoke <kodkod.instance.TupleFactory: int access$0(kodkod.instance.TupleFactory)>($r4);

        $i2 = i4 % $i1;

        if $i2 != $i0 goto label2;

        return 1;

     label2:
        $r5 = r0.<kodkod.instance.TupleFactory$IntTuple: kodkod.instance.TupleFactory this$0>;

        $i3 = staticinvoke <kodkod.instance.TupleFactory: int access$0(kodkod.instance.TupleFactory)>($r5);

        i4 = i4 / $i3;

     label3:
        if i4 > 0 goto label1;

        return 0;
    }

    public kodkod.instance.Tuple product(kodkod.instance.Tuple)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        kodkod.instance.Universe $r2, $r4;
        kodkod.instance.TupleFactory $r1, $r6, $r7;
        boolean $z0;
        double $d0, $d1, $d2;
        kodkod.instance.Tuple r3;
        kodkod.instance.TupleFactory$IntTuple r0, $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: kodkod.instance.TupleFactory$IntTuple;

        r3 := @parameter0: kodkod.instance.Tuple;

        $r1 = r0.<kodkod.instance.TupleFactory$IntTuple: kodkod.instance.TupleFactory this$0>;

        $r2 = staticinvoke <kodkod.instance.TupleFactory: kodkod.instance.Universe access$1(kodkod.instance.TupleFactory)>($r1);

        $r4 = virtualinvoke r3.<kodkod.instance.Tuple: kodkod.instance.Universe universe()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("tuple.universe != this.universe");

        throw $r8;

     label1:
        $r5 = new kodkod.instance.TupleFactory$IntTuple;

        $r6 = r0.<kodkod.instance.TupleFactory$IntTuple: kodkod.instance.TupleFactory this$0>;

        $i0 = r0.<kodkod.instance.TupleFactory$IntTuple: int arity>;

        $i1 = virtualinvoke r3.<kodkod.instance.Tuple: int arity()>();

        $i2 = $i0 + $i1;

        $i3 = r0.<kodkod.instance.TupleFactory$IntTuple: int index>;

        $r7 = r0.<kodkod.instance.TupleFactory$IntTuple: kodkod.instance.TupleFactory this$0>;

        $i4 = staticinvoke <kodkod.instance.TupleFactory: int access$0(kodkod.instance.TupleFactory)>($r7);

        $d0 = (double) $i4;

        $i5 = virtualinvoke r3.<kodkod.instance.Tuple: int arity()>();

        $d1 = (double) $i5;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, $d1);

        $i6 = (int) $d2;

        $i7 = $i3 * $i6;

        $i8 = virtualinvoke r3.<kodkod.instance.Tuple: int index()>();

        $i9 = $i7 + $i8;

        specialinvoke $r5.<kodkod.instance.TupleFactory$IntTuple: void <init>(kodkod.instance.TupleFactory,int,int)>($r6, $i2, $i9);

        return $r5;
    }
}
