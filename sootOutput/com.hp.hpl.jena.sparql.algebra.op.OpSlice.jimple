public class com.hp.hpl.jena.sparql.algebra.op.OpSlice extends com.hp.hpl.jena.sparql.algebra.op.OpModifier
{
    private long start;
    private long length;

    public void <init>(com.hp.hpl.jena.sparql.algebra.Op, long, long)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSlice r0;
        long l0, l1;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpModifier: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long start> = l0;

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long length> = l1;

        return;
    }

    public long getLength()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSlice r0;
        long $l0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        $l0 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long length>;

        return $l0;
    }

    public long getStart()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSlice r0;
        long $l0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        $l0 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long start>;

        return $l0;
    }

    public com.hp.hpl.jena.sparql.algebra.Op copy()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSlice r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        return null;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSlice r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        return "slice";
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSlice r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitor: void visit(com.hp.hpl.jena.sparql.algebra.op.OpSlice)>(r1);

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.op.Op1 copy(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSlice $r0, r2;
        long $l0, $l1;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        $l1 = r2.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long start>;

        $l0 = r2.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long length>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: void <init>(com.hp.hpl.jena.sparql.algebra.Op,long,long)>(r1, $l1, $l0);

        return $r0;
    }

    public com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSlice r1;
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpSlice,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSlice r0;
        long $l1, $l2, $l4, $l5;
        int $i0, $i3, $i6, $i7, $i8;
        com.hp.hpl.jena.sparql.algebra.Op $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $l1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long start>;

        $l2 = $l1 & -1L;

        $i3 = (int) $l2;

        $i7 = $i0 ^ $i3;

        $l4 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long length>;

        $l5 = $l4 & -1L;

        $i6 = (int) $l5;

        $i8 = $i7 ^ $i6;

        return $i8;
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSlice r1, r2;
        long $l0, $l1, $l3, $l4;
        byte $b2, $b5;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r5;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r3, $r4;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r5 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.algebra.op.OpSlice) r0;

        $l1 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long start>;

        $l0 = r2.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long start>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label2;

        $l4 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long length>;

        $l3 = r2.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long length>;

        $b5 = $l4 cmp $l3;

        if $b5 == 0 goto label3;

     label2:
        return 0;

     label3:
        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z1 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Op: boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r4, r5);

        return $z1;
    }
}
