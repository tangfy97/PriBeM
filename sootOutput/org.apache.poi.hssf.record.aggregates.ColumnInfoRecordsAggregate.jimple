public final class org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate extends org.apache.poi.hssf.record.aggregates.RecordAggregate
{
    private final java.util.List records;

    public void <init>()
    {
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        specialinvoke r0.<org.apache.poi.hssf.record.aggregates.RecordAggregate: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records> = $r1;

        return;
    }

    public void <init>(org.apache.poi.hssf.model.RecordStream)
    {
        org.apache.poi.hssf.record.Record $r7;
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        org.apache.poi.hssf.model.RecordStream r1;
        java.lang.RuntimeException $r6;
        java.util.List $r3, $r5, $r9;
        int $i0, $i1;
        java.lang.Class $r2;
        org.apache.poi.hssf.record.ColumnInfoRecord r8, r10;
        java.util.Comparator $r4;
        boolean z0;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        r1 := @parameter0: org.apache.poi.hssf.model.RecordStream;

        specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: void <init>()>();

        z0 = 1;

        r10 = null;

     label1:
        $r2 = virtualinvoke r1.<org.apache.poi.hssf.model.RecordStream: java.lang.Class peekNextClass()>();

        if $r2 != class "Lorg/apache/poi/hssf/record/ColumnInfoRecord;" goto label3;

        $r7 = virtualinvoke r1.<org.apache.poi.hssf.model.RecordStream: org.apache.poi.hssf.record.Record getNext()>();

        r8 = (org.apache.poi.hssf.record.ColumnInfoRecord) $r7;

        $r9 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r8);

        if r10 == null goto label2;

        $i1 = staticinvoke <org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate$CIRComparator: int compareColInfos(org.apache.poi.hssf.record.ColumnInfoRecord,org.apache.poi.hssf.record.ColumnInfoRecord)>(r10, r8);

        if $i1 <= 0 goto label2;

        z0 = 0;

     label2:
        r10 = r8;

        goto label1;

     label3:
        $r3 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 >= 1 goto label4;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("No column info records found");

        throw $r6;

     label4:
        if z0 != 0 goto label5;

        $r5 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $r4 = <org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate$CIRComparator: java.util.Comparator instance>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r5, $r4);

     label5:
        return;
    }

    public java.lang.Object clone()
    {
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate $r0, r1;
        java.util.List $r2, $r3, $r6;
        int $i0, i1;
        java.lang.Object $r4, $r7;
        org.apache.poi.hssf.record.ColumnInfoRecord r5;

        r1 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        $r0 = new org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        specialinvoke $r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: void <init>()>();

        i1 = 0;

     label1:
        $r2 = r1.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r3 = r1.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (org.apache.poi.hssf.record.ColumnInfoRecord) $r4;

        $r6 = $r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $r7 = virtualinvoke r5.<org.apache.poi.hssf.record.ColumnInfoRecord: java.lang.Object clone()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public void insertColumn(org.apache.poi.hssf.record.ColumnInfoRecord)
    {
        java.util.List $r2, $r4;
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        org.apache.poi.hssf.record.ColumnInfoRecord r1;
        java.util.Comparator $r3;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        r1 := @parameter0: org.apache.poi.hssf.record.ColumnInfoRecord;

        $r2 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r4 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $r3 = <org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate$CIRComparator: java.util.Comparator instance>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r4, $r3);

        return;
    }

    private void insertColumn(int, org.apache.poi.hssf.record.ColumnInfoRecord)
    {
        java.util.List $r2;
        int i0;
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        org.apache.poi.hssf.record.ColumnInfoRecord r1;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.poi.hssf.record.ColumnInfoRecord;

        $r2 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(i0, r1);

        return;
    }

    int getNumColumns()
    {
        int $i0;
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        java.util.List $r1;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        $r1 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public void visitContainedRecords(org.apache.poi.hssf.record.aggregates.RecordAggregate$RecordVisitor)
    {
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        java.lang.RuntimeException $r6;
        java.util.List $r1, $r2;
        org.apache.poi.hssf.record.aggregates.RecordAggregate$RecordVisitor r5;
        int $i0, $i1, i2;
        java.lang.Object $r3;
        org.apache.poi.hssf.record.ColumnInfoRecord r4, r7;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        r5 := @parameter0: org.apache.poi.hssf.record.aggregates.RecordAggregate$RecordVisitor;

        $r1 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 >= 1 goto label1;

        return;

     label1:
        r7 = null;

        i2 = 0;

     label2:
        if i2 >= $i0 goto label4;

        $r2 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i2);

        r4 = (org.apache.poi.hssf.record.ColumnInfoRecord) $r3;

        interfaceinvoke r5.<org.apache.poi.hssf.record.aggregates.RecordAggregate$RecordVisitor: void visitRecord(org.apache.poi.hssf.record.Record)>(r4);

        if r7 == null goto label3;

        $i1 = staticinvoke <org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate$CIRComparator: int compareColInfos(org.apache.poi.hssf.record.ColumnInfoRecord,org.apache.poi.hssf.record.ColumnInfoRecord)>(r7, r4);

        if $i1 <= 0 goto label3;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Column info records are out of order");

        throw $r6;

     label3:
        r7 = r4;

        i2 = i2 + 1;

        goto label2;

     label4:
        return;
    }

    private int findStartOfColumnOutlineGroup(int)
    {
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        java.util.List $r1, $r3;
        int i0, $i1, $i2, $i3, i4, $i6;
        java.lang.Object $r2, $r4;
        org.apache.poi.hssf.record.ColumnInfoRecord r5, r6;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r6 = (org.apache.poi.hssf.record.ColumnInfoRecord) $r2;

        $i1 = virtualinvoke r6.<org.apache.poi.hssf.record.ColumnInfoRecord: int getOutlineLevel()>();

        i4 = i0;

     label1:
        if i4 == 0 goto label4;

        $r3 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $i2 = i4 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i2);

        r5 = (org.apache.poi.hssf.record.ColumnInfoRecord) $r4;

        $z0 = virtualinvoke r5.<org.apache.poi.hssf.record.ColumnInfoRecord: boolean isAdjacentBefore(org.apache.poi.hssf.record.ColumnInfoRecord)>(r6);

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        $i3 = virtualinvoke r5.<org.apache.poi.hssf.record.ColumnInfoRecord: int getOutlineLevel()>();

        if $i3 >= $i1 goto label3;

        goto label4;

     label3:
        $i6 = (int) -1;

        i4 = i4 + $i6;

        r6 = r5;

        goto label1;

     label4:
        return i4;
    }

    private int findEndOfColumnOutlineGroup(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        boolean $z0;
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        java.util.List $r1, $r3, $r4;
        java.lang.Object $r2, $r5;
        org.apache.poi.hssf.record.ColumnInfoRecord r6, r7;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r7 = (org.apache.poi.hssf.record.ColumnInfoRecord) $r2;

        $i1 = virtualinvoke r7.<org.apache.poi.hssf.record.ColumnInfoRecord: int getOutlineLevel()>();

        i6 = i0;

     label1:
        $r3 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        if i6 >= $i3 goto label4;

        $r4 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $i4 = i6 + 1;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i4);

        r6 = (org.apache.poi.hssf.record.ColumnInfoRecord) $r5;

        $z0 = virtualinvoke r7.<org.apache.poi.hssf.record.ColumnInfoRecord: boolean isAdjacentBefore(org.apache.poi.hssf.record.ColumnInfoRecord)>(r6);

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        $i5 = virtualinvoke r6.<org.apache.poi.hssf.record.ColumnInfoRecord: int getOutlineLevel()>();

        if $i5 >= $i1 goto label3;

        goto label4;

     label3:
        i6 = i6 + 1;

        r7 = r6;

        goto label1;

     label4:
        return i6;
    }

    private org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)
    {
        java.util.List $r1;
        int i0;
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        java.lang.Object $r2;
        org.apache.poi.hssf.record.ColumnInfoRecord $r3;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.apache.poi.hssf.record.ColumnInfoRecord) $r2;

        return $r3;
    }

    private boolean isColumnGroupCollapsed(int)
    {
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        java.util.List $r1;
        int i0, $i1, i2, $i3;
        org.apache.poi.hssf.record.ColumnInfoRecord $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: int findEndOfColumnOutlineGroup(int)>(i0);

        i2 = $i1 + 1;

        $r1 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $i3 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i2 < $i3 goto label1;

        return 0;

     label1:
        $r2 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>(i2);

        $r3 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>($i1);

        $z0 = virtualinvoke $r3.<org.apache.poi.hssf.record.ColumnInfoRecord: boolean isAdjacentBefore(org.apache.poi.hssf.record.ColumnInfoRecord)>($r2);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $z1 = virtualinvoke $r2.<org.apache.poi.hssf.record.ColumnInfoRecord: boolean getCollapsed()>();

        return $z1;
    }

    private boolean isColumnGroupHiddenByParent(int)
    {
        int i0, $i1, $i2, $i3, $i4, i5, i6, $i7;
        boolean $z0, $z1, z2, z3;
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        java.util.List $r1;
        org.apache.poi.hssf.record.ColumnInfoRecord $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        i0 := @parameter0: int;

        i5 = 0;

        z2 = 0;

        $i1 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: int findEndOfColumnOutlineGroup(int)>(i0);

        $r1 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i1 >= $i2 goto label1;

        $i4 = $i1 + 1;

        $r4 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>($i4);

        $r5 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>($i1);

        $z1 = virtualinvoke $r5.<org.apache.poi.hssf.record.ColumnInfoRecord: boolean isAdjacentBefore(org.apache.poi.hssf.record.ColumnInfoRecord)>($r4);

        if $z1 == 0 goto label1;

        i5 = virtualinvoke $r4.<org.apache.poi.hssf.record.ColumnInfoRecord: int getOutlineLevel()>();

        z2 = virtualinvoke $r4.<org.apache.poi.hssf.record.ColumnInfoRecord: boolean getHidden()>();

     label1:
        i6 = 0;

        z3 = 0;

        $i7 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: int findStartOfColumnOutlineGroup(int)>(i0);

        if $i7 <= 0 goto label2;

        $i3 = $i7 - 1;

        $r2 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>($i3);

        $r3 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>($i7);

        $z0 = virtualinvoke $r2.<org.apache.poi.hssf.record.ColumnInfoRecord: boolean isAdjacentBefore(org.apache.poi.hssf.record.ColumnInfoRecord)>($r3);

        if $z0 == 0 goto label2;

        i6 = virtualinvoke $r2.<org.apache.poi.hssf.record.ColumnInfoRecord: int getOutlineLevel()>();

        z3 = virtualinvoke $r2.<org.apache.poi.hssf.record.ColumnInfoRecord: boolean getHidden()>();

     label2:
        if i5 <= i6 goto label3;

        return z2;

     label3:
        return z3;
    }

    public void collapseColumn(int)
    {
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7;
        java.lang.Boolean $r2;
        org.apache.poi.hssf.record.ColumnInfoRecord $r1;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: int findColInfoIdx(int,int)>(i0, 0);

        $i7 = (int) -1;

        if $i1 != $i7 goto label1;

        return;

     label1:
        $i2 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: int findStartOfColumnOutlineGroup(int)>($i1);

        $r1 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>($i2);

        $i3 = virtualinvoke $r1.<org.apache.poi.hssf.record.ColumnInfoRecord: int getOutlineLevel()>();

        $i4 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: int setGroupHidden(int,int,boolean)>($i2, $i3, 1);

        $i5 = $i4 + 1;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: void setColumn(int,java.lang.Short,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean)>($i5, null, null, null, null, $r2);

        return;
    }

    private int setGroupHidden(int, int, boolean)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8;
        boolean z0, $z1;
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        java.util.List $r1, $r2;
        org.apache.poi.hssf.record.ColumnInfoRecord $r3, r4;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        i0 := @parameter0: int;

        i6 := @parameter1: int;

        z0 := @parameter2: boolean;

        i7 = i0;

        r4 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>(i0);

     label1:
        $r1 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i7 >= $i1 goto label5;

        virtualinvoke r4.<org.apache.poi.hssf.record.ColumnInfoRecord: void setHidden(boolean)>(z0);

        $i2 = i7 + 1;

        $r2 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $i3 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i2 >= $i3 goto label4;

        $i4 = i7 + 1;

        $r3 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>($i4);

        $z1 = virtualinvoke r4.<org.apache.poi.hssf.record.ColumnInfoRecord: boolean isAdjacentBefore(org.apache.poi.hssf.record.ColumnInfoRecord)>($r3);

        if $z1 != 0 goto label2;

        goto label5;

     label2:
        $i5 = virtualinvoke $r3.<org.apache.poi.hssf.record.ColumnInfoRecord: int getOutlineLevel()>();

        if $i5 >= i6 goto label3;

        goto label5;

     label3:
        r4 = $r3;

     label4:
        i7 = i7 + 1;

        goto label1;

     label5:
        $i8 = virtualinvoke r4.<org.apache.poi.hssf.record.ColumnInfoRecord: int getLastColumn()>();

        return $i8;
    }

    public void expandColumn(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i10;
        java.lang.Boolean $r2;
        boolean $z0, $z1;
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        org.apache.poi.hssf.record.ColumnInfoRecord $r1, $r3;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: int findColInfoIdx(int,int)>(i0, 0);

        $i10 = (int) -1;

        if $i1 != $i10 goto label1;

        return;

     label1:
        $z0 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: boolean isColumnGroupCollapsed(int)>($i1);

        if $z0 != 0 goto label2;

        return;

     label2:
        $i2 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: int findStartOfColumnOutlineGroup(int)>($i1);

        $i3 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: int findEndOfColumnOutlineGroup(int)>($i1);

        $r1 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>($i3);

        $z1 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: boolean isColumnGroupHiddenByParent(int)>($i1);

        if $z1 != 0 goto label5;

        $i6 = virtualinvoke $r1.<org.apache.poi.hssf.record.ColumnInfoRecord: int getOutlineLevel()>();

        i8 = $i2;

     label3:
        if i8 > $i3 goto label5;

        $r3 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>(i8);

        $i7 = virtualinvoke $r3.<org.apache.poi.hssf.record.ColumnInfoRecord: int getOutlineLevel()>();

        if $i6 != $i7 goto label4;

        virtualinvoke $r3.<org.apache.poi.hssf.record.ColumnInfoRecord: void setHidden(boolean)>(0);

     label4:
        i8 = i8 + 1;

        goto label3;

     label5:
        $i4 = virtualinvoke $r1.<org.apache.poi.hssf.record.ColumnInfoRecord: int getLastColumn()>();

        $i5 = $i4 + 1;

        $r2 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: void setColumn(int,java.lang.Short,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean)>($i5, null, null, null, null, $r2);

        return;
    }

    private static org.apache.poi.hssf.record.ColumnInfoRecord copyColInfo(org.apache.poi.hssf.record.ColumnInfoRecord)
    {
        org.apache.poi.hssf.record.ColumnInfoRecord r0, $r2;
        java.lang.Object $r1;

        r0 := @parameter0: org.apache.poi.hssf.record.ColumnInfoRecord;

        $r1 = virtualinvoke r0.<org.apache.poi.hssf.record.ColumnInfoRecord: java.lang.Object clone()>();

        $r2 = (org.apache.poi.hssf.record.ColumnInfoRecord) $r1;

        return $r2;
    }

    public void setColumn(int, java.lang.Short, java.lang.Integer, java.lang.Integer, java.lang.Boolean, java.lang.Boolean)
    {
        java.lang.Integer r3, r4;
        java.lang.Short r2;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, $z10, $z11, $z12, $z13, $z14;
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        java.util.List $r1, $r11;
        org.apache.poi.hssf.record.ColumnInfoRecord $r7, $r8, $r9, r13, r14, $r15;
        short $s15, $s17;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i18, i19, i20, i21, $i22, $i23;
        java.lang.Boolean r5, r6;
        java.lang.Object $r12;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        i2 := @parameter0: int;

        r2 := @parameter1: java.lang.Short;

        r3 := @parameter2: java.lang.Integer;

        r4 := @parameter3: java.lang.Integer;

        r5 := @parameter4: java.lang.Boolean;

        r6 := @parameter5: java.lang.Boolean;

        r13 = null;

        i19 = 0;

     label01:
        $r1 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i19 >= $i0 goto label04;

        $r11 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i19);

        r14 = (org.apache.poi.hssf.record.ColumnInfoRecord) $r12;

        $z7 = virtualinvoke r14.<org.apache.poi.hssf.record.ColumnInfoRecord: boolean containsColumn(int)>(i2);

        if $z7 == 0 goto label02;

        r13 = r14;

        goto label04;

     label02:
        $i18 = virtualinvoke r14.<org.apache.poi.hssf.record.ColumnInfoRecord: int getFirstColumn()>();

        if $i18 <= i2 goto label03;

        goto label04;

     label03:
        i19 = i19 + 1;

        goto label01;

     label04:
        if r13 != null goto label05;

        $r15 = new org.apache.poi.hssf.record.ColumnInfoRecord;

        specialinvoke $r15.<org.apache.poi.hssf.record.ColumnInfoRecord: void <init>()>();

        virtualinvoke $r15.<org.apache.poi.hssf.record.ColumnInfoRecord: void setFirstColumn(int)>(i2);

        virtualinvoke $r15.<org.apache.poi.hssf.record.ColumnInfoRecord: void setLastColumn(int)>(i2);

        staticinvoke <org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: void setColumnInfoFields(org.apache.poi.hssf.record.ColumnInfoRecord,java.lang.Short,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean)>($r15, r2, r3, r4, r5, r6);

        specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: void insertColumn(int,org.apache.poi.hssf.record.ColumnInfoRecord)>(i19, $r15);

        specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: void attemptMergeColInfoRecords(int)>(i19);

        return;

     label05:
        if r2 == null goto label06;

        $i16 = virtualinvoke r13.<org.apache.poi.hssf.record.ColumnInfoRecord: int getXFIndex()>();

        $s17 = virtualinvoke r2.<java.lang.Short: short shortValue()>();

        $i22 = (int) $s17;

        if $i16 == $i22 goto label06;

        $z8 = 1;

        goto label07;

     label06:
        $z8 = 0;

     label07:
        z9 = $z8;

        if r3 == null goto label08;

        $i14 = virtualinvoke r13.<org.apache.poi.hssf.record.ColumnInfoRecord: int getColumnWidth()>();

        $s15 = virtualinvoke r3.<java.lang.Integer: short shortValue()>();

        $i23 = (int) $s15;

        if $i14 == $i23 goto label08;

        $z10 = 1;

        goto label09;

     label08:
        $z10 = 0;

     label09:
        z0 = $z10;

        if r4 == null goto label10;

        $i12 = virtualinvoke r13.<org.apache.poi.hssf.record.ColumnInfoRecord: int getOutlineLevel()>();

        $i13 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        if $i12 == $i13 goto label10;

        $z11 = 1;

        goto label11;

     label10:
        $z11 = 0;

     label11:
        z1 = $z11;

        if r5 == null goto label12;

        $z5 = virtualinvoke r13.<org.apache.poi.hssf.record.ColumnInfoRecord: boolean getHidden()>();

        $z6 = virtualinvoke r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z5 == $z6 goto label12;

        $z12 = 1;

        goto label13;

     label12:
        $z12 = 0;

     label13:
        z2 = $z12;

        if r6 == null goto label14;

        $z3 = virtualinvoke r13.<org.apache.poi.hssf.record.ColumnInfoRecord: boolean getCollapsed()>();

        $z4 = virtualinvoke r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z3 == $z4 goto label14;

        $z13 = 1;

        goto label15;

     label14:
        $z13 = 0;

     label15:
        if z9 != 0 goto label16;

        if z0 != 0 goto label16;

        if z1 != 0 goto label16;

        if z2 != 0 goto label16;

        if $z13 == 0 goto label17;

     label16:
        $z14 = 1;

        goto label18;

     label17:
        $z14 = 0;

     label18:
        if $z14 != 0 goto label19;

        return;

     label19:
        $i1 = virtualinvoke r13.<org.apache.poi.hssf.record.ColumnInfoRecord: int getFirstColumn()>();

        if $i1 != i2 goto label20;

        $i11 = virtualinvoke r13.<org.apache.poi.hssf.record.ColumnInfoRecord: int getLastColumn()>();

        if $i11 != i2 goto label20;

        staticinvoke <org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: void setColumnInfoFields(org.apache.poi.hssf.record.ColumnInfoRecord,java.lang.Short,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean)>(r13, r2, r3, r4, r5, r6);

        specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: void attemptMergeColInfoRecords(int)>(i19);

        return;

     label20:
        $i3 = virtualinvoke r13.<org.apache.poi.hssf.record.ColumnInfoRecord: int getFirstColumn()>();

        if $i3 == i2 goto label21;

        $i7 = virtualinvoke r13.<org.apache.poi.hssf.record.ColumnInfoRecord: int getLastColumn()>();

        if $i7 != i2 goto label24;

     label21:
        $i4 = virtualinvoke r13.<org.apache.poi.hssf.record.ColumnInfoRecord: int getFirstColumn()>();

        if $i4 != i2 goto label22;

        $i6 = i2 + 1;

        virtualinvoke r13.<org.apache.poi.hssf.record.ColumnInfoRecord: void setFirstColumn(int)>($i6);

        goto label23;

     label22:
        $i5 = i2 - 1;

        virtualinvoke r13.<org.apache.poi.hssf.record.ColumnInfoRecord: void setLastColumn(int)>($i5);

        i19 = i19 + 1;

     label23:
        $r7 = staticinvoke <org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord copyColInfo(org.apache.poi.hssf.record.ColumnInfoRecord)>(r13);

        virtualinvoke $r7.<org.apache.poi.hssf.record.ColumnInfoRecord: void setFirstColumn(int)>(i2);

        virtualinvoke $r7.<org.apache.poi.hssf.record.ColumnInfoRecord: void setLastColumn(int)>(i2);

        staticinvoke <org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: void setColumnInfoFields(org.apache.poi.hssf.record.ColumnInfoRecord,java.lang.Short,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean)>($r7, r2, r3, r4, r5, r6);

        specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: void insertColumn(int,org.apache.poi.hssf.record.ColumnInfoRecord)>(i19, $r7);

        specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: void attemptMergeColInfoRecords(int)>(i19);

        goto label25;

     label24:
        $r8 = staticinvoke <org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord copyColInfo(org.apache.poi.hssf.record.ColumnInfoRecord)>(r13);

        $r9 = staticinvoke <org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord copyColInfo(org.apache.poi.hssf.record.ColumnInfoRecord)>(r13);

        $i8 = virtualinvoke r13.<org.apache.poi.hssf.record.ColumnInfoRecord: int getLastColumn()>();

        $i9 = i2 - 1;

        virtualinvoke r13.<org.apache.poi.hssf.record.ColumnInfoRecord: void setLastColumn(int)>($i9);

        virtualinvoke $r8.<org.apache.poi.hssf.record.ColumnInfoRecord: void setFirstColumn(int)>(i2);

        virtualinvoke $r8.<org.apache.poi.hssf.record.ColumnInfoRecord: void setLastColumn(int)>(i2);

        staticinvoke <org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: void setColumnInfoFields(org.apache.poi.hssf.record.ColumnInfoRecord,java.lang.Short,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean)>($r8, r2, r3, r4, r5, r6);

        i20 = i19 + 1;

        specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: void insertColumn(int,org.apache.poi.hssf.record.ColumnInfoRecord)>(i20, $r8);

        $i10 = i2 + 1;

        virtualinvoke $r9.<org.apache.poi.hssf.record.ColumnInfoRecord: void setFirstColumn(int)>($i10);

        virtualinvoke $r9.<org.apache.poi.hssf.record.ColumnInfoRecord: void setLastColumn(int)>($i8);

        i21 = i20 + 1;

        specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: void insertColumn(int,org.apache.poi.hssf.record.ColumnInfoRecord)>(i21, $r9);

     label25:
        return;
    }

    private static void setColumnInfoFields(org.apache.poi.hssf.record.ColumnInfoRecord, java.lang.Short, java.lang.Integer, java.lang.Integer, java.lang.Boolean, java.lang.Boolean)
    {
        java.lang.Integer r1, r2;
        short $s0, $s2;
        java.lang.Short r0;
        int $i1, $i3, $i4;
        java.lang.Boolean r3, r4;
        org.apache.poi.hssf.record.ColumnInfoRecord r5;
        boolean $z0, $z1;

        r5 := @parameter0: org.apache.poi.hssf.record.ColumnInfoRecord;

        r0 := @parameter1: java.lang.Short;

        r1 := @parameter2: java.lang.Integer;

        r2 := @parameter3: java.lang.Integer;

        r3 := @parameter4: java.lang.Boolean;

        r4 := @parameter5: java.lang.Boolean;

        if r0 == null goto label1;

        $s2 = virtualinvoke r0.<java.lang.Short: short shortValue()>();

        $i3 = (int) $s2;

        virtualinvoke r5.<org.apache.poi.hssf.record.ColumnInfoRecord: void setXFIndex(int)>($i3);

     label1:
        if r1 == null goto label2;

        $i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        virtualinvoke r5.<org.apache.poi.hssf.record.ColumnInfoRecord: void setColumnWidth(int)>($i1);

     label2:
        if r2 == null goto label3;

        $s0 = virtualinvoke r2.<java.lang.Integer: short shortValue()>();

        $i4 = (int) $s0;

        virtualinvoke r5.<org.apache.poi.hssf.record.ColumnInfoRecord: void setOutlineLevel(int)>($i4);

     label3:
        if r3 == null goto label4;

        $z1 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r5.<org.apache.poi.hssf.record.ColumnInfoRecord: void setHidden(boolean)>($z1);

     label4:
        if r4 == null goto label5;

        $z0 = virtualinvoke r4.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r5.<org.apache.poi.hssf.record.ColumnInfoRecord: void setCollapsed(boolean)>($z0);

     label5:
        return;
    }

    private int findColInfoIdx(int, int)
    {
        int i0, i1, $i2, $i3, i4, $i6;
        java.lang.String $r7, $r12;
        boolean $z0;
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        java.lang.IllegalArgumentException $r14, $r16;
        java.util.List $r1;
        org.apache.poi.hssf.record.ColumnInfoRecord $r2;
        java.lang.StringBuilder $r5, $r6, $r10, $r11, $r13, $r15;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column parameter out of range: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r14;

     label1:
        if i1 >= 0 goto label2;

        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIdx parameter out of range: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r16;

     label2:
        i4 = i1;

     label3:
        $r1 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i4 >= $i2 goto label6;

        $r2 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>(i4);

        $z0 = virtualinvoke $r2.<org.apache.poi.hssf.record.ColumnInfoRecord: boolean containsColumn(int)>(i0);

        if $z0 == 0 goto label4;

        return i4;

     label4:
        $i3 = virtualinvoke $r2.<org.apache.poi.hssf.record.ColumnInfoRecord: int getFirstColumn()>();

        if $i3 <= i0 goto label5;

        goto label6;

     label5:
        i4 = i4 + 1;

        goto label3;

     label6:
        $i6 = (int) -1;

        return $i6;
    }

    private void attemptMergeColInfoRecords(int)
    {
        int $i0, i1, $i2, i3, $i4;
        java.lang.String $r9;
        boolean $z0, $z1;
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        java.lang.IllegalArgumentException $r2;
        java.util.List $r1, $r12, $r14;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;
        org.apache.poi.hssf.record.ColumnInfoRecord $r10, $r11, $r13;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        i1 := @parameter0: int;

        $r1 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 < 0 goto label1;

        if i1 < $i0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("colInfoIx ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range (0..");

        $i2 = $i0 - 1;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label2:
        $r10 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>(i1);

        i3 = i1 + 1;

        if i3 >= $i0 goto label3;

        $r13 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>(i3);

        $z1 = staticinvoke <org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: boolean mergeColInfoRecords(org.apache.poi.hssf.record.ColumnInfoRecord,org.apache.poi.hssf.record.ColumnInfoRecord)>($r10, $r13);

        if $z1 == 0 goto label3;

        $r14 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        interfaceinvoke $r14.<java.util.List: java.lang.Object remove(int)>(i3);

     label3:
        if i1 <= 0 goto label4;

        $i4 = i1 - 1;

        $r11 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>($i4);

        $z0 = staticinvoke <org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: boolean mergeColInfoRecords(org.apache.poi.hssf.record.ColumnInfoRecord,org.apache.poi.hssf.record.ColumnInfoRecord)>($r11, $r10);

        if $z0 == 0 goto label4;

        $r12 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        interfaceinvoke $r12.<java.util.List: java.lang.Object remove(int)>(i1);

     label4:
        return;
    }

    private static boolean mergeColInfoRecords(org.apache.poi.hssf.record.ColumnInfoRecord, org.apache.poi.hssf.record.ColumnInfoRecord)
    {
        int $i0;
        org.apache.poi.hssf.record.ColumnInfoRecord r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.poi.hssf.record.ColumnInfoRecord;

        r1 := @parameter1: org.apache.poi.hssf.record.ColumnInfoRecord;

        $z0 = virtualinvoke r0.<org.apache.poi.hssf.record.ColumnInfoRecord: boolean isAdjacentBefore(org.apache.poi.hssf.record.ColumnInfoRecord)>(r1);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.poi.hssf.record.ColumnInfoRecord: boolean formatMatches(org.apache.poi.hssf.record.ColumnInfoRecord)>(r1);

        if $z1 == 0 goto label1;

        $i0 = virtualinvoke r1.<org.apache.poi.hssf.record.ColumnInfoRecord: int getLastColumn()>();

        virtualinvoke r0.<org.apache.poi.hssf.record.ColumnInfoRecord: void setLastColumn(int)>($i0);

        return 1;

     label1:
        return 0;
    }

    public void groupColumnRange(int, int, boolean)
    {
        java.lang.Integer $r2;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, $i11, $i13;
        boolean z0;
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        org.apache.poi.hssf.record.ColumnInfoRecord $r1;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        i6 = 0;

        i7 = i0;

     label1:
        if i7 > i1 goto label5;

        i8 = 1;

        $i2 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: int findColInfoIdx(int,int)>(i7, i6);

        $i11 = (int) -1;

        if $i2 == $i11 goto label4;

        $r1 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>($i2);

        $i3 = virtualinvoke $r1.<org.apache.poi.hssf.record.ColumnInfoRecord: int getOutlineLevel()>();

        if z0 == 0 goto label2;

        i9 = $i3 + 1;

        goto label3;

     label2:
        $i13 = (int) -1;

        i9 = $i3 + $i13;

     label3:
        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(0, i9);

        i8 = staticinvoke <java.lang.Math: int min(int,int)>(7, $i4);

        $i5 = $i2 - 1;

        i6 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i5);

     label4:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        virtualinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: void setColumn(int,java.lang.Short,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean)>(i7, null, null, $r2, null, null);

        i7 = i7 + 1;

        goto label1;

     label5:
        return;
    }

    public org.apache.poi.hssf.record.ColumnInfoRecord findColumnInfo(int)
    {
        java.util.List $r1;
        int $i0, i1, i2;
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        org.apache.poi.hssf.record.ColumnInfoRecord $r2;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        i1 := @parameter0: int;

        $r1 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label3;

        $r2 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>(i2);

        $z0 = virtualinvoke $r2.<org.apache.poi.hssf.record.ColumnInfoRecord: boolean containsColumn(int)>(i1);

        if $z0 == 0 goto label2;

        return $r2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return null;
    }

    public int getMaxOutlineLevel()
    {
        java.util.List $r1;
        int $i0, $i1, i2, i3;
        org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate r0;
        org.apache.poi.hssf.record.ColumnInfoRecord $r2;

        r0 := @this: org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate;

        i2 = 0;

        $r1 = r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: java.util.List records>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i3 = 0;

     label1:
        if i3 >= $i0 goto label2;

        $r2 = specialinvoke r0.<org.apache.poi.hssf.record.aggregates.ColumnInfoRecordsAggregate: org.apache.poi.hssf.record.ColumnInfoRecord getColInfo(int)>(i3);

        $i1 = virtualinvoke $r2.<org.apache.poi.hssf.record.ColumnInfoRecord: int getOutlineLevel()>();

        i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, i2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }
}
