public class org.apache.pdfbox.encoding.SingleByteCharset extends java.nio.charset.Charset
{
    protected static final char REPLACEMENT_CHARACTER;
    private final char[] toUnicodeMap;
    private byte[][] toByteMap;

    protected void <init>(java.lang.String, java.lang.String[], char[])
    {
        org.apache.pdfbox.encoding.SingleByteCharset r0;
        java.lang.String[] r2;
        java.lang.IllegalArgumentException $r6;
        int $i0, $i1;
        char[] r3, $r4, $r5;
        java.lang.String r1;

        r0 := @this: org.apache.pdfbox.encoding.SingleByteCharset;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: char[];

        specialinvoke r0.<java.nio.charset.Charset: void <init>(java.lang.String,java.lang.String[])>(r1, r2);

        $i0 = lengthof r3;

        if $i0 <= 256 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Single-byte encodings may have at most 256 characters.");

        throw $r6;

     label1:
        $r4 = newarray (char)[256];

        r0.<org.apache.pdfbox.encoding.SingleByteCharset: char[] toUnicodeMap> = $r4;

        $r5 = r0.<org.apache.pdfbox.encoding.SingleByteCharset: char[] toUnicodeMap>;

        $i1 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r5, 0, $i1);

        specialinvoke r0.<org.apache.pdfbox.encoding.SingleByteCharset: void initInverseMap()>();

        return;
    }

    private void initInverseMap()
    {
        byte[] r17;
        byte $b6;
        int i1, i3, $i5, i7, $i8, $i10, $i11, $i12, $i13;
        java.lang.String $r12, $r15;
        org.apache.pdfbox.encoding.SingleByteCharset r0;
        char $c0, c2, c4;
        java.lang.IllegalArgumentException $r18, $r20;
        byte[][] $r1, $r5, $r6;
        char[] $r2, $r3, $r4;
        java.lang.StringBuilder $r9, $r10, $r11, $r13, $r14, $r19;

        r0 := @this: org.apache.pdfbox.encoding.SingleByteCharset;

        $r1 = newarray (byte[])[256];

        r0.<org.apache.pdfbox.encoding.SingleByteCharset: byte[][] toByteMap> = $r1;

        $r2 = r0.<org.apache.pdfbox.encoding.SingleByteCharset: char[] toUnicodeMap>;

        $c0 = $r2[0];

        if $c0 == 0 goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("First character in map must be a NUL (0x0000) character.");

        throw $r18;

     label1:
        i7 = 1;

        $r3 = r0.<org.apache.pdfbox.encoding.SingleByteCharset: char[] toUnicodeMap>;

        i1 = lengthof $r3;

     label2:
        if i7 >= i1 goto label7;

        $r4 = r0.<org.apache.pdfbox.encoding.SingleByteCharset: char[] toUnicodeMap>;

        c2 = $r4[i7];

        $i8 = (int) c2;

        $i10 = (int) 65533;

        if $i8 != $i10 goto label3;

        goto label6;

     label3:
        $i11 = (int) c2;

        i3 = $i11 >> 8;

        c4 = c2 & 255;

        if i3 <= 255 goto label4;

        $r20 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a compatible character: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i12 = (int) c2;

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r20;

     label4:
        $r5 = r0.<org.apache.pdfbox.encoding.SingleByteCharset: byte[][] toByteMap>;

        r17 = $r5[i3];

        if r17 != null goto label5;

        r17 = newarray (byte)[256];

        $r6 = r0.<org.apache.pdfbox.encoding.SingleByteCharset: byte[][] toByteMap>;

        $r6[i3] = r17;

     label5:
        $i5 = i7 & 255;

        $b6 = (byte) $i5;

        $i13 = (int) c4;

        r17[$i13] = $b6;

     label6:
        i7 = i7 + 1;

        goto label2;

     label7:
        return;
    }

    public boolean contains(java.nio.charset.Charset)
    {
        org.apache.pdfbox.encoding.SingleByteCharset r2;
        java.nio.charset.Charset r0;
        java.lang.Class $r1, $r3;
        boolean $z0;

        r2 := @this: org.apache.pdfbox.encoding.SingleByteCharset;

        r0 := @parameter0: java.nio.charset.Charset;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.nio.charset.CharsetDecoder newDecoder()
    {
        org.apache.pdfbox.encoding.SingleByteCharset$Decoder $r0;
        org.apache.pdfbox.encoding.SingleByteCharset r1;

        r1 := @this: org.apache.pdfbox.encoding.SingleByteCharset;

        $r0 = new org.apache.pdfbox.encoding.SingleByteCharset$Decoder;

        specialinvoke $r0.<org.apache.pdfbox.encoding.SingleByteCharset$Decoder: void <init>(org.apache.pdfbox.encoding.SingleByteCharset)>(r1);

        return $r0;
    }

    public java.nio.charset.CharsetEncoder newEncoder()
    {
        org.apache.pdfbox.encoding.SingleByteCharset r1;
        org.apache.pdfbox.encoding.SingleByteCharset$Encoder $r0;

        r1 := @this: org.apache.pdfbox.encoding.SingleByteCharset;

        $r0 = new org.apache.pdfbox.encoding.SingleByteCharset$Encoder;

        specialinvoke $r0.<org.apache.pdfbox.encoding.SingleByteCharset$Encoder: void <init>(org.apache.pdfbox.encoding.SingleByteCharset)>(r1);

        return $r0;
    }

    static char[] access$000(org.apache.pdfbox.encoding.SingleByteCharset)
    {
        org.apache.pdfbox.encoding.SingleByteCharset r0;
        char[] $r1;

        r0 := @parameter0: org.apache.pdfbox.encoding.SingleByteCharset;

        $r1 = r0.<org.apache.pdfbox.encoding.SingleByteCharset: char[] toUnicodeMap>;

        return $r1;
    }

    static byte[][] access$100(org.apache.pdfbox.encoding.SingleByteCharset)
    {
        org.apache.pdfbox.encoding.SingleByteCharset r0;
        byte[][] $r1;

        r0 := @parameter0: org.apache.pdfbox.encoding.SingleByteCharset;

        $r1 = r0.<org.apache.pdfbox.encoding.SingleByteCharset: byte[][] toByteMap>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.pdfbox.encoding.SingleByteCharset: char REPLACEMENT_CHARACTER> = 65533;

        return;
    }
}
