public class org.apache.jempbox.xmp.XMPMetadata extends java.lang.Object
{
    public static final java.lang.String ENCODING_UTF8;
    public static final java.lang.String ENCODING_UTF16BE;
    public static final java.lang.String ENCODING_UTF16LE;
    protected org.w3c.dom.Document xmpDocument;
    protected java.lang.String encoding;
    protected java.util.Map nsMappings;

    public void <init>() throws java.io.IOException
    {
        org.w3c.dom.ProcessingInstruction $r4, $r12;
        java.util.HashMap $r1;
        org.w3c.dom.Element $r7, $r10;
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.w3c.dom.Document $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r13;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jempbox.xmp.XMPMetadata: java.lang.String encoding> = "UTF-8";

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings> = $r1;

        $r2 = staticinvoke <org.apache.jempbox.impl.XMLUtil: org.w3c.dom.Document newDocument()>();

        r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument> = $r2;

        $r3 = r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument>;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Document: org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>("xpacket", "begin=\"\ufeff\" id=\"W5M0MpCehiHzreSzNTczkc9d\"");

        $r5 = r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument>;

        interfaceinvoke $r5.<org.w3c.dom.Document: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r4);

        $r6 = r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument>;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("adobe:ns:meta/", "x:xmpmeta");

        interfaceinvoke $r7.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", "xmlns:x", "adobe:ns:meta/");

        $r8 = r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument>;

        interfaceinvoke $r8.<org.w3c.dom.Document: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r7);

        $r9 = r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument>;

        $r10 = interfaceinvoke $r9.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("rdf:RDF");

        interfaceinvoke $r10.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", "xmlns:rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#");

        interfaceinvoke $r7.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r10);

        $r11 = r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument>;

        $r12 = interfaceinvoke $r11.<org.w3c.dom.Document: org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>("xpacket", "end=\"w\"");

        $r13 = r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument>;

        interfaceinvoke $r13.<org.w3c.dom.Document: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r12);

        specialinvoke r0.<org.apache.jempbox.xmp.XMPMetadata: void init()>();

        return;
    }

    public void <init>(org.w3c.dom.Document)
    {
        java.util.HashMap $r1;
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.w3c.dom.Document r2;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        r2 := @parameter0: org.w3c.dom.Document;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jempbox.xmp.XMPMetadata: java.lang.String encoding> = "UTF-8";

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings> = $r1;

        r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument> = r2;

        specialinvoke r0.<org.apache.jempbox.xmp.XMPMetadata: void init()>();

        return;
    }

    private void init()
    {
        org.apache.jempbox.xmp.XMPMetadata r0;
        java.util.Map $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r1 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://ns.adobe.com/pdf/1.3/", class "Lorg/apache/jempbox/xmp/XMPSchemaPDF;");

        $r2 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://ns.adobe.com/xap/1.0/", class "Lorg/apache/jempbox/xmp/XMPSchemaBasic;");

        $r3 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://purl.org/dc/elements/1.1/", class "Lorg/apache/jempbox/xmp/XMPSchemaDublinCore;");

        $r4 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://ns.adobe.com/xap/1.0/mm/", class "Lorg/apache/jempbox/xmp/XMPSchemaMediaManagement;");

        $r5 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://ns.adobe.com/xap/1.0/rights/", class "Lorg/apache/jempbox/xmp/XMPSchemaRightsManagement;");

        $r6 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://ns.adobe.com/xap/1.0/bj/", class "Lorg/apache/jempbox/xmp/XMPSchemaBasicJobTicket;");

        $r7 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://ns.adobe.com/xmp/1.0/DynamicMedia/", class "Lorg/apache/jempbox/xmp/XMPSchemaDynamicMedia;");

        $r8 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://ns.adobe.com/xap/1.0/t/pg/", class "Lorg/apache/jempbox/xmp/XMPSchemaPagedText;");

        $r9 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/", class "Lorg/apache/jempbox/xmp/XMPSchemaIptc4xmpCore;");

        $r10 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://ns.adobe.com/photoshop/1.0/", class "Lorg/apache/jempbox/xmp/XMPSchemaPhotoshop;");

        return;
    }

    public void addXMLNSMapping(java.lang.String, java.lang.Class)
    {
        org.apache.jempbox.xmp.XMPMetadata r2;
        java.util.Map $r4;
        java.lang.Class r0, $r1;
        java.lang.String r3;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;

        r2 := @this: org.apache.jempbox.xmp.XMPMetadata;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        $r1 = class "Lorg/apache/jempbox/xmp/XMPSchema;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only XMPSchemas can be mapped to.");

        throw $r5;

     label1:
        $r4 = r2.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r0);

        return;
    }

    public org.apache.jempbox.xmp.XMPSchemaPDF getPDFSchema() throws java.io.IOException
    {
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.apache.jempbox.xmp.XMPSchemaPDF $r2;
        org.apache.jempbox.xmp.XMPSchema $r1;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r1 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema getSchemaByClass(java.lang.Class)>(class "Lorg/apache/jempbox/xmp/XMPSchemaPDF;");

        $r2 = (org.apache.jempbox.xmp.XMPSchemaPDF) $r1;

        return $r2;
    }

    public org.apache.jempbox.xmp.XMPSchemaBasic getBasicSchema() throws java.io.IOException
    {
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.apache.jempbox.xmp.XMPSchemaBasic $r2;
        org.apache.jempbox.xmp.XMPSchema $r1;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r1 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema getSchemaByClass(java.lang.Class)>(class "Lorg/apache/jempbox/xmp/XMPSchemaBasic;");

        $r2 = (org.apache.jempbox.xmp.XMPSchemaBasic) $r1;

        return $r2;
    }

    public org.apache.jempbox.xmp.XMPSchemaDublinCore getDublinCoreSchema() throws java.io.IOException
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore $r2;
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.apache.jempbox.xmp.XMPSchema $r1;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r1 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema getSchemaByClass(java.lang.Class)>(class "Lorg/apache/jempbox/xmp/XMPSchemaDublinCore;");

        $r2 = (org.apache.jempbox.xmp.XMPSchemaDublinCore) $r1;

        return $r2;
    }

    public org.apache.jempbox.xmp.XMPSchemaMediaManagement getMediaManagementSchema() throws java.io.IOException
    {
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.apache.jempbox.xmp.XMPSchemaMediaManagement $r2;
        org.apache.jempbox.xmp.XMPSchema $r1;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r1 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema getSchemaByClass(java.lang.Class)>(class "Lorg/apache/jempbox/xmp/XMPSchemaMediaManagement;");

        $r2 = (org.apache.jempbox.xmp.XMPSchemaMediaManagement) $r1;

        return $r2;
    }

    public org.apache.jempbox.xmp.XMPSchemaRightsManagement getRightsManagementSchema() throws java.io.IOException
    {
        org.apache.jempbox.xmp.XMPSchemaRightsManagement $r2;
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.apache.jempbox.xmp.XMPSchema $r1;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r1 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema getSchemaByClass(java.lang.Class)>(class "Lorg/apache/jempbox/xmp/XMPSchemaRightsManagement;");

        $r2 = (org.apache.jempbox.xmp.XMPSchemaRightsManagement) $r1;

        return $r2;
    }

    public org.apache.jempbox.xmp.XMPSchemaBasicJobTicket getBasicJobTicketSchema() throws java.io.IOException
    {
        org.apache.jempbox.xmp.XMPSchemaBasicJobTicket $r2;
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.apache.jempbox.xmp.XMPSchema $r1;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r1 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema getSchemaByClass(java.lang.Class)>(class "Lorg/apache/jempbox/xmp/XMPSchemaBasicJobTicket;");

        $r2 = (org.apache.jempbox.xmp.XMPSchemaBasicJobTicket) $r1;

        return $r2;
    }

    public org.apache.jempbox.xmp.XMPSchemaDynamicMedia getDynamicMediaSchema() throws java.io.IOException
    {
        org.apache.jempbox.xmp.XMPSchemaDynamicMedia $r2;
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.apache.jempbox.xmp.XMPSchema $r1;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r1 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema getSchemaByClass(java.lang.Class)>(class "Lorg/apache/jempbox/xmp/XMPSchemaDynamicMedia;");

        $r2 = (org.apache.jempbox.xmp.XMPSchemaDynamicMedia) $r1;

        return $r2;
    }

    public org.apache.jempbox.xmp.XMPSchemaPagedText getPagedTextSchema() throws java.io.IOException
    {
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.apache.jempbox.xmp.XMPSchemaPagedText $r2;
        org.apache.jempbox.xmp.XMPSchema $r1;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r1 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema getSchemaByClass(java.lang.Class)>(class "Lorg/apache/jempbox/xmp/XMPSchemaPagedText;");

        $r2 = (org.apache.jempbox.xmp.XMPSchemaPagedText) $r1;

        return $r2;
    }

    public org.apache.jempbox.xmp.XMPSchemaMediaManagement addMediaManagementSchema()
    {
        org.apache.jempbox.xmp.XMPMetadata r1;
        org.apache.jempbox.xmp.XMPSchema $r2;
        org.apache.jempbox.xmp.XMPSchemaMediaManagement $r0, $r3;

        r1 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r0 = new org.apache.jempbox.xmp.XMPSchemaMediaManagement;

        specialinvoke $r0.<org.apache.jempbox.xmp.XMPSchemaMediaManagement: void <init>(org.apache.jempbox.xmp.XMPMetadata)>(r1);

        $r2 = virtualinvoke r1.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema basicAddSchema(org.apache.jempbox.xmp.XMPSchema)>($r0);

        $r3 = (org.apache.jempbox.xmp.XMPSchemaMediaManagement) $r2;

        return $r3;
    }

    public org.apache.jempbox.xmp.XMPSchemaRightsManagement addRightsManagementSchema()
    {
        org.apache.jempbox.xmp.XMPMetadata r1;
        org.apache.jempbox.xmp.XMPSchema $r2;
        org.apache.jempbox.xmp.XMPSchemaRightsManagement $r0, $r3;

        r1 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r0 = new org.apache.jempbox.xmp.XMPSchemaRightsManagement;

        specialinvoke $r0.<org.apache.jempbox.xmp.XMPSchemaRightsManagement: void <init>(org.apache.jempbox.xmp.XMPMetadata)>(r1);

        $r2 = virtualinvoke r1.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema basicAddSchema(org.apache.jempbox.xmp.XMPSchema)>($r0);

        $r3 = (org.apache.jempbox.xmp.XMPSchemaRightsManagement) $r2;

        return $r3;
    }

    public org.apache.jempbox.xmp.XMPSchemaBasicJobTicket addBasicJobTicketSchema()
    {
        org.apache.jempbox.xmp.XMPMetadata r1;
        org.apache.jempbox.xmp.XMPSchema $r2;
        org.apache.jempbox.xmp.XMPSchemaBasicJobTicket $r0, $r3;

        r1 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r0 = new org.apache.jempbox.xmp.XMPSchemaBasicJobTicket;

        specialinvoke $r0.<org.apache.jempbox.xmp.XMPSchemaBasicJobTicket: void <init>(org.apache.jempbox.xmp.XMPMetadata)>(r1);

        $r2 = virtualinvoke r1.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema basicAddSchema(org.apache.jempbox.xmp.XMPSchema)>($r0);

        $r3 = (org.apache.jempbox.xmp.XMPSchemaBasicJobTicket) $r2;

        return $r3;
    }

    public org.apache.jempbox.xmp.XMPSchemaDynamicMedia addDynamicMediaSchema()
    {
        org.apache.jempbox.xmp.XMPMetadata r1;
        org.apache.jempbox.xmp.XMPSchema $r2;
        org.apache.jempbox.xmp.XMPSchemaDynamicMedia $r0, $r3;

        r1 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r0 = new org.apache.jempbox.xmp.XMPSchemaDynamicMedia;

        specialinvoke $r0.<org.apache.jempbox.xmp.XMPSchemaDynamicMedia: void <init>(org.apache.jempbox.xmp.XMPMetadata)>(r1);

        $r2 = virtualinvoke r1.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema basicAddSchema(org.apache.jempbox.xmp.XMPSchema)>($r0);

        $r3 = (org.apache.jempbox.xmp.XMPSchemaDynamicMedia) $r2;

        return $r3;
    }

    public org.apache.jempbox.xmp.XMPSchemaPagedText addPagedTextSchema()
    {
        org.apache.jempbox.xmp.XMPMetadata r1;
        org.apache.jempbox.xmp.XMPSchemaPagedText $r0, $r3;
        org.apache.jempbox.xmp.XMPSchema $r2;

        r1 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r0 = new org.apache.jempbox.xmp.XMPSchemaPagedText;

        specialinvoke $r0.<org.apache.jempbox.xmp.XMPSchemaPagedText: void <init>(org.apache.jempbox.xmp.XMPMetadata)>(r1);

        $r2 = virtualinvoke r1.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema basicAddSchema(org.apache.jempbox.xmp.XMPSchema)>($r0);

        $r3 = (org.apache.jempbox.xmp.XMPSchemaPagedText) $r2;

        return $r3;
    }

    public void addSchema(org.apache.jempbox.xmp.XMPSchema)
    {
        org.w3c.dom.Element $r1, $r3;
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.apache.jempbox.xmp.XMPSchema r2;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        r2 := @parameter0: org.apache.jempbox.xmp.XMPSchema;

        $r1 = specialinvoke r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Element getRDFElement()>();

        $r3 = virtualinvoke r2.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element getElement()>();

        interfaceinvoke $r1.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r3);

        return;
    }

    public void save(java.lang.String) throws java.lang.Exception
    {
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.w3c.dom.Document $r3;
        java.lang.String r1, $r2;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument>;

        $r2 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.lang.String encoding>;

        staticinvoke <org.apache.jempbox.impl.XMLUtil: void save(org.w3c.dom.Document,java.lang.String,java.lang.String)>($r3, r1, $r2);

        return;
    }

    public void save(java.io.OutputStream) throws javax.xml.transform.TransformerException
    {
        java.io.OutputStream r1;
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.w3c.dom.Document $r3;
        java.lang.String $r2;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        r1 := @parameter0: java.io.OutputStream;

        $r3 = r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument>;

        $r2 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.lang.String encoding>;

        staticinvoke <org.apache.jempbox.impl.XMLUtil: void save(org.w3c.dom.Node,java.io.OutputStream,java.lang.String)>($r3, r1, $r2);

        return;
    }

    public byte[] asByteArray() throws java.lang.Exception
    {
        byte[] $r3;
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.w3c.dom.Document $r2;
        java.lang.String $r1;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r2 = r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument>;

        $r1 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.lang.String encoding>;

        $r3 = staticinvoke <org.apache.jempbox.impl.XMLUtil: byte[] asByteArray(org.w3c.dom.Document,java.lang.String)>($r2, $r1);

        return $r3;
    }

    public org.w3c.dom.Document getXMPDocument()
    {
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.w3c.dom.Document $r1;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r1 = r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument>;

        return $r1;
    }

    protected org.apache.jempbox.xmp.XMPSchema basicAddSchema(org.apache.jempbox.xmp.XMPSchema)
    {
        org.w3c.dom.Element $r1, $r3;
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.apache.jempbox.xmp.XMPSchema r2;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        r2 := @parameter0: org.apache.jempbox.xmp.XMPSchema;

        $r1 = specialinvoke r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Element getRDFElement()>();

        $r3 = virtualinvoke r2.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element getElement()>();

        interfaceinvoke $r1.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r3);

        return r2;
    }

    public org.apache.jempbox.xmp.XMPSchemaPDF addPDFSchema()
    {
        org.apache.jempbox.xmp.XMPMetadata r1;
        org.apache.jempbox.xmp.XMPSchema $r2;
        org.apache.jempbox.xmp.XMPSchemaPDF $r0, $r3;

        r1 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r0 = new org.apache.jempbox.xmp.XMPSchemaPDF;

        specialinvoke $r0.<org.apache.jempbox.xmp.XMPSchemaPDF: void <init>(org.apache.jempbox.xmp.XMPMetadata)>(r1);

        $r2 = virtualinvoke r1.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema basicAddSchema(org.apache.jempbox.xmp.XMPSchema)>($r0);

        $r3 = (org.apache.jempbox.xmp.XMPSchemaPDF) $r2;

        return $r3;
    }

    public org.apache.jempbox.xmp.XMPSchemaDublinCore addDublinCoreSchema()
    {
        org.apache.jempbox.xmp.XMPSchemaDublinCore $r0, $r3;
        org.apache.jempbox.xmp.XMPMetadata r1;
        org.apache.jempbox.xmp.XMPSchema $r2;

        r1 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r0 = new org.apache.jempbox.xmp.XMPSchemaDublinCore;

        specialinvoke $r0.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void <init>(org.apache.jempbox.xmp.XMPMetadata)>(r1);

        $r2 = virtualinvoke r1.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema basicAddSchema(org.apache.jempbox.xmp.XMPSchema)>($r0);

        $r3 = (org.apache.jempbox.xmp.XMPSchemaDublinCore) $r2;

        return $r3;
    }

    public org.apache.jempbox.xmp.XMPSchemaBasic addBasicSchema()
    {
        org.apache.jempbox.xmp.XMPMetadata r1;
        org.apache.jempbox.xmp.XMPSchemaBasic $r0, $r3;
        org.apache.jempbox.xmp.XMPSchema $r2;

        r1 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r0 = new org.apache.jempbox.xmp.XMPSchemaBasic;

        specialinvoke $r0.<org.apache.jempbox.xmp.XMPSchemaBasic: void <init>(org.apache.jempbox.xmp.XMPMetadata)>(r1);

        $r2 = virtualinvoke r1.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema basicAddSchema(org.apache.jempbox.xmp.XMPSchema)>($r0);

        $r3 = (org.apache.jempbox.xmp.XMPSchemaBasic) $r2;

        return $r3;
    }

    public org.apache.jempbox.xmp.XMPSchemaIptc4xmpCore addIptc4xmpCoreSchema()
    {
        org.apache.jempbox.xmp.XMPMetadata r1;
        org.apache.jempbox.xmp.XMPSchema $r2;
        org.apache.jempbox.xmp.XMPSchemaIptc4xmpCore $r0, $r3;

        r1 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r0 = new org.apache.jempbox.xmp.XMPSchemaIptc4xmpCore;

        specialinvoke $r0.<org.apache.jempbox.xmp.XMPSchemaIptc4xmpCore: void <init>(org.apache.jempbox.xmp.XMPMetadata)>(r1);

        $r2 = virtualinvoke r1.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema basicAddSchema(org.apache.jempbox.xmp.XMPSchema)>($r0);

        $r3 = (org.apache.jempbox.xmp.XMPSchemaIptc4xmpCore) $r2;

        return $r3;
    }

    public org.apache.jempbox.xmp.XMPSchemaPhotoshop addPhotoshopSchema()
    {
        org.apache.jempbox.xmp.XMPSchemaPhotoshop $r0, $r3;
        org.apache.jempbox.xmp.XMPMetadata r1;
        org.apache.jempbox.xmp.XMPSchema $r2;

        r1 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r0 = new org.apache.jempbox.xmp.XMPSchemaPhotoshop;

        specialinvoke $r0.<org.apache.jempbox.xmp.XMPSchemaPhotoshop: void <init>(org.apache.jempbox.xmp.XMPMetadata)>(r1);

        $r2 = virtualinvoke r1.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema basicAddSchema(org.apache.jempbox.xmp.XMPSchema)>($r0);

        $r3 = (org.apache.jempbox.xmp.XMPSchemaPhotoshop) $r2;

        return $r3;
    }

    public void setEncoding(java.lang.String)
    {
        java.lang.String r1;
        org.apache.jempbox.xmp.XMPMetadata r0;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.jempbox.xmp.XMPMetadata: java.lang.String encoding> = r1;

        return;
    }

    public java.lang.String getEncoding()
    {
        java.lang.String $r1;
        org.apache.jempbox.xmp.XMPMetadata r0;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r1 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.lang.String encoding>;

        return $r1;
    }

    private org.w3c.dom.Element getRDFElement()
    {
        org.w3c.dom.NodeList $r2;
        org.w3c.dom.Element r4;
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.w3c.dom.Document $r1;
        org.w3c.dom.Node $r3;
        int $i0;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        r4 = null;

        $r1 = r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:RDF");

        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label1;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r4 = (org.w3c.dom.Element) $r3;

     label1:
        return r4;
    }

    public static org.apache.jempbox.xmp.XMPMetadata load(java.lang.String) throws java.io.IOException
    {
        java.lang.String r1;
        org.apache.jempbox.xmp.XMPMetadata $r0;
        org.w3c.dom.Document $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.jempbox.xmp.XMPMetadata;

        $r2 = staticinvoke <org.apache.jempbox.impl.XMLUtil: org.w3c.dom.Document parse(java.lang.String)>(r1);

        specialinvoke $r0.<org.apache.jempbox.xmp.XMPMetadata: void <init>(org.w3c.dom.Document)>($r2);

        return $r0;
    }

    public static org.apache.jempbox.xmp.XMPMetadata load(org.xml.sax.InputSource) throws java.io.IOException
    {
        org.xml.sax.InputSource r1;
        org.apache.jempbox.xmp.XMPMetadata $r0;
        org.w3c.dom.Document $r2;

        r1 := @parameter0: org.xml.sax.InputSource;

        $r0 = new org.apache.jempbox.xmp.XMPMetadata;

        $r2 = staticinvoke <org.apache.jempbox.impl.XMLUtil: org.w3c.dom.Document parse(org.xml.sax.InputSource)>(r1);

        specialinvoke $r0.<org.apache.jempbox.xmp.XMPMetadata: void <init>(org.w3c.dom.Document)>($r2);

        return $r0;
    }

    public static org.apache.jempbox.xmp.XMPMetadata load(java.io.InputStream) throws java.io.IOException
    {
        org.apache.jempbox.xmp.XMPMetadata $r0;
        org.w3c.dom.Document $r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new org.apache.jempbox.xmp.XMPMetadata;

        $r2 = staticinvoke <org.apache.jempbox.impl.XMLUtil: org.w3c.dom.Document parse(java.io.InputStream)>(r1);

        specialinvoke $r0.<org.apache.jempbox.xmp.XMPMetadata: void <init>(org.w3c.dom.Document)>($r2);

        return $r0;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.io.PrintStream $r9;
        org.apache.jempbox.xmp.XMPSchemaDublinCore $r2;
        org.apache.jempbox.xmp.XMPSchemaBasic $r3;
        java.lang.String[] r13;
        java.lang.Integer $r5, $r6;
        org.apache.jempbox.xmp.Thumbnail $r4;
        java.util.List $r7;
        org.apache.jempbox.xmp.XMPMetadata $r0;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.lang.String $r12;
        org.apache.jempbox.xmp.XMPSchemaPDF $r1;

        r13 := @parameter0: java.lang.String[];

        $r0 = new org.apache.jempbox.xmp.XMPMetadata;

        specialinvoke $r0.<org.apache.jempbox.xmp.XMPMetadata: void <init>()>();

        $r1 = virtualinvoke $r0.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchemaPDF addPDFSchema()>();

        virtualinvoke $r1.<org.apache.jempbox.xmp.XMPSchemaPDF: void setAbout(java.lang.String)>("uuid:b8659d3a-369e-11d9-b951-000393c97fd8");

        virtualinvoke $r1.<org.apache.jempbox.xmp.XMPSchemaPDF: void setKeywords(java.lang.String)>("ben,bob,pdf");

        virtualinvoke $r1.<org.apache.jempbox.xmp.XMPSchemaPDF: void setPDFVersion(java.lang.String)>("1.3");

        virtualinvoke $r1.<org.apache.jempbox.xmp.XMPSchemaPDF: void setProducer(java.lang.String)>("Acrobat Distiller 6.0.1 for Macintosh");

        $r2 = virtualinvoke $r0.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchemaDublinCore addDublinCoreSchema()>();

        virtualinvoke $r2.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void addContributor(java.lang.String)>("Ben Litchfield");

        virtualinvoke $r2.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void addContributor(java.lang.String)>("Solar Eclipse");

        virtualinvoke $r2.<org.apache.jempbox.xmp.XMPSchemaDublinCore: void addContributor(java.lang.String)>("Some Other Guy");

        $r3 = virtualinvoke $r0.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchemaBasic addBasicSchema()>();

        $r4 = new org.apache.jempbox.xmp.Thumbnail;

        specialinvoke $r4.<org.apache.jempbox.xmp.Thumbnail: void <init>(org.apache.jempbox.xmp.XMPMetadata)>($r0);

        virtualinvoke $r4.<org.apache.jempbox.xmp.Thumbnail: void setFormat(java.lang.String)>("JPEG");

        virtualinvoke $r4.<org.apache.jempbox.xmp.Thumbnail: void setImage(java.lang.String)>("IMAGE_DATA");

        $r5 = new java.lang.Integer;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>(100);

        virtualinvoke $r4.<org.apache.jempbox.xmp.Thumbnail: void setHeight(java.lang.Integer)>($r5);

        $r6 = new java.lang.Integer;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(200);

        virtualinvoke $r4.<org.apache.jempbox.xmp.Thumbnail: void setWidth(java.lang.Integer)>($r6);

        virtualinvoke $r3.<org.apache.jempbox.xmp.XMPSchemaBasic: void setThumbnail(org.apache.jempbox.xmp.Thumbnail)>($r4);

        virtualinvoke $r3.<org.apache.jempbox.xmp.XMPSchemaBasic: void setBaseURL(java.lang.String)>("http://www.pdfbox.org/");

        $r7 = virtualinvoke $r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.List getSchemas()>();

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("schemas=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12);

        virtualinvoke $r0.<org.apache.jempbox.xmp.XMPMetadata: void save(java.lang.String)>("test.xmp");

        return;
    }

    public java.util.List getSchemas() throws java.io.IOException
    {
        java.lang.NoSuchMethodException $r24;
        org.w3c.dom.Document $r1;
        java.util.Map $r11, $r12;
        boolean $z0, $z1, z2;
        java.lang.Exception $r21;
        java.lang.StringBuilder $r26, $r27, $r29, $r30, $r32, $r33;
        java.lang.Object[] $r17;
        java.lang.reflect.Constructor $r16;
        java.util.ArrayList $r3;
        org.w3c.dom.Node $r4, $r8;
        int $i0, $i1, $i2, i3, i4;
        org.w3c.dom.NamedNodeMap $r6;
        java.lang.String $r9, $r10, $r18, $r23, $r28, $r31, $r34;
        org.w3c.dom.NodeList $r2;
        java.lang.Class[] $r15;
        java.io.IOException $r22, $r25;
        org.w3c.dom.Element r5;
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.apache.jempbox.xmp.XMPSchema $r7, $r20;
        java.lang.Object $r13, $r19;
        java.lang.Class r14;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r1 = r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Description");

        $r3 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        i3 = 0;

     label01:
        $i1 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i3 >= $i1 goto label10;

        $r4 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        r5 = (org.w3c.dom.Element) $r4;

        z2 = 0;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        i4 = 0;

     label02:
        $i2 = interfaceinvoke $r6.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i4 >= $i2 goto label08;

        $r8 = interfaceinvoke $r6.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i4);

        $r9 = interfaceinvoke $r8.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r10 = interfaceinvoke $r8.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z0 == 0 goto label07;

        $r11 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings>;

        $z1 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>($r10);

        if $z1 == 0 goto label07;

        $r12 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r14 = (java.lang.Class) $r13;

     label03:
        $r15 = newarray (java.lang.Class)[2];

        $r15[0] = class "Lorg/w3c/dom/Element;";

        $r15[1] = class "Ljava/lang/String;";

        $r16 = virtualinvoke r14.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r15);

        $r17 = newarray (java.lang.Object)[2];

        $r17[0] = r5;

        $r18 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int)>(6);

        $r17[1] = $r18;

        $r19 = virtualinvoke $r16.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r17);

        $r20 = (org.apache.jempbox.xmp.XMPSchema) $r19;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r20);

        z2 = 1;

     label04:
        goto label07;

     label05:
        $r24 := @caughtexception;

        $r25 = new java.io.IOException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Class ");

        $r28 = virtualinvoke r14.<java.lang.Class: java.lang.String getName()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must have a constructor with the signature of ");

        $r31 = virtualinvoke r14.<java.lang.Class: java.lang.String getName()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("( org.w3c.dom.Element, java.lang.String )");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>($r34);

        throw $r25;

     label06:
        $r21 := @caughtexception;

        virtualinvoke $r21.<java.lang.Exception: void printStackTrace()>();

        $r22 = new java.io.IOException;

        $r23 = virtualinvoke $r21.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label07:
        i4 = i4 + 1;

        goto label02;

     label08:
        if z2 != 0 goto label09;

        $r7 = new org.apache.jempbox.xmp.XMPSchema;

        specialinvoke $r7.<org.apache.jempbox.xmp.XMPSchema: void <init>(org.w3c.dom.Element,java.lang.String)>(r5, null);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

     label09:
        i3 = i3 + 1;

        goto label01;

     label10:
        return $r3;

        catch java.lang.NoSuchMethodException from label03 to label04 with label05;
        catch java.lang.Exception from label03 to label04 with label06;
    }

    public java.util.List getSchemasByNamespaceURI(java.lang.String) throws java.io.IOException
    {
        java.util.Iterator $r7;
        java.util.List $r1;
        org.apache.jempbox.xmp.XMPMetadata r0;
        java.util.Map $r4;
        org.apache.jempbox.xmp.XMPSchema r9;
        java.lang.Object $r5, $r8;
        java.lang.Class r6, $r10;
        java.lang.String r3;
        java.util.LinkedList $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        r3 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.List getSchemas()>();

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        $r4 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r6 = (java.lang.Class) $r5;

        if r6 != null goto label1;

        return $r2;

     label1:
        $r7 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.jempbox.xmp.XMPSchema) $r8;

        $r10 = virtualinvoke r9.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r10);

        if $z1 == 0 goto label3;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r9);

     label3:
        goto label2;

     label4:
        return $r2;
    }

    public boolean hasUnknownSchema() throws java.io.IOException
    {
        org.w3c.dom.Document $r1;
        org.w3c.dom.Node $r3, $r6;
        java.util.Map $r9;
        int $i0, $i1, i2, i3;
        org.w3c.dom.NamedNodeMap $r5;
        java.lang.String $r7, $r8;
        boolean $z0, $z1, $z2;
        org.w3c.dom.NodeList $r2;
        org.w3c.dom.Element r4;
        org.apache.jempbox.xmp.XMPMetadata r0;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        $r1 = r0.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Description");

        i2 = 0;

     label1:
        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i2 >= $i0 goto label5;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        r4 = (org.w3c.dom.Element) $r3;

        $r5 = interfaceinvoke r4.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        i3 = 0;

     label2:
        $i1 = interfaceinvoke $r5.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i3 >= $i1 goto label4;

        $r6 = interfaceinvoke $r5.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i3);

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r8 = interfaceinvoke $r6.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z0 == 0 goto label3;

        $r9 = r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.Map nsMappings>;

        $z1 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("http://ns.adobe.com/xap/1.0/sType/ResourceEvent#");

        if $z2 != 0 goto label3;

        return 1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return 0;
    }

    public org.apache.jempbox.xmp.XMPSchema getSchemaByClass(java.lang.Class) throws java.io.IOException
    {
        java.util.Iterator $r2;
        java.util.List $r1;
        org.apache.jempbox.xmp.XMPMetadata r0;
        org.apache.jempbox.xmp.XMPSchema r4;
        java.lang.Object $r3;
        java.lang.Class $r5, r7;
        java.lang.String $r6, $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.jempbox.xmp.XMPMetadata;

        r7 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.List getSchemas()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.jempbox.xmp.XMPSchema) $r3;

        $r5 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke r7.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    public void merge(org.apache.jempbox.xmp.XMPMetadata) throws java.io.IOException
    {
        java.util.Iterator $r2;
        java.util.List $r1;
        org.w3c.dom.Element $r8, $r10;
        org.apache.jempbox.xmp.XMPMetadata r0, r5;
        org.w3c.dom.Document $r9;
        org.apache.jempbox.xmp.XMPSchema r4, $r7;
        org.w3c.dom.Node $r11;
        java.lang.Object $r3;
        java.lang.Class $r6;
        boolean $z0;

        r5 := @this: org.apache.jempbox.xmp.XMPMetadata;

        r0 := @parameter0: org.apache.jempbox.xmp.XMPMetadata;

        $r1 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPMetadata: java.util.List getSchemas()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.jempbox.xmp.XMPSchema) $r3;

        $r6 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke r5.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchema getSchemaByClass(java.lang.Class)>($r6);

        if $r7 != null goto label2;

        $r8 = specialinvoke r5.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Element getRDFElement()>();

        $r9 = r5.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument>;

        $r10 = virtualinvoke r4.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element getElement()>();

        $r11 = interfaceinvoke $r9.<org.w3c.dom.Document: org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean)>($r10, 1);

        interfaceinvoke $r8.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r11);

        goto label3;

     label2:
        virtualinvoke $r7.<org.apache.jempbox.xmp.XMPSchema: void merge(org.apache.jempbox.xmp.XMPSchema)>(r4);

     label3:
        goto label1;

     label4:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.jempbox.xmp.XMPMetadata: java.lang.String ENCODING_UTF16LE> = "UTF-16LE";

        <org.apache.jempbox.xmp.XMPMetadata: java.lang.String ENCODING_UTF16BE> = "UTF-16BE";

        <org.apache.jempbox.xmp.XMPMetadata: java.lang.String ENCODING_UTF8> = "UTF-8";

        return;
    }
}
