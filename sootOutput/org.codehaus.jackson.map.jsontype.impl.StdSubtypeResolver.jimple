public class org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver extends org.codehaus.jackson.map.jsontype.SubtypeResolver
{
    protected java.util.LinkedHashSet _registeredSubtypes;

    public void <init>()
    {
        org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver;

        specialinvoke r0.<org.codehaus.jackson.map.jsontype.SubtypeResolver: void <init>()>();

        return;
    }

    public transient void registerSubtypes(org.codehaus.jackson.map.jsontype.NamedType[])
    {
        org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver r0;
        org.codehaus.jackson.map.jsontype.NamedType r3;
        org.codehaus.jackson.map.jsontype.NamedType[] r2;
        int $i0, i1;
        java.util.LinkedHashSet $r1, $r4, $r5;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver;

        r2 := @parameter0: org.codehaus.jackson.map.jsontype.NamedType[];

        $r1 = r0.<org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: java.util.LinkedHashSet _registeredSubtypes>;

        if $r1 != null goto label1;

        $r5 = new java.util.LinkedHashSet;

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>()>();

        r0.<org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: java.util.LinkedHashSet _registeredSubtypes> = $r5;

     label1:
        $i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        r3 = r2[i1];

        $r4 = r0.<org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: java.util.LinkedHashSet _registeredSubtypes>;

        virtualinvoke $r4.<java.util.LinkedHashSet: boolean add(java.lang.Object)>(r3);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public transient void registerSubtypes(java.lang.Class[])
    {
        org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver r2;
        java.lang.Class[] r0;
        org.codehaus.jackson.map.jsontype.NamedType $r3;
        int $i0, i1, i2;
        org.codehaus.jackson.map.jsontype.NamedType[] r1;
        java.lang.Class $r4;

        r2 := @this: org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver;

        r0 := @parameter0: java.lang.Class[];

        $i0 = lengthof r0;

        r1 = newarray (org.codehaus.jackson.map.jsontype.NamedType)[$i0];

        i2 = 0;

        i1 = lengthof r0;

     label1:
        if i2 >= i1 goto label2;

        $r3 = new org.codehaus.jackson.map.jsontype.NamedType;

        $r4 = r0[i2];

        specialinvoke $r3.<org.codehaus.jackson.map.jsontype.NamedType: void <init>(java.lang.Class)>($r4);

        r1[i2] = $r3;

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r2.<org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: void registerSubtypes(org.codehaus.jackson.map.jsontype.NamedType[])>(r1);

        return;
    }

    public java.util.Collection collectAndResolveSubtypes(org.codehaus.jackson.map.introspect.AnnotatedMember, org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.map.AnnotationIntrospector)
    {
        java.util.HashMap $r0;
        org.codehaus.jackson.map.jsontype.NamedType $r6, r24, r25;
        java.util.ArrayList $r11;
        org.codehaus.jackson.map.introspect.AnnotatedMember r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r10, $r16, $r23;
        java.util.LinkedHashSet $r2, $r18;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver r1;
        java.util.Iterator $r13, $r19;
        java.util.Collection $r12;
        org.codehaus.jackson.map.MapperConfig r9;
        org.codehaus.jackson.map.AnnotationIntrospector r3;
        java.util.List $r5;
        java.lang.Class $r7, $r8, $r15, $r17, $r21, $r22;
        java.lang.Object $r14, $r20;

        r1 := @this: org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver;

        r4 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMember;

        r9 := @parameter1: org.codehaus.jackson.map.MapperConfig;

        r3 := @parameter2: org.codehaus.jackson.map.AnnotationIntrospector;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = r1.<org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: java.util.LinkedHashSet _registeredSubtypes>;

        if $r2 == null goto label3;

        $r17 = virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedMember: java.lang.Class getRawType()>();

        $r18 = r1.<org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: java.util.LinkedHashSet _registeredSubtypes>;

        $r19 = virtualinvoke $r18.<java.util.LinkedHashSet: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r24 = (org.codehaus.jackson.map.jsontype.NamedType) $r20;

        $r21 = virtualinvoke r24.<org.codehaus.jackson.map.jsontype.NamedType: java.lang.Class getType()>();

        $z2 = virtualinvoke $r17.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r21);

        if $z2 == 0 goto label2;

        $r22 = virtualinvoke r24.<org.codehaus.jackson.map.jsontype.NamedType: java.lang.Class getType()>();

        $r23 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass constructWithoutSuperTypes(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>($r22, r3, r9);

        virtualinvoke r1.<org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: void _collectAndResolve(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.map.jsontype.NamedType,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector,java.util.HashMap)>($r23, r24, r9, r3, $r0);

     label2:
        goto label1;

     label3:
        $r5 = virtualinvoke r3.<org.codehaus.jackson.map.AnnotationIntrospector: java.util.List findSubtypes(org.codehaus.jackson.map.introspect.Annotated)>(r4);

        if $r5 == null goto label5;

        $r13 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.codehaus.jackson.map.jsontype.NamedType) $r14;

        $r15 = virtualinvoke r25.<org.codehaus.jackson.map.jsontype.NamedType: java.lang.Class getType()>();

        $r16 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass constructWithoutSuperTypes(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>($r15, r3, r9);

        virtualinvoke r1.<org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: void _collectAndResolve(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.map.jsontype.NamedType,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector,java.util.HashMap)>($r16, r25, r9, r3, $r0);

        goto label4;

     label5:
        $r6 = new org.codehaus.jackson.map.jsontype.NamedType;

        $r7 = virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedMember: java.lang.Class getRawType()>();

        specialinvoke $r6.<org.codehaus.jackson.map.jsontype.NamedType: void <init>(java.lang.Class,java.lang.String)>($r7, null);

        $r8 = virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedMember: java.lang.Class getRawType()>();

        $r10 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass constructWithoutSuperTypes(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>($r8, r3, r9);

        virtualinvoke r1.<org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: void _collectAndResolve(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.map.jsontype.NamedType,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector,java.util.HashMap)>($r10, $r6, r9, r3, $r0);

        $r11 = new java.util.ArrayList;

        $r12 = virtualinvoke $r0.<java.util.HashMap: java.util.Collection values()>();

        specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>($r12);

        return $r11;
    }

    public java.util.Collection collectAndResolveSubtypes(org.codehaus.jackson.map.introspect.AnnotatedClass, org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.map.AnnotationIntrospector)
    {
        java.util.HashMap $r0;
        org.codehaus.jackson.map.jsontype.NamedType $r3, r14;
        java.util.ArrayList $r8;
        org.codehaus.jackson.map.introspect.AnnotatedClass r4, $r17;
        java.util.LinkedHashSet $r2, $r11;
        boolean $z0, $z1;
        org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver r1;
        java.util.Iterator $r12;
        java.util.Collection $r9;
        org.codehaus.jackson.map.MapperConfig r6;
        org.codehaus.jackson.map.AnnotationIntrospector r7;
        java.lang.Class $r5, $r10, $r15, $r16;
        java.lang.Object $r13;

        r1 := @this: org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver;

        r4 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r6 := @parameter1: org.codehaus.jackson.map.MapperConfig;

        r7 := @parameter2: org.codehaus.jackson.map.AnnotationIntrospector;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = r1.<org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: java.util.LinkedHashSet _registeredSubtypes>;

        if $r2 == null goto label3;

        $r10 = virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class getRawType()>();

        $r11 = r1.<org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: java.util.LinkedHashSet _registeredSubtypes>;

        $r12 = virtualinvoke $r11.<java.util.LinkedHashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.codehaus.jackson.map.jsontype.NamedType) $r13;

        $r15 = virtualinvoke r14.<org.codehaus.jackson.map.jsontype.NamedType: java.lang.Class getType()>();

        $z1 = virtualinvoke $r10.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r15);

        if $z1 == 0 goto label2;

        $r16 = virtualinvoke r14.<org.codehaus.jackson.map.jsontype.NamedType: java.lang.Class getType()>();

        $r17 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass constructWithoutSuperTypes(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>($r16, r7, r6);

        virtualinvoke r1.<org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: void _collectAndResolve(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.map.jsontype.NamedType,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector,java.util.HashMap)>($r17, r14, r6, r7, $r0);

     label2:
        goto label1;

     label3:
        $r3 = new org.codehaus.jackson.map.jsontype.NamedType;

        $r5 = virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class getRawType()>();

        specialinvoke $r3.<org.codehaus.jackson.map.jsontype.NamedType: void <init>(java.lang.Class,java.lang.String)>($r5, null);

        virtualinvoke r1.<org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: void _collectAndResolve(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.map.jsontype.NamedType,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector,java.util.HashMap)>(r4, $r3, r6, r7, $r0);

        $r8 = new java.util.ArrayList;

        $r9 = virtualinvoke $r0.<java.util.HashMap: java.util.Collection values()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);

        return $r8;
    }

    protected void _collectAndResolve(org.codehaus.jackson.map.introspect.AnnotatedClass, org.codehaus.jackson.map.jsontype.NamedType, org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.map.AnnotationIntrospector, java.util.HashMap)
    {
        java.util.HashMap r0;
        org.codehaus.jackson.map.jsontype.NamedType $r10, $r15, r17, r18, r19;
        org.codehaus.jackson.map.introspect.AnnotatedClass r2, $r8;
        java.lang.String $r12, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Iterator $r4;
        org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver r9;
        org.codehaus.jackson.map.MapperConfig r7;
        org.codehaus.jackson.map.AnnotationIntrospector r1;
        java.util.List $r3;
        java.lang.Object $r5, $r13;
        java.lang.Class $r6, $r11, $r16;

        r9 := @this: org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver;

        r2 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r17 := @parameter1: org.codehaus.jackson.map.jsontype.NamedType;

        r7 := @parameter2: org.codehaus.jackson.map.MapperConfig;

        r1 := @parameter3: org.codehaus.jackson.map.AnnotationIntrospector;

        r0 := @parameter4: java.util.HashMap;

        $z0 = virtualinvoke r17.<org.codehaus.jackson.map.jsontype.NamedType: boolean hasName()>();

        if $z0 != 0 goto label1;

        $r14 = virtualinvoke r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findTypeName(org.codehaus.jackson.map.introspect.AnnotatedClass)>(r2);

        if $r14 == null goto label1;

        $r15 = new org.codehaus.jackson.map.jsontype.NamedType;

        $r16 = virtualinvoke r17.<org.codehaus.jackson.map.jsontype.NamedType: java.lang.Class getType()>();

        specialinvoke $r15.<org.codehaus.jackson.map.jsontype.NamedType: void <init>(java.lang.Class,java.lang.String)>($r16, $r14);

        r17 = $r15;

     label1:
        $z6 = virtualinvoke r0.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r17);

        if $z6 == 0 goto label3;

        $z4 = virtualinvoke r17.<org.codehaus.jackson.map.jsontype.NamedType: boolean hasName()>();

        if $z4 == 0 goto label2;

        $r13 = virtualinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r17);

        r18 = (org.codehaus.jackson.map.jsontype.NamedType) $r13;

        $z5 = virtualinvoke r18.<org.codehaus.jackson.map.jsontype.NamedType: boolean hasName()>();

        if $z5 != 0 goto label2;

        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, r17);

     label2:
        return;

     label3:
        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, r17);

        $r3 = virtualinvoke r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.util.List findSubtypes(org.codehaus.jackson.map.introspect.Annotated)>(r2);

        if $r3 == null goto label6;

        $z1 = interfaceinvoke $r3.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.codehaus.jackson.map.jsontype.NamedType) $r5;

        $r6 = virtualinvoke r19.<org.codehaus.jackson.map.jsontype.NamedType: java.lang.Class getType()>();

        $r8 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass constructWithoutSuperTypes(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>($r6, r1, r7);

        $z3 = virtualinvoke r19.<org.codehaus.jackson.map.jsontype.NamedType: boolean hasName()>();

        if $z3 != 0 goto label5;

        $r10 = new org.codehaus.jackson.map.jsontype.NamedType;

        $r11 = virtualinvoke r19.<org.codehaus.jackson.map.jsontype.NamedType: java.lang.Class getType()>();

        $r12 = virtualinvoke r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findTypeName(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r8);

        specialinvoke $r10.<org.codehaus.jackson.map.jsontype.NamedType: void <init>(java.lang.Class,java.lang.String)>($r11, $r12);

        r19 = $r10;

     label5:
        virtualinvoke r9.<org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: void _collectAndResolve(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.map.jsontype.NamedType,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector,java.util.HashMap)>($r8, r19, r7, r1, r0);

        goto label4;

     label6:
        return;
    }
}
