public final class org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer extends org.codehaus.jackson.map.deser.std.StdDeserializer$PrimitiveOrWrapperDeserializer
{

    public void <init>(java.lang.Class, java.lang.Character)
    {
        org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer r0;
        java.lang.Class r1;
        java.lang.Character r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Character;

        specialinvoke r0.<org.codehaus.jackson.map.deser.std.StdDeserializer$PrimitiveOrWrapperDeserializer: void <init>(java.lang.Class,java.lang.Object)>(r1, r2);

        return;
    }

    public java.lang.Character deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r3;
        org.codehaus.jackson.map.DeserializationContext r4;
        org.codehaus.jackson.map.JsonMappingException $r12;
        java.lang.Character $r8, $r9, $r10;
        org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer r5;
        int $i0, $i1, $i3, $i6;
        java.lang.String $r6;
        org.codehaus.jackson.JsonParser r0;
        char $c2, $c4;
        java.lang.Object $r7;
        java.lang.Class $r11;

        r5 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r4 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r1 != $r2 goto label1;

        $i3 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        if $i3 < 0 goto label3;

        $i6 = (int) 65535;

        if $i3 > $i6 goto label3;

        $c4 = (char) $i3;

        $r10 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4);

        return $r10;

     label1:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r3 goto label3;

        $r6 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 != 1 goto label2;

        $c2 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        $r9 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        return $r9;

     label2:
        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

        $r7 = virtualinvoke r5.<org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer: java.lang.Object getEmptyValue()>();

        $r8 = (java.lang.Character) $r7;

        return $r8;

     label3:
        $r11 = r5.<org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer: java.lang.Class _valueClass>;

        $r12 = virtualinvoke r4.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r11, $r1);

        throw $r12;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        java.lang.Character $r3;
        org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer r0;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer: java.lang.Character deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r3;
    }
}
