public interface  org.eclipse.jetty.server.SessionManager extends java.lang.Object implements org.eclipse.jetty.util.component.LifeCycle
{
    public static final java.lang.String __SessionCookieProperty;
    public static final java.lang.String __DefaultSessionCookie;
    public static final java.lang.String __SessionIdPathParameterNameProperty;
    public static final java.lang.String __DefaultSessionIdPathParameterName;
    public static final java.lang.String __CheckRemoteSessionEncoding;
    public static final java.lang.String __SessionDomainProperty;
    public static final java.lang.String __DefaultSessionDomain;
    public static final java.lang.String __SessionPathProperty;
    public static final java.lang.String __MaxAgeProperty;

    public abstract javax.servlet.http.HttpSession getHttpSession(java.lang.String);

    public abstract javax.servlet.http.HttpSession newHttpSession(javax.servlet.http.HttpServletRequest);

    public abstract boolean getHttpOnly();

    public abstract int getMaxInactiveInterval();

    public abstract void setMaxInactiveInterval(int);

    public abstract void setSessionHandler(org.eclipse.jetty.server.session.SessionHandler);

    public abstract void addEventListener(java.util.EventListener);

    public abstract void removeEventListener(java.util.EventListener);

    public abstract void clearEventListeners();

    public abstract org.eclipse.jetty.http.HttpCookie getSessionCookie(javax.servlet.http.HttpSession, java.lang.String, boolean);

    public abstract org.eclipse.jetty.server.SessionIdManager getSessionIdManager();

    public abstract org.eclipse.jetty.server.SessionIdManager getMetaManager();

    public abstract void setSessionIdManager(org.eclipse.jetty.server.SessionIdManager);

    public abstract boolean isValid(javax.servlet.http.HttpSession);

    public abstract java.lang.String getNodeId(javax.servlet.http.HttpSession);

    public abstract java.lang.String getClusterId(javax.servlet.http.HttpSession);

    public abstract org.eclipse.jetty.http.HttpCookie access(javax.servlet.http.HttpSession, boolean);

    public abstract void complete(javax.servlet.http.HttpSession);

    public abstract void setSessionIdPathParameterName(java.lang.String);

    public abstract java.lang.String getSessionIdPathParameterName();

    public abstract java.lang.String getSessionIdPathParameterNamePrefix();

    public abstract boolean isUsingCookies();

    public abstract boolean isUsingURLs();

    public abstract java.util.Set getDefaultSessionTrackingModes();

    public abstract java.util.Set getEffectiveSessionTrackingModes();

    public abstract void setSessionTrackingModes(java.util.Set);

    public abstract javax.servlet.SessionCookieConfig getSessionCookieConfig();

    public abstract boolean isCheckingRemoteSessionIdEncoding();

    public abstract void setCheckingRemoteSessionIdEncoding(boolean);

    static void <clinit>()
    {
        <org.eclipse.jetty.server.SessionManager: java.lang.String __MaxAgeProperty> = "org.eclipse.jetty.servlet.MaxAge";

        <org.eclipse.jetty.server.SessionManager: java.lang.String __SessionPathProperty> = "org.eclipse.jetty.servlet.SessionPath";

        <org.eclipse.jetty.server.SessionManager: java.lang.String __SessionDomainProperty> = "org.eclipse.jetty.servlet.SessionDomain";

        <org.eclipse.jetty.server.SessionManager: java.lang.String __CheckRemoteSessionEncoding> = "org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding";

        <org.eclipse.jetty.server.SessionManager: java.lang.String __DefaultSessionIdPathParameterName> = "jsessionid";

        <org.eclipse.jetty.server.SessionManager: java.lang.String __SessionIdPathParameterNameProperty> = "org.eclipse.jetty.servlet.SessionIdPathParameterName";

        <org.eclipse.jetty.server.SessionManager: java.lang.String __DefaultSessionCookie> = "JSESSIONID";

        <org.eclipse.jetty.server.SessionManager: java.lang.String __SessionCookieProperty> = "org.eclipse.jetty.servlet.SessionCookie";

        <org.eclipse.jetty.server.SessionManager: java.lang.String __DefaultSessionDomain> = null;

        return;
    }
}
