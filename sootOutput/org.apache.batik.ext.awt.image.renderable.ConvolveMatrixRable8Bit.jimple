public class org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit extends org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable implements org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable
{
    java.awt.image.Kernel kernel;
    java.awt.Point target;
    float bias;
    boolean kernelHasNegValues;
    org.apache.batik.ext.awt.image.PadMode edgeMode;
    float[] kernelUnitLength;
    boolean preserveAlpha;

    public void <init>(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r0;
        float[] $r2;
        org.apache.batik.ext.awt.image.renderable.Filter r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: void <init>(org.apache.batik.ext.awt.image.renderable.Filter)>(r1);

        $r2 = newarray (float)[2];

        r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float[] kernelUnitLength> = $r2;

        r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: boolean preserveAlpha> = 0;

        return;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter getSource()
    {
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r0;
        java.util.Vector $r1;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.renderable.Filter $r3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.renderable.Filter) $r2;

        return $r3;
    }

    public void setSource(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(org.apache.batik.ext.awt.image.renderable.Filter)>(r1);

        return;
    }

    public java.awt.image.Kernel getKernel()
    {
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r0;
        java.awt.image.Kernel $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: java.awt.image.Kernel kernel>;

        return $r1;
    }

    public void setKernel(java.awt.image.Kernel)
    {
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r0;
        float[] $r2;
        byte $b1;
        java.awt.image.Kernel r1;
        int $i0, i2, $i3;
        float $f0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        r1 := @parameter0: java.awt.image.Kernel;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: java.awt.image.Kernel kernel> = r1;

        r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: boolean kernelHasNegValues> = 0;

        $r2 = virtualinvoke r1.<java.awt.image.Kernel: float[] getKernelData(float[])>(null);

        i2 = 0;

        goto label3;

     label1:
        $f0 = $r2[i2];

        $b1 = $f0 cmpg 0.0F;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label2;

        r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: boolean kernelHasNegValues> = 1;

        goto label4;

     label2:
        i2 = i2 + 1;

     label3:
        $i0 = lengthof $r2;

        if i2 < $i0 goto label1;

     label4:
        return;
    }

    public java.awt.Point getTarget()
    {
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r0;
        java.awt.Point $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: java.awt.Point target>;

        $r2 = virtualinvoke $r1.<java.awt.geom.Point2D: java.lang.Object clone()>();

        $r3 = (java.awt.Point) $r2;

        return $r3;
    }

    public void setTarget(java.awt.Point)
    {
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r0;
        java.awt.Point r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        r1 := @parameter0: java.awt.Point;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        $r2 = virtualinvoke r1.<java.awt.geom.Point2D: java.lang.Object clone()>();

        $r3 = (java.awt.Point) $r2;

        r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: java.awt.Point target> = $r3;

        return;
    }

    public double getBias()
    {
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r0;
        float $f0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        $f0 = r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float bias>;

        $d0 = (double) $f0;

        return $d0;
    }

    public void setBias(double)
    {
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r0;
        float $f0;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        d0 := @parameter0: double;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        $f0 = (float) d0;

        r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float bias> = $f0;

        return;
    }

    public org.apache.batik.ext.awt.image.PadMode getEdgeMode()
    {
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r0;
        org.apache.batik.ext.awt.image.PadMode $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: org.apache.batik.ext.awt.image.PadMode edgeMode>;

        return $r1;
    }

    public void setEdgeMode(org.apache.batik.ext.awt.image.PadMode)
    {
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r0;
        org.apache.batik.ext.awt.image.PadMode r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.PadMode;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: org.apache.batik.ext.awt.image.PadMode edgeMode> = r1;

        return;
    }

    public double[] getKernelUnitLength()
    {
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r0;
        double[] r2;
        float[] $r1, $r3, $r4;
        float $f0, $f1;
        double $d0, $d1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float[] kernelUnitLength>;

        if $r1 != null goto label1;

        return null;

     label1:
        r2 = newarray (double)[2];

        $r3 = r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float[] kernelUnitLength>;

        $f0 = $r3[0];

        $d0 = (double) $f0;

        r2[0] = $d0;

        $r4 = r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float[] kernelUnitLength>;

        $f1 = $r4[1];

        $d1 = (double) $f1;

        r2[1] = $d1;

        return r2;
    }

    public void setKernelUnitLength(double[])
    {
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r0;
        double[] r1;
        float[] $r2, $r3, $r4, $r5;
        float $f0, $f1;
        double $d0, $d1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        r1 := @parameter0: double[];

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        if r1 != null goto label1;

        r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float[] kernelUnitLength> = null;

        return;

     label1:
        $r2 = r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float[] kernelUnitLength>;

        if $r2 != null goto label2;

        $r5 = newarray (float)[2];

        r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float[] kernelUnitLength> = $r5;

     label2:
        $r3 = r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float[] kernelUnitLength>;

        $d0 = r1[0];

        $f0 = (float) $d0;

        $r3[0] = $f0;

        $r4 = r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float[] kernelUnitLength>;

        $d1 = r1[1];

        $f1 = (float) $d1;

        $r4[1] = $f1;

        return;
    }

    public boolean getPreserveAlpha()
    {
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        $z0 = r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: boolean preserveAlpha>;

        return $z0;
    }

    public void setPreserveAlpha(boolean)
    {
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r0;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: boolean preserveAlpha> = z0;

        return;
    }

    public void fixAlpha(java.awt.image.BufferedImage)
    {
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r3;
        java.awt.image.BufferedImage r0;
        java.awt.image.SampleModel $r2;
        java.awt.image.ColorModel $r1;
        java.awt.image.WritableRaster $r4, $r5;
        boolean $z0, $z1, $z2;

        r3 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        r0 := @parameter0: java.awt.image.BufferedImage;

        $r1 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $z0 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.awt.image.BufferedImage: boolean isAlphaPremultiplied()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r2 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.SampleModel getSampleModel()>();

        $z2 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: boolean is_INT_PACK_Data(java.awt.image.SampleModel,boolean)>($r2, 1);

        if $z2 == 0 goto label3;

        $r5 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: void fixAlpha_INT_PACK(java.awt.image.WritableRaster)>($r5);

        goto label4;

     label3:
        $r4 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: void fixAlpha_FALLBACK(java.awt.image.WritableRaster)>($r4);

     label4:
        return;
    }

    public void fixAlpha_INT_PACK(java.awt.image.WritableRaster)
    {
        int[][] $r5;
        java.awt.image.SampleModel $r1;
        int[] r6;
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r7;
        java.awt.image.DataBuffer $r3;
        java.awt.image.DataBufferInt r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, i13, i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i24, i25;
        java.awt.image.SinglePixelPackedSampleModel r2;
        java.awt.image.WritableRaster r0;

        r7 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r2 = (java.awt.image.SinglePixelPackedSampleModel) $r1;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i1 = virtualinvoke r2.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $r3 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r4 = (java.awt.image.DataBufferInt) $r3;

        $i2 = virtualinvoke r4.<java.awt.image.DataBuffer: int getOffset()>();

        $i3 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i4 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i5 = $i3 - $i4;

        $i6 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i7 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i8 = $i6 - $i7;

        $i9 = virtualinvoke r2.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i5, $i8);

        i10 = $i2 + $i9;

        $r5 = virtualinvoke r4.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        r6 = $r5[0];

        i22 = 0;

        goto label7;

     label1:
        $i12 = i22 * $i1;

        i23 = i10 + $i12;

        i13 = i23 + $i0;

        goto label6;

     label2:
        i14 = r6[i23];

        i24 = i14 >>> 24;

        $i15 = i14 >> 16;

        i25 = $i15 & 255;

        if i24 >= i25 goto label3;

        i24 = i25;

     label3:
        $i16 = i14 >> 8;

        $i21 = $i16 & 255;

        if i24 >= $i21 goto label4;

        i24 = $i21;

     label4:
        $i20 = i14 & 255;

        if i24 >= $i20 goto label5;

        i24 = $i20;

     label5:
        $i18 = i14 & 16777215;

        $i17 = i24 << 24;

        $i19 = $i18 | $i17;

        r6[i23] = $i19;

        i23 = i23 + 1;

     label6:
        if i23 < i13 goto label2;

        i22 = i22 + 1;

     label7:
        $i11 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        if i22 < $i11 goto label1;

        return;
    }

    public void fixAlpha_FALLBACK(java.awt.image.WritableRaster)
    {
        int[] $r1, r3;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16;
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r2;
        java.awt.image.WritableRaster r0;

        r2 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i2 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i3 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        $i4 = $i2 + $i3;

        i5 = $i4 - 1;

        $i6 = virtualinvoke r0.<java.awt.image.Raster: int getNumBands()>();

        r3 = null;

        i12 = $i2;

        goto label7;

     label1:
        $r1 = virtualinvoke r0.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>($i0, i12, $i1, 1, r3);

        r3 = $r1;

        i13 = 0;

        i14 = 0;

        goto label6;

     label2:
        i15 = $r1[i13];

        i16 = 1;

        goto label5;

     label3:
        $i7 = i13 + i16;

        $i8 = $r1[$i7];

        if $i8 <= i15 goto label4;

        $i9 = i13 + i16;

        i15 = $r1[$i9];

     label4:
        i16 = i16 + 1;

     label5:
        if i16 < $i6 goto label3;

        $i10 = i13 + $i6;

        $i11 = $i10 - 1;

        $r1[$i11] = i15;

        i13 = i13 + $i6;

        i14 = i14 + 1;

     label6:
        if i14 < $i1 goto label2;

        virtualinvoke r0.<java.awt.image.WritableRaster: void setPixels(int,int,int,int,int[])>($i0, i12, $i1, 1, $r1);

        i12 = i12 + 1;

     label7:
        if i12 <= i5 goto label1;

        return;
    }

    public java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)
    {
        java.awt.image.SampleModel $r39;
        byte $b6, $b33, $b34;
        org.apache.batik.ext.awt.image.rendered.AffineRed $r94;
        float[] $r4, $r64, $r65, $r66, $r67;
        java.awt.image.Raster $r25;
        java.awt.geom.Rectangle2D$Double $r76, $r79;
        java.awt.image.RenderedImage $r15;
        java.awt.image.renderable.RenderContext r0, $r78;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, i9, $i10, $i11, i12, i13, i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i35, $i36, $i38;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r74;
        java.awt.image.WritableRaster $r26, $r35, $r38, $r40, $r43, $r47, $r48;
        java.awt.geom.Rectangle2D $r5, $r18;
        java.awt.image.ConvolveOp $r83;
        org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit r3;
        java.awt.image.DirectColorModel $r86;
        java.awt.geom.AffineTransform $r2, $r11, $r77;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r16, r72;
        org.apache.batik.ext.awt.image.PadMode $r52, $r58, $r59, $r62;
        java.awt.image.Kernel $r6, $r7, $r23, $r28, $r30;
        java.awt.RenderingHints $r1, r69, $r75;
        java.awt.Point $r8, $r9, $r27, $r29, $r89;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.awt.Shape $r17, $r70, r71;
        java.awt.image.BufferedImage $r56, r73, $r84, $r85, $r87, $r88, $r90;
        org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed $r92;
        org.apache.batik.ext.awt.image.renderable.Filter $r13;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        java.awt.image.DataBuffer $r41;
        java.awt.Rectangle $r20, $r21, $r45, $r51, $r61, $r91;
        org.apache.batik.ext.awt.image.rendered.PadRed $r81, $r93;
        java.awt.color.ColorSpace $r33;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, d77, d78;
        java.lang.IllegalArgumentException $r80, $r82;
        java.awt.image.ColorModel $r24, r36, $r54;

        r3 := @this: org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit;

        r0 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.RenderingHints getRenderingHints()>();

        r69 = $r1;

        if $r1 != null goto label01;

        $r75 = new java.awt.RenderingHints;

        specialinvoke $r75.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r69 = $r75;

     label01:
        $r2 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.geom.AffineTransform getTransform()>();

        $d0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d2 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getShearX()>();

        $d3 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getShearY()>();

        $d4 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d5 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $d7 = $d0 * $d0;

        $d6 = $d3 * $d3;

        $d8 = $d7 + $d6;

        d77 = staticinvoke <java.lang.Math: double sqrt(double)>($d8);

        $d10 = $d1 * $d1;

        $d9 = $d2 * $d2;

        $d11 = $d10 + $d9;

        d78 = staticinvoke <java.lang.Math: double sqrt(double)>($d11);

        $r4 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float[] kernelUnitLength>;

        if $r4 == null goto label03;

        $r64 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float[] kernelUnitLength>;

        $f1 = $r64[0];

        $d75 = (double) $f1;

        $b33 = $d75 cmpl 0.0;

        $i35 = (int) $b33;

        if $i35 <= 0 goto label02;

        $r67 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float[] kernelUnitLength>;

        $f5 = $r67[0];

        $f6 = 1.0F / $f5;

        d77 = (double) $f6;

     label02:
        $r65 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float[] kernelUnitLength>;

        $f2 = $r65[1];

        $d76 = (double) $f2;

        $b34 = $d76 cmpl 0.0;

        $i36 = (int) $b34;

        if $i36 <= 0 goto label03;

        $r66 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float[] kernelUnitLength>;

        $f3 = $r66[1];

        $f4 = 1.0F / $f3;

        d78 = (double) $f4;

     label03:
        $r70 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.Shape getAreaOfInterest()>();

        r71 = $r70;

        if $r70 != null goto label04;

        r71 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.geom.Rectangle2D getBounds2D()>();

     label04:
        $r5 = interfaceinvoke r71.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r6 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: java.awt.image.Kernel kernel>;

        $i0 = virtualinvoke $r6.<java.awt.image.Kernel: int getWidth()>();

        $r7 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: java.awt.image.Kernel kernel>;

        $i1 = virtualinvoke $r7.<java.awt.image.Kernel: int getHeight()>();

        $r8 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: java.awt.Point target>;

        $i31 = $r8.<java.awt.Point: int x>;

        $r9 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: java.awt.Point target>;

        $i32 = $r9.<java.awt.Point: int y>;

        $d12 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getX()>();

        $d13 = (double) $i31;

        $d14 = $d13 / d77;

        $d71 = $d12 - $d14;

        $d15 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getY()>();

        $d16 = (double) $i32;

        $d17 = $d16 / d78;

        $d72 = $d15 - $d17;

        $d18 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getWidth()>();

        $d21 = $d71 + $d18;

        $i2 = $i0 - 1;

        $d19 = (double) $i2;

        $d20 = $d19 / d77;

        $d73 = $d21 + $d20;

        $d22 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getHeight()>();

        $d25 = $d72 + $d22;

        $i3 = $i1 - 1;

        $d23 = (double) $i3;

        $d24 = $d23 / d78;

        $d74 = $d25 + $d24;

        $r76 = new java.awt.geom.Rectangle2D$Double;

        $d26 = staticinvoke <java.lang.Math: double floor(double)>($d71);

        $d27 = staticinvoke <java.lang.Math: double floor(double)>($d72);

        $d28 = staticinvoke <java.lang.Math: double floor(double)>($d71);

        $d29 = $d73 - $d28;

        $d30 = staticinvoke <java.lang.Math: double ceil(double)>($d29);

        $d31 = staticinvoke <java.lang.Math: double floor(double)>($d72);

        $d32 = $d74 - $d31;

        $d33 = staticinvoke <java.lang.Math: double ceil(double)>($d32);

        specialinvoke $r76.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d26, $d27, $d30, $d33);

        $r11 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>(d77, d78);

        $r77 = new java.awt.geom.AffineTransform;

        $d37 = $d0 / d77;

        $d36 = $d3 / d77;

        $d35 = $d2 / d78;

        $d34 = $d1 / d78;

        specialinvoke $r77.<java.awt.geom.AffineTransform: void <init>(double,double,double,double,double,double)>($d37, $d36, $d35, $d34, $d4, $d5);

        $r13 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r78 = new java.awt.image.renderable.RenderContext;

        specialinvoke $r78.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>($r11, $r76, r69);

        $r15 = interfaceinvoke $r13.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r78);

        if $r15 != null goto label05;

        return null;

     label05:
        $r16 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: org.apache.batik.ext.awt.image.rendered.CachableRed convertSourceCS(java.awt.image.RenderedImage)>($r15);

        r72 = $r16;

        $r17 = virtualinvoke $r11.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r71);

        $r18 = interfaceinvoke $r17.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r79 = new java.awt.geom.Rectangle2D$Double;

        $d38 = virtualinvoke $r18.<java.awt.geom.RectangularShape: double getX()>();

        $d39 = (double) $i31;

        $d40 = $d38 - $d39;

        $d41 = staticinvoke <java.lang.Math: double floor(double)>($d40);

        $d42 = virtualinvoke $r18.<java.awt.geom.RectangularShape: double getY()>();

        $d43 = (double) $i32;

        $d44 = $d42 - $d43;

        $d45 = staticinvoke <java.lang.Math: double floor(double)>($d44);

        $d46 = virtualinvoke $r18.<java.awt.geom.RectangularShape: double getX()>();

        $d47 = virtualinvoke $r18.<java.awt.geom.RectangularShape: double getWidth()>();

        $d48 = $d46 + $d47;

        $d49 = staticinvoke <java.lang.Math: double ceil(double)>($d48);

        $d50 = virtualinvoke $r18.<java.awt.geom.RectangularShape: double getX()>();

        $d51 = staticinvoke <java.lang.Math: double floor(double)>($d50);

        $d53 = $d49 - $d51;

        $i4 = $i0 - 1;

        $d52 = (double) $i4;

        $d54 = $d53 + $d52;

        $d55 = virtualinvoke $r18.<java.awt.geom.RectangularShape: double getY()>();

        $d56 = virtualinvoke $r18.<java.awt.geom.RectangularShape: double getHeight()>();

        $d57 = $d55 + $d56;

        $d58 = staticinvoke <java.lang.Math: double ceil(double)>($d57);

        $d59 = virtualinvoke $r18.<java.awt.geom.RectangularShape: double getY()>();

        $d60 = staticinvoke <java.lang.Math: double floor(double)>($d59);

        $d62 = $d58 - $d60;

        $i5 = $i1 - 1;

        $d61 = (double) $i5;

        $d63 = $d62 + $d61;

        specialinvoke $r79.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d41, $d45, $d54, $d63);

        $r20 = virtualinvoke $r79.<java.awt.geom.RectangularShape: java.awt.Rectangle getBounds()>();

        $r21 = interfaceinvoke $r16.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $z0 = virtualinvoke $r20.<java.awt.Rectangle: boolean equals(java.lang.Object)>($r21);

        if $z0 != 0 goto label07;

        $r59 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: org.apache.batik.ext.awt.image.PadMode edgeMode>;

        $r58 = <org.apache.batik.ext.awt.image.PadMode: org.apache.batik.ext.awt.image.PadMode WRAP>;

        if $r59 != $r58 goto label06;

        $r80 = new java.lang.IllegalArgumentException;

        specialinvoke $r80.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("edgeMode=\"wrap\" is not supported by ConvolveMatrix.");

        throw $r80;

     label06:
        $r81 = new org.apache.batik.ext.awt.image.rendered.PadRed;

        $r61 = virtualinvoke $r79.<java.awt.geom.RectangularShape: java.awt.Rectangle getBounds()>();

        $r62 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: org.apache.batik.ext.awt.image.PadMode edgeMode>;

        specialinvoke $r81.<org.apache.batik.ext.awt.image.rendered.PadRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,org.apache.batik.ext.awt.image.PadMode,java.awt.RenderingHints)>($r16, $r61, $r62, r69);

        r72 = $r81;

     label07:
        $f0 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: float bias>;

        $d64 = (double) $f0;

        $b6 = $d64 cmpl 0.0;

        if $b6 == 0 goto label08;

        $r82 = new java.lang.IllegalArgumentException;

        specialinvoke $r82.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only bias equal to zero is supported in ConvolveMatrix.");

        throw $r82;

     label08:
        $r83 = new java.awt.image.ConvolveOp;

        $r23 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: java.awt.image.Kernel kernel>;

        specialinvoke $r83.<java.awt.image.ConvolveOp: void <init>(java.awt.image.Kernel,int,java.awt.RenderingHints)>($r23, 1, r69);

        $r24 = interfaceinvoke r72.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r25 = interfaceinvoke r72.<java.awt.image.RenderedImage: java.awt.image.Raster getData()>();

        $r26 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.WritableRaster makeRasterWritable(java.awt.image.Raster,int,int)>($r25, 0, 0);

        $r27 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: java.awt.Point target>;

        $i7 = $r27.<java.awt.Point: int x>;

        $r28 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: java.awt.image.Kernel kernel>;

        $i8 = virtualinvoke $r28.<java.awt.image.Kernel: int getXOrigin()>();

        i9 = $i7 - $i8;

        $r29 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: java.awt.Point target>;

        $i10 = $r29.<java.awt.Point: int y>;

        $r30 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: java.awt.image.Kernel kernel>;

        $i11 = virtualinvoke $r30.<java.awt.image.Kernel: int getYOrigin()>();

        i12 = $i10 - $i11;

        $d65 = virtualinvoke $r79.<java.awt.geom.RectangularShape: double getX()>();

        $d66 = (double) i9;

        $d67 = $d65 + $d66;

        i13 = (int) $d67;

        $d68 = virtualinvoke $r79.<java.awt.geom.RectangularShape: double getY()>();

        $d69 = (double) i12;

        $d70 = $d68 + $d69;

        i14 = (int) $d70;

        $z1 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: boolean preserveAlpha>;

        if $z1 != 0 goto label10;

        $r54 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,java.awt.image.ColorModel,boolean)>($r26, $r24, 1);

        $r84 = new java.awt.image.BufferedImage;

        $z7 = virtualinvoke $r54.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r84.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r54, $r26, $z7, null);

        $r56 = interfaceinvoke $r83.<java.awt.image.BufferedImageOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r84, null);

        r73 = $r56;

        $z8 = r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: boolean kernelHasNegValues>;

        if $z8 == 0 goto label09;

        virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.ConvolveMatrixRable8Bit: void fixAlpha(java.awt.image.BufferedImage)>($r56);

     label09:
        goto label11;

     label10:
        $r85 = new java.awt.image.BufferedImage;

        $z2 = virtualinvoke $r24.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r85.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r24, $r26, $z2, null);

        $r86 = new java.awt.image.DirectColorModel;

        $r33 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1004);

        $i38 = (int) 65280;

        specialinvoke $r86.<java.awt.image.DirectColorModel: void <init>(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int)>($r33, 24, 16711680, $i38, 255, 0, 0, 3);

        $r87 = new java.awt.image.BufferedImage;

        $i15 = virtualinvoke $r26.<java.awt.image.Raster: int getWidth()>();

        $i16 = virtualinvoke $r26.<java.awt.image.Raster: int getHeight()>();

        $r35 = virtualinvoke $r86.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i15, $i16);

        $z3 = virtualinvoke $r86.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r87.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r86, $r35, $z3, null);

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r85, $r87);

        r36 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel Linear_sRGB_Unpre>;

        $r88 = new java.awt.image.BufferedImage;

        $i17 = virtualinvoke $r26.<java.awt.image.Raster: int getWidth()>();

        $i18 = virtualinvoke $r26.<java.awt.image.Raster: int getHeight()>();

        $r38 = virtualinvoke r36.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i17, $i18);

        $z4 = virtualinvoke r36.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r88.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>(r36, $r38, $z4, null);

        r73 = $r88;

        $i19 = virtualinvoke $r26.<java.awt.image.Raster: int getWidth()>();

        $i20 = virtualinvoke $r26.<java.awt.image.Raster: int getHeight()>();

        $r39 = virtualinvoke $r86.<java.awt.image.ColorModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>($i19, $i20);

        $r40 = virtualinvoke $r88.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r41 = virtualinvoke $r40.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $r89 = new java.awt.Point;

        specialinvoke $r89.<java.awt.Point: void <init>(int,int)>(0, 0);

        $r43 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)>($r39, $r41, $r89);

        $r90 = new java.awt.image.BufferedImage;

        $z5 = virtualinvoke $r86.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r90.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r86, $r43, $z5, null);

        interfaceinvoke $r83.<java.awt.image.BufferedImageOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r87, $r90);

        $r45 = virtualinvoke $r26.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r91 = new java.awt.Rectangle;

        $i21 = $r45.<java.awt.Rectangle: int x>;

        $i26 = $i21 - i9;

        $i22 = $r45.<java.awt.Rectangle: int y>;

        $i25 = $i22 - i12;

        $i24 = $r45.<java.awt.Rectangle: int width>;

        $i23 = $r45.<java.awt.Rectangle: int height>;

        specialinvoke $r91.<java.awt.Rectangle: void <init>(int,int,int,int)>($i26, $i25, $i24, $i23);

        $i27 = virtualinvoke $r26.<java.awt.image.Raster: int getNumBands()>();

        $i28 = $i27 - 1;

        $r47 = virtualinvoke $r88.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r48 = virtualinvoke $r88.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $i29 = virtualinvoke $r48.<java.awt.image.Raster: int getNumBands()>();

        $i30 = $i29 - 1;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyBand(java.awt.image.Raster,java.awt.Rectangle,int,java.awt.image.WritableRaster,java.awt.Rectangle,int)>($r26, $r45, $i28, $r47, $r91, $i30);

     label11:
        $r92 = new org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;

        specialinvoke $r92.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: void <init>(java.awt.image.BufferedImage,int,int)>(r73, i13, i14);

        $r93 = new org.apache.batik.ext.awt.image.rendered.PadRed;

        $r51 = virtualinvoke $r18.<java.awt.geom.RectangularShape: java.awt.Rectangle getBounds()>();

        $r52 = <org.apache.batik.ext.awt.image.PadMode: org.apache.batik.ext.awt.image.PadMode ZERO_PAD>;

        specialinvoke $r93.<org.apache.batik.ext.awt.image.rendered.PadRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,org.apache.batik.ext.awt.image.PadMode,java.awt.RenderingHints)>($r92, $r51, $r52, r69);

        r74 = $r93;

        $z6 = virtualinvoke $r77.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z6 != 0 goto label12;

        $r94 = new org.apache.batik.ext.awt.image.rendered.AffineRed;

        specialinvoke $r94.<org.apache.batik.ext.awt.image.rendered.AffineRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.geom.AffineTransform,java.awt.RenderingHints)>($r93, $r77, null);

        r74 = $r94;

     label12:
        return r74;
    }
}
