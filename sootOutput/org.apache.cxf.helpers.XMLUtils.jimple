public final class org.apache.cxf.helpers.XMLUtils extends java.lang.Object
{
    private static final java.util.logging.Logger LOG;
    private static final java.util.Map DOCUMENT_BUILDER_FACTORIES;
    private static final java.util.Map TRANSFORMER_FACTORIES;
    private static final java.util.regex.Pattern XML_ESCAPE_CHARS;
    private static final java.util.Map XML_ENCODING_TABLE;

    private void <init>()
    {
        org.apache.cxf.helpers.XMLUtils r0;

        r0 := @this: org.apache.cxf.helpers.XMLUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static javax.xml.transform.TransformerFactory getTransformerFactory()
    {
        java.lang.Thread $r0;
        java.util.Map $r2, $r5;
        java.lang.Object $r3;
        java.lang.Class $r7;
        java.lang.ClassLoader $r1, r8;
        javax.xml.transform.TransformerFactory $r4, $r6, r9;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r8 = $r1;

        if $r1 != null goto label1;

        $r7 = class "Lorg/apache/cxf/helpers/XMLUtils;";

        r8 = virtualinvoke $r7.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label1:
        if r8 != null goto label2;

        $r6 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();

        return $r6;

     label2:
        $r2 = <org.apache.cxf.helpers.XMLUtils: java.util.Map TRANSFORMER_FACTORIES>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r9 = (javax.xml.transform.TransformerFactory) $r3;

        if r9 != null goto label3;

        $r4 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();

        r9 = $r4;

        $r5 = <org.apache.cxf.helpers.XMLUtils: java.util.Map TRANSFORMER_FACTORIES>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r4);

     label3:
        return r9;
    }

    private static javax.xml.parsers.DocumentBuilderFactory getDocumentBuilderFactory()
    {
        java.lang.Thread $r0;
        java.util.Map $r2, $r5;
        java.lang.Object $r3;
        java.lang.Class $r7;
        java.lang.ClassLoader $r1, r8;
        javax.xml.parsers.DocumentBuilderFactory $r4, $r6, r9;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r8 = $r1;

        if $r1 != null goto label1;

        $r7 = class "Lorg/apache/cxf/helpers/XMLUtils;";

        r8 = virtualinvoke $r7.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label1:
        if r8 != null goto label2;

        $r6 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        return $r6;

     label2:
        $r2 = <org.apache.cxf.helpers.XMLUtils: java.util.Map DOCUMENT_BUILDER_FACTORIES>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r9 = (javax.xml.parsers.DocumentBuilderFactory) $r3;

        if r9 != null goto label3;

        $r4 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        r9 = $r4;

        virtualinvoke $r4.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(1);

        $r5 = <org.apache.cxf.helpers.XMLUtils: java.util.Map DOCUMENT_BUILDER_FACTORIES>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r4);

     label3:
        return r9;
    }

    public static javax.xml.transform.Transformer newTransformer() throws javax.xml.transform.TransformerConfigurationException
    {
        javax.xml.transform.Transformer $r1;
        javax.xml.transform.TransformerFactory $r0;

        $r0 = staticinvoke <org.apache.cxf.helpers.XMLUtils: javax.xml.transform.TransformerFactory getTransformerFactory()>();

        $r1 = virtualinvoke $r0.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer()>();

        return $r1;
    }

    public static javax.xml.transform.Transformer newTransformer(int) throws javax.xml.transform.TransformerConfigurationException
    {
        java.lang.Throwable $r5;
        javax.xml.transform.Transformer $r1, $r4;
        int i0;
        javax.xml.transform.TransformerFactory $r0, $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        if i0 <= 0 goto label5;

        $r2 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();

     label1:
        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke $r2.<javax.xml.transform.TransformerFactory: void setAttribute(java.lang.String,java.lang.Object)>("indent-number", $r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        $r4 = virtualinvoke $r2.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer()>();

        return $r4;

     label5:
        $r0 = staticinvoke <org.apache.cxf.helpers.XMLUtils: javax.xml.transform.TransformerFactory getTransformerFactory()>();

        $r1 = virtualinvoke $r0.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer()>();

        return $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static javax.xml.parsers.DocumentBuilder getParser() throws javax.xml.parsers.ParserConfigurationException
    {
        javax.xml.parsers.DocumentBuilderFactory $r0;
        javax.xml.parsers.DocumentBuilder $r1;

        $r0 = staticinvoke <org.apache.cxf.helpers.XMLUtils: javax.xml.parsers.DocumentBuilderFactory getDocumentBuilderFactory()>();

        $r1 = virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        return $r1;
    }

    public static org.w3c.dom.Document parse(org.xml.sax.InputSource) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException, java.io.IOException
    {
        org.xml.sax.InputSource r1;
        org.w3c.dom.Document $r2;
        javax.xml.parsers.DocumentBuilder $r0;

        r1 := @parameter0: org.xml.sax.InputSource;

        $r0 = staticinvoke <org.apache.cxf.helpers.XMLUtils: javax.xml.parsers.DocumentBuilder getParser()>();

        $r2 = virtualinvoke $r0.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>(r1);

        return $r2;
    }

    public static org.w3c.dom.Document parse(java.io.File) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException, java.io.IOException
    {
        java.io.File r1;
        org.w3c.dom.Document $r2;
        javax.xml.parsers.DocumentBuilder $r0;

        r1 := @parameter0: java.io.File;

        $r0 = staticinvoke <org.apache.cxf.helpers.XMLUtils: javax.xml.parsers.DocumentBuilder getParser()>();

        $r2 = virtualinvoke $r0.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.File)>(r1);

        return $r2;
    }

    public static org.w3c.dom.Document parse(java.io.InputStream) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException, java.io.IOException
    {
        org.w3c.dom.Document $r5;
        javax.xml.parsers.DocumentBuilder $r4;
        java.util.logging.Logger $r2, $r3;
        java.io.InputStream r0;
        java.util.logging.Level $r1;
        boolean $z0;

        r0 := @parameter0: java.io.InputStream;

        if r0 != null goto label1;

        $r2 = <org.apache.cxf.helpers.XMLUtils: java.util.logging.Logger LOG>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.cxf.helpers.XMLUtils: java.util.logging.Logger LOG>;

        virtualinvoke $r3.<java.util.logging.Logger: void fine(java.lang.String)>("XMLUtils trying to parse a null inputstream");

     label1:
        $r4 = staticinvoke <org.apache.cxf.helpers.XMLUtils: javax.xml.parsers.DocumentBuilder getParser()>();

        $r5 = virtualinvoke $r4.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>(r0);

        return $r5;
    }

    public static org.w3c.dom.Document parse(java.lang.String) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException, java.io.IOException
    {
        byte[] $r1;
        java.lang.String r0;
        org.w3c.dom.Document $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <org.apache.cxf.helpers.XMLUtils: org.w3c.dom.Document parse(byte[])>($r1);

        return $r2;
    }

    public static org.w3c.dom.Document parse(byte[]) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException, java.io.IOException
    {
        byte[] r0;
        java.util.logging.Logger $r5, $r6;
        java.util.logging.Level $r4;
        java.io.ByteArrayInputStream $r2;
        org.w3c.dom.Document $r3;
        javax.xml.parsers.DocumentBuilder $r1;
        boolean $z0;

        r0 := @parameter0: byte[];

        if r0 != null goto label2;

        $r5 = <org.apache.cxf.helpers.XMLUtils: java.util.logging.Logger LOG>;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r5.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r4);

        if $z0 == 0 goto label1;

        $r6 = <org.apache.cxf.helpers.XMLUtils: java.util.logging.Logger LOG>;

        virtualinvoke $r6.<java.util.logging.Logger: void fine(java.lang.String)>("XMLUtils trying to parse a null bytes");

     label1:
        return null;

     label2:
        $r1 = staticinvoke <org.apache.cxf.helpers.XMLUtils: javax.xml.parsers.DocumentBuilder getParser()>();

        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        $r3 = virtualinvoke $r1.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>($r2);

        return $r3;
    }

    public static org.w3c.dom.Document newDocument() throws javax.xml.parsers.ParserConfigurationException
    {
        org.w3c.dom.Document $r1;
        javax.xml.parsers.DocumentBuilder $r0;

        $r0 = staticinvoke <org.apache.cxf.helpers.XMLUtils: javax.xml.parsers.DocumentBuilder getParser()>();

        $r1 = virtualinvoke $r0.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document newDocument()>();

        return $r1;
    }

    public static void writeTo(org.w3c.dom.Node, java.io.OutputStream)
    {
        java.io.OutputStream r2;
        javax.xml.transform.dom.DOMSource $r0;
        org.w3c.dom.Node r1;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: java.io.OutputStream;

        $r0 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r0.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>(r1);

        staticinvoke <org.apache.cxf.helpers.XMLUtils: void writeTo(javax.xml.transform.Source,java.io.OutputStream)>($r0, r2);

        return;
    }

    public static void writeTo(org.w3c.dom.Node, java.io.OutputStream, int)
    {
        java.io.OutputStream r2;
        javax.xml.transform.dom.DOMSource $r0;
        org.w3c.dom.Node r1;
        int i0;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: java.io.OutputStream;

        i0 := @parameter2: int;

        $r0 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r0.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>(r1);

        staticinvoke <org.apache.cxf.helpers.XMLUtils: void writeTo(javax.xml.transform.Source,java.io.OutputStream,int)>($r0, r2, i0);

        return;
    }

    public static void writeTo(javax.xml.transform.Source, java.io.OutputStream)
    {
        java.io.OutputStream r1;
        int $i1;
        javax.xml.transform.Source r0;

        r0 := @parameter0: javax.xml.transform.Source;

        r1 := @parameter1: java.io.OutputStream;

        $i1 = (int) -1;

        staticinvoke <org.apache.cxf.helpers.XMLUtils: void writeTo(javax.xml.transform.Source,java.io.OutputStream,int)>(r0, r1, $i1);

        return;
    }

    public static void writeTo(org.w3c.dom.Node, java.io.Writer)
    {
        java.io.Writer r2;
        javax.xml.transform.dom.DOMSource $r0;
        org.w3c.dom.Node r1;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: java.io.Writer;

        $r0 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r0.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>(r1);

        staticinvoke <org.apache.cxf.helpers.XMLUtils: void writeTo(javax.xml.transform.Source,java.io.Writer)>($r0, r2);

        return;
    }

    public static void writeTo(org.w3c.dom.Node, java.io.Writer, int)
    {
        javax.xml.transform.dom.DOMSource $r0;
        org.w3c.dom.Node r1;
        java.io.Writer r2;
        int i0;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: java.io.Writer;

        i0 := @parameter2: int;

        $r0 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r0.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>(r1);

        staticinvoke <org.apache.cxf.helpers.XMLUtils: void writeTo(javax.xml.transform.Source,java.io.Writer,int)>($r0, r2, i0);

        return;
    }

    public static void writeTo(javax.xml.transform.Source, java.io.Writer)
    {
        java.io.Writer r1;
        int $i1;
        javax.xml.transform.Source r0;

        r0 := @parameter0: javax.xml.transform.Source;

        r1 := @parameter1: java.io.Writer;

        $i1 = (int) -1;

        staticinvoke <org.apache.cxf.helpers.XMLUtils: void writeTo(javax.xml.transform.Source,java.io.Writer,int)>(r0, r1, $i1);

        return;
    }

    public static void writeTo(javax.xml.transform.Source, java.io.OutputStream, int)
    {
        java.io.OutputStream r1;
        javax.xml.transform.dom.DOMSource $r2, $r4;
        javax.xml.transform.Source r0;
        java.lang.Exception $r7;
        org.w3c.dom.Document $r6;
        org.w3c.dom.Node $r3, $r5;
        int i0;
        java.lang.String r8;
        boolean $z0, $z1;

        r0 := @parameter0: javax.xml.transform.Source;

        r1 := @parameter1: java.io.OutputStream;

        i0 := @parameter2: int;

        r8 = null;

        $z0 = r0 instanceof javax.xml.transform.dom.DOMSource;

        if $z0 == 0 goto label4;

        $r2 = (javax.xml.transform.dom.DOMSource) r0;

        $r3 = virtualinvoke $r2.<javax.xml.transform.dom.DOMSource: org.w3c.dom.Node getNode()>();

        $z1 = $r3 instanceof org.w3c.dom.Document;

        if $z1 == 0 goto label4;

     label1:
        $r4 = (javax.xml.transform.dom.DOMSource) r0;

        $r5 = virtualinvoke $r4.<javax.xml.transform.dom.DOMSource: org.w3c.dom.Node getNode()>();

        $r6 = (org.w3c.dom.Document) $r5;

        r8 = interfaceinvoke $r6.<org.w3c.dom.Document: java.lang.String getXmlEncoding()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        staticinvoke <org.apache.cxf.helpers.XMLUtils: void writeTo(javax.xml.transform.Source,java.io.OutputStream,int,java.lang.String,java.lang.String)>(r0, r1, i0, r8, "no");

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void writeTo(javax.xml.transform.Source, java.io.Writer, int)
    {
        javax.xml.transform.dom.DOMSource $r2, $r4;
        javax.xml.transform.Source r0;
        java.lang.Exception $r7;
        org.w3c.dom.Document $r6;
        org.w3c.dom.Node $r3, $r5;
        java.io.Writer r1;
        int i0;
        java.lang.String r8;
        boolean $z0, $z1;

        r0 := @parameter0: javax.xml.transform.Source;

        r1 := @parameter1: java.io.Writer;

        i0 := @parameter2: int;

        r8 = null;

        $z0 = r0 instanceof javax.xml.transform.dom.DOMSource;

        if $z0 == 0 goto label4;

        $r2 = (javax.xml.transform.dom.DOMSource) r0;

        $r3 = virtualinvoke $r2.<javax.xml.transform.dom.DOMSource: org.w3c.dom.Node getNode()>();

        $z1 = $r3 instanceof org.w3c.dom.Document;

        if $z1 == 0 goto label4;

     label1:
        $r4 = (javax.xml.transform.dom.DOMSource) r0;

        $r5 = virtualinvoke $r4.<javax.xml.transform.dom.DOMSource: org.w3c.dom.Node getNode()>();

        $r6 = (org.w3c.dom.Document) $r5;

        r8 = interfaceinvoke $r6.<org.w3c.dom.Document: java.lang.String getXmlEncoding()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        staticinvoke <org.apache.cxf.helpers.XMLUtils: void writeTo(javax.xml.transform.Source,java.io.Writer,int,java.lang.String,java.lang.String)>(r0, r1, i0, r8, "no");

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void writeTo(javax.xml.transform.Source, java.io.OutputStream, int, java.lang.String, java.lang.String)
    {
        java.io.OutputStream r4;
        javax.xml.transform.Transformer $r0;
        javax.xml.transform.TransformerException $r6;
        javax.xml.transform.stream.StreamResult $r9;
        javax.xml.transform.Source r2;
        java.lang.RuntimeException $r10;
        int i0, $i2;
        java.lang.String r1, $r5, r8;
        boolean $z0;

        r2 := @parameter0: javax.xml.transform.Source;

        r4 := @parameter1: java.io.OutputStream;

        i0 := @parameter2: int;

        r8 := @parameter3: java.lang.String;

        r1 := @parameter4: java.lang.String;

     label1:
        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r8);

        if $z0 == 0 goto label2;

        r8 = "utf-8";

     label2:
        $r0 = staticinvoke <org.apache.cxf.helpers.XMLUtils: javax.xml.transform.Transformer newTransformer(int)>(i0);

        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("method", "xml");

        $i2 = (int) -1;

        if i0 <= $i2 goto label3;

        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("indent", "yes");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("{http://xml.apache.org/xslt}indent-amount", $r5);

     label3:
        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("omit-xml-declaration", r1);

        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("encoding", r8);

        $r9 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r9.<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>(r4);

        virtualinvoke $r0.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>(r2, $r9);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to configure TRaX", $r6);

        throw $r10;

     label6:
        return;

        catch javax.xml.transform.TransformerException from label1 to label4 with label5;
    }

    public static void writeTo(javax.xml.transform.Source, java.io.Writer, int, java.lang.String, java.lang.String)
    {
        javax.xml.transform.Transformer $r0;
        javax.xml.transform.TransformerException $r6;
        javax.xml.transform.stream.StreamResult $r9;
        javax.xml.transform.Source r2;
        java.lang.RuntimeException $r10;
        int i0, $i2;
        java.io.Writer r4;
        java.lang.String r1, $r5, r8;
        boolean $z0;

        r2 := @parameter0: javax.xml.transform.Source;

        r4 := @parameter1: java.io.Writer;

        i0 := @parameter2: int;

        r8 := @parameter3: java.lang.String;

        r1 := @parameter4: java.lang.String;

     label1:
        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r8);

        if $z0 == 0 goto label2;

        r8 = "utf-8";

     label2:
        $r0 = staticinvoke <org.apache.cxf.helpers.XMLUtils: javax.xml.transform.Transformer newTransformer(int)>(i0);

        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("method", "xml");

        $i2 = (int) -1;

        if i0 <= $i2 goto label3;

        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("indent", "yes");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("{http://xml.apache.org/xslt}indent-amount", $r5);

     label3:
        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("omit-xml-declaration", r1);

        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("encoding", r8);

        $r9 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r9.<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>(r4);

        virtualinvoke $r0.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>(r2, $r9);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to configure TRaX", $r6);

        throw $r10;

     label6:
        return;

        catch javax.xml.transform.TransformerException from label1 to label4 with label5;
    }

    public static java.lang.String toString(javax.xml.transform.Source) throws javax.xml.transform.TransformerException, java.io.IOException
    {
        javax.xml.transform.Source r0;
        java.lang.String $r1;

        r0 := @parameter0: javax.xml.transform.Source;

        $r1 = staticinvoke <org.apache.cxf.helpers.XMLUtils: java.lang.String toString(javax.xml.transform.Source,java.util.Properties)>(r0, null);

        return $r1;
    }

    public static java.lang.String toString(javax.xml.transform.Source, java.util.Properties) throws javax.xml.transform.TransformerException, java.io.IOException
    {
        javax.xml.transform.Transformer $r2;
        java.util.Properties $r5, r6;
        java.io.StringWriter $r0;
        javax.xml.transform.stream.StreamResult $r1;
        javax.xml.transform.Source r3;
        java.lang.String $r4;

        r3 := @parameter0: javax.xml.transform.Source;

        r6 := @parameter1: java.util.Properties;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        $r1 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r1.<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>($r0);

        $r2 = staticinvoke <org.apache.cxf.helpers.XMLUtils: javax.xml.transform.Transformer newTransformer()>();

        if r6 != null goto label1;

        $r5 = new java.util.Properties;

        specialinvoke $r5.<java.util.Properties: void <init>()>();

        r6 = $r5;

        virtualinvoke $r5.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("omit-xml-declaration", "yes");

     label1:
        virtualinvoke $r2.<javax.xml.transform.Transformer: void setOutputProperties(java.util.Properties)>(r6);

        virtualinvoke $r2.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>(r3, $r1);

        virtualinvoke $r0.<java.io.StringWriter: void close()>();

        $r4 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String toString(org.w3c.dom.Node, int)
    {
        java.io.ByteArrayOutputStream $r0;
        org.w3c.dom.Node r1;
        int i0;
        java.lang.String $r2;

        r1 := @parameter0: org.w3c.dom.Node;

        i0 := @parameter1: int;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.apache.cxf.helpers.XMLUtils: void writeTo(org.w3c.dom.Node,java.io.OutputStream,int)>(r1, $r0, i0);

        $r2 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String toString(org.w3c.dom.Node)
    {
        java.lang.String $r2;
        java.io.ByteArrayOutputStream $r0;
        org.w3c.dom.Node r1;

        r1 := @parameter0: org.w3c.dom.Node;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.apache.cxf.helpers.XMLUtils: void writeTo(org.w3c.dom.Node,java.io.OutputStream)>(r1, $r0);

        $r2 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        return $r2;
    }

    public static void printDOM(org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0;

        r0 := @parameter0: org.w3c.dom.Node;

        staticinvoke <org.apache.cxf.helpers.XMLUtils: void printDOM(java.lang.String,org.w3c.dom.Node)>("", r0);

        return;
    }

    public static void printDOM(java.lang.String, org.w3c.dom.Node)
    {
        java.io.PrintStream $r1, $r3;
        org.w3c.dom.Node r2;
        java.lang.String r0, $r4;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.w3c.dom.Node;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = staticinvoke <org.apache.cxf.helpers.XMLUtils: java.lang.String toString(org.w3c.dom.Node)>(r2);

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r4);

        return;
    }

    public static org.w3c.dom.Attr getAttribute(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Element r0;
        java.lang.String r1;
        org.w3c.dom.Attr $r2;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNode(java.lang.String)>(r1);

        return $r2;
    }

    public static void replaceAttribute(org.w3c.dom.Element, java.lang.String, java.lang.String)
    {
        org.w3c.dom.Element r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = interfaceinvoke r0.<org.w3c.dom.Element: boolean hasAttribute(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        interfaceinvoke r0.<org.w3c.dom.Element: void removeAttribute(java.lang.String)>(r1);

     label1:
        interfaceinvoke r0.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public static boolean hasAttribute(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Element r0;
        org.w3c.dom.Node $r2;
        int $i0, i1;
        org.w3c.dom.NamedNodeMap $r1;
        java.lang.String r3, $r4;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i1 >= $i0 goto label3;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        $r4 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static void printAttributes(org.w3c.dom.Element)
    {
        org.w3c.dom.Node $r2;
        int $i0, i1;
        org.w3c.dom.NamedNodeMap $r1;
        java.lang.String $r6, $r9, $r12, $r14;
        java.io.PrintStream $r4;
        org.w3c.dom.Element r0;
        java.lang.StringBuilder $r3, $r5, $r7, $r8, $r10, $r11, $r13;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i1 >= $i0 goto label2;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("## prefix=");

        $r6 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" localname:");

        $r9 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value=");

        $r12 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r14);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static javax.xml.namespace.QName getNamespace(java.util.Map, java.lang.String, java.lang.String)
    {
        java.util.StringTokenizer $r0;
        java.util.Map r4;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.String r1, r2, r6, r7, r8;
        javax.xml.namespace.QName $r3;

        r4 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r6 = null;

        r7 = null;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, ":");

        $i0 = virtualinvoke $r0.<java.util.StringTokenizer: int countTokens()>();

        if $i0 != 2 goto label1;

        r6 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r7 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        goto label2;

     label1:
        $i1 = virtualinvoke $r0.<java.util.StringTokenizer: int countTokens()>();

        if $i1 != 1 goto label2;

        r7 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label2:
        r8 = r2;

        if r6 == null goto label3;

        $r5 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r8 = (java.lang.String) $r5;

     label3:
        $r3 = new javax.xml.namespace.QName;

        specialinvoke $r3.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>(r8, r7);

        return $r3;
    }

    public static void generateXMLFile(org.w3c.dom.Element, java.io.Writer)
    {
        javax.xml.transform.Transformer $r0;
        javax.xml.transform.dom.DOMSource $r1;
        org.w3c.dom.Element r2;
        javax.xml.transform.stream.StreamResult $r3;
        java.io.Writer r4;
        java.lang.Exception $r5;

        r2 := @parameter0: org.w3c.dom.Element;

        r4 := @parameter1: java.io.Writer;

     label1:
        $r0 = staticinvoke <org.apache.cxf.helpers.XMLUtils: javax.xml.transform.Transformer newTransformer()>();

        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("method", "xml");

        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("indent", "yes");

        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("{http://xml.apache.org/xslt}indent-amount", "2");

        virtualinvoke $r0.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("encoding", "UTF-8");

        $r1 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r1.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>(r2);

        $r3 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r3.<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>(r4);

        virtualinvoke $r0.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($r1, $r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static org.w3c.dom.Element createElementNS(org.w3c.dom.Node, javax.xml.namespace.QName)
    {
        org.w3c.dom.Element $r5;
        org.w3c.dom.Document $r1;
        org.w3c.dom.Node r0;
        javax.xml.namespace.QName r2;
        java.lang.String $r3, $r4;

        r0 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: javax.xml.namespace.QName;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r3 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r4 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r5 = staticinvoke <org.apache.cxf.helpers.XMLUtils: org.w3c.dom.Element createElementNS(org.w3c.dom.Document,java.lang.String,java.lang.String)>($r1, $r3, $r4);

        return $r5;
    }

    public static org.w3c.dom.Element createElementNS(org.w3c.dom.Document, javax.xml.namespace.QName)
    {
        org.w3c.dom.Element $r4;
        org.w3c.dom.Document r0;
        javax.xml.namespace.QName r1;
        java.lang.String $r2, $r3;

        r0 := @parameter0: org.w3c.dom.Document;

        r1 := @parameter1: javax.xml.namespace.QName;

        $r2 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r3 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r4 = staticinvoke <org.apache.cxf.helpers.XMLUtils: org.w3c.dom.Element createElementNS(org.w3c.dom.Document,java.lang.String,java.lang.String)>(r0, $r2, $r3);

        return $r4;
    }

    public static org.w3c.dom.Element createElementNS(org.w3c.dom.Document, java.lang.String, java.lang.String)
    {
        org.w3c.dom.Element $r3;
        org.w3c.dom.Document r0;
        java.lang.String r1, r2;

        r0 := @parameter0: org.w3c.dom.Document;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public static org.w3c.dom.Text createTextNode(org.w3c.dom.Document, java.lang.String)
    {
        org.w3c.dom.Text $r2;
        java.lang.String r1;
        org.w3c.dom.Document r0;

        r0 := @parameter0: org.w3c.dom.Document;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>(r1);

        return $r2;
    }

    public static org.w3c.dom.Text createTextNode(org.w3c.dom.Node, java.lang.String)
    {
        org.w3c.dom.Text $r3;
        org.w3c.dom.Document $r1;
        org.w3c.dom.Node r0;
        java.lang.String r2;

        r0 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r3 = staticinvoke <org.apache.cxf.helpers.XMLUtils: org.w3c.dom.Text createTextNode(org.w3c.dom.Document,java.lang.String)>($r1, r2);

        return $r3;
    }

    public static void removeContents(org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0, r1;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

     label1:
        if r1 == null goto label2;

        interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r1);

        r1 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label1;

     label2:
        return;
    }

    public static java.io.InputStream getInputStream(org.w3c.dom.Document) throws java.lang.Exception
    {
        byte[] $r12;
        java.io.ByteArrayOutputStream $r10;
        org.w3c.dom.bootstrap.DOMImplementationRegistry $r2, $r4;
        org.w3c.dom.ls.DOMImplementationLS $r6, r8;
        java.io.ByteArrayInputStream $r13;
        org.w3c.dom.ls.LSOutput $r9;
        org.w3c.dom.Document r0;
        java.lang.Object $r7;
        org.w3c.dom.ls.LSSerializer $r11;
        org.w3c.dom.DOMImplementation $r1, $r3, $r5;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Document;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.DOMImplementation getImplementation()>();

        if $r1 == null goto label1;

        $z0 = interfaceinvoke $r1.<org.w3c.dom.DOMImplementation: boolean hasFeature(java.lang.String,java.lang.String)>("LS", "3.0");

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke $r1.<org.w3c.dom.DOMImplementation: java.lang.Object getFeature(java.lang.String,java.lang.String)>("LS", "3.0");

        r8 = (org.w3c.dom.ls.DOMImplementationLS) $r7;

        goto label2;

     label1:
        $r2 = staticinvoke <org.w3c.dom.bootstrap.DOMImplementationRegistry: org.w3c.dom.bootstrap.DOMImplementationRegistry newInstance()>();

        $r3 = virtualinvoke $r2.<org.w3c.dom.bootstrap.DOMImplementationRegistry: org.w3c.dom.DOMImplementation getDOMImplementation(java.lang.String)>("LS");

        $r6 = (org.w3c.dom.ls.DOMImplementationLS) $r3;

        r8 = $r6;

        if $r6 != null goto label2;

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("org.w3c.dom.DOMImplementationSourceList", "com.sun.org.apache.xerces.internal.dom.DOMImplementationSourceImpl");

        $r4 = staticinvoke <org.w3c.dom.bootstrap.DOMImplementationRegistry: org.w3c.dom.bootstrap.DOMImplementationRegistry newInstance()>();

        $r5 = virtualinvoke $r4.<org.w3c.dom.bootstrap.DOMImplementationRegistry: org.w3c.dom.DOMImplementation getDOMImplementation(java.lang.String)>("LS");

        r8 = (org.w3c.dom.ls.DOMImplementationLS) $r5;

     label2:
        $r9 = interfaceinvoke r8.<org.w3c.dom.ls.DOMImplementationLS: org.w3c.dom.ls.LSOutput createLSOutput()>();

        $r10 = new java.io.ByteArrayOutputStream;

        specialinvoke $r10.<java.io.ByteArrayOutputStream: void <init>()>();

        interfaceinvoke $r9.<org.w3c.dom.ls.LSOutput: void setByteStream(java.io.OutputStream)>($r10);

        $r11 = interfaceinvoke r8.<org.w3c.dom.ls.DOMImplementationLS: org.w3c.dom.ls.LSSerializer createLSSerializer()>();

        interfaceinvoke $r11.<org.w3c.dom.ls.LSSerializer: boolean write(org.w3c.dom.Node,org.w3c.dom.ls.LSOutput)>(r0, $r9);

        $r12 = virtualinvoke $r10.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r13 = new java.io.ByteArrayInputStream;

        specialinvoke $r13.<java.io.ByteArrayInputStream: void <init>(byte[])>($r12);

        return $r13;
    }

    public static org.w3c.dom.Element fetchElementByNameAttribute(org.w3c.dom.Element, java.lang.String, java.lang.String)
    {
        java.util.Iterator $r3;
        java.util.List $r2;
        org.w3c.dom.Element r0, r5;
        java.lang.Object $r4;
        java.lang.String r1, $r6, r7;
        boolean $z0, $z1;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        $r2 = staticinvoke <org.apache.cxf.helpers.DOMUtils: java.util.List findAllElementsByTagName(org.w3c.dom.Element,java.lang.String)>(r0, r1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.w3c.dom.Element) $r4;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label2;

        return r5;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static javax.xml.namespace.QName getQName(java.lang.String, org.w3c.dom.Node)
    {
        java.lang.RuntimeException $r14;
        org.w3c.dom.Node r3;
        int $i0, $i1, $i3;
        java.lang.StringBuilder $r7, $r8, $r13;
        java.lang.String r0, $r1, $r2, $r4, $r9;
        javax.xml.namespace.QName $r12, $r15;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: org.w3c.dom.Node;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(":");

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        $r12 = new javax.xml.namespace.QName;

        specialinvoke $r12.<javax.xml.namespace.QName: void <init>(java.lang.String)>(r0);

        return $r12;

     label2:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $r4 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String lookupNamespaceURI(java.lang.String)>($r1);

        if $r4 == null goto label3;

        if $r2 != null goto label4;

     label3:
        $r14 = new java.lang.RuntimeException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid QName in mapping: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r14;

     label4:
        $r15 = new javax.xml.namespace.QName;

        specialinvoke $r15.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r4, $r2, $r1);

        return $r15;
    }

    public static org.w3c.dom.Node fromSource(javax.xml.transform.Source) throws java.lang.Exception
    {
        javax.xml.transform.Transformer $r1;
        org.w3c.dom.Node $r4;
        javax.xml.transform.TransformerFactory $r0;
        javax.xml.transform.Source r3;
        javax.xml.transform.dom.DOMResult $r2;

        r3 := @parameter0: javax.xml.transform.Source;

        $r0 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();

        $r1 = virtualinvoke $r0.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer()>();

        $r2 = new javax.xml.transform.dom.DOMResult;

        specialinvoke $r2.<javax.xml.transform.dom.DOMResult: void <init>()>();

        virtualinvoke $r1.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>(r3, $r2);

        $r4 = virtualinvoke $r2.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node getNode()>();

        return $r4;
    }

    public static javax.xml.namespace.QName convertStringToQName(java.lang.String)
    {
        java.lang.String r0;
        javax.xml.namespace.QName $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.cxf.helpers.XMLUtils: javax.xml.namespace.QName convertStringToQName(java.lang.String,java.lang.String)>(r0, "");

        return $r1;
    }

    public static javax.xml.namespace.QName convertStringToQName(java.lang.String, java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r0, $r1, $r2, r4;
        javax.xml.namespace.QName $r3, $r5;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(123);

        if $i0 == 0 goto label1;

        $r5 = new javax.xml.namespace.QName;

        specialinvoke $r5.<javax.xml.namespace.QName: void <init>(java.lang.String)>(r0);

        return $r5;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(125);

        $i2 = $i0 + 1;

        if $i1 <= $i2 goto label2;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        $i4 = $i3 - 1;

        if $i1 < $i4 goto label3;

     label2:
        return null;

     label3:
        $i5 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i5, $i1);

        $i6 = $i1 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i6);

        $r3 = new javax.xml.namespace.QName;

        specialinvoke $r3.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, r4);

        return $r3;
    }

    public static java.util.Set convertStringsToQNames(java.util.List)
    {
        java.util.Iterator $r2;
        java.util.Set r6;
        java.util.List r0;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r4;
        javax.xml.namespace.QName $r5;
        java.util.LinkedHashSet $r1;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r6 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        if r0 == null goto label2;

        $r1 = new java.util.LinkedHashSet;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>(int)>($i0);

        r6 = $r1;

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = staticinvoke <org.apache.cxf.helpers.XMLUtils: javax.xml.namespace.QName convertStringToQName(java.lang.String)>(r4);

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return r6;
    }

    public static java.lang.String xmlEncode(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        java.util.Map $r4;
        int $i0, $i1, $i2, i3;
        java.lang.String r0, $r5, $r7, $r8, $r9, $r10;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3;
        java.lang.Object $r6;
        java.util.regex.Pattern $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.cxf.helpers.XMLUtils: java.util.regex.Pattern XML_ESCAPE_CHARS>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        i3 = 0;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r4 = <org.apache.cxf.helpers.XMLUtils: java.util.Map XML_ENCODING_TABLE>;

        $r5 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group()>();

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = (java.lang.String) $r6;

        $i0 = virtualinvoke $r2.<java.util.regex.Matcher: int start()>();

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, $i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $i1 = virtualinvoke $r2.<java.util.regex.Matcher: int end()>();

        i3 = $i1;

        $z1 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z1 != 0 goto label1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label2:
        return r0;
    }

    static void <clinit>()
    {
        java.util.HashMap $r6;
        java.util.logging.Logger $r0;
        java.util.Map $r2, $r4, $r7, $r8, $r9, $r10, $r11;
        java.util.regex.Pattern $r5;
        java.util.WeakHashMap $r1, $r3;

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/helpers/XMLUtils;");

        <org.apache.cxf.helpers.XMLUtils: java.util.logging.Logger LOG> = $r0;

        $r1 = new java.util.WeakHashMap;

        specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r1);

        <org.apache.cxf.helpers.XMLUtils: java.util.Map DOCUMENT_BUILDER_FACTORIES> = $r2;

        $r3 = new java.util.WeakHashMap;

        specialinvoke $r3.<java.util.WeakHashMap: void <init>()>();

        $r4 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r3);

        <org.apache.cxf.helpers.XMLUtils: java.util.Map TRANSFORMER_FACTORIES> = $r4;

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[\"\'&<>]");

        <org.apache.cxf.helpers.XMLUtils: java.util.regex.Pattern XML_ESCAPE_CHARS> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        <org.apache.cxf.helpers.XMLUtils: java.util.Map XML_ENCODING_TABLE> = $r6;

        $r7 = <org.apache.cxf.helpers.XMLUtils: java.util.Map XML_ENCODING_TABLE>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("\"", "&quot;");

        $r8 = <org.apache.cxf.helpers.XMLUtils: java.util.Map XML_ENCODING_TABLE>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("\'", "&apos;");

        $r9 = <org.apache.cxf.helpers.XMLUtils: java.util.Map XML_ENCODING_TABLE>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("<", "&lt;");

        $r10 = <org.apache.cxf.helpers.XMLUtils: java.util.Map XML_ENCODING_TABLE>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(">", "&gt;");

        $r11 = <org.apache.cxf.helpers.XMLUtils: java.util.Map XML_ENCODING_TABLE>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("&", "&amp;");

        return;
    }
}
