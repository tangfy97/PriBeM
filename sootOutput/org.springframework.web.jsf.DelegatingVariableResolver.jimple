public class org.springframework.web.jsf.DelegatingVariableResolver extends javax.faces.el.VariableResolver
{
    protected final org.apache.commons.logging.Log logger;
    protected final javax.faces.el.VariableResolver originalVariableResolver;

    public void <init>(javax.faces.el.VariableResolver)
    {
        javax.faces.el.VariableResolver r3;
        org.springframework.web.jsf.DelegatingVariableResolver r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.springframework.web.jsf.DelegatingVariableResolver;

        r3 := @parameter0: javax.faces.el.VariableResolver;

        specialinvoke r0.<javax.faces.el.VariableResolver: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.web.jsf.DelegatingVariableResolver: org.apache.commons.logging.Log logger> = $r2;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r3, "Original JSF VariableResolver must not be null");

        r0.<org.springframework.web.jsf.DelegatingVariableResolver: javax.faces.el.VariableResolver originalVariableResolver> = r3;

        return;
    }

    protected final javax.faces.el.VariableResolver getOriginalVariableResolver()
    {
        org.springframework.web.jsf.DelegatingVariableResolver r0;
        javax.faces.el.VariableResolver $r1;

        r0 := @this: org.springframework.web.jsf.DelegatingVariableResolver;

        $r1 = r0.<org.springframework.web.jsf.DelegatingVariableResolver: javax.faces.el.VariableResolver originalVariableResolver>;

        return $r1;
    }

    public java.lang.Object resolveVariable(javax.faces.context.FacesContext, java.lang.String) throws javax.faces.el.EvaluationException
    {
        javax.faces.context.FacesContext r1;
        org.springframework.web.jsf.DelegatingVariableResolver r0;
        java.lang.Object $r3, $r4;
        java.lang.String r2;

        r0 := @this: org.springframework.web.jsf.DelegatingVariableResolver;

        r1 := @parameter0: javax.faces.context.FacesContext;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.springframework.web.jsf.DelegatingVariableResolver: java.lang.Object resolveOriginal(javax.faces.context.FacesContext,java.lang.String)>(r1, r2);

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r4 = virtualinvoke r0.<org.springframework.web.jsf.DelegatingVariableResolver: java.lang.Object resolveSpringBean(javax.faces.context.FacesContext,java.lang.String)>(r1, r2);

        if $r4 == null goto label2;

        return $r4;

     label2:
        return null;
    }

    protected java.lang.Object resolveOriginal(javax.faces.context.FacesContext, java.lang.String)
    {
        javax.faces.el.VariableResolver $r1;
        org.springframework.web.jsf.DelegatingVariableResolver r0;
        javax.faces.context.FacesContext r2;
        java.lang.Object $r4;
        org.apache.commons.logging.Log $r5, $r7;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.String r3, $r10;
        boolean $z0;

        r0 := @this: org.springframework.web.jsf.DelegatingVariableResolver;

        r2 := @parameter0: javax.faces.context.FacesContext;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.web.jsf.DelegatingVariableResolver: javax.faces.el.VariableResolver getOriginalVariableResolver()>();

        $r4 = virtualinvoke $r1.<javax.faces.el.VariableResolver: java.lang.Object resolveVariable(javax.faces.context.FacesContext,java.lang.String)>(r2, r3);

        if $r4 == null goto label1;

        $r5 = r0.<org.springframework.web.jsf.DelegatingVariableResolver: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<org.springframework.web.jsf.DelegatingVariableResolver: org.apache.commons.logging.Log logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Successfully resolved variable \'");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' via original VariableResolver");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r10);

     label1:
        return $r4;
    }

    protected java.lang.Object resolveSpringBean(javax.faces.context.FacesContext, java.lang.String)
    {
        org.springframework.web.jsf.DelegatingVariableResolver r0;
        javax.faces.context.FacesContext r1;
        org.springframework.beans.factory.BeanFactory $r2;
        org.apache.commons.logging.Log $r4, $r7;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.String r3, $r10;
        boolean $z0, $z1;

        r0 := @this: org.springframework.web.jsf.DelegatingVariableResolver;

        r1 := @parameter0: javax.faces.context.FacesContext;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.web.jsf.DelegatingVariableResolver: org.springframework.beans.factory.BeanFactory getBeanFactory(javax.faces.context.FacesContext)>(r1);

        $z0 = interfaceinvoke $r2.<org.springframework.beans.factory.BeanFactory: boolean containsBean(java.lang.String)>(r3);

        if $z0 == 0 goto label2;

        $r4 = r0.<org.springframework.web.jsf.DelegatingVariableResolver: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z1 == 0 goto label1;

        $r7 = r0.<org.springframework.web.jsf.DelegatingVariableResolver: org.apache.commons.logging.Log logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Successfully resolved variable \'");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in Spring BeanFactory");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r10);

     label1:
        $r5 = interfaceinvoke $r2.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String)>(r3);

        return $r5;

     label2:
        return null;
    }

    protected org.springframework.beans.factory.BeanFactory getBeanFactory(javax.faces.context.FacesContext)
    {
        org.springframework.web.jsf.DelegatingVariableResolver r0;
        org.springframework.web.context.WebApplicationContext $r2;
        javax.faces.context.FacesContext r1;

        r0 := @this: org.springframework.web.jsf.DelegatingVariableResolver;

        r1 := @parameter0: javax.faces.context.FacesContext;

        $r2 = virtualinvoke r0.<org.springframework.web.jsf.DelegatingVariableResolver: org.springframework.web.context.WebApplicationContext getWebApplicationContext(javax.faces.context.FacesContext)>(r1);

        return $r2;
    }

    protected org.springframework.web.context.WebApplicationContext getWebApplicationContext(javax.faces.context.FacesContext)
    {
        org.springframework.web.jsf.DelegatingVariableResolver r2;
        org.springframework.web.context.WebApplicationContext $r1;
        javax.faces.context.FacesContext r0;

        r2 := @this: org.springframework.web.jsf.DelegatingVariableResolver;

        r0 := @parameter0: javax.faces.context.FacesContext;

        $r1 = staticinvoke <org.springframework.web.jsf.FacesContextUtils: org.springframework.web.context.WebApplicationContext getRequiredWebApplicationContext(javax.faces.context.FacesContext)>(r0);

        return $r1;
    }
}
