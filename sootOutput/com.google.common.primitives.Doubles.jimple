public final class com.google.common.primitives.Doubles extends java.lang.Object
{

    private void <init>()
    {
        com.google.common.primitives.Doubles r0;

        r0 := @this: com.google.common.primitives.Doubles;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int hashCode(double)
    {
        int $i0;
        java.lang.Double $r0;
        double d0;

        d0 := @parameter0: double;

        $r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $i0 = virtualinvoke $r0.<java.lang.Double: int hashCode()>();

        return $i0;
    }

    public static int compare(double, double)
    {
        int $i0;
        double d0, d1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>(d0, d1);

        return $i0;
    }

    public static boolean contains(double[], double)
    {
        byte $b1;
        double[] r0;
        int i0, i2;
        double d0, d1;

        r0 := @parameter0: double[];

        d1 := @parameter1: double;

        i0 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        d0 = r0[i2];

        $b1 = d0 cmpl d1;

        if $b1 != 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static int indexOf(double[], double)
    {
        double[] r0;
        int $i0, $i1;
        double d0;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        $i0 = lengthof r0;

        $i1 = staticinvoke <com.google.common.primitives.Doubles: int indexOf(double[],double,int,int)>(r0, d0, 0, $i0);

        return $i1;
    }

    private static int indexOf(double[], double, int, int)
    {
        double[] r0;
        byte $b2;
        int i0, i1, i3, $i5;
        double d0, $d1;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i3 = i0;

     label1:
        if i3 >= i1 goto label3;

        $d1 = r0[i3];

        $b2 = $d1 cmpl d0;

        if $b2 != 0 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $i5 = (int) -1;

        return $i5;
    }

    public static int indexOf(double[], double[])
    {
        double[] r0, r1;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i8, i9, $i11;
        double $d0, $d1;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "array");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "target");

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i8 = 0;

     label2:
        $i2 = lengthof r0;

        $i1 = lengthof r1;

        $i3 = $i2 - $i1;

        $i4 = $i3 + 1;

        if i8 >= $i4 goto label7;

        i9 = 0;

     label3:
        $i5 = lengthof r1;

        if i9 >= $i5 goto label5;

        $i6 = i8 + i9;

        $d1 = r0[$i6];

        $d0 = r1[i9];

        $b7 = $d1 cmpl $d0;

        if $b7 == 0 goto label4;

        goto label6;

     label4:
        i9 = i9 + 1;

        goto label3;

     label5:
        return i8;

     label6:
        i8 = i8 + 1;

        goto label2;

     label7:
        $i11 = (int) -1;

        return $i11;
    }

    public static int lastIndexOf(double[], double)
    {
        double[] r0;
        int $i0, $i1;
        double d0;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        $i0 = lengthof r0;

        $i1 = staticinvoke <com.google.common.primitives.Doubles: int lastIndexOf(double[],double,int,int)>(r0, d0, 0, $i0);

        return $i1;
    }

    private static int lastIndexOf(double[], double, int, int)
    {
        double[] r0;
        byte $b2;
        int i0, i1, i3, $i5, $i7;
        double d0, $d1;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        i3 = i0 - 1;

     label1:
        if i3 < i1 goto label3;

        $d1 = r0[i3];

        $b2 = $d1 cmpl d0;

        if $b2 != 0 goto label2;

        return i3;

     label2:
        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label1;

     label3:
        $i7 = (int) -1;

        return $i7;
    }

    public static transient double min(double[])
    {
        double[] r0;
        int $i0, i1, $i2;
        double $d0, d1;
        boolean $z0;

        r0 := @parameter0: double[];

        $i0 = lengthof r0;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        d1 = r0[0];

        i1 = 1;

     label3:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label4;

        $d0 = r0[i1];

        d1 = staticinvoke <java.lang.Math: double min(double,double)>(d1, $d0);

        i1 = i1 + 1;

        goto label3;

     label4:
        return d1;
    }

    public static transient double max(double[])
    {
        double[] r0;
        int $i0, i1, $i2;
        double $d0, d1;
        boolean $z0;

        r0 := @parameter0: double[];

        $i0 = lengthof r0;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        d1 = r0[0];

        i1 = 1;

     label3:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label4;

        $d0 = r0[i1];

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

        i1 = i1 + 1;

        goto label3;

     label4:
        return d1;
    }

    public static transient double[] concat(double[][])
    {
        double[] r1, r2, r3;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i8;
        double[][] r0;

        r0 := @parameter0: double[][];

        i3 = 0;

        i4 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r2 = r0[i5];

        $i2 = lengthof r2;

        i3 = i3 + $i2;

        i5 = i5 + 1;

        goto label1;

     label2:
        r3 = newarray (double)[i3];

        i6 = 0;

        i7 = lengthof r0;

        i8 = 0;

     label3:
        if i8 >= i7 goto label4;

        r1 = r0[i8];

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, i6, $i0);

        $i1 = lengthof r1;

        i6 = i6 + $i1;

        i8 = i8 + 1;

        goto label3;

     label4:
        return r3;
    }

    public static double[] ensureCapacity(double[], int, int)
    {
        java.lang.Object[] $r0, $r2;
        double[] r4, $r5;
        java.lang.Integer $r1, $r3;
        int i0, i1, $i2, $i3;
        boolean $z0, $z1;

        r4 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid minLength: %s", $r0);

        if i1 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[0] = $r3;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Invalid padding: %s", $r2);

        $i2 = lengthof r4;

        if $i2 >= i0 goto label5;

        $i3 = i0 + i1;

        $r5 = staticinvoke <com.google.common.primitives.Doubles: double[] copyOf(double[],int)>(r4, $i3);

        goto label6;

     label5:
        $r5 = r4;

     label6:
        return $r5;
    }

    private static double[] copyOf(double[], int)
    {
        int i0, $i1, $i2;
        double[] r0, r1;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r0 = newarray (double)[i0];

        $i1 = lengthof r1;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, $i2);

        return r0;
    }

    public static transient java.lang.String join(java.lang.String, double[])
    {
        double[] r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.StringBuilder $r2, $r4;
        java.lang.String r0, $r3;
        double $d0, $d1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: double[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r2 = new java.lang.StringBuilder;

        $i1 = lengthof r1;

        $i2 = $i1 * 12;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i2);

        $d0 = r1[0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        i4 = 1;

     label2:
        $i3 = lengthof r1;

        if i4 >= $i3 goto label3;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $d1 = r1[i4];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        i4 = i4 + 1;

        goto label2;

     label3:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.util.Comparator lexicographicalComparator()
    {
        com.google.common.primitives.Doubles$LexicographicalComparator $r0;

        $r0 = <com.google.common.primitives.Doubles$LexicographicalComparator: com.google.common.primitives.Doubles$LexicographicalComparator INSTANCE>;

        return $r0;
    }

    public static double[] toArray(java.util.Collection)
    {
        com.google.common.primitives.Doubles$DoubleArrayAsList $r5;
        java.lang.Object[] $r1;
        java.lang.Double $r4;
        java.util.Collection r0;
        double[] r2, $r6;
        int i0, i1;
        java.lang.Object $r3;
        boolean $z0;
        double $d0;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof com.google.common.primitives.Doubles$DoubleArrayAsList;

        if $z0 == 0 goto label1;

        $r5 = (com.google.common.primitives.Doubles$DoubleArrayAsList) r0;

        $r6 = virtualinvoke $r5.<com.google.common.primitives.Doubles$DoubleArrayAsList: double[] toDoubleArray()>();

        return $r6;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray()>();

        i0 = lengthof $r1;

        r2 = newarray (double)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r3 = $r1[i1];

        $r4 = (java.lang.Double) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        r2[i1] = $d0;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r2;
    }

    public static transient java.util.List asList(double[])
    {
        com.google.common.primitives.Doubles$DoubleArrayAsList $r1;
        java.util.List $r2;
        double[] r0;
        int $i0;

        r0 := @parameter0: double[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label1:
        $r1 = new com.google.common.primitives.Doubles$DoubleArrayAsList;

        specialinvoke $r1.<com.google.common.primitives.Doubles$DoubleArrayAsList: void <init>(double[])>(r0);

        return $r1;
    }

    static int access$000(double[], double, int, int)
    {
        double[] r0;
        int i0, i1, $i2;
        double d0;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <com.google.common.primitives.Doubles: int indexOf(double[],double,int,int)>(r0, d0, i0, i1);

        return $i2;
    }

    static int access$100(double[], double, int, int)
    {
        double[] r0;
        int i0, i1, $i2;
        double d0;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <com.google.common.primitives.Doubles: int lastIndexOf(double[],double,int,int)>(r0, d0, i0, i1);

        return $i2;
    }
}
