public class com.jhlabs.math.TurbulenceFunction extends com.jhlabs.math.CompoundFunction2D
{
    private float octaves;

    public void <init>(com.jhlabs.math.Function2D, float)
    {
        float f0;
        com.jhlabs.math.Function2D r1;
        com.jhlabs.math.TurbulenceFunction r0;

        r0 := @this: com.jhlabs.math.TurbulenceFunction;

        r1 := @parameter0: com.jhlabs.math.Function2D;

        f0 := @parameter1: float;

        specialinvoke r0.<com.jhlabs.math.CompoundFunction2D: void <init>(com.jhlabs.math.Function2D)>(r1);

        r0.<com.jhlabs.math.TurbulenceFunction: float octaves> = f0;

        return;
    }

    public void setOctaves(float)
    {
        float f0;
        com.jhlabs.math.TurbulenceFunction r0;

        r0 := @this: com.jhlabs.math.TurbulenceFunction;

        f0 := @parameter0: float;

        r0.<com.jhlabs.math.TurbulenceFunction: float octaves> = f0;

        return;
    }

    public float getOctaves()
    {
        float $f0;
        com.jhlabs.math.TurbulenceFunction r0;

        r0 := @this: com.jhlabs.math.TurbulenceFunction;

        $f0 = r0.<com.jhlabs.math.TurbulenceFunction: float octaves>;

        return $f0;
    }

    public float evaluate(float, float)
    {
        com.jhlabs.math.Function2D $r1;
        com.jhlabs.math.TurbulenceFunction r0;
        byte $b0;
        int $i1;
        float $f0, f1, f2, $f3, $f4, $f5, $f6, $f7, f8, f9;

        r0 := @this: com.jhlabs.math.TurbulenceFunction;

        f1 := @parameter0: float;

        f2 := @parameter1: float;

        f8 = 0.0F;

        f9 = 1.0F;

     label1:
        $f0 = r0.<com.jhlabs.math.TurbulenceFunction: float octaves>;

        $b0 = f9 cmpg $f0;

        $i1 = (int) $b0;

        if $i1 > 0 goto label2;

        $r1 = r0.<com.jhlabs.math.CompoundFunction2D: com.jhlabs.math.Function2D basis>;

        $f4 = f9 * f1;

        $f3 = f9 * f2;

        $f5 = interfaceinvoke $r1.<com.jhlabs.math.Function2D: float evaluate(float,float)>($f4, $f3);

        $f6 = staticinvoke <java.lang.Math: float abs(float)>($f5);

        $f7 = $f6 / f9;

        f8 = f8 + $f7;

        f9 = f9 * 2.0F;

        goto label1;

     label2:
        return f8;
    }
}
