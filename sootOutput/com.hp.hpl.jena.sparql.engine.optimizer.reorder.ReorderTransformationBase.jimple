public abstract class com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase extends java.lang.Object implements com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation
{
    public static final org.slf4j.Logger log;
    private final boolean DEBUG;
    private static org.apache.jena.atlas.iterator.AccString formatter;
    private static org.apache.jena.atlas.iterator.Transform convert;

    public void <init>()
    {
        org.slf4j.Logger $r1;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        r0.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: boolean DEBUG> = $z0;

        return;
    }

    public com.hp.hpl.jena.sparql.core.BasicPattern reorder(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r1, $r3;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProc $r2;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProc reorderIndexes(com.hp.hpl.jena.sparql.core.BasicPattern)>(r1);

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProc: com.hp.hpl.jena.sparql.core.BasicPattern reorder(com.hp.hpl.jena.sparql.core.BasicPattern)>(r1);

        return $r3;
    }

    public final com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProc reorderIndexes(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase r5;
        org.apache.jena.atlas.iterator.Transform $r2;
        java.util.List $r1, $r3, $r4, $r6;
        int $i0;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProc $r7, $r8;

        r5 := @this: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: int size()>();

        if $i0 > 1 goto label1;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderLib: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProc identityProc()>();

        return $r8;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List getList()>();

        $r2 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: org.apache.jena.atlas.iterator.Transform convert>;

        $r3 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.List map(java.util.List,org.apache.jena.atlas.iterator.Transform)>($r1, $r2);

        $r4 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.List toList(java.lang.Iterable)>($r3);

        $r6 = virtualinvoke r5.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: java.util.List modifyComponents(java.util.List)>($r4);

        $r7 = virtualinvoke r5.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProc reorder(java.util.List,java.util.List)>($r1, $r6);

        return $r7;
    }

    protected java.util.List modifyComponents(java.util.List)
    {
        java.util.List r0;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase r1;

        r1 := @this: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase;

        r0 := @parameter0: java.util.List;

        return r0;
    }

    protected com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProc reorder(java.util.List, java.util.List)
    {
        java.lang.Object[] $r6;
        java.lang.Integer $r7, $r8;
        org.apache.jena.atlas.iterator.AccString $r16;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProcIndexes $r4;
        java.lang.String $r9, $r17, $r19;
        com.hp.hpl.jena.sparql.ARQException $r5;
        boolean $z0;
        org.slf4j.Logger $r14;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase r2;
        com.hp.hpl.jena.graph.Triple r12;
        java.util.List r0, r3;
        java.lang.Object $r10, $r11;
        java.lang.StringBuilder $r13, $r15, $r18;

        r2 := @this: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase;

        r3 := @parameter0: java.util.List;

        r0 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (int)[$i0];

        $z0 = r2.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r14 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: org.slf4j.Logger log>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reorder: ");

        $r16 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: org.apache.jena.atlas.iterator.AccString formatter>;

        $r17 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.lang.String asString(java.lang.Iterable,org.apache.jena.atlas.iterator.AccString)>(r0, $r16);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String)>($r19);

     label1:
        i5 = 0;

     label2:
        if i5 >= $i0 goto label4;

        $i4 = virtualinvoke r2.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: int chooseNext(java.util.List)>(r0);

        if $i4 >= 0 goto label3;

        goto label4;

     label3:
        $r11 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i4);

        r12 = (com.hp.hpl.jena.graph.Triple) $r11;

        r1[i5] = $i4;

        staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: void update(com.hp.hpl.jena.graph.Triple,java.util.List)>(r12, r0);

        interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i4, null);

        i5 = i5 + 1;

        goto label2;

     label4:
        i6 = 0;

     label5:
        $i7 = interfaceinvoke r0.<java.util.List: int size()>();

        if i6 >= $i7 goto label7;

        $r10 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i6);

        if $r10 == null goto label6;

        $i3 = i5;

        i5 = i5 + 1;

        r1[$i3] = i6;

     label6:
        i6 = i6 + 1;

        goto label5;

     label7:
        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i1 == i5 goto label8;

        $r5 = new com.hp.hpl.jena.sparql.ARQException;

        $r6 = newarray (java.lang.Object)[2];

        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r6[1] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Inconsistency: number of triples (%d) does not equal to number of indexes processed (%d)", $r6);

        specialinvoke $r5.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label8:
        $r4 = new com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProcIndexes;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProcIndexes: void <init>(int[])>(r1);

        return $r4;
    }

    protected int chooseNext(java.util.List)
    {
        java.lang.Integer $r22, $r27;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase r0;
        java.util.List r1;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple r20;
        java.lang.StringBuilder $r7, $r8, $r16, $r17, $r29, $r30, $r31;
        java.lang.Object[] $r21, $r26;
        java.lang.Double $r23;
        int $i0, i1, $i3;
        java.lang.String $r3, $r4, $r9, $r12, $r13, $r18, $r24, $r25, $r28;
        double $d0;
        org.slf4j.Logger $r6, $r15;
        java.util.Iterator $r11;
        java.lang.Object $r2, $r19;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase;

        r1 := @parameter0: java.util.List;

        $z0 = r0.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: boolean DEBUG>;

        if $z0 == 0 goto label4;

        $i3 = (int) -1;

        i1 = $i3;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r11 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r19 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r20 = (com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple) $r19;

        i1 = i1 + 1;

        if r20 != null goto label2;

        $r26 = newarray (java.lang.Object)[1];

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r26[0] = $r27;

        $r28 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("    %d          : null\n", $r26);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        goto label1;

     label2:
        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: double weight(com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple)>(r20);

        $r21 = newarray (java.lang.Object)[3];

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r21[0] = $r22;

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r21[1] = $r23;

        $r24 = staticinvoke <com.hp.hpl.jena.sparql.util.StringUtils: java.lang.String printAbbrev(java.lang.Object)>(r20);

        $r21[2] = $r24;

        $r25 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("    %d %8.0f : %s\n", $r21);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        goto label1;

     label3:
        $r12 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String noNewlineEnding(java.lang.String)>($r12);

        $r15 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: org.slf4j.Logger log>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">> Input\n");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>($r18);

     label4:
        $i0 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: int processPTriples(java.util.List,java.util.List)>(r1, null);

        $z1 = r0.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: boolean DEBUG>;

        if $z1 == 0 goto label5;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.StringUtils: java.lang.String printAbbrev(java.lang.Object)>($r2);

        $r4 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String noNewlineEnding(java.lang.String)>($r3);

        $r6 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: org.slf4j.Logger log>;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<< Output\n    ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>($r9);

     label5:
        return $i0;
    }

    protected java.util.List chooseAll(java.util.List)
    {
        java.util.List r1;
        int $i0;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase r2;

        r2 := @this: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        specialinvoke r2.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: int processPTriples(java.util.List,java.util.List)>(r1, $r0);

        return $r0;
    }

    private int processPTriples(java.util.List, java.util.List)
    {
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase$DefaultChoice $r7;
        java.lang.Integer $r5, $r6, $r8;
        byte $b1, $b2, $b3;
        int[] $r9;
        int $i0, $i4, $i5, i6, i7, $i9, $i10, $i12, $i13;
        double $d0, d1;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase r3;
        java.util.List r0, r4;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple r2;
        java.lang.Object $r1;

        r3 := @this: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase;

        r0 := @parameter0: java.util.List;

        r4 := @parameter1: java.util.List;

        d1 = 1.7976931348623157E308;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i9 = (int) -1;

        i6 = $i9;

        i7 = 0;

     label01:
        if i7 >= $i0 goto label11;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i7);

        r2 = (com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple) $r1;

        if r2 != null goto label02;

        goto label10;

     label02:
        $d0 = virtualinvoke r3.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: double weight(com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple)>(r2);

        $b1 = $d0 cmpg 0.0;

        $i10 = (int) $b1;

        if $i10 >= 0 goto label08;

        $r7 = virtualinvoke r3.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase$DefaultChoice defaultChoice(com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple)>(r2);

        if $r7 == null goto label07;

        $r9 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase$3: int[] $SwitchMap$com$hp$hpl$jena$sparql$engine$optimizer$reorder$ReorderTransformationBase$DefaultChoice>;

        $i4 = virtualinvoke $r7.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase$DefaultChoice: int ordinal()>();

        $i5 = $r9[$i4];

        tableswitch($i5)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            default: goto label07;
        };

     label03:
        goto label07;

     label04:
        goto label07;

     label05:
        goto label07;

     label06:
        virtualinvoke r3.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: double defaultWeight(com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple)>(r2);

     label07:
        $i12 = (int) -1;

        if i6 != $i12 goto label10;

        i6 = i7;

        if r4 == null goto label10;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label10;

     label08:
        $b2 = $d0 cmpl d1;

        if $b2 != 0 goto label09;

        if r4 == null goto label10;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label10;

     label09:
        $b3 = $d0 cmpg d1;

        $i13 = (int) $b3;

        if $i13 >= 0 goto label10;

        d1 = $d0;

        i6 = i7;

        if r4 == null goto label10;

        interfaceinvoke r4.<java.util.List: void clear()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r5);

     label10:
        i7 = i7 + 1;

        goto label01;

     label11:
        return i6;
    }

    protected abstract double weight(com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple);

    protected com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase$DefaultChoice defaultChoice(com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple)
    {
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase r0;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple;

        return null;
    }

    protected double defaultWeight(com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple)
    {
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase r0;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple;

        return -1.0;
    }

    protected static void update(com.hp.hpl.jena.graph.Triple, java.util.List)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple r3;
        java.lang.Object $r2;
        boolean $z0;
        com.hp.hpl.jena.graph.Triple r4;

        r4 := @parameter0: com.hp.hpl.jena.graph.Triple;

        r0 := @parameter1: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple) $r2;

        if r3 == null goto label2;

        staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: void update(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple)>(r4, r3);

     label2:
        goto label1;

     label3:
        return;
    }

    private static void update(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple)
    {
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple r2;
        com.hp.hpl.jena.graph.Node $r1, $r3, $r4;
        com.hp.hpl.jena.graph.Triple r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        r2 := @parameter1: com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: void update(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple)>($r1, r2);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: void update(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple)>($r3, r2);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: void update(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple)>($r4, r2);

        return;
    }

    private static void update(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple)
    {
        com.hp.hpl.jena.sparql.sse.Item $r2, $r4, $r6, $r8, $r9, $r10;
        com.hp.hpl.jena.graph.Node r0, $r3, $r5, $r7;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label3;

        $r2 = r1.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple: com.hp.hpl.jena.sparql.sse.Item subject>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $r10 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item TERM>;

        r1.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple: com.hp.hpl.jena.sparql.sse.Item subject> = $r10;

     label1:
        $r4 = r1.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple: com.hp.hpl.jena.sparql.sse.Item predicate>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        $r9 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item TERM>;

        r1.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple: com.hp.hpl.jena.sparql.sse.Item predicate> = $r9;

     label2:
        $r6 = r1.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple: com.hp.hpl.jena.sparql.sse.Item object>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label3;

        $r8 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item TERM>;

        r1.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple: com.hp.hpl.jena.sparql.sse.Item object> = $r8;

     label3:
        return;
    }

    protected static void update(com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.graph.Node, java.util.List)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple r3;
        java.lang.Object $r2;
        com.hp.hpl.jena.graph.Node r5;
        com.hp.hpl.jena.sparql.core.Var r4;
        boolean $z0;

        r4 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        r5 := @parameter1: com.hp.hpl.jena.graph.Node;

        r0 := @parameter2: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple) $r2;

        if r3 == null goto label2;

        staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: void update(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple)>(r4, r5, r3);

     label2:
        goto label1;

     label3:
        return;
    }

    private static void update(com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple)
    {
        com.hp.hpl.jena.sparql.sse.Item $r2, $r4, $r6, $r9, $r10, $r11;
        com.hp.hpl.jena.graph.Node $r3, $r5, $r7, r8;
        com.hp.hpl.jena.sparql.core.Var r0;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        r8 := @parameter1: com.hp.hpl.jena.graph.Node;

        r1 := @parameter2: com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple;

        $r2 = r1.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple: com.hp.hpl.jena.sparql.sse.Item subject>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Var: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node)>(r8);

        r1.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple: com.hp.hpl.jena.sparql.sse.Item subject> = $r11;

     label1:
        $r4 = r1.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple: com.hp.hpl.jena.sparql.sse.Item predicate>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Var: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label2;

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node)>(r8);

        r1.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple: com.hp.hpl.jena.sparql.sse.Item predicate> = $r10;

     label2:
        $r6 = r1.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple: com.hp.hpl.jena.sparql.sse.Item object>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Var: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label3;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node)>(r8);

        r1.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple: com.hp.hpl.jena.sparql.sse.Item object> = $r9;

     label3:
        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase$1 $r1;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase$2 $r2;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/sparql/engine/optimizer/reorder/ReorderTransformationBase;");

        <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: org.slf4j.Logger log> = $r0;

        $r1 = new com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase$1;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase$1: void <init>()>();

        <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: org.apache.jena.atlas.iterator.AccString formatter> = $r1;

        $r2 = new com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase$2;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase$2: void <init>()>();

        <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformationBase: org.apache.jena.atlas.iterator.Transform convert> = $r2;

        return;
    }
}
