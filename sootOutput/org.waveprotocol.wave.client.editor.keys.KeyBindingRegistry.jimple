public class org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry extends java.lang.Object
{
    public static final org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry NONE;
    private final java.util.Map bindings;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry r0;

        r0 := @this: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: java.util.Map bindings> = $r1;

        return;
    }

    public boolean hasAction(org.waveprotocol.wave.client.common.util.KeyCombo)
    {
        org.waveprotocol.wave.client.common.util.KeyCombo r1;
        java.util.Map $r2;
        org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry;

        r1 := @parameter0: org.waveprotocol.wave.client.common.util.KeyCombo;

        $r2 = r0.<org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: java.util.Map bindings>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public org.waveprotocol.wave.client.editor.EditorAction getAction(org.waveprotocol.wave.client.common.util.KeyCombo)
    {
        org.waveprotocol.wave.client.common.util.KeyCombo r1;
        org.waveprotocol.wave.client.editor.EditorAction $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry r0;

        r0 := @this: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry;

        r1 := @parameter0: org.waveprotocol.wave.client.common.util.KeyCombo;

        $r2 = r0.<org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: java.util.Map bindings>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.wave.client.editor.EditorAction) $r3;

        return $r4;
    }

    public java.util.Set getBoundKeyCombos()
    {
        java.util.Set $r2;
        org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry;

        $r1 = r0.<org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: java.util.Map bindings>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public void registerAction(org.waveprotocol.wave.client.common.util.KeyCombo, org.waveprotocol.wave.client.editor.EditorAction)
    {
        org.waveprotocol.wave.client.common.util.KeyCombo r1;
        org.waveprotocol.wave.client.editor.EditorAction r2;
        java.util.Map $r3;
        org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry r0;

        r0 := @this: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry;

        r1 := @parameter0: org.waveprotocol.wave.client.common.util.KeyCombo;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.EditorAction;

        $r3 = r0.<org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: java.util.Map bindings>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void removeAction(org.waveprotocol.wave.client.common.util.KeyCombo)
    {
        org.waveprotocol.wave.client.common.util.KeyCombo r1;
        org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry r0;
        java.util.Map $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry;

        r1 := @parameter0: org.waveprotocol.wave.client.common.util.KeyCombo;

        $r2 = r0.<org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: java.util.Map bindings>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void clear()
    {
        org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry;

        $r1 = r0.<org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: java.util.Map bindings>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry $r0;

        $r0 = new org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: void <init>()>();

        <org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry NONE> = $r0;

        return;
    }
}
