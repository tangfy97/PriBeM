public abstract class com.hp.hpl.jena.mem.NodeToTriplesMapBase extends java.lang.Object
{
    public com.hp.hpl.jena.mem.BunchMap bunchMap;
    protected int size;
    protected final com.hp.hpl.jena.graph.Triple$Field indexField;
    protected final com.hp.hpl.jena.graph.Triple$Field f2;
    protected final com.hp.hpl.jena.graph.Triple$Field f3;

    public void <init>(com.hp.hpl.jena.graph.Triple$Field, com.hp.hpl.jena.graph.Triple$Field, com.hp.hpl.jena.graph.Triple$Field)
    {
        com.hp.hpl.jena.mem.HashedBunchMap $r1;
        com.hp.hpl.jena.graph.Triple$Field r2, r3, r4;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase r0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple$Field;

        r3 := @parameter1: com.hp.hpl.jena.graph.Triple$Field;

        r4 := @parameter2: com.hp.hpl.jena.graph.Triple$Field;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.hp.hpl.jena.mem.HashedBunchMap;

        specialinvoke $r1.<com.hp.hpl.jena.mem.HashedBunchMap: void <init>()>();

        r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: com.hp.hpl.jena.mem.BunchMap bunchMap> = $r1;

        r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: int size> = 0;

        r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: com.hp.hpl.jena.graph.Triple$Field indexField> = r2;

        r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: com.hp.hpl.jena.graph.Triple$Field f2> = r3;

        r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: com.hp.hpl.jena.graph.Triple$Field f3> = r4;

        return;
    }

    public abstract boolean add(com.hp.hpl.jena.graph.Triple);

    public abstract boolean remove(com.hp.hpl.jena.graph.Triple);

    public abstract java.util.Iterator iterator(java.lang.Object, com.hp.hpl.jena.mem.HashCommon$NotifyEmpty);

    public abstract boolean contains(com.hp.hpl.jena.graph.Triple);

    public abstract boolean containsBySameValueAs(com.hp.hpl.jena.graph.Triple);

    public final java.util.Iterator domain()
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase r0;
        com.hp.hpl.jena.mem.BunchMap $r1;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapBase;

        $r1 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.mem.BunchMap: com.hp.hpl.jena.util.iterator.ExtendedIterator keyIterator()>();

        return $r2;
    }

    protected final java.lang.Object getIndexField(com.hp.hpl.jena.graph.Triple)
    {
        java.lang.Object $r4;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.graph.Triple$Field $r2;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: com.hp.hpl.jena.graph.Triple$Field indexField>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Triple$Field: com.hp.hpl.jena.graph.Node getField(com.hp.hpl.jena.graph.Triple)>(r1);

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: java.lang.Object getIndexingValue()>();

        return $r4;
    }

    public void clear()
    {
        com.hp.hpl.jena.mem.NodeToTriplesMapBase r0;
        com.hp.hpl.jena.mem.BunchMap $r1;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapBase;

        $r1 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: com.hp.hpl.jena.mem.BunchMap bunchMap>;

        interfaceinvoke $r1.<com.hp.hpl.jena.mem.BunchMap: void clear()>();

        r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: int size> = 0;

        return;
    }

    public int size()
    {
        int $i0;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase r0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapBase;

        $i0 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: int size>;

        return $i0;
    }

    public void removedOneViaIterator()
    {
        int $i0, $i1;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase r0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapBase;

        $i0 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: int size>;

        $i1 = $i0 - 1;

        r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: int size> = $i1;

        return;
    }

    public boolean isEmpty()
    {
        int $i0;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapBase;

        $i0 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: int size>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public abstract com.hp.hpl.jena.util.iterator.ExtendedIterator iterator(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node);

    public abstract java.util.Iterator iteratorForIndexed(java.lang.Object);

    public com.hp.hpl.jena.util.iterator.ExtendedIterator iterateAll()
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase$1 $r2;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase r0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapBase;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: java.util.Iterator domain()>();

        $r2 = new com.hp.hpl.jena.mem.NodeToTriplesMapBase$1;

        specialinvoke $r2.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1: void <init>(com.hp.hpl.jena.mem.NodeToTriplesMapBase,java.util.Iterator)>(r0, $r1);

        return $r2;
    }
}
