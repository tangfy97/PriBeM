public abstract class org.apache.batik.dom.AbstractElementNS extends org.apache.batik.dom.AbstractElement
{
    protected java.lang.String namespaceURI;

    protected void <init>()
    {
        org.apache.batik.dom.AbstractElementNS r0;

        r0 := @this: org.apache.batik.dom.AbstractElementNS;

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: void <init>()>();

        return;
    }

    protected void <init>(java.lang.String, java.lang.String, org.apache.batik.dom.AbstractDocument) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r3;
        org.apache.batik.dom.AbstractElementNS r0;
        java.lang.Integer $r11;
        short $s0;
        org.w3c.dom.DOMException $r6;
        int $i1, $i2;
        java.lang.String r1, $r5, $r7, $r8, r9, $r10;
        boolean $z0, $z1;
        org.apache.batik.dom.AbstractDocument r2;

        r0 := @this: org.apache.batik.dom.AbstractElementNS;

        r9 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: void <init>(java.lang.String,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        if r9 == null goto label1;

        $i1 = virtualinvoke r9.<java.lang.String: int length()>();

        if $i1 != 0 goto label1;

        r9 = null;

     label1:
        r0.<org.apache.batik.dom.AbstractElementNS: java.lang.String namespaceURI> = r9;

        $r10 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: java.lang.String getPrefix(java.lang.String)>(r1);

        if $r10 == null goto label3;

        if r9 == null goto label2;

        $r7 = "xml";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label3;

        $r8 = "http://www.w3.org/XML/1998/namespace";

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z1 != 0 goto label3;

     label2:
        $r3 = newarray (java.lang.Object)[3];

        $r11 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: short getNodeType()>();

        $i2 = (int) $s0;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>($i2);

        $r3[0] = $r11;

        $r5 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r3[1] = $r5;

        $r3[2] = r9;

        $r6 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(14, "namespace.uri", $r3);

        throw $r6;

     label3:
        return;
    }

    public java.lang.String getNamespaceURI()
    {
        org.apache.batik.dom.AbstractElementNS r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.AbstractElementNS;

        $r1 = r0.<org.apache.batik.dom.AbstractElementNS: java.lang.String namespaceURI>;

        return $r1;
    }

    protected org.w3c.dom.Node export(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractElementNS r0, r3;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String $r4;

        r0 := @this: org.apache.batik.dom.AbstractElementNS;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Node export(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r3 = (org.apache.batik.dom.AbstractElementNS) r1;

        $r4 = r0.<org.apache.batik.dom.AbstractElementNS: java.lang.String namespaceURI>;

        r3.<org.apache.batik.dom.AbstractElementNS: java.lang.String namespaceURI> = $r4;

        return r1;
    }

    protected org.w3c.dom.Node deepExport(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractElementNS r0, r3;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String $r4;

        r0 := @this: org.apache.batik.dom.AbstractElementNS;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Node deepExport(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r3 = (org.apache.batik.dom.AbstractElementNS) r1;

        $r4 = r0.<org.apache.batik.dom.AbstractElementNS: java.lang.String namespaceURI>;

        r3.<org.apache.batik.dom.AbstractElementNS: java.lang.String namespaceURI> = $r4;

        return r1;
    }

    protected org.w3c.dom.Node copyInto(org.w3c.dom.Node)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractElementNS r0, r2;
        java.lang.String $r3;

        r0 := @this: org.apache.batik.dom.AbstractElementNS;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Node copyInto(org.w3c.dom.Node)>(r1);

        r2 = (org.apache.batik.dom.AbstractElementNS) r1;

        $r3 = r0.<org.apache.batik.dom.AbstractElementNS: java.lang.String namespaceURI>;

        r2.<org.apache.batik.dom.AbstractElementNS: java.lang.String namespaceURI> = $r3;

        return r1;
    }

    protected org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractElementNS r0, r2;
        java.lang.String $r3;

        r0 := @this: org.apache.batik.dom.AbstractElementNS;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)>(r1);

        r2 = (org.apache.batik.dom.AbstractElementNS) r1;

        $r3 = r0.<org.apache.batik.dom.AbstractElementNS: java.lang.String namespaceURI>;

        r2.<org.apache.batik.dom.AbstractElementNS: java.lang.String namespaceURI> = $r3;

        return r1;
    }
}
