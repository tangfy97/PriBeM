public final class org.joda.time.chrono.ISOChronology extends org.joda.time.chrono.AssembledChronology
{
    private static final long serialVersionUID;
    private static final org.joda.time.chrono.ISOChronology INSTANCE_UTC;
    private static final int FAST_CACHE_SIZE;
    private static final org.joda.time.chrono.ISOChronology[] cFastCache;
    private static final java.util.Map cCache;

    public static org.joda.time.chrono.ISOChronology getInstanceUTC()
    {
        org.joda.time.chrono.ISOChronology $r0;

        $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>;

        return $r0;
    }

    public static org.joda.time.chrono.ISOChronology getInstance()
    {
        org.joda.time.chrono.ISOChronology $r1;
        org.joda.time.DateTimeZone $r0;

        $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0);

        return $r1;
    }

    public static org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)
    {
        java.lang.Throwable $r12;
        org.joda.time.chrono.ZonedChronology $r7;
        org.joda.time.DateTimeZone $r9, r13;
        org.joda.time.chrono.ISOChronology[] $r0, $r4;
        java.util.Map $r1, $r2, $r8;
        int $i0, $i1;
        org.joda.time.chrono.ISOChronology $r5, $r6, $r10, $r11, r14;
        java.lang.Object $r3;

        r13 := @parameter0: org.joda.time.DateTimeZone;

        if r13 != null goto label1;

        r13 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r13);

        $i1 = $i0 & 63;

        $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>;

        $r11 = $r0[$i1];

        if $r11 == null goto label2;

        $r9 = virtualinvoke $r11.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>();

        if $r9 != r13 goto label2;

        return $r11;

     label2:
        $r1 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>;

        entermonitor $r1;

     label3:
        $r2 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13);

        $r10 = (org.joda.time.chrono.ISOChronology) $r3;

        r14 = $r10;

        if $r10 != null goto label4;

        $r5 = new org.joda.time.chrono.ISOChronology;

        $r6 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>;

        $r7 = staticinvoke <org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>($r6, r13);

        specialinvoke $r5.<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>($r7);

        r14 = $r5;

        $r8 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, $r5);

     label4:
        exitmonitor $r1;

     label5:
        goto label8;

     label6:
        $r12 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r12;

     label8:
        $r4 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>;

        $r4[$i1] = r14;

        return r14;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void <init>(org.joda.time.Chronology)
    {
        org.joda.time.chrono.ISOChronology r0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.chrono.ISOChronology;

        r1 := @parameter0: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>(r1, null);

        return;
    }

    public org.joda.time.Chronology withUTC()
    {
        org.joda.time.chrono.ISOChronology $r0, r1;

        r1 := @this: org.joda.time.chrono.ISOChronology;

        $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>;

        return $r0;
    }

    public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone $r1, r3;
        org.joda.time.chrono.ISOChronology r0, $r2;

        r0 := @this: org.joda.time.chrono.ISOChronology;

        r3 := @parameter0: org.joda.time.DateTimeZone;

        if r3 != null goto label1;

        r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>();

        if r3 != $r1 goto label2;

        return r0;

     label2:
        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r3);

        return $r2;
    }

    public java.lang.String toString()
    {
        org.joda.time.DateTimeZone $r1;
        java.lang.StringBuffer $r2, $r3, $r4, $r6, $r7;
        org.joda.time.chrono.ISOChronology r0;
        java.lang.String $r5, r8;

        r0 := @this: org.joda.time.chrono.ISOChronology;

        r8 = "ISOChronology";

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>();

        if $r1 == null goto label1;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ISOChronology");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        $r5 = virtualinvoke $r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        return r8;
    }

    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.DateTimeZone $r2, $r3;
        org.joda.time.field.RemainderDateTimeField $r8, $r12;
        org.joda.time.DateTimeField $r6, $r9, $r13, $r16;
        org.joda.time.DateTimeFieldType $r7, $r11, $r15;
        org.joda.time.DurationField $r17;
        org.joda.time.Chronology $r1;
        org.joda.time.chrono.AssembledChronology$Fields r4;
        org.joda.time.chrono.ISOChronology r0;
        org.joda.time.field.DividedDateTimeField $r5, $r10, $r14;

        r0 := @this: org.joda.time.chrono.ISOChronology;

        r4 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology getBase()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        if $r2 != $r3 goto label1;

        $r5 = new org.joda.time.field.DividedDateTimeField;

        $r6 = <org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField INSTANCE>;

        $r7 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>();

        specialinvoke $r5.<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r6, $r7, 100);

        r4.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r5;

        $r8 = new org.joda.time.field.RemainderDateTimeField;

        $r9 = r4.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r10 = (org.joda.time.field.DividedDateTimeField) $r9;

        $r11 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>();

        specialinvoke $r8.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>($r10, $r11);

        r4.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r8;

        $r12 = new org.joda.time.field.RemainderDateTimeField;

        $r13 = r4.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r14 = (org.joda.time.field.DividedDateTimeField) $r13;

        $r15 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>();

        specialinvoke $r12.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>($r14, $r15);

        r4.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r12;

        $r16 = r4.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r17 = virtualinvoke $r16.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r4.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r17;

     label1:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.ISOChronology r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.ISOChronology;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public int hashCode()
    {
        org.joda.time.DateTimeZone $r2;
        int $i0, $i1, $i2, $i3;
        org.joda.time.chrono.ISOChronology r1;
        java.lang.String $r0;

        r1 := @this: org.joda.time.chrono.ISOChronology;

        $r0 = "ISO";

        $i0 = virtualinvoke $r0.<java.lang.String: int hashCode()>();

        $i1 = $i0 * 11;

        $r2 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>();

        $i2 = virtualinvoke $r2.<org.joda.time.DateTimeZone: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    private java.lang.Object writeReplace()
    {
        org.joda.time.chrono.ISOChronology$Stub $r0;
        org.joda.time.chrono.ISOChronology r1;
        org.joda.time.DateTimeZone $r2;

        r1 := @this: org.joda.time.chrono.ISOChronology;

        $r0 = new org.joda.time.chrono.ISOChronology$Stub;

        $r2 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>();

        specialinvoke $r0.<org.joda.time.chrono.ISOChronology$Stub: void <init>(org.joda.time.DateTimeZone)>($r2);

        return $r0;
    }

    static void <clinit>()
    {
        org.joda.time.DateTimeZone $r5;
        org.joda.time.chrono.ISOChronology[] $r1;
        org.joda.time.chrono.GregorianChronology $r3;
        java.util.Map $r6;
        org.joda.time.chrono.ISOChronology $r2, $r4;
        java.util.HashMap $r0;

        <org.joda.time.chrono.ISOChronology: int FAST_CACHE_SIZE> = 64;

        <org.joda.time.chrono.ISOChronology: long serialVersionUID> = -6212696554273812441L;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.joda.time.chrono.ISOChronology: java.util.Map cCache> = $r0;

        $r1 = newarray (org.joda.time.chrono.ISOChronology)[64];

        <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> = $r1;

        $r2 = new org.joda.time.chrono.ISOChronology;

        $r3 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>();

        specialinvoke $r2.<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>($r3);

        <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> = $r2;

        $r6 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>;

        $r5 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r4 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r4);

        return;
    }
}
