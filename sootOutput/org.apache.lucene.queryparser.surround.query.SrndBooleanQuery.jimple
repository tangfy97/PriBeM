class org.apache.lucene.queryparser.surround.query.SrndBooleanQuery extends java.lang.Object
{

    void <init>()
    {
        org.apache.lucene.queryparser.surround.query.SrndBooleanQuery r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SrndBooleanQuery;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void addQueriesToBoolean(org.apache.lucene.search.BooleanQuery, java.util.List, org.apache.lucene.search.BooleanClause$Occur)
    {
        org.apache.lucene.search.Query $r4;
        java.util.List r0;
        org.apache.lucene.search.BooleanQuery r1;
        int $i0, i1;
        java.lang.Object $r2;
        org.apache.lucene.search.BooleanClause$Occur r3;

        r1 := @parameter0: org.apache.lucene.search.BooleanQuery;

        r0 := @parameter1: java.util.List;

        r3 := @parameter2: org.apache.lucene.search.BooleanClause$Occur;

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (org.apache.lucene.search.Query) $r2;

        virtualinvoke r1.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r4, r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static org.apache.lucene.search.Query makeBooleanQuery(java.util.List, org.apache.lucene.search.BooleanClause$Occur)
    {
        java.lang.AssertionError $r4;
        java.util.List r0, $r2;
        org.apache.lucene.search.BooleanQuery $r1;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        org.apache.lucene.search.BooleanClause$Occur r3;

        r0 := @parameter0: java.util.List;

        r3 := @parameter1: org.apache.lucene.search.BooleanClause$Occur;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 > 1 goto label1;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too few subqueries: ");

        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r4;

     label1:
        $r1 = new org.apache.lucene.search.BooleanQuery;

        specialinvoke $r1.<org.apache.lucene.search.BooleanQuery: void <init>()>();

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        $r2 = interfaceinvoke r0.<java.util.List: java.util.List subList(int,int)>(0, $i1);

        staticinvoke <org.apache.lucene.queryparser.surround.query.SrndBooleanQuery: void addQueriesToBoolean(org.apache.lucene.search.BooleanQuery,java.util.List,org.apache.lucene.search.BooleanClause$Occur)>($r1, $r2, r3);

        return $r1;
    }
}
