public class org.apache.batik.ext.awt.g2d.GraphicContext extends java.lang.Object implements java.lang.Cloneable
{
    protected java.awt.geom.AffineTransform defaultTransform;
    protected java.awt.geom.AffineTransform transform;
    protected java.util.List transformStack;
    protected boolean transformStackValid;
    protected java.awt.Paint paint;
    protected java.awt.Stroke stroke;
    protected java.awt.Composite composite;
    protected java.awt.Shape clip;
    protected java.awt.RenderingHints hints;
    protected java.awt.Font font;
    protected java.awt.Color background;
    protected java.awt.Color foreground;

    public void <init>()
    {
        java.awt.Color $r4, $r9, $r10;
        java.awt.Font $r8;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        java.awt.RenderingHints $r7, $r13;
        java.awt.geom.AffineTransform $r1, $r2;
        java.util.ArrayList $r3;
        java.awt.AlphaComposite $r6;
        java.awt.RenderingHints$Key $r12;
        java.awt.BasicStroke $r5;
        java.lang.Object $r11;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.awt.geom.AffineTransform;

        specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>()>();

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform defaultTransform> = $r1;

        $r2 = new java.awt.geom.AffineTransform;

        specialinvoke $r2.<java.awt.geom.AffineTransform: void <init>()>();

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform transform> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack> = $r3;

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: boolean transformStackValid> = 1;

        $r4 = <java.awt.Color: java.awt.Color black>;

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Paint paint> = $r4;

        $r5 = new java.awt.BasicStroke;

        specialinvoke $r5.<java.awt.BasicStroke: void <init>()>();

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Stroke stroke> = $r5;

        $r6 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Composite composite> = $r6;

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Shape clip> = null;

        $r7 = new java.awt.RenderingHints;

        specialinvoke $r7.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.RenderingHints hints> = $r7;

        $r8 = new java.awt.Font;

        specialinvoke $r8.<java.awt.Font: void <init>(java.lang.String,int,int)>("sanserif", 0, 12);

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Font font> = $r8;

        $r9 = new java.awt.Color;

        specialinvoke $r9.<java.awt.Color: void <init>(int,int,int,int)>(0, 0, 0, 0);

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Color background> = $r9;

        $r10 = <java.awt.Color: java.awt.Color black>;

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Color foreground> = $r10;

        $r13 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.RenderingHints hints>;

        $r12 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_RENDERING>;

        $r11 = <java.awt.RenderingHints: java.lang.Object VALUE_RENDER_DEFAULT>;

        virtualinvoke $r13.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r11);

        return;
    }

    public void <init>(java.awt.geom.AffineTransform)
    {
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        org.apache.batik.ext.awt.g2d.TransformStackElement $r8;
        java.awt.geom.AffineTransform $r1, r2, $r3, $r4, $r5, $r6;
        java.util.List $r7;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        r2 := @parameter0: java.awt.geom.AffineTransform;

        specialinvoke r0.<org.apache.batik.ext.awt.g2d.GraphicContext: void <init>()>();

        $r1 = new java.awt.geom.AffineTransform;

        specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r2);

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform defaultTransform> = $r1;

        $r3 = new java.awt.geom.AffineTransform;

        $r4 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform defaultTransform>;

        specialinvoke $r3.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r4);

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform transform> = $r3;

        $r5 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform defaultTransform>;

        $z0 = virtualinvoke $r5.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z0 != 0 goto label1;

        $r7 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        $r6 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform defaultTransform>;

        $r8 = staticinvoke <org.apache.batik.ext.awt.g2d.TransformStackElement: org.apache.batik.ext.awt.g2d.TransformStackElement createGeneralTransformElement(java.awt.geom.AffineTransform)>($r6);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r8);

     label1:
        return;
    }

    public java.lang.Object clone()
    {
        java.awt.Color $r21, $r22;
        org.apache.batik.ext.awt.g2d.TransformStackElement r10;
        java.awt.RenderingHints $r17, $r19;
        java.util.ArrayList $r5;
        int $i0, $i1, i2;
        boolean $z0;
        java.awt.Stroke $r14;
        java.awt.Shape $r16, $r24;
        java.awt.Composite $r15;
        java.awt.Font $r20;
        org.apache.batik.ext.awt.g2d.GraphicContext $r0, r1;
        java.awt.geom.AffineTransform $r2, $r3, $r4;
        java.util.List $r6, $r7, $r8, $r11;
        java.awt.Paint $r13;
        java.lang.Object $r9, $r12, $r18;
        java.awt.geom.GeneralPath $r23;

        r1 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        $r0 = new org.apache.batik.ext.awt.g2d.GraphicContext;

        $r2 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform defaultTransform>;

        specialinvoke $r0.<org.apache.batik.ext.awt.g2d.GraphicContext: void <init>(java.awt.geom.AffineTransform)>($r2);

        $r3 = new java.awt.geom.AffineTransform;

        $r4 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform transform>;

        specialinvoke $r3.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r4);

        $r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform transform> = $r3;

        $r5 = new java.util.ArrayList;

        $r6 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        $r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack> = $r5;

        i2 = 0;

        goto label2;

     label1:
        $r8 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i2);

        r10 = (org.apache.batik.ext.awt.g2d.TransformStackElement) $r9;

        $r11 = $r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        $r12 = virtualinvoke r10.<org.apache.batik.ext.awt.g2d.TransformStackElement: java.lang.Object clone()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

        i2 = i2 + 1;

     label2:
        $r7 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i2 < $i1 goto label1;

        $z0 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: boolean transformStackValid>;

        $r0.<org.apache.batik.ext.awt.g2d.GraphicContext: boolean transformStackValid> = $z0;

        $r13 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Paint paint>;

        $r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Paint paint> = $r13;

        $r14 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Stroke stroke>;

        $r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Stroke stroke> = $r14;

        $r15 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Composite composite>;

        $r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Composite composite> = $r15;

        $r16 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Shape clip>;

        if $r16 == null goto label3;

        $r23 = new java.awt.geom.GeneralPath;

        $r24 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Shape clip>;

        specialinvoke $r23.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($r24);

        $r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Shape clip> = $r23;

        goto label4;

     label3:
        $r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Shape clip> = null;

     label4:
        $r17 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.RenderingHints hints>;

        $r18 = virtualinvoke $r17.<java.awt.RenderingHints: java.lang.Object clone()>();

        $r19 = (java.awt.RenderingHints) $r18;

        $r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.RenderingHints hints> = $r19;

        $r20 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Font font>;

        $r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Font font> = $r20;

        $r21 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Color background>;

        $r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Color background> = $r21;

        $r22 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Color foreground>;

        $r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Color foreground> = $r22;

        return $r0;
    }

    public java.awt.Color getColor()
    {
        java.awt.Color $r1;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Color foreground>;

        return $r1;
    }

    public void setColor(java.awt.Color)
    {
        java.awt.Color r0;
        org.apache.batik.ext.awt.g2d.GraphicContext r1;
        java.awt.Paint $r2;

        r1 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        r0 := @parameter0: java.awt.Color;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Paint paint>;

        if $r2 == r0 goto label2;

        virtualinvoke r1.<org.apache.batik.ext.awt.g2d.GraphicContext: void setPaint(java.awt.Paint)>(r0);

     label2:
        return;
    }

    public java.awt.Font getFont()
    {
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        java.awt.Font $r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Font font>;

        return $r1;
    }

    public void setFont(java.awt.Font)
    {
        org.apache.batik.ext.awt.g2d.GraphicContext r1;
        java.awt.Font r0;

        r1 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        r0 := @parameter0: java.awt.Font;

        if r0 == null goto label1;

        r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Font font> = r0;

     label1:
        return;
    }

    public java.awt.Rectangle getClipBounds()
    {
        java.awt.Shape $r1;
        java.awt.Rectangle $r2;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Shape getClip()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        return $r2;
    }

    public void clipRect(int, int, int, int)
    {
        java.awt.Rectangle $r1;
        int i0, i1, i2, i3;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = new java.awt.Rectangle;

        specialinvoke $r1.<java.awt.Rectangle: void <init>(int,int,int,int)>(i0, i1, i2, i3);

        virtualinvoke r0.<org.apache.batik.ext.awt.g2d.GraphicContext: void clip(java.awt.Shape)>($r1);

        return;
    }

    public void setClip(int, int, int, int)
    {
        java.awt.Rectangle $r1;
        int i0, i1, i2, i3;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = new java.awt.Rectangle;

        specialinvoke $r1.<java.awt.Rectangle: void <init>(int,int,int,int)>(i0, i1, i2, i3);

        virtualinvoke r0.<org.apache.batik.ext.awt.g2d.GraphicContext: void setClip(java.awt.Shape)>($r1);

        return;
    }

    public java.awt.Shape getClip()
    {
        java.awt.Shape $r3, $r4;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        java.awt.geom.NoninvertibleTransformException $r5;
        java.awt.geom.AffineTransform $r1, $r2;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform transform>;

        $r2 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

        $r3 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Shape clip>;

        $r4 = virtualinvoke $r2.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r3);

        return $r4;

     label2:
        $r5 := @caughtexception;

        return null;

        catch java.awt.geom.NoninvertibleTransformException from label1 to label2 with label2;
    }

    public void setClip(java.awt.Shape)
    {
        java.awt.Shape r0, $r3;
        org.apache.batik.ext.awt.g2d.GraphicContext r1;
        java.awt.geom.AffineTransform $r2;

        r1 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        r0 := @parameter0: java.awt.Shape;

        if r0 == null goto label1;

        $r2 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform transform>;

        $r3 = virtualinvoke $r2.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r0);

        r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Shape clip> = $r3;

        goto label2;

     label1:
        r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Shape clip> = null;

     label2:
        return;
    }

    public void setComposite(java.awt.Composite)
    {
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        java.awt.Composite r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        r1 := @parameter0: java.awt.Composite;

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Composite composite> = r1;

        return;
    }

    public void setPaint(java.awt.Paint)
    {
        java.awt.Color $r2;
        java.awt.Paint r0;
        org.apache.batik.ext.awt.g2d.GraphicContext r1;
        boolean $z0;

        r1 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        r0 := @parameter0: java.awt.Paint;

        if r0 != null goto label1;

        return;

     label1:
        r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Paint paint> = r0;

        $z0 = r0 instanceof java.awt.Color;

        if $z0 == 0 goto label2;

        $r2 = (java.awt.Color) r0;

        r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Color foreground> = $r2;

     label2:
        return;
    }

    public void setStroke(java.awt.Stroke)
    {
        java.awt.Stroke r1;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        r1 := @parameter0: java.awt.Stroke;

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Stroke stroke> = r1;

        return;
    }

    public void setRenderingHint(java.awt.RenderingHints$Key, java.lang.Object)
    {
        java.awt.RenderingHints$Key r1;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        java.lang.Object r2;
        java.awt.RenderingHints $r3;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        r1 := @parameter0: java.awt.RenderingHints$Key;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.RenderingHints hints>;

        virtualinvoke $r3.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)
    {
        java.awt.RenderingHints$Key r1;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        java.awt.RenderingHints $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        r1 := @parameter0: java.awt.RenderingHints$Key;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.RenderingHints hints>;

        $r3 = virtualinvoke $r2.<java.awt.RenderingHints: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public void setRenderingHints(java.util.Map)
    {
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        java.awt.RenderingHints $r1;
        java.util.Map r2;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        r2 := @parameter0: java.util.Map;

        $r1 = new java.awt.RenderingHints;

        specialinvoke $r1.<java.awt.RenderingHints: void <init>(java.util.Map)>(r2);

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.RenderingHints hints> = $r1;

        return;
    }

    public void addRenderingHints(java.util.Map)
    {
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        java.awt.RenderingHints $r2;
        java.util.Map r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.RenderingHints hints>;

        virtualinvoke $r2.<java.awt.RenderingHints: void putAll(java.util.Map)>(r1);

        return;
    }

    public java.awt.RenderingHints getRenderingHints()
    {
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        java.awt.RenderingHints $r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.RenderingHints hints>;

        return $r1;
    }

    public void translate(int, int)
    {
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        org.apache.batik.ext.awt.g2d.TransformStackElement $r3;
        java.awt.geom.AffineTransform $r1;
        java.util.List $r2;
        int i0, i1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 0 goto label1;

        if i1 == 0 goto label2;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform transform>;

        $d1 = (double) i0;

        $d0 = (double) i1;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void translate(double,double)>($d1, $d0);

        $r2 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        $d3 = (double) i0;

        $d2 = (double) i1;

        $r3 = staticinvoke <org.apache.batik.ext.awt.g2d.TransformStackElement: org.apache.batik.ext.awt.g2d.TransformStackElement createTranslateElement(double,double)>($d3, $d2);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

     label2:
        return;
    }

    public void translate(double, double)
    {
        java.util.List $r2;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        org.apache.batik.ext.awt.g2d.TransformStackElement $r3;
        java.awt.geom.AffineTransform $r1;
        double d0, d1;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void translate(double,double)>(d0, d1);

        $r2 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        $r3 = staticinvoke <org.apache.batik.ext.awt.g2d.TransformStackElement: org.apache.batik.ext.awt.g2d.TransformStackElement createTranslateElement(double,double)>(d0, d1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;
    }

    public void rotate(double)
    {
        java.util.List $r2;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        org.apache.batik.ext.awt.g2d.TransformStackElement $r3;
        java.awt.geom.AffineTransform $r1;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void rotate(double)>(d0);

        $r2 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        $r3 = staticinvoke <org.apache.batik.ext.awt.g2d.TransformStackElement: org.apache.batik.ext.awt.g2d.TransformStackElement createRotateElement(double)>(d0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;
    }

    public void rotate(double, double, double)
    {
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        org.apache.batik.ext.awt.g2d.TransformStackElement $r3, $r5, $r7;
        java.awt.geom.AffineTransform $r1;
        java.util.List $r2, $r4, $r6;
        double d0, d1, d2, $d3, $d4;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void rotate(double,double,double)>(d0, d1, d2);

        $r2 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        $r3 = staticinvoke <org.apache.batik.ext.awt.g2d.TransformStackElement: org.apache.batik.ext.awt.g2d.TransformStackElement createTranslateElement(double,double)>(d1, d2);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r4 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        $r5 = staticinvoke <org.apache.batik.ext.awt.g2d.TransformStackElement: org.apache.batik.ext.awt.g2d.TransformStackElement createRotateElement(double)>(d0);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        $d4 = neg d1;

        $d3 = neg d2;

        $r7 = staticinvoke <org.apache.batik.ext.awt.g2d.TransformStackElement: org.apache.batik.ext.awt.g2d.TransformStackElement createTranslateElement(double,double)>($d4, $d3);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        return;
    }

    public void scale(double, double)
    {
        java.util.List $r2;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        org.apache.batik.ext.awt.g2d.TransformStackElement $r3;
        java.awt.geom.AffineTransform $r1;
        double d0, d1;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void scale(double,double)>(d0, d1);

        $r2 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        $r3 = staticinvoke <org.apache.batik.ext.awt.g2d.TransformStackElement: org.apache.batik.ext.awt.g2d.TransformStackElement createScaleElement(double,double)>(d0, d1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;
    }

    public void shear(double, double)
    {
        java.util.List $r2;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        org.apache.batik.ext.awt.g2d.TransformStackElement $r3;
        java.awt.geom.AffineTransform $r1;
        double d0, d1;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void shear(double,double)>(d0, d1);

        $r2 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        $r3 = staticinvoke <org.apache.batik.ext.awt.g2d.TransformStackElement: org.apache.batik.ext.awt.g2d.TransformStackElement createShearElement(double,double)>(d0, d1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;
    }

    public void transform(java.awt.geom.AffineTransform)
    {
        java.util.List $r3;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        org.apache.batik.ext.awt.g2d.TransformStackElement $r4;
        java.awt.geom.AffineTransform r1, $r2;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>(r1);

        $r3 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        $r4 = staticinvoke <org.apache.batik.ext.awt.g2d.TransformStackElement: org.apache.batik.ext.awt.g2d.TransformStackElement createGeneralTransformElement(java.awt.geom.AffineTransform)>(r1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        return;
    }

    public void setTransform(java.awt.geom.AffineTransform)
    {
        java.util.List $r3;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        org.apache.batik.ext.awt.g2d.TransformStackElement $r4;
        java.awt.geom.AffineTransform $r1, r2;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        r2 := @parameter0: java.awt.geom.AffineTransform;

        $r1 = new java.awt.geom.AffineTransform;

        specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r2);

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform transform> = $r1;

        virtualinvoke r0.<org.apache.batik.ext.awt.g2d.GraphicContext: void invalidateTransformStack()>();

        $z0 = virtualinvoke r2.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        $r4 = staticinvoke <org.apache.batik.ext.awt.g2d.TransformStackElement: org.apache.batik.ext.awt.g2d.TransformStackElement createGeneralTransformElement(java.awt.geom.AffineTransform)>(r2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

     label1:
        return;
    }

    public void validateTransformStack()
    {
        org.apache.batik.ext.awt.g2d.GraphicContext r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: boolean transformStackValid> = 1;

        return;
    }

    public boolean isTransformStackValid()
    {
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        $z0 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: boolean transformStackValid>;

        return $z0;
    }

    public org.apache.batik.ext.awt.g2d.TransformStackElement[] getTransformStack()
    {
        java.util.List $r1, $r3;
        int $i0;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        org.apache.batik.ext.awt.g2d.TransformStackElement[] r2;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        r2 = newarray (org.apache.batik.ext.awt.g2d.TransformStackElement)[$i0];

        $r3 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        return r2;
    }

    protected void invalidateTransformStack()
    {
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        java.util.List $r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.util.List transformStack>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: boolean transformStackValid> = 0;

        return;
    }

    public java.awt.geom.AffineTransform getTransform()
    {
        org.apache.batik.ext.awt.g2d.GraphicContext r1;
        java.awt.geom.AffineTransform $r0, $r2;

        r1 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        $r0 = new java.awt.geom.AffineTransform;

        $r2 = r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform transform>;

        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r2);

        return $r0;
    }

    public java.awt.Paint getPaint()
    {
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        java.awt.Paint $r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Paint paint>;

        return $r1;
    }

    public java.awt.Composite getComposite()
    {
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        java.awt.Composite $r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Composite composite>;

        return $r1;
    }

    public void setBackground(java.awt.Color)
    {
        java.awt.Color r0;
        org.apache.batik.ext.awt.g2d.GraphicContext r1;

        r1 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        r0 := @parameter0: java.awt.Color;

        if r0 != null goto label1;

        return;

     label1:
        r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Color background> = r0;

        return;
    }

    public java.awt.Color getBackground()
    {
        java.awt.Color $r1;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Color background>;

        return $r1;
    }

    public java.awt.Stroke getStroke()
    {
        java.awt.Stroke $r1;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Stroke stroke>;

        return $r1;
    }

    public void clip(java.awt.Shape)
    {
        java.awt.Shape $r1, $r3, r7;
        java.awt.geom.Area $r2, $r4;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        java.awt.geom.AffineTransform $r6;
        java.awt.geom.GeneralPath $r5;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        r7 := @parameter0: java.awt.Shape;

        if r7 == null goto label1;

        $r6 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform transform>;

        r7 = virtualinvoke $r6.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r7);

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Shape clip>;

        if $r1 == null goto label2;

        $r2 = new java.awt.geom.Area;

        $r3 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Shape clip>;

        specialinvoke $r2.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r3);

        $r4 = new java.awt.geom.Area;

        specialinvoke $r4.<java.awt.geom.Area: void <init>(java.awt.Shape)>(r7);

        virtualinvoke $r2.<java.awt.geom.Area: void intersect(java.awt.geom.Area)>($r4);

        $r5 = new java.awt.geom.GeneralPath;

        specialinvoke $r5.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($r2);

        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Shape clip> = $r5;

        goto label3;

     label2:
        r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Shape clip> = r7;

     label3:
        return;
    }

    public java.awt.font.FontRenderContext getFontRenderContext()
    {
        java.awt.RenderingHints $r2, $r10, $r15;
        boolean z0, z1;
        org.apache.batik.ext.awt.g2d.GraphicContext r0;
        java.awt.geom.AffineTransform $r6;
        java.awt.font.FontRenderContext $r5;
        java.awt.RenderingHints$Key $r1, $r9, $r16;
        java.lang.Object $r3, $r4, $r7, $r8, $r11, $r12, $r13, $r14, $r17, $r18;

        r0 := @this: org.apache.batik.ext.awt.g2d.GraphicContext;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.RenderingHints hints>;

        $r1 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        $r3 = virtualinvoke $r2.<java.awt.RenderingHints: java.lang.Object get(java.lang.Object)>($r1);

        z0 = 1;

        $r4 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_ON>;

        if $r3 == $r4 goto label2;

        $r7 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_DEFAULT>;

        if $r3 == $r7 goto label2;

        $r8 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_OFF>;

        if $r3 == $r8 goto label1;

        $r10 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.RenderingHints hints>;

        $r9 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r11 = virtualinvoke $r10.<java.awt.RenderingHints: java.lang.Object get(java.lang.Object)>($r9);

        $r12 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>;

        if $r11 == $r12 goto label2;

        $r13 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_DEFAULT>;

        if $r11 == $r13 goto label2;

        $r14 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_OFF>;

        if $r11 != $r14 goto label2;

        z0 = 0;

        goto label2;

     label1:
        z0 = 0;

     label2:
        z1 = 1;

        $r15 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.RenderingHints hints>;

        $r16 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_FRACTIONALMETRICS>;

        $r17 = virtualinvoke $r15.<java.awt.RenderingHints: java.lang.Object get(java.lang.Object)>($r16);

        $r18 = <java.awt.RenderingHints: java.lang.Object VALUE_FRACTIONALMETRICS_OFF>;

        if $r17 != $r18 goto label3;

        z1 = 0;

     label3:
        $r5 = new java.awt.font.FontRenderContext;

        $r6 = r0.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform defaultTransform>;

        specialinvoke $r5.<java.awt.font.FontRenderContext: void <init>(java.awt.geom.AffineTransform,boolean,boolean)>($r6, z0, z1);

        return $r5;
    }
}
