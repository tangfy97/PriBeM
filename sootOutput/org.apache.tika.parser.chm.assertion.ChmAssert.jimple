public class org.apache.tika.parser.chm.assertion.ChmAssert extends java.lang.Object
{

    public void <init>()
    {
        org.apache.tika.parser.chm.assertion.ChmAssert r0;

        r0 := @this: org.apache.tika.parser.chm.assertion.ChmAssert;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final void assertChmBlockSegment(byte[], org.apache.tika.parser.chm.accessor.ChmLzxcResetTable, int, int, int) throws org.apache.tika.exception.TikaException
    {
        byte[] r0;
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r1;
        long[] $r2;
        org.apache.tika.exception.TikaException $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int $i0, $i1, i2, i3, i4;

        r0 := @parameter0: byte[];

        r1 := @parameter1: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        if r0 != null goto label1;

        $r9 = new org.apache.tika.exception.TikaException;

        specialinvoke $r9.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>("data[] is null");

        throw $r9;

     label1:
        $i0 = lengthof r0;

        if $i0 > 0 goto label2;

        $r8 = new org.apache.tika.exception.TikaException;

        specialinvoke $r8.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>("data[] length should be greater than zero");

        throw $r8;

     label2:
        if r1 != null goto label3;

        $r7 = new org.apache.tika.exception.TikaException;

        specialinvoke $r7.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>("resetTable is null");

        throw $r7;

     label3:
        $r2 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long[] getBlockAddress()>();

        $i1 = lengthof $r2;

        if $i1 > 1 goto label4;

        $r6 = new org.apache.tika.exception.TikaException;

        specialinvoke $r6.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>("resetTable.getBlockAddress().length should be greater than zero");

        throw $r6;

     label4:
        if i2 >= 0 goto label5;

        $r5 = new org.apache.tika.exception.TikaException;

        specialinvoke $r5.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>("blockNumber should be positive number");

        throw $r5;

     label5:
        if i3 >= 0 goto label6;

        $r4 = new org.apache.tika.exception.TikaException;

        specialinvoke $r4.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>("lzxcBlockOffset should be positive number");

        throw $r4;

     label6:
        if i4 >= 0 goto label7;

        $r3 = new org.apache.tika.exception.TikaException;

        specialinvoke $r3.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>("lzxcBlockLength should be positive number");

        throw $r3;

     label7:
        return;
    }

    public static final void assertInputStreamNotNull(java.io.InputStream) throws java.io.IOException
    {
        java.io.IOException $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        if r0 != null goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("input sream is null");

        throw $r1;

     label1:
        return;
    }

    public static final void assertChmAccessorParameters(byte[], org.apache.tika.parser.chm.accessor.ChmAccessor, int) throws org.apache.tika.parser.chm.exception.ChmParsingException
    {
        int i0;
        byte[] r0;
        org.apache.tika.parser.chm.accessor.ChmAccessor r1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: org.apache.tika.parser.chm.accessor.ChmAccessor;

        i0 := @parameter2: int;

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertByteArrayNotNull(byte[])>(r0);

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertChmAccessorNotNull(org.apache.tika.parser.chm.accessor.ChmAccessor)>(r1);

        return;
    }

    public static final void assertByteArrayNotNull(byte[]) throws org.apache.tika.parser.chm.exception.ChmParsingException
    {
        byte[] r0;
        org.apache.tika.parser.chm.exception.ChmParsingException $r1;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        $r1 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r1.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("byte[] data is null");

        throw $r1;

     label1:
        return;
    }

    public static final void assertChmAccessorNotNull(org.apache.tika.parser.chm.accessor.ChmAccessor) throws org.apache.tika.parser.chm.exception.ChmParsingException
    {
        org.apache.tika.parser.chm.exception.ChmParsingException $r1;
        org.apache.tika.parser.chm.accessor.ChmAccessor r0;

        r0 := @parameter0: org.apache.tika.parser.chm.accessor.ChmAccessor;

        if r0 != null goto label1;

        $r1 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r1.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("chm header is null");

        throw $r1;

     label1:
        return;
    }

    public static final void assertDirectoryListingEntry(int, java.lang.String, org.apache.tika.parser.chm.core.ChmCommons$EntryType, int, int) throws org.apache.tika.parser.chm.exception.ChmParsingException
    {
        org.apache.tika.parser.chm.core.ChmCommons$EntryType r1, $r2, $r5;
        org.apache.tika.parser.chm.exception.ChmParsingException $r3, $r4, $r6, $r7, $r8;
        int i0, i1, i2;
        java.lang.String r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: org.apache.tika.parser.chm.core.ChmCommons$EntryType;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        if i0 >= 0 goto label1;

        $r8 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r8.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("invalid name length");

        throw $r8;

     label1:
        if r0 != null goto label2;

        $r7 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r7.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("invalid name");

        throw $r7;

     label2:
        $r2 = <org.apache.tika.parser.chm.core.ChmCommons$EntryType: org.apache.tika.parser.chm.core.ChmCommons$EntryType COMPRESSED>;

        if r1 == $r2 goto label3;

        $r5 = <org.apache.tika.parser.chm.core.ChmCommons$EntryType: org.apache.tika.parser.chm.core.ChmCommons$EntryType UNCOMPRESSED>;

        if r1 == $r5 goto label3;

        $r6 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r6.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("invalid compressed type, should be EntryType.COMPRESSED | EntryType.UNCOMPRESSED");

        throw $r6;

     label3:
        if i1 >= 0 goto label4;

        $r4 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r4.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("invalid offset");

        throw $r4;

     label4:
        if i2 >= 0 goto label5;

        $r3 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r3.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("invalid length");

        throw $r3;

     label5:
        return;
    }

    public static void assertCopyingDataIndex(int, int) throws org.apache.tika.parser.chm.exception.ChmParsingException
    {
        int i0, i1;
        org.apache.tika.parser.chm.exception.ChmParsingException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < i1 goto label1;

        $r0 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r0.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("cannot parse chm file index > data.length");

        throw $r0;

     label1:
        return;
    }

    public static void assertPositiveInt(int) throws org.apache.tika.parser.chm.exception.ChmParsingException
    {
        int i0;
        org.apache.tika.parser.chm.exception.ChmParsingException $r0;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r0 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r0.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("resetTable.getBlockAddress().length should be greater than zero");

        throw $r0;

     label1:
        return;
    }
}
