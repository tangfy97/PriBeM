public class org.apache.batik.transcoder.image.PNGTranscoder extends org.apache.batik.transcoder.image.ImageTranscoder
{
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_GAMMA;
    public static final float[] DEFAULT_CHROMA;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_INDEXED;

    public void <init>()
    {
        org.apache.batik.transcoder.TranscodingHints $r3;
        java.lang.Boolean $r1;
        org.apache.batik.transcoder.TranscodingHints$Key $r2;
        org.apache.batik.transcoder.image.PNGTranscoder r0;

        r0 := @this: org.apache.batik.transcoder.image.PNGTranscoder;

        specialinvoke r0.<org.apache.batik.transcoder.image.ImageTranscoder: void <init>()>();

        $r3 = r0.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r2 = <org.apache.batik.transcoder.image.ImageTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_FORCE_TRANSPARENT_WHITE>;

        $r1 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r3.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        return;
    }

    public org.apache.batik.bridge.UserAgent getUserAgent()
    {
        org.apache.batik.bridge.UserAgent $r1;
        org.apache.batik.transcoder.image.PNGTranscoder r0;

        r0 := @this: org.apache.batik.transcoder.image.PNGTranscoder;

        $r1 = r0.<org.apache.batik.transcoder.SVGAbstractTranscoder: org.apache.batik.bridge.UserAgent userAgent>;

        return $r1;
    }

    public java.awt.image.BufferedImage createImage(int, int)
    {
        java.awt.image.BufferedImage $r0;
        int i0, i1;
        org.apache.batik.transcoder.image.PNGTranscoder r1;

        r1 := @this: org.apache.batik.transcoder.image.PNGTranscoder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.awt.image.BufferedImage;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 2);

        return $r0;
    }

    private org.apache.batik.transcoder.image.PNGTranscoder$WriteAdapter getWriteAdapter(java.lang.String)
    {
        java.lang.IllegalAccessException $r4;
        org.apache.batik.transcoder.image.PNGTranscoder$WriteAdapter r3;
        org.apache.batik.transcoder.image.PNGTranscoder r7;
        java.lang.InstantiationException $r5;
        java.lang.Class $r1;
        java.lang.Object $r2;
        java.lang.ClassNotFoundException $r6;
        java.lang.String r0;

        r7 := @this: org.apache.batik.transcoder.image.PNGTranscoder;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

        r3 = (org.apache.batik.transcoder.image.PNGTranscoder$WriteAdapter) $r2;

        return r3;

     label2:
        $r6 := @caughtexception;

        return null;

     label3:
        $r5 := @caughtexception;

        return null;

     label4:
        $r4 := @caughtexception;

        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    public void writeImage(java.awt.image.BufferedImage, org.apache.batik.transcoder.TranscoderOutput) throws org.apache.batik.transcoder.TranscoderException
    {
        java.awt.image.SampleModel $r8;
        java.lang.Boolean $r12;
        java.awt.image.SinglePixelPackedSampleModel r15;
        org.apache.batik.transcoder.TranscodingHints$Key $r3, $r9;
        java.lang.String $r14;
        boolean $z0, z1;
        java.io.OutputStream $r1;
        java.awt.image.BufferedImage r6;
        org.apache.batik.transcoder.TranscoderOutput r0;
        org.apache.batik.transcoder.image.PNGTranscoder$WriteAdapter $r5, r16;
        org.apache.batik.transcoder.image.PNGTranscoder r2;
        org.apache.batik.transcoder.TranscodingHints $r4, $r10;
        org.apache.batik.transcoder.TranscoderException $r7, $r13;
        java.lang.Object $r11;

        r2 := @this: org.apache.batik.transcoder.image.PNGTranscoder;

        r6 := @parameter0: java.awt.image.BufferedImage;

        r0 := @parameter1: org.apache.batik.transcoder.TranscoderOutput;

        $r1 = virtualinvoke r0.<org.apache.batik.transcoder.TranscoderOutput: java.io.OutputStream getOutputStream()>();

        if $r1 != null goto label1;

        $r13 = new org.apache.batik.transcoder.TranscoderException;

        $r14 = staticinvoke <org.apache.batik.transcoder.image.resources.Messages: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("png.badoutput", null);

        specialinvoke $r13.<org.apache.batik.transcoder.TranscoderException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label1:
        z1 = 0;

        $r4 = r2.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r3 = <org.apache.batik.transcoder.image.ImageTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_FORCE_TRANSPARENT_WHITE>;

        $z0 = virtualinvoke $r4.<org.apache.batik.transcoder.TranscodingHints: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r10 = r2.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r9 = <org.apache.batik.transcoder.image.ImageTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_FORCE_TRANSPARENT_WHITE>;

        $r11 = virtualinvoke $r10.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r9);

        $r12 = (java.lang.Boolean) $r11;

        z1 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        if z1 == 0 goto label3;

        $r8 = virtualinvoke r6.<java.awt.image.BufferedImage: java.awt.image.SampleModel getSampleModel()>();

        r15 = (java.awt.image.SinglePixelPackedSampleModel) $r8;

        virtualinvoke r2.<org.apache.batik.transcoder.image.ImageTranscoder: void forceTransparentWhite(java.awt.image.BufferedImage,java.awt.image.SinglePixelPackedSampleModel)>(r6, r15);

     label3:
        $r5 = specialinvoke r2.<org.apache.batik.transcoder.image.PNGTranscoder: org.apache.batik.transcoder.image.PNGTranscoder$WriteAdapter getWriteAdapter(java.lang.String)>("org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter");

        r16 = $r5;

        if $r5 != null goto label4;

        r16 = specialinvoke r2.<org.apache.batik.transcoder.image.PNGTranscoder: org.apache.batik.transcoder.image.PNGTranscoder$WriteAdapter getWriteAdapter(java.lang.String)>("org.apache.batik.transcoder.image.PNGTranscoderImageIOWriteAdapter");

     label4:
        if r16 != null goto label5;

        $r7 = new org.apache.batik.transcoder.TranscoderException;

        specialinvoke $r7.<org.apache.batik.transcoder.TranscoderException: void <init>(java.lang.String)>("Could not write PNG file because no WriteAdapter is availble");

        throw $r7;

     label5:
        interfaceinvoke r16.<org.apache.batik.transcoder.image.PNGTranscoder$WriteAdapter: void writeImage(org.apache.batik.transcoder.image.PNGTranscoder,java.awt.image.BufferedImage,org.apache.batik.transcoder.TranscoderOutput)>(r2, r6, r0);

        return;
    }

    static void <clinit>()
    {
        org.apache.batik.transcoder.keys.IntegerKey $r2;
        float[] $r1;
        org.apache.batik.transcoder.keys.FloatKey $r0;

        $r0 = new org.apache.batik.transcoder.keys.FloatKey;

        specialinvoke $r0.<org.apache.batik.transcoder.keys.FloatKey: void <init>()>();

        <org.apache.batik.transcoder.image.PNGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_GAMMA> = $r0;

        $r1 = newarray (float)[8];

        $r1[0] = 0.3127F;

        $r1[1] = 0.329F;

        $r1[2] = 0.64F;

        $r1[3] = 0.33F;

        $r1[4] = 0.3F;

        $r1[5] = 0.6F;

        $r1[6] = 0.15F;

        $r1[7] = 0.06F;

        <org.apache.batik.transcoder.image.PNGTranscoder: float[] DEFAULT_CHROMA> = $r1;

        $r2 = new org.apache.batik.transcoder.keys.IntegerKey;

        specialinvoke $r2.<org.apache.batik.transcoder.keys.IntegerKey: void <init>()>();

        <org.apache.batik.transcoder.image.PNGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_INDEXED> = $r2;

        return;
    }
}
