public class org.apache.commons.collections.ReferenceMap extends java.util.AbstractMap
{
    private static final long serialVersionUID;
    public static final int HARD;
    public static final int SOFT;
    public static final int WEAK;
    private int keyType;
    private int valueType;
    private float loadFactor;
    private boolean purgeValues;
    private transient java.lang.ref.ReferenceQueue queue;
    private transient org.apache.commons.collections.ReferenceMap$Entry[] table;
    private transient int size;
    private transient int threshold;
    private transient volatile int modCount;
    private transient java.util.Set keySet;
    private transient java.util.Set entrySet;
    private transient java.util.Collection values;

    public void <init>()
    {
        org.apache.commons.collections.ReferenceMap r0;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        specialinvoke r0.<org.apache.commons.collections.ReferenceMap: void <init>(int,int)>(0, 1);

        return;
    }

    public void <init>(int, int, boolean)
    {
        int i0, i1;
        org.apache.commons.collections.ReferenceMap r0;
        boolean z0;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.commons.collections.ReferenceMap: void <init>(int,int)>(i0, i1);

        r0.<org.apache.commons.collections.ReferenceMap: boolean purgeValues> = z0;

        return;
    }

    public void <init>(int, int)
    {
        int i0, i1;
        org.apache.commons.collections.ReferenceMap r0;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.collections.ReferenceMap: void <init>(int,int,int,float)>(i0, i1, 16, 0.75F);

        return;
    }

    public void <init>(int, int, int, float, boolean)
    {
        int i0, i1, i2;
        float f0;
        org.apache.commons.collections.ReferenceMap r0;
        boolean z0;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        f0 := @parameter3: float;

        z0 := @parameter4: boolean;

        specialinvoke r0.<org.apache.commons.collections.ReferenceMap: void <init>(int,int,int,float)>(i0, i1, i2, f0);

        r0.<org.apache.commons.collections.ReferenceMap: boolean purgeValues> = z0;

        return;
    }

    public void <init>(int, int, int, float)
    {
        java.lang.ref.ReferenceQueue $r5;
        byte $b3, $b4;
        int i0, i1, i2, $i5, i6, $i7, $i8;
        org.apache.commons.collections.ReferenceMap$Entry[] $r3;
        org.apache.commons.collections.ReferenceMap r0;
        java.lang.IllegalArgumentException $r6, $r7;
        float f0, $f1, $f2;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        f0 := @parameter3: float;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<org.apache.commons.collections.ReferenceMap: boolean purgeValues> = 0;

        $r5 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r5.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<org.apache.commons.collections.ReferenceMap: java.lang.ref.ReferenceQueue queue> = $r5;

        staticinvoke <org.apache.commons.collections.ReferenceMap: void verify(java.lang.String,int)>("keyType", i0);

        staticinvoke <org.apache.commons.collections.ReferenceMap: void verify(java.lang.String,int)>("valueType", i1);

        if i2 > 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("capacity must be positive");

        throw $r6;

     label1:
        $b3 = f0 cmpg 0.0F;

        $i7 = (int) $b3;

        if $i7 <= 0 goto label2;

        $b4 = f0 cmpl 1.0F;

        $i8 = (int) $b4;

        if $i8 < 0 goto label3;

     label2:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Load factor must be greater than 0 and less than 1.");

        throw $r7;

     label3:
        r0.<org.apache.commons.collections.ReferenceMap: int keyType> = i0;

        r0.<org.apache.commons.collections.ReferenceMap: int valueType> = i1;

        i6 = 1;

     label4:
        if i6 >= i2 goto label5;

        i6 = i6 * 2;

        goto label4;

     label5:
        $r3 = newarray (org.apache.commons.collections.ReferenceMap$Entry)[i6];

        r0.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table> = $r3;

        r0.<org.apache.commons.collections.ReferenceMap: float loadFactor> = f0;

        $f1 = (float) i6;

        $f2 = $f1 * f0;

        $i5 = (int) $f2;

        r0.<org.apache.commons.collections.ReferenceMap: int threshold> = $i5;

        return;
    }

    private static void verify(java.lang.String, int)
    {
        java.lang.StringBuffer $r1, $r3, $r4;
        int i0;
        java.lang.String r2, $r5;
        java.lang.IllegalArgumentException $r0;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 <= 2 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must be HARD, SOFT, WEAK.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label2:
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.apache.commons.collections.ReferenceMap r1;
        int $i0;
        org.apache.commons.collections.ReferenceMap$Entry[] $r2;
        java.io.ObjectOutputStream r0;
        java.lang.Object $r5, $r7, $r8;
        boolean $z0;

        r1 := @this: org.apache.commons.collections.ReferenceMap;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r1.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        $i0 = lengthof $r2;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r3 = virtualinvoke r1.<org.apache.commons.collections.ReferenceMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r7);

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r8);

        goto label1;

     label2:
        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        org.apache.commons.collections.ReferenceMap r1;
        java.lang.ref.ReferenceQueue $r4;
        int $i0, $i1, $i2;
        org.apache.commons.collections.ReferenceMap$Entry[] $r2, $r3;
        float $f0, $f1, $f2;
        java.lang.Object $r5, r6;

        r1 := @this: org.apache.commons.collections.ReferenceMap;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $i0 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        $r2 = newarray (org.apache.commons.collections.ReferenceMap$Entry)[$i0];

        r1.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table> = $r2;

        $r3 = r1.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        $i1 = lengthof $r3;

        $f1 = (float) $i1;

        $f0 = r1.<org.apache.commons.collections.ReferenceMap: float loadFactor>;

        $f2 = $f1 * $f0;

        $i2 = (int) $f2;

        r1.<org.apache.commons.collections.ReferenceMap: int threshold> = $i2;

        $r4 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r4.<java.lang.ref.ReferenceQueue: void <init>()>();

        r1.<org.apache.commons.collections.ReferenceMap: java.lang.ref.ReferenceQueue queue> = $r4;

        r6 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

     label1:
        if r6 == null goto label2;

        $r5 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke r1.<org.apache.commons.collections.ReferenceMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r5);

        r6 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        goto label1;

     label2:
        return;
    }

    private java.lang.Object toReference(int, java.lang.Object, int)
    {
        org.apache.commons.collections.ReferenceMap$WeakRef $r0;
        java.lang.Error $r6;
        org.apache.commons.collections.ReferenceMap r2;
        java.lang.ref.ReferenceQueue $r3, $r5;
        org.apache.commons.collections.ReferenceMap$SoftRef $r4;
        int i0, i1;
        java.lang.Object r1;

        r2 := @this: org.apache.commons.collections.ReferenceMap;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        i1 := @parameter2: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        return r1;

     label2:
        $r4 = new org.apache.commons.collections.ReferenceMap$SoftRef;

        $r5 = r2.<org.apache.commons.collections.ReferenceMap: java.lang.ref.ReferenceQueue queue>;

        specialinvoke $r4.<org.apache.commons.collections.ReferenceMap$SoftRef: void <init>(int,java.lang.Object,java.lang.ref.ReferenceQueue)>(i1, r1, $r5);

        return $r4;

     label3:
        $r0 = new org.apache.commons.collections.ReferenceMap$WeakRef;

        $r3 = r2.<org.apache.commons.collections.ReferenceMap: java.lang.ref.ReferenceQueue queue>;

        specialinvoke $r0.<org.apache.commons.collections.ReferenceMap$WeakRef: void <init>(int,java.lang.Object,java.lang.ref.ReferenceQueue)>(i1, r1, $r3);

        return $r0;

     label4:
        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>()>();

        throw $r6;
    }

    private org.apache.commons.collections.ReferenceMap$Entry getEntry(java.lang.Object)
    {
        org.apache.commons.collections.ReferenceMap r1;
        org.apache.commons.collections.ReferenceMap$Entry r4;
        int $i0, $i1, $i2;
        org.apache.commons.collections.ReferenceMap$Entry[] $r2;
        java.lang.Object r0, $r3;
        boolean $z0;

        r1 := @this: org.apache.commons.collections.ReferenceMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i1 = specialinvoke r1.<org.apache.commons.collections.ReferenceMap: int indexFor(int)>($i0);

        $r2 = r1.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        r4 = $r2[$i1];

     label2:
        if r4 == null goto label4;

        $i2 = r4.<org.apache.commons.collections.ReferenceMap$Entry: int hash>;

        if $i2 != $i0 goto label3;

        $r3 = virtualinvoke r4.<org.apache.commons.collections.ReferenceMap$Entry: java.lang.Object getKey()>();

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        return r4;

     label3:
        r4 = r4.<org.apache.commons.collections.ReferenceMap$Entry: org.apache.commons.collections.ReferenceMap$Entry next>;

        goto label2;

     label4:
        return null;
    }

    private int indexFor(int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15, i16, i17, $i19, $i21;
        org.apache.commons.collections.ReferenceMap$Entry[] $r1;
        org.apache.commons.collections.ReferenceMap r0;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        i11 := @parameter0: int;

        $i0 = i11 << 15;

        $i19 = (int) -1;

        $i1 = $i0 ^ $i19;

        i12 = i11 + $i1;

        $i2 = i12 >>> 10;

        i13 = i12 ^ $i2;

        $i3 = i13 << 3;

        i14 = i13 + $i3;

        $i4 = i14 >>> 6;

        i15 = i14 ^ $i4;

        $i5 = i15 << 11;

        $i21 = (int) -1;

        $i6 = $i5 ^ $i21;

        i16 = i15 + $i6;

        $i7 = i16 >>> 16;

        i17 = i16 ^ $i7;

        $r1 = r0.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        $i8 = lengthof $r1;

        $i9 = $i8 - 1;

        $i10 = i17 & $i9;

        return $i10;
    }

    private void resize()
    {
        org.apache.commons.collections.ReferenceMap$Entry r4, $r6, r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        org.apache.commons.collections.ReferenceMap$Entry[] r1, $r2, $r3, $r5, $r7;
        org.apache.commons.collections.ReferenceMap r0;
        float $f0, $f1, $f2;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        r1 = r0.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        $i0 = lengthof r1;

        $i1 = $i0 * 2;

        $r2 = newarray (org.apache.commons.collections.ReferenceMap$Entry)[$i1];

        r0.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table> = $r2;

        i7 = 0;

     label1:
        $i2 = lengthof r1;

        if i7 >= $i2 goto label4;

        r8 = r1[i7];

     label2:
        if r8 == null goto label3;

        r4 = r8;

        r8 = r8.<org.apache.commons.collections.ReferenceMap$Entry: org.apache.commons.collections.ReferenceMap$Entry next>;

        $i5 = r4.<org.apache.commons.collections.ReferenceMap$Entry: int hash>;

        $i6 = specialinvoke r0.<org.apache.commons.collections.ReferenceMap: int indexFor(int)>($i5);

        $r5 = r0.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        $r6 = $r5[$i6];

        r4.<org.apache.commons.collections.ReferenceMap$Entry: org.apache.commons.collections.ReferenceMap$Entry next> = $r6;

        $r7 = r0.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        $r7[$i6] = r4;

        goto label2;

     label3:
        r1[i7] = null;

        i7 = i7 + 1;

        goto label1;

     label4:
        $r3 = r0.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        $i3 = lengthof $r3;

        $f1 = (float) $i3;

        $f0 = r0.<org.apache.commons.collections.ReferenceMap: float loadFactor>;

        $f2 = $f1 * $f0;

        $i4 = (int) $f2;

        r0.<org.apache.commons.collections.ReferenceMap: int threshold> = $i4;

        return;
    }

    private void purge()
    {
        java.lang.ref.Reference r3;
        org.apache.commons.collections.ReferenceMap r0;
        java.lang.ref.ReferenceQueue $r1, $r2;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        $r1 = r0.<org.apache.commons.collections.ReferenceMap: java.lang.ref.ReferenceQueue queue>;

        r3 = virtualinvoke $r1.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

     label1:
        if r3 == null goto label2;

        specialinvoke r0.<org.apache.commons.collections.ReferenceMap: void purge(java.lang.ref.Reference)>(r3);

        $r2 = r0.<org.apache.commons.collections.ReferenceMap: java.lang.ref.ReferenceQueue queue>;

        r3 = virtualinvoke $r2.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        goto label1;

     label2:
        return;
    }

    private void purge(java.lang.ref.Reference)
    {
        org.apache.commons.collections.ReferenceMap r1;
        org.apache.commons.collections.ReferenceMap$Entry $r3, $r4, r6, r7;
        java.lang.ref.Reference r0;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.ReferenceMap$Entry[] $r2, $r5;
        boolean $z0;

        r1 := @this: org.apache.commons.collections.ReferenceMap;

        r0 := @parameter0: java.lang.ref.Reference;

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i1 = specialinvoke r1.<org.apache.commons.collections.ReferenceMap: int indexFor(int)>($i0);

        r6 = null;

        $r2 = r1.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        r7 = $r2[$i1];

     label1:
        if r7 == null goto label5;

        $z0 = virtualinvoke r7.<org.apache.commons.collections.ReferenceMap$Entry: boolean purge(java.lang.ref.Reference)>(r0);

        if $z0 == 0 goto label4;

        if r6 != null goto label2;

        $r5 = r1.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        $r4 = r7.<org.apache.commons.collections.ReferenceMap$Entry: org.apache.commons.collections.ReferenceMap$Entry next>;

        $r5[$i1] = $r4;

        goto label3;

     label2:
        $r3 = r7.<org.apache.commons.collections.ReferenceMap$Entry: org.apache.commons.collections.ReferenceMap$Entry next>;

        r6.<org.apache.commons.collections.ReferenceMap$Entry: org.apache.commons.collections.ReferenceMap$Entry next> = $r3;

     label3:
        $i2 = r1.<org.apache.commons.collections.ReferenceMap: int size>;

        $i3 = $i2 - 1;

        r1.<org.apache.commons.collections.ReferenceMap: int size> = $i3;

        return;

     label4:
        r6 = r7;

        r7 = r7.<org.apache.commons.collections.ReferenceMap$Entry: org.apache.commons.collections.ReferenceMap$Entry next>;

        goto label1;

     label5:
        return;
    }

    public int size()
    {
        int $i0;
        org.apache.commons.collections.ReferenceMap r0;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        specialinvoke r0.<org.apache.commons.collections.ReferenceMap: void purge()>();

        $i0 = r0.<org.apache.commons.collections.ReferenceMap: int size>;

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        org.apache.commons.collections.ReferenceMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        specialinvoke r0.<org.apache.commons.collections.ReferenceMap: void purge()>();

        $i0 = r0.<org.apache.commons.collections.ReferenceMap: int size>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.commons.collections.ReferenceMap r0;
        java.lang.Object r1, $r3;
        org.apache.commons.collections.ReferenceMap$Entry $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.apache.commons.collections.ReferenceMap: void purge()>();

        $r2 = specialinvoke r0.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry getEntry(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.commons.collections.ReferenceMap$Entry: java.lang.Object getValue()>();

        if $r3 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.commons.collections.ReferenceMap r0;
        java.lang.Object r1, $r3;
        org.apache.commons.collections.ReferenceMap$Entry $r2;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.apache.commons.collections.ReferenceMap: void purge()>();

        $r2 = specialinvoke r0.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry getEntry(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.commons.collections.ReferenceMap$Entry: java.lang.Object getValue()>();

        return $r3;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.ReferenceMap$Entry $r4, $r6, r14;
        java.lang.NullPointerException $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.apache.commons.collections.ReferenceMap$Entry[] $r1, $r5, $r7;
        boolean $z0;
        org.apache.commons.collections.ReferenceMap r0;
        java.lang.Object $r2, $r3, $r8, $r9, r12, r13;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        r12 := @parameter0: java.lang.Object;

        r13 := @parameter1: java.lang.Object;

        if r12 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("null keys not allowed");

        throw $r11;

     label1:
        if r13 != null goto label2;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("null values not allowed");

        throw $r10;

     label2:
        specialinvoke r0.<org.apache.commons.collections.ReferenceMap: void purge()>();

        $i0 = r0.<org.apache.commons.collections.ReferenceMap: int size>;

        $i2 = $i0 + 1;

        $i1 = r0.<org.apache.commons.collections.ReferenceMap: int threshold>;

        if $i2 <= $i1 goto label3;

        specialinvoke r0.<org.apache.commons.collections.ReferenceMap: void resize()>();

     label3:
        $i3 = virtualinvoke r12.<java.lang.Object: int hashCode()>();

        $i4 = specialinvoke r0.<org.apache.commons.collections.ReferenceMap: int indexFor(int)>($i3);

        $r1 = r0.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        r14 = $r1[$i4];

     label4:
        if r14 == null goto label6;

        $i11 = r14.<org.apache.commons.collections.ReferenceMap$Entry: int hash>;

        if $i3 != $i11 goto label5;

        $r8 = virtualinvoke r14.<org.apache.commons.collections.ReferenceMap$Entry: java.lang.Object getKey()>();

        $z0 = virtualinvoke r12.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label5;

        $r9 = virtualinvoke r14.<org.apache.commons.collections.ReferenceMap$Entry: java.lang.Object getValue()>();

        virtualinvoke r14.<org.apache.commons.collections.ReferenceMap$Entry: java.lang.Object setValue(java.lang.Object)>(r13);

        return $r9;

     label5:
        r14 = r14.<org.apache.commons.collections.ReferenceMap$Entry: org.apache.commons.collections.ReferenceMap$Entry next>;

        goto label4;

     label6:
        $i5 = r0.<org.apache.commons.collections.ReferenceMap: int size>;

        $i6 = $i5 + 1;

        r0.<org.apache.commons.collections.ReferenceMap: int size> = $i6;

        $i7 = r0.<org.apache.commons.collections.ReferenceMap: int modCount>;

        $i8 = $i7 + 1;

        r0.<org.apache.commons.collections.ReferenceMap: int modCount> = $i8;

        $i9 = r0.<org.apache.commons.collections.ReferenceMap: int keyType>;

        $r2 = specialinvoke r0.<org.apache.commons.collections.ReferenceMap: java.lang.Object toReference(int,java.lang.Object,int)>($i9, r12, $i3);

        $i10 = r0.<org.apache.commons.collections.ReferenceMap: int valueType>;

        $r3 = specialinvoke r0.<org.apache.commons.collections.ReferenceMap: java.lang.Object toReference(int,java.lang.Object,int)>($i10, r13, $i3);

        $r7 = r0.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        $r4 = new org.apache.commons.collections.ReferenceMap$Entry;

        $r5 = r0.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        $r6 = $r5[$i4];

        specialinvoke $r4.<org.apache.commons.collections.ReferenceMap$Entry: void <init>(org.apache.commons.collections.ReferenceMap,java.lang.Object,int,java.lang.Object,org.apache.commons.collections.ReferenceMap$Entry)>(r0, $r2, $i3, $r3, $r6);

        $r7[$i4] = $r4;

        return null;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.apache.commons.collections.ReferenceMap$Entry $r4, $r6, r8, r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.commons.collections.ReferenceMap$Entry[] $r2, $r7;
        boolean $z0;
        org.apache.commons.collections.ReferenceMap r1;
        java.lang.Object r0, $r3, $r5;

        r1 := @this: org.apache.commons.collections.ReferenceMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        specialinvoke r1.<org.apache.commons.collections.ReferenceMap: void purge()>();

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i1 = specialinvoke r1.<org.apache.commons.collections.ReferenceMap: int indexFor(int)>($i0);

        r8 = null;

        $r2 = r1.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        r9 = $r2[$i1];

     label2:
        if r9 == null goto label6;

        $i2 = r9.<org.apache.commons.collections.ReferenceMap$Entry: int hash>;

        if $i0 != $i2 goto label5;

        $r3 = virtualinvoke r9.<org.apache.commons.collections.ReferenceMap$Entry: java.lang.Object getKey()>();

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label5;

        if r8 != null goto label3;

        $r7 = r1.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        $r6 = r9.<org.apache.commons.collections.ReferenceMap$Entry: org.apache.commons.collections.ReferenceMap$Entry next>;

        $r7[$i1] = $r6;

        goto label4;

     label3:
        $r4 = r9.<org.apache.commons.collections.ReferenceMap$Entry: org.apache.commons.collections.ReferenceMap$Entry next>;

        r8.<org.apache.commons.collections.ReferenceMap$Entry: org.apache.commons.collections.ReferenceMap$Entry next> = $r4;

     label4:
        $i3 = r1.<org.apache.commons.collections.ReferenceMap: int size>;

        $i4 = $i3 - 1;

        r1.<org.apache.commons.collections.ReferenceMap: int size> = $i4;

        $i5 = r1.<org.apache.commons.collections.ReferenceMap: int modCount>;

        $i6 = $i5 + 1;

        r1.<org.apache.commons.collections.ReferenceMap: int modCount> = $i6;

        $r5 = virtualinvoke r9.<org.apache.commons.collections.ReferenceMap$Entry: java.lang.Object getValue()>();

        return $r5;

     label5:
        r8 = r9;

        r9 = r9.<org.apache.commons.collections.ReferenceMap$Entry: org.apache.commons.collections.ReferenceMap$Entry next>;

        goto label2;

     label6:
        return null;
    }

    public void clear()
    {
        java.lang.ref.Reference $r3;
        org.apache.commons.collections.ReferenceMap$Entry[] $r1;
        org.apache.commons.collections.ReferenceMap r0;
        java.lang.ref.ReferenceQueue $r2;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        $r1 = r0.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r1, null);

        r0.<org.apache.commons.collections.ReferenceMap: int size> = 0;

     label1:
        $r2 = r0.<org.apache.commons.collections.ReferenceMap: java.lang.ref.ReferenceQueue queue>;

        $r3 = virtualinvoke $r2.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        if $r3 == null goto label2;

        goto label1;

     label2:
        return;
    }

    public java.util.Set entrySet()
    {
        org.apache.commons.collections.ReferenceMap$1 $r2;
        java.util.Set $r1, $r3, $r4;
        org.apache.commons.collections.ReferenceMap r0;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        $r1 = r0.<org.apache.commons.collections.ReferenceMap: java.util.Set entrySet>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.commons.collections.ReferenceMap: java.util.Set entrySet>;

        return $r4;

     label1:
        $r2 = new org.apache.commons.collections.ReferenceMap$1;

        specialinvoke $r2.<org.apache.commons.collections.ReferenceMap$1: void <init>(org.apache.commons.collections.ReferenceMap)>(r0);

        r0.<org.apache.commons.collections.ReferenceMap: java.util.Set entrySet> = $r2;

        $r3 = r0.<org.apache.commons.collections.ReferenceMap: java.util.Set entrySet>;

        return $r3;
    }

    public java.util.Set keySet()
    {
        org.apache.commons.collections.ReferenceMap$2 $r2;
        java.util.Set $r1, $r3, $r4;
        org.apache.commons.collections.ReferenceMap r0;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        $r1 = r0.<org.apache.commons.collections.ReferenceMap: java.util.Set keySet>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.commons.collections.ReferenceMap: java.util.Set keySet>;

        return $r4;

     label1:
        $r2 = new org.apache.commons.collections.ReferenceMap$2;

        specialinvoke $r2.<org.apache.commons.collections.ReferenceMap$2: void <init>(org.apache.commons.collections.ReferenceMap)>(r0);

        r0.<org.apache.commons.collections.ReferenceMap: java.util.Set keySet> = $r2;

        $r3 = r0.<org.apache.commons.collections.ReferenceMap: java.util.Set keySet>;

        return $r3;
    }

    public java.util.Collection values()
    {
        org.apache.commons.collections.ReferenceMap$3 $r2;
        java.util.Collection $r1, $r3, $r4;
        org.apache.commons.collections.ReferenceMap r0;

        r0 := @this: org.apache.commons.collections.ReferenceMap;

        $r1 = r0.<org.apache.commons.collections.ReferenceMap: java.util.Collection values>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.commons.collections.ReferenceMap: java.util.Collection values>;

        return $r4;

     label1:
        $r2 = new org.apache.commons.collections.ReferenceMap$3;

        specialinvoke $r2.<org.apache.commons.collections.ReferenceMap$3: void <init>(org.apache.commons.collections.ReferenceMap)>(r0);

        r0.<org.apache.commons.collections.ReferenceMap: java.util.Collection values> = $r2;

        $r3 = r0.<org.apache.commons.collections.ReferenceMap: java.util.Collection values>;

        return $r3;
    }

    static org.apache.commons.collections.ReferenceMap$Entry access$000(org.apache.commons.collections.ReferenceMap, java.lang.Object)
    {
        org.apache.commons.collections.ReferenceMap r0;
        java.lang.Object r1;
        org.apache.commons.collections.ReferenceMap$Entry $r2;

        r0 := @parameter0: org.apache.commons.collections.ReferenceMap;

        r1 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry getEntry(java.lang.Object)>(r1);

        return $r2;
    }

    static int access$300(org.apache.commons.collections.ReferenceMap)
    {
        int $i0;
        org.apache.commons.collections.ReferenceMap r0;

        r0 := @parameter0: org.apache.commons.collections.ReferenceMap;

        $i0 = r0.<org.apache.commons.collections.ReferenceMap: int keyType>;

        return $i0;
    }

    static int access$400(org.apache.commons.collections.ReferenceMap)
    {
        int $i0;
        org.apache.commons.collections.ReferenceMap r0;

        r0 := @parameter0: org.apache.commons.collections.ReferenceMap;

        $i0 = r0.<org.apache.commons.collections.ReferenceMap: int valueType>;

        return $i0;
    }

    static java.lang.Object access$500(org.apache.commons.collections.ReferenceMap, int, java.lang.Object, int)
    {
        int i0, i1;
        org.apache.commons.collections.ReferenceMap r0;
        java.lang.Object r1, $r2;

        r0 := @parameter0: org.apache.commons.collections.ReferenceMap;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        i1 := @parameter3: int;

        $r2 = specialinvoke r0.<org.apache.commons.collections.ReferenceMap: java.lang.Object toReference(int,java.lang.Object,int)>(i0, r1, i1);

        return $r2;
    }

    static boolean access$600(org.apache.commons.collections.ReferenceMap)
    {
        org.apache.commons.collections.ReferenceMap r0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.collections.ReferenceMap;

        $z0 = r0.<org.apache.commons.collections.ReferenceMap: boolean purgeValues>;

        return $z0;
    }

    static org.apache.commons.collections.ReferenceMap$Entry[] access$700(org.apache.commons.collections.ReferenceMap)
    {
        org.apache.commons.collections.ReferenceMap$Entry[] $r1;
        org.apache.commons.collections.ReferenceMap r0;

        r0 := @parameter0: org.apache.commons.collections.ReferenceMap;

        $r1 = r0.<org.apache.commons.collections.ReferenceMap: org.apache.commons.collections.ReferenceMap$Entry[] table>;

        return $r1;
    }

    static int access$800(org.apache.commons.collections.ReferenceMap)
    {
        int $i0;
        org.apache.commons.collections.ReferenceMap r0;

        r0 := @parameter0: org.apache.commons.collections.ReferenceMap;

        $i0 = r0.<org.apache.commons.collections.ReferenceMap: int modCount>;

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections.ReferenceMap: int WEAK> = 2;

        <org.apache.commons.collections.ReferenceMap: int SOFT> = 1;

        <org.apache.commons.collections.ReferenceMap: int HARD> = 0;

        <org.apache.commons.collections.ReferenceMap: long serialVersionUID> = -3370601314380922368L;

        return;
    }
}
