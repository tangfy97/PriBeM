class org.apache.zookeeper.common.PathTrie$TrieNode extends java.lang.Object
{
    boolean property;
    final java.util.HashMap children;
    org.apache.zookeeper.common.PathTrie$TrieNode parent;

    private void <init>(org.apache.zookeeper.common.PathTrie$TrieNode)
    {
        java.util.HashMap $r1;
        org.apache.zookeeper.common.PathTrie$TrieNode r0, r2;

        r0 := @this: org.apache.zookeeper.common.PathTrie$TrieNode;

        r2 := @parameter0: org.apache.zookeeper.common.PathTrie$TrieNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.zookeeper.common.PathTrie$TrieNode: boolean property> = 0;

        r0.<org.apache.zookeeper.common.PathTrie$TrieNode: org.apache.zookeeper.common.PathTrie$TrieNode parent> = null;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.zookeeper.common.PathTrie$TrieNode: java.util.HashMap children> = $r1;

        r0.<org.apache.zookeeper.common.PathTrie$TrieNode: org.apache.zookeeper.common.PathTrie$TrieNode parent> = r2;

        return;
    }

    org.apache.zookeeper.common.PathTrie$TrieNode getParent()
    {
        org.apache.zookeeper.common.PathTrie$TrieNode r0, $r1;

        r0 := @this: org.apache.zookeeper.common.PathTrie$TrieNode;

        $r1 = r0.<org.apache.zookeeper.common.PathTrie$TrieNode: org.apache.zookeeper.common.PathTrie$TrieNode parent>;

        return $r1;
    }

    void setParent(org.apache.zookeeper.common.PathTrie$TrieNode)
    {
        org.apache.zookeeper.common.PathTrie$TrieNode r0, r1;

        r0 := @this: org.apache.zookeeper.common.PathTrie$TrieNode;

        r1 := @parameter0: org.apache.zookeeper.common.PathTrie$TrieNode;

        r0.<org.apache.zookeeper.common.PathTrie$TrieNode: org.apache.zookeeper.common.PathTrie$TrieNode parent> = r1;

        return;
    }

    void setProperty(boolean)
    {
        org.apache.zookeeper.common.PathTrie$TrieNode r0;
        boolean z0;

        r0 := @this: org.apache.zookeeper.common.PathTrie$TrieNode;

        z0 := @parameter0: boolean;

        r0.<org.apache.zookeeper.common.PathTrie$TrieNode: boolean property> = z0;

        return;
    }

    boolean getProperty()
    {
        org.apache.zookeeper.common.PathTrie$TrieNode r0;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.common.PathTrie$TrieNode;

        $z0 = r0.<org.apache.zookeeper.common.PathTrie$TrieNode: boolean property>;

        return $z0;
    }

    void addChild(java.lang.String, org.apache.zookeeper.common.PathTrie$TrieNode)
    {
        java.lang.Throwable $r6;
        java.util.HashMap $r1, $r3, $r5;
        java.lang.String r2;
        org.apache.zookeeper.common.PathTrie$TrieNode r0, r4;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.common.PathTrie$TrieNode;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.zookeeper.common.PathTrie$TrieNode;

        $r1 = r0.<org.apache.zookeeper.common.PathTrie$TrieNode: java.util.HashMap children>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.zookeeper.common.PathTrie$TrieNode: java.util.HashMap children>;

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label3;

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r5 = r0.<org.apache.zookeeper.common.PathTrie$TrieNode: java.util.HashMap children>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r4);

        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void deleteChild(java.lang.String)
    {
        java.lang.Throwable $r9;
        java.util.HashMap $r1, $r3, $r4, $r8;
        java.lang.String[] $r7;
        int $i0;
        java.lang.Object $r5;
        java.lang.String r2;
        org.apache.zookeeper.common.PathTrie$TrieNode r0, r6;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.common.PathTrie$TrieNode;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.zookeeper.common.PathTrie$TrieNode: java.util.HashMap children>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.zookeeper.common.PathTrie$TrieNode: java.util.HashMap children>;

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r2);

        if $z0 != 0 goto label3;

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r4 = r0.<org.apache.zookeeper.common.PathTrie$TrieNode: java.util.HashMap children>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r6 = (org.apache.zookeeper.common.PathTrie$TrieNode) $r5;

        $r7 = virtualinvoke r6.<org.apache.zookeeper.common.PathTrie$TrieNode: java.lang.String[] getChildren()>();

        $i0 = lengthof $r7;

        if $i0 != 1 goto label4;

        virtualinvoke r6.<org.apache.zookeeper.common.PathTrie$TrieNode: void setParent(org.apache.zookeeper.common.PathTrie$TrieNode)>(null);

        $r8 = r0.<org.apache.zookeeper.common.PathTrie$TrieNode: java.util.HashMap children>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

        goto label5;

     label4:
        virtualinvoke r6.<org.apache.zookeeper.common.PathTrie$TrieNode: void setProperty(boolean)>(0);

     label5:
        exitmonitor $r1;

     label6:
        goto label9;

     label7:
        $r9 := @caughtexception;

        exitmonitor $r1;

     label8:
        throw $r9;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    org.apache.zookeeper.common.PathTrie$TrieNode getChild(java.lang.String)
    {
        java.lang.Throwable $r7;
        java.util.HashMap $r1, $r3, $r4;
        java.lang.Object $r5;
        java.lang.String r2;
        org.apache.zookeeper.common.PathTrie$TrieNode r0, $r6;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.common.PathTrie$TrieNode;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.zookeeper.common.PathTrie$TrieNode: java.util.HashMap children>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.zookeeper.common.PathTrie$TrieNode: java.util.HashMap children>;

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r2);

        if $z0 != 0 goto label3;

        exitmonitor $r1;

     label2:
        return null;

     label3:
        $r4 = r0.<org.apache.zookeeper.common.PathTrie$TrieNode: java.util.HashMap children>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        $r6 = (org.apache.zookeeper.common.PathTrie$TrieNode) $r5;

        exitmonitor $r1;

     label4:
        return $r6;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    java.lang.String[] getChildren()
    {
        java.lang.Throwable $r7;
        java.lang.Object[] $r5;
        java.util.Set $r3;
        java.util.HashMap $r1, $r2;
        java.lang.String[] $r4, $r6;
        org.apache.zookeeper.common.PathTrie$TrieNode r0;

        r0 := @this: org.apache.zookeeper.common.PathTrie$TrieNode;

        $r1 = r0.<org.apache.zookeeper.common.PathTrie$TrieNode: java.util.HashMap children>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.apache.zookeeper.common.PathTrie$TrieNode: java.util.HashMap children>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Set keySet()>();

        $r4 = newarray (java.lang.String)[0];

        $r5 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        exitmonitor $r1;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.String toString()
    {
        java.lang.Throwable $r13;
        java.util.Iterator $r5;
        java.util.Set $r4;
        java.util.HashMap $r2, $r3;
        java.lang.StringBuilder $r0, $r9, $r10, $r11;
        java.lang.Object $r7;
        java.lang.String $r6, r8, $r12;
        org.apache.zookeeper.common.PathTrie$TrieNode r1;
        boolean $z0;

        r1 := @this: org.apache.zookeeper.common.PathTrie$TrieNode;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Children of trienode: ");

        $r2 = r1.<org.apache.zookeeper.common.PathTrie$TrieNode: java.util.HashMap children>;

        entermonitor $r2;

     label1:
        $r3 = r1.<org.apache.zookeeper.common.PathTrie$TrieNode: java.util.HashMap children>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        goto label2;

     label3:
        exitmonitor $r2;

     label4:
        goto label7;

     label5:
        $r13 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r13;

     label7:
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void <init>(org.apache.zookeeper.common.PathTrie$TrieNode, org.apache.zookeeper.common.PathTrie$1)
    {
        org.apache.zookeeper.common.PathTrie$TrieNode r0, r1;
        org.apache.zookeeper.common.PathTrie$1 r2;

        r0 := @this: org.apache.zookeeper.common.PathTrie$TrieNode;

        r1 := @parameter0: org.apache.zookeeper.common.PathTrie$TrieNode;

        r2 := @parameter1: org.apache.zookeeper.common.PathTrie$1;

        specialinvoke r0.<org.apache.zookeeper.common.PathTrie$TrieNode: void <init>(org.apache.zookeeper.common.PathTrie$TrieNode)>(r1);

        return;
    }
}
