public class org.apache.solr.client.solrj.impl.XMLResponseParser extends org.apache.solr.client.solrj.ResponseParser
{
    public static org.slf4j.Logger log;
    private static final org.apache.solr.common.util.XMLErrorLogger xmllog;
    static final javax.xml.stream.XMLInputFactory factory;

    public void <init>()
    {
        org.apache.solr.client.solrj.impl.XMLResponseParser r0;

        r0 := @this: org.apache.solr.client.solrj.impl.XMLResponseParser;

        specialinvoke r0.<org.apache.solr.client.solrj.ResponseParser: void <init>()>();

        return;
    }

    public java.lang.String getWriterType()
    {
        org.apache.solr.client.solrj.impl.XMLResponseParser r0;

        r0 := @this: org.apache.solr.client.solrj.impl.XMLResponseParser;

        return "xml";
    }

    public org.apache.solr.common.util.NamedList processResponse(java.io.Reader)
    {
        javax.xml.stream.XMLInputFactory $r1;
        java.io.Reader r0;
        org.apache.solr.common.SolrException$ErrorCode $r7;
        org.apache.solr.common.util.NamedList $r4;
        org.apache.solr.common.SolrException $r6;
        javax.xml.stream.XMLStreamReader $r2;
        javax.xml.stream.XMLStreamException $r5;
        org.apache.solr.client.solrj.impl.XMLResponseParser r3;

        r3 := @this: org.apache.solr.client.solrj.impl.XMLResponseParser;

        r0 := @parameter0: java.io.Reader;

     label1:
        $r1 = <org.apache.solr.client.solrj.impl.XMLResponseParser: javax.xml.stream.XMLInputFactory factory>;

        $r2 = virtualinvoke $r1.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader)>(r0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.solr.common.SolrException;

        $r7 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode SERVER_ERROR>;

        specialinvoke $r6.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r7, "parsing error", $r5);

        throw $r6;

     label4:
        $r4 = specialinvoke r3.<org.apache.solr.client.solrj.impl.XMLResponseParser: org.apache.solr.common.util.NamedList processResponse(javax.xml.stream.XMLStreamReader)>($r2);

        return $r4;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
    }

    public org.apache.solr.common.util.NamedList processResponse(java.io.InputStream, java.lang.String)
    {
        javax.xml.stream.XMLInputFactory $r2;
        org.apache.solr.common.SolrException$ErrorCode $r8;
        org.apache.solr.common.util.NamedList $r5;
        org.apache.solr.common.SolrException $r7;
        javax.xml.stream.XMLStreamReader $r3;
        javax.xml.stream.XMLStreamException $r6;
        java.lang.String r1;
        org.apache.solr.client.solrj.impl.XMLResponseParser r4;
        java.io.InputStream r0;

        r4 := @this: org.apache.solr.client.solrj.impl.XMLResponseParser;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = <org.apache.solr.client.solrj.impl.XMLResponseParser: javax.xml.stream.XMLInputFactory factory>;

        $r3 = virtualinvoke $r2.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream,java.lang.String)>(r0, r1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.solr.common.SolrException;

        $r8 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode SERVER_ERROR>;

        specialinvoke $r7.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r8, "parsing error", $r6);

        throw $r7;

     label4:
        $r5 = specialinvoke r4.<org.apache.solr.client.solrj.impl.XMLResponseParser: org.apache.solr.common.util.NamedList processResponse(javax.xml.stream.XMLStreamReader)>($r3);

        return $r5;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
    }

    private org.apache.solr.common.util.NamedList processResponse(javax.xml.stream.XMLStreamReader)
    {
        java.lang.Throwable $r12;
        org.apache.solr.common.util.SimpleOrderedMap $r9;
        org.apache.solr.common.SolrException $r14;
        javax.xml.stream.XMLStreamReader r0;
        int i0;
        java.lang.String $r1, $r6, $r8;
        boolean $z0, $z1, $z2;
        org.apache.solr.common.SolrException$ErrorCode $r15;
        java.lang.Exception $r3, $r10, $r11, $r13, $r16, $r17;
        org.apache.solr.common.util.NamedList r18, r19;
        java.lang.StringBuilder $r4, $r5, $r7;
        org.apache.solr.client.solrj.impl.XMLResponseParser r2;

        r2 := @this: org.apache.solr.client.solrj.impl.XMLResponseParser;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

     label01:
        r18 = null;

        i0 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int next()>();

     label02:
        if i0 == 8 goto label13;

        lookupswitch(i0)
        {
            case 1: goto label03;
            default: goto label12;
        };

     label03:
        if r18 == null goto label04;

        $r10 = new java.lang.Exception;

        specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>("already read the response!");

        throw $r10;

     label04:
        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("response");

        if $z0 != 0 goto label05;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("result");

        if $z1 == 0 goto label06;

     label05:
        r18 = virtualinvoke r2.<org.apache.solr.client.solrj.impl.XMLResponseParser: org.apache.solr.common.util.NamedList readNamedList(javax.xml.stream.XMLStreamReader)>(r0);

        goto label12;

     label06:
        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("solr");

        if $z2 == 0 goto label11;

        $r9 = new org.apache.solr.common.util.SimpleOrderedMap;

        specialinvoke $r9.<org.apache.solr.common.util.SimpleOrderedMap: void <init>()>();

     label07:
        interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: void close()>();

     label08:
        goto label10;

     label09:
        $r17 := @caughtexception;

     label10:
        return $r9;

     label11:
        $r3 = new java.lang.Exception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("really needs to be response or result.  not:");

        $r6 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>($r8);

        throw $r3;

     label12:
        i0 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int next()>();

        goto label02;

     label13:
        r19 = r18;

     label14:
        interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: void close()>();

     label15:
        goto label17;

     label16:
        $r16 := @caughtexception;

     label17:
        return r19;

     label18:
        $r13 := @caughtexception;

        $r14 = new org.apache.solr.common.SolrException;

        $r15 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode SERVER_ERROR>;

        specialinvoke $r14.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r15, "parsing error", $r13);

        throw $r14;

     label19:
        $r12 := @caughtexception;

     label20:
        interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: void close()>();

     label21:
        goto label23;

     label22:
        $r11 := @caughtexception;

     label23:
        throw $r12;

        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label14 to label15 with label16;
        catch java.lang.Exception from label01 to label07 with label18;
        catch java.lang.Exception from label11 to label14 with label18;
        catch java.lang.Throwable from label01 to label07 with label19;
        catch java.lang.Throwable from label11 to label14 with label19;
        catch java.lang.Exception from label20 to label21 with label22;
        catch java.lang.Throwable from label18 to label20 with label19;
    }

    protected org.apache.solr.common.util.NamedList readNamedList(javax.xml.stream.XMLStreamReader) throws javax.xml.stream.XMLStreamException
    {
        org.apache.solr.common.util.SimpleOrderedMap $r35;
        org.apache.solr.common.SolrDocumentList $r12;
        javax.xml.stream.XMLStreamReader r0;
        int[] $r9;
        javax.xml.stream.XMLStreamException $r38;
        boolean $z0, $z1;
        java.util.List $r13;
        java.lang.StringBuilder $r21, $r23, $r27, $r28, $r32, $r34, $r36;
        org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType $r8, r30;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, i7, $i9, $i11, $i13, $i15, $i17;
        java.lang.String $r3, $r4, $r5, $r7, $r17, $r18, $r22, $r24, $r29, r31;
        java.lang.RuntimeException $r33, $r37;
        org.apache.solr.common.util.NamedList $r14;
        org.apache.solr.common.SolrDocument $r11;
        javax.xml.stream.Location $r16;
        java.lang.Object $r6;
        org.apache.solr.client.solrj.impl.XMLResponseParser r10;

        r10 := @this: org.apache.solr.client.solrj.impl.XMLResponseParser;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

        $i0 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        if 1 == $i0 goto label01;

        $r33 = new java.lang.RuntimeException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must be start element, not: ");

        $i4 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.RuntimeException: void <init>(java.lang.String)>($r29);

        throw $r33;

     label01:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = new org.apache.solr.common.util.SimpleOrderedMap;

        specialinvoke $r35.<org.apache.solr.common.util.SimpleOrderedMap: void <init>()>();

        r30 = null;

        r31 = null;

        i5 = 0;

     label02:
        $i6 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int next()>();

        tableswitch($i6)
        {
            case 1: goto label03;
            case 2: goto label13;
            case 3: goto label16;
            case 4: goto label15;
            case 5: goto label16;
            case 6: goto label15;
            case 7: goto label16;
            case 8: goto label16;
            case 9: goto label16;
            case 10: goto label16;
            case 11: goto label16;
            case 12: goto label15;
            default: goto label16;
        };

     label03:
        i5 = i5 + 1;

        virtualinvoke $r34.<java.lang.StringBuilder: void setLength(int)>(0);

        $r7 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r8 = staticinvoke <org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType: org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType get(java.lang.String)>($r7);

        r30 = $r8;

        if $r8 != null goto label04;

        $r37 = new java.lang.RuntimeException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this must be known type! not: ");

        $r22 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.RuntimeException: void <init>(java.lang.String)>($r24);

        throw $r37;

     label04:
        r31 = null;

        $i1 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int getAttributeCount()>();

        i7 = 0;

     label05:
        if i7 >= $i1 goto label07;

        $r17 = "name";

        $r18 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeLocalName(int)>(i7);

        $z1 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z1 == 0 goto label06;

        r31 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(int)>(i7);

        goto label07;

     label06:
        i7 = i7 + 1;

        goto label05;

     label07:
        $z0 = $r8.<org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType: boolean isLeaf>;

        if $z0 != 0 goto label16;

        $r9 = <org.apache.solr.client.solrj.impl.XMLResponseParser$1: int[] $SwitchMap$org$apache$solr$client$solrj$impl$XMLResponseParser$KnownType>;

        $i2 = virtualinvoke $r8.<org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType: int ordinal()>();

        $i3 = $r9[$i2];

        tableswitch($i3)
        {
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label10;
            case 4: goto label11;
            default: goto label12;
        };

     label08:
        $r14 = virtualinvoke r10.<org.apache.solr.client.solrj.impl.XMLResponseParser: org.apache.solr.common.util.NamedList readNamedList(javax.xml.stream.XMLStreamReader)>(r0);

        virtualinvoke $r35.<org.apache.solr.common.util.NamedList: void add(java.lang.String,java.lang.Object)>(r31, $r14);

        $i9 = (int) -1;

        i5 = i5 + $i9;

        goto label02;

     label09:
        $r13 = virtualinvoke r10.<org.apache.solr.client.solrj.impl.XMLResponseParser: java.util.List readArray(javax.xml.stream.XMLStreamReader)>(r0);

        virtualinvoke $r35.<org.apache.solr.common.util.NamedList: void add(java.lang.String,java.lang.Object)>(r31, $r13);

        $i11 = (int) -1;

        i5 = i5 + $i11;

        goto label02;

     label10:
        $r12 = virtualinvoke r10.<org.apache.solr.client.solrj.impl.XMLResponseParser: org.apache.solr.common.SolrDocumentList readDocuments(javax.xml.stream.XMLStreamReader)>(r0);

        virtualinvoke $r35.<org.apache.solr.common.util.NamedList: void add(java.lang.String,java.lang.Object)>(r31, $r12);

        $i13 = (int) -1;

        i5 = i5 + $i13;

        goto label02;

     label11:
        $r11 = virtualinvoke r10.<org.apache.solr.client.solrj.impl.XMLResponseParser: org.apache.solr.common.SolrDocument readDocument(javax.xml.stream.XMLStreamReader)>(r0);

        virtualinvoke $r35.<org.apache.solr.common.util.NamedList: void add(java.lang.String,java.lang.Object)>(r31, $r11);

        $i15 = (int) -1;

        i5 = i5 + $i15;

        goto label02;

     label12:
        $r38 = new javax.xml.stream.XMLStreamException;

        $r16 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        specialinvoke $r38.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String,javax.xml.stream.Location)>("branch element not handled!", $r16);

        throw $r38;

     label13:
        $i17 = (int) -1;

        i5 = i5 + $i17;

        if i5 >= 0 goto label14;

        return $r35;

     label14:
        $r4 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $r6 = virtualinvoke r30.<org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType: java.lang.Object read(java.lang.String)>($r5);

        virtualinvoke $r35.<org.apache.solr.common.util.NamedList: void add(java.lang.String,java.lang.Object)>(r31, $r6);

        goto label16;

     label15:
        $r3 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label16:
        goto label02;
    }

    protected java.util.List readArray(javax.xml.stream.XMLStreamReader) throws javax.xml.stream.XMLStreamException
    {
        org.apache.solr.common.SolrDocumentList $r23;
        javax.xml.stream.XMLStreamReader r0;
        int[] $r20;
        java.util.Locale $r3;
        javax.xml.stream.XMLStreamException $r54, $r56;
        boolean $z0, $z1;
        java.util.List $r24;
        java.lang.StringBuilder $r14, $r15, $r30, $r32, $r36, $r38, $r42, $r43, $r46, $r48, $r50, $r52, $r55;
        org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType $r11, $r19, r45;
        java.util.ArrayList $r51;
        int $i0, $i1, $i2, $i3, i4, $i5, $i7, $i9, $i11, $i13, $i15;
        java.lang.String $r1, $r2, $r4, $r7, $r8, $r9, $r16, $r18, $r31, $r33, $r37, $r39, $r44;
        java.lang.RuntimeException $r47, $r49, $r53;
        org.apache.solr.common.util.NamedList $r25;
        org.apache.solr.common.SolrDocument $r22;
        javax.xml.stream.Location $r17, $r27;
        java.lang.Object $r10;
        org.apache.solr.client.solrj.impl.XMLResponseParser r21;

        r21 := @this: org.apache.solr.client.solrj.impl.XMLResponseParser;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

        $i0 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        if 1 == $i0 goto label01;

        $r47 = new java.lang.RuntimeException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must be start element, not: ");

        $i3 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.lang.RuntimeException: void <init>(java.lang.String)>($r44);

        throw $r47;

     label01:
        $r1 = "arr";

        $r2 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r3 = <java.util.Locale: java.util.Locale ROOT>;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label02;

        $r49 = new java.lang.RuntimeException;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must be \'arr\', not: ");

        $r37 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r49.<java.lang.RuntimeException: void <init>(java.lang.String)>($r39);

        throw $r49;

     label02:
        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        r45 = null;

        $r51 = new java.util.ArrayList;

        specialinvoke $r51.<java.util.ArrayList: void <init>()>();

        i4 = 0;

     label03:
        $i5 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int next()>();

        tableswitch($i5)
        {
            case 1: goto label04;
            case 2: goto label12;
            case 3: goto label16;
            case 4: goto label15;
            case 5: goto label16;
            case 6: goto label15;
            case 7: goto label16;
            case 8: goto label16;
            case 9: goto label16;
            case 10: goto label16;
            case 11: goto label16;
            case 12: goto label15;
            default: goto label16;
        };

     label04:
        i4 = i4 + 1;

        $r18 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r19 = staticinvoke <org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType: org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType get(java.lang.String)>($r18);

        if $r19 != null goto label05;

        $r53 = new java.lang.RuntimeException;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this must be known type! not: ");

        $r31 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r53.<java.lang.RuntimeException: void <init>(java.lang.String)>($r33);

        throw $r53;

     label05:
        if r45 != null goto label06;

     label06:
        r45 = $r19;

        virtualinvoke $r50.<java.lang.StringBuilder: void setLength(int)>(0);

        $z1 = $r19.<org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType: boolean isLeaf>;

        if $z1 != 0 goto label16;

        $r20 = <org.apache.solr.client.solrj.impl.XMLResponseParser$1: int[] $SwitchMap$org$apache$solr$client$solrj$impl$XMLResponseParser$KnownType>;

        $i1 = virtualinvoke $r19.<org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType: int ordinal()>();

        $i2 = $r20[$i1];

        tableswitch($i2)
        {
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label09;
            case 4: goto label10;
            default: goto label11;
        };

     label07:
        $r25 = virtualinvoke r21.<org.apache.solr.client.solrj.impl.XMLResponseParser: org.apache.solr.common.util.NamedList readNamedList(javax.xml.stream.XMLStreamReader)>(r0);

        interfaceinvoke $r51.<java.util.List: boolean add(java.lang.Object)>($r25);

        $i7 = (int) -1;

        i4 = i4 + $i7;

        goto label03;

     label08:
        $r24 = virtualinvoke r21.<org.apache.solr.client.solrj.impl.XMLResponseParser: java.util.List readArray(javax.xml.stream.XMLStreamReader)>(r0);

        interfaceinvoke $r51.<java.util.List: boolean add(java.lang.Object)>($r24);

        $i9 = (int) -1;

        i4 = i4 + $i9;

        goto label03;

     label09:
        $r23 = virtualinvoke r21.<org.apache.solr.client.solrj.impl.XMLResponseParser: org.apache.solr.common.SolrDocumentList readDocuments(javax.xml.stream.XMLStreamReader)>(r0);

        interfaceinvoke $r51.<java.util.List: boolean add(java.lang.Object)>($r23);

        $i11 = (int) -1;

        i4 = i4 + $i11;

        goto label03;

     label10:
        $r22 = virtualinvoke r21.<org.apache.solr.client.solrj.impl.XMLResponseParser: org.apache.solr.common.SolrDocument readDocument(javax.xml.stream.XMLStreamReader)>(r0);

        interfaceinvoke $r51.<java.util.List: boolean add(java.lang.Object)>($r22);

        $i13 = (int) -1;

        i4 = i4 + $i13;

        goto label03;

     label11:
        $r54 = new javax.xml.stream.XMLStreamException;

        $r27 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        specialinvoke $r54.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String,javax.xml.stream.Location)>("branch element not handled!", $r27);

        throw $r54;

     label12:
        $i15 = (int) -1;

        i4 = i4 + $i15;

        if i4 >= 0 goto label13;

        return $r51;

     label13:
        $r8 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        $r10 = virtualinvoke r45.<org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType: java.lang.Object read(java.lang.String)>($r9);

        if $r10 != null goto label14;

        $r11 = <org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType: org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType NULL>;

        if r45 == $r11 goto label14;

        $r56 = new javax.xml.stream.XMLStreamException;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error reading value:");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r45);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        specialinvoke $r56.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String,javax.xml.stream.Location)>($r16, $r17);

        throw $r56;

     label14:
        interfaceinvoke $r51.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label16;

     label15:
        $r7 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label16:
        goto label03;
    }

    protected org.apache.solr.common.SolrDocumentList readDocuments(javax.xml.stream.XMLStreamReader) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Float $r20;
        org.apache.solr.common.SolrDocumentList $r0;
        long $l1, $l2;
        javax.xml.stream.XMLStreamReader r1;
        int $i0, i3, $i4;
        java.lang.String $r2, $r3, $r9, $r14, $r15, $r16, $r17, $r18, $r19;
        boolean $z0, $z1, $z2, $z3;
        java.lang.RuntimeException $r6;
        org.apache.solr.common.SolrDocument $r5;
        javax.xml.stream.Location $r12;
        float $f0;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r13;
        org.apache.solr.client.solrj.impl.XMLResponseParser r4;

        r4 := @this: org.apache.solr.client.solrj.impl.XMLResponseParser;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        $r0 = new org.apache.solr.common.SolrDocumentList;

        specialinvoke $r0.<org.apache.solr.common.SolrDocumentList: void <init>()>();

        i3 = 0;

     label1:
        $i0 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: int getAttributeCount()>();

        if i3 >= $i0 goto label5;

        $r15 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeLocalName(int)>(i3);

        $r16 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(int)>(i3);

        $r17 = "numFound";

        $z1 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z1 == 0 goto label2;

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r16);

        virtualinvoke $r0.<org.apache.solr.common.SolrDocumentList: void setNumFound(long)>($l2);

        goto label4;

     label2:
        $r18 = "start";

        $z2 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z2 == 0 goto label3;

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r16);

        virtualinvoke $r0.<org.apache.solr.common.SolrDocumentList: void setStart(long)>($l1);

        goto label4;

     label3:
        $r19 = "maxScore";

        $z3 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z3 == 0 goto label4;

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r16);

        $r20 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke $r0.<org.apache.solr.common.SolrDocumentList: void setMaxScore(java.lang.Float)>($r20);

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        $i4 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: int next()>();

        if 1 != $i4 goto label7;

        $r2 = "doc";

        $r3 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label6;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("should be doc! ");

        $r9 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" :: ");

        $r12 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);

        throw $r6;

     label6:
        $r5 = virtualinvoke r4.<org.apache.solr.client.solrj.impl.XMLResponseParser: org.apache.solr.common.SolrDocument readDocument(javax.xml.stream.XMLStreamReader)>(r1);

        virtualinvoke $r0.<org.apache.solr.common.SolrDocumentList: boolean add(java.lang.Object)>($r5);

        goto label5;

     label7:
        if 2 != $i4 goto label5;

        return $r0;
    }

    protected org.apache.solr.common.SolrDocument readDocument(javax.xml.stream.XMLStreamReader) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamException $r70, $r72, $r74;
        java.lang.StringBuilder $r13, $r14, $r23, $r24, $r35, $r37, $r44, $r46, $r50, $r52, $r56, $r57, $r61, $r63, $r66, $r67, $r69, $r71, $r73;
        org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType $r18, $r19, $r20, r59;
        java.lang.String $r1, $r2, $r4, $r7, $r8, $r9, $r15, $r17, $r25, $r36, $r38, $r40, $r41, $r45, $r47, $r51, $r53, $r58, r60;
        java.lang.RuntimeException $r62, $r64, $r68;
        org.apache.solr.common.util.NamedList $r29;
        org.apache.solr.common.SolrDocument $r65;
        javax.xml.stream.XMLStreamReader r0;
        java.util.Locale $r3;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r30;
        int $i0, $i1, $i2, $i3, i4, i5, $i7, $i9, $i11;
        java.io.PrintStream $r22;
        java.util.Iterator $r31;
        javax.xml.stream.Location $r16, $r27, $r39;
        java.lang.Object $r10, $r32;
        org.apache.solr.client.solrj.impl.XMLResponseParser r28;

        r28 := @this: org.apache.solr.client.solrj.impl.XMLResponseParser;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

        $i0 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        if 1 == $i0 goto label01;

        $r62 = new java.lang.RuntimeException;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must be start element, not: ");

        $i3 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r62.<java.lang.RuntimeException: void <init>(java.lang.String)>($r58);

        throw $r62;

     label01:
        $r1 = "doc";

        $r2 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r3 = <java.util.Locale: java.util.Locale ROOT>;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label02;

        $r64 = new java.lang.RuntimeException;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must be \'lst\', not: ");

        $r51 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r64.<java.lang.RuntimeException: void <init>(java.lang.String)>($r53);

        throw $r64;

     label02:
        $r65 = new org.apache.solr.common.SolrDocument;

        specialinvoke $r65.<org.apache.solr.common.SolrDocument: void <init>()>();

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        r59 = null;

        r60 = null;

        i4 = 0;

     label03:
        $i1 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int next()>();

        tableswitch($i1)
        {
            case 1: goto label04;
            case 2: goto label14;
            case 3: goto label18;
            case 4: goto label17;
            case 5: goto label18;
            case 6: goto label17;
            case 7: goto label18;
            case 8: goto label18;
            case 9: goto label18;
            case 10: goto label18;
            case 11: goto label18;
            case 12: goto label17;
            default: goto label18;
        };

     label04:
        i4 = i4 + 1;

        virtualinvoke $r66.<java.lang.StringBuilder: void setLength(int)>(0);

        $r17 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r18 = staticinvoke <org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType: org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType get(java.lang.String)>($r17);

        r59 = $r18;

        if $r18 != null goto label05;

        $r68 = new java.lang.RuntimeException;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this must be known type! not: ");

        $r45 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r68.<java.lang.RuntimeException: void <init>(java.lang.String)>($r47);

        throw $r68;

     label05:
        r60 = null;

        $i2 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int getAttributeCount()>();

        i5 = 0;

     label06:
        if i5 >= $i2 goto label08;

        $r40 = "name";

        $r41 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeLocalName(int)>(i5);

        $z3 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r41);

        if $z3 == 0 goto label07;

        r60 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(int)>(i5);

        goto label08;

     label07:
        i5 = i5 + 1;

        goto label06;

     label08:
        if r60 != null goto label09;

        $r70 = new javax.xml.stream.XMLStreamException;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requires \'name\' attribute: ");

        $r36 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        specialinvoke $r70.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String,javax.xml.stream.Location)>($r38, $r39);

        throw $r70;

     label09:
        $r19 = <org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType: org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType ARR>;

        if $r18 != $r19 goto label12;

        $r30 = virtualinvoke r28.<org.apache.solr.client.solrj.impl.XMLResponseParser: java.util.List readArray(javax.xml.stream.XMLStreamReader)>(r0);

        $r31 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke $r31.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r32 = interfaceinvoke $r31.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r65.<org.apache.solr.common.SolrDocument: void addField(java.lang.String,java.lang.Object)>(r60, $r32);

        goto label10;

     label11:
        $i7 = (int) -1;

        i4 = i4 + $i7;

        goto label18;

     label12:
        $r20 = <org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType: org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType LST>;

        if $r18 != $r20 goto label13;

        $r29 = virtualinvoke r28.<org.apache.solr.client.solrj.impl.XMLResponseParser: org.apache.solr.common.util.NamedList readNamedList(javax.xml.stream.XMLStreamReader)>(r0);

        virtualinvoke $r65.<org.apache.solr.common.SolrDocument: void addField(java.lang.String,java.lang.Object)>(r60, $r29);

        $i9 = (int) -1;

        i4 = i4 + $i9;

        goto label18;

     label13:
        $z1 = $r18.<org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType: boolean isLeaf>;

        if $z1 != 0 goto label18;

        $r22 = <java.lang.System: java.io.PrintStream out>;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nbot leaf!:");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r25);

        $r72 = new javax.xml.stream.XMLStreamException;

        $r27 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        specialinvoke $r72.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String,javax.xml.stream.Location)>("must be value or array", $r27);

        throw $r72;

     label14:
        $i11 = (int) -1;

        i4 = i4 + $i11;

        if i4 >= 0 goto label15;

        return $r65;

     label15:
        $r8 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        $r10 = virtualinvoke r59.<org.apache.solr.client.solrj.impl.XMLResponseParser$KnownType: java.lang.Object read(java.lang.String)>($r9);

        if $r10 != null goto label16;

        $r74 = new javax.xml.stream.XMLStreamException;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error reading value:");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r59);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        specialinvoke $r74.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String,javax.xml.stream.Location)>($r15, $r16);

        throw $r74;

     label16:
        virtualinvoke $r65.<org.apache.solr.common.SolrDocument: void addField(java.lang.String,java.lang.Object)>(r60, $r10);

        goto label18;

     label17:
        $r7 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label18:
        goto label03;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r2, $r10;
        javax.xml.stream.XMLInputFactory $r3, $r5, $r7, $r12;
        java.lang.IllegalArgumentException $r8;
        org.apache.solr.common.util.XMLErrorLogger $r1, $r6;
        java.lang.Boolean $r4;
        java.lang.StringBuilder $r9, $r11, $r13;
        java.lang.String $r14;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/solr/client/solrj/impl/XMLResponseParser;");

        <org.apache.solr.client.solrj.impl.XMLResponseParser: org.slf4j.Logger log> = $r0;

        $r1 = new org.apache.solr.common.util.XMLErrorLogger;

        $r2 = <org.apache.solr.client.solrj.impl.XMLResponseParser: org.slf4j.Logger log>;

        specialinvoke $r1.<org.apache.solr.common.util.XMLErrorLogger: void <init>(org.slf4j.Logger)>($r2);

        <org.apache.solr.client.solrj.impl.XMLResponseParser: org.apache.solr.common.util.XMLErrorLogger xmllog> = $r1;

        $r3 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>();

        <org.apache.solr.client.solrj.impl.XMLResponseParser: javax.xml.stream.XMLInputFactory factory> = $r3;

     label1:
        $r5 = <org.apache.solr.client.solrj.impl.XMLResponseParser: javax.xml.stream.XMLInputFactory factory>;

        $r4 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r5.<javax.xml.stream.XMLInputFactory: void setProperty(java.lang.String,java.lang.Object)>("reuse-instance", $r4);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r10 = <org.apache.solr.client.solrj.impl.XMLResponseParser: org.slf4j.Logger log>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to set the \'reuse-instance\' property for the input factory: ");

        $r12 = <org.apache.solr.client.solrj.impl.XMLResponseParser: javax.xml.stream.XMLInputFactory factory>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>($r14);

     label4:
        $r7 = <org.apache.solr.client.solrj.impl.XMLResponseParser: javax.xml.stream.XMLInputFactory factory>;

        $r6 = <org.apache.solr.client.solrj.impl.XMLResponseParser: org.apache.solr.common.util.XMLErrorLogger xmllog>;

        virtualinvoke $r7.<javax.xml.stream.XMLInputFactory: void setXMLReporter(javax.xml.stream.XMLReporter)>($r6);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }
}
