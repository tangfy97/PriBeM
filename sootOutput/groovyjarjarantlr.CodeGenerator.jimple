public abstract class groovyjarjarantlr.CodeGenerator extends java.lang.Object
{
    protected groovyjarjarantlr.Tool antlrTool;
    protected int tabs;
    protected transient java.io.PrintWriter currentOutput;
    protected groovyjarjarantlr.Grammar grammar;
    protected groovyjarjarantlr.collections.impl.Vector bitsetsUsed;
    protected groovyjarjarantlr.DefineGrammarSymbols behavior;
    protected groovyjarjarantlr.LLkGrammarAnalyzer analyzer;
    protected groovyjarjarantlr.CharFormatter charFormatter;
    protected boolean DEBUG_CODE_GENERATOR;
    protected static final int DEFAULT_MAKE_SWITCH_THRESHOLD;
    protected static final int DEFAULT_BITSET_TEST_THRESHOLD;
    protected static final int BITSET_OPTIMIZE_INIT_THRESHOLD;
    protected int makeSwitchThreshold;
    protected int bitsetTestThreshold;
    private static boolean OLD_ACTION_TRANSLATOR;
    public static java.lang.String TokenTypesFileSuffix;
    public static java.lang.String TokenTypesFileExt;

    public void <init>()
    {
        groovyjarjarantlr.CodeGenerator r0;

        r0 := @this: groovyjarjarantlr.CodeGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<groovyjarjarantlr.CodeGenerator: int tabs> = 0;

        r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar> = null;

        r0.<groovyjarjarantlr.CodeGenerator: boolean DEBUG_CODE_GENERATOR> = 0;

        r0.<groovyjarjarantlr.CodeGenerator: int makeSwitchThreshold> = 2;

        r0.<groovyjarjarantlr.CodeGenerator: int bitsetTestThreshold> = 4;

        return;
    }

    protected void _print(java.lang.String)
    {
        java.io.PrintWriter $r2;
        java.lang.String r0;
        groovyjarjarantlr.CodeGenerator r1;

        r1 := @this: groovyjarjarantlr.CodeGenerator;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r2 = r1.<groovyjarjarantlr.CodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r2.<java.io.PrintWriter: void print(java.lang.String)>(r0);

     label1:
        return;
    }

    protected void _printAction(java.lang.String)
    {
        int $i0, $i1, i7, i8, i9, $i11, $i12, $i13;
        java.lang.String r0;
        boolean $z0, $z1, $z2, z3;
        java.io.PrintWriter $r2, $r3, $r4;
        char $c2, $c3, $c4, $c5, $c6;
        groovyjarjarantlr.CodeGenerator r1;

        r1 := @this: groovyjarjarantlr.CodeGenerator;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return;

     label01:
        i7 = 0;

     label02:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i7 >= $i0 goto label03;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $z2 = staticinvoke <java.lang.Character: boolean isSpaceChar(char)>($c6);

        if $z2 == 0 goto label03;

        i7 = i7 + 1;

        goto label02;

     label03:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        i8 = $i1 - 1;

     label04:
        if i8 <= i7 goto label05;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i8);

        $z1 = staticinvoke <java.lang.Character: boolean isSpaceChar(char)>($c5);

        if $z1 == 0 goto label05;

        $i11 = (int) -1;

        i8 = i8 + $i11;

        goto label04;

     label05:
        i9 = i7;

     label06:
        if i9 > i8 goto label14;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9);

        i9 = i9 + 1;

        z3 = 0;

        $i12 = (int) $c2;

        lookupswitch($i12)
        {
            case 10: goto label07;
            case 13: goto label08;
            default: goto label10;
        };

     label07:
        z3 = 1;

        goto label11;

     label08:
        if i9 > i8 goto label09;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9);

        $i13 = (int) $c4;

        if $i13 != 10 goto label09;

        i9 = i9 + 1;

     label09:
        z3 = 1;

        goto label11;

     label10:
        $r4 = r1.<groovyjarjarantlr.CodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r4.<java.io.PrintWriter: void print(char)>($c2);

     label11:
        if z3 == 0 goto label06;

        $r3 = r1.<groovyjarjarantlr.CodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r3.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<groovyjarjarantlr.CodeGenerator: void printTabs()>();

     label12:
        if i9 > i8 goto label13;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9);

        $z0 = staticinvoke <java.lang.Character: boolean isSpaceChar(char)>($c3);

        if $z0 == 0 goto label13;

        i9 = i9 + 1;

        goto label12;

     label13:
        goto label06;

     label14:
        $r2 = r1.<groovyjarjarantlr.CodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r2.<java.io.PrintWriter: void println()>();

        return;
    }

    protected void _println(java.lang.String)
    {
        java.io.PrintWriter $r2;
        java.lang.String r0;
        groovyjarjarantlr.CodeGenerator r1;

        r1 := @this: groovyjarjarantlr.CodeGenerator;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r2 = r1.<groovyjarjarantlr.CodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(r0);

     label1:
        return;
    }

    public static boolean elementsAreRange(int[])
    {
        int[] r0;
        int $i0, i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i1 = r0[0];

        $i2 = lengthof r0;

        $i3 = $i2 - 1;

        i4 = r0[$i3];

        $i5 = lengthof r0;

        if $i5 > 2 goto label2;

        return 0;

     label2:
        $i6 = i4 - i1;

        $i8 = $i6 + 1;

        $i7 = lengthof r0;

        if $i8 <= $i7 goto label3;

        return 0;

     label3:
        i12 = i1 + 1;

        i13 = 1;

     label4:
        $i9 = lengthof r0;

        $i10 = $i9 - 1;

        if i13 >= $i10 goto label6;

        $i11 = r0[i13];

        if i12 == $i11 goto label5;

        return 0;

     label5:
        i12 = i12 + 1;

        i13 = i13 + 1;

        goto label4;

     label6:
        return 1;
    }

    protected java.lang.String extractIdOfAction(groovyjarjarantlr.Token)
    {
        int $i0, $i1;
        java.lang.String $r2, $r3;
        groovyjarjarantlr.CodeGenerator r0;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.CodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.Token;

        $r2 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $i0 = virtualinvoke r1.<groovyjarjarantlr.Token: int getLine()>();

        $i1 = virtualinvoke r1.<groovyjarjarantlr.Token: int getColumn()>();

        $r3 = virtualinvoke r0.<groovyjarjarantlr.CodeGenerator: java.lang.String extractIdOfAction(java.lang.String,int,int)>($r2, $i0, $i1);

        return $r3;
    }

    protected java.lang.String extractIdOfAction(java.lang.String, int, int)
    {
        groovyjarjarantlr.Grammar $r2;
        groovyjarjarantlr.Tool $r3;
        int $i0, i1, i2, $i5, i6, $i7, $i9;
        java.lang.String $r1, $r4, $r5, r6;
        boolean $z0;
        char $c3, $c4;
        groovyjarjarantlr.CodeGenerator r0;

        r0 := @this: groovyjarjarantlr.CodeGenerator;

        r6 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.CodeGenerator: java.lang.String removeAssignmentFromDeclaration(java.lang.String)>(r6);

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i6 = $i0 - 2;

     label1:
        if i6 < 0 goto label3;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i6);

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c3);

        if $z0 != 0 goto label2;

        $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i6);

        $i7 = (int) $c4;

        if $i7 == 95 goto label2;

        $i5 = i6 + 1;

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i5);

        return $r5;

     label2:
        $i9 = (int) -1;

        i6 = i6 + $i9;

        goto label1;

     label3:
        $r3 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r2 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = virtualinvoke $r2.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        virtualinvoke $r3.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Ill-formed action", $r4, i1, i2);

        return "";
    }

    protected java.lang.String extractTypeOfAction(groovyjarjarantlr.Token)
    {
        int $i0, $i1;
        java.lang.String $r2, $r3;
        groovyjarjarantlr.CodeGenerator r0;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.CodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.Token;

        $r2 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $i0 = virtualinvoke r1.<groovyjarjarantlr.Token: int getLine()>();

        $i1 = virtualinvoke r1.<groovyjarjarantlr.Token: int getColumn()>();

        $r3 = virtualinvoke r0.<groovyjarjarantlr.CodeGenerator: java.lang.String extractTypeOfAction(java.lang.String,int,int)>($r2, $i0, $i1);

        return $r3;
    }

    protected java.lang.String extractTypeOfAction(java.lang.String, int, int)
    {
        groovyjarjarantlr.Grammar $r2;
        groovyjarjarantlr.Tool $r3;
        int $i0, i1, i2, $i5, i6, $i7, $i9;
        java.lang.String $r1, $r4, $r5, r6;
        boolean $z0;
        char $c3, $c4;
        groovyjarjarantlr.CodeGenerator r0;

        r0 := @this: groovyjarjarantlr.CodeGenerator;

        r6 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.CodeGenerator: java.lang.String removeAssignmentFromDeclaration(java.lang.String)>(r6);

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i6 = $i0 - 2;

     label1:
        if i6 < 0 goto label3;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i6);

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c3);

        if $z0 != 0 goto label2;

        $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i6);

        $i7 = (int) $c4;

        if $i7 == 95 goto label2;

        $i5 = i6 + 1;

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        return $r5;

     label2:
        $i9 = (int) -1;

        i6 = i6 + $i9;

        goto label1;

     label3:
        $r3 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r2 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = virtualinvoke $r2.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        virtualinvoke $r3.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Ill-formed action", $r4, i1, i2);

        return "";
    }

    public abstract void gen();

    public abstract void gen(groovyjarjarantlr.ActionElement);

    public abstract void gen(groovyjarjarantlr.AlternativeBlock);

    public abstract void gen(groovyjarjarantlr.BlockEndElement);

    public abstract void gen(groovyjarjarantlr.CharLiteralElement);

    public abstract void gen(groovyjarjarantlr.CharRangeElement);

    public abstract void gen(groovyjarjarantlr.LexerGrammar) throws java.io.IOException;

    public abstract void gen(groovyjarjarantlr.OneOrMoreBlock);

    public abstract void gen(groovyjarjarantlr.ParserGrammar) throws java.io.IOException;

    public abstract void gen(groovyjarjarantlr.RuleRefElement);

    public abstract void gen(groovyjarjarantlr.StringLiteralElement);

    public abstract void gen(groovyjarjarantlr.TokenRangeElement);

    public abstract void gen(groovyjarjarantlr.TokenRefElement);

    public abstract void gen(groovyjarjarantlr.TreeElement);

    public abstract void gen(groovyjarjarantlr.TreeWalkerGrammar) throws java.io.IOException;

    public abstract void gen(groovyjarjarantlr.WildcardElement);

    public abstract void gen(groovyjarjarantlr.ZeroOrMoreBlock);

    protected void genTokenInterchange(groovyjarjarantlr.TokenManager) throws java.io.IOException
    {
        groovyjarjarantlr.TokenManager r1;
        groovyjarjarantlr.collections.impl.Vector $r31;
        java.io.PrintWriter $r11, $r32;
        groovyjarjarantlr.CodeGenerator r9;
        groovyjarjarantlr.Tool $r10, $r17, $r19, $r44;
        java.lang.StringBuffer $r0, $r3, $r5, $r7, $r12, $r13, $r15, $r16, $r21, $r22, $r23, $r24, $r26, $r28, $r29, $r37, $r38, $r40, $r41, $r43, $r45, $r46, $r50, $r52, $r53, $r55, $r57, $r58, $r61, $r62, $r63, $r64, $r66, $r67, $r68;
        java.lang.String $r2, $r4, $r6, $r8, $r14, $r18, $r20, $r25, $r27, $r30, r34, $r36, $r39, $r42, $r47, $r49, $r51, $r54, $r59, $r65, $r69;
        groovyjarjarantlr.StringLiteralSymbol r60;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.TokenSymbol $r35, $r48;
        int $i0, i1;
        java.io.PrintStream $r56;
        java.lang.Object $r33;

        r9 := @this: groovyjarjarantlr.CodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.TokenManager;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = interfaceinvoke r1.<groovyjarjarantlr.TokenManager: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = <groovyjarjarantlr.CodeGenerator: java.lang.String TokenTypesFileSuffix>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = <groovyjarjarantlr.CodeGenerator: java.lang.String TokenTypesFileExt>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = r9.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r11 = virtualinvoke $r10.<groovyjarjarantlr.Tool: java.io.PrintWriter openOutputFile(java.lang.String)>($r8);

        r9.<groovyjarjarantlr.CodeGenerator: java.io.PrintWriter currentOutput> = $r11;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// $ANTLR ");

        $r14 = <groovyjarjarantlr.Tool: java.lang.String version>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r19 = r9.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r17 = r9.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r18 = $r17.<groovyjarjarantlr.Tool: java.lang.String grammarFile>;

        $r20 = virtualinvoke $r19.<groovyjarjarantlr.Tool: java.lang.String fileMinusPath(java.lang.String)>($r18);

        $r21 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" -> ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r9.<groovyjarjarantlr.CodeGenerator: void println(java.lang.String)>($r25);

        r9.<groovyjarjarantlr.CodeGenerator: int tabs> = 0;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = interfaceinvoke r1.<groovyjarjarantlr.TokenManager: java.lang.String getName()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    // output token vocab name");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r9.<groovyjarjarantlr.CodeGenerator: void println(java.lang.String)>($r30);

        $r31 = interfaceinvoke r1.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        i1 = 4;

     label1:
        $i0 = virtualinvoke $r31.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i1 >= $i0 goto label8;

        $r33 = virtualinvoke $r31.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i1);

        r34 = (java.lang.String) $r33;

        $z0 = r9.<groovyjarjarantlr.CodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label2;

        $r56 = <java.lang.System: java.io.PrintStream out>;

        $r55 = new java.lang.StringBuffer;

        specialinvoke $r55.<java.lang.StringBuffer: void <init>()>();

        $r57 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("gen persistence file entry for: ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r34);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r56.<java.io.PrintStream: void println(java.lang.String)>($r59);

     label2:
        if r34 == null goto label7;

        $z1 = virtualinvoke r34.<java.lang.String: boolean startsWith(java.lang.String)>("<");

        if $z1 != 0 goto label7;

        $z2 = virtualinvoke r34.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z2 == 0 goto label4;

        $r48 = interfaceinvoke r1.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r34);

        r60 = (groovyjarjarantlr.StringLiteralSymbol) $r48;

        if r60 == null goto label3;

        $r49 = r60.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String label>;

        if $r49 == null goto label3;

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $r51 = r60.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String label>;

        $r52 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r9.<groovyjarjarantlr.CodeGenerator: void print(java.lang.String)>($r54);

     label3:
        $r61 = new java.lang.StringBuffer;

        specialinvoke $r61.<java.lang.StringBuffer: void <init>()>();

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r34);

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=");

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r9.<groovyjarjarantlr.CodeGenerator: void println(java.lang.String)>($r65);

        goto label7;

     label4:
        virtualinvoke r9.<groovyjarjarantlr.CodeGenerator: void print(java.lang.String)>(r34);

        $r35 = interfaceinvoke r1.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r34);

        if $r35 != null goto label5;

        $r44 = r9.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("undefined token symbol: ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r34);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r44.<groovyjarjarantlr.Tool: void warning(java.lang.String)>($r47);

        goto label6;

     label5:
        $r36 = virtualinvoke $r35.<groovyjarjarantlr.TokenSymbol: java.lang.String getParaphrase()>();

        if $r36 == null goto label6;

        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r39 = virtualinvoke $r35.<groovyjarjarantlr.TokenSymbol: java.lang.String getParaphrase()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r9.<groovyjarjarantlr.CodeGenerator: void print(java.lang.String)>($r42);

     label6:
        $r66 = new java.lang.StringBuffer;

        specialinvoke $r66.<java.lang.StringBuffer: void <init>()>();

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=");

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r9.<groovyjarjarantlr.CodeGenerator: void println(java.lang.String)>($r69);

     label7:
        i1 = i1 + 1;

        goto label1;

     label8:
        $r32 = r9.<groovyjarjarantlr.CodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r32.<java.io.PrintWriter: void close()>();

        r9.<groovyjarjarantlr.CodeGenerator: java.io.PrintWriter currentOutput> = null;

        return;
    }

    public java.lang.String processStringForASTConstructor(java.lang.String)
    {
        java.lang.String r0;
        groovyjarjarantlr.CodeGenerator r1;

        r1 := @this: groovyjarjarantlr.CodeGenerator;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    public abstract java.lang.String getASTCreateString(groovyjarjarantlr.collections.impl.Vector);

    public abstract java.lang.String getASTCreateString(groovyjarjarantlr.GrammarAtom, java.lang.String);

    protected java.lang.String getBitsetName(int)
    {
        java.lang.StringBuffer $r0, $r1, $r2;
        int i0;
        java.lang.String $r3;
        groovyjarjarantlr.CodeGenerator r4;

        r4 := @this: groovyjarjarantlr.CodeGenerator;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_tokenSet_");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String encodeLexerRuleName(java.lang.String)
    {
        java.lang.StringBuffer $r0, $r1, $r3;
        java.lang.String r2, $r4;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("m");

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String decodeLexerRuleName(java.lang.String)
    {
        int $i0;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

        return $r1;
    }

    public abstract java.lang.String mapTreeId(java.lang.String, groovyjarjarantlr.ActionTransInfo);

    protected int markBitsetForGen(groovyjarjarantlr.collections.impl.BitSet)
    {
        groovyjarjarantlr.collections.impl.BitSet r2, r8;
        groovyjarjarantlr.CodeGenerator r0;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r4, $r7;
        groovyjarjarantlr.collections.impl.Vector $r1, $r3, $r5, $r6;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.CodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        i3 = 0;

     label1:
        $r1 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.collections.impl.Vector bitsetsUsed>;

        $i0 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i3 >= $i0 goto label3;

        $r6 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.collections.impl.Vector bitsetsUsed>;

        $r7 = virtualinvoke $r6.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i3);

        r8 = (groovyjarjarantlr.collections.impl.BitSet) $r7;

        $z0 = virtualinvoke r2.<groovyjarjarantlr.collections.impl.BitSet: boolean equals(java.lang.Object)>(r8);

        if $z0 == 0 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r3 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.collections.impl.Vector bitsetsUsed>;

        $r4 = virtualinvoke r2.<groovyjarjarantlr.collections.impl.BitSet: java.lang.Object clone()>();

        virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: void appendElement(java.lang.Object)>($r4);

        $r5 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.collections.impl.Vector bitsetsUsed>;

        $i1 = virtualinvoke $r5.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        $i2 = $i1 - 1;

        return $i2;
    }

    protected void print(java.lang.String)
    {
        java.io.PrintWriter $r2;
        java.lang.String r0;
        groovyjarjarantlr.CodeGenerator r1;

        r1 := @this: groovyjarjarantlr.CodeGenerator;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        virtualinvoke r1.<groovyjarjarantlr.CodeGenerator: void printTabs()>();

        $r2 = r1.<groovyjarjarantlr.CodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r2.<java.io.PrintWriter: void print(java.lang.String)>(r0);

     label1:
        return;
    }

    protected void printAction(java.lang.String)
    {
        java.lang.String r0;
        groovyjarjarantlr.CodeGenerator r1;

        r1 := @this: groovyjarjarantlr.CodeGenerator;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        virtualinvoke r1.<groovyjarjarantlr.CodeGenerator: void printTabs()>();

        virtualinvoke r1.<groovyjarjarantlr.CodeGenerator: void _printAction(java.lang.String)>(r0);

     label1:
        return;
    }

    protected void println(java.lang.String)
    {
        java.io.PrintWriter $r2;
        java.lang.String r0;
        groovyjarjarantlr.CodeGenerator r1;

        r1 := @this: groovyjarjarantlr.CodeGenerator;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        virtualinvoke r1.<groovyjarjarantlr.CodeGenerator: void printTabs()>();

        $r2 = r1.<groovyjarjarantlr.CodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(r0);

     label1:
        return;
    }

    protected void printTabs()
    {
        java.io.PrintWriter $r1;
        int $i0, i1;
        groovyjarjarantlr.CodeGenerator r0;

        r0 := @this: groovyjarjarantlr.CodeGenerator;

        i1 = 1;

     label1:
        $i0 = r0.<groovyjarjarantlr.CodeGenerator: int tabs>;

        if i1 > $i0 goto label2;

        $r1 = r0.<groovyjarjarantlr.CodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r1.<java.io.PrintWriter: void print(java.lang.String)>("\t");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected abstract java.lang.String processActionForSpecialSymbols(java.lang.String, int, groovyjarjarantlr.RuleBlock, groovyjarjarantlr.ActionTransInfo);

    public java.lang.String getFOLLOWBitSet(java.lang.String, int)
    {
        groovyjarjarantlr.RuleBlock $r5;
        groovyjarjarantlr.LLkGrammarAnalyzer $r8;
        groovyjarjarantlr.collections.impl.BitSet $r10;
        groovyjarjarantlr.CodeGenerator r0;
        groovyjarjarantlr.Grammar $r2, $r6;
        groovyjarjarantlr.RuleSymbol $r4;
        groovyjarjarantlr.RuleEndElement $r7;
        groovyjarjarantlr.GrammarSymbol $r3;
        groovyjarjarantlr.Lookahead $r9;
        int i0, $i1;
        java.lang.String r1, $r11;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.CodeGenerator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>(r1);

        $z0 = $r3 instanceof groovyjarjarantlr.RuleSymbol;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = (groovyjarjarantlr.RuleSymbol) $r3;

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock getBlock()>();

        $r6 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r8 = $r6.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $r7 = $r5.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.RuleEndElement endNode>;

        $r9 = interfaceinvoke $r8.<groovyjarjarantlr.LLkGrammarAnalyzer: groovyjarjarantlr.Lookahead FOLLOW(int,groovyjarjarantlr.RuleEndElement)>(i0, $r7);

        $r10 = $r9.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i1 = virtualinvoke r0.<groovyjarjarantlr.CodeGenerator: int markBitsetForGen(groovyjarjarantlr.collections.impl.BitSet)>($r10);

        $r11 = virtualinvoke r0.<groovyjarjarantlr.CodeGenerator: java.lang.String getBitsetName(int)>($i1);

        return $r11;
    }

    public java.lang.String getFIRSTBitSet(java.lang.String, int)
    {
        groovyjarjarantlr.RuleBlock $r5;
        groovyjarjarantlr.LLkGrammarAnalyzer $r7;
        groovyjarjarantlr.collections.impl.BitSet $r9;
        groovyjarjarantlr.CodeGenerator r0;
        groovyjarjarantlr.Grammar $r2, $r6;
        groovyjarjarantlr.RuleSymbol $r4;
        groovyjarjarantlr.GrammarSymbol $r3;
        groovyjarjarantlr.Lookahead $r8;
        int i0, $i1;
        java.lang.String r1, $r10;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.CodeGenerator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>(r1);

        $z0 = $r3 instanceof groovyjarjarantlr.RuleSymbol;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = (groovyjarjarantlr.RuleSymbol) $r3;

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock getBlock()>();

        $r6 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r7 = $r6.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $r8 = interfaceinvoke $r7.<groovyjarjarantlr.LLkGrammarAnalyzer: groovyjarjarantlr.Lookahead look(int,groovyjarjarantlr.RuleBlock)>(i0, $r5);

        $r9 = $r8.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i1 = virtualinvoke r0.<groovyjarjarantlr.CodeGenerator: int markBitsetForGen(groovyjarjarantlr.collections.impl.BitSet)>($r9);

        $r10 = virtualinvoke r0.<groovyjarjarantlr.CodeGenerator: java.lang.String getBitsetName(int)>($i1);

        return $r10;
    }

    protected java.lang.String removeAssignmentFromDeclaration(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String $r0, r2;
        groovyjarjarantlr.CodeGenerator r1;

        r1 := @this: groovyjarjarantlr.CodeGenerator;

        r2 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(61);

        if $i0 < 0 goto label1;

        $i1 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(61);

        $r0 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        r2 = virtualinvoke $r0.<java.lang.String: java.lang.String trim()>();

     label1:
        return r2;
    }

    private void reset()
    {
        groovyjarjarantlr.CodeGenerator r0;
        groovyjarjarantlr.collections.impl.Vector $r1;

        r0 := @this: groovyjarjarantlr.CodeGenerator;

        r0.<groovyjarjarantlr.CodeGenerator: int tabs> = 0;

        $r1 = new groovyjarjarantlr.collections.impl.Vector;

        specialinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: void <init>()>();

        r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.collections.impl.Vector bitsetsUsed> = $r1;

        r0.<groovyjarjarantlr.CodeGenerator: java.io.PrintWriter currentOutput> = null;

        r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar> = null;

        r0.<groovyjarjarantlr.CodeGenerator: boolean DEBUG_CODE_GENERATOR> = 0;

        r0.<groovyjarjarantlr.CodeGenerator: int makeSwitchThreshold> = 2;

        r0.<groovyjarjarantlr.CodeGenerator: int bitsetTestThreshold> = 4;

        return;
    }

    public static java.lang.String reverseLexerRuleName(java.lang.String)
    {
        int $i0;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

        return $r1;
    }

    public void setAnalyzer(groovyjarjarantlr.LLkGrammarAnalyzer)
    {
        groovyjarjarantlr.LLkGrammarAnalyzer r1;
        groovyjarjarantlr.CodeGenerator r0;

        r0 := @this: groovyjarjarantlr.CodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.LLkGrammarAnalyzer;

        r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer> = r1;

        return;
    }

    public void setBehavior(groovyjarjarantlr.DefineGrammarSymbols)
    {
        groovyjarjarantlr.DefineGrammarSymbols r1;
        groovyjarjarantlr.CodeGenerator r0;

        r0 := @this: groovyjarjarantlr.CodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.DefineGrammarSymbols;

        r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior> = r1;

        return;
    }

    protected void setGrammar(groovyjarjarantlr.Grammar)
    {
        groovyjarjarantlr.Grammar r1, $r2, $r3, $r7, $r10, $r11, $r13, $r15, $r19, $r21, $r24, $r25;
        groovyjarjarantlr.Token $r4, $r14, $r20;
        boolean $z0, $z1, $z2, $z3, $z4;
        groovyjarjarantlr.CodeGenerator r0;
        groovyjarjarantlr.Tool $r8, $r16, $r22;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r5, $r6, $r9, $r17, $r23;
        java.lang.NumberFormatException $r12, $r18;

        r0 := @this: groovyjarjarantlr.CodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.Grammar;

        specialinvoke r0.<groovyjarjarantlr.CodeGenerator: void reset()>();

        r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar> = r1;

        $r2 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = virtualinvoke $r2.<groovyjarjarantlr.Grammar: boolean hasOption(java.lang.String)>("codeGenMakeSwitchThreshold");

        if $z0 == 0 goto label04;

     label01:
        $r11 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i3 = virtualinvoke $r11.<groovyjarjarantlr.Grammar: int getIntegerOption(java.lang.String)>("codeGenMakeSwitchThreshold");

        r0.<groovyjarjarantlr.CodeGenerator: int makeSwitchThreshold> = $i3;

     label02:
        goto label04;

     label03:
        $r18 := @caughtexception;

        $r19 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r20 = virtualinvoke $r19.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token getOption(java.lang.String)>("codeGenMakeSwitchThreshold");

        $r22 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r21 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r23 = virtualinvoke $r21.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $i6 = virtualinvoke $r20.<groovyjarjarantlr.Token: int getLine()>();

        $i7 = virtualinvoke $r20.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r22.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("option \'codeGenMakeSwitchThreshold\' must be an integer", $r23, $i6, $i7);

     label04:
        $r24 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = virtualinvoke $r24.<groovyjarjarantlr.Grammar: boolean hasOption(java.lang.String)>("codeGenBitsetTestThreshold");

        if $z3 == 0 goto label08;

     label05:
        $r10 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i2 = virtualinvoke $r10.<groovyjarjarantlr.Grammar: int getIntegerOption(java.lang.String)>("codeGenBitsetTestThreshold");

        r0.<groovyjarjarantlr.CodeGenerator: int bitsetTestThreshold> = $i2;

     label06:
        goto label08;

     label07:
        $r12 := @caughtexception;

        $r13 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r14 = virtualinvoke $r13.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token getOption(java.lang.String)>("codeGenBitsetTestThreshold");

        $r16 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r15 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r17 = virtualinvoke $r15.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $i4 = virtualinvoke $r14.<groovyjarjarantlr.Token: int getLine()>();

        $i5 = virtualinvoke $r14.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r16.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("option \'codeGenBitsetTestThreshold\' must be an integer", $r17, $i4, $i5);

     label08:
        $r25 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = virtualinvoke $r25.<groovyjarjarantlr.Grammar: boolean hasOption(java.lang.String)>("codeGenDebug");

        if $z4 == 0 goto label11;

        $r3 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token getOption(java.lang.String)>("codeGenDebug");

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z1 == 0 goto label09;

        r0.<groovyjarjarantlr.CodeGenerator: boolean DEBUG_CODE_GENERATOR> = 1;

        goto label11;

     label09:
        $r6 = virtualinvoke $r4.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z2 == 0 goto label10;

        r0.<groovyjarjarantlr.CodeGenerator: boolean DEBUG_CODE_GENERATOR> = 0;

        goto label11;

     label10:
        $r8 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r7 = r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r9 = virtualinvoke $r7.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $i0 = virtualinvoke $r4.<groovyjarjarantlr.Token: int getLine()>();

        $i1 = virtualinvoke $r4.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r8.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("option \'codeGenDebug\' must be true or false", $r9, $i0, $i1);

     label11:
        return;

        catch java.lang.NumberFormatException from label01 to label02 with label03;
        catch java.lang.NumberFormatException from label05 to label06 with label07;
    }

    public void setTool(groovyjarjarantlr.Tool)
    {
        groovyjarjarantlr.Tool r1;
        groovyjarjarantlr.CodeGenerator r0;

        r0 := @this: groovyjarjarantlr.CodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.Tool;

        r0.<groovyjarjarantlr.CodeGenerator: groovyjarjarantlr.Tool antlrTool> = r1;

        return;
    }

    static void <clinit>()
    {
        <groovyjarjarantlr.CodeGenerator: int BITSET_OPTIMIZE_INIT_THRESHOLD> = 8;

        <groovyjarjarantlr.CodeGenerator: int DEFAULT_BITSET_TEST_THRESHOLD> = 4;

        <groovyjarjarantlr.CodeGenerator: int DEFAULT_MAKE_SWITCH_THRESHOLD> = 2;

        <groovyjarjarantlr.CodeGenerator: boolean OLD_ACTION_TRANSLATOR> = 1;

        <groovyjarjarantlr.CodeGenerator: java.lang.String TokenTypesFileSuffix> = "TokenTypes";

        <groovyjarjarantlr.CodeGenerator: java.lang.String TokenTypesFileExt> = ".txt";

        return;
    }
}
