class com.jidesoft.swing.SoftHashMap extends java.util.AbstractMap implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.Map hash;
    private final java.util.Map reverseLookup;
    private final java.lang.ref.ReferenceQueue queue;

    void <init>()
    {
        java.util.HashMap $r1, $r2;
        java.lang.ref.ReferenceQueue $r3;
        com.jidesoft.swing.SoftHashMap r0;

        r0 := @this: com.jidesoft.swing.SoftHashMap;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.jidesoft.swing.SoftHashMap: java.util.Map hash> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.jidesoft.swing.SoftHashMap: java.util.Map reverseLookup> = $r2;

        $r3 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r3.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<com.jidesoft.swing.SoftHashMap: java.lang.ref.ReferenceQueue queue> = $r3;

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.Map $r2, $r6, $r7;
        java.lang.Object r1, $r3, $r5, r8;
        java.lang.ref.SoftReference r4;
        com.jidesoft.swing.SoftHashMap r0;

        r0 := @this: com.jidesoft.swing.SoftHashMap;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.jidesoft.swing.SoftHashMap: void expungeStaleEntries()>();

        r8 = null;

        $r2 = r0.<com.jidesoft.swing.SoftHashMap: java.util.Map hash>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.ref.SoftReference) $r3;

        if r4 == null goto label1;

        $r5 = virtualinvoke r4.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r8 = $r5;

        if $r5 != null goto label1;

        $r6 = r0.<com.jidesoft.swing.SoftHashMap: java.util.Map hash>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r7 = r0.<com.jidesoft.swing.SoftHashMap: java.util.Map reverseLookup>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4);

     label1:
        return r8;
    }

    private void expungeStaleEntries()
    {
        java.lang.ref.Reference $r2;
        java.util.Map $r3, $r4;
        java.lang.Object $r5;
        java.lang.ref.ReferenceQueue $r1;
        com.jidesoft.swing.SoftHashMap r0;

        r0 := @this: com.jidesoft.swing.SoftHashMap;

     label1:
        $r1 = r0.<com.jidesoft.swing.SoftHashMap: java.lang.ref.ReferenceQueue queue>;

        $r2 = virtualinvoke $r1.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        if $r2 == null goto label2;

        $r4 = r0.<com.jidesoft.swing.SoftHashMap: java.util.Map hash>;

        $r3 = r0.<com.jidesoft.swing.SoftHashMap: java.util.Map reverseLookup>;

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.ref.ReferenceQueue $r3;
        java.util.Map $r5, $r6;
        java.lang.Object r2, r4, $r7, $r9;
        java.lang.ref.SoftReference $r1, r8;
        com.jidesoft.swing.SoftHashMap r0;

        r0 := @this: com.jidesoft.swing.SoftHashMap;

        r4 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.jidesoft.swing.SoftHashMap: void expungeStaleEntries()>();

        $r1 = new java.lang.ref.SoftReference;

        $r3 = r0.<com.jidesoft.swing.SoftHashMap: java.lang.ref.ReferenceQueue queue>;

        specialinvoke $r1.<java.lang.ref.SoftReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r2, $r3);

        $r5 = r0.<com.jidesoft.swing.SoftHashMap: java.util.Map reverseLookup>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r4);

        $r6 = r0.<com.jidesoft.swing.SoftHashMap: java.util.Map hash>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r1);

        r8 = (java.lang.ref.SoftReference) $r7;

        if r8 != null goto label1;

        return null;

     label1:
        $r9 = virtualinvoke r8.<java.lang.ref.SoftReference: java.lang.Object get()>();

        return $r9;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Object r1, $r3, $r5;
        java.lang.ref.SoftReference r4;
        com.jidesoft.swing.SoftHashMap r0;

        r0 := @this: com.jidesoft.swing.SoftHashMap;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.jidesoft.swing.SoftHashMap: void expungeStaleEntries()>();

        $r2 = r0.<com.jidesoft.swing.SoftHashMap: java.util.Map hash>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (java.lang.ref.SoftReference) $r3;

        if r4 != null goto label1;

        return null;

     label1:
        $r5 = virtualinvoke r4.<java.lang.ref.SoftReference: java.lang.Object get()>();

        return $r5;
    }

    public void clear()
    {
        com.jidesoft.swing.SoftHashMap r0;
        java.util.Map $r1, $r2;

        r0 := @this: com.jidesoft.swing.SoftHashMap;

        $r1 = r0.<com.jidesoft.swing.SoftHashMap: java.util.Map hash>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r2 = r0.<com.jidesoft.swing.SoftHashMap: java.util.Map reverseLookup>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        return;
    }

    public int size()
    {
        int $i0;
        com.jidesoft.swing.SoftHashMap r0;
        java.util.Map $r1;

        r0 := @this: com.jidesoft.swing.SoftHashMap;

        specialinvoke r0.<com.jidesoft.swing.SoftHashMap: void expungeStaleEntries()>();

        $r1 = r0.<com.jidesoft.swing.SoftHashMap: java.util.Map hash>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public java.util.Set entrySet()
    {
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.util.Map $r2;
        java.lang.Object $r5, $r7, $r9;
        java.lang.ref.SoftReference $r8;
        com.jidesoft.swing.SoftHashMap$1 $r10;
        java.util.LinkedHashSet $r1;
        com.jidesoft.swing.SoftHashMap r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.SoftHashMap;

        specialinvoke r0.<com.jidesoft.swing.SoftHashMap: void expungeStaleEntries()>();

        $r1 = new java.util.LinkedHashSet;

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>()>();

        $r2 = r0.<com.jidesoft.swing.SoftHashMap: java.util.Map hash>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.ref.SoftReference) $r7;

        $r9 = virtualinvoke $r8.<java.lang.ref.SoftReference: java.lang.Object get()>();

        if $r9 == null goto label2;

        $r10 = new com.jidesoft.swing.SoftHashMap$1;

        specialinvoke $r10.<com.jidesoft.swing.SoftHashMap$1: void <init>(com.jidesoft.swing.SoftHashMap,java.util.Map$Entry,java.lang.Object)>(r0, r6, $r9);

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r10);

     label2:
        goto label1;

     label3:
        return $r1;
    }

    static java.lang.ref.ReferenceQueue access$000(com.jidesoft.swing.SoftHashMap)
    {
        java.lang.ref.ReferenceQueue $r1;
        com.jidesoft.swing.SoftHashMap r0;

        r0 := @parameter0: com.jidesoft.swing.SoftHashMap;

        $r1 = r0.<com.jidesoft.swing.SoftHashMap: java.lang.ref.ReferenceQueue queue>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.jidesoft.swing.SoftHashMap: long serialVersionUID> = 2456984612468446907L;

        return;
    }
}
