public class org.waveprotocol.wave.concurrencycontrol.client.MergingSequence extends java.util.AbstractList
{
    private final java.util.List ops;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.client.MergingSequence r0;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: java.util.List ops> = $r1;

        return;
    }

    public void <init>(java.lang.Iterable)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r5;
        org.waveprotocol.wave.concurrencycontrol.client.MergingSequence r0;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        java.lang.Iterable r2;
        java.util.ArrayList $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence;

        r2 := @parameter0: java.lang.Iterable;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: java.util.List ops> = $r1;

        $r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r4;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: boolean add(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r5);

        goto label1;

     label2:
        return;
    }

    public void optimise()
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r5;
        org.waveprotocol.wave.concurrencycontrol.client.MergingSequence r0;
        org.waveprotocol.wave.model.document.operation.DocOp $r12;
        java.util.ArrayList $r1, $r2;
        int $i0;
        org.waveprotocol.wave.model.operation.wave.BlipOperation $r8;
        java.lang.String $r7, r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r6;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r10;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation $r11;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: int size()>();

        if $i0 != 1 goto label1;

        return;

     label1:
        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList(java.lang.Iterable)>(r0);

        r9 = null;

        r10 = null;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: void clear()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z6 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r4;

        $z1 = r5 instanceof org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        if $z1 == 0 goto label4;

        r6 = (org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation) r5;

        $r7 = virtualinvoke r6.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String getBlipId()>();

        $r8 = virtualinvoke r6.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation getBlipOp()>();

        $z3 = $r8 instanceof org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        if $z3 == 0 goto label4;

        $z4 = virtualinvoke $r1.<java.util.ArrayList: boolean isEmpty()>();

        if $z4 != 0 goto label3;

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z5 != 0 goto label3;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: void composeDocOps(java.util.List,java.lang.String,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,java.util.List)>(r0, r9, r10, $r1);

     label3:
        $r11 = (org.waveprotocol.wave.model.operation.wave.BlipContentOperation) $r8;

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.document.operation.DocOp getContentOp()>();

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        r10 = virtualinvoke $r8.<org.waveprotocol.wave.model.operation.wave.BlipOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        r9 = $r7;

        goto label2;

     label4:
        $z2 = virtualinvoke $r1.<java.util.ArrayList: boolean isEmpty()>();

        if $z2 != 0 goto label5;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: void composeDocOps(java.util.List,java.lang.String,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,java.util.List)>(r0, r9, r10, $r1);

     label5:
        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: boolean add(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r5);

        goto label2;

     label6:
        $z0 = virtualinvoke $r1.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label7;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: void composeDocOps(java.util.List,java.lang.String,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,java.util.List)>(r0, r9, r10, $r1);

     label7:
        return;
    }

    private static void composeDocOps(java.util.List, java.lang.String, org.waveprotocol.wave.model.operation.wave.WaveletOperationContext, java.util.List)
    {
        java.util.List r0, r5;
        org.waveprotocol.wave.model.document.operation.DocOp $r6;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation $r3;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation $r1;
        java.lang.String r2;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r4;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        r5 := @parameter3: java.util.List;

        $r1 = new org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r3 = new org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.Composer: org.waveprotocol.wave.model.document.operation.DocOp compose(java.lang.Iterable)>(r5);

        specialinvoke $r3.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.document.operation.DocOp)>(r4, $r6);

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.wave.BlipOperation)>(r2, $r3);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        interfaceinvoke r5.<java.util.List: void clear()>();

        return;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletOperation get(int)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r3;
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.client.MergingSequence r0;
        int i0;
        java.lang.Object $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: java.util.List ops>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r2;

        return $r3;
    }

    public int size()
    {
        int $i0;
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.client.MergingSequence r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: java.util.List ops>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public boolean add(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r1;
        java.util.List $r2;
        org.waveprotocol.wave.concurrencycontrol.client.MergingSequence r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: java.util.List ops>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletOperation remove(int)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r3;
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.client.MergingSequence r0;
        int i0;
        java.lang.Object $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: java.util.List ops>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0);

        $r3 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r2;

        return $r3;
    }

    public volatile java.lang.Object remove(int)
    {
        int i0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r1;
        org.waveprotocol.wave.concurrencycontrol.client.MergingSequence r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: org.waveprotocol.wave.model.operation.wave.WaveletOperation remove(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object get(int)
    {
        int i0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r1;
        org.waveprotocol.wave.concurrencycontrol.client.MergingSequence r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: org.waveprotocol.wave.model.operation.wave.WaveletOperation get(int)>(i0);

        return $r1;
    }

    public volatile boolean add(java.lang.Object)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r2;
        org.waveprotocol.wave.concurrencycontrol.client.MergingSequence r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) r1;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: boolean add(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>($r2);

        return $z0;
    }
}
