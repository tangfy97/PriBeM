public class groovy.lang.SpreadMap extends java.util.HashMap
{
    private java.util.Map mapData;
    private int hashCode;

    public void <init>(java.lang.Object[])
    {
        java.lang.Object[] r2;
        groovy.lang.SpreadMap r0;
        java.util.HashMap $r1;
        java.util.Map $r5;
        int $i0, $i1, $i2, i3, i4;
        java.lang.Object $r3, $r4;

        r0 := @this: groovy.lang.SpreadMap;

        r2 := @parameter0: java.lang.Object[];

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = new java.util.HashMap;

        $i0 = lengthof r2;

        $i1 = $i0 / 2;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>($i1);

        r0.<groovy.lang.SpreadMap: java.util.Map mapData> = $r1;

        i3 = 0;

     label1:
        $i2 = lengthof r2;

        if i3 >= $i2 goto label2;

        $r5 = r0.<groovy.lang.SpreadMap: java.util.Map mapData>;

        i4 = i3 + 1;

        $r4 = r2[i3];

        i3 = i4 + 1;

        $r3 = r2[i4];

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        goto label1;

     label2:
        return;
    }

    public void <init>(java.util.Map)
    {
        groovy.lang.SpreadMap r0;
        java.util.Map r1;

        r0 := @this: groovy.lang.SpreadMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        r0.<groovy.lang.SpreadMap: java.util.Map mapData> = r1;

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.Map $r2;
        groovy.lang.SpreadMap r0;
        java.lang.Object r1, $r3;

        r0 := @this: groovy.lang.SpreadMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<groovy.lang.SpreadMap: java.util.Map mapData>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        groovy.lang.SpreadMap r3;
        java.lang.RuntimeException $r0;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r7, $r8, $r10, $r11;
        java.lang.Object r6, r9;
        java.lang.String $r12;

        r3 := @this: groovy.lang.SpreadMap;

        r6 := @parameter0: java.lang.Object;

        r9 := @parameter1: java.lang.Object;

        $r0 = new java.lang.RuntimeException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SpreadMap: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is an immutable map, and so (");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") cannot be added.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r0;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        groovy.lang.SpreadMap r3;
        java.lang.RuntimeException $r0;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r7, $r8;
        java.lang.Object r6;
        java.lang.String $r9;

        r3 := @this: groovy.lang.SpreadMap;

        r6 := @parameter0: java.lang.Object;

        $r0 = new java.lang.RuntimeException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SpreadMap: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is an immutable map, and so the key (");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") cannot be deleteded.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r0;
    }

    public void putAll(java.util.Map)
    {
        groovy.lang.SpreadMap r3;
        java.lang.RuntimeException $r0;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r7, $r8;
        java.util.Map r6;
        java.lang.String $r9;

        r3 := @this: groovy.lang.SpreadMap;

        r6 := @parameter0: java.util.Map;

        $r0 = new java.lang.RuntimeException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SpreadMap: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is an immutable map, and so the map (");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") cannot be put in this spreadMap.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r0;
    }

    public int size()
    {
        java.util.Map $r1;
        int $i0;
        java.util.Set $r2;
        groovy.lang.SpreadMap r0;

        r0 := @this: groovy.lang.SpreadMap;

        $r1 = r0.<groovy.lang.SpreadMap: java.util.Map mapData>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        groovy.lang.SpreadMap r1, $r2;
        boolean $z0, $z1;

        r1 := @this: groovy.lang.SpreadMap;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof groovy.lang.SpreadMap;

        if $z0 == 0 goto label1;

        $r2 = (groovy.lang.SpreadMap) r0;

        $z1 = virtualinvoke r1.<groovy.lang.SpreadMap: boolean equals(groovy.lang.SpreadMap)>($r2);

        return $z1;

     label1:
        return 0;
    }

    public boolean equals(groovy.lang.SpreadMap)
    {
        java.util.Iterator $r4;
        java.util.Set $r3;
        groovy.lang.SpreadMap r0, r1;
        java.util.Map $r2;
        int $i0, $i1;
        java.lang.Object $r5, $r6, $r7;
        boolean $z0, $z1;

        r1 := @this: groovy.lang.SpreadMap;

        r0 := @parameter0: groovy.lang.SpreadMap;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r1.<groovy.lang.SpreadMap: int size()>();

        $i1 = virtualinvoke r0.<groovy.lang.SpreadMap: int size()>();

        if $i0 != $i1 goto label5;

        $r2 = r1.<groovy.lang.SpreadMap: java.util.Map mapData>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = virtualinvoke r1.<groovy.lang.SpreadMap: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = virtualinvoke r0.<groovy.lang.SpreadMap: java.lang.Object get(java.lang.Object)>($r5);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean compareEqual(java.lang.Object,java.lang.Object)>($r6, $r7);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        goto label2;

     label4:
        return 1;

     label5:
        return 0;
    }

    public int hashCode()
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        groovy.lang.SpreadMap r0;
        java.util.Map $r1;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: groovy.lang.SpreadMap;

        $i0 = r0.<groovy.lang.SpreadMap: int hashCode>;

        if $i0 != 0 goto label4;

        $r1 = r0.<groovy.lang.SpreadMap: java.util.Map mapData>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        if $r4 == null goto label2;

        $i4 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

        goto label3;

     label2:
        $i6 = (int) 47806;

        $i4 = $i6;

     label3:
        $i2 = r0.<groovy.lang.SpreadMap: int hashCode>;

        $i3 = $i2 ^ $i4;

        r0.<groovy.lang.SpreadMap: int hashCode> = $i3;

        goto label1;

     label4:
        $i1 = r0.<groovy.lang.SpreadMap: int hashCode>;

        return $i1;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r2, $r8, $r9, $r10, $r13;
        java.util.Map $r1, $r3, $r11;
        java.lang.String $r6, $r14;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5;
        java.util.Set $r4;
        groovy.lang.SpreadMap r0;
        java.lang.Object $r7, $r12;

        r0 := @this: groovy.lang.SpreadMap;

        $r1 = r0.<groovy.lang.SpreadMap: java.util.Map mapData>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return "*:[:]";

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(java.lang.String)>("*:[");

        $r3 = r0.<groovy.lang.SpreadMap: java.util.Map mapData>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r11 = r0.<groovy.lang.SpreadMap: java.util.Map mapData>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label3:
        goto label2;

     label4:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r6 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }
}
