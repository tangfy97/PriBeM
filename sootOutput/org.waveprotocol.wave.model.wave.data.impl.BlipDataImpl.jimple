public final class org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl extends org.waveprotocol.wave.model.wave.data.impl.AbstractBlipData
{
    private final java.util.LinkedHashSet contributors;

    void <init>(java.lang.String, org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl, org.waveprotocol.wave.model.wave.ParticipantId, java.util.Collection, org.waveprotocol.wave.model.wave.data.DocumentOperationSink, long, long)
    {
        org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl r0;
        java.util.Collection r6;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl r2;
        long l0, l1;
        org.waveprotocol.wave.model.wave.ParticipantId r3;
        org.waveprotocol.wave.model.wave.data.DocumentOperationSink r4;
        java.lang.String r1;
        java.util.LinkedHashSet $r5;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl;

        r3 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r6 := @parameter3: java.util.Collection;

        r4 := @parameter4: org.waveprotocol.wave.model.wave.data.DocumentOperationSink;

        l0 := @parameter5: long;

        l1 := @parameter6: long;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractBlipData: void <init>(java.lang.String,org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.wave.data.DocumentOperationSink,long,long)>(r1, r2, r3, r4, l0, l1);

        $r5 = new java.util.LinkedHashSet;

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r6);

        r0.<org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl: java.util.LinkedHashSet contributors> = $r5;

        return;
    }

    public java.util.Set getContributors()
    {
        org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl r0;
        java.util.LinkedHashSet $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl: java.util.LinkedHashSet contributors>;

        return $r1;
    }

    public void addContributor(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl r0;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        java.util.LinkedHashSet $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl: java.util.LinkedHashSet contributors>;

        $z0 = virtualinvoke $r2.<java.util.LinkedHashSet: boolean add(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl: void fireContributorAdded(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

     label1:
        return;
    }

    public void removeContributor(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl r0;
        java.util.List $r4;
        org.waveprotocol.wave.model.wave.ParticipantId[] $r1;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        java.util.LinkedHashSet $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r3 = r0.<org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl: java.util.LinkedHashSet contributors>;

        $r1 = newarray (org.waveprotocol.wave.model.wave.ParticipantId)[1];

        $r1[0] = r2;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $z0 = virtualinvoke $r3.<java.util.LinkedHashSet: boolean removeAll(java.util.Collection)>($r4);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl: void fireContributorRemoved(org.waveprotocol.wave.model.wave.ParticipantId)>(r2);

     label1:
        return;
    }
}
