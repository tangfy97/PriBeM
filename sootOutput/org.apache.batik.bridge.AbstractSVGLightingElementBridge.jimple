public abstract class org.apache.batik.bridge.AbstractSVGLightingElementBridge extends org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge
{

    protected void <init>()
    {
        org.apache.batik.bridge.AbstractSVGLightingElementBridge r0;

        r0 := @this: org.apache.batik.bridge.AbstractSVGLightingElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge: void <init>()>();

        return;
    }

    protected static org.apache.batik.ext.awt.image.Light extractLight(org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        java.awt.Color $r2;
        org.apache.batik.bridge.AbstractSVGLightingElementBridge$AbstractSVGLightElementBridge $r5;
        org.apache.batik.bridge.BridgeContext r1;
        org.apache.batik.bridge.Bridge $r4;
        org.apache.batik.ext.awt.image.Light $r6;
        short $s0;
        org.w3c.dom.Element r0, r3;
        org.w3c.dom.Node r7;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: org.apache.batik.bridge.BridgeContext;

        $r2 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.Color convertLightingColor(org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>(r0, r1);

        r7 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label5;

     label1:
        $s0 = interfaceinvoke r7.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label2;

        goto label4;

     label2:
        r3 = (org.w3c.dom.Element) r7;

        $r4 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(org.w3c.dom.Element)>(r3);

        if $r4 == null goto label4;

        $z0 = $r4 instanceof org.apache.batik.bridge.AbstractSVGLightingElementBridge$AbstractSVGLightElementBridge;

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        $r5 = (org.apache.batik.bridge.AbstractSVGLightingElementBridge$AbstractSVGLightElementBridge) $r4;

        $r6 = virtualinvoke $r5.<org.apache.batik.bridge.AbstractSVGLightingElementBridge$AbstractSVGLightElementBridge: org.apache.batik.ext.awt.image.Light createLight(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.w3c.dom.Element,java.awt.Color)>(r1, r0, r3, $r2);

        return $r6;

     label4:
        r7 = interfaceinvoke r7.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label5:
        if r7 != null goto label1;

        return null;
    }

    protected static double[] convertKernelUnitLength(org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r9, $r11;
        double[] r2;
        byte $b1, $b2;
        java.util.StringTokenizer $r12;
        int $i0, $i3, $i4;
        java.lang.String $r1, $r4, $r6;
        double $d0, $d1, $d2, $d3, $d4;
        boolean $z0, $z1;
        org.apache.batik.bridge.BridgeException $r13, $r14;
        org.apache.batik.bridge.BridgeContext r5;
        java.lang.NumberFormatException $r7;
        org.w3c.dom.Element r0;
        float $f0, $f1;

        r0 := @parameter0: org.w3c.dom.Element;

        r5 := @parameter1: org.apache.batik.bridge.BridgeContext;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "kernelUnitLength");

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        r2 = newarray (double)[2];

        $r12 = new java.util.StringTokenizer;

        specialinvoke $r12.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, " ,");

     label2:
        $r4 = virtualinvoke $r12.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $f0 = staticinvoke <org.apache.batik.bridge.SVGUtilities: float convertSVGNumber(java.lang.String)>($r4);

        $d0 = (double) $f0;

        r2[0] = $d0;

        $z0 = virtualinvoke $r12.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $r6 = virtualinvoke $r12.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $f1 = staticinvoke <org.apache.batik.bridge.SVGUtilities: float convertSVGNumber(java.lang.String)>($r6);

        $d4 = (double) $f1;

        r2[1] = $d4;

        goto label4;

     label3:
        $d1 = r2[0];

        r2[1] = $d1;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        $r13 = new org.apache.batik.bridge.BridgeException;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = "kernelUnitLength";

        $r9[1] = $r1;

        specialinvoke $r13.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r5, r0, $r7, "attribute.malformed", $r9);

        throw $r13;

     label6:
        $z1 = virtualinvoke $r12.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 != 0 goto label7;

        $d2 = r2[0];

        $b1 = $d2 cmpg 0.0;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label7;

        $d3 = r2[1];

        $b2 = $d3 cmpg 0.0;

        $i4 = (int) $b2;

        if $i4 > 0 goto label8;

     label7:
        $r14 = new org.apache.batik.bridge.BridgeException;

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = "kernelUnitLength";

        $r11[1] = $r1;

        specialinvoke $r14.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r5, r0, "attribute.malformed", $r11);

        throw $r14;

     label8:
        return r2;

        catch java.lang.NumberFormatException from label2 to label4 with label5;
    }
}
