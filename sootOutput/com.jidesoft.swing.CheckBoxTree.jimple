public class com.jidesoft.swing.CheckBoxTree extends javax.swing.JTree
{
    public static final java.lang.String PROPERTY_CHECKBOX_ENABLED;
    public static final java.lang.String PROPERTY_CLICK_IN_CHECKBOX_ONLY;
    public static final java.lang.String PROPERTY_DIG_IN;
    protected com.jidesoft.swing.CheckBoxTreeCellRenderer _treeCellRenderer;
    private com.jidesoft.swing.CheckBoxTreeSelectionModel _checkBoxTreeSelectionModel;
    private boolean _checkBoxEnabled;
    private boolean _clickInCheckBoxOnly;
    private java.beans.PropertyChangeListener _modelChangeListener;
    private com.jidesoft.swing.TristateCheckBox _checkBox;
    private boolean _selectPartialOnToggling;
    private javax.swing.tree.TreeCellRenderer _defaultRenderer;

    public void <init>()
    {
        com.jidesoft.swing.CheckBoxTree r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        specialinvoke r0.<javax.swing.JTree: void <init>()>();

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _checkBoxEnabled> = 1;

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _clickInCheckBoxOnly> = 1;

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _selectPartialOnToggling> = 1;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: void init()>();

        return;
    }

    public void <init>(java.lang.Object[])
    {
        java.lang.Object[] r1;
        com.jidesoft.swing.CheckBoxTree r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        r1 := @parameter0: java.lang.Object[];

        specialinvoke r0.<javax.swing.JTree: void <init>(java.lang.Object[])>(r1);

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _checkBoxEnabled> = 1;

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _clickInCheckBoxOnly> = 1;

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _selectPartialOnToggling> = 1;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: void init()>();

        return;
    }

    public void <init>(java.util.Vector)
    {
        java.util.Vector r1;
        com.jidesoft.swing.CheckBoxTree r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        r1 := @parameter0: java.util.Vector;

        specialinvoke r0.<javax.swing.JTree: void <init>(java.util.Vector)>(r1);

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _checkBoxEnabled> = 1;

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _clickInCheckBoxOnly> = 1;

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _selectPartialOnToggling> = 1;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: void init()>();

        return;
    }

    public void <init>(java.util.Hashtable)
    {
        com.jidesoft.swing.CheckBoxTree r0;
        java.util.Hashtable r1;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        r1 := @parameter0: java.util.Hashtable;

        specialinvoke r0.<javax.swing.JTree: void <init>(java.util.Hashtable)>(r1);

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _checkBoxEnabled> = 1;

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _clickInCheckBoxOnly> = 1;

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _selectPartialOnToggling> = 1;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: void init()>();

        return;
    }

    public void <init>(javax.swing.tree.TreeNode)
    {
        com.jidesoft.swing.CheckBoxTree r0;
        javax.swing.tree.TreeNode r1;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        r1 := @parameter0: javax.swing.tree.TreeNode;

        specialinvoke r0.<javax.swing.JTree: void <init>(javax.swing.tree.TreeNode)>(r1);

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _checkBoxEnabled> = 1;

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _clickInCheckBoxOnly> = 1;

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _selectPartialOnToggling> = 1;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: void init()>();

        return;
    }

    public void <init>(javax.swing.tree.TreeNode, boolean)
    {
        com.jidesoft.swing.CheckBoxTree r0;
        javax.swing.tree.TreeNode r1;
        boolean z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        r1 := @parameter0: javax.swing.tree.TreeNode;

        z0 := @parameter1: boolean;

        specialinvoke r0.<javax.swing.JTree: void <init>(javax.swing.tree.TreeNode,boolean)>(r1, z0);

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _checkBoxEnabled> = 1;

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _clickInCheckBoxOnly> = 1;

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _selectPartialOnToggling> = 1;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: void init()>();

        return;
    }

    public void <init>(javax.swing.tree.TreeModel)
    {
        com.jidesoft.swing.CheckBoxTree r0;
        javax.swing.tree.TreeModel r1;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        r1 := @parameter0: javax.swing.tree.TreeModel;

        specialinvoke r0.<javax.swing.JTree: void <init>(javax.swing.tree.TreeModel)>(r1);

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _checkBoxEnabled> = 1;

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _clickInCheckBoxOnly> = 1;

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _selectPartialOnToggling> = 1;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: void init()>();

        return;
    }

    protected void init()
    {
        com.jidesoft.swing.CheckBoxTree r0;
        javax.swing.tree.TreeModel $r1;
        java.beans.PropertyChangeListener $r6, $r7, $r8;
        com.jidesoft.swing.CheckBoxTreeSelectionModel $r2, $r3, $r5;
        com.jidesoft.swing.CheckBoxTree$ModelPropertyChangeListener $r9;
        com.jidesoft.swing.CheckBoxTree$Handler $r4;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: javax.swing.tree.TreeModel getModel()>();

        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeSelectionModel createCheckBoxTreeSelectionModel(javax.swing.tree.TreeModel)>($r1);

        r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeSelectionModel _checkBoxTreeSelectionModel> = $r2;

        $r3 = r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeSelectionModel _checkBoxTreeSelectionModel>;

        virtualinvoke $r3.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void setTree(com.jidesoft.swing.CheckBoxTree)>(r0);

        $r4 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTree$Handler createHandler()>();

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void insertMouseListener(java.awt.Component,java.awt.event.MouseListener,int)>(r0, $r4, 0);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: void addKeyListener(java.awt.event.KeyListener)>($r4);

        $r5 = r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeSelectionModel _checkBoxTreeSelectionModel>;

        virtualinvoke $r5.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void addTreeSelectionListener(javax.swing.event.TreeSelectionListener)>($r4);

        $r6 = r0.<com.jidesoft.swing.CheckBoxTree: java.beans.PropertyChangeListener _modelChangeListener>;

        if $r6 != null goto label1;

        $r9 = new com.jidesoft.swing.CheckBoxTree$ModelPropertyChangeListener;

        specialinvoke $r9.<com.jidesoft.swing.CheckBoxTree$ModelPropertyChangeListener: void <init>(com.jidesoft.swing.CheckBoxTree,com.jidesoft.swing.CheckBoxTree$1)>(r0, null);

        r0.<com.jidesoft.swing.CheckBoxTree: java.beans.PropertyChangeListener _modelChangeListener> = $r9;

     label1:
        $r7 = r0.<com.jidesoft.swing.CheckBoxTree: java.beans.PropertyChangeListener _modelChangeListener>;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>("selectionModel", $r7);

        $r8 = r0.<com.jidesoft.swing.CheckBoxTree: java.beans.PropertyChangeListener _modelChangeListener>;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>("model", $r8);

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTree: void updateRowMapper()>();

        return;
    }

    protected com.jidesoft.swing.CheckBoxTreeSelectionModel createCheckBoxTreeSelectionModel(javax.swing.tree.TreeModel)
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel $r0;
        com.jidesoft.swing.CheckBoxTree r2;
        javax.swing.tree.TreeModel r1;

        r2 := @this: com.jidesoft.swing.CheckBoxTree;

        r1 := @parameter0: javax.swing.tree.TreeModel;

        $r0 = new com.jidesoft.swing.CheckBoxTreeSelectionModel;

        specialinvoke $r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void <init>(javax.swing.tree.TreeModel)>(r1);

        return $r0;
    }

    private void updateRowMapper()
    {
        com.jidesoft.swing.CheckBoxTree r0;
        com.jidesoft.swing.CheckBoxTreeSelectionModel $r1;
        javax.swing.tree.TreeSelectionModel $r2;
        javax.swing.tree.RowMapper $r3;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        $r1 = r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeSelectionModel _checkBoxTreeSelectionModel>;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: javax.swing.tree.TreeSelectionModel getSelectionModel()>();

        $r3 = interfaceinvoke $r2.<javax.swing.tree.TreeSelectionModel: javax.swing.tree.RowMapper getRowMapper()>();

        virtualinvoke $r1.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void setRowMapper(javax.swing.tree.RowMapper)>($r3);

        return;
    }

    public javax.swing.tree.TreeCellRenderer getCellRenderer()
    {
        javax.swing.tree.TreeCellRenderer $r1, r6;
        com.jidesoft.swing.CheckBoxTreeCellRenderer $r2, $r3, $r4, $r5;
        com.jidesoft.swing.CheckBoxTree r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: javax.swing.tree.TreeCellRenderer getActualCellRenderer()>();

        r6 = $r1;

        if $r1 != null goto label1;

        r6 = specialinvoke r0.<com.jidesoft.swing.CheckBoxTree: javax.swing.tree.TreeCellRenderer getDefaultRenderer()>();

     label1:
        $r2 = r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeCellRenderer _treeCellRenderer>;

        if $r2 != null goto label2;

        $r5 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeCellRenderer createCellRenderer(javax.swing.tree.TreeCellRenderer)>(r6);

        r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeCellRenderer _treeCellRenderer> = $r5;

        goto label3;

     label2:
        $r3 = r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeCellRenderer _treeCellRenderer>;

        virtualinvoke $r3.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void setActualTreeRenderer(javax.swing.tree.TreeCellRenderer)>(r6);

     label3:
        $r4 = r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeCellRenderer _treeCellRenderer>;

        return $r4;
    }

    private javax.swing.tree.TreeCellRenderer getDefaultRenderer()
    {
        javax.swing.tree.TreeCellRenderer $r1, $r2;
        com.jidesoft.swing.CheckBoxTree r0;
        javax.swing.tree.DefaultTreeCellRenderer $r3;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        $r1 = r0.<com.jidesoft.swing.CheckBoxTree: javax.swing.tree.TreeCellRenderer _defaultRenderer>;

        if $r1 != null goto label1;

        $r3 = new javax.swing.tree.DefaultTreeCellRenderer;

        specialinvoke $r3.<javax.swing.tree.DefaultTreeCellRenderer: void <init>()>();

        r0.<com.jidesoft.swing.CheckBoxTree: javax.swing.tree.TreeCellRenderer _defaultRenderer> = $r3;

     label1:
        $r2 = r0.<com.jidesoft.swing.CheckBoxTree: javax.swing.tree.TreeCellRenderer _defaultRenderer>;

        return $r2;
    }

    public javax.swing.tree.TreeCellRenderer getActualCellRenderer()
    {
        javax.swing.tree.TreeCellRenderer $r2, $r4;
        com.jidesoft.swing.CheckBoxTreeCellRenderer $r1, $r3;
        com.jidesoft.swing.CheckBoxTree r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        $r1 = r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeCellRenderer _treeCellRenderer>;

        if $r1 == null goto label1;

        $r3 = r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeCellRenderer _treeCellRenderer>;

        $r4 = virtualinvoke $r3.<com.jidesoft.swing.CheckBoxTreeCellRenderer: javax.swing.tree.TreeCellRenderer getActualTreeRenderer()>();

        return $r4;

     label1:
        $r2 = specialinvoke r0.<javax.swing.JTree: javax.swing.tree.TreeCellRenderer getCellRenderer()>();

        return $r2;
    }

    public void setCellRenderer(javax.swing.tree.TreeCellRenderer)
    {
        javax.swing.tree.TreeCellRenderer r3;
        com.jidesoft.swing.CheckBoxTreeCellRenderer $r1, $r2;
        com.jidesoft.swing.CheckBoxTree r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        r3 := @parameter0: javax.swing.tree.TreeCellRenderer;

        if r3 != null goto label1;

        r3 = specialinvoke r0.<com.jidesoft.swing.CheckBoxTree: javax.swing.tree.TreeCellRenderer getDefaultRenderer()>();

     label1:
        specialinvoke r0.<javax.swing.JTree: void setCellRenderer(javax.swing.tree.TreeCellRenderer)>(r3);

        $r1 = r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeCellRenderer _treeCellRenderer>;

        if $r1 == null goto label2;

        $r2 = r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeCellRenderer _treeCellRenderer>;

        virtualinvoke $r2.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void setActualTreeRenderer(javax.swing.tree.TreeCellRenderer)>(r3);

     label2:
        return;
    }

    protected com.jidesoft.swing.CheckBoxTreeCellRenderer createCellRenderer(javax.swing.tree.TreeCellRenderer)
    {
        javax.swing.tree.TreeCellRenderer r1;
        com.jidesoft.swing.CheckBoxTree$CellRendererPropertyChangeListener $r4;
        com.jidesoft.swing.CheckBoxTreeCellRenderer $r0;
        com.jidesoft.swing.CheckBoxTree r2;
        com.jidesoft.swing.TristateCheckBox $r3;

        r2 := @this: com.jidesoft.swing.CheckBoxTree;

        r1 := @parameter0: javax.swing.tree.TreeCellRenderer;

        $r0 = new com.jidesoft.swing.CheckBoxTreeCellRenderer;

        $r3 = virtualinvoke r2.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.TristateCheckBox getCheckBox()>();

        specialinvoke $r0.<com.jidesoft.swing.CheckBoxTreeCellRenderer: void <init>(javax.swing.tree.TreeCellRenderer,com.jidesoft.swing.TristateCheckBox)>(r1, $r3);

        $r4 = new com.jidesoft.swing.CheckBoxTree$CellRendererPropertyChangeListener;

        specialinvoke $r4.<com.jidesoft.swing.CheckBoxTree$CellRendererPropertyChangeListener: void <init>(com.jidesoft.swing.CheckBoxTree,com.jidesoft.swing.CheckBoxTreeCellRenderer)>(r2, $r0);

        virtualinvoke r2.<com.jidesoft.swing.CheckBoxTree: void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>("cellRenderer", $r4);

        return $r0;
    }

    protected com.jidesoft.swing.CheckBoxTree$Handler createHandler()
    {
        com.jidesoft.swing.CheckBoxTree r1;
        com.jidesoft.swing.CheckBoxTree$Handler $r0;

        r1 := @this: com.jidesoft.swing.CheckBoxTree;

        $r0 = new com.jidesoft.swing.CheckBoxTree$Handler;

        specialinvoke $r0.<com.jidesoft.swing.CheckBoxTree$Handler: void <init>(com.jidesoft.swing.CheckBoxTree)>(r1);

        return $r0;
    }

    public com.jidesoft.swing.TristateCheckBox getCheckBox()
    {
        com.jidesoft.swing.CheckBoxTree r0;
        com.jidesoft.swing.TristateCheckBox $r1;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        $r1 = r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.TristateCheckBox _checkBox>;

        return $r1;
    }

    public void setCheckBox(com.jidesoft.swing.TristateCheckBox)
    {
        com.jidesoft.swing.CheckBoxTree r0;
        com.jidesoft.swing.TristateCheckBox r1, $r2;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        r1 := @parameter0: com.jidesoft.swing.TristateCheckBox;

        $r2 = r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.TristateCheckBox _checkBox>;

        if $r2 == r1 goto label1;

        r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.TristateCheckBox _checkBox> = r1;

        r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeCellRenderer _treeCellRenderer> = null;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: void revalidate()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: void repaint()>();

     label1:
        return;
    }

    public boolean isSelectPartialOnToggling()
    {
        com.jidesoft.swing.CheckBoxTree r0;
        java.lang.Class $r2;
        javax.swing.tree.TreeSelectionModel $r1;
        java.lang.String $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        $z0 = r0.<com.jidesoft.swing.CheckBoxTree: boolean _selectPartialOnToggling>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.jidesoft.swing.CheckBoxTree: javax.swing.tree.TreeSelectionModel selectionModel>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("Filter");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public void setSelectPartialOnToggling(boolean)
    {
        com.jidesoft.swing.CheckBoxTree r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _selectPartialOnToggling> = z0;

        return;
    }

    public javax.swing.tree.TreePath getNextMatch(java.lang.String, int, javax.swing.text.Position$Bias)
    {
        com.jidesoft.swing.CheckBoxTree r0;
        javax.swing.text.Position$Bias r2;
        int i0;
        java.lang.String r1;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: javax.swing.text.Position$Bias;

        return null;
    }

    public com.jidesoft.swing.CheckBoxTreeSelectionModel getCheckBoxTreeSelectionModel()
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel $r1;
        com.jidesoft.swing.CheckBoxTree r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        $r1 = r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeSelectionModel _checkBoxTreeSelectionModel>;

        return $r1;
    }

    public boolean isCheckBoxEnabled()
    {
        com.jidesoft.swing.CheckBoxTree r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        $z0 = r0.<com.jidesoft.swing.CheckBoxTree: boolean _checkBoxEnabled>;

        return $z0;
    }

    public void setCheckBoxEnabled(boolean)
    {
        com.jidesoft.swing.CheckBoxTree r0;
        java.lang.Boolean r1, $r2, $r3;
        boolean z0, $z1, $z2;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.jidesoft.swing.CheckBoxTree: boolean _checkBoxEnabled>;

        if z0 == $z1 goto label5;

        $z2 = r0.<com.jidesoft.swing.CheckBoxTree: boolean _checkBoxEnabled>;

        if $z2 == 0 goto label1;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label2;

     label1:
        $r2 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label2:
        r1 = $r2;

        if z0 == 0 goto label3;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label4;

     label3:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label4:
        r0.<com.jidesoft.swing.CheckBoxTree: boolean _checkBoxEnabled> = z0;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("checkBoxEnabled", r1, $r3);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: void repaint()>();

     label5:
        return;
    }

    public boolean isCheckBoxEnabled(javax.swing.tree.TreePath)
    {
        javax.swing.tree.TreePath r1;
        com.jidesoft.swing.CheckBoxTree r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        r1 := @parameter0: javax.swing.tree.TreePath;

        return 1;
    }

    public boolean isCheckBoxVisible(javax.swing.tree.TreePath)
    {
        javax.swing.tree.TreePath r1;
        com.jidesoft.swing.CheckBoxTree r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        r1 := @parameter0: javax.swing.tree.TreePath;

        return 1;
    }

    public boolean isDigIn()
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel $r1;
        com.jidesoft.swing.CheckBoxTree r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeSelectionModel getCheckBoxTreeSelectionModel()>();

        $z0 = virtualinvoke $r1.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isDigIn()>();

        return $z0;
    }

    public void setDigIn(boolean)
    {
        com.jidesoft.swing.CheckBoxTree r0;
        com.jidesoft.swing.CheckBoxTreeSelectionModel $r1;
        boolean $z0, z1;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: boolean isDigIn()>();

        if $z0 == z1 goto label1;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeSelectionModel getCheckBoxTreeSelectionModel()>();

        virtualinvoke $r1.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void setDigIn(boolean)>(z1);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: void firePropertyChange(java.lang.String,boolean,boolean)>("digIn", $z0, z1);

     label1:
        return;
    }

    public boolean isClickInCheckBoxOnly()
    {
        com.jidesoft.swing.CheckBoxTree r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        $z0 = r0.<com.jidesoft.swing.CheckBoxTree: boolean _clickInCheckBoxOnly>;

        return $z0;
    }

    public void setClickInCheckBoxOnly(boolean)
    {
        com.jidesoft.swing.CheckBoxTree r0;
        boolean z0, $z1, z2, $z3;

        r0 := @this: com.jidesoft.swing.CheckBoxTree;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.jidesoft.swing.CheckBoxTree: boolean _clickInCheckBoxOnly>;

        if z0 == $z1 goto label1;

        z2 = r0.<com.jidesoft.swing.CheckBoxTree: boolean _clickInCheckBoxOnly>;

        r0.<com.jidesoft.swing.CheckBoxTree: boolean _clickInCheckBoxOnly> = z0;

        $z3 = r0.<com.jidesoft.swing.CheckBoxTree: boolean _clickInCheckBoxOnly>;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTree: void firePropertyChange(java.lang.String,boolean,boolean)>("clickInCheckBoxOnly", z2, $z3);

     label1:
        return;
    }

    static void access$100(com.jidesoft.swing.CheckBoxTree)
    {
        com.jidesoft.swing.CheckBoxTree r0;

        r0 := @parameter0: com.jidesoft.swing.CheckBoxTree;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTree: void updateRowMapper()>();

        return;
    }

    static com.jidesoft.swing.CheckBoxTreeSelectionModel access$200(com.jidesoft.swing.CheckBoxTree)
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel $r1;
        com.jidesoft.swing.CheckBoxTree r0;

        r0 := @parameter0: com.jidesoft.swing.CheckBoxTree;

        $r1 = r0.<com.jidesoft.swing.CheckBoxTree: com.jidesoft.swing.CheckBoxTreeSelectionModel _checkBoxTreeSelectionModel>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.jidesoft.swing.CheckBoxTree: java.lang.String PROPERTY_DIG_IN> = "digIn";

        <com.jidesoft.swing.CheckBoxTree: java.lang.String PROPERTY_CLICK_IN_CHECKBOX_ONLY> = "clickInCheckBoxOnly";

        <com.jidesoft.swing.CheckBoxTree: java.lang.String PROPERTY_CHECKBOX_ENABLED> = "checkBoxEnabled";

        return;
    }
}
