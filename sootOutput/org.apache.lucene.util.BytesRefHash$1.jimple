class org.apache.lucene.util.BytesRefHash$1 extends org.apache.lucene.util.SorterTemplate
{
    private final org.apache.lucene.util.BytesRef pivot;
    private final org.apache.lucene.util.BytesRef scratch1;
    private final org.apache.lucene.util.BytesRef scratch2;
    static final boolean $assertionsDisabled;
    final int[] val$compact;
    final java.util.Comparator val$comp;
    final org.apache.lucene.util.BytesRefHash this$0;

    void <init>(org.apache.lucene.util.BytesRefHash, int[], java.util.Comparator)
    {
        int[] r2;
        org.apache.lucene.util.BytesRef $r4, $r5, $r6;
        org.apache.lucene.util.BytesRefHash r1;
        org.apache.lucene.util.BytesRefHash$1 r0;
        java.util.Comparator r3;

        r0 := @this: org.apache.lucene.util.BytesRefHash$1;

        r1 := @parameter0: org.apache.lucene.util.BytesRefHash;

        r2 := @parameter1: int[];

        r3 := @parameter2: java.util.Comparator;

        r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRefHash this$0> = r1;

        r0.<org.apache.lucene.util.BytesRefHash$1: int[] val$compact> = r2;

        r0.<org.apache.lucene.util.BytesRefHash$1: java.util.Comparator val$comp> = r3;

        specialinvoke r0.<org.apache.lucene.util.SorterTemplate: void <init>()>();

        $r4 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r4.<org.apache.lucene.util.BytesRef: void <init>()>();

        r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRef pivot> = $r4;

        $r5 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r5.<org.apache.lucene.util.BytesRef: void <init>()>();

        r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRef scratch1> = $r5;

        $r6 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r6.<org.apache.lucene.util.BytesRef: void <init>()>();

        r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRef scratch2> = $r6;

        return;
    }

    protected void swap(int, int)
    {
        org.apache.lucene.util.BytesRefHash$1 r0;
        int[] $r1, $r2, $r3, $r4;
        int i0, i1, i2, $i3;

        r0 := @this: org.apache.lucene.util.BytesRefHash$1;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.util.BytesRefHash$1: int[] val$compact>;

        i1 = $r1[i0];

        $r3 = r0.<org.apache.lucene.util.BytesRefHash$1: int[] val$compact>;

        $r2 = r0.<org.apache.lucene.util.BytesRefHash$1: int[] val$compact>;

        $i3 = $r2[i2];

        $r3[i0] = $i3;

        $r4 = r0.<org.apache.lucene.util.BytesRefHash$1: int[] val$compact>;

        $r4[i2] = i1;

        return;
    }

    protected int compare(int, int)
    {
        org.apache.lucene.util.BytesRefHash $r3, $r4, $r8, $r9, $r16, $r19;
        java.lang.AssertionError $r18;
        org.apache.lucene.util.ByteBlockPool $r7, $r12;
        int[] $r1, $r2, $r5, $r10, $r17, $r20;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;
        org.apache.lucene.util.BytesRef $r6, $r11, $r13, $r14;
        org.apache.lucene.util.BytesRefHash$1 r0;
        java.util.Comparator $r15;

        r0 := @this: org.apache.lucene.util.BytesRefHash$1;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.util.BytesRefHash$1: int[] val$compact>;

        i1 = $r1[i0];

        $r2 = r0.<org.apache.lucene.util.BytesRefHash$1: int[] val$compact>;

        i3 = $r2[i2];

        $z0 = <org.apache.lucene.util.BytesRefHash$1: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r16 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRefHash this$0>;

        $r17 = $r16.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i7 = lengthof $r17;

        if $i7 <= i1 goto label1;

        $r19 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRefHash this$0>;

        $r20 = $r19.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i8 = lengthof $r20;

        if $i8 > i3 goto label2;

     label1:
        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label2:
        $r3 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRefHash this$0>;

        $r7 = $r3.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.ByteBlockPool pool>;

        $r6 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRef scratch1>;

        $r4 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRefHash this$0>;

        $r5 = $r4.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i4 = $r5[i1];

        virtualinvoke $r7.<org.apache.lucene.util.ByteBlockPool: void setBytesRef(org.apache.lucene.util.BytesRef,int)>($r6, $i4);

        $r8 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRefHash this$0>;

        $r12 = $r8.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.ByteBlockPool pool>;

        $r11 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRef scratch2>;

        $r9 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRefHash this$0>;

        $r10 = $r9.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i5 = $r10[i3];

        virtualinvoke $r12.<org.apache.lucene.util.ByteBlockPool: void setBytesRef(org.apache.lucene.util.BytesRef,int)>($r11, $i5);

        $r15 = r0.<org.apache.lucene.util.BytesRefHash$1: java.util.Comparator val$comp>;

        $r14 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRef scratch1>;

        $r13 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRef scratch2>;

        $i6 = interfaceinvoke $r15.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r14, $r13);

        return $i6;
    }

    protected void setPivot(int)
    {
        org.apache.lucene.util.BytesRef $r5;
        org.apache.lucene.util.BytesRefHash $r2, $r3, $r7;
        org.apache.lucene.util.BytesRefHash$1 r0;
        java.lang.AssertionError $r9;
        org.apache.lucene.util.ByteBlockPool $r6;
        int[] $r1, $r4, $r8;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.BytesRefHash$1;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.BytesRefHash$1: int[] val$compact>;

        i1 = $r1[i0];

        $z0 = <org.apache.lucene.util.BytesRefHash$1: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r7 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRefHash this$0>;

        $r8 = $r7.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i3 = lengthof $r8;

        if $i3 > i1 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $r2 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRefHash this$0>;

        $r6 = $r2.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.ByteBlockPool pool>;

        $r5 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRef pivot>;

        $r3 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRefHash this$0>;

        $r4 = $r3.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i2 = $r4[i1];

        virtualinvoke $r6.<org.apache.lucene.util.ByteBlockPool: void setBytesRef(org.apache.lucene.util.BytesRef,int)>($r5, $i2);

        return;
    }

    protected int comparePivot(int)
    {
        org.apache.lucene.util.BytesRefHash $r2, $r3, $r10;
        java.lang.AssertionError $r12;
        org.apache.lucene.util.ByteBlockPool $r6;
        int[] $r1, $r4, $r11;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        org.apache.lucene.util.BytesRef $r5, $r7, $r8;
        org.apache.lucene.util.BytesRefHash$1 r0;
        java.util.Comparator $r9;

        r0 := @this: org.apache.lucene.util.BytesRefHash$1;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.BytesRefHash$1: int[] val$compact>;

        i1 = $r1[i0];

        $z0 = <org.apache.lucene.util.BytesRefHash$1: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r10 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRefHash this$0>;

        $r11 = $r10.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i4 = lengthof $r11;

        if $i4 > i1 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $r2 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRefHash this$0>;

        $r6 = $r2.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.ByteBlockPool pool>;

        $r5 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRef scratch2>;

        $r3 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRefHash this$0>;

        $r4 = $r3.<org.apache.lucene.util.BytesRefHash: int[] bytesStart>;

        $i2 = $r4[i1];

        virtualinvoke $r6.<org.apache.lucene.util.ByteBlockPool: void setBytesRef(org.apache.lucene.util.BytesRef,int)>($r5, $i2);

        $r9 = r0.<org.apache.lucene.util.BytesRefHash$1: java.util.Comparator val$comp>;

        $r8 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRef pivot>;

        $r7 = r0.<org.apache.lucene.util.BytesRefHash$1: org.apache.lucene.util.BytesRef scratch2>;

        $i3 = interfaceinvoke $r9.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r8, $r7);

        return $i3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/BytesRefHash;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.BytesRefHash$1: boolean $assertionsDisabled> = $z1;

        return;
    }
}
