class com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{
    private java.util.Deque tracker;

    public void <init>(java.util.Deque)
    {
        java.util.Deque r1;
        com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph;

        r1 := @parameter0: java.util.Deque;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph: java.util.Deque tracker> = r1;

        return;
    }

    private com.hp.hpl.jena.graph.Node getNode()
    {
        com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph r0;
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.algebra.AlgebraQuad$QuadSlot $r3;
        com.hp.hpl.jena.graph.Node $r4;
        java.util.Deque $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph: java.util.Deque tracker>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.lang.Object peek()>();

        $r3 = (com.hp.hpl.jena.sparql.algebra.AlgebraQuad$QuadSlot) $r2;

        $r4 = $r3.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$QuadSlot: com.hp.hpl.jena.graph.Node rewriteGraphName>;

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGraph, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.AlgebraQuad$QuadSlot r3;
        com.hp.hpl.jena.graph.Node r4, r5, $r10;
        java.util.Deque $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r11;
        com.hp.hpl.jena.sparql.algebra.Op r14;
        boolean $z0, $z1, $z2, $z3, z4;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r9;
        com.hp.hpl.jena.sparql.core.BasicPattern $r13;
        com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames $r8;
        com.hp.hpl.jena.sparql.core.Var $r6;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r12;
        com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph r0;
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.expr.ExprVar $r7;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph;

        r9 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r14 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        z4 = 0;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph: java.util.Deque tracker>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.lang.Object peek()>();

        r3 = (com.hp.hpl.jena.sparql.algebra.AlgebraQuad$QuadSlot) $r2;

        r4 = r3.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$QuadSlot: com.hp.hpl.jena.graph.Node actualGraphName>;

        r5 = r3.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$QuadSlot: com.hp.hpl.jena.graph.Node rewriteGraphName>;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpBGP: boolean isBGP(com.hp.hpl.jena.sparql.algebra.Op)>(r14);

        if $z0 == 0 goto label1;

        $r12 = (com.hp.hpl.jena.sparql.algebra.op.OpBGP) r14;

        $r13 = virtualinvoke $r12.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $z3 = virtualinvoke $r13.<com.hp.hpl.jena.sparql.core.BasicPattern: boolean isEmpty()>();

        if $z3 == 0 goto label2;

        z4 = 1;

        goto label2;

     label1:
        $z1 = r14 instanceof com.hp.hpl.jena.sparql.algebra.op.OpTable;

        if $z1 == 0 goto label2;

        $r11 = (com.hp.hpl.jena.sparql.algebra.op.OpTable) r14;

        $z2 = virtualinvoke $r11.<com.hp.hpl.jena.sparql.algebra.op.OpTable: boolean isJoinIdentity()>();

        if $z2 == 0 goto label2;

        z4 = 1;

     label2:
        if z4 == 0 goto label3;

        $r8 = new com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames;

        $r10 = virtualinvoke r9.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        specialinvoke $r8.<com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames: void <init>(com.hp.hpl.jena.graph.Node)>($r10);

        return $r8;

     label3:
        if r4 == r5 goto label4;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r4);

        $r7 = new com.hp.hpl.jena.sparql.expr.ExprVar;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.expr.ExprVar: void <init>(com.hp.hpl.jena.graph.Node)>(r5);

        r14 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op assign(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r14, $r6, $r7);

     label4:
        return r14;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPropFunc, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc $r5, r9;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph $r2;
        com.hp.hpl.jena.graph.Node $r4, $r6;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg $r7, $r8;
        com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph r3;
        com.hp.hpl.jena.sparql.algebra.Op $r0, r1;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph;

        r9 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = virtualinvoke r9.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        if $r0 == r1 goto label1;

        $r5 = new com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        $r6 = virtualinvoke r9.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.graph.Node getProperty()>();

        $r7 = virtualinvoke r9.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg getSubjectArgs()>();

        $r8 = virtualinvoke r9.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg getObjectArgs()>();

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.algebra.Op)>($r6, $r7, $r8, r1);

        r9 = $r5;

     label1:
        $r2 = new com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        $r4 = specialinvoke r3.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph: com.hp.hpl.jena.graph.Node getNode()>();

        specialinvoke $r2.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.algebra.Op)>($r4, r9);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPath)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpPath r3;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph $r0;
        com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph r1;
        com.hp.hpl.jena.graph.Node $r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPath;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        $r2 = specialinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph: com.hp.hpl.jena.graph.Node getNode()>();

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.algebra.Op)>($r2, r3);

        return $r0;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r3;
        com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph r1;
        com.hp.hpl.jena.sparql.core.BasicPattern $r4;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern $r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r2 = specialinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph: com.hp.hpl.jena.graph.Node getNode()>();

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern)>($r2, $r4);

        return $r0;
    }
}
