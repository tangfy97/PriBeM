public class org.slf4j.impl.Log4jLoggerFactory extends java.lang.Object implements org.slf4j.ILoggerFactory
{
    java.util.Map loggerMap;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.slf4j.impl.Log4jLoggerFactory r0;

        r0 := @this: org.slf4j.impl.Log4jLoggerFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.slf4j.impl.Log4jLoggerFactory: java.util.Map loggerMap> = $r1;

        return;
    }

    public org.slf4j.Logger getLogger(java.lang.String)
    {
        java.lang.Throwable $r6;
        org.slf4j.Logger r7;
        org.slf4j.impl.Log4jLoggerAdapter $r4;
        org.apache.log4j.Logger r8;
        org.slf4j.impl.Log4jLoggerFactory r0;
        java.util.Map $r2, $r5;
        java.lang.Object $r3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.slf4j.impl.Log4jLoggerFactory;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r2 = r0.<org.slf4j.impl.Log4jLoggerFactory: java.util.Map loggerMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r7 = (org.slf4j.Logger) $r3;

        if r7 != null goto label4;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ROOT");

        if $z0 == 0 goto label2;

        r8 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getRootLogger()>();

        goto label3;

     label2:
        r8 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.String)>(r1);

     label3:
        $r4 = new org.slf4j.impl.Log4jLoggerAdapter;

        specialinvoke $r4.<org.slf4j.impl.Log4jLoggerAdapter: void <init>(org.apache.log4j.Logger)>(r8);

        r7 = $r4;

        $r5 = r0.<org.slf4j.impl.Log4jLoggerFactory: java.util.Map loggerMap>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label4:
        exitmonitor r0;

     label5:
        goto label8;

     label6:
        $r6 := @caughtexception;

        exitmonitor r0;

     label7:
        throw $r6;

     label8:
        return r7;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }
}
