public class com.mycila.inject.internal.asm.commons.JSRInlinerAdapter extends com.mycila.inject.internal.asm.tree.MethodNode implements com.mycila.inject.internal.asm.Opcodes
{
    private final com.mycila.inject.internal.asm.MethodVisitor mv;
    private final java.util.Map subroutineHeads;
    private final com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine mainSubroutine;
    final java.util.BitSet dualCitizens;

    public void <init>(com.mycila.inject.internal.asm.MethodVisitor, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        java.lang.String[] r4;
        java.util.HashMap $r5;
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine $r6;
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor r8;
        int i0;
        java.lang.String r1, r2, r3;
        java.util.BitSet $r7;

        r0 := @this: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter;

        r8 := @parameter0: com.mycila.inject.internal.asm.MethodVisitor;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String[];

        specialinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i0, r1, r2, r3, r4);

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: java.util.Map subroutineHeads> = $r5;

        $r6 = new com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine;

        specialinvoke $r6.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine: void <init>()>();

        r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine mainSubroutine> = $r6;

        $r7 = new java.util.BitSet;

        specialinvoke $r7.<java.util.BitSet: void <init>()>();

        r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: java.util.BitSet dualCitizens> = $r7;

        r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.MethodVisitor mv> = r8;

        return;
    }

    public void visitJumpInsn(int, com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r3;
        com.mycila.inject.internal.asm.tree.InsnList $r2;
        com.mycila.inject.internal.asm.tree.JumpInsnNode $r4;
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine $r7;
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter r0;
        com.mycila.inject.internal.asm.tree.LabelNode r5;
        java.util.Map $r6, $r8;
        int i0;
        com.mycila.inject.internal.asm.Label r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: com.mycila.inject.internal.asm.Label;

        specialinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(i0, r1);

        $r2 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode getLast()>();

        $r4 = (com.mycila.inject.internal.asm.tree.JumpInsnNode) $r3;

        r5 = $r4.<com.mycila.inject.internal.asm.tree.JumpInsnNode: com.mycila.inject.internal.asm.tree.LabelNode label>;

        if i0 != 168 goto label1;

        $r6 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: java.util.Map subroutineHeads>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        if $z0 != 0 goto label1;

        $r8 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: java.util.Map subroutineHeads>;

        $r7 = new com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine;

        specialinvoke $r7.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine: void <init>()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r7);

     label1:
        return;
    }

    public void visitEnd()
    {
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2, $r3;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: java.util.Map subroutineHeads>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: void markSubroutines()>();

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: void emitCode()>();

     label1:
        $r2 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r2 == null goto label2;

        $r3 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: void accept(com.mycila.inject.internal.asm.MethodVisitor)>($r3);

     label2:
        return;
    }

    private void markSubroutines()
    {
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        java.util.Set $r4;
        com.mycila.inject.internal.asm.tree.InsnList $r12;
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine $r2, r11;
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter r1;
        com.mycila.inject.internal.asm.tree.LabelNode r9;
        java.util.Map $r3;
        int $i0;
        java.lang.Object $r6, $r8, $r10;
        java.util.BitSet $r0;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter;

        $r0 = new java.util.BitSet;

        specialinvoke $r0.<java.util.BitSet: void <init>()>();

        $r2 = r1.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine mainSubroutine>;

        specialinvoke r1.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: void markSubroutineWalk(com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine,int,java.util.BitSet)>($r2, 0, $r0);

        $r3 = r1.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: java.util.Map subroutineHeads>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r9 = (com.mycila.inject.internal.asm.tree.LabelNode) $r8;

        $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r11 = (com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine) $r10;

        $r12 = r1.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $i0 = virtualinvoke $r12.<com.mycila.inject.internal.asm.tree.InsnList: int indexOf(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>(r9);

        specialinvoke r1.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: void markSubroutineWalk(com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine,int,java.util.BitSet)>(r11, $i0, $r0);

        goto label1;

     label2:
        return;
    }

    private void markSubroutineWalk(com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine, int, java.util.BitSet)
    {
        com.mycila.inject.internal.asm.tree.InsnList $r8, $r11, $r13;
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter r0;
        com.mycila.inject.internal.asm.tree.LabelNode $r7, $r10, $r12;
        int i0, $i1, $i2, $i3, $i4, $i6;
        boolean $z0, z1, $z2;
        java.util.Iterator $r4;
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine r1;
        java.util.List $r3;
        java.lang.Object $r5;
        com.mycila.inject.internal.asm.tree.TryCatchBlockNode r6;
        java.util.BitSet r2, $r9, $r14;

        r0 := @this: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.BitSet;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: void markSubroutineWalkDFS(com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine,int,java.util.BitSet)>(r1, i0, r2);

        z1 = 1;

     label1:
        if z1 == 0 goto label6;

        z1 = 0;

        $r3 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: java.util.List tryCatchBlocks>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.mycila.inject.internal.asm.tree.TryCatchBlockNode) $r5;

        $r8 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r7 = r6.<com.mycila.inject.internal.asm.tree.TryCatchBlockNode: com.mycila.inject.internal.asm.tree.LabelNode handler>;

        $i1 = virtualinvoke $r8.<com.mycila.inject.internal.asm.tree.InsnList: int indexOf(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r7);

        $r9 = r1.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine: java.util.BitSet instructions>;

        $z0 = virtualinvoke $r9.<java.util.BitSet: boolean get(int)>($i1);

        if $z0 == 0 goto label3;

        goto label2;

     label3:
        $r11 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r10 = r6.<com.mycila.inject.internal.asm.tree.TryCatchBlockNode: com.mycila.inject.internal.asm.tree.LabelNode start>;

        $i2 = virtualinvoke $r11.<com.mycila.inject.internal.asm.tree.InsnList: int indexOf(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r10);

        $r13 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r12 = r6.<com.mycila.inject.internal.asm.tree.TryCatchBlockNode: com.mycila.inject.internal.asm.tree.LabelNode end>;

        $i3 = virtualinvoke $r13.<com.mycila.inject.internal.asm.tree.InsnList: int indexOf(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r12);

        $r14 = r1.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine: java.util.BitSet instructions>;

        $i4 = virtualinvoke $r14.<java.util.BitSet: int nextSetBit(int)>($i2);

        $i6 = (int) -1;

        if $i4 == $i6 goto label4;

        if $i4 >= $i3 goto label4;

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: void markSubroutineWalkDFS(com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine,int,java.util.BitSet)>(r1, $i1, r2);

        z1 = 1;

     label4:
        goto label2;

     label5:
        goto label1;

     label6:
        return;
    }

    private void markSubroutineWalkDFS(com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine, int, java.util.BitSet)
    {
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter r0;
        boolean $z0, $z1;
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r2, $r8;
        java.util.List $r11, $r12, $r17, $r18;
        com.mycila.inject.internal.asm.tree.InsnList $r1, $r7, $r10, $r14, $r16, $r20, $r22;
        com.mycila.inject.internal.asm.tree.JumpInsnNode r24;
        com.mycila.inject.internal.asm.tree.TableSwitchInsnNode r25;
        com.mycila.inject.internal.asm.tree.LabelNode $r9, $r15, $r21, r26, r28;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, i13, i14, $i16, $i18;
        com.mycila.inject.internal.asm.tree.LookupSwitchInsnNode r27;
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine r3;
        java.lang.Object $r13, $r19;
        java.util.BitSet $r4, $r5, r6, $r23;

        r0 := @this: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter;

        r3 := @parameter0: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine;

        i11 := @parameter1: int;

        r6 := @parameter2: java.util.BitSet;

     label01:
        $r1 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode get(int)>(i11);

        $r4 = r3.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine: java.util.BitSet instructions>;

        $z0 = virtualinvoke $r4.<java.util.BitSet: boolean get(int)>(i11);

        if $z0 == 0 goto label02;

        return;

     label02:
        $r5 = r3.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine: java.util.BitSet instructions>;

        virtualinvoke $r5.<java.util.BitSet: void set(int)>(i11);

        $z1 = virtualinvoke r6.<java.util.BitSet: boolean get(int)>(i11);

        if $z1 == 0 goto label03;

        $r23 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: java.util.BitSet dualCitizens>;

        virtualinvoke $r23.<java.util.BitSet: void set(int)>(i11);

     label03:
        virtualinvoke r6.<java.util.BitSet: void set(int)>(i11);

        $i0 = virtualinvoke $r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int getType()>();

        if $i0 != 6 goto label04;

        $i9 = virtualinvoke $r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int getOpcode()>();

        if $i9 == 168 goto label04;

        r24 = (com.mycila.inject.internal.asm.tree.JumpInsnNode) $r2;

        $r22 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r21 = r24.<com.mycila.inject.internal.asm.tree.JumpInsnNode: com.mycila.inject.internal.asm.tree.LabelNode label>;

        $i10 = virtualinvoke $r22.<com.mycila.inject.internal.asm.tree.InsnList: int indexOf(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r21);

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: void markSubroutineWalkDFS(com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine,int,java.util.BitSet)>(r3, $i10, r6);

     label04:
        $i12 = virtualinvoke $r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int getType()>();

        if $i12 != 10 goto label06;

        r25 = (com.mycila.inject.internal.asm.tree.TableSwitchInsnNode) $r2;

        $r16 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r15 = r25.<com.mycila.inject.internal.asm.tree.TableSwitchInsnNode: com.mycila.inject.internal.asm.tree.LabelNode dflt>;

        $i6 = virtualinvoke $r16.<com.mycila.inject.internal.asm.tree.InsnList: int indexOf(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r15);

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: void markSubroutineWalkDFS(com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine,int,java.util.BitSet)>(r3, $i6, r6);

        $r17 = r25.<com.mycila.inject.internal.asm.tree.TableSwitchInsnNode: java.util.List labels>;

        $i7 = interfaceinvoke $r17.<java.util.List: int size()>();

        i13 = $i7 - 1;

     label05:
        if i13 < 0 goto label06;

        $r18 = r25.<com.mycila.inject.internal.asm.tree.TableSwitchInsnNode: java.util.List labels>;

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(i13);

        r26 = (com.mycila.inject.internal.asm.tree.LabelNode) $r19;

        $r20 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $i8 = virtualinvoke $r20.<com.mycila.inject.internal.asm.tree.InsnList: int indexOf(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>(r26);

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: void markSubroutineWalkDFS(com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine,int,java.util.BitSet)>(r3, $i8, r6);

        $i16 = (int) -1;

        i13 = i13 + $i16;

        goto label05;

     label06:
        $i1 = virtualinvoke $r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int getType()>();

        if $i1 != 11 goto label08;

        r27 = (com.mycila.inject.internal.asm.tree.LookupSwitchInsnNode) $r2;

        $r10 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r9 = r27.<com.mycila.inject.internal.asm.tree.LookupSwitchInsnNode: com.mycila.inject.internal.asm.tree.LabelNode dflt>;

        $i3 = virtualinvoke $r10.<com.mycila.inject.internal.asm.tree.InsnList: int indexOf(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r9);

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: void markSubroutineWalkDFS(com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine,int,java.util.BitSet)>(r3, $i3, r6);

        $r11 = r27.<com.mycila.inject.internal.asm.tree.LookupSwitchInsnNode: java.util.List labels>;

        $i4 = interfaceinvoke $r11.<java.util.List: int size()>();

        i14 = $i4 - 1;

     label07:
        if i14 < 0 goto label08;

        $r12 = r27.<com.mycila.inject.internal.asm.tree.LookupSwitchInsnNode: java.util.List labels>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i14);

        r28 = (com.mycila.inject.internal.asm.tree.LabelNode) $r13;

        $r14 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $i5 = virtualinvoke $r14.<com.mycila.inject.internal.asm.tree.InsnList: int indexOf(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>(r28);

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: void markSubroutineWalkDFS(com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine,int,java.util.BitSet)>(r3, $i5, r6);

        $i18 = (int) -1;

        i14 = i14 + $i18;

        goto label07;

     label08:
        $r7 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r8 = virtualinvoke $r7.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode get(int)>(i11);

        $i2 = virtualinvoke $r8.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int getOpcode()>();

        tableswitch($i2)
        {
            case 167: goto label09;
            case 168: goto label10;
            case 169: goto label09;
            case 170: goto label09;
            case 171: goto label09;
            case 172: goto label09;
            case 173: goto label09;
            case 174: goto label09;
            case 175: goto label09;
            case 176: goto label09;
            case 177: goto label09;
            case 178: goto label10;
            case 179: goto label10;
            case 180: goto label10;
            case 181: goto label10;
            case 182: goto label10;
            case 183: goto label10;
            case 184: goto label10;
            case 185: goto label10;
            case 186: goto label10;
            case 187: goto label10;
            case 188: goto label10;
            case 189: goto label10;
            case 190: goto label10;
            case 191: goto label09;
            default: goto label10;
        };

     label09:
        return;

     label10:
        i11 = i11 + 1;

        goto label01;
    }

    private void emitCode()
    {
        com.mycila.inject.internal.asm.tree.InsnList $r4;
        java.util.ArrayList $r5, $r6;
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation $r1, r8;
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine $r3;
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter r2;
        java.lang.Object $r7;
        java.util.LinkedList $r0;
        boolean $z0;

        r2 := @this: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        $r1 = new com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation;

        $r3 = r2.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine mainSubroutine>;

        specialinvoke $r1.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation: void <init>(com.mycila.inject.internal.asm.commons.JSRInlinerAdapter,com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation,com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine)>(r2, null, $r3);

        virtualinvoke $r0.<java.util.LinkedList: boolean add(java.lang.Object)>($r1);

        $r4 = new com.mycila.inject.internal.asm.tree.InsnList;

        specialinvoke $r4.<com.mycila.inject.internal.asm.tree.InsnList: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = virtualinvoke $r0.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r7 = virtualinvoke $r0.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r8 = (com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation) $r7;

        specialinvoke r2.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: void emitSubroutine(com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation,java.util.List,com.mycila.inject.internal.asm.tree.InsnList,java.util.List,java.util.List)>(r8, $r0, $r4, $r5, $r6);

        goto label1;

     label2:
        r2.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.tree.InsnList instructions> = $r4;

        r2.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: java.util.List tryCatchBlocks> = $r5;

        r2.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: java.util.List localVariables> = $r6;

        return;
    }

    private void emitSubroutine(com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation, java.util.List, com.mycila.inject.internal.asm.tree.InsnList, java.util.List, java.util.List)
    {
        java.util.Map $r33;
        java.lang.StringBuffer $r43, $r44, $r45, $r46;
        java.lang.String $r14, $r15, $r16, $r26, $r47;
        java.lang.RuntimeException $r42, $r57;
        com.mycila.inject.internal.asm.tree.InsnNode $r37;
        com.mycila.inject.internal.asm.tree.TryCatchBlockNode $r25, r56;
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter r0;
        boolean $z0, $z1, $z2;
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r28, $r31;
        java.util.List $r2, $r4, r12, r24, r40;
        com.mycila.inject.internal.asm.tree.InsnList $r1, $r27, r30;
        com.mycila.inject.internal.asm.tree.LocalVariableNode $r13, r58;
        com.mycila.inject.internal.asm.tree.JumpInsnNode $r32, $r38, $r41;
        com.mycila.inject.internal.asm.tree.LabelNode $r8, $r9, $r10, $r11, $r18, $r19, $r20, $r21, $r22, $r23, $r36, $r39, $r49, r50, r51, r52, r54;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.util.Iterator $r3, $r5;
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation r7, $r29, $r35, r53;
        com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine $r48, r55;
        java.lang.Object $r6, $r17, $r34;

        r0 := @this: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter;

        r7 := @parameter0: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation;

        r40 := @parameter1: java.util.List;

        r30 := @parameter2: com.mycila.inject.internal.asm.tree.InsnList;

        r24 := @parameter3: java.util.List;

        r12 := @parameter4: java.util.List;

        r50 = null;

        i5 = 0;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $i0 = virtualinvoke $r1.<com.mycila.inject.internal.asm.tree.InsnList: int size()>();

     label01:
        if i5 >= $i0 goto label11;

        $r27 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r28 = virtualinvoke $r27.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode get(int)>(i5);

        $r29 = virtualinvoke r7.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation findOwner(int)>(i5);

        $i2 = virtualinvoke $r28.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int getType()>();

        if $i2 != 7 goto label02;

        r51 = (com.mycila.inject.internal.asm.tree.LabelNode) $r28;

        $r49 = virtualinvoke r7.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation: com.mycila.inject.internal.asm.tree.LabelNode rangeLabel(com.mycila.inject.internal.asm.tree.LabelNode)>(r51);

        if $r49 == r50 goto label10;

        virtualinvoke r30.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r49);

        r50 = $r49;

        goto label10;

     label02:
        if $r29 == r7 goto label03;

        goto label10;

     label03:
        $i3 = virtualinvoke $r28.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int getOpcode()>();

        if $i3 != 169 goto label08;

        r52 = null;

        r53 = r7;

     label04:
        if r53 == null goto label06;

        $r48 = r53.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine subroutine>;

        $z0 = virtualinvoke $r48.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine: boolean ownsInstruction(int)>(i5);

        if $z0 == 0 goto label05;

        r52 = r53.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation: com.mycila.inject.internal.asm.tree.LabelNode returnLabel>;

     label05:
        r53 = r53.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation: com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation previous>;

        goto label04;

     label06:
        if r52 != null goto label07;

        $r42 = new java.lang.RuntimeException;

        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Instruction #");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i5);

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is a RET not owned by any subroutine");

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.RuntimeException: void <init>(java.lang.String)>($r47);

        throw $r42;

     label07:
        $r41 = new com.mycila.inject.internal.asm.tree.JumpInsnNode;

        specialinvoke $r41.<com.mycila.inject.internal.asm.tree.JumpInsnNode: void <init>(int,com.mycila.inject.internal.asm.tree.LabelNode)>(167, r52);

        virtualinvoke r30.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r41);

        goto label10;

     label08:
        $i4 = virtualinvoke $r28.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int getOpcode()>();

        if $i4 != 168 goto label09;

        $r32 = (com.mycila.inject.internal.asm.tree.JumpInsnNode) $r28;

        r54 = $r32.<com.mycila.inject.internal.asm.tree.JumpInsnNode: com.mycila.inject.internal.asm.tree.LabelNode label>;

        $r33 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: java.util.Map subroutineHeads>;

        $r34 = interfaceinvoke $r33.<java.util.Map: java.lang.Object get(java.lang.Object)>(r54);

        r55 = (com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine) $r34;

        $r35 = new com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation;

        specialinvoke $r35.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation: void <init>(com.mycila.inject.internal.asm.commons.JSRInlinerAdapter,com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation,com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Subroutine)>(r0, r7, r55);

        $r36 = virtualinvoke $r35.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation: com.mycila.inject.internal.asm.tree.LabelNode gotoLabel(com.mycila.inject.internal.asm.tree.LabelNode)>(r54);

        $r37 = new com.mycila.inject.internal.asm.tree.InsnNode;

        specialinvoke $r37.<com.mycila.inject.internal.asm.tree.InsnNode: void <init>(int)>(1);

        virtualinvoke r30.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r37);

        $r38 = new com.mycila.inject.internal.asm.tree.JumpInsnNode;

        specialinvoke $r38.<com.mycila.inject.internal.asm.tree.JumpInsnNode: void <init>(int,com.mycila.inject.internal.asm.tree.LabelNode)>(167, $r36);

        virtualinvoke r30.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r38);

        $r39 = $r35.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation: com.mycila.inject.internal.asm.tree.LabelNode returnLabel>;

        virtualinvoke r30.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r39);

        interfaceinvoke r40.<java.util.List: boolean add(java.lang.Object)>($r35);

        goto label10;

     label09:
        $r31 = virtualinvoke $r28.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode clone(java.util.Map)>(r7);

        virtualinvoke r30.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r31);

     label10:
        i5 = i5 + 1;

        goto label01;

     label11:
        $r2 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: java.util.List tryCatchBlocks>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label16;

        $r17 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r56 = (com.mycila.inject.internal.asm.tree.TryCatchBlockNode) $r17;

        $r18 = r56.<com.mycila.inject.internal.asm.tree.TryCatchBlockNode: com.mycila.inject.internal.asm.tree.LabelNode start>;

        $r19 = virtualinvoke r7.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation: com.mycila.inject.internal.asm.tree.LabelNode rangeLabel(com.mycila.inject.internal.asm.tree.LabelNode)>($r18);

        $r20 = r56.<com.mycila.inject.internal.asm.tree.TryCatchBlockNode: com.mycila.inject.internal.asm.tree.LabelNode end>;

        $r21 = virtualinvoke r7.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation: com.mycila.inject.internal.asm.tree.LabelNode rangeLabel(com.mycila.inject.internal.asm.tree.LabelNode)>($r20);

        if $r19 != $r21 goto label13;

        goto label12;

     label13:
        $r22 = r56.<com.mycila.inject.internal.asm.tree.TryCatchBlockNode: com.mycila.inject.internal.asm.tree.LabelNode handler>;

        $r23 = virtualinvoke r7.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation: com.mycila.inject.internal.asm.tree.LabelNode gotoLabel(com.mycila.inject.internal.asm.tree.LabelNode)>($r22);

        if $r19 == null goto label14;

        if $r21 == null goto label14;

        if $r23 != null goto label15;

     label14:
        $r57 = new java.lang.RuntimeException;

        specialinvoke $r57.<java.lang.RuntimeException: void <init>(java.lang.String)>("Internal error!");

        throw $r57;

     label15:
        $r25 = new com.mycila.inject.internal.asm.tree.TryCatchBlockNode;

        $r26 = r56.<com.mycila.inject.internal.asm.tree.TryCatchBlockNode: java.lang.String type>;

        specialinvoke $r25.<com.mycila.inject.internal.asm.tree.TryCatchBlockNode: void <init>(com.mycila.inject.internal.asm.tree.LabelNode,com.mycila.inject.internal.asm.tree.LabelNode,com.mycila.inject.internal.asm.tree.LabelNode,java.lang.String)>($r19, $r21, $r23, $r26);

        interfaceinvoke r24.<java.util.List: boolean add(java.lang.Object)>($r25);

        goto label12;

     label16:
        $r4 = r0.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter: java.util.List localVariables>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label19;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r58 = (com.mycila.inject.internal.asm.tree.LocalVariableNode) $r6;

        $r8 = r58.<com.mycila.inject.internal.asm.tree.LocalVariableNode: com.mycila.inject.internal.asm.tree.LabelNode start>;

        $r9 = virtualinvoke r7.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation: com.mycila.inject.internal.asm.tree.LabelNode rangeLabel(com.mycila.inject.internal.asm.tree.LabelNode)>($r8);

        $r10 = r58.<com.mycila.inject.internal.asm.tree.LocalVariableNode: com.mycila.inject.internal.asm.tree.LabelNode end>;

        $r11 = virtualinvoke r7.<com.mycila.inject.internal.asm.commons.JSRInlinerAdapter$Instantiation: com.mycila.inject.internal.asm.tree.LabelNode rangeLabel(com.mycila.inject.internal.asm.tree.LabelNode)>($r10);

        if $r9 != $r11 goto label18;

        goto label17;

     label18:
        $r13 = new com.mycila.inject.internal.asm.tree.LocalVariableNode;

        $r16 = r58.<com.mycila.inject.internal.asm.tree.LocalVariableNode: java.lang.String name>;

        $r15 = r58.<com.mycila.inject.internal.asm.tree.LocalVariableNode: java.lang.String desc>;

        $r14 = r58.<com.mycila.inject.internal.asm.tree.LocalVariableNode: java.lang.String signature>;

        $i1 = r58.<com.mycila.inject.internal.asm.tree.LocalVariableNode: int index>;

        specialinvoke $r13.<com.mycila.inject.internal.asm.tree.LocalVariableNode: void <init>(java.lang.String,java.lang.String,java.lang.String,com.mycila.inject.internal.asm.tree.LabelNode,com.mycila.inject.internal.asm.tree.LabelNode,int)>($r16, $r15, $r14, $r9, $r11, $i1);

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label17;

     label19:
        return;
    }

    private static void log(java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        return;
    }
}
