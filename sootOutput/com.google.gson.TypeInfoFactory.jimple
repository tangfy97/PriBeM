final class com.google.gson.TypeInfoFactory extends java.lang.Object
{

    private void <init>()
    {
        com.google.gson.TypeInfoFactory r0;

        r0 := @this: com.google.gson.TypeInfoFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.gson.TypeInfoArray getTypeInfoForArray(java.lang.reflect.Type)
    {
        com.google.gson.TypeInfoArray $r1;
        java.lang.reflect.Type r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = staticinvoke <com.google.gson.TypeUtils: boolean isArray(java.lang.reflect.Type)>(r0);

        staticinvoke <com.google.gson.Preconditions: void checkArgument(boolean)>($z0);

        $r1 = new com.google.gson.TypeInfoArray;

        specialinvoke $r1.<com.google.gson.TypeInfoArray: void <init>(java.lang.reflect.Type)>(r0);

        return $r1;
    }

    public static com.google.gson.TypeInfo getTypeInfoForField(java.lang.reflect.Field, java.lang.reflect.Type)
    {
        com.google.gson.TypeInfo $r5;
        java.lang.reflect.Type r0, $r3, $r4;
        java.lang.Class $r1;
        java.lang.reflect.Field r2;

        r2 := @parameter0: java.lang.reflect.Field;

        r0 := @parameter1: java.lang.reflect.Type;

        $r1 = staticinvoke <com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>(r0);

        $r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $r4 = staticinvoke <com.google.gson.TypeInfoFactory: java.lang.reflect.Type getActualType(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.Class)>($r3, r0, $r1);

        $r5 = new com.google.gson.TypeInfo;

        specialinvoke $r5.<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>($r4);

        return $r5;
    }

    private static java.lang.reflect.Type getActualType(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.Class)
    {
        java.lang.reflect.GenericArrayType r34;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.google.gson.ParameterizedTypeImpl $r32;
        java.lang.reflect.Type r0, r9, $r11, $r12, $r22, $r23, $r24, $r28, $r31;
        java.lang.reflect.Type[] $r8, $r21, $r29, $r30;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r14, $r15, $r16, $r17, $r18;
        com.google.gson.GenericArrayTypeImpl $r25;
        java.lang.reflect.WildcardType r37;
        int $i0;
        java.lang.String $r7, $r19;
        java.lang.UnsupportedOperationException $r13;
        java.lang.reflect.TypeVariable r35;
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.ParameterizedType r33, r36;
        java.lang.reflect.TypeVariable[] $r20;
        java.lang.Class r10, $r26, $r27;

        r0 := @parameter0: java.lang.reflect.Type;

        r9 := @parameter1: java.lang.reflect.Type;

        r10 := @parameter2: java.lang.Class;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $z1 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label2;

        r33 = (java.lang.reflect.ParameterizedType) r0;

        $r28 = interfaceinvoke r33.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $r29 = interfaceinvoke r33.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r30 = staticinvoke <com.google.gson.TypeInfoFactory: java.lang.reflect.Type[] extractRealTypes(java.lang.reflect.Type[],java.lang.reflect.Type,java.lang.Class)>($r29, r9, r10);

        $r31 = interfaceinvoke r33.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r32 = new com.google.gson.ParameterizedTypeImpl;

        specialinvoke $r32.<com.google.gson.ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type[],java.lang.reflect.Type)>($r31, $r30, $r28);

        return $r32;

     label2:
        $z2 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label5;

        r34 = (java.lang.reflect.GenericArrayType) r0;

        $r23 = interfaceinvoke r34.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r24 = staticinvoke <com.google.gson.TypeInfoFactory: java.lang.reflect.Type getActualType(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.Class)>($r23, r9, r10);

        $z6 = virtualinvoke $r23.<java.lang.Object: boolean equals(java.lang.Object)>($r24);

        if $z6 == 0 goto label3;

        return r34;

     label3:
        $z7 = $r24 instanceof java.lang.Class;

        if $z7 == 0 goto label4;

        $r26 = staticinvoke <com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>($r24);

        $r27 = staticinvoke <com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>($r26);

        return $r27;

     label4:
        $r25 = new com.google.gson.GenericArrayTypeImpl;

        specialinvoke $r25.<com.google.gson.GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>($r24);

        return $r25;

     label5:
        $z3 = r0 instanceof java.lang.reflect.TypeVariable;

        if $z3 == 0 goto label7;

        $z5 = r9 instanceof java.lang.reflect.ParameterizedType;

        if $z5 == 0 goto label6;

        r35 = (java.lang.reflect.TypeVariable) r0;

        $r20 = virtualinvoke r10.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        r36 = (java.lang.reflect.ParameterizedType) r9;

        $i0 = staticinvoke <com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>($r20, r35);

        $r21 = interfaceinvoke r36.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r22 = $r21[$i0];

        return $r22;

     label6:
        $r13 = new java.lang.UnsupportedOperationException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expecting parameterized type, got ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n Are you missing the use of TypeToken idiom?\n See ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label7:
        $z4 = r0 instanceof java.lang.reflect.WildcardType;

        if $z4 == 0 goto label8;

        r37 = (java.lang.reflect.WildcardType) r0;

        $r8 = interfaceinvoke r37.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r11 = $r8[0];

        $r12 = staticinvoke <com.google.gson.TypeInfoFactory: java.lang.reflect.Type getActualType(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.Class)>($r11, r9, r10);

        return $r12;

     label8:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a Class, ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ParameterizedType, GenericArrayType or TypeVariable. Can\'t extract type.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;
    }

    private static java.lang.reflect.Type[] extractRealTypes(java.lang.reflect.Type[], java.lang.reflect.Type, java.lang.Class)
    {
        java.lang.reflect.Type r2, $r4, $r5;
        java.lang.reflect.Type[] r0, r1;
        int $i0, $i1, i2;
        java.lang.Class r3;

        r0 := @parameter0: java.lang.reflect.Type[];

        r2 := @parameter1: java.lang.reflect.Type;

        r3 := @parameter2: java.lang.Class;

        staticinvoke <com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>(r0);

        $i0 = lengthof r0;

        r1 = newarray (java.lang.reflect.Type)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r4 = r0[i2];

        $r5 = staticinvoke <com.google.gson.TypeInfoFactory: java.lang.reflect.Type getActualType(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.Class)>($r4, r2, r3);

        r1[i2] = $r5;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static int getIndex(java.lang.reflect.TypeVariable[], java.lang.reflect.TypeVariable)
    {
        java.lang.IllegalStateException $r1;
        java.lang.reflect.TypeVariable[] r0;
        java.lang.reflect.TypeVariable r2, $r3;
        int $i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.TypeVariable[];

        r2 := @parameter1: java.lang.reflect.TypeVariable;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        $r3 = r0[i1];

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("How can the type variable not be present in the class declaration!");

        throw $r1;
    }
}
