public abstract class org.joda.time.field.BaseDateTimeField extends org.joda.time.DateTimeField
{
    private final org.joda.time.DateTimeFieldType iType;

    protected void <init>(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.DateTimeFieldType r1;
        org.joda.time.field.BaseDateTimeField r0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        specialinvoke r0.<org.joda.time.DateTimeField: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The type must not be null");

        throw $r2;

     label1:
        r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> = r1;

        return;
    }

    public final org.joda.time.DateTimeFieldType getType()
    {
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.field.BaseDateTimeField r0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>;

        return $r1;
    }

    public final java.lang.String getName()
    {
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.field.BaseDateTimeField r0;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>;

        $r2 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        return $r2;
    }

    public final boolean isSupported()
    {
        org.joda.time.field.BaseDateTimeField r0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        return 1;
    }

    public abstract int get(long);

    public java.lang.String getAsText(long, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.util.Locale r1;
        int $i1;
        long l0;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.Locale;

        $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>(l0);

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>($i1, r1);

        return $r2;
    }

    public final java.lang.String getAsText(long)
    {
        long l0;
        org.joda.time.field.BaseDateTimeField r0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>(l0, null);

        return $r1;
    }

    public java.lang.String getAsText(org.joda.time.ReadablePartial, int, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.util.Locale r1;
        int i0;
        org.joda.time.ReadablePartial r3;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r3 := @parameter0: org.joda.time.ReadablePartial;

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.Locale;

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>(i0, r1);

        return $r2;
    }

    public final java.lang.String getAsText(org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.util.Locale r3;
        org.joda.time.ReadablePartial r1;
        int $i0;
        org.joda.time.DateTimeFieldType $r2;
        java.lang.String $r4;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r3 := @parameter1: java.util.Locale;

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r2);

        $r4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>(r1, $i0, r3);

        return $r4;
    }

    public java.lang.String getAsText(int, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r1;
        java.util.Locale r2;
        int i0;
        java.lang.String $r0;

        r1 := @this: org.joda.time.field.BaseDateTimeField;

        i0 := @parameter0: int;

        r2 := @parameter1: java.util.Locale;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;
    }

    public java.lang.String getAsShortText(long, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.util.Locale r1;
        int $i1;
        long l0;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.Locale;

        $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>(l0);

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>($i1, r1);

        return $r2;
    }

    public final java.lang.String getAsShortText(long)
    {
        long l0;
        org.joda.time.field.BaseDateTimeField r0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>(l0, null);

        return $r1;
    }

    public java.lang.String getAsShortText(org.joda.time.ReadablePartial, int, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.util.Locale r1;
        int i0;
        org.joda.time.ReadablePartial r3;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r3 := @parameter0: org.joda.time.ReadablePartial;

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.Locale;

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>(i0, r1);

        return $r2;
    }

    public final java.lang.String getAsShortText(org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.util.Locale r3;
        org.joda.time.ReadablePartial r1;
        int $i0;
        org.joda.time.DateTimeFieldType $r2;
        java.lang.String $r4;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r3 := @parameter1: java.util.Locale;

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r2);

        $r4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>(r1, $i0, r3);

        return $r4;
    }

    public java.lang.String getAsShortText(int, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.util.Locale r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Locale;

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>(i0, r1);

        return $r2;
    }

    public long add(long, int)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.DurationField $r1;
        int i1;
        long l0, $l2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>();

        $l2 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,int)>(l0, i1);

        return $l2;
    }

    public long add(long, long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.DurationField $r1;
        long l0, l1, $l2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>();

        $l2 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,long)>(l0, l1);

        return $l2;
    }

    public int[] add(org.joda.time.ReadablePartial, int, int[], int)
    {
        byte $b6, $b18;
        int[] $r2, $r3, $r11, r19;
        org.joda.time.DateTimeField $r4, $r12, r20;
        org.joda.time.DurationFieldType $r6, $r8, $r14, $r16;
        org.joda.time.field.BaseDateTimeField r0;
        long $l5, $l17, l27, l28;
        int i0, $i1, $i2, $i3, $i4, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, $i29, $i30, $i32;
        org.joda.time.DurationField $r5, $r7, $r13, $r15;
        java.lang.IllegalArgumentException $r21, $r22, $r23, $r24;
        org.joda.time.ReadablePartial r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        i0 := @parameter1: int;

        r19 := @parameter2: int[];

        i26 := @parameter3: int;

        if i26 != 0 goto label01;

        return r19;

     label01:
        r20 = null;

     label02:
        if i26 <= 0 goto label06;

        $i14 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r19);

        $i15 = r19[i0];

        $i16 = $i15 + i26;

        l27 = (long) $i16;

        $l17 = (long) $i14;

        $b18 = l27 cmp $l17;

        $i29 = (int) $b18;

        if $i29 > 0 goto label03;

        $i25 = (int) l27;

        r19[i0] = $i25;

        goto label06;

     label03:
        if r20 != null goto label05;

        if i0 != 0 goto label04;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Maximum value exceeded for add");

        throw $r21;

     label04:
        $i24 = i0 - 1;

        $r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i24);

        r20 = $r12;

        $r13 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r14 = virtualinvoke $r13.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        $r15 = virtualinvoke $r12.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r16 = virtualinvoke $r15.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        if $r14 == $r16 goto label05;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add");

        throw $r22;

     label05:
        $i20 = $i14 + 1;

        $i19 = r19[i0];

        $i21 = $i20 - $i19;

        i26 = i26 - $i21;

        $i22 = i0 - 1;

        $r11 = virtualinvoke r20.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i22, r19, 1);

        r19 = $r11;

        $i23 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, $r11);

        $r11[i0] = $i23;

        goto label02;

     label06:
        if i26 >= 0 goto label10;

        $i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r19);

        $i3 = r19[i0];

        $i4 = $i3 + i26;

        l28 = (long) $i4;

        $l5 = (long) $i2;

        $b6 = l28 cmp $l5;

        $i30 = (int) $b6;

        if $i30 < 0 goto label07;

        $i13 = (int) l28;

        r19[i0] = $i13;

        goto label10;

     label07:
        if r20 != null goto label09;

        if i0 != 0 goto label08;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Maximum value exceeded for add");

        throw $r23;

     label08:
        $i12 = i0 - 1;

        $r4 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i12);

        r20 = $r4;

        $r5 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r6 = virtualinvoke $r5.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        $r7 = virtualinvoke $r4.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r8 = virtualinvoke $r7.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        if $r6 == $r8 goto label09;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add");

        throw $r24;

     label09:
        $i8 = $i2 - 1;

        $i7 = r19[i0];

        $i9 = $i8 - $i7;

        i26 = i26 - $i9;

        $i10 = i0 - 1;

        $i32 = (int) -1;

        $r3 = virtualinvoke r20.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i10, r19, $i32);

        r19 = $r3;

        $i11 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, $r3);

        $r3[i0] = $i11;

        goto label06;

     label10:
        $i1 = r19[i0];

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r19, $i1);

        return $r2;
    }

    public int[] addWrapPartial(org.joda.time.ReadablePartial, int, int[], int)
    {
        byte $b6, $b22;
        int[] $r2, $r3, $r10, r17;
        org.joda.time.DateTimeField $r4, $r11, r18;
        org.joda.time.DurationFieldType $r6, $r8, $r13, $r15;
        org.joda.time.field.BaseDateTimeField r0;
        long $l5, $l21, l35, l36;
        int i0, $i1, $i2, $i3, $i4, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, $i37, $i38, $i40;
        org.joda.time.DurationField $r5, $r7, $r12, $r14;
        java.lang.IllegalArgumentException $r19, $r20;
        org.joda.time.ReadablePartial r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        i0 := @parameter1: int;

        r17 := @parameter2: int[];

        i34 := @parameter3: int;

        if i34 != 0 goto label01;

        return r17;

     label01:
        r18 = null;

     label02:
        if i34 <= 0 goto label06;

        $i18 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r17);

        $i19 = r17[i0];

        $i20 = $i19 + i34;

        l35 = (long) $i20;

        $l21 = (long) $i18;

        $b22 = l35 cmp $l21;

        $i37 = (int) $b22;

        if $i37 > 0 goto label03;

        $i33 = (int) l35;

        r17[i0] = $i33;

        goto label06;

     label03:
        if r18 != null goto label05;

        if i0 != 0 goto label04;

        $i30 = $i18 + 1;

        $i29 = r17[i0];

        $i31 = $i30 - $i29;

        i34 = i34 - $i31;

        $i32 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r17);

        r17[i0] = $i32;

        goto label02;

     label04:
        $i28 = i0 - 1;

        $r11 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i28);

        r18 = $r11;

        $r12 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r13 = virtualinvoke $r12.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        $r14 = virtualinvoke $r11.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r15 = virtualinvoke $r14.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        if $r13 == $r15 goto label05;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add");

        throw $r19;

     label05:
        $i24 = $i18 + 1;

        $i23 = r17[i0];

        $i25 = $i24 - $i23;

        i34 = i34 - $i25;

        $i26 = i0 - 1;

        $r10 = virtualinvoke r18.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i26, r17, 1);

        r17 = $r10;

        $i27 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, $r10);

        $r10[i0] = $i27;

        goto label02;

     label06:
        if i34 >= 0 goto label10;

        $i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r17);

        $i3 = r17[i0];

        $i4 = $i3 + i34;

        l36 = (long) $i4;

        $l5 = (long) $i2;

        $b6 = l36 cmp $l5;

        $i38 = (int) $b6;

        if $i38 < 0 goto label07;

        $i17 = (int) l36;

        r17[i0] = $i17;

        goto label10;

     label07:
        if r18 != null goto label09;

        if i0 != 0 goto label08;

        $i14 = $i2 - 1;

        $i13 = r17[i0];

        $i15 = $i14 - $i13;

        i34 = i34 - $i15;

        $i16 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r17);

        r17[i0] = $i16;

        goto label06;

     label08:
        $i12 = i0 - 1;

        $r4 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i12);

        r18 = $r4;

        $r5 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r6 = virtualinvoke $r5.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        $r7 = virtualinvoke $r4.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r8 = virtualinvoke $r7.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        if $r6 == $r8 goto label09;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add");

        throw $r20;

     label09:
        $i8 = $i2 - 1;

        $i7 = r17[i0];

        $i9 = $i8 - $i7;

        i34 = i34 - $i9;

        $i10 = i0 - 1;

        $i40 = (int) -1;

        $r3 = virtualinvoke r18.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i10, r17, $i40);

        r17 = $r3;

        $i11 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, $r3);

        $r3[i0] = $i11;

        goto label06;

     label10:
        $i1 = r17[i0];

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r17, $i1);

        return $r2;
    }

    public long addWrapField(long, int)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, $l6;
        int $i1, i2, $i3, $i4, $i5;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        i2 := @parameter1: int;

        $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>(l0);

        $i3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>(l0);

        $i4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>(l0);

        $i5 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>($i1, i2, $i3, $i4);

        $l6 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long set(long,int)>(l0, $i5);

        return $l6;
    }

    public int[] addWrapField(org.joda.time.ReadablePartial, int, int[], int)
    {
        org.joda.time.field.BaseDateTimeField r1;
        int[] r0, $r3;
        int i0, i1, i2, $i3, $i4, $i5;
        org.joda.time.ReadablePartial r2;

        r1 := @this: org.joda.time.field.BaseDateTimeField;

        r2 := @parameter0: org.joda.time.ReadablePartial;

        i0 := @parameter1: int;

        r0 := @parameter2: int[];

        i2 := @parameter3: int;

        i1 = r0[i0];

        $i3 = virtualinvoke r1.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r2);

        $i4 = virtualinvoke r1.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r2);

        $i5 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>(i1, i2, $i3, $i4);

        $r3 = virtualinvoke r1.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r2, i0, r0, $i5);

        return $r3;
    }

    public int getDifference(long, long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.DurationField $r1;
        int $i2;
        long l0, l1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>();

        $i2 = virtualinvoke $r1.<org.joda.time.DurationField: int getDifference(long,long)>(l0, l1);

        return $i2;
    }

    public long getDifferenceAsLong(long, long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.DurationField $r1;
        long l0, l1, $l2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>();

        $l2 = virtualinvoke $r1.<org.joda.time.DurationField: long getDifferenceAsLong(long,long)>(l0, l1);

        return $l2;
    }

    public abstract long set(long, int);

    public int[] set(org.joda.time.ReadablePartial, int, int[], int)
    {
        org.joda.time.field.BaseDateTimeField r0;
        int[] r2;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        org.joda.time.DateTimeField $r3;
        org.joda.time.ReadablePartial r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        i3 := @parameter1: int;

        r2 := @parameter2: int[];

        i0 := @parameter3: int;

        $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        $i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i0, $i1, $i2);

        r2[i3] = i0;

        i11 = i3 + 1;

     label1:
        $i4 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

        if i11 >= $i4 goto label4;

        $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i11);

        $i5 = r2[i11];

        $i6 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        if $i5 <= $i6 goto label2;

        $i10 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        r2[i11] = $i10;

     label2:
        $i7 = r2[i11];

        $i8 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        if $i7 >= $i8 goto label3;

        $i9 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        r2[i11] = $i9;

     label3:
        i11 = i11 + 1;

        goto label1;

     label4:
        return r2;
    }

    public long set(long, java.lang.String, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.util.Locale r2;
        int $i0;
        long l1, $l2;
        java.lang.String r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l1 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Locale;

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>(r1, r2);

        $l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long set(long,int)>(l1, $i0);

        return $l2;
    }

    public final long set(long, java.lang.String)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, $l1;
        java.lang.String r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        $l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>(l0, r1, null);

        return $l1;
    }

    public int[] set(org.joda.time.ReadablePartial, int, int[], java.lang.String, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        int[] r4, $r5;
        java.util.Locale r2;
        int $i0, i1;
        org.joda.time.ReadablePartial r3;
        java.lang.String r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r3 := @parameter0: org.joda.time.ReadablePartial;

        i1 := @parameter1: int;

        r4 := @parameter2: int[];

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.util.Locale;

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>(r1, r2);

        $r5 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r3, i1, r4, $i0);

        return $r5;
    }

    protected int convertText(java.lang.String, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r3;
        java.util.Locale r5;
        int $i0;
        java.lang.NumberFormatException $r1;
        org.joda.time.DateTimeFieldType $r4;
        java.lang.String r0;
        org.joda.time.IllegalFieldValueException $r2;

        r3 := @this: org.joda.time.field.BaseDateTimeField;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.Locale;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

     label2:
        return $i0;

     label3:
        $r1 := @caughtexception;

        $r2 = new org.joda.time.IllegalFieldValueException;

        $r4 = virtualinvoke r3.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>();

        specialinvoke $r2.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>($r4, r0);

        throw $r2;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public abstract org.joda.time.DurationField getDurationField();

    public abstract org.joda.time.DurationField getRangeDurationField();

    public boolean isLeap(long)
    {
        long l0;
        org.joda.time.field.BaseDateTimeField r0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        return 0;
    }

    public int getLeapAmount(long)
    {
        long l0;
        org.joda.time.field.BaseDateTimeField r0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        return 0;
    }

    public org.joda.time.DurationField getLeapDurationField()
    {
        org.joda.time.field.BaseDateTimeField r0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        return null;
    }

    public abstract int getMinimumValue();

    public int getMinimumValue(long)
    {
        int $i0;
        long l1;
        org.joda.time.field.BaseDateTimeField r0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l1 := @parameter0: long;

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>();

        return $i0;
    }

    public int getMinimumValue(org.joda.time.ReadablePartial)
    {
        int $i0;
        org.joda.time.ReadablePartial r1;
        org.joda.time.field.BaseDateTimeField r0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>();

        return $i0;
    }

    public int getMinimumValue(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.field.BaseDateTimeField r0;
        int[] r2;
        org.joda.time.ReadablePartial r1;
        int $i0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: int[];

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1);

        return $i0;
    }

    public abstract int getMaximumValue();

    public int getMaximumValue(long)
    {
        int $i0;
        long l1;
        org.joda.time.field.BaseDateTimeField r0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l1 := @parameter0: long;

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>();

        return $i0;
    }

    public int getMaximumValue(org.joda.time.ReadablePartial)
    {
        int $i0;
        org.joda.time.ReadablePartial r1;
        org.joda.time.field.BaseDateTimeField r0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>();

        return $i0;
    }

    public int getMaximumValue(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.field.BaseDateTimeField r0;
        int[] r2;
        org.joda.time.ReadablePartial r1;
        int $i0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: int[];

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1);

        return $i0;
    }

    public int getMaximumTextLength(java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.util.Locale r2;
        int $i0, $i1;
        java.lang.String $r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r2 := @parameter0: java.util.Locale;

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>();

        if $i0 < 0 goto label3;

        if $i0 >= 10 goto label1;

        return 1;

     label1:
        if $i0 >= 100 goto label2;

        return 2;

     label2:
        if $i0 >= 1000 goto label3;

        return 3;

     label3:
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        return $i1;
    }

    public int getMaximumShortTextLength(java.util.Locale)
    {
        int $i0;
        org.joda.time.field.BaseDateTimeField r0;
        java.util.Locale r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: java.util.Locale;

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>(r1);

        return $i0;
    }

    public abstract long roundFloor(long);

    public long roundCeiling(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        byte $b1;
        long $l0, l2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l2 := @parameter0: long;

        $l0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l2);

        $b1 = $l0 cmp l2;

        if $b1 == 0 goto label1;

        l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long add(long,int)>($l0, 1);

     label1:
        return l2;
    }

    public long roundHalfFloor(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, $l1, $l2, l3, l4;
        byte $b5;
        int $i6;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0);

        $l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>(l0);

        l3 = l0 - $l1;

        l4 = $l2 - l0;

        $b5 = l3 cmp l4;

        $i6 = (int) $b5;

        if $i6 > 0 goto label1;

        return $l1;

     label1:
        return $l2;
    }

    public long roundHalfCeiling(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, $l1, $l2, l3, l4;
        byte $b5;
        int $i6;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0);

        $l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>(l0);

        l3 = l0 - $l1;

        l4 = $l2 - l0;

        $b5 = l4 cmp l3;

        $i6 = (int) $b5;

        if $i6 > 0 goto label1;

        return $l2;

     label1:
        return $l1;
    }

    public long roundHalfEven(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, $l1, $l2, l3, l4;
        byte $b5, $b6;
        int $i7, $i8, $i9, $i10;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0);

        $l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>(l0);

        l3 = l0 - $l1;

        l4 = $l2 - l0;

        $b5 = l3 cmp l4;

        $i9 = (int) $b5;

        if $i9 >= 0 goto label1;

        return $l1;

     label1:
        $b6 = l4 cmp l3;

        $i10 = (int) $b6;

        if $i10 >= 0 goto label2;

        return $l2;

     label2:
        $i7 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>($l2);

        $i8 = $i7 & 1;

        if $i8 != 0 goto label3;

        return $l2;

     label3:
        return $l1;
    }

    public long remainder(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, $l1, $l2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0);

        $l2 = l0 - $l1;

        return $l2;
    }

    public java.lang.String toString()
    {
        org.joda.time.field.BaseDateTimeField r2;
        java.lang.StringBuffer $r0, $r1, $r4, $r5;
        java.lang.String $r3, $r6;

        r2 := @this: org.joda.time.field.BaseDateTimeField;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DateTimeField[");

        $r3 = virtualinvoke r2.<org.joda.time.field.BaseDateTimeField: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }
}
