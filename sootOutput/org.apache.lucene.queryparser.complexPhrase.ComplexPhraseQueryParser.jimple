public class org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser extends org.apache.lucene.queryparser.classic.QueryParser
{
    private java.util.ArrayList complexPhrases;
    private boolean isPass2ResolvingPhrases;
    private org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery currentPhraseQuery;

    public void <init>(org.apache.lucene.util.Version, java.lang.String, org.apache.lucene.analysis.Analyzer)
    {
        org.apache.lucene.analysis.Analyzer r3;
        java.lang.String r2;
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser r0;
        org.apache.lucene.util.Version r1;

        r0 := @this: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser;

        r1 := @parameter0: org.apache.lucene.util.Version;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.lucene.analysis.Analyzer;

        specialinvoke r0.<org.apache.lucene.queryparser.classic.QueryParser: void <init>(org.apache.lucene.util.Version,java.lang.String,org.apache.lucene.analysis.Analyzer)>(r1, r2, r3);

        r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: java.util.ArrayList complexPhrases> = null;

        r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery currentPhraseQuery> = null;

        return;
    }

    protected org.apache.lucene.search.Query getFieldQuery(java.lang.String, java.lang.String, int)
    {
        int i0;
        java.lang.String r1, r2;
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser r3;
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery $r0;
        java.util.ArrayList $r4;

        r3 := @this: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r0 = new org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery;

        specialinvoke $r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: void <init>(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        $r4 = r3.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: java.util.ArrayList complexPhrases>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r0);

        return $r0;
    }

    public org.apache.lucene.search.Query parse(java.lang.String) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r3, $r11;
        java.lang.Throwable $r12, $r13;
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser r0;
        java.util.ArrayList $r1, $r4;
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery $r7, $r8;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r9, $r10;
        java.lang.String r2;
        boolean $z0, $z1;
        java.util.Iterator $r5;
        java.lang.Object $r6;

        r0 := @this: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser;

        r2 := @parameter0: java.lang.String;

        $z0 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: boolean isPass2ResolvingPhrases>;

        if $z0 == 0 goto label05;

        $r9 = virtualinvoke r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: org.apache.lucene.search.MultiTermQuery$RewriteMethod getMultiTermRewriteMethod()>();

     label01:
        $r10 = <org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod SCORING_BOOLEAN_QUERY_REWRITE>;

        virtualinvoke r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: void setMultiTermRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)>($r10);

        $r11 = specialinvoke r0.<org.apache.lucene.queryparser.classic.QueryParser: org.apache.lucene.search.Query parse(java.lang.String)>(r2);

     label02:
        virtualinvoke r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: void setMultiTermRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)>($r9);

        return $r11;

     label03:
        $r13 := @caughtexception;

     label04:
        virtualinvoke r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: void setMultiTermRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)>($r9);

        throw $r13;

     label05:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: java.util.ArrayList complexPhrases> = $r1;

        $r3 = specialinvoke r0.<org.apache.lucene.queryparser.classic.QueryParser: org.apache.lucene.search.Query parse(java.lang.String)>(r2);

        r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: boolean isPass2ResolvingPhrases> = 1;

     label06:
        $r4 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: java.util.ArrayList complexPhrases>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery) $r6;

        r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery currentPhraseQuery> = $r7;

        $r8 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery currentPhraseQuery>;

        virtualinvoke $r8.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: void parsePhraseElements(org.apache.lucene.queryparser.classic.QueryParser)>(r0);

        goto label07;

     label08:
        r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: boolean isPass2ResolvingPhrases> = 0;

        goto label11;

     label09:
        $r12 := @caughtexception;

     label10:
        r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: boolean isPass2ResolvingPhrases> = 0;

        throw $r12;

     label11:
        return $r3;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    protected org.apache.lucene.search.Query newTermQuery(org.apache.lucene.index.Term)
    {
        org.apache.lucene.search.Query $r2;
        org.apache.lucene.queryparser.classic.ParseException $r4;
        org.apache.lucene.index.Term r1;
        java.lang.String $r3;
        java.lang.RuntimeException $r5;
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser;

        r1 := @parameter0: org.apache.lucene.index.Term;

        $z0 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: boolean isPass2ResolvingPhrases>;

        if $z0 == 0 goto label4;

     label1:
        $r3 = virtualinvoke r1.<org.apache.lucene.index.Term: java.lang.String field()>();

        specialinvoke r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: void checkPhraseClauseIsForSameField(java.lang.String)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error parsing complex phrase", $r4);

        throw $r5;

     label4:
        $r2 = specialinvoke r0.<org.apache.lucene.queryparser.classic.QueryParser: org.apache.lucene.search.Query newTermQuery(org.apache.lucene.index.Term)>(r1);

        return $r2;

        catch org.apache.lucene.queryparser.classic.ParseException from label1 to label2 with label3;
    }

    private void checkPhraseClauseIsForSameField(java.lang.String) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.queryparser.classic.ParseException $r4;
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser r1;
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery $r2, $r10;
        java.lang.String r0, $r3, $r11, $r14;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r12, $r13;

        r1 := @this: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser;

        r0 := @parameter0: java.lang.String;

        $r2 = r1.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery currentPhraseQuery>;

        $r3 = $r2.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String field>;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r4 = new org.apache.lucene.queryparser.classic.ParseException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot have clause for field \"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" nested in phrase ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for field \"");

        $r10 = r1.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery currentPhraseQuery>;

        $r11 = $r10.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser$ComplexPhraseQuery: java.lang.String field>;

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.lucene.queryparser.classic.ParseException: void <init>(java.lang.String)>($r14);

        throw $r4;

     label1:
        return;
    }

    protected org.apache.lucene.search.Query getWildcardQuery(java.lang.String, java.lang.String) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r3;
        java.lang.String r1, r2;
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: boolean isPass2ResolvingPhrases>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: void checkPhraseClauseIsForSameField(java.lang.String)>(r1);

     label1:
        $r3 = specialinvoke r0.<org.apache.lucene.queryparser.classic.QueryParser: org.apache.lucene.search.Query getWildcardQuery(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    protected org.apache.lucene.search.Query getRangeQuery(java.lang.String, java.lang.String, java.lang.String, boolean, boolean) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r4;
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser r0;
        java.lang.String r1, r2, r3;
        boolean $z0, z1, z2;

        r0 := @this: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        $z0 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: boolean isPass2ResolvingPhrases>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: void checkPhraseClauseIsForSameField(java.lang.String)>(r1);

     label1:
        $r4 = specialinvoke r0.<org.apache.lucene.queryparser.classic.QueryParser: org.apache.lucene.search.Query getRangeQuery(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(r1, r2, r3, z1, z2);

        return $r4;
    }

    protected org.apache.lucene.search.Query newRangeQuery(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)
    {
        org.apache.lucene.search.Query $r4;
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser r0;
        org.apache.lucene.search.TermRangeQuery $r5;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r6;
        java.lang.String r1, r2, r3;
        boolean $z0, z1, z2;

        r0 := @this: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        $z0 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: boolean isPass2ResolvingPhrases>;

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <org.apache.lucene.search.TermRangeQuery: org.apache.lucene.search.TermRangeQuery newStringRange(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(r1, r2, r3, z1, z2);

        $r6 = <org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod SCORING_BOOLEAN_QUERY_REWRITE>;

        virtualinvoke $r5.<org.apache.lucene.search.TermRangeQuery: void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)>($r6);

        return $r5;

     label1:
        $r4 = specialinvoke r0.<org.apache.lucene.queryparser.classic.QueryParser: org.apache.lucene.search.Query newRangeQuery(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(r1, r2, r3, z1, z2);

        return $r4;
    }

    protected org.apache.lucene.search.Query getFuzzyQuery(java.lang.String, java.lang.String, float) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r3;
        float f0;
        java.lang.String r1, r2;
        org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        $z0 = r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: boolean isPass2ResolvingPhrases>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser: void checkPhraseClauseIsForSameField(java.lang.String)>(r1);

     label1:
        $r3 = specialinvoke r0.<org.apache.lucene.queryparser.classic.QueryParser: org.apache.lucene.search.Query getFuzzyQuery(java.lang.String,java.lang.String,float)>(r1, r2, f0);

        return $r3;
    }
}
