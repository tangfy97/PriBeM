class com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode extends java.lang.Object
{
    protected com.hp.hpl.jena.graph.Node rdfNode;
    protected java.util.Set succ;
    protected java.util.Set pred;
    protected java.util.Set succClosed;
    protected java.util.List succClosedTriples;
    private com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings siblings;

    private java.util.Set siblings()
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0;
        java.util.Set $r2;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings siblings>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings: java.util.Set members()>();

        return $r2;
    }

    private void addSiblings(java.util.Set, com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0, r3;
        java.util.Set r1;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings $r2;

        r3 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r1 := @parameter0: java.util.Set;

        r0 := @parameter1: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        $r2 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings siblings>;

        virtualinvoke $r2.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings: void addInto(java.util.Set,com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>(r1, r0);

        return;
    }

    public com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode leadNode()
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0, $r2;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings siblings>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode leadNode(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>(r0);

        return $r2;
    }

    public java.util.Iterator siblingIterator()
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0;
        java.util.Iterator $r2;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings siblings>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings: java.util.Iterator siblingIterator()>();

        return $r2;
    }

    public java.util.Iterator concatenateSiblings(java.util.Iterator)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1, $r5;
        java.util.Iterator r0, $r4;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings $r3;

        r2 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>(r0);

        $r3 = r2.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings siblings>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings: java.util.Iterator siblingIterator()>();

        $r5 = interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator andThen(java.util.Iterator)>($r4);

        return $r5;
    }

    private void becomeSubordinateOf(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0, r2;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Subordinate $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        $r1 = new com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Subordinate;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Subordinate: void <init>(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>(r2);

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings siblings> = $r1;

        return;
    }

    private void becomeLeaderOf(java.util.Set)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0;
        java.util.Set r2;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Leader $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r2 := @parameter0: java.util.Set;

        $r1 = new com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Leader;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Leader: void <init>(java.util.Set)>(r2);

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings siblings> = $r1;

        return;
    }

    public java.lang.String dump()
    {
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings $r5;
        java.lang.String $r3, $r6, $r10, $r14, $r18, $r20;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r1;
        java.util.Set $r9, $r13, $r17;
        java.lang.StringBuilder $r0, $r4, $r7, $r8, $r11, $r12, $r15, $r16, $r19;

        r1 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.graph.Node rdfNode>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: java.lang.String getLocalName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings siblings>;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings: java.lang.String dump()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" succ=");

        $r9 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succ>;

        $r10 = staticinvoke <com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.lang.String dumpSet(java.util.Set)>($r9);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", succClose=");

        $r13 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succClosed>;

        $r14 = staticinvoke <com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.lang.String dumpSet(java.util.Set)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pred=");

        $r17 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred>;

        $r18 = staticinvoke <com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.lang.String dumpSet(java.util.Set)>($r17);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r20;
    }

    public void <init>(com.hp.hpl.jena.graph.Node)
    {
        java.util.HashSet $r1, $r2, $r3;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0;
        com.hp.hpl.jena.graph.Node r5;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings $r4;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r5 := @parameter0: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succ> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succClosed> = $r3;

        $r4 = new com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings;

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings siblings> = $r4;

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.graph.Node rdfNode> = r5;

        return;
    }

    public boolean pathTo(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0, r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succClosed>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean directPathTo(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0, r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succ>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public void visitPredecessors(com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$Visitor, java.lang.Object, java.lang.Object)
    {
        java.util.HashSet $r5;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r1;
        java.util.List $r4;
        java.util.Set $r6;
        java.lang.Object r2, r3;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$Visitor r0;

        r1 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r0 := @parameter0: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$Visitor;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$Visitor: java.util.List visit(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode,com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode,java.lang.Object,java.lang.Object)>(r1, null, r2, r3);

        if $r4 == null goto label1;

        $r6 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred>;

        interfaceinvoke $r6.<java.util.Set: boolean removeAll(java.util.Collection)>($r4);

     label1:
        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        specialinvoke r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void doVisitPredecessors(com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$Visitor,java.lang.Object,java.lang.Object,java.util.Set)>(r0, r2, r3, $r5);

        return;
    }

    private void doVisitPredecessors(com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$Visitor, java.lang.Object, java.lang.Object, java.util.Set)
    {
        java.util.ArrayList $r13, r14;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r1, r15, r16;
        java.util.Iterator $r3, $r5;
        java.util.Set r0, $r2, $r4, $r10;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$Visitor r7;
        java.util.List $r12;
        java.lang.Object $r6, r8, r9, $r11;

        r1 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r7 := @parameter0: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$Visitor;

        r8 := @parameter1: java.lang.Object;

        r9 := @parameter2: java.lang.Object;

        r0 := @parameter3: java.util.Set;

        $z0 = interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>(r1);

        if $z0 == 0 goto label7;

        r14 = null;

        $r2 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r11 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r15 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r11;

        $r12 = interfaceinvoke r7.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$Visitor: java.util.List visit(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode,com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode,java.lang.Object,java.lang.Object)>(r15, r1, r8, r9);

        if $r12 == null goto label3;

        if r14 != null goto label2;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r14 = $r13;

     label2:
        interfaceinvoke r14.<java.util.Collection: boolean addAll(java.util.Collection)>($r12);

     label3:
        goto label1;

     label4:
        if r14 == null goto label5;

        $r10 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred>;

        interfaceinvoke $r10.<java.util.Set: boolean removeAll(java.util.Collection)>(r14);

     label5:
        $r4 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred>;

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r16 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r6;

        specialinvoke r16.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void doVisitPredecessors(com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$Visitor,java.lang.Object,java.lang.Object,java.util.Set)>(r7, r8, r9, r0);

        goto label6;

     label7:
        return;
    }

    public java.util.Iterator iteratorOverSuccessors()
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0;
        java.util.Set $r1;
        java.util.Iterator $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succClosed>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        return $r2;
    }

    public void assertLinkTo(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0, r1;
        java.util.Set $r2, $r3;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        if r0 != r1 goto label1;

        return;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succ>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r3 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r0);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void clearTripleCache()>();

        return;
    }

    public void retractLinkTo(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0, r1;
        java.util.Set $r2, $r3;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        if r0 != r1 goto label1;

        return;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succ>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        $r3 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred>;

        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r0);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void clearTripleCache()>();

        return;
    }

    public void assertIndirectLinkTo(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0, r1;
        java.util.Set $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        $r2 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succClosed>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void clearTripleCache()>();

        return;
    }

    public void clearTripleCache()
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.List succClosedTriples> = null;

        return;
    }

    public void propagateAdd(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)
    {
        java.util.HashSet $r0;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r1, r3;
        java.util.Set $r2;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$1 $r4;

        r3 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        $r0 = new java.util.HashSet;

        $r2 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succClosed>;

        specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>($r2);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r4 = new com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$1;

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$1: void <init>(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>(r3);

        virtualinvoke r3.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void visitPredecessors(com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$Visitor,java.lang.Object,java.lang.Object)>($r4, $r0, r1);

        return;
    }

    public void propagateSCC()
    {
        java.util.HashSet $r0;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r1;
        java.util.Set $r3;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$2 $r2;

        r1 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r2 = new com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$2;

        specialinvoke $r2.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$2: void <init>(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>(r1);

        $r3 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succClosed>;

        specialinvoke r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void doVisitPredecessors(com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$Visitor,java.lang.Object,java.lang.Object,java.util.Set)>($r2, $r3, null, $r0);

        return;
    }

    public void makeLeadNodeFor(java.util.Set)
    {
        java.util.HashSet $r0, $r1, $r7, $r8;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r4, r13, $r17, r24, r25;
        java.util.Iterator $r3, $r6, $r9, $r10;
        java.util.Set r2, $r5, $r11, $r14, $r15, $r19, $r20, $r22, $r23;
        java.lang.Object $r12, $r16, $r18, $r21;

        r4 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r2 := @parameter0: java.util.Set;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r21 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r24 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r21;

        $r22 = r24.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succ>;

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r22);

        $r23 = r24.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succClosed>;

        interfaceinvoke $r1.<java.util.Set: boolean addAll(java.util.Collection)>($r23);

        goto label1;

     label2:
        interfaceinvoke $r0.<java.util.Set: boolean removeAll(java.util.Collection)>(r2);

        interfaceinvoke $r1.<java.util.Set: boolean removeAll(java.util.Collection)>(r2);

        r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succ> = $r0;

        r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succClosed> = $r1;

        $r5 = r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succ>;

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r18 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r25 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r18;

        $r19 = r25.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred>;

        interfaceinvoke $r19.<java.util.Set: boolean removeAll(java.util.Collection)>(r2);

        $r20 = r25.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred>;

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>(r4);

        goto label3;

     label4:
        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        $r9 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r16 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r16;

        specialinvoke r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void addSiblings(java.util.Set,com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>($r8, $r17);

        goto label5;

     label6:
        specialinvoke r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void becomeLeaderOf(java.util.Set)>($r8);

        $r10 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label7:
        $z3 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label9;

        $r12 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r12;

        if r13 == r4 goto label8;

        $r15 = r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred>;

        $r14 = r13.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred>;

        interfaceinvoke $r15.<java.util.Set: boolean addAll(java.util.Collection)>($r14);

        specialinvoke r13.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void relocateAllRefTo(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode,java.util.Set)>(r4, $r7);

        specialinvoke r13.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void becomeSubordinateOf(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>(r4);

     label8:
        goto label7;

     label9:
        $r11 = r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred>;

        interfaceinvoke $r11.<java.util.Set: boolean removeAll(java.util.Collection)>(r2);

        return;
    }

    private void relocateAllRefTo(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode, java.util.Set)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0, r3;
        java.util.Set r2;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$3 $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r3 := @parameter0: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r2 := @parameter1: java.util.Set;

        $r1 = new com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$3;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$3: void <init>(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>(r0);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void visitPredecessors(com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$Visitor,java.lang.Object,java.lang.Object)>($r1, r2, r3);

        return;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator listTriples(boolean, com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r1, $r2, $r7;
        java.util.Iterator $r5, $r10;
        com.hp.hpl.jena.graph.Node $r3, $r8;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r0;
        java.util.List $r4, $r9;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6, $r11;
        boolean $z0, z1;

        r1 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        z1 := @parameter0: boolean;

        r0 := @parameter1: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        $z0 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: boolean cacheTriples>;

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode leadNode()>();

        $r8 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.graph.Node rdfNode>;

        $r9 = specialinvoke $r7.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.List triplesForSuccessors(com.hp.hpl.jena.graph.Node,boolean,com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache)>($r8, z1, r0);

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

        $r11 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r10);

        return $r11;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode leadNode()>();

        $r3 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.graph.Node rdfNode>;

        $r4 = specialinvoke $r2.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.List triplesForSuccessors(com.hp.hpl.jena.graph.Node,boolean,com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache)>($r3, z1, r0);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        $r6 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r5);

        return $r6;
    }

    private java.util.List triplesForSuccessors(com.hp.hpl.jena.graph.Node, boolean, com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache)
    {
        com.hp.hpl.jena.graph.Node r3, $r5, $r11, $r12;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r4;
        java.util.ArrayList $r1;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings $r7, $r13;
        int $i0, $i1;
        boolean z0, $z1;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0, r9;
        java.util.Iterator $r6;
        java.util.Set $r14;
        com.hp.hpl.jena.graph.Triple $r2, $r10;
        java.lang.Object $r8;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        z0 := @parameter1: boolean;

        r4 := @parameter2: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        if z0 == 0 goto label1;

        $r14 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succClosed>;

        goto label2;

     label1:
        $r14 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succ>;

     label2:
        $r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r14.<java.util.Set: int size()>();

        $i1 = $i0 + 10;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i1);

        $r2 = new com.hp.hpl.jena.graph.Triple;

        $r5 = r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node closedPredicate>;

        specialinvoke $r2.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r3, $r5, r3);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $r6 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r8;

        $r10 = new com.hp.hpl.jena.graph.Triple;

        $r12 = r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node closedPredicate>;

        $r11 = r9.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.graph.Node rdfNode>;

        specialinvoke $r10.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r3, $r12, $r11);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        $r13 = r9.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings siblings>;

        virtualinvoke $r13.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings: void addSuccessors(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache,java.util.ArrayList)>(r3, r4, $r1);

        goto label3;

     label4:
        $r7 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings siblings>;

        virtualinvoke $r7.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode$Siblings: void addSuccessors(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache,java.util.ArrayList)>(r3, r4, $r1);

        return $r1;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator listPredecessorTriples(boolean, com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r1, $r2;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker $r0;
        com.hp.hpl.jena.graph.Node $r4, $r5;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r3;
        boolean z0;

        r1 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        z0 := @parameter0: boolean;

        r3 := @parameter1: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        $r0 = new com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode leadNode()>();

        $r5 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.graph.Node rdfNode>;

        $r4 = r3.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node closedPredicate>;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: void <init>(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode,com.hp.hpl.jena.graph.Node,boolean,com.hp.hpl.jena.graph.Node)>($r2, $r5, z0, $r4);

        return $r0;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r2;
        com.hp.hpl.jena.graph.Node $r3;
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        java.lang.String $r4, $r7;

        r2 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r3 = r2.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.graph.Node rdfNode>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: java.lang.String getLocalName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private static java.lang.String dumpSet(java.util.Set)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode $r5;
        java.util.Iterator $r2;
        java.util.Set r1;
        java.lang.StringBuffer $r0;
        java.lang.Object $r4;
        java.lang.String $r3, $r6;
        boolean $z0, z1;

        r1 := @parameter0: java.util.Set;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("{");

        z1 = 0;

        $r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        if z1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        goto label3;

     label2:
        z1 = 1;

     label3:
        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r4;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        goto label1;

     label4:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    static java.lang.String access$000(java.util.Set)
    {
        java.util.Set r0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Set;

        $r1 = staticinvoke <com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.lang.String dumpSet(java.util.Set)>(r0);

        return $r1;
    }

    static java.util.Set access$100(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r0;
        java.util.Set $r1;

        r0 := @parameter0: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set siblings()>();

        return $r1;
    }
}
