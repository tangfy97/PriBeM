public class org.springframework.core.enums.StaticLabeledEnumResolver extends org.springframework.core.enums.AbstractCachingLabeledEnumResolver
{
    private static final org.springframework.core.enums.StaticLabeledEnumResolver INSTANCE;

    static void <clinit>()
    {
        org.springframework.core.enums.StaticLabeledEnumResolver $r0;

        $r0 = new org.springframework.core.enums.StaticLabeledEnumResolver;

        specialinvoke $r0.<org.springframework.core.enums.StaticLabeledEnumResolver: void <init>()>();

        <org.springframework.core.enums.StaticLabeledEnumResolver: org.springframework.core.enums.StaticLabeledEnumResolver INSTANCE> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.core.enums.StaticLabeledEnumResolver r0;

        r0 := @this: org.springframework.core.enums.StaticLabeledEnumResolver;

        specialinvoke r0.<org.springframework.core.enums.AbstractCachingLabeledEnumResolver: void <init>()>();

        return;
    }

    public static org.springframework.core.enums.StaticLabeledEnumResolver instance()
    {
        org.springframework.core.enums.StaticLabeledEnumResolver $r0;

        $r0 = <org.springframework.core.enums.StaticLabeledEnumResolver: org.springframework.core.enums.StaticLabeledEnumResolver INSTANCE>;

        return $r0;
    }

    protected java.util.Set findLabeledEnums(java.lang.Class)
    {
        java.util.TreeSet $r0;
        int i0, $i1, $i2, i3;
        java.lang.String $r12;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalAccessException $r7;
        org.springframework.core.enums.LabeledEnum $r6;
        java.lang.reflect.Field r3;
        org.springframework.core.enums.StaticLabeledEnumResolver r8;
        java.lang.reflect.Field[] $r2;
        java.lang.Class r1, $r4;
        java.lang.Object $r5;
        java.lang.StringBuilder $r9, $r11;
        org.apache.commons.logging.Log $r10;

        r8 := @this: org.springframework.core.enums.StaticLabeledEnumResolver;

        r1 := @parameter0: java.lang.Class;

        $r0 = new java.util.TreeSet;

        specialinvoke $r0.<java.util.TreeSet: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i0 = lengthof $r2;

        i3 = 0;

        goto label6;

     label1:
        r3 = $r2[i3];

        $i1 = virtualinvoke r3.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z0 == 0 goto label5;

        $i2 = virtualinvoke r3.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z1 == 0 goto label5;

        $r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z2 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z2 == 0 goto label5;

     label2:
        $r5 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $z3 = $r5 instanceof org.springframework.core.enums.LabeledEnum;

        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z3, "Field value must be a LabeledEnum instance");

        $r6 = (org.springframework.core.enums.LabeledEnum) $r5;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r6);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r10 = r8.<org.springframework.core.enums.StaticLabeledEnumResolver: org.apache.commons.logging.Log logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to access field value: ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r12, $r7);

     label5:
        i3 = i3 + 1;

     label6:
        if i3 < i0 goto label1;

        return $r0;

        catch java.lang.IllegalAccessException from label2 to label3 with label4;
    }
}
