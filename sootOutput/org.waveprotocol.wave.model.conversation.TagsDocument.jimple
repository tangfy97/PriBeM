public class org.waveprotocol.wave.model.conversation.TagsDocument extends java.lang.Object
{
    private final org.waveprotocol.wave.model.document.MutableDocument doc;
    private final java.util.List tagElements;
    private final java.util.List listeners;

    public void <init>(org.waveprotocol.wave.model.document.MutableDocument)
    {
        org.waveprotocol.wave.model.conversation.TagsDocument r0;
        org.waveprotocol.wave.model.document.MutableDocument r2;
        java.util.ArrayList $r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.conversation.TagsDocument;

        r2 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.conversation.TagsDocument: java.util.List tagElements> = $r1;

        r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc> = r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.conversation.TagsDocument: java.util.List listeners> = $r3;

        return;
    }

    public void addListener(org.waveprotocol.wave.model.conversation.TagsDocument$Listener)
    {
        java.util.List $r2;
        org.waveprotocol.wave.model.conversation.TagsDocument$Listener r1;
        org.waveprotocol.wave.model.conversation.TagsDocument r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.TagsDocument;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.TagsDocument$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: java.util.List listeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addTag(java.lang.String, int)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r6;
        org.waveprotocol.wave.model.conversation.TagsDocument r0;
        org.waveprotocol.wave.model.document.MutableDocument $r2, $r7;
        org.waveprotocol.wave.model.document.util.Point$El $r4;
        int i0;
        java.lang.Object $r1, $r3;
        java.lang.String r5;

        r0 := @this: org.waveprotocol.wave.model.conversation.TagsDocument;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.TagsDocument: java.lang.Object getNthTagNode(int)>(i0);

        $r2 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getDocumentElement()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r3, $r1);

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.util.XmlStringBuilder getXmlFor(java.lang.String)>(r5);

        $r7 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        interfaceinvoke $r7.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object insertXml(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r4, $r6);

        return;
    }

    private java.lang.Object getNthTagNode(int)
    {
        org.waveprotocol.wave.model.conversation.TagsDocument r0;
        org.waveprotocol.wave.model.document.MutableDocument $r1, $r2, $r4, $r6;
        int i0, i1;
        java.lang.Object $r3, $r5, r7;

        r0 := @this: org.waveprotocol.wave.model.conversation.TagsDocument;

        i0 := @parameter0: int;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r3 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getDocumentElement()>();

        r7 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getFirstChild(java.lang.Object)>($r3);

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        if r7 != null goto label2;

        return null;

     label2:
        $r6 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r7);

        i1 = i1 + 1;

        goto label1;

     label3:
        $r4 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object asElement(java.lang.Object)>(r7);

        return $r5;
    }

    public void addTag(java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r4;
        java.util.List $r2;
        org.waveprotocol.wave.model.conversation.TagsDocument r1;
        java.lang.Object $r5;
        java.lang.String r0;
        org.waveprotocol.wave.model.document.MutableDocument $r3;

        r1 := @this: org.waveprotocol.wave.model.conversation.TagsDocument;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.waveprotocol.wave.model.conversation.TagsDocument: java.util.List tagElements>;

        $r3 = r1.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r4 = specialinvoke r1.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.util.XmlStringBuilder getXmlFor(java.lang.String)>(r0);

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object appendXml(org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r4);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        return;
    }

    private org.waveprotocol.wave.model.document.util.XmlStringBuilder getXmlFor(java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r1, $r2;
        org.waveprotocol.wave.model.conversation.TagsDocument r3;
        java.lang.String r0;

        r3 := @this: org.waveprotocol.wave.model.conversation.TagsDocument;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createText(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String)>("tag");

        return $r2;
    }

    public void deleteTag(int)
    {
        org.waveprotocol.wave.model.conversation.TagsDocument r0;
        int i0;
        java.lang.Object $r1;
        org.waveprotocol.wave.model.document.MutableDocument $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.TagsDocument;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.TagsDocument: java.lang.Object getNthTagNode(int)>(i0);

        $r2 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.MutableDocument: void deleteNode(java.lang.Object)>($r1);

        return;
    }

    public void deleteTag(java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.TagsDocument r0;
        java.lang.String $r11, r12;
        boolean $z0;
        org.waveprotocol.wave.model.document.MutableDocument $r1, $r2, $r4, $r6, $r7, $r10, $r13, $r15;
        java.lang.Object $r3, $r5, $r8, $r9, r14;

        r0 := @this: org.waveprotocol.wave.model.conversation.TagsDocument;

        r12 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r3 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getDocumentElement()>();

        r14 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getFirstChild(java.lang.Object)>($r3);

     label1:
        if r14 == null goto label3;

        $r4 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object asElement(java.lang.Object)>(r14);

        if $r5 == null goto label2;

        $r7 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r6 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r8 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getFirstChild(java.lang.Object)>(r14);

        $r9 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object asText(java.lang.Object)>($r8);

        if $r9 == null goto label2;

        $r10 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.String getData(java.lang.Object)>($r9);

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z0 == 0 goto label2;

        $r13 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        interfaceinvoke $r13.<org.waveprotocol.wave.model.document.MutableDocument: void deleteNode(java.lang.Object)>($r5);

        return;

     label2:
        $r15 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        r14 = interfaceinvoke $r15.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r14);

        goto label1;

     label3:
        return;
    }

    public void processInitialState()
    {
        org.waveprotocol.wave.model.conversation.TagsDocument r1;
        java.util.ArrayList $r0;
        java.lang.String $r15;
        boolean $z0;
        java.util.Iterator $r5;
        org.waveprotocol.wave.model.document.MutableDocument $r2, $r3, $r7, $r8, $r10, $r11, $r14, $r16, $r19;
        java.util.List $r17;
        java.lang.Object $r4, $r6, $r9, $r12, $r13, $r18, r20;

        r1 := @this: org.waveprotocol.wave.model.conversation.TagsDocument;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r1.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r2 = r1.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getDocumentElement()>();

        r20 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getFirstChild(java.lang.Object)>($r4);

     label1:
        if r20 == null goto label4;

        $r11 = r1.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r10 = r1.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r12 = interfaceinvoke $r10.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getFirstChild(java.lang.Object)>(r20);

        $r13 = interfaceinvoke $r11.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object asText(java.lang.Object)>($r12);

        if $r13 != null goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r20);

        goto label3;

     label2:
        $r14 = r1.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r15 = interfaceinvoke $r14.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.String getData(java.lang.Object)>($r13);

        specialinvoke r1.<org.waveprotocol.wave.model.conversation.TagsDocument: void notifyAddTag(java.lang.String)>($r15);

        $r17 = r1.<org.waveprotocol.wave.model.conversation.TagsDocument: java.util.List tagElements>;

        $r16 = r1.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r18 = interfaceinvoke $r16.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object asElement(java.lang.Object)>(r20);

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r18);

     label3:
        $r19 = r1.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        r20 = interfaceinvoke $r19.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r20);

        goto label1;

     label4:
        $r5 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r8 = r1.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r7 = r1.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r9 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object asElement(java.lang.Object)>($r6);

        interfaceinvoke $r8.<org.waveprotocol.wave.model.document.MutableDocument: void deleteNode(java.lang.Object)>($r9);

        goto label5;

     label6:
        return;
    }

    private void notifyAddTag(java.lang.String)
    {
        java.util.List $r1;
        org.waveprotocol.wave.model.conversation.TagsDocument$Listener r4;
        org.waveprotocol.wave.model.conversation.TagsDocument r0;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.lang.String r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.TagsDocument;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: java.util.List listeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.TagsDocument$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.TagsDocument$Listener: void onAdd(java.lang.String)>(r5);

        goto label1;

     label2:
        return;
    }

    private void notifyRemoveTag(int)
    {
        java.util.List $r1;
        org.waveprotocol.wave.model.conversation.TagsDocument$Listener r4;
        org.waveprotocol.wave.model.conversation.TagsDocument r0;
        java.util.Iterator $r2;
        int i0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.TagsDocument;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: java.util.List listeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.TagsDocument$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.TagsDocument$Listener: void onRemove(int)>(i0);

        goto label1;

     label2:
        return;
    }

    public void handleInsertedElement(java.lang.Object)
    {
        org.waveprotocol.wave.model.conversation.TagsDocument r0;
        org.waveprotocol.wave.model.document.MutableDocument $r3, $r4, $r5;
        java.util.List $r2;
        java.lang.Object r1, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.waveprotocol.wave.model.conversation.TagsDocument;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: java.util.List tagElements>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r4 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r5 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r3 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: org.waveprotocol.wave.model.document.MutableDocument doc>;

        $r6 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getFirstChild(java.lang.Object)>(r1);

        $r7 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object asText(java.lang.Object)>($r6);

        $r8 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.String getData(java.lang.Object)>($r7);

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.TagsDocument: void notifyAddTag(java.lang.String)>($r8);

        return;
    }

    public void handleDeletedElement(java.lang.Object)
    {
        java.util.List $r2, $r3;
        org.waveprotocol.wave.model.conversation.TagsDocument r0;
        int $i0, $i2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.TagsDocument;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: java.util.List tagElements>;

        $i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>(r1);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        return;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.conversation.TagsDocument: java.util.List tagElements>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object remove(int)>($i0);

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.TagsDocument: void notifyRemoveTag(int)>($i0);

        return;
    }
}
