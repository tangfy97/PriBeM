public abstract class com.hp.hpl.jena.sparql.util.graph.GraphListenerBase extends java.lang.Object implements com.hp.hpl.jena.graph.GraphListener
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.graph.GraphListenerBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.graph.GraphListenerBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void notifyAddTriple(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.util.graph.GraphListenerBase r0;
        com.hp.hpl.jena.graph.Graph r2;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.graph.GraphListenerBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Triple;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.graph.GraphListenerBase: void addEvent(com.hp.hpl.jena.graph.Triple)>(r1);

        return;
    }

    public void notifyAddArray(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple[])
    {
        int $i0, i1;
        com.hp.hpl.jena.sparql.util.graph.GraphListenerBase r1;
        com.hp.hpl.jena.graph.Triple[] r0;
        com.hp.hpl.jena.graph.Graph r3;
        com.hp.hpl.jena.graph.Triple $r2;

        r1 := @this: com.hp.hpl.jena.sparql.util.graph.GraphListenerBase;

        r3 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter1: com.hp.hpl.jena.graph.Triple[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r2 = r0[i1];

        virtualinvoke r1.<com.hp.hpl.jena.sparql.util.graph.GraphListenerBase: void addEvent(com.hp.hpl.jena.graph.Triple)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void notifyAddList(com.hp.hpl.jena.graph.Graph, java.util.List)
    {
        java.util.List r2;
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.util.graph.GraphListenerBase r0;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.graph.GraphListenerBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter1: java.util.List;

        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.graph.GraphListenerBase: void notifyAddIterator(com.hp.hpl.jena.graph.Graph,java.util.Iterator)>(r1, $r3);

        return;
    }

    public void notifyAddIterator(com.hp.hpl.jena.graph.Graph, java.util.Iterator)
    {
        java.util.Iterator r0;
        com.hp.hpl.jena.sparql.util.graph.GraphListenerBase r1;
        java.lang.Object $r2;
        com.hp.hpl.jena.graph.Graph r4;
        boolean $z0;
        com.hp.hpl.jena.graph.Triple $r3;

        r1 := @this: com.hp.hpl.jena.sparql.util.graph.GraphListenerBase;

        r4 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter1: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (com.hp.hpl.jena.graph.Triple) $r2;

        virtualinvoke r1.<com.hp.hpl.jena.sparql.util.graph.GraphListenerBase: void addEvent(com.hp.hpl.jena.graph.Triple)>($r3);

        goto label1;

     label2:
        return;
    }

    public void notifyAddGraph(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.sparql.util.graph.GraphListenerBase r0;
        com.hp.hpl.jena.graph.Graph r1, r2;

        r0 := @this: com.hp.hpl.jena.sparql.util.graph.GraphListenerBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter1: com.hp.hpl.jena.graph.Graph;

        return;
    }

    public void notifyDeleteTriple(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.util.graph.GraphListenerBase r0;
        com.hp.hpl.jena.graph.Graph r2;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.graph.GraphListenerBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Triple;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.graph.GraphListenerBase: void deleteEvent(com.hp.hpl.jena.graph.Triple)>(r1);

        return;
    }

    public void notifyDeleteList(com.hp.hpl.jena.graph.Graph, java.util.List)
    {
        java.util.List r2;
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.util.graph.GraphListenerBase r0;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.graph.GraphListenerBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter1: java.util.List;

        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.graph.GraphListenerBase: void notifyDeleteIterator(com.hp.hpl.jena.graph.Graph,java.util.Iterator)>(r1, $r3);

        return;
    }

    public void notifyDeleteArray(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple[])
    {
        int $i0, i1;
        com.hp.hpl.jena.sparql.util.graph.GraphListenerBase r1;
        com.hp.hpl.jena.graph.Triple[] r0;
        com.hp.hpl.jena.graph.Graph r3;
        com.hp.hpl.jena.graph.Triple $r2;

        r1 := @this: com.hp.hpl.jena.sparql.util.graph.GraphListenerBase;

        r3 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter1: com.hp.hpl.jena.graph.Triple[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r2 = r0[i1];

        virtualinvoke r1.<com.hp.hpl.jena.sparql.util.graph.GraphListenerBase: void deleteEvent(com.hp.hpl.jena.graph.Triple)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void notifyDeleteIterator(com.hp.hpl.jena.graph.Graph, java.util.Iterator)
    {
        java.util.Iterator r0;
        com.hp.hpl.jena.sparql.util.graph.GraphListenerBase r1;
        java.lang.Object $r2;
        com.hp.hpl.jena.graph.Graph r4;
        boolean $z0;
        com.hp.hpl.jena.graph.Triple $r3;

        r1 := @this: com.hp.hpl.jena.sparql.util.graph.GraphListenerBase;

        r4 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter1: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (com.hp.hpl.jena.graph.Triple) $r2;

        virtualinvoke r1.<com.hp.hpl.jena.sparql.util.graph.GraphListenerBase: void deleteEvent(com.hp.hpl.jena.graph.Triple)>($r3);

        goto label1;

     label2:
        return;
    }

    public void notifyDeleteGraph(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.sparql.util.graph.GraphListenerBase r0;
        com.hp.hpl.jena.graph.Graph r1, r2;

        r0 := @this: com.hp.hpl.jena.sparql.util.graph.GraphListenerBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter1: com.hp.hpl.jena.graph.Graph;

        return;
    }

    protected abstract void addEvent(com.hp.hpl.jena.graph.Triple);

    protected abstract void deleteEvent(com.hp.hpl.jena.graph.Triple);

    public void notifyEvent(com.hp.hpl.jena.graph.Graph, java.lang.Object)
    {
        com.hp.hpl.jena.graph.GraphEvents $r1, $r2;
        java.lang.Object r0;
        com.hp.hpl.jena.sparql.util.graph.GraphListenerBase r3;
        com.hp.hpl.jena.graph.Graph r4;
        boolean $z0, $z1;

        r3 := @this: com.hp.hpl.jena.sparql.util.graph.GraphListenerBase;

        r4 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter1: java.lang.Object;

        $r1 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents startRead>;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r3.<com.hp.hpl.jena.sparql.util.graph.GraphListenerBase: void startRead()>();

        goto label2;

     label1:
        $r2 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents finishRead>;

        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        virtualinvoke r3.<com.hp.hpl.jena.sparql.util.graph.GraphListenerBase: void finishRead()>();

     label2:
        return;
    }

    protected void startRead()
    {
        com.hp.hpl.jena.sparql.util.graph.GraphListenerBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.graph.GraphListenerBase;

        return;
    }

    protected void finishRead()
    {
        com.hp.hpl.jena.sparql.util.graph.GraphListenerBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.graph.GraphListenerBase;

        return;
    }
}
