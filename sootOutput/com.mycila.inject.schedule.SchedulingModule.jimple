public final class com.mycila.inject.schedule.SchedulingModule extends com.google.inject.AbstractModule
{
    private static final java.util.logging.Logger LOGGER;

    public void <init>()
    {
        com.mycila.inject.schedule.SchedulingModule r0;

        r0 := @this: com.mycila.inject.schedule.SchedulingModule;

        specialinvoke r0.<com.google.inject.AbstractModule: void <init>()>();

        return;
    }

    protected void configure()
    {
        com.google.inject.binder.AnnotatedBindingBuilder $r1;
        com.mycila.inject.schedule.SchedulingModule r0;
        com.mycila.inject.schedule.SchedulingModule$1 $r3;
        com.google.inject.binder.ScopedBindingBuilder $r2;
        com.mycila.inject.schedule.SchedulingModule$2 $r4;

        r0 := @this: com.mycila.inject.schedule.SchedulingModule;

        virtualinvoke r0.<com.mycila.inject.schedule.SchedulingModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lcom/mycila/inject/schedule/SchedulingModule$Init;");

        $r1 = virtualinvoke r0.<com.mycila.inject.schedule.SchedulingModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/quartz/SchedulerFactory;");

        $r2 = interfaceinvoke $r1.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/quartz/impl/StdSchedulerFactory;");

        interfaceinvoke $r2.<com.google.inject.binder.ScopedBindingBuilder: void in(java.lang.Class)>(class "Ljavax/inject/Singleton;");

        $r3 = new com.mycila.inject.schedule.SchedulingModule$1;

        specialinvoke $r3.<com.mycila.inject.schedule.SchedulingModule$1: void <init>(com.mycila.inject.schedule.SchedulingModule)>(r0);

        $r4 = new com.mycila.inject.schedule.SchedulingModule$2;

        specialinvoke $r4.<com.mycila.inject.schedule.SchedulingModule$2: void <init>(com.mycila.inject.schedule.SchedulingModule)>(r0);

        virtualinvoke r0.<com.mycila.inject.schedule.SchedulingModule: void bindListener(com.google.inject.matcher.Matcher,com.google.inject.spi.TypeListener)>($r3, $r4);

        return;
    }

    org.quartz.Scheduler scheduler(org.quartz.SchedulerFactory) throws org.quartz.SchedulerException
    {
        org.quartz.SchedulerFactory r0;
        com.mycila.inject.schedule.SchedulingModule r2;
        org.quartz.Scheduler $r1;
        boolean $z0;

        r2 := @this: com.mycila.inject.schedule.SchedulingModule;

        r0 := @parameter0: org.quartz.SchedulerFactory;

        $r1 = interfaceinvoke r0.<org.quartz.SchedulerFactory: org.quartz.Scheduler getScheduler()>();

        $z0 = interfaceinvoke $r1.<org.quartz.Scheduler: boolean isStarted()>();

        if $z0 != 0 goto label1;

        interfaceinvoke $r1.<org.quartz.Scheduler: void start()>();

     label1:
        return $r1;
    }

    static java.util.logging.Logger access$000()
    {
        java.util.logging.Logger $r0;

        $r0 = <com.mycila.inject.schedule.SchedulingModule: java.util.logging.Logger LOGGER>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lcom/mycila/inject/schedule/SchedulingModule;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.mycila.inject.schedule.SchedulingModule: java.util.logging.Logger LOGGER> = $r2;

        return;
    }
}
