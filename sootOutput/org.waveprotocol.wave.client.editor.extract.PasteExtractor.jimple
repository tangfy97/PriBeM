public class org.waveprotocol.wave.client.editor.extract.PasteExtractor extends java.lang.Object
{
    public static final org.waveprotocol.wave.common.logging.LoggerBundle LOG;
    private static final org.waveprotocol.wave.client.clipboard.Clipboard clipboard;
    private static final org.waveprotocol.wave.client.clipboard.PasteBufferImpl pasteBuffer;
    private boolean busy;
    private final org.waveprotocol.wave.client.scheduler.CommandQueue deferredCommands;
    private final org.waveprotocol.wave.client.editor.selection.content.SelectionHelper aggressiveSelectionHelper;
    private final org.waveprotocol.wave.client.editor.content.CMutableDocument mutableDocument;
    private final org.waveprotocol.wave.model.operation.OperationSequencer operationSequencer;
    private final org.waveprotocol.wave.model.document.util.ReadableDocumentView renderedContent;
    private final org.waveprotocol.wave.model.document.util.ReadableDocumentView persistentContent;
    private static final org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer PASTE_FORMAT_RENDERER;
    private final org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer subtreeRenderer;
    private final org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic annotationLogic;
    private final org.waveprotocol.wave.model.document.indexed.Validator validator;
    private final org.waveprotocol.wave.client.editor.EditorInstrumentor instrumentor;
    private final boolean useSemanticCopyPaste;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.client.scheduler.CommandQueue, org.waveprotocol.wave.client.editor.selection.content.SelectionHelper, org.waveprotocol.wave.client.editor.content.CMutableDocument, org.waveprotocol.wave.model.document.util.ReadableDocumentView, org.waveprotocol.wave.model.document.util.ReadableDocumentView, org.waveprotocol.wave.model.document.util.AnnotationRegistry, org.waveprotocol.wave.model.operation.OperationSequencer, org.waveprotocol.wave.model.document.indexed.Validator, org.waveprotocol.wave.client.editor.EditorInstrumentor, boolean)
    {
        org.waveprotocol.wave.model.document.util.ReadableDocumentView r5, r6;
        org.waveprotocol.wave.client.editor.extract.PasteExtractor r0;
        org.waveprotocol.wave.model.operation.OperationSequencer r4;
        org.waveprotocol.wave.model.document.indexed.Validator r7;
        org.waveprotocol.wave.client.editor.EditorInstrumentor r11;
        org.waveprotocol.wave.client.editor.content.CMutableDocument r3;
        org.waveprotocol.wave.model.document.util.AnnotationRegistry r10;
        org.waveprotocol.wave.client.scheduler.CommandQueue r1;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic $r9;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper r2;
        org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer $r8;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.PasteExtractor;

        r1 := @parameter0: org.waveprotocol.wave.client.scheduler.CommandQueue;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper;

        r3 := @parameter2: org.waveprotocol.wave.client.editor.content.CMutableDocument;

        r5 := @parameter3: org.waveprotocol.wave.model.document.util.ReadableDocumentView;

        r6 := @parameter4: org.waveprotocol.wave.model.document.util.ReadableDocumentView;

        r10 := @parameter5: org.waveprotocol.wave.model.document.util.AnnotationRegistry;

        r4 := @parameter6: org.waveprotocol.wave.model.operation.OperationSequencer;

        r7 := @parameter7: org.waveprotocol.wave.model.document.indexed.Validator;

        r11 := @parameter8: org.waveprotocol.wave.client.editor.EditorInstrumentor;

        z0 := @parameter9: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean busy> = 0;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.scheduler.CommandQueue deferredCommands> = r1;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper aggressiveSelectionHelper> = r2;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.content.CMutableDocument mutableDocument> = r3;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.operation.OperationSequencer operationSequencer> = r4;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.document.util.ReadableDocumentView renderedContent> = r5;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.document.util.ReadableDocumentView persistentContent> = r6;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.document.indexed.Validator validator> = r7;

        $r8 = new org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer;

        specialinvoke $r8.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: void <init>(org.waveprotocol.wave.model.document.ReadableWDocument)>(r3);

        r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer subtreeRenderer> = $r8;

        $r9 = new org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic;

        specialinvoke $r9.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: void <init>(org.waveprotocol.wave.model.document.ReadableWDocument,org.waveprotocol.wave.model.document.util.AnnotationRegistry)>(r3, r10);

        r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic annotationLogic> = $r9;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.EditorInstrumentor instrumentor> = r11;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean useSemanticCopyPaste> = z0;

        return;
    }

    public boolean handlePasteEvent(org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection)
    {
        org.waveprotocol.wave.client.clipboard.PasteBufferImpl $r3;
        org.waveprotocol.wave.client.editor.extract.PasteExtractor$1 $r4;
        org.waveprotocol.wave.client.editor.extract.PasteExtractor r0;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r1;
        org.waveprotocol.wave.client.scheduler.CommandQueue $r6;
        org.waveprotocol.wave.client.editor.content.ContentRange $r2;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection r5;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.PasteExtractor;

        r5 := @parameter0: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper aggressiveSelectionHelper>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.client.editor.content.ContentRange getOrderedSelectionPoints()>();

        if $r2 != null goto label1;

        return 1;

     label1:
        r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean busy> = 1;

        $r3 = <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.clipboard.PasteBufferImpl pasteBuffer>;

        virtualinvoke $r3.<org.waveprotocol.wave.client.clipboard.PasteBufferImpl: void prepareForPaste()>();

        $r6 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.scheduler.CommandQueue deferredCommands>;

        $r4 = new org.waveprotocol.wave.client.editor.extract.PasteExtractor$1;

        specialinvoke $r4.<org.waveprotocol.wave.client.editor.extract.PasteExtractor$1: void <init>(org.waveprotocol.wave.client.editor.extract.PasteExtractor,org.waveprotocol.wave.client.editor.content.ContentRange,org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection)>(r0, $r2, r5);

        interfaceinvoke $r6.<org.waveprotocol.wave.client.scheduler.CommandQueue: void addCommand(com.google.gwt.user.client.Command)>($r4);

        return 0;
    }

    public boolean isBusy()
    {
        org.waveprotocol.wave.client.editor.extract.PasteExtractor r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.PasteExtractor;

        $z0 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean busy>;

        return $z0;
    }

    void extract(com.google.gwt.dom.client.Element, org.waveprotocol.wave.client.editor.content.ContentRange, org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection)
    {
        org.waveprotocol.wave.model.operation.OperationSequencer r2;
        org.waveprotocol.wave.client.editor.content.CMutableDocument r1, r3;
        org.waveprotocol.wave.model.util.ReadableStringSet $r19, $r21, $r41;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r13, $r28;
        org.waveprotocol.wave.client.editor.content.ContentRange r4;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic $r15, $r20, $r32, $r40;
        com.google.gwt.dom.client.Element r11, $r96;
        java.lang.StringBuilder $r36, $r37, $r38, $r48, $r49, $r51, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r71, $r72, $r75;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters $r29;
        org.waveprotocol.wave.common.logging.Logger $r35, $r47, $r61, $r83, $r87;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r25, $r45, $r84, $r88;
        org.waveprotocol.wave.client.editor.content.ContentElement $r95;
        java.lang.String $r39, $r50, $r52, $r57, $r59, $r70, $r74, $r76, r92, r93;
        org.waveprotocol.wave.model.document.util.Point $r5, $r6, $r7, $r8, $r24, r90, r91;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType $r14, $r31;
        org.waveprotocol.wave.model.util.StringSet $r42;
        org.waveprotocol.wave.model.util.StringMap $r16, $r33;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer $r12;
        org.waveprotocol.wave.client.editor.EditorInstrumentor$Action $r9, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.model.document.util.PointRange $r80;
        org.waveprotocol.wave.client.editor.extract.PasteExtractor r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r34, $r46, $r60, $r82, $r86;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection $r79, r89;
        java.util.List $r53;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder $r17;
        org.waveprotocol.wave.client.clipboard.Clipboard $r77, $r78;
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r30;
        org.waveprotocol.wave.model.document.indexed.Validator $r23, $r44;
        org.waveprotocol.wave.model.operation.OperationException $r81, $r85;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        double $d0, $d1, d2;
        java.util.Iterator $r54;
        org.waveprotocol.wave.client.editor.EditorInstrumentor $r10, $r27;
        org.waveprotocol.wave.model.document.RangedAnnotation r56;
        org.waveprotocol.wave.model.document.operation.Nindo $r22, $r43;
        java.lang.Object $r18, $r55, $r58, $r73, $r94;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.PasteExtractor;

        r11 := @parameter0: com.google.gwt.dom.client.Element;

        r4 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentRange;

        r89 := @parameter2: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection;

        r1 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.content.CMutableDocument mutableDocument>;

        r2 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.operation.OperationSequencer operationSequencer>;

        r3 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.content.CMutableDocument mutableDocument>;

        $r5 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.ContentRange: org.waveprotocol.wave.model.document.util.Point getFirst()>();

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.document.util.Point normalize(org.waveprotocol.wave.model.document.util.Point)>($r5);

        $r7 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.ContentRange: org.waveprotocol.wave.model.document.util.Point getSecond()>();

        $r8 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.document.util.Point normalize(org.waveprotocol.wave.model.document.util.Point)>($r7);

        r90 = $r8;

        $z0 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.ContentRange: boolean isCollapsed()>();

        if $z0 != 0 goto label01;

        $r80 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.CMutableDocument: org.waveprotocol.wave.model.document.util.PointRange deleteRange(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r6, $r8);

        virtualinvoke $r80.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point getFirst()>();

        r90 = virtualinvoke $r80.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point getSecond()>();

     label01:
        r91 = r90;

        $i0 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r90);

        r92 = null;

        r93 = null;

        $z1 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean useSemanticCopyPaste>;

        if $z1 == 0 goto label02;

        $r77 = <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.clipboard.Clipboard clipboard>;

        r92 = virtualinvoke $r77.<org.waveprotocol.wave.client.clipboard.Clipboard: java.lang.String maybeGetWaveXml(com.google.gwt.dom.client.Element)>(r11);

        $r78 = <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.clipboard.Clipboard clipboard>;

        r93 = virtualinvoke $r78.<org.waveprotocol.wave.client.clipboard.Clipboard: java.lang.String maybeGetAnnotations(com.google.gwt.dom.client.Element)>(r11);

     label02:
        $r79 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection LEFT>;

        $z2 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean useSemanticCopyPaste>;

        if $z2 == 0 goto label08;

        if r92 == null goto label08;

        $z3 = virtualinvoke r92.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label12;

        $r27 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.EditorInstrumentor instrumentor>;

        $r26 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action CLIPBOARD_PASTE_FROM_WAVE>;

        interfaceinvoke $r27.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r26);

        $r28 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.document.operation.Nindo$Builder at(int)>($i0);

        $r29 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters BLIP_TEXT>;

        $r30 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createFromXmlStringWithContraints(java.lang.String,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)>(r92, $r29);

        $r32 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic annotationLogic>;

        $r31 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType RICH_TEXT>;

        $r33 = virtualinvoke $r32.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: org.waveprotocol.wave.model.util.StringMap stripKeys(org.waveprotocol.wave.model.document.ReadableAnnotationSet,int,org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection,org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType,org.waveprotocol.wave.model.document.operation.Nindo$Builder)>(r1, $i0, $r79, $r31, $r28);

        $d0 = staticinvoke <com.google.gwt.core.client.Duration: double currentTimeMillis()>();

        staticinvoke <org.waveprotocol.wave.model.document.MutableDocumentImpl: void appendXmlToBuilder(org.waveprotocol.wave.model.document.util.XmlStringBuilder,org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r30, $r28);

        $d1 = staticinvoke <com.google.gwt.core.client.Duration: double currentTimeMillis()>();

        d2 = $d1 - $d0;

        $r34 = <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.common.logging.LoggerBundle LOG>;

        $r35 = interfaceinvoke $r34.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("time taken: ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r35.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r39);

        $r40 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic annotationLogic>;

        $r41 = interfaceinvoke $r33.<org.waveprotocol.wave.model.util.StringMap: org.waveprotocol.wave.model.util.ReadableStringSet keySet()>();

        $r42 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        virtualinvoke $r40.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: void unstripKeys(org.waveprotocol.wave.model.document.operation.Nindo$Builder,org.waveprotocol.wave.model.util.ReadableStringSet,org.waveprotocol.wave.model.util.ReadableStringSet)>($r28, $r41, $r42);

        virtualinvoke $r28.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void finish()>();

        $r43 = virtualinvoke $r28.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: org.waveprotocol.wave.model.document.operation.Nindo build()>();

     label03:
        $r44 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.document.indexed.Validator validator>;

        interfaceinvoke $r44.<org.waveprotocol.wave.model.document.indexed.Validator: void maybeThrowOperationExceptionFor(org.waveprotocol.wave.model.document.operation.Nindo)>($r43);

        $i3 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.CMutableDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r91);

        $i4 = virtualinvoke $r30.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: int getLength()>();

        i13 = $i3 + $i4;

        interfaceinvoke r2.<org.waveprotocol.wave.model.operation.OperationSequencer: void begin()>();

        interfaceinvoke r2.<org.waveprotocol.wave.model.operation.OperationSequencer: void consume(java.lang.Object)>($r43);

        interfaceinvoke r2.<org.waveprotocol.wave.model.operation.OperationSequencer: void end()>();

        $r45 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper aggressiveSelectionHelper>;

        interfaceinvoke $r45.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setCaret(int)>(i13);

        $r46 = <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.common.logging.LoggerBundle LOG>;

        $r47 = interfaceinvoke $r46.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("annotations: ");

        $r50 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r93);

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r47.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r52);

        if r93 == null goto label05;

        $z4 = virtualinvoke r93.<java.lang.String: boolean isEmpty()>();

        if $z4 != 0 goto label05;

        $r53 = staticinvoke <org.waveprotocol.wave.client.clipboard.AnnotationSerializer: java.util.List deserialize(java.lang.String)>(r93);

        $r54 = interfaceinvoke $r53.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z5 = interfaceinvoke $r54.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label05;

        $r55 = interfaceinvoke $r54.<java.util.Iterator: java.lang.Object next()>();

        r56 = (org.waveprotocol.wave.model.document.RangedAnnotation) $r55;

        $i5 = interfaceinvoke r56.<org.waveprotocol.wave.model.document.RangedAnnotation: int start()>();

        $i6 = $i0 + $i5;

        $i7 = interfaceinvoke r56.<org.waveprotocol.wave.model.document.RangedAnnotation: int end()>();

        $i8 = $i0 + $i7;

        $r57 = interfaceinvoke r56.<org.waveprotocol.wave.model.document.RangedAnnotation: java.lang.String key()>();

        $r58 = interfaceinvoke r56.<org.waveprotocol.wave.model.document.RangedAnnotation: java.lang.Object value()>();

        $r59 = (java.lang.String) $r58;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.CMutableDocument: void setAnnotation(int,int,java.lang.String,java.lang.String)>($i6, $i8, $r57, $r59);

        $r60 = <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.common.logging.LoggerBundle LOG>;

        $r61 = interfaceinvoke $r60.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pos: ");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start: ");

        $i9 = interfaceinvoke r56.<org.waveprotocol.wave.model.document.RangedAnnotation: int start()>();

        $i10 = $i0 + $i9;

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" end: ");

        $i11 = interfaceinvoke r56.<org.waveprotocol.wave.model.document.RangedAnnotation: int end()>();

        $i12 = $i0 + $i11;

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key: ");

        $r70 = interfaceinvoke r56.<org.waveprotocol.wave.model.document.RangedAnnotation: java.lang.String key()>();

        $r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value: ");

        $r73 = interfaceinvoke r56.<org.waveprotocol.wave.model.document.RangedAnnotation: java.lang.Object value()>();

        $r74 = (java.lang.String) $r73;

        $r75 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r74);

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r61.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r76);

        goto label04;

     label05:
        goto label07;

     label06:
        $r85 := @caughtexception;

        $r86 = <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.common.logging.LoggerBundle LOG>;

        $r87 = interfaceinvoke $r86.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r87.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Semantic paste failed");

        $r88 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper aggressiveSelectionHelper>;

        interfaceinvoke $r88.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setCaret(org.waveprotocol.wave.model.document.util.Point)>(r91);

     label07:
        goto label12;

     label08:
        $r10 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.EditorInstrumentor instrumentor>;

        $r9 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action CLIPBOARD_PASTE_FROM_OUTSIDE>;

        interfaceinvoke $r10.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r9);

        $r12 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.richtext.RichTextTokenizer createTokenizer(com.google.gwt.dom.client.Element)>(r11);

        $r13 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.document.operation.Nindo$Builder at(int)>($i0);

        $r15 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic annotationLogic>;

        $r14 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType RICH_TEXT>;

        $r16 = virtualinvoke $r15.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: org.waveprotocol.wave.model.util.StringMap stripKeys(org.waveprotocol.wave.model.document.ReadableAnnotationSet,int,org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection,org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType,org.waveprotocol.wave.model.document.operation.Nindo$Builder)>(r1, $i0, $r79, $r14, $r13);

        $r17 = new org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        specialinvoke $r17.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void <init>(org.waveprotocol.wave.model.util.StringMap)>($r16);

        $r18 = virtualinvoke r91.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r19 = virtualinvoke $r17.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.util.ReadableStringSet applyMutations(org.waveprotocol.wave.model.richtext.RichTextTokenizer,org.waveprotocol.wave.model.document.operation.Nindo$Builder,org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r12, $r13, r1, $r18);

        $r20 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic annotationLogic>;

        $r21 = interfaceinvoke $r16.<org.waveprotocol.wave.model.util.StringMap: org.waveprotocol.wave.model.util.ReadableStringSet keySet()>();

        virtualinvoke $r20.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: void unstripKeys(org.waveprotocol.wave.model.document.operation.Nindo$Builder,org.waveprotocol.wave.model.util.ReadableStringSet,org.waveprotocol.wave.model.util.ReadableStringSet)>($r13, $r21, $r19);

        virtualinvoke $r13.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void finish()>();

        $r22 = virtualinvoke $r13.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: org.waveprotocol.wave.model.document.operation.Nindo build()>();

     label09:
        $r23 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.document.indexed.Validator validator>;

        interfaceinvoke $r23.<org.waveprotocol.wave.model.document.indexed.Validator: void maybeThrowOperationExceptionFor(org.waveprotocol.wave.model.document.operation.Nindo)>($r22);

        interfaceinvoke r2.<org.waveprotocol.wave.model.operation.OperationSequencer: void begin()>();

        interfaceinvoke r2.<org.waveprotocol.wave.model.operation.OperationSequencer: void consume(java.lang.Object)>($r22);

        interfaceinvoke r2.<org.waveprotocol.wave.model.operation.OperationSequencer: void end()>();

        $i1 = virtualinvoke $r17.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int getLastGoodCursorOffset()>();

        $i2 = $i0 + $i1;

        $r24 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.indexed.LocationMapper: org.waveprotocol.wave.model.document.util.Point locate(int)>($i2);

        $r25 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper aggressiveSelectionHelper>;

        interfaceinvoke $r25.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r24);

     label10:
        goto label12;

     label11:
        $r81 := @caughtexception;

        $r82 = <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.common.logging.LoggerBundle LOG>;

        $r83 = interfaceinvoke $r82.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r83.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Paste failed");

        $r84 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper aggressiveSelectionHelper>;

        interfaceinvoke $r84.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setCaret(org.waveprotocol.wave.model.document.util.Point)>(r91);

     label12:
        virtualinvoke r11.<com.google.gwt.dom.client.Element: void setInnerHTML(java.lang.String)>("");

        $r94 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.CMutableDocument: java.lang.Object getDocumentElement()>();

        $r95 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r94;

        $r96 = virtualinvoke $r95.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getContainerNodelet()>();

        staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: void focus(com.google.gwt.dom.client.Element)>($r96);

        return;

        catch org.waveprotocol.wave.model.operation.OperationException from label03 to label05 with label06;
        catch org.waveprotocol.wave.model.operation.OperationException from label09 to label10 with label11;
    }

    private org.waveprotocol.wave.model.document.operation.Nindo$Builder at(int)
    {
        int i0;
        org.waveprotocol.wave.client.editor.extract.PasteExtractor r1;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r0;

        r1 := @this: org.waveprotocol.wave.client.editor.extract.PasteExtractor;

        i0 := @parameter0: int;

        $r0 = new org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void <init>()>();

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void begin()>();

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void skip(int)>(i0);

        return $r0;
    }

    public boolean handleCopyOrCutEvent(org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper, boolean)
    {
        org.waveprotocol.wave.client.editor.extract.PasteExtractor$2 $r8;
        org.waveprotocol.wave.client.clipboard.PasteBufferImpl $r6;
        org.waveprotocol.wave.client.editor.extract.PasteExtractor r0;
        org.waveprotocol.wave.client.scheduler.CommandQueue $r9;
        org.waveprotocol.wave.model.document.util.FocusedRange $r4;
        org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper r5;
        com.google.gwt.dom.client.Element $r7;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r1, $r3;
        org.waveprotocol.wave.client.editor.content.ContentRange $r2;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.PasteExtractor;

        r5 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper;

        z0 := @parameter1: boolean;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper aggressiveSelectionHelper>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.client.editor.content.ContentRange getOrderedSelectionPoints()>();

        if $r2 != null goto label1;

        return 1;

     label1:
        $r3 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper aggressiveSelectionHelper>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()>();

        $r6 = <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.clipboard.PasteBufferImpl pasteBuffer>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.client.clipboard.PasteBufferImpl: com.google.gwt.dom.client.Element getContainer()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: void performCopyOrCut(org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper,com.google.gwt.dom.client.Element,org.waveprotocol.wave.client.editor.content.ContentRange,boolean)>(r5, $r7, $r2, z0);

        r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean busy> = 1;

        $r9 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.scheduler.CommandQueue deferredCommands>;

        $r8 = new org.waveprotocol.wave.client.editor.extract.PasteExtractor$2;

        specialinvoke $r8.<org.waveprotocol.wave.client.editor.extract.PasteExtractor$2: void <init>(org.waveprotocol.wave.client.editor.extract.PasteExtractor,boolean,org.waveprotocol.wave.model.document.util.FocusedRange)>(r0, z0, $r4);

        interfaceinvoke $r9.<org.waveprotocol.wave.client.scheduler.CommandQueue: void addCommand(com.google.gwt.user.client.Command)>($r8);

        return 0;
    }

    protected void performCopyOrCut(org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper, com.google.gwt.dom.client.Element, org.waveprotocol.wave.client.editor.content.ContentRange, boolean)
    {
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r31, $r41;
        org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer $r11;
        org.waveprotocol.wave.client.editor.content.ContentRange r0;
        java.lang.Exception $r55;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic $r46;
        com.google.gwt.dom.client.Element $r12, r60;
        java.lang.StringBuilder $r15, $r16, $r20, $r21, $r34, $r36, $r37, $r39, $r40, $r43, $r64, $r65, $r69;
        org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer $r45;
        org.waveprotocol.wave.common.logging.Logger $r57;
        java.lang.AssertionError $r66, $r67;
        java.lang.String $r17, $r22, $r42, $r44;
        org.waveprotocol.wave.model.document.util.Point $r1, $r2, $r13, $r18, $r24, $r25, $r26, $r27, $r28, $r29, $r35, $r38, $r47, $r51;
        java.lang.RuntimeException $r70;
        com.google.gwt.dom.client.Node $r49, $r53, $r71, $r72, $r73;
        org.waveprotocol.wave.client.editor.content.ContentNode r9;
        org.waveprotocol.wave.model.document.util.ReadableDocumentView $r5, $r10;
        boolean $z0, $z1, $z2, $z3, z4, $z5, $z6;
        org.waveprotocol.wave.model.document.util.PointRange $r32, $r68;
        org.waveprotocol.wave.client.editor.extract.PasteExtractor r4;
        org.waveprotocol.wave.common.logging.LoggerBundle $r56;
        java.util.List r62;
        org.waveprotocol.wave.client.clipboard.Clipboard $r30;
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r61;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher $r63;
        org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper r59;
        java.lang.Object $r6, $r7, $r8, $r48, $r52;

        r4 := @this: org.waveprotocol.wave.client.editor.extract.PasteExtractor;

        r59 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper;

        r60 := @parameter1: com.google.gwt.dom.client.Element;

        r0 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentRange;

        z4 := @parameter3: boolean;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRange: boolean isCollapsed()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRange: org.waveprotocol.wave.model.document.util.Point getFirst()>();

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRange: org.waveprotocol.wave.model.document.util.Point getSecond()>();

        $r63 = new org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        specialinvoke $r63.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: void <init>(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r1, $r2);

        $r5 = r4.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.document.util.ReadableDocumentView renderedContent>;

        $r6 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r7 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object nearestCommonAncestor(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object)>($r5, $r6, $r7);

        r9 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r8;

        $r11 = <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer PASTE_FORMAT_RENDERER>;

        $r10 = r4.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.document.util.ReadableDocumentView renderedContent>;

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer: com.google.gwt.dom.client.Element renderTree(org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.extract.SelectionMatcher)>($r10, r9, $r63);

        $r13 = virtualinvoke $r63.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point getHtmlStart()>();

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("html start is null, first: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r13, $r17);

        $r18 = virtualinvoke $r63.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point getHtmlEnd()>();

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("html end is null second: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r18, $r22);

        $z1 = <org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        $r51 = virtualinvoke $r63.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point getHtmlStart()>();

        $r52 = virtualinvoke $r51.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r53 = (com.google.gwt.dom.client.Node) $r52;

        $r71 = (com.google.gwt.dom.client.Node) $r12;

        $z6 = virtualinvoke $r71.<com.google.gwt.dom.client.Node: boolean isOrHasChild(com.google.gwt.dom.client.Node)>($r53);

        if $z6 != 0 goto label02;

        $r66 = new java.lang.AssertionError;

        specialinvoke $r66.<java.lang.AssertionError: void <init>(java.lang.Object)>("SelectionMatcher start not attached");

        throw $r66;

     label02:
        $z2 = <org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean $assertionsDisabled>;

        if $z2 != 0 goto label03;

        $r47 = virtualinvoke $r63.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point getHtmlEnd()>();

        $r48 = virtualinvoke $r47.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r49 = (com.google.gwt.dom.client.Node) $r48;

        $r72 = (com.google.gwt.dom.client.Node) $r12;

        $z5 = virtualinvoke $r72.<com.google.gwt.dom.client.Node: boolean isOrHasChild(com.google.gwt.dom.client.Node)>($r49);

        if $z5 != 0 goto label03;

        $r67 = new java.lang.AssertionError;

        specialinvoke $r67.<java.lang.AssertionError: void <init>(java.lang.Object)>("SelectionMatcher end not attached");

        throw $r67;

     label03:
        $r68 = new org.waveprotocol.wave.model.document.util.PointRange;

        $r24 = virtualinvoke $r63.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point getHtmlStart()>();

        $r25 = virtualinvoke $r63.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: org.waveprotocol.wave.model.document.util.Point getHtmlEnd()>();

        specialinvoke $r68.<org.waveprotocol.wave.model.document.util.PointRange: void <init>(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r24, $r25);

        $r26 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRange: org.waveprotocol.wave.model.document.util.Point getFirst()>();

        $r27 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.document.util.Point normalize(org.waveprotocol.wave.model.document.util.Point)>($r26);

        $r28 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRange: org.waveprotocol.wave.model.document.util.Point getSecond()>();

        $r29 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.document.util.Point normalize(org.waveprotocol.wave.model.document.util.Point)>($r28);

        $z3 = r4.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean useSemanticCopyPaste>;

        if $z3 == 0 goto label08;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Start: ");

        $r35 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRange: org.waveprotocol.wave.model.document.util.Point getFirst()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" End: ");

        $r38 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentRange: org.waveprotocol.wave.model.document.util.Point getSecond()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" docDebug: ");

        $r41 = r4.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.content.CMutableDocument mutableDocument>;

        $r42 = virtualinvoke $r41.<org.waveprotocol.wave.client.editor.content.CMutableDocument: java.lang.String toDebugString()>();

        $r43 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

     label04:
        $r45 = r4.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer subtreeRenderer>;

        r61 = virtualinvoke $r45.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.util.XmlStringBuilder renderRange(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r27, $r29);

        $r46 = r4.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic annotationLogic>;

        r62 = virtualinvoke $r46.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: java.util.List extractNormalizedAnnotation(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r27, $r29);

     label05:
        goto label07;

     label06:
        $r55 := @caughtexception;

        $r56 = <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.common.logging.LoggerBundle LOG>;

        $r57 = interfaceinvoke $r56.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r57.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>($r44);

        $r70 = new java.lang.RuntimeException;

        specialinvoke $r70.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r55);

        throw $r70;

     label07:
        goto label09;

     label08:
        r61 = null;

        r62 = null;

     label09:
        if z4 == 0 goto label10;

        $r31 = r4.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.content.CMutableDocument mutableDocument>;

        $r32 = virtualinvoke $r31.<org.waveprotocol.wave.client.editor.content.CMutableDocument: org.waveprotocol.wave.model.document.util.PointRange deleteRange(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r27, $r29);

        virtualinvoke $r32.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point getFirst()>();

     label10:
        $r30 = <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.clipboard.Clipboard clipboard>;

        $r73 = (com.google.gwt.dom.client.Node) $r12;

        virtualinvoke $r30.<org.waveprotocol.wave.client.clipboard.Clipboard: void fillBufferAndSetSelection(com.google.gwt.dom.client.Node,org.waveprotocol.wave.model.document.util.PointRange,org.waveprotocol.wave.model.document.util.XmlStringBuilder,java.lang.Iterable,boolean)>($r73, $r68, r61, r62, 0);

        return;

        catch java.lang.Exception from label04 to label05 with label06;
    }

    org.waveprotocol.wave.model.document.util.Point normalize(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.util.ReadableDocumentView $r2;
        org.waveprotocol.wave.client.editor.extract.PasteExtractor r0;
        org.waveprotocol.wave.model.document.util.Point r1, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.PasteExtractor;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.model.document.util.ReadableDocumentView persistentContent>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: org.waveprotocol.wave.model.document.util.Point getFilteredPoint(org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.model.document.util.Point)>($r2, r1);

        return $r3;
    }

    public boolean handleCopyEvent(org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper)
    {
        org.waveprotocol.wave.client.editor.EditorInstrumentor$Action $r1;
        org.waveprotocol.wave.client.editor.extract.PasteExtractor r0;
        org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper r3;
        org.waveprotocol.wave.client.editor.EditorInstrumentor $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.PasteExtractor;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.EditorInstrumentor instrumentor>;

        $r1 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action CLIPBOARD_COPY>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r1);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean handleCopyOrCutEvent(org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper,boolean)>(r3, 0);

        return $z0;
    }

    public boolean handleCutEvent(org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper)
    {
        org.waveprotocol.wave.client.editor.EditorInstrumentor$Action $r1;
        org.waveprotocol.wave.client.editor.extract.PasteExtractor r0;
        org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper r3;
        org.waveprotocol.wave.client.editor.EditorInstrumentor $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.PasteExtractor;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.EditorInstrumentor instrumentor>;

        $r1 = <org.waveprotocol.wave.client.editor.EditorInstrumentor$Action: org.waveprotocol.wave.client.editor.EditorInstrumentor$Action CLIPBOARD_CUT>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorInstrumentor: void record(org.waveprotocol.wave.client.editor.EditorInstrumentor$Action)>($r1);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean handleCopyOrCutEvent(org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper,boolean)>(r3, 1);

        return $z0;
    }

    private org.waveprotocol.wave.model.richtext.RichTextTokenizer createTokenizer(com.google.gwt.dom.client.Element)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl $r0;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImplFirefox $r3;
        org.waveprotocol.wave.client.editor.impl.HtmlViewImpl $r1, $r4;
        com.google.gwt.dom.client.Element r2;
        org.waveprotocol.wave.client.editor.extract.PasteExtractor r5;
        boolean $z0;

        r5 := @this: org.waveprotocol.wave.client.editor.extract.PasteExtractor;

        r2 := @parameter0: com.google.gwt.dom.client.Element;

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isFirefox()>();

        if $z0 == 0 goto label1;

        $r3 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImplFirefox;

        $r4 = new org.waveprotocol.wave.client.editor.impl.HtmlViewImpl;

        specialinvoke $r4.<org.waveprotocol.wave.client.editor.impl.HtmlViewImpl: void <init>(com.google.gwt.dom.client.Element)>(r2);

        specialinvoke $r3.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImplFirefox: void <init>(org.waveprotocol.wave.model.document.util.ElementStyleView)>($r4);

        return $r3;

     label1:
        $r0 = new org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl;

        $r1 = new org.waveprotocol.wave.client.editor.impl.HtmlViewImpl;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.impl.HtmlViewImpl: void <init>(com.google.gwt.dom.client.Element)>(r2);

        specialinvoke $r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl: void <init>(org.waveprotocol.wave.model.document.util.ElementStyleView)>($r1);

        return $r0;
    }

    static org.waveprotocol.wave.client.clipboard.PasteBufferImpl access$000()
    {
        org.waveprotocol.wave.client.clipboard.PasteBufferImpl $r0;

        $r0 = <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.clipboard.PasteBufferImpl pasteBuffer>;

        return $r0;
    }

    static boolean access$102(org.waveprotocol.wave.client.editor.extract.PasteExtractor, boolean)
    {
        org.waveprotocol.wave.client.editor.extract.PasteExtractor r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.PasteExtractor;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean busy> = z0;

        return z0;
    }

    static org.waveprotocol.wave.client.editor.selection.content.SelectionHelper access$200(org.waveprotocol.wave.client.editor.extract.PasteExtractor)
    {
        org.waveprotocol.wave.client.editor.extract.PasteExtractor r0;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.PasteExtractor;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper aggressiveSelectionHelper>;

        return $r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.debug.logger.DomLogger $r6;
        org.waveprotocol.wave.client.clipboard.PasteBufferImpl $r4;
        org.waveprotocol.wave.common.logging.LoggerBundle $r7;
        org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer $r5;
        java.lang.Class $r0;
        org.waveprotocol.wave.client.clipboard.Clipboard $r2, $r3;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/extract/PasteExtractor;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.extract.PasteExtractor: boolean $assertionsDisabled> = $z1;

        $r6 = new org.waveprotocol.wave.client.debug.logger.DomLogger;

        specialinvoke $r6.<org.waveprotocol.wave.client.debug.logger.DomLogger: void <init>(java.lang.String)>("paste");

        $r7 = (org.waveprotocol.wave.common.logging.LoggerBundle) $r6;

        <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.common.logging.LoggerBundle LOG> = $r7;

        $r2 = staticinvoke <org.waveprotocol.wave.client.clipboard.Clipboard: org.waveprotocol.wave.client.clipboard.Clipboard get()>();

        <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.clipboard.Clipboard clipboard> = $r2;

        $r3 = <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.clipboard.Clipboard clipboard>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.clipboard.Clipboard: org.waveprotocol.wave.client.clipboard.PasteBufferImpl getPasteBuffer()>();

        <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.clipboard.PasteBufferImpl pasteBuffer> = $r4;

        $r5 = staticinvoke <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer: org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer get()>();

        <org.waveprotocol.wave.client.editor.extract.PasteExtractor: org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer PASTE_FORMAT_RENDERER> = $r5;

        return;
    }
}
