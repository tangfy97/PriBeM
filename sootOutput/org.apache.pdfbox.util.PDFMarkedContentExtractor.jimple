public class org.apache.pdfbox.util.PDFMarkedContentExtractor extends org.apache.pdfbox.util.PDFStreamEngine
{
    private boolean suppressDuplicateOverlappingText;
    private java.util.List markedContents;
    private java.util.Stack currentMarkedContents;
    private java.util.Map characterListMapping;
    protected java.lang.String outputEncoding;
    private org.apache.pdfbox.util.TextNormalize normalize;

    public void <init>() throws java.io.IOException
    {
        java.util.Properties $r1;
        org.apache.pdfbox.util.PDFMarkedContentExtractor r0;
        java.util.HashMap $r4;
        java.lang.String $r6;
        org.apache.pdfbox.util.TextNormalize $r5;
        java.util.Stack $r3;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.pdfbox.util.PDFMarkedContentExtractor;

        $r1 = staticinvoke <org.apache.pdfbox.util.ResourceLoader: java.util.Properties loadProperties(java.lang.String,boolean)>("org/apache/pdfbox/resources/PDFMarkedContentExtractor.properties", 1);

        specialinvoke r0.<org.apache.pdfbox.util.PDFStreamEngine: void <init>(java.util.Properties)>($r1);

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: boolean suppressDuplicateOverlappingText> = 1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.List markedContents> = $r2;

        $r3 = new java.util.Stack;

        specialinvoke $r3.<java.util.Stack: void <init>()>();

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Stack currentMarkedContents> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Map characterListMapping> = $r4;

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: org.apache.pdfbox.util.TextNormalize normalize> = null;

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.lang.String outputEncoding> = null;

        $r5 = new org.apache.pdfbox.util.TextNormalize;

        $r6 = r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.lang.String outputEncoding>;

        specialinvoke $r5.<org.apache.pdfbox.util.TextNormalize: void <init>(java.lang.String)>($r6);

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: org.apache.pdfbox.util.TextNormalize normalize> = $r5;

        return;
    }

    public void <init>(java.util.Properties) throws java.io.IOException
    {
        java.util.Properties r1;
        org.apache.pdfbox.util.PDFMarkedContentExtractor r0;
        java.util.HashMap $r4;
        java.lang.String $r6;
        org.apache.pdfbox.util.TextNormalize $r5;
        java.util.Stack $r3;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.pdfbox.util.PDFMarkedContentExtractor;

        r1 := @parameter0: java.util.Properties;

        specialinvoke r0.<org.apache.pdfbox.util.PDFStreamEngine: void <init>(java.util.Properties)>(r1);

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: boolean suppressDuplicateOverlappingText> = 1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.List markedContents> = $r2;

        $r3 = new java.util.Stack;

        specialinvoke $r3.<java.util.Stack: void <init>()>();

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Stack currentMarkedContents> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Map characterListMapping> = $r4;

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: org.apache.pdfbox.util.TextNormalize normalize> = null;

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.lang.String outputEncoding> = null;

        $r5 = new org.apache.pdfbox.util.TextNormalize;

        $r6 = r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.lang.String outputEncoding>;

        specialinvoke $r5.<org.apache.pdfbox.util.TextNormalize: void <init>(java.lang.String)>($r6);

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: org.apache.pdfbox.util.TextNormalize normalize> = $r5;

        return;
    }

    public void <init>(java.lang.String) throws java.io.IOException
    {
        java.util.Properties $r1;
        java.util.HashMap $r4;
        org.apache.pdfbox.util.TextNormalize $r6;
        java.util.Stack $r3;
        java.util.ArrayList $r2;
        org.apache.pdfbox.util.PDFMarkedContentExtractor r0;
        java.lang.String r5, $r7;

        r0 := @this: org.apache.pdfbox.util.PDFMarkedContentExtractor;

        r5 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.pdfbox.util.ResourceLoader: java.util.Properties loadProperties(java.lang.String,boolean)>("org/apache/pdfbox/resources/PDFMarkedContentExtractor.properties", 1);

        specialinvoke r0.<org.apache.pdfbox.util.PDFStreamEngine: void <init>(java.util.Properties)>($r1);

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: boolean suppressDuplicateOverlappingText> = 1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.List markedContents> = $r2;

        $r3 = new java.util.Stack;

        specialinvoke $r3.<java.util.Stack: void <init>()>();

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Stack currentMarkedContents> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Map characterListMapping> = $r4;

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: org.apache.pdfbox.util.TextNormalize normalize> = null;

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.lang.String outputEncoding> = r5;

        $r6 = new org.apache.pdfbox.util.TextNormalize;

        $r7 = r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.lang.String outputEncoding>;

        specialinvoke $r6.<org.apache.pdfbox.util.TextNormalize: void <init>(java.lang.String)>($r7);

        r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: org.apache.pdfbox.util.TextNormalize normalize> = $r6;

        return;
    }

    private boolean within(float, float, float)
    {
        byte $b0, $b1;
        org.apache.pdfbox.util.PDFMarkedContentExtractor r0;
        int $i2, $i3;
        float f0, f1, f2, $f3, $f4;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.util.PDFMarkedContentExtractor;

        f1 := @parameter0: float;

        f0 := @parameter1: float;

        f2 := @parameter2: float;

        $f3 = f1 - f2;

        $b0 = f0 cmpl $f3;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label1;

        $f4 = f1 + f2;

        $b1 = f0 cmpg $f4;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void beginMarkedContentSequence(org.apache.pdfbox.cos.COSName, org.apache.pdfbox.cos.COSDictionary)
    {
        org.apache.pdfbox.cos.COSName r0;
        java.util.Stack $r4, $r5, $r9;
        org.apache.pdfbox.cos.COSDictionary r1;
        java.util.List $r8;
        org.apache.pdfbox.util.PDFMarkedContentExtractor r3;
        java.lang.Object $r6;
        org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent $r2, r7;
        boolean $z0;

        r3 := @this: org.apache.pdfbox.util.PDFMarkedContentExtractor;

        r0 := @parameter0: org.apache.pdfbox.cos.COSName;

        r1 := @parameter1: org.apache.pdfbox.cos.COSDictionary;

        $r2 = staticinvoke <org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent: org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent create(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSDictionary)>(r0, r1);

        $r4 = r3.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Stack currentMarkedContents>;

        $z0 = virtualinvoke $r4.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r8 = r3.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.List markedContents>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label2;

     label1:
        $r5 = r3.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Stack currentMarkedContents>;

        $r6 = virtualinvoke $r5.<java.util.Stack: java.lang.Object peek()>();

        r7 = (org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent) $r6;

        if r7 == null goto label2;

        virtualinvoke r7.<org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent: void addMarkedContent(org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent)>($r2);

     label2:
        $r9 = r3.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Stack currentMarkedContents>;

        virtualinvoke $r9.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r2);

        return;
    }

    public void endMarkedContentSequence()
    {
        org.apache.pdfbox.util.PDFMarkedContentExtractor r0;
        java.util.Stack $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.util.PDFMarkedContentExtractor;

        $r1 = r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Stack currentMarkedContents>;

        $z0 = virtualinvoke $r1.<java.util.Stack: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Stack currentMarkedContents>;

        virtualinvoke $r2.<java.util.Stack: java.lang.Object pop()>();

     label1:
        return;
    }

    public void xobject(org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject)
    {
        org.apache.pdfbox.util.PDFMarkedContentExtractor r0;
        java.lang.Object $r3;
        org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent $r5;
        java.util.Stack $r1, $r2;
        boolean $z0;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject r4;

        r0 := @this: org.apache.pdfbox.util.PDFMarkedContentExtractor;

        r4 := @parameter0: org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject;

        $r1 = r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Stack currentMarkedContents>;

        $z0 = virtualinvoke $r1.<java.util.Stack: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Stack currentMarkedContents>;

        $r3 = virtualinvoke $r2.<java.util.Stack: java.lang.Object peek()>();

        $r5 = (org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent) $r3;

        virtualinvoke $r5.<org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent: void addXObject(org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject)>(r4);

     label1:
        return;
    }

    protected void processTextPosition(org.apache.pdfbox.util.TextPosition)
    {
        java.util.Map $r10, $r16;
        org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, $z10;
        org.apache.pdfbox.util.TextPosition r3, r13, r18;
        org.apache.pdfbox.util.TextNormalize $r7, $r8;
        java.util.List r17;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        java.util.Stack $r4, $r19;
        java.util.ArrayList $r1, $r15;
        org.apache.pdfbox.util.PDFMarkedContentExtractor r0;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        java.lang.String $r9, $r14;
        java.lang.Object $r2, $r5, $r11, $r12;

        r0 := @this: org.apache.pdfbox.util.PDFMarkedContentExtractor;

        r3 := @parameter0: org.apache.pdfbox.util.TextPosition;

        z8 = 1;

        $z0 = r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: boolean suppressDuplicateOverlappingText>;

        if $z0 == 0 goto label05;

        z8 = 0;

        $r9 = virtualinvoke r3.<org.apache.pdfbox.util.TextPosition: java.lang.String getCharacter()>();

        $f0 = virtualinvoke r3.<org.apache.pdfbox.util.TextPosition: float getX()>();

        $f1 = virtualinvoke r3.<org.apache.pdfbox.util.TextPosition: float getY()>();

        $r10 = r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Map characterListMapping>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r17 = (java.util.List) $r11;

        if r17 != null goto label01;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        r17 = $r15;

        $r16 = r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Map characterListMapping>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r15);

     label01:
        z9 = 0;

        $f2 = virtualinvoke r3.<org.apache.pdfbox.util.TextPosition: float getWidth()>();

        $i4 = virtualinvoke $r9.<java.lang.String: int length()>();

        $f3 = (float) $i4;

        $f4 = $f2 / $f3;

        $f7 = $f4 / 3.0F;

        i5 = 0;

     label02:
        $i6 = interfaceinvoke r17.<java.util.List: int size()>();

        if i5 >= $i6 goto label04;

        $r12 = interfaceinvoke r17.<java.util.List: java.lang.Object get(int)>(i5);

        r13 = (org.apache.pdfbox.util.TextPosition) $r12;

        $r14 = virtualinvoke r13.<org.apache.pdfbox.util.TextPosition: java.lang.String getCharacter()>();

        $f5 = virtualinvoke r13.<org.apache.pdfbox.util.TextPosition: float getX()>();

        $f6 = virtualinvoke r13.<org.apache.pdfbox.util.TextPosition: float getY()>();

        if $r14 == null goto label03;

        $z6 = specialinvoke r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: boolean within(float,float,float)>($f5, $f0, $f7);

        if $z6 == 0 goto label03;

        $z7 = specialinvoke r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: boolean within(float,float,float)>($f6, $f1, $f7);

        if $z7 == 0 goto label03;

        z9 = 1;

        goto label04;

     label03:
        i5 = i5 + 1;

        goto label02;

     label04:
        if z9 != 0 goto label05;

        interfaceinvoke r17.<java.util.List: boolean add(java.lang.Object)>(r3);

        z8 = 1;

     label05:
        if z8 == 0 goto label10;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $z1 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label06;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label09;

     label06:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        r18 = (org.apache.pdfbox.util.TextPosition) $r2;

        $z2 = virtualinvoke r3.<org.apache.pdfbox.util.TextPosition: boolean isDiacritic()>();

        if $z2 == 0 goto label07;

        $z5 = virtualinvoke r18.<org.apache.pdfbox.util.TextPosition: boolean contains(org.apache.pdfbox.util.TextPosition)>(r3);

        if $z5 == 0 goto label07;

        $r8 = r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: org.apache.pdfbox.util.TextNormalize normalize>;

        virtualinvoke r18.<org.apache.pdfbox.util.TextPosition: void mergeDiacritic(org.apache.pdfbox.util.TextPosition,org.apache.pdfbox.util.TextNormalize)>(r3, $r8);

        goto label09;

     label07:
        $z3 = virtualinvoke r18.<org.apache.pdfbox.util.TextPosition: boolean isDiacritic()>();

        if $z3 == 0 goto label08;

        $z4 = virtualinvoke r3.<org.apache.pdfbox.util.TextPosition: boolean contains(org.apache.pdfbox.util.TextPosition)>(r18);

        if $z4 == 0 goto label08;

        $r7 = r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: org.apache.pdfbox.util.TextNormalize normalize>;

        virtualinvoke r3.<org.apache.pdfbox.util.TextPosition: void mergeDiacritic(org.apache.pdfbox.util.TextPosition,org.apache.pdfbox.util.TextNormalize)>(r18, $r7);

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>($i3);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label09;

     label08:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r3);

     label09:
        $r19 = r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Stack currentMarkedContents>;

        $z10 = virtualinvoke $r19.<java.util.Stack: boolean isEmpty()>();

        if $z10 != 0 goto label10;

        $r4 = r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.Stack currentMarkedContents>;

        $r5 = virtualinvoke $r4.<java.util.Stack: java.lang.Object peek()>();

        $r6 = (org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent) $r5;

        virtualinvoke $r6.<org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDMarkedContent: void addText(org.apache.pdfbox.util.TextPosition)>(r3);

     label10:
        return;
    }

    public java.util.List getMarkedContents()
    {
        java.util.List $r1;
        org.apache.pdfbox.util.PDFMarkedContentExtractor r0;

        r0 := @this: org.apache.pdfbox.util.PDFMarkedContentExtractor;

        $r1 = r0.<org.apache.pdfbox.util.PDFMarkedContentExtractor: java.util.List markedContents>;

        return $r1;
    }
}
