public class org.apache.http.client.entity.DeflateDecompressingEntity extends org.apache.http.client.entity.DecompressingEntity
{

    public void <init>(org.apache.http.HttpEntity)
    {
        org.apache.http.HttpEntity r1;
        org.apache.http.client.entity.DeflateDecompressingEntity r0;

        r0 := @this: org.apache.http.client.entity.DeflateDecompressingEntity;

        r1 := @parameter0: org.apache.http.HttpEntity;

        specialinvoke r0.<org.apache.http.client.entity.DecompressingEntity: void <init>(org.apache.http.HttpEntity)>(r1);

        return;
    }

    java.io.InputStream decorate(java.io.InputStream) throws java.io.IOException
    {
        byte[] r0, r3;
        java.util.zip.Inflater $r15, $r19;
        org.apache.http.client.entity.DeflateDecompressingEntity r12;
        java.io.PushbackInputStream $r13;
        java.util.zip.InflaterInputStream $r18, $r20;
        int $i0, $i1, $i2, $i4, $i6;
        java.util.zip.DataFormatException $r9;
        boolean $z0, $z1, $z2;
        java.io.IOException $r14, $r16, $r17;
        java.io.InputStream r2;

        r12 := @this: org.apache.http.client.entity.DeflateDecompressingEntity;

        r2 := @parameter0: java.io.InputStream;

        r0 = newarray (byte)[6];

        $r13 = new java.io.PushbackInputStream;

        $i0 = lengthof r0;

        specialinvoke $r13.<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>(r2, $i0);

        $i1 = virtualinvoke $r13.<java.io.PushbackInputStream: int read(byte[])>(r0);

        $i4 = (int) -1;

        if $i1 != $i4 goto label1;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Unable to read the response");

        throw $r14;

     label1:
        r3 = newarray (byte)[1];

        $r15 = new java.util.zip.Inflater;

        specialinvoke $r15.<java.util.zip.Inflater: void <init>()>();

     label2:
        $i2 = virtualinvoke $r15.<java.util.zip.Inflater: int inflate(byte[])>(r3);

        if $i2 != 0 goto label5;

        $z0 = virtualinvoke $r15.<java.util.zip.Inflater: boolean finished()>();

        if $z0 == 0 goto label3;

        $r16 = new java.io.IOException;

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>("Unable to read the response");

        throw $r16;

     label3:
        $z1 = virtualinvoke $r15.<java.util.zip.Inflater: boolean needsDictionary()>();

        if $z1 == 0 goto label4;

        goto label5;

     label4:
        $z2 = virtualinvoke $r15.<java.util.zip.Inflater: boolean needsInput()>();

        if $z2 == 0 goto label2;

        virtualinvoke $r15.<java.util.zip.Inflater: void setInput(byte[])>(r0);

        goto label2;

     label5:
        $i6 = (int) -1;

        if $i2 != $i6 goto label6;

        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("Unable to read the response");

        throw $r17;

     label6:
        virtualinvoke $r13.<java.io.PushbackInputStream: void unread(byte[],int,int)>(r0, 0, $i1);

        $r18 = new java.util.zip.InflaterInputStream;

        specialinvoke $r18.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>($r13);

     label7:
        return $r18;

     label8:
        $r9 := @caughtexception;

        virtualinvoke $r13.<java.io.PushbackInputStream: void unread(byte[],int,int)>(r0, 0, $i1);

        $r20 = new java.util.zip.InflaterInputStream;

        $r19 = new java.util.zip.Inflater;

        specialinvoke $r19.<java.util.zip.Inflater: void <init>(boolean)>(1);

        specialinvoke $r20.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>($r13, $r19);

        return $r20;

        catch java.util.zip.DataFormatException from label2 to label7 with label8;
    }

    public org.apache.http.Header getContentEncoding()
    {
        org.apache.http.client.entity.DeflateDecompressingEntity r0;

        r0 := @this: org.apache.http.client.entity.DeflateDecompressingEntity;

        return null;
    }

    public long getContentLength()
    {
        org.apache.http.client.entity.DeflateDecompressingEntity r0;

        r0 := @this: org.apache.http.client.entity.DeflateDecompressingEntity;

        return -1L;
    }
}
