public class com.jidesoft.hints.FileIntelliHints extends com.jidesoft.hints.AbstractListIntelliHints
{
    private boolean _folderOnly;
    private boolean _showFullPath;
    private java.io.FilenameFilter _filter;

    public void <init>(javax.swing.text.JTextComponent)
    {
        com.jidesoft.hints.FileIntelliHints r0;
        javax.swing.text.JTextComponent r1;

        r0 := @this: com.jidesoft.hints.FileIntelliHints;

        r1 := @parameter0: javax.swing.text.JTextComponent;

        specialinvoke r0.<com.jidesoft.hints.AbstractListIntelliHints: void <init>(javax.swing.text.JTextComponent)>(r1);

        r0.<com.jidesoft.hints.FileIntelliHints: boolean _folderOnly> = 0;

        r0.<com.jidesoft.hints.FileIntelliHints: boolean _showFullPath> = 1;

        return;
    }

    public boolean isFolderOnly()
    {
        com.jidesoft.hints.FileIntelliHints r0;
        boolean $z0;

        r0 := @this: com.jidesoft.hints.FileIntelliHints;

        $z0 = r0.<com.jidesoft.hints.FileIntelliHints: boolean _folderOnly>;

        return $z0;
    }

    public void setFolderOnly(boolean)
    {
        com.jidesoft.hints.FileIntelliHints r0;
        boolean z0;

        r0 := @this: com.jidesoft.hints.FileIntelliHints;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.hints.FileIntelliHints: boolean _folderOnly> = z0;

        return;
    }

    public boolean isShowFullPath()
    {
        com.jidesoft.hints.FileIntelliHints r0;
        boolean $z0;

        r0 := @this: com.jidesoft.hints.FileIntelliHints;

        $z0 = r0.<com.jidesoft.hints.FileIntelliHints: boolean _showFullPath>;

        return $z0;
    }

    public void setShowFullPath(boolean)
    {
        com.jidesoft.hints.FileIntelliHints r0;
        boolean z0;

        r0 := @this: com.jidesoft.hints.FileIntelliHints;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.hints.FileIntelliHints: boolean _showFullPath> = z0;

        return;
    }

    public boolean updateHints(java.lang.Object)
    {
        com.jidesoft.hints.FileIntelliHints r6;
        java.lang.String[] $r7, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;
        java.lang.String $r1, $r2, $r3, $r10, $r11, $r13;
        boolean $z0, $z1;
        com.jidesoft.hints.FileIntelliHints$PrefixListCellRenderer $r16;
        com.jidesoft.hints.FileIntelliHints$1 $r15;
        javax.swing.JList $r8;
        java.io.File $r14;
        java.lang.Object r0;

        r6 := @this: com.jidesoft.hints.FileIntelliHints;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        return 0;

     label2:
        $i1 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(92);

        $i2 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(47);

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i2);

        $i11 = (int) -1;

        if $i3 != $i11 goto label3;

        return 0;

     label3:
        $i4 = $i3 + 1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

        $i5 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i6 = $i5 - 1;

        if $i3 != $i6 goto label4;

        $r11 = null;

        goto label5;

     label4:
        $i7 = $i3 + 1;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i7);

        $r11 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

     label5:
        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>($r2);

        $r15 = new com.jidesoft.hints.FileIntelliHints$1;

        specialinvoke $r15.<com.jidesoft.hints.FileIntelliHints$1: void <init>(com.jidesoft.hints.FileIntelliHints,java.lang.String)>(r6, $r11);

        $r7 = virtualinvoke $r14.<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>($r15);

        if $r7 == null goto label6;

        $i8 = lengthof $r7;

        if $i8 == 0 goto label6;

        $i9 = lengthof $r7;

        if $i9 != 1 goto label7;

        $r10 = $r7[0];

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r11);

        if $z1 == 0 goto label7;

     label6:
        $r12 = newarray (java.lang.String)[0];

        virtualinvoke r6.<com.jidesoft.hints.FileIntelliHints: void setListData(java.lang.Object[])>($r12);

        return 0;

     label7:
        $r8 = virtualinvoke r6.<com.jidesoft.hints.FileIntelliHints: javax.swing.JList getList()>();

        $r16 = new com.jidesoft.hints.FileIntelliHints$PrefixListCellRenderer;

        $z0 = virtualinvoke r6.<com.jidesoft.hints.FileIntelliHints: boolean isShowFullPath()>();

        if $z0 == 0 goto label8;

        $r13 = $r2;

        goto label9;

     label8:
        $r13 = "";

     label9:
        specialinvoke $r16.<com.jidesoft.hints.FileIntelliHints$PrefixListCellRenderer: void <init>(com.jidesoft.hints.FileIntelliHints,java.lang.String)>(r6, $r13);

        virtualinvoke $r8.<javax.swing.JList: void setCellRenderer(javax.swing.ListCellRenderer)>($r16);

        virtualinvoke r6.<com.jidesoft.hints.FileIntelliHints: void setListData(java.lang.Object[])>($r7);

        return 1;
    }

    public void acceptHint(java.lang.Object)
    {
        com.jidesoft.hints.FileIntelliHints r5;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7;
        java.lang.String $r4, $r7, $r11;
        javax.swing.text.BadLocationException $r12;
        javax.swing.text.JTextComponent $r6, $r8, $r9;
        java.lang.Object r0;
        java.lang.StringBuilder $r2, $r3, $r13;
        javax.swing.text.Document $r10;

        r5 := @this: com.jidesoft.hints.FileIntelliHints;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return;

     label1:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r5.<com.jidesoft.hints.FileIntelliHints: javax.swing.text.JTextComponent getTextComponent()>();

        $r7 = virtualinvoke $r6.<javax.swing.text.JTextComponent: java.lang.String getText()>();

        $r8 = virtualinvoke r5.<com.jidesoft.hints.FileIntelliHints: javax.swing.text.JTextComponent getTextComponent()>();

        $i0 = virtualinvoke $r8.<javax.swing.text.JTextComponent: int getCaretPosition()>();

        $i1 = virtualinvoke $r7.<java.lang.String: int lastIndexOf(int,int)>(92, $i0);

        $i2 = virtualinvoke $r7.<java.lang.String: int lastIndexOf(int,int)>(47, $i0);

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i2);

        $i7 = (int) -1;

        if $i3 != $i7 goto label2;

        return;

     label2:
        $i4 = $i0 - $i3;

        i5 = $i4 - 1;

     label3:
        $r9 = virtualinvoke r5.<com.jidesoft.hints.FileIntelliHints: javax.swing.text.JTextComponent getTextComponent()>();

        $r10 = virtualinvoke $r9.<javax.swing.text.JTextComponent: javax.swing.text.Document getDocument()>();

        $r11 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(i5);

        interfaceinvoke $r10.<javax.swing.text.Document: void insertString(int,java.lang.String,javax.swing.text.AttributeSet)>($i0, $r11, null);

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;

        virtualinvoke $r12.<javax.swing.text.BadLocationException: void printStackTrace()>();

     label6:
        return;

        catch javax.swing.text.BadLocationException from label3 to label4 with label5;
    }

    public java.io.FilenameFilter getFilter()
    {
        java.io.FilenameFilter $r1;
        com.jidesoft.hints.FileIntelliHints r0;

        r0 := @this: com.jidesoft.hints.FileIntelliHints;

        $r1 = r0.<com.jidesoft.hints.FileIntelliHints: java.io.FilenameFilter _filter>;

        return $r1;
    }

    public void setFilter(java.io.FilenameFilter)
    {
        java.io.FilenameFilter r1;
        com.jidesoft.hints.FileIntelliHints r0;

        r0 := @this: com.jidesoft.hints.FileIntelliHints;

        r1 := @parameter0: java.io.FilenameFilter;

        r0.<com.jidesoft.hints.FileIntelliHints: java.io.FilenameFilter _filter> = r1;

        return;
    }
}
