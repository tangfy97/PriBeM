public class jena.cmdline.CommandLine extends java.lang.Object
{
    protected jena.cmdline.ArgHandler argHook;
    protected java.lang.String usage;
    protected java.util.Map argMap;
    protected java.util.Map args;
    java.lang.String indirectionMarker;
    protected boolean allowItemIndirect;
    boolean ignoreIndirectionMarker;
    protected java.util.List items;

    public void <init>()
    {
        java.util.HashMap $r1, $r2;
        jena.cmdline.CommandLine r0;
        java.util.ArrayList $r3;

        r0 := @this: jena.cmdline.CommandLine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jena.cmdline.CommandLine: jena.cmdline.ArgHandler argHook> = null;

        r0.<jena.cmdline.CommandLine: java.lang.String usage> = null;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<jena.cmdline.CommandLine: java.util.Map argMap> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<jena.cmdline.CommandLine: java.util.Map args> = $r2;

        r0.<jena.cmdline.CommandLine: java.lang.String indirectionMarker> = "@";

        r0.<jena.cmdline.CommandLine: boolean allowItemIndirect> = 0;

        r0.<jena.cmdline.CommandLine: boolean ignoreIndirectionMarker> = 0;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<jena.cmdline.CommandLine: java.util.List items> = $r3;

        return;
    }

    public void setHook(jena.cmdline.ArgHandler)
    {
        jena.cmdline.ArgHandler r1;
        jena.cmdline.CommandLine r0;

        r0 := @this: jena.cmdline.CommandLine;

        r1 := @parameter0: jena.cmdline.ArgHandler;

        r0.<jena.cmdline.CommandLine: jena.cmdline.ArgHandler argHook> = r1;

        return;
    }

    public void setUsage(java.lang.String)
    {
        java.lang.String r1;
        jena.cmdline.CommandLine r0;

        r0 := @this: jena.cmdline.CommandLine;

        r1 := @parameter0: java.lang.String;

        r0.<jena.cmdline.CommandLine: java.lang.String usage> = r1;

        return;
    }

    public boolean hasArgs()
    {
        java.util.Map $r1;
        int $i0;
        jena.cmdline.CommandLine r0;
        boolean $z0;

        r0 := @this: jena.cmdline.CommandLine;

        $r1 = r0.<jena.cmdline.CommandLine: java.util.Map args>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasItems()
    {
        java.util.List $r1;
        int $i0;
        jena.cmdline.CommandLine r0;
        boolean $z0;

        r0 := @this: jena.cmdline.CommandLine;

        $r1 = r0.<jena.cmdline.CommandLine: java.util.List items>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Iterator args()
    {
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Collection $r2;
        jena.cmdline.CommandLine r0;

        r0 := @this: jena.cmdline.CommandLine;

        $r1 = r0.<jena.cmdline.CommandLine: java.util.Map args>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;
    }

    public int numArgs()
    {
        int $i0;
        jena.cmdline.CommandLine r0;
        java.util.Map $r1;

        r0 := @this: jena.cmdline.CommandLine;

        $r1 = r0.<jena.cmdline.CommandLine: java.util.Map args>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public int numItems()
    {
        int $i0;
        java.util.List $r1;
        jena.cmdline.CommandLine r0;

        r0 := @this: jena.cmdline.CommandLine;

        $r1 = r0.<jena.cmdline.CommandLine: java.util.List items>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public void pushItem(java.lang.String)
    {
        java.util.List $r2;
        java.lang.String r1;
        jena.cmdline.CommandLine r0;

        r0 := @this: jena.cmdline.CommandLine;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<jena.cmdline.CommandLine: java.util.List items>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public boolean isIndirectItem(int)
    {
        jena.cmdline.CommandLine r0;
        java.util.List $r1;
        int i0;
        java.lang.Object $r2;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: jena.cmdline.CommandLine;

        i0 := @parameter0: int;

        $z0 = r0.<jena.cmdline.CommandLine: boolean allowItemIndirect>;

        if $z0 == 0 goto label1;

        $r1 = r0.<jena.cmdline.CommandLine: java.util.List items>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (java.lang.String) $r2;

        $r3 = r0.<jena.cmdline.CommandLine: java.lang.String indirectionMarker>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>($r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public java.lang.String getItem(int)
    {
        int i0;
        java.lang.String $r1;
        jena.cmdline.CommandLine r0;
        boolean $z0;

        r0 := @this: jena.cmdline.CommandLine;

        i0 := @parameter0: int;

        $z0 = r0.<jena.cmdline.CommandLine: boolean allowItemIndirect>;

        $r1 = virtualinvoke r0.<jena.cmdline.CommandLine: java.lang.String getItem(int,boolean)>(i0, $z0);

        return $r1;
    }

    public java.lang.String getItem(int, boolean)
    {
        int i0, $i1;
        java.lang.String $r4, $r5, $r12, $r14, r15;
        boolean z0, $z1;
        java.lang.IllegalArgumentException $r7;
        jena.cmdline.CommandLine r0;
        java.lang.Exception $r6;
        java.util.List $r1, $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13;

        r0 := @this: jena.cmdline.CommandLine;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if i0 < 0 goto label1;

        $r1 = r0.<jena.cmdline.CommandLine: java.util.List items>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r2 = r0.<jena.cmdline.CommandLine: java.util.List items>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        r15 = (java.lang.String) $r3;

        if z0 == 0 goto label6;

        $r4 = r0.<jena.cmdline.CommandLine: java.lang.String indirectionMarker>;

        $z1 = virtualinvoke r15.<java.lang.String: boolean startsWith(java.lang.String)>($r4);

        if $z1 == 0 goto label6;

        $r5 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int)>(1);

     label3:
        r15 = staticinvoke <jena.cmdline.CmdLineUtils: java.lang.String readWholeFileAsUTF8(java.lang.String)>($r5);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to read \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r12 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r7;

     label6:
        return r15;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public void process(java.lang.String[]) throws java.lang.IllegalArgumentException
    {
        jena.cmdline.ArgDecl $r32;
        java.util.Map $r12, $r15, $r16, $r18, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.List $r2, $r7;
        java.lang.StringBuilder $r24, $r25, $r27;
        jena.cmdline.Arg $r29, $r31;
        java.lang.String[] r1;
        java.util.ArrayList $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i10;
        jena.cmdline.ArgHandler $r20, $r21;
        java.lang.String $r4, $r9, $r11, $r14, $r26, $r28, $r33, r34, r35, r36;
        java.lang.IllegalArgumentException $r23;
        jena.cmdline.CommandLine r6;
        java.lang.Object $r3, $r5, $r8, $r10, $r13, $r17, $r19, $r22;

        r6 := @this: jena.cmdline.CommandLine;

        r1 := @parameter0: java.lang.String[];

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        i8 = 0;

     label01:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        if i8 >= $i0 goto label13;

        $r10 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i8);

        r34 = (java.lang.String) $r10;

        $z2 = virtualinvoke r6.<jena.cmdline.CommandLine: boolean endProcessing(java.lang.String)>(r34);

        if $z2 == 0 goto label02;

        goto label13;

     label02:
        $z3 = virtualinvoke r6.<jena.cmdline.CommandLine: boolean ignoreArgument(java.lang.String)>(r34);

        if $z3 == 0 goto label03;

        goto label12;

     label03:
        $i2 = virtualinvoke r34.<java.lang.String: int indexOf(int)>(61);

        $i3 = virtualinvoke r34.<java.lang.String: int indexOf(int)>(58);

        i9 = 2147483647;

        if $i2 <= 0 goto label04;

        if $i2 >= 2147483647 goto label04;

        i9 = $i2;

     label04:
        if $i3 <= 0 goto label05;

        if $i3 >= i9 goto label05;

        i9 = $i3;

     label05:
        if i9 == 2147483647 goto label06;

        $i6 = i9 + 1;

        $r33 = virtualinvoke r34.<java.lang.String: java.lang.String substring(int)>($i6);

        $i7 = i8 + 1;

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>($i7, $r33);

        r34 = virtualinvoke r34.<java.lang.String: java.lang.String substring(int,int)>(0, i9);

     label06:
        $r11 = staticinvoke <jena.cmdline.ArgDecl: java.lang.String canonicalForm(java.lang.String)>(r34);

        r35 = null;

        $r12 = r6.<jena.cmdline.CommandLine: java.util.Map argMap>;

        $z4 = interfaceinvoke $r12.<java.util.Map: boolean containsKey(java.lang.Object)>($r11);

        if $z4 == 0 goto label11;

        $r15 = r6.<jena.cmdline.CommandLine: java.util.Map args>;

        $z5 = interfaceinvoke $r15.<java.util.Map: boolean containsKey(java.lang.Object)>($r11);

        if $z5 != 0 goto label07;

        $r30 = r6.<jena.cmdline.CommandLine: java.util.Map args>;

        $r29 = new jena.cmdline.Arg;

        specialinvoke $r29.<jena.cmdline.Arg: void <init>(java.lang.String)>($r11);

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r29);

     label07:
        $r16 = r6.<jena.cmdline.CommandLine: java.util.Map args>;

        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        $r31 = (jena.cmdline.Arg) $r17;

        $r18 = r6.<jena.cmdline.CommandLine: java.util.Map argMap>;

        $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        $r32 = (jena.cmdline.ArgDecl) $r19;

        $z6 = virtualinvoke $r32.<jena.cmdline.ArgDecl: boolean takesValue()>();

        if $z6 == 0 goto label09;

        $i4 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        if i8 != $i5 goto label08;

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No value for argument: ");

        $r26 = virtualinvoke $r31.<jena.cmdline.Arg: java.lang.String getName()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r23;

     label08:
        i8 = i8 + 1;

        $r22 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i8);

        r35 = (java.lang.String) $r22;

        virtualinvoke $r31.<jena.cmdline.Arg: void setValue(java.lang.String)>(r35);

        virtualinvoke $r31.<jena.cmdline.Arg: void addValue(java.lang.String)>(r35);

     label09:
        $r20 = r6.<jena.cmdline.CommandLine: jena.cmdline.ArgHandler argHook>;

        if $r20 == null goto label10;

        $r21 = r6.<jena.cmdline.CommandLine: jena.cmdline.ArgHandler argHook>;

        interfaceinvoke $r21.<jena.cmdline.ArgHandler: void action(java.lang.String,java.lang.String)>($r11, r35);

     label10:
        virtualinvoke $r32.<jena.cmdline.ArgDecl: void trigger(jena.cmdline.Arg)>($r31);

        goto label12;

     label11:
        $r13 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i8);

        $r14 = (java.lang.String) $r13;

        virtualinvoke r6.<jena.cmdline.CommandLine: void handleUnrecognizedArg(java.lang.String)>($r14);

     label12:
        i8 = i8 + 1;

        goto label01;

     label13:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if i8 >= $i1 goto label16;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i8);

        $r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z0 != 0 goto label14;

        $r8 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i8);

        $r9 = (java.lang.String) $r8;

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("--");

        if $z1 == 0 goto label15;

     label14:
        i8 = i8 + 1;

     label15:
        $i10 = interfaceinvoke $r0.<java.util.List: int size()>();

        if i8 >= $i10 goto label16;

        $r5 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i8);

        r36 = (java.lang.String) $r5;

        $r7 = r6.<jena.cmdline.CommandLine: java.util.List items>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r36);

        i8 = i8 + 1;

        goto label15;

     label16:
        return;
    }

    public boolean ignoreArgument(java.lang.String)
    {
        java.lang.String r1;
        jena.cmdline.CommandLine r0;

        r0 := @this: jena.cmdline.CommandLine;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public boolean endProcessing(java.lang.String)
    {
        java.lang.String r0;
        jena.cmdline.CommandLine r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: jena.cmdline.CommandLine;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("--");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public void handleUnrecognizedArg(java.lang.String)
    {
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5;
        java.lang.IllegalArgumentException $r0;
        jena.cmdline.CommandLine r6;

        r6 := @this: jena.cmdline.CommandLine;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown argument: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    public boolean contains(jena.cmdline.ArgDecl)
    {
        jena.cmdline.ArgDecl r1;
        jena.cmdline.Arg $r2;
        jena.cmdline.CommandLine r0;
        boolean $z0;

        r0 := @this: jena.cmdline.CommandLine;

        r1 := @parameter0: jena.cmdline.ArgDecl;

        $r2 = virtualinvoke r0.<jena.cmdline.CommandLine: jena.cmdline.Arg getArg(jena.cmdline.ArgDecl)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean contains(java.lang.String)
    {
        java.lang.String r1;
        jena.cmdline.Arg $r2;
        jena.cmdline.CommandLine r0;
        boolean $z0;

        r0 := @this: jena.cmdline.CommandLine;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<jena.cmdline.CommandLine: jena.cmdline.Arg getArg(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasArg(java.lang.String)
    {
        java.lang.String r1;
        jena.cmdline.Arg $r2;
        jena.cmdline.CommandLine r0;
        boolean $z0;

        r0 := @this: jena.cmdline.CommandLine;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<jena.cmdline.CommandLine: jena.cmdline.Arg getArg(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasArg(jena.cmdline.ArgDecl)
    {
        jena.cmdline.ArgDecl r1;
        jena.cmdline.Arg $r2;
        jena.cmdline.CommandLine r0;
        boolean $z0;

        r0 := @this: jena.cmdline.CommandLine;

        r1 := @parameter0: jena.cmdline.ArgDecl;

        $r2 = virtualinvoke r0.<jena.cmdline.CommandLine: jena.cmdline.Arg getArg(jena.cmdline.ArgDecl)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public jena.cmdline.Arg getArg(jena.cmdline.ArgDecl)
    {
        jena.cmdline.ArgDecl r6;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        jena.cmdline.CommandLine r0;
        java.util.Map $r1;
        java.lang.Object $r4;
        jena.cmdline.Arg r5, r7;
        boolean $z0, $z1;

        r0 := @this: jena.cmdline.CommandLine;

        r6 := @parameter0: jena.cmdline.ArgDecl;

        r7 = null;

        $r1 = r0.<jena.cmdline.CommandLine: java.util.Map args>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (jena.cmdline.Arg) $r4;

        $z1 = virtualinvoke r6.<jena.cmdline.ArgDecl: boolean matches(jena.cmdline.Arg)>(r5);

        if $z1 == 0 goto label2;

        r7 = r5;

     label2:
        goto label1;

     label3:
        return r7;
    }

    public jena.cmdline.Arg getArg(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String $r0, r5;
        jena.cmdline.Arg $r4;
        jena.cmdline.CommandLine r1;

        r1 := @this: jena.cmdline.CommandLine;

        r5 := @parameter0: java.lang.String;

        $r0 = staticinvoke <jena.cmdline.ArgDecl: java.lang.String canonicalForm(java.lang.String)>(r5);

        $r2 = r1.<jena.cmdline.CommandLine: java.util.Map args>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (jena.cmdline.Arg) $r3;

        return $r4;
    }

    public java.lang.String getValue(jena.cmdline.ArgDecl)
    {
        jena.cmdline.ArgDecl r1;
        jena.cmdline.Arg $r2;
        java.lang.String $r3;
        jena.cmdline.CommandLine r0;
        boolean $z0;

        r0 := @this: jena.cmdline.CommandLine;

        r1 := @parameter0: jena.cmdline.ArgDecl;

        $r2 = virtualinvoke r0.<jena.cmdline.CommandLine: jena.cmdline.Arg getArg(jena.cmdline.ArgDecl)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke $r2.<jena.cmdline.Arg: boolean hasValue()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke $r2.<jena.cmdline.Arg: java.lang.String getValue()>();

        return $r3;

     label2:
        return null;
    }

    public java.lang.String getValue(java.lang.String)
    {
        java.lang.String r1, $r3;
        jena.cmdline.Arg $r2;
        jena.cmdline.CommandLine r0;

        r0 := @this: jena.cmdline.CommandLine;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<jena.cmdline.CommandLine: jena.cmdline.Arg getArg(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<jena.cmdline.Arg: java.lang.String getValue()>();

        return $r3;
    }

    public java.util.List getValues(jena.cmdline.ArgDecl)
    {
        jena.cmdline.ArgDecl r1;
        java.util.List $r3;
        jena.cmdline.Arg $r2;
        jena.cmdline.CommandLine r0;

        r0 := @this: jena.cmdline.CommandLine;

        r1 := @parameter0: jena.cmdline.ArgDecl;

        $r2 = virtualinvoke r0.<jena.cmdline.CommandLine: jena.cmdline.Arg getArg(jena.cmdline.ArgDecl)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<jena.cmdline.Arg: java.util.List getValues()>();

        return $r3;
    }

    public java.util.List getValues(java.lang.String)
    {
        java.util.List $r3;
        java.lang.String r1;
        jena.cmdline.Arg $r2;
        jena.cmdline.CommandLine r0;

        r0 := @this: jena.cmdline.CommandLine;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<jena.cmdline.CommandLine: jena.cmdline.Arg getArg(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<jena.cmdline.Arg: java.util.List getValues()>();

        return $r3;
    }

    public jena.cmdline.CommandLine add(java.lang.String, boolean)
    {
        jena.cmdline.ArgDecl $r1;
        java.lang.String r2;
        jena.cmdline.CommandLine r0, $r3;
        boolean z0;

        r0 := @this: jena.cmdline.CommandLine;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = new jena.cmdline.ArgDecl;

        specialinvoke $r1.<jena.cmdline.ArgDecl: void <init>(boolean,java.lang.String)>(z0, r2);

        $r3 = virtualinvoke r0.<jena.cmdline.CommandLine: jena.cmdline.CommandLine add(jena.cmdline.ArgDecl)>($r1);

        return $r3;
    }

    public jena.cmdline.CommandLine add(boolean, java.lang.String)
    {
        jena.cmdline.ArgDecl $r1;
        java.lang.String r2;
        jena.cmdline.CommandLine r0, $r3;
        boolean z0;

        r0 := @this: jena.cmdline.CommandLine;

        z0 := @parameter0: boolean;

        r2 := @parameter1: java.lang.String;

        $r1 = new jena.cmdline.ArgDecl;

        specialinvoke $r1.<jena.cmdline.ArgDecl: void <init>(boolean,java.lang.String)>(z0, r2);

        $r3 = virtualinvoke r0.<jena.cmdline.CommandLine: jena.cmdline.CommandLine add(jena.cmdline.ArgDecl)>($r1);

        return $r3;
    }

    public jena.cmdline.CommandLine add(jena.cmdline.ArgDecl)
    {
        jena.cmdline.ArgDecl r0;
        java.util.Iterator $r1;
        java.util.Map $r3;
        java.lang.Object $r4;
        jena.cmdline.CommandLine r2;
        boolean $z0;

        r2 := @this: jena.cmdline.CommandLine;

        r0 := @parameter0: jena.cmdline.ArgDecl;

        $r1 = virtualinvoke r0.<jena.cmdline.ArgDecl: java.util.Iterator names()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = r2.<jena.cmdline.CommandLine: java.util.Map argMap>;

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r0);

        goto label1;

     label2:
        return r2;
    }

    public boolean allowItemIndirect()
    {
        jena.cmdline.CommandLine r0;
        boolean $z0;

        r0 := @this: jena.cmdline.CommandLine;

        $z0 = r0.<jena.cmdline.CommandLine: boolean allowItemIndirect>;

        return $z0;
    }

    public void setAllowItemIndirect(boolean)
    {
        jena.cmdline.CommandLine r0;
        boolean z0;

        r0 := @this: jena.cmdline.CommandLine;

        z0 := @parameter0: boolean;

        r0.<jena.cmdline.CommandLine: boolean allowItemIndirect> = z0;

        return;
    }

    public boolean isIgnoreIndirectionMarker()
    {
        jena.cmdline.CommandLine r0;
        boolean $z0;

        r0 := @this: jena.cmdline.CommandLine;

        $z0 = r0.<jena.cmdline.CommandLine: boolean ignoreIndirectionMarker>;

        return $z0;
    }

    public java.lang.String getIndirectionMarker()
    {
        java.lang.String $r1;
        jena.cmdline.CommandLine r0;

        r0 := @this: jena.cmdline.CommandLine;

        $r1 = r0.<jena.cmdline.CommandLine: java.lang.String indirectionMarker>;

        return $r1;
    }

    public void setIndirectionMarker(java.lang.String)
    {
        java.lang.String r1;
        jena.cmdline.CommandLine r0;

        r0 := @this: jena.cmdline.CommandLine;

        r1 := @parameter0: java.lang.String;

        r0.<jena.cmdline.CommandLine: java.lang.String indirectionMarker> = r1;

        return;
    }

    public void setIgnoreIndirectionMarker(boolean)
    {
        jena.cmdline.CommandLine r0;
        boolean z0;

        r0 := @this: jena.cmdline.CommandLine;

        z0 := @parameter0: boolean;

        r0.<jena.cmdline.CommandLine: boolean ignoreIndirectionMarker> = z0;

        return;
    }

    public jena.cmdline.ArgHandler trace()
    {
        java.io.PrintStream r0;
        jena.cmdline.CommandLine$1 $r1;
        jena.cmdline.CommandLine r2;

        r2 := @this: jena.cmdline.CommandLine;

        r0 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new jena.cmdline.CommandLine$1;

        specialinvoke $r1.<jena.cmdline.CommandLine$1: void <init>(jena.cmdline.CommandLine,java.io.PrintStream)>(r2, r0);

        return $r1;
    }
}
