public class org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations extends java.lang.Object implements org.waveprotocol.wave.model.document.indexed.RawAnnotationSet
{
    private int size;
    private boolean modifying;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: int size> = 0;

        r0.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean modifying> = 0;

        return;
    }

    public int size()
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r0;
        int $i0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: int size>;

        return $i0;
    }

    public void begin()
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r0;
        java.lang.AssertionError $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        $z0 = <org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean modifying>;

        if $z1 == 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("Can\'t make nested modification");

        throw $r1;

     label1:
        r0.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean modifying> = 1;

        return;
    }

    public void finish()
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r0;
        java.lang.AssertionError $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        $z0 = <org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean modifying>;

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("Can\'t finish non existent modification");

        throw $r1;

     label1:
        r0.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean modifying> = 0;

        return;
    }

    public void delete(int)
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r0;
        int i0, $i1, $i2;
        java.lang.AssertionError $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean modifying>;

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("Can\'t make change unless during modification");

        throw $r1;

     label1:
        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: int size>;

        $i2 = $i1 - i0;

        r0.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: int size> = $i2;

        return;
    }

    public void endAnnotation(java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r0;
        java.lang.AssertionError $r1;
        java.lang.String r2;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        r2 := @parameter0: java.lang.String;

        $z0 = <org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean modifying>;

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("Can\'t make change unless during modification");

        throw $r1;

     label1:
        return;
    }

    public void insert(int)
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r0;
        int i0, $i1, $i2;
        java.lang.AssertionError $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean modifying>;

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("Can\'t make change unless during modification");

        throw $r1;

     label1:
        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: int size>;

        $i2 = $i1 + i0;

        r0.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: int size> = $i2;

        return;
    }

    public void skip(int)
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r0;
        int i0;
        java.lang.AssertionError $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean modifying>;

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("Can\'t make change unless during modification");

        throw $r1;

     label1:
        return;
    }

    public void startAnnotation(java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r0;
        java.lang.Object r3;
        java.lang.AssertionError $r1;
        java.lang.String r2;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $z0 = <org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean modifying>;

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("Can\'t make change unless during modification");

        throw $r1;

     label1:
        return;
    }

    public java.lang.Object getAnnotation(int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r0;
        int i0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        return null;
    }

    public int firstAnnotationChange(int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r0;
        int i0, i1, $i3;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object;

        $i3 = (int) -1;

        return $i3;
    }

    public int lastAnnotationChange(int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r0;
        int i0, i1, $i3;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object;

        $i3 = (int) -1;

        return $i3;
    }

    public org.waveprotocol.wave.model.document.AnnotationCursor annotationCursor(int, int, org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r2;
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r1;
        int i0, i1;
        org.waveprotocol.wave.model.document.util.GenericAnnotationCursor $r0;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        if r2 != null goto label1;

        r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

     label1:
        $r0 = new org.waveprotocol.wave.model.document.util.GenericAnnotationCursor;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.GenericAnnotationCursor: void <init>(org.waveprotocol.wave.model.document.ReadableAnnotationSet,int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(r1, i0, i1, r2);

        return $r0;
    }

    public void forEachAnnotationAt(int, org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r0;
        int i0;
        org.waveprotocol.wave.model.util.ReadableStringMap$ProcV r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        i0 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.model.util.ReadableStringMap$ProcV;

        return;
    }

    public java.lang.Iterable annotationIntervals(int, int, org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r2;
        org.waveprotocol.wave.model.document.util.GenericAnnotationIntervalIterable $r0;
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r1;
        int i0, i1;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        if r2 != null goto label1;

        r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

     label1:
        $r0 = new org.waveprotocol.wave.model.document.util.GenericAnnotationIntervalIterable;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.GenericAnnotationIntervalIterable: void <init>(org.waveprotocol.wave.model.document.ReadableAnnotationSet,int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(r1, i0, i1, r2);

        return $r0;
    }

    public java.lang.Iterable rangedAnnotations(int, int, org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r2;
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r1;
        int i0, i1;
        org.waveprotocol.wave.model.document.util.GenericRangedAnnotationIterable $r0;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        if r2 != null goto label1;

        r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

     label1:
        $r0 = new org.waveprotocol.wave.model.document.util.GenericRangedAnnotationIterable;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.GenericRangedAnnotationIterable: void <init>(org.waveprotocol.wave.model.document.ReadableAnnotationSet,int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(r1, i0, i1, r2);

        return $r0;
    }

    public java.lang.String getInherited(java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r1;
        org.waveprotocol.wave.model.util.StringSet $r0;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        return $r0;
    }

    public org.waveprotocol.wave.model.util.ReadableStringSet knownKeysLive()
    {
        org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations r1;
        org.waveprotocol.wave.model.util.StringSet $r0;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/indexed/StubModifiableAnnotations;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.indexed.StubModifiableAnnotations: boolean $assertionsDisabled> = $z1;

        return;
    }
}
