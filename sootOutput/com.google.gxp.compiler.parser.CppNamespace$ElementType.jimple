abstract enum class com.google.gxp.compiler.parser.CppNamespace$ElementType extends java.lang.Enum
{
    public static final enum com.google.gxp.compiler.parser.CppNamespace$ElementType INCLUDE;
    private static final com.google.gxp.compiler.parser.CppNamespace$ElementType[] $VALUES;

    public static com.google.gxp.compiler.parser.CppNamespace$ElementType[] values()
    {
        com.google.gxp.compiler.parser.CppNamespace$ElementType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <com.google.gxp.compiler.parser.CppNamespace$ElementType: com.google.gxp.compiler.parser.CppNamespace$ElementType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (com.google.gxp.compiler.parser.CppNamespace$ElementType[]) $r1;

        return $r2;
    }

    public static com.google.gxp.compiler.parser.CppNamespace$ElementType valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        com.google.gxp.compiler.parser.CppNamespace$ElementType $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/google/gxp/compiler/parser/CppNamespace$ElementType;", r0);

        $r2 = (com.google.gxp.compiler.parser.CppNamespace$ElementType) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.google.gxp.compiler.parser.CppNamespace$ElementType r0;

        r0 := @this: com.google.gxp.compiler.parser.CppNamespace$ElementType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    abstract java.lang.Object acceptVisitor(com.google.gxp.compiler.parser.ParsedElementVisitor, com.google.gxp.compiler.parser.CppNamespace$CppElement);

    void <init>(java.lang.String, int, com.google.gxp.compiler.parser.CppNamespace$1)
    {
        com.google.gxp.compiler.parser.CppNamespace$ElementType r0;
        int i0;
        java.lang.String r1;
        com.google.gxp.compiler.parser.CppNamespace$1 r2;

        r0 := @this: com.google.gxp.compiler.parser.CppNamespace$ElementType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: com.google.gxp.compiler.parser.CppNamespace$1;

        specialinvoke r0.<com.google.gxp.compiler.parser.CppNamespace$ElementType: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        com.google.gxp.compiler.parser.CppNamespace$ElementType[] $r1;
        com.google.gxp.compiler.parser.CppNamespace$ElementType $r2;
        com.google.gxp.compiler.parser.CppNamespace$ElementType$1 $r0;

        $r0 = new com.google.gxp.compiler.parser.CppNamespace$ElementType$1;

        specialinvoke $r0.<com.google.gxp.compiler.parser.CppNamespace$ElementType$1: void <init>(java.lang.String,int)>("INCLUDE", 0);

        <com.google.gxp.compiler.parser.CppNamespace$ElementType: com.google.gxp.compiler.parser.CppNamespace$ElementType INCLUDE> = $r0;

        $r1 = newarray (com.google.gxp.compiler.parser.CppNamespace$ElementType)[1];

        $r2 = <com.google.gxp.compiler.parser.CppNamespace$ElementType: com.google.gxp.compiler.parser.CppNamespace$ElementType INCLUDE>;

        $r1[0] = $r2;

        <com.google.gxp.compiler.parser.CppNamespace$ElementType: com.google.gxp.compiler.parser.CppNamespace$ElementType[] $VALUES> = $r1;

        return;
    }
}
