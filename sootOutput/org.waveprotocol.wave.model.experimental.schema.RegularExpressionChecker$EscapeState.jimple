final class org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState extends org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State
{
    private final org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State stack;

    void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State)
    {
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState r0;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State r1;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState;

        r1 := @parameter0: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State;

        specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State: void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1)>(null);

        r0.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State stack> = r1;

        return;
    }

    org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State nextState(int, char) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r8;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState r0;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State $r1;
        char c0;
        int i1, $i2;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState;

        i1 := @parameter0: int;

        c0 := @parameter1: char;

        $i2 = (int) c0;

        lookupswitch($i2)
        {
            case 40: goto label1;
            case 41: goto label1;
            case 42: goto label1;
            case 46: goto label1;
            case 63: goto label1;
            case 92: goto label1;
            case 124: goto label1;
            default: goto label2;
        };

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State stack>;

        return $r1;

     label2:
        $r8 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected character after backslash at position ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r6);

        throw $r8;
    }

    void endOfInput() throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r0;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState r1;

        r1 := @this: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState;

        $r0 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        specialinvoke $r0.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>("Backslash at end of expression");

        throw $r0;
    }
}
