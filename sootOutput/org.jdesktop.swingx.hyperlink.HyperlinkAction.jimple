public class org.jdesktop.swingx.hyperlink.HyperlinkAction extends org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction
{
    private static final java.util.logging.Logger LOG;
    private java.awt.Desktop$Action desktopAction;
    private org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor visitor;

    public static org.jdesktop.swingx.hyperlink.HyperlinkAction createHyperlinkAction(java.net.URI)
    {
        org.jdesktop.swingx.hyperlink.HyperlinkAction $r1;
        java.awt.Desktop$Action $r2;
        java.net.URI r0;
        boolean $z0;

        r0 := @parameter0: java.net.URI;

        $z0 = staticinvoke <org.jdesktop.swingx.hyperlink.HyperlinkAction: boolean isMailURI(java.net.URI)>(r0);

        if $z0 == 0 goto label1;

        $r2 = <java.awt.Desktop$Action: java.awt.Desktop$Action MAIL>;

        goto label2;

     label1:
        $r2 = <java.awt.Desktop$Action: java.awt.Desktop$Action BROWSE>;

     label2:
        $r1 = staticinvoke <org.jdesktop.swingx.hyperlink.HyperlinkAction: org.jdesktop.swingx.hyperlink.HyperlinkAction createHyperlinkAction(java.net.URI,java.awt.Desktop$Action)>(r0, $r2);

        return $r1;
    }

    public static org.jdesktop.swingx.hyperlink.HyperlinkAction createHyperlinkAction(java.net.URI, java.awt.Desktop$Action)
    {
        org.jdesktop.swingx.hyperlink.HyperlinkAction $r0;
        java.awt.Desktop$Action r2;
        java.net.URI r1;

        r1 := @parameter0: java.net.URI;

        r2 := @parameter1: java.awt.Desktop$Action;

        $r0 = new org.jdesktop.swingx.hyperlink.HyperlinkAction;

        specialinvoke $r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: void <init>(java.net.URI,java.awt.Desktop$Action)>(r1, r2);

        return $r0;
    }

    private static boolean isMailURI(java.net.URI)
    {
        java.net.URI r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.net.URI;

        if r0 == null goto label1;

        $r1 = "mailto";

        $r2 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void <init>()
    {
        org.jdesktop.swingx.hyperlink.HyperlinkAction r0;
        java.awt.Desktop$Action $r1;

        r0 := @this: org.jdesktop.swingx.hyperlink.HyperlinkAction;

        $r1 = <java.awt.Desktop$Action: java.awt.Desktop$Action BROWSE>;

        specialinvoke r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: void <init>(java.awt.Desktop$Action)>($r1);

        return;
    }

    public void <init>(java.awt.Desktop$Action)
    {
        org.jdesktop.swingx.hyperlink.HyperlinkAction r0;
        java.awt.Desktop$Action r1;

        r0 := @this: org.jdesktop.swingx.hyperlink.HyperlinkAction;

        r1 := @parameter0: java.awt.Desktop$Action;

        specialinvoke r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: void <init>(java.net.URI,java.awt.Desktop$Action)>(null, r1);

        return;
    }

    public void <init>(java.net.URI, java.awt.Desktop$Action)
    {
        java.lang.UnsupportedOperationException $r11;
        java.awt.Desktop$Action r1, $r2, $r4;
        java.lang.IllegalArgumentException $r5;
        org.jdesktop.swingx.hyperlink.HyperlinkAction r0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.net.URI r3;
        java.lang.String $r10;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.hyperlink.HyperlinkAction;

        r3 := @parameter0: java.net.URI;

        r1 := @parameter1: java.awt.Desktop$Action;

        specialinvoke r0.<org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction: void <init>()>();

        $z0 = staticinvoke <java.awt.Desktop: boolean isDesktopSupported()>();

        if $z0 != 0 goto label1;

        $r11 = new java.lang.UnsupportedOperationException;

        specialinvoke $r11.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Desktop API is not supported on the current platform");

        throw $r11;

     label1:
        $r2 = <java.awt.Desktop$Action: java.awt.Desktop$Action BROWSE>;

        if r1 == $r2 goto label2;

        $r4 = <java.awt.Desktop$Action: java.awt.Desktop$Action MAIL>;

        if r1 == $r4 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal action type: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Must be BROWSE or MAIL");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label2:
        r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: java.awt.Desktop$Action desktopAction> = r1;

        specialinvoke r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor getURIVisitor()>();

        virtualinvoke r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: void setTarget(java.lang.Object)>(r3);

        return;
    }

    public void actionPerformed(java.awt.event.ActionEvent)
    {
        java.io.IOException $r7;
        java.util.logging.Logger $r9;
        java.awt.event.ActionEvent r11;
        org.jdesktop.swingx.hyperlink.HyperlinkAction r0;
        org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor $r1, $r4;
        java.lang.Object $r2, $r5;
        java.lang.StringBuilder $r8, $r10, $r12;
        java.net.URI $r3, $r6;
        java.lang.String $r13;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.hyperlink.HyperlinkAction;

        r11 := @parameter0: java.awt.event.ActionEvent;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor getURIVisitor()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: java.lang.Object getTarget()>();

        $r3 = (java.net.URI) $r2;

        $z0 = virtualinvoke $r1.<org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor: boolean isEnabled(java.net.URI)>($r3);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = specialinvoke r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor getURIVisitor()>();

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: java.lang.Object getTarget()>();

        $r6 = (java.net.URI) $r5;

        virtualinvoke $r4.<org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor: void visit(java.net.URI)>($r6);

        virtualinvoke r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: void setVisited(boolean)>(1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        virtualinvoke r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: void setVisited(boolean)>(0);

        $r9 = <org.jdesktop.swingx.hyperlink.HyperlinkAction: java.util.logging.Logger LOG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cant visit Desktop ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.util.logging.Logger: void fine(java.lang.String)>($r13);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.awt.Desktop$Action getDesktopAction()
    {
        org.jdesktop.swingx.hyperlink.HyperlinkAction r0;
        java.awt.Desktop$Action $r1;

        r0 := @this: org.jdesktop.swingx.hyperlink.HyperlinkAction;

        $r1 = r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: java.awt.Desktop$Action desktopAction>;

        return $r1;
    }

    protected void installTarget()
    {
        org.jdesktop.swingx.hyperlink.HyperlinkAction r0;
        org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor $r1;

        r0 := @this: org.jdesktop.swingx.hyperlink.HyperlinkAction;

        $r1 = r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor visitor>;

        if $r1 != null goto label1;

        return;

     label1:
        specialinvoke r0.<org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction: void installTarget()>();

        specialinvoke r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: void updateEnabled()>();

        return;
    }

    private void updateEnabled()
    {
        org.jdesktop.swingx.hyperlink.HyperlinkAction r0;
        org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor $r1;
        java.lang.Object $r2;
        java.net.URI $r3;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.hyperlink.HyperlinkAction;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor getURIVisitor()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: java.lang.Object getTarget()>();

        $r3 = (java.net.URI) $r2;

        $z0 = virtualinvoke $r1.<org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor: boolean isEnabled(java.net.URI)>($r3);

        virtualinvoke r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: void setEnabled(boolean)>($z0);

        return;
    }

    private org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor getURIVisitor()
    {
        org.jdesktop.swingx.hyperlink.HyperlinkAction r0;
        org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor $r1, $r2, $r3;

        r0 := @this: org.jdesktop.swingx.hyperlink.HyperlinkAction;

        $r1 = r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor visitor>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor createURIVisitor()>();

        r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor visitor> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor visitor>;

        return $r2;
    }

    private org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor createURIVisitor()
    {
        org.jdesktop.swingx.hyperlink.HyperlinkAction r0;
        org.jdesktop.swingx.hyperlink.HyperlinkAction$BrowseVisitor $r4;
        org.jdesktop.swingx.hyperlink.HyperlinkAction$MailVisitor $r5;
        org.jdesktop.swingx.hyperlink.HyperlinkAction$URIVisitor $r3;
        java.awt.Desktop$Action $r1, $r2;

        r0 := @this: org.jdesktop.swingx.hyperlink.HyperlinkAction;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.hyperlink.HyperlinkAction: java.awt.Desktop$Action getDesktopAction()>();

        $r2 = <java.awt.Desktop$Action: java.awt.Desktop$Action BROWSE>;

        if $r1 != $r2 goto label1;

        $r4 = new org.jdesktop.swingx.hyperlink.HyperlinkAction$BrowseVisitor;

        $r3 = $r4;

        specialinvoke $r4.<org.jdesktop.swingx.hyperlink.HyperlinkAction$BrowseVisitor: void <init>(org.jdesktop.swingx.hyperlink.HyperlinkAction,org.jdesktop.swingx.hyperlink.HyperlinkAction$1)>(r0, null);

        goto label2;

     label1:
        $r5 = new org.jdesktop.swingx.hyperlink.HyperlinkAction$MailVisitor;

        $r3 = $r5;

        specialinvoke $r5.<org.jdesktop.swingx.hyperlink.HyperlinkAction$MailVisitor: void <init>(org.jdesktop.swingx.hyperlink.HyperlinkAction,org.jdesktop.swingx.hyperlink.HyperlinkAction$1)>(r0, null);

     label2:
        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lorg/jdesktop/swingx/hyperlink/HyperlinkAction;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.jdesktop.swingx.hyperlink.HyperlinkAction: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
