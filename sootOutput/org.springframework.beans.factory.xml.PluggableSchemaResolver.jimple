public class org.springframework.beans.factory.xml.PluggableSchemaResolver extends java.lang.Object implements org.xml.sax.EntityResolver
{
    public static final java.lang.String DEFAULT_SCHEMA_MAPPINGS_LOCATION;
    private static final org.apache.commons.logging.Log logger;
    private final java.lang.ClassLoader classLoader;
    private final java.lang.String schemaMappingsLocation;
    private volatile java.util.Map schemaMappings;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        <org.springframework.beans.factory.xml.PluggableSchemaResolver: java.lang.String DEFAULT_SCHEMA_MAPPINGS_LOCATION> = "META-INF/spring.schemas";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/beans/factory/xml/PluggableSchemaResolver;");

        <org.springframework.beans.factory.xml.PluggableSchemaResolver: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        org.springframework.beans.factory.xml.PluggableSchemaResolver r0;
        java.lang.ClassLoader r1;

        r0 := @this: org.springframework.beans.factory.xml.PluggableSchemaResolver;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.beans.factory.xml.PluggableSchemaResolver: java.lang.ClassLoader classLoader> = r1;

        r0.<org.springframework.beans.factory.xml.PluggableSchemaResolver: java.lang.String schemaMappingsLocation> = "META-INF/spring.schemas";

        return;
    }

    public void <init>(java.lang.ClassLoader, java.lang.String)
    {
        org.springframework.beans.factory.xml.PluggableSchemaResolver r0;
        java.lang.String r1;
        java.lang.ClassLoader r2;

        r0 := @this: org.springframework.beans.factory.xml.PluggableSchemaResolver;

        r2 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r1, "\'schemaMappingsLocation\' must not be empty");

        r0.<org.springframework.beans.factory.xml.PluggableSchemaResolver: java.lang.ClassLoader classLoader> = r2;

        r0.<org.springframework.beans.factory.xml.PluggableSchemaResolver: java.lang.String schemaMappingsLocation> = r1;

        return;
    }

    public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.springframework.beans.factory.xml.PluggableSchemaResolver r2;
        java.util.Map $r3;
        boolean $z0, $z1, $z2;
        java.io.FileNotFoundException $r25;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r18, $r20, $r21, $r22, $r23, $r27, $r29, $r30, $r31;
        java.lang.ClassLoader $r7;
        org.springframework.core.io.ClassPathResource $r6;
        java.lang.String r1, r5, r10, $r17, $r24, $r32;
        org.xml.sax.InputSource $r8;
        org.apache.commons.logging.Log $r0, $r11, $r13, $r19, $r26, $r28;
        java.lang.Object $r4;
        java.io.InputStream $r9;

        r2 := @this: org.springframework.beans.factory.xml.PluggableSchemaResolver;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r0 = <org.springframework.beans.factory.xml.PluggableSchemaResolver: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r19 = <org.springframework.beans.factory.xml.PluggableSchemaResolver: org.apache.commons.logging.Log logger>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Trying to resolve XML entity with public id [");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] and system id [");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r24);

     label1:
        if r1 == null goto label5;

        $r3 = specialinvoke r2.<org.springframework.beans.factory.xml.PluggableSchemaResolver: java.util.Map getSchemaMappings()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.lang.String) $r4;

        if r5 == null goto label5;

        $r6 = new org.springframework.core.io.ClassPathResource;

        $r7 = r2.<org.springframework.beans.factory.xml.PluggableSchemaResolver: java.lang.ClassLoader classLoader>;

        specialinvoke $r6.<org.springframework.core.io.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(r5, $r7);

     label2:
        $r8 = new org.xml.sax.InputSource;

        $r9 = interfaceinvoke $r6.<org.springframework.core.io.Resource: java.io.InputStream getInputStream()>();

        specialinvoke $r8.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>($r9);

        virtualinvoke $r8.<org.xml.sax.InputSource: void setPublicId(java.lang.String)>(r10);

        virtualinvoke $r8.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>(r1);

        $r11 = <org.springframework.beans.factory.xml.PluggableSchemaResolver: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r11.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label3;

        $r13 = <org.springframework.beans.factory.xml.PluggableSchemaResolver: org.apache.commons.logging.Log logger>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Found XML schema [");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] in classpath: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r17);

     label3:
        return $r8;

     label4:
        $r25 := @caughtexception;

        $r26 = <org.springframework.beans.factory.xml.PluggableSchemaResolver: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r26.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label5;

        $r28 = <org.springframework.beans.factory.xml.PluggableSchemaResolver: org.apache.commons.logging.Log logger>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("Couldn\'t find XML schema [");

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r32, $r25);

     label5:
        return null;

        catch java.io.FileNotFoundException from label2 to label3 with label4;
    }

    private java.util.Map getSchemaMappings()
    {
        java.lang.Throwable $r20;
        org.springframework.beans.factory.xml.PluggableSchemaResolver r0;
        java.lang.IllegalStateException $r22;
        java.util.Map $r1, $r2, $r3;
        java.lang.String $r6, $r13, $r16, $r19, $r24, $r27;
        boolean $z0, $z1;
        java.util.Properties $r7;
        java.util.concurrent.ConcurrentHashMap $r9;
        java.io.IOException $r21;
        org.apache.commons.logging.Log $r4, $r8, $r11, $r15;
        java.lang.StringBuilder $r10, $r12, $r14, $r17, $r18, $r23, $r25, $r26;
        java.lang.ClassLoader $r5;

        r0 := @this: org.springframework.beans.factory.xml.PluggableSchemaResolver;

        $r1 = r0.<org.springframework.beans.factory.xml.PluggableSchemaResolver: java.util.Map schemaMappings>;

        if $r1 != null goto label10;

        entermonitor r0;

     label01:
        $r3 = r0.<org.springframework.beans.factory.xml.PluggableSchemaResolver: java.util.Map schemaMappings>;

        if $r3 != null goto label06;

        $r4 = <org.springframework.beans.factory.xml.PluggableSchemaResolver: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label02;

        $r15 = <org.springframework.beans.factory.xml.PluggableSchemaResolver: org.apache.commons.logging.Log logger>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Loading schema mappings from [");

        $r16 = r0.<org.springframework.beans.factory.xml.PluggableSchemaResolver: java.lang.String schemaMappingsLocation>;

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r19);

     label02:
        $r6 = r0.<org.springframework.beans.factory.xml.PluggableSchemaResolver: java.lang.String schemaMappingsLocation>;

        $r5 = r0.<org.springframework.beans.factory.xml.PluggableSchemaResolver: java.lang.ClassLoader classLoader>;

        $r7 = staticinvoke <org.springframework.core.io.support.PropertiesLoaderUtils: java.util.Properties loadAllProperties(java.lang.String,java.lang.ClassLoader)>($r6, $r5);

        $r8 = <org.springframework.beans.factory.xml.PluggableSchemaResolver: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r8.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label03;

        $r11 = <org.springframework.beans.factory.xml.PluggableSchemaResolver: org.apache.commons.logging.Log logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Loaded schema mappings: ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r13);

     label03:
        $r9 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r9.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        staticinvoke <org.springframework.util.CollectionUtils: void mergePropertiesIntoMap(java.util.Properties,java.util.Map)>($r7, $r9);

        r0.<org.springframework.beans.factory.xml.PluggableSchemaResolver: java.util.Map schemaMappings> = $r9;

     label04:
        goto label06;

     label05:
        $r21 := @caughtexception;

        $r22 = new java.lang.IllegalStateException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to load schema mappings from location [");

        $r24 = r0.<org.springframework.beans.factory.xml.PluggableSchemaResolver: java.lang.String schemaMappingsLocation>;

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r27, $r21);

        throw $r22;

     label06:
        exitmonitor r0;

     label07:
        goto label10;

     label08:
        $r20 := @caughtexception;

        exitmonitor r0;

     label09:
        throw $r20;

     label10:
        $r2 = r0.<org.springframework.beans.factory.xml.PluggableSchemaResolver: java.util.Map schemaMappings>;

        return $r2;

        catch java.io.IOException from label02 to label04 with label05;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public java.lang.String toString()
    {
        org.springframework.beans.factory.xml.PluggableSchemaResolver r1;
        java.util.Map $r2;
        java.lang.StringBuilder $r0, $r3;
        java.lang.String $r4;

        r1 := @this: org.springframework.beans.factory.xml.PluggableSchemaResolver;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("EntityResolver using mappings ");

        $r2 = specialinvoke r1.<org.springframework.beans.factory.xml.PluggableSchemaResolver: java.util.Map getSchemaMappings()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
}
