public class org.apache.http.protocol.HttpRequestHandlerRegistry extends java.lang.Object implements org.apache.http.protocol.HttpRequestHandlerResolver
{
    private final org.apache.http.protocol.UriPatternMatcher matcher;

    public void <init>()
    {
        org.apache.http.protocol.UriPatternMatcher $r1;
        org.apache.http.protocol.HttpRequestHandlerRegistry r0;

        r0 := @this: org.apache.http.protocol.HttpRequestHandlerRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.http.protocol.UriPatternMatcher;

        specialinvoke $r1.<org.apache.http.protocol.UriPatternMatcher: void <init>()>();

        r0.<org.apache.http.protocol.HttpRequestHandlerRegistry: org.apache.http.protocol.UriPatternMatcher matcher> = $r1;

        return;
    }

    public void register(java.lang.String, org.apache.http.protocol.HttpRequestHandler)
    {
        org.apache.http.protocol.HttpRequestHandler r1;
        org.apache.http.protocol.UriPatternMatcher $r3;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r4, $r5;
        org.apache.http.protocol.HttpRequestHandlerRegistry r2;

        r2 := @this: org.apache.http.protocol.HttpRequestHandlerRegistry;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.http.protocol.HttpRequestHandler;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("URI request pattern may not be null");

        throw $r5;

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Request handler may not be null");

        throw $r4;

     label2:
        $r3 = r2.<org.apache.http.protocol.HttpRequestHandlerRegistry: org.apache.http.protocol.UriPatternMatcher matcher>;

        virtualinvoke $r3.<org.apache.http.protocol.UriPatternMatcher: void register(java.lang.String,java.lang.Object)>(r0, r1);

        return;
    }

    public void unregister(java.lang.String)
    {
        org.apache.http.protocol.UriPatternMatcher $r2;
        java.lang.String r1;
        org.apache.http.protocol.HttpRequestHandlerRegistry r0;

        r0 := @this: org.apache.http.protocol.HttpRequestHandlerRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.http.protocol.HttpRequestHandlerRegistry: org.apache.http.protocol.UriPatternMatcher matcher>;

        virtualinvoke $r2.<org.apache.http.protocol.UriPatternMatcher: void unregister(java.lang.String)>(r1);

        return;
    }

    public void setHandlers(java.util.Map)
    {
        org.apache.http.protocol.UriPatternMatcher $r2;
        org.apache.http.protocol.HttpRequestHandlerRegistry r0;
        java.util.Map r1;

        r0 := @this: org.apache.http.protocol.HttpRequestHandlerRegistry;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<org.apache.http.protocol.HttpRequestHandlerRegistry: org.apache.http.protocol.UriPatternMatcher matcher>;

        virtualinvoke $r2.<org.apache.http.protocol.UriPatternMatcher: void setObjects(java.util.Map)>(r1);

        return;
    }

    public java.util.Map getHandlers()
    {
        org.apache.http.protocol.UriPatternMatcher $r1;
        org.apache.http.protocol.HttpRequestHandlerRegistry r0;
        java.util.Map $r2;

        r0 := @this: org.apache.http.protocol.HttpRequestHandlerRegistry;

        $r1 = r0.<org.apache.http.protocol.HttpRequestHandlerRegistry: org.apache.http.protocol.UriPatternMatcher matcher>;

        $r2 = virtualinvoke $r1.<org.apache.http.protocol.UriPatternMatcher: java.util.Map getObjects()>();

        return $r2;
    }

    public org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String)
    {
        org.apache.http.protocol.HttpRequestHandler $r4;
        org.apache.http.protocol.UriPatternMatcher $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        org.apache.http.protocol.HttpRequestHandlerRegistry r0;

        r0 := @this: org.apache.http.protocol.HttpRequestHandlerRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.http.protocol.HttpRequestHandlerRegistry: org.apache.http.protocol.UriPatternMatcher matcher>;

        $r3 = virtualinvoke $r2.<org.apache.http.protocol.UriPatternMatcher: java.lang.Object lookup(java.lang.String)>(r1);

        $r4 = (org.apache.http.protocol.HttpRequestHandler) $r3;

        return $r4;
    }
}
