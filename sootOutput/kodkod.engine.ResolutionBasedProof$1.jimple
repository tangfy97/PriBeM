final class kodkod.engine.ResolutionBasedProof$1 extends java.lang.Object implements kodkod.engine.fol2sat.RecordFilter
{
    final kodkod.engine.ResolutionBasedProof this$0;
    private final kodkod.util.ints.IntSet val$coreVars;

    void <init>(kodkod.engine.ResolutionBasedProof, kodkod.util.ints.IntSet)
    {
        kodkod.engine.ResolutionBasedProof r1;
        kodkod.engine.ResolutionBasedProof$1 r0;
        kodkod.util.ints.IntSet r2;

        r0 := @this: kodkod.engine.ResolutionBasedProof$1;

        r1 := @parameter0: kodkod.engine.ResolutionBasedProof;

        r2 := @parameter1: kodkod.util.ints.IntSet;

        r0.<kodkod.engine.ResolutionBasedProof$1: kodkod.engine.ResolutionBasedProof this$0> = r1;

        r0.<kodkod.engine.ResolutionBasedProof$1: kodkod.util.ints.IntSet val$coreVars> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean accept(kodkod.ast.Node, kodkod.ast.Formula, int, java.util.Map)
    {
        kodkod.engine.ResolutionBasedProof$1 r0;
        kodkod.util.ints.IntSet $r1;
        kodkod.ast.Formula r3;
        kodkod.ast.Node r2;
        java.util.Map r4;
        int i0, $i1;
        boolean $z0;

        r0 := @this: kodkod.engine.ResolutionBasedProof$1;

        r2 := @parameter0: kodkod.ast.Node;

        r3 := @parameter1: kodkod.ast.Formula;

        i0 := @parameter2: int;

        r4 := @parameter3: java.util.Map;

        $r1 = r0.<kodkod.engine.ResolutionBasedProof$1: kodkod.util.ints.IntSet val$coreVars>;

        $i1 = staticinvoke <java.lang.StrictMath: int abs(int)>(i0);

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: boolean contains(int)>($i1);

        return $z0;
    }
}
