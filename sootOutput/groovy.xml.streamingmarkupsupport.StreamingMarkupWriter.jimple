public class groovy.xml.streamingmarkupsupport.StreamingMarkupWriter extends java.io.Writer
{
    protected final java.io.Writer writer;
    protected final java.lang.String encoding;
    protected boolean encodingKnown;
    protected final java.nio.charset.CharsetEncoder encoder;
    protected boolean writingAttribute;
    protected boolean haveHighSurrogate;
    protected java.lang.StringBuffer surrogatePair;
    private final java.io.Writer escapedWriter;

    public void <init>(java.io.Writer, java.lang.String)
    {
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1 $r2;
        java.nio.charset.Charset $r12;
        groovy.io.EncodingAwareBufferedWriter $r5;
        java.lang.StringBuffer $r1;
        java.io.OutputStreamWriter $r8;
        java.lang.String r4, $r6, $r7, $r9, $r10, $r11;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter r0;
        boolean $z0, $z1;
        java.nio.charset.CharsetEncoder $r13;
        java.io.Writer r3;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter;

        r3 := @parameter0: java.io.Writer;

        r4 := @parameter1: java.lang.String;

        specialinvoke r0.<java.io.Writer: void <init>()>();

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: boolean writingAttribute> = 0;

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: boolean haveHighSurrogate> = 0;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(2);

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.lang.StringBuffer surrogatePair> = $r1;

        $r2 = new groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1;

        specialinvoke $r2.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter$1: void <init>(groovy.xml.streamingmarkupsupport.StreamingMarkupWriter)>(r0);

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer escapedWriter> = $r2;

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer writer> = r3;

        if r4 == null goto label1;

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.lang.String encoding> = r4;

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: boolean encodingKnown> = 1;

        goto label4;

     label1:
        $z0 = r3 instanceof java.io.OutputStreamWriter;

        if $z0 == 0 goto label2;

        $r8 = (java.io.OutputStreamWriter) r3;

        $r9 = virtualinvoke $r8.<java.io.OutputStreamWriter: java.lang.String getEncoding()>();

        $r10 = specialinvoke r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.lang.String getNormalizedEncoding(java.lang.String)>($r9);

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.lang.String encoding> = $r10;

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: boolean encodingKnown> = 1;

        goto label4;

     label2:
        $z1 = r3 instanceof groovy.io.EncodingAwareBufferedWriter;

        if $z1 == 0 goto label3;

        $r5 = (groovy.io.EncodingAwareBufferedWriter) r3;

        $r6 = virtualinvoke $r5.<groovy.io.EncodingAwareBufferedWriter: java.lang.String getEncoding()>();

        $r7 = specialinvoke r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.lang.String getNormalizedEncoding(java.lang.String)>($r6);

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.lang.String encoding> = $r7;

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: boolean encodingKnown> = 1;

        goto label4;

     label3:
        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.lang.String encoding> = "US-ASCII";

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: boolean encodingKnown> = 0;

     label4:
        $r11 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.lang.String encoding>;

        $r12 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.nio.charset.CharsetEncoder encoder> = $r13;

        return;
    }

    private java.lang.String getNormalizedEncoding(java.lang.String)
    {
        java.nio.charset.Charset $r1;
        java.lang.String r0, $r2;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter r3;

        r3 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<java.nio.charset.Charset: java.lang.String name()>();

        return $r2;
    }

    public void <init>(java.io.Writer)
    {
        java.io.Writer r1;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter r0;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter;

        r1 := @parameter0: java.io.Writer;

        specialinvoke r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: void <init>(java.io.Writer,java.lang.String)>(r1, null);

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.Writer $r1;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter r0;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter;

        $r1 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void close()>();

        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.Writer $r1;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter r0;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter;

        $r1 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }

    public void write(int) throws java.io.IOException
    {
        boolean $z0, $z1, $z2, $z3;
        java.nio.charset.CharsetEncoder $r1, $r13;
        java.io.Writer $r2, $r3, $r4, $r5, $r7, $r14, $r16, $r18, $r21;
        java.lang.StringBuffer $r8, $r9, $r11, $r12, $r15, $r19, $r20;
        int i0, $i6, $i7, $i8, $i9, $i11, $i13, $i14, $i16, $i18;
        java.lang.String $r6, $r17, $r22;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter r0;
        char $c1, $c2, $c3, $c4, $c5;
        java.io.IOException $r23;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter;

        i0 := @parameter0: int;

        $i11 = (int) 56320;

        if i0 < $i11 goto label3;

        $i13 = (int) 57343;

        if i0 > $i13 goto label3;

        $r11 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.lang.StringBuffer surrogatePair>;

        $c3 = (char) i0;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $r13 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.nio.charset.CharsetEncoder encoder>;

        $r12 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.lang.StringBuffer surrogatePair>;

        $z3 = virtualinvoke $r13.<java.nio.charset.CharsetEncoder: boolean canEncode(java.lang.CharSequence)>($r12);

        if $z3 == 0 goto label1;

        $r21 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer writer>;

        $r20 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.lang.StringBuffer surrogatePair>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r21.<java.io.Writer: void write(java.lang.String)>($r22);

        goto label2;

     label1:
        $r14 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer writer>;

        virtualinvoke $r14.<java.io.Writer: void write(java.lang.String)>("&#x");

        $r16 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer writer>;

        $r15 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.lang.StringBuffer surrogatePair>;

        $c4 = virtualinvoke $r15.<java.lang.StringBuffer: char charAt(int)>(0);

        $c5 = $c4 & 1023;

        $i14 = (int) $c5;

        $i6 = $i14 << 10;

        $i8 = 65536 + $i6;

        $i7 = i0 & 1023;

        $i9 = $i8 + $i7;

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i9);

        virtualinvoke $r16.<java.io.Writer: void write(java.lang.String)>($r17);

        $r18 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer writer>;

        virtualinvoke $r18.<java.io.Writer: void write(int)>(59);

     label2:
        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: boolean haveHighSurrogate> = 0;

        $r19 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.lang.StringBuffer surrogatePair>;

        virtualinvoke $r19.<java.lang.StringBuffer: void setLength(int)>(0);

        goto label8;

     label3:
        $z0 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: boolean haveHighSurrogate>;

        if $z0 == 0 goto label4;

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: boolean haveHighSurrogate> = 0;

        $r9 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.lang.StringBuffer surrogatePair>;

        virtualinvoke $r9.<java.lang.StringBuffer: void setLength(int)>(0);

        $r23 = new java.io.IOException;

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>("High Surrogate not followed by Low Surrogate");

        throw $r23;

     label4:
        $i16 = (int) 55296;

        if i0 < $i16 goto label5;

        $i18 = (int) 56319;

        if i0 > $i18 goto label5;

        $r8 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.lang.StringBuffer surrogatePair>;

        $c2 = (char) i0;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: boolean haveHighSurrogate> = 1;

        goto label8;

     label5:
        $r1 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.nio.charset.CharsetEncoder encoder>;

        $c1 = (char) i0;

        $z1 = virtualinvoke $r1.<java.nio.charset.CharsetEncoder: boolean canEncode(char)>($c1);

        if $z1 != 0 goto label6;

        $r4 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>("&#x");

        $r5 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer writer>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r5.<java.io.Writer: void write(java.lang.String)>($r6);

        $r7 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer writer>;

        virtualinvoke $r7.<java.io.Writer: void write(int)>(59);

        goto label8;

     label6:
        if i0 != 39 goto label7;

        $z2 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: boolean writingAttribute>;

        if $z2 == 0 goto label7;

        $r3 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("&apos;");

        goto label8;

     label7:
        $r2 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(int)>(i0);

     label8:
        return;
    }

    public void write(char[], int, int) throws java.io.IOException
    {
        char $c2;
        int $i0, $i1, i3, i4, $i6, $i7;
        char[] r1;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter r0;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter;

        r1 := @parameter0: char[];

        i3 := @parameter1: int;

        i4 := @parameter2: int;

     label1:
        $i0 = i4;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        if $i0 <= 0 goto label2;

        $i1 = i3;

        i3 = i3 + 1;

        $c2 = r1[$i1];

        $i7 = (int) $c2;

        virtualinvoke r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: void write(int)>($i7);

        goto label1;

     label2:
        return;
    }

    public void setWritingAttribute(boolean)
    {
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter r0;
        boolean z0;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter;

        z0 := @parameter0: boolean;

        r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: boolean writingAttribute> = z0;

        return;
    }

    public java.io.Writer escaped()
    {
        java.io.Writer $r1;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter r0;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter;

        $r1 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer escapedWriter>;

        return $r1;
    }

    public java.io.Writer unescaped()
    {
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter r0;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter;

        return r0;
    }

    public java.lang.String getEncoding()
    {
        java.lang.String $r1;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter r0;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter;

        $r1 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.lang.String encoding>;

        return $r1;
    }

    public boolean getEncodingKnown()
    {
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter r0;
        boolean $z0;

        r0 := @this: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter;

        $z0 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: boolean encodingKnown>;

        return $z0;
    }

    static java.io.Writer access$000(groovy.xml.streamingmarkupsupport.StreamingMarkupWriter)
    {
        java.io.Writer $r1;
        groovy.xml.streamingmarkupsupport.StreamingMarkupWriter r0;

        r0 := @parameter0: groovy.xml.streamingmarkupsupport.StreamingMarkupWriter;

        $r1 = r0.<groovy.xml.streamingmarkupsupport.StreamingMarkupWriter: java.io.Writer escapedWriter>;

        return $r1;
    }
}
