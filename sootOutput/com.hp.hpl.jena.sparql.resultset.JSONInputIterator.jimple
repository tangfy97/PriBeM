public class com.hp.hpl.jena.sparql.resultset.JSONInputIterator extends com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorBase
{
    private java.io.InputStream input;
    private boolean isBooleanResults;
    private boolean boolResult;
    private boolean headerSeen;
    private com.hp.hpl.jena.sparql.engine.binding.Binding binding;
    private org.apache.jena.atlas.json.io.parser.TokenizerJSON tokens;
    private org.apache.jena.atlas.iterator.PeekIterator peekIter;
    private java.util.Queue cache;
    private java.util.Set vars;
    private org.apache.jena.riot.tokens.Token tokenEOF;
    protected long currLine;
    protected long currCol;

    public void <init>(java.io.InputStream)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        org.apache.jena.atlas.io.PeekReader $r5;
        java.util.HashSet $r2;
        org.apache.jena.atlas.iterator.PeekIterator $r6;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON $r4, $r7;
        java.util.LinkedList $r1;
        java.io.InputStream r3;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        r3 := @parameter0: java.io.InputStream;

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean isBooleanResults> = 0;

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean boolResult> = 0;

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean headerSeen> = 0;

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: com.hp.hpl.jena.sparql.engine.binding.Binding binding> = null;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: java.util.Queue cache> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: java.util.Set vars> = $r2;

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token tokenEOF> = null;

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: long currLine> = -1L;

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: long currCol> = -1L;

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: java.io.InputStream input> = r3;

        $r4 = new org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $r5 = staticinvoke <org.apache.jena.atlas.io.PeekReader: org.apache.jena.atlas.io.PeekReader makeUTF8(java.io.InputStream)>(r3);

        specialinvoke $r4.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void <init>(org.apache.jena.atlas.io.PeekReader)>($r5);

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.atlas.json.io.parser.TokenizerJSON tokens> = $r4;

        $r6 = new org.apache.jena.atlas.iterator.PeekIterator;

        $r7 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.atlas.json.io.parser.TokenizerJSON tokens>;

        specialinvoke $r6.<org.apache.jena.atlas.iterator.PeekIterator: void <init>(java.util.Iterator)>($r7);

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.atlas.iterator.PeekIterator peekIter> = $r6;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void preParse()>();

        return;
    }

    public java.util.Iterator getVars()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        java.util.Set $r1;
        java.util.Iterator $r2;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: java.util.Set vars>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        return $r2;
    }

    public boolean isBooleanResult()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $z0 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean isBooleanResults>;

        return $z0;
    }

    private void preParse()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        java.lang.Object[] $r4, $r8, $r10, $r13, $r14;
        org.apache.jena.riot.tokens.Token $r3, $r5, $r7, $r9, $r11;
        java.lang.String $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.apache.jena.riot.tokens.TokenType $r1, $r2, $r6, $r15;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACE>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void expect(java.lang.String,org.apache.jena.riot.tokens.TokenType)>("Expected the start of the JSON Results Object", $r1);

     label01:
        $z10 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean isPropertyName()>();

        if $z10 != 0 goto label10;

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r12 = virtualinvoke $r11.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkColon()>();

        $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("head");

        if $z3 == 0 goto label03;

        $z9 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean headerSeen>;

        if $z9 == 0 goto label02;

        $r14 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r11, "Invalid duplicate header property", $r14);

     label02:
        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void parseHeader()>();

        goto label09;

     label03:
        $z4 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("boolean");

        if $z4 == 0 goto label04;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void parseBoolean()>();

        goto label09;

     label04:
        $z5 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("results");

        if $z5 == 0 goto label08;

        $z6 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean isBooleanResults>;

        if $z6 == 0 goto label05;

        $r13 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r11, "Encountered results property when boolean property has already been countered", $r13);

     label05:
        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void parseToFirstResult()>();

        $z7 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean headerSeen>;

        if $z7 == 0 goto label06;

        return;

     label06:
        $z8 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean cacheResults(int)>(100);

        if $z8 != 0 goto label07;

        return;

     label07:
        goto label09;

     label08:
        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void ignoreValue()>();

     label09:
        $r15 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkComma(org.apache.jena.riot.tokens.TokenType)>($r15);

        goto label01;

     label10:
        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z0 == 0 goto label13;

        $z1 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean headerSeen>;

        if $z1 != 0 goto label11;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r10 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r9, "End of JSON Results Object encountered before a valid header was seen", $r10);

     label11:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r6 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType EOF>;

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r6);

        if $z2 != 0 goto label12;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r8 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r7, "Unexpected content after end of JSON Results Object", $r8);

     label12:
        return;

     label13:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r4 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r4[0] = $r5;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r3, "Expected a JSON property name but got %s", $r4);

        goto label01;
    }

    private void parseHeader()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        java.lang.Object[] $r3, $r6;
        org.apache.jena.riot.tokens.Token $r2, $r4;
        org.apache.jena.riot.tokens.TokenType $r1, $r7;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

     label1:
        $z3 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean isPropertyName()>();

        if $z3 == 0 goto label5;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r5 = virtualinvoke $r4.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkColon()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("vars");

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void parseVars()>();

        goto label4;

     label2:
        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("link");

        if $z2 == 0 goto label3;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void skipLinks()>();

        goto label4;

     label3:
        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r5;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r4, "Unexpected property %s encountered in head object", $r6);

     label4:
        $r7 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkComma(org.apache.jena.riot.tokens.TokenType)>($r7);

        goto label1;

     label5:
        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label6;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        return;

     label6:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r2, "Unexpected Token encountered while parsing head object", $r3);

        goto label1;
    }

    private void parseVars()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        java.lang.Object[] $r3, $r12;
        org.apache.jena.riot.tokens.Token $r2, $r5, $r11;
        java.lang.String $r6;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r4, $r7;
        org.apache.jena.riot.tokens.TokenType $r1, $r8, $r9, $r10, $r13;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACKET>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label5;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r4 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: java.util.Set vars>;

        interfaceinvoke $r4.<java.util.Set: void clear()>();

     label1:
        $r13 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING1>;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r13);

        if $z3 != 0 goto label2;

        $r9 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING2>;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r9);

        if $z1 == 0 goto label3;

     label2:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r6 = virtualinvoke $r5.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $r7 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: java.util.Set vars>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r6);

        $r8 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACKET>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkComma(org.apache.jena.riot.tokens.TokenType)>($r8);

        goto label1;

     label3:
        $r10 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACKET>;

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r10);

        if $z2 == 0 goto label4;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        return;

     label4:
        $r11 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r12 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r11, "Unexpected Token encountered while parsing the variables list in the head object", $r12);

        goto label1;

     label5:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r2, "Unexpected Token ecountered, expected a [ to start the array of variables in the head object", $r3);

        return;
    }

    private void skipLinks()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        java.lang.Object[] $r3, $r9;
        org.apache.jena.riot.tokens.Token $r2, $r8;
        org.apache.jena.riot.tokens.TokenType $r1, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACKET>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label6;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

     label1:
        $r4 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACKET>;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r4);

        if $z1 == 0 goto label2;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        return;

     label2:
        $r5 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING1>;

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r5);

        if $z2 != 0 goto label3;

        $r7 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING2>;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r7);

        if $z3 == 0 goto label4;

     label3:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        goto label5;

     label4:
        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r9 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r8, "Unexpected Token when a Link URI was expected", $r9);

     label5:
        $r6 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACKET>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkComma(org.apache.jena.riot.tokens.TokenType)>($r6);

        goto label1;

     label6:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r2, "Unexpected token when a [ was expected to start the list of URIs for a link property", $r3);

        return;
    }

    private void parseToFirstResult()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        java.lang.Object[] $r3, $r5, $r8, $r11;
        org.apache.jena.riot.tokens.Token $r2, $r4, $r6, $r10;
        java.lang.String $r7;
        boolean $z0, $z1, $z2, $z3;
        org.apache.jena.riot.tokens.TokenType $r1, $r9;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACE>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label5;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $z1 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean isPropertyName()>();

        if $z1 == 0 goto label4;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r7 = virtualinvoke $r6.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("bindings");

        if $z2 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkColon()>();

        $r9 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACKET>;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r9);

        if $z3 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        goto label3;

     label1:
        $r10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r11 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r10, "Unexpected Token encountered, expected a [ for the start of the bindings array", $r11);

        goto label3;

     label2:
        $r8 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r6, "Unexpected Token encountered, expected the bindings property", $r8);

     label3:
        goto label6;

     label4:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r5 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r4, "Unexpected Token ecnountered, expected the bindings property", $r5);

        goto label6;

     label5:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r2, "Unexpected Token encountered, expected a { to start the results list object", $r3);

     label6:
        return;
    }

    private void parseToEnd()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        org.apache.jena.riot.tokens.TokenType $r1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkComma(org.apache.jena.riot.tokens.TokenType)>($r1);

        return;
    }

    private void ignoreValue()
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        java.lang.Object[] $r8;
        org.apache.jena.riot.tokens.Token $r7, $r10, $r16;
        int i0, i1, $i3, $i5;
        org.apache.jena.riot.tokens.TokenType $r1, $r2, $r3, $r4, $r5, $r6, $r9, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r22;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean isPropertyName()>();

        if $z0 == 0 goto label01;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r21 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkComma(org.apache.jena.riot.tokens.TokenType)>($r21);

        goto label14;

     label01:
        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType DECIMAL>;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z1 != 0 goto label02;

        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType INTEGER>;

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z2 != 0 goto label02;

        $r3 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType DOUBLE>;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r3);

        if $z3 != 0 goto label02;

        $r4 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType KEYWORD>;

        $z4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r4);

        if $z4 == 0 goto label03;

     label02:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r22 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkComma(org.apache.jena.riot.tokens.TokenType)>($r22);

        goto label14;

     label03:
        $r5 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACE>;

        $z5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r5);

        if $z5 == 0 goto label08;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        i0 = 1;

     label04:
        if i0 < 1 goto label07;

        $r16 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r17 = virtualinvoke $r16.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.TokenType getType()>();

        $r18 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACE>;

        $z9 = virtualinvoke $r17.<org.apache.jena.riot.tokens.TokenType: boolean equals(java.lang.Object)>($r18);

        if $z9 == 0 goto label05;

        i0 = i0 + 1;

        goto label06;

     label05:
        $r19 = virtualinvoke $r16.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.TokenType getType()>();

        $r20 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        $z10 = virtualinvoke $r19.<org.apache.jena.riot.tokens.TokenType: boolean equals(java.lang.Object)>($r20);

        if $z10 == 0 goto label06;

        $i3 = (int) -1;

        i0 = i0 + $i3;

     label06:
        goto label04;

     label07:
        $r15 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkComma(org.apache.jena.riot.tokens.TokenType)>($r15);

        goto label14;

     label08:
        $r6 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACKET>;

        $z6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r6);

        if $z6 == 0 goto label13;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        i1 = 1;

     label09:
        if i1 < 1 goto label12;

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r11 = virtualinvoke $r10.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.TokenType getType()>();

        $r12 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACKET>;

        $z7 = virtualinvoke $r11.<org.apache.jena.riot.tokens.TokenType: boolean equals(java.lang.Object)>($r12);

        if $z7 == 0 goto label10;

        i1 = i1 + 1;

        goto label11;

     label10:
        $r13 = virtualinvoke $r10.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.TokenType getType()>();

        $r14 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACKET>;

        $z8 = virtualinvoke $r13.<org.apache.jena.riot.tokens.TokenType: boolean equals(java.lang.Object)>($r14);

        if $z8 == 0 goto label11;

        $i5 = (int) -1;

        i1 = i1 + $i5;

     label11:
        goto label09;

     label12:
        $r9 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkComma(org.apache.jena.riot.tokens.TokenType)>($r9);

        goto label14;

     label13:
        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r8 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r7, "Unexpected Token", $r8);

     label14:
        return;
    }

    private boolean cacheResults(int)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r1;
        int i0, i1;
        java.util.Queue $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean parseNextBinding()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: java.util.Queue cache>;

        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        interfaceinvoke $r2.<java.util.Queue: boolean add(java.lang.Object)>($r1);

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: com.hp.hpl.jena.sparql.engine.binding.Binding binding> = null;

        goto label3;

     label2:
        return 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return 0;
    }

    private void parseBoolean()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        java.lang.Object[] $r3, $r6;
        org.apache.jena.riot.tokens.Token $r2, $r4;
        org.apache.jena.riot.tokens.TokenType $r1;
        java.lang.String $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean isBooleanResults> = 1;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType KEYWORD>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label4;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r5 = virtualinvoke $r4.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z1 == 0 goto label1;

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean boolResult> = 1;

        goto label3;

     label1:
        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z2 == 0 goto label2;

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean boolResult> = 0;

        goto label3;

     label2:
        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r5;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r4, "Unexpected keyword %s encountered, expected true or false", $r6);

     label3:
        goto label5;

     label4:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r2, "Unexpected token when a true/false keyword was expected for the value of the boolean property", $r3);

     label5:
        return;
    }

    public void output(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.sparql.serializer.SerializationContext)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r1;
        org.apache.jena.atlas.io.IndentedWriter r0;
        com.hp.hpl.jena.sparql.serializer.SerializationContext r2;

        r1 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r2 := @parameter1: com.hp.hpl.jena.sparql.serializer.SerializationContext;

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void println(java.lang.String)>("JSONInputIterator");

        return;
    }

    protected boolean hasNextBinding()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r3, $r6;
        int $i0;
        java.lang.Object $r5;
        java.util.Queue $r2, $r4;
        boolean $z0, $z1;
        java.io.InputStream $r1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $z0 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean isBooleanResults>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: java.io.InputStream input>;

        if $r1 == null goto label4;

        $r2 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: java.util.Queue cache>;

        $i0 = interfaceinvoke $r2.<java.util.Queue: int size()>();

        if $i0 <= 0 goto label2;

        $r4 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: java.util.Queue cache>;

        $r5 = interfaceinvoke $r4.<java.util.Queue: java.lang.Object remove()>();

        $r6 = (com.hp.hpl.jena.sparql.engine.binding.Binding) $r5;

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: com.hp.hpl.jena.sparql.engine.binding.Binding binding> = $r6;

        return 1;

     label2:
        $r3 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        if $r3 != null goto label3;

        $z1 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean parseNextBinding()>();

        return $z1;

     label3:
        return 1;

     label4:
        return 0;
    }

    private boolean parseNextBinding()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        java.lang.Object[] $r4, $r7, $r11;
        com.hp.hpl.jena.graph.Node $r15;
        org.apache.jena.riot.tokens.Token $r3, $r6, $r10, $r13;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r8;
        java.lang.String $r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.sparql.core.Var $r16;
        org.apache.jena.riot.tokens.TokenType $r1, $r2, $r5, $r9, $r12, $r17;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACE>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label5;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create()>();

     label1:
        $z4 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean isPropertyName()>();

        if $z4 == 0 goto label2;

        $r13 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r14 = virtualinvoke $r13.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkColon()>();

        $r15 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: com.hp.hpl.jena.graph.Node parseNode()>();

        $r16 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>($r14);

        interfaceinvoke $r8.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r16, $r15);

        $r17 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkComma(org.apache.jena.riot.tokens.TokenType)>($r17);

        goto label1;

     label2:
        $r9 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r9);

        if $z3 == 0 goto label3;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r12 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACKET>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkComma(org.apache.jena.riot.tokens.TokenType)>($r12);

        goto label4;

     label3:
        $r10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r11 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r10, "Unexpected Token encountered, expected a property name to indicate the value for a variable", $r11);

        goto label1;

     label4:
        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: com.hp.hpl.jena.sparql.engine.binding.Binding binding> = $r8;

        return 1;

     label5:
        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACKET>;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z1 == 0 goto label7;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r5 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r5);

        if $z2 == 0 goto label6;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void parseToEnd()>();

        goto label8;

     label6:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r7 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r6, "Unexpected Token encountered, expected a } to end the results object", $r7);

        goto label8;

     label7:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r3, "Unexpected Token encountered, expected a { for the start of a binding of ] to end the array of bindings", $r4);

     label8:
        return 0;
    }

    private com.hp.hpl.jena.graph.Node parseNode()
    {
        com.hp.hpl.jena.graph.Node $r10, $r11, $r12, $r15, $r16;
        com.hp.hpl.jena.rdf.model.AnonId $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        java.lang.Object[] $r3, $r7, $r8, $r17, $r18, $r21, $r22, $r23, $r24, $r25;
        com.hp.hpl.jena.datatypes.TypeMapper $r13;
        org.apache.jena.riot.tokens.Token $r2, $r4, $r6, $r19;
        java.lang.String $r20, r26, r27, r28, r29;
        org.apache.jena.riot.tokens.TokenType $r1, $r5;
        com.hp.hpl.jena.datatypes.RDFDatatype $r14;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        r26 = null;

        r27 = null;

        r28 = null;

        r29 = null;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACE>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label21;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

     label01:
        $z9 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean isPropertyName()>();

        if $z9 == 0 goto label11;

        $r19 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r20 = virtualinvoke $r19.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkColon()>();

        $z5 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("type");

        if $z5 == 0 goto label03;

        if r29 == null goto label02;

        $r25 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r19, "Illegal duplicate type property", $r25);

     label02:
        r29 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: java.lang.String parseNodeInfo(java.lang.String)>("type");

        goto label10;

     label03:
        $z6 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("value");

        if $z6 == 0 goto label05;

        if r28 == null goto label04;

        $r24 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r19, "Illegal duplicate value property", $r24);

     label04:
        r28 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: java.lang.String parseNodeInfo(java.lang.String)>("value");

        goto label10;

     label05:
        $z7 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("datatype");

        if $z7 == 0 goto label07;

        if r26 == null goto label06;

        $r23 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r19, "Illegal duplicate datatype property", $r23);

     label06:
        r26 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: java.lang.String parseNodeInfo(java.lang.String)>("datatype");

        goto label10;

     label07:
        $z8 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("xml:lang");

        if $z8 == 0 goto label09;

        if r27 == null goto label08;

        $r22 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r19, "Illegal duplicate xml:lang property", $r22);

     label08:
        r27 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: java.lang.String parseNodeInfo(java.lang.String)>("xml:lang");

        goto label10;

     label09:
        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = $r20;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r19, "Unexpected Property Name \'%s\', expected one of type, value, datatype or xml:lang", $r21);

     label10:
        goto label01;

     label11:
        $r5 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r5);

        if $z1 == 0 goto label12;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        goto label13;

     label12:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r7 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r6, "Unexpected Token, expected a property name as part of a Node object", $r7);

        goto label01;

     label13:
        if r29 != null goto label14;

        $r18 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r4, "Encountered a Node object with no type property", $r18);

     label14:
        if r28 != null goto label15;

        $r17 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r4, "Encountered a Node object with no value property", $r17);

     label15:
        $z2 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("uri");

        if $z2 == 0 goto label16;

        $r16 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r28);

        return $r16;

     label16:
        $z3 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("literal");

        if $z3 == 0 goto label19;

        if r26 == null goto label17;

        $r13 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        $r14 = virtualinvoke $r13.<com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.RDFDatatype getSafeTypeByName(java.lang.String)>(r26);

        $r15 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r28, $r14);

        return $r15;

     label17:
        if r27 == null goto label18;

        $r12 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,boolean)>(r28, r27, 0);

        return $r12;

     label18:
        $r11 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String)>(r28);

        return $r11;

     label19:
        $z4 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("bnode");

        if $z4 == 0 goto label20;

        $r9 = new com.hp.hpl.jena.rdf.model.AnonId;

        specialinvoke $r9.<com.hp.hpl.jena.rdf.model.AnonId: void <init>(java.lang.String)>(r28);

        $r10 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon(com.hp.hpl.jena.rdf.model.AnonId)>($r9);

        return $r10;

     label20:
        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r29;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r4, "Encountered a Node object with an invalid type value \'%s\', expected one of uri, literal or bnode", $r8);

        goto label22;

     label21:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r2, "Unexpected Token, expected a { for the start of a Node object", $r3);

     label22:
        return null;
    }

    private java.lang.String parseNodeInfo(java.lang.String)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        java.lang.Object[] $r7;
        org.apache.jena.riot.tokens.Token $r2, $r6;
        org.apache.jena.riot.tokens.TokenType $r1, $r4, $r5;
        java.lang.String $r3, r8;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        r8 := @parameter0: java.lang.String;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING1>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 != 0 goto label1;

        $r5 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING2>;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r5);

        if $z1 == 0 goto label2;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        $r3 = virtualinvoke $r2.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $r4 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void checkComma(org.apache.jena.riot.tokens.TokenType)>($r4);

        return $r3;

     label2:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r8;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r6, "Unexpected Token, expected a string as the value for the %s property", $r7);

        return null;
    }

    protected com.hp.hpl.jena.sparql.engine.binding.Binding moveToNextBinding()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        java.util.NoSuchElementException $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label1:
        r1 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: com.hp.hpl.jena.sparql.engine.binding.Binding binding>;

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: com.hp.hpl.jena.sparql.engine.binding.Binding binding> = null;

        return r1;
    }

    protected void closeIterator()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        java.io.InputStream $r1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: java.io.InputStream input>;

        staticinvoke <org.apache.jena.atlas.io.IO: void close(java.io.Closeable)>($r1);

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: java.io.InputStream input> = null;

        return;
    }

    protected void requestCancel()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        return;
    }

    private boolean isPropertyName()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        org.apache.jena.riot.tokens.TokenType $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING1>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 != 0 goto label1;

        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING2>;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private org.apache.jena.riot.tokens.Token checkValidForStringProperty(java.lang.String)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        java.lang.Object[] $r10;
        org.apache.jena.riot.tokens.Token $r3, r11;
        org.apache.jena.riot.tokens.TokenType $r1, $r2;
        java.lang.StringBuilder $r4, $r5, $r7, $r8;
        java.lang.String r6, $r9;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        r6 := @parameter0: java.lang.String;

        r11 = null;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING1>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 != 0 goto label1;

        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING2>;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z1 == 0 goto label2;

     label1:
        r11 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JSON Values given for property ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be Strings");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r3, $r9, $r10);

     label3:
        return r11;
    }

    private void checkColon()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        org.apache.jena.riot.tokens.TokenType $r1;
        java.lang.Object[] $r3;
        org.apache.jena.riot.tokens.Token $r2, $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType COLON>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3[0] = $r4;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r2, "Expected a : character after a JSON Property Name but got %s", $r3);

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        return;
    }

    private void checkComma(org.apache.jena.riot.tokens.TokenType)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        org.apache.jena.riot.tokens.TokenType $r1, r2;
        java.lang.Object[] $r4;
        org.apache.jena.riot.tokens.Token $r3;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        r2 := @parameter0: org.apache.jena.riot.tokens.TokenType;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType COMMA>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        goto label3;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>(r2);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r2;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r3, "Unexpected Token encountered, expected a , or a %s", $r4);

     label3:
        return;
    }

    protected final org.apache.jena.riot.tokens.Token peekToken()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        org.apache.jena.atlas.iterator.PeekIterator $r1;
        java.lang.Object $r2;
        org.apache.jena.riot.tokens.Token $r3, $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean eof()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token tokenEOF>;

        return $r4;

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.atlas.iterator.PeekIterator peekIter>;

        $r2 = virtualinvoke $r1.<org.apache.jena.atlas.iterator.PeekIterator: java.lang.Object peek()>();

        $r3 = (org.apache.jena.riot.tokens.Token) $r2;

        return $r3;
    }

    protected final boolean eof()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        long $l0, $l1;
        org.apache.jena.riot.tokens.Token $r1, $r2, $r6;
        org.apache.jena.riot.tokens.TokenType $r5;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON $r3, $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token tokenEOF>;

        if $r1 == null goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean moreTokens()>();

        if $z0 != 0 goto label2;

        $r2 = new org.apache.jena.riot.tokens.Token;

        $r3 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.atlas.json.io.parser.TokenizerJSON tokens>;

        $l0 = virtualinvoke $r3.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: long getLine()>();

        $r4 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.atlas.json.io.parser.TokenizerJSON tokens>;

        $l1 = virtualinvoke $r4.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: long getColumn()>();

        specialinvoke $r2.<org.apache.jena.riot.tokens.Token: void <init>(long,long)>($l0, $l1);

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token tokenEOF> = $r2;

        $r6 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token tokenEOF>;

        $r5 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType EOF>;

        virtualinvoke $r6.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r5);

        return 1;

     label2:
        return 0;
    }

    protected final boolean moreTokens()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        org.apache.jena.atlas.iterator.PeekIterator $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.atlas.iterator.PeekIterator peekIter>;

        $z0 = virtualinvoke $r1.<org.apache.jena.atlas.iterator.PeekIterator: boolean hasNext()>();

        return $z0;
    }

    protected final boolean lookingAt(org.apache.jena.riot.tokens.TokenType)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        org.apache.jena.riot.tokens.Token $r3, $r4;
        org.apache.jena.riot.tokens.TokenType r1, $r2, $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        r1 := @parameter0: org.apache.jena.riot.tokens.TokenType;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean eof()>();

        if $z0 == 0 goto label3;

        $r5 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType EOF>;

        if r1 != $r5 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType NODE>;

        if r1 != $r2 goto label4;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $z2 = virtualinvoke $r4.<org.apache.jena.riot.tokens.Token: boolean isNode()>();

        return $z2;

     label4:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $z1 = virtualinvoke $r3.<org.apache.jena.riot.tokens.Token: boolean hasType(org.apache.jena.riot.tokens.TokenType)>(r1);

        return $z1;
    }

    protected final org.apache.jena.riot.tokens.Token nextToken()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        long $l0, $l1;
        org.apache.jena.riot.tokens.Token $r3, r8;
        org.apache.jena.atlas.AtlasException $r4;
        org.apache.jena.atlas.iterator.PeekIterator $r1;
        java.lang.Object $r2;
        java.lang.String $r6;
        org.apache.jena.riot.RiotParseException $r5, $r7;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean eof()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token tokenEOF>;

        return $r3;

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.atlas.iterator.PeekIterator peekIter>;

        $r2 = virtualinvoke $r1.<org.apache.jena.atlas.iterator.PeekIterator: java.lang.Object next()>();

        r8 = (org.apache.jena.riot.tokens.Token) $r2;

        $l0 = virtualinvoke r8.<org.apache.jena.riot.tokens.Token: long getLine()>();

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: long currLine> = $l0;

        $l1 = virtualinvoke r8.<org.apache.jena.riot.tokens.Token: long getColumn()>();

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: long currCol> = $l1;

     label2:
        return r8;

     label3:
        $r7 := @caughtexception;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void raiseException(org.apache.jena.riot.RiotParseException)>($r7);

        throw $r7;

     label4:
        $r4 := @caughtexception;

        $r5 = new org.apache.jena.riot.RiotParseException;

        $r6 = virtualinvoke $r4.<org.apache.jena.atlas.AtlasException: java.lang.String getMessage()>();

        specialinvoke $r5.<org.apache.jena.riot.RiotParseException: void <init>(java.lang.String,long,long)>($r6, -1L, -1L);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void raiseException(org.apache.jena.riot.RiotParseException)>($r5);

        throw $r5;

        catch org.apache.jena.riot.RiotParseException from label1 to label2 with label3;
        catch org.apache.jena.atlas.AtlasException from label1 to label2 with label4;
    }

    protected final void expectOrEOF(java.lang.String, org.apache.jena.riot.tokens.TokenType)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        org.apache.jena.riot.tokens.TokenType r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.jena.riot.tokens.TokenType;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean eof()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void expect(java.lang.String,org.apache.jena.riot.tokens.TokenType)>(r1, r2);

        return;
    }

    protected final void expect(java.lang.String, org.apache.jena.riot.tokens.TokenType)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        org.apache.jena.riot.tokens.TokenType r1;
        java.lang.Object[] $r4;
        java.lang.String r3;
        org.apache.jena.riot.tokens.Token $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.jena.riot.tokens.TokenType;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>(r1);

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token peekToken()>();

        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r2, r3, $r4);

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: org.apache.jena.riot.tokens.Token nextToken()>();

        return;
    }

    protected final transient void exception(org.apache.jena.riot.tokens.Token, java.lang.String, java.lang.Object[])
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r1;
        java.lang.Object[] r3;
        long $l0, $l1;
        org.apache.jena.riot.tokens.Token r0;
        java.lang.String r2, $r4, $r5;

        r1 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        r0 := @parameter0: org.apache.jena.riot.tokens.Token;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        if r0 == null goto label1;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, r3);

        $l0 = virtualinvoke r0.<org.apache.jena.riot.tokens.Token: long getLine()>();

        $l1 = virtualinvoke r0.<org.apache.jena.riot.tokens.Token: long getColumn()>();

        virtualinvoke r1.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exceptionDirect(java.lang.String,long,long)>($r5, $l0, $l1);

        goto label2;

     label1:
        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, r3);

        virtualinvoke r1.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void exceptionDirect(java.lang.String,long,long)>($r4, -1L, -1L);

     label2:
        return;
    }

    protected final void exceptionDirect(java.lang.String, long, long)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r0;
        long l0, l1;
        java.lang.String r2;
        org.apache.jena.riot.RiotParseException $r1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        r2 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r1 = new org.apache.jena.riot.RiotParseException;

        specialinvoke $r1.<org.apache.jena.riot.RiotParseException: void <init>(java.lang.String,long,long)>(r2, l0, l1);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInputIterator: void raiseException(org.apache.jena.riot.RiotParseException)>($r1);

        return;
    }

    protected final void raiseException(org.apache.jena.riot.RiotParseException)
    {
        com.hp.hpl.jena.query.QueryException $r0;
        com.hp.hpl.jena.sparql.resultset.JSONInputIterator r2;
        org.apache.jena.riot.RiotParseException r1;

        r2 := @this: com.hp.hpl.jena.sparql.resultset.JSONInputIterator;

        r1 := @parameter0: org.apache.jena.riot.RiotParseException;

        $r0 = new com.hp.hpl.jena.query.QueryException;

        specialinvoke $r0.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String,java.lang.Throwable)>("Error passing SPARQL JSON results", r1);

        throw $r0;
    }
}
