public class com.google.gxp.com.google.common.io.LimitInputStream extends java.io.FilterInputStream
{
    private long left;
    private long mark;

    public void <init>(java.io.InputStream, long)
    {
        com.google.gxp.com.google.common.io.LimitInputStream r0;
        byte $b1;
        int $i2;
        long l0;
        java.io.InputStream r1;
        boolean $z0;

        r0 := @this: com.google.gxp.com.google.common.io.LimitInputStream;

        r1 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<com.google.gxp.com.google.common.io.LimitInputStream: long mark> = -1L;

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $b1 = l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "limit must be non-negative");

        r0.<com.google.gxp.com.google.common.io.LimitInputStream: long left> = l0;

        return;
    }

    public int available() throws java.io.IOException
    {
        com.google.gxp.com.google.common.io.LimitInputStream r0;
        int $i0, $i4;
        long $l1, $l2, $l3;
        java.io.InputStream $r1;

        r0 := @this: com.google.gxp.com.google.common.io.LimitInputStream;

        $r1 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        $l2 = (long) $i0;

        $l1 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: long left>;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>($l2, $l1);

        $i4 = (int) $l3;

        return $i4;
    }

    public void mark(int)
    {
        com.google.gxp.com.google.common.io.LimitInputStream r0;
        int i0;
        long $l1;
        java.io.InputStream $r1;

        r0 := @this: com.google.gxp.com.google.common.io.LimitInputStream;

        i0 := @parameter0: int;

        $r1 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: java.io.InputStream in>;

        virtualinvoke $r1.<java.io.InputStream: void mark(int)>(i0);

        $l1 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: long left>;

        r0.<com.google.gxp.com.google.common.io.LimitInputStream: long mark> = $l1;

        return;
    }

    public int read() throws java.io.IOException
    {
        long $l0, $l3, $l4;
        com.google.gxp.com.google.common.io.LimitInputStream r0;
        byte $b1;
        int $i2, $i6, $i8;
        java.io.InputStream $r1;

        r0 := @this: com.google.gxp.com.google.common.io.LimitInputStream;

        $l0 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: long left>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $i6 = (int) -1;

        return $i6;

     label1:
        $r1 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: java.io.InputStream in>;

        $i2 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        $i8 = (int) -1;

        if $i2 == $i8 goto label2;

        $l3 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: long left>;

        $l4 = $l3 - 1L;

        r0.<com.google.gxp.com.google.common.io.LimitInputStream: long left> = $l4;

     label2:
        return $i2;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        long $l0, $l2, $l3, $l4, $l7, $l8, $l9;
        com.google.gxp.com.google.common.io.LimitInputStream r0;
        byte $b1;
        int i5, $i6, i10, i11, $i13, $i15;
        java.io.InputStream $r2;

        r0 := @this: com.google.gxp.com.google.common.io.LimitInputStream;

        r1 := @parameter0: byte[];

        i5 := @parameter1: int;

        i10 := @parameter2: int;

        $l0 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: long left>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $i13 = (int) -1;

        return $i13;

     label1:
        $l3 = (long) i10;

        $l2 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: long left>;

        $l4 = staticinvoke <java.lang.Math: long min(long,long)>($l3, $l2);

        i11 = (int) $l4;

        $r2 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: java.io.InputStream in>;

        $i6 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i5, i11);

        $i15 = (int) -1;

        if $i6 == $i15 goto label2;

        $l8 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: long left>;

        $l7 = (long) $i6;

        $l9 = $l8 - $l7;

        r0.<com.google.gxp.com.google.common.io.LimitInputStream: long left> = $l9;

     label2:
        return $i6;
    }

    public void reset() throws java.io.IOException
    {
        long $l0, $l2;
        java.io.IOException $r3, $r4;
        com.google.gxp.com.google.common.io.LimitInputStream r0;
        byte $b1;
        java.io.InputStream $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.gxp.com.google.common.io.LimitInputStream;

        $r1 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: java.io.InputStream in>;

        $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>();

        if $z0 != 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Mark not supported");

        throw $r4;

     label1:
        $l0 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: long mark>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label2;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Mark not set");

        throw $r3;

     label2:
        $r2 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: java.io.InputStream in>;

        virtualinvoke $r2.<java.io.InputStream: void reset()>();

        $l2 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: long mark>;

        r0.<com.google.gxp.com.google.common.io.LimitInputStream: long left> = $l2;

        return;
    }

    public long skip(long) throws java.io.IOException
    {
        long $l0, $l1, $l2, $l3, $l4, l5;
        com.google.gxp.com.google.common.io.LimitInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: com.google.gxp.com.google.common.io.LimitInputStream;

        l5 := @parameter0: long;

        $l0 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: long left>;

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>(l5, $l0);

        $r1 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: java.io.InputStream in>;

        $l2 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l1);

        $l3 = r0.<com.google.gxp.com.google.common.io.LimitInputStream: long left>;

        $l4 = $l3 - $l2;

        r0.<com.google.gxp.com.google.common.io.LimitInputStream: long left> = $l4;

        return $l2;
    }
}
