abstract class kodkod.engine.bool.Operator$Ternary extends kodkod.engine.bool.Operator
{

    private void <init>(int)
    {
        int i0;
        kodkod.engine.bool.Operator$Ternary r0;

        r0 := @this: kodkod.engine.bool.Operator$Ternary;

        i0 := @parameter0: int;

        specialinvoke r0.<kodkod.engine.bool.Operator: void <init>(int,kodkod.engine.bool.Operator)>(i0, null);

        return;
    }

    int hash(kodkod.engine.bool.BooleanFormula, kodkod.engine.bool.BooleanFormula, kodkod.engine.bool.BooleanFormula)
    {
        kodkod.engine.bool.BooleanFormula r0, r2, r3;
        kodkod.engine.bool.Operator$Ternary r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r1 := @this: kodkod.engine.bool.Operator$Ternary;

        r0 := @parameter0: kodkod.engine.bool.BooleanFormula;

        r2 := @parameter1: kodkod.engine.bool.BooleanFormula;

        r3 := @parameter2: kodkod.engine.bool.BooleanFormula;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.BooleanFormula: int hash(kodkod.engine.bool.Operator)>(r1);

        $i1 = 3 * $i0;

        $i2 = virtualinvoke r2.<kodkod.engine.bool.BooleanFormula: int hash(kodkod.engine.bool.Operator)>(r1);

        $i3 = 5 * $i2;

        $i4 = $i1 + $i3;

        $i5 = virtualinvoke r3.<kodkod.engine.bool.BooleanFormula: int hash(kodkod.engine.bool.Operator)>(r1);

        $i6 = 7 * $i5;

        $i7 = $i4 + $i6;

        return $i7;
    }

    void <init>(int, kodkod.engine.bool.Operator$Ternary)
    {
        int i0;
        kodkod.engine.bool.Operator$Ternary r0, r1;

        r0 := @this: kodkod.engine.bool.Operator$Ternary;

        i0 := @parameter0: int;

        r1 := @parameter1: kodkod.engine.bool.Operator$Ternary;

        specialinvoke r0.<kodkod.engine.bool.Operator$Ternary: void <init>(int)>(i0);

        return;
    }
}
