final class org.apache.poi.ss.util.ExpandedDouble extends java.lang.Object
{
    private static final java.math.BigInteger BI_FRAC_MASK;
    private static final java.math.BigInteger BI_IMPLIED_FRAC_MSB;
    private final java.math.BigInteger _significand;
    private final int _binaryExponent;

    private static java.math.BigInteger getFrac(long)
    {
        long l0;
        java.math.BigInteger $r0, $r1, $r2, $r3, $r4, $r5;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l0);

        $r1 = <org.apache.poi.ss.util.ExpandedDouble: java.math.BigInteger BI_FRAC_MASK>;

        $r2 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger and(java.math.BigInteger)>($r1);

        $r3 = <org.apache.poi.ss.util.ExpandedDouble: java.math.BigInteger BI_IMPLIED_FRAC_MSB>;

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger or(java.math.BigInteger)>($r3);

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(11);

        return $r5;
    }

    public static org.apache.poi.ss.util.ExpandedDouble fromRawBitsAndExponent(long, int)
    {
        org.apache.poi.ss.util.ExpandedDouble $r0;
        int i1;
        long l0;
        java.math.BigInteger $r1;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r0 = new org.apache.poi.ss.util.ExpandedDouble;

        $r1 = staticinvoke <org.apache.poi.ss.util.ExpandedDouble: java.math.BigInteger getFrac(long)>(l0);

        specialinvoke $r0.<org.apache.poi.ss.util.ExpandedDouble: void <init>(java.math.BigInteger,int)>($r1, i1);

        return $r0;
    }

    public void <init>(long)
    {
        long l0, $l1;
        org.apache.poi.ss.util.ExpandedDouble r0;
        int i2, $i3, $i4, $i5, i6, $i7, $i8, $i9;
        java.math.BigInteger $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.poi.ss.util.ExpandedDouble;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l1 = l0 >> 52;

        i2 = (int) $l1;

        if i2 != 0 goto label1;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l0);

        $r3 = <org.apache.poi.ss.util.ExpandedDouble: java.math.BigInteger BI_FRAC_MASK>;

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger and(java.math.BigInteger)>($r3);

        $i5 = virtualinvoke $r4.<java.math.BigInteger: int bitLength()>();

        i6 = 64 - $i5;

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i6);

        r0.<org.apache.poi.ss.util.ExpandedDouble: java.math.BigInteger _significand> = $r5;

        $i7 = i2 & 2047;

        $i8 = $i7 - 1023;

        $i9 = $i8 - i6;

        r0.<org.apache.poi.ss.util.ExpandedDouble: int _binaryExponent> = $i9;

        goto label2;

     label1:
        $r1 = staticinvoke <org.apache.poi.ss.util.ExpandedDouble: java.math.BigInteger getFrac(long)>(l0);

        r0.<org.apache.poi.ss.util.ExpandedDouble: java.math.BigInteger _significand> = $r1;

        $i3 = i2 & 2047;

        $i4 = $i3 - 1023;

        r0.<org.apache.poi.ss.util.ExpandedDouble: int _binaryExponent> = $i4;

     label2:
        return;
    }

    void <init>(java.math.BigInteger, int)
    {
        org.apache.poi.ss.util.ExpandedDouble r0;
        int $i0, i1;
        java.math.BigInteger r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.poi.ss.util.ExpandedDouble;

        r1 := @parameter0: java.math.BigInteger;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        if $i0 == 64 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bad bit length");

        throw $r2;

     label1:
        r0.<org.apache.poi.ss.util.ExpandedDouble: java.math.BigInteger _significand> = r1;

        r0.<org.apache.poi.ss.util.ExpandedDouble: int _binaryExponent> = i1;

        return;
    }

    public org.apache.poi.ss.util.NormalisedDecimal normaliseBaseTen()
    {
        org.apache.poi.ss.util.ExpandedDouble r0;
        int $i0;
        org.apache.poi.ss.util.NormalisedDecimal $r2;
        java.math.BigInteger $r1;

        r0 := @this: org.apache.poi.ss.util.ExpandedDouble;

        $r1 = r0.<org.apache.poi.ss.util.ExpandedDouble: java.math.BigInteger _significand>;

        $i0 = r0.<org.apache.poi.ss.util.ExpandedDouble: int _binaryExponent>;

        $r2 = staticinvoke <org.apache.poi.ss.util.NormalisedDecimal: org.apache.poi.ss.util.NormalisedDecimal create(java.math.BigInteger,int)>($r1, $i0);

        return $r2;
    }

    public int getBinaryExponent()
    {
        int $i0;
        org.apache.poi.ss.util.ExpandedDouble r0;

        r0 := @this: org.apache.poi.ss.util.ExpandedDouble;

        $i0 = r0.<org.apache.poi.ss.util.ExpandedDouble: int _binaryExponent>;

        return $i0;
    }

    public java.math.BigInteger getSignificand()
    {
        org.apache.poi.ss.util.ExpandedDouble r0;
        java.math.BigInteger $r1;

        r0 := @this: org.apache.poi.ss.util.ExpandedDouble;

        $r1 = r0.<org.apache.poi.ss.util.ExpandedDouble: java.math.BigInteger _significand>;

        return $r1;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0, $r1;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(4503599627370495L);

        <org.apache.poi.ss.util.ExpandedDouble: java.math.BigInteger BI_FRAC_MASK> = $r0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(4503599627370496L);

        <org.apache.poi.ss.util.ExpandedDouble: java.math.BigInteger BI_IMPLIED_FRAC_MSB> = $r1;

        return;
    }
}
