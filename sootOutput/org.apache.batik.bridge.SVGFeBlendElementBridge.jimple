public class org.apache.batik.bridge.SVGFeBlendElementBridge extends org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge
{

    public void <init>()
    {
        org.apache.batik.bridge.SVGFeBlendElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGFeBlendElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge: void <init>()>();

        return;
    }

    public java.lang.String getLocalName()
    {
        org.apache.batik.bridge.SVGFeBlendElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGFeBlendElementBridge;

        return "feBlend";
    }

    public org.apache.batik.ext.awt.image.renderable.Filter createFilter(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.ext.awt.image.renderable.Filter, java.awt.geom.Rectangle2D, java.util.Map)
    {
        java.awt.geom.Rectangle2D $r9, r11, $r12, r13, $r14;
        java.util.ArrayList $r15;
        org.apache.batik.ext.awt.image.PadMode $r18;
        org.apache.batik.ext.awt.image.CompositeRule $r2;
        org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit $r16;
        java.util.Map r6;
        org.apache.batik.gvt.GraphicsNode r4;
        org.apache.batik.bridge.SVGFeBlendElementBridge r19;
        org.apache.batik.bridge.BridgeContext r1;
        org.apache.batik.ext.awt.image.renderable.Filter r5, $r7, $r8;
        org.apache.batik.ext.awt.image.renderable.PadRable8Bit $r17;
        org.w3c.dom.Element r0, r3;
        java.lang.Object $r10;

        r19 := @this: org.apache.batik.bridge.SVGFeBlendElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        r3 := @parameter2: org.w3c.dom.Element;

        r4 := @parameter3: org.apache.batik.gvt.GraphicsNode;

        r5 := @parameter4: org.apache.batik.ext.awt.image.renderable.Filter;

        r13 := @parameter5: java.awt.geom.Rectangle2D;

        r6 := @parameter6: java.util.Map;

        $r2 = staticinvoke <org.apache.batik.bridge.SVGFeBlendElementBridge: org.apache.batik.ext.awt.image.CompositeRule convertMode(org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>(r0, r1);

        $r7 = staticinvoke <org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge: org.apache.batik.ext.awt.image.renderable.Filter getIn(org.w3c.dom.Element,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map,org.apache.batik.bridge.BridgeContext)>(r0, r3, r4, r5, r6, r1);

        if $r7 != null goto label1;

        return null;

     label1:
        $r8 = staticinvoke <org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge: org.apache.batik.ext.awt.image.renderable.Filter getIn2(org.w3c.dom.Element,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map,org.apache.batik.bridge.BridgeContext)>(r0, r3, r4, r5, r6, r1);

        if $r8 != null goto label2;

        return null;

     label2:
        $r9 = interfaceinvoke $r7.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        $r10 = virtualinvoke $r9.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        r11 = (java.awt.geom.Rectangle2D) $r10;

        $r12 = interfaceinvoke $r8.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        virtualinvoke r11.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>($r12);

        $r14 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.Rectangle2D convertFilterPrimitiveRegion(org.w3c.dom.Element,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.apache.batik.bridge.BridgeContext)>(r0, r3, r4, r11, r13, r1);

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>(int)>(2);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r8);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r16 = new org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit;

        specialinvoke $r16.<org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit: void <init>(java.util.List,org.apache.batik.ext.awt.image.CompositeRule,boolean)>($r15, $r2, 1);

        staticinvoke <org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge: void handleColorInterpolationFilters(org.apache.batik.ext.awt.image.renderable.Filter,org.w3c.dom.Element)>($r16, r0);

        $r17 = new org.apache.batik.ext.awt.image.renderable.PadRable8Bit;

        $r18 = <org.apache.batik.ext.awt.image.PadMode: org.apache.batik.ext.awt.image.PadMode ZERO_PAD>;

        specialinvoke $r17.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.awt.geom.Rectangle2D,org.apache.batik.ext.awt.image.PadMode)>($r16, $r14, $r18);

        staticinvoke <org.apache.batik.bridge.AbstractSVGFilterPrimitiveElementBridge: void updateFilterMap(org.w3c.dom.Element,org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r0, $r17, r6);

        return $r17;
    }

    protected static org.apache.batik.ext.awt.image.CompositeRule convertMode(org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r9;
        org.apache.batik.ext.awt.image.CompositeRule $r10, $r11, $r12, $r13, $r14, $r15;
        int $i0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.batik.bridge.BridgeException $r7;
        org.apache.batik.bridge.BridgeContext r8;
        org.w3c.dom.Element r0;

        r0 := @parameter0: org.w3c.dom.Element;

        r8 := @parameter1: org.apache.batik.bridge.BridgeContext;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "mode");

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r15 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule OVER>;

        return $r15;

     label1:
        $r2 = "normal";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r14 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule OVER>;

        return $r14;

     label2:
        $r3 = "multiply";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label3;

        $r13 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule MULTIPLY>;

        return $r13;

     label3:
        $r4 = "screen";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z2 == 0 goto label4;

        $r12 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule SCREEN>;

        return $r12;

     label4:
        $r5 = "darken";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z3 == 0 goto label5;

        $r11 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule DARKEN>;

        return $r11;

     label5:
        $r6 = "lighten";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z4 == 0 goto label6;

        $r10 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule LIGHTEN>;

        return $r10;

     label6:
        $r7 = new org.apache.batik.bridge.BridgeException;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = "mode";

        $r9[1] = $r1;

        specialinvoke $r7.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r8, r0, "attribute.malformed", $r9);

        throw $r7;
    }
}
