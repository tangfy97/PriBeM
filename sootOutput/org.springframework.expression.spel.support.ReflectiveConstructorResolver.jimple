public class org.springframework.expression.spel.support.ReflectiveConstructorResolver extends java.lang.Object implements org.springframework.expression.ConstructorResolver
{

    public void <init>()
    {
        org.springframework.expression.spel.support.ReflectiveConstructorResolver r0;

        r0 := @this: org.springframework.expression.spel.support.ReflectiveConstructorResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.springframework.expression.ConstructorExecutor resolve(org.springframework.expression.EvaluationContext, java.lang.String, java.util.List) throws org.springframework.expression.AccessException
    {
        int[] r26;
        org.springframework.core.MethodParameter $r12;
        boolean $z0;
        org.springframework.expression.TypeConverter $r1;
        org.springframework.expression.AccessException $r24;
        org.springframework.expression.EvaluationContext r0;
        java.util.List r13;
        java.lang.reflect.Constructor r8, r25, r27;
        org.springframework.expression.EvaluationException $r23;
        java.util.ArrayList $r10;
        java.lang.reflect.Constructor[] $r5;
        org.springframework.core.convert.TypeDescriptor $r11;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo r28;
        org.springframework.expression.TypeLocator $r2;
        org.springframework.expression.spel.support.ReflectiveConstructorResolver r7;
        java.lang.String r3;
        java.lang.Class[] $r9;
        org.springframework.expression.spel.support.ReflectiveConstructorExecutor $r20, $r21, $r22;
        org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind $r14, $r15, $r16, $r17, $r18, $r19;
        java.lang.Class $r4;
        org.springframework.expression.spel.support.ReflectiveConstructorResolver$1 $r6;

        r7 := @this: org.springframework.expression.spel.support.ReflectiveConstructorResolver;

        r0 := @parameter0: org.springframework.expression.EvaluationContext;

        r3 := @parameter1: java.lang.String;

        r13 := @parameter2: java.util.List;

     label01:
        $r1 = interfaceinvoke r0.<org.springframework.expression.EvaluationContext: org.springframework.expression.TypeConverter getTypeConverter()>();

        $r2 = interfaceinvoke r0.<org.springframework.expression.EvaluationContext: org.springframework.expression.TypeLocator getTypeLocator()>();

        $r4 = interfaceinvoke $r2.<org.springframework.expression.TypeLocator: java.lang.Class findType(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $r6 = new org.springframework.expression.spel.support.ReflectiveConstructorResolver$1;

        specialinvoke $r6.<org.springframework.expression.spel.support.ReflectiveConstructorResolver$1: void <init>(org.springframework.expression.spel.support.ReflectiveConstructorResolver)>(r7);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r5, $r6);

        r25 = null;

        r26 = (int[]) null;

        r27 = null;

        i0 = lengthof $r5;

        i8 = 0;

        goto label11;

     label02:
        r8 = $r5[i8];

        $r9 = virtualinvoke r8.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $r10 = new java.util.ArrayList;

        $i1 = lengthof $r9;

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i1);

        i9 = 0;

        goto label04;

     label03:
        $r11 = new org.springframework.core.convert.TypeDescriptor;

        $r12 = new org.springframework.core.MethodParameter;

        specialinvoke $r12.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Constructor,int)>(r8, i9);

        specialinvoke $r11.<org.springframework.core.convert.TypeDescriptor: void <init>(org.springframework.core.MethodParameter)>($r12);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        i9 = i9 + 1;

     label04:
        $i2 = lengthof $r9;

        if i9 < $i2 goto label03;

        r28 = null;

        $z0 = virtualinvoke r8.<java.lang.reflect.Constructor: boolean isVarArgs()>();

        if $z0 == 0 goto label05;

        $i5 = interfaceinvoke r13.<java.util.List: int size()>();

        $i6 = lengthof $r9;

        $i7 = $i6 - 1;

        if $i5 < $i7 goto label05;

        r28 = staticinvoke <org.springframework.expression.spel.support.ReflectionHelper: org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo compareArgumentsVarargs(java.util.List,java.util.List,org.springframework.expression.TypeConverter)>($r10, r13, $r1);

        goto label06;

     label05:
        $i3 = lengthof $r9;

        $i4 = interfaceinvoke r13.<java.util.List: int size()>();

        if $i3 != $i4 goto label06;

        r28 = staticinvoke <org.springframework.expression.spel.support.ReflectionHelper: org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo compareArguments(java.util.List,java.util.List,org.springframework.expression.TypeConverter)>($r10, r13, $r1);

     label06:
        if r28 == null goto label10;

        $r15 = r28.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind kind>;

        $r14 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind EXACT>;

        if $r15 != $r14 goto label08;

        $r20 = new org.springframework.expression.spel.support.ReflectiveConstructorExecutor;

        specialinvoke $r20.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: void <init>(java.lang.reflect.Constructor,int[])>(r8, null);

     label07:
        return $r20;

     label08:
        $r17 = r28.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind kind>;

        $r16 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind CLOSE>;

        if $r17 != $r16 goto label09;

        r25 = r8;

        goto label10;

     label09:
        $r19 = r28.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind kind>;

        $r18 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind REQUIRES_CONVERSION>;

        if $r19 != $r18 goto label10;

        r26 = r28.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: int[] argsRequiringConversion>;

        r27 = r8;

     label10:
        i8 = i8 + 1;

     label11:
        if i8 < i0 goto label02;

        if r25 == null goto label13;

        $r22 = new org.springframework.expression.spel.support.ReflectiveConstructorExecutor;

        specialinvoke $r22.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: void <init>(java.lang.reflect.Constructor,int[])>(r25, null);

     label12:
        return $r22;

     label13:
        if r27 == null goto label15;

        $r21 = new org.springframework.expression.spel.support.ReflectiveConstructorExecutor;

        specialinvoke $r21.<org.springframework.expression.spel.support.ReflectiveConstructorExecutor: void <init>(java.lang.reflect.Constructor,int[])>(r27, r26);

     label14:
        return $r21;

     label15:
        return null;

     label16:
        $r23 := @caughtexception;

        $r24 = new org.springframework.expression.AccessException;

        specialinvoke $r24.<org.springframework.expression.AccessException: void <init>(java.lang.String,java.lang.Exception)>("Failed to resolve constructor", $r23);

        throw $r24;

        catch org.springframework.expression.EvaluationException from label01 to label07 with label16;
        catch org.springframework.expression.EvaluationException from label08 to label12 with label16;
        catch org.springframework.expression.EvaluationException from label13 to label14 with label16;
    }
}
