public final class org.apache.poi.hwpf.usermodel.LineSpacingDescriptor extends java.lang.Object implements java.lang.Cloneable
{
    short _dyaLine;
    short _fMultiLinespace;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.poi.hwpf.usermodel.LineSpacingDescriptor r0;

        r0 := @this: org.apache.poi.hwpf.usermodel.LineSpacingDescriptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: short _dyaLine> = 240;

        r0.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: short _fMultiLinespace> = 1;

        return;
    }

    public void <init>(byte[], int)
    {
        byte[] r1;
        short $s1, $s3;
        int i0, $i2;
        org.apache.poi.hwpf.usermodel.LineSpacingDescriptor r0;

        r0 := @this: org.apache.poi.hwpf.usermodel.LineSpacingDescriptor;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $s1 = staticinvoke <org.apache.poi.util.LittleEndian: short getShort(byte[],int)>(r1, i0);

        r0.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: short _dyaLine> = $s1;

        $i2 = i0 + 2;

        $s3 = staticinvoke <org.apache.poi.util.LittleEndian: short getShort(byte[],int)>(r1, $i2);

        r0.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: short _fMultiLinespace> = $s3;

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.poi.hwpf.usermodel.LineSpacingDescriptor r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.poi.hwpf.usermodel.LineSpacingDescriptor;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    public void setMultiLinespace(short)
    {
        org.apache.poi.hwpf.usermodel.LineSpacingDescriptor r0;
        short s0;

        r0 := @this: org.apache.poi.hwpf.usermodel.LineSpacingDescriptor;

        s0 := @parameter0: short;

        r0.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: short _fMultiLinespace> = s0;

        return;
    }

    public int toInt()
    {
        int $i0;
        byte[] r0;
        org.apache.poi.hwpf.usermodel.LineSpacingDescriptor r1;

        r1 := @this: org.apache.poi.hwpf.usermodel.LineSpacingDescriptor;

        r0 = newarray (byte)[4];

        virtualinvoke r1.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: void serialize(byte[],int)>(r0, 0);

        $i0 = staticinvoke <org.apache.poi.util.LittleEndian: int getInt(byte[])>(r0);

        return $i0;
    }

    public void serialize(byte[], int)
    {
        byte[] r0;
        short $s1, $s2;
        int i0, $i3;
        org.apache.poi.hwpf.usermodel.LineSpacingDescriptor r1;

        r1 := @this: org.apache.poi.hwpf.usermodel.LineSpacingDescriptor;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $s1 = r1.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: short _dyaLine>;

        staticinvoke <org.apache.poi.util.LittleEndian: void putShort(byte[],int,short)>(r0, i0, $s1);

        $i3 = i0 + 2;

        $s2 = r1.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: short _fMultiLinespace>;

        staticinvoke <org.apache.poi.util.LittleEndian: void putShort(byte[],int,short)>(r0, $i3, $s2);

        return;
    }

    public void setDyaLine(short)
    {
        org.apache.poi.hwpf.usermodel.LineSpacingDescriptor r0;
        short s0;

        r0 := @this: org.apache.poi.hwpf.usermodel.LineSpacingDescriptor;

        s0 := @parameter0: short;

        r0.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: short _dyaLine> = s0;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        short $s0, $s1, $s2, $s3;
        int $i4, $i5, $i6, $i7;
        org.apache.poi.hwpf.usermodel.LineSpacingDescriptor r1, r2;
        java.lang.Object r0;
        boolean $z0, $z1;

        r2 := @this: org.apache.poi.hwpf.usermodel.LineSpacingDescriptor;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.poi.hwpf.usermodel.LineSpacingDescriptor;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.apache.poi.hwpf.usermodel.LineSpacingDescriptor) r0;

        $s1 = r2.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: short _dyaLine>;

        $s0 = r1.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: short _dyaLine>;

        $i4 = (int) $s1;

        $i5 = (int) $s0;

        if $i4 != $i5 goto label2;

        $s3 = r2.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: short _fMultiLinespace>;

        $s2 = r1.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: short _fMultiLinespace>;

        $i6 = (int) $s3;

        $i7 = (int) $s2;

        if $i6 != $i7 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public int hashCode()
    {
        org.apache.poi.hwpf.usermodel.LineSpacingDescriptor r1;
        java.lang.AssertionError $r0;
        boolean $z0;

        r1 := @this: org.apache.poi.hwpf.usermodel.LineSpacingDescriptor;

        $z0 = <org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>("hashCode not designed");

        throw $r0;

     label1:
        return 42;
    }

    public boolean isEmpty()
    {
        short $s0, $s1;
        org.apache.poi.hwpf.usermodel.LineSpacingDescriptor r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hwpf.usermodel.LineSpacingDescriptor;

        $s0 = r0.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: short _dyaLine>;

        if $s0 != 0 goto label1;

        $s1 = r0.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: short _fMultiLinespace>;

        if $s1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        short $s0, $s1;
        int $i2, $i3;
        org.apache.poi.hwpf.usermodel.LineSpacingDescriptor r0;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r8;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.apache.poi.hwpf.usermodel.LineSpacingDescriptor;

        $z0 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return "[LSPD] EMPTY";

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LSPD] (dyaLine: ");

        $s0 = r0.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: short _dyaLine>;

        $i2 = (int) $s0;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; fMultLinespace: ");

        $s1 = r0.<org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: short _fMultiLinespace>;

        $i3 = (int) $s1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/poi/hwpf/usermodel/LineSpacingDescriptor;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.poi.hwpf.usermodel.LineSpacingDescriptor: boolean $assertionsDisabled> = $z1;

        return;
    }
}
