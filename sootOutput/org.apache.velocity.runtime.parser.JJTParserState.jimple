public class org.apache.velocity.runtime.parser.JJTParserState extends java.lang.Object
{
    private java.util.List nodes;
    private java.util.List marks;
    private int sp;
    private int mk;
    private boolean node_created;

    public void <init>()
    {
        org.apache.velocity.runtime.parser.JJTParserState r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: org.apache.velocity.runtime.parser.JJTParserState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List nodes> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List marks> = $r2;

        r0.<org.apache.velocity.runtime.parser.JJTParserState: int sp> = 0;

        r0.<org.apache.velocity.runtime.parser.JJTParserState: int mk> = 0;

        return;
    }

    public boolean nodeCreated()
    {
        org.apache.velocity.runtime.parser.JJTParserState r0;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.parser.JJTParserState;

        $z0 = r0.<org.apache.velocity.runtime.parser.JJTParserState: boolean node_created>;

        return $z0;
    }

    public void reset()
    {
        org.apache.velocity.runtime.parser.JJTParserState r0;
        java.util.List $r1, $r2;

        r0 := @this: org.apache.velocity.runtime.parser.JJTParserState;

        $r1 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List nodes>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r2 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List marks>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        r0.<org.apache.velocity.runtime.parser.JJTParserState: int sp> = 0;

        r0.<org.apache.velocity.runtime.parser.JJTParserState: int mk> = 0;

        return;
    }

    public org.apache.velocity.runtime.parser.node.Node rootNode()
    {
        org.apache.velocity.runtime.parser.JJTParserState r0;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.velocity.runtime.parser.node.Node $r3;

        r0 := @this: org.apache.velocity.runtime.parser.JJTParserState;

        $r1 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List nodes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.apache.velocity.runtime.parser.node.Node) $r2;

        return $r3;
    }

    public void pushNode(org.apache.velocity.runtime.parser.node.Node)
    {
        org.apache.velocity.runtime.parser.JJTParserState r0;
        java.util.List $r2;
        int $i0, $i1;
        org.apache.velocity.runtime.parser.node.Node r1;

        r0 := @this: org.apache.velocity.runtime.parser.JJTParserState;

        r1 := @parameter0: org.apache.velocity.runtime.parser.node.Node;

        $r2 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List nodes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $i0 = r0.<org.apache.velocity.runtime.parser.JJTParserState: int sp>;

        $i1 = $i0 + 1;

        r0.<org.apache.velocity.runtime.parser.JJTParserState: int sp> = $i1;

        return;
    }

    public org.apache.velocity.runtime.parser.node.Node popNode()
    {
        org.apache.velocity.runtime.parser.JJTParserState r0;
        java.lang.Integer $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.velocity.runtime.parser.node.Node $r4;
        java.util.List $r1, $r2, $r5, $r6;
        java.lang.Object $r3, $r7;

        r0 := @this: org.apache.velocity.runtime.parser.JJTParserState;

        $i0 = r0.<org.apache.velocity.runtime.parser.JJTParserState: int sp>;

        $i1 = $i0 - 1;

        r0.<org.apache.velocity.runtime.parser.JJTParserState: int sp> = $i1;

        $i2 = r0.<org.apache.velocity.runtime.parser.JJTParserState: int mk>;

        if $i1 >= $i2 goto label1;

        $r6 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List marks>;

        $r5 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List marks>;

        $i5 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i6 = $i5 - 1;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>($i6);

        $r8 = (java.lang.Integer) $r7;

        $i7 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        r0.<org.apache.velocity.runtime.parser.JJTParserState: int mk> = $i7;

     label1:
        $r2 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List nodes>;

        $r1 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List nodes>;

        $i3 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i4);

        $r4 = (org.apache.velocity.runtime.parser.node.Node) $r3;

        return $r4;
    }

    public org.apache.velocity.runtime.parser.node.Node peekNode()
    {
        org.apache.velocity.runtime.parser.JJTParserState r0;
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        org.apache.velocity.runtime.parser.node.Node $r4;

        r0 := @this: org.apache.velocity.runtime.parser.JJTParserState;

        $r2 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List nodes>;

        $r1 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List nodes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (org.apache.velocity.runtime.parser.node.Node) $r3;

        return $r4;
    }

    public int nodeArity()
    {
        org.apache.velocity.runtime.parser.JJTParserState r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.velocity.runtime.parser.JJTParserState;

        $i1 = r0.<org.apache.velocity.runtime.parser.JJTParserState: int sp>;

        $i0 = r0.<org.apache.velocity.runtime.parser.JJTParserState: int mk>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public void clearNodeScope(org.apache.velocity.runtime.parser.node.Node)
    {
        org.apache.velocity.runtime.parser.JJTParserState r0;
        java.lang.Integer $r4;
        java.util.List $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r3;
        org.apache.velocity.runtime.parser.node.Node r5;

        r0 := @this: org.apache.velocity.runtime.parser.JJTParserState;

        r5 := @parameter0: org.apache.velocity.runtime.parser.node.Node;

     label1:
        $i1 = r0.<org.apache.velocity.runtime.parser.JJTParserState: int sp>;

        $i0 = r0.<org.apache.velocity.runtime.parser.JJTParserState: int mk>;

        if $i1 <= $i0 goto label2;

        virtualinvoke r0.<org.apache.velocity.runtime.parser.JJTParserState: org.apache.velocity.runtime.parser.node.Node popNode()>();

        goto label1;

     label2:
        $r2 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List marks>;

        $r1 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List marks>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i3);

        $r4 = (java.lang.Integer) $r3;

        $i4 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        r0.<org.apache.velocity.runtime.parser.JJTParserState: int mk> = $i4;

        return;
    }

    public void openNodeScope(org.apache.velocity.runtime.parser.node.Node)
    {
        org.apache.velocity.runtime.parser.JJTParserState r0;
        java.util.List $r2;
        int $i0, $i1;
        org.apache.velocity.runtime.parser.node.Node r3;
        java.lang.Integer $r1;

        r0 := @this: org.apache.velocity.runtime.parser.JJTParserState;

        r3 := @parameter0: org.apache.velocity.runtime.parser.node.Node;

        $r2 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List marks>;

        $r1 = new java.lang.Integer;

        $i0 = r0.<org.apache.velocity.runtime.parser.JJTParserState: int mk>;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        $i1 = r0.<org.apache.velocity.runtime.parser.JJTParserState: int sp>;

        r0.<org.apache.velocity.runtime.parser.JJTParserState: int mk> = $i1;

        interfaceinvoke r3.<org.apache.velocity.runtime.parser.node.Node: void jjtOpen()>();

        return;
    }

    public void closeNodeScope(org.apache.velocity.runtime.parser.node.Node, int)
    {
        org.apache.velocity.runtime.parser.JJTParserState r0;
        java.lang.Integer $r4;
        java.util.List $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object $r3;
        org.apache.velocity.runtime.parser.node.Node r5, $r6;

        r0 := @this: org.apache.velocity.runtime.parser.JJTParserState;

        r5 := @parameter0: org.apache.velocity.runtime.parser.node.Node;

        i5 := @parameter1: int;

        $r2 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List marks>;

        $r1 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List marks>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i1);

        $r4 = (java.lang.Integer) $r3;

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        r0.<org.apache.velocity.runtime.parser.JJTParserState: int mk> = $i2;

     label1:
        $i3 = i5;

        $i4 = i5 - 1;

        i5 = $i4;

        if $i3 <= 0 goto label2;

        $r6 = virtualinvoke r0.<org.apache.velocity.runtime.parser.JJTParserState: org.apache.velocity.runtime.parser.node.Node popNode()>();

        interfaceinvoke $r6.<org.apache.velocity.runtime.parser.node.Node: void jjtSetParent(org.apache.velocity.runtime.parser.node.Node)>(r5);

        interfaceinvoke r5.<org.apache.velocity.runtime.parser.node.Node: void jjtAddChild(org.apache.velocity.runtime.parser.node.Node,int)>($r6, $i4);

        goto label1;

     label2:
        interfaceinvoke r5.<org.apache.velocity.runtime.parser.node.Node: void jjtClose()>();

        virtualinvoke r0.<org.apache.velocity.runtime.parser.JJTParserState: void pushNode(org.apache.velocity.runtime.parser.node.Node)>(r5);

        r0.<org.apache.velocity.runtime.parser.JJTParserState: boolean node_created> = 1;

        return;
    }

    public void closeNodeScope(org.apache.velocity.runtime.parser.node.Node, boolean)
    {
        org.apache.velocity.runtime.parser.JJTParserState r0;
        java.lang.Integer $r4, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        org.apache.velocity.runtime.parser.node.Node r9, $r10;
        boolean z0;
        java.util.List $r1, $r2, $r5, $r6;
        java.lang.Object $r3, $r7;

        r0 := @this: org.apache.velocity.runtime.parser.JJTParserState;

        r9 := @parameter0: org.apache.velocity.runtime.parser.node.Node;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label3;

        i8 = virtualinvoke r0.<org.apache.velocity.runtime.parser.JJTParserState: int nodeArity()>();

        $r6 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List marks>;

        $r5 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List marks>;

        $i3 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>($i4);

        $r8 = (java.lang.Integer) $r7;

        $i5 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        r0.<org.apache.velocity.runtime.parser.JJTParserState: int mk> = $i5;

     label1:
        $i6 = i8;

        $i7 = i8 - 1;

        i8 = $i7;

        if $i6 <= 0 goto label2;

        $r10 = virtualinvoke r0.<org.apache.velocity.runtime.parser.JJTParserState: org.apache.velocity.runtime.parser.node.Node popNode()>();

        interfaceinvoke $r10.<org.apache.velocity.runtime.parser.node.Node: void jjtSetParent(org.apache.velocity.runtime.parser.node.Node)>(r9);

        interfaceinvoke r9.<org.apache.velocity.runtime.parser.node.Node: void jjtAddChild(org.apache.velocity.runtime.parser.node.Node,int)>($r10, $i7);

        goto label1;

     label2:
        interfaceinvoke r9.<org.apache.velocity.runtime.parser.node.Node: void jjtClose()>();

        virtualinvoke r0.<org.apache.velocity.runtime.parser.JJTParserState: void pushNode(org.apache.velocity.runtime.parser.node.Node)>(r9);

        r0.<org.apache.velocity.runtime.parser.JJTParserState: boolean node_created> = 1;

        goto label4;

     label3:
        $r2 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List marks>;

        $r1 = r0.<org.apache.velocity.runtime.parser.JJTParserState: java.util.List marks>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i1);

        $r4 = (java.lang.Integer) $r3;

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        r0.<org.apache.velocity.runtime.parser.JJTParserState: int mk> = $i2;

        r0.<org.apache.velocity.runtime.parser.JJTParserState: boolean node_created> = 0;

     label4:
        return;
    }
}
