public final class org.apache.poi.hssf.record.cf.CellRangeUtil extends java.lang.Object
{
    public static final int NO_INTERSECTION;
    public static final int OVERLAP;
    public static final int INSIDE;
    public static final int ENCLOSES;

    private void <init>()
    {
        org.apache.poi.hssf.record.cf.CellRangeUtil r0;

        r0 := @this: org.apache.poi.hssf.record.cf.CellRangeUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int intersect(org.apache.poi.ss.util.CellRangeAddress, org.apache.poi.ss.util.CellRangeAddress)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.poi.ss.util.CellRangeAddress r0, r1;

        r1 := @parameter0: org.apache.poi.ss.util.CellRangeAddress;

        r0 := @parameter1: org.apache.poi.ss.util.CellRangeAddress;

        $i0 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i1 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $i2 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $i3 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        $i4 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $z0 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean gt(int,int)>($i4, $i1);

        if $z0 != 0 goto label1;

        $i5 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $z1 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean lt(int,int)>($i5, $i0);

        if $z1 != 0 goto label1;

        $i6 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $z2 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean gt(int,int)>($i6, $i3);

        if $z2 != 0 goto label1;

        $i7 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        $z3 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean lt(int,int)>($i7, $i2);

        if $z3 == 0 goto label2;

     label1:
        return 1;

     label2:
        $z4 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean contains(org.apache.poi.ss.util.CellRangeAddress,org.apache.poi.ss.util.CellRangeAddress)>(r1, r0);

        if $z4 == 0 goto label3;

        return 3;

     label3:
        $z5 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean contains(org.apache.poi.ss.util.CellRangeAddress,org.apache.poi.ss.util.CellRangeAddress)>(r0, r1);

        if $z5 == 0 goto label4;

        return 4;

     label4:
        return 2;
    }

    public static org.apache.poi.ss.util.CellRangeAddress[] mergeCellRanges(org.apache.poi.ss.util.CellRangeAddress[])
    {
        org.apache.poi.ss.util.CellRangeAddress r4;
        org.apache.poi.ss.util.CellRangeAddress[] r0, $r3;
        java.util.ArrayList $r1;
        java.util.List $r2;
        int $i0, i1, i2;

        r0 := @parameter0: org.apache.poi.ss.util.CellRangeAddress[];

        $i0 = lengthof r0;

        if $i0 >= 1 goto label1;

        return r0;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        i1 = lengthof r0;

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        r4 = r0[i2];

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r4);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r2 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: java.util.List mergeCellRanges(java.util.List)>($r1);

        $r3 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: org.apache.poi.ss.util.CellRangeAddress[] toArray(java.util.List)>($r2);

        return $r3;
    }

    private static java.util.List mergeCellRanges(java.util.List)
    {
        org.apache.poi.ss.util.CellRangeAddress[] $r5;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, $i9;
        boolean z0;
        org.apache.poi.ss.util.CellRangeAddress r2, r4, $r6, $r7;
        java.util.List r0;
        java.lang.Object $r1, $r3;

        r0 := @parameter0: java.util.List;

     label01:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 1 goto label10;

        z0 = 0;

        i5 = 0;

     label02:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i5 >= $i1 goto label08;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i5);

        r2 = (org.apache.poi.ss.util.CellRangeAddress) $r1;

        i6 = i5 + 1;

     label03:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i6 >= $i2 goto label07;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i6);

        r4 = (org.apache.poi.ss.util.CellRangeAddress) $r3;

        $r5 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: org.apache.poi.ss.util.CellRangeAddress[] mergeRanges(org.apache.poi.ss.util.CellRangeAddress,org.apache.poi.ss.util.CellRangeAddress)>(r2, r4);

        if $r5 != null goto label04;

        goto label06;

     label04:
        z0 = 1;

        $r6 = $r5[0];

        interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i5, $r6);

        $i3 = i6;

        $i9 = (int) -1;

        i6 = i6 + $i9;

        interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>($i3);

        i7 = 1;

     label05:
        $i4 = lengthof $r5;

        if i7 >= $i4 goto label06;

        i6 = i6 + 1;

        $r7 = $r5[i7];

        interfaceinvoke r0.<java.util.List: void add(int,java.lang.Object)>(i6, $r7);

        i7 = i7 + 1;

        goto label05;

     label06:
        i6 = i6 + 1;

        goto label03;

     label07:
        i5 = i5 + 1;

        goto label02;

     label08:
        if z0 != 0 goto label09;

        goto label10;

     label09:
        goto label01;

     label10:
        return r0;
    }

    private static org.apache.poi.ss.util.CellRangeAddress[] mergeRanges(org.apache.poi.ss.util.CellRangeAddress, org.apache.poi.ss.util.CellRangeAddress)
    {
        org.apache.poi.ss.util.CellRangeAddress r0, r1, $r5;
        java.lang.RuntimeException $r6;
        org.apache.poi.ss.util.CellRangeAddress[] $r2, $r3, $r4;
        int $i0;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r11;
        boolean $z0;

        r0 := @parameter0: org.apache.poi.ss.util.CellRangeAddress;

        r1 := @parameter1: org.apache.poi.ss.util.CellRangeAddress;

        $i0 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: int intersect(org.apache.poi.ss.util.CellRangeAddress,org.apache.poi.ss.util.CellRangeAddress)>(r0, r1);

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label1:
        $z0 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean hasExactSharedBorder(org.apache.poi.ss.util.CellRangeAddress,org.apache.poi.ss.util.CellRangeAddress)>(r0, r1);

        if $z0 == 0 goto label2;

        $r4 = newarray (org.apache.poi.ss.util.CellRangeAddress)[1];

        $r5 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: org.apache.poi.ss.util.CellRangeAddress createEnclosingCellRange(org.apache.poi.ss.util.CellRangeAddress,org.apache.poi.ss.util.CellRangeAddress)>(r0, r1);

        $r4[0] = $r5;

        return $r4;

     label2:
        return null;

     label3:
        return null;

     label4:
        $r3 = newarray (org.apache.poi.ss.util.CellRangeAddress)[1];

        $r3[0] = r0;

        return $r3;

     label5:
        $r2 = newarray (org.apache.poi.ss.util.CellRangeAddress)[1];

        $r2[0] = r1;

        return $r2;

     label6:
        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected intersection result (");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r6;
    }

    private static org.apache.poi.ss.util.CellRangeAddress[] toArray(java.util.List)
    {
        int $i0;
        java.util.List r0;
        org.apache.poi.ss.util.CellRangeAddress[] r1;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (org.apache.poi.ss.util.CellRangeAddress)[$i0];

        interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return r1;
    }

    public static boolean contains(org.apache.poi.ss.util.CellRangeAddress, org.apache.poi.ss.util.CellRangeAddress)
    {
        org.apache.poi.ss.util.CellRangeAddress r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @parameter0: org.apache.poi.ss.util.CellRangeAddress;

        r0 := @parameter1: org.apache.poi.ss.util.CellRangeAddress;

        $i0 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i1 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $i2 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $i3 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        $i4 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $z0 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean le(int,int)>($i4, $i0);

        if $z0 == 0 goto label1;

        $i5 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $z1 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean ge(int,int)>($i5, $i1);

        if $z1 == 0 goto label1;

        $i6 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $z2 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean le(int,int)>($i6, $i2);

        if $z2 == 0 goto label1;

        $i7 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        $z3 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean ge(int,int)>($i7, $i3);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    public static boolean hasExactSharedBorder(org.apache.poi.ss.util.CellRangeAddress, org.apache.poi.ss.util.CellRangeAddress)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        boolean $z0, $z1;
        org.apache.poi.ss.util.CellRangeAddress r0, r1;

        r1 := @parameter0: org.apache.poi.ss.util.CellRangeAddress;

        r0 := @parameter1: org.apache.poi.ss.util.CellRangeAddress;

        $i0 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i1 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $i2 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $i3 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        $i4 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        if $i4 <= 0 goto label01;

        $i16 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i17 = $i16 - 1;

        if $i17 == $i1 goto label02;

     label01:
        if $i0 <= 0 goto label05;

        $i12 = $i0 - 1;

        $i13 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        if $i12 != $i13 goto label05;

     label02:
        $i14 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        if $i14 != $i2 goto label03;

        $i15 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        if $i15 != $i3 goto label03;

        $z0 = 1;

        goto label04;

     label03:
        $z0 = 0;

     label04:
        return $z0;

     label05:
        $i5 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        if $i5 <= 0 goto label06;

        $i10 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $i11 = $i10 - 1;

        if $i11 == $i3 goto label07;

     label06:
        if $i2 <= 0 goto label10;

        $i6 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        $i7 = $i2 - 1;

        if $i6 != $i7 goto label10;

     label07:
        $i8 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        if $i8 != $i0 goto label08;

        $i9 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        if $i9 != $i1 goto label08;

        $z1 = 1;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        return $z1;

     label10:
        return 0;
    }

    public static org.apache.poi.ss.util.CellRangeAddress createEnclosingCellRange(org.apache.poi.ss.util.CellRangeAddress, org.apache.poi.ss.util.CellRangeAddress)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0, $z1, $z2, $z3;
        org.apache.poi.ss.util.CellRangeAddress r0, r1, $r2, $r3;

        r1 := @parameter0: org.apache.poi.ss.util.CellRangeAddress;

        r0 := @parameter1: org.apache.poi.ss.util.CellRangeAddress;

        if r0 != null goto label1;

        $r2 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: org.apache.poi.ss.util.CellRangeAddress copy()>();

        return $r2;

     label1:
        $r3 = new org.apache.poi.ss.util.CellRangeAddress;

        $i0 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i1 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $z0 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean lt(int,int)>($i0, $i1);

        if $z0 == 0 goto label2;

        $i4 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        goto label3;

     label2:
        $i4 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

     label3:
        $i2 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $i3 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $z1 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean gt(int,int)>($i2, $i3);

        if $z1 == 0 goto label4;

        $i5 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        goto label5;

     label4:
        $i5 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

     label5:
        $i6 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $i7 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $z2 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean lt(int,int)>($i6, $i7);

        if $z2 == 0 goto label6;

        $i8 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        goto label7;

     label6:
        $i8 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

     label7:
        $i9 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        $i10 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        $z3 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean gt(int,int)>($i9, $i10);

        if $z3 == 0 goto label8;

        $i11 = virtualinvoke r0.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        goto label9;

     label8:
        $i11 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

     label9:
        specialinvoke $r3.<org.apache.poi.ss.util.CellRangeAddress: void <init>(int,int,int,int)>($i4, $i5, $i8, $i11);

        return $r3;
    }

    private static boolean lt(int, int)
    {
        int i0, i1, $i3, $i5;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = (int) -1;

        if i0 != $i3 goto label1;

        $z0 = 0;

        goto label4;

     label1:
        $i5 = (int) -1;

        if i1 != $i5 goto label2;

        $z0 = 1;

        goto label4;

     label2:
        if i0 >= i1 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private static boolean le(int, int)
    {
        int i0, i1;
        boolean $z0, $z1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == i1 goto label1;

        $z0 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean lt(int,int)>(i0, i1);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static boolean gt(int, int)
    {
        int i0, i1;
        boolean $z0;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $z0 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean lt(int,int)>(i0, i1);

        return $z0;
    }

    private static boolean ge(int, int)
    {
        int i0, i1;
        boolean $z0, $z1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = staticinvoke <org.apache.poi.hssf.record.cf.CellRangeUtil: boolean lt(int,int)>(i0, i1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static void <clinit>()
    {
        <org.apache.poi.hssf.record.cf.CellRangeUtil: int ENCLOSES> = 4;

        <org.apache.poi.hssf.record.cf.CellRangeUtil: int INSIDE> = 3;

        <org.apache.poi.hssf.record.cf.CellRangeUtil: int OVERLAP> = 2;

        <org.apache.poi.hssf.record.cf.CellRangeUtil: int NO_INTERSECTION> = 1;

        return;
    }
}
