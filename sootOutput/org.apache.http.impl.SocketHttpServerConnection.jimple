public class org.apache.http.impl.SocketHttpServerConnection extends org.apache.http.impl.AbstractHttpServerConnection implements org.apache.http.HttpInetConnection
{
    private volatile boolean open;
    private volatile java.net.Socket socket;

    public void <init>()
    {
        org.apache.http.impl.SocketHttpServerConnection r0;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        specialinvoke r0.<org.apache.http.impl.AbstractHttpServerConnection: void <init>()>();

        r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket> = null;

        return;
    }

    protected void assertNotOpen()
    {
        java.lang.IllegalStateException $r1;
        org.apache.http.impl.SocketHttpServerConnection r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $z0 = r0.<org.apache.http.impl.SocketHttpServerConnection: boolean open>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is already open");

        throw $r1;

     label1:
        return;
    }

    protected void assertOpen()
    {
        java.lang.IllegalStateException $r1;
        org.apache.http.impl.SocketHttpServerConnection r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $z0 = r0.<org.apache.http.impl.SocketHttpServerConnection: boolean open>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is not open");

        throw $r1;

     label1:
        return;
    }

    protected org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        java.net.Socket r1;
        org.apache.http.impl.SocketHttpServerConnection r3;
        org.apache.http.params.HttpParams r2;
        int i0;
        org.apache.http.impl.io.SocketInputBuffer $r0;

        r3 := @this: org.apache.http.impl.SocketHttpServerConnection;

        r1 := @parameter0: java.net.Socket;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.http.params.HttpParams;

        $r0 = new org.apache.http.impl.io.SocketInputBuffer;

        specialinvoke $r0.<org.apache.http.impl.io.SocketInputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)>(r1, i0, r2);

        return $r0;
    }

    protected org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.io.SocketOutputBuffer $r0;
        java.net.Socket r1;
        org.apache.http.impl.SocketHttpServerConnection r3;
        org.apache.http.params.HttpParams r2;
        int i0;

        r3 := @this: org.apache.http.impl.SocketHttpServerConnection;

        r1 := @parameter0: java.net.Socket;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.http.params.HttpParams;

        $r0 = new org.apache.http.impl.io.SocketOutputBuffer;

        specialinvoke $r0.<org.apache.http.impl.io.SocketOutputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)>(r1, i0, r2);

        return $r0;
    }

    protected void bind(java.net.Socket, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        java.net.Socket r0;
        org.apache.http.impl.SocketHttpServerConnection r2;
        java.lang.IllegalArgumentException $r5, $r6;
        org.apache.http.io.SessionInputBuffer $r3;
        org.apache.http.io.SessionOutputBuffer $r4;
        org.apache.http.params.HttpParams r1;
        int $i0;

        r2 := @this: org.apache.http.impl.SocketHttpServerConnection;

        r0 := @parameter0: java.net.Socket;

        r1 := @parameter1: org.apache.http.params.HttpParams;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null");

        throw $r6;

     label1:
        if r1 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r5;

     label2:
        r2.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket> = r0;

        $i0 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getSocketBufferSize(org.apache.http.params.HttpParams)>(r1);

        $r3 = virtualinvoke r2.<org.apache.http.impl.SocketHttpServerConnection: org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)>(r0, $i0, r1);

        $r4 = virtualinvoke r2.<org.apache.http.impl.SocketHttpServerConnection: org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)>(r0, $i0, r1);

        virtualinvoke r2.<org.apache.http.impl.SocketHttpServerConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)>($r3, $r4, r1);

        r2.<org.apache.http.impl.SocketHttpServerConnection: boolean open> = 1;

        return;
    }

    protected java.net.Socket getSocket()
    {
        java.net.Socket $r1;
        org.apache.http.impl.SocketHttpServerConnection r0;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $r1 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        return $r1;
    }

    public boolean isOpen()
    {
        org.apache.http.impl.SocketHttpServerConnection r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $z0 = r0.<org.apache.http.impl.SocketHttpServerConnection: boolean open>;

        return $z0;
    }

    public java.net.InetAddress getLocalAddress()
    {
        java.net.InetAddress $r3;
        java.net.Socket $r1, $r2;
        org.apache.http.impl.SocketHttpServerConnection r0;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $r1 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        $r3 = virtualinvoke $r2.<java.net.Socket: java.net.InetAddress getLocalAddress()>();

        return $r3;

     label1:
        return null;
    }

    public int getLocalPort()
    {
        java.net.Socket $r1, $r2;
        org.apache.http.impl.SocketHttpServerConnection r0;
        int $i0, $i2;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $r1 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        $i0 = virtualinvoke $r2.<java.net.Socket: int getLocalPort()>();

        return $i0;

     label1:
        $i2 = (int) -1;

        return $i2;
    }

    public java.net.InetAddress getRemoteAddress()
    {
        java.net.InetAddress $r3;
        java.net.Socket $r1, $r2;
        org.apache.http.impl.SocketHttpServerConnection r0;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $r1 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        $r3 = virtualinvoke $r2.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        return $r3;

     label1:
        return null;
    }

    public int getRemotePort()
    {
        java.net.Socket $r1, $r2;
        org.apache.http.impl.SocketHttpServerConnection r0;
        int $i0, $i2;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $r1 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        $i0 = virtualinvoke $r2.<java.net.Socket: int getPort()>();

        return $i0;

     label1:
        $i2 = (int) -1;

        return $i2;
    }

    public void setSocketTimeout(int)
    {
        java.net.Socket $r1, $r2;
        java.net.SocketException $r3;
        org.apache.http.impl.SocketHttpServerConnection r0;
        int i0;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.http.impl.SocketHttpServerConnection: void assertOpen()>();

        $r1 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        if $r1 == null goto label4;

     label1:
        $r2 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.net.SocketException from label1 to label2 with label3;
    }

    public int getSocketTimeout()
    {
        java.net.Socket $r1, $r2;
        java.net.SocketException $r3;
        org.apache.http.impl.SocketHttpServerConnection r0;
        int $i0, $i2, $i4;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $r1 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        if $r1 == null goto label4;

     label1:
        $r2 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        $i0 = virtualinvoke $r2.<java.net.Socket: int getSoTimeout()>();

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        $i2 = (int) -1;

        return $i2;

     label4:
        $i4 = (int) -1;

        return $i4;

        catch java.net.SocketException from label1 to label2 with label3;
    }

    public void shutdown() throws java.io.IOException
    {
        java.net.Socket r1;
        org.apache.http.impl.SocketHttpServerConnection r0;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        r0.<org.apache.http.impl.SocketHttpServerConnection: boolean open> = 0;

        r1 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        if r1 == null goto label1;

        virtualinvoke r1.<java.net.Socket: void close()>();

     label1:
        return;
    }

    public void close() throws java.io.IOException
    {
        java.lang.Throwable $r2;
        java.lang.UnsupportedOperationException $r3;
        java.net.Socket r1;
        org.apache.http.impl.SocketHttpServerConnection r0;
        java.io.IOException $r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $z0 = r0.<org.apache.http.impl.SocketHttpServerConnection: boolean open>;

        if $z0 != 0 goto label01;

        return;

     label01:
        r0.<org.apache.http.impl.SocketHttpServerConnection: boolean open> = 0;

        r0.<org.apache.http.impl.SocketHttpServerConnection: boolean open> = 0;

        r1 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

     label02:
        virtualinvoke r0.<org.apache.http.impl.SocketHttpServerConnection: void doFlush()>();

     label03:
        virtualinvoke r1.<java.net.Socket: void shutdownOutput()>();

     label04:
        goto label06;

     label05:
        $r5 := @caughtexception;

     label06:
        virtualinvoke r1.<java.net.Socket: void shutdownInput()>();

     label07:
        goto label09;

     label08:
        $r4 := @caughtexception;

     label09:
        goto label11;

     label10:
        $r3 := @caughtexception;

     label11:
        virtualinvoke r1.<java.net.Socket: void close()>();

        goto label14;

     label12:
        $r2 := @caughtexception;

     label13:
        virtualinvoke r1.<java.net.Socket: void close()>();

        throw $r2;

     label14:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.UnsupportedOperationException from label03 to label09 with label10;
        catch java.lang.Throwable from label02 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private static void formatAddress(java.lang.StringBuilder, java.net.SocketAddress)
    {
        java.net.SocketAddress r0;
        java.net.InetSocketAddress r2;
        java.io.Serializable $r7;
        java.net.InetAddress $r3, $r6;
        int $i0;
        java.lang.StringBuilder r1, $r4, $r5;
        boolean $z0;

        r1 := @parameter0: java.lang.StringBuilder;

        r0 := @parameter1: java.net.SocketAddress;

        $z0 = r0 instanceof java.net.InetSocketAddress;

        if $z0 == 0 goto label3;

        r2 = (java.net.InetSocketAddress) r0;

        $r3 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        if $r3 == null goto label1;

        $r6 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r7 = virtualinvoke $r6.<java.net.InetAddress: java.lang.String getHostAddress()>();

        goto label2;

     label1:
        $r7 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

     label2:
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i0 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        goto label4;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

     label4:
        return;
    }

    public java.lang.String toString()
    {
        java.net.Socket $r1, $r4, $r6;
        org.apache.http.impl.SocketHttpServerConnection r0;
        java.net.SocketAddress $r5, $r7;
        java.lang.StringBuilder $r3;
        java.lang.String $r2, $r8;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $r1 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        if $r1 == null goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        $r5 = virtualinvoke $r4.<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>();

        $r6 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        $r7 = virtualinvoke $r6.<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()>();

        if $r5 == null goto label1;

        if $r7 == null goto label1;

        staticinvoke <org.apache.http.impl.SocketHttpServerConnection: void formatAddress(java.lang.StringBuilder,java.net.SocketAddress)>($r3, $r7);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<->");

        staticinvoke <org.apache.http.impl.SocketHttpServerConnection: void formatAddress(java.lang.StringBuilder,java.net.SocketAddress)>($r3, $r5);

     label1:
        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label2:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
