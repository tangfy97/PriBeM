public class thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange extends java.lang.Object
{
    private double min;
    private double max;
    private int stride;
    private boolean singlePoint;

    public void <init>(double, int)
    {
        int i0;
        thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange r0;
        double d0;

        r0 := @this: thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        specialinvoke r0.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: void <init>(double,double,int)>(d0, d0, i0);

        r0.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: boolean singlePoint> = 1;

        return;
    }

    public void <init>(double, double, int)
    {
        byte $b0;
        java.lang.StringBuilder $r3, $r4, $r5, $r9, $r10, $r11, $r15, $r16, $r17, $r18, $r19, $r23, $r24, $r25, $r26, $r27, $r29, $r30, $r32, $r33;
        thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange r0;
        int i1, $i2;
        java.lang.String $r6, $r12, $r20, $r28;
        double d0, d1;
        org.slf4j.Logger $r1, $r13;
        java.lang.IllegalArgumentException $r31, $r34;

        r0 := @this: thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: boolean singlePoint> = 0;

        $b0 = d0 cmpl d1;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label1;

        $r13 = staticinvoke <thredds.wcs.v1_0_0_1.WcsCoverage: org.slf4j.Logger access$000()>();

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VerticalRange(): Minimum <");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> is greater than maximum <");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.slf4j.Logger: void error(java.lang.String)>($r20);

        $r31 = new java.lang.IllegalArgumentException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VerticalRange minimum <");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> greater than maximum <");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r31;

     label1:
        if i1 >= 1 goto label2;

        $r1 = staticinvoke <thredds.wcs.v1_0_0_1.WcsCoverage: org.slf4j.Logger access$000()>();

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VerticalRange(): stride <");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> less than one (1 means all points).");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.slf4j.Logger: void error(java.lang.String)>($r6);

        $r34 = new java.lang.IllegalArgumentException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VerticalRange stride <");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> less than one (1 means all points).");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r34;

     label2:
        r0.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: double min> = d0;

        r0.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: double max> = d1;

        r0.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: int stride> = i1;

        return;
    }

    public double getMinimum()
    {
        thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange r0;
        double $d0;

        r0 := @this: thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange;

        $d0 = r0.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: double min>;

        return $d0;
    }

    public double getMaximum()
    {
        thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange r0;
        double $d0;

        r0 := @this: thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange;

        $d0 = r0.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: double max>;

        return $d0;
    }

    public int getStride()
    {
        int $i0;
        thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange r0;

        r0 := @this: thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange;

        $i0 = r0.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: int stride>;

        return $i0;
    }

    public boolean isSinglePoint()
    {
        thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange r0;
        boolean $z0;

        r0 := @this: thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange;

        $z0 = r0.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: boolean singlePoint>;

        return $z0;
    }

    public java.lang.String toString()
    {
        thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange r2;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        double $d0, $d1;

        r2 := @this: thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[min=");

        $d0 = r2.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: double min>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",max=");

        $d1 = r2.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: double max>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",stride=");

        $i0 = r2.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: int stride>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public ucar.ma2.Range getRange(ucar.nc2.dt.GridCoordSystem) throws ucar.ma2.InvalidRangeException
    {
        thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange r2;
        ucar.nc2.dataset.CoordinateAxis1D $r1;
        int $i0, $i1, $i2, $i3, $i5, $i7;
        java.lang.String $r5;
        boolean $z0, $z1;
        double $d0, $d1;
        ucar.ma2.Range $r18, $r19;
        org.slf4j.Logger $r3, $r8, $r10, $r12;
        java.lang.IllegalArgumentException $r14, $r15, $r16, $r17;
        ucar.nc2.dt.GridCoordSystem r0;

        r2 := @this: thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange;

        r0 := @parameter0: ucar.nc2.dt.GridCoordSystem;

        if r0 != null goto label1;

        $r12 = staticinvoke <thredds.wcs.v1_0_0_1.WcsCoverage: org.slf4j.Logger access$000()>();

        interfaceinvoke $r12.<org.slf4j.Logger: void error(java.lang.String)>("getRange(): GridCoordSystem must be non-null.");

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("GridCoordSystem must be non-null.");

        throw $r14;

     label1:
        $r1 = interfaceinvoke r0.<ucar.nc2.dt.GridCoordSystem: ucar.nc2.dataset.CoordinateAxis1D getVerticalAxis()>();

        if $r1 != null goto label2;

        $r10 = staticinvoke <thredds.wcs.v1_0_0_1.WcsCoverage: org.slf4j.Logger access$000()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void error(java.lang.String)>("getRange(): GridCoordSystem must have vertical axis.");

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("GridCoordSystem must have vertical axis.");

        throw $r15;

     label2:
        $z0 = virtualinvoke $r1.<ucar.nc2.dataset.CoordinateAxis1D: boolean isNumeric()>();

        if $z0 != 0 goto label3;

        $r8 = staticinvoke <thredds.wcs.v1_0_0_1.WcsCoverage: org.slf4j.Logger access$000()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String)>("getRange(): GridCoordSystem must have numeric vertical axis to support min/max range.");

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("GridCoordSystem must have numeric vertical axis to support min/max range.");

        throw $r16;

     label3:
        $d0 = r2.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: double min>;

        $i0 = virtualinvoke $r1.<ucar.nc2.dataset.CoordinateAxis1D: int findCoordElement(double)>($d0);

        $d1 = r2.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: double max>;

        $i1 = virtualinvoke $r1.<ucar.nc2.dataset.CoordinateAxis1D: int findCoordElement(double)>($d1);

        $i5 = (int) -1;

        if $i0 == $i5 goto label4;

        $i7 = (int) -1;

        if $i1 != $i7 goto label5;

     label4:
        $r3 = staticinvoke <thredds.wcs.v1_0_0_1.WcsCoverage: org.slf4j.Logger access$000()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void error(java.lang.String)>("getRange(): GridCoordSystem vertical axis does not contain min/max points.");

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("GridCoordSystem vertical axis does not contain min/max points.");

        throw $r17;

     label5:
        $r5 = virtualinvoke $r1.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String getPositive()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("down");

        if $z1 == 0 goto label6;

        $r18 = new ucar.ma2.Range;

        $i3 = r2.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: int stride>;

        specialinvoke $r18.<ucar.ma2.Range: void <init>(int,int,int)>($i1, $i0, $i3);

        return $r18;

     label6:
        $r19 = new ucar.ma2.Range;

        $i2 = r2.<thredds.wcs.v1_0_0_1.WcsCoverage$VerticalRange: int stride>;

        specialinvoke $r19.<ucar.ma2.Range: void <init>(int,int,int)>($i0, $i1, $i2);

        return $r19;
    }
}
