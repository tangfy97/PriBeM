public class org.apache.http.conn.scheme.PlainSocketFactory extends java.lang.Object implements org.apache.http.conn.scheme.SocketFactory, org.apache.http.conn.scheme.SchemeSocketFactory
{
    private final org.apache.http.conn.scheme.HostNameResolver nameResolver;

    public static org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()
    {
        org.apache.http.conn.scheme.PlainSocketFactory $r0;

        $r0 = new org.apache.http.conn.scheme.PlainSocketFactory;

        specialinvoke $r0.<org.apache.http.conn.scheme.PlainSocketFactory: void <init>()>();

        return $r0;
    }

    public void <init>(org.apache.http.conn.scheme.HostNameResolver)
    {
        org.apache.http.conn.scheme.PlainSocketFactory r0;
        org.apache.http.conn.scheme.HostNameResolver r1;

        r0 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        r1 := @parameter0: org.apache.http.conn.scheme.HostNameResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver> = r1;

        return;
    }

    public void <init>()
    {
        org.apache.http.conn.scheme.PlainSocketFactory r0;

        r0 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver> = null;

        return;
    }

    public java.net.Socket createSocket(org.apache.http.params.HttpParams)
    {
        org.apache.http.conn.scheme.PlainSocketFactory r1;
        java.net.Socket $r0;
        org.apache.http.params.HttpParams r2;

        r1 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        r2 := @parameter0: org.apache.http.params.HttpParams;

        $r0 = new java.net.Socket;

        specialinvoke $r0.<java.net.Socket: void <init>()>();

        return $r0;
    }

    public java.net.Socket createSocket()
    {
        org.apache.http.conn.scheme.PlainSocketFactory r1;
        java.net.Socket $r0;

        r1 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        $r0 = new java.net.Socket;

        specialinvoke $r0.<java.net.Socket: void <init>()>();

        return $r0;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.net.InetSocketAddress, java.net.InetSocketAddress, org.apache.http.params.HttpParams) throws java.io.IOException, org.apache.http.conn.ConnectTimeoutException
    {
        org.apache.http.conn.scheme.PlainSocketFactory r4;
        java.net.Socket r2, r14;
        org.apache.http.conn.ConnectTimeoutException $r8;
        java.net.SocketTimeoutException $r7;
        int $i0, $i1;
        java.lang.String $r13;
        boolean $z0;
        java.lang.IllegalArgumentException $r5, $r6;
        java.net.InetSocketAddress r0, r3;
        org.apache.http.params.HttpParams r1;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r4 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        r2 := @parameter0: java.net.Socket;

        r0 := @parameter1: java.net.InetSocketAddress;

        r3 := @parameter2: java.net.InetSocketAddress;

        r1 := @parameter3: org.apache.http.params.HttpParams;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Remote address may not be null");

        throw $r6;

     label1:
        if r1 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r5;

     label2:
        r14 = r2;

        if r2 != null goto label3;

        r14 = virtualinvoke r4.<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket createSocket()>();

     label3:
        if r3 == null goto label4;

        $z0 = staticinvoke <org.apache.http.params.HttpConnectionParams: boolean getSoReuseaddr(org.apache.http.params.HttpParams)>(r1);

        virtualinvoke r14.<java.net.Socket: void setReuseAddress(boolean)>($z0);

        virtualinvoke r14.<java.net.Socket: void bind(java.net.SocketAddress)>(r3);

     label4:
        $i0 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>(r1);

        $i1 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>(r1);

     label5:
        virtualinvoke r14.<java.net.Socket: void setSoTimeout(int)>($i1);

        virtualinvoke r14.<java.net.Socket: void connect(java.net.SocketAddress,int)>(r0, $i0);

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        $r8 = new org.apache.http.conn.ConnectTimeoutException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connect to ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timed out");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label8:
        return r14;

        catch java.net.SocketTimeoutException from label5 to label6 with label7;
    }

    public final boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException
    {
        org.apache.http.conn.scheme.PlainSocketFactory r3;
        java.net.Socket r0;
        java.lang.IllegalArgumentException $r1, $r2;
        boolean $z0;

        r3 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        r0 := @parameter0: java.net.Socket;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null.");

        throw $r2;

     label1:
        $z0 = virtualinvoke r0.<java.net.Socket: boolean isClosed()>();

        if $z0 == 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket is closed.");

        throw $r1;

     label2:
        return 0;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws java.io.IOException, java.net.UnknownHostException, org.apache.http.conn.ConnectTimeoutException
    {
        org.apache.http.conn.scheme.PlainSocketFactory r2;
        java.net.Socket r5, $r7;
        java.net.InetSocketAddress $r1, $r4, r9;
        java.net.InetAddress r0, r11;
        org.apache.http.conn.scheme.HostNameResolver $r8, $r10;
        org.apache.http.params.HttpParams r6;
        int i0, i1;
        java.lang.String r3;

        r2 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        r5 := @parameter0: java.net.Socket;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r0 := @parameter3: java.net.InetAddress;

        i1 := @parameter4: int;

        r6 := @parameter5: org.apache.http.params.HttpParams;

        r9 = null;

        if r0 != null goto label1;

        if i1 <= 0 goto label3;

     label1:
        if i1 >= 0 goto label2;

        i1 = 0;

     label2:
        $r1 = new java.net.InetSocketAddress;

        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r0, i1);

        r9 = $r1;

     label3:
        $r10 = r2.<org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver>;

        if $r10 == null goto label4;

        $r8 = r2.<org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver>;

        r11 = interfaceinvoke $r8.<org.apache.http.conn.scheme.HostNameResolver: java.net.InetAddress resolve(java.lang.String)>(r3);

        goto label5;

     label4:
        r11 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r3);

     label5:
        $r4 = new java.net.InetSocketAddress;

        specialinvoke $r4.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r11, i0);

        $r7 = virtualinvoke r2.<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)>(r5, $r4, r9, r6);

        return $r7;
    }
}
