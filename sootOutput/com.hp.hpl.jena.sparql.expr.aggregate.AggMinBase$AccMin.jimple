class com.hp.hpl.jena.sparql.expr.aggregate.AggMinBase$AccMin extends com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr
{
    private com.hp.hpl.jena.sparql.expr.NodeValue minSoFar;
    static final boolean DEBUG;

    public void <init>(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r1;
        com.hp.hpl.jena.sparql.expr.aggregate.AggMinBase$AccMin r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.aggregate.AggMinBase$AccMin;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>(r1);

        r0.<com.hp.hpl.jena.sparql.expr.aggregate.AggMinBase$AccMin: com.hp.hpl.jena.sparql.expr.NodeValue minSoFar> = null;

        return;
    }

    public void accumulate(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r4;
        com.hp.hpl.jena.sparql.expr.NodeValue $r1, r2, $r3;
        int $i0;
        com.hp.hpl.jena.sparql.function.FunctionEnv r5;
        com.hp.hpl.jena.sparql.expr.aggregate.AggMinBase$AccMin r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.aggregate.AggMinBase$AccMin;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r4 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r5 := @parameter2: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.aggregate.AggMinBase$AccMin: com.hp.hpl.jena.sparql.expr.NodeValue minSoFar>;

        if $r1 != null goto label1;

        r0.<com.hp.hpl.jena.sparql.expr.aggregate.AggMinBase$AccMin: com.hp.hpl.jena.sparql.expr.NodeValue minSoFar> = r2;

        return;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.expr.aggregate.AggMinBase$AccMin: com.hp.hpl.jena.sparql.expr.NodeValue minSoFar>;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: int compareAlways(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>($r3, r2);

        if $i0 <= 0 goto label2;

        r0.<com.hp.hpl.jena.sparql.expr.aggregate.AggMinBase$AccMin: com.hp.hpl.jena.sparql.expr.NodeValue minSoFar> = r2;

     label2:
        return;
    }

    protected void accumulateError(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.function.FunctionEnv r2;
        com.hp.hpl.jena.sparql.expr.aggregate.AggMinBase$AccMin r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.aggregate.AggMinBase$AccMin;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue getAccValue()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r1;
        com.hp.hpl.jena.sparql.expr.aggregate.AggMinBase$AccMin r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.aggregate.AggMinBase$AccMin;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.aggregate.AggMinBase$AccMin: com.hp.hpl.jena.sparql.expr.NodeValue minSoFar>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.expr.aggregate.AggMinBase$AccMin: boolean DEBUG> = 0;

        return;
    }
}
