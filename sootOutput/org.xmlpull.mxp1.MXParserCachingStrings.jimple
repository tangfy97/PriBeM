public class org.xmlpull.mxp1.MXParserCachingStrings extends org.xmlpull.mxp1.MXParser implements java.lang.Cloneable
{
    protected static final boolean CACHE_STATISTICS;
    protected static final boolean TRACE_SIZING;
    protected static final int INITIAL_CAPACITY;
    protected int cacheStatCalls;
    protected int cacheStatWalks;
    protected int cacheStatResets;
    protected int cacheStatRehash;
    protected static final int CACHE_LOAD;
    protected int cacheEntriesCount;
    protected int cacheEntriesThreshold;
    protected char[][] keys;
    protected java.lang.String[] values;

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.lang.CloneNotSupportedException $r131, $r133;
        java.lang.StringBuffer $r134, $r135, $r137, $r138, $r139;
        int[] $r7, $r8, $r12, $r14, $r19, $r23, $r47, $r49, $r50, $r61, $r63, $r64, $r81, $r83, $r84, $r89, $r91, $r92, $r105, $r107, $r108, $r109, $r111, $r112;
        java.lang.reflect.Method $r125;
        java.lang.Object $r2, $r30, $r34, $r38, $r42, $r48, $r54, $r58, $r62, $r66, $r70, $r74, $r78, $r82, $r86, $r90, $r94, $r98, $r102, $r106, $r110, $r116, $r120, $r127;
        java.lang.Class $r124;
        char[][] $r4, $r6, $r22, $r24, $r45, $r46, $r51, $r52, $r113, $r114, $r119, $r121, $r122;
        java.io.Reader $r1, $r3, $r123, $r126, $r128, $r129, $r136;
        java.lang.Exception $r132;
        java.lang.String $r140;
        char[] $r26, $r27, $r28, $r29, $r31, $r32, $r33, $r35, $r36, $r37, $r39, $r40;
        boolean $z0;
        java.lang.String[] $r5, $r9, $r10, $r11, $r13, $r15, $r16, $r17, $r18, $r20, $r21, $r25, $r41, $r43, $r44, $r53, $r55, $r56, $r57, $r59, $r60, $r65, $r67, $r68, $r69, $r71, $r72, $r73, $r75, $r76, $r77, $r79, $r80, $r85, $r87, $r88, $r93, $r95, $r96, $r97, $r99, $r100, $r101, $r103, $r104, $r115, $r117, $r118;
        org.xmlpull.mxp1.MXParserCachingStrings r0, $r130;

        r0 := @this: org.xmlpull.mxp1.MXParserCachingStrings;

        $r1 = r0.<org.xmlpull.mxp1.MXParser: java.io.Reader reader>;

        if $r1 == null goto label01;

        $r129 = r0.<org.xmlpull.mxp1.MXParser: java.io.Reader reader>;

        $z0 = $r129 instanceof java.lang.Cloneable;

        if $z0 != 0 goto label01;

        $r131 = new java.lang.CloneNotSupportedException;

        specialinvoke $r131.<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>("reader used in parser must implement Cloneable!");

        throw $r131;

     label01:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r130 = (org.xmlpull.mxp1.MXParserCachingStrings) $r2;

        $r3 = r0.<org.xmlpull.mxp1.MXParser: java.io.Reader reader>;

        if $r3 == null goto label05;

     label02:
        $r123 = r0.<org.xmlpull.mxp1.MXParser: java.io.Reader reader>;

        $r124 = virtualinvoke $r123.<java.lang.Object: java.lang.Class getClass()>();

        $r125 = virtualinvoke $r124.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("clone", null);

        $r126 = r0.<org.xmlpull.mxp1.MXParser: java.io.Reader reader>;

        $r127 = virtualinvoke $r125.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r126, null);

        $r128 = (java.io.Reader) $r127;

        $r130.<org.xmlpull.mxp1.MXParser: java.io.Reader reader> = $r128;

     label03:
        goto label05;

     label04:
        $r132 := @caughtexception;

        $r133 = new java.lang.CloneNotSupportedException;

        $r134 = new java.lang.StringBuffer;

        specialinvoke $r134.<java.lang.StringBuffer: void <init>()>();

        $r135 = virtualinvoke $r134.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("failed to call clone() on reader ");

        $r136 = r0.<org.xmlpull.mxp1.MXParser: java.io.Reader reader>;

        $r137 = virtualinvoke $r135.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r136);

        $r138 = virtualinvoke $r137.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r139 = virtualinvoke $r138.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r132);

        $r140 = virtualinvoke $r139.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r133.<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>($r140);

        virtualinvoke $r133.<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>($r132);

        throw $r133;

     label05:
        $r4 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] keys>;

        if $r4 == null goto label06;

        $r119 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] keys>;

        $r120 = virtualinvoke $r119.<java.lang.Object: java.lang.Object clone()>();

        $r121 = (char[][]) $r120;

        $r122 = (char[][]) $r121;

        $r130.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] keys> = $r122;

     label06:
        $r5 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: java.lang.String[] values>;

        if $r5 == null goto label07;

        $r115 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: java.lang.String[] values>;

        $r116 = virtualinvoke $r115.<java.lang.Object: java.lang.Object clone()>();

        $r117 = (java.lang.String[]) $r116;

        $r118 = (java.lang.String[]) $r117;

        $r130.<org.xmlpull.mxp1.MXParserCachingStrings: java.lang.String[] values> = $r118;

     label07:
        $r6 = r0.<org.xmlpull.mxp1.MXParser: char[][] elRawName>;

        if $r6 == null goto label08;

        $r113 = r0.<org.xmlpull.mxp1.MXParser: char[][] elRawName>;

        $r114 = specialinvoke r0.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] cloneCCArr(char[][])>($r113);

        $r130.<org.xmlpull.mxp1.MXParser: char[][] elRawName> = $r114;

     label08:
        $r7 = r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameEnd>;

        if $r7 == null goto label09;

        $r109 = r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameEnd>;

        $r110 = virtualinvoke $r109.<java.lang.Object: java.lang.Object clone()>();

        $r111 = (int[]) $r110;

        $r112 = (int[]) $r111;

        $r130.<org.xmlpull.mxp1.MXParser: int[] elRawNameEnd> = $r112;

     label09:
        $r8 = r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameLine>;

        if $r8 == null goto label10;

        $r105 = r0.<org.xmlpull.mxp1.MXParser: int[] elRawNameLine>;

        $r106 = virtualinvoke $r105.<java.lang.Object: java.lang.Object clone()>();

        $r107 = (int[]) $r106;

        $r108 = (int[]) $r107;

        $r130.<org.xmlpull.mxp1.MXParser: int[] elRawNameLine> = $r108;

     label10:
        $r9 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elName>;

        if $r9 == null goto label11;

        $r101 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elName>;

        $r102 = virtualinvoke $r101.<java.lang.Object: java.lang.Object clone()>();

        $r103 = (java.lang.String[]) $r102;

        $r104 = (java.lang.String[]) $r103;

        $r130.<org.xmlpull.mxp1.MXParser: java.lang.String[] elName> = $r104;

     label11:
        $r10 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elPrefix>;

        if $r10 == null goto label12;

        $r97 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elPrefix>;

        $r98 = virtualinvoke $r97.<java.lang.Object: java.lang.Object clone()>();

        $r99 = (java.lang.String[]) $r98;

        $r100 = (java.lang.String[]) $r99;

        $r130.<org.xmlpull.mxp1.MXParser: java.lang.String[] elPrefix> = $r100;

     label12:
        $r11 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elUri>;

        if $r11 == null goto label13;

        $r93 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] elUri>;

        $r94 = virtualinvoke $r93.<java.lang.Object: java.lang.Object clone()>();

        $r95 = (java.lang.String[]) $r94;

        $r96 = (java.lang.String[]) $r95;

        $r130.<org.xmlpull.mxp1.MXParser: java.lang.String[] elUri> = $r96;

     label13:
        $r12 = r0.<org.xmlpull.mxp1.MXParser: int[] elNamespaceCount>;

        if $r12 == null goto label14;

        $r89 = r0.<org.xmlpull.mxp1.MXParser: int[] elNamespaceCount>;

        $r90 = virtualinvoke $r89.<java.lang.Object: java.lang.Object clone()>();

        $r91 = (int[]) $r90;

        $r92 = (int[]) $r91;

        $r130.<org.xmlpull.mxp1.MXParser: int[] elNamespaceCount> = $r92;

     label14:
        $r13 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        if $r13 == null goto label15;

        $r85 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName>;

        $r86 = virtualinvoke $r85.<java.lang.Object: java.lang.Object clone()>();

        $r87 = (java.lang.String[]) $r86;

        $r88 = (java.lang.String[]) $r87;

        $r130.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeName> = $r88;

     label15:
        $r14 = r0.<org.xmlpull.mxp1.MXParser: int[] attributeNameHash>;

        if $r14 == null goto label16;

        $r81 = r0.<org.xmlpull.mxp1.MXParser: int[] attributeNameHash>;

        $r82 = virtualinvoke $r81.<java.lang.Object: java.lang.Object clone()>();

        $r83 = (int[]) $r82;

        $r84 = (int[]) $r83;

        $r130.<org.xmlpull.mxp1.MXParser: int[] attributeNameHash> = $r84;

     label16:
        $r15 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributePrefix>;

        if $r15 == null goto label17;

        $r77 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributePrefix>;

        $r78 = virtualinvoke $r77.<java.lang.Object: java.lang.Object clone()>();

        $r79 = (java.lang.String[]) $r78;

        $r80 = (java.lang.String[]) $r79;

        $r130.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributePrefix> = $r80;

     label17:
        $r16 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeUri>;

        if $r16 == null goto label18;

        $r73 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeUri>;

        $r74 = virtualinvoke $r73.<java.lang.Object: java.lang.Object clone()>();

        $r75 = (java.lang.String[]) $r74;

        $r76 = (java.lang.String[]) $r75;

        $r130.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeUri> = $r76;

     label18:
        $r17 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeValue>;

        if $r17 == null goto label19;

        $r69 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeValue>;

        $r70 = virtualinvoke $r69.<java.lang.Object: java.lang.Object clone()>();

        $r71 = (java.lang.String[]) $r70;

        $r72 = (java.lang.String[]) $r71;

        $r130.<org.xmlpull.mxp1.MXParser: java.lang.String[] attributeValue> = $r72;

     label19:
        $r18 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespacePrefix>;

        if $r18 == null goto label20;

        $r65 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespacePrefix>;

        $r66 = virtualinvoke $r65.<java.lang.Object: java.lang.Object clone()>();

        $r67 = (java.lang.String[]) $r66;

        $r68 = (java.lang.String[]) $r67;

        $r130.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespacePrefix> = $r68;

     label20:
        $r19 = r0.<org.xmlpull.mxp1.MXParser: int[] namespacePrefixHash>;

        if $r19 == null goto label21;

        $r61 = r0.<org.xmlpull.mxp1.MXParser: int[] namespacePrefixHash>;

        $r62 = virtualinvoke $r61.<java.lang.Object: java.lang.Object clone()>();

        $r63 = (int[]) $r62;

        $r64 = (int[]) $r63;

        $r130.<org.xmlpull.mxp1.MXParser: int[] namespacePrefixHash> = $r64;

     label21:
        $r20 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespaceUri>;

        if $r20 == null goto label22;

        $r57 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespaceUri>;

        $r58 = virtualinvoke $r57.<java.lang.Object: java.lang.Object clone()>();

        $r59 = (java.lang.String[]) $r58;

        $r60 = (java.lang.String[]) $r59;

        $r130.<org.xmlpull.mxp1.MXParser: java.lang.String[] namespaceUri> = $r60;

     label22:
        $r21 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] entityName>;

        if $r21 == null goto label23;

        $r53 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] entityName>;

        $r54 = virtualinvoke $r53.<java.lang.Object: java.lang.Object clone()>();

        $r55 = (java.lang.String[]) $r54;

        $r56 = (java.lang.String[]) $r55;

        $r130.<org.xmlpull.mxp1.MXParser: java.lang.String[] entityName> = $r56;

     label23:
        $r22 = r0.<org.xmlpull.mxp1.MXParser: char[][] entityNameBuf>;

        if $r22 == null goto label24;

        $r51 = r0.<org.xmlpull.mxp1.MXParser: char[][] entityNameBuf>;

        $r52 = specialinvoke r0.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] cloneCCArr(char[][])>($r51);

        $r130.<org.xmlpull.mxp1.MXParser: char[][] entityNameBuf> = $r52;

     label24:
        $r23 = r0.<org.xmlpull.mxp1.MXParser: int[] entityNameHash>;

        if $r23 == null goto label25;

        $r47 = r0.<org.xmlpull.mxp1.MXParser: int[] entityNameHash>;

        $r48 = virtualinvoke $r47.<java.lang.Object: java.lang.Object clone()>();

        $r49 = (int[]) $r48;

        $r50 = (int[]) $r49;

        $r130.<org.xmlpull.mxp1.MXParser: int[] entityNameHash> = $r50;

     label25:
        $r24 = r0.<org.xmlpull.mxp1.MXParser: char[][] entityReplacementBuf>;

        if $r24 == null goto label26;

        $r45 = r0.<org.xmlpull.mxp1.MXParser: char[][] entityReplacementBuf>;

        $r46 = specialinvoke r0.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] cloneCCArr(char[][])>($r45);

        $r130.<org.xmlpull.mxp1.MXParser: char[][] entityReplacementBuf> = $r46;

     label26:
        $r25 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] entityReplacement>;

        if $r25 == null goto label27;

        $r41 = r0.<org.xmlpull.mxp1.MXParser: java.lang.String[] entityReplacement>;

        $r42 = virtualinvoke $r41.<java.lang.Object: java.lang.Object clone()>();

        $r43 = (java.lang.String[]) $r42;

        $r44 = (java.lang.String[]) $r43;

        $r130.<org.xmlpull.mxp1.MXParser: java.lang.String[] entityReplacement> = $r44;

     label27:
        $r26 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        if $r26 == null goto label28;

        $r37 = r0.<org.xmlpull.mxp1.MXParser: char[] buf>;

        $r38 = virtualinvoke $r37.<java.lang.Object: java.lang.Object clone()>();

        $r39 = (char[]) $r38;

        $r40 = (char[]) $r39;

        $r130.<org.xmlpull.mxp1.MXParser: char[] buf> = $r40;

     label28:
        $r27 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        if $r27 == null goto label29;

        $r33 = r0.<org.xmlpull.mxp1.MXParser: char[] pc>;

        $r34 = virtualinvoke $r33.<java.lang.Object: java.lang.Object clone()>();

        $r35 = (char[]) $r34;

        $r36 = (char[]) $r35;

        $r130.<org.xmlpull.mxp1.MXParser: char[] pc> = $r36;

     label29:
        $r28 = r0.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf>;

        if $r28 == null goto label30;

        $r29 = r0.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf>;

        $r30 = virtualinvoke $r29.<java.lang.Object: java.lang.Object clone()>();

        $r31 = (char[]) $r30;

        $r32 = (char[]) $r31;

        $r130.<org.xmlpull.mxp1.MXParser: char[] charRefOneCharBuf> = $r32;

     label30:
        return $r130;

        catch java.lang.Exception from label02 to label03 with label04;
    }

    private char[][] cloneCCArr(char[][])
    {
        char[][] r0, $r2, r3;
        org.xmlpull.mxp1.MXParserCachingStrings r9;
        int $i0, i1;
        char[] $r4, $r5, $r7, $r8;
        java.lang.Object $r1, $r6;

        r9 := @this: org.xmlpull.mxp1.MXParserCachingStrings;

        r0 := @parameter0: char[][];

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (char[][]) $r1;

        r3 = (char[][]) $r2;

        i1 = 0;

     label1:
        $i0 = lengthof r3;

        if i1 >= $i0 goto label3;

        $r4 = r3[i1];

        if $r4 == null goto label2;

        $r5 = r3[i1];

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Object clone()>();

        $r7 = (char[]) $r6;

        $r8 = (char[]) $r7;

        r3[i1] = $r8;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r3;
    }

    public void <init>()
    {
        org.xmlpull.mxp1.MXParserCachingStrings r0;

        r0 := @this: org.xmlpull.mxp1.MXParserCachingStrings;

        specialinvoke r0.<org.xmlpull.mxp1.MXParser: void <init>()>();

        r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned> = 1;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParserCachingStrings: void initStringCache()>();

        return;
    }

    public void setFeature(java.lang.String, boolean) throws org.xmlpull.v1.XmlPullParserException
    {
        char[][] $r3;
        org.xmlpull.v1.XmlPullParserException $r4;
        org.xmlpull.mxp1.MXParserCachingStrings r2;
        int $i0;
        java.lang.String r0, $r1;
        boolean $z0, z1;

        r2 := @this: org.xmlpull.mxp1.MXParserCachingStrings;

        r0 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        $r1 = "http://xmlpull.org/v1/doc/features.html#names-interned";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $i0 = r2.<org.xmlpull.mxp1.MXParser: int eventType>;

        if $i0 == 0 goto label1;

        $r4 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r4.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("interning names feature can only be changed before parsing", r2, null);

        throw $r4;

     label1:
        r2.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned> = z1;

        if z1 != 0 goto label3;

        $r3 = r2.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] keys>;

        if $r3 == null goto label3;

        virtualinvoke r2.<org.xmlpull.mxp1.MXParserCachingStrings: void resetStringCache()>();

        goto label3;

     label2:
        specialinvoke r2.<org.xmlpull.mxp1.MXParser: void setFeature(java.lang.String,boolean)>(r0, z1);

     label3:
        return;
    }

    public boolean getFeature(java.lang.String)
    {
        org.xmlpull.mxp1.MXParserCachingStrings r2;
        java.lang.String r0, $r1;
        boolean $z0, $z1, $z2;

        r2 := @this: org.xmlpull.mxp1.MXParserCachingStrings;

        r0 := @parameter0: java.lang.String;

        $r1 = "http://xmlpull.org/v1/doc/features.html#names-interned";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $z2 = r2.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        return $z2;

     label1:
        $z1 = specialinvoke r2.<org.xmlpull.mxp1.MXParser: boolean getFeature(java.lang.String)>(r0);

        return $z1;
    }

    public void finalize()
    {
        org.xmlpull.mxp1.MXParserCachingStrings r0;

        r0 := @this: org.xmlpull.mxp1.MXParserCachingStrings;

        return;
    }

    protected java.lang.String newString(char[], int, int)
    {
        org.xmlpull.mxp1.MXParserCachingStrings r0;
        int i0, i1;
        char[] r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: org.xmlpull.mxp1.MXParserCachingStrings;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<org.xmlpull.mxp1.MXParser: boolean allStringsInterned>;

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.xmlpull.mxp1.MXParserCachingStrings: java.lang.String newStringIntern(char[],int,int)>(r1, i0, i1);

        return $r3;

     label1:
        $r2 = specialinvoke r0.<org.xmlpull.mxp1.MXParser: java.lang.String newString(char[],int,int)>(r1, i0, i1);

        return $r2;
    }

    protected java.lang.String newStringIntern(char[], int, int)
    {
        java.lang.String[] $r6, $r7;
        char[][] $r2, $r5, $r9, $r10;
        int $i0, $i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        java.lang.String $r3, $r4, $r8;
        boolean $z0;
        org.xmlpull.mxp1.MXParserCachingStrings r0;
        char[] r1, $r11, r12;

        r0 := @this: org.xmlpull.mxp1.MXParserCachingStrings;

        r1 := @parameter0: char[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $i1 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: int cacheEntriesCount>;

        $i0 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: int cacheEntriesThreshold>;

        if $i1 < $i0 goto label1;

        specialinvoke r0.<org.xmlpull.mxp1.MXParserCachingStrings: void rehash()>();

     label1:
        $i4 = staticinvoke <org.xmlpull.mxp1.MXParser: int fastHash(char[],int,int)>(r1, i2, i3);

        $r2 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] keys>;

        $i5 = lengthof $r2;

        i11 = $i4 % $i5;

     label2:
        $r10 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] keys>;

        $r11 = $r10[i11];

        if $r11 == null goto label3;

        $i8 = lengthof $r11;

        $z0 = staticinvoke <org.xmlpull.mxp1.MXParserCachingStrings: boolean keysAreEqual(char[],int,int,char[],int,int)>($r11, 0, $i8, r1, i2, i3);

        if $z0 != 0 goto label3;

        $i10 = i11 + 1;

        $r9 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] keys>;

        $i9 = lengthof $r9;

        i11 = $i10 % $i9;

        goto label2;

     label3:
        if $r11 == null goto label4;

        $r7 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: java.lang.String[] values>;

        $r8 = $r7[i11];

        return $r8;

     label4:
        r12 = newarray (char)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i2, r12, 0, i3);

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r12);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String intern()>();

        $r5 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] keys>;

        $r5[i11] = r12;

        $r6 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: java.lang.String[] values>;

        $r6[i11] = $r4;

        $i6 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: int cacheEntriesCount>;

        $i7 = $i6 + 1;

        r0.<org.xmlpull.mxp1.MXParserCachingStrings: int cacheEntriesCount> = $i7;

        return $r4;
    }

    protected void initStringCache()
    {
        org.xmlpull.mxp1.MXParserCachingStrings r0;
        int $i0;
        java.lang.String[] $r3;
        java.lang.RuntimeException $r4;
        char[][] $r1, $r2;

        r0 := @this: org.xmlpull.mxp1.MXParserCachingStrings;

        $r1 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] keys>;

        if $r1 != null goto label2;

        r0.<org.xmlpull.mxp1.MXParserCachingStrings: int cacheEntriesThreshold> = 10;

        $i0 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: int cacheEntriesThreshold>;

        if $i0 < 13 goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("internal error: threshold must be less than capacity: 13");

        throw $r4;

     label1:
        $r2 = newarray (char[])[13];

        r0.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] keys> = $r2;

        $r3 = newarray (java.lang.String)[13];

        r0.<org.xmlpull.mxp1.MXParserCachingStrings: java.lang.String[] values> = $r3;

        r0.<org.xmlpull.mxp1.MXParserCachingStrings: int cacheEntriesCount> = 0;

     label2:
        return;
    }

    protected void resetStringCache()
    {
        org.xmlpull.mxp1.MXParserCachingStrings r0;

        r0 := @this: org.xmlpull.mxp1.MXParserCachingStrings;

        virtualinvoke r0.<org.xmlpull.mxp1.MXParserCachingStrings: void initStringCache()>();

        return;
    }

    private void rehash()
    {
        char[][] $r1, r2, $r4, $r5, $r7;
        boolean $z0;
        java.lang.String[] r3, $r8, $r10;
        java.lang.StringBuffer $r13, $r14, $r16, $r17, $r19, $r22, $r23, $r24;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        java.lang.String r9, $r15, $r18, $r20, $r25;
        java.lang.RuntimeException $r12, $r21;
        org.xmlpull.mxp1.MXParserCachingStrings r0;
        char[] r6, $r11;

        r0 := @this: org.xmlpull.mxp1.MXParserCachingStrings;

        $r1 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] keys>;

        $i0 = lengthof $r1;

        $i1 = 2 * $i0;

        i2 = $i1 + 1;

        $i3 = i2 * 77;

        $i4 = $i3 / 100;

        r0.<org.xmlpull.mxp1.MXParserCachingStrings: int cacheEntriesThreshold> = $i4;

        $i5 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: int cacheEntriesThreshold>;

        if $i5 < i2 goto label1;

        $r21 = new java.lang.RuntimeException;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("internal error: threshold must be less than capacity: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String)>($r25);

        throw $r21;

     label1:
        r2 = newarray (char[])[i2];

        r3 = newarray (java.lang.String)[i2];

        i12 = 0;

     label2:
        $r4 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] keys>;

        $i6 = lengthof $r4;

        if i12 >= $i6 goto label7;

        $r5 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] keys>;

        r6 = $r5[i12];

        $r7 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] keys>;

        $r7[i12] = null;

        $r8 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: java.lang.String[] values>;

        r9 = $r8[i12];

        $r10 = r0.<org.xmlpull.mxp1.MXParserCachingStrings: java.lang.String[] values>;

        $r10[i12] = null;

        if r6 == null goto label6;

        $i7 = lengthof r6;

        $i8 = staticinvoke <org.xmlpull.mxp1.MXParser: int fastHash(char[],int,int)>(r6, 0, $i7);

        i13 = $i8 % i2;

     label3:
        $r11 = r2[i13];

        if $r11 == null goto label5;

        $i10 = lengthof $r11;

        $i9 = lengthof r6;

        $z0 = staticinvoke <org.xmlpull.mxp1.MXParserCachingStrings: boolean keysAreEqual(char[],int,int,char[],int,int)>($r11, 0, $i10, r6, 0, $i9);

        if $z0 == 0 goto label4;

        $r12 = new java.lang.RuntimeException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("internal cache error: duplicated keys: ");

        $r15 = new java.lang.String;

        specialinvoke $r15.<java.lang.String: void <init>(char[])>($r11);

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and ");

        $r18 = new java.lang.String;

        specialinvoke $r18.<java.lang.String: void <init>(char[])>(r6);

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r20);

        throw $r12;

     label4:
        $i11 = i13 + 1;

        i13 = $i11 % i2;

        goto label3;

     label5:
        r2[i13] = r6;

        r3[i13] = r9;

     label6:
        i12 = i12 + 1;

        goto label2;

     label7:
        r0.<org.xmlpull.mxp1.MXParserCachingStrings: char[][] keys> = r2;

        r0.<org.xmlpull.mxp1.MXParserCachingStrings: java.lang.String[] values> = r3;

        return;
    }

    private static final boolean keysAreEqual(char[], int, int, char[], int, int)
    {
        char $c6, $c7;
        int i0, i1, i2, $i3, i4, $i5, i8, $i9, $i10;
        char[] r0, r1;

        r0 := @parameter0: char[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: char[];

        i4 := @parameter4: int;

        i1 := @parameter5: int;

        if i0 == i1 goto label1;

        return 0;

     label1:
        i8 = 0;

     label2:
        if i8 >= i0 goto label4;

        $i3 = i2 + i8;

        $c7 = r0[$i3];

        $i5 = i4 + i8;

        $c6 = r1[$i5];

        $i9 = (int) $c7;

        $i10 = (int) $c6;

        if $i9 == $i10 goto label3;

        return 0;

     label3:
        i8 = i8 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static void <clinit>()
    {
        <org.xmlpull.mxp1.MXParserCachingStrings: int CACHE_LOAD> = 77;

        <org.xmlpull.mxp1.MXParserCachingStrings: int INITIAL_CAPACITY> = 13;

        <org.xmlpull.mxp1.MXParserCachingStrings: boolean TRACE_SIZING> = 0;

        <org.xmlpull.mxp1.MXParserCachingStrings: boolean CACHE_STATISTICS> = 0;

        return;
    }
}
