public class org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl extends java.lang.Object implements org.waveprotocol.wave.federation.ProtocolHashedVersion
{
    private java.lang.Double version;
    private org.waveprotocol.wave.communication.Blob historyHash;

    public void <init>()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl r0;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r1;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        r1 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void copyFrom(org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r1);

        return;
    }

    public void copyFrom(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl r0;
        org.waveprotocol.wave.communication.Blob $r2;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r1;
        double $d0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        r1 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        $d0 = interfaceinvoke r1.<org.waveprotocol.wave.federation.ProtocolHashedVersion: double getVersion()>();

        virtualinvoke r0.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void setVersion(double)>($d0);

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.federation.ProtocolHashedVersion: org.waveprotocol.wave.communication.Blob getHistoryHash()>();

        virtualinvoke r0.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void setHistoryHash(org.waveprotocol.wave.communication.Blob)>($r2);

        return;
    }

    public double getVersion()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl r0;
        java.lang.Double $r1;
        double $d0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        $r1 = r0.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: java.lang.Double version>;

        $d0 = virtualinvoke $r1.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public void setVersion(double)
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl r0;
        java.lang.Double $r1;
        double d0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        d0 := @parameter0: double;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        r0.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: java.lang.Double version> = $r1;

        return;
    }

    public org.waveprotocol.wave.communication.Blob getHistoryHash()
    {
        org.waveprotocol.wave.communication.Blob $r1;
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        $r1 = r0.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: org.waveprotocol.wave.communication.Blob historyHash>;

        return $r1;
    }

    public void setHistoryHash(org.waveprotocol.wave.communication.Blob)
    {
        org.waveprotocol.wave.communication.Blob r1;
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        r1 := @parameter0: org.waveprotocol.wave.communication.Blob;

        r0.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: org.waveprotocol.wave.communication.Blob historyHash> = r1;

        return;
    }

    protected void reset()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        r0.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: java.lang.Double version> = null;

        r0.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: org.waveprotocol.wave.communication.Blob historyHash> = null;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl r1;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: boolean isEqualTo(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl r1;
        java.lang.Object r0;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r2;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.wave.federation.ProtocolHashedVersion;

        if $z0 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.federation.ProtocolHashedVersion) r0;

        $z1 = staticinvoke <org.waveprotocol.wave.federation.ProtocolHashedVersionUtil: boolean isEqual(org.waveprotocol.wave.federation.ProtocolHashedVersion,org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r1, $r2);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        $i0 = staticinvoke <org.waveprotocol.wave.federation.ProtocolHashedVersionUtil: int getHashCode(org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r0);

        return $i0;
    }
}
