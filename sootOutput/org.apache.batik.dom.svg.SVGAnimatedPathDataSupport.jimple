public abstract class org.apache.batik.dom.svg.SVGAnimatedPathDataSupport extends java.lang.Object
{

    public void <init>()
    {
        org.apache.batik.dom.svg.SVGAnimatedPathDataSupport r0;

        r0 := @this: org.apache.batik.dom.svg.SVGAnimatedPathDataSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void handlePathSegList(org.w3c.dom.svg.SVGPathSegList, org.apache.batik.parser.PathHandler)
    {
        org.w3c.dom.svg.SVGPathSegLinetoVerticalAbs r15;
        org.w3c.dom.svg.SVGPathSegLinetoHorizontalRel r14;
        org.w3c.dom.svg.SVGPathSegLinetoRel r6;
        org.w3c.dom.svg.SVGPathSegLinetoVerticalRel r16;
        org.w3c.dom.svg.SVGPathSegCurvetoQuadraticSmoothAbs r19;
        org.w3c.dom.svg.SVGPathSegArcAbs r11;
        org.w3c.dom.svg.SVGPathSegCurvetoCubicSmoothRel r18;
        short $s1;
        org.w3c.dom.svg.SVGPathSegLinetoHorizontalAbs r13;
        org.apache.batik.parser.PathHandler r1;
        org.w3c.dom.svg.SVGPathSeg $r2;
        org.w3c.dom.svg.SVGPathSegList r0;
        org.w3c.dom.svg.SVGPathSegCurvetoCubicAbs r7;
        org.w3c.dom.svg.SVGPathSegCurvetoQuadraticAbs r9;
        boolean $z0, $z1, $z2, $z3;
        org.w3c.dom.svg.SVGPathSegCurvetoQuadraticSmoothRel r20;
        org.w3c.dom.svg.SVGPathSegArcRel r12;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53;
        org.w3c.dom.svg.SVGPathSegCurvetoCubicSmoothAbs r17;
        org.w3c.dom.svg.SVGPathSegMovetoRel r4;
        org.w3c.dom.svg.SVGPathSegCurvetoCubicRel r8;
        org.w3c.dom.svg.SVGPathSegMovetoAbs r3;
        int $i0, i2, $i3;
        org.w3c.dom.svg.SVGPathSegLinetoAbs r5;
        org.w3c.dom.svg.SVGPathSegCurvetoQuadraticRel r10;

        r0 := @parameter0: org.w3c.dom.svg.SVGPathSegList;

        r1 := @parameter1: org.apache.batik.parser.PathHandler;

        $i0 = interfaceinvoke r0.<org.w3c.dom.svg.SVGPathSegList: int getNumberOfItems()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void startPath()>();

        i2 = 0;

        goto label22;

     label01:
        $r2 = interfaceinvoke r0.<org.w3c.dom.svg.SVGPathSegList: org.w3c.dom.svg.SVGPathSeg getItem(int)>(i2);

        $s1 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGPathSeg: short getPathSegType()>();

        $i3 = (int) $s1;

        tableswitch($i3)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label08;
            case 8: goto label09;
            case 9: goto label10;
            case 10: goto label11;
            case 11: goto label12;
            case 12: goto label13;
            case 13: goto label14;
            case 14: goto label15;
            case 15: goto label16;
            case 16: goto label17;
            case 17: goto label18;
            case 18: goto label19;
            case 19: goto label20;
            default: goto label21;
        };

     label02:
        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void closePath()>();

        goto label21;

     label03:
        r3 = (org.w3c.dom.svg.SVGPathSegMovetoAbs) $r2;

        $f52 = interfaceinvoke r3.<org.w3c.dom.svg.SVGPathSegMovetoAbs: float getX()>();

        $f53 = interfaceinvoke r3.<org.w3c.dom.svg.SVGPathSegMovetoAbs: float getY()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void movetoAbs(float,float)>($f52, $f53);

        goto label21;

     label04:
        r4 = (org.w3c.dom.svg.SVGPathSegMovetoRel) $r2;

        $f50 = interfaceinvoke r4.<org.w3c.dom.svg.SVGPathSegMovetoRel: float getX()>();

        $f51 = interfaceinvoke r4.<org.w3c.dom.svg.SVGPathSegMovetoRel: float getY()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void movetoRel(float,float)>($f50, $f51);

        goto label21;

     label05:
        r5 = (org.w3c.dom.svg.SVGPathSegLinetoAbs) $r2;

        $f48 = interfaceinvoke r5.<org.w3c.dom.svg.SVGPathSegLinetoAbs: float getX()>();

        $f49 = interfaceinvoke r5.<org.w3c.dom.svg.SVGPathSegLinetoAbs: float getY()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void linetoAbs(float,float)>($f48, $f49);

        goto label21;

     label06:
        r6 = (org.w3c.dom.svg.SVGPathSegLinetoRel) $r2;

        $f46 = interfaceinvoke r6.<org.w3c.dom.svg.SVGPathSegLinetoRel: float getX()>();

        $f47 = interfaceinvoke r6.<org.w3c.dom.svg.SVGPathSegLinetoRel: float getY()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void linetoRel(float,float)>($f46, $f47);

        goto label21;

     label07:
        r7 = (org.w3c.dom.svg.SVGPathSegCurvetoCubicAbs) $r2;

        $f40 = interfaceinvoke r7.<org.w3c.dom.svg.SVGPathSegCurvetoCubicAbs: float getX1()>();

        $f41 = interfaceinvoke r7.<org.w3c.dom.svg.SVGPathSegCurvetoCubicAbs: float getY1()>();

        $f42 = interfaceinvoke r7.<org.w3c.dom.svg.SVGPathSegCurvetoCubicAbs: float getX2()>();

        $f43 = interfaceinvoke r7.<org.w3c.dom.svg.SVGPathSegCurvetoCubicAbs: float getY2()>();

        $f44 = interfaceinvoke r7.<org.w3c.dom.svg.SVGPathSegCurvetoCubicAbs: float getX()>();

        $f45 = interfaceinvoke r7.<org.w3c.dom.svg.SVGPathSegCurvetoCubicAbs: float getY()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void curvetoCubicAbs(float,float,float,float,float,float)>($f40, $f41, $f42, $f43, $f44, $f45);

        goto label21;

     label08:
        r8 = (org.w3c.dom.svg.SVGPathSegCurvetoCubicRel) $r2;

        $f34 = interfaceinvoke r8.<org.w3c.dom.svg.SVGPathSegCurvetoCubicRel: float getX1()>();

        $f35 = interfaceinvoke r8.<org.w3c.dom.svg.SVGPathSegCurvetoCubicRel: float getY1()>();

        $f36 = interfaceinvoke r8.<org.w3c.dom.svg.SVGPathSegCurvetoCubicRel: float getX2()>();

        $f37 = interfaceinvoke r8.<org.w3c.dom.svg.SVGPathSegCurvetoCubicRel: float getY2()>();

        $f38 = interfaceinvoke r8.<org.w3c.dom.svg.SVGPathSegCurvetoCubicRel: float getX()>();

        $f39 = interfaceinvoke r8.<org.w3c.dom.svg.SVGPathSegCurvetoCubicRel: float getY()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void curvetoCubicRel(float,float,float,float,float,float)>($f34, $f35, $f36, $f37, $f38, $f39);

        goto label21;

     label09:
        r9 = (org.w3c.dom.svg.SVGPathSegCurvetoQuadraticAbs) $r2;

        $f30 = interfaceinvoke r9.<org.w3c.dom.svg.SVGPathSegCurvetoQuadraticAbs: float getX1()>();

        $f31 = interfaceinvoke r9.<org.w3c.dom.svg.SVGPathSegCurvetoQuadraticAbs: float getY1()>();

        $f32 = interfaceinvoke r9.<org.w3c.dom.svg.SVGPathSegCurvetoQuadraticAbs: float getX()>();

        $f33 = interfaceinvoke r9.<org.w3c.dom.svg.SVGPathSegCurvetoQuadraticAbs: float getY()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void curvetoQuadraticAbs(float,float,float,float)>($f30, $f31, $f32, $f33);

        goto label21;

     label10:
        r10 = (org.w3c.dom.svg.SVGPathSegCurvetoQuadraticRel) $r2;

        $f26 = interfaceinvoke r10.<org.w3c.dom.svg.SVGPathSegCurvetoQuadraticRel: float getX1()>();

        $f27 = interfaceinvoke r10.<org.w3c.dom.svg.SVGPathSegCurvetoQuadraticRel: float getY1()>();

        $f28 = interfaceinvoke r10.<org.w3c.dom.svg.SVGPathSegCurvetoQuadraticRel: float getX()>();

        $f29 = interfaceinvoke r10.<org.w3c.dom.svg.SVGPathSegCurvetoQuadraticRel: float getY()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void curvetoQuadraticRel(float,float,float,float)>($f26, $f27, $f28, $f29);

        goto label21;

     label11:
        r11 = (org.w3c.dom.svg.SVGPathSegArcAbs) $r2;

        $f21 = interfaceinvoke r11.<org.w3c.dom.svg.SVGPathSegArcAbs: float getR1()>();

        $f22 = interfaceinvoke r11.<org.w3c.dom.svg.SVGPathSegArcAbs: float getR2()>();

        $f23 = interfaceinvoke r11.<org.w3c.dom.svg.SVGPathSegArcAbs: float getAngle()>();

        $z2 = interfaceinvoke r11.<org.w3c.dom.svg.SVGPathSegArcAbs: boolean getLargeArcFlag()>();

        $z3 = interfaceinvoke r11.<org.w3c.dom.svg.SVGPathSegArcAbs: boolean getSweepFlag()>();

        $f24 = interfaceinvoke r11.<org.w3c.dom.svg.SVGPathSegArcAbs: float getX()>();

        $f25 = interfaceinvoke r11.<org.w3c.dom.svg.SVGPathSegArcAbs: float getY()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void arcAbs(float,float,float,boolean,boolean,float,float)>($f21, $f22, $f23, $z2, $z3, $f24, $f25);

        goto label21;

     label12:
        r12 = (org.w3c.dom.svg.SVGPathSegArcRel) $r2;

        $f16 = interfaceinvoke r12.<org.w3c.dom.svg.SVGPathSegArcRel: float getR1()>();

        $f17 = interfaceinvoke r12.<org.w3c.dom.svg.SVGPathSegArcRel: float getR2()>();

        $f18 = interfaceinvoke r12.<org.w3c.dom.svg.SVGPathSegArcRel: float getAngle()>();

        $z0 = interfaceinvoke r12.<org.w3c.dom.svg.SVGPathSegArcRel: boolean getLargeArcFlag()>();

        $z1 = interfaceinvoke r12.<org.w3c.dom.svg.SVGPathSegArcRel: boolean getSweepFlag()>();

        $f19 = interfaceinvoke r12.<org.w3c.dom.svg.SVGPathSegArcRel: float getX()>();

        $f20 = interfaceinvoke r12.<org.w3c.dom.svg.SVGPathSegArcRel: float getY()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void arcRel(float,float,float,boolean,boolean,float,float)>($f16, $f17, $f18, $z0, $z1, $f19, $f20);

        goto label21;

     label13:
        r13 = (org.w3c.dom.svg.SVGPathSegLinetoHorizontalAbs) $r2;

        $f15 = interfaceinvoke r13.<org.w3c.dom.svg.SVGPathSegLinetoHorizontalAbs: float getX()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void linetoHorizontalAbs(float)>($f15);

        goto label21;

     label14:
        r14 = (org.w3c.dom.svg.SVGPathSegLinetoHorizontalRel) $r2;

        $f14 = interfaceinvoke r14.<org.w3c.dom.svg.SVGPathSegLinetoHorizontalRel: float getX()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void linetoHorizontalRel(float)>($f14);

        goto label21;

     label15:
        r15 = (org.w3c.dom.svg.SVGPathSegLinetoVerticalAbs) $r2;

        $f13 = interfaceinvoke r15.<org.w3c.dom.svg.SVGPathSegLinetoVerticalAbs: float getY()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void linetoVerticalAbs(float)>($f13);

        goto label21;

     label16:
        r16 = (org.w3c.dom.svg.SVGPathSegLinetoVerticalRel) $r2;

        $f12 = interfaceinvoke r16.<org.w3c.dom.svg.SVGPathSegLinetoVerticalRel: float getY()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void linetoVerticalRel(float)>($f12);

        goto label21;

     label17:
        r17 = (org.w3c.dom.svg.SVGPathSegCurvetoCubicSmoothAbs) $r2;

        $f8 = interfaceinvoke r17.<org.w3c.dom.svg.SVGPathSegCurvetoCubicSmoothAbs: float getX2()>();

        $f9 = interfaceinvoke r17.<org.w3c.dom.svg.SVGPathSegCurvetoCubicSmoothAbs: float getY2()>();

        $f10 = interfaceinvoke r17.<org.w3c.dom.svg.SVGPathSegCurvetoCubicSmoothAbs: float getX()>();

        $f11 = interfaceinvoke r17.<org.w3c.dom.svg.SVGPathSegCurvetoCubicSmoothAbs: float getY()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void curvetoCubicSmoothAbs(float,float,float,float)>($f8, $f9, $f10, $f11);

        goto label21;

     label18:
        r18 = (org.w3c.dom.svg.SVGPathSegCurvetoCubicSmoothRel) $r2;

        $f4 = interfaceinvoke r18.<org.w3c.dom.svg.SVGPathSegCurvetoCubicSmoothRel: float getX2()>();

        $f5 = interfaceinvoke r18.<org.w3c.dom.svg.SVGPathSegCurvetoCubicSmoothRel: float getY2()>();

        $f6 = interfaceinvoke r18.<org.w3c.dom.svg.SVGPathSegCurvetoCubicSmoothRel: float getX()>();

        $f7 = interfaceinvoke r18.<org.w3c.dom.svg.SVGPathSegCurvetoCubicSmoothRel: float getY()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void curvetoCubicSmoothRel(float,float,float,float)>($f4, $f5, $f6, $f7);

        goto label21;

     label19:
        r19 = (org.w3c.dom.svg.SVGPathSegCurvetoQuadraticSmoothAbs) $r2;

        $f2 = interfaceinvoke r19.<org.w3c.dom.svg.SVGPathSegCurvetoQuadraticSmoothAbs: float getX()>();

        $f3 = interfaceinvoke r19.<org.w3c.dom.svg.SVGPathSegCurvetoQuadraticSmoothAbs: float getY()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void curvetoQuadraticSmoothAbs(float,float)>($f2, $f3);

        goto label21;

     label20:
        r20 = (org.w3c.dom.svg.SVGPathSegCurvetoQuadraticSmoothRel) $r2;

        $f0 = interfaceinvoke r20.<org.w3c.dom.svg.SVGPathSegCurvetoQuadraticSmoothRel: float getX()>();

        $f1 = interfaceinvoke r20.<org.w3c.dom.svg.SVGPathSegCurvetoQuadraticSmoothRel: float getY()>();

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void curvetoQuadraticSmoothRel(float,float)>($f0, $f1);

        goto label21;

     label21:
        i2 = i2 + 1;

     label22:
        if i2 < $i0 goto label01;

        interfaceinvoke r1.<org.apache.batik.parser.PathHandler: void endPath()>();

        return;
    }
}
