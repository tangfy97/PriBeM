public class com.hp.hpl.jena.datatypes.xsd.XSDDateTime extends com.hp.hpl.jena.datatypes.xsd.AbstractDateTime
{
    public static final short YEAR_MASK;
    public static final short MONTH_MASK;
    public static final short DAY_MASK;
    public static final short TIME_MASK;
    public static final short FULL_MASK;
    protected short mask;

    public void <init>(java.lang.Object, int)
    {
        short $s1;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r0;
        int i0;
        java.lang.Object r1;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        specialinvoke r0.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: void <init>(java.lang.Object)>(r1);

        $s1 = (short) i0;

        r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask> = $s1;

        return;
    }

    public void <init>(java.util.Calendar)
    {
        java.util.Calendar r1;
        int[] $r2;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r0;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        r1 := @parameter0: java.util.Calendar;

        $r2 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] convertCalendar(java.util.Calendar)>(r1);

        specialinvoke r0.<com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: void <init>(java.lang.Object)>($r2);

        r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask> = 15;

        return;
    }

    public com.hp.hpl.jena.datatypes.xsd.XSDDatatype getNarrowedDatatype()
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        short $s0;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r0;
        int $i1;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        $s0 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask>;

        $i1 = (int) $s0;

        tableswitch($i1)
        {
            case 1: goto label4;
            case 2: goto label2;
            case 3: goto label6;
            case 4: goto label3;
            case 5: goto label8;
            case 6: goto label5;
            case 7: goto label7;
            case 8: goto label1;
            default: goto label8;
        };

     label1:
        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDtime>;

        return $r1;

     label2:
        $r6 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgMonth>;

        return $r6;

     label3:
        $r4 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgDay>;

        return $r4;

     label4:
        $r7 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgYear>;

        return $r7;

     label5:
        $r3 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgMonthDay>;

        return $r3;

     label6:
        $r5 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgYearMonth>;

        return $r5;

     label7:
        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdate>;

        return $r2;

     label8:
        $r8 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdateTime>;

        return $r8;
    }

    public void narrowType(com.hp.hpl.jena.datatypes.xsd.XSDDatatype)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r8 := @this: com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        r0 := @parameter0: com.hp.hpl.jena.datatypes.xsd.XSDDatatype;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDtime>;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        r8.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask> = 8;

        goto label7;

     label1:
        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgMonth>;

        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        r8.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask> = 2;

        goto label7;

     label2:
        $r3 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgDay>;

        $z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label3;

        r8.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask> = 4;

        goto label7;

     label3:
        $r4 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgYear>;

        $z3 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z3 == 0 goto label4;

        r8.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask> = 1;

        goto label7;

     label4:
        $r5 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgMonthDay>;

        $z4 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z4 == 0 goto label5;

        r8.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask> = 6;

        goto label7;

     label5:
        $r6 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgYearMonth>;

        $z5 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z5 == 0 goto label6;

        r8.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask> = 3;

        goto label7;

     label6:
        $r7 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdate>;

        $z6 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z6 == 0 goto label7;

        r8.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask> = 7;

     label7:
        return;
    }

    private static int[] convertCalendar(java.util.Calendar)
    {
        java.util.Calendar r1, r3;
        int[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.util.TimeZone $r4;
        java.lang.Object $r2;

        r1 := @parameter0: java.util.Calendar;

        r0 = newarray (int)[9];

        $r2 = virtualinvoke r1.<java.util.Calendar: java.lang.Object clone()>();

        r3 = (java.util.Calendar) $r2;

        virtualinvoke r3.<java.util.Calendar: int get(int)>(15);

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke r3.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r4);

        $i0 = virtualinvoke r3.<java.util.Calendar: int get(int)>(1);

        r0[0] = $i0;

        $i1 = virtualinvoke r3.<java.util.Calendar: int get(int)>(2);

        $i2 = $i1 + 1;

        r0[1] = $i2;

        $i3 = virtualinvoke r3.<java.util.Calendar: int get(int)>(5);

        r0[2] = $i3;

        $i4 = virtualinvoke r3.<java.util.Calendar: int get(int)>(11);

        r0[3] = $i4;

        $i5 = virtualinvoke r3.<java.util.Calendar: int get(int)>(12);

        r0[4] = $i5;

        $i6 = virtualinvoke r3.<java.util.Calendar: int get(int)>(13);

        r0[5] = $i6;

        r0[7] = 90;

        $i7 = virtualinvoke r3.<java.util.Calendar: int get(int)>(14);

        if $i7 != 0 goto label1;

        r0[6] = 0;

        r0[8] = 0;

        goto label4;

     label1:
        $i8 = $i7 % 100;

        if $i8 != 0 goto label2;

        $i11 = $i7 / 100;

        r0[6] = $i11;

        r0[8] = 1;

        goto label4;

     label2:
        $i9 = $i7 % 10;

        if $i9 != 0 goto label3;

        $i10 = $i7 / 10;

        r0[6] = $i10;

        r0[8] = 2;

        goto label4;

     label3:
        r0[6] = $i7;

        r0[8] = 3;

     label4:
        return r0;
    }

    public java.util.Calendar asCalendar() throws com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException
    {
        long $l8;
        int[] $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        double $d0, $d1;
        java.util.GregorianCalendar $r2;
        java.util.TimeZone $r9;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        $r1 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i0 = $r1[7];

        if $i0 != 90 goto label1;

        $r9 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        goto label2;

     label1:
        $r9 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

     label2:
        $r2 = new java.util.GregorianCalendar;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r9);

        $r3 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i7 = $r3[0];

        $r4 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i1 = $r4[1];

        $i6 = $i1 - 1;

        $r5 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i5 = $r5[2];

        $r6 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i4 = $r6[3];

        $r7 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i3 = $r7[4];

        $r8 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i2 = $r8[5];

        virtualinvoke $r2.<java.util.Calendar: void set(int,int,int,int,int,int)>($i7, $i6, $i5, $i4, $i3, $i2);

        $d0 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: double fractionalSeconds>;

        $d1 = 1000.0 * $d0;

        $l8 = staticinvoke <java.lang.Math: long round(double)>($d1);

        $i9 = (int) $l8;

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(14, $i9);

        return $r2;
    }

    public int getYears() throws com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException
    {
        short $s0, $s1;
        int[] $r1;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r0;
        com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException $r2;
        int $i2;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        $s0 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask>;

        $s1 = $s0 & 1;

        if $s1 != 0 goto label1;

        $r2 = new com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException;

        specialinvoke $r2.<com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException: void <init>(java.lang.String)>("Year not available");

        throw $r2;

     label1:
        $r1 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i2 = $r1[0];

        return $i2;
    }

    public int getMonths() throws com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException
    {
        short $s0, $s1;
        int[] $r1;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r0;
        com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException $r2;
        int $i2;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        $s0 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask>;

        $s1 = $s0 & 2;

        if $s1 != 0 goto label1;

        $r2 = new com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException;

        specialinvoke $r2.<com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException: void <init>(java.lang.String)>("Month not available");

        throw $r2;

     label1:
        $r1 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i2 = $r1[1];

        return $i2;
    }

    public int getDays() throws com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException
    {
        short $s0, $s1;
        int[] $r1;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r0;
        com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException $r2;
        int $i2;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        $s0 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask>;

        $s1 = $s0 & 4;

        if $s1 != 0 goto label1;

        $r2 = new com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException;

        specialinvoke $r2.<com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException: void <init>(java.lang.String)>("Day not available");

        throw $r2;

     label1:
        $r1 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i2 = $r1[2];

        return $i2;
    }

    public int getHours() throws com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException
    {
        short $s0, $s1;
        int[] $r1;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r0;
        com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException $r2;
        int $i2;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        $s0 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask>;

        $s1 = $s0 & 8;

        if $s1 != 0 goto label1;

        $r2 = new com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException;

        specialinvoke $r2.<com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException: void <init>(java.lang.String)>("Time not available");

        throw $r2;

     label1:
        $r1 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i2 = $r1[3];

        return $i2;
    }

    public int getMinutes() throws com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException
    {
        short $s0, $s1;
        int[] $r1;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r0;
        com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException $r2;
        int $i2;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        $s0 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask>;

        $s1 = $s0 & 8;

        if $s1 != 0 goto label1;

        $r2 = new com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException;

        specialinvoke $r2.<com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException: void <init>(java.lang.String)>("Time not available");

        throw $r2;

     label1:
        $r1 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i2 = $r1[4];

        return $i2;
    }

    public int getFullSeconds() throws com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException
    {
        short $s0, $s1;
        int[] $r1;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r0;
        com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException $r2;
        int $i2;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        $s0 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask>;

        $s1 = $s0 & 8;

        if $s1 != 0 goto label1;

        $r2 = new com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException;

        specialinvoke $r2.<com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException: void <init>(java.lang.String)>("Time not available");

        throw $r2;

     label1:
        $r1 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i2 = $r1[5];

        return $i2;
    }

    public double getSeconds() throws com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException
    {
        com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException $r2;
        short $s0, $s1;
        int[] $r1;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r0;
        int $i2;
        double $d0, $d1, $d2;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        $s0 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask>;

        $s1 = $s0 & 8;

        if $s1 != 0 goto label1;

        $r2 = new com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException;

        specialinvoke $r2.<com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException: void <init>(java.lang.String)>("Time not available");

        throw $r2;

     label1:
        $r1 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i2 = $r1[5];

        $d1 = (double) $i2;

        $d0 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: double fractionalSeconds>;

        $d2 = $d1 + $d0;

        return $d2;
    }

    public double getTimePart() throws com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException
    {
        long $l3, $l5, $l6, $l7, $l8;
        short $s0, $s1;
        int[] $r1, $r2;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r0;
        int $i2, $i4;
        double $d0, $d1, $d2;
        com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException $r3;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        $s0 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask>;

        $s1 = $s0 & 8;

        if $s1 != 0 goto label1;

        $r3 = new com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException;

        specialinvoke $r3.<com.hp.hpl.jena.datatypes.xsd.IllegalDateTimeFieldException: void <init>(java.lang.String)>("Time not available");

        throw $r3;

     label1:
        $r1 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i2 = $r1[3];

        $l3 = (long) $i2;

        $l6 = $l3 * 60L;

        $r2 = r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i4 = $r2[4];

        $l5 = (long) $i4;

        $l7 = $l6 + $l5;

        $l8 = $l7 * 60L;

        $d0 = (double) $l8;

        $d1 = virtualinvoke r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: double getSeconds()>();

        $d2 = $d0 + $d1;

        return $d2;
    }

    public java.lang.String toString()
    {
        short $s0, $s1, $s2, $s3, $s5, $s6, $s7, $s8, $s9, $s15, $s16;
        int[] $r2, $r5, $r6, $r7, $r8, $r9;
        java.lang.StringBuffer $r10;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r1;
        int $i4, $i10, $i11, $i12, $i13, $i14, $i17;
        java.lang.String $r3, $r4;

        r1 := @this: com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $s0 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask>;

        $s1 = $s0 & 1;

        if $s1 == 0 goto label01;

        $r9 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i14 = $r9[0];

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i14);

        goto label02;

     label01:
        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

     label02:
        $s2 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask>;

        $s3 = $s2 & 6;

        if $s3 == 0 goto label08;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        $s5 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask>;

        $s6 = $s5 & 2;

        if $s6 == 0 goto label04;

        $r7 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i12 = $r7[1];

        if $i12 > 9 goto label03;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

     label03:
        $r8 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i13 = $r8[1];

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i13);

        goto label05;

     label04:
        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

     label05:
        $s7 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask>;

        $s8 = $s7 & 4;

        if $s8 == 0 goto label08;

        $s9 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask>;

        $i17 = (int) $s9;

        if $i17 == 4 goto label06;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

     label06:
        $r5 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i10 = $r5[2];

        if $i10 > 9 goto label07;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

     label07:
        $r6 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i11 = $r6[2];

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i11);

     label08:
        $s15 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short mask>;

        $s16 = $s15 & 8;

        if $s16 == 0 goto label09;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("T");

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: java.lang.String timeLexicalForm()>();

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label09:
        $r2 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i4 = $r2[7];

        if $i4 == 0 goto label10;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Z");

     label10:
        $r3 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.String timeLexicalForm()
    {
        int[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11;
        java.lang.StringBuffer $r0;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r9;

        r1 := @this: com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i0 = $r2[3];

        if $i0 >= 10 goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

     label1:
        $r3 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i1 = $r3[3];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r4 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i2 = $r4[4];

        if $i2 >= 10 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

     label2:
        $r5 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i3 = $r5[4];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r6 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i4 = $r6[5];

        if $i4 >= 10 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

     label3:
        $r7 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i5 = $r7[5];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r8 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i6 = $r8[6];

        if $i6 == 0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r10 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i8 = $r10[6];

        $r11 = r1.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: int[] data>;

        $i7 = $r11[8];

        staticinvoke <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: void appendFractionalTime(java.lang.StringBuffer,int,int)>($r0, $i8, $i7);

     label4:
        $r9 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short FULL_MASK> = 15;

        <com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short TIME_MASK> = 8;

        <com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short DAY_MASK> = 4;

        <com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short MONTH_MASK> = 2;

        <com.hp.hpl.jena.datatypes.xsd.XSDDateTime: short YEAR_MASK> = 1;

        return;
    }
}
