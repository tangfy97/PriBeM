class org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1 extends groovy.lang.Closure implements org.codehaus.groovy.runtime.GeneratedClosure
{
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$groovy$util$XmlParser;
    static java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar;

    public void <init>(java.lang.Object, java.lang.Object)
    {
        java.lang.Class $r0, $r1, $r5, $r6;
        java.lang.Object r3, r4;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1 r2;

        r2 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1;

        r3 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r0 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r5 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$0> = $r5;

        goto label2;

     label1:
        $r5 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$0>;

     label2:
        $r1 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r6 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$groovy$lang$MetaClass> = $r6;

        goto label4;

     label3:
        $r6 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        specialinvoke r2.<groovy.lang.Closure: void <init>(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    public java.lang.Object doCall(java.lang.Object)
    {
        java.lang.Object[] $r19, $r27;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2 $r28;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1 r7;
        groovy.lang.Reference $r1;
        java.lang.Object r0, $r18, $r20, $r21, $r26, $r29, $r30;
        java.lang.Class $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r22, $r23, $r24, $r25;

        r7 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1;

        r0 := @parameter0: java.lang.Object;

        $r1 = new groovy.lang.Reference;

        specialinvoke $r1.<groovy.lang.Reference: void <init>(java.lang.Object)>(r0);

        $r2 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$0>;

        if $r2 != null goto label01;

        $r11 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$0> = $r11;

        goto label02;

     label01:
        $r11 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$0>;

     label02:
        $r3 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$groovy$lang$MetaClass>;

        if $r3 != null goto label03;

        $r12 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$groovy$lang$MetaClass> = $r12;

        goto label04;

     label03:
        $r12 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r4 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

        if $r4 != null goto label05;

        $r10 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        $r13 = $r10;

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar> = $r10;

        goto label06;

     label05:
        $r13 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

     label06:
        $r5 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

        if $r5 != null goto label07;

        $r9 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        $r14 = $r9;

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar> = $r9;

        goto label08;

     label07:
        $r14 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

     label08:
        $r15 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$groovy$util$XmlParser>;

        if $r15 != null goto label09;

        $r16 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$(java.lang.String)>("groovy.util.XmlParser");

        $r17 = $r16;

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$groovy$util$XmlParser> = $r16;

        goto label10;

     label09:
        $r17 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$groovy$util$XmlParser>;

     label10:
        $r18 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNew0(java.lang.Class,java.lang.Class)>($r14, $r17);

        $r19 = newarray (java.lang.Object)[1];

        $r20 = virtualinvoke $r1.<groovy.lang.Reference: java.lang.Object get()>();

        $r19[0] = $r20;

        $r21 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>($r13, $r18, "parse", $r19);

        $r22 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

        if $r22 != null goto label11;

        $r8 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        $r23 = $r8;

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar> = $r8;

        goto label12;

     label11:
        $r23 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

     label12:
        $r6 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

        if $r6 != null goto label13;

        $r24 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        $r25 = $r24;

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar> = $r24;

        goto label14;

     label13:
        $r25 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: java.lang.Class class$org$codehaus$groovy$tools$shell$util$XmlCommandRegistrar>;

     label14:
        $r26 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>($r25, $r21, "command");

        $r27 = newarray (java.lang.Object)[1];

        $r28 = new org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2;

        $r29 = virtualinvoke r7.<groovy.lang.Closure: java.lang.Object getThisObject()>();

        specialinvoke $r28.<org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1_closure2: void <init>(java.lang.Object,java.lang.Object)>(r7, $r29);

        $r27[0] = $r28;

        $r30 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>($r23, $r26, "each", $r27);

        return $r30;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
