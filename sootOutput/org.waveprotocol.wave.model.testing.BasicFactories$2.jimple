final class org.waveprotocol.wave.model.testing.BasicFactories$2 extends java.lang.Object implements org.waveprotocol.wave.model.document.util.DocumentProvider
{

    void <init>()
    {
        org.waveprotocol.wave.model.testing.BasicFactories$2 r0;

        r0 := @this: org.waveprotocol.wave.model.testing.BasicFactories$2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument create(java.lang.String, java.util.Map)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r4;
        org.waveprotocol.wave.model.document.indexed.IndexedDocProvider $r3;
        java.util.Map r2;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r5;
        java.lang.String r1;
        org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument $r6;
        org.waveprotocol.wave.model.testing.BasicFactories$2 r0;

        r0 := @this: org.waveprotocol.wave.model.testing.BasicFactories$2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r3 = <org.waveprotocol.wave.model.document.util.DocProviders: org.waveprotocol.wave.model.document.indexed.IndexedDocProvider POJO>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocProvider: org.waveprotocol.wave.model.document.indexed.IndexedDocument create(java.lang.String,java.util.Map)>(r1, r2);

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.testing.BasicFactories$2: org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument build(org.waveprotocol.wave.model.document.operation.DocInitialization)>($r5);

        return $r6;
    }

    public org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument parse(java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocProvider $r2;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r4;
        java.lang.String r1;
        org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument $r5;
        org.waveprotocol.wave.model.testing.BasicFactories$2 r0;

        r0 := @this: org.waveprotocol.wave.model.testing.BasicFactories$2;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.waveprotocol.wave.model.document.util.DocProviders: org.waveprotocol.wave.model.document.indexed.IndexedDocProvider POJO>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocProvider: org.waveprotocol.wave.model.document.indexed.IndexedDocument parse(java.lang.String)>(r1);

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.testing.BasicFactories$2: org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument build(org.waveprotocol.wave.model.document.operation.DocInitialization)>($r4);

        return $r5;
    }

    private org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument build(org.waveprotocol.wave.model.document.operation.DocInitialization)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r2;
        org.waveprotocol.wave.model.document.operation.DocInitialization r1;
        org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument $r0;
        org.waveprotocol.wave.model.testing.BasicFactories$2 r4;

        r4 := @this: org.waveprotocol.wave.model.testing.BasicFactories$2;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocInitialization;

        $r0 = new org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument;

        $r2 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema NO_SCHEMA_CONSTRAINTS>;

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,org.waveprotocol.wave.model.document.operation.DocInitialization)>($r2, r1);

        $r3 = <org.waveprotocol.wave.model.operation.SilentOperationSink: org.waveprotocol.wave.model.operation.SilentOperationSink VOID>;

        virtualinvoke $r0.<org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument: void init(org.waveprotocol.wave.model.operation.SilentOperationSink)>($r3);

        return $r0;
    }

    public volatile java.lang.Object parse(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument $r2;
        org.waveprotocol.wave.model.testing.BasicFactories$2 r0;

        r0 := @this: org.waveprotocol.wave.model.testing.BasicFactories$2;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.BasicFactories$2: org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument parse(java.lang.String)>(r1);

        return $r2;
    }

    public volatile java.lang.Object create(java.lang.String, java.util.Map)
    {
        java.util.Map r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument $r3;
        org.waveprotocol.wave.model.testing.BasicFactories$2 r0;

        r0 := @this: org.waveprotocol.wave.model.testing.BasicFactories$2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.BasicFactories$2: org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument create(java.lang.String,java.util.Map)>(r1, r2);

        return $r3;
    }
}
