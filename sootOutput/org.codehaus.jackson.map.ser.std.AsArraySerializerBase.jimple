public abstract class org.codehaus.jackson.map.ser.std.AsArraySerializerBase extends org.codehaus.jackson.map.ser.std.ContainerSerializerBase implements org.codehaus.jackson.map.ResolvableSerializer
{
    protected final boolean _staticTyping;
    protected final org.codehaus.jackson.type.JavaType _elementType;
    protected final org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer;
    protected org.codehaus.jackson.map.JsonSerializer _elementSerializer;
    protected final org.codehaus.jackson.map.BeanProperty _property;
    protected org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers;

    protected void <init>(java.lang.Class, org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.std.AsArraySerializerBase r0;
        org.codehaus.jackson.map.TypeSerializer r3;
        org.codehaus.jackson.type.JavaType r2;
        java.lang.Class r1;
        org.codehaus.jackson.map.BeanProperty r4;
        boolean z0;

        r0 := @this: org.codehaus.jackson.map.ser.std.AsArraySerializerBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        z0 := @parameter2: boolean;

        r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        r4 := @parameter4: org.codehaus.jackson.map.BeanProperty;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>(r1, r2, z0, r3, r4, null);

        return;
    }

    protected void <init>(java.lang.Class, org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.std.AsArraySerializerBase r0;
        org.codehaus.jackson.map.JsonSerializer r5;
        org.codehaus.jackson.map.BeanProperty r4;
        org.codehaus.jackson.map.TypeSerializer r3;
        org.codehaus.jackson.type.JavaType r2;
        java.lang.Class r1;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap $r6;
        boolean z0, $z1, $z2;

        r0 := @this: org.codehaus.jackson.map.ser.std.AsArraySerializerBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        z0 := @parameter2: boolean;

        r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        r4 := @parameter4: org.codehaus.jackson.map.BeanProperty;

        r5 := @parameter5: org.codehaus.jackson.map.JsonSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.ContainerSerializerBase: void <init>(java.lang.Class,boolean)>(r1, 0);

        r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.type.JavaType _elementType> = r2;

        if z0 != 0 goto label1;

        if r2 == null goto label2;

        $z1 = virtualinvoke r2.<org.codehaus.jackson.type.JavaType: boolean isFinal()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: boolean _staticTyping> = $z2;

        r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer> = r3;

        r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.map.BeanProperty _property> = r4;

        r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.map.JsonSerializer _elementSerializer> = r5;

        $r6 = staticinvoke <org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap emptyMap()>();

        r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers> = $r6;

        return;
    }

    public final void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.std.AsArraySerializerBase r1;
        org.codehaus.jackson.JsonGenerator r0;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Object r2;

        r1 := @this: org.codehaus.jackson.map.ser.std.AsArraySerializerBase;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeStartArray()>();

        virtualinvoke r1.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: void serializeContents(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r2, r0, r3);

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeEndArray()>();

        return;
    }

    public final void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.std.AsArraySerializerBase r3;
        org.codehaus.jackson.map.TypeSerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.SerializerProvider r4;
        java.lang.Object r1;

        r3 := @this: org.codehaus.jackson.map.ser.std.AsArraySerializerBase;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r4 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r0 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForArray(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        virtualinvoke r3.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: void serializeContents(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r1, r2, r4);

        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForArray(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        return;
    }

    protected abstract void serializeContents(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.std.AsArraySerializerBase r0;
        org.codehaus.jackson.map.SerializerProvider r4;
        org.codehaus.jackson.JsonNode r15;
        org.codehaus.jackson.schema.SchemaAware $r7;
        int $i0;
        org.codehaus.jackson.type.JavaType $r8, $r9, $r10, r14;
        org.codehaus.jackson.node.ObjectNode $r1;
        boolean $z0, $z1;
        org.codehaus.jackson.map.JsonSerializer $r6;
        org.codehaus.jackson.map.BeanProperty $r5;
        java.lang.reflect.ParameterizedType $r11;
        java.lang.reflect.Type r2, $r13;
        java.lang.reflect.Type[] $r12;
        java.lang.Class $r3;

        r0 := @this: org.codehaus.jackson.map.ser.std.AsArraySerializerBase;

        r4 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r2 := @parameter1: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("array", 1);

        r14 = null;

        if r2 == null goto label1;

        $r9 = virtualinvoke r4.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>(r2);

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        r14 = $r10;

        if $r10 != null goto label1;

        $z1 = r2 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label1;

        $r11 = (java.lang.reflect.ParameterizedType) r2;

        $r12 = interfaceinvoke $r11.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i0 = lengthof $r12;

        if $i0 != 1 goto label1;

        $r13 = $r12[0];

        r14 = virtualinvoke r4.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r13);

     label1:
        if r14 != null goto label2;

        $r8 = r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.type.JavaType _elementType>;

        if $r8 == null goto label2;

        r14 = r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.type.JavaType _elementType>;

     label2:
        if r14 == null goto label5;

        r15 = null;

        $r3 = virtualinvoke r14.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r3 == class "Ljava/lang/Object;" goto label3;

        $r5 = r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.map.BeanProperty _property>;

        $r6 = virtualinvoke r4.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r14, $r5);

        $z0 = $r6 instanceof org.codehaus.jackson.schema.SchemaAware;

        if $z0 == 0 goto label3;

        $r7 = (org.codehaus.jackson.schema.SchemaAware) $r6;

        r15 = interfaceinvoke $r7.<org.codehaus.jackson.schema.SchemaAware: org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider,java.lang.reflect.Type)>(r4, null);

     label3:
        if r15 != null goto label4;

        r15 = staticinvoke <org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.JsonNode getDefaultSchemaNode()>();

     label4:
        virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("items", r15);

     label5:
        return $r1;
    }

    public void resolve(org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.std.AsArraySerializerBase r0;
        org.codehaus.jackson.map.SerializerProvider r3;
        org.codehaus.jackson.map.JsonSerializer $r2, $r6;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.type.JavaType $r1, $r5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.std.AsArraySerializerBase;

        r3 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $z0 = r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: boolean _staticTyping>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.type.JavaType _elementType>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.map.JsonSerializer _elementSerializer>;

        if $r2 != null goto label1;

        $r5 = r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.type.JavaType _elementType>;

        $r4 = r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.map.BeanProperty _property>;

        $r6 = virtualinvoke r3.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r5, $r4);

        r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.map.JsonSerializer _elementSerializer> = $r6;

     label1:
        return;
    }

    protected final org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap, java.lang.Class, org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.std.AsArraySerializerBase r3;
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.map.JsonSerializer $r7;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult $r5;
        java.lang.Class r1;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r0, $r6, $r8;

        r3 := @this: org.codehaus.jackson.map.ser.std.AsArraySerializerBase;

        r0 := @parameter0: org.codehaus.jackson.map.ser.impl.PropertySerializerMap;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = r3.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.map.BeanProperty _property>;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddSerializer(java.lang.Class,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.BeanProperty)>(r1, r2, $r4);

        $r6 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.ser.impl.PropertySerializerMap map>;

        if r0 == $r6 goto label1;

        $r8 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.ser.impl.PropertySerializerMap map>;

        r3.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers> = $r8;

     label1:
        $r7 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.JsonSerializer serializer>;

        return $r7;
    }

    protected final org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.std.AsArraySerializerBase r3;
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.map.JsonSerializer $r7;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult $r5;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r0, $r6, $r8;

        r3 := @this: org.codehaus.jackson.map.ser.std.AsArraySerializerBase;

        r0 := @parameter0: org.codehaus.jackson.map.ser.impl.PropertySerializerMap;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = r3.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.map.BeanProperty _property>;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.BeanProperty)>(r1, r2, $r4);

        $r6 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.ser.impl.PropertySerializerMap map>;

        if r0 == $r6 goto label1;

        $r8 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.ser.impl.PropertySerializerMap map>;

        r3.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers> = $r8;

     label1:
        $r7 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.JsonSerializer serializer>;

        return $r7;
    }
}
