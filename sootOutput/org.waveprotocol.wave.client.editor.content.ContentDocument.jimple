public class org.waveprotocol.wave.client.editor.content.ContentDocument extends java.lang.Object
{
    public static boolean validateLocalOps;
    public static boolean performExpensiveChecks;
    public static org.waveprotocol.wave.client.editor.content.ContentDocument$AnnotationImplFactory annotationFactory;
    private org.waveprotocol.wave.model.operation.SilentOperationSink outgoingOperationSink;
    private final org.waveprotocol.wave.model.operation.SilentOperationSink outgoingRepaintSink;
    private final org.waveprotocol.wave.model.document.operation.NindoSink$Silent nindoSink;
    private final org.waveprotocol.wave.model.document.operation.NindoSink$Silent dontSaveSelectionNindoSink;
    private final org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns renderingConcerns;
    private org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editingConcerns;
    private static int counter;
    private final java.lang.String documentUniqueString;
    private final org.waveprotocol.wave.model.util.StringMap nameMap;
    private final java.util.List nodesToRepaint;
    private final org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory factory;
    private final org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context;
    private boolean applyingToDocument;
    private com.google.gwt.dom.client.Element rootElement;
    private final org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent renderedContentView;
    private final org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc persistentContentView;
    private final org.waveprotocol.wave.client.editor.content.ContentDocument$FullContent fullContentView;
    private final org.waveprotocol.wave.client.editor.content.LazyPersistenceManager lazyPersistenceManager;
    private org.waveprotocol.wave.client.editor.impl.HtmlView rawHtmlView;
    private org.waveprotocol.wave.client.editor.impl.HtmlView strippingHtmlView;
    private org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml filteredHtmlView;
    private final org.waveprotocol.wave.client.editor.content.ContentDocument$LocalAnnotationSet localAnnotations;
    private org.waveprotocol.wave.client.editor.extract.Repairer repairer;
    private org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager;
    private final org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc;
    private final org.waveprotocol.wave.client.editor.operation.EditorOperationSequencer sequencer;
    private final org.waveprotocol.wave.client.editor.content.CMutableDocument mutableContent;
    private org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle editorPackage;
    private org.waveprotocol.wave.client.common.util.LogicalPanel logicalPanel;
    private final org.waveprotocol.wave.model.document.indexed.RawAnnotationSet fullAnnotationSet;
    private final org.waveprotocol.wave.client.editor.content.SelectionMaintainer selectionMaintainer;
    private final org.waveprotocol.wave.model.document.util.FilteredView selectionContent;
    private org.waveprotocol.wave.client.editor.content.Registries registries;
    private final org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate;
    private final org.waveprotocol.wave.client.editor.extract.RepairListener repairListener;
    private org.waveprotocol.wave.client.editor.content.ContentDocument$Level level;
    private boolean isConsistent;
    static final boolean $assertionsDisabled;

    private void setupBehaviour(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentDocument$Level)
    {
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry $r4;
        java.lang.StringBuilder $r32, $r33, $r34, $r35, $r36;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r24;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r1, $r23;
        java.lang.AssertionError $r19, $r31;
        org.waveprotocol.wave.client.editor.content.ContentElement r0, $r18, $r28;
        java.lang.String $r37;
        org.waveprotocol.wave.client.editor.content.Registries $r3;
        org.waveprotocol.wave.client.editor.content.ContentNode r45;
        org.waveprotocol.wave.client.editor.content.ContentDocument r2;
        int[] $r7, $r44;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z14, $z15, $z16, $z17, $z18, $z19, $z20;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument $r17, $r27;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r22;
        org.waveprotocol.wave.client.editor.content.Renderer $r40, $r41;
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.client.editor.content.ContentDocument$Level $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r20, $r21, $r25, $r26, $r30, r39, $r42, $r43, $r46;
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r16, $r29, $r38;

        r2 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r39 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentDocument$Level;

        r1 = (org.waveprotocol.wave.client.editor.content.AgentAdapter) r0;

        $r3 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.Registries registries>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.client.editor.ElementHandlerRegistry getElementHandlerRegistry()>();

        if r39 != null goto label02;

        $r38 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.client.editor.NodeMutationHandler getMutationHandler(org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers)>(r1);

        $z12 = $r38 instanceof org.waveprotocol.wave.client.editor.content.ContentDocument$PermanentMutationHandler;

        if $z12 == 0 goto label01;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void setNodeMutationHandler(org.waveprotocol.wave.client.editor.NodeMutationHandler)>($r38);

     label01:
        r39 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level SHELVED>;

     label02:
        $r40 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.Renderer getRenderer()>();

        $r41 = <org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.Renderer noRenderer>;

        if $r40 != $r41 goto label03;

        $z20 = 1;

        $z19 = 1;

        goto label04;

     label03:
        $z20 = 0;

        $z19 = 0;

     label04:
        z14 = $z20;

        $z0 = <org.waveprotocol.wave.client.editor.content.ContentDocument: boolean $assertionsDisabled>;

        if $z0 != 0 goto label07;

        $z11 = $z19;

        $r30 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level SHELVED>;

        if r39 != $r30 goto label05;

        $z15 = 1;

        goto label06;

     label05:
        $z15 = 0;

     label06:
        if $z11 == $z15 goto label07;

        $r31 = new java.lang.AssertionError;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("oldLevel: ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r39);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" notRendered:");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z14);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.AssertionError: void <init>(java.lang.Object)>($r37);

        throw $r31;

     label07:
        $r6 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level>;

        $r5 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level RENDERED>;

        $z1 = virtualinvoke $r6.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: boolean isAtLeast(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r5);

        $r7 = <org.waveprotocol.wave.client.editor.content.ContentDocument$8: int[] $SwitchMap$org$waveprotocol$wave$client$editor$content$ContentDocument$Level>;

        $i0 = virtualinvoke r39.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 1: goto label08;
            case 2: goto label11;
            case 3: goto label13;
            default: goto label15;
        };

     label08:
        $r26 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level>;

        $r25 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level SHELVED>;

        $z10 = virtualinvoke $r26.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: boolean isAtMost(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r25);

        if $z10 == 0 goto label09;

        goto label15;

     label09:
        specialinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setupRenderer(org.waveprotocol.wave.client.editor.content.AgentAdapter,boolean)>(r1, 1);

        $r27 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        $r28 = virtualinvoke $r27.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentElement getDocumentElement()>();

        if r1 != $r28 goto label10;

        virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: void initRootElementRendering(boolean)>(1);

     label10:
        $r29 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.client.editor.NodeMutationHandler getMutationHandler(org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers)>(r1);

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void setNodeMutationHandler(org.waveprotocol.wave.client.editor.NodeMutationHandler)>($r29);

     label11:
        $r42 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level>;

        $r43 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level RENDERED>;

        $z16 = virtualinvoke $r42.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: boolean isAtMost(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r43);

        if $z16 == 0 goto label12;

        goto label15;

     label12:
        $r24 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.client.editor.NodeEventHandler getEventHandler(org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers)>(r1);

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void setNodeEventHandler(org.waveprotocol.wave.client.editor.NodeEventHandler)>($r24);

        specialinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: void maybeSetupGwtWidget(org.waveprotocol.wave.client.editor.content.ContentElement)>(r1);

     label13:
        $r9 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level>;

        $r8 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level INTERACTIVE>;

        $z2 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: boolean isAtMost(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r8);

        if $z2 == 0 goto label14;

        goto label15;

     label14:
        specialinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: void maybeSetupModeNotifications(org.waveprotocol.wave.client.editor.content.ContentElement)>(r1);

     label15:
        $r44 = <org.waveprotocol.wave.client.editor.content.ContentDocument$8: int[] $SwitchMap$org$waveprotocol$wave$client$editor$content$ContentDocument$Level>;

        $i2 = virtualinvoke r39.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: int ordinal()>();

        $i3 = $r44[$i2];

        tableswitch($i3)
        {
            case 2: goto label19;
            case 3: goto label17;
            case 4: goto label16;
            default: goto label23;
        };

     label16:
        $r11 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level>;

        $r10 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level EDITING>;

        $z3 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: boolean isAtLeast(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r10);

        if $z3 == 0 goto label17;

        goto label23;

     label17:
        $r13 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level>;

        $r12 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level INTERACTIVE>;

        $z4 = virtualinvoke $r13.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: boolean isAtLeast(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r12);

        if $z4 == 0 goto label18;

        goto label23;

     label18:
        specialinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: void maybeSetupGwtWidget(org.waveprotocol.wave.client.editor.content.ContentElement)>(r1);

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void setNodeEventHandler(org.waveprotocol.wave.client.editor.NodeEventHandler)>(null);

     label19:
        $r15 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level>;

        $r14 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level RENDERED>;

        $z5 = virtualinvoke $r15.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: boolean isAtLeast(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r14);

        if $z5 == 0 goto label20;

        goto label23;

     label20:
        $r16 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.client.editor.NodeMutationHandler getMutationHandler(org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers)>(r1);

        $z6 = $r16 instanceof org.waveprotocol.wave.client.editor.content.ContentDocument$PermanentMutationHandler;

        if $z6 == 0 goto label21;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void setNodeMutationHandler(org.waveprotocol.wave.client.editor.NodeMutationHandler)>($r16);

        goto label22;

     label21:
        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void setNodeMutationHandler(org.waveprotocol.wave.client.editor.NodeMutationHandler)>(null);

     label22:
        specialinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setupRenderer(org.waveprotocol.wave.client.editor.content.AgentAdapter,boolean)>(r1, 0);

        $r17 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        $r18 = virtualinvoke $r17.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentElement getDocumentElement()>();

        if r1 != $r18 goto label23;

        virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: void initRootElementRendering(boolean)>(0);

     label23:
        r45 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

     label24:
        if r45 == null goto label27;

        $z9 = r45 instanceof org.waveprotocol.wave.client.editor.content.ContentElement;

        if $z9 == 0 goto label25;

        $r23 = (org.waveprotocol.wave.client.editor.content.AgentAdapter) r45;

        specialinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setupBehaviour(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r23, r39);

        goto label26;

     label25:
        $r22 = virtualinvoke r45.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentTextNode asText()>();

        virtualinvoke $r22.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void setRendering(boolean)>($z1);

     label26:
        r45 = virtualinvoke r45.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        goto label24;

     label27:
        if z14 == 0 goto label28;

        if $z1 == 0 goto label28;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void reInsertImpl()>();

     label28:
        $r46 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level RENDERED>;

        $z17 = virtualinvoke r39.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: boolean isAtLeast(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r46);

        if $z17 != 0 goto label29;

        $r21 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level>;

        $r20 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level RENDERED>;

        $z8 = virtualinvoke $r21.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: boolean isAtLeast(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r20);

        if $z8 == 0 goto label29;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void triggerChildrenReady()>();

     label29:
        $z18 = <org.waveprotocol.wave.client.editor.content.ContentDocument: boolean $assertionsDisabled>;

        if $z18 != 0 goto label30;

        $z7 = specialinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean checkHealthy(org.waveprotocol.wave.client.editor.content.ContentElement,boolean)>(r1, 0);

        if $z7 != 0 goto label30;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label30:
        return;
    }

    private void postCreation(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void maybeAddToNameMap(org.waveprotocol.wave.client.editor.content.ContentElement)>(r1);

        return;
    }

    private void maybeAddToNameMap(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.model.util.StringMap $r2;
        java.lang.String $r3;
        org.waveprotocol.wave.client.editor.content.ContentDocument r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: boolean hasName()>();

        if $z0 == 0 goto label1;

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.util.StringMap nameMap>;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getName()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r3, r0);

     label1:
        return;
    }

    private boolean checkHealthy(org.waveprotocol.wave.client.editor.content.ContentElement, boolean)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r32, r33;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.google.gwt.dom.client.Element $r7, $r17, $r18, $r20, $r22, $r27;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r25, $r26, $r29;
        java.lang.AssertionError $r10, $r21, $r24, $r31;
        org.waveprotocol.wave.client.editor.content.ContentElement r3, $r6;
        java.lang.String $r16, $r19, $r23, $r28, $r30;
        org.waveprotocol.wave.client.editor.content.ContentDocument$Level $r1, $r2;
        com.google.gwt.dom.client.Node $r4, $r5, $r8, $r9;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        z1 := @parameter1: boolean;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level>;

        $r1 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level RENDERED>;

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: boolean isAtLeast(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r1);

        if $z0 == 0 goto label6;

        $z4 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLocalParagraph(org.waveprotocol.wave.client.editor.content.ContentNode)>(r3);

        if $z4 == 0 goto label3;

        $r17 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        if $r17 != null goto label1;

        $r31 = new java.lang.AssertionError;

        specialinvoke $r31.<java.lang.AssertionError: void <init>(java.lang.Object)>("Local paragraphs have no impl nodelet?");

        throw $r31;

     label1:
        $r18 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r19 = virtualinvoke $r18.<com.google.gwt.dom.client.Element: java.lang.String getTagName()>();

        $z6 = virtualinvoke $r19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("div");

        if $z6 != 0 goto label2;

        $r22 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r23 = virtualinvoke $r22.<com.google.gwt.dom.client.Element: java.lang.String getTagName()>();

        $z7 = virtualinvoke $r23.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("li");

        if $z7 != 0 goto label2;

        $r24 = new java.lang.AssertionError;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Local paragraph impl nodelet is ");

        $r27 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r28 = virtualinvoke $r27.<com.google.gwt.dom.client.Element: java.lang.String getTagName()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.AssertionError: void <init>(java.lang.Object)>($r30);

        throw $r24;

     label2:
        $r20 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getContainerNodelet()>();

        if $r20 != null goto label3;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>(java.lang.Object)>("Local paragraphs have no container nodelet?");

        throw $r21;

     label3:
        $r7 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getContainerNodelet()>();

        if $r7 == null goto label6;

        r32 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

     label4:
        if r32 == null goto label6;

        $r8 = virtualinvoke r32.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        if $r8 == null goto label5;

        $r9 = virtualinvoke r32.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        $z5 = virtualinvoke $r9.<com.google.gwt.dom.client.Node: boolean hasParentElement()>();

        if $z5 != 0 goto label5;

        $r10 = new java.lang.AssertionError;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unattached impl nodelet for ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw $r10;

     label5:
        r32 = virtualinvoke r32.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        goto label4;

     label6:
        if z1 == 0 goto label9;

        r33 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

     label7:
        if r33 == null goto label9;

        $r4 = virtualinvoke r33.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        if $r4 == null goto label8;

        $r5 = virtualinvoke r33.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        $z2 = virtualinvoke $r5.<com.google.gwt.dom.client.Node: boolean hasParentElement()>();

        if $z2 != 0 goto label8;

        $z3 = virtualinvoke r33.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isElement()>();

        if $z3 == 0 goto label8;

        $r6 = virtualinvoke r33.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean checkHealthy(org.waveprotocol.wave.client.editor.content.ContentElement,boolean)>($r6, 1);

     label8:
        r33 = virtualinvoke r33.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        goto label7;

     label9:
        return 1;
    }

    private void maybeSetupGwtWidget(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.common.util.LogicalPanel $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument r1;
        boolean $z0;
        org.waveprotocol.wave.client.editor.gwt.HasGwtWidget $r3;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $z0 = r0 instanceof org.waveprotocol.wave.client.editor.gwt.HasGwtWidget;

        if $z0 == 0 goto label1;

        $r3 = (org.waveprotocol.wave.client.editor.gwt.HasGwtWidget) r0;

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.common.util.LogicalPanel logicalPanel>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.gwt.HasGwtWidget: void setLogicalParent(org.waveprotocol.wave.client.common.util.LogicalPanel)>($r2);

     label1:
        return;
    }

    private void maybeSetupModeNotifications(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r5;
        org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle $r1, $r3, $r4;
        org.waveprotocol.wave.client.editor.content.ContentElement r2;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle editorPackage>;

        if $r1 == null goto label1;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler: boolean hasListener(org.waveprotocol.wave.client.editor.content.ContentNode)>(r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle editorPackage>;

        $z1 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle: boolean inEditMode()>();

        staticinvoke <org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler: void onEditModeChange(org.waveprotocol.wave.client.editor.content.ContentNode,boolean)>(r2, $z1);

        $r4 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle editorPackage>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle: org.waveprotocol.wave.model.util.CopyOnWriteSet getElementsWithDisplayModes()>();

        virtualinvoke $r5.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r2);

     label1:
        return;
    }

    private void setupRenderer(org.waveprotocol.wave.client.editor.content.AgentAdapter, boolean)
    {
        org.waveprotocol.wave.client.editor.content.Renderer $r4, $r5;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument r1;
        boolean z0;
        org.waveprotocol.wave.client.editor.content.Registries $r2;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry $r3;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label3;

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.Registries registries>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.client.editor.ElementHandlerRegistry getElementHandlerRegistry()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: org.waveprotocol.wave.client.editor.content.Renderer getRenderer(org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers)>(r0);

        if $r4 == null goto label1;

        $r5 = $r4;

        goto label2;

     label1:
        $r5 = <org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.Renderer defaultRenderer>;

     label2:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void setRenderer(org.waveprotocol.wave.client.editor.content.Renderer)>($r5);

        goto label4;

     label3:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void clearRenderer()>();

     label4:
        return;
    }

    public void <init>(org.waveprotocol.wave.client.editor.content.Registries, org.waveprotocol.wave.model.document.operation.DocInitialization, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r1;
        org.waveprotocol.wave.model.document.operation.DocInitialization r3;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.Registries r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.Registries;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.DocInitialization;

        r1 := @parameter2: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>(r1);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setRegistries(org.waveprotocol.wave.client.editor.content.Registries)>(r2);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void consume(org.waveprotocol.wave.model.document.operation.DocOp)>(r3);

        return;
    }

    public void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$AnnotationImplFactory $r25;
        org.waveprotocol.wave.model.util.StringMap $r12;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc $r37, $r42, $r44, $r50, $r52;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r51;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry $r20;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer $r49;
        org.waveprotocol.wave.model.document.util.FilteredView $r56;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r26, $r28, $r39;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r21;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc $r35, $r40, $r43, $r48, $r55;
        org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent $r33, $r54;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument $r29, $r32, $r34, $r36;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FullContent $r31, $r45;
        org.waveprotocol.wave.client.editor.content.ContentDocument$5 $r16;
        org.waveprotocol.wave.client.editor.content.ContentDocument$6 $r18;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r1, $r46;
        org.waveprotocol.wave.client.editor.content.ContentDocument$3 $r14;
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 $r15;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r22;
        org.waveprotocol.wave.client.editor.content.ContentDocument$1 $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument$2 $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        org.waveprotocol.wave.client.editor.content.ContentDocument$LocalAnnotationSet $r27;
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager $r41, $r47;
        org.waveprotocol.wave.client.editor.content.AgentAdapter $r19;
        org.waveprotocol.wave.model.document.operation.NindoSink$Silent $r24;
        java.util.ArrayList $r13;
        int $i0, $i1;
        java.lang.String $r11;
        org.waveprotocol.wave.client.editor.content.ContentDocument$Level $r17;
        org.waveprotocol.wave.client.editor.content.ContentDocument$SourceNindoSink $r3, $r4;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r38;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns $r6;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory $r30;
        org.waveprotocol.wave.client.editor.operation.EditorOperationSequencer $r23, $r53;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r38 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.operation.SilentOperationSink$Void: org.waveprotocol.wave.model.operation.SilentOperationSink get()>();

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.operation.SilentOperationSink outgoingOperationSink> = $r1;

        $r2 = new org.waveprotocol.wave.client.editor.content.ContentDocument$1;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentDocument$1: void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument)>(r0);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.operation.SilentOperationSink outgoingRepaintSink> = $r2;

        $r3 = new org.waveprotocol.wave.client.editor.content.ContentDocument$SourceNindoSink;

        specialinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentDocument$SourceNindoSink: void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument,boolean,org.waveprotocol.wave.client.editor.content.ContentDocument$1)>(r0, 1, null);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.operation.NindoSink$Silent nindoSink> = $r3;

        $r4 = new org.waveprotocol.wave.client.editor.content.ContentDocument$SourceNindoSink;

        specialinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentDocument$SourceNindoSink: void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument,boolean,org.waveprotocol.wave.client.editor.content.ContentDocument$1)>(r0, 0, null);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.operation.NindoSink$Silent dontSaveSelectionNindoSink> = $r4;

        $r5 = new org.waveprotocol.wave.client.editor.content.ContentDocument$2;

        specialinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentDocument$2: void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument)>(r0);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns renderingConcerns> = $r5;

        $r6 = <org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns STUB>;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editingConcerns> = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ed");

        $i0 = <org.waveprotocol.wave.client.editor.content.ContentDocument: int counter>;

        $i1 = $i0 + 1;

        <org.waveprotocol.wave.client.editor.content.ContentDocument: int counter> = $i1;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: java.lang.String documentUniqueString> = $r11;

        $r12 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.util.StringMap nameMap> = $r12;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: java.util.List nodesToRepaint> = $r13;

        $r14 = new org.waveprotocol.wave.client.editor.content.ContentDocument$3;

        specialinvoke $r14.<org.waveprotocol.wave.client.editor.content.ContentDocument$3: void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument)>(r0);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory factory> = $r14;

        $r15 = new org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        specialinvoke $r15.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument)>(r0);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context> = $r15;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean applyingToDocument> = 0;

        $r16 = new org.waveprotocol.wave.client.editor.content.ContentDocument$5;

        specialinvoke $r16.<org.waveprotocol.wave.client.editor.content.ContentDocument$5: void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument)>(r0);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.extract.RepairListener repairListener> = $r16;

        $r17 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level SHELVED>;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level> = $r17;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean isConsistent> = 1;

        $r18 = new org.waveprotocol.wave.client.editor.content.ContentDocument$6;

        specialinvoke $r18.<org.waveprotocol.wave.client.editor.content.ContentDocument$6: void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument)>(r0);

        $r19 = new org.waveprotocol.wave.client.editor.content.AgentAdapter;

        $r22 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        $r21 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        $r20 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.ElementHandlerRegistry ROOT_HANDLER_REGISTRY>;

        specialinvoke $r19.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void <init>(java.lang.String,java.util.Map,org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext,org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>("doc", $r22, $r21, $r20);

        $r23 = new org.waveprotocol.wave.client.editor.operation.EditorOperationSequencer;

        $r24 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.operation.NindoSink$Silent nindoSink>;

        specialinvoke $r23.<org.waveprotocol.wave.client.editor.operation.EditorOperationSequencer: void <init>(org.waveprotocol.wave.model.document.operation.NindoSink$Silent)>($r24);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.operation.EditorOperationSequencer sequencer> = $r23;

        $r25 = <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$AnnotationImplFactory annotationFactory>;

        $r26 = virtualinvoke $r25.<org.waveprotocol.wave.client.editor.content.ContentDocument$AnnotationImplFactory: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet create(org.waveprotocol.wave.model.document.indexed.AnnotationSetListener)>($r18);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet fullAnnotationSet> = $r26;

        $r27 = new org.waveprotocol.wave.client.editor.content.ContentDocument$LocalAnnotationSet;

        $r28 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet fullAnnotationSet>;

        specialinvoke $r27.<org.waveprotocol.wave.client.editor.content.ContentDocument$LocalAnnotationSet: void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument,org.waveprotocol.wave.model.document.indexed.RawAnnotationSet)>(r0, $r28);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$LocalAnnotationSet localAnnotations> = $r27;

        $r29 = new org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        $r30 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory factory>;

        specialinvoke $r29.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: void <init>(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory)>($r19, $r30);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate> = $r29;

        $r31 = new org.waveprotocol.wave.client.editor.content.ContentDocument$FullContent;

        $r32 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        specialinvoke $r31.<org.waveprotocol.wave.client.editor.content.ContentDocument$FullContent: void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument,org.waveprotocol.wave.model.document.ReadableDocument)>(r0, $r32);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$FullContent fullContentView> = $r31;

        $r33 = new org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent;

        $r34 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        specialinvoke $r33.<org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent: void <init>(org.waveprotocol.wave.client.editor.content.ContentView)>($r34);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent renderedContentView> = $r33;

        $r35 = new org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc;

        $r36 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        specialinvoke $r35.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument,org.waveprotocol.wave.client.editor.content.ContentRawDocument)>(r0, $r36);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc persistentContentView> = $r35;

        $r37 = new org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc;

        $r40 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc persistentContentView>;

        $r39 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet fullAnnotationSet>;

        specialinvoke $r37.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument,org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc,org.waveprotocol.wave.model.document.indexed.RawAnnotationSet,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>(r0, $r40, $r39, r38);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc> = $r37;

        $r41 = new org.waveprotocol.wave.client.editor.content.LazyPersistenceManager;

        $r46 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.operation.SilentOperationSink outgoingRepaintSink>;

        $r45 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$FullContent fullContentView>;

        $r44 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        $r43 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc persistentContentView>;

        $r42 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        specialinvoke $r41.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: void <init>(org.waveprotocol.wave.model.operation.SilentOperationSink,org.waveprotocol.wave.model.document.util.LocalDocument,org.waveprotocol.wave.model.document.indexed.LocationMapper,org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.model.document.operation.ModifiableDocument)>($r46, $r45, $r44, $r43, $r42);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager lazyPersistenceManager> = $r41;

        $r48 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc persistentContentView>;

        $r47 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager lazyPersistenceManager>;

        virtualinvoke $r48.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: void setPersistenceManager(org.waveprotocol.wave.client.editor.content.LazyPersistenceManager)>($r47);

        $r49 = new org.waveprotocol.wave.client.editor.content.SelectionMaintainer;

        $r50 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        specialinvoke $r49.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void <init>(org.waveprotocol.wave.model.document.indexed.SizedObject)>($r50);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer selectionMaintainer> = $r49;

        $r51 = new org.waveprotocol.wave.client.editor.content.CMutableDocument;

        $r53 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.operation.EditorOperationSequencer sequencer>;

        $r52 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        specialinvoke $r51.<org.waveprotocol.wave.client.editor.content.CMutableDocument: void <init>(org.waveprotocol.wave.model.operation.OperationSequencer,org.waveprotocol.wave.model.document.indexed.IndexedDocument)>($r53, $r52);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.CMutableDocument mutableContent> = $r51;

        $r55 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc persistentContentView>;

        $r54 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent renderedContentView>;

        $r56 = staticinvoke <org.waveprotocol.wave.client.editor.selection.content.ValidSelectionStrategy: org.waveprotocol.wave.model.document.util.FilteredView buildSelectionFilter(org.waveprotocol.wave.model.document.util.FilteredView,org.waveprotocol.wave.model.document.util.FilteredView)>($r55, $r54);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.util.FilteredView selectionContent> = $r56;

        return;
    }

    public void setOutgoingSink(org.waveprotocol.wave.model.operation.SilentOperationSink)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink r0, $r2, $r3;
        org.waveprotocol.wave.client.editor.content.ContentDocument r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.SilentOperationSink;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Outgoing operation sink cannot be null");

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.operation.SilentOperationSink outgoingOperationSink>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.operation.SilentOperationSink$Void: org.waveprotocol.wave.model.operation.SilentOperationSink get()>();

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Already has a sink");

        r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.operation.SilentOperationSink outgoingOperationSink> = r0;

        return;
    }

    public org.waveprotocol.wave.model.operation.SilentOperationSink replaceOutgoingSink(org.waveprotocol.wave.model.operation.SilentOperationSink)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r1, r2, $r3;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r2 := @parameter0: org.waveprotocol.wave.model.operation.SilentOperationSink;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.operation.SilentOperationSink outgoingOperationSink>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "");

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.operation.SilentOperationSink outgoingOperationSink>;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.operation.SilentOperationSink outgoingOperationSink> = r2;

        return $r3;
    }

    public void flushAnnotationPainting()
    {
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: void flush(org.waveprotocol.wave.model.document.util.DocumentContext)>($r1);

        return;
    }

    public boolean flush(java.lang.Runnable)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle $r1, $r3;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        java.lang.Runnable r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r2 := @parameter0: java.lang.Runnable;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle editorPackage>;

        if $r1 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle editorPackage>;

        $z0 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle: boolean flush(java.lang.Runnable)>(r2);

        goto label2;

     label1:
        $z0 = 1;

     label2:
        return $z0;
    }

    public void setShelved()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$Level $r1, $r2;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement $r4;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level SHELVED>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level adjustLevel(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r1);

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentElement getDocumentElement()>();

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setupBehaviour(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r4, $r2);

        return;
    }

    public void setRendering()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$Level $r1, $r2, $r3, $r4;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument $r5;
        org.waveprotocol.wave.client.editor.content.ContentElement $r6;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level>;

        $r1 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level RENDERED>;

        if $r2 != $r1 goto label1;

        return;

     label1:
        $r3 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level RENDERED>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level adjustLevel(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r3);

        $r5 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentElement getDocumentElement()>();

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setupBehaviour(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r6, $r4);

        return;
    }

    public void setInteractive()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$Level $r2, $r3, $r4;
        java.lang.AssertionError $r5;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.common.util.LogicalPanel $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.common.util.LogicalPanel logicalPanel>;

        if $r1 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "Don\'t have a logicalPanel");

        $z0 = <org.waveprotocol.wave.client.editor.content.ContentDocument: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $r4 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level>;

        $r3 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level INTERACTIVE>;

        $z1 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: boolean isAtLeast(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r3);

        if $z1 != 0 goto label3;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label3:
        $r2 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level INTERACTIVE>;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level adjustLevel(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r2);

        return;
    }

    public void setInteractive(org.waveprotocol.wave.client.common.util.LogicalPanel)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$Level $r3, $r4;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument $r5;
        org.waveprotocol.wave.client.common.util.LogicalPanel r0, $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r6;
        org.waveprotocol.wave.client.editor.content.ContentDocument r1;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.common.util.LogicalPanel;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Null logicalPanel");

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.common.util.LogicalPanel logicalPanel>;

        if $r2 != r0 goto label1;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setInteractive()>();

        return;

     label1:
        r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.common.util.LogicalPanel logicalPanel> = r0;

        $r3 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level INTERACTIVE>;

        $r4 = specialinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level adjustLevel(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r3);

        $r5 = r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentElement getDocumentElement()>();

        specialinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setupBehaviour(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r6, $r4);

        return;
    }

    private org.waveprotocol.wave.client.editor.content.ContentDocument$Level adjustLevel(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer $r8;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r12;
        int[] $r6, $r20;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument $r11, $r13, $r21, $r24, $r25;
        java.lang.StringBuilder $r16, $r17, $r28, $r29, $r34, $r37;
        java.lang.AssertionError $r33, $r35, $r36, $r38;
        org.waveprotocol.wave.client.editor.content.ContentDocument$Level[] $r5, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i11;
        org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle $r9;
        java.lang.String $r18, $r30;
        org.waveprotocol.wave.client.editor.content.ContentDocument$Level r1, $r2, r3, $r4, r31, r32;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns $r7;
        org.waveprotocol.wave.client.common.util.LogicalPanel $r22;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument$Level;

        r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level>;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level>;

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: int ordinal()>();

        i8 = $i0 + 1;

     label01:
        $i1 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: int ordinal()>();

        if i8 > $i1 goto label08;

        $r19 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level[] values()>();

        r31 = $r19[i8];

        $r20 = <org.waveprotocol.wave.client.editor.content.ContentDocument$8: int[] $SwitchMap$org$waveprotocol$wave$client$editor$content$ContentDocument$Level>;

        $i6 = virtualinvoke r31.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: int ordinal()>();

        $i7 = $r20[$i6];

        tableswitch($i7)
        {
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label05;
            default: goto label06;
        };

     label02:
        $r24 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        $z4 = virtualinvoke $r24.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: boolean getAffectHtml()>();

        if $z4 != 0 goto label07;

        $r25 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        virtualinvoke $r25.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: void setAffectHtml()>();

        goto label07;

     label03:
        $z2 = <org.waveprotocol.wave.client.editor.content.ContentDocument: boolean $assertionsDisabled>;

        if $z2 != 0 goto label04;

        $r22 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.common.util.LogicalPanel logicalPanel>;

        if $r22 != null goto label04;

        $r33 = new java.lang.AssertionError;

        specialinvoke $r33.<java.lang.AssertionError: void <init>()>();

        throw $r33;

     label04:
        $r21 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        $z3 = virtualinvoke $r21.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: boolean getAffectHtml()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z3, "rendered or higher state should imply affectHtml");

        goto label07;

     label05:
        goto label07;

     label06:
        $r35 = new java.lang.AssertionError;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown level ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>($r30);

        throw $r35;

     label07:
        i8 = i8 + 1;

        goto label01;

     label08:
        $r4 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level>;

        $i2 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: int ordinal()>();

        i9 = $i2 - 1;

     label09:
        $i3 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: int ordinal()>();

        if i9 < $i3 goto label17;

        $r5 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level[] values()>();

        r32 = $r5[i9];

        $r6 = <org.waveprotocol.wave.client.editor.content.ContentDocument$8: int[] $SwitchMap$org$waveprotocol$wave$client$editor$content$ContentDocument$Level>;

        $i4 = virtualinvoke r32.<org.waveprotocol.wave.client.editor.content.ContentDocument$Level: int ordinal()>();

        $i5 = $r6[$i4];

        tableswitch($i5)
        {
            case 1: goto label13;
            case 2: goto label12;
            case 3: goto label10;
            default: goto label15;
        };

     label10:
        $z0 = <org.waveprotocol.wave.client.editor.content.ContentDocument: boolean $assertionsDisabled>;

        if $z0 != 0 goto label11;

        $r9 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle editorPackage>;

        if $r9 != null goto label11;

        $r36 = new java.lang.AssertionError;

        specialinvoke $r36.<java.lang.AssertionError: void <init>()>();

        throw $r36;

     label11:
        $r7 = <org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns STUB>;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editingConcerns> = $r7;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle editorPackage> = null;

        $r8 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer selectionMaintainer>;

        virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void detachEditor()>();

        goto label16;

     label12:
        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.common.util.LogicalPanel logicalPanel> = null;

        goto label16;

     label13:
        $r11 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        $z1 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: boolean getAffectHtml()>();

        if $z1 == 0 goto label14;

        $r13 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        virtualinvoke $r13.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: void clearAffectHtml()>();

     label14:
        $r12 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: void clearDocPainter(org.waveprotocol.wave.model.document.util.DocumentContext)>($r12);

        goto label16;

     label15:
        $r38 = new java.lang.AssertionError;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown level ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.AssertionError: void <init>(java.lang.Object)>($r18);

        throw $r38;

     label16:
        $i11 = (int) -1;

        i9 = i9 + $i11;

        goto label09;

     label17:
        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level> = r3;

        return r1;
    }

    public void initRootElementRendering(boolean)
    {
        java.lang.AssertionError $r24;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml $r7, $r19;
        org.waveprotocol.wave.client.editor.impl.HtmlViewImpl $r5;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3, $r22;
        org.waveprotocol.wave.client.editor.extract.Repairer $r11, $r17;
        boolean z0, $z1, $z2;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc $r15;
        org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent $r14, $r18;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument $r2, $r20;
        org.waveprotocol.wave.client.editor.extract.RepairListener $r12;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r8, $r13;
        org.waveprotocol.wave.client.editor.impl.StrippingHtmlView $r9;
        com.google.gwt.dom.client.Element $r1, $r4, $r6, $r10, $r21, $r23;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r16;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: com.google.gwt.dom.client.Element rootElement>;

        if $r1 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if $z2 != z0 goto label3;

        return;

     label3:
        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentElement getDocumentElement()>();

        if z0 == 0 goto label4;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: com.google.gwt.dom.client.Element rootElement> = $r4;

        $r5 = new org.waveprotocol.wave.client.editor.impl.HtmlViewImpl;

        $r6 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: com.google.gwt.dom.client.Element rootElement>;

        specialinvoke $r5.<org.waveprotocol.wave.client.editor.impl.HtmlViewImpl: void <init>(com.google.gwt.dom.client.Element)>($r6);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.HtmlView rawHtmlView> = $r5;

        $r7 = new org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml;

        $r8 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.HtmlView rawHtmlView>;

        specialinvoke $r7.<org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument,org.waveprotocol.wave.model.document.ReadableDocument)>(r0, $r8);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml filteredHtmlView> = $r7;

        $r9 = new org.waveprotocol.wave.client.editor.impl.StrippingHtmlView;

        $r10 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: com.google.gwt.dom.client.Element rootElement>;

        specialinvoke $r9.<org.waveprotocol.wave.client.editor.impl.StrippingHtmlView: void <init>(com.google.gwt.dom.client.Element)>($r10);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.HtmlView strippingHtmlView> = $r9;

        $r11 = new org.waveprotocol.wave.client.editor.extract.Repairer;

        $r15 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc persistentContentView>;

        $r14 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent renderedContentView>;

        $r13 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.HtmlView strippingHtmlView>;

        $r12 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.extract.RepairListener repairListener>;

        specialinvoke $r11.<org.waveprotocol.wave.client.editor.extract.Repairer: void <init>(org.waveprotocol.wave.client.editor.content.ContentView,org.waveprotocol.wave.client.editor.content.ContentView,org.waveprotocol.wave.client.editor.impl.HtmlView,org.waveprotocol.wave.client.editor.extract.RepairListener)>($r15, $r14, $r13, $r12);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.extract.Repairer repairer> = $r11;

        $r16 = new org.waveprotocol.wave.client.editor.impl.NodeManager;

        $r19 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml filteredHtmlView>;

        $r18 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent renderedContentView>;

        $r17 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.extract.Repairer repairer>;

        specialinvoke $r16.<org.waveprotocol.wave.client.editor.impl.NodeManager: void <init>(org.waveprotocol.wave.client.editor.impl.HtmlView,org.waveprotocol.wave.client.editor.content.ContentView,org.waveprotocol.wave.client.editor.extract.Repairer)>($r19, $r18, $r17);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager> = $r16;

        $z1 = <org.waveprotocol.wave.client.editor.content.ContentDocument: boolean $assertionsDisabled>;

        if $z1 != 0 goto label5;

        $r21 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: com.google.gwt.dom.client.Element rootElement>;

        $r20 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        $r22 = virtualinvoke $r20.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentElement getDocumentElement()>();

        $r23 = virtualinvoke $r22.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        if $r21 == $r23 goto label5;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label4:
        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: com.google.gwt.dom.client.Element rootElement> = null;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.HtmlView rawHtmlView> = null;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml filteredHtmlView> = null;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.HtmlView strippingHtmlView> = null;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.extract.Repairer repairer> = null;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager> = null;

     label5:
        return;
    }

    public org.waveprotocol.wave.client.editor.content.ContentDocument$Level getLevel()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$Level $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level>;

        return $r1;
    }

    public void attachEditor(org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle, org.waveprotocol.wave.client.common.util.LogicalPanel)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$Level $r2, $r3, $r5, $r6;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument $r10;
        org.waveprotocol.wave.client.editor.content.ContentDocument r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$7 $r7;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer $r9;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns $r8;
        org.waveprotocol.wave.client.common.util.LogicalPanel r4, $r12;
        org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r11;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle;

        r4 := @parameter1: org.waveprotocol.wave.client.common.util.LogicalPanel;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "editorBundle must not be null");

        $r3 = r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level level>;

        $r2 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level EDITING>;

        if $r3 == $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cannot attach editor to a document already with an editor");

        if r4 != null goto label5;

        $r12 = r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.common.util.LogicalPanel logicalPanel>;

        if $r12 == null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Must either already have a logical panel, or one must be provided");

        goto label6;

     label5:
        r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.common.util.LogicalPanel logicalPanel> = r4;

     label6:
        $r5 = <org.waveprotocol.wave.client.editor.content.ContentDocument$Level: org.waveprotocol.wave.client.editor.content.ContentDocument$Level EDITING>;

        $r6 = specialinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$Level adjustLevel(org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r5);

        r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle editorPackage> = r0;

        $r7 = new org.waveprotocol.wave.client.editor.content.ContentDocument$7;

        specialinvoke $r7.<org.waveprotocol.wave.client.editor.content.ContentDocument$7: void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument)>(r1);

        r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editingConcerns> = $r7;

        $r9 = r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer selectionMaintainer>;

        $r8 = r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editingConcerns>;

        virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void attachEditor(org.waveprotocol.wave.client.editor.content.ClientDocumentContext$EditingConcerns)>($r8);

        $r10 = r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentElement getDocumentElement()>();

        specialinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setupBehaviour(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>($r11, $r6);

        return;
    }

    public void setRegistries(org.waveprotocol.wave.client.editor.content.Registries)
    {
        org.waveprotocol.wave.client.editor.content.ClientDocumentContext $r3, $r4;
        org.waveprotocol.wave.client.editor.content.PainterRegistry $r6;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.Registries r1, $r2, $r5;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.Registries;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.Registries registries> = r1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.Registries registries>;

        if $r2 == null goto label1;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ClientDocumentContext getContext()>();

        $r5 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.Registries registries>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.client.editor.content.PainterRegistry getPaintRegistry()>();

        staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: void createAndSetDocPainter(org.waveprotocol.wave.model.document.util.DocumentContext,org.waveprotocol.wave.client.editor.content.PainterRegistry)>($r4, $r6);

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ClientDocumentContext getContext()>();

        staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: void clearDocPainter(org.waveprotocol.wave.model.document.util.DocumentContext)>($r3);

     label2:
        return;
    }

    public org.waveprotocol.wave.client.editor.content.Registries getRegistries()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.Registries $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.Registries registries>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.operation.EditorOperationSequencer getOpSequencer()
    {
        org.waveprotocol.wave.client.editor.operation.EditorOperationSequencer $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.operation.EditorOperationSequencer sequencer>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.extract.Repairer getRepairer()
    {
        org.waveprotocol.wave.client.editor.extract.Repairer $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.extract.Repairer repairer>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.impl.NodeManager getNodeManager()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager>;

        return $r1;
    }

    public org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()
    {
        org.waveprotocol.wave.model.document.operation.DocInitialization $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema getSchema()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema getSchema()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.document.indexed.LocationMapper getLocationMapper()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.ClientDocumentContext getContext()
    {
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.CMutableDocument mutableContent>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.ContentView getRenderedView()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent renderedContentView>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.ContentView getPersistentView()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc persistentContentView>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.ContentView getFullContentView()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FullContent $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$FullContent fullContentView>;

        return $r1;
    }

    public org.waveprotocol.wave.model.document.util.LocalDocument getAnnotatableContent()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FullContent $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$FullContent fullContentView>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.impl.HtmlView getRawHtmlView()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.HtmlView rawHtmlView>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml getFilteredHtmlView()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml filteredHtmlView>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.impl.HtmlView getStrippingHtmlView()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.HtmlView strippingHtmlView>;

        return $r1;
    }

    public org.waveprotocol.wave.model.document.util.ReadableDocumentView getSelectionFilter()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.model.document.util.FilteredView $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.util.FilteredView selectionContent>;

        return $r1;
    }

    public org.waveprotocol.wave.model.document.MutableAnnotationSet$Local getLocalAnnotations()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$LocalAnnotationSet $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$LocalAnnotationSet localAnnotations>;

        return $r1;
    }

    public org.waveprotocol.wave.model.document.indexed.Validator getValidator()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        return $r1;
    }

    public void sourceNindoWithoutModifyingHtml(org.waveprotocol.wave.model.document.operation.Nindo)
    {
        java.lang.Throwable $r3;
        org.waveprotocol.wave.model.document.operation.Nindo r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.model.document.operation.NindoSink$Silent $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void clearAffectHtml()>();

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.operation.NindoSink$Silent dontSaveSelectionNindoSink>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.NindoSink$Silent: org.waveprotocol.wave.model.document.operation.DocOp consumeAndReturnInvertible(org.waveprotocol.wave.model.document.operation.Nindo)>(r1);

     label2:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setAffectHtml()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setAffectHtml()>();

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void sourceNindo(org.waveprotocol.wave.model.document.operation.Nindo)
    {
        org.waveprotocol.wave.model.document.operation.Nindo r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.model.document.operation.NindoSink$Silent $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.operation.NindoSink$Silent nindoSink>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.NindoSink$Silent: org.waveprotocol.wave.model.document.operation.DocOp consumeAndReturnInvertible(org.waveprotocol.wave.model.document.operation.Nindo)>(r1);

        return;
    }

    public void consume(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.document.operation.DocOp r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void consume(org.waveprotocol.wave.model.document.operation.DocOp,boolean,boolean)>(r1, 0, 1);

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void notifyListener(org.waveprotocol.wave.model.document.operation.DocOp)>(r1);

        return;
    }

    private org.waveprotocol.wave.model.document.operation.DocOp consumeLocal(org.waveprotocol.wave.model.document.operation.Nindo, boolean)
    {
        java.lang.IllegalStateException $r3;
        org.waveprotocol.wave.model.document.operation.DocOp r7;
        java.lang.RuntimeException $r4;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc $r2, $r8;
        org.waveprotocol.wave.model.document.operation.Nindo r1;
        org.waveprotocol.wave.model.operation.OperationException $r5, $r6;
        boolean $z0, $z1, z2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo;

        z2 := @parameter1: boolean;

        $z0 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean isConsistent>;

        if $z0 != 0 goto label01;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Document is not in a consistent state - must have died during a previous bad op");

        throw $r3;

     label01:
        $z1 = <org.waveprotocol.wave.client.editor.content.ContentDocument: boolean validateLocalOps>;

        if $z1 == 0 goto label05;

     label02:
        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: void maybeThrowOperationExceptionFor(org.waveprotocol.wave.model.document.operation.Nindo)>(r1);

     label03:
        goto label05;

     label04:
        $r6 := @caughtexception;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void dealWithBadOp(boolean,java.lang.Object,java.lang.Exception,boolean)>(1, r1, $r6, 0);

     label05:
        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean isConsistent> = 0;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void beginConsume(boolean)>(z2);

        r7 = null;

     label06:
        $r8 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        r7 = virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: org.waveprotocol.wave.model.document.operation.DocOp consumeAndReturnInvertible(org.waveprotocol.wave.model.document.operation.Nindo,boolean)>(r1, 0);

     label07:
        goto label10;

     label08:
        $r5 := @caughtexception;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void dealWithBadOp(boolean,java.lang.Object,java.lang.Exception,boolean)>(1, r1, $r5, 1);

        goto label10;

     label09:
        $r4 := @caughtexception;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void dealWithBadOp(boolean,java.lang.Object,java.lang.Exception,boolean)>(1, r1, $r4, 1);

     label10:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void endConsume(boolean,org.waveprotocol.wave.model.document.operation.DocOp)>(z2, r7);

        return r7;

        catch org.waveprotocol.wave.model.operation.OperationException from label02 to label03 with label04;
        catch org.waveprotocol.wave.model.operation.OperationException from label06 to label07 with label08;
        catch java.lang.RuntimeException from label06 to label07 with label09;
    }

    private void consume(org.waveprotocol.wave.model.document.operation.DocOp, boolean, boolean)
    {
        java.lang.Throwable $r7;
        java.lang.IllegalStateException $r4;
        org.waveprotocol.wave.model.document.operation.DocOp r1;
        java.lang.RuntimeException $r5;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc $r2, $r3;
        org.waveprotocol.wave.model.operation.OperationException $r6, $r8;
        boolean $z0, z1, z2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        $z0 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean isConsistent>;

        if $z0 != 0 goto label01;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Document is not in a consistent state - must have died during a previous bad op");

        throw $r4;

     label01:
        if z1 == 0 goto label02;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: void maybeThrowOperationExceptionFor(org.waveprotocol.wave.model.document.operation.DocOp)>(r1);

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void dealWithBadOp(boolean,java.lang.Object,java.lang.Exception,boolean)>(z1, r1, $r8, 0);

     label04:
        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean isConsistent> = 0;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void beginConsume(boolean)>(z2);

     label05:
        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean applyingToDocument> = 1;

     label06:
        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: void consume(org.waveprotocol.wave.model.document.operation.DocOp,boolean)>(r1, 0);

     label07:
        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean applyingToDocument> = 0;

        goto label10;

     label08:
        $r7 := @caughtexception;

     label09:
        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean applyingToDocument> = 0;

        throw $r7;

     label10:
        goto label13;

     label11:
        $r6 := @caughtexception;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void dealWithBadOp(boolean,java.lang.Object,java.lang.Exception,boolean)>(z1, r1, $r6, 1);

        goto label13;

     label12:
        $r5 := @caughtexception;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void dealWithBadOp(boolean,java.lang.Object,java.lang.Exception,boolean)>(z1, r1, $r5, 1);

     label13:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void endConsume(boolean,org.waveprotocol.wave.model.document.operation.DocOp)>(z2, r1);

        return;

        catch org.waveprotocol.wave.model.operation.OperationException from label01 to label02 with label03;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch org.waveprotocol.wave.model.operation.OperationException from label05 to label10 with label11;
        catch java.lang.RuntimeException from label05 to label10 with label12;
    }

    private void dealWithBadOp(boolean, java.lang.Object, java.lang.Exception, boolean)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r7;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc $r37;
        boolean $z0, z1, z2, $z3, $z4, $z5, $z6;
        org.waveprotocol.wave.client.editor.content.ContentDocument$SchemaViolatingLocalOperationException $r18;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FullContent $r9, $r11;
        java.lang.Exception r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r41;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r21, $r22, $r25, $r31, $r33, $r34, $r35, $r36, $r39;
        org.waveprotocol.wave.common.logging.Logger $r42;
        java.lang.AssertionError $r20;
        org.waveprotocol.wave.model.operation.OperationException r27;
        org.waveprotocol.wave.client.editor.content.ContentElement $r13;
        org.waveprotocol.wave.client.editor.extract.Repairer $r10, $r44;
        java.lang.String $r24, $r29, $r30, $r32, $r38, $r40;
        org.waveprotocol.wave.client.editor.content.ContentDocument$BadOpLocalOperationException $r16;
        java.lang.RuntimeException $r26, r28, r43;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector $r14, $r17, $r19, $r23;
        java.lang.Object r6, $r12;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r15;
        org.waveprotocol.wave.model.operation.OperationRuntimeException $r8;

        r7 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        z2 := @parameter0: boolean;

        r6 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.Exception;

        z1 := @parameter3: boolean;

        $z0 = r0 instanceof org.waveprotocol.wave.model.operation.OperationException;

        if $z0 == 0 goto label01;

        r27 = (org.waveprotocol.wave.model.operation.OperationException) r0;

        r28 = null;

        goto label02;

     label01:
        r27 = null;

        r28 = (java.lang.RuntimeException) r0;

     label02:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        if z1 == 0 goto label03;

        $r29 = "DEATH: ";

        goto label04;

     label03:
        $r29 = "";

     label04:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ");

        if z2 == 0 goto label05;

        $r30 = "LOCAL";

        goto label06;

     label05:
        $r30 = "REMOTE";

     label06:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" operation: ");

        $r31 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        if r27 == null goto label07;

        $z6 = virtualinvoke r27.<org.waveprotocol.wave.model.operation.OperationException: boolean hasViolationsInformation()>();

        if $z6 == 0 goto label07;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Violation: ");

        $r23 = virtualinvoke r27.<org.waveprotocol.wave.model.operation.OperationException: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector getViolations()>();

        $r24 = virtualinvoke $r23.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: java.lang.String firstDescription()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r32 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label08;

     label07:
        $r32 = " <No violation information!> ";

     label08:
        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception: ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IndexedDoc: ");

        $r37 = r7.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        $r38 = virtualinvoke $r37.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: java.lang.String toString()>();

        $r39 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        $r41 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r42 = interfaceinvoke $r41.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r42.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>($r40);

        if r27 != null goto label09;

        r43 = r28;

        goto label13;

     label09:
        if z2 == 0 goto label12;

        if z1 != 0 goto label12;

        $z3 = <org.waveprotocol.wave.client.editor.content.ContentDocument: boolean $assertionsDisabled>;

        if $z3 != 0 goto label10;

        $z5 = virtualinvoke r27.<org.waveprotocol.wave.model.operation.OperationException: boolean hasViolationsInformation()>();

        if $z5 != 0 goto label10;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label10:
        $r14 = virtualinvoke r27.<org.waveprotocol.wave.model.operation.OperationException: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector getViolations()>();

        $r15 = virtualinvoke $r14.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult getValidationResult()>();

        $z4 = virtualinvoke $r15.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isInvalidSchema()>();

        if $z4 == 0 goto label11;

        $r18 = new org.waveprotocol.wave.client.editor.content.ContentDocument$SchemaViolatingLocalOperationException;

        $r19 = virtualinvoke r27.<org.waveprotocol.wave.model.operation.OperationException: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector getViolations()>();

        specialinvoke $r18.<org.waveprotocol.wave.client.editor.content.ContentDocument$SchemaViolatingLocalOperationException: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($r19);

        r43 = $r18;

        goto label13;

     label11:
        $r16 = new org.waveprotocol.wave.client.editor.content.ContentDocument$BadOpLocalOperationException;

        $r17 = virtualinvoke r27.<org.waveprotocol.wave.model.operation.OperationException: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector getViolations()>();

        specialinvoke $r16.<org.waveprotocol.wave.client.editor.content.ContentDocument$BadOpLocalOperationException: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($r17);

        r43 = $r16;

        goto label13;

     label12:
        $r8 = new org.waveprotocol.wave.model.operation.OperationRuntimeException;

        specialinvoke $r8.<org.waveprotocol.wave.model.operation.OperationRuntimeException: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.OperationException)>("Invalid for current document", r27);

        r43 = $r8;

     label13:
        $r44 = r7.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.extract.Repairer repairer>;

        if $r44 == null goto label17;

     label14:
        $r10 = r7.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.extract.Repairer repairer>;

        $r11 = r7.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$FullContent fullContentView>;

        $r9 = r7.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$FullContent fullContentView>;

        $r12 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.ContentDocument$FullContent: java.lang.Object getDocumentElement()>();

        $r13 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r12;

        virtualinvoke $r10.<org.waveprotocol.wave.client.editor.extract.Repairer: void revert(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.client.editor.content.ContentElement)>($r11, $r13);

     label15:
        goto label17;

     label16:
        $r26 := @caughtexception;

     label17:
        throw r43;

        catch java.lang.RuntimeException from label14 to label15 with label16;
    }

    private void beginConsume(boolean)
    {
        org.waveprotocol.wave.common.logging.Logger $r7;
        java.lang.AssertionError $r4;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r6;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer $r1, $r2, $r5, $r8;
        java.util.List $r3;
        boolean $z0, z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        z1 := @parameter0: boolean;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer selectionMaintainer>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: boolean isNested()>();

        if $z0 == 0 goto label1;

        $r6 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r7.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Selection save/restore imbalance!");

        $r8 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer selectionMaintainer>;

        virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void hackForceClearDepth()>();

     label1:
        if z1 == 0 goto label2;

        $r5 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer selectionMaintainer>;

        virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void saveSelection()>();

        goto label3;

     label2:
        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer selectionMaintainer>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void startDontSaveSelection()>();

     label3:
        $z2 = <org.waveprotocol.wave.client.editor.content.ContentDocument: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: java.util.List nodesToRepaint>;

        $z3 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label4;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        return;
    }

    private void endConsume(boolean, org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.document.operation.DocOp r2;
        java.lang.AssertionError $r4;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer $r1, $r3;
        boolean $z0, z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        z1 := @parameter0: boolean;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.DocOp;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void flushNodeRepaint()>();

        $z0 = <org.waveprotocol.wave.client.editor.content.ContentDocument: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean debugCheckHealthy()>();

        if $z2 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        if z1 == 0 goto label2;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer selectionMaintainer>;

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void restoreSelection(org.waveprotocol.wave.model.document.operation.DocOp)>(r2);

        goto label3;

     label2:
        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer selectionMaintainer>;

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void endDontSaveSelection()>();

     label3:
        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean isConsistent> = 1;

        return;
    }

    private void notifyListener(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.document.operation.DocOp r2;
        org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle $r1, $r3;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle editorPackage>;

        if $r1 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle editorPackage>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle: void onIncomingOp(org.waveprotocol.wave.model.document.operation.DocOp)>(r2);

     label1:
        return;
    }

    private void flushNodeRepaint()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r5;
        java.util.List $r1, $r3;
        java.util.Iterator $r2;
        java.lang.Object $r4;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: java.util.List nodesToRepaint>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r4;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void repaintNode(org.waveprotocol.wave.client.editor.content.ContentNode)>(r5);

        goto label1;

     label2:
        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: java.util.List nodesToRepaint>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        return;
    }

    public org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter$DiffHighlightTarget getDiffTarget()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$LocalAnnotationSet $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$LocalAnnotationSet localAnnotations>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: java.lang.String toString()>();

        return $r2;
    }

    private void clearAffectHtml()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc persistentContentView>;

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: void clearAffectHtml()>();

        return;
    }

    private void setAffectHtml()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc persistentContentView>;

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: void setAffectHtml()>();

        return;
    }

    public boolean debugCheckHealthy()
    {
        java.util.Iterator $r5;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc $r1, $r2, $r8;
        java.lang.Iterable $r4;
        java.lang.Object $r3, $r6;
        org.waveprotocol.wave.client.editor.content.ContentElement r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $z0 = <org.waveprotocol.wave.client.editor.content.ContentDocument: boolean performExpensiveChecks>;

        if $z0 == 0 goto label3;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: java.lang.Object getDocumentElement()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocIterate: java.lang.Iterable deepElements(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object)>($r2, $r3, null);

        $r5 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r6;

        $r8 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        $z2 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineContainer(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r8, r7);

        if $z2 == 0 goto label2;

        $z3 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineContainerParagraphiser: boolean containerIsHealthyStrong(org.waveprotocol.wave.client.editor.content.ContentElement)>(r7);

        return $z3;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public boolean debugCheckHealthy2()
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument $r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentRawDocument: org.waveprotocol.wave.client.editor.content.ContentElement getDocumentElement()>();

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean checkHealthy(org.waveprotocol.wave.client.editor.content.ContentElement,boolean)>($r2, 1);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean debugCheckHealthy()>();

        return $z0;
    }

    private void repaintNode(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc $r3, $r4, $r6, $r11;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r8, $r12;
        int $i0, $i1, $i2, $i3, $i4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1, $r10;
        boolean $z0;
        org.waveprotocol.wave.model.document.util.Point$El $r5, $r7;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r9;

        r2 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isTextNode()>();

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentTextNode asText()>();

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r10 == null goto label1;

        $r11 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        $i2 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: int getLocation(org.waveprotocol.wave.client.editor.content.ContentNode)>($r9);

        $r12 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        $i3 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.ContentTextNode: int getLength()>();

        $i4 = $i2 + $i3;

        staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: void maybeScheduleRepaint(org.waveprotocol.wave.model.document.util.DocumentContext,int,int)>($r12, $i2, $i4);

     label1:
        goto label3;

     label2:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        $r4 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        $r3 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El start(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r3, $r1);

        $i0 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r5);

        $r6 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>($r1);

        $i1 = virtualinvoke $r6.<org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r7);

        $r8 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: void maybeScheduleRepaint(org.waveprotocol.wave.model.document.util.DocumentContext,int,int)>($r8, $i0, $i1);

     label3:
        return;
    }

    public org.waveprotocol.wave.client.editor.content.CMutableDocument createSequencedDocumentWrapper(org.waveprotocol.wave.model.operation.OperationSequencer)
    {
        org.waveprotocol.wave.model.operation.OperationSequencer r1;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc $r3;

        r2 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.OperationSequencer;

        $r0 = new org.waveprotocol.wave.client.editor.content.CMutableDocument;

        $r3 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.content.CMutableDocument: void <init>(org.waveprotocol.wave.model.operation.OperationSequencer,org.waveprotocol.wave.model.document.indexed.IndexedDocument)>(r1, $r3);

        return $r0;
    }

    public org.waveprotocol.wave.client.editor.content.ContentRawDocument debugGetRawDocument()
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentRawDocument fullRawSubstrate>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext debugGetContext()
    {
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        return $r1;
    }

    static org.waveprotocol.wave.model.operation.SilentOperationSink access$100(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.operation.SilentOperationSink outgoingOperationSink>;

        return $r1;
    }

    static void access$200(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void flushNodeRepaint()>();

        return;
    }

    static org.waveprotocol.wave.model.document.operation.DocOp access$300(org.waveprotocol.wave.client.editor.content.ContentDocument, org.waveprotocol.wave.model.document.operation.Nindo, boolean)
    {
        org.waveprotocol.wave.model.document.operation.Nindo r1;
        org.waveprotocol.wave.model.document.operation.DocOp $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.Nindo;

        z0 := @parameter2: boolean;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.operation.DocOp consumeLocal(org.waveprotocol.wave.model.document.operation.Nindo,boolean)>(r1, z0);

        return $r2;
    }

    static org.waveprotocol.wave.client.editor.impl.NodeManager access$500(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.extract.Repairer access$600(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.extract.Repairer $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.extract.Repairer repairer>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext access$700(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext context>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.content.Registries access$800(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.Registries $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.Registries registries>;

        return $r1;
    }

    static void access$900(org.waveprotocol.wave.client.editor.content.ContentDocument, org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void postCreation(org.waveprotocol.wave.client.editor.content.ContentElement)>(r1);

        return;
    }

    static void access$1000(org.waveprotocol.wave.client.editor.content.ContentDocument, org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentDocument$Level)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$Level r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentDocument$Level;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void setupBehaviour(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentDocument$Level)>(r1, r2);

        return;
    }

    static org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc access$1100(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc persistentContentView>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc access$1200(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc indexedDoc>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns access$1300(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editingConcerns>;

        return $r1;
    }

    static java.lang.String access$1400(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        java.lang.String $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: java.lang.String documentUniqueString>;

        return $r1;
    }

    static org.waveprotocol.wave.model.util.StringMap access$1500(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.model.util.StringMap $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.util.StringMap nameMap>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle access$1600(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle editorPackage>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns access$1700(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns renderingConcerns>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.content.SelectionMaintainer access$1800(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer selectionMaintainer>;

        return $r1;
    }

    static java.util.List access$1900(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        java.util.List $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: java.util.List nodesToRepaint>;

        return $r1;
    }

    static boolean access$2000(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $z0 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean isConsistent>;

        return $z0;
    }

    static org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent access$2100(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent renderedContentView>;

        return $r1;
    }

    static void access$2200(org.waveprotocol.wave.client.editor.content.ContentDocument, org.waveprotocol.wave.model.document.operation.DocOp, boolean, boolean)
    {
        org.waveprotocol.wave.model.document.operation.DocOp r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        boolean z0, z1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.DocOp;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: void consume(org.waveprotocol.wave.model.document.operation.DocOp,boolean,boolean)>(r1, z0, z1);

        return;
    }

    static boolean access$2300(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $z0 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: boolean applyingToDocument>;

        return $z0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$AnnotationImplFactory $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/content/ContentDocument;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.content.ContentDocument: boolean $assertionsDisabled> = $z1;

        <org.waveprotocol.wave.client.editor.content.ContentDocument: boolean validateLocalOps> = 1;

        <org.waveprotocol.wave.client.editor.content.ContentDocument: boolean performExpensiveChecks> = 1;

        $r1 = <org.waveprotocol.wave.client.editor.content.ContentDocument$AnnotationImplFactory: org.waveprotocol.wave.client.editor.content.ContentDocument$AnnotationImplFactory TREE>;

        <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$AnnotationImplFactory annotationFactory> = $r1;

        <org.waveprotocol.wave.client.editor.content.ContentDocument: int counter> = 1;

        return;
    }
}
