public class org.apache.http.client.protocol.RequestAuthCache extends java.lang.Object implements org.apache.http.HttpRequestInterceptor
{
    private final org.apache.commons.logging.Log log;

    public void <init>()
    {
        org.apache.http.client.protocol.RequestAuthCache r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.apache.http.client.protocol.RequestAuthCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.apache.http.client.protocol.RequestAuthCache: org.apache.commons.logging.Log log> = $r2;

        return;
    }

    public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.client.protocol.RequestAuthCache r11;
        org.apache.http.client.AuthCache r3;
        org.apache.http.HttpRequest r0;
        org.apache.http.conn.scheme.Scheme $r16;
        org.apache.http.auth.AuthState $r20, $r30;
        org.apache.http.client.CredentialsProvider r5;
        int $i0, $i1, $i2;
        org.apache.http.auth.AuthScheme $r10, $r14;
        java.lang.String $r18, $r19;
        org.apache.http.conn.scheme.SchemeRegistry r26;
        java.lang.IllegalArgumentException $r23, $r24;
        org.apache.http.auth.AuthProtocolState $r8, $r9, $r12, $r13;
        org.apache.http.protocol.HttpContext r1;
        java.lang.Object $r2, $r4, $r6, $r7, $r15, $r27, $r29;
        org.apache.commons.logging.Log $r21, $r22;
        org.apache.http.HttpHost $r17, r25, $r28;

        r11 := @this: org.apache.http.client.protocol.RequestAuthCache;

        r0 := @parameter0: org.apache.http.HttpRequest;

        r1 := @parameter1: org.apache.http.protocol.HttpContext;

        if r0 != null goto label1;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r24;

     label1:
        if r1 != null goto label2;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r23;

     label2:
        $r2 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.auth-cache");

        r3 = (org.apache.http.client.AuthCache) $r2;

        if r3 != null goto label3;

        $r22 = r11.<org.apache.http.client.protocol.RequestAuthCache: org.apache.commons.logging.Log log>;

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Auth cache not set in the context");

        return;

     label3:
        $r4 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.credentials-provider");

        r5 = (org.apache.http.client.CredentialsProvider) $r4;

        if r5 != null goto label4;

        $r21 = r11.<org.apache.http.client.protocol.RequestAuthCache: org.apache.commons.logging.Log log>;

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Credentials provider not set in the context");

        return;

     label4:
        $r6 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.target_host");

        r25 = (org.apache.http.HttpHost) $r6;

        $i0 = virtualinvoke r25.<org.apache.http.HttpHost: int getPort()>();

        if $i0 >= 0 goto label5;

        $r15 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.scheme-registry");

        r26 = (org.apache.http.conn.scheme.SchemeRegistry) $r15;

        $r16 = virtualinvoke r26.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost)>(r25);

        $r17 = new org.apache.http.HttpHost;

        $r18 = virtualinvoke r25.<org.apache.http.HttpHost: java.lang.String getHostName()>();

        $i1 = virtualinvoke r25.<org.apache.http.HttpHost: int getPort()>();

        $i2 = virtualinvoke $r16.<org.apache.http.conn.scheme.Scheme: int resolvePort(int)>($i1);

        $r19 = virtualinvoke r25.<org.apache.http.HttpHost: java.lang.String getSchemeName()>();

        specialinvoke $r17.<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>($r18, $i2, $r19);

        r25 = $r17;

     label5:
        $r7 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.target-scope");

        $r20 = (org.apache.http.auth.AuthState) $r7;

        if r25 == null goto label6;

        if $r20 == null goto label6;

        $r12 = virtualinvoke $r20.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthProtocolState getState()>();

        $r13 = <org.apache.http.auth.AuthProtocolState: org.apache.http.auth.AuthProtocolState UNCHALLENGED>;

        if $r12 != $r13 goto label6;

        $r14 = interfaceinvoke r3.<org.apache.http.client.AuthCache: org.apache.http.auth.AuthScheme get(org.apache.http.HttpHost)>(r25);

        if $r14 == null goto label6;

        specialinvoke r11.<org.apache.http.client.protocol.RequestAuthCache: void doPreemptiveAuth(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.auth.AuthState,org.apache.http.client.CredentialsProvider)>(r25, $r14, $r20, r5);

     label6:
        $r27 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.proxy_host");

        $r28 = (org.apache.http.HttpHost) $r27;

        $r29 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.proxy-scope");

        $r30 = (org.apache.http.auth.AuthState) $r29;

        if $r28 == null goto label7;

        if $r30 == null goto label7;

        $r8 = virtualinvoke $r30.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthProtocolState getState()>();

        $r9 = <org.apache.http.auth.AuthProtocolState: org.apache.http.auth.AuthProtocolState UNCHALLENGED>;

        if $r8 != $r9 goto label7;

        $r10 = interfaceinvoke r3.<org.apache.http.client.AuthCache: org.apache.http.auth.AuthScheme get(org.apache.http.HttpHost)>($r28);

        if $r10 == null goto label7;

        specialinvoke r11.<org.apache.http.client.protocol.RequestAuthCache: void doPreemptiveAuth(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.auth.AuthState,org.apache.http.client.CredentialsProvider)>($r28, $r10, $r30, r5);

     label7:
        return;
    }

    private void doPreemptiveAuth(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme, org.apache.http.auth.AuthState, org.apache.http.client.CredentialsProvider)
    {
        org.apache.http.client.protocol.RequestAuthCache r2;
        org.apache.http.auth.Credentials $r8;
        org.apache.http.auth.AuthScheme r0;
        java.lang.String $r1, $r6, $r10, $r11, $r21;
        boolean $z0, $z1;
        org.apache.http.auth.AuthProtocolState $r13, $r14;
        org.apache.http.auth.AuthScope $r4;
        org.apache.commons.logging.Log $r3, $r9, $r16;
        java.lang.StringBuilder $r15, $r17, $r18, $r19, $r20;
        org.apache.http.auth.AuthState r12;
        org.apache.http.client.CredentialsProvider r7;
        org.apache.http.HttpHost r5;

        r2 := @this: org.apache.http.client.protocol.RequestAuthCache;

        r5 := @parameter0: org.apache.http.HttpHost;

        r0 := @parameter1: org.apache.http.auth.AuthScheme;

        r12 := @parameter2: org.apache.http.auth.AuthState;

        r7 := @parameter3: org.apache.http.client.CredentialsProvider;

        $r1 = interfaceinvoke r0.<org.apache.http.auth.AuthScheme: java.lang.String getSchemeName()>();

        $r3 = r2.<org.apache.http.client.protocol.RequestAuthCache: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r16 = r2.<org.apache.http.client.protocol.RequestAuthCache: org.apache.commons.logging.Log log>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Re-using cached \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' auth scheme for ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21);

     label1:
        $r4 = new org.apache.http.auth.AuthScope;

        $r6 = <org.apache.http.auth.AuthScope: java.lang.String ANY_REALM>;

        specialinvoke $r4.<org.apache.http.auth.AuthScope: void <init>(org.apache.http.HttpHost,java.lang.String,java.lang.String)>(r5, $r6, $r1);

        $r8 = interfaceinvoke r7.<org.apache.http.client.CredentialsProvider: org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope)>($r4);

        if $r8 == null goto label4;

        $r10 = "BASIC";

        $r11 = interfaceinvoke r0.<org.apache.http.auth.AuthScheme: java.lang.String getSchemeName()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r11);

        if $z1 == 0 goto label2;

        $r14 = <org.apache.http.auth.AuthProtocolState: org.apache.http.auth.AuthProtocolState CHALLENGED>;

        virtualinvoke r12.<org.apache.http.auth.AuthState: void setState(org.apache.http.auth.AuthProtocolState)>($r14);

        goto label3;

     label2:
        $r13 = <org.apache.http.auth.AuthProtocolState: org.apache.http.auth.AuthProtocolState SUCCESS>;

        virtualinvoke r12.<org.apache.http.auth.AuthState: void setState(org.apache.http.auth.AuthProtocolState)>($r13);

     label3:
        virtualinvoke r12.<org.apache.http.auth.AuthState: void update(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials)>(r0, $r8);

        goto label5;

     label4:
        $r9 = r2.<org.apache.http.client.protocol.RequestAuthCache: org.apache.commons.logging.Log log>;

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("No credentials for preemptive authentication");

     label5:
        return;
    }
}
