abstract class org.apache.lucene.search.TermCollectingRewrite extends org.apache.lucene.search.MultiTermQuery$RewriteMethod
{
    static final boolean $assertionsDisabled;

    void <init>()
    {
        org.apache.lucene.search.TermCollectingRewrite r0;

        r0 := @this: org.apache.lucene.search.TermCollectingRewrite;

        specialinvoke r0.<org.apache.lucene.search.MultiTermQuery$RewriteMethod: void <init>()>();

        return;
    }

    protected abstract org.apache.lucene.search.Query getTopLevelQuery() throws java.io.IOException;

    protected final void addClause(org.apache.lucene.search.Query, org.apache.lucene.index.Term, int, float) throws java.io.IOException
    {
        org.apache.lucene.search.Query r1;
        org.apache.lucene.index.Term r2;
        int i0;
        float f0;
        org.apache.lucene.search.TermCollectingRewrite r0;

        r0 := @this: org.apache.lucene.search.TermCollectingRewrite;

        r1 := @parameter0: org.apache.lucene.search.Query;

        r2 := @parameter1: org.apache.lucene.index.Term;

        i0 := @parameter2: int;

        f0 := @parameter3: float;

        virtualinvoke r0.<org.apache.lucene.search.TermCollectingRewrite: void addClause(org.apache.lucene.search.Query,org.apache.lucene.index.Term,int,float,org.apache.lucene.index.TermContext)>(r1, r2, i0, f0, null);

        return;
    }

    protected abstract void addClause(org.apache.lucene.search.Query, org.apache.lucene.index.Term, int, float, org.apache.lucene.index.TermContext) throws java.io.IOException;

    final void collectTerms(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery, org.apache.lucene.search.TermCollectingRewrite$TermCollector) throws java.io.IOException
    {
        org.apache.lucene.search.TermCollectingRewrite$TermCollector r12;
        org.apache.lucene.index.Fields $r7;
        java.lang.AssertionError $r24;
        org.apache.lucene.search.MultiTermQuery r8;
        org.apache.lucene.index.TermsEnum $r14, $r15;
        org.apache.lucene.util.AttributeSource $r13;
        org.apache.lucene.search.TermCollectingRewrite r11;
        java.lang.String $r9, $r23;
        boolean $z0, $z1, $z2;
        org.apache.lucene.index.Terms $r10;
        java.util.Iterator $r3;
        org.apache.lucene.util.BytesRef $r26;
        java.lang.RuntimeException $r17;
        java.util.List $r2;
        java.lang.Object $r4;
        java.lang.StringBuilder $r18, $r19, $r20, $r21, $r22;
        java.util.Comparator $r16, r25;
        org.apache.lucene.index.IndexReader r0;
        org.apache.lucene.index.AtomicReaderContext r5;
        org.apache.lucene.index.AtomicReader $r6;
        org.apache.lucene.index.IndexReaderContext $r1;

        r11 := @this: org.apache.lucene.search.TermCollectingRewrite;

        r0 := @parameter0: org.apache.lucene.index.IndexReader;

        r8 := @parameter1: org.apache.lucene.search.MultiTermQuery;

        r12 := @parameter2: org.apache.lucene.search.TermCollectingRewrite$TermCollector;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: org.apache.lucene.index.IndexReaderContext getContext()>();

        r25 = null;

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.IndexReaderContext: java.util.List leaves()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label9;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.index.AtomicReaderContext) $r4;

        $r6 = virtualinvoke r5.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r7 = virtualinvoke $r6.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Fields fields()>();

        if $r7 != null goto label2;

        goto label1;

     label2:
        $r9 = r8.<org.apache.lucene.search.MultiTermQuery: java.lang.String field>;

        $r10 = virtualinvoke $r7.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>($r9);

        if $r10 != null goto label3;

        goto label1;

     label3:
        $r13 = r12.<org.apache.lucene.search.TermCollectingRewrite$TermCollector: org.apache.lucene.util.AttributeSource attributes>;

        $r14 = virtualinvoke r11.<org.apache.lucene.search.TermCollectingRewrite: org.apache.lucene.index.TermsEnum getTermsEnum(org.apache.lucene.search.MultiTermQuery,org.apache.lucene.index.Terms,org.apache.lucene.util.AttributeSource)>(r8, $r10, $r13);

        $z0 = <org.apache.lucene.search.TermCollectingRewrite: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        if $r14 != null goto label4;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label4:
        $r15 = <org.apache.lucene.index.TermsEnum: org.apache.lucene.index.TermsEnum EMPTY>;

        if $r14 != $r15 goto label5;

        goto label1;

     label5:
        $r16 = virtualinvoke $r14.<org.apache.lucene.index.TermsEnum: java.util.Comparator getComparator()>();

        if r25 == null goto label6;

        if $r16 == null goto label6;

        if $r16 == r25 goto label6;

        $r17 = new java.lang.RuntimeException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("term comparator should not change between segments: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r23);

        throw $r17;

     label6:
        r25 = $r16;

        virtualinvoke r12.<org.apache.lucene.search.TermCollectingRewrite$TermCollector: void setReaderContext(org.apache.lucene.index.IndexReaderContext,org.apache.lucene.index.AtomicReaderContext)>($r1, r5);

        virtualinvoke r12.<org.apache.lucene.search.TermCollectingRewrite$TermCollector: void setNextEnum(org.apache.lucene.index.TermsEnum)>($r14);

     label7:
        $r26 = virtualinvoke $r14.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef next()>();

        if $r26 == null goto label8;

        $z1 = virtualinvoke r12.<org.apache.lucene.search.TermCollectingRewrite$TermCollector: boolean collect(org.apache.lucene.util.BytesRef)>($r26);

        if $z1 != 0 goto label7;

        return;

     label8:
        goto label1;

     label9:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/TermCollectingRewrite;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.TermCollectingRewrite: boolean $assertionsDisabled> = $z1;

        return;
    }
}
