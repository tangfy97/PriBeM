public class org.joda.time.field.FieldUtils extends java.lang.Object
{

    private void <init>()
    {
        org.joda.time.field.FieldUtils r0;

        r0 := @this: org.joda.time.field.FieldUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int safeNegate(int)
    {
        int i0, $i1;
        java.lang.ArithmeticException $r0;

        i0 := @parameter0: int;

        if i0 != -2147483648 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Integer.MIN_VALUE cannot be negated");

        throw $r0;

     label1:
        $i1 = neg i0;

        return $i1;
    }

    public static int safeAdd(int, int)
    {
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5;
        int i0, i1, i2, $i3, $i4;
        java.lang.ArithmeticException $r0;
        java.lang.String $r6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 + i1;

        $i3 = i0 ^ i2;

        if $i3 >= 0 goto label1;

        $i4 = i0 ^ i1;

        if $i4 < 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The calculation caused an overflow: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" + ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label1:
        return i2;
    }

    public static long safeAdd(long, long)
    {
        long l0, l1, l2, $l3, $l5;
        byte $b4, $b6;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r7;
        int $i7, $i8;
        java.lang.ArithmeticException $r8;
        java.lang.String $r6;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 = l0 + l1;

        $l3 = l0 ^ l2;

        $b4 = $l3 cmp 0L;

        $i7 = (int) $b4;

        if $i7 >= 0 goto label1;

        $l5 = l0 ^ l1;

        $b6 = $l5 cmp 0L;

        $i8 = (int) $b6;

        if $i8 < 0 goto label1;

        $r8 = new java.lang.ArithmeticException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The calculation caused an overflow: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" + ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label1:
        return l2;
    }

    public static long safeSubtract(long, long)
    {
        long l0, l1, l2, $l3, $l5;
        byte $b4, $b6;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r7;
        int $i7, $i8;
        java.lang.ArithmeticException $r8;
        java.lang.String $r6;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 = l0 - l1;

        $l3 = l0 ^ l2;

        $b4 = $l3 cmp 0L;

        $i7 = (int) $b4;

        if $i7 >= 0 goto label1;

        $l5 = l0 ^ l1;

        $b6 = $l5 cmp 0L;

        $i8 = (int) $b6;

        if $i8 >= 0 goto label1;

        $r8 = new java.lang.ArithmeticException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The calculation caused an overflow: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label1:
        return l2;
    }

    public static int safeMultiply(int, int)
    {
        long $l2, $l3, l4;
        byte $b5, $b6;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r7;
        int i0, i1, $i7, $i8, $i9;
        java.lang.ArithmeticException $r8;
        java.lang.String $r6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l3 = (long) i0;

        $l2 = (long) i1;

        l4 = $l3 * $l2;

        $b5 = l4 cmp -2147483648L;

        $i8 = (int) $b5;

        if $i8 < 0 goto label1;

        $b6 = l4 cmp 2147483647L;

        $i9 = (int) $b6;

        if $i9 <= 0 goto label2;

     label1:
        $r8 = new java.lang.ArithmeticException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The calculation caused an overflow: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" * ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label2:
        $i7 = (int) l4;

        return $i7;
    }

    public static long safeMultiply(long, int)
    {
        long l1, $l2, $l3, l4, $l5, $l6;
        byte $b7;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5;
        int i0;
        java.lang.ArithmeticException $r0;
        java.lang.String $r6;

        l1 := @parameter0: long;

        i0 := @parameter1: int;

        tableswitch(i0)
        {
            case -1: goto label1;
            case 0: goto label2;
            case 1: goto label3;
            default: goto label4;
        };

     label1:
        $l2 = neg l1;

        return $l2;

     label2:
        return 0L;

     label3:
        return l1;

     label4:
        $l3 = (long) i0;

        l4 = l1 * $l3;

        $l5 = (long) i0;

        $l6 = l4 / $l5;

        $b7 = $l6 cmp l1;

        if $b7 == 0 goto label5;

        $r0 = new java.lang.ArithmeticException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The calculation caused an overflow: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" * ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label5:
        return l4;
    }

    public static long safeMultiply(long, long)
    {
        long l0, l3, l4, $l5;
        byte $b1, $b2, $b6;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5;
        java.lang.ArithmeticException $r0;
        java.lang.String $r6;

        l3 := @parameter0: long;

        l0 := @parameter1: long;

        $b1 = l0 cmp 1L;

        if $b1 != 0 goto label1;

        return l3;

     label1:
        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label2;

        return 0L;

     label2:
        l4 = l3 * l0;

        $l5 = l4 / l0;

        $b6 = $l5 cmp l3;

        if $b6 == 0 goto label3;

        $r0 = new java.lang.ArithmeticException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The calculation caused an overflow: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l3);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" * ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label3:
        return l4;
    }

    public static int safeToInt(long)
    {
        long l0;
        byte $b1, $b2;
        java.lang.StringBuffer $r2, $r3, $r5;
        int $i3, $i4, $i5;
        java.lang.ArithmeticException $r6;
        java.lang.String $r4;

        l0 := @parameter0: long;

        $b1 = -2147483648L cmp l0;

        $i4 = (int) $b1;

        if $i4 > 0 goto label1;

        $b2 = l0 cmp 2147483647L;

        $i5 = (int) $b2;

        if $i5 > 0 goto label1;

        $i3 = (int) l0;

        return $i3;

     label1:
        $r6 = new java.lang.ArithmeticException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value cannot fit in an int: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r4);

        throw $r6;
    }

    public static int safeMultiplyToInt(long, long)
    {
        int $i3;
        long l0, l1, $l2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,long)>(l0, l1);

        $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2);

        return $i3;
    }

    public static void verifyValueBounds(org.joda.time.DateTimeField, int, int, int)
    {
        org.joda.time.IllegalFieldValueException $r0;
        java.lang.Integer $r3, $r4, $r5;
        int i0, i1, i2;
        org.joda.time.DateTimeField r1;
        org.joda.time.DateTimeFieldType $r2;

        r1 := @parameter0: org.joda.time.DateTimeField;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if i0 < i1 goto label1;

        if i0 <= i2 goto label2;

     label1:
        $r0 = new org.joda.time.IllegalFieldValueException;

        $r2 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i0);

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i1);

        $r5 = new java.lang.Integer;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>(i2);

        specialinvoke $r0.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4, $r5);

        throw $r0;

     label2:
        return;
    }

    public static void verifyValueBounds(org.joda.time.DateTimeFieldType, int, int, int)
    {
        org.joda.time.IllegalFieldValueException $r0;
        java.lang.Integer $r2, $r3, $r4;
        int i0, i1, i2;
        org.joda.time.DateTimeFieldType r1;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if i0 < i1 goto label1;

        if i0 <= i2 goto label2;

     label1:
        $r0 = new org.joda.time.IllegalFieldValueException;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i0);

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i1);

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i2);

        specialinvoke $r0.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>(r1, $r2, $r3, $r4);

        throw $r0;

     label2:
        return;
    }

    public static void verifyValueBounds(java.lang.String, int, int, int)
    {
        org.joda.time.IllegalFieldValueException $r0;
        java.lang.Integer $r2, $r3, $r4;
        int i0, i1, i2;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if i0 < i1 goto label1;

        if i0 <= i2 goto label2;

     label1:
        $r0 = new org.joda.time.IllegalFieldValueException;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i0);

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i1);

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i2);

        specialinvoke $r0.<org.joda.time.IllegalFieldValueException: void <init>(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number)>(r1, $r2, $r3, $r4);

        throw $r0;

     label2:
        return;
    }

    public static int getWrappedValue(int, int, int, int)
    {
        int i0, i1, i2, i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $i4 = i0 + i1;

        $i5 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int)>($i4, i2, i3);

        return $i5;
    }

    public static int getWrappedValue(int, int, int)
    {
        java.lang.IllegalArgumentException $r0;
        int i0, i1, $i2, i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, i11, i12;

        i11 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < i1 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MIN > MAX");

        throw $r0;

     label1:
        $i2 = i1 - i0;

        i3 = $i2 + 1;

        i12 = i11 - i0;

        if i12 < 0 goto label2;

        $i9 = i12 % i3;

        $i10 = $i9 + i0;

        return $i10;

     label2:
        $i4 = neg i12;

        i5 = $i4 % i3;

        if i5 != 0 goto label3;

        $i8 = 0 + i0;

        return $i8;

     label3:
        $i6 = i3 - i5;

        $i7 = $i6 + i0;

        return $i7;
    }

    public static boolean equals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }
}
