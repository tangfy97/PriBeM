public class org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent extends java.lang.Object implements org.apache.batik.bridge.UserAgent
{
    protected java.util.Map extensions;
    static java.lang.Class class$org$apache$batik$swing$svg$AbstractJSVGComponent;
    private final org.apache.batik.swing.svg.AbstractJSVGComponent this$0;

    protected void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        java.util.HashMap $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r1 := @parameter0: org.apache.batik.swing.svg.AbstractJSVGComponent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0> = r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: java.util.Map extensions> = $r2;

        return;
    }

    public java.awt.geom.Dimension2D getViewportSize()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        java.awt.Dimension $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = virtualinvoke $r1.<java.awt.Component: java.awt.Dimension getSize()>();

        return $r2;
    }

    public org.apache.batik.gvt.event.EventDispatcher getEventDispatcher()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.gvt.event.AWTEventDispatcher $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = staticinvoke <org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.gvt.event.AWTEventDispatcher access$2801(org.apache.batik.swing.svg.AbstractJSVGComponent)>($r1);

        return $r2;
    }

    public void displayError(java.lang.String)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r3;
        java.lang.String r4;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r5;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r5 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        interfaceinvoke $r5.<org.apache.batik.swing.svg.SVGUserAgent: void displayError(java.lang.String)>(r4);

     label1:
        return;
    }

    public void displayError(java.lang.Exception)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r3;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r5;
        java.lang.Exception r4;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r4 := @parameter0: java.lang.Exception;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r5 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        interfaceinvoke $r5.<org.apache.batik.swing.svg.SVGUserAgent: void displayError(java.lang.Exception)>(r4);

     label1:
        return;
    }

    public void displayMessage(java.lang.String)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r3;
        java.lang.String r4;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r5;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r5 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        interfaceinvoke $r5.<org.apache.batik.swing.svg.SVGUserAgent: void displayMessage(java.lang.String)>(r4);

     label1:
        return;
    }

    public void showAlert(java.lang.String)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r4, $r5;
        java.lang.String r3;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r6;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r5 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r6 = $r5.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        interfaceinvoke $r6.<org.apache.batik.swing.svg.SVGUserAgent: void showAlert(java.lang.String)>(r3);

        return;

     label1:
        $r4 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        virtualinvoke $r4.<org.apache.batik.swing.svg.AbstractJSVGComponent: void showAlert(java.lang.String)>(r3);

        return;
    }

    public java.lang.String showPrompt(java.lang.String)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r4, $r6;
        java.lang.String r3, $r5, $r8;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r7;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r6 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r7 = $r6.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $r8 = interfaceinvoke $r7.<org.apache.batik.swing.svg.SVGUserAgent: java.lang.String showPrompt(java.lang.String)>(r3);

        return $r8;

     label1:
        $r4 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r5 = virtualinvoke $r4.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.String showPrompt(java.lang.String)>(r3);

        return $r5;
    }

    public java.lang.String showPrompt(java.lang.String, java.lang.String)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r5, $r7;
        java.lang.String r3, r4, $r6, $r9;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r8;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r7 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r8 = $r7.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $r9 = interfaceinvoke $r8.<org.apache.batik.swing.svg.SVGUserAgent: java.lang.String showPrompt(java.lang.String,java.lang.String)>(r3, r4);

        return $r9;

     label1:
        $r5 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r6 = virtualinvoke $r5.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.String showPrompt(java.lang.String,java.lang.String)>(r3, r4);

        return $r6;
    }

    public boolean showConfirm(java.lang.String)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r4, $r5;
        java.lang.String r3;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r5 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r6 = $r5.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $z1 = interfaceinvoke $r6.<org.apache.batik.swing.svg.SVGUserAgent: boolean showConfirm(java.lang.String)>(r3);

        return $z1;

     label1:
        $r4 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $z0 = virtualinvoke $r4.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean showConfirm(java.lang.String)>(r3);

        return $z0;
    }

    public float getPixelUnitToMillimeter()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r3;
        float $f0;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r4;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r4 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $f0 = interfaceinvoke $r4.<org.apache.batik.swing.svg.SVGUserAgent: float getPixelUnitToMillimeter()>();

        return $f0;

     label1:
        return 0.26458332F;
    }

    public float getPixelToMM()
    {
        float $f0;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        $f0 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: float getPixelUnitToMillimeter()>();

        return $f0;
    }

    public java.lang.String getDefaultFontFamily()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r3;
        java.lang.String $r5;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r4;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r4 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $r5 = interfaceinvoke $r4.<org.apache.batik.swing.svg.SVGUserAgent: java.lang.String getDefaultFontFamily()>();

        return $r5;

     label1:
        return "Arial, Helvetica, sans-serif";
    }

    public float getMediumFontSize()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r3;
        float $f0, $f1, $f2, $f3;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r4;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r4 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $f3 = interfaceinvoke $r4.<org.apache.batik.swing.svg.SVGUserAgent: float getMediumFontSize()>();

        return $f3;

     label1:
        $f0 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: float getPixelUnitToMillimeter()>();

        $f1 = 72.0F * $f0;

        $f2 = 228.59999F / $f1;

        return $f2;
    }

    public float getLighterFontWeight(float)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        java.lang.StringBuffer $r4, $r5, $r6;
        int $i0, i1;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r8;
        java.lang.String $r7;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r9;
        java.lang.IllegalArgumentException $r3;
        float f0, $f1, $f2, $f3;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        f0 := @parameter0: float;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label01;

        $r8 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r9 = $r8.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $f3 = interfaceinvoke $r9.<org.apache.batik.swing.svg.SVGUserAgent: float getLighterFontWeight(float)>(f0);

        return $f3;

     label01:
        $f1 = f0 + 50.0F;

        $f2 = $f1 / 100.0F;

        $i0 = (int) $f2;

        i1 = $i0 * 100;

        lookupswitch(i1)
        {
            case 100: goto label02;
            case 200: goto label03;
            case 300: goto label04;
            case 400: goto label05;
            case 500: goto label06;
            case 600: goto label07;
            case 700: goto label08;
            case 800: goto label09;
            case 900: goto label10;
            default: goto label11;
        };

     label02:
        return 100.0F;

     label03:
        return 100.0F;

     label04:
        return 200.0F;

     label05:
        return 300.0F;

     label06:
        return 400.0F;

     label07:
        return 400.0F;

     label08:
        return 400.0F;

     label09:
        return 400.0F;

     label10:
        return 400.0F;

     label11:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad Font Weight: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(f0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public float getBolderFontWeight(float)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        java.lang.StringBuffer $r4, $r5, $r6;
        int $i0, i1;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r8;
        java.lang.String $r7;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r9;
        java.lang.IllegalArgumentException $r3;
        float f0, $f1, $f2, $f3;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        f0 := @parameter0: float;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label01;

        $r8 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r9 = $r8.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $f3 = interfaceinvoke $r9.<org.apache.batik.swing.svg.SVGUserAgent: float getBolderFontWeight(float)>(f0);

        return $f3;

     label01:
        $f1 = f0 + 50.0F;

        $f2 = $f1 / 100.0F;

        $i0 = (int) $f2;

        i1 = $i0 * 100;

        lookupswitch(i1)
        {
            case 100: goto label02;
            case 200: goto label03;
            case 300: goto label04;
            case 400: goto label05;
            case 500: goto label06;
            case 600: goto label07;
            case 700: goto label08;
            case 800: goto label09;
            case 900: goto label10;
            default: goto label11;
        };

     label02:
        return 600.0F;

     label03:
        return 600.0F;

     label04:
        return 600.0F;

     label05:
        return 600.0F;

     label06:
        return 600.0F;

     label07:
        return 700.0F;

     label08:
        return 800.0F;

     label09:
        return 900.0F;

     label10:
        return 900.0F;

     label11:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad Font Weight: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(f0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public java.lang.String getLanguages()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r3;
        java.lang.String $r5;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r4;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r4 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $r5 = interfaceinvoke $r4.<org.apache.batik.swing.svg.SVGUserAgent: java.lang.String getLanguages()>();

        return $r5;

     label1:
        return "en";
    }

    public java.lang.String getUserStyleSheetURI()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r3;
        java.lang.String $r5;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r4;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r4 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $r5 = interfaceinvoke $r4.<org.apache.batik.swing.svg.SVGUserAgent: java.lang.String getUserStyleSheetURI()>();

        return $r5;

     label1:
        return null;
    }

    public void openLink(org.w3c.dom.svg.SVGAElement)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r9;
        org.w3c.dom.Document $r5, $r35, $r42;
        org.w3c.dom.svg.SVGAnimatedString $r2;
        boolean $z0, $z1, $z2, $z3;
        org.apache.batik.util.ParsedURL $r4, $r17, $r38, $r43;
        org.w3c.dom.svg.SVGAElement r0;
        org.w3c.dom.svg.SVGDocument $r6, $r11, $r19, $r33, $r37, r46;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r10, $r12, $r14, $r15, $r18, $r22, $r24, $r25, $r26, $r27, $r29, $r31, $r32, $r36, $r40;
        java.lang.String $r1, $r3, $r7, $r8, $r20, $r21, $r23, $r28, $r34, $r39, $r44, r45;
        org.apache.batik.swing.svg.SVGUserAgent $r13, $r16, $r30, $r41;

        r9 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r0 := @parameter0: org.w3c.dom.svg.SVGAElement;

        $r1 = staticinvoke <org.apache.batik.dom.util.XLinkSupport: java.lang.String getXLinkShow(org.w3c.dom.Element)>(r0);

        $r2 = interfaceinvoke r0.<org.w3c.dom.svg.SVGURIReference: org.w3c.dom.svg.SVGAnimatedString getHref()>();

        $r3 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGAnimatedString: java.lang.String getAnimVal()>();

        r45 = $r3;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("new");

        if $z0 == 0 goto label4;

        virtualinvoke r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: void fireLinkActivatedEvent(org.w3c.dom.svg.SVGAElement,java.lang.String)>(r0, $r3);

        $r29 = r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r30 = $r29.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r30 == null goto label2;

        $r32 = r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r33 = $r32.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.w3c.dom.svg.SVGDocument svgDocument>;

        $r34 = interfaceinvoke $r33.<org.w3c.dom.svg.SVGDocument: java.lang.String getURL()>();

        $r35 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r36 = r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r37 = $r36.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.w3c.dom.svg.SVGDocument svgDocument>;

        if $r35 == $r37 goto label1;

        $r42 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r46 = (org.w3c.dom.svg.SVGDocument) $r42;

        $r43 = new org.apache.batik.util.ParsedURL;

        $r44 = interfaceinvoke r46.<org.w3c.dom.svg.SVGDocument: java.lang.String getURL()>();

        specialinvoke $r43.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String,java.lang.String)>($r44, $r3);

        r45 = virtualinvoke $r43.<org.apache.batik.util.ParsedURL: java.lang.String toString()>();

     label1:
        $r38 = new org.apache.batik.util.ParsedURL;

        specialinvoke $r38.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String,java.lang.String)>($r34, r45);

        $r39 = virtualinvoke $r38.<org.apache.batik.util.ParsedURL: java.lang.String toString()>();

        $r40 = r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r41 = $r40.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        interfaceinvoke $r41.<org.apache.batik.swing.svg.SVGUserAgent: void openLink(java.lang.String,boolean)>($r39, 1);

        goto label3;

     label2:
        $r31 = r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        virtualinvoke $r31.<org.apache.batik.swing.svg.AbstractJSVGComponent: void loadSVGDocument(java.lang.String)>($r3);

     label3:
        return;

     label4:
        $r4 = new org.apache.batik.util.ParsedURL;

        $r5 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r6 = (org.w3c.dom.svg.SVGDocument) $r5;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.svg.SVGDocument: java.lang.String getURL()>();

        specialinvoke $r4.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String,java.lang.String)>($r7, $r3);

        $r8 = virtualinvoke $r4.<org.apache.batik.util.ParsedURL: java.lang.String toString()>();

        $r10 = r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r11 = $r10.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.w3c.dom.svg.SVGDocument svgDocument>;

        if $r11 == null goto label7;

        $r17 = new org.apache.batik.util.ParsedURL;

        $r18 = r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r19 = $r18.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.w3c.dom.svg.SVGDocument svgDocument>;

        $r20 = interfaceinvoke $r19.<org.w3c.dom.svg.SVGDocument: java.lang.String getURL()>();

        specialinvoke $r17.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String)>($r20);

        $z1 = virtualinvoke $r4.<org.apache.batik.util.ParsedURL: boolean sameFile(org.apache.batik.util.ParsedURL)>($r17);

        if $z1 == 0 goto label7;

        $r21 = virtualinvoke $r4.<org.apache.batik.util.ParsedURL: java.lang.String getRef()>();

        $r22 = r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r23 = $r22.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.String fragmentIdentifier>;

        if $r23 == $r21 goto label6;

        if $r21 == null goto label5;

        $r27 = r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r28 = $r27.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.String fragmentIdentifier>;

        $z3 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r28);

        if $z3 != 0 goto label6;

     label5:
        $r24 = r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r24.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.lang.String fragmentIdentifier> = $r21;

        $r25 = r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $z2 = virtualinvoke $r25.<org.apache.batik.swing.svg.AbstractJSVGComponent: boolean computeRenderingTransform()>();

        if $z2 == 0 goto label6;

        $r26 = r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        staticinvoke <org.apache.batik.swing.svg.AbstractJSVGComponent: void access$2901(org.apache.batik.swing.svg.AbstractJSVGComponent)>($r26);

     label6:
        virtualinvoke r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: void fireLinkActivatedEvent(org.w3c.dom.svg.SVGAElement,java.lang.String)>(r0, $r8);

        return;

     label7:
        virtualinvoke r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: void fireLinkActivatedEvent(org.w3c.dom.svg.SVGAElement,java.lang.String)>(r0, $r8);

        $r12 = r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r13 = $r12.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r13 == null goto label8;

        $r15 = r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r16 = $r15.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        interfaceinvoke $r16.<org.apache.batik.swing.svg.SVGUserAgent: void openLink(java.lang.String,boolean)>($r8, 0);

        goto label9;

     label8:
        $r14 = r9.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        virtualinvoke $r14.<org.apache.batik.swing.svg.AbstractJSVGComponent: void loadSVGDocument(java.lang.String)>($r8);

     label9:
        return;
    }

    protected void fireLinkActivatedEvent(org.w3c.dom.svg.SVGAElement, java.lang.String)
    {
        java.lang.Object[] $r3;
        org.apache.batik.swing.svg.LinkActivationEvent $r4;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        java.util.List $r2;
        org.w3c.dom.svg.SVGAElement r5;
        int $i0, $i1, i2;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r7;
        java.lang.Object $r8;
        org.apache.batik.swing.svg.LinkActivationListener r9;
        java.lang.String r6;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r5 := @parameter0: org.w3c.dom.svg.SVGAElement;

        r6 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.List linkActivationListeners>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray()>();

        $i0 = lengthof $r3;

        if $i0 <= 0 goto label3;

        $r4 = new org.apache.batik.swing.svg.LinkActivationEvent;

        $r7 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        specialinvoke $r4.<org.apache.batik.swing.svg.LinkActivationEvent: void <init>(java.lang.Object,org.w3c.dom.svg.SVGAElement,java.lang.String)>($r7, r5, r6);

        i2 = 0;

        goto label2;

     label1:
        $r8 = $r3[i2];

        r9 = (org.apache.batik.swing.svg.LinkActivationListener) $r8;

        interfaceinvoke r9.<org.apache.batik.swing.svg.LinkActivationListener: void linkActivated(org.apache.batik.swing.svg.LinkActivationEvent)>($r4);

        i2 = i2 + 1;

     label2:
        $i1 = lengthof $r3;

        if i2 < $i1 goto label1;

     label3:
        return;
    }

    public void setSVGCursor(java.awt.Cursor)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r1;
        java.awt.Cursor r0, $r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r2, $r4;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r0 := @parameter0: java.awt.Cursor;

        $r2 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r3 = virtualinvoke $r2.<java.awt.Component: java.awt.Cursor getCursor()>();

        if r0 == $r3 goto label1;

        $r4 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        virtualinvoke $r4.<java.awt.Component: void setCursor(java.awt.Cursor)>(r0);

     label1:
        return;
    }

    public void setTextSelection(org.apache.batik.gvt.text.Mark, org.apache.batik.gvt.text.Mark)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.gvt.text.Mark r1, r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r3;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r1 := @parameter0: org.apache.batik.gvt.text.Mark;

        r2 := @parameter1: org.apache.batik.gvt.text.Mark;

        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        virtualinvoke $r3.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void select(org.apache.batik.gvt.text.Mark,org.apache.batik.gvt.text.Mark)>(r1, r2);

        return;
    }

    public void deselectAll()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        virtualinvoke $r1.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void deselectAll()>();

        return;
    }

    public java.lang.String getXMLParserClassName()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r4;
        java.lang.String $r3, $r6;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r5;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r4 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r5 = $r4.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $r6 = interfaceinvoke $r5.<org.apache.batik.swing.svg.SVGUserAgent: java.lang.String getXMLParserClassName()>();

        return $r6;

     label1:
        $r3 = staticinvoke <org.apache.batik.util.XMLResourceDescriptor: java.lang.String getXMLParserClassName()>();

        return $r3;
    }

    public boolean isXMLParserValidating()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r3;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r4;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r4 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $z0 = interfaceinvoke $r4.<org.apache.batik.swing.svg.SVGUserAgent: boolean isXMLParserValidating()>();

        return $z0;

     label1:
        return 0;
    }

    public java.awt.geom.AffineTransform getTransform()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        java.awt.geom.AffineTransform $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = staticinvoke <org.apache.batik.swing.svg.AbstractJSVGComponent: java.awt.geom.AffineTransform access$3001(org.apache.batik.swing.svg.AbstractJSVGComponent)>($r1);

        return $r2;
    }

    public void setTransform(java.awt.geom.AffineTransform)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent $r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        java.awt.geom.AffineTransform r1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        $r2 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        virtualinvoke $r2.<org.apache.batik.swing.gvt.AbstractJGVTComponent: void setRenderingTransform(java.awt.geom.AffineTransform)>(r1);

        return;
    }

    public java.lang.String getMedia()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r3;
        java.lang.String $r5;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r4;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r4 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $r5 = interfaceinvoke $r4.<org.apache.batik.swing.svg.SVGUserAgent: java.lang.String getMedia()>();

        return $r5;

     label1:
        return "screen";
    }

    public java.lang.String getAlternateStyleSheet()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r3;
        java.lang.String $r5;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r4;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r4 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $r5 = interfaceinvoke $r4.<org.apache.batik.swing.svg.SVGUserAgent: java.lang.String getAlternateStyleSheet()>();

        return $r5;

     label1:
        return null;
    }

    public java.awt.Point getClientAreaLocationOnScreen()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        java.awt.Point $r2;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = virtualinvoke $r1.<java.awt.Component: java.awt.Point getLocationOnScreen()>();

        return $r2;
    }

    public boolean hasFeature(java.lang.String)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r2;
        java.util.Set $r1;
        java.lang.String r0;
        boolean $z0;

        r2 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.batik.swing.svg.AbstractJSVGComponent: java.util.Set FEATURES>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        return $z0;
    }

    public boolean supportExtension(java.lang.String)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        java.util.Map $r4;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r5;
        java.lang.String r3;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r5 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r6 = $r5.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $z1 = interfaceinvoke $r6.<org.apache.batik.swing.svg.SVGUserAgent: boolean supportExtension(java.lang.String)>(r3);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $r4 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: java.util.Map extensions>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);

        return $z0;
    }

    public void registerExtension(org.apache.batik.bridge.BridgeExtension)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r2;
        java.util.Iterator $r1;
        java.util.Map $r3;
        org.apache.batik.bridge.BridgeExtension r0;
        java.lang.Object $r4;
        boolean $z0;

        r2 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r0 := @parameter0: org.apache.batik.bridge.BridgeExtension;

        $r1 = interfaceinvoke r0.<org.apache.batik.bridge.BridgeExtension: java.util.Iterator getImplementedExtensions()>();

        goto label2;

     label1:
        $r3 = r2.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: java.util.Map extensions>;

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r0);

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public void handleElement(org.w3c.dom.Element, java.lang.Object)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.w3c.dom.Element r4;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r3;
        java.lang.Object r5;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r6;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r4 := @parameter0: org.w3c.dom.Element;

        r5 := @parameter1: java.lang.Object;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r6 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        interfaceinvoke $r6.<org.apache.batik.swing.svg.SVGUserAgent: void handleElement(org.w3c.dom.Element,java.lang.Object)>(r4, r5);

     label1:
        return;
    }

    public org.apache.batik.bridge.ScriptSecurity getScriptSecurity(java.lang.String, org.apache.batik.util.ParsedURL, org.apache.batik.util.ParsedURL)
    {
        org.apache.batik.bridge.DefaultScriptSecurity $r3;
        org.apache.batik.bridge.ScriptSecurity $r9;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.util.ParsedURL r5, r6;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r7;
        java.lang.String r4;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r8;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.batik.util.ParsedURL;

        r6 := @parameter2: org.apache.batik.util.ParsedURL;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r7 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r8 = $r7.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $r9 = interfaceinvoke $r8.<org.apache.batik.swing.svg.SVGUserAgent: org.apache.batik.bridge.ScriptSecurity getScriptSecurity(java.lang.String,org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r4, r5, r6);

        return $r9;

     label1:
        $r3 = new org.apache.batik.bridge.DefaultScriptSecurity;

        specialinvoke $r3.<org.apache.batik.bridge.DefaultScriptSecurity: void <init>(java.lang.String,org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r4, r5, r6);

        return $r3;
    }

    public void checkLoadScript(java.lang.String, org.apache.batik.util.ParsedURL, org.apache.batik.util.ParsedURL) throws java.lang.SecurityException
    {
        org.apache.batik.bridge.ScriptSecurity $r6;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.util.ParsedURL r4, r5;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r7;
        java.lang.String r3;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r8;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.batik.util.ParsedURL;

        r5 := @parameter2: org.apache.batik.util.ParsedURL;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r7 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r8 = $r7.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        interfaceinvoke $r8.<org.apache.batik.swing.svg.SVGUserAgent: void checkLoadScript(java.lang.String,org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r3, r4, r5);

        goto label2;

     label1:
        $r6 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.bridge.ScriptSecurity getScriptSecurity(java.lang.String,org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r3, r4, r5);

        if $r6 == null goto label2;

        interfaceinvoke $r6.<org.apache.batik.bridge.ScriptSecurity: void checkLoadScript()>();

     label2:
        return;
    }

    public org.apache.batik.bridge.ExternalResourceSecurity getExternalResourceSecurity(org.apache.batik.util.ParsedURL, org.apache.batik.util.ParsedURL)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.bridge.RelaxedExternalResourceSecurity $r3;
        org.apache.batik.util.ParsedURL r4, r5;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r6;
        org.apache.batik.bridge.ExternalResourceSecurity $r8;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r7;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r4 := @parameter0: org.apache.batik.util.ParsedURL;

        r5 := @parameter1: org.apache.batik.util.ParsedURL;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r6 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r7 = $r6.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        $r8 = interfaceinvoke $r7.<org.apache.batik.swing.svg.SVGUserAgent: org.apache.batik.bridge.ExternalResourceSecurity getExternalResourceSecurity(org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r4, r5);

        return $r8;

     label1:
        $r3 = new org.apache.batik.bridge.RelaxedExternalResourceSecurity;

        specialinvoke $r3.<org.apache.batik.bridge.RelaxedExternalResourceSecurity: void <init>(org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r4, r5);

        return $r3;
    }

    public void checkLoadExternalResource(org.apache.batik.util.ParsedURL, org.apache.batik.util.ParsedURL) throws java.lang.SecurityException
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r0;
        org.apache.batik.util.ParsedURL r3, r4;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r1, $r6;
        org.apache.batik.bridge.ExternalResourceSecurity $r5;
        org.apache.batik.swing.svg.SVGUserAgent $r2, $r7;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r3 := @parameter0: org.apache.batik.util.ParsedURL;

        r4 := @parameter1: org.apache.batik.util.ParsedURL;

        $r1 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r2 = $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        if $r2 == null goto label1;

        $r6 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r7 = $r6.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.swing.svg.SVGUserAgent svgUserAgent>;

        interfaceinvoke $r7.<org.apache.batik.swing.svg.SVGUserAgent: void checkLoadExternalResource(org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r3, r4);

        goto label2;

     label1:
        $r5 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.bridge.ExternalResourceSecurity getExternalResourceSecurity(org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r3, r4);

        if $r5 == null goto label2;

        interfaceinvoke $r5.<org.apache.batik.bridge.ExternalResourceSecurity: void checkLoadExternalResource()>();

     label2:
        return;
    }

    public org.w3c.dom.svg.SVGDocument getBrokenLinkDocument(org.w3c.dom.Element, java.lang.String, java.lang.String)
    {
        org.w3c.dom.Text $r13, $r16;
        org.apache.batik.bridge.DocumentLoader $r5;
        java.net.URL $r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent r2;
        org.w3c.dom.Document $r7, $r9;
        org.w3c.dom.DOMImplementation $r8;
        org.apache.batik.bridge.BridgeException $r18, $r25;
        org.apache.batik.bridge.BridgeContext $r4, $r23, $r28;
        java.lang.Exception $r24;
        java.lang.Object[] $r21, $r27;
        org.w3c.dom.svg.SVGDocument r30, r31;
        org.w3c.dom.Node $r17;
        org.apache.batik.swing.svg.AbstractJSVGComponent $r3, $r19, $r26;
        java.lang.String $r6, $r12, r15, r22;
        org.w3c.dom.Element $r10, $r11, $r14, r20;
        java.lang.Class $r0, $r29;

        r2 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent;

        r20 := @parameter0: org.w3c.dom.Element;

        r22 := @parameter1: java.lang.String;

        r15 := @parameter2: java.lang.String;

        $r0 = <org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: java.lang.Class class$org$apache$batik$swing$svg$AbstractJSVGComponent>;

        if $r0 != null goto label1;

        $r29 = staticinvoke <org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: java.lang.Class class$(java.lang.String)>("org.apache.batik.swing.svg.AbstractJSVGComponent");

        <org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: java.lang.Class class$org$apache$batik$swing$svg$AbstractJSVGComponent> = $r29;

        goto label2;

     label1:
        $r29 = <org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: java.lang.Class class$org$apache$batik$swing$svg$AbstractJSVGComponent>;

     label2:
        $r1 = virtualinvoke $r29.<java.lang.Class: java.net.URL getResource(java.lang.String)>("resources/BrokenLink.svg");

        if $r1 != null goto label3;

        $r18 = new org.apache.batik.bridge.BridgeException;

        $r19 = r2.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r23 = $r19.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $r21 = newarray (java.lang.Object)[2];

        $r21[0] = r22;

        $r21[1] = r15;

        specialinvoke $r18.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>($r23, r20, "uri.image.broken", $r21);

        throw $r18;

     label3:
        $r3 = r2.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r4 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $r5 = virtualinvoke $r4.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.DocumentLoader getDocumentLoader()>();

     label4:
        $r6 = virtualinvoke $r1.<java.net.URL: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<org.apache.batik.bridge.DocumentLoader: org.w3c.dom.Document loadDocument(java.lang.String)>($r6);

        r30 = (org.w3c.dom.svg.SVGDocument) $r7;

        if r30 != null goto label5;

        return r30;

     label5:
        $r8 = staticinvoke <org.apache.batik.dom.svg.SVGDOMImplementation: org.w3c.dom.DOMImplementation getDOMImplementation()>();

        $r9 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: org.w3c.dom.Document deepCloneDocument(org.w3c.dom.Document,org.w3c.dom.DOMImplementation)>(r30, $r8);

        r31 = (org.w3c.dom.svg.SVGDocument) $r9;

        $r10 = interfaceinvoke r31.<org.w3c.dom.Document: org.w3c.dom.Element getElementById(java.lang.String)>("__More_About");

        if $r10 != null goto label6;

        return r31;

     label6:
        $r11 = interfaceinvoke r31.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "title");

        $r12 = staticinvoke <org.apache.batik.swing.svg.Messages: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("broken.link.title", null);

        $r13 = interfaceinvoke r31.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r12);

        interfaceinvoke $r11.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r13);

        $r14 = interfaceinvoke r31.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "desc");

        $r16 = interfaceinvoke r31.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>(r15);

        interfaceinvoke $r14.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r16);

        $r17 = interfaceinvoke $r10.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        interfaceinvoke $r10.<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>($r14, $r17);

        interfaceinvoke $r10.<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>($r11, $r14);

     label7:
        goto label9;

     label8:
        $r24 := @caughtexception;

        $r25 = new org.apache.batik.bridge.BridgeException;

        $r26 = r2.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgent: org.apache.batik.swing.svg.AbstractJSVGComponent this$0>;

        $r28 = $r26.<org.apache.batik.swing.svg.AbstractJSVGComponent: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $r27 = newarray (java.lang.Object)[2];

        $r27[0] = r22;

        $r27[1] = r15;

        specialinvoke $r25.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>($r28, r20, $r24, "uri.image.broken", $r27);

        throw $r25;

     label9:
        return r31;

        catch java.lang.Exception from label4 to label7 with label8;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
