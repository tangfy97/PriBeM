public class org.springframework.aop.aspectj.AspectJAroundAdvice extends org.springframework.aop.aspectj.AbstractAspectJAdvice implements org.aopalliance.intercept.MethodInterceptor
{

    public void <init>(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory)
    {
        org.springframework.aop.aspectj.AspectJAroundAdvice r0;
        org.springframework.aop.aspectj.AspectInstanceFactory r3;
        java.lang.reflect.Method r1;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r2;

        r0 := @this: org.springframework.aop.aspectj.AspectJAroundAdvice;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r3 := @parameter2: org.springframework.aop.aspectj.AspectInstanceFactory;

        specialinvoke r0.<org.springframework.aop.aspectj.AbstractAspectJAdvice: void <init>(java.lang.reflect.Method,org.springframework.aop.aspectj.AspectJExpressionPointcut,org.springframework.aop.aspectj.AspectInstanceFactory)>(r1, r2, r3);

        return;
    }

    public boolean isBeforeAdvice()
    {
        org.springframework.aop.aspectj.AspectJAroundAdvice r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJAroundAdvice;

        return 0;
    }

    public boolean isAfterAdvice()
    {
        org.springframework.aop.aspectj.AspectJAroundAdvice r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJAroundAdvice;

        return 0;
    }

    protected boolean supportsProceedingJoinPoint()
    {
        org.springframework.aop.aspectj.AspectJAroundAdvice r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJAroundAdvice;

        return 1;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.IllegalStateException $r11;
        org.aspectj.weaver.tools.JoinPointMatch $r4;
        org.aopalliance.intercept.MethodInvocation r0;
        org.springframework.aop.aspectj.AspectJAroundAdvice r2;
        java.lang.Object $r5;
        java.lang.StringBuilder $r8, $r10;
        java.lang.String $r9;
        org.springframework.aop.ProxyMethodInvocation r1;
        org.aspectj.lang.JoinPoint $r12;
        org.aspectj.lang.ProceedingJoinPoint $r3;
        boolean $z0;

        r2 := @this: org.springframework.aop.aspectj.AspectJAroundAdvice;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $z0 = r0 instanceof org.springframework.aop.ProxyMethodInvocation;

        if $z0 != 0 goto label1;

        $r11 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("MethodInvocation is not a Spring ProxyMethodInvocation: ");

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label1:
        r1 = (org.springframework.aop.ProxyMethodInvocation) r0;

        $r3 = virtualinvoke r2.<org.springframework.aop.aspectj.AspectJAroundAdvice: org.aspectj.lang.ProceedingJoinPoint lazyGetProceedingJoinPoint(org.springframework.aop.ProxyMethodInvocation)>(r1);

        $r4 = virtualinvoke r2.<org.springframework.aop.aspectj.AspectJAroundAdvice: org.aspectj.weaver.tools.JoinPointMatch getJoinPointMatch(org.springframework.aop.ProxyMethodInvocation)>(r1);

        $r12 = (org.aspectj.lang.JoinPoint) $r3;

        $r5 = virtualinvoke r2.<org.springframework.aop.aspectj.AspectJAroundAdvice: java.lang.Object invokeAdviceMethod(org.aspectj.lang.JoinPoint,org.aspectj.weaver.tools.JoinPointMatch,java.lang.Object,java.lang.Throwable)>($r12, $r4, null, null);

        return $r5;
    }

    protected org.aspectj.lang.ProceedingJoinPoint lazyGetProceedingJoinPoint(org.springframework.aop.ProxyMethodInvocation)
    {
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint $r0;
        org.springframework.aop.aspectj.AspectJAroundAdvice r2;
        org.springframework.aop.ProxyMethodInvocation r1;

        r2 := @this: org.springframework.aop.aspectj.AspectJAroundAdvice;

        r1 := @parameter0: org.springframework.aop.ProxyMethodInvocation;

        $r0 = new org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint;

        specialinvoke $r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint: void <init>(org.springframework.aop.ProxyMethodInvocation)>(r1);

        return $r0;
    }
}
