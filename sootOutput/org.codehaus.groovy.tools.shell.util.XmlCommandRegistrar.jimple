public class org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar extends java.lang.Object implements groovy.lang.GroovyObject
{
    private final org.codehaus.groovy.tools.shell.util.Logger log;
    private final org.codehaus.groovy.tools.shell.Shell shell;
    private final java.lang.ClassLoader classLoader;
    transient groovy.lang.MetaClass metaClass;
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119696909;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter;
    static java.lang.Class class$java$lang$ClassLoader;
    static java.lang.Class class$org$codehaus$groovy$tools$shell$util$Logger;
    static java.lang.Class class$org$codehaus$groovy$tools$shell$Shell;

    public void <init>(org.codehaus.groovy.tools.shell.Shell, java.lang.ClassLoader)
    {
        boolean $z0, $z1;
        org.codehaus.groovy.tools.shell.util.Logger $r11, $r14;
        java.lang.ClassLoader r24, $r31;
        java.lang.Object[] $r6, $r16;
        java.lang.StringBuffer $r23, $r25;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r0;
        groovy.lang.MetaClass $r19, $r21;
        java.lang.Class $r1, r2, $r3, r4, $r5, $r9, $r12, $r15, $r26, $r29, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39;
        java.lang.Object $r7, $r8, $r10, $r13, $r17, $r18, $r20, $r27, $r30;
        org.codehaus.groovy.tools.shell.Shell r22, $r28;

        r0 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        r22 := @parameter0: org.codehaus.groovy.tools.shell.Shell;

        r24 := @parameter1: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0>;

        if $r1 != null goto label01;

        $r32 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0> = $r32;

        goto label02;

     label01:
        $r32 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0>;

     label02:
        r2 = $r32;

        $r3 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass>;

        if $r3 != null goto label03;

        $r33 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass> = $r33;

        goto label04;

     label03:
        $r33 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        r4 = $r33;

        $r5 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$tools$shell$util$Logger>;

        if $r5 != null goto label05;

        $r34 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.Logger");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$tools$shell$util$Logger> = $r34;

        goto label06;

     label05:
        $r34 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$tools$shell$util$Logger>;

     label06:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getGroovyObjectProperty(java.lang.Class,groovy.lang.GroovyObject,java.lang.String)>(r2, r0, "class");

        $r6[0] = $r7;

        $r8 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r2, $r34, "create", $r6);

        $r9 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$tools$shell$util$Logger>;

        if $r9 != null goto label07;

        $r35 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.Logger");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$tools$shell$util$Logger> = $r35;

        goto label08;

     label07:
        $r35 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$tools$shell$util$Logger>;

     label08:
        $r10 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r8, $r35);

        $r11 = (org.codehaus.groovy.tools.shell.util.Logger) $r10;

        $r12 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$tools$shell$util$Logger>;

        if $r12 != null goto label09;

        $r36 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.Logger");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$tools$shell$util$Logger> = $r36;

        goto label10;

     label09:
        $r36 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$tools$shell$util$Logger>;

     label10:
        $r13 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r11, $r36);

        $r14 = (org.codehaus.groovy.tools.shell.util.Logger) $r13;

        r0.<org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: org.codehaus.groovy.tools.shell.util.Logger log> = $r14;

        $r15 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r15 != null goto label11;

        $r37 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r37;

        goto label12;

     label11:
        $r37 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label12:
        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = r0;

        $r17 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeStaticMethodN(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r2, $r37, "initMetaClass", $r16);

        $r18 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r17, r4);

        $r19 = (groovy.lang.MetaClass) $r18;

        $r20 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r19, r4);

        $r21 = (groovy.lang.MetaClass) $r20;

        r0.<org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: groovy.lang.MetaClass metaClass> = $r21;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>(r22);

        if $z0 == 0 goto label13;

        goto label14;

     label13:
        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>(java.lang.String)>("shell. Values: ");

        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("shell = ");

        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r22);

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void assertFailed(java.lang.Object,java.lang.Object)>($r23, null);

     label14:
        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>(r24);

        if $z1 == 0 goto label15;

        goto label16;

     label15:
        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>(java.lang.String)>("classLoader. Values: ");

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("classLoader = ");

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r24);

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void assertFailed(java.lang.Object,java.lang.Object)>($r25, null);

     label16:
        $r26 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$tools$shell$Shell>;

        if $r26 != null goto label17;

        $r38 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.Shell");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$tools$shell$Shell> = $r38;

        goto label18;

     label17:
        $r38 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$tools$shell$Shell>;

     label18:
        $r27 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r22, $r38);

        $r28 = (org.codehaus.groovy.tools.shell.Shell) $r27;

        r0.<org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: org.codehaus.groovy.tools.shell.Shell shell> = $r28;

        $r29 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$java$lang$ClassLoader>;

        if $r29 != null goto label19;

        $r39 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("java.lang.ClassLoader");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$java$lang$ClassLoader> = $r39;

        goto label20;

     label19:
        $r39 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$java$lang$ClassLoader>;

     label20:
        $r30 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r24, $r39);

        $r31 = (java.lang.ClassLoader) $r30;

        r0.<org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.ClassLoader classLoader> = $r31;

        return;
    }

    public void register(java.net.URL)
    {
        java.lang.Object[] $r8, $r10, $r12;
        java.net.URL r3;
        java.lang.String[] $r13;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1 $r9;
        java.lang.StringBuffer $r4;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r5;
        boolean $z0, $z1;
        org.codehaus.groovy.runtime.GStringImpl $r11;
        java.lang.Class $r0, r1, $r2, $r15, $r16;
        java.lang.Object $r7;
        org.codehaus.groovy.tools.shell.util.Logger $r6, $r14;

        r5 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        r3 := @parameter0: java.net.URL;

        $r0 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r15 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0> = $r15;

        goto label2;

     label1:
        $r15 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0>;

     label2:
        r1 = $r15;

        $r2 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r16 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass> = $r16;

        goto label4;

     label3:
        $r16 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>(r3);

        if $z0 == 0 goto label5;

        goto label6;

     label5:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(java.lang.String)>("url. Values: ");

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("url = ");

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void assertFailed(java.lang.Object,java.lang.Object)>($r4, null);

     label6:
        $r6 = r5.<org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: org.codehaus.groovy.tools.shell.util.Logger log>;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r6, "debugEnabled");

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r7);

        if $z1 == 0 goto label7;

        $r14 = r5.<org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: org.codehaus.groovy.tools.shell.util.Logger log>;

        $r10 = newarray (java.lang.Object)[1];

        $r11 = new org.codehaus.groovy.runtime.GStringImpl;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r3;

        $r13 = newarray (java.lang.String)[2];

        $r13[0] = "Registering commands from: ";

        $r13[1] = "";

        specialinvoke $r11.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r12, $r13);

        $r10[0] = $r11;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r14, "debug", $r10);

        goto label7;

     label7:
        $r8 = newarray (java.lang.Object)[1];

        $r9 = new org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1;

        specialinvoke $r9.<org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar$_register_closure1: void <init>(java.lang.Object,java.lang.Object)>(r5, r5);

        $r8[0] = $r9;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "withReader", $r8);

        return;
    }

    public groovy.lang.MetaClass getMetaClass()
    {
        java.lang.Object[] $r10;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r4;
        boolean $z0;
        groovy.lang.MetaClass $r5, $r6, $r8, $r13, $r15;
        java.lang.Class $r0, r1, $r2, r3, $r9, $r16, $r17, $r18;
        java.lang.Object $r7, $r11, $r12, $r14;

        r4 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        $r0 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r16 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0> = $r16;

        goto label2;

     label1:
        $r16 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0>;

     label2:
        r1 = $r16;

        $r2 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r17 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass> = $r17;

        goto label4;

     label3:
        $r17 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r3 = $r17;

        $r5 = r4.<org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: groovy.lang.MetaClass metaClass>;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r5, null);

        if $z0 == 0 goto label7;

        $r9 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r9 != null goto label5;

        $r18 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r18;

        goto label6;

     label5:
        $r18 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label6:
        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r4;

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeStaticMethodN(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r1, $r18, "initMetaClass", $r10);

        $r12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r11, r3);

        $r13 = (groovy.lang.MetaClass) $r12;

        $r14 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r13, r3);

        $r15 = (groovy.lang.MetaClass) $r14;

        r4.<org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: groovy.lang.MetaClass metaClass> = $r15;

        goto label7;

     label7:
        $r6 = r4.<org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: groovy.lang.MetaClass metaClass>;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r6, r3);

        $r8 = (groovy.lang.MetaClass) $r7;

        return $r8;
    }

    public void setMetaClass(groovy.lang.MetaClass)
    {
        groovy.lang.MetaClass r3;
        java.lang.Class $r0, $r1, $r4, $r5;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r2;

        r2 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        r3 := @parameter0: groovy.lang.MetaClass;

        $r0 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0> = $r4;

        goto label2;

     label1:
        $r4 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0>;

     label2:
        $r1 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r5 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass> = $r5;

        goto label4;

     label3:
        $r5 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r2.<org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: groovy.lang.MetaClass metaClass> = r3;

        return;
    }

    public java.lang.Object invokeMethod(java.lang.String, java.lang.Object)
    {
        groovy.lang.MetaClass $r3;
        java.lang.Class $r0, $r1, $r7, $r8;
        java.lang.Object r5, $r6;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r2;
        java.lang.String r4;

        r2 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r0 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0>;

     label2:
        $r1 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: groovy.lang.MetaClass getMetaClass()>();

        $r6 = interfaceinvoke $r3.<groovy.lang.MetaClass: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>(r2, r4, r5);

        return $r6;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        groovy.lang.MetaClass $r3;
        java.lang.Class $r0, $r1, $r6, $r7;
        java.lang.Object $r5;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r2;
        java.lang.String r4;

        r2 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        r4 := @parameter0: java.lang.String;

        $r0 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0>;

     label2:
        $r1 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: groovy.lang.MetaClass getMetaClass()>();

        $r5 = interfaceinvoke $r3.<groovy.lang.MetaClass: java.lang.Object getProperty(java.lang.Object,java.lang.String)>(r2, r4);

        return $r5;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        groovy.lang.MetaClass $r3;
        java.lang.Class $r0, $r1, $r6, $r7;
        java.lang.Object r5;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r2;
        java.lang.String r4;

        r2 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r0 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0>;

     label2:
        $r1 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: groovy.lang.MetaClass getMetaClass()>();

        interfaceinvoke $r3.<groovy.lang.MetaClass: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>(r2, r4, r5);

        return;
    }

    static void <clinit>()
    {
        java.lang.Long $r2, $r3, $r4, $r5;
        java.lang.Class $r0, $r1, $r6, $r7;

        $r0 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$0>;

     label2:
        $r1 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1239119696909L);

        $r3 = (java.lang.Long) $r2;

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Long __timeStamp> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(0L);

        $r5 = (java.lang.Long) $r4;

        <org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar: java.lang.Long __timeStamp__239_neverHappen1239119696909> = $r5;

        return;
    }

    void super$1$wait()
    {
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    java.lang.String super$1$toString()
    {
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    void super$1$wait(long)
    {
        long l0;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    void super$1$wait(long, int)
    {
        int i1;
        long l0;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    void super$1$notify()
    {
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$1$notifyAll()
    {
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    java.lang.Class super$1$getClass()
    {
        java.lang.Class $r1;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    boolean super$1$equals(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    java.lang.Object super$1$clone()
    {
        java.lang.Object $r1;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    int super$1$hashCode()
    {
        int $i0;
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    void super$1$finalize()
    {
        org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.XmlCommandRegistrar;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
