public abstract class org.apache.xmlbeans.impl.values.JavaIntegerHolder extends org.apache.xmlbeans.impl.values.XmlObjectBase
{
    private java.math.BigInteger _value;
    private static java.math.BigInteger _maxlong;
    private static java.math.BigInteger _minlong;

    public void <init>()
    {
        org.apache.xmlbeans.impl.values.JavaIntegerHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntegerHolder;

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void <init>()>();

        return;
    }

    public org.apache.xmlbeans.SchemaType schemaType()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl $r0;
        org.apache.xmlbeans.impl.values.JavaIntegerHolder r1;

        r1 := @this: org.apache.xmlbeans.impl.values.JavaIntegerHolder;

        $r0 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_INTEGER>;

        return $r0;
    }

    protected java.lang.String compute_text(org.apache.xmlbeans.impl.values.NamespaceManager)
    {
        org.apache.xmlbeans.impl.values.JavaIntegerHolder r0;
        java.math.BigInteger $r1;
        org.apache.xmlbeans.impl.values.NamespaceManager r3;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntegerHolder;

        r3 := @parameter0: org.apache.xmlbeans.impl.values.NamespaceManager;

        $r1 = r0.<org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _value>;

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.lang.String toString()>();

        return $r2;
    }

    protected void set_text(java.lang.String)
    {
        org.apache.xmlbeans.impl.values.JavaIntegerHolder r0;
        org.apache.xmlbeans.impl.common.ValidationContext $r2;
        java.math.BigInteger $r3;
        java.lang.String r1;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntegerHolder;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.xmlbeans.impl.values.JavaIntegerHolder: org.apache.xmlbeans.impl.common.ValidationContext _voorVc>;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger lex(java.lang.String,org.apache.xmlbeans.impl.common.ValidationContext)>(r1, $r2);

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaIntegerHolder: void set_BigInteger(java.math.BigInteger)>($r3);

        return;
    }

    public static java.math.BigInteger lex(java.lang.String, org.apache.xmlbeans.impl.common.ValidationContext)
    {
        java.lang.Object[] $r2;
        char $c1;
        java.lang.Exception $r0;
        org.apache.xmlbeans.impl.common.ValidationContext r1;
        int $i0, $i2;
        java.math.BigInteger $r5;
        java.lang.String r3;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.xmlbeans.impl.common.ValidationContext;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $c1 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c1;

        if $i2 != 43 goto label1;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        $r5 = new java.math.BigInteger;

        specialinvoke $r5.<java.math.BigInteger: void <init>(java.lang.String)>(r3);

     label2:
        return $r5;

     label3:
        $r0 := @caughtexception;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        interfaceinvoke r1.<org.apache.xmlbeans.impl.common.ValidationContext: void invalid(java.lang.String,java.lang.Object[])>("integer", $r2);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void set_nil()
    {
        org.apache.xmlbeans.impl.values.JavaIntegerHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntegerHolder;

        r0.<org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _value> = null;

        return;
    }

    public java.math.BigDecimal getBigDecimalValue()
    {
        java.math.BigDecimal $r3;
        org.apache.xmlbeans.impl.values.JavaIntegerHolder r0;
        java.math.BigInteger $r1, $r2;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntegerHolder;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaIntegerHolder: void check_dated()>();

        $r1 = r0.<org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _value>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = new java.math.BigDecimal;

        $r2 = r0.<org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _value>;

        specialinvoke $r3.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r2);

     label2:
        return $r3;
    }

    public java.math.BigInteger getBigIntegerValue()
    {
        org.apache.xmlbeans.impl.values.JavaIntegerHolder r0;
        java.math.BigInteger $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntegerHolder;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaIntegerHolder: void check_dated()>();

        $r1 = r0.<org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _value>;

        return $r1;
    }

    protected void set_BigDecimal(java.math.BigDecimal)
    {
        java.math.BigDecimal r1;
        org.apache.xmlbeans.impl.values.JavaIntegerHolder r0;
        java.math.BigInteger $r2;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntegerHolder;

        r1 := @parameter0: java.math.BigDecimal;

        $r2 = virtualinvoke r1.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        r0.<org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _value> = $r2;

        return;
    }

    protected void set_BigInteger(java.math.BigInteger)
    {
        org.apache.xmlbeans.impl.values.JavaIntegerHolder r0;
        java.math.BigInteger r1;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntegerHolder;

        r1 := @parameter0: java.math.BigInteger;

        r0.<org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _value> = r1;

        return;
    }

    protected int compare_to(org.apache.xmlbeans.XmlObject)
    {
        org.apache.xmlbeans.impl.values.JavaIntegerHolder r3;
        org.apache.xmlbeans.impl.values.XmlObjectBase $r4;
        int $i0, $i1, $i2, $i3;
        java.math.BigInteger $r5, $r6;
        org.apache.xmlbeans.XmlObject r0;
        org.apache.xmlbeans.SchemaType $r2;
        org.apache.xmlbeans.SimpleValue $r1;

        r3 := @this: org.apache.xmlbeans.impl.values.JavaIntegerHolder;

        r0 := @parameter0: org.apache.xmlbeans.XmlObject;

        $r1 = (org.apache.xmlbeans.SimpleValue) r0;

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SimpleValue: org.apache.xmlbeans.SchemaType instanceType()>();

        $i0 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: int getDecimalSize()>();

        if $i0 <= 1000000 goto label1;

        $i2 = interfaceinvoke r0.<org.apache.xmlbeans.XmlObject: int compareTo(java.lang.Object)>(r3);

        $i3 = neg $i2;

        return $i3;

     label1:
        $r5 = r3.<org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _value>;

        $r4 = (org.apache.xmlbeans.impl.values.XmlObjectBase) r0;

        $r6 = virtualinvoke $r4.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.math.BigInteger bigIntegerValue()>();

        $i1 = virtualinvoke $r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        return $i1;
    }

    protected boolean equal_to(org.apache.xmlbeans.XmlObject)
    {
        org.apache.xmlbeans.impl.values.JavaIntegerHolder r3;
        org.apache.xmlbeans.impl.values.XmlObjectBase $r4;
        int $i0;
        java.math.BigInteger $r5, $r6;
        org.apache.xmlbeans.XmlObject r0;
        org.apache.xmlbeans.SchemaType $r2;
        org.apache.xmlbeans.SimpleValue $r1;
        boolean $z0, $z1;

        r3 := @this: org.apache.xmlbeans.impl.values.JavaIntegerHolder;

        r0 := @parameter0: org.apache.xmlbeans.XmlObject;

        $r1 = (org.apache.xmlbeans.SimpleValue) r0;

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SimpleValue: org.apache.xmlbeans.SchemaType instanceType()>();

        $i0 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: int getDecimalSize()>();

        if $i0 <= 1000000 goto label1;

        $z1 = interfaceinvoke r0.<org.apache.xmlbeans.XmlObject: boolean valueEquals(org.apache.xmlbeans.XmlObject)>(r3);

        return $z1;

     label1:
        $r5 = r3.<org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _value>;

        $r4 = (org.apache.xmlbeans.impl.values.XmlObjectBase) r0;

        $r6 = virtualinvoke $r4.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.math.BigInteger bigIntegerValue()>();

        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r6);

        return $z0;
    }

    protected int value_hash_code()
    {
        org.apache.xmlbeans.impl.values.JavaIntegerHolder r0;
        long $l3, $l4, $l5, $l6;
        int $i0, $i1, $i2, $i7;
        java.math.BigInteger $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaIntegerHolder;

        $r2 = r0.<org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _value>;

        $r1 = <org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _maxlong>;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i0 > 0 goto label1;

        $r5 = r0.<org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _value>;

        $r4 = <org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _minlong>;

        $i2 = virtualinvoke $r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r4);

        if $i2 >= 0 goto label2;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _value>;

        $i1 = virtualinvoke $r3.<java.math.BigInteger: int hashCode()>();

        return $i1;

     label2:
        $r6 = r0.<org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _value>;

        $l3 = virtualinvoke $r6.<java.math.BigInteger: long longValue()>();

        $l4 = $l3 >> 32;

        $l5 = $l4 * 19L;

        $l6 = $l5 + $l3;

        $i7 = (int) $l6;

        return $i7;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0, $r1;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(9223372036854775807L);

        <org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _maxlong> = $r0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-9223372036854775808L);

        <org.apache.xmlbeans.impl.values.JavaIntegerHolder: java.math.BigInteger _minlong> = $r1;

        return;
    }
}
