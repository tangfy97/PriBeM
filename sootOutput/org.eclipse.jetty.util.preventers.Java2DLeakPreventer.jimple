public class org.eclipse.jetty.util.preventers.Java2DLeakPreventer extends org.eclipse.jetty.util.preventers.AbstractLeakPreventer
{

    public void <init>()
    {
        org.eclipse.jetty.util.preventers.Java2DLeakPreventer r0;

        r0 := @this: org.eclipse.jetty.util.preventers.Java2DLeakPreventer;

        specialinvoke r0.<org.eclipse.jetty.util.preventers.AbstractLeakPreventer: void <init>()>();

        return;
    }

    public void prevent(java.lang.ClassLoader)
    {
        org.eclipse.jetty.util.preventers.Java2DLeakPreventer r3;
        java.lang.ClassNotFoundException $r1;
        java.lang.ClassLoader r0;
        org.eclipse.jetty.util.log.Logger $r2;

        r3 := @this: org.eclipse.jetty.util.preventers.Java2DLeakPreventer;

        r0 := @parameter0: java.lang.ClassLoader;

     label1:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("sun.java2d.Disposer", 1, r0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = <org.eclipse.jetty.util.preventers.Java2DLeakPreventer: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r2.<org.eclipse.jetty.util.log.Logger: void ignore(java.lang.Throwable)>($r1);

     label4:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
