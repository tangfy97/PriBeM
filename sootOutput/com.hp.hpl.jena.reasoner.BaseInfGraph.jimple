public abstract class com.hp.hpl.jena.reasoner.BaseInfGraph extends com.hp.hpl.jena.graph.impl.GraphBase implements com.hp.hpl.jena.reasoner.InfGraph
{
    protected com.hp.hpl.jena.reasoner.Reasoner reasoner;
    protected com.hp.hpl.jena.reasoner.FGraph fdata;
    protected boolean recordDerivations;
    private volatile boolean isPrepared;
    protected volatile int version;

    public com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.graph.Graph $r1;
        com.hp.hpl.jena.shared.PrefixMapping $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.graph.Graph getRawGraph()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        return $r2;
    }

    public void <init>(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.reasoner.Reasoner)
    {
        com.hp.hpl.jena.reasoner.FGraph $r1;
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.reasoner.Reasoner r3;
        com.hp.hpl.jena.graph.Graph r2;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r3 := @parameter1: com.hp.hpl.jena.reasoner.Reasoner;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: boolean isPrepared> = 0;

        r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: int version> = 0;

        $r1 = new com.hp.hpl.jena.reasoner.FGraph;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: void <init>(com.hp.hpl.jena.graph.Graph)>(r2);

        r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata> = $r1;

        r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.reasoner.Reasoner reasoner> = r3;

        return;
    }

    public com.hp.hpl.jena.graph.Capabilities getCapabilities()
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.reasoner.Reasoner $r3;
        com.hp.hpl.jena.graph.Capabilities $r1, $r2, $r4;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.graph.Capabilities capabilities>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.reasoner.Reasoner getReasoner()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.reasoner.Reasoner: com.hp.hpl.jena.graph.Capabilities getGraphCapabilities()>();

        return $r4;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.graph.Capabilities capabilities>;

        return $r2;
    }

    public com.hp.hpl.jena.graph.BulkUpdateHandler getBulkUpdateHandler()
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.graph.BulkUpdateHandler $r1, $r2;
        com.hp.hpl.jena.reasoner.BaseInfGraph$InfBulkUpdateHandler $r3;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.graph.BulkUpdateHandler bulkHandler>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.reasoner.BaseInfGraph$InfBulkUpdateHandler;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.BaseInfGraph$InfBulkUpdateHandler: void <init>(com.hp.hpl.jena.reasoner.BaseInfGraph)>(r0);

        r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.graph.BulkUpdateHandler bulkHandler> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.graph.BulkUpdateHandler bulkHandler>;

        return $r2;
    }

    public void remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.graph.GraphEventManager $r5;
        com.hp.hpl.jena.graph.GraphEvents $r6;
        com.hp.hpl.jena.graph.Node r2, r3, r4;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.graph.Graph getRawGraph()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: void remove(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: void discardState()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: void rebind()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        $r6 = staticinvoke <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents remove(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        interfaceinvoke $r5.<com.hp.hpl.jena.graph.GraphEventManager: void notifyEvent(com.hp.hpl.jena.graph.Graph,java.lang.Object)>(r0, $r6);

        return;
    }

    public void clear()
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.graph.GraphEventManager $r2;
        com.hp.hpl.jena.graph.GraphEvents $r3;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.graph.Graph getRawGraph()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: void clear()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: void discardState()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: void rebind()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        $r3 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents removeAll>;

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.GraphEventManager: void notifyEvent(com.hp.hpl.jena.graph.Graph,java.lang.Object)>(r0, $r3);

        return;
    }

    public com.hp.hpl.jena.graph.TransactionHandler getTransactionHandler()
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph$InfTransactionHandler $r0;
        com.hp.hpl.jena.reasoner.BaseInfGraph r1;

        r1 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        $r0 = new com.hp.hpl.jena.reasoner.BaseInfGraph$InfTransactionHandler;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.BaseInfGraph$InfTransactionHandler: void <init>(com.hp.hpl.jena.reasoner.BaseInfGraph)>(r1);

        return $r0;
    }

    protected void discardState()
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        return;
    }

    public com.hp.hpl.jena.graph.Graph getRawGraph()
    {
        com.hp.hpl.jena.reasoner.FGraph $r1;
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.graph.Graph $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        return $r2;
    }

    public com.hp.hpl.jena.reasoner.Reasoner getReasoner()
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.reasoner.Reasoner $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.reasoner.Reasoner reasoner>;

        return $r1;
    }

    public synchronized void rebind(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.FGraph $r1;
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.graph.Graph r2;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = new com.hp.hpl.jena.reasoner.FGraph;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: void <init>(com.hp.hpl.jena.graph.Graph)>(r2);

        r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata> = $r1;

        r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: boolean isPrepared> = 0;

        return;
    }

    public synchronized void rebind()
    {
        int $i0, $i1;
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        $i0 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: int version>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: int version> = $i1;

        r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: boolean isPrepared> = 0;

        return;
    }

    public void reset()
    {
        int $i0, $i1;
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        $i0 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: int version>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: int version> = $i1;

        return;
    }

    public synchronized void prepare()
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: boolean isPrepared> = 1;

        return;
    }

    public com.hp.hpl.jena.graph.Graph getDeductionsGraph()
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        return null;
    }

    public com.hp.hpl.jena.graph.Node getGlobalProperty(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph r6;
        java.lang.StringBuilder $r1, $r2, $r4;
        com.hp.hpl.jena.graph.Node r3;
        java.lang.String $r5;
        com.hp.hpl.jena.reasoner.ReasonerException $r0;

        r6 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.reasoner.ReasonerException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Global property not implemented: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    public boolean testGlobalProperty(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, $r2;
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        java.lang.Boolean $r11;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.Object $r10;
        java.lang.String $r9;
        com.hp.hpl.jena.reasoner.ReasonerException $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.graph.Node getGlobalProperty(com.hp.hpl.jena.graph.Node)>(r1);

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $z1 = $r10 instanceof java.lang.Boolean;

        if $z1 == 0 goto label1;

        $r11 = (java.lang.Boolean) $r10;

        $z2 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;

     label1:
        $r3 = new com.hp.hpl.jena.reasoner.ReasonerException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Global property test returned non-boolean value\nTest was: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nResult was: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>($r9);

        throw $r3;
    }

    public com.hp.hpl.jena.reasoner.ValidityReport validate()
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.reasoner.StandardValidityReport $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: void checkOpen()>();

        $r1 = new com.hp.hpl.jena.reasoner.StandardValidityReport;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.StandardValidityReport: void <init>()>();

        return $r1;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6;
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.graph.Node r3, r4, r5;
        com.hp.hpl.jena.reasoner.InfGraph $r2;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 := @parameter2: com.hp.hpl.jena.graph.Node;

        r1 := @parameter3: com.hp.hpl.jena.graph.Graph;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.reasoner.InfGraph cloneWithPremises(com.hp.hpl.jena.graph.Graph)>(r1);

        $r6 = interfaceinvoke $r2.<com.hp.hpl.jena.reasoner.InfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r3, r4, r5);

        return $r6;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4;
        com.hp.hpl.jena.graph.TripleMatch r1;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchSubject()>();

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchPredicate()>();

        $r4 = interfaceinvoke r1.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchObject()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r3, $r4);

        return $r5;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.FGraph $r5;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6;
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.reasoner.TriplePattern $r1;
        com.hp.hpl.jena.graph.Node r2, r3, r4;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = new com.hp.hpl.jena.reasoner.TriplePattern;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        $r5 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder)>($r1, $r5);

        return $r6;
    }

    public abstract com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder);

    public com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.reasoner.FGraph $r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.reasoner.TriplePattern r1;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: void checkOpen()>();

        $r2 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder)>(r1, $r2);

        return $r3;
    }

    public void setDerivationLogging(boolean)
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: boolean recordDerivations> = z0;

        return;
    }

    public java.util.Iterator getDerivation(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        return null;
    }

    public int graphBaseSize()
    {
        com.hp.hpl.jena.reasoner.FGraph $r1;
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        int $i0;
        com.hp.hpl.jena.graph.Graph $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: void checkOpen()>();

        $r1 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        $i0 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        com.hp.hpl.jena.reasoner.FGraph $r1;
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.graph.Graph $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: boolean isEmpty()>();

        return $z0;
    }

    public void close()
    {
        com.hp.hpl.jena.reasoner.FGraph $r1;
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        com.hp.hpl.jena.graph.Graph $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        $z0 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: boolean closed>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void close()>();

        r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata> = null;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void close()>();

     label1:
        return;
    }

    public int getVersion()
    {
        int $i0;
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        $i0 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: int version>;

        return $i0;
    }

    public synchronized void performAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.FGraph $r1;
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        int $i0, $i1;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.graph.Triple r3;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $i0 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: int version>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: int version> = $i1;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: void requirePrepared()>();

        $r1 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r3);

        return;
    }

    public void performDelete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.FGraph $r1;
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        int $i0, $i1;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.graph.Triple r3;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $i0 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: int version>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: int version> = $i1;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: void requirePrepared()>();

        $r1 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r3);

        return;
    }

    public abstract com.hp.hpl.jena.graph.Graph getSchemaGraph();

    public com.hp.hpl.jena.reasoner.InfGraph cloneWithPremises(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.Reasoner $r8;
        com.hp.hpl.jena.reasoner.InfGraph $r9;
        com.hp.hpl.jena.reasoner.BaseInfGraph r1, r5;
        com.hp.hpl.jena.graph.compose.MultiUnion $r0;
        com.hp.hpl.jena.graph.Graph $r2, r3, $r4, $r6, $r7;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r0 = new com.hp.hpl.jena.graph.compose.MultiUnion;

        specialinvoke $r0.<com.hp.hpl.jena.graph.compose.MultiUnion: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.graph.Graph getRawGraph()>();

        virtualinvoke $r0.<com.hp.hpl.jena.graph.compose.MultiUnion: void addGraph(com.hp.hpl.jena.graph.Graph)>($r2);

        virtualinvoke $r0.<com.hp.hpl.jena.graph.compose.MultiUnion: void setBaseGraph(com.hp.hpl.jena.graph.Graph)>($r2);

        virtualinvoke $r0.<com.hp.hpl.jena.graph.compose.MultiUnion: void addGraph(com.hp.hpl.jena.graph.Graph)>(r3);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.graph.Graph getSchemaGraph()>();

        if $r4 == null goto label2;

        $z0 = $r4 instanceof com.hp.hpl.jena.reasoner.BaseInfGraph;

        if $z0 == 0 goto label2;

        r5 = (com.hp.hpl.jena.reasoner.BaseInfGraph) $r4;

        $r6 = virtualinvoke r5.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.graph.Graph getSchemaGraph()>();

        if $r6 == null goto label1;

        virtualinvoke $r0.<com.hp.hpl.jena.graph.compose.MultiUnion: void addGraph(com.hp.hpl.jena.graph.Graph)>($r6);

     label1:
        $r7 = virtualinvoke r5.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.graph.Graph getRawGraph()>();

        if $r7 == null goto label2;

        virtualinvoke $r0.<com.hp.hpl.jena.graph.compose.MultiUnion: void addGraph(com.hp.hpl.jena.graph.Graph)>($r7);

     label2:
        $r8 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.BaseInfGraph: com.hp.hpl.jena.reasoner.Reasoner getReasoner()>();

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.reasoner.Reasoner: com.hp.hpl.jena.reasoner.InfGraph bind(com.hp.hpl.jena.graph.Graph)>($r0);

        return $r9;
    }

    public synchronized boolean isPrepared()
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        $z0 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: boolean isPrepared>;

        return $z0;
    }

    protected synchronized void setPreparedState(boolean)
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: boolean isPrepared> = z0;

        return;
    }

    protected synchronized void requirePrepared()
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.BaseInfGraph;

        $z0 = r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: boolean isPrepared>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.BaseInfGraph: void prepare()>();

     label1:
        return;
    }
}
