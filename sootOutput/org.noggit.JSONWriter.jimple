public class org.noggit.JSONWriter extends java.lang.Object
{
    protected int level;
    protected int indent;
    protected final org.noggit.CharArr out;

    public void <init>(org.noggit.CharArr, int)
    {
        int i0;
        org.noggit.CharArr r1;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        r1 := @parameter0: org.noggit.CharArr;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.noggit.JSONWriter: org.noggit.CharArr out> = r1;

        r0.<org.noggit.JSONWriter: int indent> = i0;

        return;
    }

    public void <init>(org.noggit.CharArr)
    {
        org.noggit.CharArr r1;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        r1 := @parameter0: org.noggit.CharArr;

        specialinvoke r0.<org.noggit.JSONWriter: void <init>(org.noggit.CharArr,int)>(r1, 2);

        return;
    }

    public void setIndentSize(int)
    {
        int i0;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        i0 := @parameter0: int;

        r0.<org.noggit.JSONWriter: int indent> = i0;

        return;
    }

    public void indent()
    {
        org.noggit.CharArr $r1, $r2, $r3;
        org.noggit.JSONWriter r0;
        int $i0, $i1, $i2, $i3, i4, i5;

        r0 := @this: org.noggit.JSONWriter;

        $i0 = r0.<org.noggit.JSONWriter: int indent>;

        if $i0 < 0 goto label2;

        $r1 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        virtualinvoke $r1.<org.noggit.CharArr: void write(char)>(10);

        $i1 = r0.<org.noggit.JSONWriter: int indent>;

        if $i1 <= 0 goto label2;

        $i3 = r0.<org.noggit.JSONWriter: int level>;

        $i2 = r0.<org.noggit.JSONWriter: int indent>;

        i4 = $i3 * $i2;

        $r2 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        virtualinvoke $r2.<org.noggit.CharArr: void reserve(int)>(i4);

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        $r3 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        virtualinvoke $r3.<org.noggit.CharArr: void unsafeWrite(char)>(32);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public void write(java.lang.Object)
    {
        byte[] $r2, $r3;
        int[] $r16, $r17;
        java.util.Map $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        java.lang.CharSequence $r29;
        java.util.Collection $r23;
        java.util.List $r22;
        short[] $r8, $r9;
        java.lang.Object[] $r20, $r21;
        double[] $r10, $r11;
        org.noggit.CharArr $r27;
        float[] $r14, $r15;
        long $l0;
        long[] $r12, $r13;
        java.lang.Boolean $r19;
        java.lang.String $r28;
        java.lang.Number $r25, $r26;
        double $d0;
        org.noggit.JSONWriter$Writable $r18;
        boolean[] $r6, $r7;
        org.noggit.JSONWriter r1;
        char[] $r4, $r5;
        java.lang.Object r0;

        r1 := @this: org.noggit.JSONWriter;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        virtualinvoke r1.<org.noggit.JSONWriter: void writeNull()>();

        goto label21;

     label01:
        $z0 = r0 instanceof java.lang.CharSequence;

        if $z0 == 0 goto label02;

        $r29 = (java.lang.CharSequence) r0;

        virtualinvoke r1.<org.noggit.JSONWriter: void writeString(java.lang.CharSequence)>($r29);

        goto label21;

     label02:
        $z1 = r0 instanceof java.lang.Number;

        if $z1 == 0 goto label07;

        $z16 = r0 instanceof java.lang.Integer;

        if $z16 != 0 goto label03;

        $z17 = r0 instanceof java.lang.Long;

        if $z17 == 0 goto label04;

     label03:
        $r25 = (java.lang.Number) r0;

        $l0 = virtualinvoke $r25.<java.lang.Number: long longValue()>();

        virtualinvoke r1.<org.noggit.JSONWriter: void write(long)>($l0);

        goto label21;

     label04:
        $z18 = r0 instanceof java.lang.Float;

        if $z18 != 0 goto label05;

        $z19 = r0 instanceof java.lang.Double;

        if $z19 == 0 goto label06;

     label05:
        $r26 = (java.lang.Number) r0;

        $d0 = virtualinvoke $r26.<java.lang.Number: double doubleValue()>();

        virtualinvoke r1.<org.noggit.JSONWriter: void write(double)>($d0);

        goto label21;

     label06:
        $r27 = new org.noggit.CharArr;

        specialinvoke $r27.<org.noggit.CharArr: void <init>()>();

        $r28 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r27.<org.noggit.CharArr: void write(java.lang.String)>($r28);

        virtualinvoke r1.<org.noggit.JSONWriter: void writeNumber(org.noggit.CharArr)>($r27);

        goto label21;

     label07:
        $z2 = r0 instanceof java.util.Map;

        if $z2 == 0 goto label08;

        $r24 = (java.util.Map) r0;

        virtualinvoke r1.<org.noggit.JSONWriter: void write(java.util.Map)>($r24);

        goto label21;

     label08:
        $z3 = r0 instanceof java.util.Collection;

        if $z3 == 0 goto label09;

        $r23 = (java.util.Collection) r0;

        virtualinvoke r1.<org.noggit.JSONWriter: void write(java.util.Collection)>($r23);

        goto label21;

     label09:
        $z4 = r0 instanceof java.lang.Object[];

        if $z4 == 0 goto label10;

        $r20 = (java.lang.Object[]) r0;

        $r21 = (java.lang.Object[]) $r20;

        $r22 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r21);

        virtualinvoke r1.<org.noggit.JSONWriter: void write(java.util.Collection)>($r22);

        goto label21;

     label10:
        $z5 = r0 instanceof java.lang.Boolean;

        if $z5 == 0 goto label11;

        $r19 = (java.lang.Boolean) r0;

        $z15 = virtualinvoke $r19.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r1.<org.noggit.JSONWriter: void write(boolean)>($z15);

        goto label21;

     label11:
        $z6 = r0 instanceof org.noggit.JSONWriter$Writable;

        if $z6 == 0 goto label12;

        $r18 = (org.noggit.JSONWriter$Writable) r0;

        interfaceinvoke $r18.<org.noggit.JSONWriter$Writable: void write(org.noggit.JSONWriter)>(r1);

        goto label21;

     label12:
        $z7 = r0 instanceof int[];

        if $z7 == 0 goto label13;

        $r16 = (int[]) r0;

        $r17 = (int[]) $r16;

        virtualinvoke r1.<org.noggit.JSONWriter: void write(int[])>($r17);

        goto label21;

     label13:
        $z8 = r0 instanceof float[];

        if $z8 == 0 goto label14;

        $r14 = (float[]) r0;

        $r15 = (float[]) $r14;

        virtualinvoke r1.<org.noggit.JSONWriter: void write(float[])>($r15);

        goto label21;

     label14:
        $z9 = r0 instanceof long[];

        if $z9 == 0 goto label15;

        $r12 = (long[]) r0;

        $r13 = (long[]) $r12;

        virtualinvoke r1.<org.noggit.JSONWriter: void write(long[])>($r13);

        goto label21;

     label15:
        $z10 = r0 instanceof double[];

        if $z10 == 0 goto label16;

        $r10 = (double[]) r0;

        $r11 = (double[]) $r10;

        virtualinvoke r1.<org.noggit.JSONWriter: void write(double[])>($r11);

        goto label21;

     label16:
        $z11 = r0 instanceof short[];

        if $z11 == 0 goto label17;

        $r8 = (short[]) r0;

        $r9 = (short[]) $r8;

        virtualinvoke r1.<org.noggit.JSONWriter: void write(short[])>($r9);

        goto label21;

     label17:
        $z12 = r0 instanceof boolean[];

        if $z12 == 0 goto label18;

        $r6 = (boolean[]) r0;

        $r7 = (boolean[]) $r6;

        virtualinvoke r1.<org.noggit.JSONWriter: void write(boolean[])>($r7);

        goto label21;

     label18:
        $z13 = r0 instanceof char[];

        if $z13 == 0 goto label19;

        $r4 = (char[]) r0;

        $r5 = (char[]) $r4;

        virtualinvoke r1.<org.noggit.JSONWriter: void write(char[])>($r5);

        goto label21;

     label19:
        $z14 = r0 instanceof byte[];

        if $z14 == 0 goto label20;

        $r2 = (byte[]) r0;

        $r3 = (byte[]) $r2;

        virtualinvoke r1.<org.noggit.JSONWriter: void write(byte[])>($r3);

        goto label21;

     label20:
        virtualinvoke r1.<org.noggit.JSONWriter: void handleUnknownClass(java.lang.Object)>(r0);

     label21:
        return;
    }

    public void handleUnknownClass(java.lang.Object)
    {
        org.noggit.CharArr $r1;
        java.lang.Object r3;
        org.noggit.JSONWriter r0;
        java.lang.String $r2;

        r0 := @this: org.noggit.JSONWriter;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        $r2 = virtualinvoke $r1.<org.noggit.CharArr: java.lang.String toString()>();

        virtualinvoke r0.<org.noggit.JSONWriter: void writeString(java.lang.CharSequence)>($r2);

        return;
    }

    public void write(java.util.Map)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.noggit.JSONWriter r0;
        java.util.Map r1;
        int $i0;
        java.lang.Object $r4, $r6, $r8;
        java.lang.String $r7;
        boolean $z0, z1;

        r0 := @this: org.noggit.JSONWriter;

        r1 := @parameter0: java.util.Map;

        virtualinvoke r0.<org.noggit.JSONWriter: void startObject()>();

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        z1 = 1;

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        if z1 == 0 goto label2;

        z1 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<org.noggit.JSONWriter: void writeValueSeparator()>();

     label3:
        if $i0 <= 1 goto label4;

        virtualinvoke r0.<org.noggit.JSONWriter: void indent()>();

     label4:
        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<org.noggit.JSONWriter: void writeString(java.lang.CharSequence)>($r7);

        virtualinvoke r0.<org.noggit.JSONWriter: void writeNameSeparator()>();

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<org.noggit.JSONWriter: void write(java.lang.Object)>($r8);

        goto label1;

     label5:
        virtualinvoke r0.<org.noggit.JSONWriter: void endObject()>();

        return;
    }

    public void write(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        int $i0;
        java.lang.Object $r3;
        org.noggit.JSONWriter r0;
        boolean $z0, z1;

        r0 := @this: org.noggit.JSONWriter;

        r1 := @parameter0: java.util.Collection;

        virtualinvoke r0.<org.noggit.JSONWriter: void startArray()>();

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        z1 = 1;

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if z1 == 0 goto label2;

        z1 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<org.noggit.JSONWriter: void writeValueSeparator()>();

     label3:
        if $i0 <= 1 goto label4;

        virtualinvoke r0.<org.noggit.JSONWriter: void indent()>();

     label4:
        virtualinvoke r0.<org.noggit.JSONWriter: void write(java.lang.Object)>($r3);

        goto label1;

     label5:
        virtualinvoke r0.<org.noggit.JSONWriter: void endArray()>();

        return;
    }

    public void write(byte[])
    {
        byte[] r1;
        short s2;
        byte $b1;
        int i0, i3;
        org.noggit.JSONWriter r0;
        boolean z0;

        r0 := @this: org.noggit.JSONWriter;

        r1 := @parameter0: byte[];

        virtualinvoke r0.<org.noggit.JSONWriter: void startArray()>();

        z0 = 1;

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        $b1 = r1[i3];

        s2 = (short) $b1;

        if z0 == 0 goto label2;

        z0 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<org.noggit.JSONWriter: void writeValueSeparator()>();

     label3:
        virtualinvoke r0.<org.noggit.JSONWriter: void write(short)>(s2);

        i3 = i3 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<org.noggit.JSONWriter: void endArray()>();

        return;
    }

    public void write(short[])
    {
        short s1;
        int i0, i2;
        org.noggit.JSONWriter r0;
        short[] r1;
        boolean z0;

        r0 := @this: org.noggit.JSONWriter;

        r1 := @parameter0: short[];

        virtualinvoke r0.<org.noggit.JSONWriter: void startArray()>();

        z0 = 1;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        s1 = r1[i2];

        if z0 == 0 goto label2;

        z0 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<org.noggit.JSONWriter: void writeValueSeparator()>();

     label3:
        virtualinvoke r0.<org.noggit.JSONWriter: void write(short)>(s1);

        i2 = i2 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<org.noggit.JSONWriter: void endArray()>();

        return;
    }

    public void write(int[])
    {
        int[] r1;
        int i0, i1, i2;
        org.noggit.JSONWriter r0;
        boolean z0;

        r0 := @this: org.noggit.JSONWriter;

        r1 := @parameter0: int[];

        virtualinvoke r0.<org.noggit.JSONWriter: void startArray()>();

        z0 = 1;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i1 = r1[i2];

        if z0 == 0 goto label2;

        z0 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<org.noggit.JSONWriter: void writeValueSeparator()>();

     label3:
        virtualinvoke r0.<org.noggit.JSONWriter: void write(int)>(i1);

        i2 = i2 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<org.noggit.JSONWriter: void endArray()>();

        return;
    }

    public void write(long[])
    {
        long[] r1;
        int i0, i2;
        long l1;
        org.noggit.JSONWriter r0;
        boolean z0;

        r0 := @this: org.noggit.JSONWriter;

        r1 := @parameter0: long[];

        virtualinvoke r0.<org.noggit.JSONWriter: void startArray()>();

        z0 = 1;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        l1 = r1[i2];

        if z0 == 0 goto label2;

        z0 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<org.noggit.JSONWriter: void writeValueSeparator()>();

     label3:
        virtualinvoke r0.<org.noggit.JSONWriter: void write(long)>(l1);

        i2 = i2 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<org.noggit.JSONWriter: void endArray()>();

        return;
    }

    public void write(float[])
    {
        int i0, i1;
        float f0;
        float[] r1;
        org.noggit.JSONWriter r0;
        boolean z0;

        r0 := @this: org.noggit.JSONWriter;

        r1 := @parameter0: float[];

        virtualinvoke r0.<org.noggit.JSONWriter: void startArray()>();

        z0 = 1;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        f0 = r1[i1];

        if z0 == 0 goto label2;

        z0 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<org.noggit.JSONWriter: void writeValueSeparator()>();

     label3:
        virtualinvoke r0.<org.noggit.JSONWriter: void write(float)>(f0);

        i1 = i1 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<org.noggit.JSONWriter: void endArray()>();

        return;
    }

    public void write(double[])
    {
        double[] r1;
        int i0, i1;
        org.noggit.JSONWriter r0;
        double d0;
        boolean z0;

        r0 := @this: org.noggit.JSONWriter;

        r1 := @parameter0: double[];

        virtualinvoke r0.<org.noggit.JSONWriter: void startArray()>();

        z0 = 1;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        d0 = r1[i1];

        if z0 == 0 goto label2;

        z0 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<org.noggit.JSONWriter: void writeValueSeparator()>();

     label3:
        virtualinvoke r0.<org.noggit.JSONWriter: void write(double)>(d0);

        i1 = i1 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<org.noggit.JSONWriter: void endArray()>();

        return;
    }

    public void write(boolean[])
    {
        boolean[] r1;
        int i0, i1;
        org.noggit.JSONWriter r0;
        boolean z0, z1;

        r0 := @this: org.noggit.JSONWriter;

        r1 := @parameter0: boolean[];

        virtualinvoke r0.<org.noggit.JSONWriter: void startArray()>();

        z1 = 1;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        z0 = r1[i1];

        if z1 == 0 goto label2;

        z1 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<org.noggit.JSONWriter: void writeValueSeparator()>();

     label3:
        virtualinvoke r0.<org.noggit.JSONWriter: void write(boolean)>(z0);

        i1 = i1 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<org.noggit.JSONWriter: void endArray()>();

        return;
    }

    public void write(short)
    {
        int $i1;
        short s0;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        s0 := @parameter0: short;

        $i1 = (int) s0;

        virtualinvoke r0.<org.noggit.JSONWriter: void write(int)>($i1);

        return;
    }

    public void write(byte)
    {
        int $i1;
        org.noggit.JSONWriter r0;
        byte b0;

        r0 := @this: org.noggit.JSONWriter;

        b0 := @parameter0: byte;

        $i1 = (int) b0;

        virtualinvoke r0.<org.noggit.JSONWriter: void write(int)>($i1);

        return;
    }

    public void writeNull()
    {
        org.noggit.CharArr $r1;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        $r1 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        staticinvoke <org.noggit.JSONUtil: void writeNull(org.noggit.CharArr)>($r1);

        return;
    }

    public void writeString(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int $i0;
        org.noggit.CharArr $r2;
        org.noggit.JSONWriter r1;

        r1 := @this: org.noggit.JSONWriter;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $r2 = r1.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        staticinvoke <org.noggit.JSONUtil: void writeString(java.lang.CharSequence,int,int,org.noggit.CharArr)>(r0, 0, $i0, $r2);

        return;
    }

    public void writeString(org.noggit.CharArr)
    {
        org.noggit.CharArr r0, $r2;
        org.noggit.JSONWriter r1;

        r1 := @this: org.noggit.JSONWriter;

        r0 := @parameter0: org.noggit.CharArr;

        $r2 = r1.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        staticinvoke <org.noggit.JSONUtil: void writeString(org.noggit.CharArr,org.noggit.CharArr)>(r0, $r2);

        return;
    }

    public void writeStringStart()
    {
        org.noggit.CharArr $r1;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        $r1 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        virtualinvoke $r1.<org.noggit.CharArr: void write(char)>(34);

        return;
    }

    public void writeStringChars(org.noggit.CharArr)
    {
        int $i0, $i1;
        org.noggit.CharArr r0, $r3;
        char[] $r1;
        org.noggit.JSONWriter r2;

        r2 := @this: org.noggit.JSONWriter;

        r0 := @parameter0: org.noggit.CharArr;

        $r1 = virtualinvoke r0.<org.noggit.CharArr: char[] getArray()>();

        $i0 = virtualinvoke r0.<org.noggit.CharArr: int getStart()>();

        $i1 = virtualinvoke r0.<org.noggit.CharArr: int getEnd()>();

        $r3 = r2.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        staticinvoke <org.noggit.JSONUtil: void writeStringPart(char[],int,int,org.noggit.CharArr)>($r1, $i0, $i1, $r3);

        return;
    }

    public void writeStringEnd()
    {
        org.noggit.CharArr $r1;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        $r1 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        virtualinvoke $r1.<org.noggit.CharArr: void write(char)>(34);

        return;
    }

    public void write(long)
    {
        org.noggit.CharArr $r1;
        long l0;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        l0 := @parameter0: long;

        $r1 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        staticinvoke <org.noggit.JSONUtil: void writeNumber(long,org.noggit.CharArr)>(l0, $r1);

        return;
    }

    public void write(int)
    {
        int i0;
        org.noggit.CharArr $r1;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        i0 := @parameter0: int;

        $r1 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        staticinvoke <org.noggit.JSONUtil: void writeNumber(int,org.noggit.CharArr)>(i0, $r1);

        return;
    }

    public void write(double)
    {
        org.noggit.CharArr $r1;
        org.noggit.JSONWriter r0;
        double d0;

        r0 := @this: org.noggit.JSONWriter;

        d0 := @parameter0: double;

        $r1 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        staticinvoke <org.noggit.JSONUtil: void writeNumber(double,org.noggit.CharArr)>(d0, $r1);

        return;
    }

    public void write(float)
    {
        float f0;
        org.noggit.CharArr $r1;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        f0 := @parameter0: float;

        $r1 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        staticinvoke <org.noggit.JSONUtil: void writeNumber(float,org.noggit.CharArr)>(f0, $r1);

        return;
    }

    public void write(boolean)
    {
        org.noggit.CharArr $r1;
        org.noggit.JSONWriter r0;
        boolean z0;

        r0 := @this: org.noggit.JSONWriter;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        staticinvoke <org.noggit.JSONUtil: void writeBoolean(boolean,org.noggit.CharArr)>(z0, $r1);

        return;
    }

    public void write(char[])
    {
        int $i0;
        char[] r0;
        org.noggit.CharArr $r2;
        org.noggit.JSONWriter r1;

        r1 := @this: org.noggit.JSONWriter;

        r0 := @parameter0: char[];

        $i0 = lengthof r0;

        $r2 = r1.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        staticinvoke <org.noggit.JSONUtil: void writeString(char[],int,int,org.noggit.CharArr)>(r0, 0, $i0, $r2);

        return;
    }

    public void writeNumber(org.noggit.CharArr)
    {
        org.noggit.CharArr r1, $r2;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        r1 := @parameter0: org.noggit.CharArr;

        $r2 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        virtualinvoke $r2.<org.noggit.CharArr: void write(org.noggit.CharArr)>(r1);

        return;
    }

    public void writePartialNumber(org.noggit.CharArr)
    {
        org.noggit.CharArr r1, $r2;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        r1 := @parameter0: org.noggit.CharArr;

        $r2 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        virtualinvoke $r2.<org.noggit.CharArr: void write(org.noggit.CharArr)>(r1);

        return;
    }

    public void startObject()
    {
        int $i0, $i1;
        org.noggit.CharArr $r1;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        $r1 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        virtualinvoke $r1.<org.noggit.CharArr: void write(char)>(123);

        $i0 = r0.<org.noggit.JSONWriter: int level>;

        $i1 = $i0 + 1;

        r0.<org.noggit.JSONWriter: int level> = $i1;

        return;
    }

    public void endObject()
    {
        int $i0, $i1;
        org.noggit.CharArr $r1;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        $r1 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        virtualinvoke $r1.<org.noggit.CharArr: void write(char)>(125);

        $i0 = r0.<org.noggit.JSONWriter: int level>;

        $i1 = $i0 - 1;

        r0.<org.noggit.JSONWriter: int level> = $i1;

        return;
    }

    public void startArray()
    {
        int $i0, $i1;
        org.noggit.CharArr $r1;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        $r1 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        virtualinvoke $r1.<org.noggit.CharArr: void write(char)>(91);

        $i0 = r0.<org.noggit.JSONWriter: int level>;

        $i1 = $i0 + 1;

        r0.<org.noggit.JSONWriter: int level> = $i1;

        return;
    }

    public void endArray()
    {
        int $i0, $i1;
        org.noggit.CharArr $r1;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        $r1 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        virtualinvoke $r1.<org.noggit.CharArr: void write(char)>(93);

        $i0 = r0.<org.noggit.JSONWriter: int level>;

        $i1 = $i0 - 1;

        r0.<org.noggit.JSONWriter: int level> = $i1;

        return;
    }

    public void writeValueSeparator()
    {
        org.noggit.CharArr $r1;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        $r1 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        virtualinvoke $r1.<org.noggit.CharArr: void write(char)>(44);

        return;
    }

    public void writeNameSeparator()
    {
        org.noggit.CharArr $r1;
        org.noggit.JSONWriter r0;

        r0 := @this: org.noggit.JSONWriter;

        $r1 = r0.<org.noggit.JSONWriter: org.noggit.CharArr out>;

        virtualinvoke $r1.<org.noggit.CharArr: void write(char)>(58);

        return;
    }
}
