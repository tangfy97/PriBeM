public abstract class org.apache.commons.collections.bag.AbstractMapBag extends java.lang.Object implements org.apache.commons.collections.Bag
{
    private transient java.util.Map map;
    private int size;
    private transient int modCount;
    private transient java.util.Set uniqueSet;

    protected void <init>()
    {
        org.apache.commons.collections.bag.AbstractMapBag r0;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected void <init>(java.util.Map)
    {
        org.apache.commons.collections.bag.AbstractMapBag r0;
        java.util.Map r1;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map> = r1;

        return;
    }

    protected java.util.Map getMap()
    {
        org.apache.commons.collections.bag.AbstractMapBag r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        $r1 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        return $r1;
    }

    public int size()
    {
        int $i0;
        org.apache.commons.collections.bag.AbstractMapBag r0;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        $i0 = r0.<org.apache.commons.collections.bag.AbstractMapBag: int size>;

        return $i0;
    }

    public boolean isEmpty()
    {
        org.apache.commons.collections.bag.AbstractMapBag r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        $r1 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public int getCount(java.lang.Object)
    {
        org.apache.commons.collections.bag.AbstractMapBag$MutableInteger r4;
        org.apache.commons.collections.bag.AbstractMapBag r0;
        java.util.Map $r2;
        int $i0;
        java.lang.Object r1, $r3;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.commons.collections.bag.AbstractMapBag$MutableInteger) $r3;

        if r4 == null goto label1;

        $i0 = r4.<org.apache.commons.collections.bag.AbstractMapBag$MutableInteger: int value>;

        return $i0;

     label1:
        return 0;
    }

    public boolean contains(java.lang.Object)
    {
        org.apache.commons.collections.bag.AbstractMapBag r0;
        java.util.Map $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        org.apache.commons.collections.bag.AbstractMapBag r1;
        java.util.Collection r0;
        org.apache.commons.collections.Bag $r3;
        org.apache.commons.collections.bag.HashBag $r2;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof org.apache.commons.collections.Bag;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.commons.collections.Bag) r0;

        $z2 = virtualinvoke r1.<org.apache.commons.collections.bag.AbstractMapBag: boolean containsAll(org.apache.commons.collections.Bag)>($r3);

        return $z2;

     label1:
        $r2 = new org.apache.commons.collections.bag.HashBag;

        specialinvoke $r2.<org.apache.commons.collections.bag.HashBag: void <init>(java.util.Collection)>(r0);

        $z1 = virtualinvoke r1.<org.apache.commons.collections.bag.AbstractMapBag: boolean containsAll(org.apache.commons.collections.Bag)>($r2);

        return $z1;
    }

    boolean containsAll(org.apache.commons.collections.Bag)
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        org.apache.commons.collections.Bag r0;
        org.apache.commons.collections.bag.AbstractMapBag r4;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0, z1, $z2, $z3;

        r4 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r0 := @parameter0: org.apache.commons.collections.Bag;

        z1 = 1;

        $r1 = interfaceinvoke r0.<org.apache.commons.collections.Bag: java.util.Set uniqueSet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke r4.<org.apache.commons.collections.bag.AbstractMapBag: int getCount(java.lang.Object)>($r3);

        $i1 = interfaceinvoke r0.<org.apache.commons.collections.Bag: int getCount(java.lang.Object)>($r3);

        if $i0 < $i1 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        if z1 == 0 goto label4;

        if $z2 == 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        z1 = $z3;

        goto label1;

     label6:
        return z1;
    }

    public java.util.Iterator iterator()
    {
        org.apache.commons.collections.bag.AbstractMapBag$BagIterator $r0;
        org.apache.commons.collections.bag.AbstractMapBag r1;

        r1 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        $r0 = new org.apache.commons.collections.bag.AbstractMapBag$BagIterator;

        specialinvoke $r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: void <init>(org.apache.commons.collections.bag.AbstractMapBag)>(r1);

        return $r0;
    }

    public boolean add(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.commons.collections.bag.AbstractMapBag r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.bag.AbstractMapBag: boolean add(java.lang.Object,int)>(r1, 1);

        return $z0;
    }

    public boolean add(java.lang.Object, int)
    {
        org.apache.commons.collections.bag.AbstractMapBag$MutableInteger r4, $r5;
        org.apache.commons.collections.bag.AbstractMapBag r0;
        java.util.Map $r2, $r6;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6;
        java.lang.Object r1, $r3;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r1 := @parameter0: java.lang.Object;

        i2 := @parameter1: int;

        $i0 = r0.<org.apache.commons.collections.bag.AbstractMapBag: int modCount>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.collections.bag.AbstractMapBag: int modCount> = $i1;

        if i2 <= 0 goto label2;

        $r2 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.commons.collections.bag.AbstractMapBag$MutableInteger) $r3;

        $i3 = r0.<org.apache.commons.collections.bag.AbstractMapBag: int size>;

        $i4 = $i3 + i2;

        r0.<org.apache.commons.collections.bag.AbstractMapBag: int size> = $i4;

        if r4 != null goto label1;

        $r6 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        $r5 = new org.apache.commons.collections.bag.AbstractMapBag$MutableInteger;

        specialinvoke $r5.<org.apache.commons.collections.bag.AbstractMapBag$MutableInteger: void <init>(int)>(i2);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        return 1;

     label1:
        $i5 = r4.<org.apache.commons.collections.bag.AbstractMapBag$MutableInteger: int value>;

        $i6 = $i5 + i2;

        r4.<org.apache.commons.collections.bag.AbstractMapBag$MutableInteger: int value> = $i6;

        return 0;

     label2:
        return 0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        org.apache.commons.collections.bag.AbstractMapBag r2;
        java.lang.Object $r3;
        boolean $z0, $z1, z2, $z3;

        r2 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r0 := @parameter0: java.util.Collection;

        z2 = 0;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r2.<org.apache.commons.collections.bag.AbstractMapBag: boolean add(java.lang.Object)>($r3);

        if z2 != 0 goto label2;

        if $z1 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        z2 = $z3;

        goto label1;

     label5:
        return z2;
    }

    public void clear()
    {
        org.apache.commons.collections.bag.AbstractMapBag r0;
        java.util.Map $r1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        $i0 = r0.<org.apache.commons.collections.bag.AbstractMapBag: int modCount>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.collections.bag.AbstractMapBag: int modCount> = $i1;

        $r1 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        r0.<org.apache.commons.collections.bag.AbstractMapBag: int size> = 0;

        return;
    }

    public boolean remove(java.lang.Object)
    {
        org.apache.commons.collections.bag.AbstractMapBag$MutableInteger r4;
        org.apache.commons.collections.bag.AbstractMapBag r0;
        java.util.Map $r2, $r5;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1, $r3;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.commons.collections.bag.AbstractMapBag$MutableInteger) $r3;

        if r4 != null goto label1;

        return 0;

     label1:
        $i0 = r0.<org.apache.commons.collections.bag.AbstractMapBag: int modCount>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.collections.bag.AbstractMapBag: int modCount> = $i1;

        $r5 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $i3 = r0.<org.apache.commons.collections.bag.AbstractMapBag: int size>;

        $i2 = r4.<org.apache.commons.collections.bag.AbstractMapBag$MutableInteger: int value>;

        $i4 = $i3 - $i2;

        r0.<org.apache.commons.collections.bag.AbstractMapBag: int size> = $i4;

        return 1;
    }

    public boolean remove(java.lang.Object, int)
    {
        org.apache.commons.collections.bag.AbstractMapBag r0;
        java.util.Map $r2, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.apache.commons.collections.bag.AbstractMapBag$MutableInteger r4;
        java.lang.Object r1, $r3;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.commons.collections.bag.AbstractMapBag$MutableInteger) $r3;

        if r4 != null goto label1;

        return 0;

     label1:
        if i0 > 0 goto label2;

        return 0;

     label2:
        $i1 = r0.<org.apache.commons.collections.bag.AbstractMapBag: int modCount>;

        $i2 = $i1 + 1;

        r0.<org.apache.commons.collections.bag.AbstractMapBag: int modCount> = $i2;

        $i3 = r4.<org.apache.commons.collections.bag.AbstractMapBag$MutableInteger: int value>;

        if i0 >= $i3 goto label3;

        $i7 = r4.<org.apache.commons.collections.bag.AbstractMapBag$MutableInteger: int value>;

        $i8 = $i7 - i0;

        r4.<org.apache.commons.collections.bag.AbstractMapBag$MutableInteger: int value> = $i8;

        $i9 = r0.<org.apache.commons.collections.bag.AbstractMapBag: int size>;

        $i10 = $i9 - i0;

        r0.<org.apache.commons.collections.bag.AbstractMapBag: int size> = $i10;

        goto label4;

     label3:
        $r5 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $i5 = r0.<org.apache.commons.collections.bag.AbstractMapBag: int size>;

        $i4 = r4.<org.apache.commons.collections.bag.AbstractMapBag$MutableInteger: int value>;

        $i6 = $i5 - $i4;

        r0.<org.apache.commons.collections.bag.AbstractMapBag: int size> = $i6;

     label4:
        return 1;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        org.apache.commons.collections.bag.AbstractMapBag r2;
        java.lang.Object $r3;
        boolean $z0, $z1, z2, $z3;

        r2 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r0 := @parameter0: java.util.Collection;

        z2 = 0;

        if r0 == null goto label5;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r2.<org.apache.commons.collections.bag.AbstractMapBag: boolean remove(java.lang.Object,int)>($r3, 1);

        if z2 != 0 goto label2;

        if $z1 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        z2 = $z3;

        goto label1;

     label5:
        return z2;
    }

    public boolean retainAll(java.util.Collection)
    {
        org.apache.commons.collections.bag.AbstractMapBag r1;
        java.util.Collection r0;
        org.apache.commons.collections.Bag $r3;
        org.apache.commons.collections.bag.HashBag $r2;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof org.apache.commons.collections.Bag;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.commons.collections.Bag) r0;

        $z2 = virtualinvoke r1.<org.apache.commons.collections.bag.AbstractMapBag: boolean retainAll(org.apache.commons.collections.Bag)>($r3);

        return $z2;

     label1:
        $r2 = new org.apache.commons.collections.bag.HashBag;

        specialinvoke $r2.<org.apache.commons.collections.bag.HashBag: void <init>(java.util.Collection)>(r0);

        $z1 = virtualinvoke r1.<org.apache.commons.collections.bag.AbstractMapBag: boolean retainAll(org.apache.commons.collections.Bag)>($r2);

        return $z1;
    }

    boolean retainAll(org.apache.commons.collections.Bag)
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.commons.collections.Bag r5;
        org.apache.commons.collections.bag.HashBag $r0;
        org.apache.commons.collections.bag.AbstractMapBag r1;
        int $i0, $i1, $i2;
        java.lang.Object $r4;
        boolean $z0, $z1, z2;

        r1 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r5 := @parameter0: org.apache.commons.collections.Bag;

        z2 = 0;

        $r0 = new org.apache.commons.collections.bag.HashBag;

        specialinvoke $r0.<org.apache.commons.collections.bag.HashBag: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Set uniqueSet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke r1.<org.apache.commons.collections.bag.AbstractMapBag: int getCount(java.lang.Object)>($r4);

        $i1 = interfaceinvoke r5.<org.apache.commons.collections.Bag: int getCount(java.lang.Object)>($r4);

        if 1 > $i1 goto label2;

        if $i1 > $i0 goto label2;

        $i2 = $i0 - $i1;

        interfaceinvoke $r0.<org.apache.commons.collections.Bag: boolean add(java.lang.Object,int)>($r4, $i2);

        goto label3;

     label2:
        interfaceinvoke $r0.<org.apache.commons.collections.Bag: boolean add(java.lang.Object,int)>($r4, $i0);

     label3:
        goto label1;

     label4:
        $z1 = interfaceinvoke $r0.<org.apache.commons.collections.Bag: boolean isEmpty()>();

        if $z1 != 0 goto label5;

        z2 = virtualinvoke r1.<org.apache.commons.collections.bag.AbstractMapBag: boolean removeAll(java.util.Collection)>($r0);

     label5:
        return z2;
    }

    public java.lang.Object[] toArray()
    {
        java.lang.Object[] r1;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.apache.commons.collections.bag.AbstractMapBag r0;
        java.util.Map $r2;
        int $i0, $i1, i2, i3, $i5;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.bag.AbstractMapBag: int size()>();

        r1 = newarray (java.lang.Object)[$i0];

        i2 = 0;

        $r2 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        i3 = virtualinvoke r0.<org.apache.commons.collections.bag.AbstractMapBag: int getCount(java.lang.Object)>($r5);

     label2:
        if i3 <= 0 goto label3;

        $i1 = i2;

        i2 = i2 + 1;

        r1[$i1] = $r5;

        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label2;

     label3:
        goto label1;

     label4:
        return r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.lang.Object[] $r8, r9;
        org.apache.commons.collections.bag.AbstractMapBag r0;
        java.util.Map $r1;
        int $i0, $i1, $i2, $i3, i4, i5, $i7;
        boolean $z0;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.Object $r4, $r7;
        java.lang.Class $r5, $r6;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r9 := @parameter0: java.lang.Object[];

        $i0 = virtualinvoke r0.<org.apache.commons.collections.bag.AbstractMapBag: int size()>();

        $i1 = lengthof r9;

        if $i1 >= $i0 goto label1;

        $r5 = virtualinvoke r9.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class getComponentType()>();

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r6, $i0);

        $r8 = (java.lang.Object[]) $r7;

        r9 = (java.lang.Object[]) $r8;

     label1:
        i4 = 0;

        $r1 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        i5 = virtualinvoke r0.<org.apache.commons.collections.bag.AbstractMapBag: int getCount(java.lang.Object)>($r4);

     label3:
        if i5 <= 0 goto label4;

        $i3 = i4;

        i4 = i4 + 1;

        r9[$i3] = $r4;

        $i7 = (int) -1;

        i5 = i5 + $i7;

        goto label3;

     label4:
        goto label2;

     label5:
        $i2 = lengthof r9;

        if $i2 <= $i0 goto label6;

        r9[$i0] = null;

     label6:
        return r9;
    }

    public java.util.Set uniqueSet()
    {
        org.apache.commons.collections.bag.AbstractMapBag r0;
        java.util.Map $r3;
        java.util.Set $r1, $r2, $r4, $r5;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        $r1 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Set uniqueSet>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = staticinvoke <org.apache.commons.collections.set.UnmodifiableSet: java.util.Set decorate(java.util.Set)>($r4);

        r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Set uniqueSet> = $r5;

     label1:
        $r2 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Set uniqueSet>;

        return $r2;
    }

    protected void doWriteObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.collections.bag.AbstractMapBag$MutableInteger $r10;
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        java.util.Set $r4;
        org.apache.commons.collections.bag.AbstractMapBag r1;
        java.util.Map $r2, $r3;
        int $i0, $i1;
        java.io.ObjectOutputStream r0;
        java.lang.Object $r6, $r8, $r9;
        boolean $z0;

        r1 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r0 := @parameter0: java.io.ObjectOutputStream;

        $r2 = r1.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r3 = r1.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r8);

        $r9 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.apache.commons.collections.bag.AbstractMapBag$MutableInteger) $r9;

        $i1 = $r10.<org.apache.commons.collections.bag.AbstractMapBag$MutableInteger: int value>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        goto label1;

     label2:
        return;
    }

    protected void doReadObject(java.util.Map, java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections.bag.AbstractMapBag$MutableInteger $r4;
        java.io.ObjectInputStream r2;
        org.apache.commons.collections.bag.AbstractMapBag r0;
        java.util.Map r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.io.ObjectInputStream;

        r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map> = r1;

        $i0 = virtualinvoke r2.<java.io.ObjectInputStream: int readInt()>();

        i4 = 0;

     label1:
        if i4 >= $i0 goto label2;

        $r3 = virtualinvoke r2.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $i1 = virtualinvoke r2.<java.io.ObjectInputStream: int readInt()>();

        $r4 = new org.apache.commons.collections.bag.AbstractMapBag$MutableInteger;

        specialinvoke $r4.<org.apache.commons.collections.bag.AbstractMapBag$MutableInteger: void <init>(int)>($i1);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $i2 = r0.<org.apache.commons.collections.bag.AbstractMapBag: int size>;

        $i3 = $i2 + $i1;

        r0.<org.apache.commons.collections.bag.AbstractMapBag: int size> = $i3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Iterator $r5;
        java.util.Set $r4;
        org.apache.commons.collections.Bag r2;
        org.apache.commons.collections.bag.AbstractMapBag r1;
        java.util.Map $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r0, $r6;
        boolean $z0, $z1;

        r1 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.apache.commons.collections.Bag;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.collections.Bag) r0;

        $i0 = interfaceinvoke r2.<org.apache.commons.collections.Bag: int size()>();

        $i1 = virtualinvoke r1.<org.apache.commons.collections.bag.AbstractMapBag: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $r3 = r1.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $i2 = interfaceinvoke r2.<org.apache.commons.collections.Bag: int getCount(java.lang.Object)>($r6);

        $i3 = virtualinvoke r1.<org.apache.commons.collections.bag.AbstractMapBag: int getCount(java.lang.Object)>($r6);

        if $i2 == $i3 goto label5;

        return 0;

     label5:
        goto label4;

     label6:
        return 1;
    }

    public int hashCode()
    {
        org.apache.commons.collections.bag.AbstractMapBag$MutableInteger r8;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.commons.collections.bag.AbstractMapBag r0;
        java.util.Map $r1;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.Object $r4, $r6, $r7;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        i3 = 0;

        $r1 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8 = (org.apache.commons.collections.bag.AbstractMapBag$MutableInteger) $r7;

        $i2 = i3;

        if $r6 != null goto label2;

        $i4 = 0;

        goto label3;

     label2:
        $i4 = virtualinvoke $r6.<java.lang.Object: int hashCode()>();

     label3:
        $i0 = r8.<org.apache.commons.collections.bag.AbstractMapBag$MutableInteger: int value>;

        $i1 = $i4 ^ $i0;

        i3 = $i2 + $i1;

        goto label1;

     label4:
        return i3;
    }

    public java.lang.String toString()
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.commons.collections.bag.AbstractMapBag r0;
        java.lang.StringBuffer $r1;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.String $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.bag.AbstractMapBag: int size()>();

        if $i0 != 0 goto label1;

        return "[]";

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        $r2 = virtualinvoke r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Set uniqueSet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $i1 = virtualinvoke r0.<org.apache.commons.collections.bag.AbstractMapBag: int getCount(java.lang.Object)>($r5);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

     label3:
        goto label2;

     label4:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    static java.util.Map access$000(org.apache.commons.collections.bag.AbstractMapBag)
    {
        org.apache.commons.collections.bag.AbstractMapBag r0;
        java.util.Map $r1;

        r0 := @parameter0: org.apache.commons.collections.bag.AbstractMapBag;

        $r1 = r0.<org.apache.commons.collections.bag.AbstractMapBag: java.util.Map map>;

        return $r1;
    }

    static int access$100(org.apache.commons.collections.bag.AbstractMapBag)
    {
        int $i0;
        org.apache.commons.collections.bag.AbstractMapBag r0;

        r0 := @parameter0: org.apache.commons.collections.bag.AbstractMapBag;

        $i0 = r0.<org.apache.commons.collections.bag.AbstractMapBag: int modCount>;

        return $i0;
    }

    static int access$210(org.apache.commons.collections.bag.AbstractMapBag)
    {
        int $i0, $i1;
        org.apache.commons.collections.bag.AbstractMapBag r0;

        r0 := @parameter0: org.apache.commons.collections.bag.AbstractMapBag;

        $i0 = r0.<org.apache.commons.collections.bag.AbstractMapBag: int size>;

        $i1 = $i0 - 1;

        r0.<org.apache.commons.collections.bag.AbstractMapBag: int size> = $i1;

        return $i0;
    }
}
