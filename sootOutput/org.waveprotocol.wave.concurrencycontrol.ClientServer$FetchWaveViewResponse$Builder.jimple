public final class org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder extends com.google.protobuf.GeneratedMessage$Builder
{
    private org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result;

    private void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        specialinvoke r0.<com.google.protobuf.GeneratedMessage$Builder: void <init>()>();

        return;
    }

    private static org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder create()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder $r0;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: void <init>()>();

        $r1 = new org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$1)>(null);

        $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result> = $r1;

        return $r0;
    }

    protected org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse internalGetResult()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        return $r1;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder clear()
    {
        java.lang.IllegalStateException $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot call clear() after build().");

        throw $r3;

     label1:
        $r2 = new org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse;

        specialinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$1)>(null);

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result> = $r2;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder clone()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder $r0, r1, $r3;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder create()>();

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder mergeFrom(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r2);

        return $r3;
    }

    public com.google.protobuf.Descriptors$Descriptor getDescriptorForType()
    {
        com.google.protobuf.Descriptors$Descriptor $r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: com.google.protobuf.Descriptors$Descriptor getDescriptor()>();

        return $r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse getDefaultInstance()>();

        return $r0;
    }

    public boolean isInitialized()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: boolean isInitialized()>();

        return $z0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse build()
    {
        com.google.protobuf.UninitializedMessageException $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1, $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        if $r1 == null goto label1;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: boolean isInitialized()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: com.google.protobuf.UninitializedMessageException newUninitializedMessageException(com.google.protobuf.Message)>($r3);

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse buildPartial()>();

        return $r2;
    }

    private org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse buildParsed() throws com.google.protobuf.InvalidProtocolBufferException
    {
        com.google.protobuf.InvalidProtocolBufferException $r4;
        com.google.protobuf.UninitializedMessageException $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: boolean isInitialized()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: com.google.protobuf.UninitializedMessageException newUninitializedMessageException(com.google.protobuf.Message)>($r2);

        $r4 = virtualinvoke $r3.<com.google.protobuf.UninitializedMessageException: com.google.protobuf.InvalidProtocolBufferException asInvalidProtocolBufferException()>();

        throw $r4;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse buildPartial()>();

        return $r1;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse buildPartial()
    {
        java.lang.IllegalStateException $r10;
        java.util.List $r3, $r4, $r7, $r8;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1, $r2, $r5, $r6, $r9;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        if $r1 != null goto label1;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("build() has already been called on this Builder.");

        throw $r10;

     label1:
        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2200(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r2);

        $r4 = <java.util.Collections: java.util.List EMPTY_LIST>;

        if $r3 == $r4 goto label2;

        $r6 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r7 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2200(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r5);

        $r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r7);

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2202(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse,java.util.List)>($r6, $r8);

     label2:
        $r9 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result> = null;

        return $r9;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder mergeFrom(com.google.protobuf.Message)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r1, $r3;
        com.google.protobuf.Message r0;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        r0 := @parameter0: com.google.protobuf.Message;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse) r0;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder mergeFrom(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r2);

        return $r3;

     label1:
        specialinvoke r1.<com.google.protobuf.GeneratedMessage$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.Message)>(r0);

        return r1;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder mergeFrom(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)
    {
        java.util.ArrayList $r9;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r11;
        boolean $z0, $z1, $z2;
        com.google.protobuf.UnknownFieldSet $r12;
        java.util.List $r2, $r5, $r7, $r8;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse r0, $r1, $r4, $r6, $r10;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r3;

        r3 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse getDefaultInstance()>();

        if r0 != $r1 goto label1;

        return r3;

     label1:
        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: boolean hasStatus()>();

        if $z0 == 0 goto label2;

        $r11 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getStatus()>();

        virtualinvoke r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder mergeStatus(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>($r11);

     label2:
        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2200(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>(r0);

        $z1 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        $r4 = r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2200(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r4);

        $z2 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label3;

        $r10 = r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2202(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse,java.util.List)>($r10, $r9);

     label3:
        $r6 = r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r7 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2200(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r6);

        $r8 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2200(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>(r0);

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r8);

     label4:
        $r12 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: com.google.protobuf.UnknownFieldSet getUnknownFields()>();

        virtualinvoke r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: com.google.protobuf.GeneratedMessage$Builder mergeUnknownFields(com.google.protobuf.UnknownFieldSet)>($r12);

        return r3;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        com.google.protobuf.UnknownFieldSet $r1, $r10, $r11;
        com.google.protobuf.UnknownFieldSet$Builder $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r6;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder $r4;
        com.google.protobuf.CodedInputStream r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r8, $r9;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;
        com.google.protobuf.ExtensionRegistryLite r5;
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r7;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        r3 := @parameter0: com.google.protobuf.CodedInputStream;

        r5 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: com.google.protobuf.UnknownFieldSet getUnknownFields()>();

        $r2 = staticinvoke <com.google.protobuf.UnknownFieldSet: com.google.protobuf.UnknownFieldSet$Builder newBuilder(com.google.protobuf.UnknownFieldSet)>($r1);

     label1:
        $i0 = virtualinvoke r3.<com.google.protobuf.CodedInputStream: int readTag()>();

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 10: goto label4;
            case 18: goto label6;
            default: goto label3;
        };

     label2:
        $r10 = virtualinvoke $r2.<com.google.protobuf.UnknownFieldSet$Builder: com.google.protobuf.UnknownFieldSet build()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: com.google.protobuf.GeneratedMessage$Builder setUnknownFields(com.google.protobuf.UnknownFieldSet)>($r10);

        return r0;

     label3:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: boolean parseUnknownField(com.google.protobuf.CodedInputStream,com.google.protobuf.UnknownFieldSet$Builder,com.google.protobuf.ExtensionRegistryLite,int)>(r3, $r2, r5, $i0);

        if $z1 != 0 goto label7;

        $r11 = virtualinvoke $r2.<com.google.protobuf.UnknownFieldSet$Builder: com.google.protobuf.UnknownFieldSet build()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: com.google.protobuf.GeneratedMessage$Builder setUnknownFields(com.google.protobuf.UnknownFieldSet)>($r11);

        return r0;

     label4:
        $r7 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: boolean hasStatus()>();

        if $z0 == 0 goto label5;

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getStatus()>();

        virtualinvoke $r7.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder mergeFrom(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>($r9);

     label5:
        virtualinvoke r3.<com.google.protobuf.CodedInputStream: void readMessage(com.google.protobuf.MessageLite$Builder,com.google.protobuf.ExtensionRegistryLite)>($r7, r5);

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus buildPartial()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder setStatus(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>($r8);

        goto label7;

     label6:
        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder newBuilder()>();

        virtualinvoke r3.<com.google.protobuf.CodedInputStream: void readMessage(com.google.protobuf.MessageLite$Builder,com.google.protobuf.ExtensionRegistryLite)>($r4, r5);

        $r6 = virtualinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet buildPartial()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder addWavelet(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet)>($r6);

        goto label7;

     label7:
        goto label1;
    }

    public boolean hasStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: boolean hasStatus()>();

        return $z0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getStatus()>();

        return $r2;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder setStatus(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r1;
        java.lang.NullPointerException $r4;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: boolean access$2302(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse,boolean)>($r2, 1);

        $r3 = r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$2402(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse,org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>($r3, r0);

        return r1;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder setStatus(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: boolean access$2302(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse,boolean)>($r1, 1);

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus build()>();

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$2402(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse,org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>($r3, $r4);

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder mergeStatus(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r2, $r5, $r6, $r9, $r12;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1, $r3, $r4, $r7, $r8, $r13;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r10, $r11;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: boolean hasStatus()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$2400(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r4);

        $r6 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getDefaultInstance()>();

        if $r5 == $r6 goto label1;

        $r8 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r9 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$2400(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r7);

        $r10 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>($r9);

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder mergeFrom(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>(r2);

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus buildPartial()>();

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$2402(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse,org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>($r8, $r12);

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$2402(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse,org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>($r3, r2);

     label2:
        $r13 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: boolean access$2302(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse,boolean)>($r13, 1);

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder clearStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: boolean access$2302(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse,boolean)>($r1, 0);

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getDefaultInstance()>();

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$2402(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse,org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>($r2, $r3);

        return r0;
    }

    public java.util.List getWaveletList()
    {
        java.util.List $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2200(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        return $r3;
    }

    public int getWaveletCount()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: int getWaveletCount()>();

        return $i0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet getWavelet(int)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;
        int i0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet getWavelet(int)>(i0);

        return $r2;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder setWavelet(int, org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet r0;
        java.util.List $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r1;
        int i0;
        java.lang.NullPointerException $r4;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        i0 := @parameter0: int;

        r0 := @parameter1: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2200(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r2);

        interfaceinvoke $r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r0);

        return r1;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder setWavelet(int, org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r4;
        java.util.List $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;
        int i0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        i0 := @parameter0: int;

        r3 := @parameter1: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2200(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r1);

        $r4 = virtualinvoke r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet build()>();

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r4);

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder addWavelet(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet r0;
        java.lang.NullPointerException $r8;
        java.util.ArrayList $r6;
        java.util.List $r3, $r5;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r2, $r4, $r7;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet;

        if r0 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();

        throw $r8;

     label1:
        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2200(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r2);

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r7 = r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2202(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse,java.util.List)>($r7, $r6);

     label2:
        $r4 = r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2200(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r4);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r0);

        return r1;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder addWavelet(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r6;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder r5;
        java.util.ArrayList $r7;
        java.util.List $r2, $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1, $r3, $r8;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        r5 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2200(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r1);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2202(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse,java.util.List)>($r8, $r7);

     label1:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2200(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r3);

        $r6 = virtualinvoke r5.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet build()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder addAllWavelet(java.lang.Iterable)
    {
        java.lang.Iterable r3;
        java.util.ArrayList $r6;
        java.util.List $r2, $r5;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1, $r4, $r7;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        r3 := @parameter0: java.lang.Iterable;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2200(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r1);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2202(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse,java.util.List)>($r7, $r6);

     label1:
        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2200(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r4);

        staticinvoke <com.google.protobuf.GeneratedMessage$Builder: void addAll(java.lang.Iterable,java.util.Collection)>(r3, $r5);

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder clearWavelet()
    {
        java.util.List $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse result>;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.util.List access$2202(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse,java.util.List)>($r1, $r2);

        return r0;
    }

    protected volatile com.google.protobuf.GeneratedMessage internalGetResult()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse internalGetResult()>();

        return $r1;
    }

    public volatile com.google.protobuf.GeneratedMessage$Builder clone()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder clone()>();

        return $r1;
    }

    public volatile com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        com.google.protobuf.CodedInputStream r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0, $r3;
        com.google.protobuf.ExtensionRegistryLite r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        r1 := @parameter0: com.google.protobuf.CodedInputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        return $r3;
    }

    public volatile com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.Message)
    {
        com.google.protobuf.Message r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0, $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        r1 := @parameter0: com.google.protobuf.Message;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder mergeFrom(com.google.protobuf.Message)>(r1);

        return $r2;
    }

    public volatile com.google.protobuf.AbstractMessage$Builder clear()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder clear()>();

        return $r1;
    }

    public volatile com.google.protobuf.AbstractMessage$Builder clone()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder clone()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse getDefaultInstanceForType()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        com.google.protobuf.CodedInputStream r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0, $r3;
        com.google.protobuf.ExtensionRegistryLite r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        r1 := @parameter0: com.google.protobuf.CodedInputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        return $r3;
    }

    public volatile com.google.protobuf.Message$Builder clone()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder clone()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message buildPartial()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse buildPartial()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message build()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse build()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.Message)
    {
        com.google.protobuf.Message r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0, $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        r1 := @parameter0: com.google.protobuf.Message;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder mergeFrom(com.google.protobuf.Message)>(r1);

        return $r2;
    }

    public volatile com.google.protobuf.Message$Builder clear()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder clear()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse getDefaultInstanceForType()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        com.google.protobuf.CodedInputStream r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0, $r3;
        com.google.protobuf.ExtensionRegistryLite r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        r1 := @parameter0: com.google.protobuf.CodedInputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        return $r3;
    }

    public volatile com.google.protobuf.MessageLite$Builder clone()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder clone()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite buildPartial()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse buildPartial()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite build()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse build()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite$Builder clear()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder clear()>();

        return $r1;
    }

    public volatile com.google.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        com.google.protobuf.CodedInputStream r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0, $r3;
        com.google.protobuf.ExtensionRegistryLite r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        r1 := @parameter0: com.google.protobuf.CodedInputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        return $r3;
    }

    public volatile com.google.protobuf.AbstractMessageLite$Builder clone()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder clone()>();

        return $r1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder clone()>();

        return $r1;
    }

    static org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse access$1900(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder) throws com.google.protobuf.InvalidProtocolBufferException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse buildParsed()>();

        return $r1;
    }

    static org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder access$2000()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder create()>();

        return $r0;
    }
}
