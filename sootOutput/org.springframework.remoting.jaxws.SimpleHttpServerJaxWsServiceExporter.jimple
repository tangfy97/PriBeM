public class org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter extends org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter
{
    protected final org.apache.commons.logging.Log logger;
    private com.sun.net.httpserver.HttpServer server;
    private int port;
    private java.lang.String hostname;
    private int backlog;
    private int shutdownDelay;
    private java.lang.String basePath;
    private java.util.List filters;
    private com.sun.net.httpserver.Authenticator authenticator;
    private boolean localServer;

    public void <init>()
    {
        int $i1;
        org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter;

        specialinvoke r0.<org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: int port> = 8080;

        $i1 = (int) -1;

        r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: int backlog> = $i1;

        r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: int shutdownDelay> = 0;

        r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: java.lang.String basePath> = "/";

        r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: boolean localServer> = 0;

        return;
    }

    public void setServer(com.sun.net.httpserver.HttpServer)
    {
        org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter r0;
        com.sun.net.httpserver.HttpServer r1;

        r0 := @this: org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter;

        r1 := @parameter0: com.sun.net.httpserver.HttpServer;

        r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: com.sun.net.httpserver.HttpServer server> = r1;

        return;
    }

    public void setPort(int)
    {
        int i0;
        org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter r0;

        r0 := @this: org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter;

        i0 := @parameter0: int;

        r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: int port> = i0;

        return;
    }

    public void setHostname(java.lang.String)
    {
        org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter r0;
        java.lang.String r1;

        r0 := @this: org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: java.lang.String hostname> = r1;

        return;
    }

    public void setBacklog(int)
    {
        int i0;
        org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter r0;

        r0 := @this: org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter;

        i0 := @parameter0: int;

        r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: int backlog> = i0;

        return;
    }

    public void setShutdownDelay(int)
    {
        int i0;
        org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter r0;

        r0 := @this: org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter;

        i0 := @parameter0: int;

        r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: int shutdownDelay> = i0;

        return;
    }

    public void setBasePath(java.lang.String)
    {
        org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter r0;
        java.lang.String r1;

        r0 := @this: org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: java.lang.String basePath> = r1;

        return;
    }

    public void setFilters(java.util.List)
    {
        org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter r0;
        java.util.List r1;

        r0 := @this: org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter;

        r1 := @parameter0: java.util.List;

        r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: java.util.List filters> = r1;

        return;
    }

    public void setAuthenticator(com.sun.net.httpserver.Authenticator)
    {
        org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter r0;
        com.sun.net.httpserver.Authenticator r1;

        r0 := @this: org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter;

        r1 := @parameter0: com.sun.net.httpserver.Authenticator;

        r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: com.sun.net.httpserver.Authenticator authenticator> = r1;

        return;
    }

    public void afterPropertiesSet() throws java.lang.Exception
    {
        com.sun.net.httpserver.HttpServer $r1, $r3, $r5;
        int $i0, $i1, $i2;
        org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter r0;
        java.lang.String $r2, $r9, $r10;
        boolean $z0;
        java.net.InetSocketAddress $r11;
        org.apache.commons.logging.Log $r4, $r7;
        java.lang.StringBuilder $r6, $r8;

        r0 := @this: org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter;

        $r1 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: com.sun.net.httpserver.HttpServer server>;

        if $r1 != null goto label4;

        $r2 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: java.lang.String hostname>;

        if $r2 == null goto label1;

        $r11 = new java.net.InetSocketAddress;

        $r10 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: java.lang.String hostname>;

        $i2 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: int port>;

        specialinvoke $r11.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r10, $i2);

        goto label2;

     label1:
        $r11 = new java.net.InetSocketAddress;

        $i0 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: int port>;

        specialinvoke $r11.<java.net.InetSocketAddress: void <init>(int)>($i0);

     label2:
        $i1 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: int backlog>;

        $r3 = staticinvoke <com.sun.net.httpserver.HttpServer: com.sun.net.httpserver.HttpServer create(java.net.InetSocketAddress,int)>($r11, $i1);

        r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: com.sun.net.httpserver.HttpServer server> = $r3;

        $r4 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label3;

        $r7 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: org.apache.commons.logging.Log logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Starting HttpServer at address ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r9);

     label3:
        $r5 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: com.sun.net.httpserver.HttpServer server>;

        virtualinvoke $r5.<com.sun.net.httpserver.HttpServer: void start()>();

        r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: boolean localServer> = 1;

     label4:
        specialinvoke r0.<org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter: void afterPropertiesSet()>();

        return;
    }

    protected void publishEndpoint(javax.xml.ws.Endpoint, javax.jws.WebService)
    {
        javax.jws.WebService r2;
        com.sun.net.httpserver.HttpContext $r4;
        org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter r1;
        javax.xml.ws.Endpoint r0;
        java.lang.String $r3;

        r1 := @this: org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter;

        r0 := @parameter0: javax.xml.ws.Endpoint;

        r2 := @parameter1: javax.jws.WebService;

        $r3 = interfaceinvoke r2.<javax.jws.WebService: java.lang.String serviceName()>();

        $r4 = virtualinvoke r1.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: com.sun.net.httpserver.HttpContext buildHttpContext(javax.xml.ws.Endpoint,java.lang.String)>(r0, $r3);

        virtualinvoke r0.<javax.xml.ws.Endpoint: void publish(java.lang.Object)>($r4);

        return;
    }

    protected void publishEndpoint(javax.xml.ws.Endpoint, javax.xml.ws.WebServiceProvider)
    {
        javax.xml.ws.WebServiceProvider r2;
        com.sun.net.httpserver.HttpContext $r4;
        org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter r1;
        javax.xml.ws.Endpoint r0;
        java.lang.String $r3;

        r1 := @this: org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter;

        r0 := @parameter0: javax.xml.ws.Endpoint;

        r2 := @parameter1: javax.xml.ws.WebServiceProvider;

        $r3 = interfaceinvoke r2.<javax.xml.ws.WebServiceProvider: java.lang.String serviceName()>();

        $r4 = virtualinvoke r1.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: com.sun.net.httpserver.HttpContext buildHttpContext(javax.xml.ws.Endpoint,java.lang.String)>(r0, $r3);

        virtualinvoke r0.<javax.xml.ws.Endpoint: void publish(java.lang.Object)>($r4);

        return;
    }

    protected com.sun.net.httpserver.HttpContext buildHttpContext(javax.xml.ws.Endpoint, java.lang.String)
    {
        com.sun.net.httpserver.HttpServer $r4;
        com.sun.net.httpserver.Authenticator $r7, $r8;
        java.util.List $r6, $r9, $r10;
        com.sun.net.httpserver.HttpContext $r5;
        org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter r0;
        javax.xml.ws.Endpoint r1;
        java.lang.String r2, $r3;

        r0 := @this: org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter;

        r1 := @parameter0: javax.xml.ws.Endpoint;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: java.lang.String calculateEndpointPath(javax.xml.ws.Endpoint,java.lang.String)>(r1, r2);

        $r4 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: com.sun.net.httpserver.HttpServer server>;

        $r5 = virtualinvoke $r4.<com.sun.net.httpserver.HttpServer: com.sun.net.httpserver.HttpContext createContext(java.lang.String)>($r3);

        $r6 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: java.util.List filters>;

        if $r6 == null goto label1;

        $r9 = virtualinvoke $r5.<com.sun.net.httpserver.HttpContext: java.util.List getFilters()>();

        $r10 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: java.util.List filters>;

        interfaceinvoke $r9.<java.util.List: boolean addAll(java.util.Collection)>($r10);

     label1:
        $r7 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: com.sun.net.httpserver.Authenticator authenticator>;

        if $r7 == null goto label2;

        $r8 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: com.sun.net.httpserver.Authenticator authenticator>;

        virtualinvoke $r5.<com.sun.net.httpserver.HttpContext: com.sun.net.httpserver.Authenticator setAuthenticator(com.sun.net.httpserver.Authenticator)>($r8);

     label2:
        return $r5;
    }

    protected java.lang.String calculateEndpointPath(javax.xml.ws.Endpoint, java.lang.String)
    {
        org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter r1;
        java.lang.StringBuilder $r0, $r5;
        java.lang.String $r2, $r3, r4, $r6;
        javax.xml.ws.Endpoint r7;

        r1 := @this: org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter;

        r7 := @parameter0: javax.xml.ws.Endpoint;

        r4 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        $r2 = r1.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: java.lang.String basePath>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public void destroy()
    {
        com.sun.net.httpserver.HttpServer $r2;
        int $i0;
        org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter r0;
        org.apache.commons.logging.Log $r1;
        boolean $z0;

        r0 := @this: org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter;

        specialinvoke r0.<org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter: void destroy()>();

        $z0 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: boolean localServer>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Stopping HttpServer");

        $r2 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: com.sun.net.httpserver.HttpServer server>;

        $i0 = r0.<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: int shutdownDelay>;

        virtualinvoke $r2.<com.sun.net.httpserver.HttpServer: void stop(int)>($i0);

     label1:
        return;
    }
}
