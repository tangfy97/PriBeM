public class org.junit.internal.matchers.ThrowableMessageMatcher extends org.hamcrest.TypeSafeMatcher
{
    private final org.hamcrest.Matcher fMatcher;

    public void <init>(org.hamcrest.Matcher)
    {
        org.junit.internal.matchers.ThrowableMessageMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: org.junit.internal.matchers.ThrowableMessageMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<org.junit.internal.matchers.ThrowableMessageMatcher: org.hamcrest.Matcher fMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.Description r0;
        org.junit.internal.matchers.ThrowableMessageMatcher r1;
        org.hamcrest.Matcher $r2;

        r1 := @this: org.junit.internal.matchers.ThrowableMessageMatcher;

        r0 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r0.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("exception with message ");

        $r2 = r1.<org.junit.internal.matchers.ThrowableMessageMatcher: org.hamcrest.Matcher fMatcher>;

        interfaceinvoke r0.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>($r2);

        return;
    }

    protected boolean matchesSafely(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        org.hamcrest.Matcher $r2;
        java.lang.String $r3;
        org.junit.internal.matchers.ThrowableMessageMatcher r0;
        boolean $z0;

        r0 := @this: org.junit.internal.matchers.ThrowableMessageMatcher;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<org.junit.internal.matchers.ThrowableMessageMatcher: org.hamcrest.Matcher fMatcher>;

        $r3 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r3);

        return $z0;
    }

    protected void describeMismatchSafely(java.lang.Throwable, org.hamcrest.Description)
    {
        java.lang.Throwable r2;
        org.hamcrest.Description r0;
        org.hamcrest.Matcher $r3;
        java.lang.String $r4;
        org.junit.internal.matchers.ThrowableMessageMatcher r1;

        r1 := @this: org.junit.internal.matchers.ThrowableMessageMatcher;

        r2 := @parameter0: java.lang.Throwable;

        r0 := @parameter1: org.hamcrest.Description;

        interfaceinvoke r0.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("message ");

        $r3 = r1.<org.junit.internal.matchers.ThrowableMessageMatcher: org.hamcrest.Matcher fMatcher>;

        $r4 = virtualinvoke r2.<java.lang.Throwable: java.lang.String getMessage()>();

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>($r4, r0);

        return;
    }

    public static org.hamcrest.Matcher hasMessage(org.hamcrest.Matcher)
    {
        org.junit.internal.matchers.ThrowableMessageMatcher $r0;
        org.hamcrest.Matcher r1;

        r1 := @parameter0: org.hamcrest.Matcher;

        $r0 = new org.junit.internal.matchers.ThrowableMessageMatcher;

        specialinvoke $r0.<org.junit.internal.matchers.ThrowableMessageMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return $r0;
    }

    protected volatile void describeMismatchSafely(java.lang.Object, org.hamcrest.Description)
    {
        java.lang.Throwable $r3;
        org.hamcrest.Description r2;
        java.lang.Object r1;
        org.junit.internal.matchers.ThrowableMessageMatcher r0;

        r0 := @this: org.junit.internal.matchers.ThrowableMessageMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (java.lang.Throwable) r1;

        virtualinvoke r0.<org.junit.internal.matchers.ThrowableMessageMatcher: void describeMismatchSafely(java.lang.Throwable,org.hamcrest.Description)>($r3, r2);

        return;
    }

    protected volatile boolean matchesSafely(java.lang.Object)
    {
        java.lang.Throwable $r2;
        java.lang.Object r1;
        org.junit.internal.matchers.ThrowableMessageMatcher r0;
        boolean $z0;

        r0 := @this: org.junit.internal.matchers.ThrowableMessageMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Throwable) r1;

        $z0 = virtualinvoke r0.<org.junit.internal.matchers.ThrowableMessageMatcher: boolean matchesSafely(java.lang.Throwable)>($r2);

        return $z0;
    }
}
