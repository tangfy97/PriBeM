public class org.apache.batik.util.SoftReferenceCache extends java.lang.Object
{
    protected final java.util.Map map;

    protected void <init>()
    {
        java.util.HashMap $r1;
        org.apache.batik.util.SoftReferenceCache r0;

        r0 := @this: org.apache.batik.util.SoftReferenceCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.util.SoftReferenceCache: java.util.Map map> = $r1;

        return;
    }

    public synchronized void flush()
    {
        org.apache.batik.util.SoftReferenceCache r0;
        java.util.Map $r1;

        r0 := @this: org.apache.batik.util.SoftReferenceCache;

        $r1 = r0.<org.apache.batik.util.SoftReferenceCache: java.util.Map map>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    protected final synchronized boolean isPresentImpl(java.lang.Object)
    {
        java.util.Map $r2, $r3;
        java.lang.Object r1, $r4, $r6;
        org.apache.batik.util.SoftReferenceCache r0;
        java.lang.ref.SoftReference r5;
        boolean $z0;

        r0 := @this: org.apache.batik.util.SoftReferenceCache;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.batik.util.SoftReferenceCache: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<org.apache.batik.util.SoftReferenceCache: java.util.Map map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r4 != null goto label2;

        return 1;

     label2:
        r5 = (java.lang.ref.SoftReference) $r4;

        $r6 = virtualinvoke r5.<java.lang.ref.SoftReference: java.lang.Object get()>();

        if $r6 == null goto label3;

        return 1;

     label3:
        virtualinvoke r0.<org.apache.batik.util.SoftReferenceCache: void clearImpl(java.lang.Object)>(r1);

        return 0;
    }

    protected final synchronized boolean isDoneImpl(java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Object r1, $r3, $r5;
        org.apache.batik.util.SoftReferenceCache r0;
        java.lang.ref.SoftReference r4;

        r0 := @this: org.apache.batik.util.SoftReferenceCache;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.batik.util.SoftReferenceCache: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        return 0;

     label1:
        r4 = (java.lang.ref.SoftReference) $r3;

        $r5 = virtualinvoke r4.<java.lang.ref.SoftReference: java.lang.Object get()>();

        if $r5 == null goto label2;

        return 1;

     label2:
        virtualinvoke r0.<org.apache.batik.util.SoftReferenceCache: void clearImpl(java.lang.Object)>(r1);

        return 0;
    }

    protected final synchronized java.lang.Object requestImpl(java.lang.Object)
    {
        java.lang.InterruptedException $r7;
        java.util.Map $r2, $r3, $r4, $r5, $r10;
        java.lang.Object r1, $r6, r8;
        org.apache.batik.util.SoftReferenceCache r0;
        java.lang.ref.SoftReference r9;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.util.SoftReferenceCache;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.batik.util.SoftReferenceCache: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label8;

        $r3 = r0.<org.apache.batik.util.SoftReferenceCache: java.util.Map map>;

        r8 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        goto label6;

     label1:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        $r4 = r0.<org.apache.batik.util.SoftReferenceCache: java.util.Map map>;

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 != 0 goto label5;

        goto label7;

     label5:
        $r5 = r0.<org.apache.batik.util.SoftReferenceCache: java.util.Map map>;

        r8 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

     label6:
        if r8 == null goto label1;

     label7:
        if r8 == null goto label8;

        r9 = (java.lang.ref.SoftReference) r8;

        $r6 = virtualinvoke r9.<java.lang.ref.SoftReference: java.lang.Object get()>();

        if $r6 == null goto label8;

        return $r6;

     label8:
        $r10 = r0.<org.apache.batik.util.SoftReferenceCache: java.util.Map map>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, null);

        return null;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    protected final synchronized void clearImpl(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.batik.util.SoftReferenceCache r0;
        java.util.Map $r2;

        r0 := @this: org.apache.batik.util.SoftReferenceCache;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.batik.util.SoftReferenceCache: java.util.Map map>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    protected final synchronized void putImpl(java.lang.Object, java.lang.Object)
    {
        java.util.Map $r2, $r5;
        java.lang.Object r1, r4;
        org.apache.batik.util.SoftReferenceCache r0;
        org.apache.batik.util.SoftReferenceCache$SoftRefKey $r3;
        boolean $z0;

        r0 := @this: org.apache.batik.util.SoftReferenceCache;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<org.apache.batik.util.SoftReferenceCache: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = new org.apache.batik.util.SoftReferenceCache$SoftRefKey;

        specialinvoke $r3.<org.apache.batik.util.SoftReferenceCache$SoftRefKey: void <init>(org.apache.batik.util.SoftReferenceCache,java.lang.Object,java.lang.Object)>(r0, r4, r1);

        $r5 = r0.<org.apache.batik.util.SoftReferenceCache: java.util.Map map>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label1:
        return;
    }
}
