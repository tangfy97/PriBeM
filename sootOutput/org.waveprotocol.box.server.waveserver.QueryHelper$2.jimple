final class org.waveprotocol.box.server.waveserver.QueryHelper$2 extends java.lang.Object implements java.util.Comparator
{

    void <init>()
    {
        org.waveprotocol.box.server.waveserver.QueryHelper$2 r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.QueryHelper$2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(org.waveprotocol.wave.model.wave.data.WaveViewData, org.waveprotocol.wave.model.wave.data.WaveViewData)
    {
        org.waveprotocol.wave.model.wave.data.WaveViewData r0, r1;
        int $i0, $i1;
        java.util.Comparator $r2;
        org.waveprotocol.box.server.waveserver.QueryHelper$2 r3;

        r3 := @this: org.waveprotocol.box.server.waveserver.QueryHelper$2;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveViewData;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.WaveViewData;

        $r2 = <org.waveprotocol.box.server.waveserver.QueryHelper: java.util.Comparator ASC_LMT_COMPARATOR>;

        $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r1);

        $i1 = neg $i0;

        return $i1;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.data.WaveViewData $r3, $r4;
        int $i0;
        java.lang.Object r1, r2;
        org.waveprotocol.box.server.waveserver.QueryHelper$2 r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.QueryHelper$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.waveprotocol.wave.model.wave.data.WaveViewData) r1;

        $r3 = (org.waveprotocol.wave.model.wave.data.WaveViewData) r2;

        $i0 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.QueryHelper$2: int compare(org.waveprotocol.wave.model.wave.data.WaveViewData,org.waveprotocol.wave.model.wave.data.WaveViewData)>($r4, $r3);

        return $i0;
    }
}
