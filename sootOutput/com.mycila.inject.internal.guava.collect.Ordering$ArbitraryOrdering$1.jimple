class com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrdering$1 extends java.lang.Object implements com.mycila.inject.internal.guava.base.Function
{
    final java.util.concurrent.atomic.AtomicInteger counter;
    final com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrdering this$0;

    void <init>(com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrdering)
    {
        com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrdering r1;
        com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrdering$1 r0;
        java.util.concurrent.atomic.AtomicInteger $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrdering$1;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrdering;

        r0.<com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrdering$1: com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrdering this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrdering$1: java.util.concurrent.atomic.AtomicInteger counter> = $r2;

        return;
    }

    public java.lang.Integer apply(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrdering$1 r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;
        java.lang.Object r3;
        java.lang.Integer $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrdering$1;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrdering$1: java.util.concurrent.atomic.AtomicInteger counter>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r2;
    }

    public volatile java.lang.Object apply(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrdering$1 r0;
        java.lang.Object r1;
        java.lang.Integer $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrdering$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Ordering$ArbitraryOrdering$1: java.lang.Integer apply(java.lang.Object)>(r1);

        return $r2;
    }
}
