public class org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream
{
    private java.lang.String channelId;
    private org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl delta;
    private org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl commitVersion;
    private org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl terminator;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;
        org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream)>(r1);

        return;
    }

    public void copyFrom(org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r1;
        org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator $r2;
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdate $r4;
        org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream r0;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r3;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream;

        $z0 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream: boolean hasChannelId()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream: java.lang.String getChannelId()>();

        virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: void setChannelId(java.lang.String)>($r5);

        goto label2;

     label1:
        virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: void clearChannelId()>();

     label2:
        $z1 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream: boolean hasDelta()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream: org.waveprotocol.wave.concurrencycontrol.WaveletUpdate getDelta()>();

        virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: void setDelta(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)>($r4);

        goto label4;

     label3:
        virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: void clearDelta()>();

     label4:
        $z2 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream: boolean hasCommitVersion()>();

        if $z2 == 0 goto label5;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream: org.waveprotocol.wave.federation.ProtocolHashedVersion getCommitVersion()>();

        virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: void setCommitVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r3);

        goto label6;

     label5:
        virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: void clearCommitVersion()>();

     label6:
        $z3 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream: boolean hasTerminator()>();

        if $z3 == 0 goto label7;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream: org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator getTerminator()>();

        virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: void setTerminator(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)>($r2);

        goto label8;

     label7:
        virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: void clearTerminator()>();

     label8:
        return;
    }

    public boolean hasChannelId()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: java.lang.String channelId>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearChannelId()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: java.lang.String channelId> = null;

        return;
    }

    public java.lang.String getChannelId()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: java.lang.String channelId>;

        return $r1;
    }

    public void setChannelId(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: java.lang.String channelId> = r1;

        return;
    }

    public boolean hasDelta()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl delta>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearDelta()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl delta> = null;

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl getDelta()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl $r0, $r2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl delta>;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)>($r2);

        return $r0;
    }

    public void setDelta(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdate r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletUpdate;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)>(r2);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl delta> = $r1;

        return;
    }

    public boolean hasCommitVersion()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl commitVersion>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearCommitVersion()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl commitVersion> = null;

        return;
    }

    public org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl getCommitVersion()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r1;
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r0, $r2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        $r0 = new org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl commitVersion>;

        specialinvoke $r0.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r2);

        return $r0;
    }

    public void setCommitVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        $r1 = new org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r2);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl commitVersion> = $r1;

        return;
    }

    public boolean hasTerminator()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl terminator>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearTerminator()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl terminator> = null;

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl getTerminator()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl $r0, $r2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl terminator>;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)>($r2);

        return $r0;
    }

    public void setTerminator(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;
        org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator r2;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)>(r2);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl terminator> = $r1;

        return;
    }

    protected void reset()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: java.lang.String channelId> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl delta> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl commitVersion> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl terminator> = null;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r1;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: boolean isEqualTo(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r1;
        java.lang.Object r0;
        boolean $z0, $z1;
        org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream $r2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream;

        if $z0 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream) r0;

        $z1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStreamUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream,org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream)>(r1, $r2);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        $i0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStreamUtil: int getHashCode(org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream)>(r0);

        return $i0;
    }

    public volatile org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator getTerminator()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl getTerminator()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolHashedVersion getCommitVersion()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl getCommitVersion()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.concurrencycontrol.WaveletUpdate getDelta()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl r0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.OpenWaveletChannelStreamImpl: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl getDelta()>();

        return $r1;
    }
}
