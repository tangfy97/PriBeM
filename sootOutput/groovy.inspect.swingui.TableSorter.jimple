public class groovy.inspect.swingui.TableSorter extends groovy.inspect.swingui.TableMap
{
    int[] indexes;
    java.util.Vector sortingColumns;
    boolean ascending;
    int lastSortedColumn;
    static java.lang.Class class$java$lang$Number;
    static java.lang.Class class$java$util$Date;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$java$lang$Boolean;

    public void <init>()
    {
        java.util.Vector $r3;
        groovy.inspect.swingui.TableSorter r0;
        int[] $r2;
        int $i1;

        r0 := @this: groovy.inspect.swingui.TableSorter;

        specialinvoke r0.<groovy.inspect.swingui.TableMap: void <init>()>();

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<groovy.inspect.swingui.TableSorter: java.util.Vector sortingColumns> = $r3;

        r0.<groovy.inspect.swingui.TableSorter: boolean ascending> = 1;

        $i1 = (int) -1;

        r0.<groovy.inspect.swingui.TableSorter: int lastSortedColumn> = $i1;

        $r2 = newarray (int)[0];

        r0.<groovy.inspect.swingui.TableSorter: int[] indexes> = $r2;

        return;
    }

    public void <init>(javax.swing.table.TableModel)
    {
        java.util.Vector $r3;
        groovy.inspect.swingui.TableSorter r0;
        int $i1;
        javax.swing.table.TableModel r2;

        r0 := @this: groovy.inspect.swingui.TableSorter;

        r2 := @parameter0: javax.swing.table.TableModel;

        specialinvoke r0.<groovy.inspect.swingui.TableMap: void <init>()>();

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<groovy.inspect.swingui.TableSorter: java.util.Vector sortingColumns> = $r3;

        r0.<groovy.inspect.swingui.TableSorter: boolean ascending> = 1;

        $i1 = (int) -1;

        r0.<groovy.inspect.swingui.TableSorter: int lastSortedColumn> = $i1;

        virtualinvoke r0.<groovy.inspect.swingui.TableSorter: void setModel(javax.swing.table.TableModel)>(r2);

        return;
    }

    public void setModel(javax.swing.table.TableModel)
    {
        groovy.inspect.swingui.TableSorter r0;
        javax.swing.table.TableModel r1;

        r0 := @this: groovy.inspect.swingui.TableSorter;

        r1 := @parameter0: javax.swing.table.TableModel;

        specialinvoke r0.<groovy.inspect.swingui.TableMap: void setModel(javax.swing.table.TableModel)>(r1);

        virtualinvoke r0.<groovy.inspect.swingui.TableSorter: void reallocateIndexes()>();

        return;
    }

    public int compareRowsByColumn(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i9;
        javax.swing.table.TableModel $r1, r3;
        groovy.inspect.swingui.TableSorter r0;
        java.lang.Class $r2, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        java.lang.Object $r4, $r5;

        r0 := @this: groovy.inspect.swingui.TableSorter;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        $r1 = r0.<groovy.inspect.swingui.TableSorter: javax.swing.table.TableModel model>;

        $r2 = interfaceinvoke $r1.<javax.swing.table.TableModel: java.lang.Class getColumnClass(int)>(i0);

        r3 = r0.<groovy.inspect.swingui.TableSorter: javax.swing.table.TableModel model>;

        $r4 = interfaceinvoke r3.<javax.swing.table.TableModel: java.lang.Object getValueAt(int,int)>(i1, i0);

        $r5 = interfaceinvoke r3.<javax.swing.table.TableModel: java.lang.Object getValueAt(int,int)>(i2, i0);

        if $r4 != null goto label01;

        if $r5 != null goto label01;

        return 0;

     label01:
        if $r4 != null goto label02;

        $i9 = (int) -1;

        return $i9;

     label02:
        if $r5 != null goto label03;

        return 1;

     label03:
        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r7 = <groovy.inspect.swingui.TableSorter: java.lang.Class class$java$lang$Number>;

        if $r7 != null goto label04;

        $r11 = staticinvoke <groovy.inspect.swingui.TableSorter: java.lang.Class class$(java.lang.String)>("java.lang.Number");

        <groovy.inspect.swingui.TableSorter: java.lang.Class class$java$lang$Number> = $r11;

        goto label05;

     label04:
        $r11 = <groovy.inspect.swingui.TableSorter: java.lang.Class class$java$lang$Number>;

     label05:
        if $r6 != $r11 goto label06;

        $i7 = specialinvoke r0.<groovy.inspect.swingui.TableSorter: int compareNumbers(javax.swing.table.TableModel,int,int,int)>(r3, i1, i0, i2);

        return $i7;

     label06:
        $r8 = <groovy.inspect.swingui.TableSorter: java.lang.Class class$java$util$Date>;

        if $r8 != null goto label07;

        $r12 = staticinvoke <groovy.inspect.swingui.TableSorter: java.lang.Class class$(java.lang.String)>("java.util.Date");

        <groovy.inspect.swingui.TableSorter: java.lang.Class class$java$util$Date> = $r12;

        goto label08;

     label07:
        $r12 = <groovy.inspect.swingui.TableSorter: java.lang.Class class$java$util$Date>;

     label08:
        if $r2 != $r12 goto label09;

        $i6 = specialinvoke r0.<groovy.inspect.swingui.TableSorter: int compareDates(javax.swing.table.TableModel,int,int,int)>(r3, i1, i0, i2);

        return $i6;

     label09:
        $r9 = <groovy.inspect.swingui.TableSorter: java.lang.Class class$java$lang$String>;

        if $r9 != null goto label10;

        $r13 = staticinvoke <groovy.inspect.swingui.TableSorter: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <groovy.inspect.swingui.TableSorter: java.lang.Class class$java$lang$String> = $r13;

        goto label11;

     label10:
        $r13 = <groovy.inspect.swingui.TableSorter: java.lang.Class class$java$lang$String>;

     label11:
        if $r2 != $r13 goto label12;

        $i5 = specialinvoke r0.<groovy.inspect.swingui.TableSorter: int compareStrings(javax.swing.table.TableModel,int,int,int)>(r3, i1, i0, i2);

        return $i5;

     label12:
        $r10 = <groovy.inspect.swingui.TableSorter: java.lang.Class class$java$lang$Boolean>;

        if $r10 != null goto label13;

        $r14 = staticinvoke <groovy.inspect.swingui.TableSorter: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <groovy.inspect.swingui.TableSorter: java.lang.Class class$java$lang$Boolean> = $r14;

        goto label14;

     label13:
        $r14 = <groovy.inspect.swingui.TableSorter: java.lang.Class class$java$lang$Boolean>;

     label14:
        if $r2 != $r14 goto label15;

        $i4 = specialinvoke r0.<groovy.inspect.swingui.TableSorter: int compareBooleans(javax.swing.table.TableModel,int,int,int)>(r3, i1, i0, i2);

        return $i4;

     label15:
        $i3 = specialinvoke r0.<groovy.inspect.swingui.TableSorter: int compareObjects(javax.swing.table.TableModel,int,int,int)>(r3, i1, i0, i2);

        return $i3;
    }

    private int compareObjects(javax.swing.table.TableModel, int, int, int)
    {
        groovy.inspect.swingui.TableSorter r5;
        int i0, i1, i2, $i3, $i5;
        java.lang.Object $r1, $r3;
        java.lang.String $r2, $r4;
        javax.swing.table.TableModel r0;

        r5 := @this: groovy.inspect.swingui.TableSorter;

        r0 := @parameter0: javax.swing.table.TableModel;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = interfaceinvoke r0.<javax.swing.table.TableModel: java.lang.Object getValueAt(int,int)>(i0, i1);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = interfaceinvoke r0.<javax.swing.table.TableModel: java.lang.Object getValueAt(int,int)>(i2, i1);

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $i3 = virtualinvoke $r2.<java.lang.String: int compareTo(java.lang.String)>($r4);

        if $i3 >= 0 goto label1;

        $i5 = (int) -1;

        return $i5;

     label1:
        if $i3 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private int compareBooleans(javax.swing.table.TableModel, int, int, int)
    {
        groovy.inspect.swingui.TableSorter r5;
        int i0, i1, i2, $i4;
        java.lang.Boolean r2, r4;
        java.lang.Object $r1, $r3;
        javax.swing.table.TableModel r0;
        boolean $z0, $z1;

        r5 := @this: groovy.inspect.swingui.TableSorter;

        r0 := @parameter0: javax.swing.table.TableModel;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = interfaceinvoke r0.<javax.swing.table.TableModel: java.lang.Object getValueAt(int,int)>(i0, i1);

        r2 = (java.lang.Boolean) $r1;

        $z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        $r3 = interfaceinvoke r0.<javax.swing.table.TableModel: java.lang.Object getValueAt(int,int)>(i2, i1);

        r4 = (java.lang.Boolean) $r3;

        $z1 = virtualinvoke r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != $z1 goto label1;

        return 0;

     label1:
        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i4 = (int) -1;

        return $i4;
    }

    private int compareStrings(javax.swing.table.TableModel, int, int, int)
    {
        groovy.inspect.swingui.TableSorter r5;
        int i0, i1, i2, $i3, $i5;
        java.lang.Object $r1, $r3;
        java.lang.String r2, r4;
        javax.swing.table.TableModel r0;

        r5 := @this: groovy.inspect.swingui.TableSorter;

        r0 := @parameter0: javax.swing.table.TableModel;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = interfaceinvoke r0.<javax.swing.table.TableModel: java.lang.Object getValueAt(int,int)>(i0, i1);

        r2 = (java.lang.String) $r1;

        $r3 = interfaceinvoke r0.<javax.swing.table.TableModel: java.lang.Object getValueAt(int,int)>(i2, i1);

        r4 = (java.lang.String) $r3;

        $i3 = virtualinvoke r2.<java.lang.String: int compareTo(java.lang.String)>(r4);

        if $i3 >= 0 goto label1;

        $i5 = (int) -1;

        return $i5;

     label1:
        if $i3 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private int compareDates(javax.swing.table.TableModel, int, int, int)
    {
        java.util.Date r2, r4;
        long $l2, $l4;
        byte $b5, $b6;
        int i0, i1, i3, $i7, $i9, $i10;
        javax.swing.table.TableModel r0;
        groovy.inspect.swingui.TableSorter r5;
        java.lang.Object $r1, $r3;

        r5 := @this: groovy.inspect.swingui.TableSorter;

        r0 := @parameter0: javax.swing.table.TableModel;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = interfaceinvoke r0.<javax.swing.table.TableModel: java.lang.Object getValueAt(int,int)>(i0, i1);

        r2 = (java.util.Date) $r1;

        $l2 = virtualinvoke r2.<java.util.Date: long getTime()>();

        $r3 = interfaceinvoke r0.<javax.swing.table.TableModel: java.lang.Object getValueAt(int,int)>(i3, i1);

        r4 = (java.util.Date) $r3;

        $l4 = virtualinvoke r4.<java.util.Date: long getTime()>();

        $b5 = $l2 cmp $l4;

        $i7 = (int) $b5;

        if $i7 >= 0 goto label1;

        $i9 = (int) -1;

        return $i9;

     label1:
        $b6 = $l2 cmp $l4;

        $i10 = (int) $b6;

        if $i10 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private int compareNumbers(javax.swing.table.TableModel, int, int, int)
    {
        byte $b3, $b4;
        int i0, i1, i2, $i5, $i7, $i8;
        java.lang.Number r2, r4;
        javax.swing.table.TableModel r0;
        double $d0, $d1;
        groovy.inspect.swingui.TableSorter r5;
        java.lang.Object $r1, $r3;

        r5 := @this: groovy.inspect.swingui.TableSorter;

        r0 := @parameter0: javax.swing.table.TableModel;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = interfaceinvoke r0.<javax.swing.table.TableModel: java.lang.Object getValueAt(int,int)>(i0, i1);

        r2 = (java.lang.Number) $r1;

        $d0 = virtualinvoke r2.<java.lang.Number: double doubleValue()>();

        $r3 = interfaceinvoke r0.<javax.swing.table.TableModel: java.lang.Object getValueAt(int,int)>(i2, i1);

        r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke r4.<java.lang.Number: double doubleValue()>();

        $b3 = $d0 cmpg $d1;

        $i5 = (int) $b3;

        if $i5 >= 0 goto label1;

        $i7 = (int) -1;

        return $i7;

     label1:
        $b4 = $d0 cmpl $d1;

        $i8 = (int) $b4;

        if $i8 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public int compare(int, int)
    {
        groovy.inspect.swingui.TableSorter r0;
        java.lang.Integer r4;
        java.util.Vector $r1, $r2;
        int $i0, i1, i2, $i3, $i4, i5, $i6;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: groovy.inspect.swingui.TableSorter;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i5 = 0;

     label1:
        $r1 = r0.<groovy.inspect.swingui.TableSorter: java.util.Vector sortingColumns>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if i5 >= $i0 goto label5;

        $r2 = r0.<groovy.inspect.swingui.TableSorter: java.util.Vector sortingColumns>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>(i5);

        r4 = (java.lang.Integer) $r3;

        $i3 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $i4 = virtualinvoke r0.<groovy.inspect.swingui.TableSorter: int compareRowsByColumn(int,int,int)>(i1, i2, $i3);

        if $i4 == 0 goto label4;

        $z0 = r0.<groovy.inspect.swingui.TableSorter: boolean ascending>;

        if $z0 == 0 goto label2;

        $i6 = $i4;

        goto label3;

     label2:
        $i6 = neg $i4;

     label3:
        return $i6;

     label4:
        i5 = i5 + 1;

        goto label1;

     label5:
        return 0;
    }

    public void reallocateIndexes()
    {
        groovy.inspect.swingui.TableSorter r0;
        int[] $r2, $r3;
        int $i0, i1;
        javax.swing.table.TableModel $r1;

        r0 := @this: groovy.inspect.swingui.TableSorter;

        $r1 = r0.<groovy.inspect.swingui.TableSorter: javax.swing.table.TableModel model>;

        $i0 = interfaceinvoke $r1.<javax.swing.table.TableModel: int getRowCount()>();

        $r2 = newarray (int)[$i0];

        r0.<groovy.inspect.swingui.TableSorter: int[] indexes> = $r2;

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r3 = r0.<groovy.inspect.swingui.TableSorter: int[] indexes>;

        $r3[i1] = i1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void tableChanged(javax.swing.event.TableModelEvent)
    {
        java.io.PrintStream $r0;
        javax.swing.event.TableModelEvent r2;
        groovy.inspect.swingui.TableSorter r1;

        r1 := @this: groovy.inspect.swingui.TableSorter;

        r2 := @parameter0: javax.swing.event.TableModelEvent;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Sorter: tableChanged");

        virtualinvoke r1.<groovy.inspect.swingui.TableSorter: void reallocateIndexes()>();

        specialinvoke r1.<groovy.inspect.swingui.TableMap: void tableChanged(javax.swing.event.TableModelEvent)>(r2);

        return;
    }

    public void checkModel()
    {
        java.io.PrintStream $r3;
        groovy.inspect.swingui.TableSorter r0;
        int[] $r1;
        int $i0, $i1;
        javax.swing.table.TableModel $r2;

        r0 := @this: groovy.inspect.swingui.TableSorter;

        $r1 = r0.<groovy.inspect.swingui.TableSorter: int[] indexes>;

        $i0 = lengthof $r1;

        $r2 = r0.<groovy.inspect.swingui.TableSorter: javax.swing.table.TableModel model>;

        $i1 = interfaceinvoke $r2.<javax.swing.table.TableModel: int getRowCount()>();

        if $i0 == $i1 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Sorter not informed of a change in model.");

     label1:
        return;
    }

    public void sort(java.lang.Object)
    {
        groovy.inspect.swingui.TableSorter r0;
        int[] $r1, $r3, $r4, $r5, $r6;
        int $i0;
        java.lang.Object $r2, r7;

        r0 := @this: groovy.inspect.swingui.TableSorter;

        r7 := @parameter0: java.lang.Object;

        virtualinvoke r0.<groovy.inspect.swingui.TableSorter: void checkModel()>();

        $r1 = r0.<groovy.inspect.swingui.TableSorter: int[] indexes>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        $r6 = (int[]) $r3;

        $r5 = r0.<groovy.inspect.swingui.TableSorter: int[] indexes>;

        $r4 = r0.<groovy.inspect.swingui.TableSorter: int[] indexes>;

        $i0 = lengthof $r4;

        virtualinvoke r0.<groovy.inspect.swingui.TableSorter: void shuttlesort(int[],int[],int,int)>($r6, $r5, 0, $i0);

        return;
    }

    public void n2sort()
    {
        groovy.inspect.swingui.TableSorter r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i8;

        r0 := @this: groovy.inspect.swingui.TableSorter;

        i5 = 0;

     label1:
        $i0 = virtualinvoke r0.<groovy.inspect.swingui.TableSorter: int getRowCount()>();

        if i5 >= $i0 goto label5;

        i6 = i5 + 1;

     label2:
        $i1 = virtualinvoke r0.<groovy.inspect.swingui.TableSorter: int getRowCount()>();

        if i6 >= $i1 goto label4;

        $r1 = r0.<groovy.inspect.swingui.TableSorter: int[] indexes>;

        $i3 = $r1[i5];

        $r2 = r0.<groovy.inspect.swingui.TableSorter: int[] indexes>;

        $i2 = $r2[i6];

        $i4 = virtualinvoke r0.<groovy.inspect.swingui.TableSorter: int compare(int,int)>($i3, $i2);

        $i8 = (int) -1;

        if $i4 != $i8 goto label3;

        virtualinvoke r0.<groovy.inspect.swingui.TableSorter: void swap(int,int)>(i5, i6);

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        i5 = i5 + 1;

        goto label1;

     label5:
        return;
    }

    public void shuttlesort(int[], int[], int, int)
    {
        int[] r1, r2;
        int i0, i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20;
        groovy.inspect.swingui.TableSorter r0;

        r0 := @this: groovy.inspect.swingui.TableSorter;

        r2 := @parameter0: int[];

        r1 := @parameter1: int[];

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        $i2 = i0 - i1;

        if $i2 >= 2 goto label1;

        return;

     label1:
        $i3 = i1 + i0;

        i4 = $i3 / 2;

        virtualinvoke r0.<groovy.inspect.swingui.TableSorter: void shuttlesort(int[],int[],int,int)>(r1, r2, i1, i4);

        virtualinvoke r0.<groovy.inspect.swingui.TableSorter: void shuttlesort(int[],int[],int,int)>(r1, r2, i4, i0);

        i18 = i1;

        i19 = i4;

        $i5 = i0 - i1;

        if $i5 < 4 goto label2;

        $i13 = i4 - 1;

        $i15 = r2[$i13];

        $i14 = r2[i4];

        $i16 = virtualinvoke r0.<groovy.inspect.swingui.TableSorter: int compare(int,int)>($i15, $i14);

        if $i16 > 0 goto label2;

        $i17 = i0 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i1, r1, i1, $i17);

        return;

     label2:
        i20 = i1;

     label3:
        if i20 >= i0 goto label7;

        if i19 >= i0 goto label4;

        if i18 >= i4 goto label5;

        $i11 = r2[i18];

        $i10 = r2[i19];

        $i12 = virtualinvoke r0.<groovy.inspect.swingui.TableSorter: int compare(int,int)>($i11, $i10);

        if $i12 > 0 goto label5;

     label4:
        $i6 = i18;

        i18 = i18 + 1;

        $i7 = r2[$i6];

        r1[i20] = $i7;

        goto label6;

     label5:
        $i8 = i19;

        i19 = i19 + 1;

        $i9 = r2[$i8];

        r1[i20] = $i9;

     label6:
        i20 = i20 + 1;

        goto label3;

     label7:
        return;
    }

    public void swap(int, int)
    {
        groovy.inspect.swingui.TableSorter r0;
        int[] $r1, $r2, $r3, $r4;
        int i0, i1, i2, $i3;

        r0 := @this: groovy.inspect.swingui.TableSorter;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<groovy.inspect.swingui.TableSorter: int[] indexes>;

        i1 = $r1[i0];

        $r3 = r0.<groovy.inspect.swingui.TableSorter: int[] indexes>;

        $r2 = r0.<groovy.inspect.swingui.TableSorter: int[] indexes>;

        $i3 = $r2[i2];

        $r3[i0] = $i3;

        $r4 = r0.<groovy.inspect.swingui.TableSorter: int[] indexes>;

        $r4[i2] = i1;

        return;
    }

    public java.lang.Object getValueAt(int, int)
    {
        groovy.inspect.swingui.TableSorter r0;
        int[] $r1;
        int i0, i1, $i2;
        java.lang.Object $r3;
        javax.swing.table.TableModel $r2;

        r0 := @this: groovy.inspect.swingui.TableSorter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<groovy.inspect.swingui.TableSorter: void checkModel()>();

        $r2 = r0.<groovy.inspect.swingui.TableSorter: javax.swing.table.TableModel model>;

        $r1 = r0.<groovy.inspect.swingui.TableSorter: int[] indexes>;

        $i2 = $r1[i0];

        $r3 = interfaceinvoke $r2.<javax.swing.table.TableModel: java.lang.Object getValueAt(int,int)>($i2, i1);

        return $r3;
    }

    public void setValueAt(java.lang.Object, int, int)
    {
        groovy.inspect.swingui.TableSorter r0;
        int[] $r2;
        int i0, i1, $i2;
        java.lang.Object r1;
        javax.swing.table.TableModel $r3;

        r0 := @this: groovy.inspect.swingui.TableSorter;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<groovy.inspect.swingui.TableSorter: void checkModel()>();

        $r3 = r0.<groovy.inspect.swingui.TableSorter: javax.swing.table.TableModel model>;

        $r2 = r0.<groovy.inspect.swingui.TableSorter: int[] indexes>;

        $i2 = $r2[i0];

        interfaceinvoke $r3.<javax.swing.table.TableModel: void setValueAt(java.lang.Object,int,int)>(r1, $i2, i1);

        return;
    }

    public void sortByColumn(int)
    {
        int i0;
        groovy.inspect.swingui.TableSorter r0;

        r0 := @this: groovy.inspect.swingui.TableSorter;

        i0 := @parameter0: int;

        virtualinvoke r0.<groovy.inspect.swingui.TableSorter: void sortByColumn(int,boolean)>(i0, 1);

        return;
    }

    public void sortByColumn(int, boolean)
    {
        javax.swing.event.TableModelEvent $r4;
        java.util.Vector $r1, $r3;
        groovy.inspect.swingui.TableSorter r0;
        int i0;
        java.lang.Integer $r2;
        boolean z0;

        r0 := @this: groovy.inspect.swingui.TableSorter;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r0.<groovy.inspect.swingui.TableSorter: boolean ascending> = z0;

        $r1 = r0.<groovy.inspect.swingui.TableSorter: java.util.Vector sortingColumns>;

        virtualinvoke $r1.<java.util.Vector: void removeAllElements()>();

        $r3 = r0.<groovy.inspect.swingui.TableSorter: java.util.Vector sortingColumns>;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r2);

        virtualinvoke r0.<groovy.inspect.swingui.TableSorter: void sort(java.lang.Object)>(r0);

        $r4 = new javax.swing.event.TableModelEvent;

        specialinvoke $r4.<javax.swing.event.TableModelEvent: void <init>(javax.swing.table.TableModel)>(r0);

        specialinvoke r0.<groovy.inspect.swingui.TableMap: void tableChanged(javax.swing.event.TableModelEvent)>($r4);

        return;
    }

    public void addMouseListenerToHeaderInTable(javax.swing.JTable)
    {
        groovy.inspect.swingui.TableSorter$1 $r2;
        groovy.inspect.swingui.TableSorter r0;
        javax.swing.JTable r1;
        javax.swing.table.JTableHeader $r3;

        r0 := @this: groovy.inspect.swingui.TableSorter;

        r1 := @parameter0: javax.swing.JTable;

        virtualinvoke r1.<javax.swing.JTable: void setColumnSelectionAllowed(boolean)>(0);

        $r2 = new groovy.inspect.swingui.TableSorter$1;

        specialinvoke $r2.<groovy.inspect.swingui.TableSorter$1: void <init>(groovy.inspect.swingui.TableSorter,javax.swing.JTable,groovy.inspect.swingui.TableSorter)>(r0, r1, r0);

        $r3 = virtualinvoke r1.<javax.swing.JTable: javax.swing.table.JTableHeader getTableHeader()>();

        virtualinvoke $r3.<javax.swing.table.JTableHeader: void addMouseListener(java.awt.event.MouseListener)>($r2);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
