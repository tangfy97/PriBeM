final class org.apache.lucene.util.packed.Direct8 extends org.apache.lucene.util.packed.PackedInts$MutableImpl
{
    final byte[] values;
    static final boolean $assertionsDisabled;

    void <init>(int)
    {
        int i0;
        byte[] $r1;
        org.apache.lucene.util.packed.Direct8 r0;

        r0 := @this: org.apache.lucene.util.packed.Direct8;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: void <init>(int,int)>(i0, 8);

        $r1 = newarray (byte)[i0];

        r0.<org.apache.lucene.util.packed.Direct8: byte[] values> = $r1;

        return;
    }

    void <init>(int, org.apache.lucene.store.DataInput, int) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r1;
        byte[] $r2;
        org.apache.lucene.util.packed.PackedInts$Format $r3;
        long $l2, $l3, $l4, $l5;
        org.apache.lucene.util.packed.Direct8 r0;
        int i0, i1, i6, i7;

        r0 := @this: org.apache.lucene.util.packed.Direct8;

        i1 := @parameter0: int;

        r1 := @parameter1: org.apache.lucene.store.DataInput;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.util.packed.Direct8: void <init>(int)>(i0);

        $r2 = r0.<org.apache.lucene.util.packed.Direct8: byte[] values>;

        virtualinvoke r1.<org.apache.lucene.store.DataInput: void readBytes(byte[],int,int)>($r2, 0, i0);

        $r3 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $l2 = virtualinvoke $r3.<org.apache.lucene.util.packed.PackedInts$Format: long byteCount(int,int,int)>(i1, i0, 8);

        $l3 = (long) i0;

        $l4 = 1L * $l3;

        $l5 = $l2 - $l4;

        i6 = (int) $l5;

        i7 = 0;

     label1:
        if i7 >= i6 goto label2;

        virtualinvoke r1.<org.apache.lucene.store.DataInput: byte readByte()>();

        i7 = i7 + 1;

        goto label1;

     label2:
        return;
    }

    public long get(int)
    {
        byte[] $r1;
        byte $b1;
        int i0;
        long $l2, $l3;
        org.apache.lucene.util.packed.Direct8 r0;

        r0 := @this: org.apache.lucene.util.packed.Direct8;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.packed.Direct8: byte[] values>;

        $b1 = $r1[i0];

        $l2 = (long) $b1;

        $l3 = $l2 & 255L;

        return $l3;
    }

    public void set(int, long)
    {
        byte[] $r1;
        byte $b3;
        int i0, $i2;
        long l1;
        org.apache.lucene.util.packed.Direct8 r0;

        r0 := @this: org.apache.lucene.util.packed.Direct8;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = r0.<org.apache.lucene.util.packed.Direct8: byte[] values>;

        $i2 = (int) l1;

        $b3 = (byte) $i2;

        $r1[i0] = $b3;

        return;
    }

    public long ramBytesUsed()
    {
        byte[] $r1;
        long $l4, $l5, $l6, $l7;
        org.apache.lucene.util.packed.Direct8 r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.lucene.util.packed.Direct8;

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_HEADER>;

        $i2 = $i0 + 8;

        $i1 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i3 = $i2 + $i1;

        $l4 = (long) $i3;

        $l5 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>($l4);

        $r1 = r0.<org.apache.lucene.util.packed.Direct8: byte[] values>;

        $l6 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long sizeOf(byte[])>($r1);

        $l7 = $l5 + $l6;

        return $l7;
    }

    public void clear()
    {
        byte[] $r1;
        org.apache.lucene.util.packed.Direct8 r0;

        r0 := @this: org.apache.lucene.util.packed.Direct8;

        $r1 = r0.<org.apache.lucene.util.packed.Direct8: byte[] values>;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r1, 0);

        return;
    }

    public java.lang.Object getArray()
    {
        byte[] $r1;
        org.apache.lucene.util.packed.Direct8 r0;

        r0 := @this: org.apache.lucene.util.packed.Direct8;

        $r1 = r0.<org.apache.lucene.util.packed.Direct8: byte[] values>;

        return $r1;
    }

    public boolean hasArray()
    {
        org.apache.lucene.util.packed.Direct8 r0;

        r0 := @this: org.apache.lucene.util.packed.Direct8;

        return 1;
    }

    public int get(int, long[], int, int)
    {
        byte[] $r2;
        long $l7, $l8;
        java.lang.AssertionError $r3, $r4, $r5;
        org.apache.lucene.util.packed.Direct8 r0;
        long[] r1;
        byte $b6;
        int i0, $i1, i2, $i3, $i4, i5, $i9, $i10, $i11, $i12, i13, i14;
        java.lang.String $r10;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.lucene.util.packed.Direct8;

        i0 := @parameter0: int;

        r1 := @parameter1: long[];

        i5 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = <org.apache.lucene.util.packed.Direct8: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i2 > 0 goto label1;

        $r5 = new java.lang.AssertionError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("len must be > 0 (got ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r5;

     label1:
        $z1 = <org.apache.lucene.util.packed.Direct8: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if i0 < 0 goto label2;

        $i12 = r0.<org.apache.lucene.util.packed.Direct8: int valueCount>;

        if i0 < $i12 goto label3;

     label2:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        $z2 = <org.apache.lucene.util.packed.Direct8: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $i10 = i5 + i2;

        $i9 = lengthof r1;

        if $i10 <= $i9 goto label4;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $i1 = r0.<org.apache.lucene.util.packed.Direct8: int valueCount>;

        $i3 = $i1 - i0;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i2);

        i13 = i0;

        i14 = i5;

        $i11 = i0 + $i4;

     label5:
        if i13 >= $i11 goto label6;

        $r2 = r0.<org.apache.lucene.util.packed.Direct8: byte[] values>;

        $b6 = $r2[i13];

        $l7 = (long) $b6;

        $l8 = $l7 & 255L;

        r1[i14] = $l8;

        i13 = i13 + 1;

        i14 = i14 + 1;

        goto label5;

     label6:
        return $i4;
    }

    public int set(int, long[], int, int)
    {
        byte[] $r2;
        long $l6;
        java.lang.AssertionError $r3, $r4, $r5;
        org.apache.lucene.util.packed.Direct8 r0;
        long[] r1;
        byte $b8;
        int i0, $i1, i2, $i3, $i4, i5, $i7, $i9, $i10, $i11, $i12, i13, i14;
        java.lang.String $r10;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.lucene.util.packed.Direct8;

        i0 := @parameter0: int;

        r1 := @parameter1: long[];

        i5 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = <org.apache.lucene.util.packed.Direct8: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i2 > 0 goto label1;

        $r5 = new java.lang.AssertionError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("len must be > 0 (got ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r5;

     label1:
        $z1 = <org.apache.lucene.util.packed.Direct8: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if i0 < 0 goto label2;

        $i12 = r0.<org.apache.lucene.util.packed.Direct8: int valueCount>;

        if i0 < $i12 goto label3;

     label2:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        $z2 = <org.apache.lucene.util.packed.Direct8: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $i10 = i5 + i2;

        $i9 = lengthof r1;

        if $i10 <= $i9 goto label4;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $i1 = r0.<org.apache.lucene.util.packed.Direct8: int valueCount>;

        $i3 = $i1 - i0;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i2);

        i13 = i0;

        i14 = i5;

        $i11 = i0 + $i4;

     label5:
        if i13 >= $i11 goto label6;

        $r2 = r0.<org.apache.lucene.util.packed.Direct8: byte[] values>;

        $l6 = r1[i14];

        $i7 = (int) $l6;

        $b8 = (byte) $i7;

        $r2[i13] = $b8;

        i13 = i13 + 1;

        i14 = i14 + 1;

        goto label5;

     label6:
        return $i4;
    }

    public void fill(int, int, long)
    {
        byte[] $r1;
        long l2, $l5;
        java.lang.AssertionError $r2;
        org.apache.lucene.util.packed.Direct8 r0;
        byte $b4, $b6;
        int i0, i1, $i3;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.packed.Direct8;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        $z0 = <org.apache.lucene.util.packed.Direct8: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $l5 = l2 & 255L;

        $b6 = l2 cmp $l5;

        if $b6 == 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<org.apache.lucene.util.packed.Direct8: byte[] values>;

        $i3 = (int) l2;

        $b4 = (byte) $i3;

        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>($r1, i0, i1, $b4);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/Direct8;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.Direct8: boolean $assertionsDisabled> = $z1;

        return;
    }
}
