public class com.sun.xml.bind.v2.runtime.InlineBinaryTransducer extends com.sun.xml.bind.v2.runtime.FilterTransducer
{

    public void <init>(com.sun.xml.bind.v2.runtime.Transducer)
    {
        com.sun.xml.bind.v2.runtime.InlineBinaryTransducer r0;
        com.sun.xml.bind.v2.runtime.Transducer r1;

        r0 := @this: com.sun.xml.bind.v2.runtime.InlineBinaryTransducer;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.Transducer;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.FilterTransducer: void <init>(com.sun.xml.bind.v2.runtime.Transducer)>(r1);

        return;
    }

    public java.lang.CharSequence print(java.lang.Object) throws com.sun.xml.bind.api.AccessorException
    {
        java.lang.Throwable $r5;
        com.sun.xml.bind.v2.runtime.XMLSerializer $r0;
        java.lang.CharSequence $r4;
        com.sun.xml.bind.v2.runtime.InlineBinaryTransducer r1;
        java.lang.Object r2;
        com.sun.xml.bind.v2.runtime.Transducer $r3;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.runtime.InlineBinaryTransducer;

        r2 := @parameter0: java.lang.Object;

        $r0 = staticinvoke <com.sun.xml.bind.v2.runtime.XMLSerializer: com.sun.xml.bind.v2.runtime.XMLSerializer getInstance()>();

        $z0 = virtualinvoke $r0.<com.sun.xml.bind.v2.runtime.XMLSerializer: boolean setInlineBinaryFlag(boolean)>(1);

     label1:
        $r3 = r1.<com.sun.xml.bind.v2.runtime.InlineBinaryTransducer: com.sun.xml.bind.v2.runtime.Transducer core>;

        $r4 = interfaceinvoke $r3.<com.sun.xml.bind.v2.runtime.Transducer: java.lang.CharSequence print(java.lang.Object)>(r2);

     label2:
        virtualinvoke $r0.<com.sun.xml.bind.v2.runtime.XMLSerializer: boolean setInlineBinaryFlag(boolean)>($z0);

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke $r0.<com.sun.xml.bind.v2.runtime.XMLSerializer: boolean setInlineBinaryFlag(boolean)>($z0);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void writeText(com.sun.xml.bind.v2.runtime.XMLSerializer, java.lang.Object, java.lang.String) throws java.io.IOException, org.xml.sax.SAXException, javax.xml.stream.XMLStreamException, com.sun.xml.bind.api.AccessorException
    {
        java.lang.Throwable $r5;
        com.sun.xml.bind.v2.runtime.XMLSerializer r0;
        com.sun.xml.bind.v2.runtime.InlineBinaryTransducer r1;
        java.lang.Object r2;
        java.lang.String r3;
        com.sun.xml.bind.v2.runtime.Transducer $r4;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.runtime.InlineBinaryTransducer;

        r0 := @parameter0: com.sun.xml.bind.v2.runtime.XMLSerializer;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.runtime.XMLSerializer: boolean setInlineBinaryFlag(boolean)>(1);

     label1:
        $r4 = r1.<com.sun.xml.bind.v2.runtime.InlineBinaryTransducer: com.sun.xml.bind.v2.runtime.Transducer core>;

        interfaceinvoke $r4.<com.sun.xml.bind.v2.runtime.Transducer: void writeText(com.sun.xml.bind.v2.runtime.XMLSerializer,java.lang.Object,java.lang.String)>(r0, r2, r3);

     label2:
        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.XMLSerializer: boolean setInlineBinaryFlag(boolean)>($z0);

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.XMLSerializer: boolean setInlineBinaryFlag(boolean)>($z0);

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void writeLeafElement(com.sun.xml.bind.v2.runtime.XMLSerializer, com.sun.xml.bind.v2.runtime.Name, java.lang.Object, java.lang.String) throws java.io.IOException, org.xml.sax.SAXException, javax.xml.stream.XMLStreamException, com.sun.xml.bind.api.AccessorException
    {
        java.lang.Throwable $r6;
        com.sun.xml.bind.v2.runtime.Name r2;
        com.sun.xml.bind.v2.runtime.XMLSerializer r0;
        com.sun.xml.bind.v2.runtime.InlineBinaryTransducer r1;
        java.lang.Object r3;
        java.lang.String r4;
        com.sun.xml.bind.v2.runtime.Transducer $r5;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.runtime.InlineBinaryTransducer;

        r0 := @parameter0: com.sun.xml.bind.v2.runtime.XMLSerializer;

        r2 := @parameter1: com.sun.xml.bind.v2.runtime.Name;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.String;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.runtime.XMLSerializer: boolean setInlineBinaryFlag(boolean)>(1);

     label1:
        $r5 = r1.<com.sun.xml.bind.v2.runtime.InlineBinaryTransducer: com.sun.xml.bind.v2.runtime.Transducer core>;

        interfaceinvoke $r5.<com.sun.xml.bind.v2.runtime.Transducer: void writeLeafElement(com.sun.xml.bind.v2.runtime.XMLSerializer,com.sun.xml.bind.v2.runtime.Name,java.lang.Object,java.lang.String)>(r0, r2, r3, r4);

     label2:
        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.XMLSerializer: boolean setInlineBinaryFlag(boolean)>($z0);

        goto label5;

     label3:
        $r6 := @caughtexception;

     label4:
        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.XMLSerializer: boolean setInlineBinaryFlag(boolean)>($z0);

        throw $r6;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
