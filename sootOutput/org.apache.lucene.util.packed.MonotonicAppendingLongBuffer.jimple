public final class org.apache.lucene.util.packed.MonotonicAppendingLongBuffer extends org.apache.lucene.util.packed.AbstractAppendingLongBuffer
{
    private float[] averages;
    static final boolean $assertionsDisabled;

    static long zigZagDecode(long)
    {
        long l0, $l1, $l2, $l3, $l4;

        l0 := @parameter0: long;

        $l3 = l0 >>> 1;

        $l1 = l0 & 1L;

        $l2 = neg $l1;

        $l4 = $l3 ^ $l2;

        return $l4;
    }

    static long zigZagEncode(long)
    {
        long l0, $l1, $l2, $l3;

        l0 := @parameter0: long;

        $l2 = l0 >> 63;

        $l1 = l0 << 1;

        $l3 = $l2 ^ $l1;

        return $l3;
    }

    public void <init>()
    {
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer r0;
        float[] $r1;

        r0 := @this: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer;

        specialinvoke r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: void <init>(int)>(16);

        $r1 = newarray (float)[16];

        r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: float[] averages> = $r1;

        return;
    }

    long get(int, int)
    {
        float[] $r2;
        long $l3, $l4, $l5, l6, $l7, $l8, $l9, $l10;
        long[] $r1, $r7;
        int i0, $i1, i2;
        org.apache.lucene.util.packed.PackedInts$Reader[] $r3, $r5;
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer r0;
        org.apache.lucene.util.packed.PackedInts$Reader $r4, $r6;
        float $f0, $f1, $f2;

        r0 := @this: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $i1 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: int valuesOff>;

        if i0 != $i1 goto label1;

        $r7 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long[] pending>;

        $l10 = $r7[i2];

        return $l10;

     label1:
        $r1 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long[] minValues>;

        $l5 = $r1[i0];

        $r2 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: float[] averages>;

        $f1 = $r2[i0];

        $l3 = (long) i2;

        $f0 = (float) $l3;

        $f2 = $f1 * $f0;

        $l4 = (long) $f2;

        l6 = $l5 + $l4;

        $r3 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: org.apache.lucene.util.packed.PackedInts$Reader[] deltas>;

        $r4 = $r3[i0];

        if $r4 != null goto label2;

        return l6;

     label2:
        $r5 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: org.apache.lucene.util.packed.PackedInts$Reader[] deltas>;

        $r6 = $r5[i0];

        $l7 = interfaceinvoke $r6.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>(i2);

        $l8 = staticinvoke <org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long zigZagDecode(long)>($l7);

        $l9 = l6 + $l8;

        return $l9;
    }

    void grow(int)
    {
        int i0;
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer r0;
        float[] $r1, $r2;

        r0 := @this: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: void grow(int)>(i0);

        $r1 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: float[] averages>;

        $r2 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>($r1, i0);

        r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: float[] averages> = $r2;

        return;
    }

    void packPendingValues()
    {
        byte $b6, $b7, $b14;
        org.apache.lucene.util.packed.PackedInts$Mutable $r6;
        boolean $z0;
        org.apache.lucene.util.packed.PackedInts$Reader[] $r7;
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer r0;
        float $f0, $f1, $f2, $f3, $f4;
        long $l0, $l2, $l3, $l4, $l13, $l15, $l17, $l18, $l20, $l21, $l22, $l23, $l24, l27;
        float[] $r5, $r13;
        java.lang.AssertionError $r16;
        long[] $r1, $r2, $r3, $r4, $r8, $r9, $r10, $r11, $r12, $r14;
        int $i1, $i5, $i8, $i9, $i10, $i11, $i12, $i16, $i19, $i25, i26, i28, $i29, i30, $i31, $i32, $i33;

        r0 := @this: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer;

        $z0 = <org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i25 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: int pendingOff>;

        if $i25 == 1024 goto label01;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label01:
        $r2 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long[] minValues>;

        $i1 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: int valuesOff>;

        $r1 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long[] pending>;

        $l0 = $r1[0];

        $r2[$i1] = $l0;

        $r5 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: float[] averages>;

        $i5 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: int valuesOff>;

        $r3 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long[] pending>;

        $l3 = $r3[1023];

        $r4 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long[] pending>;

        $l2 = $r4[0];

        $l4 = $l3 - $l2;

        $f0 = (float) $l4;

        $f1 = $f0 / 1023.0F;

        $r5[$i5] = $f1;

        i26 = 0;

     label02:
        if i26 >= 1024 goto label03;

        $r14 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long[] pending>;

        $r11 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long[] pending>;

        $l18 = $r11[i26];

        $r12 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long[] minValues>;

        $i16 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: int valuesOff>;

        $l17 = $r12[$i16];

        $l22 = $l18 - $l17;

        $r13 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: float[] averages>;

        $i19 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: int valuesOff>;

        $f3 = $r13[$i19];

        $l20 = (long) i26;

        $f2 = (float) $l20;

        $f4 = $f3 * $f2;

        $l21 = (long) $f4;

        $l23 = $l22 - $l21;

        $l24 = staticinvoke <org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long zigZagEncode(long)>($l23);

        $r14[i26] = $l24;

        i26 = i26 + 1;

        goto label02;

     label03:
        l27 = 0L;

        i28 = 0;

     label04:
        if i28 >= 1024 goto label06;

        $r9 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long[] pending>;

        $l13 = $r9[i28];

        $b14 = $l13 cmp 0L;

        $i32 = (int) $b14;

        if $i32 >= 0 goto label05;

        l27 = -1L;

        goto label06;

     label05:
        $r10 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long[] pending>;

        $l15 = $r10[i28];

        l27 = staticinvoke <java.lang.Math: long max(long,long)>(l27, $l15);

        i28 = i28 + 1;

        goto label04;

     label06:
        $b6 = l27 cmp 0L;

        if $b6 == 0 goto label11;

        $b7 = l27 cmp 0L;

        $i33 = (int) $b7;

        if $i33 >= 0 goto label07;

        $i29 = 64;

        goto label08;

     label07:
        $i29 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>(l27);

     label08:
        $i8 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: int pendingOff>;

        $r6 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Mutable getMutable(int,int,float)>($i8, $i29, 0.0F);

        i30 = 0;

     label09:
        $i31 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: int pendingOff>;

        if i30 >= $i31 goto label10;

        $r8 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long[] pending>;

        $i10 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: int pendingOff>;

        $i11 = $i10 - i30;

        $i12 = interfaceinvoke $r6.<org.apache.lucene.util.packed.PackedInts$Mutable: int set(int,long[],int,int)>(i30, $r8, i30, $i11);

        i30 = i30 + $i12;

        goto label09;

     label10:
        $r7 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: org.apache.lucene.util.packed.PackedInts$Reader[] deltas>;

        $i9 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: int valuesOff>;

        $r7[$i9] = $r6;

     label11:
        return;
    }

    public org.apache.lucene.util.packed.MonotonicAppendingLongBuffer$Iterator iterator()
    {
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer r1;
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer$Iterator $r0;

        r1 := @this: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer;

        $r0 = new org.apache.lucene.util.packed.MonotonicAppendingLongBuffer$Iterator;

        specialinvoke $r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer$Iterator: void <init>(org.apache.lucene.util.packed.MonotonicAppendingLongBuffer)>(r1);

        return $r0;
    }

    long baseRamBytesUsed()
    {
        int $i1;
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer r0;
        long $l0, $l2, $l3;

        r0 := @this: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer;

        $l0 = specialinvoke r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long baseRamBytesUsed()>();

        $i1 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $l2 = (long) $i1;

        $l3 = $l0 + $l2;

        return $l3;
    }

    public long ramBytesUsed()
    {
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer r0;
        long $l0, $l1, $l2;
        float[] $r1;

        r0 := @this: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer;

        $l0 = specialinvoke r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long ramBytesUsed()>();

        $r1 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: float[] averages>;

        $l1 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long sizeOf(float[])>($r1);

        $l2 = $l0 + $l1;

        return $l2;
    }

    public volatile org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator iterator()
    {
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer r0;
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer$Iterator $r1;

        r0 := @this: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer$Iterator iterator()>();

        return $r1;
    }

    static float[] access$000(org.apache.lucene.util.packed.MonotonicAppendingLongBuffer)
    {
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer r0;
        float[] $r1;

        r0 := @parameter0: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer;

        $r1 = r0.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: float[] averages>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/MonotonicAppendingLongBuffer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
