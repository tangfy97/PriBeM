public class bsh.This extends java.lang.Object implements java.io.Serializable, java.lang.Runnable
{
    bsh.NameSpace namespace;
    transient bsh.Interpreter declaringInterpreter;

    static bsh.This getThis(bsh.NameSpace, bsh.Interpreter)
    {
        bsh.Interpreter r2;
        java.lang.Object[] $r3;
        bsh.NameSpace r1;
        java.lang.Exception $r6;
        bsh.This $r0, $r5;
        java.lang.StringBuffer $r8, $r9, $r10;
        java.lang.Object $r4;
        java.lang.Class r12;
        bsh.InterpreterError $r7;
        java.lang.String $r11;
        boolean $z0, $z1;

        r1 := @parameter0: bsh.NameSpace;

        r2 := @parameter1: bsh.Interpreter;

     label1:
        $z0 = staticinvoke <bsh.Capabilities: boolean canGenerateInterfaces()>();

        if $z0 == 0 goto label2;

        r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("bsh.XThis");

        goto label5;

     label2:
        $z1 = staticinvoke <bsh.Capabilities: boolean haveSwing()>();

        if $z1 == 0 goto label3;

        r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("bsh.JThis");

        goto label5;

     label3:
        $r0 = new bsh.This;

        specialinvoke $r0.<bsh.This: void <init>(bsh.NameSpace,bsh.Interpreter)>(r1, r2);

     label4:
        return $r0;

     label5:
        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r1;

        $r3[1] = r2;

        $r4 = staticinvoke <bsh.Reflect: java.lang.Object constructObject(java.lang.Class,java.lang.Object[])>(r12, $r3);

        $r5 = (bsh.This) $r4;

     label6:
        return $r5;

     label7:
        $r6 := @caughtexception;

        $r7 = new bsh.InterpreterError;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("internal error 1 in This: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<bsh.InterpreterError: void <init>(java.lang.String)>($r11);

        throw $r7;

        catch java.lang.Exception from label1 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public java.lang.Object getInterface(java.lang.Class) throws bsh.UtilEvalError
    {
        bsh.UtilEvalError $r2;
        bsh.This r1;
        java.lang.StringBuffer $r3, $r4, $r5;
        java.lang.Class r0;
        java.lang.String $r6;
        boolean $z0;

        r1 := @this: bsh.This;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = new bsh.UtilEvalError;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Dynamic proxy mechanism not available. Cannot construct interface type: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<bsh.UtilEvalError: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public java.lang.Object getInterface(java.lang.Class[]) throws bsh.UtilEvalError
    {
        java.lang.Class[] r0;
        bsh.UtilEvalError $r3;
        bsh.This r1;
        java.lang.StringBuffer $r4, $r5, $r7;
        int $i0, i1;
        java.lang.Class $r2, $r6;
        java.lang.String $r8;
        boolean $z0;

        r1 := @this: bsh.This;

        r0 := @parameter0: java.lang.Class[];

        i1 = 0;

        goto label3;

     label1:
        $r2 = r0[i1];

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $r3 = new bsh.UtilEvalError;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Dynamic proxy mechanism not available. Cannot construct interface type: ");

        $r6 = r0[i1];

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<bsh.UtilEvalError: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        i1 = i1 + 1;

     label3:
        $i0 = lengthof r0;

        if i1 < $i0 goto label1;

        return r1;
    }

    protected void <init>(bsh.NameSpace, bsh.Interpreter)
    {
        bsh.This r0;
        bsh.Interpreter r2;
        bsh.NameSpace r1;

        r0 := @this: bsh.This;

        r1 := @parameter0: bsh.NameSpace;

        r2 := @parameter1: bsh.Interpreter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<bsh.This: bsh.NameSpace namespace> = r1;

        r0.<bsh.This: bsh.Interpreter declaringInterpreter> = r2;

        return;
    }

    public bsh.NameSpace getNameSpace()
    {
        bsh.This r0;
        bsh.NameSpace $r1;

        r0 := @this: bsh.This;

        $r1 = r0.<bsh.This: bsh.NameSpace namespace>;

        return $r1;
    }

    public java.lang.String toString()
    {
        bsh.This r2;
        java.lang.StringBuffer $r0, $r1, $r4;
        bsh.NameSpace $r3;
        java.lang.String $r5;

        r2 := @this: bsh.This;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'this\' reference to Bsh object: ");

        $r3 = r2.<bsh.This: bsh.NameSpace namespace>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public void run()
    {
        bsh.EvalError $r2;
        java.lang.Object[] $r1;
        bsh.Interpreter $r4;
        bsh.This r0;
        java.lang.StringBuffer $r3, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: bsh.This;

     label1:
        $r1 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<bsh.This: java.lang.Object invokeMethod(java.lang.String,java.lang.Object[])>("run", $r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r4 = r0.<bsh.This: bsh.Interpreter declaringInterpreter>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Exception in runnable:");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<bsh.Interpreter: void error(java.lang.Object)>($r7);

        goto label4;

     label4:
        return;

        catch bsh.EvalError from label1 to label2 with label3;
    }

    public java.lang.Object invokeMethod(java.lang.String, java.lang.Object[]) throws bsh.EvalError
    {
        bsh.This r0;
        java.lang.Object[] r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: bsh.This;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = virtualinvoke r0.<bsh.This: java.lang.Object invokeMethod(java.lang.String,java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode,boolean)>(r1, r2, null, null, null, 0);

        return $r3;
    }

    public java.lang.Object invokeMethod(java.lang.String, java.lang.Object[], bsh.Interpreter, bsh.CallStack, bsh.SimpleNode, boolean) throws bsh.EvalError
    {
        bsh.SimpleNode r30;
        java.lang.Integer $r19;
        boolean z0, $z1, $z2, $z3, $z4;
        bsh.Interpreter r28;
        java.lang.Object[] $r16, r27, r31;
        bsh.NameSpace $r3, $r5, $r12, $r23;
        bsh.UtilEvalError $r25, $r26;
        bsh.CallStack $r22, r29;
        bsh.This r1;
        java.lang.StringBuffer $r7, $r8, $r10, $r11, $r14;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.Boolean $r18;
        java.lang.String r2, $r9, $r13, $r15, $r20;
        bsh.EvalError $r6;
        java.lang.Class[] $r0, $r4;
        bsh.BshMethod r33;
        java.lang.Object $r17, $r21, $r24, $r32, r34;

        r1 := @this: bsh.This;

        r2 := @parameter0: java.lang.String;

        r27 := @parameter1: java.lang.Object[];

        r28 := @parameter2: bsh.Interpreter;

        r29 := @parameter3: bsh.CallStack;

        r30 := @parameter4: bsh.SimpleNode;

        z0 := @parameter5: boolean;

        if r27 == null goto label05;

        $i1 = lengthof r27;

        r31 = newarray (java.lang.Object)[$i1];

        i3 = 0;

        goto label04;

     label01:
        $i2 = i3;

        $r24 = r27[i3];

        if $r24 != null goto label02;

        $r32 = <bsh.Primitive: bsh.Primitive NULL>;

        goto label03;

     label02:
        $r32 = r27[i3];

     label03:
        r31[$i2] = $r32;

        i3 = i3 + 1;

     label04:
        $i4 = lengthof r27;

        if i3 < $i4 goto label01;

        r27 = r31;

     label05:
        if r28 != null goto label06;

        r28 = r1.<bsh.This: bsh.Interpreter declaringInterpreter>;

     label06:
        if r29 != null goto label07;

        $r22 = new bsh.CallStack;

        $r23 = r1.<bsh.This: bsh.NameSpace namespace>;

        specialinvoke $r22.<bsh.CallStack: void <init>(bsh.NameSpace)>($r23);

        r29 = $r22;

     label07:
        if r30 != null goto label08;

        r30 = <bsh.SimpleNode: bsh.SimpleNode JAVACODE>;

     label08:
        $r0 = staticinvoke <bsh.Types: java.lang.Class[] getTypes(java.lang.Object[])>(r27);

        r33 = null;

     label09:
        $r3 = r1.<bsh.This: bsh.NameSpace namespace>;

        r33 = virtualinvoke $r3.<bsh.NameSpace: bsh.BshMethod getMethod(java.lang.String,java.lang.Class[],boolean)>(r2, $r0, z0);

     label10:
        goto label12;

     label11:
        $r26 := @caughtexception;

        goto label12;

     label12:
        if r33 == null goto label13;

        $r21 = virtualinvoke r33.<bsh.BshMethod: java.lang.Object invoke(java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode)>(r27, r28, r29, r30);

        return $r21;

     label13:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("toString");

        if $z1 == 0 goto label14;

        $r20 = virtualinvoke r1.<bsh.This: java.lang.String toString()>();

        return $r20;

     label14:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("hashCode");

        if $z2 == 0 goto label15;

        $r19 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        specialinvoke $r19.<java.lang.Integer: void <init>(int)>($i0);

        return $r19;

     label15:
        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("equals");

        if $z3 == 0 goto label18;

        r34 = r27[0];

        $r18 = new java.lang.Boolean;

        if r1 != r34 goto label16;

        $z4 = 1;

        goto label17;

     label16:
        $z4 = 0;

     label17:
        specialinvoke $r18.<java.lang.Boolean: void <init>(boolean)>($z4);

        return $r18;

     label18:
        $r5 = r1.<bsh.This: bsh.NameSpace namespace>;

        $r4 = newarray (java.lang.Class)[2];

        $r4[0] = null;

        $r4[1] = null;

        r33 = virtualinvoke $r5.<bsh.NameSpace: bsh.BshMethod getMethod(java.lang.String,java.lang.Class[])>("invoke", $r4);

     label19:
        goto label21;

     label20:
        $r25 := @caughtexception;

        goto label21;

     label21:
        if r33 == null goto label22;

        $r16 = newarray (java.lang.Object)[2];

        $r16[0] = r2;

        $r16[1] = r27;

        $r17 = virtualinvoke r33.<bsh.BshMethod: java.lang.Object invoke(java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode)>($r16, r28, r29, r30);

        return $r17;

     label22:
        $r6 = new bsh.EvalError;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Method ");

        $r9 = staticinvoke <bsh.StringUtil: java.lang.String methodString(java.lang.String,java.lang.Class[])>(r2, $r0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not found in bsh scripted object: ");

        $r12 = r1.<bsh.This: bsh.NameSpace namespace>;

        $r13 = virtualinvoke $r12.<bsh.NameSpace: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r15, r30, r29);

        throw $r6;

        catch bsh.UtilEvalError from label09 to label10 with label11;
        catch bsh.UtilEvalError from label18 to label19 with label20;
    }

    public static void bind(bsh.This, bsh.NameSpace, bsh.Interpreter)
    {
        bsh.This r0;
        bsh.Interpreter r3;
        bsh.NameSpace r1, $r2;

        r0 := @parameter0: bsh.This;

        r1 := @parameter1: bsh.NameSpace;

        r3 := @parameter2: bsh.Interpreter;

        $r2 = r0.<bsh.This: bsh.NameSpace namespace>;

        virtualinvoke $r2.<bsh.NameSpace: void setParent(bsh.NameSpace)>(r1);

        r0.<bsh.This: bsh.Interpreter declaringInterpreter> = r3;

        return;
    }

    static boolean isExposedThisMethod(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("getClass");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("invokeMethod");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("getInterface");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("wait");

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("notify");

        if $z4 != 0 goto label1;

        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("notifyAll");

        if $z5 == 0 goto label2;

     label1:
        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        return $z6;
    }
}
