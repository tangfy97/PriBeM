class org.tukaani.xz.LZMA2OutputStream extends org.tukaani.xz.FinishableOutputStream
{
    static final int COMPRESSED_SIZE_MAX;
    private org.tukaani.xz.FinishableOutputStream out;
    private final java.io.DataOutputStream outData;
    private final org.tukaani.xz.lz.LZEncoder lz;
    private final org.tukaani.xz.rangecoder.RangeEncoder rc;
    private final org.tukaani.xz.lzma.LZMAEncoder lzma;
    private final int props;
    private boolean dictResetNeeded;
    private boolean stateResetNeeded;
    private boolean propsNeeded;
    private int pendingSize;
    private boolean finished;
    private java.io.IOException exception;
    private final byte[] tempBuf;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$tukaani$xz$LZMA2OutputStream;

    private static int getExtraSizeBefore(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        if 65536 <= i0 goto label1;

        $i1 = 65536 - i0;

        goto label2;

     label1:
        $i1 = 0;

     label2:
        return $i1;
    }

    static int getMemoryUsage(org.tukaani.xz.LZMA2Options)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @parameter0: org.tukaani.xz.LZMA2Options;

        $i0 = virtualinvoke r0.<org.tukaani.xz.LZMA2Options: int getDictSize()>();

        $i1 = staticinvoke <org.tukaani.xz.LZMA2OutputStream: int getExtraSizeBefore(int)>($i0);

        $i2 = virtualinvoke r0.<org.tukaani.xz.LZMA2Options: int getMode()>();

        $i3 = virtualinvoke r0.<org.tukaani.xz.LZMA2Options: int getMatchFinder()>();

        $i4 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: int getMemoryUsage(int,int,int,int)>($i2, $i0, $i1, $i3);

        $i5 = 70 + $i4;

        return $i5;
    }

    void <init>(org.tukaani.xz.FinishableOutputStream, org.tukaani.xz.LZMA2Options)
    {
        byte[] $r1, $r10;
        org.tukaani.xz.rangecoder.RangeEncoder $r4, $r6;
        java.lang.NullPointerException $r12;
        org.tukaani.xz.LZMA2Options r5;
        java.io.DataOutputStream $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        org.tukaani.xz.lz.LZEncoder $r9, $r11;
        org.tukaani.xz.LZMA2OutputStream r0;
        org.tukaani.xz.lzma.LZMAEncoder $r7, $r8;
        org.tukaani.xz.FinishableOutputStream r2;

        r0 := @this: org.tukaani.xz.LZMA2OutputStream;

        r2 := @parameter0: org.tukaani.xz.FinishableOutputStream;

        r5 := @parameter1: org.tukaani.xz.LZMA2Options;

        specialinvoke r0.<org.tukaani.xz.FinishableOutputStream: void <init>()>();

        r0.<org.tukaani.xz.LZMA2OutputStream: boolean dictResetNeeded> = 1;

        r0.<org.tukaani.xz.LZMA2OutputStream: boolean stateResetNeeded> = 1;

        r0.<org.tukaani.xz.LZMA2OutputStream: boolean propsNeeded> = 1;

        r0.<org.tukaani.xz.LZMA2OutputStream: int pendingSize> = 0;

        r0.<org.tukaani.xz.LZMA2OutputStream: boolean finished> = 0;

        r0.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception> = null;

        $r1 = newarray (byte)[1];

        r0.<org.tukaani.xz.LZMA2OutputStream: byte[] tempBuf> = $r1;

        if r2 != null goto label1;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>()>();

        throw $r12;

     label1:
        r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.FinishableOutputStream out> = r2;

        $r3 = new java.io.DataOutputStream;

        specialinvoke $r3.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r2);

        r0.<org.tukaani.xz.LZMA2OutputStream: java.io.DataOutputStream outData> = $r3;

        $r4 = new org.tukaani.xz.rangecoder.RangeEncoder;

        specialinvoke $r4.<org.tukaani.xz.rangecoder.RangeEncoder: void <init>(int)>(65536);

        r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.rangecoder.RangeEncoder rc> = $r4;

        $i0 = virtualinvoke r5.<org.tukaani.xz.LZMA2Options: int getDictSize()>();

        $i1 = staticinvoke <org.tukaani.xz.LZMA2OutputStream: int getExtraSizeBefore(int)>($i0);

        $r6 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $i2 = virtualinvoke r5.<org.tukaani.xz.LZMA2Options: int getLc()>();

        $i3 = virtualinvoke r5.<org.tukaani.xz.LZMA2Options: int getLp()>();

        $i4 = virtualinvoke r5.<org.tukaani.xz.LZMA2Options: int getPb()>();

        $i5 = virtualinvoke r5.<org.tukaani.xz.LZMA2Options: int getMode()>();

        $i6 = virtualinvoke r5.<org.tukaani.xz.LZMA2Options: int getNiceLen()>();

        $i7 = virtualinvoke r5.<org.tukaani.xz.LZMA2Options: int getMatchFinder()>();

        $i8 = virtualinvoke r5.<org.tukaani.xz.LZMA2Options: int getDepthLimit()>();

        $r7 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder getInstance(org.tukaani.xz.rangecoder.RangeEncoder,int,int,int,int,int,int,int,int,int)>($r6, $i2, $i3, $i4, $i5, $i0, $i1, $i6, $i7, $i8);

        r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lzma.LZMAEncoder lzma> = $r7;

        $r8 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lzma.LZMAEncoder lzma>;

        $r9 = virtualinvoke $r8.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder getLZEncoder()>();

        r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lz.LZEncoder lz> = $r9;

        $r10 = virtualinvoke r5.<org.tukaani.xz.LZMA2Options: byte[] getPresetDict()>();

        if $r10 == null goto label2;

        $i9 = lengthof $r10;

        if $i9 <= 0 goto label2;

        $r11 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lz.LZEncoder lz>;

        virtualinvoke $r11.<org.tukaani.xz.lz.LZEncoder: void setPresetDict(int,byte[])>($i0, $r10);

        r0.<org.tukaani.xz.LZMA2OutputStream: boolean dictResetNeeded> = 0;

     label2:
        $i10 = virtualinvoke r5.<org.tukaani.xz.LZMA2Options: int getPb()>();

        $i11 = $i10 * 5;

        $i12 = virtualinvoke r5.<org.tukaani.xz.LZMA2Options: int getLp()>();

        $i13 = $i11 + $i12;

        $i14 = $i13 * 9;

        $i15 = virtualinvoke r5.<org.tukaani.xz.LZMA2Options: int getLc()>();

        $i16 = $i14 + $i15;

        r0.<org.tukaani.xz.LZMA2OutputStream: int props> = $i16;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        byte[] $r1, $r2;
        byte $b1;
        int i0;
        org.tukaani.xz.LZMA2OutputStream r0;

        r0 := @this: org.tukaani.xz.LZMA2OutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.tukaani.xz.LZMA2OutputStream: byte[] tempBuf>;

        $b1 = (byte) i0;

        $r1[0] = $b1;

        $r2 = r0.<org.tukaani.xz.LZMA2OutputStream: byte[] tempBuf>;

        virtualinvoke r0.<org.tukaani.xz.LZMA2OutputStream: void write(byte[],int,int)>($r2, 0, 1);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        byte[] r0;
        java.lang.IndexOutOfBoundsException $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        org.tukaani.xz.lz.LZEncoder $r3;
        boolean $z0, $z1;
        java.io.IOException $r2, $r6, $r7;
        org.tukaani.xz.LZMA2OutputStream r1;
        org.tukaani.xz.XZIOException $r5;
        org.tukaani.xz.lzma.LZMAEncoder $r4;

        r1 := @this: org.tukaani.xz.LZMA2OutputStream;

        r0 := @parameter0: byte[];

        i6 := @parameter1: int;

        i7 := @parameter2: int;

        if i6 < 0 goto label1;

        if i7 < 0 goto label1;

        $i0 = i6 + i7;

        if $i0 < 0 goto label1;

        $i2 = i6 + i7;

        $i1 = lengthof r0;

        if $i2 <= $i1 goto label2;

     label1:
        $r8 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r8;

     label2:
        $r2 = r1.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception>;

        if $r2 == null goto label3;

        $r6 = r1.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception>;

        throw $r6;

     label3:
        $z0 = r1.<org.tukaani.xz.LZMA2OutputStream: boolean finished>;

        if $z0 == 0 goto label4;

        $r5 = new org.tukaani.xz.XZIOException;

        specialinvoke $r5.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream finished or closed");

        throw $r5;

     label4:
        if i7 <= 0 goto label6;

        $r3 = r1.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lz.LZEncoder lz>;

        $i3 = virtualinvoke $r3.<org.tukaani.xz.lz.LZEncoder: int fillWindow(byte[],int,int)>(r0, i6, i7);

        i6 = i6 + $i3;

        i7 = i7 - $i3;

        $i4 = r1.<org.tukaani.xz.LZMA2OutputStream: int pendingSize>;

        $i5 = $i4 + $i3;

        r1.<org.tukaani.xz.LZMA2OutputStream: int pendingSize> = $i5;

        $r4 = r1.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lzma.LZMAEncoder lzma>;

        $z1 = virtualinvoke $r4.<org.tukaani.xz.lzma.LZMAEncoder: boolean encodeForLZMA2()>();

        if $z1 == 0 goto label5;

        specialinvoke r1.<org.tukaani.xz.LZMA2OutputStream: void writeChunk()>();

     label5:
        goto label4;

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        r1.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception> = $r7;

        throw $r7;

     label8:
        return;

        catch java.io.IOException from label4 to label6 with label7;
    }

    private void writeChunk() throws java.io.IOException
    {
        org.tukaani.xz.rangecoder.RangeEncoder $r1, $r9;
        java.lang.AssertionError $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6;
        boolean $z0, $z1, $z2;
        org.tukaani.xz.LZMA2OutputStream r0;
        org.tukaani.xz.lzma.LZMAEncoder $r2, $r3, $r4, $r8;

        r0 := @this: org.tukaani.xz.LZMA2OutputStream;

        $r1 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $i0 = virtualinvoke $r1.<org.tukaani.xz.rangecoder.RangeEncoder: int finish()>();

        $r2 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lzma.LZMAEncoder lzma>;

        $i1 = virtualinvoke $r2.<org.tukaani.xz.lzma.LZMAEncoder: int getUncompressedSize()>();

        i4 = $i1;

        $z0 = <org.tukaani.xz.LZMA2OutputStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $i0 > 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(int)>($i0);

        throw $r7;

     label1:
        $z1 = <org.tukaani.xz.LZMA2OutputStream: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if $i1 > 0 goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(int)>($i1);

        throw $r6;

     label2:
        $i2 = $i0 + 2;

        if $i2 >= $i1 goto label3;

        specialinvoke r0.<org.tukaani.xz.LZMA2OutputStream: void writeLZMA(int,int)>($i1, $i0);

        goto label5;

     label3:
        $r3 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lzma.LZMAEncoder lzma>;

        virtualinvoke $r3.<org.tukaani.xz.lzma.LZMAEncoder: void reset()>();

        $r4 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lzma.LZMAEncoder lzma>;

        $i3 = virtualinvoke $r4.<org.tukaani.xz.lzma.LZMAEncoder: int getUncompressedSize()>();

        i4 = $i3;

        $z2 = <org.tukaani.xz.LZMA2OutputStream: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        if $i3 > 0 goto label4;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(int)>($i3);

        throw $r5;

     label4:
        specialinvoke r0.<org.tukaani.xz.LZMA2OutputStream: void writeUncompressed(int)>($i3);

     label5:
        $i5 = r0.<org.tukaani.xz.LZMA2OutputStream: int pendingSize>;

        $i6 = $i5 - i4;

        r0.<org.tukaani.xz.LZMA2OutputStream: int pendingSize> = $i6;

        $r8 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lzma.LZMAEncoder lzma>;

        virtualinvoke $r8.<org.tukaani.xz.lzma.LZMAEncoder: void resetUncompressedSize()>();

        $r9 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        virtualinvoke $r9.<org.tukaani.xz.rangecoder.RangeEncoder: void reset()>();

        return;
    }

    private void writeLZMA(int, int) throws java.io.IOException
    {
        org.tukaani.xz.rangecoder.RangeEncoder $r2;
        short s3;
        java.io.DataOutputStream $r3, $r4, $r5, $r6;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z1, $z2, $z3;
        org.tukaani.xz.LZMA2OutputStream r0;
        org.tukaani.xz.FinishableOutputStream $r1;

        r0 := @this: org.tukaani.xz.LZMA2OutputStream;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<org.tukaani.xz.LZMA2OutputStream: boolean propsNeeded>;

        if $z0 == 0 goto label2;

        $z2 = r0.<org.tukaani.xz.LZMA2OutputStream: boolean dictResetNeeded>;

        if $z2 == 0 goto label1;

        s3 = 224;

        goto label4;

     label1:
        s3 = 192;

        goto label4;

     label2:
        $z1 = r0.<org.tukaani.xz.LZMA2OutputStream: boolean stateResetNeeded>;

        if $z1 == 0 goto label3;

        s3 = 160;

        goto label4;

     label3:
        s3 = 128;

     label4:
        $i4 = i0 - 1;

        $i5 = $i4 >>> 16;

        $i6 = s3 | $i5;

        $r4 = r0.<org.tukaani.xz.LZMA2OutputStream: java.io.DataOutputStream outData>;

        virtualinvoke $r4.<java.io.DataOutputStream: void writeByte(int)>($i6);

        $r5 = r0.<org.tukaani.xz.LZMA2OutputStream: java.io.DataOutputStream outData>;

        $i7 = i0 - 1;

        virtualinvoke $r5.<java.io.DataOutputStream: void writeShort(int)>($i7);

        $r6 = r0.<org.tukaani.xz.LZMA2OutputStream: java.io.DataOutputStream outData>;

        $i8 = i1 - 1;

        virtualinvoke $r6.<java.io.DataOutputStream: void writeShort(int)>($i8);

        $z3 = r0.<org.tukaani.xz.LZMA2OutputStream: boolean propsNeeded>;

        if $z3 == 0 goto label5;

        $r3 = r0.<org.tukaani.xz.LZMA2OutputStream: java.io.DataOutputStream outData>;

        $i2 = r0.<org.tukaani.xz.LZMA2OutputStream: int props>;

        virtualinvoke $r3.<java.io.DataOutputStream: void writeByte(int)>($i2);

     label5:
        $r2 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r1 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.FinishableOutputStream out>;

        virtualinvoke $r2.<org.tukaani.xz.rangecoder.RangeEncoder: void write(java.io.OutputStream)>($r1);

        r0.<org.tukaani.xz.LZMA2OutputStream: boolean propsNeeded> = 0;

        r0.<org.tukaani.xz.LZMA2OutputStream: boolean stateResetNeeded> = 0;

        r0.<org.tukaani.xz.LZMA2OutputStream: boolean dictResetNeeded> = 0;

        return;
    }

    private void writeUncompressed(int) throws java.io.IOException
    {
        org.tukaani.xz.LZMA2OutputStream r0;
        java.io.DataOutputStream $r1, $r2;
        byte $b3;
        int $i0, $i1, i2;
        org.tukaani.xz.FinishableOutputStream $r3;
        org.tukaani.xz.lz.LZEncoder $r4;
        boolean $z0;

        r0 := @this: org.tukaani.xz.LZMA2OutputStream;

        i2 := @parameter0: int;

     label1:
        if i2 <= 0 goto label4;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(i2, 65536);

        $r1 = r0.<org.tukaani.xz.LZMA2OutputStream: java.io.DataOutputStream outData>;

        $z0 = r0.<org.tukaani.xz.LZMA2OutputStream: boolean dictResetNeeded>;

        if $z0 == 0 goto label2;

        $b3 = 1;

        goto label3;

     label2:
        $b3 = 2;

     label3:
        virtualinvoke $r1.<java.io.DataOutputStream: void writeByte(int)>($b3);

        $r2 = r0.<org.tukaani.xz.LZMA2OutputStream: java.io.DataOutputStream outData>;

        $i1 = $i0 - 1;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeShort(int)>($i1);

        $r4 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lz.LZEncoder lz>;

        $r3 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.FinishableOutputStream out>;

        virtualinvoke $r4.<org.tukaani.xz.lz.LZEncoder: void copyUncompressed(java.io.OutputStream,int,int)>($r3, i2, $i0);

        i2 = i2 - $i0;

        r0.<org.tukaani.xz.LZMA2OutputStream: boolean dictResetNeeded> = 0;

        goto label1;

     label4:
        r0.<org.tukaani.xz.LZMA2OutputStream: boolean stateResetNeeded> = 1;

        return;
    }

    private void writeEndMarker() throws java.io.IOException
    {
        java.io.IOException $r1, $r5, $r7;
        java.lang.AssertionError $r6;
        org.tukaani.xz.LZMA2OutputStream r0;
        org.tukaani.xz.lzma.LZMAEncoder $r4;
        int $i0;
        org.tukaani.xz.FinishableOutputStream $r3;
        org.tukaani.xz.lz.LZEncoder $r2;
        boolean $z0, $z1;

        r0 := @this: org.tukaani.xz.LZMA2OutputStream;

        $z0 = <org.tukaani.xz.LZMA2OutputStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.tukaani.xz.LZMA2OutputStream: boolean finished>;

        if $z1 == 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r1 = r0.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception>;

        if $r1 == null goto label2;

        $r5 = r0.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception>;

        throw $r5;

     label2:
        $r2 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lz.LZEncoder lz>;

        virtualinvoke $r2.<org.tukaani.xz.lz.LZEncoder: void setFinishing()>();

     label3:
        $i0 = r0.<org.tukaani.xz.LZMA2OutputStream: int pendingSize>;

        if $i0 <= 0 goto label4;

        $r4 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lzma.LZMAEncoder lzma>;

        virtualinvoke $r4.<org.tukaani.xz.lzma.LZMAEncoder: boolean encodeForLZMA2()>();

        specialinvoke r0.<org.tukaani.xz.LZMA2OutputStream: void writeChunk()>();

        goto label3;

     label4:
        $r3 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.FinishableOutputStream out>;

        virtualinvoke $r3.<org.tukaani.xz.FinishableOutputStream: void write(int)>(0);

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        r0.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception> = $r7;

        throw $r7;

     label7:
        r0.<org.tukaani.xz.LZMA2OutputStream: boolean finished> = 1;

        return;

        catch java.io.IOException from label3 to label5 with label6;
    }

    public void flush() throws java.io.IOException
    {
        java.io.IOException $r1, $r6, $r7;
        org.tukaani.xz.LZMA2OutputStream r0;
        org.tukaani.xz.XZIOException $r5;
        org.tukaani.xz.lzma.LZMAEncoder $r4;
        int $i0;
        org.tukaani.xz.FinishableOutputStream $r3;
        org.tukaani.xz.lz.LZEncoder $r2;
        boolean $z0;

        r0 := @this: org.tukaani.xz.LZMA2OutputStream;

        $r1 = r0.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception>;

        if $r1 == null goto label1;

        $r6 = r0.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception>;

        throw $r6;

     label1:
        $z0 = r0.<org.tukaani.xz.LZMA2OutputStream: boolean finished>;

        if $z0 == 0 goto label2;

        $r5 = new org.tukaani.xz.XZIOException;

        specialinvoke $r5.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream finished or closed");

        throw $r5;

     label2:
        $r2 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lz.LZEncoder lz>;

        virtualinvoke $r2.<org.tukaani.xz.lz.LZEncoder: void setFlushing()>();

     label3:
        $i0 = r0.<org.tukaani.xz.LZMA2OutputStream: int pendingSize>;

        if $i0 <= 0 goto label4;

        $r4 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lzma.LZMAEncoder lzma>;

        virtualinvoke $r4.<org.tukaani.xz.lzma.LZMAEncoder: boolean encodeForLZMA2()>();

        specialinvoke r0.<org.tukaani.xz.LZMA2OutputStream: void writeChunk()>();

        goto label3;

     label4:
        $r3 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.FinishableOutputStream out>;

        virtualinvoke $r3.<org.tukaani.xz.FinishableOutputStream: void flush()>();

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        r0.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception> = $r7;

        throw $r7;

     label7:
        return;

        catch java.io.IOException from label2 to label5 with label6;
    }

    public void finish() throws java.io.IOException
    {
        org.tukaani.xz.FinishableOutputStream $r1;
        java.io.IOException $r2;
        org.tukaani.xz.LZMA2OutputStream r0;
        boolean $z0;

        r0 := @this: org.tukaani.xz.LZMA2OutputStream;

        $z0 = r0.<org.tukaani.xz.LZMA2OutputStream: boolean finished>;

        if $z0 != 0 goto label5;

        specialinvoke r0.<org.tukaani.xz.LZMA2OutputStream: void writeEndMarker()>();

     label1:
        $r1 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.FinishableOutputStream out>;

        virtualinvoke $r1.<org.tukaani.xz.FinishableOutputStream: void finish()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r0.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception> = $r2;

        throw $r2;

     label4:
        r0.<org.tukaani.xz.LZMA2OutputStream: boolean finished> = 1;

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void close() throws java.io.IOException
    {
        java.io.IOException $r2, $r3, $r4, $r5, $r7;
        org.tukaani.xz.LZMA2OutputStream r0;
        org.tukaani.xz.FinishableOutputStream $r1, $r6;
        boolean $z0;

        r0 := @this: org.tukaani.xz.LZMA2OutputStream;

        $r1 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.FinishableOutputStream out>;

        if $r1 == null goto label8;

        $z0 = r0.<org.tukaani.xz.LZMA2OutputStream: boolean finished>;

        if $z0 != 0 goto label4;

     label1:
        specialinvoke r0.<org.tukaani.xz.LZMA2OutputStream: void writeEndMarker()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.FinishableOutputStream out>;

        virtualinvoke $r6.<org.tukaani.xz.FinishableOutputStream: void close()>();

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        $r4 = r0.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception>;

        if $r4 != null goto label7;

        r0.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception> = $r3;

     label7:
        r0.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.FinishableOutputStream out> = null;

     label8:
        $r7 = r0.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception>;

        if $r7 == null goto label9;

        $r2 = r0.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception>;

        throw $r2;

     label9:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        <org.tukaani.xz.LZMA2OutputStream: int COMPRESSED_SIZE_MAX> = 65536;

        $r0 = <org.tukaani.xz.LZMA2OutputStream: java.lang.Class class$org$tukaani$xz$LZMA2OutputStream>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.tukaani.xz.LZMA2OutputStream: java.lang.Class class$(java.lang.String)>("org.tukaani.xz.LZMA2OutputStream");

        <org.tukaani.xz.LZMA2OutputStream: java.lang.Class class$org$tukaani$xz$LZMA2OutputStream> = $r1;

        goto label2;

     label1:
        $r1 = <org.tukaani.xz.LZMA2OutputStream: java.lang.Class class$org$tukaani$xz$LZMA2OutputStream>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.tukaani.xz.LZMA2OutputStream: boolean $assertionsDisabled> = $z1;

        return;
    }
}
