public class tdb.cmdline.ModTDBAssembler extends arq.cmdline.ModAssembler
{
    private tdb.cmdline.ModLocation modLocation;
    public static final java.lang.String defaultAssemblerFile;
    protected boolean useDefaultAssemblerFile;

    public void <init>()
    {
        arq.cmdline.ArgDecl $r2;
        tdb.cmdline.ModTDBAssembler r0;
        tdb.cmdline.ModLocation $r1;

        r0 := @this: tdb.cmdline.ModTDBAssembler;

        specialinvoke r0.<arq.cmdline.ModAssembler: void <init>()>();

        $r1 = new tdb.cmdline.ModLocation;

        specialinvoke $r1.<tdb.cmdline.ModLocation: void <init>()>();

        r0.<tdb.cmdline.ModTDBAssembler: tdb.cmdline.ModLocation modLocation> = $r1;

        r0.<tdb.cmdline.ModTDBAssembler: boolean useDefaultAssemblerFile> = 0;

        $r2 = <arq.cmdline.ModAssembler: arq.cmdline.ArgDecl assemblerDescDecl>;

        virtualinvoke $r2.<arq.cmdline.ArgDecl: void addName(java.lang.String)>("tdb");

        return;
    }

    public void processArgs(arq.cmdline.CmdArgModule)
    {
        com.hp.hpl.jena.tdb.base.file.Location $r5;
        arq.cmdline.CmdArgModule r1;
        tdb.cmdline.ModTDBAssembler r0;
        tdb.cmdline.ModLocation $r2, $r4;
        arq.cmd.CmdException $r6;
        int i0;
        java.lang.String $r3;

        r0 := @this: tdb.cmdline.ModTDBAssembler;

        r1 := @parameter0: arq.cmdline.CmdArgModule;

        i0 = 0;

        $r2 = r0.<tdb.cmdline.ModTDBAssembler: tdb.cmdline.ModLocation modLocation>;

        virtualinvoke $r2.<tdb.cmdline.ModLocation: void processArgs(arq.cmdline.CmdArgModule)>(r1);

        specialinvoke r0.<arq.cmdline.ModAssembler: void processArgs(arq.cmdline.CmdArgModule)>(r1);

        $r3 = specialinvoke r0.<arq.cmdline.ModAssembler: java.lang.String getAssemblerFile()>();

        if $r3 == null goto label1;

        i0 = 1;

     label1:
        $r4 = r0.<tdb.cmdline.ModTDBAssembler: tdb.cmdline.ModLocation modLocation>;

        $r5 = virtualinvoke $r4.<tdb.cmdline.ModLocation: com.hp.hpl.jena.tdb.base.file.Location getLocation()>();

        if $r5 == null goto label2;

        i0 = i0 + 1;

     label2:
        if i0 != 0 goto label3;

        r0.<tdb.cmdline.ModTDBAssembler: boolean useDefaultAssemblerFile> = 1;

     label3:
        if i0 <= 1 goto label4;

        $r6 = new arq.cmd.CmdException;

        specialinvoke $r6.<arq.cmd.CmdException: void <init>(java.lang.String)>("Only one of an assembler file and a location");

        throw $r6;

     label4:
        return;
    }

    public void registerWith(arq.cmdline.CmdGeneral)
    {
        arq.cmdline.Usage $r3;
        tdb.cmdline.ModTDBAssembler r0;
        tdb.cmdline.ModLocation $r2;
        arq.cmdline.CmdGeneral r1;

        r0 := @this: tdb.cmdline.ModTDBAssembler;

        r1 := @parameter0: arq.cmdline.CmdGeneral;

        specialinvoke r0.<arq.cmdline.ModAssembler: void registerWith(arq.cmdline.CmdGeneral)>(r1);

        $r2 = r0.<tdb.cmdline.ModTDBAssembler: tdb.cmdline.ModLocation modLocation>;

        virtualinvoke r1.<arq.cmdline.CmdGeneral: void addModule(arq.cmdline.ArgModuleGeneral)>($r2);

        $r3 = virtualinvoke r1.<arq.cmdline.CmdGeneral: arq.cmdline.Usage getUsage()>();

        virtualinvoke $r3.<arq.cmdline.Usage: void addUsage(java.lang.String,java.lang.String)>("--tdb=", "Assembler description file");

        return;
    }

    public com.hp.hpl.jena.tdb.base.file.Location getLocation()
    {
        com.hp.hpl.jena.tdb.base.file.Location $r2;
        tdb.cmdline.ModTDBAssembler r0;
        tdb.cmdline.ModLocation $r1;

        r0 := @this: tdb.cmdline.ModTDBAssembler;

        $r1 = r0.<tdb.cmdline.ModTDBAssembler: tdb.cmdline.ModLocation modLocation>;

        $r2 = virtualinvoke $r1.<tdb.cmdline.ModLocation: com.hp.hpl.jena.tdb.base.file.Location getLocation()>();

        return $r2;
    }

    public java.lang.String getAssemblerFile()
    {
        tdb.cmdline.ModTDBAssembler r0;
        java.lang.String $r1;
        java.io.File $r2;
        boolean $z0, $z1;

        r0 := @this: tdb.cmdline.ModTDBAssembler;

        $z0 = r0.<tdb.cmdline.ModTDBAssembler: boolean useDefaultAssemblerFile>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("tdb.ttl");

        $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label1;

        return "tdb.ttl";

     label1:
        $r1 = specialinvoke r0.<arq.cmdline.ModAssembler: java.lang.String getAssemblerFile()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <tdb.cmdline.ModTDBAssembler: java.lang.String defaultAssemblerFile> = "tdb.ttl";

        return;
    }
}
