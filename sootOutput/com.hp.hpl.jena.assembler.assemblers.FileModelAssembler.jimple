public class com.hp.hpl.jena.assembler.assemblers.FileModelAssembler extends com.hp.hpl.jena.assembler.assemblers.NamedModelAssembler implements com.hp.hpl.jena.assembler.Assembler
{

    public void <init>()
    {
        com.hp.hpl.jena.assembler.assemblers.FileModelAssembler r0;

        r0 := @this: com.hp.hpl.jena.assembler.assemblers.FileModelAssembler;

        specialinvoke r0.<com.hp.hpl.jena.assembler.assemblers.NamedModelAssembler: void <init>()>();

        return;
    }

    protected com.hp.hpl.jena.rdf.model.Model openEmptyModel(com.hp.hpl.jena.assembler.Assembler, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.assembler.Mode)
    {
        com.hp.hpl.jena.assembler.Assembler r11;
        com.hp.hpl.jena.assembler.assemblers.FileModelAssembler r0;
        com.hp.hpl.jena.assembler.Mode r4;
        com.hp.hpl.jena.rdf.model.Property $r7, $r8;
        java.lang.String $r5, $r6, $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.rdf.model.Resource r1, $r2;
        java.io.File $r3;
        com.hp.hpl.jena.rdf.model.Model $r10;

        r0 := @this: com.hp.hpl.jena.assembler.assemblers.FileModelAssembler;

        r11 := @parameter0: com.hp.hpl.jena.assembler.Assembler;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        r4 := @parameter2: com.hp.hpl.jena.assembler.Mode;

        $r2 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Resource FileModel>;

        virtualinvoke r0.<com.hp.hpl.jena.assembler.assemblers.FileModelAssembler: void checkType(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Resource)>(r1, $r2);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.assembler.assemblers.FileModelAssembler: java.io.File getFileName(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        $r5 = virtualinvoke $r3.<java.io.File: java.lang.String toString()>();

        $z0 = virtualinvoke r4.<com.hp.hpl.jena.assembler.Mode: boolean permitCreateNew(com.hp.hpl.jena.rdf.model.Resource,java.lang.String)>(r1, $r5);

        $r6 = virtualinvoke $r3.<java.io.File: java.lang.String toString()>();

        $z1 = virtualinvoke r4.<com.hp.hpl.jena.assembler.Mode: boolean permitUseExisting(com.hp.hpl.jena.rdf.model.Resource,java.lang.String)>(r1, $r6);

        $r7 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Property create>;

        $z2 = specialinvoke r0.<com.hp.hpl.jena.assembler.assemblers.FileModelAssembler: boolean getBoolean(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,boolean)>(r1, $r7, $z0);

        $r8 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Property strict>;

        if $z0 == $z1 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        $z3 = specialinvoke r0.<com.hp.hpl.jena.assembler.assemblers.FileModelAssembler: boolean getBoolean(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,boolean)>(r1, $r8, $z4);

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.assembler.assemblers.FileModelAssembler: java.lang.String getLanguage(com.hp.hpl.jena.rdf.model.Resource,java.io.File)>(r1, $r3);

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.assembler.assemblers.FileModelAssembler: com.hp.hpl.jena.rdf.model.Model createFileModel(java.io.File,java.lang.String,boolean,boolean)>($r3, $r9, $z2, $z3);

        return $r10;
    }

    public com.hp.hpl.jena.rdf.model.Model createFileModel(java.io.File, java.lang.String, boolean, boolean)
    {
        com.hp.hpl.jena.graph.impl.FileGraph $r1;
        com.hp.hpl.jena.assembler.assemblers.FileModelAssembler r5;
        java.io.File r2;
        com.hp.hpl.jena.rdf.model.Model $r4;
        com.hp.hpl.jena.graph.impl.FileGraph$NotifyOnClose r0;
        java.lang.String r3;
        boolean z0, z1;

        r5 := @this: com.hp.hpl.jena.assembler.assemblers.FileModelAssembler;

        r2 := @parameter0: java.io.File;

        r3 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r0 = <com.hp.hpl.jena.graph.impl.FileGraph$NotifyOnClose: com.hp.hpl.jena.graph.impl.FileGraph$NotifyOnClose ignore>;

        $r1 = new com.hp.hpl.jena.graph.impl.FileGraph;

        specialinvoke $r1.<com.hp.hpl.jena.graph.impl.FileGraph: void <init>(com.hp.hpl.jena.graph.impl.FileGraph$NotifyOnClose,java.io.File,java.lang.String,boolean,boolean)>(r0, r2, r3, z0, z1);

        $r4 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createModelForGraph(com.hp.hpl.jena.graph.Graph)>($r1);

        return $r4;
    }

    protected java.lang.String getLanguage(com.hp.hpl.jena.rdf.model.Resource, java.io.File)
    {
        com.hp.hpl.jena.assembler.assemblers.FileModelAssembler r5;
        com.hp.hpl.jena.rdf.model.Property $r1;
        java.lang.String $r4, $r6;
        com.hp.hpl.jena.rdf.model.Statement $r2;
        com.hp.hpl.jena.rdf.model.Resource r0;
        java.io.File r3;

        r5 := @this: com.hp.hpl.jena.assembler.assemblers.FileModelAssembler;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r3 := @parameter1: java.io.File;

        $r1 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Property fileEncoding>;

        $r2 = staticinvoke <com.hp.hpl.jena.assembler.assemblers.FileModelAssembler: com.hp.hpl.jena.rdf.model.Statement getUniqueStatement(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, $r1);

        if $r2 != null goto label1;

        $r4 = virtualinvoke r3.<java.io.File: java.lang.String toString()>();

        $r6 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String guessLang(java.lang.String)>($r4);

        goto label2;

     label1:
        $r6 = staticinvoke <com.hp.hpl.jena.assembler.assemblers.FileModelAssembler: java.lang.String getString(com.hp.hpl.jena.rdf.model.Statement)>($r2);

     label2:
        return $r6;
    }

    protected java.io.File getFileName(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.assembler.assemblers.FileModelAssembler r0;
        com.hp.hpl.jena.rdf.model.Resource r1;
        java.io.File $r5;
        com.hp.hpl.jena.rdf.model.Property $r3;
        java.lang.String $r2, $r4, $r6;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.assembler.assemblers.FileModelAssembler;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.assembler.assemblers.FileModelAssembler: java.lang.String getModelName(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        $r3 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Property mapName>;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.assembler.assemblers.FileModelAssembler: boolean getBoolean(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,boolean)>(r1, $r3, 0);

        $r4 = specialinvoke r0.<com.hp.hpl.jena.assembler.assemblers.FileModelAssembler: java.lang.String getDirectoryName(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        $r5 = new java.io.File;

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <com.hp.hpl.jena.graph.impl.FileGraphMaker: java.lang.String toFilename(java.lang.String)>($r2);

        goto label2;

     label1:
        $r6 = $r2;

     label2:
        specialinvoke $r5.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r4, $r6);

        return $r5;
    }

    private boolean getBoolean(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property, boolean)
    {
        com.hp.hpl.jena.assembler.assemblers.FileModelAssembler r3;
        com.hp.hpl.jena.rdf.model.RDFNode $r2;
        com.hp.hpl.jena.graph.Node $r4, $r6;
        com.hp.hpl.jena.rdf.model.Resource r0;
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.String $r5, $r7;
        boolean $z0, $z1, z2, $z3;

        r3 := @this: com.hp.hpl.jena.assembler.assemblers.FileModelAssembler;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        z2 := @parameter2: boolean;

        $r2 = staticinvoke <com.hp.hpl.jena.assembler.assemblers.FileModelAssembler: com.hp.hpl.jena.rdf.model.RDFNode getUnique(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, r1);

        if $r2 != null goto label1;

        $z3 = z2;

        goto label4;

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isLiteral()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.graph.Node asNode()>();

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $z3 = specialinvoke r3.<com.hp.hpl.jena.assembler.assemblers.FileModelAssembler: boolean booleanSpelling(java.lang.String)>($r7);

        goto label4;

     label2:
        $z1 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isURIResource()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.graph.Node asNode()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: java.lang.String getLocalName()>();

        $z3 = specialinvoke r3.<com.hp.hpl.jena.assembler.assemblers.FileModelAssembler: boolean booleanSpelling(java.lang.String)>($r5);

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    private boolean booleanSpelling(java.lang.String)
    {
        com.hp.hpl.jena.assembler.assemblers.FileModelAssembler r2;
        java.lang.IllegalArgumentException $r1;
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r2 := @this: com.hp.hpl.jena.assembler.assemblers.FileModelAssembler;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("t");

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("1");

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z3 == 0 goto label4;

        return 0;

     label4:
        $z4 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("f");

        if $z4 == 0 goto label5;

        return 0;

     label5:
        $z5 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("0");

        if $z5 == 0 goto label6;

        return 0;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("boolean requires spelling true/false/t/f/0/1");

        throw $r1;
    }

    private java.lang.String getDirectoryName(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.assembler.assemblers.FileModelAssembler r5;
        com.hp.hpl.jena.rdf.model.Property $r1;
        java.lang.String $r3, $r4;
        com.hp.hpl.jena.rdf.model.Resource r0, $r2;

        r5 := @this: com.hp.hpl.jena.assembler.assemblers.FileModelAssembler;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Property directory>;

        $r2 = staticinvoke <com.hp.hpl.jena.assembler.assemblers.FileModelAssembler: com.hp.hpl.jena.rdf.model.Resource getRequiredResource(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, $r1);

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("file:", "");

        return $r4;
    }
}
