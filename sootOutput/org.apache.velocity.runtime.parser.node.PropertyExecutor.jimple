public class org.apache.velocity.runtime.parser.node.PropertyExecutor extends org.apache.velocity.runtime.parser.node.AbstractExecutor
{
    private final org.apache.velocity.util.introspection.Introspector introspector;

    public void <init>(org.apache.velocity.runtime.log.Log, org.apache.velocity.util.introspection.Introspector, java.lang.Class, java.lang.String)
    {
        org.apache.velocity.runtime.log.Log r1;
        org.apache.velocity.util.introspection.Introspector r2;
        java.lang.Class r4;
        java.lang.String r3;
        org.apache.velocity.runtime.parser.node.PropertyExecutor r0;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.parser.node.PropertyExecutor;

        r1 := @parameter0: org.apache.velocity.runtime.log.Log;

        r2 := @parameter1: org.apache.velocity.util.introspection.Introspector;

        r4 := @parameter2: java.lang.Class;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<org.apache.velocity.runtime.parser.node.AbstractExecutor: void <init>()>();

        r0.<org.apache.velocity.runtime.parser.node.PropertyExecutor: org.apache.velocity.runtime.log.Log log> = r1;

        r0.<org.apache.velocity.runtime.parser.node.PropertyExecutor: org.apache.velocity.util.introspection.Introspector introspector> = r2;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotEmpty(java.lang.String)>(r3);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.velocity.runtime.parser.node.PropertyExecutor: void discover(java.lang.Class,java.lang.String)>(r4, r3);

     label1:
        return;
    }

    public void <init>(org.apache.velocity.runtime.RuntimeLogger, org.apache.velocity.util.introspection.Introspector, java.lang.Class, java.lang.String)
    {
        org.apache.velocity.runtime.log.RuntimeLoggerLog $r1;
        org.apache.velocity.util.introspection.Introspector r3;
        java.lang.Class r4;
        java.lang.String r5;
        org.apache.velocity.runtime.parser.node.PropertyExecutor r0;
        org.apache.velocity.runtime.RuntimeLogger r2;

        r0 := @this: org.apache.velocity.runtime.parser.node.PropertyExecutor;

        r2 := @parameter0: org.apache.velocity.runtime.RuntimeLogger;

        r3 := @parameter1: org.apache.velocity.util.introspection.Introspector;

        r4 := @parameter2: java.lang.Class;

        r5 := @parameter3: java.lang.String;

        $r1 = new org.apache.velocity.runtime.log.RuntimeLoggerLog;

        specialinvoke $r1.<org.apache.velocity.runtime.log.RuntimeLoggerLog: void <init>(org.apache.velocity.runtime.RuntimeLogger)>(r2);

        specialinvoke r0.<org.apache.velocity.runtime.parser.node.PropertyExecutor: void <init>(org.apache.velocity.runtime.log.Log,org.apache.velocity.util.introspection.Introspector,java.lang.Class,java.lang.String)>($r1, r3, r4, r5);

        return;
    }

    protected org.apache.velocity.util.introspection.Introspector getIntrospector()
    {
        org.apache.velocity.runtime.parser.node.PropertyExecutor r0;
        org.apache.velocity.util.introspection.Introspector $r1;

        r0 := @this: org.apache.velocity.runtime.parser.node.PropertyExecutor;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.PropertyExecutor: org.apache.velocity.util.introspection.Introspector introspector>;

        return $r1;
    }

    protected void discover(java.lang.Class, java.lang.String)
    {
        java.lang.Object[] r18;
        org.apache.velocity.runtime.parser.node.PropertyExecutor r2;
        java.lang.StringBuffer $r0, $r11, $r12, $r13;
        org.apache.velocity.util.introspection.Introspector $r4, $r7;
        java.lang.String r1, $r5, $r8, $r14;
        org.apache.velocity.exception.VelocityException $r16;
        java.lang.reflect.Method $r6, $r9;
        boolean $z0, $z1;
        char $c0, $c1, $c2;
        java.lang.RuntimeException $r17;
        java.lang.Exception $r10;
        org.apache.velocity.runtime.log.Log $r15;
        java.lang.Class r3;

        r2 := @this: org.apache.velocity.runtime.parser.node.PropertyExecutor;

        r3 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

     label1:
        r18 = newarray (java.lang.Object)[0];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("get");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r4 = r2.<org.apache.velocity.runtime.parser.node.PropertyExecutor: org.apache.velocity.util.introspection.Introspector introspector>;

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = virtualinvoke $r4.<org.apache.velocity.util.introspection.Introspector: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Object[])>(r3, $r5, r18);

        virtualinvoke r2.<org.apache.velocity.runtime.parser.node.PropertyExecutor: void setMethod(java.lang.reflect.Method)>($r6);

        $z0 = virtualinvoke r2.<org.apache.velocity.runtime.parser.node.PropertyExecutor: boolean isAlive()>();

        if $z0 != 0 goto label4;

        $c0 = virtualinvoke $r0.<java.lang.StringBuffer: char charAt(int)>(3);

        $z1 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c0);

        if $z1 == 0 goto label2;

        $c2 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        virtualinvoke $r0.<java.lang.StringBuffer: void setCharAt(int,char)>(3, $c2);

        goto label3;

     label2:
        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c0);

        virtualinvoke $r0.<java.lang.StringBuffer: void setCharAt(int,char)>(3, $c1);

     label3:
        $r7 = r2.<org.apache.velocity.runtime.parser.node.PropertyExecutor: org.apache.velocity.util.introspection.Introspector introspector>;

        $r8 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<org.apache.velocity.util.introspection.Introspector: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Object[])>(r3, $r8, r18);

        virtualinvoke r2.<org.apache.velocity.runtime.parser.node.PropertyExecutor: void setMethod(java.lang.reflect.Method)>($r9);

     label4:
        goto label7;

     label5:
        $r17 := @caughtexception;

        throw $r17;

     label6:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Exception while looking for property getter for \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        $r15 = r2.<org.apache.velocity.runtime.parser.node.PropertyExecutor: org.apache.velocity.runtime.log.Log log>;

        virtualinvoke $r15.<org.apache.velocity.runtime.log.Log: void error(java.lang.Object,java.lang.Throwable)>($r14, $r10);

        $r16 = new org.apache.velocity.exception.VelocityException;

        specialinvoke $r16.<org.apache.velocity.exception.VelocityException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r10);

        throw $r16;

     label7:
        return;

        catch java.lang.RuntimeException from label1 to label4 with label5;
        catch java.lang.Exception from label1 to label4 with label6;
    }

    public java.lang.Object execute(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] $r3;
        java.lang.Object r2, $r4;
        java.lang.reflect.Method $r1;
        org.apache.velocity.runtime.parser.node.PropertyExecutor r0;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.parser.node.PropertyExecutor;

        r2 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.PropertyExecutor: boolean isAlive()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.PropertyExecutor: java.lang.reflect.Method getMethod()>();

        $r3 = (java.lang.Object[]) null;

        $r4 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r3);

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }
}
