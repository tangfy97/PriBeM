class com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitorServiceAsLeaf extends com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor
{

    public void <init>(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.expr.ExprTransform)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitorServiceAsLeaf r0;
        com.hp.hpl.jena.sparql.algebra.Transform r1;
        com.hp.hpl.jena.sparql.expr.ExprTransform r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitorServiceAsLeaf;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprTransform;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: void <init>(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.expr.ExprTransform)>(r1, r2);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpService)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitorServiceAsLeaf r0;
        com.hp.hpl.jena.sparql.algebra.op.OpService r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitorServiceAsLeaf;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpService;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitorServiceAsLeaf: void push(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return;
    }
}
