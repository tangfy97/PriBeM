public class nu.xom.Text extends nu.xom.Node
{
    private byte[] data;

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.Text r0;

        r0 := @this: nu.xom.Text;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<nu.xom.Node: void <init>()>();

        specialinvoke r0.<nu.xom.Text: void _setValue(java.lang.String)>(r1);

        return;
    }

    public void <init>(nu.xom.Text)
    {
        byte[] $r2;
        nu.xom.Text r0, r1;

        r0 := @this: nu.xom.Text;

        r1 := @parameter0: nu.xom.Text;

        specialinvoke r0.<nu.xom.Node: void <init>()>();

        $r2 = r1.<nu.xom.Text: byte[] data>;

        r0.<nu.xom.Text: byte[] data> = $r2;

        return;
    }

    private void <init>()
    {
        nu.xom.Text r0;

        r0 := @this: nu.xom.Text;

        specialinvoke r0.<nu.xom.Node: void <init>()>();

        return;
    }

    static nu.xom.Text build(java.lang.String)
    {
        byte[] $r2;
        java.lang.String r1;
        java.lang.RuntimeException $r4;
        java.io.UnsupportedEncodingException $r3;
        nu.xom.Text $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new nu.xom.Text;

        specialinvoke $r0.<nu.xom.Text: void <init>()>();

     label1:
        $r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");

        $r0.<nu.xom.Text: byte[] data> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Bad VM! Does not support UTF-8");

        throw $r4;

     label4:
        return $r0;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public void setValue(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.Text r0;

        r0 := @this: nu.xom.Text;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<nu.xom.Text: void _setValue(java.lang.String)>(r1);

        return;
    }

    private void _setValue(java.lang.String)
    {
        byte[] $r1;
        java.lang.RuntimeException $r3;
        java.lang.String r4;
        java.io.UnsupportedEncodingException $r2;
        nu.xom.Text r0;

        r0 := @this: nu.xom.Text;

        r4 := @parameter0: java.lang.String;

        if r4 != null goto label1;

        r4 = "";

        goto label2;

     label1:
        staticinvoke <nu.xom.Verifier: void checkPCDATA(java.lang.String)>(r4);

     label2:
        $r1 = virtualinvoke r4.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");

        r0.<nu.xom.Text: byte[] data> = $r1;

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Bad VM! Does not support UTF-8");

        throw $r3;

     label5:
        return;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }

    public final java.lang.String getValue()
    {
        byte[] $r2;
        java.lang.String $r0;
        java.lang.RuntimeException $r4;
        java.io.UnsupportedEncodingException $r3;
        nu.xom.Text r1;

        r1 := @this: nu.xom.Text;

     label1:
        $r0 = new java.lang.String;

        $r2 = r1.<nu.xom.Text: byte[] data>;

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, "UTF8");

     label2:
        return $r0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Bad VM! Does not support UTF-8");

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public final nu.xom.Node getChild(int)
    {
        int i0;
        java.lang.IndexOutOfBoundsException $r0;
        nu.xom.Text r1;

        r1 := @this: nu.xom.Text;

        i0 := @parameter0: int;

        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("LeafNodes do not have children");

        throw $r0;
    }

    public final int getChildCount()
    {
        nu.xom.Text r0;

        r0 := @this: nu.xom.Text;

        return 0;
    }

    public nu.xom.Node copy()
    {
        nu.xom.CDATASection $r2;
        nu.xom.Text r0, $r1;
        boolean $z0;

        r0 := @this: nu.xom.Text;

        $z0 = virtualinvoke r0.<nu.xom.Text: boolean isCDATASection()>();

        if $z0 == 0 goto label1;

        $r2 = new nu.xom.CDATASection;

        specialinvoke $r2.<nu.xom.CDATASection: void <init>(nu.xom.Text)>(r0);

        return $r2;

     label1:
        $r1 = new nu.xom.Text;

        specialinvoke $r1.<nu.xom.Text: void <init>(nu.xom.Text)>(r0);

        return $r1;
    }

    public final java.lang.String toXML()
    {
        java.lang.String $r1;
        nu.xom.Text r0;

        r0 := @this: nu.xom.Text;

        $r1 = virtualinvoke r0.<nu.xom.Text: java.lang.String escapeText()>();

        return $r1;
    }

    java.lang.String escapeText()
    {
        char $c2;
        java.lang.StringBuffer $r4;
        int $i0, $i1, i3, $i4;
        java.lang.String $r1, $r3;
        nu.xom.Text r0;

        r0 := @this: nu.xom.Text;

        $r1 = virtualinvoke r0.<nu.xom.Text: java.lang.String getValue()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r4 = new java.lang.StringBuffer;

        $i1 = $i0 + 12;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i1);

        i3 = 0;

     label01:
        if i3 >= $i0 goto label54;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c2;

        tableswitch($i4)
        {
            case 13: goto label02;
            case 14: goto label03;
            case 15: goto label04;
            case 16: goto label05;
            case 17: goto label06;
            case 18: goto label07;
            case 19: goto label08;
            case 20: goto label09;
            case 21: goto label10;
            case 22: goto label11;
            case 23: goto label12;
            case 24: goto label13;
            case 25: goto label14;
            case 26: goto label15;
            case 27: goto label16;
            case 28: goto label17;
            case 29: goto label18;
            case 30: goto label19;
            case 31: goto label20;
            case 32: goto label21;
            case 33: goto label22;
            case 34: goto label23;
            case 35: goto label24;
            case 36: goto label25;
            case 37: goto label26;
            case 38: goto label27;
            case 39: goto label28;
            case 40: goto label29;
            case 41: goto label30;
            case 42: goto label31;
            case 43: goto label32;
            case 44: goto label33;
            case 45: goto label34;
            case 46: goto label35;
            case 47: goto label36;
            case 48: goto label37;
            case 49: goto label38;
            case 50: goto label39;
            case 51: goto label40;
            case 52: goto label41;
            case 53: goto label42;
            case 54: goto label43;
            case 55: goto label44;
            case 56: goto label45;
            case 57: goto label46;
            case 58: goto label47;
            case 59: goto label48;
            case 60: goto label49;
            case 61: goto label50;
            case 62: goto label51;
            default: goto label52;
        };

     label02:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#x0D;");

        goto label53;

     label03:
        goto label53;

     label04:
        goto label53;

     label05:
        goto label53;

     label06:
        goto label53;

     label07:
        goto label53;

     label08:
        goto label53;

     label09:
        goto label53;

     label10:
        goto label53;

     label11:
        goto label53;

     label12:
        goto label53;

     label13:
        goto label53;

     label14:
        goto label53;

     label15:
        goto label53;

     label16:
        goto label53;

     label17:
        goto label53;

     label18:
        goto label53;

     label19:
        goto label53;

     label20:
        goto label53;

     label21:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        goto label53;

     label22:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(33);

        goto label53;

     label23:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        goto label53;

     label24:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(35);

        goto label53;

     label25:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(36);

        goto label53;

     label26:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(37);

        goto label53;

     label27:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&amp;");

        goto label53;

     label28:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        goto label53;

     label29:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        goto label53;

     label30:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        goto label53;

     label31:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(42);

        goto label53;

     label32:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43);

        goto label53;

     label33:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        goto label53;

     label34:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        goto label53;

     label35:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        goto label53;

     label36:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

        goto label53;

     label37:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        goto label53;

     label38:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(49);

        goto label53;

     label39:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(50);

        goto label53;

     label40:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(51);

        goto label53;

     label41:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(52);

        goto label53;

     label42:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(53);

        goto label53;

     label43:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(54);

        goto label53;

     label44:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(55);

        goto label53;

     label45:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(56);

        goto label53;

     label46:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(57);

        goto label53;

     label47:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        goto label53;

     label48:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        goto label53;

     label49:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&lt;");

        goto label53;

     label50:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(61);

        goto label53;

     label51:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&gt;");

        goto label53;

     label52:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label53:
        i3 = i3 + 1;

        goto label01;

     label54:
        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    boolean isText()
    {
        nu.xom.Text r0;

        r0 := @this: nu.xom.Text;

        return 1;
    }

    public final java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r1, $r5, $r6, $r9, $r10;
        java.lang.Class $r3;
        java.lang.String $r4, $r7, $r8, $r11;
        nu.xom.Text r2;

        r2 := @this: nu.xom.Text;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r7 = virtualinvoke r2.<nu.xom.Text: java.lang.String getValue()>();

        $r8 = staticinvoke <nu.xom.Text: java.lang.String escapeLineBreaksAndTruncate(java.lang.String)>($r7);

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }

    static java.lang.String escapeLineBreaksAndTruncate(java.lang.String)
    {
        char $c1;
        java.lang.StringBuffer $r3;
        int $i0, i2, i3, $i4;
        java.lang.String $r1, r2;
        boolean z0, $z1;

        r2 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        i2 = $i0;

        if $i0 <= 40 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        z0 = $z1;

        if $i0 <= 40 goto label03;

        i2 = 35;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, 35);

     label03:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>(i2);

        i3 = 0;

     label04:
        if i3 >= i2 goto label10;

        $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c1;

        tableswitch($i4)
        {
            case 9: goto label07;
            case 10: goto label05;
            case 11: goto label08;
            case 12: goto label08;
            case 13: goto label06;
            default: goto label08;
        };

     label05:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\n");

        goto label09;

     label06:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\r");

        goto label09;

     label07:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\t");

        goto label09;

     label08:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label09:
        i3 = i3 + 1;

        goto label04;

     label10:
        if z0 == 0 goto label11;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

     label11:
        $r1 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    boolean isCDATASection()
    {
        nu.xom.Text r0;

        r0 := @this: nu.xom.Text;

        return 0;
    }

    boolean isEmpty()
    {
        byte[] $r1;
        int $i0;
        nu.xom.Text r0;
        boolean $z0;

        r0 := @this: nu.xom.Text;

        $r1 = r0.<nu.xom.Text: byte[] data>;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
