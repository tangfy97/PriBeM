public class com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner extends java.lang.Object implements com.hp.hpl.jena.reasoner.rulesys.RuleReasoner
{
    protected com.hp.hpl.jena.reasoner.ReasonerFactory factory;
    protected java.util.List rules;
    protected com.hp.hpl.jena.graph.Graph schemaGraph;
    protected boolean recordDerivations;
    boolean traceOn;
    protected static final boolean cachePreload;
    protected com.hp.hpl.jena.reasoner.InfGraph preload;
    protected com.hp.hpl.jena.rdf.model.Resource configuration;
    protected com.hp.hpl.jena.graph.Capabilities capabilities;

    public void <init>(java.util.List)
    {
        java.util.List r2;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;
        java.lang.NullPointerException $r3;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r2 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: java.util.List rules> = $r1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean recordDerivations> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean traceOn> = 0;

        if r2 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("null rules");

        throw $r3;

     label1:
        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: java.util.List rules> = r2;

        return;
    }

    public void <init>(com.hp.hpl.jena.reasoner.ReasonerFactory)
    {
        com.hp.hpl.jena.reasoner.ReasonerFactory r2;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.ReasonerFactory;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: void <init>(java.util.List,com.hp.hpl.jena.reasoner.ReasonerFactory)>($r1, r2);

        return;
    }

    public void <init>(com.hp.hpl.jena.reasoner.ReasonerFactory, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.reasoner.ReasonerFactory r2;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;
        com.hp.hpl.jena.rdf.model.Resource r3;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.ReasonerFactory;

        r3 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: void <init>(java.util.List,com.hp.hpl.jena.reasoner.ReasonerFactory)>($r1, r2);

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.rdf.model.Resource configuration> = r3;

        if r3 == null goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: void loadConfiguration(com.hp.hpl.jena.rdf.model.Resource)>(r3);

     label1:
        return;
    }

    protected void loadConfiguration(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r5;
        com.hp.hpl.jena.rdf.model.StmtIterator $r1;
        com.hp.hpl.jena.rdf.model.Property $r4;
        com.hp.hpl.jena.rdf.model.Statement $r2;
        com.hp.hpl.jena.rdf.model.Resource r0;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r3;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

     label1:
        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        $r5 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        virtualinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean doSetRDFNodeParameter(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r4, $r5);

        goto label1;

     label2:
        return;
    }

    public void <init>(java.util.List, com.hp.hpl.jena.reasoner.ReasonerFactory)
    {
        java.util.List r1;
        com.hp.hpl.jena.reasoner.ReasonerFactory r2;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: com.hp.hpl.jena.reasoner.ReasonerFactory;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: void <init>(java.util.List)>(r1);

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.reasoner.ReasonerFactory factory> = r2;

        return;
    }

    protected void <init>(java.util.List, com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.reasoner.ReasonerFactory)
    {
        java.util.List r1;
        com.hp.hpl.jena.reasoner.ReasonerFactory r2;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;
        com.hp.hpl.jena.graph.Graph r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r1 := @parameter0: java.util.List;

        r3 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter2: com.hp.hpl.jena.reasoner.ReasonerFactory;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: void <init>(java.util.List,com.hp.hpl.jena.reasoner.ReasonerFactory)>(r1, r2);

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.graph.Graph schemaGraph> = r3;

        return;
    }

    public com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner addRules(java.util.List)
    {
        java.util.List $r2, r3;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r1;
        java.util.ArrayList $r0;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r3 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: java.util.List rules>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>(r3);

        virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: void setRules(java.util.List)>($r0);

        return r1;
    }

    public com.hp.hpl.jena.rdf.model.Model getReasonerCapabilities()
    {
        com.hp.hpl.jena.reasoner.ReasonerFactory $r1, $r2;
        com.hp.hpl.jena.rdf.model.Model $r3;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.reasoner.ReasonerFactory factory>;

        if $r1 == null goto label1;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.reasoner.ReasonerFactory factory>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.reasoner.ReasonerFactory: com.hp.hpl.jena.rdf.model.Model getCapabilities()>();

        return $r3;

     label1:
        return null;
    }

    public com.hp.hpl.jena.graph.Graph getBoundSchema()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.graph.Graph schemaGraph>;

        return $r1;
    }

    public void addDescription(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r8;
        com.hp.hpl.jena.rdf.model.Statement $r4;
        com.hp.hpl.jena.rdf.model.Resource $r1, $r2, r6;
        com.hp.hpl.jena.rdf.model.StmtIterator $r3;
        com.hp.hpl.jena.rdf.model.Property $r7;
        com.hp.hpl.jena.rdf.model.Model r5;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r5 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r6 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.rdf.model.Resource configuration>;

        if $r1 == null goto label2;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.rdf.model.Resource configuration>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

     label1:
        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r7 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        $r8 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model add(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r6, $r7, $r8);

        goto label1;

     label2:
        return;
    }

    public boolean supportsProperty(com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.reasoner.ReasonerFactory $r1, $r2, $r4;
        com.hp.hpl.jena.rdf.model.Resource $r6;
        com.hp.hpl.jena.rdf.model.Property r7, $r8;
        com.hp.hpl.jena.rdf.model.Model $r3;
        java.lang.String $r5;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r7 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.reasoner.ReasonerFactory factory>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.reasoner.ReasonerFactory factory>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.reasoner.ReasonerFactory: com.hp.hpl.jena.rdf.model.Model getCapabilities()>();

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.reasoner.ReasonerFactory factory>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.reasoner.ReasonerFactory: java.lang.String getURI()>();

        $r6 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Resource getResource(java.lang.String)>($r5);

        $r8 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property supportsP>;

        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Model: boolean contains(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r6, $r8, r7);

        return $z0;
    }

    public com.hp.hpl.jena.reasoner.Reasoner bindSchema(com.hp.hpl.jena.graph.Graph) throws com.hp.hpl.jena.reasoner.ReasonerException
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph $r2;
        com.hp.hpl.jena.reasoner.ReasonerFactory $r7;
        com.hp.hpl.jena.reasoner.InfGraph $r4;
        java.util.List $r3, $r8;
        com.hp.hpl.jena.reasoner.ReasonerException $r9;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0, $r6;
        com.hp.hpl.jena.graph.Graph $r1, r5;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r5 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.graph.Graph schemaGraph>;

        if $r1 == null goto label1;

        $r9 = new com.hp.hpl.jena.reasoner.ReasonerException;

        specialinvoke $r9.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>("Can only bind one schema at a time to an OWLRuleReasoner");

        throw $r9;

     label1:
        $r2 = new com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: java.util.List rules>;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph getPreload()>();

        specialinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,java.util.List,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>(r0, $r3, $r4, r5);

        virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void prepare()>();

        $r6 = new com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: java.util.List rules>;

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.reasoner.ReasonerFactory factory>;

        specialinvoke $r6.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: void <init>(java.util.List,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.reasoner.ReasonerFactory)>($r8, $r2, $r7);

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean recordDerivations>;

        virtualinvoke $r6.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: void setDerivationLogging(boolean)>($z0);

        $z1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean traceOn>;

        virtualinvoke $r6.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: void setTraceOn(boolean)>($z1);

        return $r6;
    }

    public com.hp.hpl.jena.reasoner.Reasoner bindSchema(com.hp.hpl.jena.rdf.model.Model) throws com.hp.hpl.jena.reasoner.ReasonerException
    {
        com.hp.hpl.jena.reasoner.Reasoner $r3;
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;
        com.hp.hpl.jena.graph.Graph $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.reasoner.Reasoner bindSchema(com.hp.hpl.jena.graph.Graph)>($r2);

        return $r3;
    }

    public com.hp.hpl.jena.reasoner.InfGraph bind(com.hp.hpl.jena.graph.Graph) throws com.hp.hpl.jena.reasoner.ReasonerException
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph $r3;
        com.hp.hpl.jena.reasoner.InfGraph $r6;
        java.util.List $r4;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;
        com.hp.hpl.jena.graph.Graph $r1, $r2, r5;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r5 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.graph.Graph schemaGraph>;

        if $r1 != null goto label1;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph getPreload()>();

        goto label2;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.graph.Graph schemaGraph>;

        $r6 = (com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph) $r2;

     label2:
        $r3 = new com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: java.util.List rules>;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,java.util.List,com.hp.hpl.jena.graph.Graph)>(r0, $r4, $r6);

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean recordDerivations>;

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setDerivationLogging(boolean)>($z0);

        $z1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean traceOn>;

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setTraceOn(boolean)>($z1);

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void rebind(com.hp.hpl.jena.graph.Graph)>(r5);

        return $r3;
    }

    public void setRules(java.util.List)
    {
        java.util.List r1;
        com.hp.hpl.jena.reasoner.ReasonerException $r3;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;
        com.hp.hpl.jena.graph.Graph $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r1 := @parameter0: java.util.List;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: java.util.List rules> = r1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph preload> = null;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.graph.Graph schemaGraph>;

        if $r2 == null goto label1;

        $r3 = new com.hp.hpl.jena.reasoner.ReasonerException;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>("Cannot change the rule set for a bound rule reasoner.\nSet the rules before calling bindSchema");

        throw $r3;

     label1:
        return;
    }

    public java.util.List getRules()
    {
        java.util.List $r1;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: java.util.List rules>;

        return $r1;
    }

    public static java.util.List loadRules(java.lang.String)
    {
        java.lang.Throwable $r9;
        com.hp.hpl.jena.shared.WrappedIOException $r3;
        java.util.List $r2;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String r0, $r8;
        com.hp.hpl.jena.reasoner.ReasonerException $r4;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser $r1;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser loadRuleParserFromResourceFile(java.lang.String)>(r0);

        $r2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: java.util.List parseRules(com.hp.hpl.jena.reasoner.rulesys.Rule$Parser)>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.hp.hpl.jena.reasoner.ReasonerException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t load rules file: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r3.<com.hp.hpl.jena.shared.WrappedIOException: java.lang.Throwable getCause()>();

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r9);

        throw $r4;

        catch com.hp.hpl.jena.shared.WrappedIOException from label1 to label2 with label3;
    }

    public synchronized void tablePredicate(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node[] $r3;
        com.hp.hpl.jena.graph.Node r4;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r0;
        java.util.List $r7;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r1, $r5;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r2;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r6;

        r6 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r4 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r1 = newarray (com.hp.hpl.jena.reasoner.rulesys.ClauseEntry)[1];

        $r2 = new com.hp.hpl.jena.reasoner.rulesys.Functor;

        $r3 = newarray (com.hp.hpl.jena.graph.Node)[1];

        $r3[0] = r4;

        specialinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.Functor: void <init>(java.lang.String,com.hp.hpl.jena.graph.Node[])>("table", $r3);

        $r1[0] = $r2;

        $r5 = newarray (com.hp.hpl.jena.reasoner.rulesys.ClauseEntry)[0];

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[],com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[])>("", $r1, $r5);

        $r7 = r6.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: java.util.List rules>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r0);

        return;
    }

    protected synchronized com.hp.hpl.jena.reasoner.InfGraph getPreload()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph $r3;
        java.util.List $r4;
        com.hp.hpl.jena.reasoner.InfGraph $r1, $r2, $r5;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph preload>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: java.util.List rules>;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,java.util.List,com.hp.hpl.jena.graph.Graph)>(r0, $r4, null);

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph preload> = $r3;

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph preload>;

        interfaceinvoke $r5.<com.hp.hpl.jena.reasoner.InfGraph: void prepare()>();

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph preload>;

        return $r2;
    }

    public void setDerivationLogging(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean recordDerivations> = z0;

        return;
    }

    public void setTraceOn(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean traceOn> = z0;

        return;
    }

    public boolean isTraceOn()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean traceOn>;

        return $z0;
    }

    public void setParameter(com.hp.hpl.jena.rdf.model.Property, java.lang.Object)
    {
        com.hp.hpl.jena.reasoner.IllegalParameterException $r7;
        com.hp.hpl.jena.rdf.model.Resource $r3, $r4, $r6;
        com.hp.hpl.jena.rdf.model.Property r1;
        com.hp.hpl.jena.rdf.model.Model $r5;
        java.lang.Object r2;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r2 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean doSetParameter(com.hp.hpl.jena.rdf.model.Property,java.lang.Object)>(r1, r2);

        if $z0 != 0 goto label1;

        $r7 = new com.hp.hpl.jena.reasoner.IllegalParameterException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RuleReasoner does not recognize configuration parameter ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.hp.hpl.jena.reasoner.IllegalParameterException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label1:
        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.rdf.model.Resource configuration>;

        if $r3 != null goto label2;

        $r5 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Resource createResource()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.rdf.model.Resource configuration> = $r6;

     label2:
        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.rdf.model.Resource configuration>;

        staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: void updateParameter(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,java.lang.Object)>($r4, r1, r2);

        return;
    }

    protected boolean doSetRDFNodeParameter(com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r0;
        com.hp.hpl.jena.rdf.model.Resource $r6;
        com.hp.hpl.jena.rdf.model.Property r2;
        java.lang.Object $r5;
        java.lang.String $r3;
        com.hp.hpl.jena.rdf.model.Literal $r4;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = r0 instanceof com.hp.hpl.jena.rdf.model.Resource;

        if $z0 == 0 goto label1;

        $r6 = (com.hp.hpl.jena.rdf.model.Resource) r0;

        $z4 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean doSetResourceParameter(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Resource)>(r2, $r6);

        if $z4 != 0 goto label3;

     label1:
        $z1 = r0 instanceof com.hp.hpl.jena.rdf.model.Literal;

        if $z1 == 0 goto label2;

        $r4 = (com.hp.hpl.jena.rdf.model.Literal) r0;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Literal: java.lang.Object getValue()>();

        $z3 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean doSetParameter(com.hp.hpl.jena.rdf.model.Property,java.lang.Object)>(r2, $r5);

        if $z3 != 0 goto label3;

     label2:
        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.RDFNode: java.lang.String toString()>();

        $z2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean doSetParameter(com.hp.hpl.jena.rdf.model.Property,java.lang.Object)>(r2, $r3);

        if $z2 == 0 goto label4;

     label3:
        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        return $z5;
    }

    protected boolean doSetResourceParameter(com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;
        com.hp.hpl.jena.rdf.model.Resource r2;
        com.hp.hpl.jena.rdf.model.Property r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        return 0;
    }

    protected boolean doSetParameter(com.hp.hpl.jena.rdf.model.Property, java.lang.Object)
    {
        com.hp.hpl.jena.rdf.model.Property r0, $r1, $r2;
        java.lang.Object r4;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r3;
        boolean $z0, $z1, $z2, $z3;

        r3 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r4 := @parameter1: java.lang.Object;

        $r1 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property PROPderivationLogging>;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $z3 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: boolean convertBooleanPredicateArg(com.hp.hpl.jena.rdf.model.Property,java.lang.Object)>(r0, r4);

        r3.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean recordDerivations> = $z3;

        return 1;

     label1:
        $r2 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property PROPtraceOn>;

        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: boolean convertBooleanPredicateArg(com.hp.hpl.jena.rdf.model.Property,java.lang.Object)>(r0, r4);

        r3.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean traceOn> = $z2;

        return 1;

     label2:
        return 0;
    }

    public com.hp.hpl.jena.graph.Capabilities getGraphCapabilities()
    {
        com.hp.hpl.jena.reasoner.BaseInfGraph$InfCapabilities $r3;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner r0;
        com.hp.hpl.jena.graph.Capabilities $r1, $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.graph.Capabilities capabilities>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.reasoner.BaseInfGraph$InfCapabilities;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.BaseInfGraph$InfCapabilities: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.graph.Capabilities capabilities> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: com.hp.hpl.jena.graph.Capabilities capabilities>;

        return $r2;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean cachePreload> = 1;

        return;
    }
}
