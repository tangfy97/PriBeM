public class com.jmatio.types.MLStructure extends com.jmatio.types.MLArray
{
    private java.util.Set keys;
    private java.util.List mlStructArray;
    private int currentIndex;

    public void <init>(java.lang.String, int[])
    {
        com.jmatio.types.MLStructure r0;
        java.lang.String r1;
        int[] r2;

        r0 := @this: com.jmatio.types.MLStructure;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        specialinvoke r0.<com.jmatio.types.MLStructure: void <init>(java.lang.String,int[],int,int)>(r1, r2, 2, 0);

        return;
    }

    public void <init>(java.lang.String, int[], int, int)
    {
        java.util.ArrayList $r3;
        int[] r2;
        int i0, i1, $i2, $i3, $i4;
        com.jmatio.types.MLStructure r0;
        java.lang.String r1;
        java.util.LinkedHashSet $r4;

        r0 := @this: com.jmatio.types.MLStructure;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<com.jmatio.types.MLArray: void <init>(java.lang.String,int[],int,int)>(r1, r2, i0, i1);

        r0.<com.jmatio.types.MLStructure: int currentIndex> = 0;

        $r3 = new java.util.ArrayList;

        $i3 = r2[0];

        $i2 = r2[1];

        $i4 = $i3 * $i2;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i4);

        r0.<com.jmatio.types.MLStructure: java.util.List mlStructArray> = $r3;

        $r4 = new java.util.LinkedHashSet;

        specialinvoke $r4.<java.util.LinkedHashSet: void <init>()>();

        r0.<com.jmatio.types.MLStructure: java.util.Set keys> = $r4;

        return;
    }

    public void setField(java.lang.String, com.jmatio.types.MLArray)
    {
        com.jmatio.types.MLArray r2;
        int $i0;
        com.jmatio.types.MLStructure r0;
        java.lang.String r1;

        r0 := @this: com.jmatio.types.MLStructure;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLStructure: int currentIndex>;

        virtualinvoke r0.<com.jmatio.types.MLStructure: void setField(java.lang.String,com.jmatio.types.MLArray,int)>(r1, r2, $i0);

        return;
    }

    public void setField(java.lang.String, com.jmatio.types.MLArray, int, int)
    {
        com.jmatio.types.MLArray r2;
        int i0, i1, $i2;
        com.jmatio.types.MLStructure r0;
        java.lang.String r1;

        r0 := @this: com.jmatio.types.MLStructure;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.jmatio.types.MLArray;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = virtualinvoke r0.<com.jmatio.types.MLStructure: int getIndex(int,int)>(i0, i1);

        virtualinvoke r0.<com.jmatio.types.MLStructure: void setField(java.lang.String,com.jmatio.types.MLArray,int)>(r1, r2, $i2);

        return;
    }

    public void setField(java.lang.String, com.jmatio.types.MLArray, int)
    {
        java.util.Set $r2;
        java.util.LinkedHashMap $r4;
        java.util.List $r3, $r5, $r7, $r8;
        com.jmatio.types.MLArray r6;
        java.util.Map $r10;
        int i0, $i1;
        com.jmatio.types.MLStructure r0;
        java.lang.Object $r9;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLStructure;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: com.jmatio.types.MLArray;

        i0 := @parameter2: int;

        $r2 = r0.<com.jmatio.types.MLStructure: java.util.Set keys>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        r0.<com.jmatio.types.MLStructure: int currentIndex> = i0;

        $r3 = r0.<com.jmatio.types.MLStructure: java.util.List mlStructArray>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r7 = r0.<com.jmatio.types.MLStructure: java.util.List mlStructArray>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i1 > i0 goto label2;

     label1:
        $r5 = r0.<com.jmatio.types.MLStructure: java.util.List mlStructArray>;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(i0, $r4);

     label2:
        $r8 = r0.<com.jmatio.types.MLStructure: java.util.List mlStructArray>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i0);

        $r10 = (java.util.Map) $r9;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6);

        return;
    }

    public int getMaxFieldLenth()
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        int $i0, $i1, i2, $i3;
        com.jmatio.types.MLStructure r0;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLStructure;

        i2 = 0;

        $r1 = r0.<com.jmatio.types.MLStructure: java.util.Set keys>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i1 <= i2 goto label2;

        $i3 = virtualinvoke r4.<java.lang.String: int length()>();

        goto label3;

     label2:
        $i3 = i2;

     label3:
        i2 = $i3;

        goto label1;

     label4:
        $i0 = i2 + 1;

        return $i0;
    }

    public byte[] getKeySetToByteArray()
    {
        byte[] $r6, $r17;
        java.io.ByteArrayOutputStream $r0;
        java.io.DataOutputStream $r1;
        int $i0, $i1;
        com.jmatio.types.MLStructure r2;
        java.lang.String r8, $r10, $r16;
        boolean $z0;
        java.io.PrintStream $r13;
        java.util.Iterator $r5;
        java.util.Set $r4;
        java.io.IOException $r11;
        char[] r3, $r9;
        java.lang.Object $r7;
        java.lang.StringBuilder $r12, $r14, $r15;

        r2 := @this: com.jmatio.types.MLStructure;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r0);

        $i0 = virtualinvoke r2.<com.jmatio.types.MLStructure: int getMaxFieldLenth()>();

        r3 = newarray (char)[$i0];

     label1:
        $r4 = r2.<com.jmatio.types.MLStructure: java.util.Set keys>;

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        staticinvoke <java.util.Arrays: void fill(char[],char)>(r3, 0);

        $r9 = virtualinvoke r8.<java.lang.String: char[] toCharArray()>();

        $i1 = virtualinvoke r8.<java.lang.String: int length()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r3, 0, $i1);

        $r10 = new java.lang.String;

        specialinvoke $r10.<java.lang.String: void <init>(char[])>(r3);

        virtualinvoke $r1.<java.io.DataOutputStream: void writeBytes(java.lang.String)>($r10);

        goto label2;

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r13 = <java.lang.System: java.io.PrintStream err>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not write Structure key set to byte array: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r16);

        $r17 = newarray (byte)[0];

        return $r17;

     label5:
        $r6 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r6;

        catch java.io.IOException from label1 to label3 with label4;
    }

    public java.util.Collection getAllFields()
    {
        java.util.Iterator $r3;
        java.util.Collection $r6;
        java.util.ArrayList $r0;
        java.util.List $r2;
        java.util.Map r5;
        com.jmatio.types.MLStructure r1;
        java.lang.Object $r4;
        boolean $z0;

        r1 := @this: com.jmatio.types.MLStructure;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<com.jmatio.types.MLStructure: java.util.List mlStructArray>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>();

        virtualinvoke $r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r6);

        goto label1;

     label2:
        return $r0;
    }

    public java.util.Collection getFieldNames()
    {
        java.util.Set $r2;
        com.jmatio.types.MLStructure r1;
        java.util.LinkedHashSet $r0;

        r1 := @this: com.jmatio.types.MLStructure;

        $r0 = new java.util.LinkedHashSet;

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>();

        $r2 = r1.<com.jmatio.types.MLStructure: java.util.Set keys>;

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r2);

        return $r0;
    }

    public com.jmatio.types.MLArray getField(java.lang.String)
    {
        com.jmatio.types.MLArray $r2;
        int $i0;
        com.jmatio.types.MLStructure r0;
        java.lang.String r1;

        r0 := @this: com.jmatio.types.MLStructure;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<com.jmatio.types.MLStructure: int currentIndex>;

        $r2 = virtualinvoke r0.<com.jmatio.types.MLStructure: com.jmatio.types.MLArray getField(java.lang.String,int)>(r1, $i0);

        return $r2;
    }

    public com.jmatio.types.MLArray getField(java.lang.String, int, int)
    {
        com.jmatio.types.MLArray $r2;
        int i0, i1, $i2;
        com.jmatio.types.MLStructure r0;
        java.lang.String r1;

        r0 := @this: com.jmatio.types.MLStructure;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<com.jmatio.types.MLStructure: int getIndex(int,int)>(i0, i1);

        $r2 = virtualinvoke r0.<com.jmatio.types.MLStructure: com.jmatio.types.MLArray getField(java.lang.String,int)>(r1, $i2);

        return $r2;
    }

    public com.jmatio.types.MLArray getField(java.lang.String, int)
    {
        java.util.List $r1, $r2;
        com.jmatio.types.MLArray $r7;
        java.util.Map $r5;
        int i0;
        com.jmatio.types.MLStructure r0;
        java.lang.Object $r3, $r6;
        java.lang.String r4;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLStructure;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<com.jmatio.types.MLStructure: java.util.List mlStructArray>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.jmatio.types.MLStructure: java.util.List mlStructArray>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (java.util.Map) $r3;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r7 = (com.jmatio.types.MLArray) $r6;

        return $r7;
    }

    public java.lang.String contentToString()
    {
        com.jmatio.types.MLStructure r2;
        boolean $z0, $z1;
        java.util.Set $r12, $r21;
        com.jmatio.types.MLArray $r28;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8, $r9, $r10, $r16, $r17, $r18, $r19, $r24, $r25, $r26, $r27, $r29, $r30;
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r3, $r6, $r11, $r14, $r20, $r31, r32, r33;
        java.util.Iterator $r13, $r22;
        java.lang.Object $r15, $r23;

        r2 := @this: com.jmatio.types.MLStructure;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<com.jmatio.types.MLStructure: java.lang.String name>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = \n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $i0 = virtualinvoke r2.<com.jmatio.types.MLStructure: int getM()>();

        $i1 = virtualinvoke r2.<com.jmatio.types.MLStructure: int getN()>();

        $i2 = $i0 * $i1;

        if $i2 != 1 goto label3;

        $r21 = r2.<com.jmatio.types.MLStructure: java.util.Set keys>;

        $r22 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r32 = (java.lang.String) $r23;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r28 = virtualinvoke r2.<com.jmatio.types.MLStructure: com.jmatio.types.MLArray getField(java.lang.String)>(r32);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        goto label1;

     label2:
        goto label5;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $i3 = virtualinvoke r2.<com.jmatio.types.MLStructure: int getM()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $i4 = virtualinvoke r2.<com.jmatio.types.MLStructure: int getN()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" struct array with fields: \n");

        $r12 = r2.<com.jmatio.types.MLStructure: java.util.Set keys>;

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r15 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r33 = (java.lang.String) $r15;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        goto label4;

     label5:
        $r14 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r14;
    }
}
