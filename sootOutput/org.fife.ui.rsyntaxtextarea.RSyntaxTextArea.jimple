public class org.fife.ui.rsyntaxtextarea.RSyntaxTextArea extends org.fife.ui.rtextarea.RTextArea implements org.fife.ui.rsyntaxtextarea.SyntaxConstants
{
    public static final java.lang.String ANIMATE_BRACKET_MATCHING_PROPERTY;
    public static final java.lang.String ANTIALIAS_PROPERTY;
    public static final java.lang.String AUTO_INDENT_PROPERTY;
    public static final java.lang.String BRACKET_MATCHING_PROPERTY;
    public static final java.lang.String CLEAR_WHITESPACE_LINES_PROPERTY;
    public static final java.lang.String CLOSE_CURLY_BRACES_PROPERTY;
    public static final java.lang.String CLOSE_MARKUP_TAGS_PROPERTY;
    public static final java.lang.String CODE_FOLDING_PROPERTY;
    public static final java.lang.String EOL_VISIBLE_PROPERTY;
    public static final java.lang.String FOCUSABLE_TIPS_PROPERTY;
    public static final java.lang.String FRACTIONAL_FONTMETRICS_PROPERTY;
    public static final java.lang.String HIGHLIGHT_SECONDARY_LANGUAGES_PROPERTY;
    public static final java.lang.String HYPERLINKS_ENABLED_PROPERTY;
    public static final java.lang.String MARK_OCCURRENCES_PROPERTY;
    public static final java.lang.String MARKED_OCCURRENCES_CHANGED_PROPERTY;
    public static final java.lang.String PAINT_MATCHED_BRACKET_PAIR_PROPERTY;
    public static final java.lang.String PARSER_NOTICES_PROPERTY;
    public static final java.lang.String SYNTAX_SCHEME_PROPERTY;
    public static final java.lang.String SYNTAX_STYLE_PROPERTY;
    public static final java.lang.String TAB_LINE_COLOR_PROPERTY;
    public static final java.lang.String TAB_LINES_PROPERTY;
    public static final java.lang.String VISIBLE_WHITESPACE_PROPERTY;
    private static final java.awt.Color DEFAULT_BRACKET_MATCH_BG_COLOR;
    private static final java.awt.Color DEFAULT_BRACKET_MATCH_BORDER_COLOR;
    private static final java.awt.Color DEFAULT_SELECTION_COLOR;
    private static final java.lang.String MSG;
    private javax.swing.JMenu foldingMenu;
    private static org.fife.ui.rtextarea.RecordableTextAction toggleCurrentFoldAction;
    private static org.fife.ui.rtextarea.RecordableTextAction collapseAllCommentFoldsAction;
    private static org.fife.ui.rtextarea.RecordableTextAction collapseAllFoldsAction;
    private static org.fife.ui.rtextarea.RecordableTextAction expandAllFoldsAction;
    private java.lang.String syntaxStyleKey;
    private org.fife.ui.rsyntaxtextarea.SyntaxScheme syntaxScheme;
    private static org.fife.ui.rsyntaxtextarea.CodeTemplateManager codeTemplateManager;
    private static boolean templatesEnabled;
    private java.awt.Rectangle match;
    private java.awt.Rectangle dotRect;
    private java.awt.Color matchedBracketBGColor;
    private java.awt.Color matchedBracketBorderColor;
    private int lastBracketMatchPos;
    private boolean bracketMatchingEnabled;
    private boolean animateBracketMatching;
    private boolean paintMatchedBracketPair;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea$BracketMatchingTimer bracketRepaintTimer;
    private boolean autoIndentEnabled;
    private boolean closeCurlyBraces;
    private boolean closeMarkupTags;
    private boolean clearWhitespaceLines;
    private boolean whitespaceVisible;
    private boolean eolMarkersVisible;
    private boolean paintTabLines;
    private java.awt.Color tabLineColor;
    private boolean hyperlinksEnabled;
    private java.awt.Color hyperlinkFG;
    private int linkScanningMask;
    private boolean highlightSecondaryLanguages;
    private org.fife.ui.rsyntaxtextarea.RtfGenerator rtfGenerator;
    private org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport markOccurrencesSupport;
    private java.awt.Color markOccurrencesColor;
    private boolean paintMarkOccurrencesBorder;
    private java.awt.FontMetrics defaultFontMetrics;
    private org.fife.ui.rsyntaxtextarea.ParserManager parserManager;
    private boolean isScanningForLinks;
    private int hoveredOverLinkOffset;
    private org.fife.ui.rsyntaxtextarea.folding.FoldManager foldManager;
    private boolean useFocusableTips;
    private org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip focusableTip;
    private java.util.Map aaHints;
    private int lineHeight;
    private int maxAscent;
    private boolean fractionalFontMetricsEnabled;
    private java.awt.Color[] secondaryLanguageBackgrounds;
    static java.lang.Class class$org$fife$ui$rsyntaxtextarea$ActiveLineRangeListener;
    static java.lang.Class class$javax$swing$event$HyperlinkListener;

    public void <init>()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        specialinvoke r0.<org.fife.ui.rtextarea.RTextArea: void <init>()>();

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void init()>();

        return;
    }

    public void <init>(org.fife.ui.rsyntaxtextarea.RSyntaxDocument)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        specialinvoke r0.<org.fife.ui.rtextarea.RTextArea: void <init>(javax.swing.text.AbstractDocument)>(r1);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void init()>();

        return;
    }

    public void <init>(java.lang.String)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.lang.String r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.fife.ui.rtextarea.RTextArea: void <init>(java.lang.String)>(r1);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void init()>();

        return;
    }

    public void <init>(int, int)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int i0, i1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.fife.ui.rtextarea.RTextArea: void <init>(int,int)>(i0, i1);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void init()>();

        return;
    }

    public void <init>(java.lang.String, int, int)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.fife.ui.rtextarea.RTextArea: void <init>(java.lang.String,int,int)>(r1, i0, i1);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void init()>();

        return;
    }

    public void <init>(org.fife.ui.rsyntaxtextarea.RSyntaxDocument, java.lang.String, int, int)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r1;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int i0, i1;
        java.lang.String r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.fife.ui.rtextarea.RTextArea: void <init>(javax.swing.text.AbstractDocument,java.lang.String,int,int)>(r1, r2, i0, i1);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void init()>();

        return;
    }

    public void <init>(int)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int i0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter0: int;

        specialinvoke r0.<org.fife.ui.rtextarea.RTextArea: void <init>(int)>(i0);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void init()>();

        return;
    }

    public void addActiveLineRangeListener(org.fife.ui.rsyntaxtextarea.ActiveLineRangeListener)
    {
        org.fife.ui.rsyntaxtextarea.ActiveLineRangeListener r2;
        javax.swing.event.EventListenerList $r3;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.lang.Class $r1, $r4;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r2 := @parameter0: org.fife.ui.rsyntaxtextarea.ActiveLineRangeListener;

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.event.EventListenerList listenerList>;

        $r1 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$org$fife$ui$rsyntaxtextarea$ActiveLineRangeListener>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$(java.lang.String)>("org.fife.ui.rsyntaxtextarea.ActiveLineRangeListener");

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$org$fife$ui$rsyntaxtextarea$ActiveLineRangeListener> = $r4;

        goto label2;

     label1:
        $r4 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$org$fife$ui$rsyntaxtextarea$ActiveLineRangeListener>;

     label2:
        virtualinvoke $r3.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>($r4, r2);

        return;
    }

    public void addHyperlinkListener(javax.swing.event.HyperlinkListener)
    {
        javax.swing.event.HyperlinkListener r2;
        javax.swing.event.EventListenerList $r3;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.lang.Class $r1, $r4;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r2 := @parameter0: javax.swing.event.HyperlinkListener;

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.event.EventListenerList listenerList>;

        $r1 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$javax$swing$event$HyperlinkListener>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$(java.lang.String)>("javax.swing.event.HyperlinkListener");

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$javax$swing$event$HyperlinkListener> = $r4;

        goto label2;

     label1:
        $r4 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$javax$swing$event$HyperlinkListener>;

     label2:
        virtualinvoke $r3.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>($r4, r2);

        return;
    }

    public void addNotify()
    {
        org.fife.ui.rsyntaxtextarea.ParserManager $r3, $r4;
        java.awt.Graphics2D $r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Graphics $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        specialinvoke r0.<org.fife.ui.rtextarea.RTextArea: void addNotify()>();

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Graphics getGraphics()>();

        $r2 = specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Graphics2D getGraphics2D(java.awt.Graphics)>($r1);

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void refreshFontMetrics(java.awt.Graphics2D)>($r2);

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        if $r3 == null goto label1;

        $r4 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        virtualinvoke $r4.<org.fife.ui.rsyntaxtextarea.ParserManager: void restartParsing()>();

     label1:
        return;
    }

    public void addParser(org.fife.ui.rsyntaxtextarea.parser.Parser)
    {
        org.fife.ui.rsyntaxtextarea.ParserManager $r1, $r3, $r4;
        org.fife.ui.rsyntaxtextarea.parser.Parser r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r2 := @parameter0: org.fife.ui.rsyntaxtextarea.parser.Parser;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        if $r1 != null goto label1;

        $r4 = new org.fife.ui.rsyntaxtextarea.ParserManager;

        specialinvoke $r4.<org.fife.ui.rsyntaxtextarea.ParserManager: void <init>(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea)>(r0);

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager> = $r4;

     label1:
        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        virtualinvoke $r3.<org.fife.ui.rsyntaxtextarea.ParserManager: void addParser(org.fife.ui.rsyntaxtextarea.parser.Parser)>(r2);

        return;
    }

    private void calculateLineHeight()
    {
        org.fife.ui.rsyntaxtextarea.Style $r5;
        org.fife.ui.rsyntaxtextarea.SyntaxScheme $r1, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.awt.Font $r2, $r6, $r7;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.FontMetrics $r3, $r8;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int maxAscent> = 0;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int lineHeight> = 0;

        i9 = 0;

     label1:
        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.SyntaxScheme syntaxScheme>;

        $i0 = virtualinvoke $r1.<org.fife.ui.rsyntaxtextarea.SyntaxScheme: int getStyleCount()>();

        if i9 >= $i0 goto label4;

        $r4 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.SyntaxScheme syntaxScheme>;

        $r5 = virtualinvoke $r4.<org.fife.ui.rsyntaxtextarea.SyntaxScheme: org.fife.ui.rsyntaxtextarea.Style getStyle(int)>(i9);

        if $r5 == null goto label3;

        $r6 = $r5.<org.fife.ui.rsyntaxtextarea.Style: java.awt.Font font>;

        if $r6 == null goto label3;

        $r7 = $r5.<org.fife.ui.rsyntaxtextarea.Style: java.awt.Font font>;

        $r8 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r7);

        $i5 = virtualinvoke $r8.<java.awt.FontMetrics: int getHeight()>();

        $i6 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int lineHeight>;

        if $i5 <= $i6 goto label2;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int lineHeight> = $i5;

     label2:
        $i7 = virtualinvoke $r8.<java.awt.FontMetrics: int getMaxAscent()>();

        $i8 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int maxAscent>;

        if $i7 <= $i8 goto label3;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int maxAscent> = $i7;

     label3:
        i9 = i9 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Font getFont()>();

        $r3 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r2);

        $i1 = virtualinvoke $r3.<java.awt.FontMetrics: int getHeight()>();

        $i2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int lineHeight>;

        if $i1 <= $i2 goto label5;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int lineHeight> = $i1;

     label5:
        $i3 = virtualinvoke $r3.<java.awt.FontMetrics: int getMaxAscent()>();

        $i4 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int maxAscent>;

        if $i3 <= $i4 goto label6;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int maxAscent> = $i3;

     label6:
        return;
    }

    public void clearParsers()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        org.fife.ui.rsyntaxtextarea.ParserManager $r1, $r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        if $r1 == null goto label1;

        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.ParserManager: void clearParsers()>();

     label1:
        return;
    }

    private org.fife.ui.rsyntaxtextarea.Token cloneTokenList(org.fife.ui.rsyntaxtextarea.Token)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r3;
        org.fife.ui.rsyntaxtextarea.DefaultToken $r0, $r2, r5;
        org.fife.ui.rsyntaxtextarea.Token $r1, r4;

        r3 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r4 := @parameter0: org.fife.ui.rsyntaxtextarea.Token;

        if r4 != null goto label1;

        return null;

     label1:
        $r0 = new org.fife.ui.rsyntaxtextarea.DefaultToken;

        specialinvoke $r0.<org.fife.ui.rsyntaxtextarea.DefaultToken: void <init>()>();

        virtualinvoke $r0.<org.fife.ui.rsyntaxtextarea.Token: void copyFrom(org.fife.ui.rsyntaxtextarea.Token)>(r4);

        r5 = $r0;

     label2:
        $r1 = virtualinvoke r4.<org.fife.ui.rsyntaxtextarea.Token: org.fife.ui.rsyntaxtextarea.Token getNextToken()>();

        r4 = $r1;

        if $r1 == null goto label3;

        $r2 = new org.fife.ui.rsyntaxtextarea.DefaultToken;

        specialinvoke $r2.<org.fife.ui.rsyntaxtextarea.DefaultToken: void <init>()>();

        virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.Token: void copyFrom(org.fife.ui.rsyntaxtextarea.Token)>($r1);

        virtualinvoke r5.<org.fife.ui.rsyntaxtextarea.Token: void setNextToken(org.fife.ui.rsyntaxtextarea.Token)>($r2);

        r5 = $r2;

        goto label2;

     label3:
        return $r0;
    }

    protected void configurePopupMenu(javax.swing.JPopupMenu)
    {
        javax.swing.JPopupMenu r1;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int $i0;
        javax.swing.JMenu $r2, $r4;
        org.fife.ui.rsyntaxtextarea.folding.FoldManager $r3;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter0: javax.swing.JPopupMenu;

        specialinvoke r0.<org.fife.ui.rtextarea.RTextArea: void configurePopupMenu(javax.swing.JPopupMenu)>(r1);

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<javax.swing.JPopupMenu: int getComponentCount()>();

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.JMenu foldingMenu>;

        if $r2 == null goto label1;

        $r4 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.JMenu foldingMenu>;

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.folding.FoldManager foldManager>;

        $z0 = virtualinvoke $r3.<org.fife.ui.rsyntaxtextarea.folding.FoldManager: boolean isCodeFoldingSupportedAndEnabled()>();

        virtualinvoke $r4.<javax.swing.JMenu: void setEnabled(boolean)>($z0);

     label1:
        return;
    }

    public void copyAsRtf()
    {
        java.awt.Color $r9, $r10;
        byte[] $r7;
        java.lang.IllegalStateException $r14;
        org.fife.ui.rsyntaxtextarea.RtfTransferable $r19;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        java.lang.SecurityException $r16;
        java.lang.String $r6, $r11, $r12;
        boolean $z0, $z1, $z2;
        java.awt.datatransfer.Clipboard $r3;
        org.fife.ui.rsyntaxtextarea.RtfGenerator $r4;
        java.awt.Font $r8;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        char $c5;
        javax.swing.LookAndFeel $r15, $r17;
        java.lang.SecurityManager $r1;
        char[] $r13;
        org.fife.ui.rsyntaxtextarea.Token r18;
        java.awt.Toolkit $r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $i0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getSelectionStart()>();

        $i1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getSelectionEnd()>();

        if $i0 != $i1 goto label01;

        return;

     label01:
        $r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r1 == null goto label05;

     label02:
        virtualinvoke $r1.<java.lang.SecurityManager: void checkSystemClipboardAccess()>();

     label03:
        goto label05;

     label04:
        $r16 := @caughtexception;

        $r17 = staticinvoke <javax.swing.UIManager: javax.swing.LookAndFeel getLookAndFeel()>();

        virtualinvoke $r17.<javax.swing.LookAndFeel: void provideErrorFeedback(java.awt.Component)>(null);

        return;

     label05:
        $r2 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r3 = virtualinvoke $r2.<java.awt.Toolkit: java.awt.datatransfer.Clipboard getSystemClipboard()>();

        $r4 = specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.RtfGenerator getRTFGenerator()>();

        r18 = specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.Token getTokenListFor(int,int)>($i0, $i1);

     label06:
        if r18 == null goto label10;

        $z0 = virtualinvoke r18.<org.fife.ui.rsyntaxtextarea.Token: boolean isPaintable()>();

        if $z0 == 0 goto label09;

        $i2 = r18.<org.fife.ui.rsyntaxtextarea.Token: int textCount>;

        if $i2 != 1 goto label07;

        $r13 = r18.<org.fife.ui.rsyntaxtextarea.Token: char[] text>;

        $i4 = r18.<org.fife.ui.rsyntaxtextarea.Token: int textOffset>;

        $c5 = $r13[$i4];

        $i6 = (int) $c5;

        if $i6 != 10 goto label07;

        virtualinvoke $r4.<org.fife.ui.rsyntaxtextarea.RtfGenerator: void appendNewline()>();

        goto label09;

     label07:
        $i3 = r18.<org.fife.ui.rsyntaxtextarea.Token: int type>;

        $r8 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Font getFontForTokenType(int)>($i3);

        $r9 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color getBackgroundForToken(org.fife.ui.rsyntaxtextarea.Token)>(r18);

        $z1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean getUnderlineForToken(org.fife.ui.rsyntaxtextarea.Token)>(r18);

        $z2 = virtualinvoke r18.<org.fife.ui.rsyntaxtextarea.Token: boolean isWhitespace()>();

        if $z2 == 0 goto label08;

        $r12 = virtualinvoke r18.<org.fife.ui.rsyntaxtextarea.Token: java.lang.String getLexeme()>();

        virtualinvoke $r4.<org.fife.ui.rsyntaxtextarea.RtfGenerator: void appendToDocNoFG(java.lang.String,java.awt.Font,java.awt.Color,boolean)>($r12, $r8, $r9, $z1);

        goto label09;

     label08:
        $r10 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color getForegroundForToken(org.fife.ui.rsyntaxtextarea.Token)>(r18);

        $r11 = virtualinvoke r18.<org.fife.ui.rsyntaxtextarea.Token: java.lang.String getLexeme()>();

        virtualinvoke $r4.<org.fife.ui.rsyntaxtextarea.RtfGenerator: void appendToDoc(java.lang.String,java.awt.Font,java.awt.Color,java.awt.Color,boolean)>($r11, $r8, $r10, $r9, $z1);

     label09:
        r18 = virtualinvoke r18.<org.fife.ui.rsyntaxtextarea.Token: org.fife.ui.rsyntaxtextarea.Token getNextToken()>();

        goto label06;

     label10:
        $r19 = new org.fife.ui.rsyntaxtextarea.RtfTransferable;

        $r6 = virtualinvoke $r4.<org.fife.ui.rsyntaxtextarea.RtfGenerator: java.lang.String getRtf()>();

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r19.<org.fife.ui.rsyntaxtextarea.RtfTransferable: void <init>(byte[])>($r7);

     label11:
        virtualinvoke $r3.<java.awt.datatransfer.Clipboard: void setContents(java.awt.datatransfer.Transferable,java.awt.datatransfer.ClipboardOwner)>($r19, null);

     label12:
        goto label14;

     label13:
        $r14 := @caughtexception;

        $r15 = staticinvoke <javax.swing.UIManager: javax.swing.LookAndFeel getLookAndFeel()>();

        virtualinvoke $r15.<javax.swing.LookAndFeel: void provideErrorFeedback(java.awt.Component)>(null);

        return;

     label14:
        return;

        catch java.lang.SecurityException from label02 to label03 with label04;
        catch java.lang.IllegalStateException from label11 to label12 with label13;
    }

    protected javax.swing.text.Document createDefaultModel()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r1;
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument $r0;

        r1 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r0 = new org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        specialinvoke $r0.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void <init>(java.lang.String)>("text/plain");

        return $r0;
    }

    protected org.fife.ui.rtextarea.RTextAreaBase$RTAMouseListener createMouseListener()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r1;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea$RSyntaxTextAreaMutableCaretEvent $r0;

        r1 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r0 = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea$RSyntaxTextAreaMutableCaretEvent;

        specialinvoke $r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea$RSyntaxTextAreaMutableCaretEvent: void <init>(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea,org.fife.ui.rtextarea.RTextArea)>(r1, r1);

        return $r0;
    }

    protected javax.swing.JPopupMenu createPopupMenu()
    {
        java.util.ResourceBundle $r2;
        javax.swing.JMenuItem $r7, $r10, $r13, $r16;
        java.lang.String $r4;
        javax.swing.JPopupMenu $r1;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        javax.swing.JMenu $r3, $r6, $r9, $r12, $r15, $r17;
        org.fife.ui.rtextarea.RecordableTextAction $r5, $r8, $r11, $r14;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = specialinvoke r0.<org.fife.ui.rtextarea.RTextArea: javax.swing.JPopupMenu createPopupMenu()>();

        virtualinvoke $r1.<javax.swing.JPopupMenu: void addSeparator()>();

        $r2 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>("org.fife.ui.rsyntaxtextarea.RSyntaxTextArea");

        $r3 = new javax.swing.JMenu;

        $r4 = virtualinvoke $r2.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("ContextMenu.Folding");

        specialinvoke $r3.<javax.swing.JMenu: void <init>(java.lang.String)>($r4);

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.JMenu foldingMenu> = $r3;

        $r6 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.JMenu foldingMenu>;

        $r5 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rtextarea.RecordableTextAction toggleCurrentFoldAction>;

        $r7 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.JMenuItem createPopupMenuItem(javax.swing.Action)>($r5);

        virtualinvoke $r6.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($r7);

        $r9 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.JMenu foldingMenu>;

        $r8 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rtextarea.RecordableTextAction collapseAllCommentFoldsAction>;

        $r10 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.JMenuItem createPopupMenuItem(javax.swing.Action)>($r8);

        virtualinvoke $r9.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($r10);

        $r12 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.JMenu foldingMenu>;

        $r11 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rtextarea.RecordableTextAction collapseAllFoldsAction>;

        $r13 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.JMenuItem createPopupMenuItem(javax.swing.Action)>($r11);

        virtualinvoke $r12.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($r13);

        $r15 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.JMenu foldingMenu>;

        $r14 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rtextarea.RecordableTextAction expandAllFoldsAction>;

        $r16 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.JMenuItem createPopupMenuItem(javax.swing.Action)>($r14);

        virtualinvoke $r15.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($r16);

        $r17 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.JMenu foldingMenu>;

        virtualinvoke $r1.<javax.swing.JPopupMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($r17);

        return $r1;
    }

    private static void createRstaPopupMenuActions()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaEditorKit$ExpandAllFoldsAction $r6;
        java.util.ResourceBundle $r0;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaEditorKit$ToggleCurrentFoldAction $r1;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaEditorKit$CollapseAllFoldsAction $r5;
        org.fife.ui.rtextarea.RecordableTextAction $r2, $r4;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaEditorKit$CollapseAllCommentFoldsAction $r3;

        $r0 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>("org.fife.ui.rsyntaxtextarea.RSyntaxTextArea");

        $r1 = new org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaEditorKit$ToggleCurrentFoldAction;

        specialinvoke $r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaEditorKit$ToggleCurrentFoldAction: void <init>()>();

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rtextarea.RecordableTextAction toggleCurrentFoldAction> = $r1;

        $r2 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rtextarea.RecordableTextAction toggleCurrentFoldAction>;

        virtualinvoke $r2.<org.fife.ui.rtextarea.RecordableTextAction: void setProperties(java.util.ResourceBundle,java.lang.String)>($r0, "Action.ToggleCurrentFold");

        $r3 = new org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaEditorKit$CollapseAllCommentFoldsAction;

        specialinvoke $r3.<org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaEditorKit$CollapseAllCommentFoldsAction: void <init>()>();

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rtextarea.RecordableTextAction collapseAllCommentFoldsAction> = $r3;

        $r4 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rtextarea.RecordableTextAction collapseAllCommentFoldsAction>;

        virtualinvoke $r4.<org.fife.ui.rtextarea.RecordableTextAction: void setProperties(java.util.ResourceBundle,java.lang.String)>($r0, "Action.CollapseCommentFolds");

        $r5 = new org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaEditorKit$CollapseAllFoldsAction;

        specialinvoke $r5.<org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaEditorKit$CollapseAllFoldsAction: void <init>(boolean)>(1);

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rtextarea.RecordableTextAction collapseAllFoldsAction> = $r5;

        $r6 = new org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaEditorKit$ExpandAllFoldsAction;

        specialinvoke $r6.<org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaEditorKit$ExpandAllFoldsAction: void <init>(boolean)>(1);

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rtextarea.RecordableTextAction expandAllFoldsAction> = $r6;

        return;
    }

    protected org.fife.ui.rtextarea.RTextAreaUI createRTextAreaUI()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r1;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaUI $r0;

        r1 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r0 = new org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaUI;

        specialinvoke $r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaUI: void <init>(javax.swing.JComponent)>(r1);

        return $r0;
    }

    protected final void doBracketMatching()
    {
        java.awt.Rectangle $r1, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12;
        int $i0, $i1, $i2, $i3, $i5, $i7;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea$BracketMatchingTimer $r2, $r8;
        boolean $z0, $z1;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        javax.swing.text.BadLocationException $r13;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle match>;

        if $r1 == null goto label1;

        $r10 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle match>;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint(java.awt.Rectangle)>($r10);

        $r11 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle dotRect>;

        if $r11 == null goto label1;

        $r12 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle dotRect>;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint(java.awt.Rectangle)>($r12);

     label1:
        $i3 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int getMatchingBracketPosition(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea)>(r0);

        $i5 = (int) -1;

        if $i3 <= $i5 goto label8;

        $i0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int lastBracketMatchPos>;

        if $i3 == $i0 goto label8;

     label2:
        $r3 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle modelToView(int)>($i3);

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle match> = $r3;

        $r4 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle match>;

        if $r4 == null goto label6;

        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean getPaintMatchedBracketPair()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getCaretPosition()>();

        $i2 = $i1 - 1;

        $r9 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle modelToView(int)>($i2);

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle dotRect> = $r9;

        goto label4;

     label3:
        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle dotRect> = null;

     label4:
        $z1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean getAnimateBracketMatching()>();

        if $z1 == 0 goto label5;

        $r8 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea$BracketMatchingTimer bracketRepaintTimer>;

        virtualinvoke $r8.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea$BracketMatchingTimer: void restart()>();

     label5:
        $r5 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle match>;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint(java.awt.Rectangle)>($r5);

        $r6 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle dotRect>;

        if $r6 == null goto label6;

        $r7 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle dotRect>;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint(java.awt.Rectangle)>($r7);

     label6:
        goto label9;

     label7:
        $r13 := @caughtexception;

        virtualinvoke $r13.<javax.swing.text.BadLocationException: void printStackTrace()>();

        goto label9;

     label8:
        $i7 = (int) -1;

        if $i3 != $i7 goto label9;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle match> = null;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle dotRect> = null;

        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea$BracketMatchingTimer bracketRepaintTimer>;

        virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea$BracketMatchingTimer: void stop()>();

     label9:
        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int lastBracketMatchPos> = $i3;

        return;

        catch javax.swing.text.BadLocationException from label2 to label6 with label7;
    }

    protected void fireCaretUpdate(javax.swing.event.CaretEvent)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        javax.swing.event.CaretEvent r1;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter0: javax.swing.event.CaretEvent;

        specialinvoke r0.<org.fife.ui.rtextarea.RTextArea: void fireCaretUpdate(javax.swing.event.CaretEvent)>(r1);

        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean isBracketMatchingEnabled()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void doBracketMatching()>();

     label1:
        return;
    }

    private void fireActiveLineRangeEvent(int, int)
    {
        java.lang.Object[] $r2;
        org.fife.ui.rsyntaxtextarea.ActiveLineRangeEvent r8, $r10;
        org.fife.ui.rsyntaxtextarea.ActiveLineRangeListener $r6;
        javax.swing.event.EventListenerList $r1;
        int $i0, $i1, i2, i3, i4, $i6;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.lang.Class $r3, $r9;
        java.lang.Object $r4, $r5;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        r8 = null;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.event.EventListenerList listenerList>;

        $r2 = virtualinvoke $r1.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>();

        $i0 = lengthof $r2;

        i4 = $i0 - 2;

     label1:
        if i4 < 0 goto label6;

        $r4 = $r2[i4];

        $r3 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$org$fife$ui$rsyntaxtextarea$ActiveLineRangeListener>;

        if $r3 != null goto label2;

        $r9 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$(java.lang.String)>("org.fife.ui.rsyntaxtextarea.ActiveLineRangeListener");

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$org$fife$ui$rsyntaxtextarea$ActiveLineRangeListener> = $r9;

        goto label3;

     label2:
        $r9 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$org$fife$ui$rsyntaxtextarea$ActiveLineRangeListener>;

     label3:
        if $r4 != $r9 goto label5;

        if r8 != null goto label4;

        $r10 = new org.fife.ui.rsyntaxtextarea.ActiveLineRangeEvent;

        specialinvoke $r10.<org.fife.ui.rsyntaxtextarea.ActiveLineRangeEvent: void <init>(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea,int,int)>(r0, i2, i3);

        r8 = $r10;

     label4:
        $i1 = i4 + 1;

        $r5 = $r2[$i1];

        $r6 = (org.fife.ui.rsyntaxtextarea.ActiveLineRangeListener) $r5;

        interfaceinvoke $r6.<org.fife.ui.rsyntaxtextarea.ActiveLineRangeListener: void activeLineRangeChanged(org.fife.ui.rsyntaxtextarea.ActiveLineRangeEvent)>(r8);

     label5:
        $i6 = (int) -2;

        i4 = i4 + $i6;

        goto label1;

     label6:
        return;
    }

    private void fireHyperlinkUpdate(javax.swing.event.HyperlinkEvent)
    {
        javax.swing.event.HyperlinkListener $r7;
        java.lang.Object[] $r2;
        javax.swing.event.HyperlinkEvent r6;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        javax.swing.event.EventListenerList $r1;
        int $i0, $i1, i2, $i4;
        java.lang.Class $r3, $r8;
        java.lang.Object $r4, $r5;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r6 := @parameter0: javax.swing.event.HyperlinkEvent;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.event.EventListenerList listenerList>;

        $r2 = virtualinvoke $r1.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>();

        $i0 = lengthof $r2;

        i2 = $i0 - 2;

     label1:
        if i2 < 0 goto label5;

        $r4 = $r2[i2];

        $r3 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$javax$swing$event$HyperlinkListener>;

        if $r3 != null goto label2;

        $r8 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$(java.lang.String)>("javax.swing.event.HyperlinkListener");

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$javax$swing$event$HyperlinkListener> = $r8;

        goto label3;

     label2:
        $r8 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$javax$swing$event$HyperlinkListener>;

     label3:
        if $r4 != $r8 goto label4;

        $i1 = i2 + 1;

        $r5 = $r2[$i1];

        $r7 = (javax.swing.event.HyperlinkListener) $r5;

        interfaceinvoke $r7.<javax.swing.event.HyperlinkListener: void hyperlinkUpdate(javax.swing.event.HyperlinkEvent)>(r6);

     label4:
        $i4 = (int) -2;

        i2 = i2 + $i4;

        goto label1;

     label5:
        return;
    }

    void fireMarkedOccurrencesChanged()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("RSTA.markedOccurrencesChanged", null, null);

        return;
    }

    void fireParserNoticesChange()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("RSTA.parserNotices", null, null);

        return;
    }

    public void foldToggled(org.fife.ui.rsyntaxtextarea.folding.Fold)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        org.fife.ui.rsyntaxtextarea.folding.Fold r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter0: org.fife.ui.rsyntaxtextarea.folding.Fold;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle match> = null;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle dotRect> = null;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void possiblyUpdateCurrentLineHighlightLocation()>();

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void revalidate()>();

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint()>();

        return;
    }

    public void forceReparsing(int)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int i0;
        org.fife.ui.rsyntaxtextarea.ParserManager $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter0: int;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        virtualinvoke $r1.<org.fife.ui.rsyntaxtextarea.ParserManager: void forceReparsing(int)>(i0);

        return;
    }

    public boolean forceReparsing(org.fife.ui.rsyntaxtextarea.parser.Parser)
    {
        org.fife.ui.rsyntaxtextarea.parser.Parser $r1, r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int $i0, i1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r2 := @parameter0: org.fife.ui.rsyntaxtextarea.parser.Parser;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getParserCount()>();

        if i1 >= $i0 goto label3;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.parser.Parser getParser(int)>(i1);

        if $r1 != r2 goto label2;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void forceReparsing(int)>(i1);

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean getAnimateBracketMatching()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean animateBracketMatching>;

        return $z0;
    }

    public boolean getAntiAliasingEnabled()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.util.Map aaHints>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.awt.Color getBackgroundForToken(org.fife.ui.rsyntaxtextarea.Token)
    {
        java.awt.Color r6;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        org.fife.ui.rsyntaxtextarea.Style $r3;
        org.fife.ui.rsyntaxtextarea.SyntaxScheme $r2;
        int $i0, $i1, i2, $i3;
        org.fife.ui.rsyntaxtextarea.Token r1;
        java.awt.Color[] $r4, $r5;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter0: org.fife.ui.rsyntaxtextarea.Token;

        r6 = null;

        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean getHighlightSecondaryLanguages()>();

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.Token: int getLanguageIndex()>();

        i2 = $i1 - 1;

        if i2 < 0 goto label1;

        $r4 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color[] secondaryLanguageBackgrounds>;

        $i3 = lengthof $r4;

        if i2 >= $i3 goto label1;

        $r5 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color[] secondaryLanguageBackgrounds>;

        r6 = $r5[i2];

     label1:
        if r6 != null goto label2;

        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.SyntaxScheme syntaxScheme>;

        $i0 = r1.<org.fife.ui.rsyntaxtextarea.Token: int type>;

        $r3 = virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.SyntaxScheme: org.fife.ui.rsyntaxtextarea.Style getStyle(int)>($i0);

        r6 = $r3.<org.fife.ui.rsyntaxtextarea.Style: java.awt.Color background>;

     label2:
        return r6;
    }

    public boolean getCloseCurlyBraces()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean closeCurlyBraces>;

        return $z0;
    }

    public boolean getCloseMarkupTags()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean closeMarkupTags>;

        return $z0;
    }

    public static synchronized org.fife.ui.rsyntaxtextarea.CodeTemplateManager getCodeTemplateManager()
    {
        org.fife.ui.rsyntaxtextarea.CodeTemplateManager $r0, $r1, $r2;

        $r0 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.CodeTemplateManager codeTemplateManager>;

        if $r0 != null goto label1;

        $r2 = new org.fife.ui.rsyntaxtextarea.CodeTemplateManager;

        specialinvoke $r2.<org.fife.ui.rsyntaxtextarea.CodeTemplateManager: void <init>()>();

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.CodeTemplateManager codeTemplateManager> = $r2;

     label1:
        $r1 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.CodeTemplateManager codeTemplateManager>;

        return $r1;
    }

    public static final java.awt.Color getDefaultBracketMatchBGColor()
    {
        java.awt.Color $r0;

        $r0 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color DEFAULT_BRACKET_MATCH_BG_COLOR>;

        return $r0;
    }

    public static final java.awt.Color getDefaultBracketMatchBorderColor()
    {
        java.awt.Color $r0;

        $r0 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color DEFAULT_BRACKET_MATCH_BORDER_COLOR>;

        return $r0;
    }

    public static java.awt.Color getDefaultSelectionColor()
    {
        java.awt.Color $r0;

        $r0 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color DEFAULT_SELECTION_COLOR>;

        return $r0;
    }

    public org.fife.ui.rsyntaxtextarea.SyntaxScheme getDefaultSyntaxScheme()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r1;
        org.fife.ui.rsyntaxtextarea.SyntaxScheme $r0;
        java.awt.Font $r2;

        r1 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r0 = new org.fife.ui.rsyntaxtextarea.SyntaxScheme;

        $r2 = virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Font getFont()>();

        specialinvoke $r0.<org.fife.ui.rsyntaxtextarea.SyntaxScheme: void <init>(java.awt.Font)>($r2);

        return $r0;
    }

    public boolean getEOLMarkersVisible()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean eolMarkersVisible>;

        return $z0;
    }

    public org.fife.ui.rsyntaxtextarea.folding.FoldManager getFoldManager()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        org.fife.ui.rsyntaxtextarea.folding.FoldManager $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.folding.FoldManager foldManager>;

        return $r1;
    }

    public java.awt.Font getFontForTokenType(int)
    {
        org.fife.ui.rsyntaxtextarea.SyntaxScheme $r1;
        java.awt.Font r3, $r4;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int i0;
        org.fife.ui.rsyntaxtextarea.Style $r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter0: int;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.SyntaxScheme syntaxScheme>;

        $r2 = virtualinvoke $r1.<org.fife.ui.rsyntaxtextarea.SyntaxScheme: org.fife.ui.rsyntaxtextarea.Style getStyle(int)>(i0);

        r3 = $r2.<org.fife.ui.rsyntaxtextarea.Style: java.awt.Font font>;

        if r3 == null goto label1;

        $r4 = r3;

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Font getFont()>();

     label2:
        return $r4;
    }

    public java.awt.FontMetrics getFontMetricsForTokenType(int)
    {
        org.fife.ui.rsyntaxtextarea.SyntaxScheme $r1;
        java.awt.FontMetrics r3, $r4;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int i0;
        org.fife.ui.rsyntaxtextarea.Style $r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter0: int;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.SyntaxScheme syntaxScheme>;

        $r2 = virtualinvoke $r1.<org.fife.ui.rsyntaxtextarea.SyntaxScheme: org.fife.ui.rsyntaxtextarea.Style getStyle(int)>(i0);

        r3 = $r2.<org.fife.ui.rsyntaxtextarea.Style: java.awt.FontMetrics fontMetrics>;

        if r3 == null goto label1;

        $r4 = r3;

        goto label2;

     label1:
        $r4 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.FontMetrics defaultFontMetrics>;

     label2:
        return $r4;
    }

    public java.awt.Color getForegroundForToken(org.fife.ui.rsyntaxtextarea.Token)
    {
        java.awt.Color $r2, $r3;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int $i0, $i1, $i2;
        org.fife.ui.rsyntaxtextarea.Token r1;
        boolean $z0, $z1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter0: org.fife.ui.rsyntaxtextarea.Token;

        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean getHyperlinksEnabled()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.Token: boolean isHyperlink()>();

        if $z1 == 0 goto label1;

        $i1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int hoveredOverLinkOffset>;

        $i0 = r1.<org.fife.ui.rsyntaxtextarea.Token: int offset>;

        if $i1 != $i0 goto label1;

        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color hyperlinkFG>;

        return $r2;

     label1:
        $i2 = r1.<org.fife.ui.rsyntaxtextarea.Token: int type>;

        $r3 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color getForegroundForTokenType(int)>($i2);

        return $r3;
    }

    public java.awt.Color getForegroundForTokenType(int)
    {
        java.awt.Color r3, $r4;
        org.fife.ui.rsyntaxtextarea.SyntaxScheme $r1;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int i0;
        org.fife.ui.rsyntaxtextarea.Style $r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter0: int;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.SyntaxScheme syntaxScheme>;

        $r2 = virtualinvoke $r1.<org.fife.ui.rsyntaxtextarea.SyntaxScheme: org.fife.ui.rsyntaxtextarea.Style getStyle(int)>(i0);

        r3 = $r2.<org.fife.ui.rsyntaxtextarea.Style: java.awt.Color foreground>;

        if r3 == null goto label1;

        $r4 = r3;

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color getForeground()>();

     label2:
        return $r4;
    }

    public boolean getFractionalFontMetricsEnabled()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean fractionalFontMetricsEnabled>;

        return $z0;
    }

    private final java.awt.Graphics2D getGraphics2D(java.awt.Graphics)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r2;
        java.awt.Graphics2D r1;
        java.util.Map $r3, $r6;
        java.awt.Graphics r0;
        java.awt.RenderingHints$Key $r5;
        java.lang.Object $r4;
        boolean $z0;

        r2 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r0 := @parameter0: java.awt.Graphics;

        r1 = (java.awt.Graphics2D) r0;

        $r3 = r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.util.Map aaHints>;

        if $r3 == null goto label1;

        $r6 = r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.util.Map aaHints>;

        virtualinvoke r1.<java.awt.Graphics2D: void addRenderingHints(java.util.Map)>($r6);

     label1:
        $z0 = r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean fractionalFontMetricsEnabled>;

        if $z0 == 0 goto label2;

        $r5 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_FRACTIONALMETRICS>;

        $r4 = <java.awt.RenderingHints: java.lang.Object VALUE_FRACTIONALMETRICS_ON>;

        virtualinvoke r1.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r5, $r4);

     label2:
        return r1;
    }

    public boolean getHighlightSecondaryLanguages()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean highlightSecondaryLanguages>;

        return $z0;
    }

    public java.awt.Color getHyperlinkForeground()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Color $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color hyperlinkFG>;

        return $r1;
    }

    public boolean getHyperlinksEnabled()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean hyperlinksEnabled>;

        return $z0;
    }

    public int getLastVisibleOffset()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        javax.swing.text.BadLocationException $r2;
        org.fife.ui.rsyntaxtextarea.folding.FoldManager $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        javax.swing.text.Document $r3;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean isCodeFoldingEnabled()>();

        if $z0 == 0 goto label4;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.folding.FoldManager foldManager>;

        $i0 = virtualinvoke $r1.<org.fife.ui.rsyntaxtextarea.folding.FoldManager: int getLastVisibleLine()>();

        $i1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineCount()>();

        $i2 = $i1 - 1;

        if $i0 >= $i2 goto label4;

     label1:
        $i3 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineEndOffset(int)>($i0);

        $i4 = $i3 - 1;

     label2:
        return $i4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<javax.swing.text.BadLocationException: void printStackTrace()>();

     label4:
        $r3 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.text.Document getDocument()>();

        $i5 = interfaceinvoke $r3.<javax.swing.text.Document: int getLength()>();

        return $i5;

        catch javax.swing.text.BadLocationException from label1 to label2 with label3;
    }

    public int getLineHeight()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int $i0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $i0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int lineHeight>;

        return $i0;
    }

    public java.util.List getMarkedOccurrences()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaHighlighter $r2;
        java.util.List $r3;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        javax.swing.text.Highlighter $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.text.Highlighter getHighlighter()>();

        $r2 = (org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaHighlighter) $r1;

        $r3 = virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaHighlighter: java.util.List getMarkedOccurrences()>();

        return $r3;
    }

    public boolean getMarkOccurrences()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport $r1;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport markOccurrencesSupport>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.awt.Color getMarkOccurrencesColor()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Color $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color markOccurrencesColor>;

        return $r1;
    }

    boolean getMarkOccurrencesOfTokenType(int)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int i0;
        javax.swing.text.Document $r1;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.text.Document getDocument()>();

        r2 = (org.fife.ui.rsyntaxtextarea.RSyntaxDocument) $r1;

        $z0 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: boolean getMarkOccurrencesOfTokenType(int)>(i0);

        return $z0;
    }

    public java.awt.Color getMatchedBracketBGColor()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Color $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color matchedBracketBGColor>;

        return $r1;
    }

    public java.awt.Color getMatchedBracketBorderColor()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Color $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color matchedBracketBorderColor>;

        return $r1;
    }

    java.awt.Rectangle getDotRectangle()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Rectangle $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle dotRect>;

        return $r1;
    }

    java.awt.Rectangle getMatchRectangle()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Rectangle $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle match>;

        return $r1;
    }

    public int getMaxAscent()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int $i0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $i0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int maxAscent>;

        return $i0;
    }

    public boolean getPaintMatchedBracketPair()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean paintMatchedBracketPair>;

        return $z0;
    }

    public boolean getPaintTabLines()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean paintTabLines>;

        return $z0;
    }

    public org.fife.ui.rsyntaxtextarea.parser.Parser getParser(int)
    {
        org.fife.ui.rsyntaxtextarea.ParserManager $r1;
        org.fife.ui.rsyntaxtextarea.parser.Parser $r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int i0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter0: int;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        $r2 = virtualinvoke $r1.<org.fife.ui.rsyntaxtextarea.ParserManager: org.fife.ui.rsyntaxtextarea.parser.Parser getParser(int)>(i0);

        return $r2;
    }

    public int getParserCount()
    {
        org.fife.ui.rsyntaxtextarea.ParserManager $r1, $r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int $i0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        $i0 = virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.ParserManager: int getParserCount()>();

     label2:
        return $i0;
    }

    public java.util.List getParserNotices()
    {
        java.util.List $r3;
        org.fife.ui.rsyntaxtextarea.ParserManager $r1, $r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        if $r1 != null goto label1;

        $r3 = <java.util.Collections: java.util.List EMPTY_LIST>;

        goto label2;

     label1:
        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        $r3 = virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.ParserManager: java.util.List getParserNotices()>();

     label2:
        return $r3;
    }

    private org.fife.ui.rsyntaxtextarea.RtfGenerator getRTFGenerator()
    {
        org.fife.ui.rsyntaxtextarea.RtfGenerator $r1, $r2, $r3, $r4;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.RtfGenerator rtfGenerator>;

        if $r1 != null goto label1;

        $r4 = new org.fife.ui.rsyntaxtextarea.RtfGenerator;

        specialinvoke $r4.<org.fife.ui.rsyntaxtextarea.RtfGenerator: void <init>()>();

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.RtfGenerator rtfGenerator> = $r4;

        goto label2;

     label1:
        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.RtfGenerator rtfGenerator>;

        virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.RtfGenerator: void reset()>();

     label2:
        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.RtfGenerator rtfGenerator>;

        return $r3;
    }

    public boolean getShouldIndentNextLine(int)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int i0;
        javax.swing.text.Document $r1;
        boolean $z0, $z1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean isAutoIndentEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.text.Document getDocument()>();

        r2 = (org.fife.ui.rsyntaxtextarea.RSyntaxDocument) $r1;

        $z1 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: boolean getShouldIndentNextLine(int)>(i0);

        return $z1;

     label1:
        return 0;
    }

    public java.lang.String getSyntaxEditingStyle()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.lang.String $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String syntaxStyleKey>;

        return $r1;
    }

    public org.fife.ui.rsyntaxtextarea.SyntaxScheme getSyntaxScheme()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        org.fife.ui.rsyntaxtextarea.SyntaxScheme $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.SyntaxScheme syntaxScheme>;

        return $r1;
    }

    public java.awt.Color getTabLineColor()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Color $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color tabLineColor>;

        return $r1;
    }

    public boolean getPaintMarkOccurrencesBorder()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean paintMarkOccurrencesBorder>;

        return $z0;
    }

    public java.awt.Color getSecondaryLanguageBackground(int)
    {
        java.awt.Color $r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int i0;
        java.awt.Color[] $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter0: int;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color[] secondaryLanguageBackgrounds>;

        $r2 = $r1[i0];

        return $r2;
    }

    public int getSecondaryLanguageCount()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int $i0;
        java.awt.Color[] $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color[] secondaryLanguageBackgrounds>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public static synchronized boolean getTemplatesEnabled()
    {
        boolean $z0;

        $z0 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean templatesEnabled>;

        return $z0;
    }

    private org.fife.ui.rsyntaxtextarea.Token getTokenListFor(int, int)
    {
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        org.fife.ui.rsyntaxtextarea.DefaultToken $r6;
        boolean $z0, $z1, $z2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        char[] $r7;
        javax.swing.text.Document $r1;
        javax.swing.text.Element $r2, $r5;
        org.fife.ui.rsyntaxtextarea.Token $r3, $r4, $r8, r9, r10, $r11, r12;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        r9 = null;

        r10 = null;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.text.Document getDocument()>();

        $r2 = interfaceinvoke $r1.<javax.swing.text.Document: javax.swing.text.Element getDefaultRootElement()>();

        $i1 = interfaceinvoke $r2.<javax.swing.text.Element: int getElementIndex(int)>(i0);

        $i3 = interfaceinvoke $r2.<javax.swing.text.Element: int getElementIndex(int)>(i2);

        i9 = $i1;

     label01:
        if i9 > $i3 goto label06;

        $r3 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.Token getTokenListForLine(int)>(i9);

        $r4 = specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.Token cloneTokenList(org.fife.ui.rsyntaxtextarea.Token)>($r3);

        if r9 != null goto label02;

        r9 = $r4;

        r10 = $r4;

        goto label03;

     label02:
        virtualinvoke r10.<org.fife.ui.rsyntaxtextarea.Token: void setNextToken(org.fife.ui.rsyntaxtextarea.Token)>($r4);

     label03:
        $r11 = virtualinvoke r10.<org.fife.ui.rsyntaxtextarea.Token: org.fife.ui.rsyntaxtextarea.Token getNextToken()>();

        if $r11 == null goto label04;

        $r8 = virtualinvoke r10.<org.fife.ui.rsyntaxtextarea.Token: org.fife.ui.rsyntaxtextarea.Token getNextToken()>();

        $z2 = virtualinvoke $r8.<org.fife.ui.rsyntaxtextarea.Token: boolean isPaintable()>();

        if $z2 == 0 goto label04;

        r10 = virtualinvoke r10.<org.fife.ui.rsyntaxtextarea.Token: org.fife.ui.rsyntaxtextarea.Token getNextToken()>();

        goto label03;

     label04:
        if i9 >= $i3 goto label05;

        $r5 = interfaceinvoke $r2.<javax.swing.text.Element: javax.swing.text.Element getElement(int)>(i9);

        $i7 = interfaceinvoke $r5.<javax.swing.text.Element: int getEndOffset()>();

        i8 = $i7 - 1;

        $r6 = new org.fife.ui.rsyntaxtextarea.DefaultToken;

        $r7 = newarray (char)[1];

        $r7[0] = 10;

        specialinvoke $r6.<org.fife.ui.rsyntaxtextarea.DefaultToken: void <init>(char[],int,int,int,int)>($r7, 0, 0, i8, 21);

        virtualinvoke r10.<org.fife.ui.rsyntaxtextarea.Token: void setNextToken(org.fife.ui.rsyntaxtextarea.Token)>($r6);

        r10 = $r6;

     label05:
        i9 = i9 + 1;

        goto label01;

     label06:
        $i4 = r9.<org.fife.ui.rsyntaxtextarea.Token: int offset>;

        if i0 < $i4 goto label09;

     label07:
        $z1 = virtualinvoke r9.<org.fife.ui.rsyntaxtextarea.Token: boolean containsPosition(int)>(i0);

        if $z1 != 0 goto label08;

        r9 = virtualinvoke r9.<org.fife.ui.rsyntaxtextarea.Token: org.fife.ui.rsyntaxtextarea.Token getNextToken()>();

        goto label07;

     label08:
        virtualinvoke r9.<org.fife.ui.rsyntaxtextarea.Token: void makeStartAt(int)>(i0);

     label09:
        r12 = r9;

     label10:
        if r12 == null goto label11;

        $z0 = virtualinvoke r12.<org.fife.ui.rsyntaxtextarea.Token: boolean containsPosition(int)>(i2);

        if $z0 != 0 goto label11;

        r12 = virtualinvoke r12.<org.fife.ui.rsyntaxtextarea.Token: org.fife.ui.rsyntaxtextarea.Token getNextToken()>();

        goto label10;

     label11:
        if r12 == null goto label12;

        $i5 = r12.<org.fife.ui.rsyntaxtextarea.Token: int offset>;

        $i6 = i2 - $i5;

        r12.<org.fife.ui.rsyntaxtextarea.Token: int textCount> = $i6;

        virtualinvoke r12.<org.fife.ui.rsyntaxtextarea.Token: void setNextToken(org.fife.ui.rsyntaxtextarea.Token)>(null);

     label12:
        return r9;
    }

    public org.fife.ui.rsyntaxtextarea.Token getTokenListForLine(int)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument $r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int i0;
        javax.swing.text.Document $r1;
        org.fife.ui.rsyntaxtextarea.Token $r3;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.text.Document getDocument()>();

        $r2 = (org.fife.ui.rsyntaxtextarea.RSyntaxDocument) $r1;

        $r3 = virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.Token getTokenListForLine(int)>(i0);

        return $r3;
    }

    public java.lang.String getToolTipText(java.awt.event.MouseEvent)
    {
        java.net.URL r13;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        org.fife.ui.rsyntaxtextarea.parser.ToolTipInfo $r11;
        java.awt.event.MouseEvent r6;
        org.fife.ui.rsyntaxtextarea.ParserManager $r1, $r9, $r10;
        org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip $r2, $r3, $r4, $r5, $r7, $r8;
        java.lang.String r12;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r6 := @parameter0: java.awt.event.MouseEvent;

        r12 = null;

        r13 = null;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        if $r1 == null goto label1;

        $r10 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        $r11 = virtualinvoke $r10.<org.fife.ui.rsyntaxtextarea.ParserManager: org.fife.ui.rsyntaxtextarea.parser.ToolTipInfo getToolTipText(java.awt.event.MouseEvent)>(r6);

        if $r11 == null goto label1;

        r12 = virtualinvoke $r11.<org.fife.ui.rsyntaxtextarea.parser.ToolTipInfo: java.lang.String getToolTipText()>();

        r13 = virtualinvoke $r11.<org.fife.ui.rsyntaxtextarea.parser.ToolTipInfo: java.net.URL getImageBase()>();

     label1:
        if r12 != null goto label2;

        r12 = specialinvoke r0.<org.fife.ui.rtextarea.RTextArea: java.lang.String getToolTipText(java.awt.event.MouseEvent)>(r6);

     label2:
        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean getUseFocusableTips()>();

        if $z0 == 0 goto label6;

        if r12 == null goto label4;

        $r4 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip focusableTip>;

        if $r4 != null goto label3;

        $r8 = new org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip;

        $r9 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        specialinvoke $r8.<org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip: void <init>(javax.swing.JTextArea,javax.swing.event.HyperlinkListener)>(r0, $r9);

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip focusableTip> = $r8;

     label3:
        $r5 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip focusableTip>;

        virtualinvoke $r5.<org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip: void setImageBase(java.net.URL)>(r13);

        $r7 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip focusableTip>;

        virtualinvoke $r7.<org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip: void toolTipRequested(java.awt.event.MouseEvent,java.lang.String)>(r6, r12);

        goto label5;

     label4:
        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip focusableTip>;

        if $r2 == null goto label5;

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip focusableTip>;

        virtualinvoke $r3.<org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip: void possiblyDisposeOfTipWindow()>();

     label5:
        return null;

     label6:
        return r12;
    }

    public boolean getUnderlineForToken(org.fife.ui.rsyntaxtextarea.Token)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r1;
        org.fife.ui.rsyntaxtextarea.Style $r3;
        org.fife.ui.rsyntaxtextarea.SyntaxScheme $r2;
        int $i0;
        org.fife.ui.rsyntaxtextarea.Token r0;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.Token;

        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.Token: boolean isHyperlink()>();

        if $z0 == 0 goto label1;

        $z2 = virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean getHyperlinksEnabled()>();

        if $z2 != 0 goto label2;

     label1:
        $r2 = r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.SyntaxScheme syntaxScheme>;

        $i0 = r0.<org.fife.ui.rsyntaxtextarea.Token: int type>;

        $r3 = virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.SyntaxScheme: org.fife.ui.rsyntaxtextarea.Style getStyle(int)>($i0);

        $z1 = $r3.<org.fife.ui.rsyntaxtextarea.Style: boolean underline>;

        if $z1 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public boolean getUseFocusableTips()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean useFocusableTips>;

        return $z0;
    }

    protected void init()
    {
        java.awt.Color $r2, $r3, $r4, $r5, $r7, $r16, $r17, $r18;
        int $i1;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r1;
        org.fife.ui.rtextarea.RecordableTextAction $r0;
        org.fife.ui.rsyntaxtextarea.folding.FoldManager $r15;
        java.awt.Color[] $r8, $r10, $r12, $r14;

        r1 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r0 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rtextarea.RecordableTextAction toggleCurrentFoldAction>;

        if $r0 != null goto label1;

        staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void createRstaPopupMenuActions()>();

     label1:
        r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String syntaxStyleKey> = "text/plain";

        $r2 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color getDefaultBracketMatchBGColor()>();

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setMatchedBracketBGColor(java.awt.Color)>($r2);

        $r3 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color getDefaultBracketMatchBorderColor()>();

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setMatchedBracketBorderColor(java.awt.Color)>($r3);

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setBracketMatchingEnabled(boolean)>(1);

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setAnimateBracketMatching(boolean)>(1);

        $i1 = (int) -1;

        r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int lastBracketMatchPos> = $i1;

        $r4 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color getDefaultSelectionColor()>();

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setSelectionColor(java.awt.Color)>($r4);

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setTabLineColor(java.awt.Color)>(null);

        $r5 = <org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport: java.awt.Color DEFAULT_COLOR>;

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setMarkOccurrencesColor(java.awt.Color)>($r5);

        $r15 = new org.fife.ui.rsyntaxtextarea.folding.FoldManager;

        specialinvoke $r15.<org.fife.ui.rsyntaxtextarea.folding.FoldManager: void <init>(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea)>(r1);

        r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.folding.FoldManager foldManager> = $r15;

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setAutoIndentEnabled(boolean)>(1);

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setCloseCurlyBraces(boolean)>(1);

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setCloseMarkupTags(boolean)>(1);

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setClearWhitespaceLinesEnabled(boolean)>(1);

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setHyperlinksEnabled(boolean)>(1);

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setLinkScanningMask(int)>(128);

        $r7 = <java.awt.Color: java.awt.Color BLUE>;

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setHyperlinkForeground(java.awt.Color)>($r7);

        r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean isScanningForLinks> = 0;

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setUseFocusableTips(boolean)>(1);

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setAntiAliasingEnabled(boolean)>(1);

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void restoreDefaultSyntaxScheme()>();

        virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setHighlightSecondaryLanguages(boolean)>(1);

        $r8 = newarray (java.awt.Color)[3];

        r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color[] secondaryLanguageBackgrounds> = $r8;

        $r10 = r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color[] secondaryLanguageBackgrounds>;

        $r16 = new java.awt.Color;

        specialinvoke $r16.<java.awt.Color: void <init>(int)>(16773324);

        $r10[0] = $r16;

        $r12 = r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color[] secondaryLanguageBackgrounds>;

        $r17 = new java.awt.Color;

        specialinvoke $r17.<java.awt.Color: void <init>(int)>(14352090);

        $r12[1] = $r17;

        $r14 = r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color[] secondaryLanguageBackgrounds>;

        $r18 = new java.awt.Color;

        specialinvoke $r18.<java.awt.Color: void <init>(int)>(16769264);

        $r14[2] = $r18;

        return;
    }

    public boolean isAutoIndentEnabled()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean autoIndentEnabled>;

        return $z0;
    }

    public final boolean isBracketMatchingEnabled()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean bracketMatchingEnabled>;

        return $z0;
    }

    public boolean isClearWhitespaceLinesEnabled()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean clearWhitespaceLines>;

        return $z0;
    }

    public boolean isCodeFoldingEnabled()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        org.fife.ui.rsyntaxtextarea.folding.FoldManager $r1;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.folding.FoldManager foldManager>;

        $z0 = virtualinvoke $r1.<org.fife.ui.rsyntaxtextarea.folding.FoldManager: boolean isCodeFoldingEnabled()>();

        return $z0;
    }

    public boolean isWhitespaceVisible()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean whitespaceVisible>;

        return $z0;
    }

    private org.fife.ui.rsyntaxtextarea.Token modelToToken(int)
    {
        int i0, $i1;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        javax.swing.text.BadLocationException $r1;
        org.fife.ui.rsyntaxtextarea.Token r2;
        boolean $z0, $z1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter0: int;

        if i0 < 0 goto label7;

     label1:
        $i1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineOfOffset(int)>(i0);

        r2 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.Token getTokenListForLine(int)>($i1);

     label2:
        if r2 == null goto label5;

        $z0 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.Token: boolean isPaintable()>();

        if $z0 == 0 goto label5;

        $z1 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.Token: boolean containsPosition(int)>(i0);

        if $z1 == 0 goto label4;

     label3:
        return r2;

     label4:
        r2 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.Token: org.fife.ui.rsyntaxtextarea.Token getNextToken()>();

        goto label2;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        virtualinvoke $r1.<javax.swing.text.BadLocationException: void printStackTrace()>();

     label7:
        return null;

        catch javax.swing.text.BadLocationException from label1 to label3 with label6;
        catch javax.swing.text.BadLocationException from label4 to label5 with label6;
    }

    protected void paintComponent(java.awt.Graphics)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Graphics r1;
        java.awt.Graphics2D $r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter0: java.awt.Graphics;

        $r2 = specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Graphics2D getGraphics2D(java.awt.Graphics)>(r1);

        specialinvoke r0.<org.fife.ui.rtextarea.RTextArea: void paintComponent(java.awt.Graphics)>($r2);

        return;
    }

    private void refreshFontMetrics(java.awt.Graphics2D)
    {
        java.awt.Font $r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        org.fife.ui.rsyntaxtextarea.SyntaxScheme $r4;
        org.fife.ui.rsyntaxtextarea.SyntaxView r8;
        java.awt.FontMetrics $r3;
        javax.swing.plaf.TextUI $r5;
        java.awt.Graphics2D r1;
        javax.swing.text.View $r6, $r7;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter0: java.awt.Graphics2D;

        $r2 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Font getFont()>();

        $r3 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r2);

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.FontMetrics defaultFontMetrics> = $r3;

        $r4 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.SyntaxScheme syntaxScheme>;

        virtualinvoke $r4.<org.fife.ui.rsyntaxtextarea.SyntaxScheme: void refreshFontMetrics(java.awt.Graphics2D)>(r1);

        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean getLineWrap()>();

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.plaf.TextUI getUI()>();

        $r6 = virtualinvoke $r5.<javax.swing.plaf.TextUI: javax.swing.text.View getRootView(javax.swing.text.JTextComponent)>(r0);

        $r7 = virtualinvoke $r6.<javax.swing.text.View: javax.swing.text.View getView(int)>(0);

        r8 = (org.fife.ui.rsyntaxtextarea.SyntaxView) $r7;

        virtualinvoke r8.<org.fife.ui.rsyntaxtextarea.SyntaxView: void calculateLongestLine()>();

     label1:
        return;
    }

    public void removeActiveLineRangeListener(org.fife.ui.rsyntaxtextarea.ActiveLineRangeListener)
    {
        org.fife.ui.rsyntaxtextarea.ActiveLineRangeListener r2;
        javax.swing.event.EventListenerList $r3;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.lang.Class $r1, $r4;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r2 := @parameter0: org.fife.ui.rsyntaxtextarea.ActiveLineRangeListener;

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.event.EventListenerList listenerList>;

        $r1 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$org$fife$ui$rsyntaxtextarea$ActiveLineRangeListener>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$(java.lang.String)>("org.fife.ui.rsyntaxtextarea.ActiveLineRangeListener");

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$org$fife$ui$rsyntaxtextarea$ActiveLineRangeListener> = $r4;

        goto label2;

     label1:
        $r4 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$org$fife$ui$rsyntaxtextarea$ActiveLineRangeListener>;

     label2:
        virtualinvoke $r3.<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>($r4, r2);

        return;
    }

    public void removeHyperlinkListener(javax.swing.event.HyperlinkListener)
    {
        javax.swing.event.HyperlinkListener r2;
        javax.swing.event.EventListenerList $r3;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.lang.Class $r1, $r4;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r2 := @parameter0: javax.swing.event.HyperlinkListener;

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.event.EventListenerList listenerList>;

        $r1 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$javax$swing$event$HyperlinkListener>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$(java.lang.String)>("javax.swing.event.HyperlinkListener");

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$javax$swing$event$HyperlinkListener> = $r4;

        goto label2;

     label1:
        $r4 = <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.Class class$javax$swing$event$HyperlinkListener>;

     label2:
        virtualinvoke $r3.<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>($r4, r2);

        return;
    }

    public void removeNotify()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        org.fife.ui.rsyntaxtextarea.ParserManager $r1, $r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        if $r1 == null goto label1;

        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.ParserManager: void stopParsing()>();

     label1:
        specialinvoke r0.<org.fife.ui.rtextarea.RTextArea: void removeNotify()>();

        return;
    }

    public boolean removeParser(org.fife.ui.rsyntaxtextarea.parser.Parser)
    {
        org.fife.ui.rsyntaxtextarea.ParserManager $r1, $r3;
        org.fife.ui.rsyntaxtextarea.parser.Parser r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r2 := @parameter0: org.fife.ui.rsyntaxtextarea.parser.Parser;

        z0 = 0;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        if $r1 == null goto label1;

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.ParserManager parserManager>;

        z0 = virtualinvoke $r3.<org.fife.ui.rsyntaxtextarea.ParserManager: boolean removeParser(org.fife.ui.rsyntaxtextarea.parser.Parser)>(r2);

     label1:
        return z0;
    }

    public void restoreDefaultSyntaxScheme()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        org.fife.ui.rsyntaxtextarea.SyntaxScheme $r1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.SyntaxScheme getDefaultSyntaxScheme()>();

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setSyntaxScheme(org.fife.ui.rsyntaxtextarea.SyntaxScheme)>($r1);

        return;
    }

    public static synchronized boolean saveTemplates()
    {
        org.fife.ui.rsyntaxtextarea.CodeTemplateManager $r0;
        boolean $z0, $z1;

        $z0 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean getTemplatesEnabled()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r0 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.CodeTemplateManager getCodeTemplateManager()>();

        $z1 = virtualinvoke $r0.<org.fife.ui.rsyntaxtextarea.CodeTemplateManager: boolean saveTemplates()>();

        return $z1;
    }

    public void setActiveLineRange(int, int)
    {
        int i0, i1, $i3, $i5;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = (int) -1;

        if i0 != $i3 goto label1;

        $i5 = (int) -1;

        i1 = $i5;

     label1:
        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void fireActiveLineRangeEvent(int,int)>(i0, i1);

        return;
    }

    public void setAnimateBracketMatching(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea$BracketMatchingTimer $r1, $r2;
        boolean z0, $z1, $z2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean animateBracketMatching>;

        if z0 == $z1 goto label4;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean animateBracketMatching> = z0;

        if z0 == 0 goto label1;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea$BracketMatchingTimer bracketRepaintTimer>;

        if $r1 != null goto label1;

        $r2 = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea$BracketMatchingTimer;

        specialinvoke $r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea$BracketMatchingTimer: void <init>(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea)>(r0);

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea$BracketMatchingTimer bracketRepaintTimer> = $r2;

     label1:
        if z0 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.animateBracketMatching", $z2, z0);

     label4:
        return;
    }

    public void setAntiAliasingEnabled(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.util.HashMap $r6;
        java.awt.Graphics2D $r3;
        java.util.Map $r1, $r4, $r5, $r9;
        java.awt.Graphics $r2;
        java.awt.RenderingHints$Key $r8;
        java.lang.Object $r7;
        boolean z0, $z1, $z2, $z3;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.util.Map aaHints>;

        if $r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if z0 == $z1 goto label8;

        if z0 == 0 goto label3;

        $r4 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: java.util.Map getDesktopAntiAliasHints()>();

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.util.Map aaHints> = $r4;

        $r5 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.util.Map aaHints>;

        if $r5 != null goto label4;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.util.Map aaHints> = $r6;

        $r9 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.util.Map aaHints>;

        $r8 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        $r7 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_ON>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        goto label4;

     label3:
        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.util.Map aaHints> = null;

     label4:
        $z2 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean isDisplayable()>();

        if $z2 == 0 goto label5;

        $r2 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Graphics getGraphics()>();

        $r3 = specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Graphics2D getGraphics2D(java.awt.Graphics)>($r2);

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void refreshFontMetrics(java.awt.Graphics2D)>($r3);

     label5:
        if z0 != 0 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.antiAlias", $z3, z0);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint()>();

     label8:
        return;
    }

    public void setAutoIndentEnabled(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean z0, $z1, $z2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean autoIndentEnabled>;

        if $z1 == z0 goto label3;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean autoIndentEnabled> = z0;

        if z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.autoIndent", $z2, z0);

     label3:
        return;
    }

    public void setBracketMatchingEnabled(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean z0, $z1, $z2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean bracketMatchingEnabled>;

        if z0 == $z1 goto label3;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean bracketMatchingEnabled> = z0;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint()>();

        if z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.bracketMatching", $z2, z0);

     label3:
        return;
    }

    public void setClearWhitespaceLinesEnabled(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean z0, $z1, $z2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean clearWhitespaceLines>;

        if z0 == $z1 goto label3;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean clearWhitespaceLines> = z0;

        if z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.clearWhitespaceLines", $z2, z0);

     label3:
        return;
    }

    public void setCloseCurlyBraces(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean z0, $z1, $z2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean closeCurlyBraces>;

        if z0 == $z1 goto label3;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean closeCurlyBraces> = z0;

        if z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.closeCurlyBraces", $z2, z0);

     label3:
        return;
    }

    public void setCloseMarkupTags(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean z0, $z1, $z2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean closeMarkupTags>;

        if z0 == $z1 goto label3;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean closeMarkupTags> = z0;

        if z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.closeMarkupTags", $z2, z0);

     label3:
        return;
    }

    public void setCodeFoldingEnabled(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean z0, $z1, $z2;
        org.fife.ui.rsyntaxtextarea.folding.FoldManager $r1, $r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.folding.FoldManager foldManager>;

        $z1 = virtualinvoke $r1.<org.fife.ui.rsyntaxtextarea.folding.FoldManager: boolean isCodeFoldingEnabled()>();

        if z0 == $z1 goto label3;

        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.folding.FoldManager foldManager>;

        virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.folding.FoldManager: void setCodeFoldingEnabled(boolean)>(z0);

        if z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.codeFolding", $z2, z0);

     label3:
        return;
    }

    public void setDocument(javax.swing.text.Document)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r1;
        javax.swing.text.Document r0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r1 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r0 := @parameter0: javax.swing.text.Document;

        $z0 = r0 instanceof org.fife.ui.rsyntaxtextarea.RSyntaxDocument;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Documents for RSyntaxTextArea must be instances of RSyntaxDocument!");

        throw $r2;

     label1:
        specialinvoke r1.<org.fife.ui.rtextarea.RTextArea: void setDocument(javax.swing.text.Document)>(r0);

        return;
    }

    public void setEOLMarkersVisible(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean z0, $z1, $z2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean eolMarkersVisible>;

        if z0 == $z1 goto label3;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean eolMarkersVisible> = z0;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint()>();

        if z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.eolMarkersVisible", $z2, z0);

     label3:
        return;
    }

    public void setFont(java.awt.Font)
    {
        org.fife.ui.rsyntaxtextarea.SyntaxScheme $r3;
        java.awt.Graphics2D $r5;
        java.awt.Font $r1, r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Graphics $r4;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r2 := @parameter0: java.awt.Font;

        $r1 = specialinvoke r0.<org.fife.ui.rtextarea.RTextArea: java.awt.Font getFont()>();

        specialinvoke r0.<org.fife.ui.rtextarea.RTextArea: void setFont(java.awt.Font)>(r2);

        $r3 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.SyntaxScheme getSyntaxScheme()>();

        if $r3 == null goto label1;

        if $r1 == null goto label1;

        virtualinvoke $r3.<org.fife.ui.rsyntaxtextarea.SyntaxScheme: void changeBaseFont(java.awt.Font,java.awt.Font)>($r1, r2);

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void calculateLineHeight()>();

     label1:
        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean isDisplayable()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Graphics getGraphics()>();

        $r5 = specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Graphics2D getGraphics2D(java.awt.Graphics)>($r4);

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void refreshFontMetrics(java.awt.Graphics2D)>($r5);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void updateMarginLineX()>();

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void forceCurrentLineHighlightRepaint()>();

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("font", $r1, r2);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void revalidate()>();

     label2:
        return;
    }

    public void setFractionalFontMetricsEnabled(boolean)
    {
        java.awt.Graphics2D $r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Graphics $r1;
        boolean z0, $z1, $z2, $z3;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean fractionalFontMetricsEnabled>;

        if $z1 == z0 goto label4;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean fractionalFontMetricsEnabled> = z0;

        $z2 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean isDisplayable()>();

        if $z2 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Graphics getGraphics()>();

        $r2 = specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Graphics2D getGraphics2D(java.awt.Graphics)>($r1);

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void refreshFontMetrics(java.awt.Graphics2D)>($r2);

     label1:
        if z0 != 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.fractionalFontMetrics", $z3, z0);

     label4:
        return;
    }

    public void setHighlighter(javax.swing.text.Highlighter)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r1;
        java.lang.IllegalArgumentException $r2;
        javax.swing.text.Highlighter r0;
        boolean $z0;

        r1 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r0 := @parameter0: javax.swing.text.Highlighter;

        $z0 = r0 instanceof org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaHighlighter;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("RSyntaxTextArea requires an RSyntaxTextAreaHighlighter for its Highlighter");

        throw $r2;

     label1:
        specialinvoke r1.<org.fife.ui.rtextarea.RTextArea: void setHighlighter(javax.swing.text.Highlighter)>(r0);

        return;
    }

    public void setHighlightSecondaryLanguages(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean z0, $z1, $z2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean highlightSecondaryLanguages>;

        if $z1 == z0 goto label3;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean highlightSecondaryLanguages> = z0;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint()>();

        if z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.highlightSecondaryLanguages", $z2, z0);

     label3:
        return;
    }

    public void setHyperlinkForeground(java.awt.Color)
    {
        java.awt.Color r0;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r1;
        java.lang.NullPointerException $r2;

        r1 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r0 := @parameter0: java.awt.Color;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("fg cannot be null");

        throw $r2;

     label1:
        r1.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color hyperlinkFG> = r0;

        return;
    }

    public void setHyperlinksEnabled(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean z0, $z1, $z2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean hyperlinksEnabled>;

        if $z1 == z0 goto label3;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean hyperlinksEnabled> = z0;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint()>();

        if z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.hyperlinksEnabled", $z2, z0);

     label3:
        return;
    }

    public void setLinkScanningMask(int)
    {
        int i0;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter0: int;

        if i0 == 128 goto label1;

        if i0 == 256 goto label1;

        if i0 == 512 goto label1;

        if i0 != 64 goto label2;

     label1:
        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int linkScanningMask> = i0;

     label2:
        return;
    }

    public void setMarkOccurrences(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean z0;
        org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport markOccurrencesSupport>;

        if $r3 != null goto label2;

        $r4 = new org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport;

        specialinvoke $r4.<org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport: void <init>()>();

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport markOccurrencesSupport> = $r4;

        $r5 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport markOccurrencesSupport>;

        virtualinvoke $r5.<org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport: void install(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea)>(r0);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.markOccurrences", 0, 1);

        goto label2;

     label1:
        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport markOccurrencesSupport>;

        if $r1 == null goto label2;

        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport markOccurrencesSupport>;

        virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport: void uninstall()>();

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport markOccurrencesSupport> = null;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.markOccurrences", 1, 0);

     label2:
        return;
    }

    public void setMarkOccurrencesColor(java.awt.Color)
    {
        java.awt.Color r1;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport $r2, $r3;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter0: java.awt.Color;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color markOccurrencesColor> = r1;

        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport markOccurrencesSupport>;

        if $r2 == null goto label1;

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport markOccurrencesSupport>;

        virtualinvoke $r3.<org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport: void setColor(java.awt.Color)>(r1);

     label1:
        return;
    }

    public void setMatchedBracketBGColor(java.awt.Color)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Color r1;
        java.awt.Rectangle $r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter0: java.awt.Color;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color matchedBracketBGColor> = r1;

        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle match>;

        if $r2 == null goto label1;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint()>();

     label1:
        return;
    }

    public void setMatchedBracketBorderColor(java.awt.Color)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Color r1;
        java.awt.Rectangle $r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter0: java.awt.Color;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color matchedBracketBorderColor> = r1;

        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle match>;

        if $r2 == null goto label1;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint()>();

     label1:
        return;
    }

    public void setPaintMarkOccurrencesBorder(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean z0;
        org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport $r1, $r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean paintMarkOccurrencesBorder> = z0;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport markOccurrencesSupport>;

        if $r1 == null goto label1;

        $r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport markOccurrencesSupport>;

        virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport: void setPaintBorder(boolean)>(z0);

     label1:
        return;
    }

    public void setPaintMatchedBracketPair(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean paintMatchedBracketPair>;

        if z0 == $z1 goto label3;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean paintMatchedBracketPair> = z0;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void doBracketMatching()>();

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint()>();

        $z2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean paintMatchedBracketPair>;

        if $z2 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        $z3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean paintMatchedBracketPair>;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.paintMatchedBracketPair", $z4, $z3);

     label3:
        return;
    }

    public void setPaintTabLines(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean z0, $z1, $z2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean paintTabLines>;

        if z0 == $z1 goto label3;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean paintTabLines> = z0;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint()>();

        if z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.tabLines", $z2, z0);

     label3:
        return;
    }

    public void setSecondaryLanguageBackground(int, java.awt.Color)
    {
        java.awt.Color r2, r3;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int i0, i1, $i3;
        java.awt.Color[] $r1, $r4;
        boolean $z0, $z1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter0: int;

        r3 := @parameter1: java.awt.Color;

        $i3 = (int) -1;

        i1 = i0 + $i3;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color[] secondaryLanguageBackgrounds>;

        r2 = $r1[i1];

        if r3 != null goto label1;

        if r2 != null goto label2;

     label1:
        if r3 == null goto label3;

        $z0 = virtualinvoke r3.<java.awt.Color: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label3;

     label2:
        $r4 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color[] secondaryLanguageBackgrounds>;

        $r4[i1] = r3;

        $z1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean getHighlightSecondaryLanguages()>();

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint()>();

     label3:
        return;
    }

    public void setSyntaxEditingStyle(java.lang.String)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument $r4;
        int $i1, $i3;
        java.lang.String $r1, r2, r5;
        javax.swing.text.Document $r3;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r5 := @parameter0: java.lang.String;

        if r5 != null goto label1;

        r5 = "text/plain";

     label1:
        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String syntaxStyleKey>;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String syntaxStyleKey>;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String syntaxStyleKey> = r5;

        $r3 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.text.Document getDocument()>();

        $r4 = (org.fife.ui.rsyntaxtextarea.RSyntaxDocument) $r3;

        virtualinvoke $r4.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void setSyntaxStyle(java.lang.String)>(r5);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("RSTA.syntaxStyle", r2, r5);

        $i1 = (int) -1;

        $i3 = (int) -1;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setActiveLineRange(int,int)>($i1, $i3);

     label2:
        return;
    }

    public void setSyntaxScheme(org.fife.ui.rsyntaxtextarea.SyntaxScheme)
    {
        org.fife.ui.rsyntaxtextarea.SyntaxScheme r1, r2, $r3;
        java.awt.Graphics2D $r5;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Graphics $r4;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r2 := @parameter0: org.fife.ui.rsyntaxtextarea.SyntaxScheme;

        r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.SyntaxScheme syntaxScheme>;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.SyntaxScheme syntaxScheme> = r2;

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void calculateLineHeight()>();

        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean isDisplayable()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Graphics getGraphics()>();

        $r5 = specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Graphics2D getGraphics2D(java.awt.Graphics)>($r4);

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void refreshFontMetrics(java.awt.Graphics2D)>($r5);

     label1:
        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void updateMarginLineX()>();

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void forceCurrentLineHighlightRepaint()>();

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void revalidate()>();

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.SyntaxScheme syntaxScheme>;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("RSTA.syntaxScheme", r1, $r3);

        return;
    }

    public static synchronized boolean setTemplateDirectory(java.lang.String)
    {
        org.fife.ui.rsyntaxtextarea.CodeTemplateManager $r2, $r3;
        java.io.File $r4;
        int $i0, $i1, $i3, $i5;
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean getTemplatesEnabled()>();

        if $z0 == 0 goto label6;

        if r0 == null goto label6;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r0);

        $z1 = virtualinvoke $r4.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label3;

        $r3 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.CodeTemplateManager getCodeTemplateManager()>();

        $i1 = virtualinvoke $r3.<org.fife.ui.rsyntaxtextarea.CodeTemplateManager: int setTemplateDirectory(java.io.File)>($r4);

        $i3 = (int) -1;

        if $i1 <= $i3 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        $z2 = virtualinvoke $r4.<java.io.File: boolean mkdir()>();

        if $z2 == 0 goto label6;

        $r2 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.CodeTemplateManager getCodeTemplateManager()>();

        $i0 = virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.CodeTemplateManager: int setTemplateDirectory(java.io.File)>($r4);

        $i5 = (int) -1;

        if $i0 <= $i5 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;

     label6:
        return 0;
    }

    public static synchronized void setTemplatesEnabled(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean templatesEnabled> = z0;

        return;
    }

    public void setTabLineColor(java.awt.Color)
    {
        java.awt.Color $r1, r2, $r3, r4;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0, $z1;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r4 := @parameter0: java.awt.Color;

        if r4 != null goto label1;

        r4 = <java.awt.Color: java.awt.Color gray>;

     label1:
        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color tabLineColor>;

        $z0 = virtualinvoke r4.<java.awt.Color: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        r2 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color tabLineColor>;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color tabLineColor> = r4;

        $z1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean getPaintTabLines()>();

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint()>();

     label2:
        $r3 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color tabLineColor>;

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("RSTA.tabLineColor", r2, $r3);

     label3:
        return;
    }

    public void setUseFocusableTips(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean z0, $z1, $z2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean useFocusableTips>;

        if z0 == $z1 goto label3;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean useFocusableTips> = z0;

        if z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.focusableTips", $z2, z0);

     label3:
        return;
    }

    public void setWhitespaceVisible(boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument $r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        javax.swing.text.Document $r1;
        boolean z0, $z1, $z2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean whitespaceVisible>;

        if $z1 == z0 goto label3;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean whitespaceVisible> = z0;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.text.Document getDocument()>();

        $r2 = (org.fife.ui.rsyntaxtextarea.RSyntaxDocument) $r1;

        virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void setWhitespaceVisible(boolean)>(z0);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint()>();

        if z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void firePropertyChange(java.lang.String,boolean,boolean)>("RSTA.visibleWhitespace", $z2, z0);

     label3:
        return;
    }

    private void stopScanningForLinks()
    {
        java.awt.Cursor $r1, $r2;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int $i0, $i2;
        boolean $z0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean isScanningForLinks>;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Cursor getCursor()>();

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean isScanningForLinks> = 0;

        $i2 = (int) -1;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int hoveredOverLinkOffset> = $i2;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.awt.Cursor: int getType()>();

        if $i0 != 12 goto label1;

        $r2 = staticinvoke <java.awt.Cursor: java.awt.Cursor getPredefinedCursor(int)>(2);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void setCursor(java.awt.Cursor)>($r2);

        virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void repaint()>();

     label1:
        return;
    }

    private org.fife.ui.rsyntaxtextarea.Token viewToToken(java.awt.Point)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int $i0;
        java.awt.Point r1;
        org.fife.ui.rsyntaxtextarea.Token $r2;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter0: java.awt.Point;

        $i0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int viewToModel(java.awt.Point)>(r1);

        $r2 = specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.Token modelToToken(int)>($i0);

        return $r2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static java.awt.Rectangle access$000(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Rectangle $r1;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle match>;

        return $r1;
    }

    static java.awt.Rectangle access$100(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Rectangle $r1;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r1 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle dotRect>;

        return $r1;
    }

    static boolean access$200(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean $z0;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $z0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean isScanningForLinks>;

        return $z0;
    }

    static int access$300(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int $i0;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $i0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int hoveredOverLinkOffset>;

        return $i0;
    }

    static org.fife.ui.rsyntaxtextarea.Token access$400(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea, int)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int i0;
        org.fife.ui.rsyntaxtextarea.Token $r1;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.Token modelToToken(int)>(i0);

        return $r1;
    }

    static void access$500(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea, javax.swing.event.HyperlinkEvent)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        javax.swing.event.HyperlinkEvent r1;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter1: javax.swing.event.HyperlinkEvent;

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void fireHyperlinkUpdate(javax.swing.event.HyperlinkEvent)>(r1);

        return;
    }

    static void access$600(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: void stopScanningForLinks()>();

        return;
    }

    static int access$700(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int $i0;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $i0 = r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int linkScanningMask>;

        return $i0;
    }

    static boolean access$202(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea, boolean)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        boolean z0;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        z0 := @parameter1: boolean;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean isScanningForLinks> = z0;

        return z0;
    }

    static org.fife.ui.rsyntaxtextarea.Token access$800(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea, java.awt.Point)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Point r1;
        org.fife.ui.rsyntaxtextarea.Token $r2;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r1 := @parameter1: java.awt.Point;

        $r2 = specialinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.Token viewToToken(java.awt.Point)>(r1);

        return $r2;
    }

    static int access$302(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea, int)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        int i0;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter1: int;

        r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int hoveredOverLinkOffset> = i0;

        return i0;
    }

    static void <clinit>()
    {
        java.awt.Color $r0, $r1, $r2;

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String MSG> = "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String VISIBLE_WHITESPACE_PROPERTY> = "RSTA.visibleWhitespace";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String TAB_LINES_PROPERTY> = "RSTA.tabLines";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String TAB_LINE_COLOR_PROPERTY> = "RSTA.tabLineColor";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String SYNTAX_STYLE_PROPERTY> = "RSTA.syntaxStyle";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String SYNTAX_SCHEME_PROPERTY> = "RSTA.syntaxScheme";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String PARSER_NOTICES_PROPERTY> = "RSTA.parserNotices";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String PAINT_MATCHED_BRACKET_PAIR_PROPERTY> = "RSTA.paintMatchedBracketPair";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String MARKED_OCCURRENCES_CHANGED_PROPERTY> = "RSTA.markedOccurrencesChanged";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String MARK_OCCURRENCES_PROPERTY> = "RSTA.markOccurrences";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String HYPERLINKS_ENABLED_PROPERTY> = "RSTA.hyperlinksEnabled";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String HIGHLIGHT_SECONDARY_LANGUAGES_PROPERTY> = "RSTA.highlightSecondaryLanguages";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String FRACTIONAL_FONTMETRICS_PROPERTY> = "RSTA.fractionalFontMetrics";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String FOCUSABLE_TIPS_PROPERTY> = "RSTA.focusableTips";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String EOL_VISIBLE_PROPERTY> = "RSTA.eolMarkersVisible";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String CODE_FOLDING_PROPERTY> = "RSTA.codeFolding";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String CLOSE_MARKUP_TAGS_PROPERTY> = "RSTA.closeMarkupTags";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String CLOSE_CURLY_BRACES_PROPERTY> = "RSTA.closeCurlyBraces";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String CLEAR_WHITESPACE_LINES_PROPERTY> = "RSTA.clearWhitespaceLines";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String BRACKET_MATCHING_PROPERTY> = "RSTA.bracketMatching";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String AUTO_INDENT_PROPERTY> = "RSTA.autoIndent";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String ANTIALIAS_PROPERTY> = "RSTA.antiAlias";

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.lang.String ANIMATE_BRACKET_MATCHING_PROPERTY> = "RSTA.animateBracketMatching";

        $r0 = new java.awt.Color;

        specialinvoke $r0.<java.awt.Color: void <init>(int,int,int)>(234, 234, 255);

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color DEFAULT_BRACKET_MATCH_BG_COLOR> = $r0;

        $r1 = new java.awt.Color;

        specialinvoke $r1.<java.awt.Color: void <init>(int,int,int)>(0, 0, 128);

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color DEFAULT_BRACKET_MATCH_BORDER_COLOR> = $r1;

        $r2 = new java.awt.Color;

        specialinvoke $r2.<java.awt.Color: void <init>(int,int,int)>(200, 200, 255);

        <org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Color DEFAULT_SELECTION_COLOR> = $r2;

        return;
    }
}
