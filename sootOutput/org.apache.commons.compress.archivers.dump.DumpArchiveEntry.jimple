public class org.apache.commons.compress.archivers.dump.DumpArchiveEntry extends java.lang.Object implements org.apache.commons.compress.archivers.ArchiveEntry
{
    private java.lang.String name;
    private org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE type;
    private int mode;
    private java.util.Set permissions;
    private long size;
    private long atime;
    private long mtime;
    private int uid;
    private int gid;
    private final org.apache.commons.compress.archivers.dump.DumpArchiveSummary summary;
    private final org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header;
    private java.lang.String simpleName;
    private java.lang.String originalName;
    private int volume;
    private long offset;
    private int ino;
    private int nlink;
    private long ctime;
    private int generation;
    private boolean isDeleted;

    public void <init>()
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE $r1;
        java.util.Set $r2;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader $r3;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE UNKNOWN>;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE type> = $r1;

        $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: java.util.Set permissions> = $r2;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveSummary summary> = null;

        $r3 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader;

        specialinvoke $r3.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: void <init>()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header> = $r3;

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE $r1;
        java.util.Set $r2;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader $r3;
        java.lang.String r4, r5;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE UNKNOWN>;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE type> = $r1;

        $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: java.util.Set permissions> = $r2;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveSummary summary> = null;

        $r3 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader;

        specialinvoke $r3.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: void <init>()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header> = $r3;

        virtualinvoke r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: void setName(java.lang.String)>(r4);

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: java.lang.String simpleName> = r5;

        return;
    }

    protected void <init>(java.lang.String, java.lang.String, int, org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE)
    {
        java.util.Set $r2;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader $r3;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        int i0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE $r1, r4;
        java.lang.String r5, r6;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r4 := @parameter3: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE UNKNOWN>;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE type> = $r1;

        $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: java.util.Set permissions> = $r2;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveSummary summary> = null;

        $r3 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader;

        specialinvoke $r3.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: void <init>()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header> = $r3;

        virtualinvoke r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: void setType(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE)>(r4);

        virtualinvoke r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: void setName(java.lang.String)>(r5);

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: java.lang.String simpleName> = r6;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int ino> = i0;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: long offset> = 0L;

        return;
    }

    public java.lang.String getSimpleName()
    {
        java.lang.String $r1;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: java.lang.String simpleName>;

        return $r1;
    }

    protected void setSimpleName(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: java.lang.String simpleName> = r1;

        return;
    }

    public int getIno()
    {
        int $i0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader $r1;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header>;

        $i0 = virtualinvoke $r1.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: int getIno()>();

        return $i0;
    }

    public int getNlink()
    {
        int $i0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $i0 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int nlink>;

        return $i0;
    }

    public void setNlink(int)
    {
        int i0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        i0 := @parameter0: int;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int nlink> = i0;

        return;
    }

    public java.util.Date getCreationTime()
    {
        long $l0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r1;
        java.util.Date $r0;

        r1 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r0 = new java.util.Date;

        $l0 = r1.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: long ctime>;

        specialinvoke $r0.<java.util.Date: void <init>(long)>($l0);

        return $r0;
    }

    public void setCreationTime(java.util.Date)
    {
        long $l0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        java.util.Date r1;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        r1 := @parameter0: java.util.Date;

        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: long ctime> = $l0;

        return;
    }

    public int getGeneration()
    {
        int $i0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $i0 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int generation>;

        return $i0;
    }

    public void setGeneration(int)
    {
        int i0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        i0 := @parameter0: int;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int generation> = i0;

        return;
    }

    public boolean isDeleted()
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: boolean isDeleted>;

        return $z0;
    }

    public void setDeleted(boolean)
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: boolean isDeleted> = z0;

        return;
    }

    public long getOffset()
    {
        long $l0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $l0 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: long offset>;

        return $l0;
    }

    public void setOffset(long)
    {
        long l0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        l0 := @parameter0: long;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: long offset> = l0;

        return;
    }

    public int getVolume()
    {
        int $i0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $i0 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int volume>;

        return $i0;
    }

    public void setVolume(int)
    {
        int i0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        i0 := @parameter0: int;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int volume> = i0;

        return;
    }

    public org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE getHeaderType()
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader $r1;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE $r2;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header>;

        $r2 = virtualinvoke $r1.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE getType()>();

        return $r2;
    }

    public int getHeaderCount()
    {
        int $i0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader $r1;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header>;

        $i0 = virtualinvoke $r1.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: int getCount()>();

        return $i0;
    }

    public int getHeaderHoles()
    {
        int $i0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader $r1;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header>;

        $i0 = virtualinvoke $r1.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: int getHoles()>();

        return $i0;
    }

    public boolean isSparseRecord(int)
    {
        int i0, $i1, $i2;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader $r1;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header>;

        $i1 = virtualinvoke $r1.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: int getCdata(int)>(i0);

        $i2 = $i1 & 1;

        if $i2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int hashCode()
    {
        int $i0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $i0 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int ino>;

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        int $i0, $i1;
        boolean $z0, $z1;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader $r5, $r6;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r1, r4;
        org.apache.commons.compress.archivers.dump.DumpArchiveSummary $r7, $r8, $r9, $r10, $r11;
        java.lang.Object r0;
        java.lang.Class $r2, $r3;

        r1 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        r4 = (org.apache.commons.compress.archivers.dump.DumpArchiveEntry) r0;

        $r5 = r1.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header>;

        if $r5 == null goto label4;

        $r6 = r4.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header>;

        if $r6 != null goto label5;

     label4:
        return 0;

     label5:
        $i1 = r1.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int ino>;

        $i0 = r4.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int ino>;

        if $i1 == $i0 goto label6;

        return 0;

     label6:
        $r7 = r1.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveSummary summary>;

        if $r7 != null goto label7;

        $r11 = r4.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveSummary summary>;

        if $r11 != null goto label8;

     label7:
        $r8 = r1.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveSummary summary>;

        if $r8 == null goto label9;

        $r10 = r1.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveSummary summary>;

        $r9 = r4.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveSummary summary>;

        $z1 = virtualinvoke $r10.<org.apache.commons.compress.archivers.dump.DumpArchiveSummary: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label9;

     label8:
        return 0;

     label9:
        return 1;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: java.lang.String getName()>();

        return $r1;
    }

    static org.apache.commons.compress.archivers.dump.DumpArchiveEntry parse(byte[])
    {
        byte[] r2, $r7;
        java.util.Date $r5, $r6;
        byte $b34;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader r1;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry $r0;
        long $l8, $l10, $l11, $l14, $l16, $l17, $l20, $l22, $l23, $l26, l35, l36, l37;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i12, $i13, $i15, $i18, $i19, $i21, $i24, $i25, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i38;
        org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE $r3;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE $r4;

        r2 := @parameter0: byte[];

        $r0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        specialinvoke $r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: void <init>()>();

        r1 = $r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header>;

        $i0 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r2, 0);

        $r3 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE find(int)>($i0);

        staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE access$002(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader,org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE)>(r1, $r3);

        $i1 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r2, 12);

        staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: int access$102(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader,int)>(r1, $i1);

        $i2 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r2, 20);

        $i3 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: int access$202(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader,int)>(r1, $i2);

        $r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int ino> = $i3;

        $i4 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert16(byte[],int)>(r2, 32);

        $i5 = $i4 >> 12;

        $i6 = $i5 & 15;

        $r4 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE find(int)>($i6);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: void setType(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE)>($r4);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: void setMode(int)>($i4);

        $i7 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert16(byte[],int)>(r2, 34);

        $r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int nlink> = $i7;

        $l8 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: long convert64(byte[],int)>(r2, 40);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: void setSize(long)>($l8);

        $i9 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r2, 48);

        $l10 = (long) $i9;

        $l11 = 1000L * $l10;

        $i12 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r2, 52);

        $i13 = $i12 / 1000;

        $l14 = (long) $i13;

        l35 = $l11 + $l14;

        $r5 = new java.util.Date;

        specialinvoke $r5.<java.util.Date: void <init>(long)>(l35);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: void setAccessTime(java.util.Date)>($r5);

        $i15 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r2, 56);

        $l16 = (long) $i15;

        $l17 = 1000L * $l16;

        $i18 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r2, 60);

        $i19 = $i18 / 1000;

        $l20 = (long) $i19;

        l36 = $l17 + $l20;

        $r6 = new java.util.Date;

        specialinvoke $r6.<java.util.Date: void <init>(long)>(l36);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: void setLastModifiedDate(java.util.Date)>($r6);

        $i21 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r2, 64);

        $l22 = (long) $i21;

        $l23 = 1000L * $l22;

        $i24 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r2, 68);

        $i25 = $i24 / 1000;

        $l26 = (long) $i25;

        l37 = $l23 + $l26;

        $r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: long ctime> = l37;

        $i27 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r2, 140);

        $r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int generation> = $i27;

        $i28 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r2, 144);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: void setUserId(int)>($i28);

        $i29 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r2, 148);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: void setGroupId(int)>($i29);

        $i30 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r2, 160);

        staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: int access$302(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader,int)>(r1, $i30);

        staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: int access$402(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader,int)>(r1, 0);

        i38 = 0;

     label1:
        if i38 >= 512 goto label3;

        $i32 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: int access$300(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader)>(r1);

        if i38 >= $i32 goto label3;

        $i33 = 164 + i38;

        $b34 = r2[$i33];

        if $b34 != 0 goto label2;

        staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: int access$408(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader)>(r1);

     label2:
        i38 = i38 + 1;

        goto label1;

     label3:
        $r7 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: byte[] access$500(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader)>(r1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 164, $r7, 0, 512);

        $i31 = virtualinvoke r1.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: int getVolume()>();

        $r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int volume> = $i31;

        return $r0;
    }

    void update(byte[])
    {
        byte[] r1, $r6;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader $r2, $r3, $r4, $r5, $r7, $r8;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        byte $b4;
        int $i0, $i1, $i2, $i3, i5;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header>;

        $i0 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r1, 16);

        staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: int access$102(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader,int)>($r2, $i0);

        $r3 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header>;

        $i1 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r1, 160);

        staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: int access$302(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader,int)>($r3, $i1);

        $r4 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header>;

        staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: int access$402(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader,int)>($r4, 0);

        i5 = 0;

     label1:
        if i5 >= 512 goto label3;

        $r7 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header>;

        $i2 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: int access$300(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader)>($r7);

        if i5 >= $i2 goto label3;

        $i3 = 164 + i5;

        $b4 = r1[$i3];

        if $b4 != 0 goto label2;

        $r8 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header>;

        staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: int access$408(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader)>($r8);

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $r5 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader header>;

        $r6 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader: byte[] access$500(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader)>($r5);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 164, $r6, 0, 512);

        return;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: java.lang.String name>;

        return $r1;
    }

    java.lang.String getOriginalName()
    {
        java.lang.String $r1;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: java.lang.String originalName>;

        return $r1;
    }

    public final void setName(java.lang.String)
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        r4 := @parameter0: java.lang.String;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: java.lang.String originalName> = r4;

        if r4 == null goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z1 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $z2 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("./");

        if $z2 == 0 goto label2;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>(2);

     label2:
        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: java.lang.String name> = r4;

        return;
    }

    public java.util.Date getLastModifiedDate()
    {
        long $l0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r1;
        java.util.Date $r0;

        r1 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r0 = new java.util.Date;

        $l0 = r1.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: long mtime>;

        specialinvoke $r0.<java.util.Date: void <init>(long)>($l0);

        return $r0;
    }

    public boolean isDirectory()
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE $r1, $r2;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r2 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE type>;

        $r1 = <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE DIRECTORY>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isFile()
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE $r1, $r2;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r2 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE type>;

        $r1 = <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE FILE>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isSocket()
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE $r1, $r2;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r2 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE type>;

        $r1 = <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE SOCKET>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isChrDev()
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE $r1, $r2;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r2 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE type>;

        $r1 = <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE CHRDEV>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isBlkDev()
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE $r1, $r2;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r2 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE type>;

        $r1 = <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE BLKDEV>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isFifo()
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE $r1, $r2;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r2 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE type>;

        $r1 = <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE FIFO>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE getType()
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE $r1;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE type>;

        return $r1;
    }

    public void setType(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE)
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE r1;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        r1 := @parameter0: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE type> = r1;

        return;
    }

    public int getMode()
    {
        int $i0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $i0 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int mode>;

        return $i0;
    }

    public void setMode(int)
    {
        int i0, $i1;
        java.util.Set $r1;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        i0 := @parameter0: int;

        $i1 = i0 & 4095;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int mode> = $i1;

        $r1 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry$PERMISSION: java.util.Set find(int)>(i0);

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: java.util.Set permissions> = $r1;

        return;
    }

    public java.util.Set getPermissions()
    {
        java.util.Set $r1;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: java.util.Set permissions>;

        return $r1;
    }

    public long getSize()
    {
        long $l0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $z0 = virtualinvoke r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $l0 = -1L;

        goto label2;

     label1:
        $l0 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: long size>;

     label2:
        return $l0;
    }

    long getEntrySize()
    {
        long $l0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $l0 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: long size>;

        return $l0;
    }

    public void setSize(long)
    {
        long l0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        l0 := @parameter0: long;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: long size> = l0;

        return;
    }

    public void setLastModifiedDate(java.util.Date)
    {
        long $l0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        java.util.Date r1;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        r1 := @parameter0: java.util.Date;

        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: long mtime> = $l0;

        return;
    }

    public java.util.Date getAccessTime()
    {
        long $l0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r1;
        java.util.Date $r0;

        r1 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r0 = new java.util.Date;

        $l0 = r1.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: long atime>;

        specialinvoke $r0.<java.util.Date: void <init>(long)>($l0);

        return $r0;
    }

    public void setAccessTime(java.util.Date)
    {
        long $l0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;
        java.util.Date r1;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        r1 := @parameter0: java.util.Date;

        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: long atime> = $l0;

        return;
    }

    public int getUserId()
    {
        int $i0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $i0 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int uid>;

        return $i0;
    }

    public void setUserId(int)
    {
        int i0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        i0 := @parameter0: int;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int uid> = i0;

        return;
    }

    public int getGroupId()
    {
        int $i0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $i0 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int gid>;

        return $i0;
    }

    public void setGroupId(int)
    {
        int i0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        i0 := @parameter0: int;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int gid> = i0;

        return;
    }
}
