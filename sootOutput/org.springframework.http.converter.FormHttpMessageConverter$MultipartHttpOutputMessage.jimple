class org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage extends java.lang.Object implements org.springframework.http.HttpOutputMessage
{
    private final org.springframework.http.HttpHeaders headers;
    private final java.io.OutputStream os;
    private boolean headersWritten;
    final org.springframework.http.converter.FormHttpMessageConverter this$0;

    public void <init>(org.springframework.http.converter.FormHttpMessageConverter, java.io.OutputStream)
    {
        org.springframework.http.converter.FormHttpMessageConverter r1;
        java.io.OutputStream r3;
        org.springframework.http.HttpHeaders $r2;
        org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage r0;

        r0 := @this: org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage;

        r1 := @parameter0: org.springframework.http.converter.FormHttpMessageConverter;

        r3 := @parameter1: java.io.OutputStream;

        r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: org.springframework.http.converter.FormHttpMessageConverter this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.springframework.http.HttpHeaders;

        specialinvoke $r2.<org.springframework.http.HttpHeaders: void <init>()>();

        r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: org.springframework.http.HttpHeaders headers> = $r2;

        r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: boolean headersWritten> = 0;

        r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: java.io.OutputStream os> = r3;

        return;
    }

    public org.springframework.http.HttpHeaders getHeaders()
    {
        org.springframework.http.HttpHeaders $r1, $r2;
        org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage r0;
        boolean $z0;

        r0 := @this: org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage;

        $z0 = r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: boolean headersWritten>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: org.springframework.http.HttpHeaders headers>;

        $r2 = staticinvoke <org.springframework.http.HttpHeaders: org.springframework.http.HttpHeaders readOnlyHttpHeaders(org.springframework.http.HttpHeaders)>($r1);

        goto label2;

     label1:
        $r2 = r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: org.springframework.http.HttpHeaders headers>;

     label2:
        return $r2;
    }

    public java.io.OutputStream getBody() throws java.io.IOException
    {
        java.io.OutputStream $r1;
        org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage r0;

        r0 := @this: org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage;

        specialinvoke r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: void writeHeaders()>();

        $r1 = r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: java.io.OutputStream os>;

        return $r1;
    }

    private void writeHeaders() throws java.io.IOException
    {
        byte[] $r8, $r14;
        org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage r0;
        org.springframework.http.converter.FormHttpMessageConverter $r20, $r22;
        java.lang.String $r7, r13;
        boolean $z0, $z1, $z2;
        java.io.OutputStream $r15, $r16, $r17, $r18, $r19, $r21;
        java.util.Map$Entry r5;
        java.util.Iterator $r3, $r11;
        org.springframework.http.HttpHeaders $r1;
        java.util.Set $r2;
        java.util.List $r10;
        java.lang.Object $r4, $r6, $r9, $r12;

        r0 := @this: org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage;

        $z0 = r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: boolean headersWritten>;

        if $z0 != 0 goto label5;

        $r1 = r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: org.springframework.http.HttpHeaders headers>;

        $r2 = virtualinvoke $r1.<org.springframework.http.HttpHeaders: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        $r8 = virtualinvoke r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: byte[] getAsciiBytes(java.lang.String)>($r7);

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.util.List) $r9;

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.String) $r12;

        $r14 = virtualinvoke r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: byte[] getAsciiBytes(java.lang.String)>(r13);

        $r15 = r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: java.io.OutputStream os>;

        virtualinvoke $r15.<java.io.OutputStream: void write(byte[])>($r8);

        $r16 = r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: java.io.OutputStream os>;

        virtualinvoke $r16.<java.io.OutputStream: void write(int)>(58);

        $r17 = r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: java.io.OutputStream os>;

        virtualinvoke $r17.<java.io.OutputStream: void write(int)>(32);

        $r18 = r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: java.io.OutputStream os>;

        virtualinvoke $r18.<java.io.OutputStream: void write(byte[])>($r14);

        $r20 = r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: org.springframework.http.converter.FormHttpMessageConverter this$0>;

        $r19 = r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: java.io.OutputStream os>;

        staticinvoke <org.springframework.http.converter.FormHttpMessageConverter: void access$2(org.springframework.http.converter.FormHttpMessageConverter,java.io.OutputStream)>($r20, $r19);

     label3:
        $z2 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label2;

     label4:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r22 = r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: org.springframework.http.converter.FormHttpMessageConverter this$0>;

        $r21 = r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: java.io.OutputStream os>;

        staticinvoke <org.springframework.http.converter.FormHttpMessageConverter: void access$2(org.springframework.http.converter.FormHttpMessageConverter,java.io.OutputStream)>($r22, $r21);

        r0.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: boolean headersWritten> = 1;

     label5:
        return;
    }

    protected byte[] getAsciiBytes(java.lang.String)
    {
        byte[] $r1;
        java.lang.IllegalStateException $r3;
        org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage r4;
        java.lang.String r0;
        java.io.UnsupportedEncodingException $r2;

        r4 := @this: org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
}
