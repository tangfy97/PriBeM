public class org.codehaus.groovy.reflection.ComplexKeyHashMap extends java.lang.Object
{
    protected org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table;
    protected static final int DEFAULT_CAPACITY;
    protected static final int MINIMUM_CAPACITY;
    protected static final int MAXIMUM_CAPACITY;
    protected int size;
    protected transient int threshold;

    public void <init>()
    {
        org.codehaus.groovy.reflection.ComplexKeyHashMap r0;

        r0 := @this: org.codehaus.groovy.reflection.ComplexKeyHashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap: void init(int)>(32);

        return;
    }

    public void <init>(boolean)
    {
        org.codehaus.groovy.reflection.ComplexKeyHashMap r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.reflection.ComplexKeyHashMap;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(int)
    {
        int i0, $i1;
        org.codehaus.groovy.reflection.ComplexKeyHashMap r0;

        r0 := @this: org.codehaus.groovy.reflection.ComplexKeyHashMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = specialinvoke r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap: int capacity(int)>(i0);

        virtualinvoke r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap: void init(int)>($i1);

        return;
    }

    public static int hash(int)
    {
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, $i11;

        i5 := @parameter0: int;

        $i0 = i5 << 9;

        $i11 = (int) -1;

        $i1 = $i0 ^ $i11;

        i6 = i5 + $i1;

        $i2 = i6 >>> 14;

        i7 = i6 ^ $i2;

        $i3 = i7 << 4;

        i8 = i7 + $i3;

        $i4 = i8 >>> 10;

        i9 = i8 ^ $i4;

        return i9;
    }

    public int size()
    {
        int $i0;
        org.codehaus.groovy.reflection.ComplexKeyHashMap r0;

        r0 := @this: org.codehaus.groovy.reflection.ComplexKeyHashMap;

        $i0 = r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap: int size>;

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        org.codehaus.groovy.reflection.ComplexKeyHashMap r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.reflection.ComplexKeyHashMap;

        $i0 = r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap: int size>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clear()
    {
        org.codehaus.groovy.reflection.ComplexKeyHashMap r0;
        int $i0, i1;
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] r1;

        r0 := @this: org.codehaus.groovy.reflection.ComplexKeyHashMap;

        r1 = r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table>;

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        r1[i1] = null;

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap: int size> = 0;

        return;
    }

    public void init(int)
    {
        org.codehaus.groovy.reflection.ComplexKeyHashMap r0;
        int i0, $i1, $i2;
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] $r1;

        r0 := @this: org.codehaus.groovy.reflection.ComplexKeyHashMap;

        i0 := @parameter0: int;

        $i1 = i0 * 6;

        $i2 = $i1 / 8;

        r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap: int threshold> = $i2;

        $r1 = newarray (org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry)[i0];

        r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table> = $r1;

        return;
    }

    public void resize(int)
    {
        org.codehaus.groovy.reflection.ComplexKeyHashMap r0;
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] r1, $r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry r4, $r5, r6;

        r0 := @this: org.codehaus.groovy.reflection.ComplexKeyHashMap;

        i1 := @parameter0: int;

        r1 = r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table>;

        $r2 = r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table>;

        i0 = lengthof $r2;

        r3 = newarray (org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry)[i1];

        i7 = 0;

     label1:
        if i7 >= i0 goto label4;

        r6 = r1[i7];

     label2:
        if r6 == null goto label3;

        r4 = r6.<org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry next>;

        $i5 = r6.<org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry: int hash>;

        $i4 = i1 - 1;

        i6 = $i5 & $i4;

        $r5 = r3[i6];

        r6.<org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry next> = $r5;

        r3[i6] = r6;

        r6 = r4;

        goto label2;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table> = r3;

        $i2 = 6 * i1;

        $i3 = $i2 / 8;

        r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap: int threshold> = $i3;

        return;
    }

    private int capacity(int)
    {
        org.codehaus.groovy.reflection.ComplexKeyHashMap r0;
        int i0, $i1, i2, i3;

        r0 := @this: org.codehaus.groovy.reflection.ComplexKeyHashMap;

        i0 := @parameter0: int;

        $i1 = 8 * i0;

        i2 = $i1 / 6;

        if i2 > 268435456 goto label1;

        if i2 >= 0 goto label2;

     label1:
        i3 = 268435456;

        goto label4;

     label2:
        i3 = 4;

     label3:
        if i3 >= i2 goto label4;

        i3 = i3 << 1;

        goto label3;

     label4:
        return i3;
    }

    public org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] getTable()
    {
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] $r1;
        org.codehaus.groovy.reflection.ComplexKeyHashMap r0;

        r0 := @this: org.codehaus.groovy.reflection.ComplexKeyHashMap;

        $r1 = r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table>;

        return $r1;
    }

    public org.codehaus.groovy.reflection.ComplexKeyHashMap$EntryIterator getEntrySetIterator()
    {
        org.codehaus.groovy.reflection.ComplexKeyHashMap$1 $r0;
        org.codehaus.groovy.reflection.ComplexKeyHashMap r1;

        r1 := @this: org.codehaus.groovy.reflection.ComplexKeyHashMap;

        $r0 = new org.codehaus.groovy.reflection.ComplexKeyHashMap$1;

        specialinvoke $r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap$1: void <init>(org.codehaus.groovy.reflection.ComplexKeyHashMap)>(r1);

        return $r0;
    }

    public static void <clinit>()
    {
        <org.codehaus.groovy.reflection.ComplexKeyHashMap: int MAXIMUM_CAPACITY> = 268435456;

        <org.codehaus.groovy.reflection.ComplexKeyHashMap: int MINIMUM_CAPACITY> = 4;

        <org.codehaus.groovy.reflection.ComplexKeyHashMap: int DEFAULT_CAPACITY> = 32;

        return;
    }
}
