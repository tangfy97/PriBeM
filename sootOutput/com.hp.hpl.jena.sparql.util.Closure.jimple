public class com.hp.hpl.jena.sparql.util.Closure extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.Closure r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.Closure;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.rdf.model.Model closure(com.hp.hpl.jena.rdf.model.Statement)
    {
        com.hp.hpl.jena.rdf.model.Model $r2;
        com.hp.hpl.jena.rdf.model.Statement r0;
        com.hp.hpl.jena.sparql.util.Closure$ClosureBNode $r1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        $r1 = new com.hp.hpl.jena.sparql.util.Closure$ClosureBNode;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.util.Closure$ClosureBNode: void <init>()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.Closure: com.hp.hpl.jena.rdf.model.Model closure(com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.sparql.util.ClosureTest)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.rdf.model.Model closure(com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.sparql.util.ClosureTest)
    {
        com.hp.hpl.jena.rdf.model.Model $r2, $r3;
        com.hp.hpl.jena.rdf.model.Statement r0;
        com.hp.hpl.jena.sparql.util.ClosureTest r1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        r1 := @parameter1: com.hp.hpl.jena.sparql.util.ClosureTest;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphFactory: com.hp.hpl.jena.rdf.model.Model makeJenaDefaultModel()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.Closure: com.hp.hpl.jena.rdf.model.Model closure(com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.sparql.util.ClosureTest,com.hp.hpl.jena.rdf.model.Model)>(r0, r1, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.rdf.model.Model closure(com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r2, $r3;
        com.hp.hpl.jena.rdf.model.Statement r0;
        com.hp.hpl.jena.sparql.util.Closure$ClosureBNode $r1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r1 = new com.hp.hpl.jena.sparql.util.Closure$ClosureBNode;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.util.Closure$ClosureBNode: void <init>()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.Closure: com.hp.hpl.jena.rdf.model.Model closure(com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.sparql.util.ClosureTest,com.hp.hpl.jena.rdf.model.Model)>(r0, $r1, r2);

        return $r3;
    }

    public static com.hp.hpl.jena.rdf.model.Model closure(com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.sparql.util.ClosureTest, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r2;
        com.hp.hpl.jena.rdf.model.Statement r1;
        com.hp.hpl.jena.sparql.util.ClosureTest r3;
        java.util.ArrayList $r0;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        r3 := @parameter1: com.hp.hpl.jena.sparql.util.ClosureTest;

        r2 := @parameter2: com.hp.hpl.jena.rdf.model.Model;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.Closure: void closure(com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.rdf.model.Model,java.util.Collection,com.hp.hpl.jena.sparql.util.ClosureTest)>(r1, r2, $r0, r3);

        return r2;
    }

    public static com.hp.hpl.jena.rdf.model.Model closure(com.hp.hpl.jena.rdf.model.Resource, boolean)
    {
        com.hp.hpl.jena.rdf.model.Model $r2;
        com.hp.hpl.jena.sparql.util.Closure$ClosureBNode $r1;
        com.hp.hpl.jena.rdf.model.Resource r0;
        boolean z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        z0 := @parameter1: boolean;

        $r1 = new com.hp.hpl.jena.sparql.util.Closure$ClosureBNode;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.util.Closure$ClosureBNode: void <init>()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.Closure: com.hp.hpl.jena.rdf.model.Model closure(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.sparql.util.ClosureTest,boolean)>(r0, $r1, z0);

        return $r2;
    }

    public static com.hp.hpl.jena.rdf.model.Model closure(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.sparql.util.ClosureTest, boolean)
    {
        com.hp.hpl.jena.rdf.model.Model $r2, $r3;
        com.hp.hpl.jena.rdf.model.Resource r0;
        com.hp.hpl.jena.sparql.util.ClosureTest r1;
        boolean z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r1 := @parameter1: com.hp.hpl.jena.sparql.util.ClosureTest;

        z0 := @parameter2: boolean;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphFactory: com.hp.hpl.jena.rdf.model.Model makeJenaDefaultModel()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.Closure: com.hp.hpl.jena.rdf.model.Model closure(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.sparql.util.ClosureTest,boolean,com.hp.hpl.jena.rdf.model.Model)>(r0, r1, z0, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.rdf.model.Model closure(com.hp.hpl.jena.rdf.model.Resource, boolean, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r2, $r3;
        com.hp.hpl.jena.sparql.util.Closure$ClosureBNode $r1;
        com.hp.hpl.jena.rdf.model.Resource r0;
        boolean z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        z0 := @parameter1: boolean;

        r2 := @parameter2: com.hp.hpl.jena.rdf.model.Model;

        $r1 = new com.hp.hpl.jena.sparql.util.Closure$ClosureBNode;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.util.Closure$ClosureBNode: void <init>()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.Closure: com.hp.hpl.jena.rdf.model.Model closure(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.sparql.util.ClosureTest,boolean,com.hp.hpl.jena.rdf.model.Model)>(r0, $r1, z0, r2);

        return $r3;
    }

    public static com.hp.hpl.jena.rdf.model.Model closure(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.sparql.util.ClosureTest, boolean, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r2;
        com.hp.hpl.jena.rdf.model.Resource r1;
        com.hp.hpl.jena.sparql.util.ClosureTest r3;
        java.util.ArrayList $r0;
        boolean z0;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r3 := @parameter1: com.hp.hpl.jena.sparql.util.ClosureTest;

        z0 := @parameter2: boolean;

        r2 := @parameter3: com.hp.hpl.jena.rdf.model.Model;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        if z0 != 0 goto label1;

        staticinvoke <com.hp.hpl.jena.sparql.util.Closure: void closureNoTest(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Model,java.util.Collection,com.hp.hpl.jena.sparql.util.ClosureTest)>(r1, r2, $r0, r3);

        goto label2;

     label1:
        staticinvoke <com.hp.hpl.jena.sparql.util.Closure: void closure(com.hp.hpl.jena.rdf.model.RDFNode,com.hp.hpl.jena.rdf.model.Model,java.util.Collection,com.hp.hpl.jena.sparql.util.ClosureTest)>(r1, r2, $r0, r3);

     label2:
        return r2;
    }

    private static void closure(com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.rdf.model.Model, java.util.Collection, com.hp.hpl.jena.sparql.util.ClosureTest)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r5;
        java.util.Collection r4;
        com.hp.hpl.jena.rdf.model.Model r3;
        com.hp.hpl.jena.rdf.model.Statement r1;
        com.hp.hpl.jena.sparql.util.ClosureTest r0;
        com.hp.hpl.jena.rdf.model.Resource $r2;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        r3 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        r4 := @parameter2: java.util.Collection;

        r0 := @parameter3: com.hp.hpl.jena.sparql.util.ClosureTest;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.util.ClosureTest: boolean includeStmt(com.hp.hpl.jena.rdf.model.Statement)>(r1);

        if $z0 == 0 goto label1;

        interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model add(com.hp.hpl.jena.rdf.model.Statement)>(r1);

     label1:
        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.Closure: void closure(com.hp.hpl.jena.rdf.model.RDFNode,com.hp.hpl.jena.rdf.model.Model,java.util.Collection,com.hp.hpl.jena.sparql.util.ClosureTest)>($r2, r3, r4, r0);

        $r5 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.Closure: void closure(com.hp.hpl.jena.rdf.model.RDFNode,com.hp.hpl.jena.rdf.model.Model,java.util.Collection,com.hp.hpl.jena.sparql.util.ClosureTest)>($r5, r3, r4, r0);

        return;
    }

    private static void closure(com.hp.hpl.jena.rdf.model.RDFNode, com.hp.hpl.jena.rdf.model.Model, java.util.Collection, com.hp.hpl.jena.sparql.util.ClosureTest)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r0;
        java.util.Collection r2;
        com.hp.hpl.jena.rdf.model.Resource r1;
        com.hp.hpl.jena.rdf.model.Model r4;
        com.hp.hpl.jena.sparql.util.ClosureTest r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        r4 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter2: java.util.Collection;

        r3 := @parameter3: com.hp.hpl.jena.sparql.util.ClosureTest;

        $z0 = r0 instanceof com.hp.hpl.jena.rdf.model.Resource;

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = (com.hp.hpl.jena.rdf.model.Resource) r0;

        $z1 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return;

     label2:
        $z2 = interfaceinvoke r3.<com.hp.hpl.jena.sparql.util.ClosureTest: boolean traverse(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z2 != 0 goto label3;

        return;

     label3:
        staticinvoke <com.hp.hpl.jena.sparql.util.Closure: void closureNoTest(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Model,java.util.Collection,com.hp.hpl.jena.sparql.util.ClosureTest)>(r1, r4, r2, r3);

        return;
    }

    private static void closureNoTest(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Model, java.util.Collection, com.hp.hpl.jena.sparql.util.ClosureTest)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        java.util.Collection r0;
        com.hp.hpl.jena.rdf.model.Model r4;
        com.hp.hpl.jena.rdf.model.Statement $r3;
        com.hp.hpl.jena.rdf.model.Resource r1;
        com.hp.hpl.jena.sparql.util.ClosureTest r5;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r4 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        r0 := @parameter2: java.util.Collection;

        r5 := @parameter3: com.hp.hpl.jena.sparql.util.ClosureTest;

        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.Closure: void closure(com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.rdf.model.Model,java.util.Collection,com.hp.hpl.jena.sparql.util.ClosureTest)>($r3, r4, r0, r5);

        goto label1;

     label2:
        return;
    }

    private static java.lang.String dbg_string(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.StringBuilder $r2, $r3, $r4, $r7;
        java.lang.Object $r5;
        java.lang.String $r6, r8;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r8 = "";

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label2:
        return r8;
    }
}
