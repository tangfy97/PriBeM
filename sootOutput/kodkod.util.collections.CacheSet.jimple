public final class kodkod.util.collections.CacheSet extends java.util.AbstractSet
{
    private static final int DEFAULT_INITIAL_CAPACITY;
    private static final int MAXIMUM_CAPACITY;
    private static final float DEFAULT_LOAD_FACTOR;
    private kodkod.util.collections.CacheSet$Entry[] table;
    private int size;
    private int threshold;
    final float loadFactor;

    public void <init>()
    {
        kodkod.util.collections.CacheSet$Entry[] $r1;
        kodkod.util.collections.CacheSet r0;

        r0 := @this: kodkod.util.collections.CacheSet;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        r0.<kodkod.util.collections.CacheSet: float loadFactor> = 0.75F;

        r0.<kodkod.util.collections.CacheSet: int threshold> = 12;

        $r1 = newarray (kodkod.util.collections.CacheSet$Entry)[16];

        r0.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table> = $r1;

        return;
    }

    public void <init>(int, float)
    {
        kodkod.util.collections.CacheSet$Entry[] $r5;
        byte $b0;
        int $i1, i2, i3, $i4;
        java.lang.String $r4, $r9;
        boolean $z0;
        java.lang.IllegalArgumentException $r11, $r13;
        kodkod.util.collections.CacheSet r0;
        float f0, $f1, $f2;
        java.lang.StringBuilder $r3, $r8, $r10, $r12;

        r0 := @this: kodkod.util.collections.CacheSet;

        i2 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        if i2 >= 0 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal initial capacity: ");

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label1:
        if i2 <= 1073741824 goto label2;

        i2 = 1073741824;

     label2:
        $b0 = f0 cmpg 0.0F;

        $i4 = (int) $b0;

        if $i4 <= 0 goto label3;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label4;

     label3:
        $r13 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal load factor: ");

        $r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r13;

     label4:
        i3 = 1;

        goto label6;

     label5:
        i3 = i3 << 1;

     label6:
        if i3 < i2 goto label5;

        r0.<kodkod.util.collections.CacheSet: float loadFactor> = f0;

        $f1 = (float) i3;

        $f2 = $f1 * f0;

        $i1 = (int) $f2;

        r0.<kodkod.util.collections.CacheSet: int threshold> = $i1;

        $r5 = newarray (kodkod.util.collections.CacheSet$Entry)[i3];

        r0.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table> = $r5;

        return;
    }

    public void <init>(java.util.Collection)
    {
        int $i0;
        kodkod.util.collections.CacheSet r0;
        java.util.Collection r1;

        r0 := @this: kodkod.util.collections.CacheSet;

        r1 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke r0.<kodkod.util.collections.CacheSet: void <init>(int,float)>($i0, 0.75F);

        virtualinvoke r0.<kodkod.util.collections.CacheSet: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    private static int hash(int)
    {
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, $i11;

        i5 := @parameter0: int;

        $i0 = i5 << 9;

        $i11 = (int) -1;

        $i1 = $i0 ^ $i11;

        i6 = i5 + $i1;

        $i2 = i6 >>> 14;

        i7 = i6 ^ $i2;

        $i3 = i7 << 4;

        i8 = i7 + $i3;

        $i4 = i8 >>> 10;

        i9 = i8 ^ $i4;

        return i9;
    }

    private static int hash(java.lang.Object)
    {
        int $i0, $i1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i1 = staticinvoke <kodkod.util.collections.CacheSet: int hash(int)>($i0);

        return $i1;
    }

    private static int indexFor(int, int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i1 - 1;

        $i3 = i0 & $i2;

        return $i3;
    }

    public int size()
    {
        int $i0;
        kodkod.util.collections.CacheSet r0;

        r0 := @this: kodkod.util.collections.CacheSet;

        $i0 = r0.<kodkod.util.collections.CacheSet: int size>;

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        kodkod.util.collections.CacheSet r0;

        r0 := @this: kodkod.util.collections.CacheSet;

        $i0 = r0.<kodkod.util.collections.CacheSet: int size>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean contains(java.lang.Object)
    {
        kodkod.util.collections.CacheSet$Entry r5;
        kodkod.util.collections.CacheSet r0;
        kodkod.util.collections.CacheSet$Entry[] $r2, $r3;
        int $i0, $i1, $i2;
        java.lang.Object r1, $r4;
        boolean $z0;

        r0 := @this: kodkod.util.collections.CacheSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table>;

        $i0 = staticinvoke <kodkod.util.collections.CacheSet: int hash(java.lang.Object)>(r1);

        $r3 = r0.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table>;

        $i1 = lengthof $r3;

        $i2 = staticinvoke <kodkod.util.collections.CacheSet: int indexFor(int,int)>($i0, $i1);

        r5 = $r2[$i2];

        goto label3;

     label1:
        $r4 = r5.<kodkod.util.collections.CacheSet$Entry: java.lang.Object val>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        r5 = r5.<kodkod.util.collections.CacheSet$Entry: kodkod.util.collections.CacheSet$Entry next>;

     label3:
        if r5 != null goto label1;

        return 0;
    }

    public java.util.Iterator iterator()
    {
        kodkod.util.collections.CacheSet r1;
        kodkod.util.collections.CacheSet$SetIterator $r0;

        r1 := @this: kodkod.util.collections.CacheSet;

        $r0 = new kodkod.util.collections.CacheSet$SetIterator;

        specialinvoke $r0.<kodkod.util.collections.CacheSet$SetIterator: void <init>(kodkod.util.collections.CacheSet)>(r1);

        return $r0;
    }

    public boolean add(java.lang.Object)
    {
        kodkod.util.collections.CacheSet$Entry[] $r2, $r3, $r6, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;
        kodkod.util.collections.CacheSet$Entry $r5, $r7, r10;
        kodkod.util.collections.CacheSet r1;
        java.lang.Object r0, $r4;

        r1 := @this: kodkod.util.collections.CacheSet;

        r0 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <kodkod.util.collections.CacheSet: int hash(java.lang.Object)>(r0);

        $r2 = r1.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table>;

        $i1 = lengthof $r2;

        $i2 = staticinvoke <kodkod.util.collections.CacheSet: int indexFor(int,int)>($i0, $i1);

        $r3 = r1.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table>;

        r10 = $r3[$i2];

        goto label3;

     label1:
        $r4 = r10.<kodkod.util.collections.CacheSet$Entry: java.lang.Object val>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        r10 = r10.<kodkod.util.collections.CacheSet$Entry: kodkod.util.collections.CacheSet$Entry next>;

     label3:
        if r10 != null goto label1;

        $r8 = r1.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table>;

        $r5 = new kodkod.util.collections.CacheSet$Entry;

        $r6 = r1.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table>;

        $r7 = $r6[$i2];

        specialinvoke $r5.<kodkod.util.collections.CacheSet$Entry: void <init>(java.lang.Object,kodkod.util.collections.CacheSet$Entry)>(r0, $r7);

        $r8[$i2] = $r5;

        $i3 = r1.<kodkod.util.collections.CacheSet: int size>;

        $i4 = $i3 + 1;

        r1.<kodkod.util.collections.CacheSet: int size> = $i4;

        $i5 = r1.<kodkod.util.collections.CacheSet: int threshold>;

        if $i3 < $i5 goto label4;

        $r9 = r1.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table>;

        $i6 = lengthof $r9;

        $i7 = 2 * $i6;

        specialinvoke r1.<kodkod.util.collections.CacheSet: void resize(int)>($i7);

     label4:
        return 1;
    }

    private void resize(int)
    {
        kodkod.util.collections.CacheSet r0;
        kodkod.util.collections.CacheSet$Entry[] r1, r2;
        int i0, i1, $i2;
        float $f0, $f1, $f2;

        r0 := @this: kodkod.util.collections.CacheSet;

        i1 := @parameter0: int;

        r1 = r0.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table>;

        i0 = lengthof r1;

        if i0 != 1073741824 goto label1;

        r0.<kodkod.util.collections.CacheSet: int threshold> = 2147483647;

        return;

     label1:
        r2 = newarray (kodkod.util.collections.CacheSet$Entry)[i1];

        specialinvoke r0.<kodkod.util.collections.CacheSet: void transfer(kodkod.util.collections.CacheSet$Entry[])>(r2);

        r0.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table> = r2;

        $f1 = (float) i1;

        $f0 = r0.<kodkod.util.collections.CacheSet: float loadFactor>;

        $f2 = $f1 * $f0;

        $i2 = (int) $f2;

        r0.<kodkod.util.collections.CacheSet: int threshold> = $i2;

        return;
    }

    private void transfer(kodkod.util.collections.CacheSet$Entry[])
    {
        kodkod.util.collections.CacheSet$Entry $r4, $r5, r6;
        kodkod.util.collections.CacheSet r0;
        kodkod.util.collections.CacheSet$Entry[] r1, r2;
        int i0, $i1, $i2, i3, $i4;
        java.lang.Object $r3;

        r0 := @this: kodkod.util.collections.CacheSet;

        r2 := @parameter0: kodkod.util.collections.CacheSet$Entry[];

        r1 = r0.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table>;

        i0 = lengthof r2;

        i3 = 0;

        goto label4;

     label1:
        r6 = r1[i3];

        if r6 == null goto label3;

        r1[i3] = null;

     label2:
        $r5 = r6.<kodkod.util.collections.CacheSet$Entry: kodkod.util.collections.CacheSet$Entry next>;

        $r3 = r6.<kodkod.util.collections.CacheSet$Entry: java.lang.Object val>;

        $i1 = staticinvoke <kodkod.util.collections.CacheSet: int hash(java.lang.Object)>($r3);

        $i2 = staticinvoke <kodkod.util.collections.CacheSet: int indexFor(int,int)>($i1, i0);

        $r4 = r2[$i2];

        r6.<kodkod.util.collections.CacheSet$Entry: kodkod.util.collections.CacheSet$Entry next> = $r4;

        r2[$i2] = r6;

        r6 = $r5;

        if $r5 != null goto label2;

     label3:
        i3 = i3 + 1;

     label4:
        $i4 = lengthof r1;

        if i3 < $i4 goto label1;

        return;
    }

    public boolean remove(java.lang.Object)
    {
        kodkod.util.collections.CacheSet$Entry r4, r7, r8;
        kodkod.util.collections.CacheSet r1;
        kodkod.util.collections.CacheSet$Entry[] $r2, $r3, $r6;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object r0, $r5;
        boolean $z0;

        r1 := @this: kodkod.util.collections.CacheSet;

        r0 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <kodkod.util.collections.CacheSet: int hash(java.lang.Object)>(r0);

        $r2 = r1.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table>;

        $i1 = lengthof $r2;

        $i2 = staticinvoke <kodkod.util.collections.CacheSet: int indexFor(int,int)>($i0, $i1);

        $r3 = r1.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table>;

        r7 = $r3[$i2];

        r8 = r7;

        goto label5;

     label1:
        r4 = r8.<kodkod.util.collections.CacheSet$Entry: kodkod.util.collections.CacheSet$Entry next>;

        $r5 = r8.<kodkod.util.collections.CacheSet$Entry: java.lang.Object val>;

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label4;

        $i3 = r1.<kodkod.util.collections.CacheSet: int size>;

        $i4 = $i3 - 1;

        r1.<kodkod.util.collections.CacheSet: int size> = $i4;

        if r7 != r8 goto label2;

        $r6 = r1.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table>;

        $r6[$i2] = r4;

        goto label3;

     label2:
        r7.<kodkod.util.collections.CacheSet$Entry: kodkod.util.collections.CacheSet$Entry next> = r4;

     label3:
        return 1;

     label4:
        r7 = r8;

        r8 = r4;

     label5:
        if r8 != null goto label1;

        return 0;
    }

    public java.util.Iterator get(int)
    {
        kodkod.util.collections.CacheSet$Entry[] $r1;
        kodkod.util.collections.CacheSet$1 $r2;
        int i0, $i1, $i2, $i3;
        kodkod.util.collections.CacheSet r0;

        r0 := @this: kodkod.util.collections.CacheSet;

        i0 := @parameter0: int;

        $i1 = staticinvoke <kodkod.util.collections.CacheSet: int hash(int)>(i0);

        $r1 = r0.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table>;

        $i2 = lengthof $r1;

        $i3 = staticinvoke <kodkod.util.collections.CacheSet: int indexFor(int,int)>($i1, $i2);

        $r2 = new kodkod.util.collections.CacheSet$1;

        specialinvoke $r2.<kodkod.util.collections.CacheSet$1: void <init>(kodkod.util.collections.CacheSet,int,int)>(r0, $i3, i0);

        return $r2;
    }

    public void clear()
    {
        kodkod.util.collections.CacheSet$Entry[] $r1, $r2;
        int $i0, i1;
        kodkod.util.collections.CacheSet r0;

        r0 := @this: kodkod.util.collections.CacheSet;

        i1 = 0;

        goto label2;

     label1:
        $r2 = r0.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table>;

        $r2[i1] = null;

        i1 = i1 + 1;

     label2:
        $r1 = r0.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table>;

        $i0 = lengthof $r1;

        if i1 < $i0 goto label1;

        r0.<kodkod.util.collections.CacheSet: int size> = 0;

        return;
    }

    static kodkod.util.collections.CacheSet$Entry[] access$0(kodkod.util.collections.CacheSet)
    {
        kodkod.util.collections.CacheSet$Entry[] $r1;
        kodkod.util.collections.CacheSet r0;

        r0 := @parameter0: kodkod.util.collections.CacheSet;

        $r1 = r0.<kodkod.util.collections.CacheSet: kodkod.util.collections.CacheSet$Entry[] table>;

        return $r1;
    }

    static int access$1(kodkod.util.collections.CacheSet)
    {
        int $i0;
        kodkod.util.collections.CacheSet r0;

        r0 := @parameter0: kodkod.util.collections.CacheSet;

        $i0 = r0.<kodkod.util.collections.CacheSet: int size>;

        return $i0;
    }

    static void access$2(kodkod.util.collections.CacheSet, int)
    {
        int i0;
        kodkod.util.collections.CacheSet r0;

        r0 := @parameter0: kodkod.util.collections.CacheSet;

        i0 := @parameter1: int;

        r0.<kodkod.util.collections.CacheSet: int size> = i0;

        return;
    }

    public static void <clinit>()
    {
        <kodkod.util.collections.CacheSet: float DEFAULT_LOAD_FACTOR> = 0.75F;

        <kodkod.util.collections.CacheSet: int MAXIMUM_CAPACITY> = 1073741824;

        <kodkod.util.collections.CacheSet: int DEFAULT_INITIAL_CAPACITY> = 16;

        return;
    }
}
