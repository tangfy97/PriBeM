public class org.bouncycastle.crypto.engines.HC256Engine extends java.lang.Object implements org.bouncycastle.crypto.StreamCipher
{
    private int[] p;
    private int[] q;
    private int cnt;
    private byte[] key;
    private byte[] iv;
    private boolean initialised;
    private byte[] buf;
    private int idx;

    public void <init>()
    {
        byte[] $r3;
        int[] $r1, $r2;
        org.bouncycastle.crypto.engines.HC256Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.HC256Engine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[1024];

        r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] p> = $r1;

        $r2 = newarray (int)[1024];

        r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] q> = $r2;

        r0.<org.bouncycastle.crypto.engines.HC256Engine: int cnt> = 0;

        $r3 = newarray (byte)[4];

        r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] buf> = $r3;

        r0.<org.bouncycastle.crypto.engines.HC256Engine: int idx> = 0;

        return;
    }

    private int step()
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, i80, i81, i82, i83, i84, i85, i86;
        org.bouncycastle.crypto.engines.HC256Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.HC256Engine;

        $i0 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int cnt>;

        i1 = $i0 & 1023;

        $i2 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int cnt>;

        if $i2 >= 1024 goto label1;

        $r12 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] p>;

        $i43 = i1 - 3;

        $i44 = $i43 & 1023;

        i80 = $r12[$i44];

        $r13 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] p>;

        $i45 = i1 - 1023;

        $i46 = $i45 & 1023;

        i81 = $r13[$i46];

        $r14 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] p>;

        $i49 = $r14[i1];

        $r15 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] p>;

        $i47 = i1 - 10;

        $i48 = $i47 & 1023;

        $i50 = $r15[$i48];

        $i51 = staticinvoke <org.bouncycastle.crypto.engines.HC256Engine: int rotateRight(int,int)>(i80, 10);

        $i52 = staticinvoke <org.bouncycastle.crypto.engines.HC256Engine: int rotateRight(int,int)>(i81, 23);

        $i53 = $i51 ^ $i52;

        $i57 = $i50 + $i53;

        $r16 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] q>;

        $i54 = i80 ^ i81;

        $i55 = $i54 & 1023;

        $i56 = $r16[$i55];

        $i58 = $i57 + $i56;

        $i59 = $i49 + $i58;

        $r14[i1] = $i59;

        $r17 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] p>;

        $i60 = i1 - 12;

        $i61 = $i60 & 1023;

        i82 = $r17[$i61];

        $r18 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] q>;

        $i62 = i82 & 255;

        $i67 = $r18[$i62];

        $r19 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] q>;

        $i63 = i82 >> 8;

        $i64 = $i63 & 255;

        $i65 = $i64 + 256;

        $i66 = $r19[$i65];

        $i72 = $i67 + $i66;

        $r20 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] q>;

        $i68 = i82 >> 16;

        $i69 = $i68 & 255;

        $i70 = $i69 + 512;

        $i71 = $r20[$i70];

        $i77 = $i72 + $i71;

        $r21 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] q>;

        $i73 = i82 >> 24;

        $i74 = $i73 & 255;

        $i75 = $i74 + 768;

        $i76 = $r21[$i75];

        $i79 = $i77 + $i76;

        $r22 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] p>;

        $i78 = $r22[i1];

        i83 = $i79 ^ $i78;

        goto label2;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] q>;

        $i3 = i1 - 3;

        $i4 = $i3 & 1023;

        i84 = $r1[$i4];

        $r2 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] q>;

        $i5 = i1 - 1023;

        $i6 = $i5 & 1023;

        i85 = $r2[$i6];

        $r3 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] q>;

        $i9 = $r3[i1];

        $r4 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] q>;

        $i7 = i1 - 10;

        $i8 = $i7 & 1023;

        $i10 = $r4[$i8];

        $i11 = staticinvoke <org.bouncycastle.crypto.engines.HC256Engine: int rotateRight(int,int)>(i84, 10);

        $i12 = staticinvoke <org.bouncycastle.crypto.engines.HC256Engine: int rotateRight(int,int)>(i85, 23);

        $i13 = $i11 ^ $i12;

        $i17 = $i10 + $i13;

        $r5 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] p>;

        $i14 = i84 ^ i85;

        $i15 = $i14 & 1023;

        $i16 = $r5[$i15];

        $i18 = $i17 + $i16;

        $i19 = $i9 + $i18;

        $r3[i1] = $i19;

        $r6 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] q>;

        $i20 = i1 - 12;

        $i21 = $i20 & 1023;

        i86 = $r6[$i21];

        $r7 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] p>;

        $i22 = i86 & 255;

        $i27 = $r7[$i22];

        $r8 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] p>;

        $i23 = i86 >> 8;

        $i24 = $i23 & 255;

        $i25 = $i24 + 256;

        $i26 = $r8[$i25];

        $i32 = $i27 + $i26;

        $r9 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] p>;

        $i28 = i86 >> 16;

        $i29 = $i28 & 255;

        $i30 = $i29 + 512;

        $i31 = $r9[$i30];

        $i37 = $i32 + $i31;

        $r10 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] p>;

        $i33 = i86 >> 24;

        $i34 = $i33 & 255;

        $i35 = $i34 + 768;

        $i36 = $r10[$i35];

        $i39 = $i37 + $i36;

        $r11 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] q>;

        $i38 = $r11[i1];

        i83 = $i39 ^ $i38;

     label2:
        $i40 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int cnt>;

        $i41 = $i40 + 1;

        $i42 = $i41 & 2047;

        r0.<org.bouncycastle.crypto.engines.HC256Engine: int cnt> = $i42;

        return i83;
    }

    private void init()
    {
        byte[] $r1, $r2, $r3, $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r20, r22, r23;
        byte $b28, $b36;
        short $s31, $s39, $s55, $s57;
        int[] $r5, $r6, $r14;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i32, $i33, $i34, $i35, $i37, $i38, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, i51, i52, i53, i54, $i56, $i58;
        org.bouncycastle.crypto.engines.HC256Engine r0;
        java.lang.IllegalArgumentException $r24, $r25;

        r0 := @this: org.bouncycastle.crypto.engines.HC256Engine;

        $r1 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] key>;

        $i0 = lengthof $r1;

        if $i0 == 32 goto label01;

        $r20 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] key>;

        $i50 = lengthof $r20;

        if $i50 == 16 goto label01;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The key must be 128/256 bits long");

        throw $r24;

     label01:
        $r2 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] iv>;

        $i1 = lengthof $r2;

        if $i1 >= 16 goto label02;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The IV must be at least 128 bits long");

        throw $r25;

     label02:
        $r3 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] key>;

        $i2 = lengthof $r3;

        if $i2 == 32 goto label03;

        r22 = newarray (byte)[32];

        $r16 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] key>;

        $r15 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] key>;

        $i48 = lengthof $r15;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, 0, r22, 0, $i48);

        $r18 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] key>;

        $r17 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] key>;

        $i49 = lengthof $r17;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r18, 0, r22, 16, $i49);

        r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] key> = r22;

     label03:
        $r4 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] iv>;

        $i3 = lengthof $r4;

        if $i3 >= 32 goto label04;

        r23 = newarray (byte)[32];

        $r10 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] iv>;

        $r9 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] iv>;

        $i43 = lengthof $r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r23, 0, $i43);

        $r13 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] iv>;

        $r11 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] iv>;

        $i47 = lengthof $r11;

        $i45 = lengthof r23;

        $r12 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] iv>;

        $i44 = lengthof $r12;

        $i46 = $i45 - $i44;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, r23, $i47, $i46);

        r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] iv> = r23;

     label04:
        r0.<org.bouncycastle.crypto.engines.HC256Engine: int cnt> = 0;

        $r14 = newarray (int)[2560];

        i51 = 0;

     label05:
        if i51 >= 32 goto label06;

        $i35 = i51 >> 2;

        $i41 = $r14[$i35];

        $r8 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] key>;

        $b36 = $r8[i51];

        $s55 = (short) $b36;

        $s39 = $s55 & 255;

        $i37 = i51 & 3;

        $i38 = 8 * $i37;

        $i56 = (int) $s39;

        $i40 = $i56 << $i38;

        $i42 = $i41 | $i40;

        $r14[$i35] = $i42;

        i51 = i51 + 1;

        goto label05;

     label06:
        i52 = 0;

     label07:
        if i52 >= 32 goto label08;

        $i26 = i52 >> 2;

        $i27 = $i26 + 8;

        $i33 = $r14[$i27];

        $r7 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] iv>;

        $b28 = $r7[i52];

        $s57 = (short) $b28;

        $s31 = $s57 & 255;

        $i29 = i52 & 3;

        $i30 = 8 * $i29;

        $i58 = (int) $s31;

        $i32 = $i58 << $i30;

        $i34 = $i33 | $i32;

        $r14[$i27] = $i34;

        i52 = i52 + 1;

        goto label07;

     label08:
        i53 = 16;

     label09:
        if i53 >= 2560 goto label10;

        $i4 = i53 - 2;

        i5 = $r14[$i4];

        $i6 = i53 - 15;

        i7 = $r14[$i6];

        $i8 = staticinvoke <org.bouncycastle.crypto.engines.HC256Engine: int rotateRight(int,int)>(i5, 17);

        $i9 = staticinvoke <org.bouncycastle.crypto.engines.HC256Engine: int rotateRight(int,int)>(i5, 19);

        $i11 = $i8 ^ $i9;

        $i10 = i5 >>> 10;

        $i14 = $i11 ^ $i10;

        $i12 = i53 - 7;

        $i13 = $r14[$i12];

        $i15 = $i14 + $i13;

        $i16 = staticinvoke <org.bouncycastle.crypto.engines.HC256Engine: int rotateRight(int,int)>(i7, 7);

        $i17 = staticinvoke <org.bouncycastle.crypto.engines.HC256Engine: int rotateRight(int,int)>(i7, 18);

        $i19 = $i16 ^ $i17;

        $i18 = i7 >>> 3;

        $i20 = $i19 ^ $i18;

        $i23 = $i15 + $i20;

        $i21 = i53 - 16;

        $i22 = $r14[$i21];

        $i24 = $i23 + $i22;

        $i25 = $i24 + i53;

        $r14[i53] = $i25;

        i53 = i53 + 1;

        goto label09;

     label10:
        $r5 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] p>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 512, $r5, 0, 1024);

        $r6 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int[] q>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 1536, $r6, 0, 1024);

        i54 = 0;

     label11:
        if i54 >= 4096 goto label12;

        specialinvoke r0.<org.bouncycastle.crypto.engines.HC256Engine: int step()>();

        i54 = i54 + 1;

        goto label11;

     label12:
        r0.<org.bouncycastle.crypto.engines.HC256Engine: int cnt> = 0;

        return;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.engines.HC256Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.HC256Engine;

        return "HC-256";
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        byte[] $r2, $r11, $r13;
        org.bouncycastle.crypto.params.ParametersWithIV $r12, $r14;
        java.lang.String $r7, $r9;
        org.bouncycastle.crypto.params.KeyParameter $r10;
        org.bouncycastle.crypto.CipherParameters r0, r15;
        boolean $z0, $z1, z2;
        org.bouncycastle.crypto.engines.HC256Engine r1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r8;
        java.lang.Class $r6;

        r1 := @this: org.bouncycastle.crypto.engines.HC256Engine;

        z2 := @parameter0: boolean;

        r0 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        r15 = r0;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label1;

        $r12 = (org.bouncycastle.crypto.params.ParametersWithIV) r0;

        $r13 = virtualinvoke $r12.<org.bouncycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        r1.<org.bouncycastle.crypto.engines.HC256Engine: byte[] iv> = $r13;

        $r14 = (org.bouncycastle.crypto.params.ParametersWithIV) r0;

        r15 = virtualinvoke $r14.<org.bouncycastle.crypto.params.ParametersWithIV: org.bouncycastle.crypto.CipherParameters getParameters()>();

        goto label2;

     label1:
        $r2 = newarray (byte)[0];

        r1.<org.bouncycastle.crypto.engines.HC256Engine: byte[] iv> = $r2;

     label2:
        $z1 = r15 instanceof org.bouncycastle.crypto.params.KeyParameter;

        if $z1 == 0 goto label3;

        $r10 = (org.bouncycastle.crypto.params.KeyParameter) r15;

        $r11 = virtualinvoke $r10.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        r1.<org.bouncycastle.crypto.engines.HC256Engine: byte[] key> = $r11;

        specialinvoke r1.<org.bouncycastle.crypto.engines.HC256Engine: void init()>();

        goto label4;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid parameter passed to HC256 init - ");

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label4:
        r1.<org.bouncycastle.crypto.engines.HC256Engine: boolean initialised> = 1;

        return;
    }

    private byte getByte()
    {
        byte[] $r1, $r2, $r3, $r4, $r5;
        byte $b7, $b9, $b11, $b13, $b14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i12, i15, i16, i17;
        org.bouncycastle.crypto.engines.HC256Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.HC256Engine;

        $i0 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int idx>;

        if $i0 != 0 goto label1;

        $i5 = specialinvoke r0.<org.bouncycastle.crypto.engines.HC256Engine: int step()>();

        $r2 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] buf>;

        $i6 = $i5 & 255;

        $b7 = (byte) $i6;

        $r2[0] = $b7;

        i15 = $i5 >> 8;

        $r3 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] buf>;

        $i8 = i15 & 255;

        $b9 = (byte) $i8;

        $r3[1] = $b9;

        i16 = i15 >> 8;

        $r4 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] buf>;

        $i10 = i16 & 255;

        $b11 = (byte) $i10;

        $r4[2] = $b11;

        i17 = i16 >> 8;

        $r5 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] buf>;

        $i12 = i17 & 255;

        $b13 = (byte) $i12;

        $r5[3] = $b13;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.engines.HC256Engine: byte[] buf>;

        $i1 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int idx>;

        $b14 = $r1[$i1];

        $i2 = r0.<org.bouncycastle.crypto.engines.HC256Engine: int idx>;

        $i3 = $i2 + 1;

        $i4 = $i3 & 3;

        r0.<org.bouncycastle.crypto.engines.HC256Engine: int idx> = $i4;

        return $b14;
    }

    public void processBytes(byte[], int, int, byte[], int) throws org.bouncycastle.crypto.DataLengthException
    {
        byte[] r1, r2;
        java.lang.IllegalStateException $r5;
        org.bouncycastle.crypto.DataLengthException $r3, $r4;
        byte $b9, $b10, $b11, $b12;
        int i0, i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, i13;
        java.lang.String $r7, $r10;
        org.bouncycastle.crypto.engines.HC256Engine r0;
        boolean $z0;
        java.lang.StringBuilder $r6, $r8, $r9;

        r0 := @this: org.bouncycastle.crypto.engines.HC256Engine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i4 := @parameter4: int;

        $z0 = r0.<org.bouncycastle.crypto.engines.HC256Engine: boolean initialised>;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r0.<org.bouncycastle.crypto.engines.HC256Engine: java.lang.String getAlgorithmName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not initialised");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $i3 = i0 + i1;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label2;

        $r4 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r4;

     label2:
        $i6 = i4 + i1;

        $i5 = lengthof r2;

        if $i6 <= $i5 goto label3;

        $r3 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r3;

     label3:
        i13 = 0;

     label4:
        if i13 >= i1 goto label5;

        $i8 = i4 + i13;

        $i7 = i0 + i13;

        $b9 = r1[$i7];

        $b10 = specialinvoke r0.<org.bouncycastle.crypto.engines.HC256Engine: byte getByte()>();

        $b11 = $b9 ^ $b10;

        $b12 = (byte) $b11;

        r2[$i8] = $b12;

        i13 = i13 + 1;

        goto label4;

     label5:
        return;
    }

    public void reset()
    {
        org.bouncycastle.crypto.engines.HC256Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.HC256Engine;

        r0.<org.bouncycastle.crypto.engines.HC256Engine: int idx> = 0;

        specialinvoke r0.<org.bouncycastle.crypto.engines.HC256Engine: void init()>();

        return;
    }

    public byte returnByte(byte)
    {
        byte b0, $b1, $b2, $b3;
        org.bouncycastle.crypto.engines.HC256Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.HC256Engine;

        b0 := @parameter0: byte;

        $b1 = specialinvoke r0.<org.bouncycastle.crypto.engines.HC256Engine: byte getByte()>();

        $b2 = b0 ^ $b1;

        $b3 = (byte) $b2;

        return $b3;
    }

    private static int rotateRight(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = i0 >>> i1;

        $i2 = neg i1;

        $i3 = i0 << $i2;

        $i5 = $i4 | $i3;

        return $i5;
    }
}
