public abstract class com.sun.lwuit.impl.LWUITImplementation extends java.lang.Object
{
    private static final char RTL_RANGE_BEGIN;
    private static final char RTL_RANGE_END;
    private java.util.Hashtable linearGradientCache;
    private java.util.Hashtable radialGradientCache;
    private int dragActivationCounter;
    private int dragActivationX;
    private int dragActivationY;
    private int dragStartPercentage;
    private com.sun.lwuit.Form currentForm;
    private static java.lang.Object displayLock;
    private com.sun.lwuit.animations.Animation[] paintQueue;
    private com.sun.lwuit.animations.Animation[] paintQueueTemp;
    private int paintQueueFill;
    private com.sun.lwuit.Graphics lwuitGraphics;
    private boolean bidi;
    private int[] xPointerEvent;
    private int[] yPointerEvent;
    private int pointerPressedX;
    private int pointerPressedY;

    public void <init>()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int[] $r3, $r4;
        com.sun.lwuit.animations.Animation[] $r1, $r2;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationCounter> = 0;

        r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationX> = 0;

        r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationY> = 0;

        r0.<com.sun.lwuit.impl.LWUITImplementation: int dragStartPercentage> = 3;

        $r1 = newarray (com.sun.lwuit.animations.Animation)[50];

        r0.<com.sun.lwuit.impl.LWUITImplementation: com.sun.lwuit.animations.Animation[] paintQueue> = $r1;

        $r2 = newarray (com.sun.lwuit.animations.Animation)[50];

        r0.<com.sun.lwuit.impl.LWUITImplementation: com.sun.lwuit.animations.Animation[] paintQueueTemp> = $r2;

        r0.<com.sun.lwuit.impl.LWUITImplementation: int paintQueueFill> = 0;

        $r3 = newarray (int)[1];

        r0.<com.sun.lwuit.impl.LWUITImplementation: int[] xPointerEvent> = $r3;

        $r4 = newarray (int)[1];

        r0.<com.sun.lwuit.impl.LWUITImplementation: int[] yPointerEvent> = $r4;

        return;
    }

    public abstract void init(java.lang.Object);

    public void playDialogSound(int)
    {
        int i0;
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        i0 := @parameter0: int;

        return;
    }

    public void vibrate(int)
    {
        int i0;
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        i0 := @parameter0: int;

        return;
    }

    public void flashBacklight(int)
    {
        int i0;
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        i0 := @parameter0: int;

        return;
    }

    public abstract int getDisplayWidth();

    public abstract int getDisplayHeight();

    public boolean handleEDTException(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Throwable;

        return 0;
    }

    public abstract void editString(com.sun.lwuit.Component, int, int, java.lang.String);

    public void saveTextEditingState()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return;
    }

    public boolean hasPendingPaints()
    {
        int $i0;
        com.sun.lwuit.impl.LWUITImplementation r0;
        boolean $z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        $i0 = r0.<com.sun.lwuit.impl.LWUITImplementation: int paintQueueFill>;

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object getVideoControl(java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        return null;
    }

    public int numAlphaLevels()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 255;
    }

    public int numColors()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 65536;
    }

    protected void paintOverlay(com.sun.lwuit.Graphics)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        com.sun.lwuit.Graphics r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: com.sun.lwuit.Graphics;

        return;
    }

    public void paintDirty()
    {
        com.sun.lwuit.animations.Animation[] $r2, $r4, $r6, r12;
        com.sun.lwuit.Component r7;
        com.sun.lwuit.animations.Animation r5;
        boolean $z0;
        java.lang.Throwable $r11;
        com.sun.lwuit.Graphics $r3;
        com.sun.lwuit.geom.Rectangle $r8;
        com.sun.lwuit.geom.Dimension $r9, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i24, i25, i26, i27;
        com.sun.lwuit.impl.LWUITImplementation r1;
        java.lang.Object $r0;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        $r0 = <com.sun.lwuit.impl.LWUITImplementation: java.lang.Object displayLock>;

        entermonitor $r0;

     label01:
        i22 = r1.<com.sun.lwuit.impl.LWUITImplementation: int paintQueueFill>;

        r12 = r1.<com.sun.lwuit.impl.LWUITImplementation: com.sun.lwuit.animations.Animation[] paintQueue>;

        $r2 = r1.<com.sun.lwuit.impl.LWUITImplementation: com.sun.lwuit.animations.Animation[] paintQueueTemp>;

        r1.<com.sun.lwuit.impl.LWUITImplementation: com.sun.lwuit.animations.Animation[] paintQueue> = $r2;

        r1.<com.sun.lwuit.impl.LWUITImplementation: com.sun.lwuit.animations.Animation[] paintQueueTemp> = r12;

        r1.<com.sun.lwuit.impl.LWUITImplementation: int paintQueueFill> = 0;

        exitmonitor $r0;

     label02:
        goto label05;

     label03:
        $r11 := @caughtexception;

        exitmonitor $r0;

     label04:
        throw $r11;

     label05:
        if i22 <= 0 goto label11;

        $r3 = virtualinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: com.sun.lwuit.Graphics getLWUITGraphics()>();

        i23 = virtualinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: int getDisplayWidth()>();

        i24 = virtualinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: int getDisplayHeight()>();

        i25 = 0;

        i26 = 0;

        i27 = 0;

     label06:
        if i27 >= i22 goto label10;

        $r4 = r1.<com.sun.lwuit.impl.LWUITImplementation: com.sun.lwuit.animations.Animation[] paintQueueTemp>;

        r5 = $r4[i27];

        $r6 = r1.<com.sun.lwuit.impl.LWUITImplementation: com.sun.lwuit.animations.Animation[] paintQueueTemp>;

        $r6[i27] = null;

        $i2 = virtualinvoke $r3.<com.sun.lwuit.Graphics: int getTranslateX()>();

        $i3 = neg $i2;

        $i4 = virtualinvoke $r3.<com.sun.lwuit.Graphics: int getTranslateY()>();

        $i5 = neg $i4;

        virtualinvoke $r3.<com.sun.lwuit.Graphics: void translate(int,int)>($i3, $i5);

        $i6 = virtualinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: int getDisplayWidth()>();

        $i7 = virtualinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: int getDisplayHeight()>();

        virtualinvoke $r3.<com.sun.lwuit.Graphics: void setClip(int,int,int,int)>(0, 0, $i6, $i7);

        $z0 = r5 instanceof com.sun.lwuit.Component;

        if $z0 == 0 goto label08;

        r7 = (com.sun.lwuit.Component) r5;

        $r8 = virtualinvoke r7.<com.sun.lwuit.Component: com.sun.lwuit.geom.Rectangle getDirtyRegion()>();

        if $r8 == null goto label07;

        $i16 = virtualinvoke $r8.<com.sun.lwuit.geom.Rectangle: int getX()>();

        $i17 = virtualinvoke $r8.<com.sun.lwuit.geom.Rectangle: int getY()>();

        $r9 = virtualinvoke $r8.<com.sun.lwuit.geom.Rectangle: com.sun.lwuit.geom.Dimension getSize()>();

        $i18 = virtualinvoke $r9.<com.sun.lwuit.geom.Dimension: int getWidth()>();

        $r10 = virtualinvoke $r8.<com.sun.lwuit.geom.Rectangle: com.sun.lwuit.geom.Dimension getSize()>();

        $i19 = virtualinvoke $r10.<com.sun.lwuit.geom.Dimension: int getHeight()>();

        virtualinvoke $r3.<com.sun.lwuit.Graphics: void setClip(int,int,int,int)>($i16, $i17, $i18, $i19);

        virtualinvoke r7.<com.sun.lwuit.Component: void setDirtyRegion(com.sun.lwuit.geom.Rectangle)>(null);

     label07:
        virtualinvoke r7.<com.sun.lwuit.Component: void paintComponent(com.sun.lwuit.Graphics)>($r3);

        $i8 = virtualinvoke r7.<com.sun.lwuit.Component: int getAbsoluteX()>();

        $i9 = virtualinvoke r7.<com.sun.lwuit.Component: int getScrollX()>();

        $i20 = $i8 + $i9;

        i23 = staticinvoke <java.lang.Math: int min(int,int)>($i20, i23);

        $i10 = virtualinvoke r7.<com.sun.lwuit.Component: int getWidth()>();

        $i11 = $i20 + $i10;

        i25 = staticinvoke <java.lang.Math: int max(int,int)>($i11, i25);

        $i12 = virtualinvoke r7.<com.sun.lwuit.Component: int getAbsoluteY()>();

        $i13 = virtualinvoke r7.<com.sun.lwuit.Component: int getScrollY()>();

        $i21 = $i12 + $i13;

        i24 = staticinvoke <java.lang.Math: int min(int,int)>($i21, i24);

        $i14 = virtualinvoke r7.<com.sun.lwuit.Component: int getHeight()>();

        $i15 = $i21 + $i14;

        i26 = staticinvoke <java.lang.Math: int max(int,int)>($i15, i26);

        goto label09;

     label08:
        i25 = virtualinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: int getDisplayWidth()>();

        i26 = virtualinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: int getDisplayHeight()>();

        i23 = 0;

        i24 = 0;

        interfaceinvoke r5.<com.sun.lwuit.animations.Animation: void paint(com.sun.lwuit.Graphics)>($r3);

     label09:
        i27 = i27 + 1;

        goto label06;

     label10:
        virtualinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: void paintOverlay(com.sun.lwuit.Graphics)>($r3);

        $i1 = i25 - i23;

        $i0 = i26 - i24;

        virtualinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: void flushGraphics(int,int,int,int)>(i23, i24, $i1, $i0);

     label11:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
    }

    public void edtIdle(boolean)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        boolean z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        z0 := @parameter0: boolean;

        return;
    }

    public abstract void flushGraphics(int, int, int, int);

    public abstract void flushGraphics();

    protected com.sun.lwuit.Graphics getLWUITGraphics()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        com.sun.lwuit.Graphics $r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        $r1 = r0.<com.sun.lwuit.impl.LWUITImplementation: com.sun.lwuit.Graphics lwuitGraphics>;

        return $r1;
    }

    public void setLWUITGraphics(com.sun.lwuit.Graphics)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        com.sun.lwuit.Graphics r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: com.sun.lwuit.Graphics;

        r0.<com.sun.lwuit.impl.LWUITImplementation: com.sun.lwuit.Graphics lwuitGraphics> = r1;

        return;
    }

    public void setDisplayLock(java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r1;
        java.lang.Object r0;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r0 := @parameter0: java.lang.Object;

        <com.sun.lwuit.impl.LWUITImplementation: java.lang.Object displayLock> = r0;

        return;
    }

    public java.lang.Object getDisplayLock()
    {
        com.sun.lwuit.impl.LWUITImplementation r1;
        java.lang.Object $r0;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        $r0 = <com.sun.lwuit.impl.LWUITImplementation: java.lang.Object displayLock>;

        return $r0;
    }

    public void repaint(com.sun.lwuit.animations.Animation)
    {
        java.lang.Throwable $r9;
        com.sun.lwuit.animations.Animation[] $r2, $r4, $r7;
        com.sun.lwuit.animations.Animation r3, r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.io.PrintStream $r6;
        com.sun.lwuit.impl.LWUITImplementation r1;
        java.lang.Object $r0, $r5;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r3 := @parameter0: com.sun.lwuit.animations.Animation;

        $r0 = <com.sun.lwuit.impl.LWUITImplementation: java.lang.Object displayLock>;

        entermonitor $r0;

     label01:
        i6 = 0;

     label02:
        $i0 = r1.<com.sun.lwuit.impl.LWUITImplementation: int paintQueueFill>;

        if i6 >= $i0 goto label05;

        $r7 = r1.<com.sun.lwuit.impl.LWUITImplementation: com.sun.lwuit.animations.Animation[] paintQueue>;

        r8 = $r7[i6];

        if r8 != r3 goto label04;

        exitmonitor $r0;

     label03:
        return;

     label04:
        i6 = i6 + 1;

        goto label02;

     label05:
        $i2 = r1.<com.sun.lwuit.impl.LWUITImplementation: int paintQueueFill>;

        $r2 = r1.<com.sun.lwuit.impl.LWUITImplementation: com.sun.lwuit.animations.Animation[] paintQueue>;

        $i1 = lengthof $r2;

        if $i2 < $i1 goto label07;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Warning paint queue size exceeded, please watch the amount of repaint calls");

        exitmonitor $r0;

     label06:
        return;

     label07:
        $r4 = r1.<com.sun.lwuit.impl.LWUITImplementation: com.sun.lwuit.animations.Animation[] paintQueue>;

        $i3 = r1.<com.sun.lwuit.impl.LWUITImplementation: int paintQueueFill>;

        $r4[$i3] = r3;

        $i4 = r1.<com.sun.lwuit.impl.LWUITImplementation: int paintQueueFill>;

        $i5 = $i4 + 1;

        r1.<com.sun.lwuit.impl.LWUITImplementation: int paintQueueFill> = $i5;

        $r5 = <com.sun.lwuit.impl.LWUITImplementation: java.lang.Object displayLock>;

        virtualinvoke $r5.<java.lang.Object: void notify()>();

        exitmonitor $r0;

     label08:
        goto label11;

     label09:
        $r9 := @caughtexception;

        exitmonitor $r0;

     label10:
        throw $r9;

     label11:
        return;

        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public abstract void getRGB(java.lang.Object, int[], int, int, int, int, int);

    public abstract java.lang.Object createImage(int[], int, int);

    public abstract java.lang.Object createImage(java.lang.String) throws java.io.IOException;

    public abstract java.lang.Object createImage(java.io.InputStream) throws java.io.IOException;

    public abstract java.lang.Object createMutableImage(int, int, int);

    public boolean isAlphaMutableImageSupported()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public abstract java.lang.Object createImage(byte[], int, int);

    public abstract int getImageWidth(java.lang.Object);

    public abstract int getImageHeight(java.lang.Object);

    public abstract java.lang.Object scale(java.lang.Object, int, int);

    private static int round(double)
    {
        byte $b0;
        int $i1, $i2, $i3;
        double d0, $d1, $d2, $d3, $d4;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>(d0);

        $d2 = staticinvoke <java.lang.Math: double ceil(double)>(d0);

        $d4 = $d2 - d0;

        $d3 = d0 - $d1;

        $b0 = $d4 cmpg $d3;

        $i3 = (int) $b0;

        if $i3 >= 0 goto label1;

        $i2 = (int) $d2;

        return $i2;

     label1:
        $i1 = (int) $d1;

        return $i1;
    }

    public java.lang.Object rotate(java.lang.Object, int)
    {
        int[] r2, r3;
        int $i0, $i1, $i2, $i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, $i19, i20, i21;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1, $r4;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        i6 := @parameter1: int;

        $i0 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getImageWidth(java.lang.Object)>(r1);

        $i1 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getImageHeight(java.lang.Object)>(r1);

        $i2 = $i0 * $i1;

        r2 = newarray (int)[$i2];

        $i3 = lengthof r2;

        r3 = newarray (int)[$i3];

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void getRGB(java.lang.Object,int[],int,int,int,int,int)>(r1, r2, 0, 0, 0, $i0, $i1);

        i4 = $i0 / 2;

        i5 = $i1 / 2;

        $i7 = neg i6;

        $d0 = (double) $i7;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        i20 = 0;

     label1:
        if i20 >= $i0 goto label5;

        i21 = 0;

     label2:
        if i21 >= $i1 goto label4;

        $i8 = i20 - i4;

        $d4 = (double) $i8;

        $d7 = $d2 * $d4;

        $i9 = i21 - i5;

        $d5 = (double) $i9;

        $d6 = $d3 * $d5;

        $d9 = $d7 - $d6;

        $d8 = (double) i4;

        $d10 = $d9 + $d8;

        $i10 = staticinvoke <com.sun.lwuit.impl.LWUITImplementation: int round(double)>($d10);

        $i11 = i20 - i4;

        $d11 = (double) $i11;

        $d14 = $d3 * $d11;

        $i12 = i21 - i5;

        $d12 = (double) $i12;

        $d13 = $d2 * $d12;

        $d16 = $d14 + $d13;

        $d15 = (double) i5;

        $d17 = $d16 + $d15;

        $i13 = staticinvoke <com.sun.lwuit.impl.LWUITImplementation: int round(double)>($d17);

        if $i10 < 0 goto label3;

        if $i13 < 0 goto label3;

        if $i10 >= $i0 goto label3;

        if $i13 >= $i1 goto label3;

        $i14 = $i13 * $i0;

        i15 = $i10 + $i14;

        if i15 < 0 goto label3;

        $i16 = lengthof r3;

        if i15 >= $i16 goto label3;

        $i17 = i21 * $i0;

        $i19 = i20 + $i17;

        $i18 = r2[i15];

        r3[$i19] = $i18;

     label3:
        i21 = i21 + 1;

        goto label2;

     label4:
        i20 = i20 + 1;

        goto label1;

     label5:
        $r4 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: java.lang.Object createImage(int[],int,int)>(r3, $i0, $i1);

        return $r4;
    }

    public abstract int getSoftkeyCount();

    public abstract int[] getSoftkeyCode(int);

    public abstract int getClearKeyCode();

    public abstract int getBackspaceKeyCode();

    public abstract int getBackKeyCode();

    public abstract int getGameAction(int);

    public abstract int getKeyCode(int);

    public abstract boolean isTouchDevice();

    public void setCurrentForm(com.sun.lwuit.Form)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        com.sun.lwuit.Form r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: com.sun.lwuit.Form;

        r0.<com.sun.lwuit.impl.LWUITImplementation: com.sun.lwuit.Form currentForm> = r1;

        return;
    }

    public void confirmControlView()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return;
    }

    public com.sun.lwuit.Form getCurrentForm()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        com.sun.lwuit.Form $r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        $r1 = r0.<com.sun.lwuit.impl.LWUITImplementation: com.sun.lwuit.Form currentForm>;

        return $r1;
    }

    public boolean isTranslationSupported()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public void translate(java.lang.Object, int, int)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int i0, i1;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public int getTranslateX(java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public int getTranslateY(java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public abstract int getColor(java.lang.Object);

    public abstract void setColor(java.lang.Object, int);

    public abstract void setAlpha(java.lang.Object, int);

    public abstract int getAlpha(java.lang.Object);

    public boolean isAlphaGlobal()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public boolean isAntiAliasingSupported()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public boolean isAntiAliasedTextSupported()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public void setAntiAliased(java.lang.Object, boolean)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;
        boolean z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        return;
    }

    public boolean isAntiAliased(java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public void setAntiAliasedText(java.lang.Object, boolean)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;
        boolean z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        return;
    }

    public boolean isAntiAliasedText(java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public abstract void setNativeFont(java.lang.Object, java.lang.Object);

    public com.sun.lwuit.geom.Rectangle getClipRect(java.lang.Object)
    {
        com.sun.lwuit.geom.Rectangle $r0;
        com.sun.lwuit.impl.LWUITImplementation r1;
        com.sun.lwuit.geom.Dimension $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r2;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r2 := @parameter0: java.lang.Object;

        $r0 = new com.sun.lwuit.geom.Rectangle;

        $i0 = virtualinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: int getClipX(java.lang.Object)>(r2);

        $i1 = virtualinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: int getClipY(java.lang.Object)>(r2);

        $r3 = new com.sun.lwuit.geom.Dimension;

        $i2 = virtualinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: int getClipWidth(java.lang.Object)>(r2);

        $i3 = virtualinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: int getClipHeight(java.lang.Object)>(r2);

        specialinvoke $r3.<com.sun.lwuit.geom.Dimension: void <init>(int,int)>($i2, $i3);

        specialinvoke $r0.<com.sun.lwuit.geom.Rectangle: void <init>(int,int,com.sun.lwuit.geom.Dimension)>($i0, $i1, $r3);

        return $r0;
    }

    public abstract int getClipX(java.lang.Object);

    public abstract int getClipY(java.lang.Object);

    public abstract int getClipWidth(java.lang.Object);

    public abstract int getClipHeight(java.lang.Object);

    public void setClipRect(java.lang.Object, com.sun.lwuit.geom.Rectangle)
    {
        com.sun.lwuit.geom.Rectangle r0;
        com.sun.lwuit.impl.LWUITImplementation r2;
        com.sun.lwuit.geom.Dimension $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r3;

        r2 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r3 := @parameter0: java.lang.Object;

        r0 := @parameter1: com.sun.lwuit.geom.Rectangle;

        $r1 = virtualinvoke r0.<com.sun.lwuit.geom.Rectangle: com.sun.lwuit.geom.Dimension getSize()>();

        $i0 = virtualinvoke r0.<com.sun.lwuit.geom.Rectangle: int getX()>();

        $i1 = virtualinvoke r0.<com.sun.lwuit.geom.Rectangle: int getY()>();

        $i2 = virtualinvoke $r1.<com.sun.lwuit.geom.Dimension: int getWidth()>();

        $i3 = virtualinvoke $r1.<com.sun.lwuit.geom.Dimension: int getHeight()>();

        virtualinvoke r2.<com.sun.lwuit.impl.LWUITImplementation: void setClip(java.lang.Object,int,int,int,int)>(r3, $i0, $i1, $i2, $i3);

        return;
    }

    public abstract void setClip(java.lang.Object, int, int, int, int);

    public void clipRect(java.lang.Object, com.sun.lwuit.geom.Rectangle)
    {
        com.sun.lwuit.geom.Rectangle r0;
        com.sun.lwuit.impl.LWUITImplementation r2;
        com.sun.lwuit.geom.Dimension $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r3;

        r2 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r3 := @parameter0: java.lang.Object;

        r0 := @parameter1: com.sun.lwuit.geom.Rectangle;

        $r1 = virtualinvoke r0.<com.sun.lwuit.geom.Rectangle: com.sun.lwuit.geom.Dimension getSize()>();

        $i0 = virtualinvoke r0.<com.sun.lwuit.geom.Rectangle: int getX()>();

        $i1 = virtualinvoke r0.<com.sun.lwuit.geom.Rectangle: int getY()>();

        $i2 = virtualinvoke $r1.<com.sun.lwuit.geom.Dimension: int getWidth()>();

        $i3 = virtualinvoke $r1.<com.sun.lwuit.geom.Dimension: int getHeight()>();

        virtualinvoke r2.<com.sun.lwuit.impl.LWUITImplementation: void clipRect(java.lang.Object,int,int,int,int)>(r3, $i0, $i1, $i2, $i3);

        return;
    }

    public abstract void clipRect(java.lang.Object, int, int, int, int);

    public abstract void drawLine(java.lang.Object, int, int, int, int);

    public abstract void fillRect(java.lang.Object, int, int, int, int);

    public abstract void drawRect(java.lang.Object, int, int, int, int);

    public abstract void drawRoundRect(java.lang.Object, int, int, int, int, int, int);

    public abstract void fillRoundRect(java.lang.Object, int, int, int, int, int, int);

    public abstract void fillArc(java.lang.Object, int, int, int, int, int, int);

    public abstract void drawArc(java.lang.Object, int, int, int, int, int, int);

    public abstract void drawString(java.lang.Object, java.lang.String, int, int);

    public abstract void drawImage(java.lang.Object, java.lang.Object, int, int);

    public void drawImageArea(java.lang.Object, java.lang.Object, int, int, int, int, int, int)
    {
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, $i8, $i9, i10, i11, $i12, $i13;
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1, r2;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        i4 := @parameter2: int;

        i5 := @parameter3: int;

        i10 := @parameter4: int;

        i11 := @parameter5: int;

        i6 := @parameter6: int;

        i7 := @parameter7: int;

        $i0 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getClipX(java.lang.Object)>(r1);

        $i1 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getClipY(java.lang.Object)>(r1);

        $i2 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getClipWidth(java.lang.Object)>(r1);

        $i3 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getClipHeight(java.lang.Object)>(r1);

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void clipRect(java.lang.Object,int,int,int,int)>(r1, i4, i5, i6, i7);

        $i8 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getClipWidth(java.lang.Object)>(r1);

        if $i8 <= 0 goto label1;

        $i9 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getClipHeight(java.lang.Object)>(r1);

        if $i9 <= 0 goto label1;

        $i13 = i4 - i10;

        $i12 = i5 - i11;

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void drawImage(java.lang.Object,java.lang.Object,int,int)>(r1, r2, $i13, $i12);

     label1:
        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void setClip(java.lang.Object,int,int,int,int)>(r1, $i0, $i1, $i2, $i3);

        return;
    }

    public void drawImageRotated(java.lang.Object, java.lang.Object, int, int, int)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int i0, i1, i2;
        java.lang.Object r1, r2;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        return;
    }

    public boolean isRotationDrawingSupported()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public void fillTriangle(java.lang.Object, int, int, int, int, int, int)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int[] $r2, $r3;
        int i0, i1, i2, i3, i4, i5;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        i1 := @parameter3: int;

        i4 := @parameter4: int;

        i2 := @parameter5: int;

        i5 := @parameter6: int;

        $r2 = newarray (int)[3];

        $r2[0] = i0;

        $r2[1] = i1;

        $r2[2] = i2;

        $r3 = newarray (int)[3];

        $r3[0] = i3;

        $r3[1] = i4;

        $r3[2] = i5;

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void fillPolygon(java.lang.Object,int[],int[],int)>(r1, $r2, $r3, 3);

        return;
    }

    public abstract void drawRGB(java.lang.Object, int[], int, int, int, int, int, boolean);

    public abstract java.lang.Object getNativeGraphics();

    public abstract java.lang.Object getNativeGraphics(java.lang.Object);

    public abstract int charsWidth(java.lang.Object, char[], int, int);

    public abstract int stringWidth(java.lang.Object, java.lang.String);

    public abstract int charWidth(java.lang.Object, char);

    public abstract int getHeight(java.lang.Object);

    public abstract java.lang.Object getDefaultFont();

    public int getFace(java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public int getSize(java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public int getStyle(java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public abstract java.lang.Object createFont(int, int, int);

    protected void keyPressed(int)
    {
        int i0;
        com.sun.lwuit.impl.LWUITImplementation r1;
        com.sun.lwuit.Display $r0;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.sun.lwuit.Display: com.sun.lwuit.Display getInstance()>();

        virtualinvoke $r0.<com.sun.lwuit.Display: void keyPressed(int)>(i0);

        return;
    }

    protected void keyReleased(int)
    {
        int i0;
        com.sun.lwuit.impl.LWUITImplementation r1;
        com.sun.lwuit.Display $r0;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.sun.lwuit.Display: com.sun.lwuit.Display getInstance()>();

        virtualinvoke $r0.<com.sun.lwuit.Display: void keyReleased(int)>(i0);

        return;
    }

    protected void pointerDragged(int, int)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int[] $r1, $r2, $r3, $r4;
        int i0, i1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] xPointerEvent>;

        $r1[0] = i0;

        $r2 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] yPointerEvent>;

        $r2[0] = i1;

        $r4 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] xPointerEvent>;

        $r3 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] yPointerEvent>;

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void pointerDragged(int[],int[])>($r4, $r3);

        return;
    }

    protected void pointerPressed(int, int)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int[] $r1, $r2, $r3, $r4;
        int i0, i1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] xPointerEvent>;

        $r1[0] = i0;

        $r2 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] yPointerEvent>;

        $r2[0] = i1;

        $r4 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] xPointerEvent>;

        $r3 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] yPointerEvent>;

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void pointerPressed(int[],int[])>($r4, $r3);

        return;
    }

    protected void pointerReleased(int, int)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int[] $r1, $r2, $r3, $r4;
        int i0, i1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] xPointerEvent>;

        $r1[0] = i0;

        $r2 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] yPointerEvent>;

        $r2[0] = i1;

        $r4 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] xPointerEvent>;

        $r3 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] yPointerEvent>;

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void pointerReleased(int[],int[])>($r4, $r3);

        return;
    }

    protected void pointerHover(int[], int[])
    {
        com.sun.lwuit.impl.LWUITImplementation r3;
        int[] r1, r2;
        com.sun.lwuit.Display $r0;

        r3 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        $r0 = staticinvoke <com.sun.lwuit.Display: com.sun.lwuit.Display getInstance()>();

        virtualinvoke $r0.<com.sun.lwuit.Display: void pointerHover(int[],int[])>(r1, r2);

        return;
    }

    protected void pointerHoverReleased(int[], int[])
    {
        com.sun.lwuit.impl.LWUITImplementation r3;
        int[] r1, r2;
        com.sun.lwuit.Display $r0;

        r3 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        $r0 = staticinvoke <com.sun.lwuit.Display: com.sun.lwuit.Display getInstance()>();

        virtualinvoke $r0.<com.sun.lwuit.Display: void pointerHoverReleased(int[],int[])>(r1, r2);

        return;
    }

    protected void pointerHoverReleased(int, int)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int[] $r1, $r2, $r3, $r4;
        int i0, i1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] xPointerEvent>;

        $r1[0] = i0;

        $r2 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] yPointerEvent>;

        $r2[0] = i1;

        $r4 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] xPointerEvent>;

        $r3 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] yPointerEvent>;

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void pointerHoverReleased(int[],int[])>($r4, $r3);

        return;
    }

    protected void pointerHover(int, int)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int[] $r1, $r2, $r3, $r4;
        int i0, i1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] xPointerEvent>;

        $r1[0] = i0;

        $r2 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] yPointerEvent>;

        $r2[0] = i1;

        $r4 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] xPointerEvent>;

        $r3 = r0.<com.sun.lwuit.impl.LWUITImplementation: int[] yPointerEvent>;

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void pointerHover(int[],int[])>($r4, $r3);

        return;
    }

    protected void pointerDragged(int[], int[])
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int[] r1, r2;
        boolean $z0;
        com.sun.lwuit.Display $r3;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        $z0 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: boolean hasDragStarted(int[],int[])>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <com.sun.lwuit.Display: com.sun.lwuit.Display getInstance()>();

        virtualinvoke $r3.<com.sun.lwuit.Display: void pointerDragged(int[],int[])>(r1, r2);

     label1:
        return;
    }

    protected boolean hasDragStarted(int[], int[])
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int[] r1, r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        $i1 = r1[0];

        $i0 = r2[0];

        $z0 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: boolean hasDragStarted(int,int)>($i1, $i0);

        return $z0;
    }

    protected boolean hasDragStarted(int, int)
    {
        byte $b11, $b18;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i12, $i13, i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        i7 := @parameter0: int;

        i14 := @parameter1: int;

        $i0 = r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationCounter>;

        if $i0 != 0 goto label1;

        r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationX> = i7;

        r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationY> = i14;

        $i23 = r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationCounter>;

        $i24 = $i23 + 1;

        r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationCounter> = $i24;

        return 0;

     label1:
        $i1 = r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationCounter>;

        $i2 = $i1 + 1;

        r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationCounter> = $i2;

        $i3 = r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationCounter>;

        $i4 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getDragAutoActivationThreshold()>();

        if $i3 <= $i4 goto label2;

        return 1;

     label2:
        $i5 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getDisplayWidth()>();

        $f0 = (float) $i5;

        $f1 = $f0 / 100.0F;

        $i6 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getDragStartPercentage()>();

        $f2 = (float) $i6;

        $f3 = $f1 * $f2;

        $i8 = r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationX>;

        $i9 = $i8 - i7;

        $i10 = staticinvoke <java.lang.Math: int abs(int)>($i9);

        $f4 = (float) $i10;

        $b11 = $f3 cmpg $f4;

        $i25 = (int) $b11;

        if $i25 > 0 goto label3;

        $i21 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getDragAutoActivationThreshold()>();

        $i22 = $i21 + 1;

        r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationCounter> = $i22;

        return 1;

     label3:
        $i12 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getDisplayHeight()>();

        $f5 = (float) $i12;

        $f6 = $f5 / 100.0F;

        $i13 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getDragStartPercentage()>();

        $f7 = (float) $i13;

        $f8 = $f6 * $f7;

        $i15 = r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationY>;

        $i16 = $i15 - i14;

        $i17 = staticinvoke <java.lang.Math: int abs(int)>($i16);

        $f9 = (float) $i17;

        $b18 = $f8 cmpg $f9;

        $i26 = (int) $b18;

        if $i26 > 0 goto label4;

        $i19 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getDragAutoActivationThreshold()>();

        $i20 = $i19 + 1;

        r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationCounter> = $i20;

        return 1;

     label4:
        return 0;
    }

    public int getDragStartPercentage()
    {
        int $i0;
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        $i0 = r0.<com.sun.lwuit.impl.LWUITImplementation: int dragStartPercentage>;

        return $i0;
    }

    public void setDragStartPercentage(int)
    {
        int i0;
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        i0 := @parameter0: int;

        r0.<com.sun.lwuit.impl.LWUITImplementation: int dragStartPercentage> = i0;

        return;
    }

    protected int getDragAutoActivationThreshold()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 7;
    }

    protected void pointerPressed(int[], int[])
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int[] r1, r2;
        int $i0, $i1;
        com.sun.lwuit.Display $r3;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        $i0 = r1[0];

        r0.<com.sun.lwuit.impl.LWUITImplementation: int pointerPressedX> = $i0;

        $i1 = r2[0];

        r0.<com.sun.lwuit.impl.LWUITImplementation: int pointerPressedY> = $i1;

        $r3 = staticinvoke <com.sun.lwuit.Display: com.sun.lwuit.Display getInstance()>();

        virtualinvoke $r3.<com.sun.lwuit.Display: void pointerPressed(int[],int[])>(r1, r2);

        return;
    }

    protected void pointerReleased(int[], int[])
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int[] r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;
        com.sun.lwuit.Display $r3;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        $i0 = r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationCounter>;

        if $i0 != 0 goto label1;

        $i2 = r1[0];

        $i1 = r0.<com.sun.lwuit.impl.LWUITImplementation: int pointerPressedX>;

        if $i2 == $i1 goto label1;

        $i4 = r2[0];

        $i3 = r0.<com.sun.lwuit.impl.LWUITImplementation: int pointerPressedY>;

        if $i4 == $i3 goto label1;

        $i6 = r0.<com.sun.lwuit.impl.LWUITImplementation: int pointerPressedX>;

        $i5 = r0.<com.sun.lwuit.impl.LWUITImplementation: int pointerPressedY>;

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: boolean hasDragStarted(int,int)>($i6, $i5);

        $z0 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: boolean hasDragStarted(int[],int[])>(r1, r2);

        if $z0 == 0 goto label1;

        $i8 = r0.<com.sun.lwuit.impl.LWUITImplementation: int pointerPressedX>;

        $i7 = r0.<com.sun.lwuit.impl.LWUITImplementation: int pointerPressedY>;

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void pointerDragged(int,int)>($i8, $i7);

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void pointerDragged(int[],int[])>(r1, r2);

     label1:
        r0.<com.sun.lwuit.impl.LWUITImplementation: int dragActivationCounter> = 0;

        $r3 = staticinvoke <com.sun.lwuit.Display: com.sun.lwuit.Display getInstance()>();

        virtualinvoke $r3.<com.sun.lwuit.Display: void pointerReleased(int[],int[])>(r1, r2);

        return;
    }

    protected void sizeChanged(int, int)
    {
        com.sun.lwuit.impl.LWUITImplementation r1;
        int i0, i1;
        com.sun.lwuit.Display $r0;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = staticinvoke <com.sun.lwuit.Display: com.sun.lwuit.Display getInstance()>();

        virtualinvoke $r0.<com.sun.lwuit.Display: void sizeChanged(int,int)>(i0, i1);

        return;
    }

    protected void hideNotify()
    {
        com.sun.lwuit.impl.LWUITImplementation r1;
        com.sun.lwuit.Display $r0;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        $r0 = staticinvoke <com.sun.lwuit.Display: com.sun.lwuit.Display getInstance()>();

        virtualinvoke $r0.<com.sun.lwuit.Display: void hideNotify()>();

        return;
    }

    protected void showNotify()
    {
        com.sun.lwuit.impl.LWUITImplementation r1;
        com.sun.lwuit.Display $r0;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        $r0 = staticinvoke <com.sun.lwuit.Display: com.sun.lwuit.Display getInstance()>();

        virtualinvoke $r0.<com.sun.lwuit.Display: void showNotify()>();

        return;
    }

    private java.lang.Object findCachedGradient(java.util.Hashtable, int, int, int, int, int, int, boolean, int, int, int)
    {
        java.util.Enumeration r8;
        int[] $r2, r3;
        int i0, $i1, i2, $i3, i4, $i5, i6, $i7, i8, $i9, i10, $i11, i12, $i13, $i14, i15, $i16, i17, $i18, $i19;
        java.lang.ref.WeakReference r5;
        java.util.Hashtable r0;
        boolean z0, $z1;
        com.sun.lwuit.impl.LWUITImplementation r7;
        java.lang.Object $r1, $r4, $r6;

        r7 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r0 := @parameter0: java.util.Hashtable;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        i4 := @parameter3: int;

        i6 := @parameter4: int;

        i15 := @parameter5: int;

        i17 := @parameter6: int;

        z0 := @parameter7: boolean;

        i8 := @parameter8: int;

        i10 := @parameter9: int;

        i12 := @parameter10: int;

        if r0 == null goto label6;

        r8 = virtualinvoke r0.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        $z1 = interfaceinvoke r8.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label6;

        $r1 = interfaceinvoke r8.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r2 = (int[]) $r1;

        r3 = (int[]) $r2;

        $r4 = virtualinvoke r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r3);

        r5 = (java.lang.ref.WeakReference) $r4;

        $r6 = virtualinvoke r5.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r6 != null goto label2;

        virtualinvoke r0.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r3);

        r8 = virtualinvoke r0.<java.util.Hashtable: java.util.Enumeration keys()>();

        goto label1;

     label2:
        $i1 = r3[0];

        if $i1 != i0 goto label5;

        $i3 = r3[1];

        if $i3 != i2 goto label5;

        $i5 = r3[2];

        if $i5 != i4 goto label5;

        $i7 = r3[3];

        if $i7 != i6 goto label5;

        $i9 = r3[5];

        if $i9 != i8 goto label5;

        $i11 = r3[6];

        if $i11 != i10 goto label5;

        $i13 = r3[7];

        if $i13 != i12 goto label5;

        $i14 = virtualinvoke r7.<com.sun.lwuit.impl.LWUITImplementation: int getImageWidth(java.lang.Object)>($r6);

        if $i14 != i15 goto label5;

        $i16 = virtualinvoke r7.<com.sun.lwuit.impl.LWUITImplementation: int getImageHeight(java.lang.Object)>($r6);

        if $i16 != i17 goto label5;

        if z0 == 0 goto label3;

        $i19 = r3[4];

        if $i19 == 1 goto label4;

     label3:
        if z0 != 0 goto label5;

        $i18 = r3[4];

        if $i18 != 0 goto label5;

     label4:
        return $r6;

     label5:
        goto label1;

     label6:
        return null;
    }

    private void storeCachedGradient(java.lang.Object, java.util.Hashtable, int, int, int, int, boolean, int, int, int)
    {
        com.sun.lwuit.impl.LWUITImplementation r5;
        int[] $r0, $r4, r6;
        int i0, i1, i2, i3, i4, i5, i6;
        java.lang.Object r3;
        java.lang.ref.WeakReference $r2;
        java.util.Hashtable r1;
        boolean z0;

        r5 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r3 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.util.Hashtable;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        z0 := @parameter6: boolean;

        i4 := @parameter7: int;

        i5 := @parameter8: int;

        i6 := @parameter9: int;

        if z0 == 0 goto label1;

        $r4 = newarray (int)[8];

        $r4[0] = i0;

        $r4[1] = i1;

        $r4[2] = i2;

        $r4[3] = i3;

        $r4[4] = 1;

        $r4[5] = i4;

        $r4[6] = i5;

        $r4[7] = i6;

        r6 = $r4;

        goto label2;

     label1:
        $r0 = newarray (int)[8];

        $r0[0] = i0;

        $r0[1] = i1;

        $r0[2] = i2;

        $r0[3] = i3;

        $r0[4] = 0;

        $r0[5] = i4;

        $r0[6] = i5;

        $r0[7] = i6;

        r6 = $r0;

     label2:
        $r2 = new java.lang.ref.WeakReference;

        specialinvoke $r2.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r3);

        virtualinvoke r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r2);

        return;
    }

    public void fillRectRadialGradient(java.lang.Object, int, int, int, int, int, int, float, float, float)
    {
        boolean $z0;
        float f0, $f1, $f2, $f3, f4, $f5, $f6, $f7, f8, $f9, $f10;
        int i0, i1, i2, i3, $i4, i5, $i6, i7, $i8, i9, i10, i11, i12, i13, $i14, $i15, $i17;
        java.util.Hashtable $r2, $r6, $r7, $r9;
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1, $r3, $r4, $r5;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        i13 := @parameter1: int;

        i10 := @parameter2: int;

        i11 := @parameter3: int;

        i12 := @parameter4: int;

        i0 := @parameter5: int;

        i2 := @parameter6: int;

        f0 := @parameter7: float;

        f4 := @parameter8: float;

        f8 := @parameter9: float;

        $f2 = (float) i0;

        $f1 = 1.0F - f0;

        $f3 = $f2 * $f1;

        i1 = (int) $f3;

        $f6 = (float) i2;

        $f5 = 1.0F - f4;

        $f7 = $f6 * $f5;

        i3 = (int) $f7;

        $i4 = i0 / 2;

        i5 = $i4 - i1;

        $i6 = i2 / 2;

        i7 = $i6 - i3;

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i2);

        $f9 = (float) $i8;

        $f10 = $f9 * f8;

        i9 = (int) $f10;

        $z0 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: boolean cacheRadialGradients()>();

        if $z0 == 0 goto label4;

        $r2 = r0.<com.sun.lwuit.impl.LWUITImplementation: java.util.Hashtable radialGradientCache>;

        $r3 = specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: java.lang.Object findCachedGradient(java.util.Hashtable,int,int,int,int,int,int,boolean,int,int,int)>($r2, i13, i10, i11, i12, i0, i2, 1, i1, i3, i9);

        if $r3 == null goto label1;

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void drawImage(java.lang.Object,java.lang.Object,int,int)>(r1, $r3, i11, i12);

        goto label3;

     label1:
        $i17 = (int) -1;

        $r4 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: java.lang.Object createMutableImage(int,int,int)>(i0, i2, $i17);

        $r5 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: java.lang.Object getNativeGraphics(java.lang.Object)>($r4);

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void setColor(java.lang.Object,int)>($r5, i10);

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void fillRect(java.lang.Object,int,int,int,int)>($r5, 0, 0, i0, i2);

        specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void fillRadialGradientImpl(java.lang.Object,int,int,int,int,int,int)>($r5, i13, i10, i5, i7, i9, i9);

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void drawImage(java.lang.Object,java.lang.Object,int,int)>(r1, $r4, i11, i12);

        $r6 = r0.<com.sun.lwuit.impl.LWUITImplementation: java.util.Hashtable radialGradientCache>;

        if $r6 != null goto label2;

        $r9 = new java.util.Hashtable;

        specialinvoke $r9.<java.util.Hashtable: void <init>()>();

        r0.<com.sun.lwuit.impl.LWUITImplementation: java.util.Hashtable radialGradientCache> = $r9;

     label2:
        $r7 = r0.<com.sun.lwuit.impl.LWUITImplementation: java.util.Hashtable radialGradientCache>;

        specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void storeCachedGradient(java.lang.Object,java.util.Hashtable,int,int,int,int,boolean,int,int,int)>($r4, $r7, i13, i10, i11, i12, 1, i1, i3, i9);

     label3:
        goto label5;

     label4:
        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void setColor(java.lang.Object,int)>(r1, i10);

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void fillRect(java.lang.Object,int,int,int,int)>(r1, i11, i12, i0, i2);

        $i15 = i11 + i5;

        $i14 = i12 + i7;

        specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void fillRadialGradientImpl(java.lang.Object,int,int,int,int,int,int)>(r1, i13, i10, $i15, $i14, i9, i9);

     label5:
        return;
    }

    public void fillRadialGradient(java.lang.Object, int, int, int, int, int, int)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int i0, i1, i2, i3, i4, i5;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void fillRadialGradientImpl(java.lang.Object,int,int,int,int,int,int)>(r1, i0, i1, i2, i3, i4, i5);

        return;
    }

    private void fillRadialGradientImpl(java.lang.Object, int, int, int, int, int, int)
    {
        int i0, $i1, i2, $i3, i4, i5, i6, $i7, i8, $i9, i10, i11, $i12, i13, i14, i15, i16, i17, $i19, $i21;
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i6 := @parameter2: int;

        i14 := @parameter3: int;

        i15 := @parameter4: int;

        i16 := @parameter5: int;

        i17 := @parameter6: int;

        $i1 = i0 >> 16;

        i2 = $i1 & 255;

        $i3 = i0 >> 8;

        i4 = $i3 & 255;

        i5 = i0 & 255;

        $i7 = i6 >> 16;

        i8 = $i7 & 255;

        $i9 = i6 >> 8;

        i10 = $i9 & 255;

        i11 = i6 & 255;

        $i12 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getColor(java.lang.Object)>(r1);

        i13 = i17;

     label1:
        if i16 <= 0 goto label2;

        if i17 <= 0 goto label2;

        specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void updateGradientColor(java.lang.Object,int,int,int,int,int,int,int,int)>(r1, i2, i4, i5, i8, i10, i11, i13, i17);

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void fillArc(java.lang.Object,int,int,int,int,int,int)>(r1, i14, i15, i16, i17, 0, 360);

        i14 = i14 + 1;

        i15 = i15 + 1;

        $i19 = (int) -2;

        i16 = i16 + $i19;

        $i21 = (int) -2;

        i17 = i17 + $i21;

        goto label1;

     label2:
        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void setColor(java.lang.Object,int)>(r1, $i12);

        return;
    }

    private void updateGradientColor(java.lang.Object, int, int, int, int, int, int, int, int)
    {
        int i0, i1, i2, i3, $i4, i5, i6, $i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, $i19;
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i5 := @parameter2: int;

        i8 := @parameter3: int;

        i1 := @parameter4: int;

        i6 := @parameter5: int;

        i9 := @parameter6: int;

        i2 := @parameter7: int;

        i3 := @parameter8: int;

        $i4 = specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int calculateGraidentChannel(int,int,int,int)>(i0, i1, i2, i3);

        $i7 = specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int calculateGraidentChannel(int,int,int,int)>(i5, i6, i2, i3);

        $i10 = specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int calculateGraidentChannel(int,int,int,int)>(i8, i9, i2, i3);

        $i11 = $i4 << 16;

        $i14 = $i11 & 16711680;

        $i12 = $i7 << 8;

        $i19 = (int) 65280;

        $i13 = $i12 & $i19;

        $i16 = $i14 | $i13;

        $i15 = $i10 & 255;

        i17 = $i16 | $i15;

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void setColor(java.lang.Object,int)>(r1, i17);

        return;
    }

    private int calculateGraidentChannel(int, int, int, int)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int i0, i1, i2, i3, $i4, $i5, i6, $i7, $i8;
        float $f0, $f1, f2, $f3, $f4;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i3 := @parameter2: int;

        i2 := @parameter3: int;

        if i0 != i1 goto label1;

        return i0;

     label1:
        $f1 = (float) i2;

        $f0 = (float) i3;

        f2 = $f1 / $f0;

        $i4 = i0 - i1;

        $i5 = staticinvoke <java.lang.Math: int abs(int)>($i4);

        $f3 = (float) $i5;

        $f4 = $f3 * f2;

        i6 = (int) $f4;

        if i0 <= i1 goto label2;

        $i8 = i0 - i6;

        return $i8;

     label2:
        $i7 = i0 + i6;

        return $i7;
    }

    public void fillLinearGradient(java.lang.Object, int, int, int, int, int, int, boolean)
    {
        int i0, i1, i2, i3, i4, i5, $i7;
        java.util.Hashtable $r2, $r6, $r7, $r9;
        boolean $z0, z1;
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1, $r3, $r4, $r5;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        z1 := @parameter7: boolean;

        $z0 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: boolean cacheLinearGradients()>();

        if $z0 == 0 goto label4;

        $r2 = r0.<com.sun.lwuit.impl.LWUITImplementation: java.util.Hashtable linearGradientCache>;

        $r3 = specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: java.lang.Object findCachedGradient(java.util.Hashtable,int,int,int,int,int,int,boolean,int,int,int)>($r2, i0, i1, i2, i3, i4, i5, z1, 0, 0, 0);

        if $r3 == null goto label1;

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void drawImage(java.lang.Object,java.lang.Object,int,int)>(r1, $r3, i2, i3);

        goto label3;

     label1:
        $i7 = (int) -1;

        $r4 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: java.lang.Object createMutableImage(int,int,int)>(i4, i5, $i7);

        $r5 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: java.lang.Object getNativeGraphics(java.lang.Object)>($r4);

        specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void fillLinearGradientImpl(java.lang.Object,int,int,int,int,int,int,boolean)>($r5, i0, i1, 0, 0, i4, i5, z1);

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void drawImage(java.lang.Object,java.lang.Object,int,int)>(r1, $r4, i2, i3);

        $r6 = r0.<com.sun.lwuit.impl.LWUITImplementation: java.util.Hashtable linearGradientCache>;

        if $r6 != null goto label2;

        $r9 = new java.util.Hashtable;

        specialinvoke $r9.<java.util.Hashtable: void <init>()>();

        r0.<com.sun.lwuit.impl.LWUITImplementation: java.util.Hashtable linearGradientCache> = $r9;

     label2:
        $r7 = r0.<com.sun.lwuit.impl.LWUITImplementation: java.util.Hashtable linearGradientCache>;

        specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void storeCachedGradient(java.lang.Object,java.util.Hashtable,int,int,int,int,boolean,int,int,int)>($r4, $r7, i0, i1, i2, i3, z1, 0, 0, 0);

     label3:
        goto label5;

     label4:
        specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void fillLinearGradientImpl(java.lang.Object,int,int,int,int,int,int,boolean)>(r1, i0, i1, i2, i3, i4, i5, z1);

     label5:
        return;
    }

    private void fillLinearGradientImpl(java.lang.Object, int, int, int, int, int, int, boolean)
    {
        int i0, $i1, i2, $i3, i4, i5, i6, $i7, i8, $i9, i10, i11, $i12, i13, i14, i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24;
        boolean z0;
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i6 := @parameter2: int;

        i14 := @parameter3: int;

        i15 := @parameter4: int;

        i16 := @parameter5: int;

        i13 := @parameter6: int;

        z0 := @parameter7: boolean;

        $i1 = i0 >> 16;

        i2 = $i1 & 255;

        $i3 = i0 >> 8;

        i4 = $i3 & 255;

        i5 = i0 & 255;

        $i7 = i6 >> 16;

        i8 = $i7 & 255;

        $i9 = i6 >> 8;

        i10 = $i9 & 255;

        i11 = i6 & 255;

        $i12 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getColor(java.lang.Object)>(r1);

        if z0 == 0 goto label3;

        i23 = 0;

     label1:
        if i23 >= i16 goto label2;

        specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void updateGradientColor(java.lang.Object,int,int,int,int,int,int,int,int)>(r1, i2, i4, i5, i8, i10, i11, i16, i23);

        $i22 = i14 + i23;

        $i21 = i14 + i23;

        $i20 = i15 + i13;

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void drawLine(java.lang.Object,int,int,int,int)>(r1, $i22, i15, $i21, $i20);

        i23 = i23 + 1;

        goto label1;

     label2:
        goto label5;

     label3:
        i24 = 0;

     label4:
        if i24 >= i13 goto label5;

        specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void updateGradientColor(java.lang.Object,int,int,int,int,int,int,int,int)>(r1, i2, i4, i5, i8, i10, i11, i13, i24);

        $i19 = i15 + i24;

        $i18 = i14 + i16;

        $i17 = i15 + i24;

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void drawLine(java.lang.Object,int,int,int,int)>(r1, i14, $i19, $i18, $i17);

        i24 = i24 + 1;

        goto label4;

     label5:
        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void setColor(java.lang.Object,int)>(r1, $i12);

        return;
    }

    private boolean checkIntersection(java.lang.Object, int, int, int, int, int, int[], int)
    {
        com.sun.lwuit.impl.LWUITImplementation r1;
        int[] r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Object r2;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        i5 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r0 := @parameter6: int[];

        i3 := @parameter7: int;

        if i0 <= i1 goto label1;

        if i0 < i2 goto label2;

     label1:
        if i0 <= i2 goto label4;

        if i0 >= i1 goto label4;

     label2:
        if i1 != i2 goto label3;

        virtualinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: void drawLine(java.lang.Object,int,int,int,int)>(r2, i4, i0, i5, i0);

        return 0;

     label3:
        $i7 = i0 - i1;

        $i6 = i5 - i4;

        $i9 = $i7 * $i6;

        $i8 = i2 - i1;

        $i10 = $i9 / $i8;

        $i11 = i4 + $i10;

        r0[i3] = $i11;

        return 1;

     label4:
        return 0;
    }

    private int markIntersectionEdge(java.lang.Object, int, int[], int[], int, int[], int)
    {
        int[] r0, r1, r2;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45;
        com.sun.lwuit.impl.LWUITImplementation r3;
        java.lang.Object r4;

        r3 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r4 := @parameter0: java.lang.Object;

        i1 := @parameter1: int;

        r2 := @parameter2: int[];

        r1 := @parameter3: int[];

        i3 := @parameter4: int;

        r0 := @parameter5: int[];

        i0 := @parameter6: int;

        $i2 = r1[i1];

        r0[i0] = $i2;

        $i7 = r2[i1];

        $i4 = i1 + 1;

        $i5 = $i4 % i3;

        $i6 = r2[$i5];

        $i14 = $i7 - $i6;

        $i12 = r2[i1];

        $i8 = i1 + i3;

        $i9 = $i8 - 1;

        $i10 = $i9 % i3;

        $i11 = r2[$i10];

        $i13 = $i12 - $i11;

        $i15 = $i14 * $i13;

        if $i15 <= 0 goto label1;

        $i45 = i0 + 1;

        $i44 = r1[i1];

        r0[$i45] = $i44;

        return 2;

     label1:
        $i19 = r2[i1];

        $i16 = i1 + 1;

        $i17 = $i16 % i3;

        $i18 = r2[$i17];

        if $i19 != $i18 goto label3;

        $i27 = r1[i1];

        $i26 = r2[i1];

        $i20 = i1 + 1;

        $i21 = $i20 % i3;

        $i25 = r1[$i21];

        $i22 = i1 + 1;

        $i23 = $i22 % i3;

        $i24 = r2[$i23];

        virtualinvoke r3.<com.sun.lwuit.impl.LWUITImplementation: void drawLine(java.lang.Object,int,int,int,int)>(r4, $i27, $i26, $i25, $i24);

        $i28 = i1 + 1;

        $i29 = $i28 % i3;

        $i33 = r2[$i29];

        $i30 = i1 + 2;

        $i31 = $i30 % i3;

        $i32 = r2[$i31];

        $i40 = $i33 - $i32;

        $i38 = r2[i1];

        $i34 = i1 + i3;

        $i35 = $i34 - 1;

        $i36 = $i35 % i3;

        $i37 = r2[$i36];

        $i39 = $i38 - $i37;

        $i41 = $i40 * $i39;

        if $i41 <= 0 goto label2;

        return 1;

     label2:
        $i43 = i0 + 1;

        $i42 = r1[i1];

        r0[$i43] = $i42;

        return 2;

     label3:
        return 1;
    }

    public void fillPolygon(java.lang.Object, int[], int[], int)
    {
        int[] r0, r1, r4;
        boolean $z0, $z1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33;
        com.sun.lwuit.impl.LWUITImplementation r2;
        java.lang.Object r3;

        r2 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r3 := @parameter0: java.lang.Object;

        r4 := @parameter1: int[];

        r1 := @parameter2: int[];

        i0 := @parameter3: int;

        r0 = newarray (int)[i0];

        i23 = r1[0];

        i24 = r1[0];

        i25 = 0;

     label01:
        if i25 >= i0 goto label02;

        $i21 = r1[i25];

        i23 = staticinvoke <java.lang.Math: int max(int,int)>(i23, $i21);

        $i22 = r1[i25];

        i24 = staticinvoke <java.lang.Math: int min(int,int)>(i24, $i22);

        i25 = i25 + 1;

        goto label01;

     label02:
        i26 = i24;

     label03:
        if i26 > i23 goto label18;

        i27 = 0;

        i28 = 1;

     label04:
        if i28 >= i0 goto label06;

        $i15 = i28 - 1;

        $i20 = r4[$i15];

        $i19 = r4[i28];

        $i16 = i28 - 1;

        $i18 = r1[$i16];

        $i17 = r1[i28];

        $z1 = specialinvoke r2.<com.sun.lwuit.impl.LWUITImplementation: boolean checkIntersection(java.lang.Object,int,int,int,int,int,int[],int)>(r3, i26, $i20, $i19, $i18, $i17, r0, i27);

        if $z1 == 0 goto label05;

        i27 = i27 + 1;

     label05:
        i28 = i28 + 1;

        goto label04;

     label06:
        $i1 = i0 - 1;

        $i6 = r4[$i1];

        $i5 = r4[0];

        $i2 = i0 - 1;

        $i4 = r1[$i2];

        $i3 = r1[0];

        $z0 = specialinvoke r2.<com.sun.lwuit.impl.LWUITImplementation: boolean checkIntersection(java.lang.Object,int,int,int,int,int,int[],int)>(r3, i26, $i6, $i5, $i4, $i3, r0, i27);

        if $z0 == 0 goto label07;

        i27 = i27 + 1;

     label07:
        i29 = 0;

     label08:
        if i29 >= i0 goto label10;

        $i13 = r1[i29];

        if i26 != $i13 goto label09;

        $i14 = specialinvoke r2.<com.sun.lwuit.impl.LWUITImplementation: int markIntersectionEdge(java.lang.Object,int,int[],int[],int,int[],int)>(r3, i29, r1, r4, i0, r0, i27);

        i27 = i27 + $i14;

     label09:
        i29 = i29 + 1;

        goto label08;

     label10:
        i30 = 0;

     label11:
        if i30 >= i27 goto label15;

        i31 = i30;

     label12:
        if i31 >= i27 goto label14;

        $i11 = r0[i31];

        $i10 = r0[i30];

        if $i11 >= $i10 goto label13;

        i32 = r0[i30];

        $i12 = r0[i31];

        r0[i30] = $i12;

        r0[i31] = i32;

     label13:
        i31 = i31 + 1;

        goto label12;

     label14:
        i30 = i30 + 1;

        goto label11;

     label15:
        i33 = 1;

     label16:
        if i33 >= i27 goto label17;

        $i7 = i33 - 1;

        $i9 = r0[$i7];

        $i8 = r0[i33];

        virtualinvoke r2.<com.sun.lwuit.impl.LWUITImplementation: void drawLine(java.lang.Object,int,int,int,int)>(r3, $i9, i26, $i8, i26);

        i33 = i33 + 2;

        goto label16;

     label17:
        i26 = i26 + 1;

        goto label03;

     label18:
        return;
    }

    public void drawPolygon(java.lang.Object, int[], int[], int)
    {
        int[] r2, r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: int[];

        r3 := @parameter2: int[];

        i0 := @parameter3: int;

        i13 = 1;

     label1:
        if i13 >= i0 goto label2;

        $i7 = i13 - 1;

        $i12 = r2[$i7];

        $i8 = i13 - 1;

        $i11 = r3[$i8];

        $i10 = r2[i13];

        $i9 = r3[i13];

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void drawLine(java.lang.Object,int,int,int,int)>(r1, $i12, $i11, $i10, $i9);

        i13 = i13 + 1;

        goto label1;

     label2:
        $i1 = i0 - 1;

        $i6 = r2[$i1];

        $i2 = i0 - 1;

        $i5 = r3[$i2];

        $i4 = r2[0];

        $i3 = r3[0];

        virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: void drawLine(java.lang.Object,int,int,int,int)>(r1, $i6, $i5, $i4, $i3);

        return;
    }

    public void setShowVirtualKeyboard(boolean)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        boolean z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean isVirtualKeyboardShowing()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public boolean isVirtualKeyboardShowingSupported()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public int getKeyboardType()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public boolean isNativeInputSupported()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public boolean isMultiTouch()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public boolean isClickTouchScreen()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public boolean isNativeIndexed()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public java.lang.Object createNativeIndexed(com.sun.lwuit.IndexedImage)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        com.sun.lwuit.IndexedImage r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: com.sun.lwuit.IndexedImage;

        return null;
    }

    public java.lang.Object createVideoComponent(java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        return null;
    }

    public int getVideoWidth(java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public int getVideoHeight(java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public void setVideoVisible(java.lang.Object, boolean)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;
        boolean z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        return;
    }

    public void startVideo(java.lang.Object, java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1, r2;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    public void stopVideo(java.lang.Object, java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1, r2;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    public void setVideoLoopCount(java.lang.Object, int)
    {
        int i0;
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        return;
    }

    public long getMediaTime(java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        return 0L;
    }

    public long setMediaTime(java.lang.Object, long)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;
        long l0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        return 0L;
    }

    public void setVideoFullScreen(java.lang.Object, boolean)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;
        boolean z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        return;
    }

    public void paintVideo(com.sun.lwuit.Component, boolean, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.sun.lwuit.Component r1;
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r2, r3, r4;
        boolean z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: com.sun.lwuit.Component;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        return;
    }

    public boolean isOpaque(com.sun.lwuit.Image, java.lang.Object)
    {
        com.sun.lwuit.Image r0;
        com.sun.lwuit.impl.LWUITImplementation r2;
        int[] $r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object r3;

        r2 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r0 := @parameter0: com.sun.lwuit.Image;

        r3 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<com.sun.lwuit.Image: int[] getRGBCached()>();

        i3 = 0;

     label1:
        $i0 = lengthof $r1;

        if i3 >= $i0 goto label3;

        $i1 = $r1[i3];

        $i2 = $i1 & -16777216;

        if $i2 == -16777216 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;
    }

    public boolean isAffineSupported()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public void resetAffine(java.lang.Object)
    {
        java.io.PrintStream $r0;
        com.sun.lwuit.impl.LWUITImplementation r1;
        java.lang.Object r2;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r2 := @parameter0: java.lang.Object;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Affine unsupported");

        return;
    }

    public void scale(java.lang.Object, float, float)
    {
        java.io.PrintStream $r0;
        com.sun.lwuit.impl.LWUITImplementation r1;
        float f0, f1;
        java.lang.Object r2;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r2 := @parameter0: java.lang.Object;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Affine unsupported");

        return;
    }

    public void rotate(java.lang.Object, float)
    {
        java.io.PrintStream $r0;
        com.sun.lwuit.impl.LWUITImplementation r1;
        float f0;
        java.lang.Object r2;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r2 := @parameter0: java.lang.Object;

        f0 := @parameter1: float;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Affine unsupported");

        return;
    }

    public void shear(java.lang.Object, float, float)
    {
        java.io.PrintStream $r0;
        com.sun.lwuit.impl.LWUITImplementation r1;
        float f0, f1;
        java.lang.Object r2;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r2 := @parameter0: java.lang.Object;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Affine unsupported");

        return;
    }

    public boolean isSVGSupported()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public java.lang.Object createSVGImage(java.lang.String, byte[]) throws java.io.IOException
    {
        com.sun.lwuit.impl.LWUITImplementation r1;
        byte[] r3;
        java.io.IOException $r0;
        java.lang.String r2;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: byte[];

        $r0 = new java.io.IOException;

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>("SVG is not supported by this implementation");

        throw $r0;
    }

    public java.lang.Object getSVGDocument(java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r1;
        java.lang.Object r2;
        java.lang.RuntimeException $r0;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("SVG is not supported by this implementation");

        throw $r0;
    }

    public boolean animateImage(java.lang.Object, long)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;
        long l0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        return 0;
    }

    public java.lang.String[] getFontPlatformNames()
    {
        com.sun.lwuit.impl.LWUITImplementation r1;
        java.lang.String[] $r0;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "MIDP";

        $r0[1] = "MIDP2";

        return $r0;
    }

    public java.lang.Object loadTrueTypeFont(java.io.InputStream) throws java.io.IOException
    {
        com.sun.lwuit.impl.LWUITImplementation r1;
        java.io.IOException $r0;
        java.io.InputStream r2;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r2 := @parameter0: java.io.InputStream;

        $r0 = new java.io.IOException;

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>("Unsupported operation");

        throw $r0;
    }

    public boolean isTrueTypeSupported()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public java.lang.Object loadNativeFont(java.lang.String)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.String r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public boolean isLookupFontSupported()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public boolean minimizeApplication()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    public void restoreMinimizedApplication()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return;
    }

    public boolean isMinimized()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 0;
    }

    protected boolean cacheRadialGradients()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 1;
    }

    protected boolean cacheLinearGradients()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 1;
    }

    public boolean isThirdSoftButton()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        $i0 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getSoftkeyCount()>();

        if $i0 >= 2 goto label1;

        $z0 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: boolean isTouchDevice()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int getDragPathLength()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 10;
    }

    public int getDragPathTime()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        return 200;
    }

    public float getDragSpeed(float[], long[], int, int)
    {
        byte $b6, $b7, $b8;
        float $f0, $f1, $f2, $f3, $f4, $f5, f6, $f7, $f8, f9, f10;
        long $l0, $l2, l3, $l5, $l9, l13;
        float[] r2;
        long[] r1;
        int $i1, i4, $i10, i11, i12, $i14, $i15, $i16, $i18;
        com.sun.lwuit.impl.LWUITImplementation r0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r2 := @parameter0: float[];

        r1 := @parameter1: long[];

        i4 := @parameter2: int;

        i11 := @parameter3: int;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i1 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getDragPathTime()>();

        $l2 = (long) $i1;

        l3 = $l0 - $l2;

        i12 = i4 - i11;

        if i12 >= 0 goto label1;

        $i10 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getDragPathLength()>();

        i12 = $i10 + i12;

     label1:
        l13 = 0L;

        f9 = 0.0F;

        f10 = 0.0F;

        $f8 = (float) i11;

     label2:
        if i11 <= 0 goto label5;

        $l5 = r1[i12];

        $b6 = $l5 cmp l3;

        $i15 = (int) $b6;

        if $i15 <= 0 goto label4;

        $b7 = l13 cmp 0L;

        if $b7 != 0 goto label3;

        l13 = r1[i12];

        f9 = r2[i12];

     label3:
        $l9 = $l0 - l13;

        $f3 = r2[i12];

        $f7 = $f3 - f9;

        $b8 = $l9 cmp 0L;

        $i16 = (int) $b8;

        if $i16 <= 0 goto label4;

        $f4 = (float) $l9;

        $f5 = $f7 / $f4;

        f6 = $f5 * 1.5F;

        f10 = f10 + f6;

     label4:
        $i18 = (int) -1;

        i11 = i11 + $i18;

        i12 = i12 + 1;

        $i14 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int getDragPathLength()>();

        if i12 < $i14 goto label2;

        i12 = 0;

        goto label2;

     label5:
        $f0 = staticinvoke <java.lang.Math: float max(float,float)>(1.0F, $f8);

        $f1 = neg f10;

        $f2 = $f1 / $f0;

        return $f2;
    }

    public boolean isBidiAlgorithm()
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        boolean $z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        $z0 = r0.<com.sun.lwuit.impl.LWUITImplementation: boolean bidi>;

        return $z0;
    }

    public void setBidiAlgorithm(boolean)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        boolean z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        z0 := @parameter0: boolean;

        r0.<com.sun.lwuit.impl.LWUITImplementation: boolean bidi> = z0;

        return;
    }

    public java.lang.String convertBidiLogicalToVisual(java.lang.String)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int $i0, $i1, $i3;
        char[] $r2;
        java.lang.String r1, $r4;
        boolean $z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<com.sun.lwuit.impl.LWUITImplementation: boolean bidi>;

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 < 2 goto label1;

        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = (int) -1;

        specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int swapBidiChars(char[],int,int,int)>($r2, 0, $i1, $i3);

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r2);

        return $r4;

     label1:
        return r1;
    }

    public int getCharLocation(java.lang.String, int)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int i0, $i1, $i2;
        char[] $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = r0.<com.sun.lwuit.impl.LWUITImplementation: boolean bidi>;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: int swapBidiChars(char[],int,int,int)>($r2, 0, $i1, i0);

        return $i2;

     label1:
        return i0;
    }

    private boolean isWhitespace(char)
    {
        char c0;
        com.sun.lwuit.impl.LWUITImplementation r0;
        int $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 32 goto label1;

        $i2 = (int) c0;

        if $i2 == 10 goto label1;

        $i3 = (int) c0;

        if $i3 == 9 goto label1;

        $i4 = (int) c0;

        if $i4 == 10 goto label1;

        $i5 = (int) c0;

        if $i5 != 13 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isRTLOrWhitespace(char)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        char c0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        c0 := @parameter0: char;

        $z0 = r0.<com.sun.lwuit.impl.LWUITImplementation: boolean bidi>;

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: boolean isRTL(char)>(c0);

        if $z1 != 0 goto label1;

        $z2 = specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: boolean isWhitespace(char)>(c0);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        return 0;
    }

    public boolean isRTL(char)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        int $i1, $i2;
        char c0;
        boolean $z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 < 1424 goto label1;

        $i2 = (int) c0;

        if $i2 > 1983 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private final int swapBidiChars(char[], int, int, int)
    {
        int i0, i1, i2, $i3, $i4, i8, i9, i10, i11, i12, i13, i14, i15, $i19, $i21, $i23;
        boolean $z0, z1, z2, z3;
        char c5, $c6, $c7, c16, c17;
        com.sun.lwuit.impl.LWUITImplementation r1;
        char[] r0;

        r1 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i8 := @parameter3: int;

        $i19 = (int) -1;

        i9 = $i19;

        i2 = i0 + i1;

        i10 = i0;

        z1 = 0;

        z3 = 0;

        z2 = 0;

        i11 = i0;

     label01:
        if i11 >= i2 goto label03;

        $c7 = r0[i11];

        $z0 = virtualinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: boolean isRTL(char)>($c7);

        if $z0 == 0 goto label02;

        z1 = 1;

        z3 = 1;

        z2 = 1;

        goto label03;

     label02:
        i11 = i11 + 1;

        goto label01;

     label03:
        if z2 == 0 goto label09;

     label04:
        if i10 >= i2 goto label09;

        $i3 = specialinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: int scanSecond(char[],int,int)>(r0, i10, i2);

        if $i3 >= 0 goto label05;

        goto label09;

     label05:
        $i4 = specialinvoke r1.<com.sun.lwuit.impl.LWUITImplementation: int scanBackFirst(char[],int,int)>(r0, $i3, i2);

        i12 = $i3;

        i13 = $i4 - 1;

     label06:
        if i12 >= i13 goto label08;

        c5 = r0[i12];

        $c6 = r0[i13];

        r0[i12] = $c6;

        r0[i13] = c5;

        if i8 != i13 goto label07;

        i9 = i12;

        i8 = i12;

     label07:
        i12 = i12 + 1;

        $i21 = (int) -1;

        i13 = i13 + $i21;

        goto label06;

     label08:
        i10 = $i4;

        goto label04;

     label09:
        if z3 == 0 goto label13;

        i14 = i0;

        i15 = i2 - 1;

     label10:
        if i14 > i15 goto label13;

        c16 = r0[i14];

        c17 = r0[i15];

        r0[i14] = c17;

        r0[i15] = c16;

        if i8 != i14 goto label11;

        i9 = i15;

        goto label12;

     label11:
        if i8 != i15 goto label12;

        i9 = i14;

     label12:
        i14 = i14 + 1;

        $i23 = (int) -1;

        i15 = i15 + $i23;

        goto label10;

     label13:
        return i9;
    }

    private boolean isRTLBreak(char)
    {
        char c0;
        com.sun.lwuit.impl.LWUITImplementation r0;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 41 goto label1;

        $i2 = (int) c0;

        if $i2 == 93 goto label1;

        $i3 = (int) c0;

        if $i3 == 125 goto label1;

        $i4 = (int) c0;

        if $i4 == 40 goto label1;

        $i5 = (int) c0;

        if $i5 == 91 goto label1;

        $i6 = (int) c0;

        if $i6 != 123 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean isLTR(char)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        char c0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        c0 := @parameter0: char;

        $z0 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: boolean isRTL(char)>(c0);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: boolean isRTLBreak(char)>(c0);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private final int scanSecond(char[], int, int)
    {
        char $c2;
        com.sun.lwuit.impl.LWUITImplementation r0;
        int i0, i1, i3, i4, $i6;
        char[] r1;
        boolean $z0;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i6 = (int) -1;

        i3 = $i6;

        i4 = i0;

     label1:
        if i3 >= 0 goto label3;

        if i4 >= i1 goto label3;

        $c2 = r1[i4];

        $z0 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: boolean isRTLOrWhitespace(char)>($c2);

        if $z0 != 0 goto label2;

        i3 = i4;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return i3;
    }

    private final int scanBackFirst(char[], int, int)
    {
        int i0, i1, i6, i7, i8, $i10;
        boolean $z0, $z1, $z2, $z3;
        char $c2, $c3, $c4, $c5;
        com.sun.lwuit.impl.LWUITImplementation r0;
        char[] r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: char[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i6 = i0;

        i7 = i1 + 1;

     label1:
        if i7 >= i0 goto label4;

        $c4 = r1[i7];

        $z2 = virtualinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: boolean isRTL(char)>($c4);

        if $z2 != 0 goto label2;

        $c5 = r1[i7];

        $z3 = specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: boolean isRTLBreak(char)>($c5);

        if $z3 == 0 goto label3;

     label2:
        i6 = i7;

        goto label4;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        i8 = i6 - 1;

     label5:
        if i8 < i1 goto label7;

        $c2 = r1[i8];

        $z0 = specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: boolean isLTR(char)>($c2);

        if $z0 == 0 goto label6;

        $c3 = r1[i8];

        $z1 = specialinvoke r0.<com.sun.lwuit.impl.LWUITImplementation: boolean isWhitespace(char)>($c3);

        if $z1 != 0 goto label6;

        i6 = i8 + 1;

        goto label7;

     label6:
        $i10 = (int) -1;

        i8 = i8 + $i10;

        goto label5;

     label7:
        return i6;
    }

    public java.io.InputStream getResourceAsStream(java.lang.Class, java.lang.String)
    {
        com.sun.lwuit.impl.LWUITImplementation r3;
        java.lang.Class r0;
        java.lang.String r1;
        java.io.InputStream $r2;

        r3 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

        return $r2;
    }

    public boolean isAnimation(java.lang.Object)
    {
        com.sun.lwuit.impl.LWUITImplementation r0;
        java.lang.Object r1;

        r0 := @this: com.sun.lwuit.impl.LWUITImplementation;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public static void <clinit>()
    {
        <com.sun.lwuit.impl.LWUITImplementation: char RTL_RANGE_END> = 1983;

        <com.sun.lwuit.impl.LWUITImplementation: char RTL_RANGE_BEGIN> = 1424;

        return;
    }
}
