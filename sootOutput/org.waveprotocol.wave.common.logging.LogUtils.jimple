public final class org.waveprotocol.wave.common.logging.LogUtils extends java.lang.Object
{
    private static final int MAX_STACK_FRAME;

    private void <init>()
    {
        org.waveprotocol.wave.common.logging.LogUtils r0;

        r0 := @this: org.waveprotocol.wave.common.logging.LogUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String printObjectAsHtml(java.lang.Object)
    {
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        java.lang.Object r2;
        java.lang.String $r3, $r4, $r7;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<span class=\'object\'>");

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $r4 = staticinvoke <org.waveprotocol.wave.common.logging.LogUtils: java.lang.String xmlEscape(java.lang.String)>($r3);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</span>");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String stringifyLogObject(java.lang.Object)
    {
        java.lang.Object[] $r3, r4;
        int i0, i1;
        java.lang.Object r0, r6;
        java.lang.StringBuilder $r2;
        java.lang.String $r1, $r5, $r7;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Object[];

        if $z0 == 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = (java.lang.Object[]) r0;

        r4 = (java.lang.Object[]) $r3;

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r6 = r4[i1];

        $r7 = virtualinvoke r6.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label3:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String printStackTraceAsHtml(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.StackTraceElement $r5, $r9, $r12;
        java.lang.String $r3, $r6, $r13;
        java.lang.StackTraceElement[] $r1;
        java.lang.StringBuilder $r2, $r4, $r7, $r8, $r10, $r11, $r14;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        i4 = 0;

     label1:
        $i0 = lengthof $r1;

        if i4 >= $i0 goto label2;

        if i4 > 12 goto label2;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&nbsp;&nbsp;&nbsp;&nbsp;");

        $r5 = $r1[i4];

        $r6 = virtualinvoke $r5.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r9 = $r1[i4];

        $i3 = virtualinvoke $r9.<java.lang.StackTraceElement: int getLineNumber()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r12 = $r1[i4];

        $r13 = virtualinvoke $r12.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<br/>");

        i4 = i4 + 1;

        goto label1;

     label2:
        $i1 = lengthof $r1;

        $i2 = $i1 - 1;

        if 12 >= $i2 goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&nbsp;&nbsp;&nbsp;&nbsp;...<br/>");

     label3:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String xmlEscape(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&", "&amp;");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("<", "&lt;");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(">", "&gt;");

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\"", "&quot;");

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\'", "&#39;");

        return $r5;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.common.logging.LogUtils: int MAX_STACK_FRAME> = 12;

        return;
    }
}
