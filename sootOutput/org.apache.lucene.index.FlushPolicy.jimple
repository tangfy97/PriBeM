abstract class org.apache.lucene.index.FlushPolicy extends java.lang.Object implements java.lang.Cloneable
{
    protected org.apache.lucene.util.SetOnce writer;
    protected org.apache.lucene.index.LiveIndexWriterConfig indexWriterConfig;
    static final boolean $assertionsDisabled;

    void <init>()
    {
        org.apache.lucene.index.FlushPolicy r0;
        org.apache.lucene.util.SetOnce $r1;

        r0 := @this: org.apache.lucene.index.FlushPolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.lucene.util.SetOnce;

        specialinvoke $r1.<org.apache.lucene.util.SetOnce: void <init>()>();

        r0.<org.apache.lucene.index.FlushPolicy: org.apache.lucene.util.SetOnce writer> = $r1;

        return;
    }

    public abstract void onDelete(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState);

    public void onUpdate(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)
    {
        org.apache.lucene.index.FlushPolicy r0;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState r2;
        org.apache.lucene.index.DocumentsWriterFlushControl r1;

        r0 := @this: org.apache.lucene.index.FlushPolicy;

        r1 := @parameter0: org.apache.lucene.index.DocumentsWriterFlushControl;

        r2 := @parameter1: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState;

        virtualinvoke r0.<org.apache.lucene.index.FlushPolicy: void onInsert(org.apache.lucene.index.DocumentsWriterFlushControl,org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)>(r1, r2);

        virtualinvoke r0.<org.apache.lucene.index.FlushPolicy: void onDelete(org.apache.lucene.index.DocumentsWriterFlushControl,org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)>(r1, r2);

        return;
    }

    public abstract void onInsert(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState);

    protected synchronized void init(org.apache.lucene.index.DocumentsWriter)
    {
        org.apache.lucene.index.IndexWriter $r3;
        org.apache.lucene.util.SetOnce $r2;
        org.apache.lucene.index.LiveIndexWriterConfig $r4;
        org.apache.lucene.index.FlushPolicy r0;
        org.apache.lucene.index.DocumentsWriter r1;

        r0 := @this: org.apache.lucene.index.FlushPolicy;

        r1 := @parameter0: org.apache.lucene.index.DocumentsWriter;

        $r2 = r0.<org.apache.lucene.index.FlushPolicy: org.apache.lucene.util.SetOnce writer>;

        virtualinvoke $r2.<org.apache.lucene.util.SetOnce: void set(java.lang.Object)>(r1);

        $r3 = r1.<org.apache.lucene.index.DocumentsWriter: org.apache.lucene.index.IndexWriter indexWriter>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig getConfig()>();

        r0.<org.apache.lucene.index.FlushPolicy: org.apache.lucene.index.LiveIndexWriterConfig indexWriterConfig> = $r4;

        return;
    }

    protected org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState findLargestNonPendingWriter(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)
    {
        long l0, l4;
        java.lang.AssertionError $r12, $r13, $r14;
        org.apache.lucene.index.DocumentsWriterFlushControl r1;
        byte $b1;
        int $i2, $i3, $i5;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState r0, r6, r11;
        org.apache.lucene.index.DocumentsWriterPerThread $r7, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Iterator $r2;
        org.apache.lucene.index.FlushPolicy r3;
        java.lang.Object $r5;

        r3 := @this: org.apache.lucene.index.FlushPolicy;

        r1 := @parameter0: org.apache.lucene.index.DocumentsWriterFlushControl;

        r0 := @parameter1: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState;

        $z0 = <org.apache.lucene.index.FlushPolicy: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r9 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: org.apache.lucene.index.DocumentsWriterPerThread dwpt>;

        $i3 = virtualinvoke $r9.<org.apache.lucene.index.DocumentsWriterPerThread: int getNumDocsInRAM()>();

        if $i3 > 0 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        l4 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: long bytesUsed>;

        r11 = r0;

        $z1 = <org.apache.lucene.index.FlushPolicy: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z5 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: boolean flushPending>;

        if $z5 == 0 goto label2;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>("DWPT should have flushed");

        throw $r13;

     label2:
        $r2 = virtualinvoke r1.<org.apache.lucene.index.DocumentsWriterFlushControl: java.util.Iterator allActiveThreadStates()>();

     label3:
        $z6 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label5;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState) $r5;

        $z4 = r6.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: boolean flushPending>;

        if $z4 != 0 goto label4;

        l0 = r6.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: long bytesUsed>;

        $b1 = l0 cmp l4;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label4;

        $r7 = r6.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: org.apache.lucene.index.DocumentsWriterPerThread dwpt>;

        $i2 = virtualinvoke $r7.<org.apache.lucene.index.DocumentsWriterPerThread: int getNumDocsInRAM()>();

        if $i2 <= 0 goto label4;

        l4 = l0;

        r11 = r6;

     label4:
        goto label3;

     label5:
        $z2 = <org.apache.lucene.index.FlushPolicy: boolean $assertionsDisabled>;

        if $z2 != 0 goto label6;

        $z3 = specialinvoke r3.<org.apache.lucene.index.FlushPolicy: boolean assertMessage(java.lang.String)>("set largest ram consuming thread pending on lower watermark");

        if $z3 != 0 goto label6;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label6:
        return r11;
    }

    private boolean assertMessage(java.lang.String)
    {
        org.apache.lucene.util.SetOnce $r1, $r5;
        org.apache.lucene.index.DocumentsWriter $r3, $r7;
        org.apache.lucene.util.InfoStream $r4, $r9;
        org.apache.lucene.index.FlushPolicy r0;
        java.lang.Object $r2, $r6;
        java.lang.String r8;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FlushPolicy;

        r8 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.lucene.index.FlushPolicy: org.apache.lucene.util.SetOnce writer>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.util.SetOnce: java.lang.Object get()>();

        $r3 = (org.apache.lucene.index.DocumentsWriter) $r2;

        $r4 = $r3.<org.apache.lucene.index.DocumentsWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r4.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("FP");

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.lucene.index.FlushPolicy: org.apache.lucene.util.SetOnce writer>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.util.SetOnce: java.lang.Object get()>();

        $r7 = (org.apache.lucene.index.DocumentsWriter) $r6;

        $r9 = $r7.<org.apache.lucene.index.DocumentsWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r9.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("FP", r8);

     label1:
        return 1;
    }

    public org.apache.lucene.index.FlushPolicy clone()
    {
        org.apache.lucene.util.SetOnce $r3;
        org.apache.lucene.index.FlushPolicy r0, r2;
        java.lang.Object $r1;
        java.lang.RuntimeException $r5;
        java.lang.CloneNotSupportedException $r4;

        r0 := @this: org.apache.lucene.index.FlushPolicy;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (org.apache.lucene.index.FlushPolicy) $r1;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

     label4:
        $r3 = new org.apache.lucene.util.SetOnce;

        specialinvoke $r3.<org.apache.lucene.util.SetOnce: void <init>()>();

        r2.<org.apache.lucene.index.FlushPolicy: org.apache.lucene.util.SetOnce writer> = $r3;

        r2.<org.apache.lucene.index.FlushPolicy: org.apache.lucene.index.LiveIndexWriterConfig indexWriterConfig> = null;

        return r2;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.index.FlushPolicy r0, $r1;

        r0 := @this: org.apache.lucene.index.FlushPolicy;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.FlushPolicy: org.apache.lucene.index.FlushPolicy clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/FlushPolicy;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.FlushPolicy: boolean $assertionsDisabled> = $z1;

        return;
    }
}
