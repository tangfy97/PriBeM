public class org.springframework.expression.spel.ast.Projection extends org.springframework.expression.spel.ast.SpelNodeImpl
{
    private final boolean nullSafe;

    public void <init>(boolean, int, org.springframework.expression.spel.ast.SpelNodeImpl)
    {
        int i0;
        org.springframework.expression.spel.ast.Projection r0;
        org.springframework.expression.spel.ast.SpelNodeImpl r2;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1;
        boolean z0;

        r0 := @this: org.springframework.expression.spel.ast.Projection;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r2 := @parameter2: org.springframework.expression.spel.ast.SpelNodeImpl;

        $r1 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[1];

        $r1[0] = r2;

        specialinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(i0, $r1);

        r0.<org.springframework.expression.spel.ast.Projection: boolean nullSafe> = z0;

        return;
    }

    public org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        java.lang.Integer $r12;
        java.util.Map r48;
        org.springframework.expression.spel.ast.Projection r13;
        java.util.Set $r35;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r14, $r40;
        org.springframework.expression.spel.ExpressionState r0;
        org.springframework.expression.spel.ast.SpelNodeImpl $r15, $r41;
        org.springframework.expression.spel.SpelEvaluationException $r25, $r30;
        java.lang.Throwable $r46, $r47;
        java.lang.Object[] $r3, $r22, $r26, $r31;
        java.util.ArrayList $r5, $r34;
        java.lang.String $r29;
        org.springframework.expression.TypedValue $r1, $r8, $r16, $r19, $r23, $r33, $r38, $r42, $r44;
        org.springframework.expression.spel.SpelMessage $r27, $r32;
        java.util.Map$Entry r49;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Collection $r50;
        java.util.List $r4;
        org.springframework.core.convert.TypeDescriptor $r9, $r11, $r20, $r24, $r39, $r45;
        int $i0, $i1, $i2, $i3, i4;
        java.util.Iterator $r6, $r36;
        java.lang.Object $r2, $r7, $r17, $r21, $r37, $r43;
        java.lang.Class $r10, $r18, $r28, r51;

        r13 := @this: org.springframework.expression.spel.ast.Projection;

        r0 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>();

        $r2 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isArray(java.lang.Object)>($r2);

        $z1 = $r2 instanceof java.util.Map;

        if $z1 == 0 goto label06;

        r48 = (java.util.Map) $r2;

        $r34 = new java.util.ArrayList;

        specialinvoke $r34.<java.util.ArrayList: void <init>()>();

        $r35 = interfaceinvoke r48.<java.util.Map: java.util.Set entrySet()>();

        $r36 = interfaceinvoke $r35.<java.util.Set: java.util.Iterator iterator()>();

        goto label05;

     label01:
        $r37 = interfaceinvoke $r36.<java.util.Iterator: java.lang.Object next()>();

        r49 = (java.util.Map$Entry) $r37;

     label02:
        $r38 = new org.springframework.expression.TypedValue;

        $r39 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/util/Map$Entry;");

        specialinvoke $r38.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r49, $r39);

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>($r38);

        $r40 = r13.<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r41 = $r40[0];

        $r42 = virtualinvoke $r41.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r0);

        $r43 = virtualinvoke $r42.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        interfaceinvoke $r34.<java.util.List: boolean add(java.lang.Object)>($r43);

        goto label04;

     label03:
        $r47 := @caughtexception;

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        throw $r47;

     label04:
        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

     label05:
        $z6 = interfaceinvoke $r36.<java.util.Iterator: boolean hasNext()>();

        if $z6 != 0 goto label01;

        $r44 = new org.springframework.expression.TypedValue;

        $r45 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/util/List;");

        specialinvoke $r44.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r34, $r45);

        return $r44;

     label06:
        $z2 = $r2 instanceof java.util.Collection;

        if $z2 != 0 goto label07;

        if $z0 == 0 goto label18;

     label07:
        $z3 = $r2 instanceof java.util.Collection;

        if $z3 == 0 goto label08;

        $r50 = (java.util.Collection) $r2;

        goto label09;

     label08:
        $r3 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.Object[] toObjectArray(java.lang.Object)>($r2);

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $r50 = (java.util.Collection) $r4;

     label09:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i4 = 0;

        r51 = null;

        $r6 = interfaceinvoke $r50.<java.util.Collection: java.util.Iterator iterator()>();

        goto label15;

     label10:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

     label11:
        $r8 = new org.springframework.expression.TypedValue;

        $r9 = virtualinvoke $r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r10 = virtualinvoke $r9.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $r11 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>($r10);

        specialinvoke $r8.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r7, $r11);

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>($r8);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void enterScope(java.lang.String,java.lang.Object)>("index", $r12);

        $r14 = r13.<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r15 = $r14[0];

        $r16 = virtualinvoke $r15.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r0);

        $r17 = virtualinvoke $r16.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        if $r17 == null goto label12;

        if $z0 == 0 goto label12;

        $r18 = virtualinvoke $r17.<java.lang.Object: java.lang.Class getClass()>();

        r51 = specialinvoke r13.<org.springframework.expression.spel.ast.Projection: java.lang.Class determineCommonType(java.lang.Class,java.lang.Class)>(r51, $r18);

     label12:
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label14;

     label13:
        $r46 := @caughtexception;

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void exitScope()>();

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        throw $r46;

     label14:
        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void exitScope()>();

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        i4 = i4 + 1;

     label15:
        $z4 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label10;

        if $z0 == 0 goto label17;

        if r51 != null goto label16;

        r51 = class "Ljava/lang/Object;";

     label16:
        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r21 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r51, $i0);

        $r22 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray()>();

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r22, 0, $r21, 0, $i1);

        $r23 = new org.springframework.expression.TypedValue;

        $r24 = virtualinvoke $r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        specialinvoke $r23.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r21, $r24);

        return $r23;

     label17:
        $r19 = new org.springframework.expression.TypedValue;

        $r20 = virtualinvoke $r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        specialinvoke $r19.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r5, $r20);

        return $r19;

     label18:
        if $r2 != null goto label20;

        $z5 = r13.<org.springframework.expression.spel.ast.Projection: boolean nullSafe>;

        if $z5 == 0 goto label19;

        $r33 = <org.springframework.expression.TypedValue: org.springframework.expression.TypedValue NULL>;

        return $r33;

     label19:
        $r30 = new org.springframework.expression.spel.SpelEvaluationException;

        $i3 = virtualinvoke r13.<org.springframework.expression.spel.ast.Projection: int getStartPosition()>();

        $r32 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage PROJECTION_NOT_SUPPORTED_ON_TYPE>;

        $r31 = newarray (java.lang.Object)[1];

        $r31[0] = "null";

        specialinvoke $r30.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r32, $r31);

        throw $r30;

     label20:
        $r25 = new org.springframework.expression.spel.SpelEvaluationException;

        $i2 = virtualinvoke r13.<org.springframework.expression.spel.ast.Projection: int getStartPosition()>();

        $r27 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage PROJECTION_NOT_SUPPORTED_ON_TYPE>;

        $r26 = newarray (java.lang.Object)[1];

        $r28 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r29 = virtualinvoke $r28.<java.lang.Class: java.lang.String getName()>();

        $r26[0] = $r29;

        specialinvoke $r25.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r27, $r26);

        throw $r25;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.Throwable from label11 to label13 with label13;
    }

    public java.lang.String toStringAST()
    {
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        org.springframework.expression.spel.ast.Projection r2;
        java.lang.String $r4, $r7;
        org.springframework.expression.spel.SpelNode $r3;

        r2 := @this: org.springframework.expression.spel.ast.Projection;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("![");

        $r3 = virtualinvoke r2.<org.springframework.expression.spel.ast.Projection: org.springframework.expression.spel.SpelNode getChild(int)>(0);

        $r4 = interfaceinvoke $r3.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private java.lang.Class determineCommonType(java.lang.Class, java.lang.Class)
    {
        java.lang.Class[] $r2;
        int i0, i1;
        java.lang.Class r0, r1, r3, r5;
        org.springframework.expression.spel.ast.Projection r4;
        boolean $z0, $z1, $z2;

        r4 := @this: org.springframework.expression.spel.ast.Projection;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        if r0 != null goto label1;

        return r1;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 == 0 goto label2;

        return r0;

     label2:
        r5 = r1;

        goto label5;

     label3:
        $z1 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 == 0 goto label4;

        return r5;

     label4:
        r5 = virtualinvoke r5.<java.lang.Class: java.lang.Class getSuperclass()>();

     label5:
        if r5 != class "Ljava/lang/Object;" goto label3;

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfacesForClass(java.lang.Class)>(r1);

        i0 = lengthof $r2;

        i1 = 0;

        goto label8;

     label6:
        r3 = $r2[i1];

        $z2 = virtualinvoke r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z2 == 0 goto label7;

        return r3;

     label7:
        i1 = i1 + 1;

     label8:
        if i1 < i0 goto label6;

        return class "Ljava/lang/Object;";
    }
}
