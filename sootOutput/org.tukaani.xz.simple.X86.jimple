public final class org.tukaani.xz.simple.X86 extends java.lang.Object implements org.tukaani.xz.simple.SimpleFilter
{
    private static final boolean[] MASK_TO_ALLOWED_STATUS;
    private static final int[] MASK_TO_BIT_NUMBER;
    private final boolean isEncoder;
    private int pos;
    private int prevMask;

    private static boolean test86MSByte(byte)
    {
        short s1, $s2;
        byte b0;
        int $i3;
        boolean $z0;

        b0 := @parameter0: byte;

        $s2 = (short) b0;

        s1 = $s2 & 255;

        if s1 == 0 goto label1;

        $i3 = (int) s1;

        if $i3 != 255 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void <init>(boolean, int)
    {
        int i0, $i1;
        org.tukaani.xz.simple.X86 r0;
        boolean z0;

        r0 := @this: org.tukaani.xz.simple.X86;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.tukaani.xz.simple.X86: int prevMask> = 0;

        r0.<org.tukaani.xz.simple.X86: boolean isEncoder> = z0;

        $i1 = i0 + 5;

        r0.<org.tukaani.xz.simple.X86: int pos> = $i1;

        return;
    }

    public int code(byte[], int, int)
    {
        byte[] r1;
        byte $b10, $b22, $b24, $b29, $b34, $b47, $b51, $b54, $b57, $b63, $b76, $b81;
        short $s11, $s25, $s27, $s30, $s35, $s86, $s90, $s91, $s94, $s96;
        boolean[] $r3;
        int[] $r2, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.tukaani.xz.simple.X86 r0;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i26, $i28, $i31, $i32, $i33, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, i44, $i45, $i46, $i48, $i49, $i50, $i52, $i53, $i55, $i56, $i58, $i59, $i60, $i61, $i62, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, i77, i78, i79, $i80, i82, i83, i84, $i85, $i87, $i89, $i92, $i93, $i95, $i97, $i99, $i101;

        r0 := @this: org.tukaani.xz.simple.X86;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i77 = i0 - 1;

        $i2 = i0 + i1;

        i3 = $i2 - 5;

        i78 = i0;

     label01:
        if i78 > i3 goto label14;

        $b10 = r1[i78];

        $s86 = (short) $b10;

        $s11 = $s86 & 254;

        $i87 = (int) $s11;

        if $i87 == 232 goto label02;

        goto label13;

     label02:
        i79 = i78 - i77;

        $i89 = (int) -4;

        $i12 = i79 & $i89;

        if $i12 == 0 goto label03;

        r0.<org.tukaani.xz.simple.X86: int prevMask> = 0;

        goto label05;

     label03:
        $i14 = r0.<org.tukaani.xz.simple.X86: int prevMask>;

        $i13 = i79 - 1;

        $i15 = $i14 << $i13;

        $i16 = $i15 & 7;

        r0.<org.tukaani.xz.simple.X86: int prevMask> = $i16;

        $i17 = r0.<org.tukaani.xz.simple.X86: int prevMask>;

        if $i17 == 0 goto label05;

        $r3 = <org.tukaani.xz.simple.X86: boolean[] MASK_TO_ALLOWED_STATUS>;

        $i68 = r0.<org.tukaani.xz.simple.X86: int prevMask>;

        $z2 = $r3[$i68];

        if $z2 == 0 goto label04;

        $i74 = i78 + 4;

        $r4 = <org.tukaani.xz.simple.X86: int[] MASK_TO_BIT_NUMBER>;

        $i72 = r0.<org.tukaani.xz.simple.X86: int prevMask>;

        $i73 = $r4[$i72];

        $i75 = $i74 - $i73;

        $b76 = r1[$i75];

        $z3 = staticinvoke <org.tukaani.xz.simple.X86: boolean test86MSByte(byte)>($b76);

        if $z3 == 0 goto label05;

     label04:
        i77 = i78;

        $i69 = r0.<org.tukaani.xz.simple.X86: int prevMask>;

        $i70 = $i69 << 1;

        $i71 = $i70 | 1;

        r0.<org.tukaani.xz.simple.X86: int prevMask> = $i71;

        goto label13;

     label05:
        i77 = i78;

        $i80 = i78 + 4;

        $b81 = r1[$i80];

        $z4 = staticinvoke <org.tukaani.xz.simple.X86: boolean test86MSByte(byte)>($b81);

        if $z4 == 0 goto label12;

        $i21 = i78 + 1;

        $b22 = r1[$i21];

        $s90 = (short) $b22;

        $s27 = $s90 & 255;

        $i23 = i78 + 2;

        $b24 = r1[$i23];

        $s91 = (short) $b24;

        $s25 = $s91 & 255;

        $i92 = (int) $s25;

        $i26 = $i92 << 8;

        $i93 = (int) $s27;

        $i32 = $i93 | $i26;

        $i28 = i78 + 3;

        $b29 = r1[$i28];

        $s94 = (short) $b29;

        $s30 = $s94 & 255;

        $i95 = (int) $s30;

        $i31 = $i95 << 16;

        $i37 = $i32 | $i31;

        $i33 = i78 + 4;

        $b34 = r1[$i33];

        $s96 = (short) $b34;

        $s35 = $s96 & 255;

        $i97 = (int) $s35;

        $i36 = $i97 << 24;

        i82 = $i37 | $i36;

     label06:
        $z0 = r0.<org.tukaani.xz.simple.X86: boolean isEncoder>;

        if $z0 == 0 goto label07;

        $i65 = r0.<org.tukaani.xz.simple.X86: int pos>;

        $i66 = $i65 + i78;

        $i67 = $i66 - i0;

        i83 = i82 + $i67;

        goto label08;

     label07:
        $i38 = r0.<org.tukaani.xz.simple.X86: int pos>;

        $i39 = $i38 + i78;

        $i40 = $i39 - i0;

        i83 = i82 - $i40;

     label08:
        $i41 = r0.<org.tukaani.xz.simple.X86: int prevMask>;

        if $i41 != 0 goto label09;

        goto label11;

     label09:
        $r2 = <org.tukaani.xz.simple.X86: int[] MASK_TO_BIT_NUMBER>;

        $i42 = r0.<org.tukaani.xz.simple.X86: int prevMask>;

        $i43 = $r2[$i42];

        i44 = $i43 * 8;

        $i45 = 24 - i44;

        $i46 = i83 >>> $i45;

        $b47 = (byte) $i46;

        $z1 = staticinvoke <org.tukaani.xz.simple.X86: boolean test86MSByte(byte)>($b47);

        if $z1 != 0 goto label10;

        goto label11;

     label10:
        $i48 = 32 - i44;

        $i49 = 1 << $i48;

        $i50 = $i49 - 1;

        i82 = i83 ^ $i50;

        goto label06;

     label11:
        $i52 = i78 + 1;

        $b51 = (byte) i83;

        r1[$i52] = $b51;

        $i55 = i78 + 2;

        $i53 = i83 >>> 8;

        $b54 = (byte) $i53;

        r1[$i55] = $b54;

        $i58 = i78 + 3;

        $i56 = i83 >>> 16;

        $b57 = (byte) $i56;

        r1[$i58] = $b57;

        $i64 = i78 + 4;

        $i59 = i83 >>> 24;

        $i60 = $i59 & 1;

        $i61 = $i60 - 1;

        $i99 = (int) -1;

        $i62 = $i61 ^ $i99;

        $b63 = (byte) $i62;

        r1[$i64] = $b63;

        i78 = i78 + 4;

        goto label13;

     label12:
        $i18 = r0.<org.tukaani.xz.simple.X86: int prevMask>;

        $i19 = $i18 << 1;

        $i20 = $i19 | 1;

        r0.<org.tukaani.xz.simple.X86: int prevMask> = $i20;

     label13:
        i78 = i78 + 1;

        goto label01;

     label14:
        i84 = i78 - i77;

        $i101 = (int) -4;

        $i4 = i84 & $i101;

        if $i4 == 0 goto label15;

        $i85 = 0;

        goto label16;

     label15:
        $i6 = r0.<org.tukaani.xz.simple.X86: int prevMask>;

        $i5 = i84 - 1;

        $i85 = $i6 << $i5;

     label16:
        r0.<org.tukaani.xz.simple.X86: int prevMask> = $i85;

        $i9 = i78 - i0;

        $i7 = r0.<org.tukaani.xz.simple.X86: int pos>;

        $i8 = $i7 + $i9;

        r0.<org.tukaani.xz.simple.X86: int pos> = $i8;

        return $i9;
    }

    static void <clinit>()
    {
        boolean[] $r0;
        int[] $r1;

        $r0 = newarray (boolean)[8];

        $r0[0] = 1;

        $r0[1] = 1;

        $r0[2] = 1;

        $r0[3] = 0;

        $r0[4] = 1;

        $r0[5] = 0;

        $r0[6] = 0;

        $r0[7] = 0;

        <org.tukaani.xz.simple.X86: boolean[] MASK_TO_ALLOWED_STATUS> = $r0;

        $r1 = newarray (int)[8];

        $r1[0] = 0;

        $r1[1] = 1;

        $r1[2] = 2;

        $r1[3] = 2;

        $r1[4] = 3;

        $r1[5] = 3;

        $r1[6] = 3;

        $r1[7] = 3;

        <org.tukaani.xz.simple.X86: int[] MASK_TO_BIT_NUMBER> = $r1;

        return;
    }
}
