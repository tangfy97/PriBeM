public class org.apache.lucene.index.ParallelReader extends org.apache.lucene.index.IndexReader
{
    private java.util.List readers;
    private java.util.List decrefOnClose;
    boolean incRefReaders;
    private java.util.SortedMap fieldToReader;
    private java.util.Map readerToFields;
    private java.util.List storedFieldReaders;
    private int maxDoc;
    private int numDocs;
    private boolean hasDeletions;

    public void <init>() throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        specialinvoke r0.<org.apache.lucene.index.ParallelReader: void <init>(boolean)>(1);

        return;
    }

    public void <init>(boolean) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        java.util.concurrent.ConcurrentHashMap $r7;
        java.util.HashMap $r4;
        java.util.ArrayList $r1, $r2, $r5;
        java.util.TreeMap $r3;
        org.apache.lucene.util.MapBackedSet $r6;
        boolean z0, $z1;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.lucene.index.IndexReader: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.index.ParallelReader: java.util.List readers> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.index.ParallelReader: java.util.List decrefOnClose> = $r2;

        r0.<org.apache.lucene.index.ParallelReader: boolean incRefReaders> = 0;

        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.lucene.index.ParallelReader: java.util.SortedMap fieldToReader> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.index.ParallelReader: java.util.Map readerToFields> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.index.ParallelReader: java.util.List storedFieldReaders> = $r5;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<org.apache.lucene.index.ParallelReader: boolean incRefReaders> = $z1;

        $r6 = new org.apache.lucene.util.MapBackedSet;

        $r7 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        specialinvoke $r6.<org.apache.lucene.util.MapBackedSet: void <init>(java.util.Map)>($r7);

        r0.<org.apache.lucene.index.ParallelReader: java.util.Collection readerFinishedListeners> = $r6;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.index.ParallelReader r1;
        java.util.Iterator $r3;
        java.util.List $r2;
        java.lang.StringBuilder $r0, $r5;
        java.lang.Object $r6, $r7;
        java.lang.String $r4;
        boolean $z0, $z1;

        r1 := @this: org.apache.lucene.index.ParallelReader;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("ParallelReader(");

        $r2 = r1.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public void add(org.apache.lucene.index.IndexReader) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        org.apache.lucene.index.IndexReader r1;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        r1 := @parameter0: org.apache.lucene.index.IndexReader;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void add(org.apache.lucene.index.IndexReader,boolean)>(r1, 0);

        return;
    }

    public void add(org.apache.lucene.index.IndexReader, boolean) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        java.util.Map $r5;
        boolean $z0, z1, $z2, $z3, $z4;
        java.util.Collection $r4;
        java.util.List $r1, $r7, $r8, $r10;
        java.lang.StringBuilder $r17, $r18, $r19, $r20, $r21, $r24, $r25, $r26, $r27, $r28;
        org.apache.lucene.index.IndexReader r2;
        java.util.SortedMap $r13, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.Boolean $r9;
        java.lang.String r12, $r22, $r29;
        java.util.Iterator $r6;
        org.apache.lucene.index.IndexReader$FieldOption $r3;
        java.lang.IllegalArgumentException $r16, $r23;
        java.lang.Object $r11, $r14;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        r2 := @parameter0: org.apache.lucene.index.IndexReader;

        z1 := @parameter1: boolean;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $i9 = virtualinvoke r2.<org.apache.lucene.index.IndexReader: int maxDoc()>();

        r0.<org.apache.lucene.index.ParallelReader: int maxDoc> = $i9;

        $i10 = virtualinvoke r2.<org.apache.lucene.index.IndexReader: int numDocs()>();

        r0.<org.apache.lucene.index.ParallelReader: int numDocs> = $i10;

        $z4 = virtualinvoke r2.<org.apache.lucene.index.IndexReader: boolean hasDeletions()>();

        r0.<org.apache.lucene.index.ParallelReader: boolean hasDeletions> = $z4;

     label1:
        $i1 = virtualinvoke r2.<org.apache.lucene.index.IndexReader: int maxDoc()>();

        $i2 = r0.<org.apache.lucene.index.ParallelReader: int maxDoc>;

        if $i1 == $i2 goto label2;

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("All readers must have same maxDoc: ");

        $i7 = r0.<org.apache.lucene.index.ParallelReader: int maxDoc>;

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!=");

        $i8 = virtualinvoke r2.<org.apache.lucene.index.IndexReader: int maxDoc()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r23;

     label2:
        $i3 = virtualinvoke r2.<org.apache.lucene.index.IndexReader: int numDocs()>();

        $i4 = r0.<org.apache.lucene.index.ParallelReader: int numDocs>;

        if $i3 == $i4 goto label3;

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("All readers must have same numDocs: ");

        $i5 = r0.<org.apache.lucene.index.ParallelReader: int numDocs>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!=");

        $i6 = virtualinvoke r2.<org.apache.lucene.index.IndexReader: int numDocs()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r16;

     label3:
        $r3 = <org.apache.lucene.index.IndexReader$FieldOption: org.apache.lucene.index.IndexReader$FieldOption ALL>;

        $r4 = virtualinvoke r2.<org.apache.lucene.index.IndexReader: java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)>($r3);

        $r5 = r0.<org.apache.lucene.index.ParallelReader: java.util.Map readerToFields>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4);

        $r6 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r11 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r11;

        $r13 = r0.<org.apache.lucene.index.ParallelReader: java.util.SortedMap fieldToReader>;

        $r14 = interfaceinvoke $r13.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r12);

        if $r14 != null goto label5;

        $r15 = r0.<org.apache.lucene.index.ParallelReader: java.util.SortedMap fieldToReader>;

        interfaceinvoke $r15.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r2);

     label5:
        goto label4;

     label6:
        if z1 != 0 goto label7;

        $r10 = r0.<org.apache.lucene.index.ParallelReader: java.util.List storedFieldReaders>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r2);

     label7:
        $r7 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r2);

        $z2 = r0.<org.apache.lucene.index.ParallelReader: boolean incRefReaders>;

        if $z2 == 0 goto label8;

        virtualinvoke r2.<org.apache.lucene.index.IndexReader: void incRef()>();

     label8:
        $r8 = r0.<org.apache.lucene.index.ParallelReader: java.util.List decrefOnClose>;

        $z3 = r0.<org.apache.lucene.index.ParallelReader: boolean incRefReaders>;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        return;
    }

    public synchronized java.lang.Object clone()
    {
        org.apache.lucene.index.ParallelReader r0;
        java.lang.RuntimeException $r3;
        org.apache.lucene.index.IndexReader $r1;
        java.lang.Exception $r2;

        r0 := @this: org.apache.lucene.index.ParallelReader;

     label1:
        $r1 = virtualinvoke r0.<org.apache.lucene.index.ParallelReader: org.apache.lucene.index.IndexReader doReopen(boolean)>(1);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected synchronized org.apache.lucene.index.IndexReader doOpenIfChanged() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        org.apache.lucene.index.IndexReader $r1;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.ParallelReader: org.apache.lucene.index.IndexReader doReopen(boolean)>(0);

        return $r1;
    }

    protected org.apache.lucene.index.IndexReader doReopen(boolean) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0, $r5;
        boolean $z0, $z1, $z2, z3, z4, z5, $z6, z7, z8, z9;
        java.util.List $r2, $r6, $r7, $r11, $r14, $r21;
        org.apache.lucene.index.IndexReader $r17, r25, r26, r27, r28, r29, r30;
        java.lang.Throwable $r24;
        java.util.ArrayList $r1, $r4;
        int $i0, $i1, $i2, i3, i4, i5;
        java.lang.Boolean $r10, $r12;
        java.util.Iterator $r3;
        java.io.IOException $r19, $r23;
        java.lang.Object $r8, $r9, $r13, $r15, $r16, $r18, $r20, $r22;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        z3 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        z4 = 0;

        z9 = 0;

        z8 = 0;

        z7 = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        z5 = 0;

     label01:
        $r2 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r16 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.apache.lucene.index.IndexReader) $r16;

        if z3 == 0 goto label03;

        $r18 = virtualinvoke r25.<org.apache.lucene.index.IndexReader: java.lang.Object clone()>();

        r26 = (org.apache.lucene.index.IndexReader) $r18;

        z4 = 1;

        z9 = 1;

        z8 = 1;

        z7 = 1;

        goto label05;

     label03:
        $r17 = staticinvoke <org.apache.lucene.index.IndexReader: org.apache.lucene.index.IndexReader openIfChanged(org.apache.lucene.index.IndexReader)>(r25);

        r26 = $r17;

        if $r17 == null goto label04;

        z4 = 1;

        z9 = 1;

        z8 = 1;

        z7 = 1;

        goto label05;

     label04:
        r26 = r25;

     label05:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r26);

        goto label02;

     label06:
        z5 = 1;

        goto label18;

     label07:
        goto label10;

     label08:
        $r24 := @caughtexception;

        goto label25;

     label09:
        throw $r24;

     label10:
        if z7 == 0 goto label17;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new org.apache.lucene.index.ParallelReader;

        specialinvoke $r5.<org.apache.lucene.index.ParallelReader: void <init>()>();

        i3 = 0;

     label11:
        $r6 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i3 >= $i0 goto label16;

        $r7 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i3);

        r27 = (org.apache.lucene.index.IndexReader) $r8;

        $r9 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i3);

        r28 = (org.apache.lucene.index.IndexReader) $r9;

        if r28 != r27 goto label12;

        $r12 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r12);

        virtualinvoke r28.<org.apache.lucene.index.IndexReader: void incRef()>();

        goto label13;

     label12:
        $r10 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r10);

     label13:
        $r11 = r0.<org.apache.lucene.index.ParallelReader: java.util.List storedFieldReaders>;

        $z2 = interfaceinvoke $r11.<java.util.List: boolean contains(java.lang.Object)>(r27);

        if $z2 != 0 goto label14;

        $z6 = 1;

        goto label15;

     label14:
        $z6 = 0;

     label15:
        virtualinvoke $r5.<org.apache.lucene.index.ParallelReader: void add(org.apache.lucene.index.IndexReader,boolean)>(r28, $z6);

        i3 = i3 + 1;

        goto label11;

     label16:
        $r5.<org.apache.lucene.index.ParallelReader: java.util.List decrefOnClose> = $r4;

        $z1 = r0.<org.apache.lucene.index.ParallelReader: boolean incRefReaders>;

        $r5.<org.apache.lucene.index.ParallelReader: boolean incRefReaders> = $z1;

        return $r5;

     label17:
        return null;

     label18:
        if 1 != 0 goto label24;

        if z8 == 0 goto label24;

        i4 = 0;

     label19:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i4 >= $i1 goto label24;

        $r13 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i4);

        r29 = (org.apache.lucene.index.IndexReader) $r13;

        $r14 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i4);

        if r29 == $r15 goto label23;

     label20:
        virtualinvoke r29.<org.apache.lucene.index.IndexReader: void close()>();

     label21:
        goto label23;

     label22:
        $r23 := @caughtexception;

     label23:
        i4 = i4 + 1;

        goto label19;

     label24:
        goto label07;

     label25:
        if z5 != 0 goto label31;

        if z9 == 0 goto label31;

        i5 = 0;

     label26:
        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i5 >= $i2 goto label31;

        $r20 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i5);

        r30 = (org.apache.lucene.index.IndexReader) $r20;

        $r21 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(i5);

        if r30 == $r22 goto label30;

     label27:
        virtualinvoke r30.<org.apache.lucene.index.IndexReader: void close()>();

     label28:
        goto label30;

     label29:
        $r19 := @caughtexception;

     label30:
        i5 = i5 + 1;

        goto label26;

     label31:
        goto label09;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.io.IOException from label20 to label21 with label22;
        catch java.io.IOException from label27 to label28 with label29;
    }

    public int numDocs()
    {
        org.apache.lucene.index.ParallelReader r0;
        int $i0;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        $i0 = r0.<org.apache.lucene.index.ParallelReader: int numDocs>;

        return $i0;
    }

    public int maxDoc()
    {
        org.apache.lucene.index.ParallelReader r0;
        int $i0;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        $i0 = r0.<org.apache.lucene.index.ParallelReader: int maxDoc>;

        return $i0;
    }

    public boolean hasDeletions()
    {
        org.apache.lucene.index.ParallelReader r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $z0 = r0.<org.apache.lucene.index.ParallelReader: boolean hasDeletions>;

        return $z0;
    }

    public boolean isDeleted(int)
    {
        org.apache.lucene.index.ParallelReader r0;
        java.util.List $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        org.apache.lucene.index.IndexReader $r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        i1 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (org.apache.lucene.index.IndexReader) $r3;

        $z0 = virtualinvoke $r4.<org.apache.lucene.index.IndexReader: boolean isDeleted(int)>(i1);

        return $z0;

     label1:
        return 0;
    }

    protected void doDelete(int) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        java.util.List $r1;
        java.util.Iterator $r2;
        int i0;
        java.lang.Object $r3;
        org.apache.lucene.index.IndexReader r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.index.IndexReader) $r3;

        virtualinvoke r4.<org.apache.lucene.index.IndexReader: void deleteDocument(int)>(i0);

        goto label1;

     label2:
        r0.<org.apache.lucene.index.ParallelReader: boolean hasDeletions> = 1;

        return;
    }

    protected void doUndeleteAll() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        java.util.List $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.apache.lucene.index.IndexReader r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        $r1 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.index.IndexReader) $r3;

        virtualinvoke r4.<org.apache.lucene.index.IndexReader: void undeleteAll()>();

        goto label1;

     label2:
        r0.<org.apache.lucene.index.ParallelReader: boolean hasDeletions> = 0;

        return;
    }

    public org.apache.lucene.document.Document document(int, org.apache.lucene.document.FieldSelector) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        org.apache.lucene.document.FieldSelector r6;
        org.apache.lucene.document.Fieldable r19;
        org.apache.lucene.document.FieldSelectorResult $r15, $r16;
        org.apache.lucene.document.Document $r1, $r7;
        java.util.Map $r11;
        int i0;
        java.lang.String r18;
        boolean $z0, $z1, $z2, z4, $z5, $z6;
        java.util.Iterator $r3, $r9, $r13;
        java.util.Collection r17;
        java.util.List $r2, $r8;
        java.lang.Object $r4, $r10, $r12, $r14;
        org.apache.lucene.index.IndexReader r5;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        i0 := @parameter0: int;

        r6 := @parameter1: org.apache.lucene.document.FieldSelector;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r1 = new org.apache.lucene.document.Document;

        specialinvoke $r1.<org.apache.lucene.document.Document: void <init>()>();

        $r2 = r0.<org.apache.lucene.index.ParallelReader: java.util.List storedFieldReaders>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.index.IndexReader) $r4;

        if r6 != null goto label2;

        $z6 = 1;

        $z5 = 1;

        goto label3;

     label2:
        $z6 = 0;

        $z5 = 0;

     label3:
        z4 = $z5;

        if $z6 != 0 goto label6;

        $r11 = r0.<org.apache.lucene.index.ParallelReader: java.util.Map readerToFields>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r17 = (java.util.Collection) $r12;

        $r13 = interfaceinvoke r17.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.lang.String) $r14;

        $r15 = interfaceinvoke r6.<org.apache.lucene.document.FieldSelector: org.apache.lucene.document.FieldSelectorResult accept(java.lang.String)>(r18);

        $r16 = <org.apache.lucene.document.FieldSelectorResult: org.apache.lucene.document.FieldSelectorResult NO_LOAD>;

        if $r15 == $r16 goto label5;

        z4 = 1;

        goto label6;

     label5:
        goto label4;

     label6:
        if z4 == 0 goto label8;

        $r7 = virtualinvoke r5.<org.apache.lucene.index.IndexReader: org.apache.lucene.document.Document document(int,org.apache.lucene.document.FieldSelector)>(i0, r6);

        $r8 = virtualinvoke $r7.<org.apache.lucene.document.Document: java.util.List getFields()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.lucene.document.Fieldable) $r10;

        virtualinvoke $r1.<org.apache.lucene.document.Document: void add(org.apache.lucene.document.Fieldable)>(r19);

        goto label7;

     label8:
        goto label1;

     label9:
        return $r1;
    }

    public org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        java.lang.Object[] $r6;
        org.apache.lucene.index.TermFreqVector $r14;
        java.util.ArrayList $r1;
        org.apache.lucene.index.TermFreqVector[] $r5, $r7;
        int $i0, i1;
        java.lang.String r11;
        boolean $z0;
        java.util.Map$Entry r9;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.lang.Object $r8, $r10, $r12;
        java.util.SortedMap $r2;
        org.apache.lucene.index.IndexReader r13;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        i1 := @parameter0: int;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<org.apache.lucene.index.ParallelReader: java.util.SortedMap fieldToReader>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        r11 = (java.lang.String) $r10;

        $r12 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        r13 = (org.apache.lucene.index.IndexReader) $r12;

        $r14 = virtualinvoke r13.<org.apache.lucene.index.IndexReader: org.apache.lucene.index.TermFreqVector getTermFreqVector(int,java.lang.String)>(i1, r11);

        if $r14 == null goto label2;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

     label2:
        goto label1;

     label3:
        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $r5 = newarray (org.apache.lucene.index.TermFreqVector)[$i0];

        $r6 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (org.apache.lucene.index.TermFreqVector[]) $r6;

        return $r7;
    }

    public org.apache.lucene.index.TermFreqVector getTermFreqVector(int, java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        org.apache.lucene.index.TermFreqVector $r5;
        int i0;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.SortedMap $r2;
        org.apache.lucene.index.IndexReader r4;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r2 = r0.<org.apache.lucene.index.ParallelReader: java.util.SortedMap fieldToReader>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.lucene.index.IndexReader) $r3;

        if r4 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = virtualinvoke r4.<org.apache.lucene.index.IndexReader: org.apache.lucene.index.TermFreqVector getTermFreqVector(int,java.lang.String)>(i0, r1);

     label2:
        return $r5;
    }

    public void getTermFreqVector(int, java.lang.String, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        org.apache.lucene.index.TermVectorMapper r5;
        int i0;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.SortedMap $r2;
        org.apache.lucene.index.IndexReader r4;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r5 := @parameter2: org.apache.lucene.index.TermVectorMapper;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r2 = r0.<org.apache.lucene.index.ParallelReader: java.util.SortedMap fieldToReader>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.lucene.index.IndexReader) $r3;

        if r4 == null goto label1;

        virtualinvoke r4.<org.apache.lucene.index.IndexReader: void getTermFreqVector(int,java.lang.String,org.apache.lucene.index.TermVectorMapper)>(i0, r1, r5);

     label1:
        return;
    }

    public void getTermFreqVector(int, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.lucene.index.TermVectorMapper r10;
        int i0;
        java.lang.Object $r4, $r6, $r8;
        java.lang.String r7;
        java.util.SortedMap $r1;
        org.apache.lucene.index.IndexReader r9;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        i0 := @parameter0: int;

        r10 := @parameter1: org.apache.lucene.index.TermVectorMapper;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.ParallelReader: java.util.SortedMap fieldToReader>;

        $r2 = interfaceinvoke $r1.<java.util.SortedMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (org.apache.lucene.index.IndexReader) $r8;

        virtualinvoke r9.<org.apache.lucene.index.IndexReader: void getTermFreqVector(int,java.lang.String,org.apache.lucene.index.TermVectorMapper)>(i0, r7, r10);

        goto label1;

     label2:
        return;
    }

    public boolean hasNorms(java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.SortedMap $r2;
        org.apache.lucene.index.IndexReader r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r2 = r0.<org.apache.lucene.index.ParallelReader: java.util.SortedMap fieldToReader>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.lucene.index.IndexReader) $r3;

        if r4 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $z0 = virtualinvoke r4.<org.apache.lucene.index.IndexReader: boolean hasNorms(java.lang.String)>(r1);

     label2:
        return $z0;
    }

    public byte[] norms(java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        byte[] $r5;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.SortedMap $r2;
        org.apache.lucene.index.IndexReader r4;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r2 = r0.<org.apache.lucene.index.ParallelReader: java.util.SortedMap fieldToReader>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.lucene.index.IndexReader) $r3;

        if r4 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = virtualinvoke r4.<org.apache.lucene.index.IndexReader: byte[] norms(java.lang.String)>(r1);

     label2:
        return $r5;
    }

    public void norms(java.lang.String, byte[], int) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        byte[] r5;
        int i0;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.SortedMap $r2;
        org.apache.lucene.index.IndexReader r4;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: byte[];

        i0 := @parameter2: int;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r2 = r0.<org.apache.lucene.index.ParallelReader: java.util.SortedMap fieldToReader>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.lucene.index.IndexReader) $r3;

        if r4 == null goto label1;

        virtualinvoke r4.<org.apache.lucene.index.IndexReader: void norms(java.lang.String,byte[],int)>(r1, r5, i0);

     label1:
        return;
    }

    protected void doSetNorm(int, java.lang.String, byte) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        byte b1;
        int i0;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.SortedMap $r2;
        org.apache.lucene.index.IndexReader r4;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        b1 := @parameter2: byte;

        $r2 = r0.<org.apache.lucene.index.ParallelReader: java.util.SortedMap fieldToReader>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.lucene.index.IndexReader) $r3;

        if r4 == null goto label1;

        virtualinvoke r4.<org.apache.lucene.index.IndexReader: void doSetNorm(int,java.lang.String,byte)>(i0, r1, b1);

     label1:
        return;
    }

    public org.apache.lucene.index.TermEnum terms() throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        org.apache.lucene.index.ParallelReader$ParallelTermEnum $r1;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r1 = new org.apache.lucene.index.ParallelReader$ParallelTermEnum;

        specialinvoke $r1.<org.apache.lucene.index.ParallelReader$ParallelTermEnum: void <init>(org.apache.lucene.index.ParallelReader)>(r0);

        return $r1;
    }

    public org.apache.lucene.index.TermEnum terms(org.apache.lucene.index.Term) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        org.apache.lucene.index.Term r2;
        org.apache.lucene.index.ParallelReader$ParallelTermEnum $r1;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        r2 := @parameter0: org.apache.lucene.index.Term;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r1 = new org.apache.lucene.index.ParallelReader$ParallelTermEnum;

        specialinvoke $r1.<org.apache.lucene.index.ParallelReader$ParallelTermEnum: void <init>(org.apache.lucene.index.ParallelReader,org.apache.lucene.index.Term)>(r0, r2);

        return $r1;
    }

    public int docFreq(org.apache.lucene.index.Term) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        org.apache.lucene.index.Term r1;
        int $i0;
        java.lang.Object $r4;
        java.lang.String $r3;
        java.util.SortedMap $r2;
        org.apache.lucene.index.IndexReader r5;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        r1 := @parameter0: org.apache.lucene.index.Term;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r2 = r0.<org.apache.lucene.index.ParallelReader: java.util.SortedMap fieldToReader>;

        $r3 = virtualinvoke r1.<org.apache.lucene.index.Term: java.lang.String field()>();

        $r4 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (org.apache.lucene.index.IndexReader) $r4;

        if r5 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r5.<org.apache.lucene.index.IndexReader: int docFreq(org.apache.lucene.index.Term)>(r1);

     label2:
        return $i0;
    }

    public org.apache.lucene.index.TermDocs termDocs(org.apache.lucene.index.Term) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        org.apache.lucene.index.Term r2;
        org.apache.lucene.index.ParallelReader$ParallelTermDocs $r1;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        r2 := @parameter0: org.apache.lucene.index.Term;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r1 = new org.apache.lucene.index.ParallelReader$ParallelTermDocs;

        specialinvoke $r1.<org.apache.lucene.index.ParallelReader$ParallelTermDocs: void <init>(org.apache.lucene.index.ParallelReader,org.apache.lucene.index.Term)>(r0, r2);

        return $r1;
    }

    public org.apache.lucene.index.TermDocs termDocs() throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        org.apache.lucene.index.ParallelReader$ParallelTermDocs $r1;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r1 = new org.apache.lucene.index.ParallelReader$ParallelTermDocs;

        specialinvoke $r1.<org.apache.lucene.index.ParallelReader$ParallelTermDocs: void <init>(org.apache.lucene.index.ParallelReader)>(r0);

        return $r1;
    }

    public org.apache.lucene.index.TermPositions termPositions(org.apache.lucene.index.Term) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        org.apache.lucene.index.Term r2;
        org.apache.lucene.index.ParallelReader$ParallelTermPositions $r1;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        r2 := @parameter0: org.apache.lucene.index.Term;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r1 = new org.apache.lucene.index.ParallelReader$ParallelTermPositions;

        specialinvoke $r1.<org.apache.lucene.index.ParallelReader$ParallelTermPositions: void <init>(org.apache.lucene.index.ParallelReader,org.apache.lucene.index.Term)>(r0, r2);

        return $r1;
    }

    public org.apache.lucene.index.TermPositions termPositions() throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        org.apache.lucene.index.ParallelReader$ParallelTermPositions $r1;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r1 = new org.apache.lucene.index.ParallelReader$ParallelTermPositions;

        specialinvoke $r1.<org.apache.lucene.index.ParallelReader$ParallelTermPositions: void <init>(org.apache.lucene.index.ParallelReader)>(r0);

        return $r1;
    }

    public boolean isCurrent() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        java.util.List $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.apache.lucene.index.IndexReader r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.index.IndexReader) $r3;

        $z1 = virtualinvoke r4.<org.apache.lucene.index.IndexReader: boolean isCurrent()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public boolean isOptimized()
    {
        org.apache.lucene.index.ParallelReader r0;
        java.util.List $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.apache.lucene.index.IndexReader r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.index.IndexReader) $r3;

        $z1 = virtualinvoke r4.<org.apache.lucene.index.IndexReader: boolean isOptimized()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public long getVersion()
    {
        org.apache.lucene.index.ParallelReader r1;
        java.lang.UnsupportedOperationException $r0;

        r1 := @this: org.apache.lucene.index.ParallelReader;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("ParallelReader does not support this method.");

        throw $r0;
    }

    org.apache.lucene.index.IndexReader[] getSubReaders()
    {
        org.apache.lucene.index.ParallelReader r0;
        java.util.List $r1, $r2;
        java.lang.Object[] $r4;
        int $i0;
        org.apache.lucene.index.IndexReader[] $r3, $r5;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        $r2 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r1 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = newarray (org.apache.lucene.index.IndexReader)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.lucene.index.IndexReader[]) $r4;

        return $r5;
    }

    protected void doCommit(java.util.Map) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        java.util.List $r1;
        java.util.Iterator $r2;
        java.util.Map r5;
        java.lang.Object $r3;
        org.apache.lucene.index.IndexReader r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        r5 := @parameter0: java.util.Map;

        $r1 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.index.IndexReader) $r3;

        virtualinvoke r4.<org.apache.lucene.index.IndexReader: void commit(java.util.Map)>(r5);

        goto label1;

     label2:
        return;
    }

    protected synchronized void doClose() throws java.io.IOException
    {
        org.apache.lucene.index.ParallelReader r0;
        java.util.List $r1, $r2, $r5, $r8;
        int $i0, i1;
        java.lang.Boolean $r4;
        java.lang.Object $r3, $r6, $r9;
        org.apache.lucene.index.IndexReader $r7, $r10;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label4;

        $r2 = r0.<org.apache.lucene.index.ParallelReader: java.util.List decrefOnClose>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r8 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i1);

        $r10 = (org.apache.lucene.index.IndexReader) $r9;

        virtualinvoke $r10.<org.apache.lucene.index.IndexReader: void decRef()>();

        goto label3;

     label2:
        $r5 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (org.apache.lucene.index.IndexReader) $r6;

        virtualinvoke $r7.<org.apache.lucene.index.IndexReader: void close()>();

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)
    {
        org.apache.lucene.index.ParallelReader r0;
        java.util.Iterator $r3;
        java.util.Collection $r7;
        org.apache.lucene.index.IndexReader$FieldOption r6;
        java.util.HashSet $r1;
        java.util.List $r2;
        java.lang.Object $r4;
        org.apache.lucene.index.IndexReader r5;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        r6 := @parameter0: org.apache.lucene.index.IndexReader$FieldOption;

        virtualinvoke r0.<org.apache.lucene.index.ParallelReader: void ensureOpen()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r2 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.index.IndexReader) $r4;

        $r7 = virtualinvoke r5.<org.apache.lucene.index.IndexReader: java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)>(r6);

        interfaceinvoke $r1.<java.util.Set: boolean addAll(java.util.Collection)>($r7);

        goto label1;

     label2:
        return $r1;
    }

    public void addReaderFinishedListener(org.apache.lucene.index.IndexReader$ReaderFinishedListener)
    {
        org.apache.lucene.index.ParallelReader r0;
        org.apache.lucene.index.IndexReader$ReaderFinishedListener r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        org.apache.lucene.index.IndexReader r5;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        r1 := @parameter0: org.apache.lucene.index.IndexReader$ReaderFinishedListener;

        specialinvoke r0.<org.apache.lucene.index.IndexReader: void addReaderFinishedListener(org.apache.lucene.index.IndexReader$ReaderFinishedListener)>(r1);

        $r2 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.index.IndexReader) $r4;

        virtualinvoke r5.<org.apache.lucene.index.IndexReader: void addReaderFinishedListener(org.apache.lucene.index.IndexReader$ReaderFinishedListener)>(r1);

        goto label1;

     label2:
        return;
    }

    public void removeReaderFinishedListener(org.apache.lucene.index.IndexReader$ReaderFinishedListener)
    {
        org.apache.lucene.index.ParallelReader r0;
        org.apache.lucene.index.IndexReader$ReaderFinishedListener r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        org.apache.lucene.index.IndexReader r5;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ParallelReader;

        r1 := @parameter0: org.apache.lucene.index.IndexReader$ReaderFinishedListener;

        specialinvoke r0.<org.apache.lucene.index.IndexReader: void removeReaderFinishedListener(org.apache.lucene.index.IndexReader$ReaderFinishedListener)>(r1);

        $r2 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.index.IndexReader) $r4;

        virtualinvoke r5.<org.apache.lucene.index.IndexReader: void removeReaderFinishedListener(org.apache.lucene.index.IndexReader$ReaderFinishedListener)>(r1);

        goto label1;

     label2:
        return;
    }

    static java.util.SortedMap access$000(org.apache.lucene.index.ParallelReader)
    {
        org.apache.lucene.index.ParallelReader r0;
        java.util.SortedMap $r1;

        r0 := @parameter0: org.apache.lucene.index.ParallelReader;

        $r1 = r0.<org.apache.lucene.index.ParallelReader: java.util.SortedMap fieldToReader>;

        return $r1;
    }

    static java.util.List access$100(org.apache.lucene.index.ParallelReader)
    {
        org.apache.lucene.index.ParallelReader r0;
        java.util.List $r1;

        r0 := @parameter0: org.apache.lucene.index.ParallelReader;

        $r1 = r0.<org.apache.lucene.index.ParallelReader: java.util.List readers>;

        return $r1;
    }
}
