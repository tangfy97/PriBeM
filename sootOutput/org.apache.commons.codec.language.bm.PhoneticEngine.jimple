public class org.apache.commons.codec.language.bm.PhoneticEngine extends java.lang.Object
{
    private static final java.util.Map NAME_PREFIXES;
    private final org.apache.commons.codec.language.bm.Lang lang;
    private final org.apache.commons.codec.language.bm.NameType nameType;
    private final org.apache.commons.codec.language.bm.RuleType ruleType;
    private final boolean concat;

    private static java.lang.CharSequence cacheSubSequence(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.CharSequence[][] r1;
        org.apache.commons.codec.language.bm.PhoneticEngine$1 $r2;
        int $i0, $i1;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        r1 = newmultiarray (java.lang.CharSequence)[$i0][$i1];

        $r2 = new org.apache.commons.codec.language.bm.PhoneticEngine$1;

        specialinvoke $r2.<org.apache.commons.codec.language.bm.PhoneticEngine$1: void <init>(java.lang.CharSequence,java.lang.CharSequence[][])>(r0, r1);

        return $r2;
    }

    private static java.lang.String join(java.lang.Iterable, java.lang.String)
    {
        java.util.Iterator $r2;
        java.lang.Iterable r1;
        java.lang.StringBuilder $r0, $r5;
        java.lang.Object $r6, $r8;
        java.lang.String $r3, r4, $r7, $r9;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.Iterable;

        r4 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r8 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.String) $r8;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        goto label1;

     label2:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public void <init>(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, boolean)
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        java.lang.IllegalArgumentException $r5;
        org.apache.commons.codec.language.bm.Lang $r4;
        java.lang.StringBuilder $r6, $r7, $r9;
        org.apache.commons.codec.language.bm.NameType r3;
        java.lang.String $r10;
        org.apache.commons.codec.language.bm.RuleType r1, $r2, $r8;
        boolean z0;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        r3 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        r1 := @parameter1: org.apache.commons.codec.language.bm.RuleType;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType RULES>;

        if r1 != $r2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ruleType must not be ");

        $r8 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType RULES>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType> = r3;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType ruleType> = r1;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine: boolean concat> = z0;

        $r4 = staticinvoke <org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Lang instance(org.apache.commons.codec.language.bm.NameType)>(r3);

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.Lang lang> = $r4;

        return;
    }

    private org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder, java.util.List)
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r18;
        org.apache.commons.codec.language.bm.Rule$Phoneme r8;
        java.util.TreeSet $r1;
        java.lang.NullPointerException $r17;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r9;
        org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder r3, $r6, $r15, r19;
        int $i0, $i1, i2;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5;
        java.lang.CharSequence $r10, $r11, $r16;
        org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication $r13, $r14;
        java.util.Set $r4, $r12;
        java.util.List r0;
        java.lang.Object $r7;
        java.util.Comparator $r2;

        r18 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        r3 := @parameter0: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder;

        r0 := @parameter1: java.util.List;

        if r0 != null goto label1;

        $r17 = new java.lang.NullPointerException;

        specialinvoke $r17.<java.lang.NullPointerException: void <init>(java.lang.String)>("finalRules can not be null");

        throw $r17;

     label1:
        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return r3;

     label2:
        $r1 = new java.util.TreeSet;

        $r2 = <org.apache.commons.codec.language.bm.Rule$Phoneme: java.util.Comparator COMPARATOR>;

        specialinvoke $r1.<java.util.TreeSet: void <init>(java.util.Comparator)>($r2);

        $r4 = virtualinvoke r3.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set getPhonemes()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.codec.language.bm.Rule$Phoneme) $r7;

        $r9 = virtualinvoke r8.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet getLanguages()>();

        r19 = staticinvoke <org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder empty(org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r9);

        $r10 = virtualinvoke r8.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.CharSequence getPhonemeText()>();

        $r11 = staticinvoke <org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.CharSequence cacheSubSequence(java.lang.CharSequence)>($r10);

        i2 = 0;

     label4:
        $i0 = interfaceinvoke $r11.<java.lang.CharSequence: int length()>();

        if i2 >= $i0 goto label6;

        $r13 = new org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication;

        specialinvoke $r13.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: void <init>(java.util.List,java.lang.CharSequence,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,int)>(r0, $r11, r19, i2);

        $r14 = virtualinvoke $r13.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication invoke()>();

        $z2 = virtualinvoke $r14.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: boolean isFound()>();

        $r15 = virtualinvoke $r14.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder getPhonemeBuilder()>();

        r19 = $r15;

        if $z2 != 0 goto label5;

        $i1 = i2 + 1;

        $r16 = interfaceinvoke $r11.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i2, $i1);

        r19 = virtualinvoke $r15.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder append(java.lang.CharSequence)>($r16);

     label5:
        i2 = virtualinvoke $r14.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int getI()>();

        goto label4;

     label6:
        $r12 = virtualinvoke r19.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set getPhonemes()>();

        interfaceinvoke $r1.<java.util.Set: boolean addAll(java.util.Collection)>($r12);

        goto label3;

     label7:
        $r6 = new org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder;

        specialinvoke $r6.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: void <init>(java.util.Set,org.apache.commons.codec.language.bm.PhoneticEngine$1)>($r1, null);

        return $r6;
    }

    public java.lang.String encode(java.lang.String)
    {
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r3;
        org.apache.commons.codec.language.bm.Lang $r2;
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        java.lang.String r1, $r4;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.Lang lang>;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Languages$LanguageSet guessLanguages(java.lang.String)>(r1);

        $r4 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)>(r1, $r3);

        return $r4;
    }

    public java.lang.String encode(java.lang.String, org.apache.commons.codec.language.bm.Languages$LanguageSet)
    {
        java.util.Map $r37, $r42, $r54;
        java.lang.CharSequence $r30;
        org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication $r34, $r35;
        java.util.Set $r56;
        java.lang.StringBuilder $r22, $r26, $r48, $r49, $r51, $r59, $r60, $r61, $r64, $r65, $r66, $r68, $r69, $r71, $r72, $r74, $r75, $r79, $r80, $r81, $r83, $r84, $r86, $r87, $r89, $r90;
        java.util.ArrayList $r19;
        org.apache.commons.codec.language.bm.Languages$LanguageSet r1;
        org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder $r31, $r32, r98;
        java.lang.String $r12, $r13, $r14, $r24, $r27, $r33, $r52, $r62, $r63, $r67, $r70, $r73, $r76, $r77, $r78, $r82, $r85, $r88, $r91, r92, r93, r94, r95, r96, r97;
        java.lang.IllegalStateException $r47;
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        int[] $r21;
        java.util.Locale $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Collection $r39, $r44;
        java.util.List $r4, $r7, $r10, $r18;
        org.apache.commons.codec.language.bm.NameType $r3, $r6, $r9, $r15, $r16, $r20, $r36, $r41, $r50, $r53;
        java.lang.String[] $r17, $r46;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9;
        java.util.Iterator $r23, $r28, $r40, $r57;
        java.lang.Object $r25, $r29, $r38, $r43, $r45, $r55, $r58;
        org.apache.commons.codec.language.bm.RuleType $r2, $r5, $r8;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        r92 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.commons.codec.language.bm.Languages$LanguageSet;

        $r3 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r2 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType RULES>;

        $r4 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r3, $r2, r1);

        $r6 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r5 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType ruleType>;

        $r7 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>($r6, $r5, "common");

        $r9 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r8 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType ruleType>;

        $r10 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r9, $r8, r1);

        $r11 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r12 = virtualinvoke r92.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(char,char)>(45, 32);

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>();

        $r16 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r15 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType GENERIC>;

        if $r16 != $r15 goto label04;

        $i5 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i5 < 2 goto label01;

        $r77 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>(0, 2);

        $z3 = virtualinvoke $r77.<java.lang.String: boolean equals(java.lang.Object)>("d\'");

        if $z3 == 0 goto label01;

        $r78 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int)>(2);

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("d");

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78);

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.String toString()>();

        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r85 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>($r78);

        $r86 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")-(");

        $r88 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>($r82);

        $r89 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r88);

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r91;

     label01:
        $r54 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r53 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r55 = interfaceinvoke $r54.<java.util.Map: java.lang.Object get(java.lang.Object)>($r53);

        $r56 = (java.util.Set) $r55;

        $r57 = interfaceinvoke $r56.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z4 = interfaceinvoke $r57.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label04;

        $r58 = interfaceinvoke $r57.<java.util.Iterator: java.lang.Object next()>();

        r93 = (java.lang.String) $r58;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r93);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        $z2 = virtualinvoke $r14.<java.lang.String: boolean startsWith(java.lang.String)>($r62);

        if $z2 == 0 goto label03;

        $i6 = virtualinvoke r93.<java.lang.String: int length()>();

        $i7 = $i6 + 1;

        $r63 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int)>($i7);

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r93);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r70 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>($r63);

        $r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")-(");

        $r73 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>($r67);

        $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r76;

     label03:
        goto label02;

     label04:
        $r17 = virtualinvoke $r14.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $r18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r17);

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        $r21 = <org.apache.commons.codec.language.bm.PhoneticEngine$2: int[] $SwitchMap$org$apache$commons$codec$language$bm$NameType>;

        $r20 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $i0 = virtualinvoke $r20.<org.apache.commons.codec.language.bm.NameType: int ordinal()>();

        $i1 = $r21[$i0];

        tableswitch($i1)
        {
            case 1: goto label05;
            case 2: goto label08;
            case 3: goto label09;
            default: goto label10;
        };

     label05:
        $r40 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r45 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>();

        r94 = (java.lang.String) $r45;

        $r46 = virtualinvoke r94.<java.lang.String: java.lang.String[] split(java.lang.String)>("\'");

        $i3 = lengthof $r46;

        $i4 = $i3 - 1;

        r95 = $r46[$i4];

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>(r95);

        goto label06;

     label07:
        $r42 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r41 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r43 = interfaceinvoke $r42.<java.util.Map: java.lang.Object get(java.lang.Object)>($r41);

        $r44 = (java.util.Collection) $r43;

        interfaceinvoke $r19.<java.util.List: boolean removeAll(java.util.Collection)>($r44);

        goto label11;

     label08:
        interfaceinvoke $r19.<java.util.List: boolean addAll(java.util.Collection)>($r18);

        $r37 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r36 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r38 = interfaceinvoke $r37.<java.util.Map: java.lang.Object get(java.lang.Object)>($r36);

        $r39 = (java.util.Collection) $r38;

        interfaceinvoke $r19.<java.util.List: boolean removeAll(java.util.Collection)>($r39);

        goto label11;

     label09:
        interfaceinvoke $r19.<java.util.List: boolean addAll(java.util.Collection)>($r18);

        goto label11;

     label10:
        $r47 = new java.lang.IllegalStateException;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unreachable case: ");

        $r50 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r52);

        throw $r47;

     label11:
        $z5 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: boolean concat>;

        if $z5 == 0 goto label12;

        r96 = staticinvoke <org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String join(java.lang.Iterable,java.lang.String)>($r19, " ");

        goto label16;

     label12:
        $i2 = interfaceinvoke $r19.<java.util.List: int size()>();

        if $i2 != 1 goto label13;

        $r28 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

        $r29 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r96 = (java.lang.String) $r29;

        goto label16;

     label13:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z0 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r25 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r97 = (java.lang.String) $r25;

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r27 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>(r97);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        goto label14;

     label15:
        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String substring(int)>(1);

        return $r24;

     label16:
        r98 = staticinvoke <org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder empty(org.apache.commons.codec.language.bm.Languages$LanguageSet)>(r1);

        $r30 = staticinvoke <org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.CharSequence cacheSubSequence(java.lang.CharSequence)>(r96);

        i8 = 0;

     label17:
        $i9 = interfaceinvoke $r30.<java.lang.CharSequence: int length()>();

        if i8 >= $i9 goto label18;

        $r34 = new org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication;

        specialinvoke $r34.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: void <init>(java.util.List,java.lang.CharSequence,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,int)>($r4, $r30, r98, i8);

        $r35 = virtualinvoke $r34.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication invoke()>();

        i8 = virtualinvoke $r35.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int getI()>();

        r98 = virtualinvoke $r35.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder getPhonemeBuilder()>();

        goto label17;

     label18:
        $r31 = specialinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.List)>(r98, $r7);

        $r32 = specialinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.List)>($r31, $r10);

        $r33 = virtualinvoke $r32.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.lang.String makeString()>();

        return $r33;
    }

    public org.apache.commons.codec.language.bm.Lang getLang()
    {
        org.apache.commons.codec.language.bm.Lang $r1;
        org.apache.commons.codec.language.bm.PhoneticEngine r0;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        $r1 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.Lang lang>;

        return $r1;
    }

    public org.apache.commons.codec.language.bm.NameType getNameType()
    {
        org.apache.commons.codec.language.bm.NameType $r1;
        org.apache.commons.codec.language.bm.PhoneticEngine r0;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        $r1 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        return $r1;
    }

    public org.apache.commons.codec.language.bm.RuleType getRuleType()
    {
        org.apache.commons.codec.language.bm.RuleType $r1;
        org.apache.commons.codec.language.bm.PhoneticEngine r0;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        $r1 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType ruleType>;

        return $r1;
    }

    public boolean isConcat()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        $z0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: boolean concat>;

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.String[] $r2, $r8, $r14;
        java.util.HashSet $r1, $r7, $r13;
        java.util.Map $r3, $r9, $r15;
        java.util.EnumMap $r0;
        java.util.Set $r6, $r12, $r18;
        java.util.List $r5, $r11, $r17;
        org.apache.commons.codec.language.bm.NameType $r4, $r10, $r16;

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/commons/codec/language/bm/NameType;");

        <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES> = $r0;

        $r3 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r4 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType ASHKENAZI>;

        $r1 = new java.util.HashSet;

        $r2 = newarray (java.lang.String)[6];

        $r2[0] = "bar";

        $r2[1] = "ben";

        $r2[2] = "da";

        $r2[3] = "de";

        $r2[4] = "van";

        $r2[5] = "von";

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        $r6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

        $r9 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r10 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType SEPHARDIC>;

        $r7 = new java.util.HashSet;

        $r8 = newarray (java.lang.String)[16];

        $r8[0] = "al";

        $r8[1] = "el";

        $r8[2] = "da";

        $r8[3] = "dal";

        $r8[4] = "de";

        $r8[5] = "del";

        $r8[6] = "dela";

        $r8[7] = "de la";

        $r8[8] = "della";

        $r8[9] = "des";

        $r8[10] = "di";

        $r8[11] = "do";

        $r8[12] = "dos";

        $r8[13] = "du";

        $r8[14] = "van";

        $r8[15] = "von";

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        specialinvoke $r7.<java.util.HashSet: void <init>(java.util.Collection)>($r11);

        $r12 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r7);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r12);

        $r15 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r16 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType GENERIC>;

        $r13 = new java.util.HashSet;

        $r14 = newarray (java.lang.String)[14];

        $r14[0] = "da";

        $r14[1] = "dal";

        $r14[2] = "de";

        $r14[3] = "del";

        $r14[4] = "dela";

        $r14[5] = "de la";

        $r14[6] = "della";

        $r14[7] = "des";

        $r14[8] = "di";

        $r14[9] = "do";

        $r14[10] = "dos";

        $r14[11] = "du";

        $r14[12] = "van";

        $r14[13] = "von";

        $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);

        specialinvoke $r13.<java.util.HashSet: void <init>(java.util.Collection)>($r17);

        $r18 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r13);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r18);

        return;
    }
}
