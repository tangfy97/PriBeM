public final class org.dom4j.DocumentHelper extends java.lang.Object
{

    private void <init>()
    {
        org.dom4j.DocumentHelper r0;

        r0 := @this: org.dom4j.DocumentHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.DocumentFactory $r0;

        $r0 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        return $r0;
    }

    public static org.dom4j.Document createDocument()
    {
        org.dom4j.Document $r1;
        org.dom4j.DocumentFactory $r0;

        $r0 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r1 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        return $r1;
    }

    public static org.dom4j.Document createDocument(org.dom4j.Element)
    {
        org.dom4j.Element r1;
        org.dom4j.Document $r2;
        org.dom4j.DocumentFactory $r0;

        r1 := @parameter0: org.dom4j.Element;

        $r0 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument(org.dom4j.Element)>(r1);

        return $r2;
    }

    public static org.dom4j.Element createElement(org.dom4j.QName)
    {
        org.dom4j.QName r1;
        org.dom4j.Element $r2;
        org.dom4j.DocumentFactory $r0;

        r1 := @parameter0: org.dom4j.QName;

        $r0 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(org.dom4j.QName)>(r1);

        return $r2;
    }

    public static org.dom4j.Element createElement(java.lang.String)
    {
        org.dom4j.Element $r2;
        java.lang.String r1;
        org.dom4j.DocumentFactory $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(java.lang.String)>(r1);

        return $r2;
    }

    public static org.dom4j.Attribute createAttribute(org.dom4j.Element, org.dom4j.QName, java.lang.String)
    {
        org.dom4j.Element r1;
        org.dom4j.QName r2;
        java.lang.String r3;
        org.dom4j.Attribute $r4;
        org.dom4j.DocumentFactory $r0;

        r1 := @parameter0: org.dom4j.Element;

        r2 := @parameter1: org.dom4j.QName;

        r3 := @parameter2: java.lang.String;

        $r0 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)>(r1, r2, r3);

        return $r4;
    }

    public static org.dom4j.Attribute createAttribute(org.dom4j.Element, java.lang.String, java.lang.String)
    {
        org.dom4j.Element r1;
        java.lang.String r2, r3;
        org.dom4j.Attribute $r4;
        org.dom4j.DocumentFactory $r0;

        r1 := @parameter0: org.dom4j.Element;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r0 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.Attribute createAttribute(org.dom4j.Element,java.lang.String,java.lang.String)>(r1, r2, r3);

        return $r4;
    }

    public static org.dom4j.CDATA createCDATA(java.lang.String)
    {
        java.lang.String r1;
        org.dom4j.CDATA $r2;
        org.dom4j.DocumentFactory $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        $r2 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.CDATA createCDATA(java.lang.String)>(r1);

        return $r2;
    }

    public static org.dom4j.Comment createComment(java.lang.String)
    {
        java.lang.String r1;
        org.dom4j.DocumentFactory $r0;
        org.dom4j.Comment $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        $r2 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.Comment createComment(java.lang.String)>(r1);

        return $r2;
    }

    public static org.dom4j.Text createText(java.lang.String)
    {
        org.dom4j.Text $r2;
        java.lang.String r1;
        org.dom4j.DocumentFactory $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        $r2 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.Text createText(java.lang.String)>(r1);

        return $r2;
    }

    public static org.dom4j.Entity createEntity(java.lang.String, java.lang.String)
    {
        org.dom4j.Entity $r3;
        java.lang.String r1, r2;
        org.dom4j.DocumentFactory $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        $r3 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.Entity createEntity(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public static org.dom4j.Namespace createNamespace(java.lang.String, java.lang.String)
    {
        org.dom4j.Namespace $r3;
        java.lang.String r1, r2;
        org.dom4j.DocumentFactory $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        $r3 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public static org.dom4j.ProcessingInstruction createProcessingInstruction(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.dom4j.ProcessingInstruction $r3;
        org.dom4j.DocumentFactory $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public static org.dom4j.ProcessingInstruction createProcessingInstruction(java.lang.String, java.util.Map)
    {
        java.util.Map r2;
        java.lang.String r1;
        org.dom4j.ProcessingInstruction $r3;
        org.dom4j.DocumentFactory $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r0 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.ProcessingInstruction createProcessingInstruction(java.lang.String,java.util.Map)>(r1, r2);

        return $r3;
    }

    public static org.dom4j.QName createQName(java.lang.String, org.dom4j.Namespace)
    {
        org.dom4j.Namespace r2;
        org.dom4j.QName $r3;
        java.lang.String r1;
        org.dom4j.DocumentFactory $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.dom4j.Namespace;

        $r0 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>(r1, r2);

        return $r3;
    }

    public static org.dom4j.QName createQName(java.lang.String)
    {
        org.dom4j.QName $r2;
        java.lang.String r1;
        org.dom4j.DocumentFactory $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String)>(r1);

        return $r2;
    }

    public static org.dom4j.XPath createXPath(java.lang.String) throws org.dom4j.InvalidXPathException
    {
        java.lang.String r1;
        org.dom4j.XPath $r2;
        org.dom4j.DocumentFactory $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.XPath createXPath(java.lang.String)>(r1);

        return $r2;
    }

    public static org.dom4j.XPath createXPath(java.lang.String, org.jaxen.VariableContext) throws org.dom4j.InvalidXPathException
    {
        org.jaxen.VariableContext r2;
        org.dom4j.XPath $r3;
        java.lang.String r1;
        org.dom4j.DocumentFactory $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.jaxen.VariableContext;

        $r0 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.XPath createXPath(java.lang.String,org.jaxen.VariableContext)>(r1, r2);

        return $r3;
    }

    public static org.dom4j.NodeFilter createXPathFilter(java.lang.String)
    {
        java.lang.String r1;
        org.dom4j.NodeFilter $r2;
        org.dom4j.DocumentFactory $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.NodeFilter createXPathFilter(java.lang.String)>(r1);

        return $r2;
    }

    public static org.dom4j.rule.Pattern createPattern(java.lang.String)
    {
        java.lang.String r1;
        org.dom4j.DocumentFactory $r0;
        org.dom4j.rule.Pattern $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.rule.Pattern createPattern(java.lang.String)>(r1);

        return $r2;
    }

    public static java.util.List selectNodes(java.lang.String, java.util.List)
    {
        java.util.List r2, $r3;
        org.dom4j.XPath $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        $r1 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.XPath createXPath(java.lang.String)>(r0);

        $r3 = interfaceinvoke $r1.<org.dom4j.XPath: java.util.List selectNodes(java.lang.Object)>(r2);

        return $r3;
    }

    public static java.util.List selectNodes(java.lang.String, org.dom4j.Node)
    {
        java.util.List $r3;
        org.dom4j.XPath $r1;
        org.dom4j.Node r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.dom4j.Node;

        $r1 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.XPath createXPath(java.lang.String)>(r0);

        $r3 = interfaceinvoke $r1.<org.dom4j.XPath: java.util.List selectNodes(java.lang.Object)>(r2);

        return $r3;
    }

    public static void sort(java.util.List, java.lang.String)
    {
        java.util.List r2;
        java.lang.String r0;
        org.dom4j.XPath $r1;

        r2 := @parameter0: java.util.List;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.XPath createXPath(java.lang.String)>(r0);

        interfaceinvoke $r1.<org.dom4j.XPath: void sort(java.util.List)>(r2);

        return;
    }

    public static void sort(java.util.List, java.lang.String, boolean)
    {
        java.util.List r2;
        org.dom4j.XPath $r1;
        java.lang.String r0;
        boolean z0;

        r2 := @parameter0: java.util.List;

        r0 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r1 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.XPath createXPath(java.lang.String)>(r0);

        interfaceinvoke $r1.<org.dom4j.XPath: void sort(java.util.List,boolean)>(r2, z0);

        return;
    }

    public static org.dom4j.Document parseText(java.lang.String) throws org.dom4j.DocumentException
    {
        org.xml.sax.InputSource $r3;
        org.dom4j.Document $r5;
        java.io.StringReader $r4;
        java.lang.String r1, $r2, $r6;
        org.dom4j.io.SAXReader $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.dom4j.io.SAXReader;

        specialinvoke $r0.<org.dom4j.io.SAXReader: void <init>()>();

        $r2 = staticinvoke <org.dom4j.DocumentHelper: java.lang.String getEncoding(java.lang.String)>(r1);

        $r3 = new org.xml.sax.InputSource;

        $r4 = new java.io.StringReader;

        specialinvoke $r4.<java.io.StringReader: void <init>(java.lang.String)>(r1);

        specialinvoke $r3.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r4);

        virtualinvoke $r3.<org.xml.sax.InputSource: void setEncoding(java.lang.String)>($r2);

        $r5 = virtualinvoke $r0.<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>($r3);

        $r6 = interfaceinvoke $r5.<org.dom4j.Document: java.lang.String getXMLEncoding()>();

        if $r6 != null goto label1;

        interfaceinvoke $r5.<org.dom4j.Document: void setXMLEncoding(java.lang.String)>($r2);

     label1:
        return $r5;
    }

    private static java.lang.String getEncoding(java.lang.String)
    {
        java.util.StringTokenizer $r3;
        int $i0;
        java.lang.String r0, $r1, $r2, $r4, $r5, r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;

        r6 = null;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("<?xml");

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("?>");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r3 = new java.util.StringTokenizer;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r2, " =\"\'");

     label1:
        $z1 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label3;

        $r4 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r5 = "encoding";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z3 == 0 goto label3;

        r6 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        goto label3;

     label2:
        goto label1;

     label3:
        return r6;
    }

    public static org.dom4j.Element makeElement(org.dom4j.Branch, java.lang.String)
    {
        org.dom4j.Document r7;
        org.dom4j.Branch r2;
        java.util.StringTokenizer $r0;
        int $i0;
        org.dom4j.QName $r4;
        org.dom4j.Element $r5, r8, r9;
        java.lang.String r1, $r3, $r6;
        boolean $z0, $z1;

        r2 := @parameter0: org.dom4j.Branch;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, "/");

        $z0 = r2 instanceof org.dom4j.Document;

        if $z0 == 0 goto label2;

        r7 = (org.dom4j.Document) r2;

        $r5 = interfaceinvoke r7.<org.dom4j.Document: org.dom4j.Element getRootElement()>();

        r8 = $r5;

        $r6 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        if $r5 != null goto label1;

        r8 = interfaceinvoke r7.<org.dom4j.Document: org.dom4j.Element addElement(java.lang.String)>($r6);

     label1:
        goto label3;

     label2:
        r8 = (org.dom4j.Element) r2;

     label3:
        r9 = null;

     label4:
        $z1 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label8;

        $r3 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(58);

        if $i0 <= 0 goto label5;

        $r4 = interfaceinvoke r8.<org.dom4j.Element: org.dom4j.QName getQName(java.lang.String)>($r3);

        r9 = interfaceinvoke r8.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r4);

        goto label6;

     label5:
        r9 = interfaceinvoke r8.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>($r3);

     label6:
        if r9 != null goto label7;

        r9 = interfaceinvoke r8.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>($r3);

     label7:
        r8 = r9;

        goto label4;

     label8:
        return r9;
    }
}
