final class org.apache.jena.riot.writer.TurtleShell$ComparePredicates extends java.lang.Object implements java.util.Comparator
{

    private void <init>()
    {
        org.apache.jena.riot.writer.TurtleShell$ComparePredicates r0;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ComparePredicates;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static int classification(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r1;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = <org.apache.jena.riot.writer.WriterConst: com.hp.hpl.jena.graph.Node RDF_type>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r3 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: java.lang.String getURI()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>($r3);

        if $z1 != 0 goto label2;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r5 = staticinvoke <com.hp.hpl.jena.vocabulary.RDFS: java.lang.String getURI()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>($r5);

        if $z2 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 2;
    }

    public int compare(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r1;
        int $i0, $i1, $i2, $i4;
        org.apache.jena.riot.writer.TurtleShell$ComparePredicates r4;
        java.lang.String $r2, $r3;

        r4 := @this: org.apache.jena.riot.writer.TurtleShell$ComparePredicates;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $i0 = staticinvoke <org.apache.jena.riot.writer.TurtleShell$ComparePredicates: int classification(com.hp.hpl.jena.graph.Node)>(r0);

        $i1 = staticinvoke <org.apache.jena.riot.writer.TurtleShell$ComparePredicates: int classification(com.hp.hpl.jena.graph.Node)>(r1);

        if $i0 == $i1 goto label3;

        if $i0 >= $i1 goto label1;

        $i4 = (int) -1;

        return $i4;

     label1:
        if $i0 <= $i1 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $i2 = virtualinvoke $r2.<java.lang.String: int compareTo(java.lang.String)>($r3);

        return $i2;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        int $i0;
        org.apache.jena.riot.writer.TurtleShell$ComparePredicates r0;
        java.lang.Object r1, r2;
        com.hp.hpl.jena.graph.Node $r3, $r4;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ComparePredicates;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.hp.hpl.jena.graph.Node) r1;

        $r3 = (com.hp.hpl.jena.graph.Node) r2;

        $i0 = virtualinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ComparePredicates: int compare(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3);

        return $i0;
    }

    void <init>(org.apache.jena.riot.writer.TurtleShell$1)
    {
        org.apache.jena.riot.writer.TurtleShell$ComparePredicates r0;
        org.apache.jena.riot.writer.TurtleShell$1 r1;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ComparePredicates;

        r1 := @parameter0: org.apache.jena.riot.writer.TurtleShell$1;

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ComparePredicates: void <init>()>();

        return;
    }
}
