class com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue extends java.util.AbstractQueue
{
    final com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head;
    final com.google.common.collect.CustomConcurrentHashMap$Segment this$1;

    void <init>(com.google.common.collect.CustomConcurrentHashMap$Segment)
    {
        com.google.common.collect.CustomConcurrentHashMap$Segment r1;
        com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue$1 $r2;
        com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue r0;

        r0 := @this: com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue;

        r1 := @parameter0: com.google.common.collect.CustomConcurrentHashMap$Segment;

        r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$Segment this$1> = r1;

        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();

        $r2 = new com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue$1;

        specialinvoke $r2.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue$1: void <init>(com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue)>(r0);

        r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head> = $r2;

        return;
    }

    public boolean offer(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry r0, $r1, $r2, $r4, $r5, $r6;
        com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue r3;

        r3 := @this: com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue;

        r0 := @parameter0: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry;

        $r1 = interfaceinvoke r0.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry getPreviousEvictable()>();

        $r2 = interfaceinvoke r0.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry getNextEvictable()>();

        staticinvoke <com.google.common.collect.CustomConcurrentHashMap: void connectEvictables(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry,com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry)>($r1, $r2);

        $r4 = r3.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        $r5 = interfaceinvoke $r4.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry getPreviousEvictable()>();

        staticinvoke <com.google.common.collect.CustomConcurrentHashMap: void connectEvictables(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry,com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry)>($r5, r0);

        $r6 = r3.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        staticinvoke <com.google.common.collect.CustomConcurrentHashMap: void connectEvictables(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry,com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry)>(r0, $r6);

        return 1;
    }

    public com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry peek()
    {
        com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry $r1, $r2, $r3, $r4;
        com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue r0;

        r0 := @this: com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue;

        $r1 = r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry getNextEvictable()>();

        $r3 = r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        if $r2 != $r3 goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = $r2;

     label2:
        return $r4;
    }

    public com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry poll()
    {
        com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry $r1, $r2, $r3;
        com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue r0;

        r0 := @this: com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue;

        $r1 = r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry getNextEvictable()>();

        $r3 = r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        if $r2 != $r3 goto label1;

        return null;

     label1:
        virtualinvoke r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: boolean remove(java.lang.Object)>($r2);

        return $r2;
    }

    public boolean remove(java.lang.Object)
    {
        com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry r1, $r2, $r3;
        com.google.common.collect.CustomConcurrentHashMap$NullEntry $r4;
        java.lang.Object r0;
        com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue r5;
        boolean $z0;

        r5 := @this: com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue;

        r0 := @parameter0: java.lang.Object;

        r1 = (com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry) r0;

        $r2 = interfaceinvoke r1.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry getPreviousEvictable()>();

        $r3 = interfaceinvoke r1.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry getNextEvictable()>();

        staticinvoke <com.google.common.collect.CustomConcurrentHashMap: void connectEvictables(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry,com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry)>($r2, $r3);

        staticinvoke <com.google.common.collect.CustomConcurrentHashMap: void nullifyEvictable(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry)>(r1);

        $r4 = <com.google.common.collect.CustomConcurrentHashMap$NullEntry: com.google.common.collect.CustomConcurrentHashMap$NullEntry INSTANCE>;

        if $r3 == $r4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry r1, $r2;
        com.google.common.collect.CustomConcurrentHashMap$NullEntry $r3;
        java.lang.Object r0;
        com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue r4;
        boolean $z0;

        r4 := @this: com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue;

        r0 := @parameter0: java.lang.Object;

        r1 = (com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry) r0;

        $r2 = interfaceinvoke r1.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry getNextEvictable()>();

        $r3 = <com.google.common.collect.CustomConcurrentHashMap$NullEntry: com.google.common.collect.CustomConcurrentHashMap$NullEntry INSTANCE>;

        if $r2 == $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isEmpty()
    {
        com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry $r1, $r2, $r3;
        com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue;

        $r1 = r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry getNextEvictable()>();

        $r3 = r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int size()
    {
        com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry $r1, $r2, r3;
        int i0;
        com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue r0;

        r0 := @this: com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue;

        i0 = 0;

        $r1 = r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        r3 = interfaceinvoke $r1.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry getNextEvictable()>();

     label1:
        $r2 = r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        if r3 == $r2 goto label2;

        i0 = i0 + 1;

        r3 = interfaceinvoke r3.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry getNextEvictable()>();

        goto label1;

     label2:
        return i0;
    }

    public void clear()
    {
        com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry $r1, $r2, $r3, $r4, $r5, $r6, $r7, r8;
        com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue r0;

        r0 := @this: com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue;

        $r1 = r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        r8 = interfaceinvoke $r1.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry getNextEvictable()>();

     label1:
        $r2 = r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        if r8 == $r2 goto label2;

        $r7 = interfaceinvoke r8.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry getNextEvictable()>();

        staticinvoke <com.google.common.collect.CustomConcurrentHashMap: void nullifyEvictable(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry)>(r8);

        r8 = $r7;

        goto label1;

     label2:
        $r4 = r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        $r3 = r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        interfaceinvoke $r4.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: void setNextEvictable(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry)>($r3);

        $r6 = r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        $r5 = r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        interfaceinvoke $r6.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: void setPreviousEvictable(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry)>($r5);

        return;
    }

    public java.util.Iterator iterator()
    {
        com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue$2 $r0;
        com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry $r2;
        com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue r1;

        r1 := @this: com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue;

        $r0 = new com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue$2;

        $r2 = virtualinvoke r1.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry peek()>();

        specialinvoke $r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue$2: void <init>(com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue,com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry)>(r1, $r2);

        return $r0;
    }

    public volatile java.lang.Object peek()
    {
        com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry $r1;
        com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue r0;

        r0 := @this: com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue;

        $r1 = virtualinvoke r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry peek()>();

        return $r1;
    }

    public volatile java.lang.Object poll()
    {
        com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry $r1;
        com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue r0;

        r0 := @this: com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue;

        $r1 = virtualinvoke r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry poll()>();

        return $r1;
    }

    public volatile boolean offer(java.lang.Object)
    {
        com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry $r2;
        java.lang.Object r1;
        com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry) r1;

        $z0 = virtualinvoke r0.<com.google.common.collect.CustomConcurrentHashMap$Segment$EvictionQueue: boolean offer(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry)>($r2);

        return $z0;
    }
}
