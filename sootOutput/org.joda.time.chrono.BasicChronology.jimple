abstract class org.joda.time.chrono.BasicChronology extends org.joda.time.chrono.AssembledChronology
{
    private static final long serialVersionUID;
    private static final org.joda.time.DurationField cMillisField;
    private static final org.joda.time.DurationField cSecondsField;
    private static final org.joda.time.DurationField cMinutesField;
    private static final org.joda.time.DurationField cHoursField;
    private static final org.joda.time.DurationField cHalfdaysField;
    private static final org.joda.time.DurationField cDaysField;
    private static final org.joda.time.DurationField cWeeksField;
    private static final org.joda.time.DateTimeField cMillisOfSecondField;
    private static final org.joda.time.DateTimeField cMillisOfDayField;
    private static final org.joda.time.DateTimeField cSecondOfMinuteField;
    private static final org.joda.time.DateTimeField cSecondOfDayField;
    private static final org.joda.time.DateTimeField cMinuteOfHourField;
    private static final org.joda.time.DateTimeField cMinuteOfDayField;
    private static final org.joda.time.DateTimeField cHourOfDayField;
    private static final org.joda.time.DateTimeField cHourOfHalfdayField;
    private static final org.joda.time.DateTimeField cClockhourOfDayField;
    private static final org.joda.time.DateTimeField cClockhourOfHalfdayField;
    private static final org.joda.time.DateTimeField cHalfdayOfDayField;
    private static final int CACHE_SIZE;
    private static final int CACHE_MASK;
    private final transient org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache;
    private final int iMinDaysInFirstWeek;

    void <init>(org.joda.time.Chronology, java.lang.Object, int)
    {
        org.joda.time.Chronology r1;
        java.lang.IllegalArgumentException $r4;
        org.joda.time.chrono.BasicChronology$YearInfo[] $r3;
        java.lang.StringBuffer $r5, $r6, $r7;
        int i0;
        org.joda.time.chrono.BasicChronology r0;
        java.lang.Object r2;
        java.lang.String $r8;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        r1 := @parameter0: org.joda.time.Chronology;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>(r1, r2);

        $r3 = newarray (org.joda.time.chrono.BasicChronology$YearInfo)[1024];

        r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> = $r3;

        if i0 < 1 goto label1;

        if i0 <= 7 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid min days in first week: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek> = i0;

        return;
    }

    public org.joda.time.DateTimeZone getZone()
    {
        org.joda.time.DateTimeZone $r2, $r3;
        org.joda.time.Chronology $r1;
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        return $r3;

     label1:
        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r2;
    }

    public long getDateTimeMillis(int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.Chronology $r1;
        long $l4, $l5, $l6, $l7;
        int i0, i1, i2, i3;
        org.joda.time.chrono.BasicChronology r0;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>();

        if $r1 == null goto label1;

        $l7 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>(i1, i2, i3, i0);

        return $l7;

     label1:
        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i0, 0, 86400000);

        $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i1, i2, i3);

        $l5 = (long) i0;

        $l6 = $l4 + $l5;

        return $l6;
    }

    public long getDateTimeMillis(int, int, int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        long $l7, $l9, $l11, $l12, $l14, $l15, $l16, $l17, $l18, $l19;
        int i0, i1, i2, i3, i4, i5, i6, $i8, $i10, $i13, $i21;
        org.joda.time.DateTimeFieldType $r2, $r3, $r4, $r5;
        org.joda.time.Chronology $r1;
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        i4 := @parameter0: int;

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>();

        if $r1 == null goto label1;

        $l19 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i4, i5, i6, i0, i1, i2, i3);

        return $l19;

     label1:
        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i0, 0, 23);

        $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i1, 0, 59);

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r4, i2, 0, 59);

        $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r5, i3, 0, 999);

        $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i4, i5, i6);

        $i8 = i0 * 3600000;

        $l9 = (long) $i8;

        $l12 = $l7 + $l9;

        $i21 = (int) 60000;

        $i10 = i1 * $i21;

        $l11 = (long) $i10;

        $l15 = $l12 + $l11;

        $i13 = i2 * 1000;

        $l14 = (long) $i13;

        $l17 = $l15 + $l14;

        $l16 = (long) i3;

        $l18 = $l17 + $l16;

        return $l18;
    }

    public int getMinimumDaysInFirstWeek()
    {
        int $i0;
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $i0 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek>;

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.BasicChronology r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public int hashCode()
    {
        org.joda.time.DateTimeZone $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.joda.time.chrono.BasicChronology r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i1 = $i0 * 11;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>();

        $i2 = virtualinvoke $r3.<org.joda.time.DateTimeZone: int hashCode()>();

        $i3 = $i1 + $i2;

        $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>();

        $i5 = $i3 + $i4;

        return $i5;
    }

    public java.lang.String toString()
    {
        org.joda.time.DateTimeZone $r4;
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2, $i3;
        org.joda.time.chrono.BasicChronology r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r5, $r6, r7;

        r1 := @this: org.joda.time.chrono.BasicChronology;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(60);

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        r7 = $r3;

        $i0 = virtualinvoke $r3.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 < 0 goto label1;

        $i3 = $i0 + 1;

        r7 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i3);

     label1:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        $r4 = virtualinvoke r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>();

        if $r4 == null goto label2;

        $r6 = virtualinvoke $r4.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

     label2:
        $i1 = virtualinvoke r1.<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>();

        if $i1 == 4 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",mdfw=");

        $i2 = virtualinvoke r1.<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.chrono.GJYearOfEraDateTimeField $r21;
        org.joda.time.field.OffsetDateTimeField $r23, $r30, $r46;
        org.joda.time.chrono.GJMonthOfYearDateTimeField $r39;
        org.joda.time.field.RemainderDateTimeField $r27, $r43;
        org.joda.time.chrono.BasicWeekyearDateTimeField $r40;
        org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField $r41;
        org.joda.time.DateTimeField $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r22, $r24, $r28, $r44, $r48, $r50, $r52, $r54;
        org.joda.time.DateTimeFieldType $r26, $r31, $r45, $r47;
        org.joda.time.chrono.GJDayOfWeekDateTimeField $r33;
        org.joda.time.chrono.AssembledChronology$Fields r0;
        org.joda.time.chrono.BasicChronology r20;
        org.joda.time.chrono.BasicYearDateTimeField $r19;
        org.joda.time.field.DividedDateTimeField $r25, $r29;
        org.joda.time.chrono.GJEraDateTimeField $r32;
        org.joda.time.DurationField $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r34, $r36, $r38, $r42, $r49, $r51, $r53, $r55;
        org.joda.time.chrono.BasicDayOfMonthDateTimeField $r35;
        org.joda.time.chrono.BasicDayOfYearDateTimeField $r37;

        r20 := @this: org.joda.time.chrono.BasicChronology;

        r0 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r1 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMillisField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = $r1;

        $r2 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cSecondsField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = $r2;

        $r3 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMinutesField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = $r3;

        $r4 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHoursField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = $r4;

        $r5 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHalfdaysField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = $r5;

        $r6 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = $r6;

        $r7 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cWeeksField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = $r7;

        $r8 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMillisOfSecondField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r8;

        $r9 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMillisOfDayField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r9;

        $r10 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cSecondOfMinuteField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r10;

        $r11 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cSecondOfDayField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r11;

        $r12 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMinuteOfHourField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r12;

        $r13 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMinuteOfDayField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r13;

        $r14 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfDayField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r14;

        $r15 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfHalfdayField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r15;

        $r16 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cClockhourOfDayField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r16;

        $r17 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cClockhourOfHalfdayField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r17;

        $r18 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHalfdayOfDayField>;

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r18;

        $r19 = new org.joda.time.chrono.BasicYearDateTimeField;

        specialinvoke $r19.<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>(r20);

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r19;

        $r21 = new org.joda.time.chrono.GJYearOfEraDateTimeField;

        $r22 = r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        specialinvoke $r21.<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>($r22, r20);

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r21;

        $r23 = new org.joda.time.field.OffsetDateTimeField;

        $r24 = r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>;

        specialinvoke $r23.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r24, 99);

        $r25 = new org.joda.time.field.DividedDateTimeField;

        $r26 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>();

        specialinvoke $r25.<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r23, $r26, 100);

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r25;

        $r27 = new org.joda.time.field.RemainderDateTimeField;

        $r28 = r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r29 = (org.joda.time.field.DividedDateTimeField) $r28;

        specialinvoke $r27.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>($r29);

        $r30 = new org.joda.time.field.OffsetDateTimeField;

        $r31 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>();

        specialinvoke $r30.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r27, $r31, 1);

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r30;

        $r32 = new org.joda.time.chrono.GJEraDateTimeField;

        specialinvoke $r32.<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>(r20);

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r32;

        $r33 = new org.joda.time.chrono.GJDayOfWeekDateTimeField;

        $r34 = r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>;

        specialinvoke $r33.<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>(r20, $r34);

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r33;

        $r35 = new org.joda.time.chrono.BasicDayOfMonthDateTimeField;

        $r36 = r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>;

        specialinvoke $r35.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>(r20, $r36);

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r35;

        $r37 = new org.joda.time.chrono.BasicDayOfYearDateTimeField;

        $r38 = r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>;

        specialinvoke $r37.<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>(r20, $r38);

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r37;

        $r39 = new org.joda.time.chrono.GJMonthOfYearDateTimeField;

        specialinvoke $r39.<org.joda.time.chrono.GJMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>(r20);

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r39;

        $r40 = new org.joda.time.chrono.BasicWeekyearDateTimeField;

        specialinvoke $r40.<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>(r20);

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r40;

        $r41 = new org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField;

        $r42 = r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>;

        specialinvoke $r41.<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>(r20, $r42);

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r41;

        $r43 = new org.joda.time.field.RemainderDateTimeField;

        $r44 = r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $r45 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>();

        specialinvoke $r43.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r44, $r45, 100);

        $r46 = new org.joda.time.field.OffsetDateTimeField;

        $r47 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>();

        specialinvoke $r46.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r43, $r47, 1);

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r46;

        $r48 = r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        $r49 = virtualinvoke $r48.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r49;

        $r50 = r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r51 = virtualinvoke $r50.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r51;

        $r52 = r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>;

        $r53 = virtualinvoke $r52.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r53;

        $r54 = r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $r55 = virtualinvoke $r54.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r55;

        return;
    }

    int getDaysInYearMax()
    {
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        return 366;
    }

    int getDaysInYear(int)
    {
        short $s1;
        int i0;
        org.joda.time.chrono.BasicChronology r0;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>(i0);

        if $z0 == 0 goto label1;

        $s1 = 366;

        goto label2;

     label1:
        $s1 = 365;

     label2:
        return $s1;
    }

    int getWeeksInYear(int)
    {
        long $l1, $l3, $l4, $l5;
        int i0, $i2, $i6;
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        i0 := @parameter0: int;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i0);

        $i2 = i0 + 1;

        $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i2);

        $l4 = $l3 - $l1;

        $l5 = $l4 / 604800000L;

        $i6 = (int) $l5;

        return $i6;
    }

    long getFirstWeekOfYearMillis(int)
    {
        long $l1, $l6, $l7, $l8, $l10, $l11, $l12;
        int i0, $i2, $i3, $i4, $i5, $i9;
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        i0 := @parameter0: int;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0);

        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>($l1);

        $i3 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek>;

        $i4 = 8 - $i3;

        if $i2 <= $i4 goto label1;

        $i9 = 8 - $i2;

        $l10 = (long) $i9;

        $l11 = $l10 * 86400000L;

        $l12 = $l1 + $l11;

        return $l12;

     label1:
        $i5 = $i2 - 1;

        $l6 = (long) $i5;

        $l7 = $l6 * 86400000L;

        $l8 = $l1 - $l7;

        return $l8;
    }

    long getYearMillis(int)
    {
        int i0;
        org.joda.time.chrono.BasicChronology r0;
        long $l1;
        org.joda.time.chrono.BasicChronology$YearInfo $r1;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0);

        $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>;

        return $l1;
    }

    long getYearMonthMillis(int, int)
    {
        int i0, i2;
        org.joda.time.chrono.BasicChronology r0;
        long $l1, $l3, l4;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0);

        $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i2);

        l4 = $l1 + $l3;

        return l4;
    }

    long getYearMonthDayMillis(int, int, int)
    {
        long $l1, $l3, $l6, $l7, $l8, l9;
        int i0, i2, i4, $i5;
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i4 := @parameter2: int;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0);

        $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i2);

        l9 = $l1 + $l3;

        $i5 = i4 - 1;

        $l6 = (long) $i5;

        $l7 = $l6 * 86400000L;

        $l8 = l9 + $l7;

        return $l8;
    }

    int getYear(long)
    {
        long $l0, l1, $l2, $l3, $l5, $l6, $l10, $l11, $l13, l14, l16;
        byte $b4, $b7, $b8, $b9;
        int $i12, i15, $i17, $i18, $i20, $i21, $i22;
        boolean $z0;
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        l1 := @parameter0: long;

        $l0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>();

        $l2 = l1 >> 1;

        $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>();

        l14 = $l2 + $l3;

        $b4 = l14 cmp 0L;

        $i17 = (int) $b4;

        if $i17 >= 0 goto label1;

        $l11 = l14 - $l0;

        l14 = $l11 + 1L;

     label1:
        $l5 = l14 / $l0;

        $i12 = (int) $l5;

        i15 = $i12;

        $l6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i12);

        $l13 = l1 - $l6;

        $b7 = $l13 cmp 0L;

        $i18 = (int) $b7;

        if $i18 >= 0 goto label2;

        $i20 = (int) -1;

        i15 = $i12 + $i20;

        goto label5;

     label2:
        $b8 = $l13 cmp 31536000000L;

        $i21 = (int) $b8;

        if $i21 < 0 goto label5;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>($i12);

        if $z0 == 0 goto label3;

        l16 = 31622400000L;

        goto label4;

     label3:
        l16 = 31536000000L;

     label4:
        $l10 = $l6 + l16;

        $b9 = $l10 cmp l1;

        $i22 = (int) $b9;

        if $i22 > 0 goto label5;

        i15 = $i12 + 1;

     label5:
        return i15;
    }

    int getMonthOfYear(long)
    {
        int $i1, $i2;
        org.joda.time.chrono.BasicChronology r0;
        long l0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0);

        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1);

        return $i2;
    }

    abstract int getMonthOfYear(long, int);

    int getDayOfMonth(long)
    {
        int $i1, $i2, $i3;
        org.joda.time.chrono.BasicChronology r0;
        long l0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0);

        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1);

        $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, $i1, $i2);

        return $i3;
    }

    int getDayOfMonth(long, int)
    {
        int i1, $i2, $i3;
        org.joda.time.chrono.BasicChronology r0;
        long l0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1);

        $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, $i2);

        return $i3;
    }

    int getDayOfMonth(long, int, int)
    {
        long $l1, $l3, l4, $l5, $l6, l9;
        int i0, i2, $i7, $i8;
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        l4 := @parameter0: long;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0);

        $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i2);

        l9 = $l1 + $l3;

        $l5 = l4 - l9;

        $l6 = $l5 / 86400000L;

        $i7 = (int) $l6;

        $i8 = $i7 + 1;

        return $i8;
    }

    int getDayOfYear(long)
    {
        int $i1, $i2;
        org.joda.time.chrono.BasicChronology r0;
        long l0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0);

        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfYear(long,int)>(l0, $i1);

        return $i2;
    }

    int getDayOfYear(long, int)
    {
        long $l1, l2, $l3, $l4;
        int i0, $i5, $i6;
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        l2 := @parameter0: long;

        i0 := @parameter1: int;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0);

        $l3 = l2 - $l1;

        $l4 = $l3 / 86400000L;

        $i5 = (int) $l4;

        $i6 = $i5 + 1;

        return $i6;
    }

    int getWeekyear(long)
    {
        long l0, $l3, $l5;
        int $i1, $i2, $i4, $i6;
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0);

        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>(l0, $i1);

        if $i2 != 1 goto label1;

        $l5 = l0 + 604800000L;

        $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l5);

        return $i6;

     label1:
        if $i2 <= 51 goto label2;

        $l3 = l0 - 1209600000L;

        $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l3);

        return $i4;

     label2:
        return $i1;
    }

    int getWeekOfWeekyear(long)
    {
        int $i1, $i2;
        org.joda.time.chrono.BasicChronology r0;
        long l0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0);

        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>(l0, $i1);

        return $i2;
    }

    int getWeekOfWeekyear(long, int)
    {
        long $l1, l2, $l5, $l7, $l8;
        byte $b3, $b6;
        int i0, $i4, $i9, $i10, $i11, $i12, $i13, $i14;
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        l2 := @parameter0: long;

        i0 := @parameter1: int;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i0);

        $b3 = l2 cmp $l1;

        $i13 = (int) $b3;

        if $i13 >= 0 goto label1;

        $i11 = i0 - 1;

        $i12 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>($i11);

        return $i12;

     label1:
        $i4 = i0 + 1;

        $l5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i4);

        $b6 = l2 cmp $l5;

        $i14 = (int) $b6;

        if $i14 < 0 goto label2;

        return 1;

     label2:
        $l7 = l2 - $l1;

        $l8 = $l7 / 604800000L;

        $i9 = (int) $l8;

        $i10 = $i9 + 1;

        return $i10;
    }

    int getDayOfWeek(long)
    {
        long l0, $l2, $l4, $l5, $l8, $l9, l12;
        byte $b1, $b3;
        int $i6, $i7, $i10, $i11, $i13, $i14;
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i13 = (int) $b1;

        if $i13 < 0 goto label1;

        l12 = l0 / 86400000L;

        goto label2;

     label1:
        $l2 = l0 - 86399999L;

        l12 = $l2 / 86400000L;

        $b3 = l12 cmp -3L;

        $i14 = (int) $b3;

        if $i14 >= 0 goto label2;

        $l8 = l12 + 4L;

        $l9 = $l8 % 7L;

        $i10 = (int) $l9;

        $i11 = 7 + $i10;

        return $i11;

     label2:
        $l4 = l12 + 3L;

        $l5 = $l4 % 7L;

        $i6 = (int) $l5;

        $i7 = 1 + $i6;

        return $i7;
    }

    int getMillisOfDay(long)
    {
        long l0, $l2, $l3, $l6;
        byte $b1;
        int $i4, $i5, $i7, $i8;
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i8 = (int) $b1;

        if $i8 < 0 goto label1;

        $l6 = l0 % 86400000L;

        $i7 = (int) $l6;

        return $i7;

     label1:
        $l2 = l0 + 1L;

        $l3 = $l2 % 86400000L;

        $i4 = (int) $l3;

        $i5 = 86399999 + $i4;

        return $i5;
    }

    int getDaysInMonthMax()
    {
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        return 31;
    }

    int getDaysInMonthMax(long)
    {
        int $i1, $i2, $i3;
        org.joda.time.chrono.BasicChronology r0;
        long l0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0);

        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1);

        $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>($i1, $i2);

        return $i3;
    }

    int getDaysInMonthMaxForSet(long, int)
    {
        int $i1, i2;
        org.joda.time.chrono.BasicChronology r0;
        long l0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        l0 := @parameter0: long;

        i2 := @parameter1: int;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>(l0);

        return $i1;
    }

    long getDateMidnightMillis(int, int, int)
    {
        long $l7;
        int i0, $i1, $i2, i3, $i4, i5, $i6;
        org.joda.time.chrono.BasicChronology r1;
        org.joda.time.DateTimeFieldType $r0, $r2, $r3;

        r1 := @this: org.joda.time.chrono.BasicChronology;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        i5 := @parameter2: int;

        $r0 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        $i1 = virtualinvoke r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>();

        $i2 = virtualinvoke r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r0, i0, $i1, $i2);

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $i4 = virtualinvoke r1.<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>(i0);

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i3, 1, $i4);

        $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>();

        $i6 = virtualinvoke r1.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i0, i3);

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i5, 1, $i6);

        $l7 = virtualinvoke r1.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i3, i5);

        return $l7;
    }

    abstract long getYearDifference(long, long);

    abstract boolean isLeapYear(int);

    abstract int getDaysInYearMonth(int, int);

    abstract int getDaysInMonthMax(int);

    abstract long getTotalMillisByYearMonth(int, int);

    abstract long calculateFirstDayOfYearMillis(int);

    abstract int getMinYear();

    abstract int getMaxYear();

    int getMaxMonth(int)
    {
        int $i0, i1;
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>();

        return $i0;
    }

    int getMaxMonth()
    {
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        return 12;
    }

    abstract long getAverageMillisPerYear();

    abstract long getAverageMillisPerYearDividedByTwo();

    abstract long getAverageMillisPerMonth();

    abstract long getApproxMillisAtEpochDividedByTwo();

    abstract long setYear(long, int);

    private org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)
    {
        long $l2;
        org.joda.time.chrono.BasicChronology$YearInfo $r2, r4;
        org.joda.time.chrono.BasicChronology$YearInfo[] $r1, $r3;
        int i0, $i1, $i3, $i4;
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>;

        $i1 = i0 & 1023;

        r4 = $r1[$i1];

        if r4 == null goto label1;

        $i4 = r4.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>;

        if $i4 == i0 goto label2;

     label1:
        $r2 = new org.joda.time.chrono.BasicChronology$YearInfo;

        $l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long calculateFirstDayOfYearMillis(int)>(i0);

        specialinvoke $r2.<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>(i0, $l2);

        r4 = $r2;

        $r3 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>;

        $i3 = i0 & 1023;

        $r3[$i3] = $r2;

     label2:
        return r4;
    }

    static org.joda.time.DurationField access$000()
    {
        org.joda.time.DurationField $r0;

        $r0 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHalfdaysField>;

        return $r0;
    }

    static org.joda.time.DurationField access$100()
    {
        org.joda.time.DurationField $r0;

        $r0 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField>;

        return $r0;
    }

    static void <clinit>()
    {
        org.joda.time.DateTimeFieldType $r14, $r18, $r22, $r26, $r30, $r34, $r38, $r42, $r47, $r50;
        org.joda.time.DateTimeField $r46, $r49;
        org.joda.time.chrono.BasicChronology$HalfdayField $r51;
        org.joda.time.DurationFieldType $r2, $r4, $r6, $r8, $r10, $r12;
        org.joda.time.field.ZeroIsMaxDateTimeField $r45, $r48;
        org.joda.time.field.PreciseDurationField $r1, $r3, $r5, $r7, $r9, $r11;
        org.joda.time.DurationField $r0, $r15, $r16, $r19, $r20, $r23, $r24, $r27, $r28, $r31, $r32, $r35, $r36, $r39, $r40, $r43, $r44;
        org.joda.time.field.PreciseDateTimeField $r13, $r17, $r21, $r25, $r29, $r33, $r37, $r41;

        <org.joda.time.chrono.BasicChronology: int CACHE_MASK> = 1023;

        <org.joda.time.chrono.BasicChronology: int CACHE_SIZE> = 1024;

        <org.joda.time.chrono.BasicChronology: long serialVersionUID> = 8283225332206808863L;

        $r0 = <org.joda.time.field.MillisDurationField: org.joda.time.DurationField INSTANCE>;

        <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMillisField> = $r0;

        $r1 = new org.joda.time.field.PreciseDurationField;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();

        specialinvoke $r1.<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>($r2, 1000L);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cSecondsField> = $r1;

        $r3 = new org.joda.time.field.PreciseDurationField;

        $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();

        specialinvoke $r3.<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>($r4, 60000L);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMinutesField> = $r3;

        $r5 = new org.joda.time.field.PreciseDurationField;

        $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>();

        specialinvoke $r5.<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>($r6, 3600000L);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHoursField> = $r5;

        $r7 = new org.joda.time.field.PreciseDurationField;

        $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>();

        specialinvoke $r7.<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>($r8, 43200000L);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHalfdaysField> = $r7;

        $r9 = new org.joda.time.field.PreciseDurationField;

        $r10 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        specialinvoke $r9.<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>($r10, 86400000L);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField> = $r9;

        $r11 = new org.joda.time.field.PreciseDurationField;

        $r12 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>();

        specialinvoke $r11.<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>($r12, 604800000L);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cWeeksField> = $r11;

        $r13 = new org.joda.time.field.PreciseDateTimeField;

        $r14 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>();

        $r16 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMillisField>;

        $r15 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cSecondsField>;

        specialinvoke $r13.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r14, $r16, $r15);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMillisOfSecondField> = $r13;

        $r17 = new org.joda.time.field.PreciseDateTimeField;

        $r18 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>();

        $r20 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMillisField>;

        $r19 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField>;

        specialinvoke $r17.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r18, $r20, $r19);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMillisOfDayField> = $r17;

        $r21 = new org.joda.time.field.PreciseDateTimeField;

        $r22 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>();

        $r24 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cSecondsField>;

        $r23 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMinutesField>;

        specialinvoke $r21.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r22, $r24, $r23);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cSecondOfMinuteField> = $r21;

        $r25 = new org.joda.time.field.PreciseDateTimeField;

        $r26 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>();

        $r28 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cSecondsField>;

        $r27 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField>;

        specialinvoke $r25.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r26, $r28, $r27);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cSecondOfDayField> = $r25;

        $r29 = new org.joda.time.field.PreciseDateTimeField;

        $r30 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>();

        $r32 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMinutesField>;

        $r31 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHoursField>;

        specialinvoke $r29.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r30, $r32, $r31);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMinuteOfHourField> = $r29;

        $r33 = new org.joda.time.field.PreciseDateTimeField;

        $r34 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>();

        $r36 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMinutesField>;

        $r35 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField>;

        specialinvoke $r33.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r34, $r36, $r35);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMinuteOfDayField> = $r33;

        $r37 = new org.joda.time.field.PreciseDateTimeField;

        $r38 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>();

        $r40 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHoursField>;

        $r39 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField>;

        specialinvoke $r37.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r38, $r40, $r39);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfDayField> = $r37;

        $r41 = new org.joda.time.field.PreciseDateTimeField;

        $r42 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>();

        $r44 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHoursField>;

        $r43 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHalfdaysField>;

        specialinvoke $r41.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r42, $r44, $r43);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfHalfdayField> = $r41;

        $r45 = new org.joda.time.field.ZeroIsMaxDateTimeField;

        $r46 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfDayField>;

        $r47 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>();

        specialinvoke $r45.<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>($r46, $r47);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cClockhourOfDayField> = $r45;

        $r48 = new org.joda.time.field.ZeroIsMaxDateTimeField;

        $r49 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfHalfdayField>;

        $r50 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>();

        specialinvoke $r48.<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>($r49, $r50);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cClockhourOfHalfdayField> = $r48;

        $r51 = new org.joda.time.chrono.BasicChronology$HalfdayField;

        specialinvoke $r51.<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>();

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHalfdayOfDayField> = $r51;

        return;
    }
}
