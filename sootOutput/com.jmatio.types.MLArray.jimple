public class com.jmatio.types.MLArray extends java.lang.Object
{
    public static final int mxUNKNOWN_CLASS;
    public static final int mxCELL_CLASS;
    public static final int mxSTRUCT_CLASS;
    public static final int mxOBJECT_CLASS;
    public static final int mxCHAR_CLASS;
    public static final int mxSPARSE_CLASS;
    public static final int mxDOUBLE_CLASS;
    public static final int mxSINGLE_CLASS;
    public static final int mxINT8_CLASS;
    public static final int mxUINT8_CLASS;
    public static final int mxINT16_CLASS;
    public static final int mxUINT16_CLASS;
    public static final int mxINT32_CLASS;
    public static final int mxUINT32_CLASS;
    public static final int mxINT64_CLASS;
    public static final int mxUINT64_CLASS;
    public static final int mxFUNCTION_CLASS;
    public static final int mxOPAQUE_CLASS;
    public static final int mtFLAG_COMPLEX;
    public static final int mtFLAG_GLOBAL;
    public static final int mtFLAG_LOGICAL;
    public static final int mtFLAG_TYPE;
    protected int[] dims;
    public java.lang.String name;
    protected int attributes;
    protected int type;

    public void <init>(java.lang.String, int[], int, int)
    {
        com.jmatio.types.MLArray r0;
        int[] r1, $r2, $r3;
        int $i0, $i1, i2, i3;
        java.lang.String r4;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: int[];

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        $r2 = newarray (int)[$i0];

        r0.<com.jmatio.types.MLArray: int[] dims> = $r2;

        $r3 = r0.<com.jmatio.types.MLArray: int[] dims>;

        $i1 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, $i1);

        if r4 == null goto label1;

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        r0.<com.jmatio.types.MLArray: java.lang.String name> = r4;

        goto label2;

     label1:
        r0.<com.jmatio.types.MLArray: java.lang.String name> = "@";

     label2:
        r0.<com.jmatio.types.MLArray: int type> = i2;

        r0.<com.jmatio.types.MLArray: int attributes> = i3;

        return;
    }

    public java.lang.String getName()
    {
        com.jmatio.types.MLArray r0;
        java.lang.String $r1;

        r0 := @this: com.jmatio.types.MLArray;

        $r1 = r0.<com.jmatio.types.MLArray: java.lang.String name>;

        return $r1;
    }

    public int getFlags()
    {
        com.jmatio.types.MLArray r0;
        int $i0, $i1, $i2, $i3, i4, $i6;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        $i3 = $i0 & 255;

        $i1 = r0.<com.jmatio.types.MLArray: int attributes>;

        $i6 = (int) -256;

        $i2 = $i1 & $i6;

        i4 = $i3 | $i2;

        return i4;
    }

    public byte[] getNameToByteArray()
    {
        byte[] $r2;
        com.jmatio.types.MLArray r0;
        java.lang.String $r1;

        r0 := @this: com.jmatio.types.MLArray;

        $r1 = r0.<com.jmatio.types.MLArray: java.lang.String name>;

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        return $r2;
    }

    public int[] getDimensions()
    {
        com.jmatio.types.MLArray r0;
        int[] $r1, $r2, $r3, $r4, r5;
        int $i0, $i1;

        r0 := @this: com.jmatio.types.MLArray;

        r5 = null;

        $r1 = r0.<com.jmatio.types.MLArray: int[] dims>;

        if $r1 == null goto label1;

        $r2 = r0.<com.jmatio.types.MLArray: int[] dims>;

        $i0 = lengthof $r2;

        r5 = newarray (int)[$i0];

        $r4 = r0.<com.jmatio.types.MLArray: int[] dims>;

        $r3 = r0.<com.jmatio.types.MLArray: int[] dims>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r5, 0, $i1);

     label1:
        return r5;
    }

    public int getM()
    {
        com.jmatio.types.MLArray r0;
        int[] $r1, $r2;
        int i0;

        r0 := @this: com.jmatio.types.MLArray;

        i0 = 0;

        $r1 = r0.<com.jmatio.types.MLArray: int[] dims>;

        if $r1 == null goto label1;

        $r2 = r0.<com.jmatio.types.MLArray: int[] dims>;

        i0 = $r2[0];

     label1:
        return i0;
    }

    public int getN()
    {
        com.jmatio.types.MLArray r0;
        int[] $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, i3, i4;

        r0 := @this: com.jmatio.types.MLArray;

        i3 = 0;

        $r1 = r0.<com.jmatio.types.MLArray: int[] dims>;

        if $r1 == null goto label4;

        $r2 = r0.<com.jmatio.types.MLArray: int[] dims>;

        $i0 = lengthof $r2;

        if $i0 <= 2 goto label3;

        i3 = 1;

        i4 = 1;

     label1:
        $r4 = r0.<com.jmatio.types.MLArray: int[] dims>;

        $i1 = lengthof $r4;

        if i4 >= $i1 goto label2;

        $r5 = r0.<com.jmatio.types.MLArray: int[] dims>;

        $i2 = $r5[i4];

        i3 = i3 * $i2;

        i4 = i4 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        $r3 = r0.<com.jmatio.types.MLArray: int[] dims>;

        i3 = $r3[1];

     label4:
        return i3;
    }

    public int getNDimensions()
    {
        com.jmatio.types.MLArray r0;
        int[] $r1, $r2;
        int i0;

        r0 := @this: com.jmatio.types.MLArray;

        i0 = 0;

        $r1 = r0.<com.jmatio.types.MLArray: int[] dims>;

        if $r1 == null goto label1;

        $r2 = r0.<com.jmatio.types.MLArray: int[] dims>;

        i0 = lengthof $r2;

     label1:
        return i0;
    }

    public int getSize()
    {
        com.jmatio.types.MLArray r0;
        int $i0, $i1, $i2;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = virtualinvoke r0.<com.jmatio.types.MLArray: int getM()>();

        $i1 = virtualinvoke r0.<com.jmatio.types.MLArray: int getN()>();

        $i2 = $i0 * $i1;

        return $i2;
    }

    public int getType()
    {
        int $i0;
        com.jmatio.types.MLArray r0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = virtualinvoke r0.<com.jmatio.types.MLArray: int getN()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static final java.lang.String typeToString(int)
    {
        int i0;
        java.lang.String r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label18;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label11;
            case 12: goto label12;
            case 13: goto label13;
            case 14: goto label14;
            case 15: goto label15;
            case 16: goto label16;
            case 17: goto label17;
            default: goto label19;
        };

     label01:
        r0 = "unknown";

        goto label20;

     label02:
        r0 = "cell";

        goto label20;

     label03:
        r0 = "struct";

        goto label20;

     label04:
        r0 = "char";

        goto label20;

     label05:
        r0 = "sparse";

        goto label20;

     label06:
        r0 = "double";

        goto label20;

     label07:
        r0 = "single";

        goto label20;

     label08:
        r0 = "int8";

        goto label20;

     label09:
        r0 = "uint8";

        goto label20;

     label10:
        r0 = "int16";

        goto label20;

     label11:
        r0 = "uint16";

        goto label20;

     label12:
        r0 = "int32";

        goto label20;

     label13:
        r0 = "uint32";

        goto label20;

     label14:
        r0 = "int64";

        goto label20;

     label15:
        r0 = "uint64";

        goto label20;

     label16:
        r0 = "function_handle";

        goto label20;

     label17:
        r0 = "opaque";

        goto label20;

     label18:
        r0 = "object";

        goto label20;

     label19:
        r0 = "unknown";

     label20:
        return r0;
    }

    public boolean isCell()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isChar()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isComplex()
    {
        com.jmatio.types.MLArray r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int attributes>;

        $i1 = $i0 & 2048;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isSparse()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 5 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isStruct()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isDouble()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isSingle()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 7 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isInt8()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isUint8()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 9 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isInt16()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 10 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isUint16()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 11 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isInt32()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 12 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isUint32()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 13 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isInt64()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 14 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isUint64()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 15 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isObject()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isOpaque()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 17 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isLogical()
    {
        com.jmatio.types.MLArray r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int attributes>;

        $i1 = $i0 & 512;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isFunctionObject()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 16 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isUnknown()
    {
        int $i0;
        com.jmatio.types.MLArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLArray;

        $i0 = r0.<com.jmatio.types.MLArray: int type>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected int getIndex(int, int)
    {
        com.jmatio.types.MLArray r0;
        int i0, i1, $i2, $i3, $i4;

        r0 := @this: com.jmatio.types.MLArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<com.jmatio.types.MLArray: int getM()>();

        $i3 = i1 * $i2;

        $i4 = i0 + $i3;

        return $i4;
    }

    public java.lang.String toString()
    {
        int[] $r2, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r3, $r10;
        boolean $z0, $z1, $z2;
        com.jmatio.types.MLArray r1;

        r1 := @this: com.jmatio.types.MLArray;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<com.jmatio.types.MLArray: int[] dims>;

        if $r2 == null goto label6;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        $r4 = r1.<com.jmatio.types.MLArray: int[] dims>;

        $i0 = lengthof $r4;

        if $i0 <= 3 goto label1;

        $r9 = r1.<com.jmatio.types.MLArray: int[] dims>;

        $i5 = lengthof $r9;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(68);

        goto label2;

     label1:
        $r5 = r1.<com.jmatio.types.MLArray: int[] dims>;

        $i1 = $r5[0];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(120);

        $r6 = r1.<com.jmatio.types.MLArray: int[] dims>;

        $i2 = $r6[1];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r7 = r1.<com.jmatio.types.MLArray: int[] dims>;

        $i3 = lengthof $r7;

        if $i3 != 3 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(120);

        $r8 = r1.<com.jmatio.types.MLArray: int[] dims>;

        $i4 = $r8[2];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ");

        $i6 = r1.<com.jmatio.types.MLArray: int type>;

        $r10 = staticinvoke <com.jmatio.types.MLArray: java.lang.String typeToString(int)>($i6);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" array");

        $z2 = virtualinvoke r1.<com.jmatio.types.MLArray: boolean isSparse()>();

        if $z2 == 0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (sparse");

        $z1 = virtualinvoke r1.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z1 == 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" complex");

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        goto label5;

     label4:
        $z0 = virtualinvoke r1.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z0 == 0 goto label5;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (complex)");

     label5:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        goto label7;

     label6:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[invalid]");

     label7:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.String contentToString()
    {
        com.jmatio.types.MLArray r0;

        r0 := @this: com.jmatio.types.MLArray;

        return "content cannot be displayed";
    }

    public void dispose()
    {
        com.jmatio.types.MLArray r0;

        r0 := @this: com.jmatio.types.MLArray;

        return;
    }

    public static void <clinit>()
    {
        <com.jmatio.types.MLArray: int mtFLAG_TYPE> = 255;

        <com.jmatio.types.MLArray: int mtFLAG_LOGICAL> = 512;

        <com.jmatio.types.MLArray: int mtFLAG_GLOBAL> = 1024;

        <com.jmatio.types.MLArray: int mtFLAG_COMPLEX> = 2048;

        <com.jmatio.types.MLArray: int mxOPAQUE_CLASS> = 17;

        <com.jmatio.types.MLArray: int mxFUNCTION_CLASS> = 16;

        <com.jmatio.types.MLArray: int mxUINT64_CLASS> = 15;

        <com.jmatio.types.MLArray: int mxINT64_CLASS> = 14;

        <com.jmatio.types.MLArray: int mxUINT32_CLASS> = 13;

        <com.jmatio.types.MLArray: int mxINT32_CLASS> = 12;

        <com.jmatio.types.MLArray: int mxUINT16_CLASS> = 11;

        <com.jmatio.types.MLArray: int mxINT16_CLASS> = 10;

        <com.jmatio.types.MLArray: int mxUINT8_CLASS> = 9;

        <com.jmatio.types.MLArray: int mxINT8_CLASS> = 8;

        <com.jmatio.types.MLArray: int mxSINGLE_CLASS> = 7;

        <com.jmatio.types.MLArray: int mxDOUBLE_CLASS> = 6;

        <com.jmatio.types.MLArray: int mxSPARSE_CLASS> = 5;

        <com.jmatio.types.MLArray: int mxCHAR_CLASS> = 4;

        <com.jmatio.types.MLArray: int mxOBJECT_CLASS> = 3;

        <com.jmatio.types.MLArray: int mxSTRUCT_CLASS> = 2;

        <com.jmatio.types.MLArray: int mxCELL_CLASS> = 1;

        <com.jmatio.types.MLArray: int mxUNKNOWN_CLASS> = 0;

        return;
    }
}
