public class com.hp.hpl.jena.sparql.algebra.optimize.Optimize extends java.lang.Object implements com.hp.hpl.jena.sparql.algebra.optimize.Rewrite
{
    private static org.slf4j.Logger log;
    public static com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory noOptimizationFactory;
    public static com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory stdOptimizationFactory;
    private static com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory factory;
    private final com.hp.hpl.jena.sparql.util.Context context;
    public static final com.hp.hpl.jena.sparql.util.Symbol filterPlacementOldName;

    public static com.hp.hpl.jena.sparql.algebra.Op optimize(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.ExecutionContext r1;
        com.hp.hpl.jena.sparql.util.Context $r2;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.Op optimize(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.util.Context)>(r0, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op optimize(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.Rewrite $r1;
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r0 := @parameter1: com.hp.hpl.jena.sparql.util.Context;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.optimize.Rewrite decideOptimizer(com.hp.hpl.jena.sparql.util.Context)>(r0);

        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.algebra.optimize.Rewrite: com.hp.hpl.jena.sparql.algebra.Op rewrite(com.hp.hpl.jena.sparql.algebra.Op)>(r2);

        return $r3;
    }

    public static void noOptimizer()
    {
        com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory $r0;

        $r0 = <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory noOptimizationFactory>;

        staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: void setFactory(com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory)>($r0);

        return;
    }

    private static com.hp.hpl.jena.sparql.algebra.optimize.Rewrite decideOptimizer(com.hp.hpl.jena.sparql.util.Context)
    {
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.algebra.optimize.Rewrite $r3;
        com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory r4;
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        $r1 = <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol sysOptimizerFactory>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol)>($r1);

        r4 = (com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory) $r2;

        if r4 != null goto label1;

        r4 = <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory factory>;

     label1:
        if r4 != null goto label2;

        r4 = <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory stdOptimizationFactory>;

     label2:
        $r3 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory: com.hp.hpl.jena.sparql.algebra.optimize.Rewrite create(com.hp.hpl.jena.sparql.util.Context)>(r0);

        return $r3;
    }

    public static void setFactory(com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory;

        <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory factory> = r0;

        return;
    }

    public static com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory getFactory(com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory $r0, r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory;

        $r0 = <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory factory>;

        return $r0;
    }

    private void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.ExecutionContext r1;
        com.hp.hpl.jena.sparql.util.Context $r2;
        com.hp.hpl.jena.sparql.algebra.optimize.Optimize r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.Optimize;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.util.Context getContext()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: void <init>(com.hp.hpl.jena.sparql.util.Context)>($r2);

        return;
    }

    private void <init>(com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.util.Context r1;
        com.hp.hpl.jena.sparql.algebra.optimize.Optimize r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.Optimize;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context> = r1;

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op rewrite(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op $r27, r55, $r56, r57, r62;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlattern $r26;
        com.hp.hpl.jena.sparql.util.Context $r2, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r29, $r31, $r45, $r47, $r49, $r50, $r54, $r59, $r60;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformImplicitLeftJoin $r40;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformJoinStrategy $r33;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformExpandOneOf $r42;
        com.hp.hpl.jena.sparql.algebra.optimize.Optimize r0;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterImplicitJoin $r41;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterDisjunction $r38;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformDistinctToReduced $r34;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterPlacement $r37;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPropertyFunction $r44;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformTopN $r36;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformOrderByDistinctAppplication $r35;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformMergeBGPs $r32;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterConjunction $r43;
        com.hp.hpl.jena.sparql.util.Symbol $r1, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r28, $r30, $r46, $r48, $r51, $r53, $r61;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality $r39;
        com.hp.hpl.jena.sparql.algebra.optimize.OpVisitorExprPrepare $r58;
        java.lang.Object $r3, $r52;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.Optimize;

        r55 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r1 = <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol sysOptimizer>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol)>($r1);

        if $r3 != null goto label01;

        $r54 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r53 = <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol sysOptimizer>;

        virtualinvoke $r54.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r53, r0);

     label01:
        $r5 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r4 = <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Symbol filterPlacementOldName>;

        $z0 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.util.Context: boolean isDefined(com.hp.hpl.jena.sparql.util.Symbol)>($r4);

        if $z0 == 0 goto label02;

        $r47 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r46 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optFilterPlacement>;

        $z13 = virtualinvoke $r47.<com.hp.hpl.jena.sparql.util.Context: boolean isUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r46);

        if $z13 == 0 goto label02;

        $r50 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r51 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optFilterPlacement>;

        $r49 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r48 = <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Symbol filterPlacementOldName>;

        $r52 = virtualinvoke $r49.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol)>($r48);

        virtualinvoke $r50.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r51, $r52);

     label02:
        $r56 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformScopeRename: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Op)>(r55);

        r57 = $r56;

        $r58 = new com.hp.hpl.jena.sparql.algebra.optimize.OpVisitorExprPrepare;

        $r59 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        specialinvoke $r58.<com.hp.hpl.jena.sparql.algebra.optimize.OpVisitorExprPrepare: void <init>(com.hp.hpl.jena.sparql.util.Context)>($r59);

        staticinvoke <com.hp.hpl.jena.sparql.algebra.OpWalker: void walk(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r56, $r58);

        $r60 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r61 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol propertyFunctions>;

        $z14 = virtualinvoke $r60.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r61);

        if $z14 == 0 goto label03;

        $r44 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformPropertyFunction;

        $r45 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        specialinvoke $r44.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPropertyFunction: void <init>(com.hp.hpl.jena.sparql.util.Context)>($r45);

        r57 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.Op apply(java.lang.String,com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>("Property Functions", $r44, $r56);

     label03:
        $r7 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r6 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optFilterConjunction>;

        $z1 = virtualinvoke $r7.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r6);

        if $z1 == 0 goto label04;

        $r43 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterConjunction;

        specialinvoke $r43.<com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterConjunction: void <init>()>();

        r57 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.Op apply(java.lang.String,com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>("filter conjunctions to ExprLists", $r43, r57);

     label04:
        $r9 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r8 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optFilterExpandOneOf>;

        $z2 = virtualinvoke $r9.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r8);

        if $z2 == 0 goto label05;

        $r42 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformExpandOneOf;

        specialinvoke $r42.<com.hp.hpl.jena.sparql.algebra.optimize.TransformExpandOneOf: void <init>()>();

        r57 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.Op apply(java.lang.String,com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>("Break up IN and NOT IN", $r42, r57);

     label05:
        $r11 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r10 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optFilterImplicitJoin>;

        $z3 = virtualinvoke $r11.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r10);

        if $z3 == 0 goto label06;

        $r41 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterImplicitJoin;

        specialinvoke $r41.<com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterImplicitJoin: void <init>()>();

        r57 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.Op apply(java.lang.String,com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>("Filter Implicit Join", $r41, r57);

     label06:
        $r13 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r12 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optImplicitLeftJoin>;

        $z4 = virtualinvoke $r13.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r12);

        if $z4 == 0 goto label07;

        $r40 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformImplicitLeftJoin;

        specialinvoke $r40.<com.hp.hpl.jena.sparql.algebra.optimize.TransformImplicitLeftJoin: void <init>()>();

        r57 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.Op apply(java.lang.String,com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>("Implicit Left Join", $r40, r57);

     label07:
        $r15 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r14 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optFilterEquality>;

        $z5 = virtualinvoke $r15.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r14);

        if $z5 == 0 goto label08;

        $r39 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality;

        specialinvoke $r39.<com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: void <init>()>();

        r57 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.Op apply(java.lang.String,com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>("Filter Equality", $r39, r57);

     label08:
        $r17 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r16 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optFilterDisjunction>;

        $z6 = virtualinvoke $r17.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r16);

        if $z6 == 0 goto label09;

        $r38 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterDisjunction;

        specialinvoke $r38.<com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterDisjunction: void <init>()>();

        r57 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.Op apply(java.lang.String,com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>("Filter Disjunction", $r38, r57);

     label09:
        $r19 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r18 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optFilterPlacement>;

        $z7 = virtualinvoke $r19.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r18);

        if $z7 == 0 goto label10;

        $r37 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterPlacement;

        specialinvoke $r37.<com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterPlacement: void <init>()>();

        r57 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.Op apply(java.lang.String,com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>("Filter Placement", $r37, r57);

     label10:
        $r21 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r20 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optTopNSorting>;

        $z8 = virtualinvoke $r21.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r20);

        if $z8 == 0 goto label11;

        $r36 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformTopN;

        specialinvoke $r36.<com.hp.hpl.jena.sparql.algebra.optimize.TransformTopN: void <init>()>();

        r57 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.Op apply(java.lang.String,com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>("TopN Sorting", $r36, r57);

     label11:
        $r23 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r22 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optOrderByDistinctApplication>;

        $z9 = virtualinvoke $r23.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r22);

        if $z9 == 0 goto label12;

        $r35 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformOrderByDistinctAppplication;

        specialinvoke $r35.<com.hp.hpl.jena.sparql.algebra.optimize.TransformOrderByDistinctAppplication: void <init>()>();

        r57 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.Op apply(java.lang.String,com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>("Apply DISTINCT prior to ORDER BY where possible", $r35, r57);

     label12:
        $r25 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r24 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optDistinctToReduced>;

        $z10 = virtualinvoke $r25.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r24);

        if $z10 == 0 goto label13;

        $r34 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformDistinctToReduced;

        specialinvoke $r34.<com.hp.hpl.jena.sparql.algebra.optimize.TransformDistinctToReduced: void <init>()>();

        r57 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.Op apply(java.lang.String,com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>("Distinct replaced with reduced", $r34, r57);

     label13:
        $r26 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlattern;

        specialinvoke $r26.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlattern: void <init>()>();

        $r27 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.Op apply(java.lang.String,com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>("Path flattening", $r26, r57);

        r62 = $r27;

        $r29 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r28 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optIndexJoinStrategy>;

        $z11 = virtualinvoke $r29.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r28);

        if $z11 == 0 goto label14;

        $r33 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformJoinStrategy;

        specialinvoke $r33.<com.hp.hpl.jena.sparql.algebra.optimize.TransformJoinStrategy: void <init>()>();

        r62 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.Op apply(java.lang.String,com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>("Index Join strategy", $r33, $r27);

     label14:
        $r31 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Context context>;

        $r30 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optMergeBGPs>;

        $z12 = virtualinvoke $r31.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r30);

        if $z12 == 0 goto label15;

        $r32 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformMergeBGPs;

        specialinvoke $r32.<com.hp.hpl.jena.sparql.algebra.optimize.TransformMergeBGPs: void <init>()>();

        r62 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.Op apply(java.lang.String,com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>("Merge BGPs", $r32, r62);

     label15:
        return r62;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        com.hp.hpl.jena.sparql.algebra.Op r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transformSkipService(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r1);

        if $r2 == r1 goto label1;

        return $r2;

     label1:
        return r1;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op apply(java.lang.String, com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        java.lang.String r3;
        com.hp.hpl.jena.sparql.algebra.Op r1, $r2;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.sparql.algebra.Transform;

        r1 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transformSkipService(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r1);

        if $r2 == r1 goto label1;

        return $r2;

     label1:
        return r1;
    }

    void <init>(com.hp.hpl.jena.sparql.util.Context, com.hp.hpl.jena.sparql.algebra.optimize.Optimize$1)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.Optimize$1 r2;
        com.hp.hpl.jena.sparql.util.Context r1;
        com.hp.hpl.jena.sparql.algebra.optimize.Optimize r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.Optimize;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.optimize.Optimize$1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize: void <init>(com.hp.hpl.jena.sparql.util.Context)>(r1);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.hp.hpl.jena.sparql.algebra.optimize.Optimize$1 $r1;
        com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory $r3;
        com.hp.hpl.jena.sparql.algebra.optimize.Optimize$2 $r2;
        com.hp.hpl.jena.sparql.util.Symbol $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/sparql/algebra/optimize/Optimize;");

        <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: org.slf4j.Logger log> = $r0;

        $r1 = new com.hp.hpl.jena.sparql.algebra.optimize.Optimize$1;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize$1: void <init>()>();

        <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory noOptimizationFactory> = $r1;

        $r2 = new com.hp.hpl.jena.sparql.algebra.optimize.Optimize$2;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.algebra.optimize.Optimize$2: void <init>()>();

        <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory stdOptimizationFactory> = $r2;

        $r3 = <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory stdOptimizationFactory>;

        <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.optimize.Optimize$RewriterFactory factory> = $r3;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("filterPlacement");

        <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.util.Symbol filterPlacementOldName> = $r4;

        return;
    }
}
