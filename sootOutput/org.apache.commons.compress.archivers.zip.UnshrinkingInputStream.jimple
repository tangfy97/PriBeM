class org.apache.commons.compress.archivers.zip.UnshrinkingInputStream extends org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream
{
    private static final int MAX_CODE_SIZE;
    private static final int MAX_TABLE_SIZE;
    private final boolean[] isUsed;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        boolean[] $r3, $r4;
        org.apache.commons.compress.archivers.zip.UnshrinkingInputStream r0;
        int[] $r2;
        int $i0, $i1, $i2, $i3, i4;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: void <init>(java.io.InputStream)>(r1);

        $i0 = r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int codeSize>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: void setClearCode(int)>($i0);

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: void initializeTables(int)>(13);

        $r2 = r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int[] prefixes>;

        $i1 = lengthof $r2;

        $r3 = newarray (boolean)[$i1];

        r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: boolean[] isUsed> = $r3;

        i4 = 0;

     label1:
        if i4 >= 256 goto label2;

        $r4 = r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: boolean[] isUsed>;

        $r4[i4] = 1;

        i4 = i4 + 1;

        goto label1;

     label2:
        $i2 = r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int clearCode>;

        $i3 = $i2 + 1;

        r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int tableSize> = $i3;

        return;
    }

    protected int addEntry(int, byte) throws java.io.IOException
    {
        boolean[] $r1, $r2;
        org.apache.commons.compress.archivers.zip.UnshrinkingInputStream r0;
        byte b2;
        int $i0, i1, $i3, $i4, $i5, $i6;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;

        i1 := @parameter0: int;

        b2 := @parameter1: byte;

     label1:
        $i0 = r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int tableSize>;

        if $i0 >= 8192 goto label2;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: boolean[] isUsed>;

        $i4 = r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int tableSize>;

        $z0 = $r2[$i4];

        if $z0 == 0 goto label2;

        $i5 = r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int tableSize>;

        $i6 = $i5 + 1;

        r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int tableSize> = $i6;

        goto label1;

     label2:
        $i3 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int addEntry(int,byte,int)>(i1, b2, 8192);

        if $i3 < 0 goto label3;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: boolean[] isUsed>;

        $r1[$i3] = 1;

     label3:
        return $i3;
    }

    private void partialClear()
    {
        org.apache.commons.compress.archivers.zip.UnshrinkingInputStream r1;
        int[] $r4, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i8, $i10;
        boolean $z0, $z1;
        boolean[] r0, $r2, $r3, $r5;

        r1 := @this: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;

        r0 = newarray (boolean)[8192];

        i5 = 0;

     label1:
        $r2 = r1.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: boolean[] isUsed>;

        $i0 = lengthof $r2;

        if i5 >= $i0 goto label3;

        $r5 = r1.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: boolean[] isUsed>;

        $z1 = $r5[i5];

        if $z1 == 0 goto label2;

        $r6 = r1.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int[] prefixes>;

        $i3 = $r6[i5];

        $i8 = (int) -1;

        if $i3 == $i8 goto label2;

        $r7 = r1.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int[] prefixes>;

        $i4 = $r7[i5];

        r0[$i4] = 1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $i1 = r1.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int clearCode>;

        i6 = $i1 + 1;

     label4:
        $i2 = lengthof r0;

        if i6 >= $i2 goto label6;

        $z0 = r0[i6];

        if $z0 != 0 goto label5;

        $r3 = r1.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: boolean[] isUsed>;

        $r3[i6] = 0;

        $r4 = r1.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int[] prefixes>;

        $i10 = (int) -1;

        $r4[i6] = $i10;

     label5:
        i6 = i6 + 1;

        goto label4;

     label6:
        return;
    }

    protected int decompressNextSymbol() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.zip.UnshrinkingInputStream r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i11;
        java.lang.String $r6;
        boolean $z0, z1;
        boolean[] $r1;
        java.io.IOException $r9, $r10, $r12;
        java.lang.StringBuilder $r4, $r5, $r11;

        r0 := @this: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream;

        $i0 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int readNextCode()>();

        if $i0 >= 0 goto label1;

        $i11 = (int) -1;

        return $i11;

     label1:
        $i1 = r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int clearCode>;

        if $i0 != $i1 goto label7;

        $i3 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int readNextCode()>();

        if $i3 >= 0 goto label2;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Unexpected EOF;");

        throw $r9;

     label2:
        if $i3 != 1 goto label4;

        $i6 = r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int codeSize>;

        if $i6 >= 13 goto label3;

        $i7 = r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int codeSize>;

        $i8 = $i7 + 1;

        r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int codeSize> = $i8;

        goto label6;

     label3:
        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Attempt to increase code size beyond maximum");

        throw $r10;

     label4:
        if $i3 != 2 goto label5;

        specialinvoke r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: void partialClear()>();

        $i4 = r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int clearCode>;

        $i5 = $i4 + 1;

        r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int tableSize> = $i5;

        goto label6;

     label5:
        $r12 = new java.io.IOException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid clear code subcode ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r12;

     label6:
        return 0;

     label7:
        z1 = 0;

        i9 = $i0;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: boolean[] isUsed>;

        $z0 = $r1[$i0];

        if $z0 != 0 goto label8;

        i9 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int addRepeatOfPreviousCode()>();

        z1 = 1;

     label8:
        $i2 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int expandCodeToOutputStack(int,boolean)>(i9, z1);

        return $i2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int MAX_TABLE_SIZE> = 8192;

        <org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: int MAX_CODE_SIZE> = 13;

        return;
    }
}
