public class org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder extends java.lang.Object implements org.apache.neethi.builders.AssertionBuilder
{
    private static final java.util.logging.Logger LOG;
    private java.util.Collection supportedTypes;
    private java.lang.Class type;
    private javax.xml.bind.JAXBContext context;
    private java.util.Set classes;

    public void <init>(javax.xml.namespace.QName) throws javax.xml.bind.JAXBException, java.lang.ClassNotFoundException
    {
        org.apache.cxf.jaxb.JAXBUtils$IdentifierType $r8;
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder r0;
        java.lang.StringBuilder $r1, $r5, $r6, $r10;
        javax.xml.namespace.QName r2;
        java.lang.String $r3, $r4, $r7, $r9, $r11;

        r0 := @this: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder;

        r2 := @parameter0: javax.xml.namespace.QName;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r4 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.String namespaceURIToPackage(java.lang.String)>($r3);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r8 = <org.apache.cxf.jaxb.JAXBUtils$IdentifierType: org.apache.cxf.jaxb.JAXBUtils$IdentifierType CLASS>;

        $r9 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.String nameToIdentifier(java.lang.String,org.apache.cxf.jaxb.JAXBUtils$IdentifierType)>($r7, $r8);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: void <init>(java.lang.String,javax.xml.namespace.QName)>($r11, r2);

        return;
    }

    public void <init>(java.lang.String, javax.xml.namespace.QName) throws javax.xml.bind.JAXBException, java.lang.ClassNotFoundException
    {
        java.lang.Class $r2;
        java.lang.String r1;
        javax.xml.namespace.QName r3;
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder r0;

        r0 := @this: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: javax.xml.namespace.QName;

        $r2 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>(r1, class "Lorg/apache/cxf/ws/policy/builder/jaxb/JaxbAssertionBuilder;");

        specialinvoke r0.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: void <init>(java.lang.Class,javax.xml.namespace.QName)>($r2, r3);

        return;
    }

    public void <init>(java.lang.Class, javax.xml.namespace.QName) throws javax.xml.bind.JAXBException
    {
        java.util.List $r3;
        java.lang.Class r1;
        javax.xml.namespace.QName r2;
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder r0;

        r0 := @this: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: javax.xml.namespace.QName;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: java.lang.Class type> = r1;

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r2);

        r0.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: java.util.Collection supportedTypes> = $r3;

        return;
    }

    private synchronized javax.xml.bind.JAXBContext getContext() throws javax.xml.bind.JAXBException
    {
        java.util.Set $r4, $r6;
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder r0;
        org.apache.cxf.jaxb.JAXBContextCache$CachedContextAndSchemas $r3;
        java.lang.Class $r2;
        javax.xml.bind.JAXBContext $r1, $r5, $r7;

        r0 := @this: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder;

        $r1 = r0.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: javax.xml.bind.JAXBContext context>;

        if $r1 == null goto label1;

        $r6 = r0.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: java.util.Set classes>;

        if $r6 != null goto label2;

     label1:
        $r2 = r0.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: java.lang.Class type>;

        $r3 = staticinvoke <org.apache.cxf.jaxb.JAXBContextCache: org.apache.cxf.jaxb.JAXBContextCache$CachedContextAndSchemas getCachedContextAndSchemas(java.lang.Class)>($r2);

        $r4 = virtualinvoke $r3.<org.apache.cxf.jaxb.JAXBContextCache$CachedContextAndSchemas: java.util.Set getClasses()>();

        r0.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: java.util.Set classes> = $r4;

        $r5 = virtualinvoke $r3.<org.apache.cxf.jaxb.JAXBContextCache$CachedContextAndSchemas: javax.xml.bind.JAXBContext getContext()>();

        r0.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: javax.xml.bind.JAXBContext context> = $r5;

     label2:
        $r7 = r0.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: javax.xml.bind.JAXBContext context>;

        return $r7;
    }

    protected javax.xml.bind.Unmarshaller getUnmarshaller()
    {
        javax.xml.bind.Unmarshaller $r2;
        java.lang.RuntimeException $r4;
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder r0;
        javax.xml.bind.JAXBException $r3;
        javax.xml.bind.JAXBContext $r1;

        r0 := @this: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder;

     label1:
        $r1 = specialinvoke r0.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: javax.xml.bind.JAXBContext getContext()>();

        $r2 = virtualinvoke $r1.<javax.xml.bind.JAXBContext: javax.xml.bind.Unmarshaller createUnmarshaller()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch javax.xml.bind.JAXBException from label1 to label2 with label3;
    }

    public org.apache.neethi.Assertion build(org.w3c.dom.Element, org.apache.neethi.AssertionBuilderFactory)
    {
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion $r5;
        org.apache.neethi.AssertionBuilderFactory r7;
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder r4;
        org.w3c.dom.Element r1;
        java.lang.Object $r6;
        javax.xml.namespace.QName $r0;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        r4 := @this: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder;

        r1 := @parameter0: org.w3c.dom.Element;

        r7 := @parameter1: org.apache.neethi.AssertionBuilderFactory;

        $r0 = new javax.xml.namespace.QName;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getNamespaceURI()>();

        $r3 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getLocalName()>();

        specialinvoke $r0.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r2, $r3);

        $r5 = virtualinvoke r4.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion buildAssertion()>();

        virtualinvoke $r5.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: void setName(javax.xml.namespace.QName)>($r0);

        $z0 = staticinvoke <org.apache.neethi.builders.xml.XMLPrimitiveAssertionBuilder: boolean isOptional(org.w3c.dom.Element)>(r1);

        virtualinvoke $r5.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: void setOptional(boolean)>($z0);

        $z1 = staticinvoke <org.apache.neethi.builders.xml.XMLPrimitiveAssertionBuilder: boolean isIgnorable(org.w3c.dom.Element)>(r1);

        virtualinvoke $r5.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: void setIgnorable(boolean)>($z1);

        $r6 = virtualinvoke r4.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: java.lang.Object getData(org.w3c.dom.Element)>(r1);

        virtualinvoke $r5.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: void setData(java.lang.Object)>($r6);

        return $r5;
    }

    public javax.xml.namespace.QName[] getKnownElements()
    {
        java.lang.Object[] $r4;
        javax.xml.namespace.QName[] $r3, $r5;
        java.util.Collection $r1, $r2;
        int $i0;
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder r0;

        r0 := @this: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder;

        $r2 = r0.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: java.util.Collection supportedTypes>;

        $r1 = r0.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: java.util.Collection supportedTypes>;

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $r3 = newarray (javax.xml.namespace.QName)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (javax.xml.namespace.QName[]) $r4;

        return $r5;
    }

    protected org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion buildAssertion()
    {
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion $r0;
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder r1;

        r1 := @this: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder;

        $r0 = new org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion;

        specialinvoke $r0.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertion: void <init>()>();

        return $r0;
    }

    protected boolean getOptionality(org.w3c.dom.Element)
    {
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder r7;
        org.w3c.dom.Element r0;
        java.lang.Boolean $r6;
        javax.xml.namespace.QName $r1, $r3;
        java.lang.String $r2, $r4, $r5;
        boolean $z0, z1;

        r7 := @this: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder;

        r0 := @parameter0: org.w3c.dom.Element;

        z1 = 0;

        $r1 = <org.apache.neethi.Constants: javax.xml.namespace.QName Q_ELEM_OPTIONAL_ATTR>;

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r3 = <org.apache.neethi.Constants: javax.xml.namespace.QName Q_ELEM_OPTIONAL_ATTR>;

        $r4 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r5 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>($r2, $r4);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r5);

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        z1 = 1;

     label1:
        return z1;
    }

    protected java.lang.Object getData(org.w3c.dom.Element)
    {
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder r0;
        java.util.logging.Level $r3, $r15;
        java.lang.String $r9, $r13;
        boolean $z0, $z1;
        javax.xml.bind.Unmarshaller $r1;
        javax.xml.bind.JAXBElement r18;
        java.util.logging.Logger $r4, $r6, $r16;
        javax.xml.bind.JAXBException $r14;
        org.w3c.dom.Element r2;
        java.lang.StringBuilder $r5, $r7, $r10, $r11, $r12;
        java.lang.Class $r8;
        java.lang.Object r17;

        r0 := @this: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder;

        r2 := @parameter0: org.w3c.dom.Element;

        r17 = null;

     label1:
        $r1 = virtualinvoke r0.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: javax.xml.bind.Unmarshaller getUnmarshaller()>();

        r17 = interfaceinvoke $r1.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(org.w3c.dom.Node)>(r2);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $r16 = <org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: java.util.logging.Logger LOG>;

        $r15 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r16, $r15, "UNMARSHAL_ELEMENT_EXC", $r14);

     label4:
        $z0 = r17 instanceof javax.xml.bind.JAXBElement;

        if $z0 == 0 goto label5;

        r18 = (javax.xml.bind.JAXBElement) r17;

        r17 = virtualinvoke r18.<javax.xml.bind.JAXBElement: java.lang.Object getValue()>();

     label5:
        if null == r17 goto label6;

        $r4 = <org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: java.util.logging.Logger LOG>;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z1 = virtualinvoke $r4.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r3);

        if $z1 == 0 goto label6;

        $r6 = <org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: java.util.logging.Logger LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unmarshaled element into object of type: ");

        $r8 = virtualinvoke r17.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    value: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void fine(java.lang.String)>($r13);

     label6:
        return r17;

        catch javax.xml.bind.JAXBException from label1 to label2 with label3;
    }

    public volatile org.apache.neethi.Assertion build(java.lang.Object, org.apache.neethi.AssertionBuilderFactory) throws java.lang.IllegalArgumentException
    {
        org.apache.neethi.AssertionBuilderFactory r2;
        org.w3c.dom.Element $r3;
        java.lang.Object r1;
        org.apache.neethi.Assertion $r4;
        org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder r0;

        r0 := @this: org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.neethi.AssertionBuilderFactory;

        $r3 = (org.w3c.dom.Element) r1;

        $r4 = virtualinvoke r0.<org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: org.apache.neethi.Assertion build(org.w3c.dom.Element,org.apache.neethi.AssertionBuilderFactory)>($r3, r2);

        return $r4;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/ws/policy/builder/jaxb/JaxbAssertionBuilder;");

        <org.apache.cxf.ws.policy.builder.jaxb.JaxbAssertionBuilder: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
