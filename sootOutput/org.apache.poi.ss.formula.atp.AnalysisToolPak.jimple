public final class org.apache.poi.ss.formula.atp.AnalysisToolPak extends java.lang.Object implements org.apache.poi.ss.formula.udf.UDFFinder
{
    public static final org.apache.poi.ss.formula.udf.UDFFinder instance;
    private final java.util.Map _functionsByName;

    private void <init>()
    {
        org.apache.poi.ss.formula.atp.AnalysisToolPak r0;
        java.util.Map $r1;

        r0 := @this: org.apache.poi.ss.formula.atp.AnalysisToolPak;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.atp.AnalysisToolPak: java.util.Map createFunctionsMap()>();

        r0.<org.apache.poi.ss.formula.atp.AnalysisToolPak: java.util.Map _functionsByName> = $r1;

        return;
    }

    public org.apache.poi.ss.formula.functions.FreeRefFunction findFunction(java.lang.String)
    {
        org.apache.poi.ss.formula.atp.AnalysisToolPak r0;
        java.util.Map $r1;
        java.lang.Object $r3;
        java.lang.String $r2, r5;
        org.apache.poi.ss.formula.functions.FreeRefFunction $r4;
        boolean $z0;

        r0 := @this: org.apache.poi.ss.formula.atp.AnalysisToolPak;

        r5 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("_xlfn.");

        if $z0 == 0 goto label1;

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>(6);

     label1:
        $r1 = r0.<org.apache.poi.ss.formula.atp.AnalysisToolPak: java.util.Map _functionsByName>;

        $r2 = virtualinvoke r5.<java.lang.String: java.lang.String toUpperCase()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (org.apache.poi.ss.formula.functions.FreeRefFunction) $r3;

        return $r4;
    }

    private java.util.Map createFunctionsMap()
    {
        java.util.HashMap $r0;
        org.apache.poi.ss.formula.functions.FreeRefFunction $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        org.apache.poi.ss.formula.atp.AnalysisToolPak r24;

        r24 := @this: org.apache.poi.ss.formula.atp.AnalysisToolPak;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(108);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "ACCRINT", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "ACCRINTM", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "AMORDEGRC", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "AMORLINC", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "AVERAGEIF", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "AVERAGEIFS", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "BAHTTEXT", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "BESSELI", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "BESSELJ", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "BESSELK", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "BESSELY", null);

        $r1 = <org.apache.poi.ss.formula.functions.Bin2Dec: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "BIN2DEC", $r1);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "BIN2HEX", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "BIN2OCT", null);

        $r2 = <org.apache.poi.ss.formula.functions.Complex: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "COMPLEX", $r2);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "CONVERT", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "COUNTIFS", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "COUPDAYBS", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "COUPDAYS", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "COUPDAYSNC", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "COUPNCD", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "COUPNUM", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "COUPPCD", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "CUBEKPIMEMBER", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "CUBEMEMBER", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "CUBEMEMBERPROPERTY", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "CUBERANKEDMEMBER", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "CUBESET", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "CUBESETCOUNT", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "CUBEVALUE", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "CUMIPMT", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "CUMPRINC", null);

        $r3 = <org.apache.poi.ss.formula.functions.Dec2Bin: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "DEC2BIN", $r3);

        $r4 = <org.apache.poi.ss.formula.functions.Dec2Hex: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "DEC2HEX", $r4);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "DEC2OCT", null);

        $r5 = <org.apache.poi.ss.formula.functions.Delta: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "DELTA", $r5);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "DISC", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "DOLLARDE", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "DOLLARFR", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "DURATION", null);

        $r6 = <org.apache.poi.ss.formula.functions.EDate: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "EDATE", $r6);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "EFFECT", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "EOMONTH", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "ERF", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "ERFC", null);

        $r7 = <org.apache.poi.ss.formula.functions.FactDouble: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "FACTDOUBLE", $r7);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "FVSCHEDULE", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "GCD", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "GESTEP", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "HEX2BIN", null);

        $r8 = <org.apache.poi.ss.formula.functions.Hex2Dec: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "HEX2DEC", $r8);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "HEX2OCT", null);

        $r9 = <org.apache.poi.ss.formula.atp.IfError: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IFERROR", $r9);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMABS", null);

        $r10 = <org.apache.poi.ss.formula.functions.Imaginary: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMAGINARY", $r10);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMARGUMENT", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMCONJUGATE", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMCOS", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMDIV", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMEXP", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMLN", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMLOG10", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMLOG2", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMPOWER", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMPRODUCT", null);

        $r11 = <org.apache.poi.ss.formula.functions.ImReal: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMREAL", $r11);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMSIN", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMSQRT", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMSUB", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "IMSUM", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "INTRATE", null);

        $r12 = <org.apache.poi.ss.formula.atp.ParityFunction: org.apache.poi.ss.formula.functions.FreeRefFunction IS_EVEN>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "ISEVEN", $r12);

        $r13 = <org.apache.poi.ss.formula.atp.ParityFunction: org.apache.poi.ss.formula.functions.FreeRefFunction IS_ODD>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "ISODD", $r13);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "JIS", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "LCM", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "MDURATION", null);

        $r14 = <org.apache.poi.ss.formula.atp.MRound: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "MROUND", $r14);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "MULTINOMIAL", null);

        $r15 = <org.apache.poi.ss.formula.atp.NetworkdaysFunction: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "NETWORKDAYS", $r15);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "NOMINAL", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "OCT2BIN", null);

        $r16 = <org.apache.poi.ss.formula.functions.Oct2Dec: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "OCT2DEC", $r16);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "OCT2HEX", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "ODDFPRICE", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "ODDFYIELD", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "ODDLPRICE", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "ODDLYIELD", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "PRICE", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "PRICEDISC", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "PRICEMAT", null);

        $r17 = <org.apache.poi.ss.formula.functions.Quotient: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "QUOTIENT", $r17);

        $r18 = <org.apache.poi.ss.formula.atp.RandBetween: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "RANDBETWEEN", $r18);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "RECEIVED", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "RTD", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "SERIESSUM", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "SQRTPI", null);

        $r19 = <org.apache.poi.ss.formula.functions.Sumifs: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "SUMIFS", $r19);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "TBILLEQ", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "TBILLPRICE", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "TBILLYIELD", null);

        $r20 = <org.apache.poi.ss.formula.functions.WeekNum: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "WEEKNUM", $r20);

        $r21 = <org.apache.poi.ss.formula.atp.WorkdayFunction: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "WORKDAY", $r21);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "XIRR", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "XNPV", null);

        $r22 = <org.apache.poi.ss.formula.atp.YearFrac: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "YEARFRAC", $r22);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "YIELD", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "YIELDDISC", null);

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "YIELDMAT", null);

        $r23 = <org.apache.poi.ss.formula.functions.Countifs: org.apache.poi.ss.formula.functions.FreeRefFunction instance>;

        staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: void r(java.util.Map,java.lang.String,org.apache.poi.ss.formula.functions.FreeRefFunction)>($r0, "COUNTIFS", $r23);

        return $r0;
    }

    private static void r(java.util.Map, java.lang.String, org.apache.poi.ss.formula.functions.FreeRefFunction)
    {
        org.apache.poi.ss.formula.atp.AnalysisToolPak$NotImplemented $r4;
        java.util.Map r1;
        java.lang.String r2;
        org.apache.poi.ss.formula.functions.FreeRefFunction r0, $r3;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: org.apache.poi.ss.formula.functions.FreeRefFunction;

        if r0 != null goto label1;

        $r4 = new org.apache.poi.ss.formula.atp.AnalysisToolPak$NotImplemented;

        $r3 = $r4;

        specialinvoke $r4.<org.apache.poi.ss.formula.atp.AnalysisToolPak$NotImplemented: void <init>(java.lang.String)>(r2);

        goto label2;

     label1:
        $r3 = r0;

     label2:
        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r3);

        return;
    }

    public static boolean isATPFunction(java.lang.String)
    {
        org.apache.poi.ss.formula.atp.AnalysisToolPak r1;
        java.util.Map $r3;
        java.lang.String r2;
        org.apache.poi.ss.formula.udf.UDFFinder $r0;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        $r0 = <org.apache.poi.ss.formula.atp.AnalysisToolPak: org.apache.poi.ss.formula.udf.UDFFinder instance>;

        r1 = (org.apache.poi.ss.formula.atp.AnalysisToolPak) $r0;

        $r3 = r1.<org.apache.poi.ss.formula.atp.AnalysisToolPak: java.util.Map _functionsByName>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        return $z0;
    }

    public static java.util.Collection getSupportedFunctionNames()
    {
        java.util.Iterator $r5;
        java.util.Collection $r6;
        java.util.Set $r4;
        org.apache.poi.ss.formula.functions.FreeRefFunction r11;
        java.util.TreeSet $r2;
        org.apache.poi.ss.formula.udf.UDFFinder $r0;
        org.apache.poi.ss.formula.atp.AnalysisToolPak r1;
        java.util.Map $r3, $r9;
        java.lang.Object $r7, $r10;
        java.lang.String r8;
        boolean $z0, $z1;

        $r0 = <org.apache.poi.ss.formula.atp.AnalysisToolPak: org.apache.poi.ss.formula.udf.UDFFinder instance>;

        r1 = (org.apache.poi.ss.formula.atp.AnalysisToolPak) $r0;

        $r2 = new java.util.TreeSet;

        specialinvoke $r2.<java.util.TreeSet: void <init>()>();

        $r3 = r1.<org.apache.poi.ss.formula.atp.AnalysisToolPak: java.util.Map _functionsByName>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        $r9 = r1.<org.apache.poi.ss.formula.atp.AnalysisToolPak: java.util.Map _functionsByName>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r11 = (org.apache.poi.ss.formula.functions.FreeRefFunction) $r10;

        if r11 == null goto label2;

        $z1 = r11 instanceof org.apache.poi.ss.formula.atp.AnalysisToolPak$NotImplemented;

        if $z1 != 0 goto label2;

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>(r8);

     label2:
        goto label1;

     label3:
        $r6 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2);

        return $r6;
    }

    public static java.util.Collection getNotSupportedFunctionNames()
    {
        java.util.Iterator $r5;
        java.util.Collection $r6;
        java.util.Set $r4;
        org.apache.poi.ss.formula.functions.FreeRefFunction r11;
        java.util.TreeSet $r2;
        org.apache.poi.ss.formula.udf.UDFFinder $r0;
        org.apache.poi.ss.formula.atp.AnalysisToolPak r1;
        java.util.Map $r3, $r9;
        java.lang.Object $r7, $r10;
        java.lang.String r8;
        boolean $z0, $z1;

        $r0 = <org.apache.poi.ss.formula.atp.AnalysisToolPak: org.apache.poi.ss.formula.udf.UDFFinder instance>;

        r1 = (org.apache.poi.ss.formula.atp.AnalysisToolPak) $r0;

        $r2 = new java.util.TreeSet;

        specialinvoke $r2.<java.util.TreeSet: void <init>()>();

        $r3 = r1.<org.apache.poi.ss.formula.atp.AnalysisToolPak: java.util.Map _functionsByName>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        $r9 = r1.<org.apache.poi.ss.formula.atp.AnalysisToolPak: java.util.Map _functionsByName>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r11 = (org.apache.poi.ss.formula.functions.FreeRefFunction) $r10;

        if r11 == null goto label2;

        $z1 = r11 instanceof org.apache.poi.ss.formula.atp.AnalysisToolPak$NotImplemented;

        if $z1 == 0 goto label2;

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>(r8);

     label2:
        goto label1;

     label3:
        $r6 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2);

        return $r6;
    }

    public static void registerFunction(java.lang.String, org.apache.poi.ss.formula.functions.FreeRefFunction)
    {
        org.apache.poi.ss.formula.udf.UDFFinder $r0;
        java.util.Map $r5;
        java.lang.String r2, $r11, $r17, $r23;
        boolean $z0, $z1;
        org.apache.poi.ss.formula.function.FunctionMetadata $r12;
        java.lang.IllegalArgumentException $r6, $r13, $r18;
        org.apache.poi.ss.formula.functions.FreeRefFunction $r3, r4;
        org.apache.poi.ss.formula.atp.AnalysisToolPak r1;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r14, $r15, $r16, $r19, $r20, $r21, $r22;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.poi.ss.formula.functions.FreeRefFunction;

        $r0 = <org.apache.poi.ss.formula.atp.AnalysisToolPak: org.apache.poi.ss.formula.udf.UDFFinder instance>;

        r1 = (org.apache.poi.ss.formula.atp.AnalysisToolPak) $r0;

        $z0 = staticinvoke <org.apache.poi.ss.formula.atp.AnalysisToolPak: boolean isATPFunction(java.lang.String)>(r2);

        if $z0 != 0 goto label2;

        $r12 = staticinvoke <org.apache.poi.ss.formula.function.FunctionMetadataRegistry: org.apache.poi.ss.formula.function.FunctionMetadata getFunctionByName(java.lang.String)>(r2);

        if $r12 == null goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is a built-in Excel function. ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Use FunctoinEval.registerFunction(String name, Function func) instead.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label1:
        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a function from the Excel Analysis Toolpack.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label2:
        $r3 = virtualinvoke r1.<org.apache.poi.ss.formula.atp.AnalysisToolPak: org.apache.poi.ss.formula.functions.FreeRefFunction findFunction(java.lang.String)>(r2);

        if $r3 == null goto label3;

        $z1 = $r3 instanceof org.apache.poi.ss.formula.atp.AnalysisToolPak$NotImplemented;

        if $z1 != 0 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("POI already implememts ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". You cannot override POI\'s implementations of Excel functions");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label3:
        $r5 = r1.<org.apache.poi.ss.formula.atp.AnalysisToolPak: java.util.Map _functionsByName>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r4);

        return;
    }

    static void <clinit>()
    {
        org.apache.poi.ss.formula.atp.AnalysisToolPak $r0;

        $r0 = new org.apache.poi.ss.formula.atp.AnalysisToolPak;

        specialinvoke $r0.<org.apache.poi.ss.formula.atp.AnalysisToolPak: void <init>()>();

        <org.apache.poi.ss.formula.atp.AnalysisToolPak: org.apache.poi.ss.formula.udf.UDFFinder instance> = $r0;

        return;
    }
}
