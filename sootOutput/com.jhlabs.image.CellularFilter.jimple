public class com.jhlabs.image.CellularFilter extends com.jhlabs.image.WholeImageFilter implements com.jhlabs.math.Function2D, com.jhlabs.image.MutatableFilter, java.lang.Cloneable, java.io.Serializable
{
    protected float scale;
    protected float stretch;
    protected float angle;
    public float amount;
    public float turbulence;
    public float gain;
    public float bias;
    public float distancePower;
    public boolean useColor;
    protected com.jhlabs.image.Colormap colormap;
    protected float[] coefficients;
    protected float angleCoefficient;
    protected java.util.Random random;
    protected float m00;
    protected float m01;
    protected float m10;
    protected float m11;
    protected com.jhlabs.image.CellularFilter$Point[] results;
    protected float randomness;
    protected int gridType;
    private float min;
    private float max;
    private static byte[] probabilities;
    private float gradientCoefficient;
    public static final int RANDOM;
    public static final int SQUARE;
    public static final int HEXAGONAL;
    public static final int OCTAGONAL;
    public static final int TRIANGULAR;

    public void <init>()
    {
        byte[] $r6, $r7, $r8;
        com.jhlabs.image.Gradient $r1;
        java.util.Random $r3;
        byte $b1;
        com.jhlabs.image.CellularFilter r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, f8, f9;
        float[] $r2;
        com.jhlabs.image.CellularFilter$Point $r9;
        int $i0, $i2, i3, i4, i5;
        com.jhlabs.image.CellularFilter$Point[] $r4, $r5, $r10;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: com.jhlabs.image.CellularFilter;

        specialinvoke r0.<com.jhlabs.image.WholeImageFilter: void <init>()>();

        r0.<com.jhlabs.image.CellularFilter: float scale> = 32.0F;

        r0.<com.jhlabs.image.CellularFilter: float stretch> = 1.0F;

        r0.<com.jhlabs.image.CellularFilter: float angle> = 0.0F;

        r0.<com.jhlabs.image.CellularFilter: float amount> = 1.0F;

        r0.<com.jhlabs.image.CellularFilter: float turbulence> = 1.0F;

        r0.<com.jhlabs.image.CellularFilter: float gain> = 0.5F;

        r0.<com.jhlabs.image.CellularFilter: float bias> = 0.5F;

        r0.<com.jhlabs.image.CellularFilter: float distancePower> = 2.0F;

        r0.<com.jhlabs.image.CellularFilter: boolean useColor> = 0;

        $r1 = new com.jhlabs.image.Gradient;

        specialinvoke $r1.<com.jhlabs.image.Gradient: void <init>()>();

        r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.Colormap colormap> = $r1;

        $r2 = newarray (float)[4];

        $r2[0] = 1.0F;

        $r2[1] = 0.0F;

        $r2[2] = 0.0F;

        $r2[3] = 0.0F;

        r0.<com.jhlabs.image.CellularFilter: float[] coefficients> = $r2;

        $r3 = new java.util.Random;

        specialinvoke $r3.<java.util.Random: void <init>()>();

        r0.<com.jhlabs.image.CellularFilter: java.util.Random random> = $r3;

        r0.<com.jhlabs.image.CellularFilter: float m00> = 1.0F;

        r0.<com.jhlabs.image.CellularFilter: float m01> = 0.0F;

        r0.<com.jhlabs.image.CellularFilter: float m10> = 0.0F;

        r0.<com.jhlabs.image.CellularFilter: float m11> = 1.0F;

        r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results> = null;

        r0.<com.jhlabs.image.CellularFilter: float randomness> = 0.0F;

        r0.<com.jhlabs.image.CellularFilter: int gridType> = 2;

        $r4 = newarray (com.jhlabs.image.CellularFilter$Point)[3];

        r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results> = $r4;

        i3 = 0;

     label1:
        $r5 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $i0 = lengthof $r5;

        if i3 >= $i0 goto label2;

        $r10 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r9 = new com.jhlabs.image.CellularFilter$Point;

        specialinvoke $r9.<com.jhlabs.image.CellularFilter$Point: void <init>(com.jhlabs.image.CellularFilter)>(r0);

        $r10[i3] = $r9;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r6 = <com.jhlabs.image.CellularFilter: byte[] probabilities>;

        if $r6 != null goto label7;

        $r7 = newarray (byte)[8192];

        <com.jhlabs.image.CellularFilter: byte[] probabilities> = $r7;

        f8 = 1.0F;

        f9 = 0.0F;

        i4 = 0;

     label3:
        if i4 >= 10 goto label7;

        if i4 <= 1 goto label4;

        $f5 = (float) i4;

        f8 = f8 * $f5;

     label4:
        $d1 = (double) 2.5F;

        $d0 = (double) i4;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d0);

        $f0 = (float) $d2;

        $d3 = (double) -2.5F;

        $d4 = staticinvoke <java.lang.Math: double exp(double)>($d3);

        $f1 = (float) $d4;

        $f2 = $f0 * $f1;

        $f6 = $f2 / f8;

        $f3 = f9 * 8192.0F;

        $f7 = f9 + $f6;

        f9 = $f7;

        $f4 = $f7 * 8192.0F;

        $i2 = (int) $f4;

        i5 = (int) $f3;

     label5:
        if i5 >= $i2 goto label6;

        $r8 = <com.jhlabs.image.CellularFilter: byte[] probabilities>;

        $b1 = (byte) i4;

        $r8[i5] = $b1;

        i5 = i5 + 1;

        goto label5;

     label6:
        i4 = i4 + 1;

        goto label3;

     label7:
        return;
    }

    public void setScale(float)
    {
        com.jhlabs.image.CellularFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CellularFilter: float scale> = f0;

        return;
    }

    public float getScale()
    {
        com.jhlabs.image.CellularFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        $f0 = r0.<com.jhlabs.image.CellularFilter: float scale>;

        return $f0;
    }

    public void setStretch(float)
    {
        com.jhlabs.image.CellularFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CellularFilter: float stretch> = f0;

        return;
    }

    public float getStretch()
    {
        com.jhlabs.image.CellularFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        $f0 = r0.<com.jhlabs.image.CellularFilter: float stretch>;

        return $f0;
    }

    public void setAngle(float)
    {
        com.jhlabs.image.CellularFilter r0;
        float f0, f1, f2, $f3;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CellularFilter: float angle> = f0;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        f1 = (float) $d1;

        $d2 = (double) f0;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        f2 = (float) $d3;

        r0.<com.jhlabs.image.CellularFilter: float m00> = f1;

        r0.<com.jhlabs.image.CellularFilter: float m01> = f2;

        $f3 = neg f2;

        r0.<com.jhlabs.image.CellularFilter: float m10> = $f3;

        r0.<com.jhlabs.image.CellularFilter: float m11> = f1;

        return;
    }

    public float getAngle()
    {
        com.jhlabs.image.CellularFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        $f0 = r0.<com.jhlabs.image.CellularFilter: float angle>;

        return $f0;
    }

    public void setCoefficient(int, float)
    {
        com.jhlabs.image.CellularFilter r0;
        int i0;
        float f0;
        float[] $r1;

        r0 := @this: com.jhlabs.image.CellularFilter;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $r1 = r0.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $r1[i0] = f0;

        return;
    }

    public float getCoefficient(int)
    {
        com.jhlabs.image.CellularFilter r0;
        int i0;
        float $f0;
        float[] $r1;

        r0 := @this: com.jhlabs.image.CellularFilter;

        i0 := @parameter0: int;

        $r1 = r0.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $f0 = $r1[i0];

        return $f0;
    }

    public void setAngleCoefficient(float)
    {
        com.jhlabs.image.CellularFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CellularFilter: float angleCoefficient> = f0;

        return;
    }

    public float getAngleCoefficient()
    {
        com.jhlabs.image.CellularFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        $f0 = r0.<com.jhlabs.image.CellularFilter: float angleCoefficient>;

        return $f0;
    }

    public void setGradientCoefficient(float)
    {
        com.jhlabs.image.CellularFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CellularFilter: float gradientCoefficient> = f0;

        return;
    }

    public float getGradientCoefficient()
    {
        com.jhlabs.image.CellularFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        $f0 = r0.<com.jhlabs.image.CellularFilter: float gradientCoefficient>;

        return $f0;
    }

    public void setF1(float)
    {
        com.jhlabs.image.CellularFilter r0;
        float f0;
        float[] $r1;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f0 := @parameter0: float;

        $r1 = r0.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $r1[0] = f0;

        return;
    }

    public float getF1()
    {
        com.jhlabs.image.CellularFilter r0;
        float $f0;
        float[] $r1;

        r0 := @this: com.jhlabs.image.CellularFilter;

        $r1 = r0.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $f0 = $r1[0];

        return $f0;
    }

    public void setF2(float)
    {
        com.jhlabs.image.CellularFilter r0;
        float f0;
        float[] $r1;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f0 := @parameter0: float;

        $r1 = r0.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $r1[1] = f0;

        return;
    }

    public float getF2()
    {
        com.jhlabs.image.CellularFilter r0;
        float $f0;
        float[] $r1;

        r0 := @this: com.jhlabs.image.CellularFilter;

        $r1 = r0.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $f0 = $r1[1];

        return $f0;
    }

    public void setF3(float)
    {
        com.jhlabs.image.CellularFilter r0;
        float f0;
        float[] $r1;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f0 := @parameter0: float;

        $r1 = r0.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $r1[2] = f0;

        return;
    }

    public float getF3()
    {
        com.jhlabs.image.CellularFilter r0;
        float $f0;
        float[] $r1;

        r0 := @this: com.jhlabs.image.CellularFilter;

        $r1 = r0.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $f0 = $r1[2];

        return $f0;
    }

    public void setF4(float)
    {
        com.jhlabs.image.CellularFilter r0;
        float f0;
        float[] $r1;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f0 := @parameter0: float;

        $r1 = r0.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $r1[3] = f0;

        return;
    }

    public float getF4()
    {
        com.jhlabs.image.CellularFilter r0;
        float $f0;
        float[] $r1;

        r0 := @this: com.jhlabs.image.CellularFilter;

        $r1 = r0.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $f0 = $r1[3];

        return $f0;
    }

    public void setColormap(com.jhlabs.image.Colormap)
    {
        com.jhlabs.image.CellularFilter r0;
        com.jhlabs.image.Colormap r1;

        r0 := @this: com.jhlabs.image.CellularFilter;

        r1 := @parameter0: com.jhlabs.image.Colormap;

        r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.Colormap colormap> = r1;

        return;
    }

    public com.jhlabs.image.Colormap getColormap()
    {
        com.jhlabs.image.CellularFilter r0;
        com.jhlabs.image.Colormap $r1;

        r0 := @this: com.jhlabs.image.CellularFilter;

        $r1 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.Colormap colormap>;

        return $r1;
    }

    public void setRandomness(float)
    {
        com.jhlabs.image.CellularFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CellularFilter: float randomness> = f0;

        return;
    }

    public float getRandomness()
    {
        com.jhlabs.image.CellularFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        $f0 = r0.<com.jhlabs.image.CellularFilter: float randomness>;

        return $f0;
    }

    public void setGridType(int)
    {
        com.jhlabs.image.CellularFilter r0;
        int i0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.CellularFilter: int gridType> = i0;

        return;
    }

    public int getGridType()
    {
        com.jhlabs.image.CellularFilter r0;
        int $i0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        $i0 = r0.<com.jhlabs.image.CellularFilter: int gridType>;

        return $i0;
    }

    public void setDistancePower(float)
    {
        com.jhlabs.image.CellularFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CellularFilter: float distancePower> = f0;

        return;
    }

    public float getDistancePower()
    {
        com.jhlabs.image.CellularFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        $f0 = r0.<com.jhlabs.image.CellularFilter: float distancePower>;

        return $f0;
    }

    public void setTurbulence(float)
    {
        com.jhlabs.image.CellularFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CellularFilter: float turbulence> = f0;

        return;
    }

    public float getTurbulence()
    {
        com.jhlabs.image.CellularFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        $f0 = r0.<com.jhlabs.image.CellularFilter: float turbulence>;

        return $f0;
    }

    public void setAmount(float)
    {
        com.jhlabs.image.CellularFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CellularFilter: float amount> = f0;

        return;
    }

    public float getAmount()
    {
        com.jhlabs.image.CellularFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        $f0 = r0.<com.jhlabs.image.CellularFilter: float amount>;

        return $f0;
    }

    private float checkCube(float, float, int, int, com.jhlabs.image.CellularFilter$Point[])
    {
        byte[] $r14;
        byte $b9, $b10, $b11, $b13, $b14, b17, $b19, $b20, $b21, $b22;
        long $l5;
        java.util.Random $r1, $r9, $r10, $r11, $r12, $r13;
        com.jhlabs.image.CellularFilter r0;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8, $i12, $i15, $i16, i18, $i23, $i24, $i25;
        com.jhlabs.image.CellularFilter$Point[] r2;
        com.jhlabs.image.CellularFilter$Point $r3, $r4, $r5, $r6, $r7, $r8, $r15, r16, r17, r18;
        float $f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53, $f54, $f55, $f56, $f57, $f58, $f59, $f60, $f61, $f62, $f63, $f64, $f65, $f66, $f67, $f68, $f69, $f70, $f71, $f72, $f73, $f74, $f75, $f76, $f77, $f78, $f79, $f80, $f81, $f82, $f83, $f84, $f85, $f86, $f87, $f88, $f89, $f90, $f91, $f92, $f93, f94, f95, f96, $f97, $f98, $f99, $f100, $f101, $f102, $f103, $f104, $f105, f106, $f107, f108, f109, f110, f111, f112, f113, f114, f115, f116, f117, f118, f119, f120, f121, f122;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f1 := @parameter0: float;

        f2 := @parameter1: float;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: com.jhlabs.image.CellularFilter$Point[];

        $r1 = r0.<com.jhlabs.image.CellularFilter: java.util.Random random>;

        $i3 = 571 * i0;

        $i2 = 23 * i1;

        $i4 = $i3 + $i2;

        $l5 = (long) $i4;

        virtualinvoke $r1.<java.util.Random: void setSeed(long)>($l5);

        $i6 = r0.<com.jhlabs.image.CellularFilter: int gridType>;

        tableswitch($i6)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            default: goto label01;
        };

     label01:
        $r14 = <com.jhlabs.image.CellularFilter: byte[] probabilities>;

        $r13 = r0.<com.jhlabs.image.CellularFilter: java.util.Random random>;

        $i15 = virtualinvoke $r13.<java.util.Random: int nextInt()>();

        $i16 = $i15 & 8191;

        b17 = $r14[$i16];

        goto label06;

     label02:
        b17 = 1;

        goto label06;

     label03:
        b17 = 1;

        goto label06;

     label04:
        b17 = 2;

        goto label06;

     label05:
        b17 = 2;

     label06:
        i18 = 0;

     label07:
        if i18 >= b17 goto label29;

        f94 = 0.0F;

        f119 = 0.0F;

        f117 = 0.0F;

        f95 = 0.0F;

        f116 = 0.0F;

        f115 = 0.0F;

        f112 = 0.0F;

        f96 = 1.0F;

        f122 = 1.0F;

        f121 = 1.0F;

        $i7 = r0.<com.jhlabs.image.CellularFilter: int gridType>;

        tableswitch($i7)
        {
            case 0: goto label08;
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label13;
            case 4: goto label17;
            default: goto label22;
        };

     label08:
        $r11 = r0.<com.jhlabs.image.CellularFilter: java.util.Random random>;

        f94 = virtualinvoke $r11.<java.util.Random: float nextFloat()>();

        $r12 = r0.<com.jhlabs.image.CellularFilter: java.util.Random random>;

        f95 = virtualinvoke $r12.<java.util.Random: float nextFloat()>();

        goto label22;

     label09:
        f95 = 0.5F;

        f94 = 0.5F;

        $f89 = r0.<com.jhlabs.image.CellularFilter: float randomness>;

        $b14 = $f89 cmpl 0.0F;

        if $b14 == 0 goto label22;

        $d11 = (double) 0.5F;

        $f90 = r0.<com.jhlabs.image.CellularFilter: float randomness>;

        $d12 = (double) $f90;

        $r9 = r0.<com.jhlabs.image.CellularFilter: java.util.Random random>;

        $f91 = virtualinvoke $r9.<java.util.Random: float nextFloat()>();

        $d13 = (double) $f91;

        $d14 = $d13 - 0.5;

        $d15 = $d12 * $d14;

        $d16 = $d11 + $d15;

        f94 = (float) $d16;

        $d17 = (double) 0.5F;

        $f92 = r0.<com.jhlabs.image.CellularFilter: float randomness>;

        $d18 = (double) $f92;

        $r10 = r0.<com.jhlabs.image.CellularFilter: java.util.Random random>;

        $f93 = virtualinvoke $r10.<java.util.Random: float nextFloat()>();

        $d19 = (double) $f93;

        $d20 = $d19 - 0.5;

        $d21 = $d18 * $d20;

        $d22 = $d17 + $d21;

        f95 = (float) $d22;

        goto label22;

     label10:
        $i12 = i0 & 1;

        if $i12 != 0 goto label11;

        f94 = 0.75F;

        f95 = 0.0F;

        f113 = 0.0F;

        f111 = 0.0F;

        f109 = 0.0F;

        goto label12;

     label11:
        f94 = 0.75F;

        f95 = 0.5F;

        f113 = 0.5F;

        f111 = 0.5F;

        f109 = 0.5F;

     label12:
        $f68 = r0.<com.jhlabs.image.CellularFilter: float randomness>;

        $b13 = $f68 cmpl 0.0F;

        if $b13 == 0 goto label22;

        $f75 = r0.<com.jhlabs.image.CellularFilter: float randomness>;

        $f69 = (float) i0;

        $f70 = $f69 + 0.75F;

        $f74 = 271.0F * $f70;

        $f71 = (float) i1;

        $f72 = $f71 + f111;

        $f73 = 271.0F * $f72;

        $f76 = staticinvoke <com.jhlabs.math.Noise: float noise2(float,float)>($f74, $f73);

        $f77 = $f75 * $f76;

        f94 = 0.75F + $f77;

        $f86 = r0.<com.jhlabs.image.CellularFilter: float randomness>;

        $f78 = (float) i0;

        $f79 = $f78 + f94;

        $f80 = 271.0F * $f79;

        $f85 = $f80 + 89.0F;

        $f81 = (float) i1;

        $f82 = $f81 + f113;

        $f83 = 271.0F * $f82;

        $f84 = $f83 + 137.0F;

        $f87 = staticinvoke <com.jhlabs.math.Noise: float noise2(float,float)>($f85, $f84);

        $f88 = $f86 * $f87;

        f95 = f109 + $f88;

        goto label22;

     label13:
        lookupswitch(i18)
        {
            case 0: goto label14;
            case 1: goto label15;
            default: goto label16;
        };

     label14:
        f94 = 0.207F;

        f119 = 0.207F;

        f117 = 0.207F;

        f95 = 0.207F;

        f116 = 0.207F;

        f115 = 0.207F;

        f112 = 0.207F;

        goto label16;

     label15:
        f94 = 0.707F;

        f119 = 0.707F;

        f117 = 0.707F;

        f95 = 0.707F;

        f116 = 0.707F;

        f115 = 0.707F;

        f112 = 0.707F;

        f96 = 1.6F;

        f122 = 1.6F;

        f121 = 1.6F;

     label16:
        $f97 = r0.<com.jhlabs.image.CellularFilter: float randomness>;

        $b19 = $f97 cmpl 0.0F;

        if $b19 == 0 goto label22;

        $f54 = r0.<com.jhlabs.image.CellularFilter: float randomness>;

        $f48 = (float) i0;

        $f49 = $f48 + f119;

        $f53 = 271.0F * $f49;

        $f50 = (float) i1;

        $f51 = $f50 + f116;

        $f52 = 271.0F * $f51;

        $f55 = staticinvoke <com.jhlabs.math.Noise: float noise2(float,float)>($f53, $f52);

        $f56 = $f54 * $f55;

        f94 = f117 + $f56;

        $f65 = r0.<com.jhlabs.image.CellularFilter: float randomness>;

        $f57 = (float) i0;

        $f58 = $f57 + f94;

        $f59 = 271.0F * $f58;

        $f64 = $f59 + 89.0F;

        $f60 = (float) i1;

        $f61 = $f60 + f112;

        $f62 = 271.0F * $f61;

        $f63 = $f62 + 137.0F;

        $f66 = staticinvoke <com.jhlabs.math.Noise: float noise2(float,float)>($f64, $f63);

        $f67 = $f65 * $f66;

        f95 = f115 + $f67;

        goto label22;

     label17:
        $i8 = i1 & 1;

        if $i8 != 0 goto label19;

        if i18 != 0 goto label18;

        f94 = 0.25F;

        f120 = 0.25F;

        f118 = 0.25F;

        f95 = 0.35F;

        f114 = 0.35F;

        f110 = 0.35F;

        f108 = 0.35F;

        goto label21;

     label18:
        f94 = 0.75F;

        f120 = 0.75F;

        f118 = 0.75F;

        f95 = 0.65F;

        f114 = 0.65F;

        f110 = 0.65F;

        f108 = 0.65F;

        goto label21;

     label19:
        if i18 != 0 goto label20;

        f94 = 0.75F;

        f120 = 0.75F;

        f118 = 0.75F;

        f95 = 0.35F;

        f114 = 0.35F;

        f110 = 0.35F;

        f108 = 0.35F;

        goto label21;

     label20:
        f94 = 0.25F;

        f120 = 0.25F;

        f118 = 0.25F;

        f95 = 0.65F;

        f114 = 0.65F;

        f110 = 0.65F;

        f108 = 0.65F;

     label21:
        $f98 = r0.<com.jhlabs.image.CellularFilter: float randomness>;

        $b20 = $f98 cmpl 0.0F;

        if $b20 == 0 goto label22;

        $f34 = r0.<com.jhlabs.image.CellularFilter: float randomness>;

        $f28 = (float) i0;

        $f29 = $f28 + f120;

        $f33 = 271.0F * $f29;

        $f30 = (float) i1;

        $f31 = $f30 + f110;

        $f32 = 271.0F * $f31;

        $f35 = staticinvoke <com.jhlabs.math.Noise: float noise2(float,float)>($f33, $f32);

        $f36 = $f34 * $f35;

        f94 = f118 + $f36;

        $f45 = r0.<com.jhlabs.image.CellularFilter: float randomness>;

        $f37 = (float) i0;

        $f38 = $f37 + f94;

        $f39 = 271.0F * $f38;

        $f44 = $f39 + 89.0F;

        $f40 = (float) i1;

        $f41 = $f40 + f114;

        $f42 = 271.0F * $f41;

        $f43 = $f42 + 137.0F;

        $f46 = staticinvoke <com.jhlabs.math.Noise: float noise2(float,float)>($f44, $f43);

        $f47 = $f45 * $f46;

        f95 = f108 + $f47;

     label22:
        $f99 = f1 - f94;

        $f100 = staticinvoke <java.lang.Math: float abs(float)>($f99);

        $f101 = f2 - f95;

        $f102 = staticinvoke <java.lang.Math: float abs(float)>($f101);

        $f103 = $f100 * f122;

        $f104 = $f102 * f121;

        $f105 = r0.<com.jhlabs.image.CellularFilter: float distancePower>;

        $b21 = $f105 cmpl 1.0F;

        if $b21 != 0 goto label23;

        f106 = $f103 + $f104;

        goto label25;

     label23:
        $f3 = r0.<com.jhlabs.image.CellularFilter: float distancePower>;

        $b9 = $f3 cmpl 2.0F;

        if $b9 != 0 goto label24;

        $f26 = $f103 * $f103;

        $f25 = $f104 * $f104;

        $f27 = $f26 + $f25;

        $d9 = (double) $f27;

        $d10 = staticinvoke <java.lang.Math: double sqrt(double)>($d9);

        f106 = (float) $d10;

        goto label25;

     label24:
        $d1 = (double) $f103;

        $f4 = r0.<com.jhlabs.image.CellularFilter: float distancePower>;

        $d0 = (double) $f4;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d0);

        $f6 = (float) $d2;

        $d4 = (double) $f104;

        $f5 = r0.<com.jhlabs.image.CellularFilter: float distancePower>;

        $d3 = (double) $f5;

        $d5 = staticinvoke <java.lang.Math: double pow(double,double)>($d4, $d3);

        $f7 = (float) $d5;

        $f8 = $f6 + $f7;

        $d7 = (double) $f8;

        $f9 = r0.<com.jhlabs.image.CellularFilter: float distancePower>;

        $f10 = 1.0F / $f9;

        $d6 = (double) $f10;

        $d8 = staticinvoke <java.lang.Math: double pow(double,double)>($d7, $d6);

        f106 = (float) $d8;

     label25:
        $r15 = r2[0];

        $f107 = $r15.<com.jhlabs.image.CellularFilter$Point: float distance>;

        $b22 = f106 cmpg $f107;

        $i23 = (int) $b22;

        if $i23 >= 0 goto label26;

        r16 = r2[2];

        $r7 = r2[1];

        r2[2] = $r7;

        $r8 = r2[0];

        r2[1] = $r8;

        r2[0] = r16;

        r16.<com.jhlabs.image.CellularFilter$Point: float distance> = f106;

        r16.<com.jhlabs.image.CellularFilter$Point: float dx> = $f103;

        r16.<com.jhlabs.image.CellularFilter$Point: float dy> = $f104;

        $f21 = (float) i0;

        $f22 = $f21 + f94;

        r16.<com.jhlabs.image.CellularFilter$Point: float x> = $f22;

        $f23 = (float) i1;

        $f24 = $f23 + f95;

        r16.<com.jhlabs.image.CellularFilter$Point: float y> = $f24;

        goto label28;

     label26:
        $r4 = r2[1];

        $f11 = $r4.<com.jhlabs.image.CellularFilter$Point: float distance>;

        $b10 = f106 cmpg $f11;

        $i24 = (int) $b10;

        if $i24 >= 0 goto label27;

        r17 = r2[2];

        $r6 = r2[1];

        r2[2] = $r6;

        r2[1] = r17;

        r17.<com.jhlabs.image.CellularFilter$Point: float distance> = f106;

        r17.<com.jhlabs.image.CellularFilter$Point: float dx> = $f103;

        r17.<com.jhlabs.image.CellularFilter$Point: float dy> = $f104;

        $f17 = (float) i0;

        $f18 = $f17 + f94;

        r17.<com.jhlabs.image.CellularFilter$Point: float x> = $f18;

        $f19 = (float) i1;

        $f20 = $f19 + f95;

        r17.<com.jhlabs.image.CellularFilter$Point: float y> = $f20;

        goto label28;

     label27:
        $r5 = r2[2];

        $f12 = $r5.<com.jhlabs.image.CellularFilter$Point: float distance>;

        $b11 = f106 cmpg $f12;

        $i25 = (int) $b11;

        if $i25 >= 0 goto label28;

        r18 = r2[2];

        r18.<com.jhlabs.image.CellularFilter$Point: float distance> = f106;

        r18.<com.jhlabs.image.CellularFilter$Point: float dx> = $f103;

        r18.<com.jhlabs.image.CellularFilter$Point: float dy> = $f104;

        $f13 = (float) i0;

        $f14 = $f13 + f94;

        r18.<com.jhlabs.image.CellularFilter$Point: float x> = $f14;

        $f15 = (float) i1;

        $f16 = $f15 + f95;

        r18.<com.jhlabs.image.CellularFilter$Point: float y> = $f16;

     label28:
        i18 = i18 + 1;

        goto label07;

     label29:
        $r3 = r2[2];

        $f0 = $r3.<com.jhlabs.image.CellularFilter$Point: float distance>;

        return $f0;
    }

    public float evaluate(float, float)
    {
        byte $b2, $b3, $b4, $b5, $b6, $b8, $b9, $b15, $b16, $b25, $b27;
        float[] $r11;
        com.jhlabs.image.CellularFilter$Point $r4, $r6, $r8, $r10, $r13, $r23;
        com.jhlabs.image.CellularFilter r0;
        float f0, f1, $f2, f3, $f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, f39, $f40, f41, f42, f43, $f44, f45;
        int $i0, i1, $i7, $i10, $i11, $i12, $i13, $i14, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i26, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36;
        com.jhlabs.image.CellularFilter$Point[] $r1, $r2, $r3, $r5, $r7, $r9, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        double $d0, $d1, $d2;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i23 = 0;

     label01:
        $r1 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $i0 = lengthof $r1;

        if i23 >= $i0 goto label02;

        $r22 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r23 = $r22[i23];

        $r23.<com.jhlabs.image.CellularFilter$Point: float distance> = #InfinityF;

        i23 = i23 + 1;

        goto label01;

     label02:
        i24 = (int) f0;

        i1 = (int) f1;

        $f2 = (float) i24;

        f3 = f0 - $f2;

        $f4 = (float) i1;

        f5 = f1 - $f4;

        $r2 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $f6 = specialinvoke r0.<com.jhlabs.image.CellularFilter: float checkCube(float,float,int,int,com.jhlabs.image.CellularFilter$Point[])>(f3, f5, i24, i1, $r2);

        f39 = $f6;

        $b2 = $f6 cmpl f5;

        $i28 = (int) $b2;

        if $i28 <= 0 goto label03;

        $f38 = f5 + 1.0F;

        $i22 = i1 - 1;

        $r21 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        f39 = specialinvoke r0.<com.jhlabs.image.CellularFilter: float checkCube(float,float,int,int,com.jhlabs.image.CellularFilter$Point[])>(f3, $f38, i24, $i22, $r21);

     label03:
        $f7 = 1.0F - f5;

        $b3 = f39 cmpl $f7;

        $i29 = (int) $b3;

        if $i29 <= 0 goto label04;

        $f37 = f5 - 1.0F;

        $i21 = i1 + 1;

        $r20 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        f39 = specialinvoke r0.<com.jhlabs.image.CellularFilter: float checkCube(float,float,int,int,com.jhlabs.image.CellularFilter$Point[])>(f3, $f37, i24, $i21, $r20);

     label04:
        $b4 = f39 cmpl f3;

        $i30 = (int) $b4;

        if $i30 <= 0 goto label06;

        $f31 = f3 + 1.0F;

        $i14 = i24 - 1;

        $r17 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        specialinvoke r0.<com.jhlabs.image.CellularFilter: float checkCube(float,float,int,int,com.jhlabs.image.CellularFilter$Point[])>($f31, f5, $i14, i1, $r17);

        $b15 = f39 cmpl f5;

        $i31 = (int) $b15;

        if $i31 <= 0 goto label05;

        $f36 = f3 + 1.0F;

        $f35 = f5 + 1.0F;

        $i20 = i24 - 1;

        $i19 = i1 - 1;

        $r19 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        f39 = specialinvoke r0.<com.jhlabs.image.CellularFilter: float checkCube(float,float,int,int,com.jhlabs.image.CellularFilter$Point[])>($f36, $f35, $i20, $i19, $r19);

     label05:
        $f32 = 1.0F - f5;

        $b16 = f39 cmpl $f32;

        $i32 = (int) $b16;

        if $i32 <= 0 goto label06;

        $f34 = f3 + 1.0F;

        $f33 = f5 - 1.0F;

        $i18 = i24 - 1;

        $i17 = i1 + 1;

        $r18 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        f39 = specialinvoke r0.<com.jhlabs.image.CellularFilter: float checkCube(float,float,int,int,com.jhlabs.image.CellularFilter$Point[])>($f34, $f33, $i18, $i17, $r18);

     label06:
        $f40 = 1.0F - f3;

        $b25 = f39 cmpl $f40;

        $i33 = (int) $b25;

        if $i33 <= 0 goto label08;

        $f24 = f3 - 1.0F;

        $i7 = i24 + 1;

        $r14 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $f25 = specialinvoke r0.<com.jhlabs.image.CellularFilter: float checkCube(float,float,int,int,com.jhlabs.image.CellularFilter$Point[])>($f24, f5, $i7, i1, $r14);

        f41 = $f25;

        $b8 = $f25 cmpl f5;

        $i34 = (int) $b8;

        if $i34 <= 0 goto label07;

        $f30 = f3 - 1.0F;

        $f29 = f5 + 1.0F;

        $i13 = i24 + 1;

        $i12 = i1 - 1;

        $r16 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        f41 = specialinvoke r0.<com.jhlabs.image.CellularFilter: float checkCube(float,float,int,int,com.jhlabs.image.CellularFilter$Point[])>($f30, $f29, $i13, $i12, $r16);

     label07:
        $f26 = 1.0F - f5;

        $b9 = f41 cmpl $f26;

        $i35 = (int) $b9;

        if $i35 <= 0 goto label08;

        $f28 = f3 - 1.0F;

        $f27 = f5 - 1.0F;

        $i11 = i24 + 1;

        $i10 = i1 + 1;

        $r15 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        specialinvoke r0.<com.jhlabs.image.CellularFilter: float checkCube(float,float,int,int,com.jhlabs.image.CellularFilter$Point[])>($f28, $f27, $i11, $i10, $r15);

     label08:
        f42 = 0.0F;

        i26 = 0;

     label09:
        if i26 >= 3 goto label10;

        $r11 = r0.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $f22 = $r11[i26];

        $r12 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r13 = $r12[i26];

        $f21 = $r13.<com.jhlabs.image.CellularFilter$Point: float distance>;

        $f23 = $f22 * $f21;

        f42 = f42 + $f23;

        i26 = i26 + 1;

        goto label09;

     label10:
        $f8 = r0.<com.jhlabs.image.CellularFilter: float angleCoefficient>;

        $b5 = $f8 cmpl 0.0F;

        if $b5 == 0 goto label12;

        $r7 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r8 = $r7[0];

        $f14 = $r8.<com.jhlabs.image.CellularFilter$Point: float y>;

        $f15 = f1 - $f14;

        $d1 = (double) $f15;

        $r9 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r10 = $r9[0];

        $f16 = $r10.<com.jhlabs.image.CellularFilter$Point: float x>;

        $f17 = f0 - $f16;

        $d0 = (double) $f17;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d1, $d0);

        f43 = (float) $d2;

        $b6 = f43 cmpg 0.0F;

        $i36 = (int) $b6;

        if $i36 >= 0 goto label11;

        f43 = f43 + 6.2831855F;

     label11:
        $f20 = f43 / 12.566371F;

        $f18 = r0.<com.jhlabs.image.CellularFilter: float angleCoefficient>;

        $f19 = $f18 * $f20;

        f42 = f42 + $f19;

     label12:
        $f44 = r0.<com.jhlabs.image.CellularFilter: float gradientCoefficient>;

        $b27 = $f44 cmpl 0.0F;

        if $b27 == 0 goto label13;

        $r3 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r4 = $r3[0];

        $f10 = $r4.<com.jhlabs.image.CellularFilter$Point: float dy>;

        $r5 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r6 = $r5[0];

        $f9 = $r6.<com.jhlabs.image.CellularFilter$Point: float dx>;

        $f11 = $f10 + $f9;

        f45 = 1.0F / $f11;

        $f12 = r0.<com.jhlabs.image.CellularFilter: float gradientCoefficient>;

        $f13 = $f12 * f45;

        f42 = f42 + $f13;

     label13:
        return f42;
    }

    public float turbulence2(float, float, float)
    {
        com.jhlabs.image.CellularFilter r0;
        byte $b0;
        int $i1;
        float f0, f1, f2, $f3, $f4, $f5, $f6, f7, f8;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f1 := @parameter0: float;

        f2 := @parameter1: float;

        f0 := @parameter2: float;

        f7 = 0.0F;

        f8 = 1.0F;

     label1:
        $b0 = f8 cmpg f0;

        $i1 = (int) $b0;

        if $i1 > 0 goto label2;

        $f4 = f8 * f1;

        $f3 = f8 * f2;

        $f5 = virtualinvoke r0.<com.jhlabs.image.CellularFilter: float evaluate(float,float)>($f4, $f3);

        $f6 = $f5 / f8;

        f7 = f7 + $f6;

        f8 = f8 * 2.0F;

        goto label1;

     label2:
        return f7;
    }

    public int getPixel(int, int, int[], int, int)
    {
        byte $b2;
        java.lang.Exception $r18;
        float[] $r16, $r17;
        com.jhlabs.image.CellularFilter$Point $r4, $r6, $r9, $r11, $r13, $r15;
        com.jhlabs.image.Colormap $r1, $r2;
        int[] r7;
        boolean $z0;
        com.jhlabs.image.CellularFilter r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, f39, f40, f41, f42, f43, f44, $f45, f46;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i21;
        com.jhlabs.image.CellularFilter$Point[] $r3, $r5, $r8, $r10, $r12, $r14;

        r0 := @this: com.jhlabs.image.CellularFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r7 := @parameter2: int[];

        i8 := @parameter3: int;

        i12 := @parameter4: int;

     label1:
        $f1 = r0.<com.jhlabs.image.CellularFilter: float m00>;

        $f0 = (float) i0;

        $f5 = $f1 * $f0;

        $f3 = r0.<com.jhlabs.image.CellularFilter: float m01>;

        $f2 = (float) i1;

        $f4 = $f3 * $f2;

        f39 = $f5 + $f4;

        $f7 = r0.<com.jhlabs.image.CellularFilter: float m10>;

        $f6 = (float) i0;

        $f11 = $f7 * $f6;

        $f9 = r0.<com.jhlabs.image.CellularFilter: float m11>;

        $f8 = (float) i1;

        $f10 = $f9 * $f8;

        f40 = $f11 + $f10;

        $f12 = r0.<com.jhlabs.image.CellularFilter: float scale>;

        f41 = f39 / $f12;

        $f14 = r0.<com.jhlabs.image.CellularFilter: float scale>;

        $f13 = r0.<com.jhlabs.image.CellularFilter: float stretch>;

        $f15 = $f14 * $f13;

        f42 = f40 / $f15;

        f43 = f41 + 1000.0F;

        f44 = f42 + 1000.0F;

        $f16 = r0.<com.jhlabs.image.CellularFilter: float turbulence>;

        $b2 = $f16 cmpl 1.0F;

        if $b2 != 0 goto label2;

        $f45 = virtualinvoke r0.<com.jhlabs.image.CellularFilter: float evaluate(float,float)>(f43, f44);

        goto label3;

     label2:
        $f17 = r0.<com.jhlabs.image.CellularFilter: float turbulence>;

        $f45 = virtualinvoke r0.<com.jhlabs.image.CellularFilter: float turbulence2(float,float,float)>(f43, f44, $f17);

     label3:
        $f37 = $f45 * 2.0F;

        $f18 = r0.<com.jhlabs.image.CellularFilter: float amount>;

        $f38 = $f37 * $f18;

        $r1 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.Colormap colormap>;

        if $r1 == null goto label5;

        $r2 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.Colormap colormap>;

        i18 = interfaceinvoke $r2.<com.jhlabs.image.Colormap: int getColor(float)>($f38);

        $z0 = r0.<com.jhlabs.image.CellularFilter: boolean useColor>;

        if $z0 == 0 goto label4;

        $r3 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r4 = $r3[0];

        $f20 = $r4.<com.jhlabs.image.CellularFilter$Point: float x>;

        $f22 = $f20 - 1000.0F;

        $f21 = r0.<com.jhlabs.image.CellularFilter: float scale>;

        $f23 = $f22 * $f21;

        $i10 = (int) $f23;

        $i9 = i8 - 1;

        $i11 = staticinvoke <com.jhlabs.image.ImageMath: int clamp(int,int,int)>($i10, 0, $i9);

        $r5 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r6 = $r5[0];

        $f24 = $r6.<com.jhlabs.image.CellularFilter$Point: float y>;

        $f26 = $f24 - 1000.0F;

        $f25 = r0.<com.jhlabs.image.CellularFilter: float scale>;

        $f27 = $f26 * $f25;

        $i14 = (int) $f27;

        $i13 = i12 - 1;

        $i15 = staticinvoke <com.jhlabs.image.ImageMath: int clamp(int,int,int)>($i14, 0, $i13);

        $i16 = $i15 * i8;

        $i17 = $i16 + $i11;

        i19 = r7[$i17];

        $r8 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r9 = $r8[1];

        $f29 = $r9.<com.jhlabs.image.CellularFilter$Point: float distance>;

        $r10 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r11 = $r10[0];

        $f28 = $r11.<com.jhlabs.image.CellularFilter$Point: float distance>;

        $f33 = $f29 - $f28;

        $r12 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r13 = $r12[1];

        $f31 = $r13.<com.jhlabs.image.CellularFilter$Point: float distance>;

        $r14 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r15 = $r14[0];

        $f30 = $r15.<com.jhlabs.image.CellularFilter$Point: float distance>;

        $f32 = $f31 + $f30;

        f46 = $f33 / $f32;

        $r16 = r0.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $f35 = $r16[1];

        $r17 = r0.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $f34 = $r17[0];

        $f36 = staticinvoke <com.jhlabs.image.ImageMath: float smoothStep(float,float,float)>($f35, $f34, f46);

        i18 = staticinvoke <com.jhlabs.image.ImageMath: int mixColors(float,int,int)>($f36, -16777216, i19);

     label4:
        return i18;

     label5:
        $f19 = $f38 * 255.0F;

        $i3 = (int) $f19;

        $i4 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i3);

        i20 = $i4 << 16;

        i21 = $i4 << 8;

        $i5 = -16777216 | i20;

        $i6 = $i5 | i21;

        $i7 = $i6 | $i4;

     label6:
        return $i7;

     label7:
        $r18 := @caughtexception;

        virtualinvoke $r18.<java.lang.Throwable: void printStackTrace()>();

        return 0;

        catch java.lang.Exception from label1 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    protected int[] filterPixels(int, int, int[], java.awt.Rectangle)
    {
        java.awt.Rectangle r3;
        com.jhlabs.image.CellularFilter r1;
        int[] r0, r2;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7;

        r1 := @this: com.jhlabs.image.CellularFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: int[];

        r3 := @parameter3: java.awt.Rectangle;

        i5 = 0;

        $i2 = i0 * i1;

        r0 = newarray (int)[$i2];

        i6 = 0;

     label1:
        if i6 >= i1 goto label4;

        i7 = 0;

     label2:
        if i7 >= i0 goto label3;

        $i3 = i5;

        i5 = i5 + 1;

        $i4 = virtualinvoke r1.<com.jhlabs.image.CellularFilter: int getPixel(int,int,int[],int,int)>(i7, i6, r2, i0, i1);

        r0[$i3] = $i4;

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        return r0;
    }

    public void mutate(float, java.awt.image.BufferedImageOp, boolean, boolean)
    {
        com.jhlabs.image.Gradient $r9, $r10;
        byte $b4, $b5, $b6, $b7, $b9;
        long $l0, $l2;
        float[] $r11, $r14, $r15;
        com.jhlabs.image.Colormap $r4, $r5, $r8;
        java.util.Random $r3, $r6, $r7, $r12, $r13;
        boolean z0, z1;
        com.jhlabs.image.CellularFilter r1, r2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31;
        java.awt.image.BufferedImageOp r0;
        int $i1, $i3, $i8, $i10, $i11, i12, i13, $i14, $i15, $i16;
        double $d0, $d1, $d2;

        r2 := @this: com.jhlabs.image.CellularFilter;

        f8 := @parameter0: float;

        r0 := @parameter1: java.awt.image.BufferedImageOp;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r1 = (com.jhlabs.image.CellularFilter) r0;

        $r3 = r2.<com.jhlabs.image.CellularFilter: java.util.Random random>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i1 = (int) $l0;

        $l2 = (long) $i1;

        virtualinvoke $r3.<java.util.Random: void setSeed(long)>($l2);

        if z0 != 0 goto label01;

        $f12 = r2.<com.jhlabs.image.CellularFilter: float amount>;

        $b7 = $f12 cmpl 0.0F;

        if $b7 != 0 goto label04;

     label01:
        $i3 = virtualinvoke r2.<com.jhlabs.image.CellularFilter: int getGridType()>();

        virtualinvoke r1.<com.jhlabs.image.CellularFilter: void setGridType(int)>($i3);

        $f0 = virtualinvoke r2.<com.jhlabs.image.CellularFilter: float getRandomness()>();

        virtualinvoke r1.<com.jhlabs.image.CellularFilter: void setRandomness(float)>($f0);

        $f1 = virtualinvoke r2.<com.jhlabs.image.CellularFilter: float getScale()>();

        virtualinvoke r1.<com.jhlabs.image.CellularFilter: void setScale(float)>($f1);

        $f2 = virtualinvoke r2.<com.jhlabs.image.CellularFilter: float getAngle()>();

        virtualinvoke r1.<com.jhlabs.image.CellularFilter: void setAngle(float)>($f2);

        $f3 = virtualinvoke r2.<com.jhlabs.image.CellularFilter: float getStretch()>();

        virtualinvoke r1.<com.jhlabs.image.CellularFilter: void setStretch(float)>($f3);

        $f4 = virtualinvoke r2.<com.jhlabs.image.CellularFilter: float getAmount()>();

        virtualinvoke r1.<com.jhlabs.image.CellularFilter: void setAmount(float)>($f4);

        $f5 = virtualinvoke r2.<com.jhlabs.image.CellularFilter: float getTurbulence()>();

        virtualinvoke r1.<com.jhlabs.image.CellularFilter: void setTurbulence(float)>($f5);

        $r4 = virtualinvoke r2.<com.jhlabs.image.CellularFilter: com.jhlabs.image.Colormap getColormap()>();

        virtualinvoke r1.<com.jhlabs.image.CellularFilter: void setColormap(com.jhlabs.image.Colormap)>($r4);

        $f6 = virtualinvoke r2.<com.jhlabs.image.CellularFilter: float getDistancePower()>();

        virtualinvoke r1.<com.jhlabs.image.CellularFilter: void setDistancePower(float)>($f6);

        $f7 = virtualinvoke r2.<com.jhlabs.image.CellularFilter: float getAngleCoefficient()>();

        virtualinvoke r1.<com.jhlabs.image.CellularFilter: void setAngleCoefficient(float)>($f7);

        i12 = 0;

     label02:
        if i12 >= 4 goto label03;

        $f11 = virtualinvoke r2.<com.jhlabs.image.CellularFilter: float getCoefficient(int)>(i12);

        virtualinvoke r1.<com.jhlabs.image.CellularFilter: void setCoefficient(int,float)>(i12, $f11);

        i12 = i12 + 1;

        goto label02;

     label03:
        goto label08;

     label04:
        $f13 = r2.<com.jhlabs.image.CellularFilter: float scale>;

        $f14 = specialinvoke r2.<com.jhlabs.image.CellularFilter: float mutate(float,float,float,float,float,float)>($f13, f8, 0.4F, 5.0F, 3.0F, 200.0F);

        r1.<com.jhlabs.image.CellularFilter: float scale> = $f14;

        $f15 = r2.<com.jhlabs.image.CellularFilter: float angle>;

        $f16 = specialinvoke r2.<com.jhlabs.image.CellularFilter: float mutate(float,float,float,float)>($f15, f8, 0.3F, 1.5707964F);

        virtualinvoke r1.<com.jhlabs.image.CellularFilter: void setAngle(float)>($f16);

        $f17 = r2.<com.jhlabs.image.CellularFilter: float stretch>;

        $f18 = specialinvoke r2.<com.jhlabs.image.CellularFilter: float mutate(float,float,float,float,float,float)>($f17, f8, 0.3F, 3.0F, 1.0F, 10.0F);

        r1.<com.jhlabs.image.CellularFilter: float stretch> = $f18;

        $f19 = r2.<com.jhlabs.image.CellularFilter: float amount>;

        $f20 = specialinvoke r2.<com.jhlabs.image.CellularFilter: float mutate(float,float,float,float,float,float)>($f19, f8, 0.3F, 0.2F, 0.0F, 1.0F);

        r1.<com.jhlabs.image.CellularFilter: float amount> = $f20;

        $f21 = r2.<com.jhlabs.image.CellularFilter: float turbulence>;

        $f22 = specialinvoke r2.<com.jhlabs.image.CellularFilter: float mutate(float,float,float,float,float,float)>($f21, f8, 0.3F, 0.5F, 1.0F, 8.0F);

        r1.<com.jhlabs.image.CellularFilter: float turbulence> = $f22;

        $f23 = r2.<com.jhlabs.image.CellularFilter: float distancePower>;

        $f24 = specialinvoke r2.<com.jhlabs.image.CellularFilter: float mutate(float,float,float,float,float,float)>($f23, f8, 0.2F, 0.5F, 1.0F, 3.0F);

        r1.<com.jhlabs.image.CellularFilter: float distancePower> = $f24;

        $f25 = r2.<com.jhlabs.image.CellularFilter: float randomness>;

        $f26 = specialinvoke r2.<com.jhlabs.image.CellularFilter: float mutate(float,float,float,float,float,float)>($f25, f8, 0.4F, 0.2F, 0.0F, 1.0F);

        r1.<com.jhlabs.image.CellularFilter: float randomness> = $f26;

        i13 = 0;

     label05:
        $r11 = r2.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $i8 = lengthof $r11;

        if i13 >= $i8 goto label06;

        $r15 = r1.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $r14 = r2.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $f30 = $r14[i13];

        $f31 = specialinvoke r2.<com.jhlabs.image.CellularFilter: float mutate(float,float,float,float,float,float)>($f30, f8, 0.3F, 0.2F, -1.0F, 1.0F);

        $r15[i13] = $f31;

        i13 = i13 + 1;

        goto label05;

     label06:
        $r12 = r2.<com.jhlabs.image.CellularFilter: java.util.Random random>;

        $f27 = virtualinvoke $r12.<java.util.Random: float nextFloat()>();

        $d2 = (double) $f27;

        $d0 = (double) f8;

        $d1 = $d0 * 0.2;

        $b9 = $d2 cmpg $d1;

        $i14 = (int) $b9;

        if $i14 > 0 goto label07;

        $r13 = r2.<com.jhlabs.image.CellularFilter: java.util.Random random>;

        $i10 = virtualinvoke $r13.<java.util.Random: int nextInt()>();

        $i11 = $i10 % 5;

        r1.<com.jhlabs.image.CellularFilter: int gridType> = $i11;

     label07:
        $f28 = r2.<com.jhlabs.image.CellularFilter: float angleCoefficient>;

        $f29 = specialinvoke r2.<com.jhlabs.image.CellularFilter: float mutate(float,float,float,float,float,float)>($f28, f8, 0.2F, 0.5F, -1.0F, 1.0F);

        r1.<com.jhlabs.image.CellularFilter: float angleCoefficient> = $f29;

     label08:
        if z1 != 0 goto label09;

        $b4 = f8 cmpl 0.0F;

        if $b4 != 0 goto label10;

     label09:
        $r5 = virtualinvoke r2.<com.jhlabs.image.CellularFilter: com.jhlabs.image.Colormap getColormap()>();

        virtualinvoke r1.<com.jhlabs.image.CellularFilter: void setColormap(com.jhlabs.image.Colormap)>($r5);

        goto label12;

     label10:
        $r6 = r2.<com.jhlabs.image.CellularFilter: java.util.Random random>;

        $f9 = virtualinvoke $r6.<java.util.Random: float nextFloat()>();

        $b5 = $f9 cmpg f8;

        $i15 = (int) $b5;

        if $i15 > 0 goto label12;

        $r7 = r2.<com.jhlabs.image.CellularFilter: java.util.Random random>;

        $f10 = virtualinvoke $r7.<java.util.Random: float nextFloat()>();

        $b6 = $f10 cmpg f8;

        $i16 = (int) $b6;

        if $i16 > 0 goto label11;

        $r10 = staticinvoke <com.jhlabs.image.Gradient: com.jhlabs.image.Gradient randomGradient()>();

        virtualinvoke r1.<com.jhlabs.image.CellularFilter: void setColormap(com.jhlabs.image.Colormap)>($r10);

        goto label12;

     label11:
        $r8 = virtualinvoke r1.<com.jhlabs.image.CellularFilter: com.jhlabs.image.Colormap getColormap()>();

        $r9 = (com.jhlabs.image.Gradient) $r8;

        virtualinvoke $r9.<com.jhlabs.image.Gradient: void mutate(float)>(f8);

     label12:
        return;
    }

    private float mutate(float, float, float, float, float, float)
    {
        java.util.Random $r1, $r2;
        byte $b0;
        int $i1;
        double $d0;
        com.jhlabs.image.CellularFilter r0;
        float $f0, f1, f2, $f3, f4, f5, $f6, $f7, $f8, f9, f10, $f11, $f12;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f4 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f5 := @parameter3: float;

        f9 := @parameter4: float;

        f10 := @parameter5: float;

        $r1 = r0.<com.jhlabs.image.CellularFilter: java.util.Random random>;

        $f0 = virtualinvoke $r1.<java.util.Random: float nextFloat()>();

        $f3 = f1 * f2;

        $b0 = $f0 cmpg $f3;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        return f4;

     label1:
        $f6 = f1 * f5;

        $r2 = r0.<com.jhlabs.image.CellularFilter: java.util.Random random>;

        $d0 = virtualinvoke $r2.<java.util.Random: double nextGaussian()>();

        $f7 = (float) $d0;

        $f8 = $f6 * $f7;

        $f11 = f4 + $f8;

        $f12 = staticinvoke <com.jhlabs.image.ImageMath: float clamp(float,float,float)>($f11, f9, f10);

        return $f12;
    }

    private float mutate(float, float, float, float)
    {
        java.util.Random $r1, $r2;
        byte $b0;
        int $i1;
        double $d0;
        com.jhlabs.image.CellularFilter r0;
        float $f0, f1, f2, $f3, f4, f5, $f6, $f7, $f8, $f9;

        r0 := @this: com.jhlabs.image.CellularFilter;

        f4 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f5 := @parameter3: float;

        $r1 = r0.<com.jhlabs.image.CellularFilter: java.util.Random random>;

        $f0 = virtualinvoke $r1.<java.util.Random: float nextFloat()>();

        $f3 = f1 * f2;

        $b0 = $f0 cmpg $f3;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        return f4;

     label1:
        $f6 = f1 * f5;

        $r2 = r0.<com.jhlabs.image.CellularFilter: java.util.Random random>;

        $d0 = virtualinvoke $r2.<java.util.Random: double nextGaussian()>();

        $f7 = (float) $d0;

        $f8 = $f6 * $f7;

        $f9 = f4 + $f8;

        return $f9;
    }

    public java.lang.Object clone()
    {
        com.jhlabs.image.CellularFilter r0, r2;
        float[] $r3, $r5, $r6;
        java.util.Random $r11;
        java.lang.Object $r1, $r4, $r8;
        com.jhlabs.image.CellularFilter$Point[] $r7, $r9, $r10;

        r0 := @this: com.jhlabs.image.CellularFilter;

        $r1 = specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: java.lang.Object clone()>();

        r2 = (com.jhlabs.image.CellularFilter) $r1;

        $r3 = r0.<com.jhlabs.image.CellularFilter: float[] coefficients>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (float[]) $r4;

        $r6 = (float[]) $r5;

        r2.<com.jhlabs.image.CellularFilter: float[] coefficients> = $r6;

        $r7 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>();

        $r9 = (com.jhlabs.image.CellularFilter$Point[]) $r8;

        $r10 = (com.jhlabs.image.CellularFilter$Point[]) $r9;

        r2.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results> = $r10;

        $r11 = new java.util.Random;

        specialinvoke $r11.<java.util.Random: void <init>()>();

        r2.<com.jhlabs.image.CellularFilter: java.util.Random random> = $r11;

        return r2;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.CellularFilter r0;

        r0 := @this: com.jhlabs.image.CellularFilter;

        return "Texture/Cellular...";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.CellularFilter: int TRIANGULAR> = 4;

        <com.jhlabs.image.CellularFilter: int OCTAGONAL> = 3;

        <com.jhlabs.image.CellularFilter: int HEXAGONAL> = 2;

        <com.jhlabs.image.CellularFilter: int SQUARE> = 1;

        <com.jhlabs.image.CellularFilter: int RANDOM> = 0;

        return;
    }
}
