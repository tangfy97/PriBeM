public class groovy.mock.interceptor.MockProxyMetaClass extends groovy.lang.ProxyMetaClass
{

    public void <init>(groovy.lang.MetaClassRegistry, java.lang.Class, groovy.lang.MetaClass) throws java.beans.IntrospectionException
    {
        groovy.lang.MetaClass r3;
        groovy.lang.MetaClassRegistry r1;
        java.lang.Class r2;
        groovy.mock.interceptor.MockProxyMetaClass r0;

        r0 := @this: groovy.mock.interceptor.MockProxyMetaClass;

        r1 := @parameter0: groovy.lang.MetaClassRegistry;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: groovy.lang.MetaClass;

        specialinvoke r0.<groovy.lang.ProxyMetaClass: void <init>(groovy.lang.MetaClassRegistry,java.lang.Class,groovy.lang.MetaClass)>(r1, r2, r3);

        return;
    }

    public static groovy.mock.interceptor.MockProxyMetaClass make(java.lang.Class) throws java.beans.IntrospectionException
    {
        groovy.lang.MetaClass $r2;
        groovy.lang.MetaClassRegistry $r0;
        java.lang.Class r1;
        groovy.mock.interceptor.MockProxyMetaClass $r3;

        r1 := @parameter0: java.lang.Class;

        $r0 = staticinvoke <groovy.lang.GroovySystem: groovy.lang.MetaClassRegistry getMetaClassRegistry()>();

        $r2 = interfaceinvoke $r0.<groovy.lang.MetaClassRegistry: groovy.lang.MetaClass getMetaClass(java.lang.Class)>(r1);

        $r3 = new groovy.mock.interceptor.MockProxyMetaClass;

        specialinvoke $r3.<groovy.mock.interceptor.MockProxyMetaClass: void <init>(groovy.lang.MetaClassRegistry,java.lang.Class,groovy.lang.MetaClass)>($r0, r1, $r2);

        return $r3;
    }

    public java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r4;
        java.lang.RuntimeException $r7;
        groovy.mock.interceptor.MockProxyMetaClass r0;
        java.lang.Object r2, $r6;
        java.lang.String r3;
        groovy.lang.Interceptor $r1, $r5;

        r0 := @this: groovy.mock.interceptor.MockProxyMetaClass;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Object[];

        $r1 = r0.<groovy.mock.interceptor.MockProxyMetaClass: groovy.lang.Interceptor interceptor>;

        if null != $r1 goto label1;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("cannot invoke without interceptor");

        throw $r7;

     label1:
        $r5 = r0.<groovy.mock.interceptor.MockProxyMetaClass: groovy.lang.Interceptor interceptor>;

        $r6 = interfaceinvoke $r5.<groovy.lang.Interceptor: java.lang.Object beforeInvoke(java.lang.Object,java.lang.String,java.lang.Object[])>(r2, r3, r4);

        return $r6;
    }

    public java.lang.Object invokeStaticMethod(java.lang.Object, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r4;
        java.lang.RuntimeException $r7;
        groovy.mock.interceptor.MockProxyMetaClass r0;
        java.lang.Object r2, $r6;
        java.lang.String r3;
        groovy.lang.Interceptor $r1, $r5;

        r0 := @this: groovy.mock.interceptor.MockProxyMetaClass;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Object[];

        $r1 = r0.<groovy.mock.interceptor.MockProxyMetaClass: groovy.lang.Interceptor interceptor>;

        if null != $r1 goto label1;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("cannot invoke without interceptor");

        throw $r7;

     label1:
        $r5 = r0.<groovy.mock.interceptor.MockProxyMetaClass: groovy.lang.Interceptor interceptor>;

        $r6 = interfaceinvoke $r5.<groovy.lang.Interceptor: java.lang.Object beforeInvoke(java.lang.Object,java.lang.String,java.lang.Object[])>(r2, r3, r4);

        return $r6;
    }

    public java.lang.Object getProperty(java.lang.Class, java.lang.Object, java.lang.String, boolean, boolean)
    {
        java.lang.RuntimeException $r10;
        groovy.mock.interceptor.MockProxyMetaClass r0;
        groovy.lang.PropertyAccessInterceptor $r8;
        java.lang.Class r3;
        java.lang.Object r4, $r6, $r9;
        java.lang.String r5;
        groovy.lang.Interceptor $r1, $r2, $r7;
        boolean $z0, z1, z2;

        r0 := @this: groovy.mock.interceptor.MockProxyMetaClass;

        r3 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.String;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        $r1 = r0.<groovy.mock.interceptor.MockProxyMetaClass: groovy.lang.Interceptor interceptor>;

        if null != $r1 goto label1;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("cannot invoke without interceptor");

        throw $r10;

     label1:
        $r2 = r0.<groovy.mock.interceptor.MockProxyMetaClass: groovy.lang.Interceptor interceptor>;

        $z0 = $r2 instanceof groovy.lang.PropertyAccessInterceptor;

        if $z0 == 0 goto label2;

        $r7 = r0.<groovy.mock.interceptor.MockProxyMetaClass: groovy.lang.Interceptor interceptor>;

        $r8 = (groovy.lang.PropertyAccessInterceptor) $r7;

        $r9 = interfaceinvoke $r8.<groovy.lang.PropertyAccessInterceptor: java.lang.Object beforeGet(java.lang.Object,java.lang.String)>(r4, r5);

        return $r9;

     label2:
        $r6 = specialinvoke r0.<groovy.lang.ProxyMetaClass: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String,boolean,boolean)>(r3, r4, r5, z1, z1);

        return $r6;
    }

    public void setProperty(java.lang.Class, java.lang.Object, java.lang.String, java.lang.Object, boolean, boolean)
    {
        java.lang.RuntimeException $r9;
        groovy.mock.interceptor.MockProxyMetaClass r0;
        groovy.lang.PropertyAccessInterceptor $r8;
        java.lang.Class r3;
        java.lang.Object r4, r6;
        java.lang.String r5;
        groovy.lang.Interceptor $r1, $r2, $r7;
        boolean $z0, z1, z2;

        r0 := @this: groovy.mock.interceptor.MockProxyMetaClass;

        r3 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.Object;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        $r1 = r0.<groovy.mock.interceptor.MockProxyMetaClass: groovy.lang.Interceptor interceptor>;

        if null != $r1 goto label1;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("cannot invoke without interceptor");

        throw $r9;

     label1:
        $r2 = r0.<groovy.mock.interceptor.MockProxyMetaClass: groovy.lang.Interceptor interceptor>;

        $z0 = $r2 instanceof groovy.lang.PropertyAccessInterceptor;

        if $z0 == 0 goto label2;

        $r7 = r0.<groovy.mock.interceptor.MockProxyMetaClass: groovy.lang.Interceptor interceptor>;

        $r8 = (groovy.lang.PropertyAccessInterceptor) $r7;

        interfaceinvoke $r8.<groovy.lang.PropertyAccessInterceptor: void beforeSet(java.lang.Object,java.lang.String,java.lang.Object)>(r4, r5, r6);

        goto label3;

     label2:
        specialinvoke r0.<groovy.lang.ProxyMetaClass: void setProperty(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object,boolean,boolean)>(r3, r4, r5, r6, z1, z1);

     label3:
        return;
    }

    public java.lang.Object invokeConstructor(java.lang.Object[])
    {
        groovy.lang.MetaClass $r2;
        java.lang.Object[] r1;
        java.lang.Object $r3;
        groovy.mock.interceptor.MockProxyMetaClass r0;

        r0 := @this: groovy.mock.interceptor.MockProxyMetaClass;

        r1 := @parameter0: java.lang.Object[];

        $r2 = r0.<groovy.mock.interceptor.MockProxyMetaClass: groovy.lang.MetaClass adaptee>;

        $r3 = interfaceinvoke $r2.<groovy.lang.MetaClass: java.lang.Object invokeConstructor(java.lang.Object[])>(r1);

        return $r3;
    }
}
