public class com.mongodb.Mongo extends java.lang.Object
{
    public static final int MAJOR_VERSION;
    public static final int MINOR_VERSION;
    final com.mongodb.ServerAddress _addr;
    final java.util.List _addrs;
    final com.mongodb.MongoOptions _options;
    final com.mongodb.DBTCPConnector _connector;
    final java.util.concurrent.ConcurrentMap _dbs;
    private com.mongodb.WriteConcern _concern;

    public static com.mongodb.DB connect(com.mongodb.DBAddress)
    {
        com.mongodb.Mongo $r0;
        com.mongodb.DBAddress r1;
        com.mongodb.DB $r3;
        java.lang.String $r2;

        r1 := @parameter0: com.mongodb.DBAddress;

        $r0 = new com.mongodb.Mongo;

        specialinvoke $r0.<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress)>(r1);

        $r2 = virtualinvoke r1.<com.mongodb.DBAddress: java.lang.String getDBName()>();

        $r3 = virtualinvoke $r0.<com.mongodb.Mongo: com.mongodb.DB getDB(java.lang.String)>($r2);

        return $r3;
    }

    public void <init>() throws java.net.UnknownHostException, com.mongodb.MongoException
    {
        com.mongodb.ServerAddress $r1;
        com.mongodb.Mongo r0;

        r0 := @this: com.mongodb.Mongo;

        $r1 = new com.mongodb.ServerAddress;

        specialinvoke $r1.<com.mongodb.ServerAddress: void <init>()>();

        specialinvoke r0.<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress)>($r1);

        return;
    }

    public void <init>(java.lang.String) throws java.net.UnknownHostException, com.mongodb.MongoException
    {
        com.mongodb.ServerAddress $r1;
        java.lang.String r2;
        com.mongodb.Mongo r0;

        r0 := @this: com.mongodb.Mongo;

        r2 := @parameter0: java.lang.String;

        $r1 = new com.mongodb.ServerAddress;

        specialinvoke $r1.<com.mongodb.ServerAddress: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress)>($r1);

        return;
    }

    public void <init>(java.lang.String, com.mongodb.MongoOptions) throws java.net.UnknownHostException, com.mongodb.MongoException
    {
        com.mongodb.ServerAddress $r1;
        com.mongodb.MongoOptions r3;
        com.mongodb.Mongo r0;
        java.lang.String r2;

        r0 := @this: com.mongodb.Mongo;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: com.mongodb.MongoOptions;

        $r1 = new com.mongodb.ServerAddress;

        specialinvoke $r1.<com.mongodb.ServerAddress: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>($r1, r3);

        return;
    }

    public void <init>(java.lang.String, int) throws java.net.UnknownHostException, com.mongodb.MongoException
    {
        com.mongodb.ServerAddress $r1;
        com.mongodb.Mongo r0;
        int i0;
        java.lang.String r2;

        r0 := @this: com.mongodb.Mongo;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = new com.mongodb.ServerAddress;

        specialinvoke $r1.<com.mongodb.ServerAddress: void <init>(java.lang.String,int)>(r2, i0);

        specialinvoke r0.<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress)>($r1);

        return;
    }

    public void <init>(com.mongodb.ServerAddress) throws com.mongodb.MongoException
    {
        com.mongodb.ServerAddress r1;
        com.mongodb.MongoOptions $r2;
        com.mongodb.Mongo r0;

        r0 := @this: com.mongodb.Mongo;

        r1 := @parameter0: com.mongodb.ServerAddress;

        $r2 = new com.mongodb.MongoOptions;

        specialinvoke $r2.<com.mongodb.MongoOptions: void <init>()>();

        specialinvoke r0.<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.MongoOptions)>(r1, $r2);

        return;
    }

    public void <init>(com.mongodb.ServerAddress, com.mongodb.MongoOptions) throws com.mongodb.MongoException
    {
        com.mongodb.ServerAddress r3, $r6;
        com.mongodb.MongoOptions r4;
        com.mongodb.Mongo r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        com.mongodb.DBTCPConnector $r5, $r7;
        com.mongodb.WriteConcern $r2;

        r0 := @this: com.mongodb.Mongo;

        r3 := @parameter0: com.mongodb.ServerAddress;

        r4 := @parameter1: com.mongodb.MongoOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.mongodb.Mongo: java.util.concurrent.ConcurrentMap _dbs> = $r1;

        $r2 = <com.mongodb.WriteConcern: com.mongodb.WriteConcern NORMAL>;

        r0.<com.mongodb.Mongo: com.mongodb.WriteConcern _concern> = $r2;

        r0.<com.mongodb.Mongo: com.mongodb.ServerAddress _addr> = r3;

        r0.<com.mongodb.Mongo: java.util.List _addrs> = null;

        r0.<com.mongodb.Mongo: com.mongodb.MongoOptions _options> = r4;

        $r5 = new com.mongodb.DBTCPConnector;

        $r6 = r0.<com.mongodb.Mongo: com.mongodb.ServerAddress _addr>;

        specialinvoke $r5.<com.mongodb.DBTCPConnector: void <init>(com.mongodb.Mongo,com.mongodb.ServerAddress)>(r0, $r6);

        r0.<com.mongodb.Mongo: com.mongodb.DBTCPConnector _connector> = $r5;

        $r7 = r0.<com.mongodb.Mongo: com.mongodb.DBTCPConnector _connector>;

        virtualinvoke $r7.<com.mongodb.DBTCPConnector: void _pickInitial()>();

        return;
    }

    public void <init>(com.mongodb.ServerAddress, com.mongodb.ServerAddress) throws com.mongodb.MongoException
    {
        com.mongodb.ServerAddress r1, r2;
        com.mongodb.MongoOptions $r3;
        com.mongodb.Mongo r0;

        r0 := @this: com.mongodb.Mongo;

        r1 := @parameter0: com.mongodb.ServerAddress;

        r2 := @parameter1: com.mongodb.ServerAddress;

        $r3 = new com.mongodb.MongoOptions;

        specialinvoke $r3.<com.mongodb.MongoOptions: void <init>()>();

        specialinvoke r0.<com.mongodb.Mongo: void <init>(com.mongodb.ServerAddress,com.mongodb.ServerAddress,com.mongodb.MongoOptions)>(r1, r2, $r3);

        return;
    }

    public void <init>(com.mongodb.ServerAddress, com.mongodb.ServerAddress, com.mongodb.MongoOptions) throws com.mongodb.MongoException
    {
        com.mongodb.ServerAddress r4, r5;
        com.mongodb.MongoOptions r7;
        com.mongodb.Mongo r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        com.mongodb.DBTCPConnector $r8, $r10;
        java.util.List $r6, $r9;
        com.mongodb.WriteConcern $r2;
        com.mongodb.ServerAddress[] $r3;

        r0 := @this: com.mongodb.Mongo;

        r4 := @parameter0: com.mongodb.ServerAddress;

        r5 := @parameter1: com.mongodb.ServerAddress;

        r7 := @parameter2: com.mongodb.MongoOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.mongodb.Mongo: java.util.concurrent.ConcurrentMap _dbs> = $r1;

        $r2 = <com.mongodb.WriteConcern: com.mongodb.WriteConcern NORMAL>;

        r0.<com.mongodb.Mongo: com.mongodb.WriteConcern _concern> = $r2;

        r0.<com.mongodb.Mongo: com.mongodb.ServerAddress _addr> = null;

        $r3 = newarray (com.mongodb.ServerAddress)[2];

        $r3[0] = r4;

        $r3[1] = r5;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        r0.<com.mongodb.Mongo: java.util.List _addrs> = $r6;

        r0.<com.mongodb.Mongo: com.mongodb.MongoOptions _options> = r7;

        $r8 = new com.mongodb.DBTCPConnector;

        $r9 = r0.<com.mongodb.Mongo: java.util.List _addrs>;

        specialinvoke $r8.<com.mongodb.DBTCPConnector: void <init>(com.mongodb.Mongo,java.util.List)>(r0, $r9);

        r0.<com.mongodb.Mongo: com.mongodb.DBTCPConnector _connector> = $r8;

        $r10 = r0.<com.mongodb.Mongo: com.mongodb.DBTCPConnector _connector>;

        virtualinvoke $r10.<com.mongodb.DBTCPConnector: void _pickInitial()>();

        return;
    }

    public void <init>(java.util.List) throws com.mongodb.MongoException
    {
        java.util.List r1;
        com.mongodb.MongoOptions $r2;
        com.mongodb.Mongo r0;

        r0 := @this: com.mongodb.Mongo;

        r1 := @parameter0: java.util.List;

        $r2 = new com.mongodb.MongoOptions;

        specialinvoke $r2.<com.mongodb.MongoOptions: void <init>()>();

        specialinvoke r0.<com.mongodb.Mongo: void <init>(java.util.List,com.mongodb.MongoOptions)>(r1, $r2);

        return;
    }

    public void <init>(java.util.List, com.mongodb.MongoOptions) throws com.mongodb.MongoException
    {
        com.mongodb.MongoOptions r4;
        com.mongodb.Mongo r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        com.mongodb.DBTCPConnector $r5, $r7;
        java.util.List r3, $r6;
        com.mongodb.WriteConcern $r2;

        r0 := @this: com.mongodb.Mongo;

        r3 := @parameter0: java.util.List;

        r4 := @parameter1: com.mongodb.MongoOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.mongodb.Mongo: java.util.concurrent.ConcurrentMap _dbs> = $r1;

        $r2 = <com.mongodb.WriteConcern: com.mongodb.WriteConcern NORMAL>;

        r0.<com.mongodb.Mongo: com.mongodb.WriteConcern _concern> = $r2;

        r0.<com.mongodb.Mongo: com.mongodb.ServerAddress _addr> = null;

        r0.<com.mongodb.Mongo: java.util.List _addrs> = r3;

        r0.<com.mongodb.Mongo: com.mongodb.MongoOptions _options> = r4;

        $r5 = new com.mongodb.DBTCPConnector;

        $r6 = r0.<com.mongodb.Mongo: java.util.List _addrs>;

        specialinvoke $r5.<com.mongodb.DBTCPConnector: void <init>(com.mongodb.Mongo,java.util.List)>(r0, $r6);

        r0.<com.mongodb.Mongo: com.mongodb.DBTCPConnector _connector> = $r5;

        $r7 = r0.<com.mongodb.Mongo: com.mongodb.DBTCPConnector _connector>;

        virtualinvoke $r7.<com.mongodb.DBTCPConnector: void _pickInitial()>();

        return;
    }

    public com.mongodb.DB getDB(java.lang.String)
    {
        com.mongodb.Mongo r0;
        com.mongodb.DBApiLayer $r4;
        com.mongodb.DBTCPConnector $r5;
        java.util.concurrent.ConcurrentMap $r2, $r6;
        java.lang.Object $r3, $r7;
        com.mongodb.DB r8, r9;
        java.lang.String r1;

        r0 := @this: com.mongodb.Mongo;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.mongodb.Mongo: java.util.concurrent.ConcurrentMap _dbs>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        r9 = (com.mongodb.DB) $r3;

        if r9 == null goto label1;

        return r9;

     label1:
        $r4 = new com.mongodb.DBApiLayer;

        $r5 = r0.<com.mongodb.Mongo: com.mongodb.DBTCPConnector _connector>;

        specialinvoke $r4.<com.mongodb.DBApiLayer: void <init>(com.mongodb.Mongo,java.lang.String,com.mongodb.DBConnector)>(r0, r1, $r5);

        $r6 = r0.<com.mongodb.Mongo: java.util.concurrent.ConcurrentMap _dbs>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r4);

        r8 = (com.mongodb.DB) $r7;

        if r8 == null goto label2;

        return r8;

     label2:
        return $r4;
    }

    public java.util.List getDatabaseNames() throws com.mongodb.MongoException
    {
        com.mongodb.CommandResult $r4;
        java.lang.Integer $r1;
        java.util.ArrayList $r7;
        int $i0;
        java.lang.String $r11, $r16;
        boolean $z0;
        java.util.Iterator $r8;
        com.mongodb.MongoException $r12;
        com.mongodb.Mongo r2;
        com.mongodb.BasicDBObject $r0, $r10;
        java.util.List r6;
        com.mongodb.DB $r3;
        java.lang.Object $r5, $r9;
        java.lang.StringBuilder $r13, $r14, $r15;

        r2 := @this: com.mongodb.Mongo;

        $r0 = new com.mongodb.BasicDBObject;

        specialinvoke $r0.<com.mongodb.BasicDBObject: void <init>()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r0.<com.mongodb.BasicDBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("listDatabases", $r1);

        $r3 = virtualinvoke r2.<com.mongodb.Mongo: com.mongodb.DB getDB(java.lang.String)>("admin");

        $r4 = virtualinvoke $r3.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r0);

        $i0 = virtualinvoke $r4.<com.mongodb.BasicDBObject: int getInt(java.lang.String,int)>("ok", 0);

        if $i0 == 1 goto label1;

        $r12 = new com.mongodb.MongoException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error listing databases : ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<com.mongodb.MongoException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label1:
        $r5 = virtualinvoke $r4.<com.mongodb.BasicDBObject: java.lang.Object get(java.lang.String)>("databases");

        r6 = (java.util.List) $r5;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (com.mongodb.BasicDBObject) $r9;

        $r11 = virtualinvoke $r10.<com.mongodb.BasicDBObject: java.lang.String getString(java.lang.String)>("name");

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label2;

     label3:
        return $r7;
    }

    public void dropDatabase(java.lang.String) throws com.mongodb.MongoException
    {
        com.mongodb.DB $r2;
        java.lang.String r1;
        com.mongodb.Mongo r0;

        r0 := @this: com.mongodb.Mongo;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.mongodb.Mongo: com.mongodb.DB getDB(java.lang.String)>(r1);

        virtualinvoke $r2.<com.mongodb.DB: void dropDatabase()>();

        return;
    }

    public java.lang.String getVersion()
    {
        com.mongodb.Mongo r0;

        r0 := @this: com.mongodb.Mongo;

        return "2.1";
    }

    public java.lang.String debugString()
    {
        java.lang.String $r2;
        com.mongodb.DBTCPConnector $r1;
        com.mongodb.Mongo r0;

        r0 := @this: com.mongodb.Mongo;

        $r1 = r0.<com.mongodb.Mongo: com.mongodb.DBTCPConnector _connector>;

        $r2 = virtualinvoke $r1.<com.mongodb.DBTCPConnector: java.lang.String debugString()>();

        return $r2;
    }

    public java.lang.String getConnectPoint()
    {
        java.lang.String $r2;
        com.mongodb.DBTCPConnector $r1;
        com.mongodb.Mongo r0;

        r0 := @this: com.mongodb.Mongo;

        $r1 = r0.<com.mongodb.Mongo: com.mongodb.DBTCPConnector _connector>;

        $r2 = virtualinvoke $r1.<com.mongodb.DBTCPConnector: java.lang.String getConnectPoint()>();

        return $r2;
    }

    public com.mongodb.ServerAddress getAddress()
    {
        com.mongodb.ServerAddress $r2;
        com.mongodb.DBTCPConnector $r1;
        com.mongodb.Mongo r0;

        r0 := @this: com.mongodb.Mongo;

        $r1 = r0.<com.mongodb.Mongo: com.mongodb.DBTCPConnector _connector>;

        $r2 = virtualinvoke $r1.<com.mongodb.DBTCPConnector: com.mongodb.ServerAddress getAddress()>();

        return $r2;
    }

    public java.util.List getAllAddress()
    {
        com.mongodb.ServerAddress $r4;
        java.util.List $r2, $r5;
        com.mongodb.Mongo r0;
        com.mongodb.DBTCPConnector $r1;
        com.mongodb.ServerAddress[] $r3;

        r0 := @this: com.mongodb.Mongo;

        $r1 = r0.<com.mongodb.Mongo: com.mongodb.DBTCPConnector _connector>;

        $r2 = virtualinvoke $r1.<com.mongodb.DBTCPConnector: java.util.List getAllAddress()>();

        if $r2 != null goto label1;

        $r3 = newarray (com.mongodb.ServerAddress)[1];

        $r4 = virtualinvoke r0.<com.mongodb.Mongo: com.mongodb.ServerAddress getAddress()>();

        $r3[0] = $r4;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        return $r5;

     label1:
        return $r2;
    }

    public void close()
    {
        com.mongodb.DBTCPConnector $r1;
        com.mongodb.Mongo r0;

        r0 := @this: com.mongodb.Mongo;

        $r1 = r0.<com.mongodb.Mongo: com.mongodb.DBTCPConnector _connector>;

        virtualinvoke $r1.<com.mongodb.DBTCPConnector: void close()>();

        return;
    }

    public void setWriteConcern(com.mongodb.WriteConcern)
    {
        com.mongodb.WriteConcern r1;
        com.mongodb.Mongo r0;

        r0 := @this: com.mongodb.Mongo;

        r1 := @parameter0: com.mongodb.WriteConcern;

        r0.<com.mongodb.Mongo: com.mongodb.WriteConcern _concern> = r1;

        return;
    }

    public com.mongodb.WriteConcern getWriteConcern()
    {
        com.mongodb.WriteConcern $r1;
        com.mongodb.Mongo r0;

        r0 := @this: com.mongodb.Mongo;

        $r1 = r0.<com.mongodb.Mongo: com.mongodb.WriteConcern _concern>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.mongodb.Mongo: int MINOR_VERSION> = 1;

        <com.mongodb.Mongo: int MAJOR_VERSION> = 2;

        return;
    }
}
