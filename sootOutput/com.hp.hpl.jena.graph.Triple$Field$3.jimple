final class com.hp.hpl.jena.graph.Triple$Field$3 extends com.hp.hpl.jena.graph.Triple$Field
{

    void <init>()
    {
        com.hp.hpl.jena.graph.Triple$Field$3 r0;

        r0 := @this: com.hp.hpl.jena.graph.Triple$Field$3;

        specialinvoke r0.<com.hp.hpl.jena.graph.Triple$Field: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.graph.Node getField(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.graph.Triple$Field$3 r2;
        com.hp.hpl.jena.graph.Triple r0;

        r2 := @this: com.hp.hpl.jena.graph.Triple$Field$3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node access$200(com.hp.hpl.jena.graph.Triple)>(r0);

        return $r1;
    }

    public com.hp.hpl.jena.util.iterator.Filter filterOn(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Triple$Field$3$1 $r3;
        com.hp.hpl.jena.graph.Triple$Field$3 r1;
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0;
        com.hp.hpl.jena.util.iterator.Filter $r2;

        r1 := @this: com.hp.hpl.jena.graph.Triple$Field$3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isConcrete()>();

        if $z0 == 0 goto label1;

        $r3 = new com.hp.hpl.jena.graph.Triple$Field$3$1;

        $r2 = $r3;

        specialinvoke $r3.<com.hp.hpl.jena.graph.Triple$Field$3$1: void <init>(com.hp.hpl.jena.graph.Triple$Field$3,com.hp.hpl.jena.graph.Node)>(r1, r0);

        goto label2;

     label1:
        $r2 = <com.hp.hpl.jena.graph.Triple$Field$3: com.hp.hpl.jena.util.iterator.Filter anyTriple>;

     label2:
        return $r2;
    }
}
