public class org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor extends org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl
{
    private boolean processChildren;

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: void <init>()>();

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor: boolean processChildren> = 1;

        return;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        return r0;
    }

    protected void processChildren(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor r0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = r0.<org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor: boolean processChildren>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: void processChildren(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r1);

        goto label2;

     label1:
        r0.<org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor: boolean processChildren> = 1;

     label2:
        return;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r4;
        org.apache.lucene.queryparser.flexible.core.nodes.GroupQueryNode $r9;
        java.lang.CloneNotSupportedException $r14;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode r15;
        java.lang.CharSequence[] r6;
        int $i0, $i1, $i2, i3;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, $r11;
        java.util.LinkedList $r8;
        boolean $z0;
        java.lang.CharSequence $r2, $r7, $r12;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r3;
        java.lang.IllegalArgumentException $r13;
        org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor r1;
        org.apache.lucene.queryparser.flexible.core.nodes.OrQueryNode $r10;
        java.lang.Object $r5;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode;

        if $z0 == 0 goto label9;

        r1.<org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor: boolean processChildren> = 0;

        r15 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode) r0;

        $r2 = interfaceinvoke r15.<org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode: java.lang.CharSequence getField()>();

        if $r2 != null goto label9;

        $r3 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r4 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey MULTI_FIELDS>;

        $r5 = virtualinvoke $r3.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r4);

        r6 = (java.lang.CharSequence[]) $r5;

        if r6 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler");

        throw $r13;

     label1:
        if r6 == null goto label9;

        $i0 = lengthof r6;

        if $i0 <= 0 goto label9;

        $r7 = r6[0];

        interfaceinvoke r15.<org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode: void setField(java.lang.CharSequence)>($r7);

        $i1 = lengthof r6;

        if $i1 != 1 goto label2;

        return r15;

     label2:
        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

        virtualinvoke $r8.<java.util.LinkedList: boolean add(java.lang.Object)>(r15);

        i3 = 1;

     label3:
        $i2 = lengthof r6;

        if i3 >= $i2 goto label8;

     label4:
        $r11 = interfaceinvoke r15.<org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        r15 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode) $r11;

        $r12 = r6[i3];

        interfaceinvoke r15.<org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode: void setField(java.lang.CharSequence)>($r12);

        virtualinvoke $r8.<java.util.LinkedList: boolean add(java.lang.Object)>(r15);

     label5:
        goto label7;

     label6:
        $r14 := @caughtexception;

     label7:
        i3 = i3 + 1;

        goto label3;

     label8:
        $r9 = new org.apache.lucene.queryparser.flexible.core.nodes.GroupQueryNode;

        $r10 = new org.apache.lucene.queryparser.flexible.core.nodes.OrQueryNode;

        specialinvoke $r10.<org.apache.lucene.queryparser.flexible.core.nodes.OrQueryNode: void <init>(java.util.List)>($r8);

        specialinvoke $r9.<org.apache.lucene.queryparser.flexible.core.nodes.GroupQueryNode: void <init>(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>($r10);

        return $r9;

     label9:
        return r0;

        catch java.lang.CloneNotSupportedException from label4 to label5 with label6;
    }

    protected java.util.List setChildrenOrder(java.util.List) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        java.util.List r0;
        org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor;

        r0 := @parameter0: java.util.List;

        return r0;
    }
}
