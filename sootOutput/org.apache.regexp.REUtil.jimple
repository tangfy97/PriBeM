public class org.apache.regexp.REUtil extends java.lang.Object
{
    private static final java.lang.String complexPrefix;

    public void <init>()
    {
        org.apache.regexp.REUtil r0;

        r0 := @this: org.apache.regexp.REUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.regexp.RE createRE(java.lang.String, int) throws org.apache.regexp.RESyntaxException
    {
        org.apache.regexp.RE $r1, $r3;
        int i0, $i1;
        java.lang.String r0, $r2, $r4, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("complex:");

        if $z0 == 0 goto label1;

        $r3 = new org.apache.regexp.RE;

        $r4 = "complex:";

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        specialinvoke $r3.<org.apache.regexp.RE: void <init>(java.lang.String,int)>($r5, i0);

        return $r3;

     label1:
        $r1 = new org.apache.regexp.RE;

        $r2 = staticinvoke <org.apache.regexp.RE: java.lang.String simplePatternToFullRegularExpression(java.lang.String)>(r0);

        specialinvoke $r1.<org.apache.regexp.RE: void <init>(java.lang.String,int)>($r2, i0);

        return $r1;
    }

    public static org.apache.regexp.RE createRE(java.lang.String) throws org.apache.regexp.RESyntaxException
    {
        java.lang.String r0;
        org.apache.regexp.RE $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.regexp.REUtil: org.apache.regexp.RE createRE(java.lang.String,int)>(r0, 0);

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.regexp.REUtil: java.lang.String complexPrefix> = "complex:";

        return;
    }
}
