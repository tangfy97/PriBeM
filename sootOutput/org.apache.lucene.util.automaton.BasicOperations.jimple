public final class org.apache.lucene.util.automaton.BasicOperations extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.apache.lucene.util.automaton.BasicOperations r0;

        r0 := @this: org.apache.lucene.util.automaton.BasicOperations;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.lucene.util.automaton.Automaton concatenate(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)
    {
        java.lang.String $r7, $r9, $r11;
        boolean $z0, $z1, $z2, $z3, z4, $z5, $z6, $z7, $z8;
        java.util.Iterator $r2;
        org.apache.lucene.util.automaton.Automaton $r0, $r12, r13, r14, r15, r16;
        java.util.Set $r1;
        org.apache.lucene.util.automaton.State r4, $r5;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6, $r8, $r10;

        r13 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        r14 := @parameter1: org.apache.lucene.util.automaton.Automaton;

        $z0 = virtualinvoke r13.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        $z6 = virtualinvoke r14.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z6 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = r13.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = r14.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeString(java.lang.String)>($r11);

        return $r12;

     label1:
        $z1 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: boolean isEmpty(org.apache.lucene.util.automaton.Automaton)>(r13);

        if $z1 != 0 goto label2;

        $z2 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: boolean isEmpty(org.apache.lucene.util.automaton.Automaton)>(r14);

        if $z2 == 0 goto label3;

     label2:
        $r0 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeEmpty()>();

        return $r0;

     label3:
        $z3 = virtualinvoke r13.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z3 == 0 goto label4;

        $z5 = virtualinvoke r14.<org.apache.lucene.util.automaton.Automaton: boolean isDeterministic()>();

        if $z5 == 0 goto label4;

        $z7 = 1;

        goto label5;

     label4:
        $z7 = 0;

     label5:
        z4 = $z7;

        if r13 != r14 goto label6;

        r15 = virtualinvoke r13.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpanded()>();

        r16 = virtualinvoke r14.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpanded()>();

        goto label7;

     label6:
        r15 = virtualinvoke r13.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpandedIfRequired()>();

        r16 = virtualinvoke r14.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpandedIfRequired()>();

     label7:
        $r1 = virtualinvoke r15.<org.apache.lucene.util.automaton.Automaton: java.util.Set getAcceptStates()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label8:
        $z8 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label9;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.util.automaton.State) $r3;

        r4.<org.apache.lucene.util.automaton.State: boolean accept> = 0;

        $r5 = r16.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        virtualinvoke r4.<org.apache.lucene.util.automaton.State: void addEpsilon(org.apache.lucene.util.automaton.State)>($r5);

        goto label8;

     label9:
        r15.<org.apache.lucene.util.automaton.Automaton: boolean deterministic> = z4;

        virtualinvoke r15.<org.apache.lucene.util.automaton.Automaton: void clearNumberedStates()>();

        virtualinvoke r15.<org.apache.lucene.util.automaton.Automaton: void checkMinimizeAlways()>();

        return r15;
    }

    public static org.apache.lucene.util.automaton.Automaton concatenate(java.util.List)
    {
        java.lang.Integer $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z11, z12, $z13, $z14, $z15, $z16;
        org.apache.lucene.util.automaton.Automaton r8, $r14, $r18, $r22, $r26, r27, r28, r29, r30, r31, r33;
        java.util.Set $r9, r32;
        java.util.List r0;
        java.lang.StringBuilder $r19;
        java.util.HashSet $r3;
        int $i0, $i1, $i2;
        java.lang.String $r21, $r24;
        java.util.Iterator $r1, $r2, $r4, $r6, $r10, $r20;
        org.apache.lucene.util.automaton.State r12, $r13;
        java.lang.Object $r5, $r7, $r11, $r15, $r17, $r23, $r25;

        r0 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r26 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeEmptyString()>();

        return $r26;

     label01:
        z9 = 1;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r25 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r27 = (org.apache.lucene.util.automaton.Automaton) $r25;

        $z8 = virtualinvoke r27.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z8 != 0 goto label03;

        z9 = 0;

        goto label04;

     label03:
        goto label02;

     label04:
        if z9 == 0 goto label07;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z7 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label06;

        $r23 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r28 = (org.apache.lucene.util.automaton.Automaton) $r23;

        $r24 = r28.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        goto label05;

     label06:
        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeString(java.lang.String)>($r21);

        return $r22;

     label07:
        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r17 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r29 = (org.apache.lucene.util.automaton.Automaton) $r17;

        $z6 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: boolean isEmpty(org.apache.lucene.util.automaton.Automaton)>(r29);

        if $z6 == 0 goto label09;

        $r18 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeEmpty()>();

        return $r18;

     label09:
        goto label08;

     label10:
        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        $r4 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z3 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r15 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r30 = (org.apache.lucene.util.automaton.Automaton) $r15;

        $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r30);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r16);

        goto label11;

     label12:
        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 == $i1 goto label13;

        $z16 = 1;

        $z15 = 1;

        goto label14;

     label13:
        $z16 = 0;

        $z15 = 0;

     label14:
        z11 = $z15;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (org.apache.lucene.util.automaton.Automaton) $r5;

        if $z16 == 0 goto label15;

        r31 = virtualinvoke $r14.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpanded()>();

        goto label16;

     label15:
        r31 = virtualinvoke $r14.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpandedIfRequired()>();

     label16:
        r32 = virtualinvoke r31.<org.apache.lucene.util.automaton.Automaton: java.util.Set getAcceptStates()>();

        z12 = 1;

        $r6 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z13 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label26;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.lucene.util.automaton.Automaton) $r7;

        if z12 == 0 goto label18;

        z12 = 0;

        goto label25;

     label18:
        $z4 = virtualinvoke r8.<org.apache.lucene.util.automaton.Automaton: boolean isEmptyString()>();

        if $z4 == 0 goto label19;

        goto label17;

     label19:
        if z11 == 0 goto label20;

        r33 = virtualinvoke r8.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpanded()>();

        goto label21;

     label20:
        r33 = virtualinvoke r8.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpandedIfRequired()>();

     label21:
        $r9 = virtualinvoke r33.<org.apache.lucene.util.automaton.Automaton: java.util.Set getAcceptStates()>();

        $r10 = interfaceinvoke r32.<java.util.Set: java.util.Iterator iterator()>();

     label22:
        $z14 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label24;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.lucene.util.automaton.State) $r11;

        r12.<org.apache.lucene.util.automaton.State: boolean accept> = 0;

        $r13 = r33.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        virtualinvoke r12.<org.apache.lucene.util.automaton.State: void addEpsilon(org.apache.lucene.util.automaton.State)>($r13);

        $z5 = r12.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z5 == 0 goto label23;

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>(r12);

     label23:
        goto label22;

     label24:
        r32 = $r9;

     label25:
        goto label17;

     label26:
        r31.<org.apache.lucene.util.automaton.Automaton: boolean deterministic> = 0;

        virtualinvoke r31.<org.apache.lucene.util.automaton.Automaton: void clearNumberedStates()>();

        virtualinvoke r31.<org.apache.lucene.util.automaton.Automaton: void checkMinimizeAlways()>();

        return r31;
    }

    public static org.apache.lucene.util.automaton.Automaton optional(org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Automaton $r0, r3;
        org.apache.lucene.util.automaton.State $r1, $r2;

        r3 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $r0 = virtualinvoke r3.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpandedIfRequired()>();

        $r1 = new org.apache.lucene.util.automaton.State;

        specialinvoke $r1.<org.apache.lucene.util.automaton.State: void <init>()>();

        $r2 = $r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        virtualinvoke $r1.<org.apache.lucene.util.automaton.State: void addEpsilon(org.apache.lucene.util.automaton.State)>($r2);

        $r1.<org.apache.lucene.util.automaton.State: boolean accept> = 1;

        $r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial> = $r1;

        $r0.<org.apache.lucene.util.automaton.Automaton: boolean deterministic> = 0;

        virtualinvoke $r0.<org.apache.lucene.util.automaton.Automaton: void clearNumberedStates()>();

        virtualinvoke $r0.<org.apache.lucene.util.automaton.Automaton: void checkMinimizeAlways()>();

        return $r0;
    }

    public static org.apache.lucene.util.automaton.Automaton repeat(org.apache.lucene.util.automaton.Automaton)
    {
        java.util.Iterator $r4;
        org.apache.lucene.util.automaton.Automaton $r0, r7;
        java.util.Set $r3;
        org.apache.lucene.util.automaton.State $r1, $r2, r6;
        java.lang.Object $r5;
        boolean $z0;

        r7 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $r0 = virtualinvoke r7.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpanded()>();

        $r1 = new org.apache.lucene.util.automaton.State;

        specialinvoke $r1.<org.apache.lucene.util.automaton.State: void <init>()>();

        $r1.<org.apache.lucene.util.automaton.State: boolean accept> = 1;

        $r2 = $r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        virtualinvoke $r1.<org.apache.lucene.util.automaton.State: void addEpsilon(org.apache.lucene.util.automaton.State)>($r2);

        $r3 = virtualinvoke $r0.<org.apache.lucene.util.automaton.Automaton: java.util.Set getAcceptStates()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.lucene.util.automaton.State) $r5;

        virtualinvoke r6.<org.apache.lucene.util.automaton.State: void addEpsilon(org.apache.lucene.util.automaton.State)>($r1);

        goto label1;

     label2:
        $r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial> = $r1;

        $r0.<org.apache.lucene.util.automaton.Automaton: boolean deterministic> = 0;

        virtualinvoke $r0.<org.apache.lucene.util.automaton.Automaton: void clearNumberedStates()>();

        virtualinvoke $r0.<org.apache.lucene.util.automaton.Automaton: void checkMinimizeAlways()>();

        return $r0;
    }

    public static org.apache.lucene.util.automaton.Automaton repeat(org.apache.lucene.util.automaton.Automaton, int)
    {
        org.apache.lucene.util.automaton.Automaton r1, $r2, $r3, $r4;
        java.util.ArrayList $r5;
        int $i0, i1, $i3;

        r1 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        i1 := @parameter1: int;

        if i1 != 0 goto label1;

        $r4 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton repeat(org.apache.lucene.util.automaton.Automaton)>(r1);

        return $r4;

     label1:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

     label2:
        $i0 = i1;

        $i3 = (int) -1;

        i1 = i1 + $i3;

        if $i0 <= 0 goto label3;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        goto label2;

     label3:
        $r2 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton repeat(org.apache.lucene.util.automaton.Automaton)>(r1);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r3 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton concatenate(java.util.List)>($r5);

        return $r3;
    }

    public static org.apache.lucene.util.automaton.Automaton repeat(org.apache.lucene.util.automaton.Automaton, int, int)
    {
        java.util.ArrayList $r16;
        int $i0, i1, i2, i3, $i5, $i7;
        boolean $z0, $z1;
        java.util.Iterator $r3, $r8;
        org.apache.lucene.util.automaton.Automaton r0, $r6, $r12, r13, r14;
        java.util.Set $r2, $r7;
        org.apache.lucene.util.automaton.State $r5, r10, $r11, r15;
        java.lang.Object $r4, $r9;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i1 <= i2 goto label01;

        $r12 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeEmpty()>();

        return $r12;

     label01:
        i3 = i2 - i1;

        virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: void expandSingleton()>();

        if i1 != 0 goto label02;

        r13 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeEmptyString()>();

        goto label06;

     label02:
        if i1 != 1 goto label03;

        r13 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton clone()>();

        goto label06;

     label03:
        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

     label04:
        $i0 = i1;

        $i5 = (int) -1;

        i1 = i1 + $i5;

        if $i0 <= 0 goto label05;

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>(r0);

        goto label04;

     label05:
        r13 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton concatenate(java.util.List)>($r16);

     label06:
        if i3 <= 0 goto label13;

        r14 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton clone()>();

     label07:
        $i7 = (int) -1;

        i3 = i3 + $i7;

        if i3 <= 0 goto label10;

        $r6 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton clone()>();

        $r7 = virtualinvoke $r6.<org.apache.lucene.util.automaton.Automaton: java.util.Set getAcceptStates()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.lucene.util.automaton.State) $r9;

        $r11 = r14.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        virtualinvoke r10.<org.apache.lucene.util.automaton.State: void addEpsilon(org.apache.lucene.util.automaton.State)>($r11);

        goto label08;

     label09:
        r14 = $r6;

        goto label07;

     label10:
        $r2 = virtualinvoke r13.<org.apache.lucene.util.automaton.Automaton: java.util.Set getAcceptStates()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.lucene.util.automaton.State) $r4;

        $r5 = r14.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        virtualinvoke r15.<org.apache.lucene.util.automaton.State: void addEpsilon(org.apache.lucene.util.automaton.State)>($r5);

        goto label11;

     label12:
        r13.<org.apache.lucene.util.automaton.Automaton: boolean deterministic> = 0;

        virtualinvoke r13.<org.apache.lucene.util.automaton.Automaton: void clearNumberedStates()>();

        virtualinvoke r13.<org.apache.lucene.util.automaton.Automaton: void checkMinimizeAlways()>();

     label13:
        return r13;
    }

    public static org.apache.lucene.util.automaton.Automaton complement(org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Automaton $r0, r3;
        org.apache.lucene.util.automaton.State r2;
        int i0, i1;
        org.apache.lucene.util.automaton.State[] $r1;
        boolean $z0, $z1;

        r3 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $r0 = virtualinvoke r3.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpandedIfRequired()>();

        virtualinvoke $r0.<org.apache.lucene.util.automaton.Automaton: void determinize()>();

        virtualinvoke $r0.<org.apache.lucene.util.automaton.Automaton: void totalize()>();

        $r1 = virtualinvoke $r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = $r1[i1];

        $z0 = r2.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        r2.<org.apache.lucene.util.automaton.State: boolean accept> = $z1;

        i1 = i1 + 1;

        goto label1;

     label4:
        virtualinvoke $r0.<org.apache.lucene.util.automaton.Automaton: void removeDeadTransitions()>();

        return $r0;
    }

    public static org.apache.lucene.util.automaton.Automaton minus(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Automaton r0, $r1, r2, $r3, $r4, $r6, $r7, $r8;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        r2 := @parameter1: org.apache.lucene.util.automaton.Automaton;

        $z0 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: boolean isEmpty(org.apache.lucene.util.automaton.Automaton)>(r0);

        if $z0 != 0 goto label1;

        if r0 != r2 goto label2;

     label1:
        $r1 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeEmpty()>();

        return $r1;

     label2:
        $z1 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: boolean isEmpty(org.apache.lucene.util.automaton.Automaton)>(r2);

        if $z1 == 0 goto label3;

        $r8 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneIfRequired()>();

        return $r8;

     label3:
        $z2 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z2 == 0 goto label5;

        $r5 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $z3 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: boolean run(org.apache.lucene.util.automaton.Automaton,java.lang.String)>(r2, $r5);

        if $z3 == 0 goto label4;

        $r7 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeEmpty()>();

        return $r7;

     label4:
        $r6 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneIfRequired()>();

        return $r6;

     label5:
        $r3 = virtualinvoke r2.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton complement()>();

        $r4 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton intersection(org.apache.lucene.util.automaton.Automaton,org.apache.lucene.util.automaton.Automaton)>(r0, $r3);

        return $r4;
    }

    public static org.apache.lucene.util.automaton.Automaton intersection(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Transition[][] $r2, $r3;
        org.apache.lucene.util.automaton.StatePair $r7, $r17, r45, r51;
        org.apache.lucene.util.automaton.Transition[] $r48, $r50;
        org.apache.lucene.util.automaton.Automaton r0, r1, $r4, $r38, $r40, $r41, $r43, $r44;
        java.lang.String $r39, $r42;
        org.apache.lucene.util.automaton.State $r8, $r9, $r10, $r12, $r20, $r21, $r30, $r31, $r34, $r37, $r46, $r47, $r49;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.util.HashMap $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, $i17, i18, $i19, $i20, $i21;
        java.util.LinkedList $r5;
        org.apache.lucene.util.automaton.Transition $r13, $r14, $r15, $r16, $r18, $r19, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r32, $r33, $r35, $r36;
        java.lang.Object $r11, $r22;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        r1 := @parameter1: org.apache.lucene.util.automaton.Automaton;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label02;

        $r42 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $z7 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: boolean run(org.apache.lucene.util.automaton.Automaton,java.lang.String)>(r1, $r42);

        if $z7 == 0 goto label01;

        $r44 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneIfRequired()>();

        return $r44;

     label01:
        $r43 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeEmpty()>();

        return $r43;

     label02:
        $z1 = virtualinvoke r1.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z1 == 0 goto label04;

        $r39 = r1.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $z6 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: boolean run(org.apache.lucene.util.automaton.Automaton,java.lang.String)>(r0, $r39);

        if $z6 == 0 goto label03;

        $r41 = virtualinvoke r1.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneIfRequired()>();

        return $r41;

     label03:
        $r40 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeEmpty()>();

        return $r40;

     label04:
        if r0 != r1 goto label05;

        $r38 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneIfRequired()>();

        return $r38;

     label05:
        $r2 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Transition[][] getSortedTransitions()>();

        $r3 = virtualinvoke r1.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Transition[][] getSortedTransitions()>();

        $r4 = new org.apache.lucene.util.automaton.Automaton;

        specialinvoke $r4.<org.apache.lucene.util.automaton.Automaton: void <init>()>();

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        $r7 = new org.apache.lucene.util.automaton.StatePair;

        $r10 = $r4.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $r9 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $r8 = r1.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        specialinvoke $r7.<org.apache.lucene.util.automaton.StatePair: void <init>(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State)>($r10, $r9, $r8);

        virtualinvoke $r5.<java.util.LinkedList: boolean add(java.lang.Object)>($r7);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r7);

     label06:
        $i0 = virtualinvoke $r5.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label21;

        $r11 = virtualinvoke $r5.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r45 = (org.apache.lucene.util.automaton.StatePair) $r11;

        $r46 = r45.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s>;

        $r12 = r45.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s1>;

        $z4 = $r12.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z4 == 0 goto label07;

        $r37 = r45.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s2>;

        $z5 = $r37.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z5 == 0 goto label07;

        $z8 = 1;

        goto label08;

     label07:
        $z8 = 0;

     label08:
        $r46.<org.apache.lucene.util.automaton.State: boolean accept> = $z8;

        $r47 = r45.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s1>;

        $i13 = $r47.<org.apache.lucene.util.automaton.State: int number>;

        $r48 = $r2[$i13];

        $r49 = r45.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s2>;

        $i14 = $r49.<org.apache.lucene.util.automaton.State: int number>;

        $r50 = $r3[$i14];

        i15 = 0;

        i16 = 0;

     label09:
        $i17 = lengthof $r48;

        if i15 >= $i17 goto label20;

     label10:
        $i1 = lengthof $r50;

        if i16 >= $i1 goto label11;

        $r35 = $r50[i16];

        $i12 = $r35.<org.apache.lucene.util.automaton.Transition: int max>;

        $r36 = $r48[i15];

        $i11 = $r36.<org.apache.lucene.util.automaton.Transition: int min>;

        if $i12 >= $i11 goto label11;

        i16 = i16 + 1;

        goto label10;

     label11:
        i18 = i16;

     label12:
        $i19 = lengthof $r50;

        if i18 >= $i19 goto label19;

        $r13 = $r48[i15];

        $i3 = $r13.<org.apache.lucene.util.automaton.Transition: int max>;

        $r14 = $r50[i18];

        $i2 = $r14.<org.apache.lucene.util.automaton.Transition: int min>;

        if $i3 < $i2 goto label19;

        $r15 = $r50[i18];

        $i5 = $r15.<org.apache.lucene.util.automaton.Transition: int max>;

        $r16 = $r48[i15];

        $i4 = $r16.<org.apache.lucene.util.automaton.Transition: int min>;

        if $i5 < $i4 goto label18;

        $r17 = new org.apache.lucene.util.automaton.StatePair;

        $r18 = $r48[i15];

        $r21 = $r18.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $r19 = $r50[i18];

        $r20 = $r19.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        specialinvoke $r17.<org.apache.lucene.util.automaton.StatePair: void <init>(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State)>($r21, $r20);

        $r22 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r17);

        r51 = (org.apache.lucene.util.automaton.StatePair) $r22;

        if r51 != null goto label13;

        $r34 = new org.apache.lucene.util.automaton.State;

        specialinvoke $r34.<org.apache.lucene.util.automaton.State: void <init>()>();

        $r17.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s> = $r34;

        virtualinvoke $r5.<java.util.LinkedList: boolean add(java.lang.Object)>($r17);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r17);

        r51 = $r17;

     label13:
        $r23 = $r48[i15];

        $i7 = $r23.<org.apache.lucene.util.automaton.Transition: int min>;

        $r24 = $r50[i18];

        $i6 = $r24.<org.apache.lucene.util.automaton.Transition: int min>;

        if $i7 <= $i6 goto label14;

        $r33 = $r48[i15];

        $i20 = $r33.<org.apache.lucene.util.automaton.Transition: int min>;

        goto label15;

     label14:
        $r25 = $r50[i18];

        $i20 = $r25.<org.apache.lucene.util.automaton.Transition: int min>;

     label15:
        i8 = $i20;

        $r26 = $r48[i15];

        $i10 = $r26.<org.apache.lucene.util.automaton.Transition: int max>;

        $r27 = $r50[i18];

        $i9 = $r27.<org.apache.lucene.util.automaton.Transition: int max>;

        if $i10 >= $i9 goto label16;

        $r32 = $r48[i15];

        $i21 = $r32.<org.apache.lucene.util.automaton.Transition: int max>;

        goto label17;

     label16:
        $r28 = $r50[i18];

        $i21 = $r28.<org.apache.lucene.util.automaton.Transition: int max>;

     label17:
        $r31 = r45.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s>;

        $r29 = new org.apache.lucene.util.automaton.Transition;

        $r30 = r51.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s>;

        specialinvoke $r29.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>(i8, $i21, $r30);

        virtualinvoke $r31.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r29);

     label18:
        i18 = i18 + 1;

        goto label12;

     label19:
        i15 = i15 + 1;

        goto label09;

     label20:
        goto label06;

     label21:
        $z2 = r0.<org.apache.lucene.util.automaton.Automaton: boolean deterministic>;

        if $z2 == 0 goto label22;

        $z3 = r1.<org.apache.lucene.util.automaton.Automaton: boolean deterministic>;

        if $z3 == 0 goto label22;

        $z9 = 1;

        goto label23;

     label22:
        $z9 = 0;

     label23:
        $r4.<org.apache.lucene.util.automaton.Automaton: boolean deterministic> = $z9;

        virtualinvoke $r4.<org.apache.lucene.util.automaton.Automaton: void removeDeadTransitions()>();

        virtualinvoke $r4.<org.apache.lucene.util.automaton.Automaton: void checkMinimizeAlways()>();

        return $r4;
    }

    public static boolean sameLanguage(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Automaton r0, r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        r1 := @parameter1: org.apache.lucene.util.automaton.Automaton;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label2;

        $z6 = virtualinvoke r1.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z6 == 0 goto label2;

        $r3 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $r2 = r1.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $z7 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z7;

     label2:
        $z1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z1 == 0 goto label5;

        $z4 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: boolean subsetOf(org.apache.lucene.util.automaton.Automaton,org.apache.lucene.util.automaton.Automaton)>(r0, r1);

        if $z4 == 0 goto label3;

        $z5 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: boolean subsetOf(org.apache.lucene.util.automaton.Automaton,org.apache.lucene.util.automaton.Automaton)>(r1, r0);

        if $z5 == 0 goto label3;

        $z8 = 1;

        goto label4;

     label3:
        $z8 = 0;

     label4:
        return $z8;

     label5:
        $z2 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: boolean subsetOf(org.apache.lucene.util.automaton.Automaton,org.apache.lucene.util.automaton.Automaton)>(r1, r0);

        if $z2 == 0 goto label6;

        $z3 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: boolean subsetOf(org.apache.lucene.util.automaton.Automaton,org.apache.lucene.util.automaton.Automaton)>(r0, r1);

        if $z3 == 0 goto label6;

        $z9 = 1;

        goto label7;

     label6:
        $z9 = 0;

     label7:
        return $z9;
    }

    public static boolean subsetOf(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Transition[][] $r2, $r3;
        org.apache.lucene.util.automaton.StatePair $r6, $r19, r33;
        org.apache.lucene.util.automaton.Transition[] $r28, $r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.lucene.util.automaton.Automaton r0, r1;
        java.util.HashSet $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13, i14, i15, i16, $i17;
        java.lang.String $r30, $r31, $r32;
        java.util.LinkedList $r4;
        org.apache.lucene.util.automaton.Transition $r13, $r14, $r15, $r16, $r17, $r18, $r20, $r21, $r24, $r25, $r26;
        org.apache.lucene.util.automaton.State $r7, $r8, $r10, $r11, $r12, $r22, $r23, $r27;
        java.lang.Object $r9;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        r1 := @parameter1: org.apache.lucene.util.automaton.Automaton;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label03;

        $z4 = virtualinvoke r1.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z4 == 0 goto label02;

        $r32 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $r31 = r1.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $z6 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>($r31);

        return $z6;

     label02:
        $r30 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $z5 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: boolean run(org.apache.lucene.util.automaton.Automaton,java.lang.String)>(r1, $r30);

        return $z5;

     label03:
        virtualinvoke r1.<org.apache.lucene.util.automaton.Automaton: void determinize()>();

        $r2 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Transition[][] getSortedTransitions()>();

        $r3 = virtualinvoke r1.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Transition[][] getSortedTransitions()>();

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        $r6 = new org.apache.lucene.util.automaton.StatePair;

        $r8 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $r7 = r1.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        specialinvoke $r6.<org.apache.lucene.util.automaton.StatePair: void <init>(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State)>($r8, $r7);

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>($r6);

        virtualinvoke $r5.<java.util.HashSet: boolean add(java.lang.Object)>($r6);

     label04:
        $i0 = virtualinvoke $r4.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label17;

        $r9 = virtualinvoke $r4.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r33 = (org.apache.lucene.util.automaton.StatePair) $r9;

        $r10 = r33.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s1>;

        $z1 = $r10.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z1 == 0 goto label05;

        $r27 = r33.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s2>;

        $z3 = $r27.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z3 != 0 goto label05;

        return 0;

     label05:
        $r11 = r33.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s1>;

        $i1 = $r11.<org.apache.lucene.util.automaton.State: int number>;

        $r28 = $r2[$i1];

        $r12 = r33.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s2>;

        $i2 = $r12.<org.apache.lucene.util.automaton.State: int number>;

        $r29 = $r3[$i2];

        i11 = 0;

        i12 = 0;

     label06:
        $i13 = lengthof $r28;

        if i11 >= $i13 goto label16;

     label07:
        $i3 = lengthof $r29;

        if i12 >= $i3 goto label08;

        $r25 = $r29[i12];

        $i10 = $r25.<org.apache.lucene.util.automaton.Transition: int max>;

        $r26 = $r28[i11];

        $i9 = $r26.<org.apache.lucene.util.automaton.Transition: int min>;

        if $i10 >= $i9 goto label08;

        i12 = i12 + 1;

        goto label07;

     label08:
        $r13 = $r28[i11];

        i14 = $r13.<org.apache.lucene.util.automaton.Transition: int min>;

        $r14 = $r28[i11];

        i15 = $r14.<org.apache.lucene.util.automaton.Transition: int max>;

        i16 = i12;

     label09:
        $i17 = lengthof $r29;

        if i16 >= $i17 goto label14;

        $r15 = $r28[i11];

        $i5 = $r15.<org.apache.lucene.util.automaton.Transition: int max>;

        $r16 = $r29[i16];

        $i4 = $r16.<org.apache.lucene.util.automaton.Transition: int min>;

        if $i5 < $i4 goto label14;

        $r17 = $r29[i16];

        $i6 = $r17.<org.apache.lucene.util.automaton.Transition: int min>;

        if $i6 <= i14 goto label10;

        return 0;

     label10:
        $r18 = $r29[i16];

        $i7 = $r18.<org.apache.lucene.util.automaton.Transition: int max>;

        if $i7 >= 1114111 goto label11;

        $r24 = $r29[i16];

        $i8 = $r24.<org.apache.lucene.util.automaton.Transition: int max>;

        i14 = $i8 + 1;

        goto label12;

     label11:
        i14 = 1114111;

        i15 = 0;

     label12:
        $r19 = new org.apache.lucene.util.automaton.StatePair;

        $r20 = $r28[i11];

        $r23 = $r20.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $r21 = $r29[i16];

        $r22 = $r21.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        specialinvoke $r19.<org.apache.lucene.util.automaton.StatePair: void <init>(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State)>($r23, $r22);

        $z2 = virtualinvoke $r5.<java.util.HashSet: boolean contains(java.lang.Object)>($r19);

        if $z2 != 0 goto label13;

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>($r19);

        virtualinvoke $r5.<java.util.HashSet: boolean add(java.lang.Object)>($r19);

     label13:
        i16 = i16 + 1;

        goto label09;

     label14:
        if i14 > i15 goto label15;

        return 0;

     label15:
        i11 = i11 + 1;

        goto label06;

     label16:
        goto label04;

     label17:
        return 1;
    }

    public static org.apache.lucene.util.automaton.Automaton union(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Automaton $r3, r6, r7, r8, r9;
        org.apache.lucene.util.automaton.State $r0, $r1, $r2;
        java.lang.String $r4, $r5;
        boolean $z0, $z1, $z2;

        r6 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        r7 := @parameter1: org.apache.lucene.util.automaton.Automaton;

        $z0 = virtualinvoke r6.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r7.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z1 == 0 goto label1;

        $r5 = r6.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $r4 = r7.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 != 0 goto label2;

     label1:
        if r6 != r7 goto label3;

     label2:
        $r3 = virtualinvoke r6.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneIfRequired()>();

        return $r3;

     label3:
        if r6 != r7 goto label4;

        r8 = virtualinvoke r6.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpanded()>();

        r9 = virtualinvoke r7.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpanded()>();

        goto label5;

     label4:
        r8 = virtualinvoke r6.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpandedIfRequired()>();

        r9 = virtualinvoke r7.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpandedIfRequired()>();

     label5:
        $r0 = new org.apache.lucene.util.automaton.State;

        specialinvoke $r0.<org.apache.lucene.util.automaton.State: void <init>()>();

        $r1 = r8.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        virtualinvoke $r0.<org.apache.lucene.util.automaton.State: void addEpsilon(org.apache.lucene.util.automaton.State)>($r1);

        $r2 = r9.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        virtualinvoke $r0.<org.apache.lucene.util.automaton.State: void addEpsilon(org.apache.lucene.util.automaton.State)>($r2);

        r8.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial> = $r0;

        r8.<org.apache.lucene.util.automaton.Automaton: boolean deterministic> = 0;

        virtualinvoke r8.<org.apache.lucene.util.automaton.Automaton: void clearNumberedStates()>();

        virtualinvoke r8.<org.apache.lucene.util.automaton.Automaton: void checkMinimizeAlways()>();

        return r8;
    }

    public static org.apache.lucene.util.automaton.Automaton union(java.util.Collection)
    {
        java.lang.Integer $r10;
        java.util.HashSet $r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, z3, $z4;
        java.util.Iterator $r2, $r4;
        org.apache.lucene.util.automaton.Automaton $r5, r7, r11, r12;
        java.util.Collection r1;
        org.apache.lucene.util.automaton.State $r3, $r8;
        java.lang.Object $r6, $r9;

        r1 := @parameter0: java.util.Collection;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.lucene.util.automaton.Automaton) $r9;

        $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r11);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r10);

        goto label1;

     label2:
        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 == $i1 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        z3 = $z2;

        $r3 = new org.apache.lucene.util.automaton.State;

        specialinvoke $r3.<org.apache.lucene.util.automaton.State: void <init>()>();

        $r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z4 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label9;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.util.automaton.Automaton) $r6;

        $z1 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: boolean isEmpty(org.apache.lucene.util.automaton.Automaton)>(r7);

        if $z1 == 0 goto label6;

        goto label5;

     label6:
        if z3 == 0 goto label7;

        r12 = virtualinvoke r7.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpanded()>();

        goto label8;

     label7:
        r12 = virtualinvoke r7.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpandedIfRequired()>();

     label8:
        $r8 = r12.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        virtualinvoke $r3.<org.apache.lucene.util.automaton.State: void addEpsilon(org.apache.lucene.util.automaton.State)>($r8);

        goto label5;

     label9:
        $r5 = new org.apache.lucene.util.automaton.Automaton;

        specialinvoke $r5.<org.apache.lucene.util.automaton.Automaton: void <init>()>();

        $r5.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial> = $r3;

        $r5.<org.apache.lucene.util.automaton.Automaton: boolean deterministic> = 0;

        virtualinvoke $r5.<org.apache.lucene.util.automaton.Automaton: void clearNumberedStates()>();

        virtualinvoke $r5.<org.apache.lucene.util.automaton.Automaton: void checkMinimizeAlways()>();

        return $r5;
    }

    public static void determinize(org.apache.lucene.util.automaton.Automaton)
    {
        java.lang.Integer $r38, $r41;
        org.apache.lucene.util.automaton.Transition[] $r58, $r69, r74;
        org.apache.lucene.util.automaton.Automaton r0;
        org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet $r80;
        java.lang.StringBuilder $r20, $r21, $r46, $r47, $r48, $r49, $r50, $r51, $r84, $r87;
        org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet r16, $r54, $r77;
        java.lang.AssertionError $r82, $r85, $r88;
        java.lang.String $r22, $r52;
        org.apache.lucene.util.automaton.SortedIntSet $r81;
        org.apache.lucene.util.automaton.State $r2, $r3, $r6, $r9, $r10, $r11, $r12, $r37, $r39, $r40, $r42, $r55, r61, r62, r63, $r76, $r83;
        int[] $r17, $r57;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        org.apache.lucene.util.automaton.BasicOperations$PointTransitions[] $r23, $r25, $r28, $r31, $r34, $r66, $r70;
        org.apache.lucene.util.automaton.BasicOperations$TransitionList $r27, $r30, $r33, $r36, $r68, $r72;
        org.apache.lucene.util.automaton.BasicOperations$PointTransitions $r24, $r26, $r29, $r32, $r35, $r67, $r71;
        java.util.HashMap $r79;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, i22, i23, i24, i25, i26, $i27, $i28, i29, i30, i31, $i33, $i35;
        java.util.LinkedList $r78;
        org.apache.lucene.util.automaton.Transition $r59, r73, r75, $r86;
        org.apache.lucene.util.automaton.State[] $r1, r60, r64;
        java.lang.Object $r15, $r43;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $z0 = r0.<org.apache.lucene.util.automaton.Automaton: boolean deterministic>;

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z1 == 0 goto label02;

     label01:
        return;

     label02:
        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        $r2 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        z2 = $r2.<org.apache.lucene.util.automaton.State: boolean accept>;

        $r3 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        i0 = $r3.<org.apache.lucene.util.automaton.State: int number>;

        $r76 = new org.apache.lucene.util.automaton.State;

        specialinvoke $r76.<org.apache.lucene.util.automaton.State: void <init>()>();

        r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial> = $r76;

        $r77 = new org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet;

        $r6 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        specialinvoke $r77.<org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet: void <init>(int,org.apache.lucene.util.automaton.State)>(i0, $r6);

        $r78 = new java.util.LinkedList;

        specialinvoke $r78.<java.util.LinkedList: void <init>()>();

        $r79 = new java.util.HashMap;

        specialinvoke $r79.<java.util.HashMap: void <init>()>();

        virtualinvoke $r78.<java.util.LinkedList: boolean add(java.lang.Object)>($r77);

        $r9 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $r9.<org.apache.lucene.util.automaton.State: boolean accept> = z2;

        $r10 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        interfaceinvoke $r79.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r77, $r10);

        r60 = newarray (org.apache.lucene.util.automaton.State)[5];

        $r11 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        r60[0] = $r11;

        $r12 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $r12.<org.apache.lucene.util.automaton.State: int number> = 0;

        i20 = 1;

        $r80 = new org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet;

        specialinvoke $r80.<org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet: void <init>(org.apache.lucene.util.automaton.BasicOperations$1)>(null);

        $r81 = new org.apache.lucene.util.automaton.SortedIntSet;

        specialinvoke $r81.<org.apache.lucene.util.automaton.SortedIntSet: void <init>(int)>(5);

     label03:
        $i21 = virtualinvoke $r78.<java.util.LinkedList: int size()>();

        if $i21 <= 0 goto label29;

        $r15 = virtualinvoke $r78.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r16 = (org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet) $r15;

        i22 = 0;

     label04:
        $r17 = r16.<org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet: int[] values>;

        $i1 = lengthof $r17;

        if i22 >= $i1 goto label07;

        $r57 = r16.<org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet: int[] values>;

        $i18 = $r57[i22];

        r61 = $r1[$i18];

        i23 = 0;

     label05:
        $i19 = r61.<org.apache.lucene.util.automaton.State: int numTransitions>;

        if i23 >= $i19 goto label06;

        $r58 = r61.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        $r59 = $r58[i23];

        virtualinvoke $r80.<org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet: void add(org.apache.lucene.util.automaton.Transition)>($r59);

        i23 = i23 + 1;

        goto label05;

     label06:
        i22 = i22 + 1;

        goto label04;

     label07:
        $i2 = $r80.<org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet: int count>;

        if $i2 != 0 goto label08;

        goto label03;

     label08:
        virtualinvoke $r80.<org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet: void sort()>();

        $i33 = (int) -1;

        i24 = $i33;

        i25 = 0;

        r62 = r16.<org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet: org.apache.lucene.util.automaton.State state>;

        i26 = 0;

     label09:
        $i3 = $r80.<org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet: int count>;

        if i26 >= $i3 goto label27;

        $r23 = $r80.<org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet: org.apache.lucene.util.automaton.BasicOperations$PointTransitions[] points>;

        $r24 = $r23[i26];

        i6 = $r24.<org.apache.lucene.util.automaton.BasicOperations$PointTransitions: int point>;

        $i7 = $r81.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        if $i7 <= 0 goto label18;

        $z6 = <org.apache.lucene.util.automaton.BasicOperations: boolean $assertionsDisabled>;

        if $z6 != 0 goto label10;

        $i35 = (int) -1;

        if i24 != $i35 goto label10;

        $r82 = new java.lang.AssertionError;

        specialinvoke $r82.<java.lang.AssertionError: void <init>()>();

        throw $r82;

     label10:
        virtualinvoke $r81.<org.apache.lucene.util.automaton.SortedIntSet: void computeHash()>();

        $r43 = interfaceinvoke $r79.<java.util.Map: java.lang.Object get(java.lang.Object)>($r81);

        $r55 = (org.apache.lucene.util.automaton.State) $r43;

        r63 = $r55;

        if $r55 != null goto label14;

        $r83 = new org.apache.lucene.util.automaton.State;

        specialinvoke $r83.<org.apache.lucene.util.automaton.State: void <init>()>();

        r63 = $r83;

        $r54 = virtualinvoke $r81.<org.apache.lucene.util.automaton.SortedIntSet: org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet freeze(org.apache.lucene.util.automaton.State)>($r83);

        virtualinvoke $r78.<java.util.LinkedList: boolean add(java.lang.Object)>($r54);

        $i14 = lengthof r60;

        if i20 != $i14 goto label11;

        $i16 = 1 + i20;

        $i15 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i17 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i16, $i15);

        r64 = newarray (org.apache.lucene.util.automaton.State)[$i17];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r60, 0, r64, 0, i20);

        r60 = r64;

     label11:
        r60[i20] = $r83;

        $r83.<org.apache.lucene.util.automaton.State: int number> = i20;

        i20 = i20 + 1;

        if i25 <= 0 goto label12;

        $z10 = 1;

        goto label13;

     label12:
        $z10 = 0;

     label13:
        $r83.<org.apache.lucene.util.automaton.State: boolean accept> = $z10;

        interfaceinvoke $r79.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r54, $r83);

        goto label17;

     label14:
        $z7 = <org.apache.lucene.util.automaton.BasicOperations: boolean $assertionsDisabled>;

        if $z7 != 0 goto label17;

        if i25 <= 0 goto label15;

        $z11 = 1;

        goto label16;

     label15:
        $z11 = 0;

     label16:
        $z8 = $r55.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z11 == $z8 goto label17;

        $r85 = new java.lang.AssertionError;

        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("accCount=");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i25);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs existing accept=");

        $z9 = $r55.<org.apache.lucene.util.automaton.State: boolean accept>;

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z9);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" states=");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r81);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r85.<java.lang.AssertionError: void <init>(java.lang.Object)>($r52);

        throw $r85;

     label17:
        $r86 = new org.apache.lucene.util.automaton.Transition;

        $i27 = i6 - 1;

        specialinvoke $r86.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>(i24, $i27, r63);

        virtualinvoke r62.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r86);

     label18:
        $r66 = $r80.<org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet: org.apache.lucene.util.automaton.BasicOperations$PointTransitions[] points>;

        $r67 = $r66[i26];

        $r68 = $r67.<org.apache.lucene.util.automaton.BasicOperations$PointTransitions: org.apache.lucene.util.automaton.BasicOperations$TransitionList ends>;

        $r69 = $r68.<org.apache.lucene.util.automaton.BasicOperations$TransitionList: org.apache.lucene.util.automaton.Transition[] transitions>;

        $r70 = $r80.<org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet: org.apache.lucene.util.automaton.BasicOperations$PointTransitions[] points>;

        $r71 = $r70[i26];

        $r72 = $r71.<org.apache.lucene.util.automaton.BasicOperations$PointTransitions: org.apache.lucene.util.automaton.BasicOperations$TransitionList ends>;

        $i28 = $r72.<org.apache.lucene.util.automaton.BasicOperations$TransitionList: int count>;

        i29 = 0;

     label19:
        if i29 >= $i28 goto label22;

        r73 = $r69[i29];

        $r40 = r73.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $i11 = $r40.<org.apache.lucene.util.automaton.State: int number>;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $i12 = virtualinvoke $r41.<java.lang.Integer: int intValue()>();

        virtualinvoke $r81.<org.apache.lucene.util.automaton.SortedIntSet: void decr(int)>($i12);

        $i13 = i25;

        $r42 = r73.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $z5 = $r42.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z5 == 0 goto label20;

        $z12 = 1;

        goto label21;

     label20:
        $z12 = 0;

     label21:
        i25 = $i13 - $z12;

        i29 = i29 + 1;

        goto label19;

     label22:
        $r25 = $r80.<org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet: org.apache.lucene.util.automaton.BasicOperations$PointTransitions[] points>;

        $r26 = $r25[i26];

        $r27 = $r26.<org.apache.lucene.util.automaton.BasicOperations$PointTransitions: org.apache.lucene.util.automaton.BasicOperations$TransitionList ends>;

        $r27.<org.apache.lucene.util.automaton.BasicOperations$TransitionList: int count> = 0;

        $r28 = $r80.<org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet: org.apache.lucene.util.automaton.BasicOperations$PointTransitions[] points>;

        $r29 = $r28[i26];

        $r30 = $r29.<org.apache.lucene.util.automaton.BasicOperations$PointTransitions: org.apache.lucene.util.automaton.BasicOperations$TransitionList starts>;

        r74 = $r30.<org.apache.lucene.util.automaton.BasicOperations$TransitionList: org.apache.lucene.util.automaton.Transition[] transitions>;

        $r31 = $r80.<org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet: org.apache.lucene.util.automaton.BasicOperations$PointTransitions[] points>;

        $r32 = $r31[i26];

        $r33 = $r32.<org.apache.lucene.util.automaton.BasicOperations$PointTransitions: org.apache.lucene.util.automaton.BasicOperations$TransitionList starts>;

        i30 = $r33.<org.apache.lucene.util.automaton.BasicOperations$TransitionList: int count>;

        i31 = 0;

     label23:
        if i31 >= i30 goto label26;

        r75 = r74[i31];

        $r37 = r75.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $i8 = $r37.<org.apache.lucene.util.automaton.State: int number>;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $i9 = virtualinvoke $r38.<java.lang.Integer: int intValue()>();

        virtualinvoke $r81.<org.apache.lucene.util.automaton.SortedIntSet: void incr(int)>($i9);

        $i10 = i25;

        $r39 = r75.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $z4 = $r39.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z4 == 0 goto label24;

        $z13 = 1;

        goto label25;

     label24:
        $z13 = 0;

     label25:
        i25 = $i10 + $z13;

        i31 = i31 + 1;

        goto label23;

     label26:
        i24 = i6;

        $r34 = $r80.<org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet: org.apache.lucene.util.automaton.BasicOperations$PointTransitions[] points>;

        $r35 = $r34[i26];

        $r36 = $r35.<org.apache.lucene.util.automaton.BasicOperations$PointTransitions: org.apache.lucene.util.automaton.BasicOperations$TransitionList starts>;

        $r36.<org.apache.lucene.util.automaton.BasicOperations$TransitionList: int count> = 0;

        i26 = i26 + 1;

        goto label09;

     label27:
        virtualinvoke $r80.<org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet: void reset()>();

        $z3 = <org.apache.lucene.util.automaton.BasicOperations: boolean $assertionsDisabled>;

        if $z3 != 0 goto label28;

        $i4 = $r81.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        if $i4 == 0 goto label28;

        $r88 = new java.lang.AssertionError;

        $r87 = new java.lang.StringBuilder;

        specialinvoke $r87.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("upto=");

        $i5 = $r81.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r88.<java.lang.AssertionError: void <init>(java.lang.Object)>($r22);

        throw $r88;

     label28:
        goto label03;

     label29:
        r0.<org.apache.lucene.util.automaton.Automaton: boolean deterministic> = 1;

        virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: void setNumberedStates(org.apache.lucene.util.automaton.State[],int)>(r60, i20);

        return;
    }

    public static void addEpsilons(org.apache.lucene.util.automaton.Automaton, java.util.Collection)
    {
        org.apache.lucene.util.automaton.StatePair $r20, $r31, r45, r48, r50;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.lucene.util.automaton.Automaton r0;
        java.util.Collection r3;
        java.util.HashMap $r1, $r2;
        java.util.HashSet $r6, r16, $r24, $r27, $r40, $r42, $r44, r46, r47, r49;
        java.util.LinkedList $r5;
        java.util.Iterator $r4, $r7, $r17, $r28;
        org.apache.lucene.util.automaton.State $r9, $r10, $r12, $r14, r19, $r21, $r22, $r26, r30, $r32, $r34, $r36, $r37, $r39, $r41, $r43;
        java.lang.Object $r8, $r11, $r13, $r15, $r18, $r23, $r25, $r29, $r33, $r35, $r38;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        r3 := @parameter1: java.util.Collection;

        virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: void expandSingleton()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r33 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r45 = (org.apache.lucene.util.automaton.StatePair) $r33;

        $r34 = r45.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s1>;

        $r35 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r34);

        r46 = (java.util.HashSet) $r35;

        if r46 != null goto label02;

        $r42 = new java.util.HashSet;

        specialinvoke $r42.<java.util.HashSet: void <init>()>();

        r46 = $r42;

        $r43 = r45.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s1>;

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r43, $r42);

     label02:
        $r36 = r45.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s2>;

        virtualinvoke r46.<java.util.HashSet: boolean add(java.lang.Object)>($r36);

        $r37 = r45.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s2>;

        $r38 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r37);

        $r44 = (java.util.HashSet) $r38;

        r47 = $r44;

        if $r44 != null goto label03;

        $r40 = new java.util.HashSet;

        specialinvoke $r40.<java.util.HashSet: void <init>()>();

        r47 = $r40;

        $r41 = r45.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s2>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r41, $r40);

     label03:
        $r39 = r45.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s1>;

        virtualinvoke r47.<java.util.HashSet: boolean add(java.lang.Object)>($r39);

        goto label01;

     label04:
        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>(java.util.Collection)>(r3);

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>(java.util.Collection)>(r3);

     label05:
        $z1 = virtualinvoke $r5.<java.util.LinkedList: boolean isEmpty()>();

        if $z1 != 0 goto label11;

        $r11 = virtualinvoke $r5.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r48 = (org.apache.lucene.util.automaton.StatePair) $r11;

        virtualinvoke $r6.<java.util.HashSet: boolean remove(java.lang.Object)>(r48);

        $r12 = r48.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s2>;

        $r13 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r12);

        r49 = (java.util.HashSet) $r13;

        $r14 = r48.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s1>;

        $r15 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r14);

        r16 = (java.util.HashSet) $r15;

        if r49 == null goto label10;

        $r17 = virtualinvoke r49.<java.util.HashSet: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.lucene.util.automaton.State) $r18;

        $r20 = new org.apache.lucene.util.automaton.StatePair;

        $r21 = r48.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s1>;

        specialinvoke $r20.<org.apache.lucene.util.automaton.StatePair: void <init>(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State)>($r21, r19);

        $z4 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>($r20);

        if $z4 != 0 goto label09;

        interfaceinvoke r3.<java.util.Collection: boolean add(java.lang.Object)>($r20);

        $r22 = r48.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s1>;

        $r23 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r22);

        $r24 = (java.util.HashSet) $r23;

        virtualinvoke $r24.<java.util.HashSet: boolean add(java.lang.Object)>(r19);

        $r25 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r19);

        $r27 = (java.util.HashSet) $r25;

        $r26 = r48.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s1>;

        virtualinvoke $r27.<java.util.HashSet: boolean add(java.lang.Object)>($r26);

        virtualinvoke $r5.<java.util.LinkedList: boolean add(java.lang.Object)>($r20);

        virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>($r20);

        if r16 == null goto label09;

        $r28 = virtualinvoke r16.<java.util.HashSet: java.util.Iterator iterator()>();

     label07:
        $z5 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label09;

        $r29 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r30 = (org.apache.lucene.util.automaton.State) $r29;

        $r31 = new org.apache.lucene.util.automaton.StatePair;

        $r32 = r48.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s1>;

        specialinvoke $r31.<org.apache.lucene.util.automaton.StatePair: void <init>(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State)>(r30, $r32);

        $z6 = virtualinvoke $r6.<java.util.HashSet: boolean contains(java.lang.Object)>($r31);

        if $z6 != 0 goto label08;

        virtualinvoke $r5.<java.util.LinkedList: boolean add(java.lang.Object)>($r31);

        virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>($r31);

     label08:
        goto label07;

     label09:
        goto label06;

     label10:
        goto label05;

     label11:
        $r7 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r50 = (org.apache.lucene.util.automaton.StatePair) $r8;

        $r10 = r50.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s1>;

        $r9 = r50.<org.apache.lucene.util.automaton.StatePair: org.apache.lucene.util.automaton.State s2>;

        virtualinvoke $r10.<org.apache.lucene.util.automaton.State: void addEpsilon(org.apache.lucene.util.automaton.State)>($r9);

        goto label12;

     label13:
        r0.<org.apache.lucene.util.automaton.Automaton: boolean deterministic> = 0;

        virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: void clearNumberedStates()>();

        virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: void checkMinimizeAlways()>();

        return;
    }

    public static boolean isEmptyString(org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Automaton r0;
        org.apache.lucene.util.automaton.State $r1, $r2;
        int $i0, $i1;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label3;

        $r3 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        $r1 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $z1 = $r1.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z1 == 0 goto label4;

        $r2 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.util.automaton.State: int numTransitions()>();

        if $i0 != 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    public static boolean isEmpty(org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Automaton r0;
        int $i0;
        org.apache.lucene.util.automaton.State $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $z1 = $r1.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z1 != 0 goto label2;

        $r2 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.util.automaton.State: int numTransitions()>();

        if $i0 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static boolean isTotal(org.apache.lucene.util.automaton.Automaton)
    {
        java.lang.Iterable $r4;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5;
        org.apache.lucene.util.automaton.Automaton r0;
        org.apache.lucene.util.automaton.Transition r7;
        org.apache.lucene.util.automaton.State $r1, $r2, $r3, $r8, $r9;
        java.lang.Object $r6;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $z1 = $r1.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z1 == 0 goto label4;

        $r2 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.util.automaton.State: int numTransitions()>();

        if $i0 != 1 goto label4;

        $r3 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.util.automaton.State: java.lang.Iterable getTransitions()>();

        $r5 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.util.automaton.Transition) $r6;

        $r9 = r7.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $r8 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        if $r9 != $r8 goto label2;

        $i1 = r7.<org.apache.lucene.util.automaton.Transition: int min>;

        if $i1 != 0 goto label2;

        $i2 = r7.<org.apache.lucene.util.automaton.Transition: int max>;

        if $i2 != 1114111 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        return 0;
    }

    public static boolean run(org.apache.lucene.util.automaton.Automaton, java.lang.String)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8;
        org.apache.lucene.util.automaton.Automaton r0;
        java.util.ArrayList $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        java.lang.String r9, $r16;
        java.util.LinkedList $r2, $r3, r18, r19, r23;
        java.util.Iterator $r10, $r12;
        org.apache.lucene.util.automaton.State $r6, $r8, r14, $r15, r17, r22;
        org.apache.lucene.util.automaton.State[] $r1;
        java.lang.Object $r11, $r13;
        java.util.BitSet $r4, $r5, r20, r21, r24;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        r9 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label01;

        $r16 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $z7 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        return $z7;

     label01:
        $z1 = r0.<org.apache.lucene.util.automaton.Automaton: boolean deterministic>;

        if $z1 == 0 goto label05;

        r17 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        i10 = 0;

     label02:
        $i7 = virtualinvoke r9.<java.lang.String: int length()>();

        if i10 >= $i7 goto label04;

        $i8 = virtualinvoke r9.<java.lang.String: int codePointAt(int)>(i10);

        $r15 = virtualinvoke r17.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.State step(int)>($i8);

        if $r15 != null goto label03;

        return 0;

     label03:
        r17 = $r15;

        $i9 = staticinvoke <java.lang.Character: int charCount(int)>($i8);

        i10 = i10 + $i9;

        goto label02;

     label04:
        $z6 = r17.<org.apache.lucene.util.automaton.State: boolean accept>;

        return $z6;

     label05:
        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r18 = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r19 = $r3;

        $r4 = new java.util.BitSet;

        $i0 = lengthof $r1;

        specialinvoke $r4.<java.util.BitSet: void <init>(int)>($i0);

        r20 = $r4;

        $r5 = new java.util.BitSet;

        $i1 = lengthof $r1;

        specialinvoke $r5.<java.util.BitSet: void <init>(int)>($i1);

        r21 = $r5;

        $r6 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r6);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        z8 = $r8.<org.apache.lucene.util.automaton.State: boolean accept>;

        i11 = 0;

     label06:
        $i2 = virtualinvoke r9.<java.lang.String: int length()>();

        if i11 >= $i2 goto label13;

        $i3 = virtualinvoke r9.<java.lang.String: int codePointAt(int)>(i11);

        z8 = 0;

        virtualinvoke r19.<java.util.LinkedList: void clear()>();

        virtualinvoke r21.<java.util.BitSet: void clear()>();

        $r10 = virtualinvoke r18.<java.util.LinkedList: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.apache.lucene.util.automaton.State) $r11;

        virtualinvoke $r7.<java.util.ArrayList: void clear()>();

        virtualinvoke r22.<org.apache.lucene.util.automaton.State: void step(int,java.util.Collection)>($i3, $r7);

        $r12 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label08:
        $z3 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.apache.lucene.util.automaton.State) $r13;

        $z4 = r14.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z4 == 0 goto label09;

        z8 = 1;

     label09:
        $i5 = r14.<org.apache.lucene.util.automaton.State: int number>;

        $z5 = virtualinvoke r21.<java.util.BitSet: boolean get(int)>($i5);

        if $z5 != 0 goto label10;

        $i6 = r14.<org.apache.lucene.util.automaton.State: int number>;

        virtualinvoke r21.<java.util.BitSet: void set(int)>($i6);

        virtualinvoke r19.<java.util.LinkedList: boolean add(java.lang.Object)>(r14);

     label10:
        goto label08;

     label11:
        goto label07;

     label12:
        r23 = r18;

        r18 = r19;

        r19 = r23;

        r24 = r20;

        r20 = r21;

        r21 = r24;

        $i4 = staticinvoke <java.lang.Character: int charCount(int)>($i3);

        i11 = i11 + $i4;

        goto label06;

     label13:
        return z8;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/automaton/BasicOperations;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.automaton.BasicOperations: boolean $assertionsDisabled> = $z1;

        return;
    }
}
