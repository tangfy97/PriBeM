public class org.dom4j.dom.DOMText extends org.dom4j.tree.DefaultText implements org.w3c.dom.Text
{

    public void <init>(java.lang.String)
    {
        org.dom4j.dom.DOMText r0;
        java.lang.String r1;

        r0 := @this: org.dom4j.dom.DOMText;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.dom4j.tree.DefaultText: void <init>(java.lang.String)>(r1);

        return;
    }

    public void <init>(org.dom4j.Element, java.lang.String)
    {
        org.dom4j.dom.DOMText r0;
        org.dom4j.Element r1;
        java.lang.String r2;

        r0 := @this: org.dom4j.dom.DOMText;

        r1 := @parameter0: org.dom4j.Element;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.dom4j.tree.DefaultText: void <init>(org.dom4j.Element,java.lang.String)>(r1, r2);

        return;
    }

    public boolean supports(java.lang.String, java.lang.String)
    {
        org.dom4j.dom.DOMText r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMText;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.dom4j.dom.DOMNodeHelper: boolean supports(org.dom4j.Node,java.lang.String,java.lang.String)>(r0, r1, r2);

        return $z0;
    }

    public java.lang.String getNamespaceURI()
    {
        org.dom4j.dom.DOMText r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.dom.DOMText;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: java.lang.String getNamespaceURI(org.dom4j.Node)>(r0);

        return $r1;
    }

    public java.lang.String getPrefix()
    {
        org.dom4j.dom.DOMText r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.dom.DOMText;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: java.lang.String getPrefix(org.dom4j.Node)>(r0);

        return $r1;
    }

    public void setPrefix(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMText r0;
        java.lang.String r1;

        r0 := @this: org.dom4j.dom.DOMText;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void setPrefix(org.dom4j.Node,java.lang.String)>(r0, r1);

        return;
    }

    public java.lang.String getLocalName()
    {
        org.dom4j.dom.DOMText r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.dom.DOMText;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: java.lang.String getLocalName(org.dom4j.Node)>(r0);

        return $r1;
    }

    public java.lang.String getNodeName()
    {
        org.dom4j.dom.DOMText r0;

        r0 := @this: org.dom4j.dom.DOMText;

        return "#text";
    }

    public java.lang.String getNodeValue() throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMText r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.dom.DOMText;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: java.lang.String getNodeValue(org.dom4j.Node)>(r0);

        return $r1;
    }

    public void setNodeValue(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMText r0;
        java.lang.String r1;

        r0 := @this: org.dom4j.dom.DOMText;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void setNodeValue(org.dom4j.Node,java.lang.String)>(r0, r1);

        return;
    }

    public org.w3c.dom.Node getParentNode()
    {
        org.dom4j.dom.DOMText r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMText;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getParentNode(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.NodeList getChildNodes()
    {
        org.dom4j.dom.DOMText r0;
        org.w3c.dom.NodeList $r1;

        r0 := @this: org.dom4j.dom.DOMText;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.NodeList getChildNodes(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.Node getFirstChild()
    {
        org.dom4j.dom.DOMText r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMText;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getFirstChild(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.Node getLastChild()
    {
        org.dom4j.dom.DOMText r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMText;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getLastChild(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.Node getPreviousSibling()
    {
        org.dom4j.dom.DOMText r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMText;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getPreviousSibling(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.Node getNextSibling()
    {
        org.dom4j.dom.DOMText r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMText;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getNextSibling(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.NamedNodeMap getAttributes()
    {
        org.dom4j.dom.DOMText r0;

        r0 := @this: org.dom4j.dom.DOMText;

        return null;
    }

    public org.w3c.dom.Document getOwnerDocument()
    {
        org.dom4j.dom.DOMText r0;
        org.w3c.dom.Document $r1;

        r0 := @this: org.dom4j.dom.DOMText;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Document getOwnerDocument(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.Node insertBefore(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.w3c.dom.Node r1, r2, $r3;
        org.dom4j.dom.DOMText r0;

        r0 := @this: org.dom4j.dom.DOMText;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.w3c.dom.Node;

        specialinvoke r0.<org.dom4j.dom.DOMText: void checkNewChildNode(org.w3c.dom.Node)>(r1);

        $r3 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node insertBefore(org.dom4j.Node,org.w3c.dom.Node,org.w3c.dom.Node)>(r0, r1, r2);

        return $r3;
    }

    public org.w3c.dom.Node replaceChild(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.w3c.dom.Node r1, r2, $r3;
        org.dom4j.dom.DOMText r0;

        r0 := @this: org.dom4j.dom.DOMText;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.w3c.dom.Node;

        specialinvoke r0.<org.dom4j.dom.DOMText: void checkNewChildNode(org.w3c.dom.Node)>(r1);

        $r3 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node replaceChild(org.dom4j.Node,org.w3c.dom.Node,org.w3c.dom.Node)>(r0, r1, r2);

        return $r3;
    }

    public org.w3c.dom.Node removeChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMText r0;
        org.w3c.dom.Node r1, $r2;

        r0 := @this: org.dom4j.dom.DOMText;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node removeChild(org.dom4j.Node,org.w3c.dom.Node)>(r0, r1);

        return $r2;
    }

    public org.w3c.dom.Node appendChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMText r0;
        org.w3c.dom.Node r1, $r2;

        r0 := @this: org.dom4j.dom.DOMText;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.dom4j.dom.DOMText: void checkNewChildNode(org.w3c.dom.Node)>(r1);

        $r2 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node appendChild(org.dom4j.Node,org.w3c.dom.Node)>(r0, r1);

        return $r2;
    }

    private void checkNewChildNode(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMText r1;
        org.w3c.dom.DOMException $r0;
        org.w3c.dom.Node r2;

        r1 := @this: org.dom4j.dom.DOMText;

        r2 := @parameter0: org.w3c.dom.Node;

        $r0 = new org.w3c.dom.DOMException;

        specialinvoke $r0.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, "Text nodes cannot have children");

        throw $r0;
    }

    public boolean hasChildNodes()
    {
        org.dom4j.dom.DOMText r0;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMText;

        $z0 = staticinvoke <org.dom4j.dom.DOMNodeHelper: boolean hasChildNodes(org.dom4j.Node)>(r0);

        return $z0;
    }

    public org.w3c.dom.Node cloneNode(boolean)
    {
        org.dom4j.dom.DOMText r0;
        boolean z0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMText;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node cloneNode(org.dom4j.Node,boolean)>(r0, z0);

        return $r1;
    }

    public void normalize()
    {
        org.dom4j.dom.DOMText r0;

        r0 := @this: org.dom4j.dom.DOMText;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void normalize(org.dom4j.Node)>(r0);

        return;
    }

    public boolean isSupported(java.lang.String, java.lang.String)
    {
        org.dom4j.dom.DOMText r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMText;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.dom4j.dom.DOMNodeHelper: boolean isSupported(org.dom4j.Node,java.lang.String,java.lang.String)>(r0, r1, r2);

        return $z0;
    }

    public boolean hasAttributes()
    {
        org.dom4j.dom.DOMText r0;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMText;

        $z0 = staticinvoke <org.dom4j.dom.DOMNodeHelper: boolean hasAttributes(org.dom4j.Node)>(r0);

        return $z0;
    }

    public java.lang.String getData() throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMText r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.dom.DOMText;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: java.lang.String getData(org.dom4j.CharacterData)>(r0);

        return $r1;
    }

    public void setData(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMText r0;
        java.lang.String r1;

        r0 := @this: org.dom4j.dom.DOMText;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void setData(org.dom4j.CharacterData,java.lang.String)>(r0, r1);

        return;
    }

    public int getLength()
    {
        int $i0;
        org.dom4j.dom.DOMText r0;

        r0 := @this: org.dom4j.dom.DOMText;

        $i0 = staticinvoke <org.dom4j.dom.DOMNodeHelper: int getLength(org.dom4j.CharacterData)>(r0);

        return $i0;
    }

    public java.lang.String substringData(int, int) throws org.w3c.dom.DOMException
    {
        int i0, i1;
        org.dom4j.dom.DOMText r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.dom.DOMText;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: java.lang.String substringData(org.dom4j.CharacterData,int,int)>(r0, i0, i1);

        return $r1;
    }

    public void appendData(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMText r0;
        java.lang.String r1;

        r0 := @this: org.dom4j.dom.DOMText;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void appendData(org.dom4j.CharacterData,java.lang.String)>(r0, r1);

        return;
    }

    public void insertData(int, java.lang.String) throws org.w3c.dom.DOMException
    {
        int i0;
        org.dom4j.dom.DOMText r0;
        java.lang.String r1;

        r0 := @this: org.dom4j.dom.DOMText;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void insertData(org.dom4j.CharacterData,int,java.lang.String)>(r0, i0, r1);

        return;
    }

    public void deleteData(int, int) throws org.w3c.dom.DOMException
    {
        int i0, i1;
        org.dom4j.dom.DOMText r0;

        r0 := @this: org.dom4j.dom.DOMText;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void deleteData(org.dom4j.CharacterData,int,int)>(r0, i0, i1);

        return;
    }

    public void replaceData(int, int, java.lang.String) throws org.w3c.dom.DOMException
    {
        int i0, i1;
        org.dom4j.dom.DOMText r0;
        java.lang.String r1;

        r0 := @this: org.dom4j.dom.DOMText;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void replaceData(org.dom4j.CharacterData,int,int,java.lang.String)>(r0, i0, i1, r1);

        return;
    }

    public org.w3c.dom.Text splitText(int) throws org.w3c.dom.DOMException
    {
        org.w3c.dom.Text $r11;
        org.dom4j.dom.DOMText r0;
        java.lang.StringBuffer $r3, $r4, $r5, $r13, $r14, $r15;
        org.w3c.dom.DOMException $r2, $r12;
        int i0, $i1;
        java.lang.String $r1, $r6, $r7, $r8, $r16;
        boolean $z0;
        org.dom4j.Text $r10;
        org.dom4j.Element $r9;

        r0 := @this: org.dom4j.dom.DOMText;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.dom4j.dom.DOMText: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r12 = new org.w3c.dom.DOMException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CharacterData node is read only: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(7, $r16);

        throw $r12;

     label1:
        $r1 = virtualinvoke r0.<org.dom4j.dom.DOMText: java.lang.String getText()>();

        if $r1 == null goto label2;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        goto label3;

     label2:
        $i1 = 0;

     label3:
        if i0 < 0 goto label4;

        if i0 < $i1 goto label5;

     label4:
        $r2 = new org.w3c.dom.DOMException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No text at offset: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(1, $r6);

        throw $r2;

     label5:
        $r7 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r8 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(i0);

        virtualinvoke r0.<org.dom4j.dom.DOMText: void setText(java.lang.String)>($r7);

        $r9 = virtualinvoke r0.<org.dom4j.dom.DOMText: org.dom4j.Element getParent()>();

        $r10 = virtualinvoke r0.<org.dom4j.dom.DOMText: org.dom4j.Text createText(java.lang.String)>($r8);

        if $r9 == null goto label6;

        interfaceinvoke $r9.<org.dom4j.Element: void add(org.dom4j.Text)>($r10);

     label6:
        $r11 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Text asDOMText(org.dom4j.CharacterData)>($r10);

        return $r11;
    }

    protected org.dom4j.Text createText(java.lang.String)
    {
        org.dom4j.dom.DOMText $r0, r2;
        java.lang.String r1;

        r2 := @this: org.dom4j.dom.DOMText;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.dom4j.dom.DOMText;

        specialinvoke $r0.<org.dom4j.dom.DOMText: void <init>(java.lang.String)>(r1);

        return $r0;
    }
}
