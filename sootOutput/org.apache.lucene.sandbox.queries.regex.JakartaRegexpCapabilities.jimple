public class org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities extends java.lang.Object implements org.apache.lucene.sandbox.queries.regex.RegexCapabilities
{
    private static java.lang.reflect.Field prefixField;
    private static java.lang.reflect.Method getPrefixMethod;
    private int flags;
    public static final int FLAG_MATCH_NORMAL;
    public static final int FLAG_MATCH_CASEINDEPENDENT;

    public void <init>()
    {
        org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities r0;

        r0 := @this: org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities: int flags> = 0;

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities r0;

        r0 := @this: org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities: int flags> = 0;

        r0.<org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities: int flags> = i0;

        return;
    }

    public org.apache.lucene.sandbox.queries.regex.RegexCapabilities$RegexMatcher compile(java.lang.String)
    {
        org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities r1;
        org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities$JakartaRegexMatcher $r0;
        int $i0;
        java.lang.String r2;

        r1 := @this: org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities$JakartaRegexMatcher;

        $i0 = r1.<org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities: int flags>;

        specialinvoke $r0.<org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities$JakartaRegexMatcher: void <init>(org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities,java.lang.String,int)>(r1, r2, $i0);

        return $r0;
    }

    public int hashCode()
    {
        int $i0, i1;
        org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities r0;

        r0 := @this: org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities;

        $i0 = r0.<org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities: int flags>;

        i1 = 31 + $i0;

        return i1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities r0, r4;
        int $i0, $i1;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities) r1;

        $i1 = r0.<org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities: int flags>;

        $i0 = r4.<org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities: int flags>;

        if $i1 != $i0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    static java.lang.reflect.Method access$100()
    {
        java.lang.reflect.Method $r0;

        $r0 = <org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities: java.lang.reflect.Method getPrefixMethod>;

        return $r0;
    }

    static java.lang.reflect.Field access$200()
    {
        java.lang.reflect.Field $r0;

        $r0 = <org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities: java.lang.reflect.Field prefixField>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r0;
        java.lang.reflect.Field $r4, $r5;
        java.lang.Exception $r6, $r7;
        java.lang.Class $r1, $r3;
        java.lang.reflect.Method $r2;

        <org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities: int FLAG_MATCH_CASEINDEPENDENT> = 1;

        <org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities: int FLAG_MATCH_NORMAL> = 0;

     label1:
        $r1 = class "Lorg/apache/regexp/REProgram;";

        $r0 = newarray (java.lang.Class)[0];

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getPrefix", $r0);

        <org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities: java.lang.reflect.Method getPrefixMethod> = $r2;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        <org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities: java.lang.reflect.Method getPrefixMethod> = null;

     label4:
        $r3 = class "Lorg/apache/regexp/REProgram;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("prefix");

        <org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities: java.lang.reflect.Field prefixField> = $r4;

        $r5 = <org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities: java.lang.reflect.Field prefixField>;

        virtualinvoke $r5.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

        <org.apache.lucene.sandbox.queries.regex.JakartaRegexpCapabilities: java.lang.reflect.Field prefixField> = null;

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }
}
