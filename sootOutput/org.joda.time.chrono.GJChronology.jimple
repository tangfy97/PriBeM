public final class org.joda.time.chrono.GJChronology extends org.joda.time.chrono.AssembledChronology
{
    private static final long serialVersionUID;
    static final org.joda.time.Instant DEFAULT_CUTOVER;
    private static final java.util.Map cCache;
    private org.joda.time.chrono.JulianChronology iJulianChronology;
    private org.joda.time.chrono.GregorianChronology iGregorianChronology;
    private org.joda.time.Instant iCutoverInstant;
    private long iCutoverMillis;
    private long iGapDuration;

    private static long convertByYear(long, org.joda.time.Chronology, org.joda.time.Chronology)
    {
        org.joda.time.Chronology r0, r1;
        long l0, $l5;
        int $i1, $i2, $i3, $i4;
        org.joda.time.DateTimeField $r2, $r3, $r4, $r5;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.Chronology;

        r0 := @parameter2: org.joda.time.Chronology;

        $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0);

        $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $i2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>(l0);

        $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $i3 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>(l0);

        $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $i4 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>(l0);

        $l5 = virtualinvoke r0.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>($i1, $i2, $i3, $i4);

        return $l5;
    }

    private static long convertByWeekyear(long, org.joda.time.Chronology, org.joda.time.Chronology)
    {
        long l0, $l2, $l4, $l6, $l8;
        int $i1, $i3, $i5, $i7;
        org.joda.time.DateTimeField $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        org.joda.time.Chronology r0, r2;

        l0 := @parameter0: long;

        r2 := @parameter1: org.joda.time.Chronology;

        r0 := @parameter2: org.joda.time.Chronology;

        $r1 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        $r3 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>(l0);

        $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(0L, $i1);

        $r4 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        $r5 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        $i3 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>(l0);

        $l4 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>($l2, $i3);

        $r6 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        $i5 = virtualinvoke $r7.<org.joda.time.DateTimeField: int get(long)>(l0);

        $l6 = virtualinvoke $r6.<org.joda.time.DateTimeField: long set(long,int)>($l4, $i5);

        $r8 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $i7 = virtualinvoke $r9.<org.joda.time.DateTimeField: int get(long)>(l0);

        $l8 = virtualinvoke $r8.<org.joda.time.DateTimeField: long set(long,int)>($l6, $i7);

        return $l8;
    }

    public static org.joda.time.chrono.GJChronology getInstanceUTC()
    {
        org.joda.time.DateTimeZone $r1;
        org.joda.time.chrono.GJChronology $r2;
        org.joda.time.Instant $r0;

        $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r0 = <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER>;

        $r2 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>($r1, $r0, 4);

        return $r2;
    }

    public static org.joda.time.chrono.GJChronology getInstance()
    {
        org.joda.time.DateTimeZone $r0;
        org.joda.time.chrono.GJChronology $r2;
        org.joda.time.Instant $r1;

        $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        $r1 = <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER>;

        $r2 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>($r0, $r1, 4);

        return $r2;
    }

    public static org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.chrono.GJChronology $r2;
        org.joda.time.Instant $r1;

        r0 := @parameter0: org.joda.time.DateTimeZone;

        $r1 = <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER>;

        $r2 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>(r0, $r1, 4);

        return $r2;
    }

    public static org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone, org.joda.time.ReadableInstant)
    {
        org.joda.time.ReadableInstant r1;
        org.joda.time.DateTimeZone r0;
        org.joda.time.chrono.GJChronology $r2;

        r0 := @parameter0: org.joda.time.DateTimeZone;

        r1 := @parameter1: org.joda.time.ReadableInstant;

        $r2 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>(r0, r1, 4);

        return $r2;
    }

    public static synchronized org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone, org.joda.time.ReadableInstant, int)
    {
        org.joda.time.chrono.ZonedChronology $r8;
        org.joda.time.DateTimeZone $r0, $r4, $r5, r20;
        java.util.ArrayList $r19, r22, $r25;
        org.joda.time.chrono.GJChronology $r6, r23, r24, $r26, $r27;
        java.util.Map $r2, $r18;
        int i0, $i1, i2, $i4;
        org.joda.time.chrono.JulianChronology $r11, $r13;
        boolean $z0;
        org.joda.time.ReadableInstant r1;
        org.joda.time.chrono.GregorianChronology $r10, $r14;
        org.joda.time.Instant $r9, $r16, r21;
        java.lang.Object $r3, $r15;

        r20 := @parameter0: org.joda.time.DateTimeZone;

        r1 := @parameter1: org.joda.time.ReadableInstant;

        i0 := @parameter2: int;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r20);

        if r1 != null goto label1;

        r21 = <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER>;

        goto label2;

     label1:
        r21 = interfaceinvoke r1.<org.joda.time.ReadableInstant: org.joda.time.Instant toInstant()>();

     label2:
        $r2 = <org.joda.time.chrono.GJChronology: java.util.Map cCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r19 = (java.util.ArrayList) $r3;

        r22 = $r19;

        if $r19 != null goto label3;

        $r25 = new java.util.ArrayList;

        specialinvoke $r25.<java.util.ArrayList: void <init>(int)>(2);

        r22 = $r25;

        $r18 = <org.joda.time.chrono.GJChronology: java.util.Map cCache>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r25);

        goto label5;

     label3:
        i2 = virtualinvoke $r19.<java.util.ArrayList: int size()>();

     label4:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        if i2 < 0 goto label5;

        $r15 = virtualinvoke $r19.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r23 = (org.joda.time.chrono.GJChronology) $r15;

        $i1 = virtualinvoke r23.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>();

        if i0 != $i1 goto label4;

        $r16 = virtualinvoke r23.<org.joda.time.chrono.GJChronology: org.joda.time.Instant getGregorianCutover()>();

        $z0 = virtualinvoke r21.<org.joda.time.Instant: boolean equals(java.lang.Object)>($r16);

        if $z0 == 0 goto label4;

        return r23;

     label5:
        $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        if $r0 != $r4 goto label6;

        $r26 = new org.joda.time.chrono.GJChronology;

        $r13 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, i0);

        $r14 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, i0);

        specialinvoke $r26.<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>($r13, $r14, r21);

        r24 = $r26;

        goto label7;

     label6:
        $r5 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r6 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>($r5, r21, i0);

        $r27 = new org.joda.time.chrono.GJChronology;

        $r8 = staticinvoke <org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>($r6, $r0);

        $r11 = $r6.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>;

        $r10 = $r6.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $r9 = $r6.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant>;

        specialinvoke $r27.<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>($r8, $r11, $r10, $r9);

        r24 = $r27;

     label7:
        virtualinvoke r22.<java.util.ArrayList: boolean add(java.lang.Object)>(r24);

        return r24;
    }

    public static org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone, long, int)
    {
        org.joda.time.DateTimeZone r2;
        long l0, $l1;
        org.joda.time.chrono.GJChronology $r3;
        byte $b2;
        org.joda.time.Instant $r0, $r1, r4;
        int i3;

        r2 := @parameter0: org.joda.time.DateTimeZone;

        l0 := @parameter1: long;

        i3 := @parameter2: int;

        $r0 = <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER>;

        $l1 = virtualinvoke $r0.<org.joda.time.Instant: long getMillis()>();

        $b2 = l0 cmp $l1;

        if $b2 != 0 goto label1;

        r4 = null;

        goto label2;

     label1:
        $r1 = new org.joda.time.Instant;

        specialinvoke $r1.<org.joda.time.Instant: void <init>(long)>(l0);

        r4 = $r1;

     label2:
        $r3 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>(r2, r4, i3);

        return $r3;
    }

    private void <init>(org.joda.time.chrono.JulianChronology, org.joda.time.chrono.GregorianChronology, org.joda.time.Instant)
    {
        org.joda.time.chrono.GJChronology r0;
        java.lang.Object[] $r1;
        org.joda.time.chrono.GregorianChronology r3;
        org.joda.time.Instant r4;
        org.joda.time.chrono.JulianChronology r2;

        r0 := @this: org.joda.time.chrono.GJChronology;

        r2 := @parameter0: org.joda.time.chrono.JulianChronology;

        r3 := @parameter1: org.joda.time.chrono.GregorianChronology;

        r4 := @parameter2: org.joda.time.Instant;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r2;

        $r1[1] = r3;

        $r1[2] = r4;

        specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>(null, $r1);

        return;
    }

    private void <init>(org.joda.time.Chronology, org.joda.time.chrono.JulianChronology, org.joda.time.chrono.GregorianChronology, org.joda.time.Instant)
    {
        org.joda.time.chrono.GJChronology r0;
        java.lang.Object[] $r2;
        org.joda.time.chrono.GregorianChronology r4;
        org.joda.time.Instant r5;
        org.joda.time.Chronology r1;
        org.joda.time.chrono.JulianChronology r3;

        r0 := @this: org.joda.time.chrono.GJChronology;

        r1 := @parameter0: org.joda.time.Chronology;

        r3 := @parameter1: org.joda.time.chrono.JulianChronology;

        r4 := @parameter2: org.joda.time.chrono.GregorianChronology;

        r5 := @parameter3: org.joda.time.Instant;

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = r3;

        $r2[1] = r4;

        $r2[2] = r5;

        specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>(r1, $r2);

        return;
    }

    private java.lang.Object readResolve()
    {
        org.joda.time.chrono.GJChronology r0, $r3;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.Instant $r2;
        int $i0;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>();

        $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant>;

        $i0 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>();

        $r3 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>($r1, $r2, $i0);

        return $r3;
    }

    public org.joda.time.DateTimeZone getZone()
    {
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.DateTimeZone $r2, $r3;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        return $r3;

     label1:
        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r2;
    }

    public org.joda.time.Chronology withUTC()
    {
        org.joda.time.Chronology $r2;
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r1);

        return $r2;
    }

    public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.GJChronology r0, $r3;
        org.joda.time.DateTimeZone $r1, r4;
        org.joda.time.Instant $r2;
        int $i0;

        r0 := @this: org.joda.time.chrono.GJChronology;

        r4 := @parameter0: org.joda.time.DateTimeZone;

        if r4 != null goto label1;

        r4 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>();

        if r4 != $r1 goto label2;

        return r0;

     label2:
        $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant>;

        $i0 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>();

        $r3 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>(r4, $r2, $i0);

        return $r3;
    }

    public long getDateTimeMillis(int, int, int, int) throws java.lang.IllegalArgumentException
    {
        long $l4, $l5, $l7, $l8, $l10, l11;
        org.joda.time.chrono.GJChronology r0;
        byte $b6, $b9;
        int i0, i1, i2, i3, $i12, $i13;
        org.joda.time.chrono.JulianChronology $r3;
        org.joda.time.Chronology $r1;
        java.lang.IllegalArgumentException $r5;
        org.joda.time.chrono.GregorianChronology $r2;

        r0 := @this: org.joda.time.chrono.GJChronology;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>();

        if $r1 == null goto label1;

        $l10 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3);

        return $l10;

     label1:
        $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $l4 = virtualinvoke $r2.<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3);

        l11 = $l4;

        $l5 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $b6 = $l4 cmp $l5;

        $i12 = (int) $b6;

        if $i12 >= 0 goto label2;

        $r3 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>;

        $l7 = virtualinvoke $r3.<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3);

        l11 = $l7;

        $l8 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $b9 = $l7 cmp $l8;

        $i13 = (int) $b9;

        if $i13 < 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Specified date does not exist");

        throw $r5;

     label2:
        return l11;
    }

    public long getDateTimeMillis(int, int, int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        long $l7, $l8, $l10, $l11, $l13, l14;
        org.joda.time.chrono.GJChronology r0;
        byte $b9, $b12;
        int i0, i1, i2, i3, i4, i5, i6, $i15, $i16;
        org.joda.time.chrono.JulianChronology $r3;
        org.joda.time.Chronology $r1;
        java.lang.IllegalArgumentException $r5;
        org.joda.time.chrono.GregorianChronology $r2;

        r0 := @this: org.joda.time.chrono.GJChronology;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>();

        if $r1 == null goto label1;

        $l13 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6);

        return $l13;

     label1:
        $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $l7 = virtualinvoke $r2.<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6);

        l14 = $l7;

        $l8 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $b9 = $l7 cmp $l8;

        $i15 = (int) $b9;

        if $i15 >= 0 goto label2;

        $r3 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>;

        $l10 = virtualinvoke $r3.<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6);

        l14 = $l10;

        $l11 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $b12 = $l10 cmp $l11;

        $i16 = (int) $b12;

        if $i16 < 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Specified date does not exist");

        throw $r5;

     label2:
        return l14;
    }

    public org.joda.time.Instant getGregorianCutover()
    {
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.Instant $r1;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant>;

        return $r1;
    }

    public int getMinimumDaysInFirstWeek()
    {
        int $i0;
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.chrono.GregorianChronology $r1;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $i0 = virtualinvoke $r1.<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.GJChronology r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.GJChronology;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public int hashCode()
    {
        org.joda.time.chrono.GJChronology r1;
        org.joda.time.chrono.GregorianChronology $r3;
        org.joda.time.Instant $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r0;
        org.joda.time.chrono.JulianChronology $r2;

        r1 := @this: org.joda.time.chrono.GJChronology;

        $r0 = "GJ";

        $i0 = virtualinvoke $r0.<java.lang.String: int hashCode()>();

        $i1 = $i0 * 11;

        $r2 = r1.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>;

        $i2 = virtualinvoke $r2.<org.joda.time.chrono.JulianChronology: int hashCode()>();

        $i3 = $i1 + $i2;

        $r3 = r1.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $i4 = virtualinvoke $r3.<org.joda.time.chrono.GregorianChronology: int hashCode()>();

        $i5 = $i3 + $i4;

        $r4 = r1.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant>;

        $i6 = virtualinvoke $r4.<org.joda.time.Instant: int hashCode()>();

        $i7 = $i5 + $i6;

        return $i7;
    }

    public java.lang.String toString()
    {
        org.joda.time.DateTimeZone $r2;
        long $l0, $l1, $l4, $l5, $l7;
        org.joda.time.chrono.GJChronology r1;
        byte $b2, $b6;
        java.lang.StringBuffer $r0;
        int $i3, $i8;
        org.joda.time.DateTimeField $r7;
        java.lang.String $r3, $r5;
        org.joda.time.format.DateTimeFormatter $r9, r10;
        org.joda.time.Chronology $r6, $r8;
        org.joda.time.Instant $r4;

        r1 := @this: org.joda.time.chrono.GJChronology;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(60);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("GJChronology");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        $r2 = virtualinvoke r1.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>();

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $l0 = r1.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $r4 = <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER>;

        $l1 = virtualinvoke $r4.<org.joda.time.Instant: long getMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",cutover=");

        $r6 = virtualinvoke r1.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>();

        $r7 = virtualinvoke $r6.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>();

        $l4 = r1.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $l5 = virtualinvoke $r7.<org.joda.time.DateTimeField: long remainder(long)>($l4);

        $b6 = $l5 cmp 0L;

        if $b6 != 0 goto label1;

        r10 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>();

        goto label2;

     label1:
        r10 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>();

     label2:
        $r8 = virtualinvoke r1.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>();

        $r9 = virtualinvoke r10.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>($r8);

        $l7 = r1.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        virtualinvoke $r9.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>($r0, $l7);

     label3:
        $i8 = virtualinvoke r1.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>();

        if $i8 == 4 goto label4;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",mdfw=");

        $i3 = virtualinvoke r1.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

     label4:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        java.lang.Object[] r2;
        long $l0, $l3, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l24, $l25, $l26, $l27, $l28, $l29, $l30, $l31, $l32;
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.chrono.GJChronology$CutoverField $r12, $r16, $r20, $r55, $r59, $r62, $r65, $r68, $r71, $r74, $r77, $r80, $r83, $r86, $r89;
        org.joda.time.DateTimeField $r11, $r13, $r14, $r15, $r17, $r18, $r19, $r21, $r22, $r24, $r25, $r26, $r29, $r31, $r33, $r35, $r37, $r38, $r39, $r42, $r43, $r44, $r47, $r48, $r50, $r52, $r53, $r56, $r57, $r60, $r61, $r63, $r64, $r66, $r67, $r69, $r70, $r72, $r73, $r75, $r76, $r78, $r79, $r81, $r82, $r84, $r85, $r87, $r88, $r90, $r91;
        org.joda.time.chrono.GregorianChronology r6;
        org.joda.time.chrono.AssembledChronology$Fields r10;
        int $i1, $i2, $i8;
        org.joda.time.chrono.JulianChronology r4;
        org.joda.time.DurationField $r27, $r30, $r34, $r40, $r45, $r51, $r54, $r58;
        org.joda.time.Chronology $r9;
        java.lang.IllegalArgumentException $r92;
        org.joda.time.Instant r8;
        java.lang.Object $r1, $r3, $r5, $r7;
        org.joda.time.chrono.GJChronology$ImpreciseCutoverField $r23, $r28, $r32, $r36, $r41, $r46, $r49;

        r0 := @this: org.joda.time.chrono.GJChronology;

        r10 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: java.lang.Object getParam()>();

        r2 = (java.lang.Object[]) $r1;

        $r3 = r2[0];

        r4 = (org.joda.time.chrono.JulianChronology) $r3;

        $r5 = r2[1];

        r6 = (org.joda.time.chrono.GregorianChronology) $r5;

        $r7 = r2[2];

        r8 = (org.joda.time.Instant) $r7;

        $l0 = virtualinvoke r8.<org.joda.time.Instant: long getMillis()>();

        r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> = $l0;

        r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology> = r4;

        r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology> = r6;

        r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant> = r8;

        $r9 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>();

        if $r9 == null goto label1;

        return;

     label1:
        $i1 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>();

        $i2 = virtualinvoke r6.<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>();

        if $i1 == $i2 goto label2;

        $r92 = new java.lang.IllegalArgumentException;

        specialinvoke $r92.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r92;

     label2:
        $l4 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $l3 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $l5 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>($l3);

        $l6 = $l4 - $l5;

        r0.<org.joda.time.chrono.GJChronology: long iGapDuration> = $l6;

        virtualinvoke r10.<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>(r6);

        $r11 = virtualinvoke r6.<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeField millisOfDay()>();

        $l7 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $i8 = virtualinvoke $r11.<org.joda.time.DateTimeField: int get(long)>($l7);

        if $i8 != 0 goto label3;

        $r59 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r60 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField millisOfSecond()>();

        $r61 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>;

        $l22 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r59.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r60, $r61, $l22);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r59;

        $r62 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r63 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField millisOfDay()>();

        $r64 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>;

        $l23 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r62.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r63, $r64, $l23);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r62;

        $r65 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r66 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField secondOfMinute()>();

        $r67 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>;

        $l24 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r65.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r66, $r67, $l24);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r65;

        $r68 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r69 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField secondOfDay()>();

        $r70 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>;

        $l25 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r68.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r69, $r70, $l25);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r68;

        $r71 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r72 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField minuteOfHour()>();

        $r73 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>;

        $l26 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r71.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r72, $r73, $l26);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r71;

        $r74 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r75 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField minuteOfDay()>();

        $r76 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>;

        $l27 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r74.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r75, $r76, $l27);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r74;

        $r77 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r78 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField hourOfDay()>();

        $r79 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>;

        $l28 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r77.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r78, $r79, $l28);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r77;

        $r80 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r81 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField hourOfHalfday()>();

        $r82 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>;

        $l29 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r80.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r81, $r82, $l29);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r80;

        $r83 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r84 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField clockhourOfDay()>();

        $r85 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>;

        $l30 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r83.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r84, $r85, $l30);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r83;

        $r86 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r87 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField clockhourOfHalfday()>();

        $r88 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>;

        $l31 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r86.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r87, $r88, $l31);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r86;

        $r89 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r90 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField halfdayOfDay()>();

        $r91 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>;

        $l32 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r89.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r90, $r91, $l32);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r89;

     label3:
        $r12 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r13 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField era()>();

        $r14 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>;

        $l9 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r12.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r13, $r14, $l9);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r12;

        $r15 = virtualinvoke r6.<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeField year()>();

        $l10 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $l11 = virtualinvoke $r15.<org.joda.time.DateTimeField: long roundCeiling(long)>($l10);

        $r16 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r17 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField dayOfYear()>();

        $r18 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>;

        specialinvoke $r16.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r17, $r18, $l11);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r16;

        $r19 = virtualinvoke r6.<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeField weekyear()>();

        $l12 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $l13 = virtualinvoke $r19.<org.joda.time.DateTimeField: long roundCeiling(long)>($l12);

        $r20 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r21 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        $r22 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>;

        specialinvoke $r20.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>(r0, $r21, $r22, $l13, 1);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r20;

        $r23 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField;

        $r24 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField year()>();

        $r25 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        $l14 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r23.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r24, $r25, $l14);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r23;

        $r26 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        $r27 = virtualinvoke $r26.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r27;

        $r28 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField;

        $r29 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField yearOfEra()>();

        $r31 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>;

        $r30 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>;

        $l15 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r28.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>(r0, $r29, $r31, $r30, $l15);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r28;

        $r32 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField;

        $r33 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField yearOfCentury()>();

        $r35 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>;

        $r34 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>;

        $l16 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r32.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>(r0, $r33, $r35, $r34, $l16);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r32;

        $r36 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField;

        $r37 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField centuryOfEra()>();

        $r38 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $l17 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r36.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r37, $r38, $l17);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r36;

        $r39 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r40 = virtualinvoke $r39.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r40;

        $r41 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField;

        $r42 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField monthOfYear()>();

        $r43 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>;

        $l18 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r41.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r42, $r43, $l18);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r41;

        $r44 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>;

        $r45 = virtualinvoke $r44.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r45;

        $r46 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField;

        $r47 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField weekyear()>();

        $r48 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $l19 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r46.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>(r0, $r47, $r48, null, $l19, 1);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r46;

        $r49 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField;

        $r50 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField weekyearOfCentury()>();

        $r52 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>;

        $r51 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>;

        $l20 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r49.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>(r0, $r50, $r52, $r51, $l20);

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r49;

        $r53 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $r54 = virtualinvoke $r53.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r54;

        $r55 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r56 = virtualinvoke r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField dayOfMonth()>();

        $r57 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>;

        $l21 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r55.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r56, $r57, $l21);

        $r58 = r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>;

        $r55.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iRangeDurationField> = $r58;

        r10.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r55;

        return;
    }

    long julianToGregorianByYear(long)
    {
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.chrono.GregorianChronology $r1;
        long l0, $l1;
        org.joda.time.chrono.JulianChronology $r2;

        r0 := @this: org.joda.time.chrono.GJChronology;

        l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>;

        $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $l1 = staticinvoke <org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>(l0, $r2, $r1);

        return $l1;
    }

    long gregorianToJulianByYear(long)
    {
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.chrono.GregorianChronology $r2;
        long l0, $l1;
        org.joda.time.chrono.JulianChronology $r1;

        r0 := @this: org.joda.time.chrono.GJChronology;

        l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>;

        $l1 = staticinvoke <org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>(l0, $r2, $r1);

        return $l1;
    }

    long julianToGregorianByWeekyear(long)
    {
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.chrono.GregorianChronology $r1;
        long l0, $l1;
        org.joda.time.chrono.JulianChronology $r2;

        r0 := @this: org.joda.time.chrono.GJChronology;

        l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>;

        $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $l1 = staticinvoke <org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>(l0, $r2, $r1);

        return $l1;
    }

    long gregorianToJulianByWeekyear(long)
    {
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.chrono.GregorianChronology $r2;
        long l0, $l1;
        org.joda.time.chrono.JulianChronology $r1;

        r0 := @this: org.joda.time.chrono.GJChronology;

        l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>;

        $l1 = staticinvoke <org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>(l0, $r2, $r1);

        return $l1;
    }

    static long access$000(org.joda.time.chrono.GJChronology)
    {
        org.joda.time.chrono.GJChronology r0;
        long $l0;

        r0 := @parameter0: org.joda.time.chrono.GJChronology;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iGapDuration>;

        return $l0;
    }

    static void <clinit>()
    {
        java.util.HashMap $r1;
        org.joda.time.Instant $r0;

        <org.joda.time.chrono.GJChronology: long serialVersionUID> = -2545574827706931671L;

        $r0 = new org.joda.time.Instant;

        specialinvoke $r0.<org.joda.time.Instant: void <init>(long)>(-12219292800000L);

        <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.joda.time.chrono.GJChronology: java.util.Map cCache> = $r1;

        return;
    }
}
