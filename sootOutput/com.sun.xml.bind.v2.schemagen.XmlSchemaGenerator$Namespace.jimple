class com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace extends java.lang.Object
{
    final java.lang.String uri;
    private final java.util.Set depends;
    private boolean selfReference;
    private final java.util.Set classes;
    private final java.util.Set enums;
    private final java.util.Set arrays;
    private final com.sun.xml.bind.v2.schemagen.MultiMap attributeDecls;
    private final com.sun.xml.bind.v2.schemagen.MultiMap elementDecls;
    private com.sun.xml.bind.v2.schemagen.Form attributeFormDefault;
    private com.sun.xml.bind.v2.schemagen.Form elementFormDefault;
    private boolean useSwaRef;
    private boolean useMimeNs;
    static final boolean $assertionsDisabled;
    final com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator this$0;

    public void <init>(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator, java.lang.String)
    {
        java.lang.AssertionError $r14;
        java.util.Map $r12, $r13;
        java.lang.String r11;
        java.util.LinkedHashSet $r2, $r3, $r4, $r5;
        boolean $z0, $z1;
        com.sun.xml.bind.v2.model.core.NonElement $r10;
        com.sun.xml.bind.v2.schemagen.MultiMap $r6, $r7;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator r1, $r9;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$ElementWithType $r8;

        r0 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r1 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator;

        r11 := @parameter1: java.lang.String;

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>();

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set depends> = $r2;

        $r3 = new java.util.LinkedHashSet;

        specialinvoke $r3.<java.util.LinkedHashSet: void <init>()>();

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set classes> = $r3;

        $r4 = new java.util.LinkedHashSet;

        specialinvoke $r4.<java.util.LinkedHashSet: void <init>()>();

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set enums> = $r4;

        $r5 = new java.util.LinkedHashSet;

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>()>();

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set arrays> = $r5;

        $r6 = new com.sun.xml.bind.v2.schemagen.MultiMap;

        specialinvoke $r6.<com.sun.xml.bind.v2.schemagen.MultiMap: void <init>(java.lang.Object)>(null);

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.MultiMap attributeDecls> = $r6;

        $r7 = new com.sun.xml.bind.v2.schemagen.MultiMap;

        $r8 = new com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$ElementWithType;

        $r9 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator this$0>;

        $r10 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.core.NonElement access$900(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)>($r9);

        specialinvoke $r8.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$ElementWithType: void <init>(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,boolean,com.sun.xml.bind.v2.model.core.NonElement)>(r0, 1, $r10);

        specialinvoke $r7.<com.sun.xml.bind.v2.schemagen.MultiMap: void <init>(java.lang.Object)>($r8);

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.MultiMap elementDecls> = $r7;

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri> = r11;

        $z0 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r13 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.Map access$1000(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)>(r1);

        $z1 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>(r11);

        if $z1 == 0 goto label1;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label1:
        $r12 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.Map access$1000(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)>(r1);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r0);

        return;
    }

    private void processForeignNamespaces(com.sun.xml.bind.v2.model.core.PropertyInfo, int)
    {
        com.sun.xml.bind.v2.model.core.Element $r8;
        int i0, $i2;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.sun.xml.bind.v2.model.core.TypeInfo r4;
        java.util.Iterator $r2, $r12;
        java.util.Collection $r1;
        com.sun.xml.bind.v2.model.core.NonElement $r6;
        com.sun.xml.bind.v2.model.core.PropertyInfo r0, r14;
        java.util.List $r11;
        java.lang.Object $r3, $r13;
        javax.xml.namespace.QName $r7, $r9;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r5;
        com.sun.xml.bind.v2.model.core.ClassInfo $r10;

        r5 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r0 := @parameter0: com.sun.xml.bind.v2.model.core.PropertyInfo;

        i0 := @parameter1: int;

        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.PropertyInfo: java.util.Collection ref()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.sun.xml.bind.v2.model.core.TypeInfo) $r3;

        $z1 = r4 instanceof com.sun.xml.bind.v2.model.core.ClassInfo;

        if $z1 == 0 goto label3;

        if i0 <= 0 goto label3;

        $r10 = (com.sun.xml.bind.v2.model.core.ClassInfo) r4;

        $r11 = interfaceinvoke $r10.<com.sun.xml.bind.v2.model.core.ClassInfo: java.util.List getProperties()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.sun.xml.bind.v2.model.core.PropertyInfo) $r13;

        $i2 = (int) -1;

        i0 = i0 + $i2;

        specialinvoke r5.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void processForeignNamespaces(com.sun.xml.bind.v2.model.core.PropertyInfo,int)>(r14, i0);

        goto label2;

     label3:
        $z4 = r4 instanceof com.sun.xml.bind.v2.model.core.Element;

        if $z4 == 0 goto label4;

        $r8 = (com.sun.xml.bind.v2.model.core.Element) r4;

        $r9 = interfaceinvoke $r8.<com.sun.xml.bind.v2.model.core.Element: javax.xml.namespace.QName getElementName()>();

        specialinvoke r5.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void addDependencyTo(javax.xml.namespace.QName)>($r9);

     label4:
        $z2 = r4 instanceof com.sun.xml.bind.v2.model.core.NonElement;

        if $z2 == 0 goto label5;

        $r6 = (com.sun.xml.bind.v2.model.core.NonElement) r4;

        $r7 = interfaceinvoke $r6.<com.sun.xml.bind.v2.model.core.NonElement: javax.xml.namespace.QName getTypeName()>();

        specialinvoke r5.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void addDependencyTo(javax.xml.namespace.QName)>($r7);

     label5:
        goto label1;

     label6:
        return;
    }

    private void addDependencyTo(javax.xml.namespace.QName)
    {
        java.util.Set $r5;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator $r4;
        javax.xml.namespace.QName r0;
        java.lang.String $r1, $r3;
        boolean $z0, $z1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r2, $r6;

        r2 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r0 := @parameter0: javax.xml.namespace.QName;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2001/XMLSchema");

        if $z0 == 0 goto label2;

        return;

     label2:
        $r3 = r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean selfReference> = 1;

        return;

     label3:
        $r5 = r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set depends>;

        $r4 = r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator this$0>;

        $r6 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace access$1100(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator,java.lang.String)>($r4, $r1);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r6);

        return;
    }

    private void writeTo(javax.xml.transform.Result, java.util.Map) throws java.io.IOException
    {
        java.util.Map $r7, r68;
        com.sun.xml.bind.v2.schemagen.xmlschema.Schema r90;
        java.util.Set $r8, $r22, $r25, $r27, $r29, $r31, $r34, $r94;
        com.sun.xml.bind.v2.model.core.EnumLeafInfo r99;
        javax.xml.namespace.QName $r47, $r49, $r52, $r54;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$ElementDeclaration $r58;
        com.sun.xml.txw2.TypedXmlWriter $r2;
        java.lang.String $r6, $r12, $r18, $r39, $r48, $r50, $r53, $r55, $r60, $r67, $r70, $r71, $r72, $r73, $r74, $r75, $r77, $r78, $r81, $r83, $r87, $r89, $r92;
        java.util.Map$Entry r91, r97, r101;
        com.sun.xml.txw2.TxwException $r84;
        java.io.IOException $r88;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator $r4, $r10, $r16, $r43;
        javax.xml.transform.Result r0;
        com.sun.xml.bind.v2.schemagen.Form $r14, $r15, $r20, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        com.sun.xml.bind.v2.schemagen.xmlschema.Import $r61, $r62, $r63, $r64, $r66;
        com.sun.xml.bind.v2.model.core.NonElement $r44;
        java.util.logging.Logger $r85;
        com.sun.xml.bind.v2.model.core.ClassInfo r98;
        com.sun.xml.bind.v2.model.core.AttributePropertyInfo $r42;
        com.sun.xml.bind.v2.model.core.ArrayInfo r100;
        com.sun.xml.txw2.output.XmlSerializer $r1;
        java.util.logging.Level $r86;
        javax.xml.bind.'annotation'.XmlNsForm $r13, $r19;
        int $i0, $i1, $i2;
        java.util.Iterator $r9, $r23, $r26, $r28, $r30, $r32, $r35, $r95;
        com.sun.xml.bind.v2.schemagen.MultiMap $r24, $r33;
        com.sun.xml.bind.v2.model.core.TypeInfoSet $r5, $r11, $r17;
        java.lang.Object $r36, $r38, $r40, $r41, $r45, $r46, $r51, $r56, $r57, $r59, $r65, $r69, $r76, $r79, $r80, $r82;
        com.sun.xml.bind.v2.schemagen.xmlschema.TopLevelAttribute $r37;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r3, r93, r96;

        r3 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r0 := @parameter0: javax.xml.transform.Result;

        r68 := @parameter1: java.util.Map;

     label01:
        $r1 = staticinvoke <com.sun.xml.txw2.output.ResultFactory: com.sun.xml.txw2.output.XmlSerializer createSerializer(javax.xml.transform.Result)>(r0);

        $r2 = staticinvoke <com.sun.xml.txw2.TXW: com.sun.xml.txw2.TypedXmlWriter create(java.lang.Class,com.sun.xml.txw2.output.XmlSerializer)>(class "Lcom/sun/xml/bind/v2/schemagen/xmlschema/Schema;", $r1);

        r90 = (com.sun.xml.bind.v2.schemagen.xmlschema.Schema) $r2;

        $r4 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator this$0>;

        $r5 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.core.TypeInfoSet access$1200(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)>($r4);

        $r6 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        $r7 = interfaceinvoke $r5.<com.sun.xml.bind.v2.model.core.TypeInfoSet: java.util.Map getXmlNs(java.lang.String)>($r6);

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r79 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r91 = (java.util.Map$Entry) $r79;

        $r80 = interfaceinvoke r91.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r81 = (java.lang.String) $r80;

        $r82 = interfaceinvoke r91.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r83 = (java.lang.String) $r82;

        interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: void _namespace(java.lang.String,java.lang.String)>($r81, $r83);

        goto label02;

     label03:
        $z1 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean useSwaRef>;

        if $z1 == 0 goto label04;

        interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: void _namespace(java.lang.String,java.lang.String)>("http://ws-i.org/profiles/basic/1.1/xsd", "swaRef");

     label04:
        $z2 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean useMimeNs>;

        if $z2 == 0 goto label05;

        interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: void _namespace(java.lang.String,java.lang.String)>("http://www.w3.org/2005/05/xmlmime", "xmime");

     label05:
        $r10 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator this$0>;

        $r11 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.core.TypeInfoSet access$1200(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)>($r10);

        $r12 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        $r13 = interfaceinvoke $r11.<com.sun.xml.bind.v2.model.core.TypeInfoSet: javax.xml.bind.'annotation'.XmlNsForm getAttributeFormDefault(java.lang.String)>($r12);

        $r14 = staticinvoke <com.sun.xml.bind.v2.schemagen.Form: com.sun.xml.bind.v2.schemagen.Form get(javax.xml.bind.'annotation'.XmlNsForm)>($r13);

        r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.Form attributeFormDefault> = $r14;

        $r15 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.Form attributeFormDefault>;

        virtualinvoke $r15.<com.sun.xml.bind.v2.schemagen.Form: void declare(java.lang.String,com.sun.xml.bind.v2.schemagen.xmlschema.Schema)>("attributeFormDefault", r90);

        $r16 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator this$0>;

        $r17 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.core.TypeInfoSet access$1200(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)>($r16);

        $r18 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        $r19 = interfaceinvoke $r17.<com.sun.xml.bind.v2.model.core.TypeInfoSet: javax.xml.bind.'annotation'.XmlNsForm getElementFormDefault(java.lang.String)>($r18);

        $r20 = staticinvoke <com.sun.xml.bind.v2.schemagen.Form: com.sun.xml.bind.v2.schemagen.Form get(javax.xml.bind.'annotation'.XmlNsForm)>($r19);

        r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.Form elementFormDefault> = $r20;

        $r21 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.Form elementFormDefault>;

        virtualinvoke $r21.<com.sun.xml.bind.v2.schemagen.Form: void declare(java.lang.String,com.sun.xml.bind.v2.schemagen.xmlschema.Schema)>("elementFormDefault", r90);

        $z3 = interfaceinvoke $r7.<java.util.Map: boolean containsValue(java.lang.Object)>("http://www.w3.org/2001/XMLSchema");

        if $z3 != 0 goto label06;

        $z12 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>("xs");

        if $z12 != 0 goto label06;

        interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: void _namespace(java.lang.String,java.lang.String)>("http://www.w3.org/2001/XMLSchema", "xs");

     label06:
        interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: com.sun.xml.bind.v2.schemagen.xmlschema.Schema version(java.lang.String)>("1.0");

        $r92 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        $i2 = virtualinvoke $r92.<java.lang.String: int length()>();

        if $i2 == 0 goto label07;

        $r78 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: com.sun.xml.bind.v2.schemagen.xmlschema.Schema targetNamespace(java.lang.String)>($r78);

     label07:
        $r22 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set depends>;

        $r23 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z13 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label09;

        $r76 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r93 = (com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace) $r76;

        $r77 = r93.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: void _namespace(java.lang.String)>($r77);

        goto label08;

     label09:
        $z4 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean selfReference>;

        if $z4 == 0 goto label10;

        $r74 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        $i1 = virtualinvoke $r74.<java.lang.String: int length()>();

        if $i1 == 0 goto label10;

        $r75 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: void _namespace(java.lang.String,java.lang.String)>($r75, "tns");

     label10:
        interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: void _pcdata(java.lang.Object)>("\n");

        $r94 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set depends>;

        $r95 = interfaceinvoke $r94.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z14 = interfaceinvoke $r95.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label14;

        $r65 = interfaceinvoke $r95.<java.util.Iterator: java.lang.Object next()>();

        r96 = (com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace) $r65;

        $r66 = interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: com.sun.xml.bind.v2.schemagen.xmlschema.Import _import()>();

        $r67 = r96.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        $i0 = virtualinvoke $r67.<java.lang.String: int length()>();

        if $i0 == 0 goto label12;

        $r72 = r96.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        interfaceinvoke $r66.<com.sun.xml.bind.v2.schemagen.xmlschema.Import: com.sun.xml.bind.v2.schemagen.xmlschema.Import namespace(java.lang.String)>($r72);

     label12:
        $r69 = interfaceinvoke r68.<java.util.Map: java.lang.Object get(java.lang.Object)>(r96);

        $r73 = (java.lang.String) $r69;

        if $r73 == null goto label13;

        $z11 = virtualinvoke $r73.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z11 != 0 goto label13;

        $r70 = interfaceinvoke r0.<javax.xml.transform.Result: java.lang.String getSystemId()>();

        $r71 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.lang.String relativize(java.lang.String,java.lang.String)>($r73, $r70);

        interfaceinvoke $r66.<com.sun.xml.bind.v2.schemagen.xmlschema.Import: com.sun.xml.bind.v2.schemagen.xmlschema.Import schemaLocation(java.lang.String)>($r71);

     label13:
        interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: void _pcdata(java.lang.Object)>("\n");

        goto label11;

     label14:
        $z5 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean useSwaRef>;

        if $z5 == 0 goto label15;

        $r63 = interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: com.sun.xml.bind.v2.schemagen.xmlschema.Import _import()>();

        $r64 = interfaceinvoke $r63.<com.sun.xml.bind.v2.schemagen.xmlschema.Import: com.sun.xml.bind.v2.schemagen.xmlschema.Import namespace(java.lang.String)>("http://ws-i.org/profiles/basic/1.1/xsd");

        interfaceinvoke $r64.<com.sun.xml.bind.v2.schemagen.xmlschema.Import: com.sun.xml.bind.v2.schemagen.xmlschema.Import schemaLocation(java.lang.String)>("http://ws-i.org/profiles/basic/1.1/swaref.xsd");

     label15:
        $z6 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean useMimeNs>;

        if $z6 == 0 goto label16;

        $r61 = interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: com.sun.xml.bind.v2.schemagen.xmlschema.Import _import()>();

        $r62 = interfaceinvoke $r61.<com.sun.xml.bind.v2.schemagen.xmlschema.Import: com.sun.xml.bind.v2.schemagen.xmlschema.Import namespace(java.lang.String)>("http://www.w3.org/2005/05/xmlmime");

        interfaceinvoke $r62.<com.sun.xml.bind.v2.schemagen.xmlschema.Import: com.sun.xml.bind.v2.schemagen.xmlschema.Import schemaLocation(java.lang.String)>("http://www.w3.org/2005/05/xmlmime");

     label16:
        $r24 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.MultiMap elementDecls>;

        $r25 = virtualinvoke $r24.<com.sun.xml.bind.v2.schemagen.MultiMap: java.util.Set entrySet()>();

        $r26 = interfaceinvoke $r25.<java.util.Set: java.util.Iterator iterator()>();

     label17:
        $z15 = interfaceinvoke $r26.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label18;

        $r56 = interfaceinvoke $r26.<java.util.Iterator: java.lang.Object next()>();

        r97 = (java.util.Map$Entry) $r56;

        $r57 = interfaceinvoke r97.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r58 = (com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$ElementDeclaration) $r57;

        $r59 = interfaceinvoke r97.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r60 = (java.lang.String) $r59;

        virtualinvoke $r58.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$ElementDeclaration: void writeTo(java.lang.String,com.sun.xml.bind.v2.schemagen.xmlschema.Schema)>($r60, r90);

        interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: void _pcdata(java.lang.Object)>("\n");

        goto label17;

     label18:
        $r27 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set classes>;

        $r28 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();

     label19:
        $z16 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label22;

        $r51 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r98 = (com.sun.xml.bind.v2.model.core.ClassInfo) $r51;

        $r52 = interfaceinvoke r98.<com.sun.xml.bind.v2.model.core.ClassInfo: javax.xml.namespace.QName getTypeName()>();

        if $r52 != null goto label20;

        goto label19;

     label20:
        $r53 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        $r54 = interfaceinvoke r98.<com.sun.xml.bind.v2.model.core.ClassInfo: javax.xml.namespace.QName getTypeName()>();

        $r55 = virtualinvoke $r54.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z10 = virtualinvoke $r53.<java.lang.String: boolean equals(java.lang.Object)>($r55);

        if $z10 == 0 goto label21;

        specialinvoke r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeClass(com.sun.xml.bind.v2.model.core.ClassInfo,com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost)>(r98, r90);

     label21:
        interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: void _pcdata(java.lang.Object)>("\n");

        goto label19;

     label22:
        $r29 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set enums>;

        $r30 = interfaceinvoke $r29.<java.util.Set: java.util.Iterator iterator()>();

     label23:
        $z17 = interfaceinvoke $r30.<java.util.Iterator: boolean hasNext()>();

        if $z17 == 0 goto label26;

        $r46 = interfaceinvoke $r30.<java.util.Iterator: java.lang.Object next()>();

        r99 = (com.sun.xml.bind.v2.model.core.EnumLeafInfo) $r46;

        $r47 = interfaceinvoke r99.<com.sun.xml.bind.v2.model.core.EnumLeafInfo: javax.xml.namespace.QName getTypeName()>();

        if $r47 != null goto label24;

        goto label23;

     label24:
        $r48 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        $r49 = interfaceinvoke r99.<com.sun.xml.bind.v2.model.core.EnumLeafInfo: javax.xml.namespace.QName getTypeName()>();

        $r50 = virtualinvoke $r49.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z9 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>($r50);

        if $z9 == 0 goto label25;

        specialinvoke r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeEnum(com.sun.xml.bind.v2.model.core.EnumLeafInfo,com.sun.xml.bind.v2.schemagen.xmlschema.SimpleTypeHost)>(r99, r90);

     label25:
        interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: void _pcdata(java.lang.Object)>("\n");

        goto label23;

     label26:
        $r31 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set arrays>;

        $r32 = interfaceinvoke $r31.<java.util.Set: java.util.Iterator iterator()>();

     label27:
        $z7 = interfaceinvoke $r32.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label28;

        $r45 = interfaceinvoke $r32.<java.util.Iterator: java.lang.Object next()>();

        r100 = (com.sun.xml.bind.v2.model.core.ArrayInfo) $r45;

        specialinvoke r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeArray(com.sun.xml.bind.v2.model.core.ArrayInfo,com.sun.xml.bind.v2.schemagen.xmlschema.Schema)>(r100, r90);

        interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: void _pcdata(java.lang.Object)>("\n");

        goto label27;

     label28:
        $r33 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.MultiMap attributeDecls>;

        $r34 = virtualinvoke $r33.<com.sun.xml.bind.v2.schemagen.MultiMap: java.util.Set entrySet()>();

        $r35 = interfaceinvoke $r34.<java.util.Set: java.util.Iterator iterator()>();

     label29:
        $z8 = interfaceinvoke $r35.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label32;

        $r36 = interfaceinvoke $r35.<java.util.Iterator: java.lang.Object next()>();

        r101 = (java.util.Map$Entry) $r36;

        $r37 = interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: com.sun.xml.bind.v2.schemagen.xmlschema.TopLevelAttribute attribute()>();

        $r38 = interfaceinvoke r101.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r39 = (java.lang.String) $r38;

        interfaceinvoke $r37.<com.sun.xml.bind.v2.schemagen.xmlschema.TopLevelAttribute: com.sun.xml.bind.v2.schemagen.xmlschema.TopLevelAttribute name(java.lang.String)>($r39);

        $r40 = interfaceinvoke r101.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r40 != null goto label30;

        $r43 = r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator this$0>;

        $r44 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.model.core.NonElement access$1300(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)>($r43);

        specialinvoke r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeTypeRef(com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost,com.sun.xml.bind.v2.model.core.NonElement,java.lang.String)>($r37, $r44, "type");

        goto label31;

     label30:
        $r41 = interfaceinvoke r101.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r42 = (com.sun.xml.bind.v2.model.core.AttributePropertyInfo) $r41;

        specialinvoke r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeAttributeTypeRef(com.sun.xml.bind.v2.model.core.AttributePropertyInfo,com.sun.xml.bind.v2.schemagen.xmlschema.AttributeType)>($r42, $r37);

     label31:
        interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: void _pcdata(java.lang.Object)>("\n");

        goto label29;

     label32:
        interfaceinvoke r90.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: void commit()>();

     label33:
        goto label35;

     label34:
        $r84 := @caughtexception;

        $r85 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: java.util.logging.Logger access$1400()>();

        $r86 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r87 = virtualinvoke $r84.<com.sun.xml.txw2.TxwException: java.lang.String getMessage()>();

        virtualinvoke $r85.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r86, $r87, $r84);

        $r88 = new java.io.IOException;

        $r89 = virtualinvoke $r84.<com.sun.xml.txw2.TxwException: java.lang.String getMessage()>();

        specialinvoke $r88.<java.io.IOException: void <init>(java.lang.String)>($r89);

        throw $r88;

     label35:
        return;

        catch com.sun.xml.txw2.TxwException from label01 to label33 with label34;
    }

    private void writeTypeRef(com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost, com.sun.xml.bind.v2.model.core.NonElementRef, java.lang.String)
    {
        java.lang.IllegalStateException $r20;
        int[] $r1;
        javax.activation.MimeType $r5;
        int $i0, $i1;
        java.lang.String r12, $r17;
        boolean $z0;
        com.sun.xml.bind.v2.model.core.NonElementRef r0;
        com.sun.xml.bind.v2.model.core.NonElement $r11;
        com.sun.xml.bind.v2.model.core.PropertyInfo $r2, $r4, $r8, $r13;
        com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost r10;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator $r7;
        javax.xml.namespace.QName $r9, $r14, $r15, $r16, $r18, $r19;
        com.sun.xml.bind.v2.model.core.ID $r3;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r6;

        r6 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r10 := @parameter0: com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost;

        r0 := @parameter1: com.sun.xml.bind.v2.model.core.NonElementRef;

        r12 := @parameter2: java.lang.String;

        $r1 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$2: int[] $SwitchMap$com$sun$xml$bind$v2$model$core$ID>;

        $r2 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.NonElementRef: com.sun.xml.bind.v2.model.core.PropertyInfo getSource()>();

        $r3 = interfaceinvoke $r2.<com.sun.xml.bind.v2.model.core.PropertyInfo: com.sun.xml.bind.v2.model.core.ID id()>();

        $i0 = virtualinvoke $r3.<com.sun.xml.bind.v2.model.core.ID: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        $r19 = new javax.xml.namespace.QName;

        specialinvoke $r19.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://www.w3.org/2001/XMLSchema", "ID");

        interfaceinvoke r10.<com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost: void _attribute(java.lang.String,java.lang.Object)>(r12, $r19);

        return;

     label2:
        $r18 = new javax.xml.namespace.QName;

        specialinvoke $r18.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://www.w3.org/2001/XMLSchema", "IDREF");

        interfaceinvoke r10.<com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost: void _attribute(java.lang.String,java.lang.Object)>(r12, $r18);

        return;

     label3:
        goto label5;

     label4:
        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>()>();

        throw $r20;

     label5:
        $r4 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.NonElementRef: com.sun.xml.bind.v2.model.core.PropertyInfo getSource()>();

        $r5 = interfaceinvoke $r4.<com.sun.xml.bind.v2.model.core.PropertyInfo: javax.activation.MimeType getExpectedMimeType()>();

        if $r5 == null goto label6;

        $r16 = new javax.xml.namespace.QName;

        specialinvoke $r16.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2005/05/xmlmime", "expectedContentTypes", "xmime");

        $r17 = virtualinvoke $r5.<javax.activation.MimeType: java.lang.String toString()>();

        interfaceinvoke r10.<com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost: void _attribute(javax.xml.namespace.QName,java.lang.Object)>($r16, $r17);

     label6:
        $r7 = r6.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator this$0>;

        $z0 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: boolean access$1500(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator,com.sun.xml.bind.v2.model.core.NonElementRef)>($r7, r0);

        if $z0 == 0 goto label7;

        $r15 = new javax.xml.namespace.QName;

        specialinvoke $r15.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>("http://ws-i.org/profiles/basic/1.1/xsd", "swaRef", "ref");

        interfaceinvoke r10.<com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost: void _attribute(java.lang.String,java.lang.Object)>(r12, $r15);

        return;

     label7:
        $r8 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.NonElementRef: com.sun.xml.bind.v2.model.core.PropertyInfo getSource()>();

        $r9 = interfaceinvoke $r8.<com.sun.xml.bind.v2.model.core.PropertyInfo: javax.xml.namespace.QName getSchemaType()>();

        if $r9 == null goto label8;

        $r13 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.NonElementRef: com.sun.xml.bind.v2.model.core.PropertyInfo getSource()>();

        $r14 = interfaceinvoke $r13.<com.sun.xml.bind.v2.model.core.PropertyInfo: javax.xml.namespace.QName getSchemaType()>();

        interfaceinvoke r10.<com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost: void _attribute(java.lang.String,java.lang.Object)>(r12, $r14);

        return;

     label8:
        $r11 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.NonElementRef: com.sun.xml.bind.v2.model.core.NonElement getTarget()>();

        specialinvoke r6.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeTypeRef(com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost,com.sun.xml.bind.v2.model.core.NonElement,java.lang.String)>(r10, $r11, r12);

        return;
    }

    private void writeTypeRef(com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost, com.sun.xml.bind.v2.model.core.NonElement, java.lang.String)
    {
        com.sun.xml.bind.api.ErrorListener $r15;
        com.sun.xml.bind.v2.model.core.Element r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.sun.xml.bind.v2.util.CollisionCheckStack $r9, $r13, $r20;
        com.sun.xml.bind.v2.model.core.NonElement r0;
        com.sun.xml.bind.v2.model.core.EnumLeafInfo $r7, $r25;
        javax.xml.namespace.QName $r1, $r4, $r23;
        com.sun.xml.bind.v2.model.core.ClassInfo $r10, $r11, $r26;
        java.lang.Object[] $r17;
        com.sun.xml.bind.v2.schemagen.xmlschema.SimpleTypeHost $r6, $r24;
        com.sun.xml.bind.v2.schemagen.Messages $r19;
        java.lang.String r3, $r21, $r22;
        org.xml.sax.SAXParseException $r16;
        com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost r2;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator $r8, $r12, $r14, $r18;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r5;
        com.sun.xml.bind.v2.model.core.MaybeElement r27;

        r5 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r2 := @parameter0: com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost;

        r0 := @parameter1: com.sun.xml.bind.v2.model.core.NonElement;

        r3 := @parameter2: java.lang.String;

        r28 = null;

        $z0 = r0 instanceof com.sun.xml.bind.v2.model.core.MaybeElement;

        if $z0 == 0 goto label1;

        r27 = (com.sun.xml.bind.v2.model.core.MaybeElement) r0;

        $z4 = interfaceinvoke r27.<com.sun.xml.bind.v2.model.core.MaybeElement: boolean isElement()>();

        if $z4 == 0 goto label1;

        r28 = interfaceinvoke r27.<com.sun.xml.bind.v2.model.core.MaybeElement: com.sun.xml.bind.v2.model.core.Element asElement()>();

     label1:
        $z5 = r0 instanceof com.sun.xml.bind.v2.model.core.Element;

        if $z5 == 0 goto label2;

        r28 = (com.sun.xml.bind.v2.model.core.Element) r0;

     label2:
        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.NonElement: javax.xml.namespace.QName getTypeName()>();

        if $r1 != null goto label8;

        if r28 == null goto label4;

        $r23 = interfaceinvoke r28.<com.sun.xml.bind.v2.model.core.Element: javax.xml.namespace.QName getElementName()>();

        if $r23 == null goto label4;

        interfaceinvoke r2.<com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost: void block()>();

        $z3 = r0 instanceof com.sun.xml.bind.v2.model.core.ClassInfo;

        if $z3 == 0 goto label3;

        $r26 = (com.sun.xml.bind.v2.model.core.ClassInfo) r0;

        specialinvoke r5.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeClass(com.sun.xml.bind.v2.model.core.ClassInfo,com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost)>($r26, r2);

        goto label9;

     label3:
        $r25 = (com.sun.xml.bind.v2.model.core.EnumLeafInfo) r0;

        $r24 = (com.sun.xml.bind.v2.schemagen.xmlschema.SimpleTypeHost) r2;

        specialinvoke r5.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeEnum(com.sun.xml.bind.v2.model.core.EnumLeafInfo,com.sun.xml.bind.v2.schemagen.xmlschema.SimpleTypeHost)>($r25, $r24);

        goto label9;

     label4:
        interfaceinvoke r2.<com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost: void block()>();

        $z1 = r0 instanceof com.sun.xml.bind.v2.model.core.ClassInfo;

        if $z1 == 0 goto label7;

        $r8 = r5.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator this$0>;

        $r9 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.util.CollisionCheckStack access$1600(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)>($r8);

        $r10 = (com.sun.xml.bind.v2.model.core.ClassInfo) r0;

        $z2 = virtualinvoke $r9.<com.sun.xml.bind.v2.util.CollisionCheckStack: boolean push(java.lang.Object)>($r10);

        if $z2 == 0 goto label5;

        $r14 = r5.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator this$0>;

        $r15 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.api.ErrorListener access$1700(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)>($r14);

        $r16 = new org.xml.sax.SAXParseException;

        $r19 = <com.sun.xml.bind.v2.schemagen.Messages: com.sun.xml.bind.v2.schemagen.Messages ANONYMOUS_TYPE_CYCLE>;

        $r17 = newarray (java.lang.Object)[1];

        $r18 = r5.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator this$0>;

        $r20 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.util.CollisionCheckStack access$1600(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)>($r18);

        $r21 = virtualinvoke $r20.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.String getCycleString()>();

        $r17[0] = $r21;

        $r22 = virtualinvoke $r19.<com.sun.xml.bind.v2.schemagen.Messages: java.lang.String format(java.lang.Object[])>($r17);

        specialinvoke $r16.<org.xml.sax.SAXParseException: void <init>(java.lang.String,org.xml.sax.Locator)>($r22, null);

        interfaceinvoke $r15.<com.sun.xml.bind.api.ErrorListener: void warning(org.xml.sax.SAXParseException)>($r16);

        goto label6;

     label5:
        $r11 = (com.sun.xml.bind.v2.model.core.ClassInfo) r0;

        specialinvoke r5.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeClass(com.sun.xml.bind.v2.model.core.ClassInfo,com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost)>($r11, r2);

     label6:
        $r12 = r5.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator this$0>;

        $r13 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator: com.sun.xml.bind.v2.util.CollisionCheckStack access$1600(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator)>($r12);

        virtualinvoke $r13.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.Object pop()>();

        goto label9;

     label7:
        $r7 = (com.sun.xml.bind.v2.model.core.EnumLeafInfo) r0;

        $r6 = (com.sun.xml.bind.v2.schemagen.xmlschema.SimpleTypeHost) r2;

        specialinvoke r5.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeEnum(com.sun.xml.bind.v2.model.core.EnumLeafInfo,com.sun.xml.bind.v2.schemagen.xmlschema.SimpleTypeHost)>($r7, $r6);

        goto label9;

     label8:
        $r4 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.NonElement: javax.xml.namespace.QName getTypeName()>();

        interfaceinvoke r2.<com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost: void _attribute(java.lang.String,java.lang.Object)>(r3, $r4);

     label9:
        return;
    }

    private void writeArray(com.sun.xml.bind.v2.model.core.ArrayInfo, com.sun.xml.bind.v2.schemagen.xmlschema.Schema)
    {
        com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement $r7, $r8;
        com.sun.xml.bind.v2.model.core.ArrayInfo r2;
        com.sun.xml.bind.v2.model.core.NonElement $r9;
        com.sun.xml.bind.v2.schemagen.xmlschema.Occurs $r11;
        com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType $r1, $r5;
        com.sun.xml.bind.v2.schemagen.xmlschema.ExplicitGroup $r6;
        javax.xml.namespace.QName $r3, $r10;
        java.lang.String $r4;
        com.sun.xml.bind.v2.schemagen.xmlschema.Schema r0;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r12;

        r12 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r2 := @parameter0: com.sun.xml.bind.v2.model.core.ArrayInfo;

        r0 := @parameter1: com.sun.xml.bind.v2.schemagen.xmlschema.Schema;

        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.schemagen.xmlschema.Schema: com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType complexType()>();

        $r3 = interfaceinvoke r2.<com.sun.xml.bind.v2.model.core.ArrayInfo: javax.xml.namespace.QName getTypeName()>();

        $r4 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r5 = interfaceinvoke $r1.<com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType: com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType name(java.lang.String)>($r4);

        interfaceinvoke $r5.<com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType: com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType _final(java.lang.String)>("#all");

        $r6 = interfaceinvoke $r5.<com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType: com.sun.xml.bind.v2.schemagen.xmlschema.ExplicitGroup sequence()>();

        $r7 = interfaceinvoke $r6.<com.sun.xml.bind.v2.schemagen.xmlschema.ExplicitGroup: com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement element()>();

        $r8 = interfaceinvoke $r7.<com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement: com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement name(java.lang.String)>("item");

        $r9 = interfaceinvoke r2.<com.sun.xml.bind.v2.model.core.ArrayInfo: com.sun.xml.bind.v2.model.core.NonElement getItemType()>();

        $r10 = interfaceinvoke $r9.<com.sun.xml.bind.v2.model.core.NonElement: javax.xml.namespace.QName getTypeName()>();

        interfaceinvoke $r8.<com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement: com.sun.xml.bind.v2.schemagen.xmlschema.Element type(javax.xml.namespace.QName)>($r10);

        $r11 = interfaceinvoke $r8.<com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement: com.sun.xml.bind.v2.schemagen.xmlschema.Occurs minOccurs(int)>(0);

        interfaceinvoke $r11.<com.sun.xml.bind.v2.schemagen.xmlschema.Occurs: com.sun.xml.bind.v2.schemagen.xmlschema.Occurs maxOccurs(java.lang.String)>("unbounded");

        interfaceinvoke $r8.<com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement: com.sun.xml.bind.v2.schemagen.xmlschema.Element nillable(boolean)>(1);

        interfaceinvoke $r5.<com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType: void commit()>();

        return;
    }

    private void writeEnum(com.sun.xml.bind.v2.model.core.EnumLeafInfo, com.sun.xml.bind.v2.schemagen.xmlschema.SimpleTypeHost)
    {
        java.util.Iterator $r7;
        com.sun.xml.bind.v2.model.core.NonElement $r5;
        com.sun.xml.bind.v2.schemagen.xmlschema.SimpleTypeHost r0;
        java.lang.Iterable $r6;
        com.sun.xml.bind.v2.schemagen.xmlschema.SimpleRestriction $r4;
        com.sun.xml.bind.v2.schemagen.xmlschema.SimpleType $r1;
        com.sun.xml.bind.v2.model.core.EnumLeafInfo r3;
        com.sun.xml.bind.v2.schemagen.xmlschema.NoFixedFacet $r10;
        java.lang.Object $r8;
        com.sun.xml.bind.v2.model.core.EnumConstant r9;
        java.lang.String $r11;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r2;
        boolean $z0;

        r2 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r3 := @parameter0: com.sun.xml.bind.v2.model.core.EnumLeafInfo;

        r0 := @parameter1: com.sun.xml.bind.v2.schemagen.xmlschema.SimpleTypeHost;

        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.schemagen.xmlschema.SimpleTypeHost: com.sun.xml.bind.v2.schemagen.xmlschema.SimpleType simpleType()>();

        specialinvoke r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeName(com.sun.xml.bind.v2.model.core.NonElement,com.sun.xml.txw2.TypedXmlWriter)>(r3, $r1);

        $r4 = interfaceinvoke $r1.<com.sun.xml.bind.v2.schemagen.xmlschema.SimpleType: com.sun.xml.bind.v2.schemagen.xmlschema.SimpleRestriction restriction()>();

        $r5 = interfaceinvoke r3.<com.sun.xml.bind.v2.model.core.EnumLeafInfo: com.sun.xml.bind.v2.model.core.NonElement getBaseType()>();

        specialinvoke r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeTypeRef(com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost,com.sun.xml.bind.v2.model.core.NonElement,java.lang.String)>($r4, $r5, "base");

        $r6 = interfaceinvoke r3.<com.sun.xml.bind.v2.model.core.EnumLeafInfo: java.lang.Iterable getConstants()>();

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.sun.xml.bind.v2.model.core.EnumConstant) $r8;

        $r10 = interfaceinvoke $r4.<com.sun.xml.bind.v2.schemagen.xmlschema.SimpleRestrictionModel: com.sun.xml.bind.v2.schemagen.xmlschema.NoFixedFacet enumeration()>();

        $r11 = interfaceinvoke r9.<com.sun.xml.bind.v2.model.core.EnumConstant: java.lang.String getLexicalValue()>();

        interfaceinvoke $r10.<com.sun.xml.bind.v2.schemagen.xmlschema.NoFixedFacet: com.sun.xml.bind.v2.schemagen.xmlschema.NoFixedFacet value(java.lang.String)>($r11);

        goto label1;

     label2:
        interfaceinvoke $r1.<com.sun.xml.bind.v2.schemagen.xmlschema.SimpleType: void commit()>();

        return;
    }

    private void writeClass(com.sun.xml.bind.v2.model.core.ClassInfo, com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost)
    {
        com.sun.xml.bind.v2.schemagen.xmlschema.ComplexTypeHost $r3, $r24;
        com.sun.xml.bind.v2.schemagen.xmlschema.SimpleExtension $r21, $r27;
        com.sun.xml.bind.v2.schemagen.xmlschema.SimpleContent $r20, $r26;
        com.sun.xml.bind.v2.schemagen.xmlschema.Wildcard $r6, $r7;
        com.sun.xml.bind.v2.schemagen.xmlschema.SimpleRestriction $r42;
        javax.xml.namespace.QName $r19, $r22, $r34;
        java.lang.AssertionError $r37;
        com.sun.xml.bind.v2.schemagen.xmlschema.SimpleTypeHost $r40;
        java.util.ArrayList $r10;
        com.sun.xml.bind.v2.schemagen.xmlschema.List $r44;
        com.sun.xml.bind.v2.schemagen.xmlschema.ComplexContent $r17;
        java.lang.IllegalStateException $r36;
        com.sun.xml.bind.v2.model.core.ReferencePropertyInfo $r16;
        com.sun.xml.bind.v2.schemagen.xmlschema.TypeDefParticle r50;
        int[] $r31;
        com.sun.xml.bind.v2.schemagen.GroupKind $r52;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        com.sun.xml.bind.v2.schemagen.xmlschema.ComplexExtension $r18;
        com.sun.xml.bind.v2.schemagen.xmlschema.AttrDecls r49;
        com.sun.xml.bind.v2.model.core.NonElement $r33, $r43, $r45;
        java.util.List $r11, $r23, $r28, $r38, $r53;
        com.sun.xml.bind.v2.schemagen.xmlschema.SimpleType $r41;
        com.sun.xml.bind.v2.model.core.ClassInfo r1, $r5;
        com.sun.xml.bind.v2.model.core.AttributePropertyInfo $r9, $r35;
        int $i0, $i1, $i2;
        com.sun.xml.bind.v2.model.core.PropertyKind $r32;
        java.util.Iterator $r12, $r29, $r54;
        com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType $r4, $r25;
        com.sun.xml.bind.v2.model.core.PropertyInfo r15, r47, r55;
        com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost r2;
        java.lang.Object $r8, $r14, $r30, $r39;
        com.sun.xml.bind.v2.schemagen.Tree $r13, $r51;
        com.sun.xml.bind.v2.model.core.ValuePropertyInfo r46, r48;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;

        r0 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r1 := @parameter0: com.sun.xml.bind.v2.model.core.ClassInfo;

        r2 := @parameter1: com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost;

        $z0 = specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean containsValueProp(com.sun.xml.bind.v2.model.core.ClassInfo)>(r1);

        if $z0 == 0 goto label12;

        $r23 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.ClassInfo: java.util.List getProperties()>();

        $i0 = interfaceinvoke $r23.<java.util.List: int size()>();

        if $i0 != 1 goto label03;

        $r38 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.ClassInfo: java.util.List getProperties()>();

        $r39 = interfaceinvoke $r38.<java.util.List: java.lang.Object get(int)>(0);

        r46 = (com.sun.xml.bind.v2.model.core.ValuePropertyInfo) $r39;

        $r40 = (com.sun.xml.bind.v2.schemagen.xmlschema.SimpleTypeHost) r2;

        $r41 = interfaceinvoke $r40.<com.sun.xml.bind.v2.schemagen.xmlschema.SimpleTypeHost: com.sun.xml.bind.v2.schemagen.xmlschema.SimpleType simpleType()>();

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeName(com.sun.xml.bind.v2.model.core.NonElement,com.sun.xml.txw2.TypedXmlWriter)>(r1, $r41);

        $z12 = interfaceinvoke r46.<com.sun.xml.bind.v2.model.core.ValuePropertyInfo: boolean isCollection()>();

        if $z12 == 0 goto label01;

        $r44 = interfaceinvoke $r41.<com.sun.xml.bind.v2.schemagen.xmlschema.SimpleType: com.sun.xml.bind.v2.schemagen.xmlschema.List list()>();

        $r45 = interfaceinvoke r46.<com.sun.xml.bind.v2.model.core.ValuePropertyInfo: com.sun.xml.bind.v2.model.core.NonElement getTarget()>();

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeTypeRef(com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost,com.sun.xml.bind.v2.model.core.NonElement,java.lang.String)>($r44, $r45, "itemType");

        goto label02;

     label01:
        $r42 = interfaceinvoke $r41.<com.sun.xml.bind.v2.schemagen.xmlschema.SimpleType: com.sun.xml.bind.v2.schemagen.xmlschema.SimpleRestriction restriction()>();

        $r43 = interfaceinvoke r46.<com.sun.xml.bind.v2.model.core.ValuePropertyInfo: com.sun.xml.bind.v2.model.core.NonElement getTarget()>();

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeTypeRef(com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost,com.sun.xml.bind.v2.model.core.NonElement,java.lang.String)>($r42, $r43, "base");

     label02:
        return;

     label03:
        $r24 = (com.sun.xml.bind.v2.schemagen.xmlschema.ComplexTypeHost) r2;

        $r25 = interfaceinvoke $r24.<com.sun.xml.bind.v2.schemagen.xmlschema.ComplexTypeHost: com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType complexType()>();

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeName(com.sun.xml.bind.v2.model.core.NonElement,com.sun.xml.txw2.TypedXmlWriter)>(r1, $r25);

        $z10 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.ClassInfo: boolean isFinal()>();

        if $z10 == 0 goto label04;

        interfaceinvoke $r25.<com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType: com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType _final(java.lang.String)>("extension restriction");

     label04:
        $r26 = interfaceinvoke $r25.<com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType: com.sun.xml.bind.v2.schemagen.xmlschema.SimpleContent simpleContent()>();

        $r27 = interfaceinvoke $r26.<com.sun.xml.bind.v2.schemagen.xmlschema.SimpleContent: com.sun.xml.bind.v2.schemagen.xmlschema.SimpleExtension extension()>();

        interfaceinvoke $r27.<com.sun.xml.bind.v2.schemagen.xmlschema.SimpleExtension: void block()>();

        $r28 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.ClassInfo: java.util.List getProperties()>();

        $r29 = interfaceinvoke $r28.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z13 = interfaceinvoke $r29.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label11;

        $r30 = interfaceinvoke $r29.<java.util.Iterator: java.lang.Object next()>();

        r47 = (com.sun.xml.bind.v2.model.core.PropertyInfo) $r30;

        $r31 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$2: int[] $SwitchMap$com$sun$xml$bind$v2$model$core$PropertyKind>;

        $r32 = interfaceinvoke r47.<com.sun.xml.bind.v2.model.core.PropertyInfo: com.sun.xml.bind.v2.model.core.PropertyKind kind()>();

        $i1 = virtualinvoke $r32.<com.sun.xml.bind.v2.model.core.PropertyKind: int ordinal()>();

        $i2 = $r31[$i1];

        tableswitch($i2)
        {
            case 1: goto label06;
            case 2: goto label07;
            case 3: goto label08;
            case 4: goto label08;
            default: goto label08;
        };

     label06:
        $r35 = (com.sun.xml.bind.v2.model.core.AttributePropertyInfo) r47;

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void handleAttributeProp(com.sun.xml.bind.v2.model.core.AttributePropertyInfo,com.sun.xml.bind.v2.schemagen.xmlschema.AttrDecls)>($r35, $r27);

        goto label10;

     label07:
        staticinvoke <com.sun.xml.bind.v2.TODO: void checkSpec(java.lang.String)>("what if vp.isCollection() == true?");

        r48 = (com.sun.xml.bind.v2.model.core.ValuePropertyInfo) r47;

        $r33 = interfaceinvoke r48.<com.sun.xml.bind.v2.model.core.ValuePropertyInfo: com.sun.xml.bind.v2.model.core.NonElement getTarget()>();

        $r34 = interfaceinvoke $r33.<com.sun.xml.bind.v2.model.core.NonElement: javax.xml.namespace.QName getTypeName()>();

        interfaceinvoke $r27.<com.sun.xml.bind.v2.schemagen.xmlschema.SimpleExtension: com.sun.xml.bind.v2.schemagen.xmlschema.ExtensionType base(javax.xml.namespace.QName)>($r34);

        goto label10;

     label08:
        $z11 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean $assertionsDisabled>;

        if $z11 != 0 goto label09;

        $r37 = new java.lang.AssertionError;

        specialinvoke $r37.<java.lang.AssertionError: void <init>()>();

        throw $r37;

     label09:
        $r36 = new java.lang.IllegalStateException;

        specialinvoke $r36.<java.lang.IllegalStateException: void <init>()>();

        throw $r36;

     label10:
        goto label05;

     label11:
        interfaceinvoke $r27.<com.sun.xml.bind.v2.schemagen.xmlschema.SimpleExtension: void commit()>();

        staticinvoke <com.sun.xml.bind.v2.TODO: void schemaGenerator(java.lang.String)>("figure out what to do if bc != null");

        staticinvoke <com.sun.xml.bind.v2.TODO: void checkSpec(java.lang.String)>("handle sec 8.9.5.2, bullet #4");

        return;

     label12:
        $r3 = (com.sun.xml.bind.v2.schemagen.xmlschema.ComplexTypeHost) r2;

        $r4 = interfaceinvoke $r3.<com.sun.xml.bind.v2.schemagen.xmlschema.ComplexTypeHost: com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType complexType()>();

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeName(com.sun.xml.bind.v2.model.core.NonElement,com.sun.xml.txw2.TypedXmlWriter)>(r1, $r4);

        $z1 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.ClassInfo: boolean isFinal()>();

        if $z1 == 0 goto label13;

        interfaceinvoke $r4.<com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType: com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType _final(java.lang.String)>("extension restriction");

     label13:
        $z2 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.ClassInfo: boolean isAbstract()>();

        if $z2 == 0 goto label14;

        interfaceinvoke $r4.<com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType: com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType _abstract(boolean)>(1);

     label14:
        r49 = $r4;

        r50 = $r4;

        $r5 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.ClassInfo: com.sun.xml.bind.v2.model.core.ClassInfo getBaseClass()>();

        if $r5 == null goto label16;

        $z9 = interfaceinvoke $r5.<com.sun.xml.bind.v2.model.core.ClassInfo: boolean hasValueProperty()>();

        if $z9 == 0 goto label15;

        $r20 = interfaceinvoke $r4.<com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType: com.sun.xml.bind.v2.schemagen.xmlschema.SimpleContent simpleContent()>();

        $r21 = interfaceinvoke $r20.<com.sun.xml.bind.v2.schemagen.xmlschema.SimpleContent: com.sun.xml.bind.v2.schemagen.xmlschema.SimpleExtension extension()>();

        r49 = $r21;

        r50 = null;

        $r22 = interfaceinvoke $r5.<com.sun.xml.bind.v2.model.core.ClassInfo: javax.xml.namespace.QName getTypeName()>();

        interfaceinvoke $r21.<com.sun.xml.bind.v2.schemagen.xmlschema.SimpleExtension: com.sun.xml.bind.v2.schemagen.xmlschema.ExtensionType base(javax.xml.namespace.QName)>($r22);

        goto label16;

     label15:
        $r17 = interfaceinvoke $r4.<com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType: com.sun.xml.bind.v2.schemagen.xmlschema.ComplexContent complexContent()>();

        $r18 = interfaceinvoke $r17.<com.sun.xml.bind.v2.schemagen.xmlschema.ComplexContent: com.sun.xml.bind.v2.schemagen.xmlschema.ComplexExtension extension()>();

        r49 = $r18;

        r50 = $r18;

        $r19 = interfaceinvoke $r5.<com.sun.xml.bind.v2.model.core.ClassInfo: javax.xml.namespace.QName getTypeName()>();

        interfaceinvoke $r18.<com.sun.xml.bind.v2.schemagen.xmlschema.ComplexExtension: com.sun.xml.bind.v2.schemagen.xmlschema.ExtensionType base(javax.xml.namespace.QName)>($r19);

     label16:
        if r50 == null goto label23;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.ClassInfo: java.util.List getProperties()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z5 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label20;

        $r14 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r15 = (com.sun.xml.bind.v2.model.core.PropertyInfo) $r14;

        $z7 = r15 instanceof com.sun.xml.bind.v2.model.core.ReferencePropertyInfo;

        if $z7 == 0 goto label18;

        $r16 = (com.sun.xml.bind.v2.model.core.ReferencePropertyInfo) r15;

        $z8 = interfaceinvoke $r16.<com.sun.xml.bind.v2.model.core.ReferencePropertyInfo: boolean isMixed()>();

        if $z8 == 0 goto label18;

        interfaceinvoke $r4.<com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType: com.sun.xml.bind.v2.schemagen.xmlschema.ComplexTypeModel mixed(boolean)>(1);

     label18:
        $r51 = specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.Tree buildPropertyContentModel(com.sun.xml.bind.v2.model.core.PropertyInfo)>(r15);

        if $r51 == null goto label19;

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r51);

     label19:
        goto label17;

     label20:
        $z6 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.ClassInfo: boolean isOrdered()>();

        if $z6 == 0 goto label21;

        $r52 = <com.sun.xml.bind.v2.schemagen.GroupKind: com.sun.xml.bind.v2.schemagen.GroupKind SEQUENCE>;

        goto label22;

     label21:
        $r52 = <com.sun.xml.bind.v2.schemagen.GroupKind: com.sun.xml.bind.v2.schemagen.GroupKind ALL>;

     label22:
        $r13 = staticinvoke <com.sun.xml.bind.v2.schemagen.Tree: com.sun.xml.bind.v2.schemagen.Tree makeGroup(com.sun.xml.bind.v2.schemagen.GroupKind,java.util.List)>($r52, $r10);

        virtualinvoke $r13.<com.sun.xml.bind.v2.schemagen.Tree: void write(com.sun.xml.bind.v2.schemagen.xmlschema.TypeDefParticle)>(r50);

     label23:
        $r53 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.ClassInfo: java.util.List getProperties()>();

        $r54 = interfaceinvoke $r53.<java.util.List: java.util.Iterator iterator()>();

     label24:
        $z14 = interfaceinvoke $r54.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label26;

        $r8 = interfaceinvoke $r54.<java.util.Iterator: java.lang.Object next()>();

        r55 = (com.sun.xml.bind.v2.model.core.PropertyInfo) $r8;

        $z4 = r55 instanceof com.sun.xml.bind.v2.model.core.AttributePropertyInfo;

        if $z4 == 0 goto label25;

        $r9 = (com.sun.xml.bind.v2.model.core.AttributePropertyInfo) r55;

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void handleAttributeProp(com.sun.xml.bind.v2.model.core.AttributePropertyInfo,com.sun.xml.bind.v2.schemagen.xmlschema.AttrDecls)>($r9, r49);

     label25:
        goto label24;

     label26:
        $z3 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.ClassInfo: boolean hasAttributeWildcard()>();

        if $z3 == 0 goto label27;

        $r6 = interfaceinvoke r49.<com.sun.xml.bind.v2.schemagen.xmlschema.AttrDecls: com.sun.xml.bind.v2.schemagen.xmlschema.Wildcard anyAttribute()>();

        $r7 = interfaceinvoke $r6.<com.sun.xml.bind.v2.schemagen.xmlschema.Wildcard: com.sun.xml.bind.v2.schemagen.xmlschema.Wildcard namespace(java.lang.String)>("##other");

        interfaceinvoke $r7.<com.sun.xml.bind.v2.schemagen.xmlschema.Wildcard: com.sun.xml.bind.v2.schemagen.xmlschema.Wildcard processContents(java.lang.String)>("skip");

     label27:
        interfaceinvoke $r4.<com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType: void commit()>();

        return;
    }

    private void writeName(com.sun.xml.bind.v2.model.core.NonElement, com.sun.xml.txw2.TypedXmlWriter)
    {
        com.sun.xml.txw2.TypedXmlWriter r2;
        com.sun.xml.bind.v2.model.core.NonElement r0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r3;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r4;

        r4 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r0 := @parameter0: com.sun.xml.bind.v2.model.core.NonElement;

        r2 := @parameter1: com.sun.xml.txw2.TypedXmlWriter;

        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.NonElement: javax.xml.namespace.QName getTypeName()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        interfaceinvoke r2.<com.sun.xml.txw2.TypedXmlWriter: void _attribute(java.lang.String,java.lang.Object)>("name", $r3);

     label1:
        return;
    }

    private boolean containsValueProp(com.sun.xml.bind.v2.model.core.ClassInfo)
    {
        java.util.Iterator $r2;
        com.sun.xml.bind.v2.model.core.PropertyInfo r4;
        java.util.List $r1;
        java.lang.Object $r3;
        com.sun.xml.bind.v2.model.core.ClassInfo r0;
        boolean $z0, $z1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r5;

        r5 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r0 := @parameter0: com.sun.xml.bind.v2.model.core.ClassInfo;

        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ClassInfo: java.util.List getProperties()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.sun.xml.bind.v2.model.core.PropertyInfo) $r3;

        $z1 = r4 instanceof com.sun.xml.bind.v2.model.core.ValuePropertyInfo;

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private com.sun.xml.bind.v2.schemagen.Tree buildPropertyContentModel(com.sun.xml.bind.v2.model.core.PropertyInfo)
    {
        java.lang.IllegalStateException $r10, $r12;
        com.sun.xml.bind.v2.model.core.MapPropertyInfo $r4;
        java.lang.AssertionError $r11, $r13;
        com.sun.xml.bind.v2.model.core.ReferencePropertyInfo $r6;
        int[] $r1;
        int $i0, $i1;
        com.sun.xml.bind.v2.model.core.PropertyKind $r2;
        boolean $z0, $z1;
        com.sun.xml.bind.v2.model.core.ElementPropertyInfo $r8;
        com.sun.xml.bind.v2.model.core.PropertyInfo r0;
        com.sun.xml.bind.v2.schemagen.Tree $r5, $r7, $r9;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r3;

        r3 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r0 := @parameter0: com.sun.xml.bind.v2.model.core.PropertyInfo;

        $r1 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$2: int[] $SwitchMap$com$sun$xml$bind$v2$model$core$PropertyKind>;

        $r2 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.PropertyInfo: com.sun.xml.bind.v2.model.core.PropertyKind kind()>();

        $i0 = virtualinvoke $r2.<com.sun.xml.bind.v2.model.core.PropertyKind: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label5;
            case 3: goto label1;
            case 4: goto label3;
            case 5: goto label4;
            default: goto label7;
        };

     label1:
        $r8 = (com.sun.xml.bind.v2.model.core.ElementPropertyInfo) r0;

        $r9 = specialinvoke r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.Tree handleElementProp(com.sun.xml.bind.v2.model.core.ElementPropertyInfo)>($r8);

        return $r9;

     label2:
        return null;

     label3:
        $r6 = (com.sun.xml.bind.v2.model.core.ReferencePropertyInfo) r0;

        $r7 = specialinvoke r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.Tree handleReferenceProp(com.sun.xml.bind.v2.model.core.ReferencePropertyInfo)>($r6);

        return $r7;

     label4:
        $r4 = (com.sun.xml.bind.v2.model.core.MapPropertyInfo) r0;

        $r5 = specialinvoke r3.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.Tree handleMapProp(com.sun.xml.bind.v2.model.core.MapPropertyInfo)>($r4);

        return $r5;

     label5:
        $z0 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean $assertionsDisabled>;

        if $z0 != 0 goto label6;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label6:
        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>()>();

        throw $r10;

     label7:
        $z1 = <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean $assertionsDisabled>;

        if $z1 != 0 goto label8;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label8:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>()>();

        throw $r12;
    }

    private com.sun.xml.bind.v2.schemagen.Tree handleElementProp(com.sun.xml.bind.v2.model.core.ElementPropertyInfo)
    {
        com.sun.xml.bind.v2.model.core.TypeRef r14;
        java.util.ArrayList $r1;
        com.sun.xml.bind.v2.schemagen.GroupKind $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.sun.xml.bind.v2.model.core.ElementPropertyInfo r0;
        java.util.Iterator $r3;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$2 $r12;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$3 $r9;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$1 $r13;
        java.util.List $r2;
        java.lang.Object $r11;
        javax.xml.namespace.QName $r8;
        com.sun.xml.bind.v2.schemagen.Tree $r5, $r6, $r7;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r10;

        r10 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r0 := @parameter0: com.sun.xml.bind.v2.model.core.ElementPropertyInfo;

        $z0 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ElementPropertyInfo: boolean isValueList()>();

        if $z0 == 0 goto label1;

        $r13 = new com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$1;

        specialinvoke $r13.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$1: void <init>(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,com.sun.xml.bind.v2.model.core.ElementPropertyInfo)>(r10, r0);

        return $r13;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ElementPropertyInfo: java.util.List getTypes()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r11 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.sun.xml.bind.v2.model.core.TypeRef) $r11;

        $r12 = new com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$2;

        specialinvoke $r12.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$2: void <init>(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,com.sun.xml.bind.v2.model.core.TypeRef)>(r10, r14);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        goto label2;

     label3:
        $r4 = <com.sun.xml.bind.v2.schemagen.GroupKind: com.sun.xml.bind.v2.schemagen.GroupKind CHOICE>;

        $r5 = staticinvoke <com.sun.xml.bind.v2.schemagen.Tree: com.sun.xml.bind.v2.schemagen.Tree makeGroup(com.sun.xml.bind.v2.schemagen.GroupKind,java.util.List)>($r4, $r1);

        $z2 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ElementPropertyInfo: boolean isRequired()>();

        if $z2 != 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        $r6 = virtualinvoke $r5.<com.sun.xml.bind.v2.schemagen.Tree: com.sun.xml.bind.v2.schemagen.Tree makeOptional(boolean)>($z4);

        $z3 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ElementPropertyInfo: boolean isCollection()>();

        $r7 = virtualinvoke $r6.<com.sun.xml.bind.v2.schemagen.Tree: com.sun.xml.bind.v2.schemagen.Tree makeRepeated(boolean)>($z3);

        $r8 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ElementPropertyInfo: javax.xml.namespace.QName getXmlName()>();

        if $r8 == null goto label6;

        $r9 = new com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$3;

        specialinvoke $r9.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$3: void <init>(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,javax.xml.namespace.QName,com.sun.xml.bind.v2.model.core.ElementPropertyInfo,com.sun.xml.bind.v2.schemagen.Tree)>(r10, $r8, r0, $r7);

        return $r9;

     label6:
        return $r7;
    }

    private boolean canBeDirectElementRef(com.sun.xml.bind.v2.model.core.TypeRef, javax.xml.namespace.QName, com.sun.xml.bind.v2.model.core.TypeInfo)
    {
        com.sun.xml.bind.v2.model.core.Element r12;
        com.sun.xml.bind.v2.model.core.TypeRef r0;
        int $i0;
        java.lang.String $r1, $r6, $r7, $r15, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.sun.xml.bind.v2.model.core.TypeInfo r8;
        com.sun.xml.bind.v2.model.core.NonElement $r2, $r11;
        javax.xml.namespace.QName r3, $r10, r14;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r4;
        com.sun.xml.bind.v2.model.core.ClassInfo $r5, $r9, r13;

        r4 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r0 := @parameter0: com.sun.xml.bind.v2.model.core.TypeRef;

        r3 := @parameter1: javax.xml.namespace.QName;

        r8 := @parameter2: com.sun.xml.bind.v2.model.core.TypeInfo;

        r12 = null;

        r13 = null;

        r14 = null;

        $z0 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.TypeRef: boolean isNillable()>();

        if $z0 != 0 goto label1;

        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.TypeRef: java.lang.String getDefaultValue()>();

        if $r1 == null goto label2;

     label1:
        return 0;

     label2:
        $r2 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.TypeRef: com.sun.xml.bind.v2.model.core.NonElement getTarget()>();

        $z1 = $r2 instanceof com.sun.xml.bind.v2.model.core.Element;

        if $z1 == 0 goto label3;

        $r11 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.TypeRef: com.sun.xml.bind.v2.model.core.NonElement getTarget()>();

        r12 = (com.sun.xml.bind.v2.model.core.Element) $r11;

        r14 = interfaceinvoke r12.<com.sun.xml.bind.v2.model.core.Element: javax.xml.namespace.QName getElementName()>();

        $z5 = r12 instanceof com.sun.xml.bind.v2.model.core.ClassInfo;

        if $z5 == 0 goto label3;

        r13 = (com.sun.xml.bind.v2.model.core.ClassInfo) r12;

     label3:
        $r15 = virtualinvoke r3.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r16 = r4.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.lang.String uri>;

        $z6 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z6 != 0 goto label5;

        $i0 = virtualinvoke $r15.<java.lang.String: int length()>();

        if $i0 <= 0 goto label5;

        $z4 = r8 instanceof com.sun.xml.bind.v2.model.core.ClassInfo;

        if $z4 == 0 goto label4;

        $r9 = (com.sun.xml.bind.v2.model.core.ClassInfo) r8;

        $r10 = interfaceinvoke $r9.<com.sun.xml.bind.v2.model.core.ClassInfo: javax.xml.namespace.QName getTypeName()>();

        if $r10 == null goto label5;

     label4:
        return 1;

     label5:
        if r13 == null goto label6;

        if r14 == null goto label6;

        $r5 = interfaceinvoke r12.<com.sun.xml.bind.v2.model.core.Element: com.sun.xml.bind.v2.model.core.ClassInfo getScope()>();

        if $r5 != null goto label6;

        $r6 = virtualinvoke r14.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r7 = virtualinvoke r3.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label6;

        return 1;

     label6:
        if r12 == null goto label9;

        if r14 == null goto label7;

        $z2 = virtualinvoke r14.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label7;

        $z7 = 1;

        goto label8;

     label7:
        $z7 = 0;

     label8:
        return $z7;

     label9:
        return 0;
    }

    private void handleAttributeProp(com.sun.xml.bind.v2.model.core.AttributePropertyInfo, com.sun.xml.bind.v2.schemagen.xmlschema.AttrDecls)
    {
        com.sun.xml.bind.v2.schemagen.xmlschema.AttrDecls r0;
        com.sun.xml.bind.v2.model.core.AttributePropertyInfo r2;
        com.sun.xml.bind.v2.schemagen.xmlschema.LocalAttribute $r1;
        javax.xml.namespace.QName $r3, $r5, $r6, $r10;
        java.lang.String $r4, $r7;
        com.sun.xml.bind.v2.schemagen.Form $r9;
        boolean $z0, $z1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r8;

        r8 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r2 := @parameter0: com.sun.xml.bind.v2.model.core.AttributePropertyInfo;

        r0 := @parameter1: com.sun.xml.bind.v2.schemagen.xmlschema.AttrDecls;

        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.schemagen.xmlschema.AttrDecls: com.sun.xml.bind.v2.schemagen.xmlschema.LocalAttribute attribute()>();

        $r3 = interfaceinvoke r2.<com.sun.xml.bind.v2.model.core.AttributePropertyInfo: javax.xml.namespace.QName getXmlName()>();

        $r4 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        $r6 = interfaceinvoke r2.<com.sun.xml.bind.v2.model.core.AttributePropertyInfo: javax.xml.namespace.QName getXmlName()>();

        $r7 = virtualinvoke $r6.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        interfaceinvoke $r1.<com.sun.xml.bind.v2.schemagen.xmlschema.LocalAttribute: com.sun.xml.bind.v2.schemagen.xmlschema.LocalAttribute name(java.lang.String)>($r7);

        specialinvoke r8.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeAttributeTypeRef(com.sun.xml.bind.v2.model.core.AttributePropertyInfo,com.sun.xml.bind.v2.schemagen.xmlschema.AttributeType)>(r2, $r1);

        $r9 = r8.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.Form attributeFormDefault>;

        $r10 = interfaceinvoke r2.<com.sun.xml.bind.v2.model.core.AttributePropertyInfo: javax.xml.namespace.QName getXmlName()>();

        virtualinvoke $r9.<com.sun.xml.bind.v2.schemagen.Form: void writeForm(com.sun.xml.bind.v2.schemagen.xmlschema.LocalAttribute,javax.xml.namespace.QName)>($r1, $r10);

        goto label2;

     label1:
        $r5 = interfaceinvoke r2.<com.sun.xml.bind.v2.model.core.AttributePropertyInfo: javax.xml.namespace.QName getXmlName()>();

        interfaceinvoke $r1.<com.sun.xml.bind.v2.schemagen.xmlschema.LocalAttribute: com.sun.xml.bind.v2.schemagen.xmlschema.LocalAttribute ref(javax.xml.namespace.QName)>($r5);

     label2:
        $z1 = interfaceinvoke r2.<com.sun.xml.bind.v2.model.core.AttributePropertyInfo: boolean isRequired()>();

        if $z1 == 0 goto label3;

        interfaceinvoke $r1.<com.sun.xml.bind.v2.schemagen.xmlschema.LocalAttribute: com.sun.xml.bind.v2.schemagen.xmlschema.LocalAttribute use(java.lang.String)>("required");

     label3:
        return;
    }

    private void writeAttributeTypeRef(com.sun.xml.bind.v2.model.core.AttributePropertyInfo, com.sun.xml.bind.v2.schemagen.xmlschema.AttributeType)
    {
        com.sun.xml.bind.v2.model.core.AttributePropertyInfo r0;
        com.sun.xml.bind.v2.schemagen.xmlschema.SimpleType $r3;
        com.sun.xml.bind.v2.schemagen.xmlschema.List $r4;
        boolean $z0;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r1;
        com.sun.xml.bind.v2.schemagen.xmlschema.AttributeType r2;

        r1 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r0 := @parameter0: com.sun.xml.bind.v2.model.core.AttributePropertyInfo;

        r2 := @parameter1: com.sun.xml.bind.v2.schemagen.xmlschema.AttributeType;

        $z0 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.AttributePropertyInfo: boolean isCollection()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke r2.<com.sun.xml.bind.v2.schemagen.xmlschema.AttributeType: com.sun.xml.bind.v2.schemagen.xmlschema.SimpleType simpleType()>();

        $r4 = interfaceinvoke $r3.<com.sun.xml.bind.v2.schemagen.xmlschema.SimpleType: com.sun.xml.bind.v2.schemagen.xmlschema.List list()>();

        specialinvoke r1.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeTypeRef(com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost,com.sun.xml.bind.v2.model.core.NonElementRef,java.lang.String)>($r4, r0, "itemType");

        goto label2;

     label1:
        specialinvoke r1.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeTypeRef(com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost,com.sun.xml.bind.v2.model.core.NonElementRef,java.lang.String)>(r2, r0, "type");

     label2:
        return;
    }

    private com.sun.xml.bind.v2.schemagen.Tree handleReferenceProp(com.sun.xml.bind.v2.model.core.ReferencePropertyInfo)
    {
        com.sun.xml.bind.v2.model.core.ReferencePropertyInfo r1;
        com.sun.xml.bind.v2.model.core.Element r15;
        java.util.ArrayList $r0;
        com.sun.xml.bind.v2.schemagen.GroupKind $r5;
        com.sun.xml.bind.v2.model.core.WildcardMode $r4;
        boolean $z0, $z1, $z2, $z3;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$6 $r10;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$4 $r14;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$5 $r12;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.Object $r13;
        javax.xml.namespace.QName $r9;
        com.sun.xml.bind.v2.schemagen.Tree $r6, $r7, $r8;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r11;

        r11 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r1 := @parameter0: com.sun.xml.bind.v2.model.core.ReferencePropertyInfo;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.ReferencePropertyInfo: java.util.Set getElements()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r15 = (com.sun.xml.bind.v2.model.core.Element) $r13;

        $r14 = new com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$4;

        specialinvoke $r14.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$4: void <init>(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,com.sun.xml.bind.v2.model.core.Element)>(r11, r15);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

        goto label1;

     label2:
        $r4 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.ReferencePropertyInfo: com.sun.xml.bind.v2.model.core.WildcardMode getWildcard()>();

        if $r4 == null goto label3;

        $r12 = new com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$5;

        specialinvoke $r12.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$5: void <init>(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,com.sun.xml.bind.v2.model.core.WildcardMode)>(r11, $r4);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

     label3:
        $r5 = <com.sun.xml.bind.v2.schemagen.GroupKind: com.sun.xml.bind.v2.schemagen.GroupKind CHOICE>;

        $r6 = staticinvoke <com.sun.xml.bind.v2.schemagen.Tree: com.sun.xml.bind.v2.schemagen.Tree makeGroup(com.sun.xml.bind.v2.schemagen.GroupKind,java.util.List)>($r5, $r0);

        $z1 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.ReferencePropertyInfo: boolean isCollection()>();

        $r7 = virtualinvoke $r6.<com.sun.xml.bind.v2.schemagen.Tree: com.sun.xml.bind.v2.schemagen.Tree makeRepeated(boolean)>($z1);

        $z2 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.ReferencePropertyInfo: boolean isRequired()>();

        if $z2 != 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        $r8 = virtualinvoke $r7.<com.sun.xml.bind.v2.schemagen.Tree: com.sun.xml.bind.v2.schemagen.Tree makeOptional(boolean)>($z3);

        $r9 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.ReferencePropertyInfo: javax.xml.namespace.QName getXmlName()>();

        if $r9 == null goto label6;

        $r10 = new com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$6;

        specialinvoke $r10.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$6: void <init>(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,javax.xml.namespace.QName,com.sun.xml.bind.v2.model.core.ReferencePropertyInfo,com.sun.xml.bind.v2.schemagen.Tree)>(r11, $r9, r1, $r8);

        return $r10;

     label6:
        return $r8;
    }

    private com.sun.xml.bind.v2.schemagen.Tree handleMapProp(com.sun.xml.bind.v2.model.core.MapPropertyInfo)
    {
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$7 $r0;
        com.sun.xml.bind.v2.model.core.MapPropertyInfo r2;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r1;

        r1 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r2 := @parameter0: com.sun.xml.bind.v2.model.core.MapPropertyInfo;

        $r0 = new com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$7;

        specialinvoke $r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$7: void <init>(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,com.sun.xml.bind.v2.model.core.MapPropertyInfo)>(r1, r2);

        return $r0;
    }

    private void writeKeyOrValue(com.sun.xml.bind.v2.schemagen.xmlschema.ExplicitGroup, java.lang.String, com.sun.xml.bind.v2.model.core.NonElement)
    {
        com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement $r1, $r3;
        com.sun.xml.bind.v2.schemagen.xmlschema.ExplicitGroup r0;
        com.sun.xml.bind.v2.model.core.NonElement r5;
        java.lang.String r2;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r4;

        r4 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.xmlschema.ExplicitGroup;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: com.sun.xml.bind.v2.model.core.NonElement;

        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.schemagen.xmlschema.ExplicitGroup: com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement element()>();

        $r3 = interfaceinvoke $r1.<com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement: com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement name(java.lang.String)>(r2);

        interfaceinvoke $r3.<com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement: com.sun.xml.bind.v2.schemagen.xmlschema.Occurs minOccurs(int)>(0);

        specialinvoke r4.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeTypeRef(com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost,com.sun.xml.bind.v2.model.core.NonElement,java.lang.String)>($r3, r5, "type");

        return;
    }

    public void addGlobalAttribute(com.sun.xml.bind.v2.model.core.AttributePropertyInfo)
    {
        com.sun.xml.bind.v2.model.core.AttributePropertyInfo r1;
        com.sun.xml.bind.v2.model.core.NonElement $r5;
        javax.xml.namespace.QName $r3, $r6;
        java.lang.String $r4;
        com.sun.xml.bind.v2.schemagen.MultiMap $r2;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;

        r0 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r1 := @parameter0: com.sun.xml.bind.v2.model.core.AttributePropertyInfo;

        $r2 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.MultiMap attributeDecls>;

        $r3 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.AttributePropertyInfo: javax.xml.namespace.QName getXmlName()>();

        $r4 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        virtualinvoke $r2.<com.sun.xml.bind.v2.schemagen.MultiMap: java.lang.Object put(java.lang.Comparable,java.lang.Object)>($r4, r1);

        $r5 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.AttributePropertyInfo: com.sun.xml.bind.v2.model.core.NonElement getTarget()>();

        $r6 = interfaceinvoke $r5.<com.sun.xml.bind.v2.model.core.NonElement: javax.xml.namespace.QName getTypeName()>();

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void addDependencyTo(javax.xml.namespace.QName)>($r6);

        return;
    }

    public void addGlobalElement(com.sun.xml.bind.v2.model.core.TypeRef)
    {
        com.sun.xml.bind.v2.model.core.NonElement $r6, $r7;
        com.sun.xml.bind.v2.model.core.TypeRef r1;
        com.sun.xml.bind.v2.schemagen.MultiMap $r2;
        javax.xml.namespace.QName $r3, $r8;
        java.lang.String $r4;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$ElementWithType $r5;

        r0 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r1 := @parameter0: com.sun.xml.bind.v2.model.core.TypeRef;

        $r2 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.MultiMap elementDecls>;

        $r3 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.TypeRef: javax.xml.namespace.QName getTagName()>();

        $r4 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r5 = new com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$ElementWithType;

        $r6 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.TypeRef: com.sun.xml.bind.v2.model.core.NonElement getTarget()>();

        specialinvoke $r5.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$ElementWithType: void <init>(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,boolean,com.sun.xml.bind.v2.model.core.NonElement)>(r0, 0, $r6);

        virtualinvoke $r2.<com.sun.xml.bind.v2.schemagen.MultiMap: java.lang.Object put(java.lang.Comparable,java.lang.Object)>($r4, $r5);

        $r7 = interfaceinvoke r1.<com.sun.xml.bind.v2.model.core.TypeRef: com.sun.xml.bind.v2.model.core.NonElement getTarget()>();

        $r8 = interfaceinvoke $r7.<com.sun.xml.bind.v2.model.core.NonElement: javax.xml.namespace.QName getTypeName()>();

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void addDependencyTo(javax.xml.namespace.QName)>($r8);

        return;
    }

    public java.lang.String toString()
    {
        java.util.Set $r3, $r7;
        com.sun.xml.bind.v2.schemagen.MultiMap $r5;
        java.lang.StringBuilder $r0, $r1, $r4, $r6;
        java.lang.String $r8;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r2;

        r2 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[classes=");

        $r3 = r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set classes>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",elementDecls=");

        $r5 = r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.MultiMap elementDecls>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",enums=");

        $r7 = r2.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set enums>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = specialinvoke r2.<java.lang.Object: java.lang.String toString()>();

        return $r8;
    }

    static java.util.Set access$000(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace)
    {
        java.util.Set $r1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        $r1 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set classes>;

        return $r1;
    }

    static void access$100(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace, javax.xml.namespace.QName)
    {
        javax.xml.namespace.QName r1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r1 := @parameter1: javax.xml.namespace.QName;

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void addDependencyTo(javax.xml.namespace.QName)>(r1);

        return;
    }

    static void access$200(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace, com.sun.xml.bind.v2.model.core.PropertyInfo, int)
    {
        com.sun.xml.bind.v2.model.core.PropertyInfo r1;
        int i0;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r1 := @parameter1: com.sun.xml.bind.v2.model.core.PropertyInfo;

        i0 := @parameter2: int;

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void processForeignNamespaces(com.sun.xml.bind.v2.model.core.PropertyInfo,int)>(r1, i0);

        return;
    }

    static boolean access$302(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace, boolean)
    {
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;
        boolean z0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        z0 := @parameter1: boolean;

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean useSwaRef> = z0;

        return z0;
    }

    static boolean access$402(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace, boolean)
    {
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;
        boolean z0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        z0 := @parameter1: boolean;

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean useMimeNs> = z0;

        return z0;
    }

    static com.sun.xml.bind.v2.schemagen.MultiMap access$500(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace)
    {
        com.sun.xml.bind.v2.schemagen.MultiMap $r1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        $r1 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.MultiMap elementDecls>;

        return $r1;
    }

    static java.util.Set access$600(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace)
    {
        java.util.Set $r1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        $r1 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set enums>;

        return $r1;
    }

    static java.util.Set access$700(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace)
    {
        java.util.Set $r1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        $r1 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: java.util.Set arrays>;

        return $r1;
    }

    static void access$800(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace, javax.xml.transform.Result, java.util.Map) throws java.io.IOException
    {
        javax.xml.transform.Result r1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;
        java.util.Map r2;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r1 := @parameter1: javax.xml.transform.Result;

        r2 := @parameter2: java.util.Map;

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeTo(javax.xml.transform.Result,java.util.Map)>(r1, r2);

        return;
    }

    static void access$1800(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace, com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost, com.sun.xml.bind.v2.model.core.NonElementRef, java.lang.String)
    {
        com.sun.xml.bind.v2.model.core.NonElementRef r2;
        com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost r1;
        java.lang.String r3;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r1 := @parameter1: com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost;

        r2 := @parameter2: com.sun.xml.bind.v2.model.core.NonElementRef;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeTypeRef(com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost,com.sun.xml.bind.v2.model.core.NonElementRef,java.lang.String)>(r1, r2, r3);

        return;
    }

    static com.sun.xml.bind.v2.schemagen.Form access$1900(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace)
    {
        com.sun.xml.bind.v2.schemagen.Form $r1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        $r1 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.Form elementFormDefault>;

        return $r1;
    }

    static boolean access$2000(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace, com.sun.xml.bind.v2.model.core.TypeRef, javax.xml.namespace.QName, com.sun.xml.bind.v2.model.core.TypeInfo)
    {
        com.sun.xml.bind.v2.model.core.TypeInfo r3;
        javax.xml.namespace.QName r2;
        com.sun.xml.bind.v2.model.core.TypeRef r1;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;
        boolean $z0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r1 := @parameter1: com.sun.xml.bind.v2.model.core.TypeRef;

        r2 := @parameter2: javax.xml.namespace.QName;

        r3 := @parameter3: com.sun.xml.bind.v2.model.core.TypeInfo;

        $z0 = specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean canBeDirectElementRef(com.sun.xml.bind.v2.model.core.TypeRef,javax.xml.namespace.QName,com.sun.xml.bind.v2.model.core.TypeInfo)>(r1, r2, r3);

        return $z0;
    }

    static void access$2100(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace, com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost, com.sun.xml.bind.v2.model.core.NonElement, java.lang.String)
    {
        com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost r1;
        com.sun.xml.bind.v2.model.core.NonElement r2;
        java.lang.String r3;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r1 := @parameter1: com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost;

        r2 := @parameter2: com.sun.xml.bind.v2.model.core.NonElement;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeTypeRef(com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost,com.sun.xml.bind.v2.model.core.NonElement,java.lang.String)>(r1, r2, r3);

        return;
    }

    static void access$2300(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace, com.sun.xml.bind.v2.schemagen.xmlschema.ExplicitGroup, java.lang.String, com.sun.xml.bind.v2.model.core.NonElement)
    {
        com.sun.xml.bind.v2.schemagen.xmlschema.ExplicitGroup r1;
        com.sun.xml.bind.v2.model.core.NonElement r3;
        java.lang.String r2;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r1 := @parameter1: com.sun.xml.bind.v2.schemagen.xmlschema.ExplicitGroup;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: com.sun.xml.bind.v2.model.core.NonElement;

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void writeKeyOrValue(com.sun.xml.bind.v2.schemagen.xmlschema.ExplicitGroup,java.lang.String,com.sun.xml.bind.v2.model.core.NonElement)>(r1, r2, r3);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/sun/xml/bind/v2/schemagen/XmlSchemaGenerator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: boolean $assertionsDisabled> = $z1;

        return;
    }
}
