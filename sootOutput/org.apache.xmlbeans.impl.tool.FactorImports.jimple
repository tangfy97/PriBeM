public class org.apache.xmlbeans.impl.tool.FactorImports extends java.lang.Object
{

    public void <init>()
    {
        org.apache.xmlbeans.impl.tool.FactorImports r0;

        r0 := @this: org.apache.xmlbeans.impl.tool.FactorImports;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void printUsage()
    {
        java.io.PrintStream $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Refactors a directory of XSD files to remove name conflicts.");

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("Usage: sfactor [-import common.xsd] [-out outputdir] inputdir");

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("    -import common.xsd - The XSD file to contain redundant ");

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("                         definitions for importing.");

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("    -out outputdir - The directory into which to place XSD ");

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("                     files resulting from refactoring, ");

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("                     plus a commonly imported common.xsd.");

        $r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("    inputdir - The directory containing the XSD files with");

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("               redundant definitions.");

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    -license - Print license information.");

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        org.apache.xmlbeans.impl.xb.xsdschema.TopLevelSimpleType[] $r66, $r154;
        org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement[] $r68, $r156;
        org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement $r89, $r97, $r105, $r107, $r109, $r113, $r114, $r169;
        org.apache.xmlbeans.impl.xb.xsdschema.TopLevelSimpleType $r115, $r117, $r121, $r122, $r171;
        java.lang.StringBuffer $r51, $r52, $r56, $r57, $r146, $r148, $r149, $r179, $r181, $r186, $r188, $r189, $r191, $r196, $r198, $r199, $r202, $r219, $r234, $r235, $r236, $r239, $r240;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema $r60, $r63, $r65, $r67, $r69, $r71, $r73, $r75, $r87, $r88, $r95, $r96, $r103, $r104, $r111, $r112, $r119, $r120, $r127, $r128, $r134, $r137, $r143, $r151, $r153, $r155, $r157, $r159, $r161, $r175, $r207;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, i31, $i32, i33, $i34, i35, i36, i37, i38, i39, i41, i42, i43, i44, i45, i46, i47, $i49;
        java.io.PrintStream $r50, $r55, $r138, $r139, $r145, $r176, $r178, $r185, $r195;
        org.apache.xmlbeans.XmlOptions $r41, $r42, $r47, $r48, $r241, $r242;
        org.apache.xmlbeans.impl.xb.xsdschema.NamedAttributeGroup $r83, $r85, $r90, $r163;
        org.apache.xmlbeans.impl.xb.xsdschema.FormChoice$Enum $r135;
        org.apache.xmlbeans.impl.xb.xsdschema.NamedGroup[] $r72, $r160;
        org.apache.xmlbeans.impl.xb.xsdschema.TopLevelAttribute $r99, $r101, $r106, $r167;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument $r131, $r133, $r141, r211, r213, r215;
        java.lang.String $r4, $r5, $r6, $r8, $r9, $r11, $r12, $r15, $r53, $r58, $r61, $r82, $r84, $r86, $r92, $r94, $r100, $r102, $r108, $r110, $r116, $r118, $r124, $r126, $r150, $r164, $r166, $r168, $r170, $r172, $r174, $r180, $r182, $r190, $r192, $r201, $r203, r205, r206, $r208, r209, r210, r212;
        org.apache.xmlbeans.impl.xb.xsdschema.IncludeDocument$Include $r76;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, z17, $z18;
        java.util.List $r3;
        org.apache.xmlbeans.XmlError $r200;
        byte $b40;
        java.io.IOException $r183;
        org.apache.xmlbeans.XmlException $r193;
        org.apache.xmlbeans.impl.xb.xsdschema.TopLevelComplexType $r123, $r125, $r129, $r130, $r173;
        org.apache.xmlbeans.impl.xb.xsdschema.TopLevelComplexType[] $r64, $r152;
        org.apache.xmlbeans.impl.tool.CommandLine $r218;
        java.util.HashSet $r217, $r223, $r224, $r225, $r226, $r227, $r228, $r229, $r230, $r231, $r232, $r233;
        java.lang.Object $r38, $r39, $r43, $r44, $r59, $r62, $r77, $r80, $r132;
        java.io.File[] $r16;
        org.apache.xmlbeans.impl.xb.xsdschema.NamedAttributeGroup[] $r74, $r162;
        java.util.Set $r32, $r34, $r36;
        org.apache.xmlbeans.impl.xb.xsdschema.TopLevelAttribute[] $r70, $r158;
        org.apache.xmlbeans.impl.xb.xsdschema.NamedGroup $r91, $r93, $r98, $r165;
        java.io.File $r45, r78, $r79, r81, $r136, $r140, $r142, $r147, $r187, $r197, r214, r216, $r220, $r221;
        java.lang.String[] $r2, $r7, $r10, r204;
        java.util.HashMap $r222, $r237, $r238;
        java.util.Iterator $r31, $r33, $r35, $r37;

        r204 := @parameter0: java.lang.String[];

        $r217 = new java.util.HashSet;

        specialinvoke $r217.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r217.<java.util.Set: boolean add(java.lang.Object)>("h");

        interfaceinvoke $r217.<java.util.Set: boolean add(java.lang.Object)>("help");

        interfaceinvoke $r217.<java.util.Set: boolean add(java.lang.Object)>("usage");

        interfaceinvoke $r217.<java.util.Set: boolean add(java.lang.Object)>("license");

        interfaceinvoke $r217.<java.util.Set: boolean add(java.lang.Object)>("version");

        $r218 = new org.apache.xmlbeans.impl.tool.CommandLine;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "import";

        $r2[1] = "out";

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r218.<org.apache.xmlbeans.impl.tool.CommandLine: void <init>(java.lang.String[],java.util.Collection,java.util.Collection)>(r204, $r217, $r3);

        $r4 = virtualinvoke $r218.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("h");

        if $r4 != null goto label01;

        $r5 = virtualinvoke $r218.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("help");

        if $r5 != null goto label01;

        $r6 = virtualinvoke $r218.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("usage");

        if $r6 != null goto label01;

        $i0 = lengthof r204;

        if $i0 >= 1 goto label02;

     label01:
        staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: void printUsage()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label02:
        $r7 = virtualinvoke $r218.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String[] getBadOpts()>();

        $i1 = lengthof $r7;

        if $i1 <= 0 goto label05;

        i30 = 0;

     label03:
        $i29 = lengthof $r7;

        if i30 >= $i29 goto label04;

        $r178 = <java.lang.System: java.io.PrintStream out>;

        $r219 = new java.lang.StringBuffer;

        specialinvoke $r219.<java.lang.StringBuffer: void <init>()>();

        $r179 = virtualinvoke $r219.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unrecognized option: ");

        $r180 = $r7[i30];

        $r181 = virtualinvoke $r179.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r180);

        $r182 = virtualinvoke $r181.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r178.<java.io.PrintStream: void println(java.lang.String)>($r182);

        i30 = i30 + 1;

        goto label03;

     label04:
        staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: void printUsage()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label05:
        $r8 = virtualinvoke $r218.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("license");

        if $r8 == null goto label06;

        staticinvoke <org.apache.xmlbeans.impl.tool.CommandLine: void printLicense()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label06:
        $r9 = virtualinvoke $r218.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("version");

        if $r9 == null goto label07;

        staticinvoke <org.apache.xmlbeans.impl.tool.CommandLine: void printVersion()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label07:
        $r10 = virtualinvoke $r218.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String[] args()>();

        $i2 = lengthof $r10;

        if $i2 == 1 goto label08;

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label08:
        $r11 = virtualinvoke $r218.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("import");

        r205 = $r11;

        if $r11 != null goto label09;

        r205 = "common.xsd";

     label09:
        $r12 = virtualinvoke $r218.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("out");

        r206 = $r12;

        if $r12 != null goto label10;

        $r176 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r176.<java.io.PrintStream: void println(java.lang.String)>("Using output directory \'out\'");

        r206 = "out";

     label10:
        $r220 = new java.io.File;

        specialinvoke $r220.<java.io.File: void <init>(java.lang.String)>(r206);

        $r221 = new java.io.File;

        $r15 = $r10[0];

        specialinvoke $r221.<java.io.File: void <init>(java.lang.String)>($r15);

        $r16 = virtualinvoke $r218.<org.apache.xmlbeans.impl.tool.CommandLine: java.io.File[] getFiles()>();

        $r222 = new java.util.HashMap;

        specialinvoke $r222.<java.util.HashMap: void <init>()>();

        $r223 = new java.util.HashSet;

        specialinvoke $r223.<java.util.HashSet: void <init>()>();

        $r224 = new java.util.HashSet;

        specialinvoke $r224.<java.util.HashSet: void <init>()>();

        $r225 = new java.util.HashSet;

        specialinvoke $r225.<java.util.HashSet: void <init>()>();

        $r226 = new java.util.HashSet;

        specialinvoke $r226.<java.util.HashSet: void <init>()>();

        $r227 = new java.util.HashSet;

        specialinvoke $r227.<java.util.HashSet: void <init>()>();

        $r228 = new java.util.HashSet;

        specialinvoke $r228.<java.util.HashSet: void <init>()>();

        $r229 = new java.util.HashSet;

        specialinvoke $r229.<java.util.HashSet: void <init>()>();

        $r230 = new java.util.HashSet;

        specialinvoke $r230.<java.util.HashSet: void <init>()>();

        $r231 = new java.util.HashSet;

        specialinvoke $r231.<java.util.HashSet: void <init>()>();

        $r232 = new java.util.HashSet;

        specialinvoke $r232.<java.util.HashSet: void <init>()>();

        $r233 = new java.util.HashSet;

        specialinvoke $r233.<java.util.HashSet: void <init>()>();

        i31 = 0;

     label11:
        $i32 = lengthof $r16;

        if i31 >= $i32 goto label31;

     label12:
        $r140 = $r16[i31];

        $r141 = staticinvoke <org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Factory: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument parse(java.io.File)>($r140);

        $r142 = $r16[i31];

        interfaceinvoke $r222.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r141, $r142);

        $r143 = interfaceinvoke $r141.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $i22 = interfaceinvoke $r143.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: int sizeOfImportArray()>();

        if $i22 > 0 goto label13;

        $r175 = interfaceinvoke $r141.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $i28 = interfaceinvoke $r175.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: int sizeOfIncludeArray()>();

        if $i28 <= 0 goto label14;

     label13:
        $r145 = <java.lang.System: java.io.PrintStream out>;

        $r234 = new java.lang.StringBuffer;

        specialinvoke $r234.<java.lang.StringBuffer: void <init>()>();

        $r146 = virtualinvoke $r234.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("warning: ");

        $r147 = $r16[i31];

        $r148 = virtualinvoke $r146.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r147);

        $r149 = virtualinvoke $r148.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" contains imports or includes that are being ignored.");

        $r150 = virtualinvoke $r149.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r145.<java.io.PrintStream: void println(java.lang.String)>($r150);

     label14:
        $r207 = interfaceinvoke $r141.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r208 = interfaceinvoke $r207.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.String getTargetNamespace()>();

        r209 = $r208;

        if $r208 != null goto label15;

        r209 = "";

     label15:
        $r151 = interfaceinvoke $r141.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r152 = interfaceinvoke $r151.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelComplexType[] getComplexTypeArray()>();

        i33 = 0;

     label16:
        $i34 = lengthof $r152;

        if i33 >= $i34 goto label17;

        $r173 = $r152[i33];

        $r174 = interfaceinvoke $r173.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelComplexType: java.lang.String getName()>();

        staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: void noteName(java.lang.String,java.lang.String,java.util.Set,java.util.Set,java.util.Set)>($r174, r209, $r225, $r230, $r233);

        i33 = i33 + 1;

        goto label16;

     label17:
        $r153 = interfaceinvoke $r141.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r154 = interfaceinvoke $r153.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelSimpleType[] getSimpleTypeArray()>();

        i35 = 0;

     label18:
        $i23 = lengthof $r154;

        if i35 >= $i23 goto label19;

        $r171 = $r154[i35];

        $r172 = interfaceinvoke $r171.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelSimpleType: java.lang.String getName()>();

        staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: void noteName(java.lang.String,java.lang.String,java.util.Set,java.util.Set,java.util.Set)>($r172, r209, $r225, $r230, $r233);

        i35 = i35 + 1;

        goto label18;

     label19:
        $r155 = interfaceinvoke $r141.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r156 = interfaceinvoke $r155.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement[] getElementArray()>();

        i36 = 0;

     label20:
        $i24 = lengthof $r156;

        if i36 >= $i24 goto label21;

        $r169 = $r156[i36];

        $r170 = interfaceinvoke $r169.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement: java.lang.String getName()>();

        staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: void noteName(java.lang.String,java.lang.String,java.util.Set,java.util.Set,java.util.Set)>($r170, r209, $r223, $r228, $r233);

        i36 = i36 + 1;

        goto label20;

     label21:
        $r157 = interfaceinvoke $r141.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r158 = interfaceinvoke $r157.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelAttribute[] getAttributeArray()>();

        i37 = 0;

     label22:
        $i25 = lengthof $r158;

        if i37 >= $i25 goto label23;

        $r167 = $r158[i37];

        $r168 = interfaceinvoke $r167.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelAttribute: java.lang.String getName()>();

        staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: void noteName(java.lang.String,java.lang.String,java.util.Set,java.util.Set,java.util.Set)>($r168, r209, $r224, $r229, $r233);

        i37 = i37 + 1;

        goto label22;

     label23:
        $r159 = interfaceinvoke $r141.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r160 = interfaceinvoke $r159.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.NamedGroup[] getGroupArray()>();

        i38 = 0;

     label24:
        $i26 = lengthof $r160;

        if i38 >= $i26 goto label25;

        $r165 = $r160[i38];

        $r166 = interfaceinvoke $r165.<org.apache.xmlbeans.impl.xb.xsdschema.NamedGroup: java.lang.String getName()>();

        staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: void noteName(java.lang.String,java.lang.String,java.util.Set,java.util.Set,java.util.Set)>($r166, r209, $r226, $r231, $r233);

        i38 = i38 + 1;

        goto label24;

     label25:
        $r161 = interfaceinvoke $r141.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r162 = interfaceinvoke $r161.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.NamedAttributeGroup[] getAttributeGroupArray()>();

        i39 = 0;

     label26:
        $i27 = lengthof $r162;

        if i39 >= $i27 goto label27;

        $r163 = $r162[i39];

        $r164 = interfaceinvoke $r163.<org.apache.xmlbeans.impl.xb.xsdschema.NamedAttributeGroup: java.lang.String getName()>();

        staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: void noteName(java.lang.String,java.lang.String,java.util.Set,java.util.Set,java.util.Set)>($r164, r209, $r227, $r232, $r233);

        i39 = i39 + 1;

        goto label26;

     label27:
        goto label30;

     label28:
        $r193 := @caughtexception;

        $r195 = <java.lang.System: java.io.PrintStream out>;

        $r235 = new java.lang.StringBuffer;

        specialinvoke $r235.<java.lang.StringBuffer: void <init>()>();

        $r196 = virtualinvoke $r235.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("warning: ");

        $r197 = $r16[i31];

        $r198 = virtualinvoke $r196.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r197);

        $r199 = virtualinvoke $r198.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a schema file - ");

        $r200 = virtualinvoke $r193.<org.apache.xmlbeans.XmlException: org.apache.xmlbeans.XmlError getError()>();

        $r201 = virtualinvoke $r200.<org.apache.xmlbeans.XmlError: java.lang.String toString()>();

        $r202 = virtualinvoke $r199.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r201);

        $r203 = virtualinvoke $r202.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r195.<java.io.PrintStream: void println(java.lang.String)>($r203);

        goto label30;

     label29:
        $r183 := @caughtexception;

        $r185 = <java.lang.System: java.io.PrintStream err>;

        $r236 = new java.lang.StringBuffer;

        specialinvoke $r236.<java.lang.StringBuffer: void <init>()>();

        $r186 = virtualinvoke $r236.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to load ");

        $r187 = $r16[i31];

        $r188 = virtualinvoke $r186.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r187);

        $r189 = virtualinvoke $r188.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - ");

        $r190 = virtualinvoke $r183.<java.io.IOException: java.lang.String getMessage()>();

        $r191 = virtualinvoke $r189.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r190);

        $r192 = virtualinvoke $r191.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r185.<java.io.PrintStream: void println(java.lang.String)>($r192);

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;

     label30:
        i31 = i31 + 1;

        goto label11;

     label31:
        $i3 = interfaceinvoke $r222.<java.util.Map: int size()>();

        if $i3 != 0 goto label32;

        $r139 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r139.<java.io.PrintStream: void println(java.lang.String)>("No schema files found.");

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label32:
        $i4 = interfaceinvoke $r230.<java.util.Set: int size()>();

        $i5 = interfaceinvoke $r228.<java.util.Set: int size()>();

        $i6 = $i4 + $i5;

        $i7 = interfaceinvoke $r229.<java.util.Set: int size()>();

        $i8 = $i6 + $i7;

        $i9 = interfaceinvoke $r231.<java.util.Set: int size()>();

        $i10 = $i8 + $i9;

        $i11 = interfaceinvoke $r232.<java.util.Set: int size()>();

        $i12 = $i10 + $i11;

        if $i12 != 0 goto label33;

        $r138 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r138.<java.io.PrintStream: void println(java.lang.String)>("No duplicate names found.");

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label33:
        $r237 = new java.util.HashMap;

        specialinvoke $r237.<java.util.HashMap: void <init>()>();

        $r238 = new java.util.HashMap;

        specialinvoke $r238.<java.util.HashMap: void <init>()>();

        $i13 = interfaceinvoke $r233.<java.util.Set: int size()>();

        if $i13 != 1 goto label34;

        $b40 = 0;

        goto label35;

     label34:
        $b40 = 1;

     label35:
        i41 = $b40;

        $r31 = interfaceinvoke $r233.<java.util.Set: java.util.Iterator iterator()>();

     label36:
        $z16 = interfaceinvoke $r31.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label38;

        $r132 = interfaceinvoke $r31.<java.util.Iterator: java.lang.Object next()>();

        r210 = (java.lang.String) $r132;

        $r133 = staticinvoke <org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Factory: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument parse(java.lang.String)>("<xs:schema xmlns:xs=\'http://www.w3.org/2001/XMLSchema\'/>");

        $i20 = virtualinvoke r210.<java.lang.String: int length()>();

        if $i20 <= 0 goto label37;

        $r137 = interfaceinvoke $r133.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        interfaceinvoke $r137.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: void setTargetNamespace(java.lang.String)>(r210);

     label37:
        $r134 = interfaceinvoke $r133.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r135 = <org.apache.xmlbeans.impl.xb.xsdschema.FormChoice: org.apache.xmlbeans.impl.xb.xsdschema.FormChoice$Enum QUALIFIED>;

        interfaceinvoke $r134.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: void setElementFormDefault(org.apache.xmlbeans.impl.xb.xsdschema.FormChoice$Enum)>($r135);

        interfaceinvoke $r237.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r210, $r133);

        $i21 = i41;

        i41 = i41 + 1;

        $r136 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: java.io.File commonFileFor(java.lang.String,java.lang.String,int,java.io.File)>(r205, r210, $i21, $r220);

        interfaceinvoke $r238.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r133, $r136);

        goto label36;

     label38:
        $r32 = interfaceinvoke $r222.<java.util.Map: java.util.Set keySet()>();

        $r33 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>();

     label39:
        $z0 = interfaceinvoke $r33.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label72;

        $r59 = interfaceinvoke $r33.<java.util.Iterator: java.lang.Object next()>();

        r211 = (org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument) $r59;

        $r60 = interfaceinvoke r211.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r61 = interfaceinvoke $r60.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.String getTargetNamespace()>();

        r212 = $r61;

        if $r61 != null goto label40;

        r212 = "";

     label40:
        $r62 = interfaceinvoke $r237.<java.util.Map: java.lang.Object get(java.lang.Object)>(r212);

        $r131 = (org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument) $r62;

        z17 = 0;

        $r63 = interfaceinvoke r211.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r64 = interfaceinvoke $r63.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelComplexType[] getComplexTypeArray()>();

        $i14 = lengthof $r64;

        i42 = $i14 - 1;

     label41:
        if i42 < 0 goto label45;

        $r123 = $r64[i42];

        $r124 = interfaceinvoke $r123.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelComplexType: java.lang.String getName()>();

        $z14 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: boolean isDuplicate(java.lang.String,java.lang.String,java.util.Set)>($r124, r212, $r230);

        if $z14 != 0 goto label42;

        goto label44;

     label42:
        $r125 = $r64[i42];

        $r126 = interfaceinvoke $r125.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelComplexType: java.lang.String getName()>();

        $z15 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: boolean isFirstDuplicate(java.lang.String,java.lang.String,java.util.Set,java.util.Set)>($r126, r212, $r225, $r230);

        if $z15 == 0 goto label43;

        $r128 = interfaceinvoke $r131.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r129 = interfaceinvoke $r128.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelComplexType addNewComplexType()>();

        $r130 = $r64[i42];

        interfaceinvoke $r129.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelComplexType: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>($r130);

     label43:
        z17 = 1;

        $r127 = interfaceinvoke r211.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        interfaceinvoke $r127.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: void removeComplexType(int)>(i42);

     label44:
        $i49 = (int) -1;

        i42 = i42 + $i49;

        goto label41;

     label45:
        $r65 = interfaceinvoke r211.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r66 = interfaceinvoke $r65.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelSimpleType[] getSimpleTypeArray()>();

        i43 = 0;

     label46:
        $i15 = lengthof $r66;

        if i43 >= $i15 goto label50;

        $r115 = $r66[i43];

        $r116 = interfaceinvoke $r115.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelSimpleType: java.lang.String getName()>();

        $z12 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: boolean isDuplicate(java.lang.String,java.lang.String,java.util.Set)>($r116, r212, $r230);

        if $z12 != 0 goto label47;

        goto label49;

     label47:
        $r117 = $r66[i43];

        $r118 = interfaceinvoke $r117.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelSimpleType: java.lang.String getName()>();

        $z13 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: boolean isFirstDuplicate(java.lang.String,java.lang.String,java.util.Set,java.util.Set)>($r118, r212, $r225, $r230);

        if $z13 == 0 goto label48;

        $r120 = interfaceinvoke $r131.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r121 = interfaceinvoke $r120.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelSimpleType addNewSimpleType()>();

        $r122 = $r66[i43];

        interfaceinvoke $r121.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelSimpleType: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>($r122);

     label48:
        z17 = 1;

        $r119 = interfaceinvoke r211.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        interfaceinvoke $r119.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: void removeSimpleType(int)>(i43);

     label49:
        i43 = i43 + 1;

        goto label46;

     label50:
        $r67 = interfaceinvoke r211.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r68 = interfaceinvoke $r67.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement[] getElementArray()>();

        i44 = 0;

     label51:
        $i16 = lengthof $r68;

        if i44 >= $i16 goto label55;

        $r107 = $r68[i44];

        $r108 = interfaceinvoke $r107.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement: java.lang.String getName()>();

        $z10 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: boolean isDuplicate(java.lang.String,java.lang.String,java.util.Set)>($r108, r212, $r228);

        if $z10 != 0 goto label52;

        goto label54;

     label52:
        $r109 = $r68[i44];

        $r110 = interfaceinvoke $r109.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement: java.lang.String getName()>();

        $z11 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: boolean isFirstDuplicate(java.lang.String,java.lang.String,java.util.Set,java.util.Set)>($r110, r212, $r223, $r228);

        if $z11 == 0 goto label53;

        $r112 = interfaceinvoke $r131.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r113 = interfaceinvoke $r112.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement addNewElement()>();

        $r114 = $r68[i44];

        interfaceinvoke $r113.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>($r114);

     label53:
        z17 = 1;

        $r111 = interfaceinvoke r211.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        interfaceinvoke $r111.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: void removeElement(int)>(i44);

     label54:
        i44 = i44 + 1;

        goto label51;

     label55:
        $r69 = interfaceinvoke r211.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r70 = interfaceinvoke $r69.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelAttribute[] getAttributeArray()>();

        i45 = 0;

     label56:
        $i17 = lengthof $r70;

        if i45 >= $i17 goto label60;

        $r99 = $r70[i45];

        $r100 = interfaceinvoke $r99.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelAttribute: java.lang.String getName()>();

        $z8 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: boolean isDuplicate(java.lang.String,java.lang.String,java.util.Set)>($r100, r212, $r229);

        if $z8 != 0 goto label57;

        goto label59;

     label57:
        $r101 = $r70[i45];

        $r102 = interfaceinvoke $r101.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelAttribute: java.lang.String getName()>();

        $z9 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: boolean isFirstDuplicate(java.lang.String,java.lang.String,java.util.Set,java.util.Set)>($r102, r212, $r224, $r229);

        if $z9 == 0 goto label58;

        $r104 = interfaceinvoke $r131.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r105 = interfaceinvoke $r104.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement addNewElement()>();

        $r106 = $r70[i45];

        interfaceinvoke $r105.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>($r106);

     label58:
        z17 = 1;

        $r103 = interfaceinvoke r211.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        interfaceinvoke $r103.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: void removeElement(int)>(i45);

     label59:
        i45 = i45 + 1;

        goto label56;

     label60:
        $r71 = interfaceinvoke r211.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r72 = interfaceinvoke $r71.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.NamedGroup[] getGroupArray()>();

        i46 = 0;

     label61:
        $i18 = lengthof $r72;

        if i46 >= $i18 goto label65;

        $r91 = $r72[i46];

        $r92 = interfaceinvoke $r91.<org.apache.xmlbeans.impl.xb.xsdschema.NamedGroup: java.lang.String getName()>();

        $z6 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: boolean isDuplicate(java.lang.String,java.lang.String,java.util.Set)>($r92, r212, $r231);

        if $z6 != 0 goto label62;

        goto label64;

     label62:
        $r93 = $r72[i46];

        $r94 = interfaceinvoke $r93.<org.apache.xmlbeans.impl.xb.xsdschema.NamedGroup: java.lang.String getName()>();

        $z7 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: boolean isFirstDuplicate(java.lang.String,java.lang.String,java.util.Set,java.util.Set)>($r94, r212, $r226, $r231);

        if $z7 == 0 goto label63;

        $r96 = interfaceinvoke $r131.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r97 = interfaceinvoke $r96.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement addNewElement()>();

        $r98 = $r72[i46];

        interfaceinvoke $r97.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>($r98);

     label63:
        z17 = 1;

        $r95 = interfaceinvoke r211.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        interfaceinvoke $r95.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: void removeElement(int)>(i46);

     label64:
        i46 = i46 + 1;

        goto label61;

     label65:
        $r73 = interfaceinvoke r211.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r74 = interfaceinvoke $r73.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.NamedAttributeGroup[] getAttributeGroupArray()>();

        i47 = 0;

     label66:
        $i19 = lengthof $r74;

        if i47 >= $i19 goto label70;

        $r83 = $r74[i47];

        $r84 = interfaceinvoke $r83.<org.apache.xmlbeans.impl.xb.xsdschema.NamedAttributeGroup: java.lang.String getName()>();

        $z4 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: boolean isDuplicate(java.lang.String,java.lang.String,java.util.Set)>($r84, r212, $r232);

        if $z4 != 0 goto label67;

        goto label69;

     label67:
        $r85 = $r74[i47];

        $r86 = interfaceinvoke $r85.<org.apache.xmlbeans.impl.xb.xsdschema.NamedAttributeGroup: java.lang.String getName()>();

        $z5 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: boolean isFirstDuplicate(java.lang.String,java.lang.String,java.util.Set,java.util.Set)>($r86, r212, $r227, $r232);

        if $z5 == 0 goto label68;

        $r88 = interfaceinvoke $r131.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r89 = interfaceinvoke $r88.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement addNewElement()>();

        $r90 = $r74[i47];

        interfaceinvoke $r89.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>($r90);

     label68:
        z17 = 1;

        $r87 = interfaceinvoke r211.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        interfaceinvoke $r87.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: void removeElement(int)>(i47);

     label69:
        i47 = i47 + 1;

        goto label66;

     label70:
        if z17 == 0 goto label71;

        $r75 = interfaceinvoke r211.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r76 = interfaceinvoke $r75.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.IncludeDocument$Include addNewInclude()>();

        $r77 = interfaceinvoke $r222.<java.util.Map: java.lang.Object get(java.lang.Object)>(r211);

        r78 = (java.io.File) $r77;

        $r79 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: java.io.File outputFileFor(java.io.File,java.io.File,java.io.File)>(r78, $r221, $r220);

        $r80 = interfaceinvoke $r238.<java.util.Map: java.lang.Object get(java.lang.Object)>($r131);

        r81 = (java.io.File) $r80;

        if r212 == null goto label71;

        $r82 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: java.lang.String relativeURIFor(java.io.File,java.io.File)>($r79, r81);

        interfaceinvoke $r76.<org.apache.xmlbeans.impl.xb.xsdschema.IncludeDocument$Include: void setSchemaLocation(java.lang.String)>($r82);

     label71:
        goto label39;

     label72:
        $z1 = virtualinvoke $r220.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label73;

        $z3 = virtualinvoke $r220.<java.io.File: boolean mkdirs()>();

        if $z3 != 0 goto label73;

        $r55 = <java.lang.System: java.io.PrintStream err>;

        $r239 = new java.lang.StringBuffer;

        specialinvoke $r239.<java.lang.StringBuffer: void <init>()>();

        $r56 = virtualinvoke $r239.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to makedir ");

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r220);

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r55.<java.io.PrintStream: void println(java.lang.String)>($r58);

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;

     label73:
        $r34 = interfaceinvoke $r222.<java.util.Map: java.util.Set keySet()>();

        $r35 = interfaceinvoke $r34.<java.util.Set: java.util.Iterator iterator()>();

     label74:
        $z18 = interfaceinvoke $r35.<java.util.Iterator: boolean hasNext()>();

        if $z18 == 0 goto label77;

        $r43 = interfaceinvoke $r35.<java.util.Iterator: java.lang.Object next()>();

        r213 = (org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument) $r43;

        $r44 = interfaceinvoke $r222.<java.util.Map: java.lang.Object get(java.lang.Object)>(r213);

        r214 = (java.io.File) $r44;

        $r45 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: java.io.File outputFileFor(java.io.File,java.io.File,java.io.File)>(r214, $r221, $r220);

        if $r45 != null goto label75;

        $r50 = <java.lang.System: java.io.PrintStream out>;

        $r240 = new java.lang.StringBuffer;

        specialinvoke $r240.<java.lang.StringBuffer: void <init>()>();

        $r51 = virtualinvoke $r240.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot copy ");

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r214);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r50.<java.io.PrintStream: void println(java.lang.String)>($r53);

        goto label76;

     label75:
        $r241 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r241.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        $r47 = virtualinvoke $r241.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setSavePrettyPrint()>();

        $r48 = virtualinvoke $r47.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setSaveAggresiveNamespaces()>();

        interfaceinvoke r213.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: void save(java.io.File,org.apache.xmlbeans.XmlOptions)>($r45, $r48);

     label76:
        goto label74;

     label77:
        $r36 = interfaceinvoke $r238.<java.util.Map: java.util.Set keySet()>();

        $r37 = interfaceinvoke $r36.<java.util.Set: java.util.Iterator iterator()>();

     label78:
        $z2 = interfaceinvoke $r37.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label79;

        $r38 = interfaceinvoke $r37.<java.util.Iterator: java.lang.Object next()>();

        r215 = (org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument) $r38;

        $r39 = interfaceinvoke $r238.<java.util.Map: java.lang.Object get(java.lang.Object)>(r215);

        r216 = (java.io.File) $r39;

        $r242 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r242.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        $r41 = virtualinvoke $r242.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setSavePrettyPrint()>();

        $r42 = virtualinvoke $r41.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setSaveAggresiveNamespaces()>();

        interfaceinvoke r215.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: void save(java.io.File,org.apache.xmlbeans.XmlOptions)>(r216, $r42);

        goto label78;

     label79:
        return;

        catch org.apache.xmlbeans.XmlException from label12 to label27 with label28;
        catch java.io.IOException from label12 to label27 with label29;
    }

    private static java.io.File outputFileFor(java.io.File, java.io.File, java.io.File)
    {
        java.lang.StringBuffer $r11, $r13, $r14;
        java.net.URI $r2, $r5, $r6, $r8, $r9;
        java.lang.String $r15;
        boolean $z0;
        java.io.PrintStream $r12;
        java.io.File r0, $r1, r3, $r4, r7, $r10;

        r3 := @parameter0: java.io.File;

        r0 := @parameter1: java.io.File;

        r7 := @parameter2: java.io.File;

        $r1 = virtualinvoke r0.<java.io.File: java.io.File getAbsoluteFile()>();

        $r2 = virtualinvoke $r1.<java.io.File: java.net.URI toURI()>();

        $r4 = virtualinvoke r3.<java.io.File: java.io.File getAbsoluteFile()>();

        $r5 = virtualinvoke $r4.<java.io.File: java.net.URI toURI()>();

        $r6 = virtualinvoke $r2.<java.net.URI: java.net.URI relativize(java.net.URI)>($r5);

        $z0 = virtualinvoke $r6.<java.net.URI: boolean isAbsolute()>();

        if $z0 == 0 goto label1;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot relativize ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r15);

        return null;

     label1:
        $r8 = virtualinvoke r7.<java.io.File: java.net.URI toURI()>();

        $r9 = staticinvoke <org.apache.xmlbeans.impl.tool.CodeGenUtil: java.net.URI resolve(java.net.URI,java.net.URI)>($r8, $r6);

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.net.URI)>($r9);

        return $r10;
    }

    private static java.net.URI commonAncestor(java.net.URI, java.net.URI)
    {
        java.net.URISyntaxException $r6;
        int $i0, $i1, i4, i5, i6, $i7, $i8, $i10;
        java.net.URI r0, r2, $r7;
        java.lang.String $r1, $r3, $r5;
        char $c2, $c3;

        r0 := @parameter0: java.net.URI;

        r2 := @parameter1: java.net.URI;

        $r1 = virtualinvoke r0.<java.net.URI: java.lang.String toString()>();

        $r3 = virtualinvoke r2.<java.net.URI: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i4 = $i0;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 >= $i0 goto label1;

        i4 = virtualinvoke $r3.<java.lang.String: int length()>();

     label1:
        i5 = 0;

     label2:
        if i5 >= i4 goto label4;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i5);

        $c3 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(i5);

        $i7 = (int) $c2;

        $i8 = (int) $c3;

        if $i7 == $i8 goto label3;

        goto label4;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        $i10 = (int) -1;

        i6 = i5 + $i10;

        if i6 < 0 goto label5;

        i6 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int,int)>(47, i6);

     label5:
        if i6 >= 0 goto label6;

        return null;

     label6:
        $r7 = new java.net.URI;

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, i6);

        specialinvoke $r7.<java.net.URI: void <init>(java.lang.String)>($r5);

     label7:
        return $r7;

     label8:
        $r6 := @caughtexception;

        return null;

        catch java.net.URISyntaxException from label6 to label7 with label8;
    }

    private static java.lang.String relativeURIFor(java.io.File, java.io.File)
    {
        java.lang.StringBuffer $r11, $r12, $r14, $r16, $r17, $r18;
        int $i0, $i1, i2;
        java.net.URI $r2, $r5, $r6, $r7, $r8;
        java.lang.String $r9, $r10, $r13, $r15, $r19, r20;
        boolean $z0, $z1;
        java.io.File r0, $r1, r3, $r4;

        r0 := @parameter0: java.io.File;

        r3 := @parameter1: java.io.File;

        $r1 = virtualinvoke r0.<java.io.File: java.io.File getAbsoluteFile()>();

        $r2 = virtualinvoke $r1.<java.io.File: java.net.URI toURI()>();

        $r4 = virtualinvoke r3.<java.io.File: java.io.File getAbsoluteFile()>();

        $r5 = virtualinvoke $r4.<java.io.File: java.net.URI toURI()>();

        $r6 = staticinvoke <org.apache.xmlbeans.impl.tool.FactorImports: java.net.URI commonAncestor(java.net.URI,java.net.URI)>($r2, $r5);

        if $r6 != null goto label1;

        $r19 = virtualinvoke $r5.<java.net.URI: java.lang.String toString()>();

        return $r19;

     label1:
        $r7 = virtualinvoke $r6.<java.net.URI: java.net.URI relativize(java.net.URI)>($r2);

        $r8 = virtualinvoke $r6.<java.net.URI: java.net.URI relativize(java.net.URI)>($r5);

        $z0 = virtualinvoke $r7.<java.net.URI: boolean isAbsolute()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke $r8.<java.net.URI: boolean isAbsolute()>();

        if $z1 == 0 goto label3;

     label2:
        $r9 = virtualinvoke $r5.<java.net.URI: java.lang.String toString()>();

        return $r9;

     label3:
        r20 = "";

        $r10 = virtualinvoke $r7.<java.net.URI: java.lang.String toString()>();

        i2 = 0;

     label4:
        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        if i2 >= $i0 goto label6;

        $i1 = virtualinvoke $r10.<java.lang.String: int indexOf(int,int)>(47, i2);

        if $i1 >= 0 goto label5;

        goto label6;

     label5:
        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r20);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("../");

        r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        i2 = $i1 + 1;

        goto label4;

     label6:
        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r20);

        $r13 = virtualinvoke $r8.<java.net.URI: java.lang.String toString()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r15;
    }

    private static java.io.File commonFileFor(java.lang.String, java.lang.String, int, java.io.File)
    {
        java.io.File r1, $r10;
        java.lang.StringBuffer $r2, $r4, $r5, $r7;
        int i0, $i1, i2;
        java.lang.String r0, $r3, $r6, r8, r9;

        r0 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 := @parameter3: java.io.File;

        r9 = r0;

        if i0 <= 0 goto label2;

        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        i2 = $i1;

        if $i1 >= 0 goto label1;

        i2 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i2);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, r9);

        return $r10;
    }

    private static void noteName(java.lang.String, java.lang.String, java.util.Set, java.util.Set, java.util.Set)
    {
        java.util.Set r3, r4, r5;
        java.lang.String r0, r2;
        javax.xml.namespace.QName $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Set;

        r4 := @parameter3: java.util.Set;

        r5 := @parameter4: java.util.Set;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = new javax.xml.namespace.QName;

        specialinvoke $r1.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>(r2, r0);

        $z0 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>($r1);

        interfaceinvoke r5.<java.util.Set: boolean add(java.lang.Object)>(r2);

        goto label3;

     label2:
        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

     label3:
        return;
    }

    private static boolean isFirstDuplicate(java.lang.String, java.lang.String, java.util.Set, java.util.Set)
    {
        java.util.Set r3, r4;
        java.lang.String r0, r2;
        javax.xml.namespace.QName $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.util.Set;

        r3 := @parameter3: java.util.Set;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = new javax.xml.namespace.QName;

        specialinvoke $r1.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>(r2, r0);

        $z0 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $z1 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z1 == 0 goto label2;

        interfaceinvoke r4.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        return 1;

     label2:
        return 0;
    }

    private static boolean isDuplicate(java.lang.String, java.lang.String, java.util.Set)
    {
        java.util.Set r3;
        java.lang.String r0, r2;
        javax.xml.namespace.QName $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Set;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = new javax.xml.namespace.QName;

        specialinvoke $r1.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>(r2, r0);

        $z0 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }
}
