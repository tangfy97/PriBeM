public class org.apache.http.impl.auth.NegotiateScheme extends org.apache.http.impl.auth.GGSSchemeBase
{
    private final org.apache.commons.logging.Log log;
    private static final java.lang.String SPNEGO_OID;
    private static final java.lang.String KERBEROS_OID;
    private final org.apache.http.impl.auth.SpnegoTokenGenerator spengoGenerator;

    public void <init>(org.apache.http.impl.auth.SpnegoTokenGenerator, boolean)
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.apache.http.impl.auth.SpnegoTokenGenerator r3;
        org.apache.http.impl.auth.NegotiateScheme r0;
        boolean z0;

        r0 := @this: org.apache.http.impl.auth.NegotiateScheme;

        r3 := @parameter0: org.apache.http.impl.auth.SpnegoTokenGenerator;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.http.impl.auth.GGSSchemeBase: void <init>(boolean)>(z0);

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.apache.http.impl.auth.NegotiateScheme: org.apache.commons.logging.Log log> = $r2;

        r0.<org.apache.http.impl.auth.NegotiateScheme: org.apache.http.impl.auth.SpnegoTokenGenerator spengoGenerator> = r3;

        return;
    }

    public void <init>(org.apache.http.impl.auth.SpnegoTokenGenerator)
    {
        org.apache.http.impl.auth.SpnegoTokenGenerator r1;
        org.apache.http.impl.auth.NegotiateScheme r0;

        r0 := @this: org.apache.http.impl.auth.NegotiateScheme;

        r1 := @parameter0: org.apache.http.impl.auth.SpnegoTokenGenerator;

        specialinvoke r0.<org.apache.http.impl.auth.NegotiateScheme: void <init>(org.apache.http.impl.auth.SpnegoTokenGenerator,boolean)>(r1, 0);

        return;
    }

    public void <init>()
    {
        org.apache.http.impl.auth.NegotiateScheme r0;

        r0 := @this: org.apache.http.impl.auth.NegotiateScheme;

        specialinvoke r0.<org.apache.http.impl.auth.NegotiateScheme: void <init>(org.apache.http.impl.auth.SpnegoTokenGenerator,boolean)>(null, 0);

        return;
    }

    public java.lang.String getSchemeName()
    {
        org.apache.http.impl.auth.NegotiateScheme r0;

        r0 := @this: org.apache.http.impl.auth.NegotiateScheme;

        return "Negotiate";
    }

    public org.apache.http.Header authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest) throws org.apache.http.auth.AuthenticationException
    {
        org.apache.http.auth.Credentials r1;
        org.apache.http.HttpRequest r2;
        org.apache.http.Header $r3;
        org.apache.http.impl.auth.NegotiateScheme r0;

        r0 := @this: org.apache.http.impl.auth.NegotiateScheme;

        r1 := @parameter0: org.apache.http.auth.Credentials;

        r2 := @parameter1: org.apache.http.HttpRequest;

        $r3 = virtualinvoke r0.<org.apache.http.impl.auth.NegotiateScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r1, r2, null);

        return $r3;
    }

    public org.apache.http.Header authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.AuthenticationException
    {
        org.apache.http.auth.Credentials r1;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.HttpRequest r2;
        org.apache.http.Header $r4;
        org.apache.http.impl.auth.NegotiateScheme r0;

        r0 := @this: org.apache.http.impl.auth.NegotiateScheme;

        r1 := @parameter0: org.apache.http.auth.Credentials;

        r2 := @parameter1: org.apache.http.HttpRequest;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        $r4 = specialinvoke r0.<org.apache.http.impl.auth.GGSSchemeBase: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r1, r2, r3);

        return $r4;
    }

    protected byte[] generateToken(byte[], java.lang.String) throws org.ietf.jgss.GSSException
    {
        byte[] r1, $r6, r14;
        int $i0;
        org.apache.http.impl.auth.SpnegoTokenGenerator $r7, $r8;
        java.lang.String r3, $r11;
        org.apache.http.impl.auth.NegotiateScheme r2;
        boolean z0;
        org.ietf.jgss.Oid $r0, $r5;
        java.io.IOException $r9;
        org.ietf.jgss.GSSException $r12;
        org.apache.commons.logging.Log $r4, $r10, $r13;

        r2 := @this: org.apache.http.impl.auth.NegotiateScheme;

        r1 := @parameter0: byte[];

        r3 := @parameter1: java.lang.String;

        $r0 = new org.ietf.jgss.Oid;

        specialinvoke $r0.<org.ietf.jgss.Oid: void <init>(java.lang.String)>("1.3.6.1.5.5.2");

        r14 = r1;

        z0 = 0;

     label1:
        r14 = virtualinvoke r2.<org.apache.http.impl.auth.NegotiateScheme: byte[] generateGSSToken(byte[],org.ietf.jgss.Oid,java.lang.String)>(r1, $r0, r3);

     label2:
        goto label5;

     label3:
        $r12 := @caughtexception;

        $i0 = virtualinvoke $r12.<org.ietf.jgss.GSSException: int getMajor()>();

        if $i0 != 2 goto label4;

        $r13 = r2.<org.apache.http.impl.auth.NegotiateScheme: org.apache.commons.logging.Log log>;

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("GSSException BAD_MECH, retry with Kerberos MECH");

        z0 = 1;

        goto label5;

     label4:
        throw $r12;

     label5:
        if z0 == 0 goto label9;

        $r4 = r2.<org.apache.http.impl.auth.NegotiateScheme: org.apache.commons.logging.Log log>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Using Kerberos MECH 1.2.840.113554.1.2.2");

        $r5 = new org.ietf.jgss.Oid;

        specialinvoke $r5.<org.ietf.jgss.Oid: void <init>(java.lang.String)>("1.2.840.113554.1.2.2");

        $r6 = virtualinvoke r2.<org.apache.http.impl.auth.NegotiateScheme: byte[] generateGSSToken(byte[],org.ietf.jgss.Oid,java.lang.String)>(r14, $r5, r3);

        r14 = $r6;

        if $r6 == null goto label9;

        $r7 = r2.<org.apache.http.impl.auth.NegotiateScheme: org.apache.http.impl.auth.SpnegoTokenGenerator spengoGenerator>;

        if $r7 == null goto label9;

     label6:
        $r8 = r2.<org.apache.http.impl.auth.NegotiateScheme: org.apache.http.impl.auth.SpnegoTokenGenerator spengoGenerator>;

        r14 = interfaceinvoke $r8.<org.apache.http.impl.auth.SpnegoTokenGenerator: byte[] generateSpnegoDERObject(byte[])>($r6);

     label7:
        goto label9;

     label8:
        $r9 := @caughtexception;

        $r10 = r2.<org.apache.http.impl.auth.NegotiateScheme: org.apache.commons.logging.Log log>;

        $r11 = virtualinvoke $r9.<java.io.IOException: java.lang.String getMessage()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r11, $r9);

     label9:
        return r14;

        catch org.ietf.jgss.GSSException from label1 to label2 with label3;
        catch java.io.IOException from label6 to label7 with label8;
    }

    public java.lang.String getParameter(java.lang.String)
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;
        org.apache.http.impl.auth.NegotiateScheme r2;

        r2 := @this: org.apache.http.impl.auth.NegotiateScheme;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter name may not be null");

        throw $r1;

     label1:
        return null;
    }

    public java.lang.String getRealm()
    {
        org.apache.http.impl.auth.NegotiateScheme r0;

        r0 := @this: org.apache.http.impl.auth.NegotiateScheme;

        return null;
    }

    public boolean isConnectionBased()
    {
        org.apache.http.impl.auth.NegotiateScheme r0;

        r0 := @this: org.apache.http.impl.auth.NegotiateScheme;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.http.impl.auth.NegotiateScheme: java.lang.String KERBEROS_OID> = "1.2.840.113554.1.2.2";

        <org.apache.http.impl.auth.NegotiateScheme: java.lang.String SPNEGO_OID> = "1.3.6.1.5.5.2";

        return;
    }
}
