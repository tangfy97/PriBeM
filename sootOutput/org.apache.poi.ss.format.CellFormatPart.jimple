public class org.apache.poi.ss.format.CellFormatPart extends java.lang.Object
{
    private final java.awt.Color color;
    private org.apache.poi.ss.format.CellFormatCondition condition;
    private final org.apache.poi.ss.format.CellFormatter format;
    private final org.apache.poi.ss.format.CellFormatType type;
    private static final java.util.Map NAMED_COLORS;
    public static final java.util.regex.Pattern COLOR_PAT;
    public static final java.util.regex.Pattern CONDITION_PAT;
    public static final java.util.regex.Pattern SPECIFICATION_PAT;
    public static final java.util.regex.Pattern FORMAT_PAT;
    public static final int COLOR_GROUP;
    public static final int CONDITION_OPERATOR_GROUP;
    public static final int CONDITION_VALUE_GROUP;
    public static final int SPECIFICATION_GROUP;

    public void <init>(java.lang.String)
    {
        java.awt.Color $r4;
        java.lang.IllegalArgumentException $r8;
        org.apache.poi.ss.format.CellFormatPart r0;
        org.apache.poi.ss.format.CellFormatType $r6;
        java.util.regex.Matcher $r3;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.lang.String r1, $r11, $r13;
        java.util.regex.Pattern $r2;
        boolean $z0;
        org.apache.poi.ss.format.CellFormatCondition $r5;
        org.apache.poi.ss.format.CellFormatter $r7;

        r0 := @this: org.apache.poi.ss.format.CellFormatPart;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.poi.ss.format.CellFormatPart: java.util.regex.Pattern FORMAT_PAT>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized format: ");

        $r11 = staticinvoke <org.apache.poi.ss.format.CellFormatter: java.lang.String quote(java.lang.String)>(r1);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label1:
        $r4 = staticinvoke <org.apache.poi.ss.format.CellFormatPart: java.awt.Color getColor(java.util.regex.Matcher)>($r3);

        r0.<org.apache.poi.ss.format.CellFormatPart: java.awt.Color color> = $r4;

        $r5 = specialinvoke r0.<org.apache.poi.ss.format.CellFormatPart: org.apache.poi.ss.format.CellFormatCondition getCondition(java.util.regex.Matcher)>($r3);

        r0.<org.apache.poi.ss.format.CellFormatPart: org.apache.poi.ss.format.CellFormatCondition condition> = $r5;

        $r6 = specialinvoke r0.<org.apache.poi.ss.format.CellFormatPart: org.apache.poi.ss.format.CellFormatType getCellFormatType(java.util.regex.Matcher)>($r3);

        r0.<org.apache.poi.ss.format.CellFormatPart: org.apache.poi.ss.format.CellFormatType type> = $r6;

        $r7 = specialinvoke r0.<org.apache.poi.ss.format.CellFormatPart: org.apache.poi.ss.format.CellFormatter getFormatter(java.util.regex.Matcher)>($r3);

        r0.<org.apache.poi.ss.format.CellFormatPart: org.apache.poi.ss.format.CellFormatter format> = $r7;

        return;
    }

    public boolean applies(java.lang.Object)
    {
        org.apache.poi.ss.format.CellFormatPart r0;
        java.lang.NullPointerException $r3;
        java.lang.Object r2;
        java.lang.Number r4;
        org.apache.poi.ss.format.CellFormatCondition $r1, $r5;
        boolean $z0, $z1;
        double $d0;

        r0 := @this: org.apache.poi.ss.format.CellFormatPart;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.poi.ss.format.CellFormatPart: org.apache.poi.ss.format.CellFormatCondition condition>;

        if $r1 == null goto label1;

        $z0 = r2 instanceof java.lang.Number;

        if $z0 != 0 goto label3;

     label1:
        if r2 != null goto label2;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("valueObject");

        throw $r3;

     label2:
        return 1;

     label3:
        r4 = (java.lang.Number) r2;

        $r5 = r0.<org.apache.poi.ss.format.CellFormatPart: org.apache.poi.ss.format.CellFormatCondition condition>;

        $d0 = virtualinvoke r4.<java.lang.Number: double doubleValue()>();

        $z1 = virtualinvoke $r5.<org.apache.poi.ss.format.CellFormatCondition: boolean pass(double)>($d0);

        return $z1;
    }

    private static int findGroup(java.util.regex.Pattern, java.lang.String, java.lang.String)
    {
        java.util.regex.Matcher $r2;
        int $i0, i1;
        java.lang.String r1, r6, $r9, $r12, $r13, $r17, $r22;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3, $r14;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r10, $r11, $r15, $r16, $r18, $r19, $r20, $r21;
        java.util.regex.Pattern r0;

        r0 := @parameter0: java.util.regex.Pattern;

        r1 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        $r2 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pattern \"");

        $r17 = virtualinvoke r0.<java.util.regex.Pattern: java.lang.String pattern()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" doesn\'t match \"");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r14;

     label1:
        i1 = 1;

     label2:
        $i0 = virtualinvoke $r2.<java.util.regex.Matcher: int groupCount()>();

        if i1 > $i0 goto label4;

        $r13 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(i1);

        if $r13 == null goto label3;

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label3;

        return i1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not found in \"");

        $r9 = virtualinvoke r0.<java.util.regex.Pattern: java.lang.String pattern()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r3;
    }

    private static java.awt.Color getColor(java.util.regex.Matcher)
    {
        java.awt.Color r4;
        java.util.logging.Logger $r6;
        java.util.regex.Matcher r0;
        java.util.Map $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r7, $r9;
        java.lang.String $r1, $r8, $r10;

        r0 := @parameter0: java.util.regex.Matcher;

        $i0 = <org.apache.poi.ss.format.CellFormatPart: int COLOR_GROUP>;

        $r1 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group(int)>($i0);

        if $r1 == null goto label1;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        return null;

     label2:
        $r2 = <org.apache.poi.ss.format.CellFormatPart: java.util.Map NAMED_COLORS>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (java.awt.Color) $r3;

        if r4 != null goto label3;

        $r6 = <org.apache.poi.ss.format.CellFormatter: java.util.logging.Logger logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown color: ");

        $r8 = staticinvoke <org.apache.poi.ss.format.CellFormatter: java.lang.String quote(java.lang.String)>($r1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void warning(java.lang.String)>($r10);

     label3:
        return r4;
    }

    private org.apache.poi.ss.format.CellFormatCondition getCondition(java.util.regex.Matcher)
    {
        org.apache.poi.ss.format.CellFormatPart r5;
        java.util.regex.Matcher r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1, $r2, $r3;
        org.apache.poi.ss.format.CellFormatCondition $r4;

        r5 := @this: org.apache.poi.ss.format.CellFormatPart;

        r0 := @parameter0: java.util.regex.Matcher;

        $i0 = <org.apache.poi.ss.format.CellFormatPart: int CONDITION_OPERATOR_GROUP>;

        $r1 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group(int)>($i0);

        if $r1 == null goto label1;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        return null;

     label2:
        $i2 = <org.apache.poi.ss.format.CellFormatPart: int CONDITION_OPERATOR_GROUP>;

        $r2 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group(int)>($i2);

        $i3 = <org.apache.poi.ss.format.CellFormatPart: int CONDITION_VALUE_GROUP>;

        $r3 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group(int)>($i3);

        $r4 = staticinvoke <org.apache.poi.ss.format.CellFormatCondition: org.apache.poi.ss.format.CellFormatCondition getInstance(java.lang.String,java.lang.String)>($r2, $r3);

        return $r4;
    }

    private org.apache.poi.ss.format.CellFormatType getCellFormatType(java.util.regex.Matcher)
    {
        org.apache.poi.ss.format.CellFormatType $r3;
        java.util.regex.Matcher r0;
        int $i0;
        java.lang.String $r1;
        org.apache.poi.ss.format.CellFormatPart r2;

        r2 := @this: org.apache.poi.ss.format.CellFormatPart;

        r0 := @parameter0: java.util.regex.Matcher;

        $i0 = <org.apache.poi.ss.format.CellFormatPart: int SPECIFICATION_GROUP>;

        $r1 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group(int)>($i0);

        $r3 = specialinvoke r2.<org.apache.poi.ss.format.CellFormatPart: org.apache.poi.ss.format.CellFormatType formatType(java.lang.String)>($r1);

        return $r3;
    }

    private org.apache.poi.ss.format.CellFormatter getFormatter(java.util.regex.Matcher)
    {
        org.apache.poi.ss.format.CellFormatType $r3;
        java.util.regex.Matcher r0;
        int $i0;
        java.lang.String $r1;
        org.apache.poi.ss.format.CellFormatPart r2;
        org.apache.poi.ss.format.CellFormatter $r4;

        r2 := @this: org.apache.poi.ss.format.CellFormatPart;

        r0 := @parameter0: java.util.regex.Matcher;

        $i0 = <org.apache.poi.ss.format.CellFormatPart: int SPECIFICATION_GROUP>;

        $r1 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group(int)>($i0);

        $r3 = r2.<org.apache.poi.ss.format.CellFormatPart: org.apache.poi.ss.format.CellFormatType type>;

        $r4 = virtualinvoke $r3.<org.apache.poi.ss.format.CellFormatType: org.apache.poi.ss.format.CellFormatter formatter(java.lang.String)>($r1);

        return $r4;
    }

    private org.apache.poi.ss.format.CellFormatType formatType(java.lang.String)
    {
        java.util.regex.Matcher $r3;
        int $i0, $i2;
        java.lang.String $r0, $r7, r13;
        boolean $z0, $z1, $z2, z3, z4;
        char $c1;
        org.apache.poi.ss.format.CellFormatPart r12;
        org.apache.poi.ss.format.CellFormatType $r1, $r4, $r5, $r6, $r8, $r9, $r10, $r11;
        java.util.regex.Pattern $r2;

        r12 := @this: org.apache.poi.ss.format.CellFormatPart;

        r13 := @parameter0: java.lang.String;

        $r0 = virtualinvoke r13.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("General");

        if $z1 == 0 goto label02;

     label01:
        $r1 = <org.apache.poi.ss.format.CellFormatType: org.apache.poi.ss.format.CellFormatType GENERAL>;

        return $r1;

     label02:
        $r2 = <org.apache.poi.ss.format.CellFormatPart: java.util.regex.Pattern SPECIFICATION_PAT>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        z3 = 0;

        z4 = 0;

     label03:
        $z2 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z2 == 0 goto label11;

        $r7 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i0 <= 0 goto label10;

        $c1 = virtualinvoke $r7.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c1;

        lookupswitch($i2)
        {
            case 35: goto label09;
            case 48: goto label07;
            case 63: goto label09;
            case 64: goto label04;
            case 68: goto label05;
            case 72: goto label06;
            case 77: goto label06;
            case 83: goto label06;
            case 89: goto label05;
            case 91: goto label08;
            case 100: goto label05;
            case 104: goto label06;
            case 109: goto label06;
            case 115: goto label06;
            case 121: goto label05;
            default: goto label10;
        };

     label04:
        $r10 = <org.apache.poi.ss.format.CellFormatType: org.apache.poi.ss.format.CellFormatType TEXT>;

        return $r10;

     label05:
        $r9 = <org.apache.poi.ss.format.CellFormatType: org.apache.poi.ss.format.CellFormatType DATE>;

        return $r9;

     label06:
        z3 = 1;

        goto label10;

     label07:
        z4 = 1;

        goto label10;

     label08:
        $r8 = <org.apache.poi.ss.format.CellFormatType: org.apache.poi.ss.format.CellFormatType ELAPSED>;

        return $r8;

     label09:
        $r11 = <org.apache.poi.ss.format.CellFormatType: org.apache.poi.ss.format.CellFormatType NUMBER>;

        return $r11;

     label10:
        goto label03;

     label11:
        if z3 == 0 goto label12;

        $r6 = <org.apache.poi.ss.format.CellFormatType: org.apache.poi.ss.format.CellFormatType DATE>;

        return $r6;

     label12:
        if z4 == 0 goto label13;

        $r5 = <org.apache.poi.ss.format.CellFormatType: org.apache.poi.ss.format.CellFormatType NUMBER>;

        return $r5;

     label13:
        $r4 = <org.apache.poi.ss.format.CellFormatType: org.apache.poi.ss.format.CellFormatType TEXT>;

        return $r4;
    }

    static java.lang.String quoteSpecial(java.lang.String, org.apache.poi.ss.format.CellFormatType)
    {
        char $c1;
        org.apache.poi.ss.format.CellFormatType r3;
        int $i0, i2, $i3;
        java.lang.StringBuilder $r4;
        java.lang.String r1, $r2;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.poi.ss.format.CellFormatType;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i0 goto label5;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 != 39 goto label2;

        $z1 = virtualinvoke r3.<org.apache.poi.ss.format.CellFormatType: boolean isSpecial(char)>(39);

        if $z1 == 0 goto label2;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(0);

        goto label4;

     label2:
        $z0 = virtualinvoke r3.<org.apache.poi.ss.format.CellFormatType: boolean isSpecial(char)>($c1);

        if $z0 == 0 goto label3;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

     label3:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        if $z0 == 0 goto label4;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public org.apache.poi.ss.format.CellFormatResult apply(java.lang.Object)
    {
        java.awt.Color r6;
        org.apache.poi.ss.format.CellFormatResult $r3;
        org.apache.poi.ss.format.CellFormatPart r0;
        java.lang.Object r1;
        java.lang.String r5;
        boolean $z0;
        org.apache.poi.ss.format.CellFormatter $r2, $r4;

        r0 := @this: org.apache.poi.ss.format.CellFormatPart;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.poi.ss.format.CellFormatPart: boolean applies(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.poi.ss.format.CellFormatPart: org.apache.poi.ss.format.CellFormatter format>;

        r5 = virtualinvoke $r4.<org.apache.poi.ss.format.CellFormatter: java.lang.String format(java.lang.Object)>(r1);

        r6 = r0.<org.apache.poi.ss.format.CellFormatPart: java.awt.Color color>;

        goto label2;

     label1:
        $r2 = r0.<org.apache.poi.ss.format.CellFormatPart: org.apache.poi.ss.format.CellFormatter format>;

        r5 = virtualinvoke $r2.<org.apache.poi.ss.format.CellFormatter: java.lang.String simpleFormat(java.lang.Object)>(r1);

        r6 = null;

     label2:
        $r3 = new org.apache.poi.ss.format.CellFormatResult;

        specialinvoke $r3.<org.apache.poi.ss.format.CellFormatResult: void <init>(boolean,java.lang.String,java.awt.Color)>($z0, r5, r6);

        return $r3;
    }

    public org.apache.poi.ss.format.CellFormatResult apply(javax.swing.JLabel, java.lang.Object)
    {
        java.awt.Color $r5, $r6;
        org.apache.poi.ss.format.CellFormatResult $r2;
        javax.swing.JLabel r3;
        java.lang.Object r1;
        java.lang.String $r4;
        org.apache.poi.ss.format.CellFormatPart r0;

        r0 := @this: org.apache.poi.ss.format.CellFormatPart;

        r3 := @parameter0: javax.swing.JLabel;

        r1 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.poi.ss.format.CellFormatPart: org.apache.poi.ss.format.CellFormatResult apply(java.lang.Object)>(r1);

        $r4 = $r2.<org.apache.poi.ss.format.CellFormatResult: java.lang.String text>;

        virtualinvoke r3.<javax.swing.JLabel: void setText(java.lang.String)>($r4);

        $r5 = $r2.<org.apache.poi.ss.format.CellFormatResult: java.awt.Color textColor>;

        if $r5 == null goto label1;

        $r6 = $r2.<org.apache.poi.ss.format.CellFormatResult: java.awt.Color textColor>;

        virtualinvoke r3.<javax.swing.JLabel: void setForeground(java.awt.Color)>($r6);

     label1:
        return $r2;
    }

    org.apache.poi.ss.format.CellFormatType getCellFormatType()
    {
        org.apache.poi.ss.format.CellFormatType $r1;
        org.apache.poi.ss.format.CellFormatPart r0;

        r0 := @this: org.apache.poi.ss.format.CellFormatPart;

        $r1 = r0.<org.apache.poi.ss.format.CellFormatPart: org.apache.poi.ss.format.CellFormatType type>;

        return $r1;
    }

    boolean hasCondition()
    {
        org.apache.poi.ss.format.CellFormatPart r0;
        org.apache.poi.ss.format.CellFormatCondition $r1;
        boolean $z0;

        r0 := @this: org.apache.poi.ss.format.CellFormatPart;

        $r1 = r0.<org.apache.poi.ss.format.CellFormatPart: org.apache.poi.ss.format.CellFormatCondition condition>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.StringBuffer parseFormat(java.lang.String, org.apache.poi.ss.format.CellFormatType, org.apache.poi.ss.format.CellFormatPart$PartHandler)
    {
        java.util.regex.Matcher $r2;
        java.lang.StringBuffer $r12;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, i8, i9, $i10;
        java.lang.String r0, $r5, $r7, $r8, $r9, r10, $r11;
        boolean $z0, $z1;
        char $c5;
        org.apache.poi.ss.format.CellFormatPart$PartHandler r6;
        org.apache.poi.ss.format.CellFormatType r4;
        java.util.regex.Pattern $r1;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.poi.ss.format.CellFormatType;

        r6 := @parameter2: org.apache.poi.ss.format.CellFormatPart$PartHandler;

        $r1 = <org.apache.poi.ss.format.CellFormatPart: java.util.regex.Pattern SPECIFICATION_PAT>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

     label01:
        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label09;

        $r5 = staticinvoke <org.apache.poi.ss.format.CellFormatPart: java.lang.String group(java.util.regex.Matcher,int)>($r2, 0);

        $i4 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i4 <= 0 goto label08;

        $r7 = interfaceinvoke r6.<org.apache.poi.ss.format.CellFormatPart$PartHandler: java.lang.String handlePart(java.util.regex.Matcher,java.lang.String,org.apache.poi.ss.format.CellFormatType,java.lang.StringBuffer)>($r2, $r5, r4, $r12);

        r10 = $r7;

        if $r7 != null goto label07;

        $c5 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(0);

        $i10 = (int) $c5;

        lookupswitch($i10)
        {
            case 34: goto label02;
            case 42: goto label05;
            case 92: goto label03;
            case 95: goto label04;
            default: goto label06;
        };

     label02:
        $i6 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i7 = $i6 - 1;

        $r9 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(1, $i7);

        r10 = staticinvoke <org.apache.poi.ss.format.CellFormatPart: java.lang.String quoteSpecial(java.lang.String,org.apache.poi.ss.format.CellFormatType)>($r9, r4);

        goto label07;

     label03:
        $r8 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>(1);

        r10 = staticinvoke <org.apache.poi.ss.format.CellFormatPart: java.lang.String quoteSpecial(java.lang.String,org.apache.poi.ss.format.CellFormatType)>($r8, r4);

        goto label07;

     label04:
        r10 = " ";

        goto label07;

     label05:
        r10 = staticinvoke <org.apache.poi.ss.format.CellFormatPart: java.lang.String expandChar(java.lang.String)>($r5);

        goto label07;

     label06:
        r10 = $r5;

     label07:
        $r11 = staticinvoke <java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>(r10);

        virtualinvoke $r2.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>($r12, $r11);

     label08:
        goto label01;

     label09:
        virtualinvoke $r2.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>($r12);

        $z1 = virtualinvoke r4.<org.apache.poi.ss.format.CellFormatType: boolean isSpecial(char)>(39);

        if $z1 == 0 goto label13;

        i8 = 0;

     label10:
        $i0 = virtualinvoke $r12.<java.lang.StringBuffer: int indexOf(java.lang.String,int)>("\'\'", i8);

        i8 = $i0;

        if $i0 < 0 goto label11;

        $i3 = $i0 + 2;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>($i0, $i3);

        goto label10;

     label11:
        i9 = 0;

     label12:
        $i1 = virtualinvoke $r12.<java.lang.StringBuffer: int indexOf(java.lang.String,int)>("\u0000", i9);

        i9 = $i1;

        if $i1 < 0 goto label13;

        $i2 = $i1 + 1;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>($i1, $i2, "\'\'");

        goto label12;

     label13:
        return $r12;
    }

    static java.lang.String expandChar(java.lang.String)
    {
        char $c0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String r0, $r6;

        r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String group(java.util.regex.Matcher, int)
    {
        java.util.regex.Matcher r0;
        int i0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.util.regex.Matcher;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group(int)>(i0);

        if $r1 != null goto label1;

        $r2 = "";

        goto label2;

     label1:
        $r2 = $r1;

     label2:
        return $r2;
    }

    static void <clinit>()
    {
        java.awt.Color $r38;
        org.apache.poi.hssf.util.HSSFColor r36;
        java.util.Map $r2, $r30, $r31, $r34;
        boolean $z0, $z1;
        java.util.Collection $r3;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r39;
        java.util.regex.Pattern $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        short[] $r28;
        short $s4, $s5, $s6;
        int $i0, $i1, $i2, $i3, $i7, $i8, $i9, $i10, $i11;
        java.lang.String $r15, $r26, $r27, $r32, $r33, $r35;
        java.util.Iterator $r4;
        java.util.TreeMap $r37;
        java.lang.Object $r24;
        java.lang.Class $r25;
        java.util.Comparator $r1;

        $r37 = new java.util.TreeMap;

        $r1 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r37.<java.util.TreeMap: void <init>(java.util.Comparator)>($r1);

        <org.apache.poi.ss.format.CellFormatPart: java.util.Map NAMED_COLORS> = $r37;

        $r2 = staticinvoke <org.apache.poi.hssf.util.HSSFColor: java.util.Map getIndexHash()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r24 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r36 = (org.apache.poi.hssf.util.HSSFColor) $r24;

        $r25 = virtualinvoke r36.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.String getSimpleName()>();

        $r27 = virtualinvoke $r26.<java.lang.String: java.lang.String toUpperCase()>();

        $z1 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r27);

        if $z1 == 0 goto label3;

        $r28 = virtualinvoke r36.<org.apache.poi.hssf.util.HSSFColor: short[] getTriplet()>();

        $r38 = new java.awt.Color;

        $s6 = $r28[0];

        $s5 = $r28[1];

        $s4 = $r28[2];

        $i9 = (int) $s6;

        $i10 = (int) $s5;

        $i11 = (int) $s4;

        specialinvoke $r38.<java.awt.Color: void <init>(int,int,int)>($i9, $i10, $i11);

        $r30 = <org.apache.poi.ss.format.CellFormatPart: java.util.Map NAMED_COLORS>;

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r38);

        $i7 = virtualinvoke $r26.<java.lang.String: int indexOf(int)>(95);

        if $i7 <= 0 goto label2;

        $r34 = <org.apache.poi.ss.format.CellFormatPart: java.util.Map NAMED_COLORS>;

        $r35 = virtualinvoke $r26.<java.lang.String: java.lang.String replace(char,char)>(95, 32);

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, $r38);

     label2:
        $i8 = virtualinvoke $r26.<java.lang.String: int indexOf(java.lang.String)>("_PERCENT");

        if $i8 <= 0 goto label3;

        $r31 = <org.apache.poi.ss.format.CellFormatPart: java.util.Map NAMED_COLORS>;

        $r32 = virtualinvoke $r26.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("_PERCENT", "%");

        $r33 = virtualinvoke $r32.<java.lang.String: java.lang.String replace(char,char)>(95, 32);

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, $r38);

     label3:
        goto label1;

     label4:
        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\[(black|blue|cyan|green|magenta|red|white|yellow|color [0-9]+)\\]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?                  # Text color\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:\\[");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("([<>=]=?|!=|<>)    # The operator\n  \\s*([0-9]+(?:\\.[0-9]*)?)\\s*  # The constant to test against\n");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\])?                # Condition\n");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("((?:");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\\\.                 # Quoted single character\n|\"([^\\\\\"]|\\\\.)*\"         # Quoted string of characters (handles escaped quotes like \\\") \n|_.                             # Space as wide as a given character\n|\\*.                           # Repeating fill character\n|@                              # Text: cell text\n|([0?\\#](?:[0?\\#,]*))         # Number: digit + other digits and commas\n|e[-+]                          # Number: Scientific: Exponent\n|m{1,5}                         # Date: month or minute spec\n|d{1,4}                         # Date: day/date spec\n|y{2,4}                         # Date: year spec\n|h{1,2}                         # Date: hour spec\n|s{1,2}                         # Date: second spec\n|am?/pm?                        # Date: am/pm spec\n|\\[h{1,2}\\]                   # Elapsed time: hour spec\n|\\[m{1,2}\\]                   # Elapsed time: minute spec\n|\\[s{1,2}\\]                   # Elapsed time: second spec\n|[^;]                           # A character\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")+)                        # Format spec\n");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("\\[(black|blue|cyan|green|magenta|red|white|yellow|color [0-9]+)\\]", 6);

        <org.apache.poi.ss.format.CellFormatPart: java.util.regex.Pattern COLOR_PAT> = $r16;

        $r17 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("([<>=]=?|!=|<>)    # The operator\n  \\s*([0-9]+(?:\\.[0-9]*)?)\\s*  # The constant to test against\n", 6);

        <org.apache.poi.ss.format.CellFormatPart: java.util.regex.Pattern CONDITION_PAT> = $r17;

        $r18 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("\\\\.                 # Quoted single character\n|\"([^\\\\\"]|\\\\.)*\"         # Quoted string of characters (handles escaped quotes like \\\") \n|_.                             # Space as wide as a given character\n|\\*.                           # Repeating fill character\n|@                              # Text: cell text\n|([0?\\#](?:[0?\\#,]*))         # Number: digit + other digits and commas\n|e[-+]                          # Number: Scientific: Exponent\n|m{1,5}                         # Date: month or minute spec\n|d{1,4}                         # Date: day/date spec\n|y{2,4}                         # Date: year spec\n|h{1,2}                         # Date: hour spec\n|s{1,2}                         # Date: second spec\n|am?/pm?                        # Date: am/pm spec\n|\\[h{1,2}\\]                   # Elapsed time: hour spec\n|\\[m{1,2}\\]                   # Elapsed time: minute spec\n|\\[s{1,2}\\]                   # Elapsed time: second spec\n|[^;]                           # A character\n", 6);

        <org.apache.poi.ss.format.CellFormatPart: java.util.regex.Pattern SPECIFICATION_PAT> = $r18;

        $r19 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r15, 6);

        <org.apache.poi.ss.format.CellFormatPart: java.util.regex.Pattern FORMAT_PAT> = $r19;

        $r20 = <org.apache.poi.ss.format.CellFormatPart: java.util.regex.Pattern FORMAT_PAT>;

        $i0 = staticinvoke <org.apache.poi.ss.format.CellFormatPart: int findGroup(java.util.regex.Pattern,java.lang.String,java.lang.String)>($r20, "[Blue]@", "Blue");

        <org.apache.poi.ss.format.CellFormatPart: int COLOR_GROUP> = $i0;

        $r21 = <org.apache.poi.ss.format.CellFormatPart: java.util.regex.Pattern FORMAT_PAT>;

        $i1 = staticinvoke <org.apache.poi.ss.format.CellFormatPart: int findGroup(java.util.regex.Pattern,java.lang.String,java.lang.String)>($r21, "[>=1]@", ">=");

        <org.apache.poi.ss.format.CellFormatPart: int CONDITION_OPERATOR_GROUP> = $i1;

        $r22 = <org.apache.poi.ss.format.CellFormatPart: java.util.regex.Pattern FORMAT_PAT>;

        $i2 = staticinvoke <org.apache.poi.ss.format.CellFormatPart: int findGroup(java.util.regex.Pattern,java.lang.String,java.lang.String)>($r22, "[>=1]@", "1");

        <org.apache.poi.ss.format.CellFormatPart: int CONDITION_VALUE_GROUP> = $i2;

        $r23 = <org.apache.poi.ss.format.CellFormatPart: java.util.regex.Pattern FORMAT_PAT>;

        $i3 = staticinvoke <org.apache.poi.ss.format.CellFormatPart: int findGroup(java.util.regex.Pattern,java.lang.String,java.lang.String)>($r23, "[Blue][>1]\\a ?", "\\a ?");

        <org.apache.poi.ss.format.CellFormatPart: int SPECIFICATION_GROUP> = $i3;

        return;
    }
}
