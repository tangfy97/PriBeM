public abstract class com.jhlabs.image.TransformFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    public static final int ZERO;
    public static final int CLAMP;
    public static final int WRAP;
    public static final int NEAREST_NEIGHBOUR;
    public static final int BILINEAR;
    protected int edgeAction;
    protected int interpolation;
    protected java.awt.Rectangle transformedSpace;
    protected java.awt.Rectangle originalSpace;

    public void <init>()
    {
        com.jhlabs.image.TransformFilter r0;

        r0 := @this: com.jhlabs.image.TransformFilter;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.TransformFilter: int edgeAction> = 0;

        r0.<com.jhlabs.image.TransformFilter: int interpolation> = 1;

        return;
    }

    public void setEdgeAction(int)
    {
        int i0;
        com.jhlabs.image.TransformFilter r0;

        r0 := @this: com.jhlabs.image.TransformFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.TransformFilter: int edgeAction> = i0;

        return;
    }

    public int getEdgeAction()
    {
        int $i0;
        com.jhlabs.image.TransformFilter r0;

        r0 := @this: com.jhlabs.image.TransformFilter;

        $i0 = r0.<com.jhlabs.image.TransformFilter: int edgeAction>;

        return $i0;
    }

    public void setInterpolation(int)
    {
        int i0;
        com.jhlabs.image.TransformFilter r0;

        r0 := @this: com.jhlabs.image.TransformFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.TransformFilter: int interpolation> = i0;

        return;
    }

    public int getInterpolation()
    {
        int $i0;
        com.jhlabs.image.TransformFilter r0;

        r0 := @this: com.jhlabs.image.TransformFilter;

        $i0 = r0.<com.jhlabs.image.TransformFilter: int interpolation>;

        return $i0;
    }

    protected abstract void transformInverse(int, int, float[]);

    protected void transformSpace(java.awt.Rectangle)
    {
        java.awt.Rectangle r1;
        com.jhlabs.image.TransformFilter r0;

        r0 := @this: com.jhlabs.image.TransformFilter;

        r1 := @parameter0: java.awt.Rectangle;

        return;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        float[] r11;
        int[] $r5, r8;
        boolean $z0;
        java.awt.image.BufferedImage r0, $r14, $r16, r20;
        float $f0, $f1, $f2, $f3, f4, $f5, $f6, f7;
        java.awt.Rectangle $r2, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r17, $r18;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, i12, i13, $i14, i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i24, i25, i26, i27, $i28, $i29, $i30, $i31, $i32;
        double $d0, $d1, $d2, $d3;
        com.jhlabs.image.TransformFilter r1;
        java.awt.image.ColorModel $r15;
        java.awt.image.WritableRaster $r19;

        r1 := @this: com.jhlabs.image.TransformFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r20 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r0.<java.awt.image.BufferedImage: int getType()>();

        virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r2 = new java.awt.Rectangle;

        specialinvoke $r2.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle originalSpace> = $r2;

        $r3 = new java.awt.Rectangle;

        specialinvoke $r3.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace> = $r3;

        $r4 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        virtualinvoke r1.<com.jhlabs.image.TransformFilter: void transformSpace(java.awt.Rectangle)>($r4);

        if r20 != null goto label1;

        $r15 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $r16 = new java.awt.image.BufferedImage;

        $r17 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        $i21 = $r17.<java.awt.Rectangle: int width>;

        $r18 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        $i20 = $r18.<java.awt.Rectangle: int height>;

        $r19 = virtualinvoke $r15.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i21, $i20);

        $z0 = virtualinvoke $r15.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r16.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r15, $r19, $z0, null);

        r20 = $r16;

     label1:
        virtualinvoke r20.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r5 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r0, 0, 0, $i0, $i1, null);

        $i2 = r1.<com.jhlabs.image.TransformFilter: int interpolation>;

        if $i2 != 0 goto label2;

        $r13 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        $r14 = virtualinvoke r1.<com.jhlabs.image.TransformFilter: java.awt.image.BufferedImage filterPixelsNN(java.awt.image.BufferedImage,int,int,int[],java.awt.Rectangle)>(r20, $i0, $i1, $r5, $r13);

        return $r14;

     label2:
        i3 = $i0 - 1;

        i4 = $i1 - 1;

        $r6 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        i5 = $r6.<java.awt.Rectangle: int width>;

        $r7 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        i6 = $r7.<java.awt.Rectangle: int height>;

        r8 = newarray (int)[i5];

        $r9 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        i7 = $r9.<java.awt.Rectangle: int x>;

        $r10 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        i8 = $r10.<java.awt.Rectangle: int y>;

        r11 = newarray (float)[2];

        i22 = 0;

     label3:
        if i22 >= i6 goto label8;

        i23 = 0;

     label4:
        if i23 >= i5 goto label7;

        $i11 = i7 + i23;

        $i10 = i8 + i22;

        virtualinvoke r1.<com.jhlabs.image.TransformFilter: void transformInverse(int,int,float[])>($i11, $i10, r11);

        $f0 = r11[0];

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        i12 = (int) $d1;

        $f1 = r11[1];

        $d2 = (double) $f1;

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        i13 = (int) $d3;

        $f3 = r11[0];

        $f2 = (float) i12;

        f4 = $f3 - $f2;

        $f6 = r11[1];

        $f5 = (float) i13;

        f7 = $f6 - $f5;

        if i12 < 0 goto label5;

        if i12 >= i3 goto label5;

        if i13 < 0 goto label5;

        if i13 >= i4 goto label5;

        $i14 = $i0 * i13;

        i15 = $i14 + i12;

        i24 = $r5[i15];

        $i16 = i15 + 1;

        i25 = $r5[$i16];

        $i17 = i15 + $i0;

        i26 = $r5[$i17];

        $i18 = i15 + $i0;

        $i19 = $i18 + 1;

        i27 = $r5[$i19];

        goto label6;

     label5:
        i24 = specialinvoke r1.<com.jhlabs.image.TransformFilter: int getPixel(int[],int,int,int,int)>($r5, i12, i13, $i0, $i1);

        $i28 = i12 + 1;

        i25 = specialinvoke r1.<com.jhlabs.image.TransformFilter: int getPixel(int[],int,int,int,int)>($r5, $i28, i13, $i0, $i1);

        $i29 = i13 + 1;

        i26 = specialinvoke r1.<com.jhlabs.image.TransformFilter: int getPixel(int[],int,int,int,int)>($r5, i12, $i29, $i0, $i1);

        $i30 = i12 + 1;

        $i31 = i13 + 1;

        i27 = specialinvoke r1.<com.jhlabs.image.TransformFilter: int getPixel(int[],int,int,int,int)>($r5, $i30, $i31, $i0, $i1);

     label6:
        $i32 = staticinvoke <com.jhlabs.image.ImageMath: int bilinearInterpolate(float,float,int,int,int,int)>(f4, f7, i24, i25, i26, i27);

        r8[i23] = $i32;

        i23 = i23 + 1;

        goto label4;

     label7:
        $r12 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        $i9 = $r12.<java.awt.Rectangle: int width>;

        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r20, 0, i22, $i9, 1, r8);

        i22 = i22 + 1;

        goto label3;

     label8:
        return r20;
    }

    private final int getPixel(int[], int, int, int, int)
    {
        int[] r1;
        int i0, i1, i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        com.jhlabs.image.TransformFilter r0;

        r0 := @this: com.jhlabs.image.TransformFilter;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i4 := @parameter3: int;

        i2 := @parameter4: int;

        if i0 < 0 goto label1;

        if i0 >= i4 goto label1;

        if i1 < 0 goto label1;

        if i1 < i2 goto label5;

     label1:
        $i19 = r0.<com.jhlabs.image.TransformFilter: int edgeAction>;

        tableswitch($i19)
        {
            case 0: goto label2;
            case 1: goto label4;
            case 2: goto label3;
            default: goto label2;
        };

     label2:
        return 0;

     label3:
        $i3 = staticinvoke <com.jhlabs.image.ImageMath: int mod(int,int)>(i1, i2);

        $i5 = $i3 * i4;

        $i6 = staticinvoke <com.jhlabs.image.ImageMath: int mod(int,int)>(i0, i4);

        $i7 = $i5 + $i6;

        $i8 = r1[$i7];

        return $i8;

     label4:
        $i9 = i2 - 1;

        $i10 = staticinvoke <com.jhlabs.image.ImageMath: int clamp(int,int,int)>(i1, 0, $i9);

        $i12 = $i10 * i4;

        $i11 = i4 - 1;

        $i13 = staticinvoke <com.jhlabs.image.ImageMath: int clamp(int,int,int)>(i0, 0, $i11);

        $i14 = $i12 + $i13;

        $i15 = r1[$i14];

        return $i15;

     label5:
        $i16 = i1 * i4;

        $i17 = $i16 + i0;

        $i18 = r1[$i17];

        return $i18;
    }

    protected java.awt.image.BufferedImage filterPixelsNN(java.awt.image.BufferedImage, int, int, int[], java.awt.Rectangle)
    {
        byte $b11, $b22;
        int[] r1, r2, r6;
        java.awt.image.BufferedImage r4;
        float $f0, $f1, $f2, $f3;
        java.awt.Rectangle r0;
        float[] r3;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, i9, i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, i26, i27, $i28, i29, i30, $i31, $i32;
        com.jhlabs.image.TransformFilter r5;

        r5 := @this: com.jhlabs.image.TransformFilter;

        r4 := @parameter0: java.awt.image.BufferedImage;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r6 := @parameter3: int[];

        r0 := @parameter4: java.awt.Rectangle;

        i2 = r0.<java.awt.Rectangle: int width>;

        i3 = r0.<java.awt.Rectangle: int height>;

        r1 = newarray (int)[i2];

        i4 = r0.<java.awt.Rectangle: int x>;

        i5 = r0.<java.awt.Rectangle: int y>;

        r2 = newarray (int)[4];

        r3 = newarray (float)[2];

        i26 = 0;

     label01:
        if i26 >= i3 goto label11;

        i27 = 0;

     label02:
        if i27 >= i2 goto label10;

        $i8 = i4 + i27;

        $i7 = i5 + i26;

        virtualinvoke r5.<com.jhlabs.image.TransformFilter: void transformInverse(int,int,float[])>($i8, $i7, r3);

        $f0 = r3[0];

        i9 = (int) $f0;

        $f1 = r3[1];

        i10 = (int) $f1;

        $f2 = r3[0];

        $b11 = $f2 cmpg 0.0F;

        $i31 = (int) $b11;

        if $i31 < 0 goto label03;

        if i9 >= i0 goto label03;

        $f3 = r3[1];

        $b22 = $f3 cmpg 0.0F;

        $i32 = (int) $b22;

        if $i32 < 0 goto label03;

        if i10 < i1 goto label08;

     label03:
        $i28 = r5.<com.jhlabs.image.TransformFilter: int edgeAction>;

        tableswitch($i28)
        {
            case 0: goto label04;
            case 1: goto label06;
            case 2: goto label05;
            default: goto label04;
        };

     label04:
        i29 = 0;

        goto label07;

     label05:
        $i12 = staticinvoke <com.jhlabs.image.ImageMath: int mod(int,int)>(i10, i1);

        $i13 = $i12 * i0;

        $i14 = staticinvoke <com.jhlabs.image.ImageMath: int mod(int,int)>(i9, i0);

        $i15 = $i13 + $i14;

        i29 = r6[$i15];

        goto label07;

     label06:
        $i16 = i1 - 1;

        $i17 = staticinvoke <com.jhlabs.image.ImageMath: int clamp(int,int,int)>(i10, 0, $i16);

        $i19 = $i17 * i0;

        $i18 = i0 - 1;

        $i20 = staticinvoke <com.jhlabs.image.ImageMath: int clamp(int,int,int)>(i9, 0, $i18);

        $i21 = $i19 + $i20;

        i29 = r6[$i21];

     label07:
        r1[i27] = i29;

        goto label09;

     label08:
        $i23 = i0 * i10;

        i30 = $i23 + i9;

        $i24 = r6[i30];

        r2[0] = $i24;

        $i25 = r6[i30];

        r1[i27] = $i25;

     label09:
        i27 = i27 + 1;

        goto label02;

     label10:
        $i6 = r0.<java.awt.Rectangle: int width>;

        virtualinvoke r5.<com.jhlabs.image.AbstractBufferedImageOp: void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r4, 0, i26, $i6, 1, r1);

        i26 = i26 + 1;

        goto label01;

     label11:
        return r4;
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.TransformFilter: int BILINEAR> = 1;

        <com.jhlabs.image.TransformFilter: int NEAREST_NEIGHBOUR> = 0;

        <com.jhlabs.image.TransformFilter: int WRAP> = 2;

        <com.jhlabs.image.TransformFilter: int CLAMP> = 1;

        <com.jhlabs.image.TransformFilter: int ZERO> = 0;

        return;
    }
}
