public class com.hp.hpl.jena.sparql.util.graph.GraphUtils extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.graph.GraphUtils r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.graph.GraphUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List multiValueString(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property)
    {
        java.util.Iterator $r4;
        com.hp.hpl.jena.rdf.model.RDFNode r6;
        com.hp.hpl.jena.rdf.model.Resource r0;
        java.util.ArrayList $r3;
        java.util.List $r2;
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.Object $r5;
        java.lang.String $r8;
        com.hp.hpl.jena.rdf.model.Literal $r7;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphUtils: java.util.List multiValue(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, r1);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.rdf.model.RDFNode) $r5;

        $z1 = interfaceinvoke r6.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isLiteral()>();

        if $z1 == 0 goto label2;

        $r7 = (com.hp.hpl.jena.rdf.model.Literal) r6;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getString()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

     label2:
        goto label1;

     label3:
        return $r3;
    }

    public static java.util.List multiValue(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r5;
        com.hp.hpl.jena.rdf.model.StmtIterator $r3;
        com.hp.hpl.jena.rdf.model.Property r2;
        com.hp.hpl.jena.rdf.model.Statement $r4;
        com.hp.hpl.jena.rdf.model.Resource r1;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>(r2);

     label1:
        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.List multiValueResource(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property)
    {
        java.util.Iterator $r4;
        com.hp.hpl.jena.rdf.model.RDFNode r6;
        com.hp.hpl.jena.rdf.model.Resource r0, $r7;
        java.util.ArrayList $r3;
        java.util.List $r2;
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphUtils: java.util.List multiValue(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, r1);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.rdf.model.RDFNode) $r5;

        $z1 = interfaceinvoke r6.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isResource()>();

        if $z1 == 0 goto label2;

        $r7 = (com.hp.hpl.jena.rdf.model.Resource) r6;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

     label2:
        goto label1;

     label3:
        return $r3;
    }

    public static java.util.List multiValueURI(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property)
    {
        java.util.Iterator $r4;
        com.hp.hpl.jena.rdf.model.RDFNode r6;
        com.hp.hpl.jena.rdf.model.Resource r0, $r7;
        java.util.ArrayList $r3;
        java.util.List $r2;
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.Object $r5;
        java.lang.String $r8;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphUtils: java.util.List multiValue(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, r1);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.rdf.model.RDFNode) $r5;

        $z1 = interfaceinvoke r6.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isURIResource()>();

        if $z1 == 0 goto label2;

        $r7 = (com.hp.hpl.jena.rdf.model.Resource) r6;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

     label2:
        goto label1;

     label3:
        return $r3;
    }

    public static boolean exactlyOneProperty(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property)
    {
        java.lang.Throwable $r5;
        com.hp.hpl.jena.sparql.util.NotUniqueException $r3;
        com.hp.hpl.jena.rdf.model.Resource r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        com.hp.hpl.jena.rdf.model.Property r1;
        com.hp.hpl.jena.sparql.util.PropertyRequiredException $r4;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>(r1);

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r4 = new com.hp.hpl.jena.sparql.util.PropertyRequiredException;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.util.PropertyRequiredException: void <init>(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, r1);

        throw $r4;

     label2:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: java.lang.Object next()>();

        $z1 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = new com.hp.hpl.jena.sparql.util.NotUniqueException;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.util.NotUniqueException: void <init>(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, r1);

        throw $r3;

     label3:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        goto label6;

     label4:
        $r5 := @caughtexception;

     label5:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        throw $r5;

     label6:
        return 1;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static boolean atmostOneProperty(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property)
    {
        java.lang.Throwable $r4;
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        com.hp.hpl.jena.rdf.model.Property r1;
        com.hp.hpl.jena.sparql.util.NotUniqueException $r3;
        com.hp.hpl.jena.rdf.model.Resource r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>(r1);

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

     label2:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        return 1;

     label3:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: java.lang.Object next()>();

        $z1 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = new com.hp.hpl.jena.sparql.util.NotUniqueException;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.util.NotUniqueException: void <init>(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, r1);

        throw $r3;

     label4:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        goto label7;

     label5:
        $r4 := @caughtexception;

     label6:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        throw $r4;

     label7:
        return 1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static java.lang.String getStringValue(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.String $r3;
        com.hp.hpl.jena.sparql.util.NotUniqueException $r4;
        com.hp.hpl.jena.rdf.model.Statement $r2;
        com.hp.hpl.jena.rdf.model.Resource r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphUtils: boolean atmostOneProperty(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, r1);

        if $z0 != 0 goto label1;

        $r4 = new com.hp.hpl.jena.sparql.util.NotUniqueException;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.util.NotUniqueException: void <init>(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, r1);

        throw $r4;

     label1:
        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getProperty(com.hp.hpl.jena.rdf.model.Property)>(r1);

        if $r2 != null goto label2;

        return null;

     label2:
        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: java.lang.String getString()>();

        return $r3;
    }

    public static java.lang.String getAsStringValue(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r3;
        com.hp.hpl.jena.sparql.util.NotUniqueException $r7;
        com.hp.hpl.jena.rdf.model.Statement $r2;
        com.hp.hpl.jena.rdf.model.Resource r0, $r5;
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.String $r4, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphUtils: boolean atmostOneProperty(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, r1);

        if $z0 != 0 goto label1;

        $r7 = new com.hp.hpl.jena.sparql.util.NotUniqueException;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.util.NotUniqueException: void <init>(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, r1);

        throw $r7;

     label1:
        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getProperty(com.hp.hpl.jena.rdf.model.Property)>(r1);

        if $r2 != null goto label2;

        return null;

     label2:
        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z1 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isResource()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        return $r6;

     label3:
        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: java.lang.String getString()>();

        return $r4;
    }

    public static com.hp.hpl.jena.rdf.model.Resource getResourceValue(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.rdf.model.Property r1;
        com.hp.hpl.jena.sparql.util.NotUniqueException $r4;
        com.hp.hpl.jena.rdf.model.Statement $r2;
        com.hp.hpl.jena.rdf.model.Resource r0, $r3;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphUtils: boolean atmostOneProperty(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, r1);

        if $z0 != 0 goto label1;

        $r4 = new com.hp.hpl.jena.sparql.util.NotUniqueException;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.util.NotUniqueException: void <init>(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, r1);

        throw $r4;

     label1:
        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getProperty(com.hp.hpl.jena.rdf.model.Property)>(r1);

        if $r2 != null goto label2;

        return null;

     label2:
        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        return $r3;
    }

    public static com.hp.hpl.jena.rdf.model.Resource getResourceByType(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.sparql.util.TypeNotUniqueException $r6;
        com.hp.hpl.jena.rdf.model.Statement $r4;
        com.hp.hpl.jena.rdf.model.Resource r1, $r5;
        com.hp.hpl.jena.rdf.model.StmtIterator $r3;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.rdf.model.Model r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r2, r1);

        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        $z1 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r6 = new com.hp.hpl.jena.sparql.util.TypeNotUniqueException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.util.TypeNotUniqueException: void <init>(com.hp.hpl.jena.rdf.model.Resource)>($r5);

        throw $r6;

     label2:
        return $r5;
    }

    public static com.hp.hpl.jena.rdf.model.Resource findRootByType(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.query.Query $r2;
        com.hp.hpl.jena.rdf.model.RDFNode $r7;
        java.lang.String[] $r0;
        com.hp.hpl.jena.query.QuerySolutionMap $r3;
        com.hp.hpl.jena.rdf.model.Resource r4, r8;
        com.hp.hpl.jena.rdf.model.Model r5;
        java.lang.String $r1;
        com.hp.hpl.jena.query.QueryExecution $r6;

        r5 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r4 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "PREFIX  rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#>";

        $r0[1] = "PREFIX  rdfs:   <http://www.w3.org/2000/01/rdf-schema#>";

        $r0[2] = "SELECT DISTINCT ?root { { ?root rdf:type ?ATYPE } UNION { ?root rdf:type ?t . ?t rdfs:subClassOf ?ATYPE } }";

        $r1 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String strjoin(java.lang.String,java.lang.String[])>("\n", $r0);

        $r2 = staticinvoke <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query create(java.lang.String)>($r1);

        $r3 = new com.hp.hpl.jena.query.QuerySolutionMap;

        specialinvoke $r3.<com.hp.hpl.jena.query.QuerySolutionMap: void <init>()>();

        virtualinvoke $r3.<com.hp.hpl.jena.query.QuerySolutionMap: void add(java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>("ATYPE", r4);

        $r6 = staticinvoke <com.hp.hpl.jena.query.QueryExecutionFactory: com.hp.hpl.jena.query.QueryExecution create(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.query.QuerySolution)>($r2, r5, $r3);

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: com.hp.hpl.jena.rdf.model.RDFNode getOne(com.hp.hpl.jena.query.QueryExecution,java.lang.String)>($r6, "root");

        r8 = (com.hp.hpl.jena.rdf.model.Resource) $r7;

        return r8;
    }

    public static java.lang.String fmtURI(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.Model $r1;
        java.lang.String $r2, $r3;
        com.hp.hpl.jena.rdf.model.Resource r0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: java.lang.String shortForm(java.lang.String)>($r2);

        return $r3;
    }

    public static java.util.Iterator allNodes(com.hp.hpl.jena.graph.Graph)
    {
        java.util.Iterator $r6;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r9, $r10;
        com.hp.hpl.jena.graph.Triple r8;
        java.util.HashSet $r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        java.lang.Object $r7;
        com.hp.hpl.jena.graph.Graph r1;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>(int)>(1000);

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r5 = interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3, $r2);

     label1:
        $z0 = interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        $r9 = virtualinvoke r8.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r9);

        $r10 = virtualinvoke r8.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r10);

        goto label1;

     label2:
        interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        $r6 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

        return $r6;
    }
}
