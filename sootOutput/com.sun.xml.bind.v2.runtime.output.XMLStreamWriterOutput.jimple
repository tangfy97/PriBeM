public class com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput extends com.sun.xml.bind.v2.runtime.output.XmlOutputAbstractImpl
{
    private final javax.xml.stream.XMLStreamWriter out;
    protected final char[] buf;
    private static final java.lang.Class FI_STAX_WRITER_CLASS;
    private static final java.lang.reflect.Constructor FI_OUTPUT_CTOR;
    private static final java.lang.Class STAXEX_WRITER_CLASS;
    private static final java.lang.reflect.Constructor STAXEX_OUTPUT_CTOR;

    public static com.sun.xml.bind.v2.runtime.output.XmlOutput create(javax.xml.stream.XMLStreamWriter, com.sun.xml.bind.v2.runtime.JAXBContextImpl)
    {
        java.lang.Object[] $r5, $r9;
        java.lang.reflect.Constructor $r6, $r11;
        com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput $r16;
        com.sun.xml.bind.v2.runtime.output.XmlOutput $r8, $r13;
        javax.xml.stream.XMLStreamWriter r0;
        boolean $z0;
        com.sun.xml.bind.v2.runtime.JAXBContextImpl r10;
        java.lang.Exception $r14, $r15;
        java.lang.Class $r1, $r2, $r3, $r4;
        java.lang.Object $r7, $r12;

        r0 := @parameter0: javax.xml.stream.XMLStreamWriter;

        r10 := @parameter1: com.sun.xml.bind.v2.runtime.JAXBContextImpl;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.Class FI_STAX_WRITER_CLASS>;

        if $r1 != $r2 goto label4;

     label1:
        $r11 = <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.reflect.Constructor FI_OUTPUT_CTOR>;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r0;

        $r9[1] = r10;

        $r12 = virtualinvoke $r11.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9);

        $r13 = (com.sun.xml.bind.v2.runtime.output.XmlOutput) $r12;

     label2:
        return $r13;

     label3:
        $r15 := @caughtexception;

     label4:
        $r3 = <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.Class STAXEX_WRITER_CLASS>;

        if $r3 == null goto label8;

        $r4 = <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.Class STAXEX_WRITER_CLASS>;

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label8;

     label5:
        $r6 = <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.reflect.Constructor STAXEX_OUTPUT_CTOR>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r0;

        $r7 = virtualinvoke $r6.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

        $r8 = (com.sun.xml.bind.v2.runtime.output.XmlOutput) $r7;

     label6:
        return $r8;

     label7:
        $r14 := @caughtexception;

     label8:
        $r16 = new com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput;

        specialinvoke $r16.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: void <init>(javax.xml.stream.XMLStreamWriter)>(r0);

        return $r16;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    protected void <init>(javax.xml.stream.XMLStreamWriter)
    {
        com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput r0;
        char[] $r1;
        javax.xml.stream.XMLStreamWriter r2;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput;

        r2 := @parameter0: javax.xml.stream.XMLStreamWriter;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.XmlOutputAbstractImpl: void <init>()>();

        $r1 = newarray (char)[256];

        r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: char[] buf> = $r1;

        r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: javax.xml.stream.XMLStreamWriter out> = r2;

        return;
    }

    public void startDocument(com.sun.xml.bind.v2.runtime.XMLSerializer, boolean, int[], com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl) throws java.io.IOException, org.xml.sax.SAXException, javax.xml.stream.XMLStreamException
    {
        com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput r0;
        com.sun.xml.bind.v2.runtime.XMLSerializer r1;
        int[] r2;
        com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl r3;
        javax.xml.stream.XMLStreamWriter $r4;
        boolean z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.XMLSerializer;

        z0 := @parameter1: boolean;

        r2 := @parameter2: int[];

        r3 := @parameter3: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.XmlOutputAbstractImpl: void startDocument(com.sun.xml.bind.v2.runtime.XMLSerializer,boolean,int[],com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl)>(r1, z0, r2, r3);

        if z0 != 0 goto label1;

        $r4 = r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: javax.xml.stream.XMLStreamWriter out>;

        interfaceinvoke $r4.<javax.xml.stream.XMLStreamWriter: void writeStartDocument()>();

     label1:
        return;
    }

    public void endDocument(boolean) throws java.io.IOException, org.xml.sax.SAXException, javax.xml.stream.XMLStreamException
    {
        com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput r0;
        javax.xml.stream.XMLStreamWriter $r1, $r2;
        boolean z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: javax.xml.stream.XMLStreamWriter out>;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeEndDocument()>();

        $r2 = r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: javax.xml.stream.XMLStreamWriter out>;

        interfaceinvoke $r2.<javax.xml.stream.XMLStreamWriter: void flush()>();

     label1:
        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.XmlOutputAbstractImpl: void endDocument(boolean)>(z0);

        return;
    }

    public void beginStartTag(int, java.lang.String) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput r0;
        int i0, $i1, $i2, $i3, $i4, i5, $i7;
        com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl $r1, $r5, $r7;
        javax.xml.stream.XMLStreamWriter $r2, $r10;
        java.lang.String $r3, r4, $r6, $r9, $r11;
        com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl$Element $r8;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

        $r2 = r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: javax.xml.stream.XMLStreamWriter out>;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl nsContext>;

        $r3 = virtualinvoke $r1.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl: java.lang.String getPrefix(int)>(i0);

        $r5 = r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl nsContext>;

        $r6 = virtualinvoke $r5.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl: java.lang.String getNamespaceURI(int)>(i0);

        interfaceinvoke $r2.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String,java.lang.String,java.lang.String)>($r3, r4, $r6);

        $r7 = r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl nsContext>;

        $r8 = virtualinvoke $r7.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl$Element getCurrent()>();

        $i1 = virtualinvoke $r8.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl$Element: int count()>();

        if $i1 <= 0 goto label4;

        $i2 = virtualinvoke $r8.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl$Element: int count()>();

        i5 = $i2 - 1;

     label1:
        if i5 < 0 goto label4;

        $r9 = virtualinvoke $r8.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl$Element: java.lang.String getNsUri(int)>(i5);

        $i3 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i3 != 0 goto label2;

        $i4 = virtualinvoke $r8.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl$Element: int getBase()>();

        if $i4 != 1 goto label2;

        goto label3;

     label2:
        $r10 = r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: javax.xml.stream.XMLStreamWriter out>;

        $r11 = virtualinvoke $r8.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl$Element: java.lang.String getPrefix(int)>(i5);

        interfaceinvoke $r10.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>($r11, $r9);

     label3:
        $i7 = (int) -1;

        i5 = i5 + $i7;

        goto label1;

     label4:
        return;
    }

    public void attribute(int, java.lang.String, java.lang.String) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput r0;
        int i0, $i2;
        com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl $r1, $r4;
        javax.xml.stream.XMLStreamWriter $r2, $r8;
        java.lang.String $r3, $r5, r6, r7;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput;

        i0 := @parameter0: int;

        r6 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        $i2 = (int) -1;

        if i0 != $i2 goto label1;

        $r8 = r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: javax.xml.stream.XMLStreamWriter out>;

        interfaceinvoke $r8.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String)>(r6, r7);

        goto label2;

     label1:
        $r2 = r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: javax.xml.stream.XMLStreamWriter out>;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl nsContext>;

        $r3 = virtualinvoke $r1.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl: java.lang.String getPrefix(int)>(i0);

        $r4 = r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl nsContext>;

        $r5 = virtualinvoke $r4.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl: java.lang.String getNamespaceURI(int)>(i0);

        interfaceinvoke $r2.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r3, $r5, r6, r7);

     label2:
        return;
    }

    public void endStartTag() throws java.io.IOException, org.xml.sax.SAXException
    {
        com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput;

        return;
    }

    public void endTag(int, java.lang.String) throws java.io.IOException, org.xml.sax.SAXException, javax.xml.stream.XMLStreamException
    {
        com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput r0;
        int i0;
        javax.xml.stream.XMLStreamWriter $r1;
        java.lang.String r2;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: javax.xml.stream.XMLStreamWriter out>;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        return;
    }

    public void text(java.lang.String, boolean) throws java.io.IOException, org.xml.sax.SAXException, javax.xml.stream.XMLStreamException
    {
        com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput r0;
        javax.xml.stream.XMLStreamWriter $r2, $r3;
        java.lang.String r1;
        boolean z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r3 = r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: javax.xml.stream.XMLStreamWriter out>;

        interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>(" ");

     label1:
        $r2 = r0.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: javax.xml.stream.XMLStreamWriter out>;

        interfaceinvoke $r2.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>(r1);

        return;
    }

    public void text(com.sun.xml.bind.v2.runtime.output.Pcdata, boolean) throws java.io.IOException, org.xml.sax.SAXException, javax.xml.stream.XMLStreamException
    {
        com.sun.xml.bind.v2.runtime.output.Pcdata r0;
        com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput r1;
        int $i0, $i1;
        char[] $r2, $r5, $r6;
        javax.xml.stream.XMLStreamWriter $r3, $r7, $r8;
        java.lang.String $r4;
        boolean z0;

        r1 := @this: com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput;

        r0 := @parameter0: com.sun.xml.bind.v2.runtime.output.Pcdata;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r8 = r1.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: javax.xml.stream.XMLStreamWriter out>;

        interfaceinvoke $r8.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>(" ");

     label1:
        $i0 = virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.Pcdata: int length()>();

        $r2 = r1.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: char[] buf>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r5 = r1.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: char[] buf>;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.Pcdata: void writeTo(char[],int)>($r5, 0);

        $r7 = r1.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: javax.xml.stream.XMLStreamWriter out>;

        $r6 = r1.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: char[] buf>;

        interfaceinvoke $r7.<javax.xml.stream.XMLStreamWriter: void writeCharacters(char[],int,int)>($r6, 0, $i0);

        goto label3;

     label2:
        $r3 = r1.<com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: javax.xml.stream.XMLStreamWriter out>;

        $r4 = virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.Pcdata: java.lang.String toString()>();

        interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r4);

     label3:
        return;
    }

    private static java.lang.Class initFIStAXWriterClass()
    {
        java.lang.Throwable $r3;
        java.lang.Class $r1, $r2;
        java.lang.ClassLoader $r0;
        boolean $z0;

     label1:
        $r0 = staticinvoke <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.ClassLoader getClassLoader()>();

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.jvnet.fastinfoset.stax.LowLevelFastInfosetStreamWriter", 1, $r0);

        $r2 = virtualinvoke $r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("com.sun.xml.fastinfoset.stax.StAXDocumentSerializer");

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label3;

     label2:
        return $r2;

     label3:
        return null;

     label4:
        $r3 := @caughtexception;

        return null;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private static java.lang.reflect.Constructor initFastInfosetOutputClass()
    {
        java.lang.Throwable $r6;
        java.lang.Class[] $r3;
        java.lang.Class $r0, $r2, $r4;
        java.lang.ClassLoader $r1;
        java.lang.reflect.Constructor $r5;

     label1:
        $r0 = <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.Class FI_STAX_WRITER_CLASS>;

        if $r0 != null goto label3;

     label2:
        return null;

     label3:
        $r1 = staticinvoke <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.ClassLoader getClassLoader()>();

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("com.sun.xml.bind.v2.runtime.output.FastInfosetStreamWriterOutput", 1, $r1);

        $r3 = newarray (java.lang.Class)[2];

        $r4 = <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.Class FI_STAX_WRITER_CLASS>;

        $r3[0] = $r4;

        $r3[1] = class "Lcom/sun/xml/bind/v2/runtime/JAXBContextImpl;";

        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

     label4:
        return $r5;

     label5:
        $r6 := @caughtexception;

        return null;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private static java.lang.Class initStAXExWriterClass()
    {
        java.lang.Throwable $r2;
        java.lang.Class $r1;
        java.lang.ClassLoader $r0;

     label1:
        $r0 = staticinvoke <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.ClassLoader getClassLoader()>();

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.jvnet.staxex.XMLStreamWriterEx", 1, $r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static java.lang.reflect.Constructor initStAXExOutputClass()
    {
        java.lang.Throwable $r5;
        java.lang.Class[] $r2;
        java.lang.Class $r1, $r3;
        java.lang.ClassLoader $r0;
        java.lang.reflect.Constructor $r4;

     label1:
        $r0 = staticinvoke <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.ClassLoader getClassLoader()>();

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("com.sun.xml.bind.v2.runtime.output.StAXExStreamWriterOutput", 1, $r0);

        $r2 = newarray (java.lang.Class)[1];

        $r3 = <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.Class STAXEX_WRITER_CLASS>;

        $r2[0] = $r3;

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static java.lang.ClassLoader getClassLoader()
    {
        java.lang.ClassLoader $r0, r1;

        $r0 = staticinvoke <com.sun.xml.bind.v2.runtime.output.SecureLoader: java.lang.ClassLoader getClassClassLoader(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/runtime/unmarshaller/UnmarshallerImpl;");

        r1 = $r0;

        if $r0 != null goto label1;

        r1 = staticinvoke <com.sun.xml.bind.v2.runtime.output.SecureLoader: java.lang.ClassLoader getContextClassLoader()>();

     label1:
        return r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        java.lang.reflect.Constructor $r1, $r3;

        $r0 = staticinvoke <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.Class initFIStAXWriterClass()>();

        <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.Class FI_STAX_WRITER_CLASS> = $r0;

        $r1 = staticinvoke <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.reflect.Constructor initFastInfosetOutputClass()>();

        <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.reflect.Constructor FI_OUTPUT_CTOR> = $r1;

        $r2 = staticinvoke <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.Class initStAXExWriterClass()>();

        <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.Class STAXEX_WRITER_CLASS> = $r2;

        $r3 = staticinvoke <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.reflect.Constructor initStAXExOutputClass()>();

        <com.sun.xml.bind.v2.runtime.output.XMLStreamWriterOutput: java.lang.reflect.Constructor STAXEX_OUTPUT_CTOR> = $r3;

        return;
    }
}
