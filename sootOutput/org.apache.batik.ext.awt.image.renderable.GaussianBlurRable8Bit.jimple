public class org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit extends org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable implements org.apache.batik.ext.awt.image.renderable.GaussianBlurRable
{
    private double stdDeviationX;
    private double stdDeviationY;
    static final double DSQRT2PI;
    public static final double eps;

    public void <init>(org.apache.batik.ext.awt.image.renderable.Filter, double, double)
    {
        org.apache.batik.ext.awt.image.renderable.Filter r1;
        org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit r0;
        double d0, d1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: void setStdDeviationX(double)>(d0);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: void setStdDeviationY(double)>(d1);

        return;
    }

    public void setStdDeviationX(double)
    {
        byte $b0;
        int $i1;
        java.lang.IllegalArgumentException $r2;
        org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit r0;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double stdDeviationX> = d0;

        return;
    }

    public void setStdDeviationY(double)
    {
        byte $b0;
        int $i1;
        java.lang.IllegalArgumentException $r2;
        org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit r0;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double stdDeviationY> = d0;

        return;
    }

    public double getStdDeviationX()
    {
        org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit;

        $d0 = r0.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double stdDeviationX>;

        return $d0;
    }

    public double getStdDeviationY()
    {
        org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit;

        $d0 = r0.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double stdDeviationY>;

        return $d0;
    }

    public void setSource(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        org.apache.batik.ext.awt.image.renderable.Filter r1;
        org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        return;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        java.awt.geom.Rectangle2D $r2;
        java.awt.geom.Rectangle2D$Float $r3;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;
        float f0, f1, $f2, f3, $f4, f5, $f6, $f7, $f8, $f9, $f10, $f11;
        org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r2 = interfaceinvoke $r1.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        $d1 = r0.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double stdDeviationX>;

        $d0 = <org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double DSQRT2PI>;

        $d2 = $d1 * $d0;

        f0 = (float) $d2;

        $d4 = r0.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double stdDeviationY>;

        $d3 = <org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double DSQRT2PI>;

        $d5 = $d4 * $d3;

        f1 = (float) $d5;

        $f2 = 3.0F * f0;

        f3 = $f2 / 2.0F;

        $f4 = 3.0F * f1;

        f5 = $f4 / 2.0F;

        $r3 = new java.awt.geom.Rectangle2D$Float;

        $d6 = virtualinvoke $r2.<java.awt.geom.RectangularShape: double getMinX()>();

        $d7 = (double) f3;

        $d8 = $d6 - $d7;

        $f6 = (float) $d8;

        $d9 = virtualinvoke $r2.<java.awt.geom.RectangularShape: double getMinY()>();

        $d10 = (double) f5;

        $d11 = $d9 - $d10;

        $f7 = (float) $d11;

        $d12 = virtualinvoke $r2.<java.awt.geom.RectangularShape: double getWidth()>();

        $f8 = 2.0F * f3;

        $d13 = (double) $f8;

        $d14 = $d12 + $d13;

        $f9 = (float) $d14;

        $d15 = virtualinvoke $r2.<java.awt.geom.RectangularShape: double getHeight()>();

        $f10 = 2.0F * f5;

        $d16 = (double) $f10;

        $d17 = $d15 + $d16;

        $f11 = (float) $d17;

        specialinvoke $r3.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>($f6, $f7, $f9, $f11);

        return $r3;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter getSource()
    {
        java.util.Vector $r1;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.renderable.Filter $r3;
        org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.renderable.Filter) $r2;

        return $r3;
    }

    public static boolean eps_eq(double, double)
    {
        byte $b0, $b1;
        int $i2, $i3;
        double d0, d1, $d2, $d3;
        boolean $z0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = d1 - 1.0E-4;

        $b0 = d0 cmpl $d2;

        $i2 = (int) $b0;

        if $i2 < 0 goto label1;

        $d3 = d1 + 1.0E-4;

        $b1 = d0 cmpg $d3;

        $i3 = (int) $b1;

        if $i3 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean eps_abs_eq(double, double)
    {
        byte $b0, $b1;
        int $i2, $i3;
        boolean $z0;
        double d0, d1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpg 0.0;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label1;

        d0 = neg d0;

     label1:
        $b1 = d1 cmpg 0.0;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label2;

        d1 = neg d1;

     label2:
        $z0 = staticinvoke <org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: boolean eps_eq(double,double)>(d0, d1);

        return $z0;
    }

    public java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)
    {
        java.awt.geom.Rectangle2D $r20, r27;
        byte $b0, $b1, $b16, $b19;
        org.apache.batik.ext.awt.image.rendered.AffineRed $r36;
        java.awt.geom.AffineTransform $r2, $r7, r23, r24, $r31;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r12, r28;
        org.apache.batik.ext.awt.image.PadMode $r17;
        org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit r3;
        java.awt.RenderingHints $r1, r22, $r30;
        java.awt.geom.NoninvertibleTransformException $r19;
        java.awt.geom.Rectangle2D$Double $r32;
        boolean $z0, $z1, $z2, $z3, z4, z5;
        java.awt.Shape $r5, $r8, $r25, r26;
        java.awt.image.RenderedImage $r11;
        org.apache.batik.ext.awt.image.renderable.Filter $r9;
        java.awt.image.renderable.RenderContext r0, $r33;
        java.awt.Rectangle $r6, $r13;
        org.apache.batik.ext.awt.image.rendered.PadRed $r34;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i20, $i21, $i22, $i23;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, d42, d43, d44, d45;
        org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit $r35;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r29;

        r3 := @this: org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit;

        r0 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.RenderingHints getRenderingHints()>();

        r22 = $r1;

        if $r1 != null goto label01;

        $r30 = new java.awt.RenderingHints;

        specialinvoke $r30.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r22 = $r30;

     label01:
        $r2 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.geom.AffineTransform getTransform()>();

        $d0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d2 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getShearX()>();

        $d3 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getShearY()>();

        $d4 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d5 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $d7 = $d0 * $d0;

        $d6 = $d3 * $d3;

        $d8 = $d7 + $d6;

        $d9 = staticinvoke <java.lang.Math: double sqrt(double)>($d8);

        d42 = $d9;

        $d11 = $d1 * $d1;

        $d10 = $d2 * $d2;

        $d12 = $d11 + $d10;

        $d13 = staticinvoke <java.lang.Math: double sqrt(double)>($d12);

        d43 = $d13;

        $d14 = r3.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double stdDeviationX>;

        $d24 = $d14 * $d9;

        d44 = $d24;

        $d15 = r3.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double stdDeviationY>;

        $d25 = $d15 * $d13;

        d45 = $d25;

        $b0 = $d24 cmpg 10.0;

        $i20 = (int) $b0;

        if $i20 >= 0 goto label02;

        $b16 = $d25 cmpg 10.0;

        $i21 = (int) $b16;

        if $i21 >= 0 goto label02;

        $z2 = staticinvoke <org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: boolean eps_eq(double,double)>($d24, $d25);

        if $z2 == 0 goto label02;

        $d23 = $d0 / $d9;

        $d22 = $d1 / $d13;

        $z3 = staticinvoke <org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: boolean eps_abs_eq(double,double)>($d23, $d22);

        if $z3 == 0 goto label02;

        r23 = $r2;

        r24 = null;

        z4 = 0;

        z5 = 0;

        goto label05;

     label02:
        $b19 = $d24 cmpl 10.0;

        $i22 = (int) $b19;

        if $i22 <= 0 goto label03;

        $d21 = $d9 * 10.0;

        d42 = $d21 / $d24;

        d44 = 10.0;

     label03:
        $b1 = $d25 cmpl 10.0;

        $i23 = (int) $b1;

        if $i23 <= 0 goto label04;

        $d20 = $d13 * 10.0;

        d43 = $d20 / $d25;

        d45 = 10.0;

     label04:
        r23 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>(d42, d43);

        $r31 = new java.awt.geom.AffineTransform;

        $d19 = $d0 / d42;

        $d18 = $d3 / d42;

        $d17 = $d2 / d43;

        $d16 = $d1 / d43;

        specialinvoke $r31.<java.awt.geom.AffineTransform: void <init>(double,double,double,double,double,double)>($d19, $d18, $d17, $d16, $d4, $d5);

        r24 = $r31;

        z4 = 1;

        z5 = 1;

     label05:
        $r25 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.Shape getAreaOfInterest()>();

        r26 = $r25;

        if $r25 != null goto label06;

        r26 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

     label06:
        $r5 = virtualinvoke r23.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r26);

        $r6 = interfaceinvoke $r5.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $i2 = staticinvoke <org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int surroundPixels(double,java.awt.RenderingHints)>(d44, r22);

        $i14 = z4 + $i2;

        $i3 = staticinvoke <org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: int surroundPixels(double,java.awt.RenderingHints)>(d45, r22);

        $i15 = z5 + $i3;

        $i4 = $r6.<java.awt.Rectangle: int x>;

        $i5 = $i4 - $i14;

        $r6.<java.awt.Rectangle: int x> = $i5;

        $i6 = $r6.<java.awt.Rectangle: int y>;

        $i7 = $i6 - $i15;

        $r6.<java.awt.Rectangle: int y> = $i7;

        $i9 = $r6.<java.awt.Rectangle: int width>;

        $i8 = 2 * $i14;

        $i10 = $i9 + $i8;

        $r6.<java.awt.Rectangle: int width> = $i10;

        $i12 = $r6.<java.awt.Rectangle: int height>;

        $i11 = 2 * $i15;

        $i13 = $i12 + $i11;

        $r6.<java.awt.Rectangle: int height> = $i13;

     label07:
        $r7 = virtualinvoke r23.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

        $r8 = virtualinvoke $r7.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r6);

        r27 = interfaceinvoke $r8.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

     label08:
        goto label10;

     label09:
        $r19 := @caughtexception;

        $r20 = interfaceinvoke r26.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r32 = new java.awt.geom.Rectangle2D$Double;

        $d26 = virtualinvoke $r20.<java.awt.geom.RectangularShape: double getX()>();

        $d27 = (double) $i14;

        $d28 = $d27 / d42;

        $d29 = $d26 - $d28;

        $d30 = virtualinvoke $r20.<java.awt.geom.RectangularShape: double getY()>();

        $d31 = (double) $i15;

        $d32 = $d31 / d43;

        $d33 = $d30 - $d32;

        $d34 = virtualinvoke $r20.<java.awt.geom.RectangularShape: double getWidth()>();

        $i17 = 2 * $i14;

        $d35 = (double) $i17;

        $d36 = $d35 / d42;

        $d37 = $d34 + $d36;

        $d38 = virtualinvoke $r20.<java.awt.geom.RectangularShape: double getHeight()>();

        $i18 = 2 * $i15;

        $d39 = (double) $i18;

        $d40 = $d39 / d43;

        $d41 = $d38 + $d40;

        specialinvoke $r32.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d29, $d33, $d37, $d41);

        r27 = $r32;

     label10:
        $r9 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r33 = new java.awt.image.renderable.RenderContext;

        specialinvoke $r33.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>(r23, r27, r22);

        $r11 = interfaceinvoke $r9.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r33);

        if $r11 != null goto label11;

        return null;

     label11:
        $r12 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: org.apache.batik.ext.awt.image.rendered.CachableRed convertSourceCS(java.awt.image.RenderedImage)>($r11);

        r28 = $r12;

        $r13 = interfaceinvoke $r12.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $z0 = virtualinvoke $r6.<java.awt.Rectangle: boolean equals(java.lang.Object)>($r13);

        if $z0 != 0 goto label12;

        $r34 = new org.apache.batik.ext.awt.image.rendered.PadRed;

        $r17 = <org.apache.batik.ext.awt.image.PadMode: org.apache.batik.ext.awt.image.PadMode ZERO_PAD>;

        specialinvoke $r34.<org.apache.batik.ext.awt.image.rendered.PadRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,org.apache.batik.ext.awt.image.PadMode,java.awt.RenderingHints)>($r12, $r6, $r17, r22);

        r28 = $r34;

     label12:
        $r35 = new org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit;

        specialinvoke $r35.<org.apache.batik.ext.awt.image.rendered.GaussianBlurRed8Bit: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,double,double,java.awt.RenderingHints)>(r28, d44, d45, r22);

        r29 = $r35;

        if r24 == null goto label13;

        $z1 = virtualinvoke r24.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z1 != 0 goto label13;

        $r36 = new org.apache.batik.ext.awt.image.rendered.AffineRed;

        specialinvoke $r36.<org.apache.batik.ext.awt.image.rendered.AffineRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.geom.AffineTransform,java.awt.RenderingHints)>($r35, r24, r22);

        r29 = $r36;

     label13:
        return r29;

        catch java.awt.geom.NoninvertibleTransformException from label07 to label08 with label09;
    }

    public java.awt.Shape getDependencyRegion(int, java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Rectangle2D $r2, r4, r5;
        java.awt.geom.Rectangle2D$Float $r1, $r3;
        boolean $z0;
        float f0, f1, $f2, f3, $f4, f5, $f6, $f7, $f8, $f9, $f10, $f11;
        int i0;
        org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit;

        i0 := @parameter0: int;

        r4 := @parameter1: java.awt.geom.Rectangle2D;

        if i0 == 0 goto label1;

        r5 = null;

        goto label3;

     label1:
        $d1 = r0.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double stdDeviationX>;

        $d0 = <org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double DSQRT2PI>;

        $d2 = $d1 * $d0;

        f0 = (float) $d2;

        $d4 = r0.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double stdDeviationY>;

        $d3 = <org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double DSQRT2PI>;

        $d5 = $d4 * $d3;

        f1 = (float) $d5;

        $f2 = 3.0F * f0;

        f3 = $f2 / 2.0F;

        $f4 = 3.0F * f1;

        f5 = $f4 / 2.0F;

        $r1 = new java.awt.geom.Rectangle2D$Float;

        $d6 = virtualinvoke r4.<java.awt.geom.RectangularShape: double getMinX()>();

        $d7 = (double) f3;

        $d8 = $d6 - $d7;

        $f6 = (float) $d8;

        $d9 = virtualinvoke r4.<java.awt.geom.RectangularShape: double getMinY()>();

        $d10 = (double) f5;

        $d11 = $d9 - $d10;

        $f7 = (float) $d11;

        $d12 = virtualinvoke r4.<java.awt.geom.RectangularShape: double getWidth()>();

        $f8 = 2.0F * f3;

        $d13 = (double) $f8;

        $d14 = $d12 + $d13;

        $f9 = (float) $d14;

        $d15 = virtualinvoke r4.<java.awt.geom.RectangularShape: double getHeight()>();

        $f10 = 2.0F * f5;

        $d16 = (double) $f10;

        $d17 = $d15 + $d16;

        $f11 = (float) $d17;

        specialinvoke $r1.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>($f6, $f7, $f9, $f11);

        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

        $z0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r2);

        if $z0 != 0 goto label2;

        $r3 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r3.<java.awt.geom.Rectangle2D$Float: void <init>()>();

        return $r3;

     label2:
        r5 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: java.awt.geom.Rectangle2D createIntersection(java.awt.geom.Rectangle2D)>($r2);

     label3:
        return r5;
    }

    public java.awt.Shape getDirtyRegion(int, java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Rectangle2D $r2, r4, r5;
        java.awt.geom.Rectangle2D$Float $r1, $r3;
        boolean $z0;
        float f0, f1, $f2, f3, $f4, f5, $f6, $f7, $f8, $f9, $f10, $f11;
        int i0;
        org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit;

        i0 := @parameter0: int;

        r4 := @parameter1: java.awt.geom.Rectangle2D;

        r5 = null;

        if i0 != 0 goto label2;

        $d1 = r0.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double stdDeviationX>;

        $d0 = <org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double DSQRT2PI>;

        $d2 = $d1 * $d0;

        f0 = (float) $d2;

        $d4 = r0.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double stdDeviationY>;

        $d3 = <org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double DSQRT2PI>;

        $d5 = $d4 * $d3;

        f1 = (float) $d5;

        $f2 = 3.0F * f0;

        f3 = $f2 / 2.0F;

        $f4 = 3.0F * f1;

        f5 = $f4 / 2.0F;

        $r1 = new java.awt.geom.Rectangle2D$Float;

        $d6 = virtualinvoke r4.<java.awt.geom.RectangularShape: double getMinX()>();

        $d7 = (double) f3;

        $d8 = $d6 - $d7;

        $f6 = (float) $d8;

        $d9 = virtualinvoke r4.<java.awt.geom.RectangularShape: double getMinY()>();

        $d10 = (double) f5;

        $d11 = $d9 - $d10;

        $f7 = (float) $d11;

        $d12 = virtualinvoke r4.<java.awt.geom.RectangularShape: double getWidth()>();

        $f8 = 2.0F * f3;

        $d13 = (double) $f8;

        $d14 = $d12 + $d13;

        $f9 = (float) $d14;

        $d15 = virtualinvoke r4.<java.awt.geom.RectangularShape: double getHeight()>();

        $f10 = 2.0F * f5;

        $d16 = (double) $f10;

        $d17 = $d15 + $d16;

        $f11 = (float) $d17;

        specialinvoke $r1.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>($f6, $f7, $f9, $f11);

        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

        $z0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r2);

        if $z0 != 0 goto label1;

        $r3 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r3.<java.awt.geom.Rectangle2D$Float: void <init>()>();

        return $r3;

     label1:
        r5 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: java.awt.geom.Rectangle2D createIntersection(java.awt.geom.Rectangle2D)>($r2);

     label2:
        return r5;
    }

    static void <clinit>()
    {
        double $d0, $d1, $d2;

        <org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double eps> = 1.0E-4;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(6.283185307179586);

        $d1 = $d0 * 3.0;

        $d2 = $d1 / 4.0;

        <org.apache.batik.ext.awt.image.renderable.GaussianBlurRable8Bit: double DSQRT2PI> = $d2;

        return;
    }
}
