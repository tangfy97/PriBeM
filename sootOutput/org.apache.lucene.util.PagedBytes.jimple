public final class org.apache.lucene.util.PagedBytes extends java.lang.Object
{
    private final java.util.List blocks;
    private final java.util.List blockEnd;
    private final int blockSize;
    private final int blockBits;
    private final int blockMask;
    private boolean didSkipBytes;
    private boolean frozen;
    private int upto;
    private byte[] currentBlock;
    private static final byte[] EMPTY_BYTES;
    static final boolean $assertionsDisabled;

    public void <init>(int)
    {
        java.lang.AssertionError $r3;
        org.apache.lucene.util.PagedBytes r0;
        java.util.ArrayList $r1, $r2;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.PagedBytes;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.util.PagedBytes: java.util.List blocks> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.util.PagedBytes: java.util.List blockEnd> = $r2;

        $z0 = <org.apache.lucene.util.PagedBytes: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 <= 0 goto label1;

        if i0 <= 31 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(int)>(i0);

        throw $r3;

     label2:
        $i1 = 1 << i0;

        r0.<org.apache.lucene.util.PagedBytes: int blockSize> = $i1;

        r0.<org.apache.lucene.util.PagedBytes: int blockBits> = i0;

        $i2 = r0.<org.apache.lucene.util.PagedBytes: int blockSize>;

        $i3 = $i2 - 1;

        r0.<org.apache.lucene.util.PagedBytes: int blockMask> = $i3;

        $i4 = r0.<org.apache.lucene.util.PagedBytes: int blockSize>;

        r0.<org.apache.lucene.util.PagedBytes: int upto> = $i4;

        return;
    }

    public void copy(org.apache.lucene.store.IndexInput, long) throws java.io.IOException
    {
        byte[] $r2, $r3, $r4, $r5, $r6;
        long $l6, $l7, $l11, l14, $l16;
        org.apache.lucene.util.PagedBytes r0;
        java.lang.Integer $r9;
        byte $b0, $b17;
        int $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i12, $i13, i15, $i18, $i19;
        org.apache.lucene.store.IndexInput r1;
        java.util.List $r7, $r8;

        r0 := @this: org.apache.lucene.util.PagedBytes;

        r1 := @parameter0: org.apache.lucene.store.IndexInput;

        l14 := @parameter1: long;

     label1:
        $b0 = l14 cmp 0L;

        $i18 = (int) $b0;

        if $i18 <= 0 goto label6;

        $i2 = r0.<org.apache.lucene.util.PagedBytes: int blockSize>;

        $i1 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        i15 = $i2 - $i1;

        if i15 != 0 goto label3;

        $r4 = r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        if $r4 == null goto label2;

        $r7 = r0.<org.apache.lucene.util.PagedBytes: java.util.List blocks>;

        $r6 = r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r8 = r0.<org.apache.lucene.util.PagedBytes: java.util.List blockEnd>;

        $i13 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

     label2:
        $i12 = r0.<org.apache.lucene.util.PagedBytes: int blockSize>;

        $r5 = newarray (byte)[$i12];

        r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock> = $r5;

        r0.<org.apache.lucene.util.PagedBytes: int upto> = 0;

        i15 = r0.<org.apache.lucene.util.PagedBytes: int blockSize>;

     label3:
        $l16 = (long) i15;

        $b17 = $l16 cmp l14;

        $i19 = (int) $b17;

        if $i19 >= 0 goto label4;

        $r3 = r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        $i9 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        virtualinvoke r1.<org.apache.lucene.store.IndexInput: void readBytes(byte[],int,int,boolean)>($r3, $i9, i15, 0);

        $i10 = r0.<org.apache.lucene.util.PagedBytes: int blockSize>;

        r0.<org.apache.lucene.util.PagedBytes: int upto> = $i10;

        $l11 = (long) i15;

        l14 = l14 - $l11;

        goto label5;

     label4:
        $r2 = r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        $i4 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        $i3 = (int) l14;

        virtualinvoke r1.<org.apache.lucene.store.IndexInput: void readBytes(byte[],int,int,boolean)>($r2, $i4, $i3, 0);

        $i5 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        $l6 = (long) $i5;

        $l7 = $l6 + l14;

        $i8 = (int) $l7;

        r0.<org.apache.lucene.util.PagedBytes: int upto> = $i8;

        goto label6;

     label5:
        goto label1;

     label6:
        return;
    }

    public void copy(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)
    {
        byte[] $r2, $r3, $r6, $r10, $r11, $r12, $r13;
        java.lang.AssertionError $r5;
        org.apache.lucene.util.PagedBytes r0;
        java.lang.Integer $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        boolean $z0;
        org.apache.lucene.util.BytesRef r1, r4;
        java.util.List $r7, $r8;

        r0 := @this: org.apache.lucene.util.PagedBytes;

        r1 := @parameter0: org.apache.lucene.util.BytesRef;

        r4 := @parameter1: org.apache.lucene.util.BytesRef;

        $i1 = r0.<org.apache.lucene.util.PagedBytes: int blockSize>;

        $i0 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        i7 = $i1 - $i0;

        $i2 = r1.<org.apache.lucene.util.BytesRef: int length>;

        if $i2 > i7 goto label1;

        $r10 = r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        if $r10 != null goto label3;

     label1:
        $r2 = r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        if $r2 == null goto label2;

        $r7 = r0.<org.apache.lucene.util.PagedBytes: java.util.List blocks>;

        $r6 = r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r8 = r0.<org.apache.lucene.util.PagedBytes: java.util.List blockEnd>;

        $i6 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        r0.<org.apache.lucene.util.PagedBytes: boolean didSkipBytes> = 1;

     label2:
        $i3 = r0.<org.apache.lucene.util.PagedBytes: int blockSize>;

        $r3 = newarray (byte)[$i3];

        r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock> = $r3;

        r0.<org.apache.lucene.util.PagedBytes: int upto> = 0;

        $z0 = <org.apache.lucene.util.PagedBytes: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $i5 = r1.<org.apache.lucene.util.BytesRef: int length>;

        $i4 = r0.<org.apache.lucene.util.PagedBytes: int blockSize>;

        if $i5 <= $i4 goto label3;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label3:
        $r11 = r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        r4.<org.apache.lucene.util.BytesRef: byte[] bytes> = $r11;

        $i8 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        r4.<org.apache.lucene.util.BytesRef: int offset> = $i8;

        $i9 = r1.<org.apache.lucene.util.BytesRef: int length>;

        r4.<org.apache.lucene.util.BytesRef: int length> = $i9;

        $r12 = r1.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i10 = r1.<org.apache.lucene.util.BytesRef: int offset>;

        $r13 = r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        $i11 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        $i12 = r1.<org.apache.lucene.util.BytesRef: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, $i10, $r13, $i11, $i12);

        $i13 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        $i14 = r1.<org.apache.lucene.util.BytesRef: int length>;

        $i15 = $i13 + $i14;

        r0.<org.apache.lucene.util.PagedBytes: int upto> = $i15;

        return;
    }

    public org.apache.lucene.util.PagedBytes$Reader freeze(boolean)
    {
        byte[] $r1, $r6, r7, $r8, $r11;
        java.lang.IllegalStateException $r9, $r10;
        org.apache.lucene.util.PagedBytes r0;
        org.apache.lucene.util.PagedBytes$Reader $r5;
        java.lang.Integer $r4;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, z2;
        java.util.List $r2, $r3;

        r0 := @this: org.apache.lucene.util.PagedBytes;

        z2 := @parameter0: boolean;

        $z0 = r0.<org.apache.lucene.util.PagedBytes: boolean frozen>;

        if $z0 == 0 goto label1;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("already frozen");

        throw $r10;

     label1:
        $z1 = r0.<org.apache.lucene.util.PagedBytes: boolean didSkipBytes>;

        if $z1 == 0 goto label2;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot freeze when copy(BytesRef, BytesRef) was used");

        throw $r9;

     label2:
        if z2 == 0 goto label3;

        $i2 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        $i1 = r0.<org.apache.lucene.util.PagedBytes: int blockSize>;

        if $i2 >= $i1 goto label3;

        $i3 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        r7 = newarray (byte)[$i3];

        $r8 = r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        $i4 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r7, 0, $i4);

        r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock> = r7;

     label3:
        $r11 = r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        if $r11 != null goto label4;

        $r6 = <org.apache.lucene.util.PagedBytes: byte[] EMPTY_BYTES>;

        r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock> = $r6;

     label4:
        $r2 = r0.<org.apache.lucene.util.PagedBytes: java.util.List blocks>;

        $r1 = r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r3 = r0.<org.apache.lucene.util.PagedBytes: java.util.List blockEnd>;

        $i0 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        r0.<org.apache.lucene.util.PagedBytes: boolean frozen> = 1;

        r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock> = null;

        $r5 = new org.apache.lucene.util.PagedBytes$Reader;

        specialinvoke $r5.<org.apache.lucene.util.PagedBytes$Reader: void <init>(org.apache.lucene.util.PagedBytes,org.apache.lucene.util.PagedBytes$1)>(r0, null);

        return $r5;
    }

    public long getPointer()
    {
        byte[] $r1;
        long $l2, $l3, $l5, $l6, $l7;
        org.apache.lucene.util.PagedBytes r0;
        java.util.List $r2;
        int $i0, $i1, $i4;

        r0 := @this: org.apache.lucene.util.PagedBytes;

        $r1 = r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        if $r1 != null goto label1;

        return 0L;

     label1:
        $r2 = r0.<org.apache.lucene.util.PagedBytes: java.util.List blocks>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $l3 = (long) $i0;

        $i1 = r0.<org.apache.lucene.util.PagedBytes: int blockSize>;

        $l2 = (long) $i1;

        $l6 = $l3 * $l2;

        $i4 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        $l5 = (long) $i4;

        $l7 = $l6 + $l5;

        return $l7;
    }

    public long copyUsingLengthPrefix(org.apache.lucene.util.BytesRef)
    {
        byte[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.Integer $r12;
        byte $b11, $b16, $b26;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19, $r23, $r24, $r25, $r27, $r29;
        long $l35;
        java.lang.String $r20, $r26;
        org.apache.lucene.util.BytesRef r0;
        java.util.List $r10, $r11;
        org.apache.lucene.util.PagedBytes r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i36, $i38;
        java.lang.IllegalArgumentException $r28, $r30;

        r1 := @this: org.apache.lucene.util.PagedBytes;

        r0 := @parameter0: org.apache.lucene.util.BytesRef;

        $i0 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $i38 = (int) 32768;

        if $i0 < $i38 goto label1;

        $r28 = new java.lang.IllegalArgumentException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("max length is 32767 (got ");

        $i34 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i34);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r28;

     label1:
        $i2 = r1.<org.apache.lucene.util.PagedBytes: int upto>;

        $i1 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $i3 = $i2 + $i1;

        $i5 = $i3 + 2;

        $i4 = r1.<org.apache.lucene.util.PagedBytes: int blockSize>;

        if $i5 <= $i4 goto label4;

        $i27 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $i29 = $i27 + 2;

        $i28 = r1.<org.apache.lucene.util.PagedBytes: int blockSize>;

        if $i29 <= $i28 goto label2;

        $r30 = new java.lang.IllegalArgumentException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("block size ");

        $i32 = r1.<org.apache.lucene.util.PagedBytes: int blockSize>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i32);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too small to store length ");

        $i33 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i33);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r30;

     label2:
        $r7 = r1.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        if $r7 == null goto label3;

        $r10 = r1.<org.apache.lucene.util.PagedBytes: java.util.List blocks>;

        $r9 = r1.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r11 = r1.<org.apache.lucene.util.PagedBytes: java.util.List blockEnd>;

        $i31 = r1.<org.apache.lucene.util.PagedBytes: int upto>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i31);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

     label3:
        $i30 = r1.<org.apache.lucene.util.PagedBytes: int blockSize>;

        $r8 = newarray (byte)[$i30];

        r1.<org.apache.lucene.util.PagedBytes: byte[] currentBlock> = $r8;

        r1.<org.apache.lucene.util.PagedBytes: int upto> = 0;

     label4:
        $l35 = virtualinvoke r1.<org.apache.lucene.util.PagedBytes: long getPointer()>();

        $i36 = r0.<org.apache.lucene.util.BytesRef: int length>;

        if $i36 >= 128 goto label5;

        $r6 = r1.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        $i23 = r1.<org.apache.lucene.util.PagedBytes: int upto>;

        $i24 = $i23 + 1;

        r1.<org.apache.lucene.util.PagedBytes: int upto> = $i24;

        $i25 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $b26 = (byte) $i25;

        $r6[$i23] = $b26;

        goto label6;

     label5:
        $r2 = r1.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        $i6 = r1.<org.apache.lucene.util.PagedBytes: int upto>;

        $i7 = $i6 + 1;

        r1.<org.apache.lucene.util.PagedBytes: int upto> = $i7;

        $i8 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $i9 = $i8 >> 8;

        $i10 = 128 | $i9;

        $b11 = (byte) $i10;

        $r2[$i6] = $b11;

        $r3 = r1.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        $i12 = r1.<org.apache.lucene.util.PagedBytes: int upto>;

        $i13 = $i12 + 1;

        r1.<org.apache.lucene.util.PagedBytes: int upto> = $i13;

        $i14 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $i15 = $i14 & 255;

        $b16 = (byte) $i15;

        $r3[$i12] = $b16;

     label6:
        $r5 = r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i19 = r0.<org.apache.lucene.util.BytesRef: int offset>;

        $r4 = r1.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        $i18 = r1.<org.apache.lucene.util.PagedBytes: int upto>;

        $i17 = r0.<org.apache.lucene.util.BytesRef: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i19, $r4, $i18, $i17);

        $i21 = r1.<org.apache.lucene.util.PagedBytes: int upto>;

        $i20 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $i22 = $i21 + $i20;

        r1.<org.apache.lucene.util.PagedBytes: int upto> = $i22;

        return $l35;
    }

    public org.apache.lucene.util.PagedBytes$PagedBytesDataInput getDataInput()
    {
        java.lang.IllegalStateException $r2;
        org.apache.lucene.util.PagedBytes r0;
        org.apache.lucene.util.PagedBytes$PagedBytesDataInput $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.PagedBytes;

        $z0 = r0.<org.apache.lucene.util.PagedBytes: boolean frozen>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("must call freeze() before getDataInput");

        throw $r2;

     label1:
        $r1 = new org.apache.lucene.util.PagedBytes$PagedBytesDataInput;

        specialinvoke $r1.<org.apache.lucene.util.PagedBytes$PagedBytesDataInput: void <init>(org.apache.lucene.util.PagedBytes)>(r0);

        return $r1;
    }

    public org.apache.lucene.util.PagedBytes$PagedBytesDataOutput getDataOutput()
    {
        java.lang.IllegalStateException $r2;
        org.apache.lucene.util.PagedBytes r0;
        org.apache.lucene.util.PagedBytes$PagedBytesDataOutput $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.PagedBytes;

        $z0 = r0.<org.apache.lucene.util.PagedBytes: boolean frozen>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot get DataOutput after freeze()");

        throw $r2;

     label1:
        $r1 = new org.apache.lucene.util.PagedBytes$PagedBytesDataOutput;

        specialinvoke $r1.<org.apache.lucene.util.PagedBytes$PagedBytesDataOutput: void <init>(org.apache.lucene.util.PagedBytes)>(r0);

        return $r1;
    }

    static java.util.List access$000(org.apache.lucene.util.PagedBytes)
    {
        java.util.List $r1;
        org.apache.lucene.util.PagedBytes r0;

        r0 := @parameter0: org.apache.lucene.util.PagedBytes;

        $r1 = r0.<org.apache.lucene.util.PagedBytes: java.util.List blocks>;

        return $r1;
    }

    static java.util.List access$100(org.apache.lucene.util.PagedBytes)
    {
        java.util.List $r1;
        org.apache.lucene.util.PagedBytes r0;

        r0 := @parameter0: org.apache.lucene.util.PagedBytes;

        $r1 = r0.<org.apache.lucene.util.PagedBytes: java.util.List blockEnd>;

        return $r1;
    }

    static int access$200(org.apache.lucene.util.PagedBytes)
    {
        int $i0;
        org.apache.lucene.util.PagedBytes r0;

        r0 := @parameter0: org.apache.lucene.util.PagedBytes;

        $i0 = r0.<org.apache.lucene.util.PagedBytes: int blockBits>;

        return $i0;
    }

    static int access$300(org.apache.lucene.util.PagedBytes)
    {
        int $i0;
        org.apache.lucene.util.PagedBytes r0;

        r0 := @parameter0: org.apache.lucene.util.PagedBytes;

        $i0 = r0.<org.apache.lucene.util.PagedBytes: int blockMask>;

        return $i0;
    }

    static int access$400(org.apache.lucene.util.PagedBytes)
    {
        int $i0;
        org.apache.lucene.util.PagedBytes r0;

        r0 := @parameter0: org.apache.lucene.util.PagedBytes;

        $i0 = r0.<org.apache.lucene.util.PagedBytes: int blockSize>;

        return $i0;
    }

    static int access$600(org.apache.lucene.util.PagedBytes)
    {
        int $i0;
        org.apache.lucene.util.PagedBytes r0;

        r0 := @parameter0: org.apache.lucene.util.PagedBytes;

        $i0 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        return $i0;
    }

    static byte[] access$700(org.apache.lucene.util.PagedBytes)
    {
        byte[] $r1;
        org.apache.lucene.util.PagedBytes r0;

        r0 := @parameter0: org.apache.lucene.util.PagedBytes;

        $r1 = r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock>;

        return $r1;
    }

    static byte[] access$702(org.apache.lucene.util.PagedBytes, byte[])
    {
        byte[] r1;
        org.apache.lucene.util.PagedBytes r0;

        r0 := @parameter0: org.apache.lucene.util.PagedBytes;

        r1 := @parameter1: byte[];

        r0.<org.apache.lucene.util.PagedBytes: byte[] currentBlock> = r1;

        return r1;
    }

    static int access$602(org.apache.lucene.util.PagedBytes, int)
    {
        int i0;
        org.apache.lucene.util.PagedBytes r0;

        r0 := @parameter0: org.apache.lucene.util.PagedBytes;

        i0 := @parameter1: int;

        r0.<org.apache.lucene.util.PagedBytes: int upto> = i0;

        return i0;
    }

    static int access$608(org.apache.lucene.util.PagedBytes)
    {
        int $i0, $i1;
        org.apache.lucene.util.PagedBytes r0;

        r0 := @parameter0: org.apache.lucene.util.PagedBytes;

        $i0 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        $i1 = $i0 + 1;

        r0.<org.apache.lucene.util.PagedBytes: int upto> = $i1;

        return $i0;
    }

    static int access$612(org.apache.lucene.util.PagedBytes, int)
    {
        int i0, $i1, $i2;
        org.apache.lucene.util.PagedBytes r0;

        r0 := @parameter0: org.apache.lucene.util.PagedBytes;

        i0 := @parameter1: int;

        $i1 = r0.<org.apache.lucene.util.PagedBytes: int upto>;

        $i2 = $i1 + i0;

        r0.<org.apache.lucene.util.PagedBytes: int upto> = $i2;

        return $i2;
    }

    static void <clinit>()
    {
        byte[] $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/PagedBytes;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.PagedBytes: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (byte)[0];

        <org.apache.lucene.util.PagedBytes: byte[] EMPTY_BYTES> = $r1;

        return;
    }
}
