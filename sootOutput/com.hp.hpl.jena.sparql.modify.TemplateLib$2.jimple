final class com.hp.hpl.jena.sparql.modify.TemplateLib$2 extends java.lang.Object implements org.apache.jena.atlas.iterator.Transform
{
    java.util.Map bNodeMap;
    final java.util.List val$triples;

    void <init>(java.util.List)
    {
        com.hp.hpl.jena.sparql.modify.TemplateLib$2 r0;
        java.util.List r1;
        java.util.HashMap $r2;

        r0 := @this: com.hp.hpl.jena.sparql.modify.TemplateLib$2;

        r1 := @parameter0: java.util.List;

        r0.<com.hp.hpl.jena.sparql.modify.TemplateLib$2: java.util.List val$triples> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.modify.TemplateLib$2: java.util.Map bNodeMap> = $r2;

        return;
    }

    public java.util.Iterator convert(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.graph.Node $r12, $r13, $r14;
        java.util.ArrayList $r2;
        java.util.Map $r1, $r10;
        int $i0;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5, $r6;
        com.hp.hpl.jena.graph.Triple r8, $r11;
        java.util.List $r3, $r4;
        com.hp.hpl.jena.sparql.engine.binding.Binding r9;
        com.hp.hpl.jena.sparql.modify.TemplateLib$2 r0;
        java.lang.Object $r7;

        r0 := @this: com.hp.hpl.jena.sparql.modify.TemplateLib$2;

        r9 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r1 = r0.<com.hp.hpl.jena.sparql.modify.TemplateLib$2: java.util.Map bNodeMap>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r2 = new java.util.ArrayList;

        $r3 = r0.<com.hp.hpl.jena.sparql.modify.TemplateLib$2: java.util.List val$triples>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = r0.<com.hp.hpl.jena.sparql.modify.TemplateLib$2: java.util.List val$triples>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        $r10 = r0.<com.hp.hpl.jena.sparql.modify.TemplateLib$2: java.util.Map bNodeMap>;

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.modify.TemplateLib: com.hp.hpl.jena.graph.Triple subst(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.engine.binding.Binding,java.util.Map)>(r8, r9, $r10);

        $z0 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Triple: boolean isConcrete()>();

        if $z0 == 0 goto label1;

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r13 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r14 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.ModelUtils: boolean isValidAsStatement(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r12, $r13, $r14);

        if $z1 != 0 goto label2;

        goto label1;

     label2:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label1;

     label3:
        $r6 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        return $r6;
    }

    public volatile java.lang.Object convert(java.lang.Object)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r2;
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.modify.TemplateLib$2 r0;
        java.lang.Object r1;

        r0 := @this: com.hp.hpl.jena.sparql.modify.TemplateLib$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.hp.hpl.jena.sparql.engine.binding.Binding) r1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.TemplateLib$2: java.util.Iterator convert(com.hp.hpl.jena.sparql.engine.binding.Binding)>($r2);

        return $r3;
    }
}
