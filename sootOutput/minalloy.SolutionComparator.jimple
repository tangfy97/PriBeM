public class minalloy.SolutionComparator extends java.lang.Object
{
    public static final int INCOMPARABLE;

    public void <init>()
    {
        minalloy.SolutionComparator r0;

        r0 := @this: minalloy.SolutionComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int compare(minsolver.MinSolution, kodkod.engine.Solution)
    {
        kodkod.instance.Instance $r1, $r3;
        minsolver.MinSolution r0;
        int $i0;
        kodkod.engine.Solution r2;

        r0 := @parameter0: minsolver.MinSolution;

        r2 := @parameter1: kodkod.engine.Solution;

        $r1 = virtualinvoke r0.<minsolver.MinSolution: kodkod.instance.Instance instance()>();

        $r3 = virtualinvoke r2.<kodkod.engine.Solution: kodkod.instance.Instance instance()>();

        $i0 = staticinvoke <minalloy.SolutionComparator: int compareInstances(kodkod.instance.Instance,kodkod.instance.Instance)>($r1, $r3);

        return $i0;
    }

    public static int compare(minsolver.MinSolution, minsolver.MinSolution)
    {
        kodkod.instance.Instance $r1, $r3;
        minsolver.MinSolution r0, r2;
        int $i0;

        r0 := @parameter0: minsolver.MinSolution;

        r2 := @parameter1: minsolver.MinSolution;

        $r1 = virtualinvoke r0.<minsolver.MinSolution: kodkod.instance.Instance instance()>();

        $r3 = virtualinvoke r2.<minsolver.MinSolution: kodkod.instance.Instance instance()>();

        $i0 = staticinvoke <minalloy.SolutionComparator: int compareInstances(kodkod.instance.Instance,kodkod.instance.Instance)>($r1, $r3);

        return $i0;
    }

    private static int compareInstances(kodkod.instance.Instance, kodkod.instance.Instance)
    {
        java.util.HashSet $r0, $r1, $r12;
        kodkod.instance.Instance r2, r7;
        int $i0;
        java.lang.String $r6, $r11, r17;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r4, $r9, $r13;
        java.util.Set $r3, $r8;
        java.lang.Object $r5, $r10, $r14;
        kodkod.ast.Relation r15, r16;

        r2 := @parameter0: kodkod.instance.Instance;

        r7 := @parameter1: kodkod.instance.Instance;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r3 = virtualinvoke r2.<kodkod.instance.Instance: java.util.Set relations()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r15 = (kodkod.ast.Relation) $r5;

        $r6 = virtualinvoke r15.<kodkod.ast.Relation: java.lang.String name()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r6);

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r8 = virtualinvoke r7.<kodkod.instance.Instance: java.util.Set relations()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r16 = (kodkod.ast.Relation) $r10;

        $r11 = virtualinvoke r16.<kodkod.ast.Relation: java.lang.String name()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r11);

     label4:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        $r12 = new java.util.HashSet;

        specialinvoke $r12.<java.util.HashSet: void <init>()>();

        $r13 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

        goto label6;

     label5:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r14;

        $z2 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r17);

        if $z2 == 0 goto label6;

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>(r17);

     label6:
        $z3 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label5;

        $i0 = staticinvoke <minalloy.SolutionComparator: int compareTuplesOnRelations(kodkod.instance.Instance,kodkod.instance.Instance,java.util.Set)>(r2, r7, $r12);

        return $i0;
    }

    private static int compareTuplesOnRelations(kodkod.instance.Instance, kodkod.instance.Instance, java.util.Set)
    {
        kodkod.instance.Instance r4, r6;
        java.util.HashSet $r10, $r11;
        byte b0;
        java.lang.String r3, $r14, $r17;
        kodkod.instance.TupleSet $r8, $r9;
        boolean $z0, $z1, z2, z3, $z4;
        kodkod.instance.Tuple r18, r19;
        java.util.Iterator $r1, $r12, $r15;
        java.util.Set r0;
        java.lang.Object $r2, $r13, $r16;
        kodkod.ast.Relation $r5, $r7;

        r4 := @parameter0: kodkod.instance.Instance;

        r6 := @parameter1: kodkod.instance.Instance;

        r0 := @parameter2: java.util.Set;

        b0 = 0;

        z2 = 1;

        z3 = 1;

        $r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

        goto label08;

     label01:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $r5 = staticinvoke <minalloy.SolutionComparator: kodkod.ast.Relation getRelationByRelationName(kodkod.instance.Instance,java.lang.String)>(r4, r3);

        $r7 = staticinvoke <minalloy.SolutionComparator: kodkod.ast.Relation getRelationByRelationName(kodkod.instance.Instance,java.lang.String)>(r6, r3);

        $r8 = virtualinvoke r4.<kodkod.instance.Instance: kodkod.instance.TupleSet tuples(kodkod.ast.Relation)>($r5);

        $r9 = virtualinvoke r6.<kodkod.instance.Instance: kodkod.instance.TupleSet tuples(kodkod.ast.Relation)>($r7);

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>()>();

        $r12 = virtualinvoke $r8.<kodkod.instance.TupleSet: java.util.Iterator iterator()>();

        goto label03;

     label02:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r18 = (kodkod.instance.Tuple) $r13;

        $r14 = virtualinvoke r18.<kodkod.instance.Tuple: java.lang.String toString()>();

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r14);

     label03:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label02;

        $r15 = virtualinvoke $r9.<kodkod.instance.TupleSet: java.util.Iterator iterator()>();

        goto label05;

     label04:
        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r19 = (kodkod.instance.Tuple) $r16;

        $r17 = virtualinvoke r19.<kodkod.instance.Tuple: java.lang.String toString()>();

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>($r17);

     label05:
        $z1 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label04;

        if z2 == 0 goto label06;

        z2 = interfaceinvoke $r10.<java.util.Set: boolean containsAll(java.util.Collection)>($r11);

     label06:
        if z3 == 0 goto label07;

        z3 = interfaceinvoke $r11.<java.util.Set: boolean containsAll(java.util.Collection)>($r10);

     label07:
        if z2 != 0 goto label08;

        if z3 != 0 goto label08;

        goto label09;

     label08:
        $z4 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label01;

     label09:
        if z2 == 0 goto label10;

        if z3 == 0 goto label10;

        b0 = 0;

        goto label13;

     label10:
        if z2 != 0 goto label11;

        if z3 == 0 goto label11;

        b0 = -1;

        goto label13;

     label11:
        if z2 == 0 goto label12;

        if z3 != 0 goto label12;

        b0 = 1;

        goto label13;

     label12:
        if z2 != 0 goto label13;

        if z3 != 0 goto label13;

        b0 = 2;

     label13:
        return b0;
    }

    private static kodkod.ast.Relation getRelationByRelationName(kodkod.instance.Instance, java.lang.String)
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        kodkod.instance.Instance r0;
        java.lang.Object $r3;
        java.lang.String $r5, r6;
        kodkod.ast.Relation r4, r7;
        boolean $z0, $z1;

        r0 := @parameter0: kodkod.instance.Instance;

        r6 := @parameter1: java.lang.String;

        r7 = null;

        $r1 = virtualinvoke r0.<kodkod.instance.Instance: java.util.Set relations()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (kodkod.ast.Relation) $r3;

        $r5 = virtualinvoke r4.<kodkod.ast.Relation: java.lang.String name()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        r7 = r4;

        goto label3;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label3:
        return r7;
    }

    public static void <clinit>()
    {
        <minalloy.SolutionComparator: int INCOMPARABLE> = 2;

        return;
    }
}
