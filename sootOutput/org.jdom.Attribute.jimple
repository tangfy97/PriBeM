public class org.jdom.Attribute extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
{
    private static final java.lang.String CVS_ID;
    public static final int UNDECLARED_TYPE;
    public static final int CDATA_TYPE;
    public static final int ID_TYPE;
    public static final int IDREF_TYPE;
    public static final int IDREFS_TYPE;
    public static final int ENTITY_TYPE;
    public static final int ENTITIES_TYPE;
    public static final int NMTOKEN_TYPE;
    public static final int NMTOKENS_TYPE;
    public static final int NOTATION_TYPE;
    public static final int ENUMERATED_TYPE;
    protected java.lang.String name;
    protected transient org.jdom.Namespace namespace;
    protected java.lang.String value;
    protected int type;
    protected java.lang.Object parent;

    protected void <init>()
    {
        org.jdom.Attribute r0;

        r0 := @this: org.jdom.Attribute;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdom.Attribute: int type> = 0;

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        org.jdom.Attribute r0;
        org.jdom.Namespace $r3;
        java.lang.String r1, r2;

        r0 := @this: org.jdom.Attribute;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE>;

        specialinvoke r0.<org.jdom.Attribute: void <init>(java.lang.String,java.lang.String,int,org.jdom.Namespace)>(r1, r2, 0, $r3);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, int)
    {
        int i0;
        org.jdom.Attribute r0;
        org.jdom.Namespace $r3;
        java.lang.String r1, r2;

        r0 := @this: org.jdom.Attribute;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE>;

        specialinvoke r0.<org.jdom.Attribute: void <init>(java.lang.String,java.lang.String,int,org.jdom.Namespace)>(r1, r2, i0, $r3);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, int, org.jdom.Namespace)
    {
        int i0;
        org.jdom.Attribute r0;
        org.jdom.Namespace r3;
        java.lang.String r1, r2;

        r0 := @this: org.jdom.Attribute;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: org.jdom.Namespace;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdom.Attribute: int type> = 0;

        virtualinvoke r0.<org.jdom.Attribute: org.jdom.Attribute setName(java.lang.String)>(r1);

        virtualinvoke r0.<org.jdom.Attribute: org.jdom.Attribute setValue(java.lang.String)>(r2);

        virtualinvoke r0.<org.jdom.Attribute: org.jdom.Attribute setAttributeType(int)>(i0);

        virtualinvoke r0.<org.jdom.Attribute: org.jdom.Attribute setNamespace(org.jdom.Namespace)>(r3);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, org.jdom.Namespace)
    {
        org.jdom.Attribute r0;
        org.jdom.Namespace r3;
        java.lang.String r1, r2;

        r0 := @this: org.jdom.Attribute;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.jdom.Namespace;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdom.Attribute: int type> = 0;

        virtualinvoke r0.<org.jdom.Attribute: org.jdom.Attribute setName(java.lang.String)>(r1);

        virtualinvoke r0.<org.jdom.Attribute: org.jdom.Attribute setValue(java.lang.String)>(r2);

        virtualinvoke r0.<org.jdom.Attribute: org.jdom.Attribute setNamespace(org.jdom.Namespace)>(r3);

        return;
    }

    public java.lang.Object clone()
    {
        org.jdom.Attribute r0, r3;
        java.lang.Object $r1;
        java.lang.CloneNotSupportedException $r2;

        r0 := @this: org.jdom.Attribute;

        r3 = null;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r3 = (org.jdom.Attribute) $r1;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        r3.<org.jdom.Attribute: java.lang.Object parent> = null;

        return r3;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public org.jdom.Attribute detach()
    {
        org.jdom.Attribute r0;
        org.jdom.Namespace $r3;
        java.lang.String $r2;
        org.jdom.Element $r1;

        r0 := @this: org.jdom.Attribute;

        $r1 = virtualinvoke r0.<org.jdom.Attribute: org.jdom.Element getParent()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.jdom.Attribute: java.lang.String getName()>();

        $r3 = virtualinvoke r0.<org.jdom.Attribute: org.jdom.Namespace getNamespace()>();

        virtualinvoke $r1.<org.jdom.Element: boolean removeAttribute(java.lang.String,org.jdom.Namespace)>($r2, $r3);

     label1:
        return r0;
    }

    public final boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        org.jdom.Attribute r1;
        boolean $z0;

        r1 := @this: org.jdom.Attribute;

        r0 := @parameter0: java.lang.Object;

        if r0 == r1 goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $z0 = 1;

     label2:
        return $z0;
    }

    public int getAttributeType()
    {
        int $i0;
        org.jdom.Attribute r0;

        r0 := @this: org.jdom.Attribute;

        $i0 = r0.<org.jdom.Attribute: int type>;

        return $i0;
    }

    public boolean getBooleanValue() throws org.jdom.DataConversionException
    {
        org.jdom.DataConversionException $r3;
        org.jdom.Attribute r0;
        java.lang.String $r1, $r2, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: org.jdom.Attribute;

        $r1 = r0.<org.jdom.Attribute: java.lang.String value>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("on");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("1");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("yes");

        if $z3 == 0 goto label2;

     label1:
        return 1;

     label2:
        $z4 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z4 != 0 goto label3;

        $z5 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("off");

        if $z5 != 0 goto label3;

        $z6 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("0");

        if $z6 != 0 goto label3;

        $z7 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("no");

        if $z7 == 0 goto label4;

     label3:
        return 0;

     label4:
        $r3 = new org.jdom.DataConversionException;

        $r4 = r0.<org.jdom.Attribute: java.lang.String name>;

        specialinvoke $r3.<org.jdom.DataConversionException: void <init>(java.lang.String,java.lang.String)>($r4, "boolean");

        throw $r3;
    }

    public org.jdom.Document getDocument()
    {
        org.jdom.Document $r4;
        org.jdom.Attribute r0;
        java.lang.Object $r1, $r2;
        org.jdom.Element $r3;

        r0 := @this: org.jdom.Attribute;

        $r1 = r0.<org.jdom.Attribute: java.lang.Object parent>;

        if $r1 == null goto label1;

        $r2 = r0.<org.jdom.Attribute: java.lang.Object parent>;

        $r3 = (org.jdom.Element) $r2;

        $r4 = virtualinvoke $r3.<org.jdom.Content: org.jdom.Document getDocument()>();

        return $r4;

     label1:
        return null;
    }

    public double getDoubleValue() throws org.jdom.DataConversionException
    {
        org.jdom.DataConversionException $r5;
        java.lang.Double $r3;
        org.jdom.Attribute r0;
        java.lang.NumberFormatException $r4;
        java.lang.String $r1, $r2, $r6;
        double $d0;

        r0 := @this: org.jdom.Attribute;

     label1:
        $r1 = r0.<org.jdom.Attribute: java.lang.String value>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r2);

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        return $d0;

     label2:
        $r4 := @caughtexception;

        $r5 = new org.jdom.DataConversionException;

        $r6 = r0.<org.jdom.Attribute: java.lang.String name>;

        specialinvoke $r5.<org.jdom.DataConversionException: void <init>(java.lang.String,java.lang.String)>($r6, "double");

        throw $r5;

        catch java.lang.NumberFormatException from label1 to label2 with label2;
    }

    public float getFloatValue() throws org.jdom.DataConversionException
    {
        java.lang.Float $r3;
        org.jdom.DataConversionException $r5;
        org.jdom.Attribute r0;
        java.lang.NumberFormatException $r4;
        float $f0;
        java.lang.String $r1, $r2, $r6;

        r0 := @this: org.jdom.Attribute;

     label1:
        $r1 = r0.<org.jdom.Attribute: java.lang.String value>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r2);

        $f0 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        return $f0;

     label2:
        $r4 := @caughtexception;

        $r5 = new org.jdom.DataConversionException;

        $r6 = r0.<org.jdom.Attribute: java.lang.String name>;

        specialinvoke $r5.<org.jdom.DataConversionException: void <init>(java.lang.String,java.lang.String)>($r6, "float");

        throw $r5;

        catch java.lang.NumberFormatException from label1 to label2 with label2;
    }

    public int getIntValue() throws org.jdom.DataConversionException
    {
        org.jdom.DataConversionException $r4;
        int $i0;
        org.jdom.Attribute r0;
        java.lang.NumberFormatException $r3;
        java.lang.String $r1, $r2, $r5;

        r0 := @this: org.jdom.Attribute;

     label1:
        $r1 = r0.<org.jdom.Attribute: java.lang.String value>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        return $i0;

     label2:
        $r3 := @caughtexception;

        $r4 = new org.jdom.DataConversionException;

        $r5 = r0.<org.jdom.Attribute: java.lang.String name>;

        specialinvoke $r4.<org.jdom.DataConversionException: void <init>(java.lang.String,java.lang.String)>($r5, "int");

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label2;
    }

    public long getLongValue() throws org.jdom.DataConversionException
    {
        org.jdom.DataConversionException $r4;
        org.jdom.Attribute r0;
        long $l0;
        java.lang.NumberFormatException $r3;
        java.lang.String $r1, $r2, $r5;

        r0 := @this: org.jdom.Attribute;

     label1:
        $r1 = r0.<org.jdom.Attribute: java.lang.String value>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

        return $l0;

     label2:
        $r3 := @caughtexception;

        $r4 = new org.jdom.DataConversionException;

        $r5 = r0.<org.jdom.Attribute: java.lang.String name>;

        specialinvoke $r4.<org.jdom.DataConversionException: void <init>(java.lang.String,java.lang.String)>($r5, "long");

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label2;
    }

    public java.lang.String getName()
    {
        org.jdom.Attribute r0;
        java.lang.String $r1;

        r0 := @this: org.jdom.Attribute;

        $r1 = r0.<org.jdom.Attribute: java.lang.String name>;

        return $r1;
    }

    public org.jdom.Namespace getNamespace()
    {
        org.jdom.Attribute r0;
        org.jdom.Namespace $r1;

        r0 := @this: org.jdom.Attribute;

        $r1 = r0.<org.jdom.Attribute: org.jdom.Namespace namespace>;

        return $r1;
    }

    public java.lang.String getNamespacePrefix()
    {
        org.jdom.Attribute r0;
        org.jdom.Namespace $r1;
        java.lang.String $r2;

        r0 := @this: org.jdom.Attribute;

        $r1 = r0.<org.jdom.Attribute: org.jdom.Namespace namespace>;

        $r2 = virtualinvoke $r1.<org.jdom.Namespace: java.lang.String getPrefix()>();

        return $r2;
    }

    public java.lang.String getNamespaceURI()
    {
        org.jdom.Attribute r0;
        org.jdom.Namespace $r1;
        java.lang.String $r2;

        r0 := @this: org.jdom.Attribute;

        $r1 = r0.<org.jdom.Attribute: org.jdom.Namespace namespace>;

        $r2 = virtualinvoke $r1.<org.jdom.Namespace: java.lang.String getURI()>();

        return $r2;
    }

    public org.jdom.Element getParent()
    {
        org.jdom.Attribute r0;
        java.lang.Object $r1;
        org.jdom.Element $r2;

        r0 := @this: org.jdom.Attribute;

        $r1 = r0.<org.jdom.Attribute: java.lang.Object parent>;

        $r2 = (org.jdom.Element) $r1;

        return $r2;
    }

    public java.lang.String getQualifiedName()
    {
        org.jdom.Attribute r0;
        java.lang.StringBuffer $r4, $r5, $r7;
        org.jdom.Namespace $r1;
        java.lang.String $r2, $r3, $r6, $r8;
        boolean $z0;

        r0 := @this: org.jdom.Attribute;

        $r1 = r0.<org.jdom.Attribute: org.jdom.Namespace namespace>;

        $r2 = virtualinvoke $r1.<org.jdom.Namespace: java.lang.String getPrefix()>();

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(java.lang.String)>($r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r6 = virtualinvoke r0.<org.jdom.Attribute: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;

     label1:
        $r3 = virtualinvoke r0.<org.jdom.Attribute: java.lang.String getName()>();

        return $r3;
    }

    public java.lang.String getValue()
    {
        org.jdom.Attribute r0;
        java.lang.String $r1;

        r0 := @this: org.jdom.Attribute;

        $r1 = r0.<org.jdom.Attribute: java.lang.String value>;

        return $r1;
    }

    public final int hashCode()
    {
        int $i0;
        org.jdom.Attribute r0;

        r0 := @this: org.jdom.Attribute;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        org.jdom.Attribute r1;
        java.lang.Object $r2, $r4;
        org.jdom.Namespace $r6;
        java.lang.String $r3, $r5;

        r1 := @this: org.jdom.Attribute;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r3 = (java.lang.String) $r2;

        $r4 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r5 = (java.lang.String) $r4;

        $r6 = staticinvoke <org.jdom.Namespace: org.jdom.Namespace getNamespace(java.lang.String,java.lang.String)>($r3, $r5);

        r1.<org.jdom.Attribute: org.jdom.Namespace namespace> = $r6;

        return;
    }

    public org.jdom.Attribute setAttributeType(int)
    {
        org.jdom.IllegalDataException $r0;
        int i0;
        org.jdom.Attribute r2;
        java.lang.String $r1;

        r2 := @this: org.jdom.Attribute;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 10 goto label2;

     label1:
        $r0 = new org.jdom.IllegalDataException;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r0.<org.jdom.IllegalDataException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r1, "attribute", "Illegal attribute type");

        throw $r0;

     label2:
        r2.<org.jdom.Attribute: int type> = i0;

        return r2;
    }

    public org.jdom.Attribute setName(java.lang.String)
    {
        org.jdom.Attribute r2;
        java.lang.String r0, $r1;
        org.jdom.IllegalNameException $r3;

        r2 := @this: org.jdom.Attribute;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.jdom.Verifier: java.lang.String checkAttributeName(java.lang.String)>(r0);

        if $r1 == null goto label1;

        $r3 = new org.jdom.IllegalNameException;

        specialinvoke $r3.<org.jdom.IllegalNameException: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r0, "attribute", $r1);

        throw $r3;

     label1:
        r2.<org.jdom.Attribute: java.lang.String name> = r0;

        return r2;
    }

    public org.jdom.Attribute setNamespace(org.jdom.Namespace)
    {
        org.jdom.Namespace $r0, r4;
        org.jdom.Attribute r1;
        java.lang.String $r2;
        org.jdom.IllegalNameException $r3;
        boolean $z0;

        r1 := @this: org.jdom.Attribute;

        r4 := @parameter0: org.jdom.Namespace;

        if r4 != null goto label1;

        r4 = <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE>;

     label1:
        $r0 = <org.jdom.Namespace: org.jdom.Namespace NO_NAMESPACE>;

        if r4 == $r0 goto label2;

        $r2 = virtualinvoke r4.<org.jdom.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

        $r3 = new org.jdom.IllegalNameException;

        specialinvoke $r3.<org.jdom.IllegalNameException: void <init>(java.lang.String,java.lang.String,java.lang.String)>("", "attribute namespace", "An attribute namespace without a prefix can only be the NO_NAMESPACE namespace");

        throw $r3;

     label2:
        r1.<org.jdom.Attribute: org.jdom.Namespace namespace> = r4;

        return r1;
    }

    protected org.jdom.Attribute setParent(org.jdom.Element)
    {
        org.jdom.Attribute r0;
        org.jdom.Element r1;

        r0 := @this: org.jdom.Attribute;

        r1 := @parameter0: org.jdom.Element;

        r0.<org.jdom.Attribute: java.lang.Object parent> = r1;

        return r0;
    }

    public org.jdom.Attribute setValue(java.lang.String)
    {
        org.jdom.IllegalDataException $r3;
        org.jdom.Attribute r2;
        java.lang.String r0, $r1;

        r2 := @this: org.jdom.Attribute;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.jdom.Verifier: java.lang.String checkCharacterData(java.lang.String)>(r0);

        if $r1 == null goto label1;

        $r3 = new org.jdom.IllegalDataException;

        specialinvoke $r3.<org.jdom.IllegalDataException: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r0, "attribute", $r1);

        throw $r3;

     label1:
        r2.<org.jdom.Attribute: java.lang.String value> = r0;

        return r2;
    }

    public java.lang.String toString()
    {
        org.jdom.Attribute r2;
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r7, $r8, $r9;
        java.lang.String $r3, $r6, $r10;

        r2 := @this: org.jdom.Attribute;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[Attribute: ");

        $r3 = virtualinvoke r2.<org.jdom.Attribute: java.lang.String getQualifiedName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $r6 = r2.<org.jdom.Attribute: java.lang.String value>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r10;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        org.jdom.Attribute r1;
        org.jdom.Namespace $r2, $r4;
        java.lang.String $r3, $r5;

        r1 := @this: org.jdom.Attribute;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r1.<org.jdom.Attribute: org.jdom.Namespace namespace>;

        $r3 = virtualinvoke $r2.<org.jdom.Namespace: java.lang.String getPrefix()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        $r4 = r1.<org.jdom.Attribute: org.jdom.Namespace namespace>;

        $r5 = virtualinvoke $r4.<org.jdom.Namespace: java.lang.String getURI()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

        return;
    }

    public static void <clinit>()
    {
        <org.jdom.Attribute: int ENUMERATED_TYPE> = 10;

        <org.jdom.Attribute: int NOTATION_TYPE> = 9;

        <org.jdom.Attribute: int NMTOKENS_TYPE> = 8;

        <org.jdom.Attribute: int NMTOKEN_TYPE> = 7;

        <org.jdom.Attribute: int ENTITIES_TYPE> = 6;

        <org.jdom.Attribute: int ENTITY_TYPE> = 5;

        <org.jdom.Attribute: int IDREFS_TYPE> = 4;

        <org.jdom.Attribute: int IDREF_TYPE> = 3;

        <org.jdom.Attribute: int ID_TYPE> = 2;

        <org.jdom.Attribute: int CDATA_TYPE> = 1;

        <org.jdom.Attribute: int UNDECLARED_TYPE> = 0;

        <org.jdom.Attribute: java.lang.String CVS_ID> = "@(#) $RCSfile: Attribute.java,v $ $Revision: 1.52 $ $Date: 2004/03/01 23:58:28 $ $Name: jdom_1_0 $";

        return;
    }
}
