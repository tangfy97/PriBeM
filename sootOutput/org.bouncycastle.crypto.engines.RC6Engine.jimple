public class org.bouncycastle.crypto.engines.RC6Engine extends java.lang.Object implements org.bouncycastle.crypto.BlockCipher
{
    private static final int wordSize;
    private static final int bytesPerWord;
    private static final int _noRounds;
    private int[] _S;
    private static final int P32;
    private static final int Q32;
    private static final int LGW;
    private boolean forEncryption;

    public void <init>()
    {
        org.bouncycastle.crypto.engines.RC6Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC6Engine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S> = null;

        return;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.engines.RC6Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC6Engine;

        return "RC6";
    }

    public int getBlockSize()
    {
        org.bouncycastle.crypto.engines.RC6Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC6Engine;

        return 16;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        byte[] $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r9;
        java.lang.Class $r7;
        java.lang.String $r8, $r10;
        org.bouncycastle.crypto.engines.RC6Engine r2;
        org.bouncycastle.crypto.params.KeyParameter r1;
        org.bouncycastle.crypto.CipherParameters r0;
        boolean $z0, z1;

        r2 := @this: org.bouncycastle.crypto.engines.RC6Engine;

        z1 := @parameter0: boolean;

        r0 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.KeyParameter;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to RC6 init - ");

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        r1 = (org.bouncycastle.crypto.params.KeyParameter) r0;

        r2.<org.bouncycastle.crypto.engines.RC6Engine: boolean forEncryption> = z1;

        $r3 = virtualinvoke r1.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        specialinvoke r2.<org.bouncycastle.crypto.engines.RC6Engine: void setKey(byte[])>($r3);

        return;
    }

    public int processBlock(byte[], int, byte[], int)
    {
        byte[] r2, r3;
        java.lang.IllegalStateException $r6;
        org.bouncycastle.crypto.DataLengthException $r4, $r5;
        int[] $r1;
        int $i0, i1, $i2, $i3, i4, $i5, $i6, $i7;
        org.bouncycastle.crypto.engines.RC6Engine r0;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.engines.RC6Engine;

        r2 := @parameter0: byte[];

        i1 := @parameter1: int;

        r3 := @parameter2: byte[];

        i4 := @parameter3: int;

        $i0 = virtualinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int getBlockSize()>();

        $r1 = r0.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        if $r1 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RC6 engine not initialised");

        throw $r6;

     label1:
        $i3 = i1 + $i0;

        $i2 = lengthof r2;

        if $i3 <= $i2 goto label2;

        $r5 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r5.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r5;

     label2:
        $i6 = i4 + $i0;

        $i5 = lengthof r3;

        if $i6 <= $i5 goto label3;

        $r4 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r4;

     label3:
        $z0 = r0.<org.bouncycastle.crypto.engines.RC6Engine: boolean forEncryption>;

        if $z0 == 0 goto label4;

        $i7 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int encryptBlock(byte[],int,byte[],int)>(r2, i1, r3, i4);

        goto label5;

     label4:
        $i7 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int decryptBlock(byte[],int,byte[],int)>(r2, i1, r3, i4);

     label5:
        return $i7;
    }

    public void reset()
    {
        org.bouncycastle.crypto.engines.RC6Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC6Engine;

        return;
    }

    private void setKey(byte[])
    {
        byte[] r0;
        byte $b30;
        int[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        org.bouncycastle.crypto.engines.RC6Engine r1;
        short $s31, $s44;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i32, $i33, $i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, $i45, $i47;

        r1 := @this: org.bouncycastle.crypto.engines.RC6Engine;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $i1 = $i0 + 3;

        i35 = $i1 / 4;

        if i35 != 0 goto label1;

     label1:
        $i2 = lengthof r0;

        $i3 = $i2 + 4;

        $i4 = $i3 - 1;

        $i5 = $i4 / 4;

        $r12 = newarray (int)[$i5];

        $i6 = lengthof r0;

        i36 = $i6 - 1;

     label2:
        if i36 < 0 goto label3;

        $i34 = i36 / 4;

        $i28 = i36 / 4;

        $i29 = $r12[$i28];

        $i32 = $i29 << 8;

        $b30 = r0[i36];

        $s44 = (short) $b30;

        $s31 = $s44 & 255;

        $i45 = (int) $s31;

        $i33 = $i32 + $i45;

        $r12[$i34] = $i33;

        $i47 = (int) -1;

        i36 = i36 + $i47;

        goto label2;

     label3:
        $r2 = newarray (int)[44];

        r1.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S> = $r2;

        $r3 = r1.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $r3[0] = -1209970333;

        i37 = 1;

     label4:
        $r4 = r1.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i7 = lengthof $r4;

        if i37 >= $i7 goto label5;

        $r11 = r1.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $r10 = r1.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i25 = i37 - 1;

        $i26 = $r10[$i25];

        $i27 = $i26 + -1640531527;

        $r11[i37] = $i27;

        i37 = i37 + 1;

        goto label4;

     label5:
        $i9 = lengthof $r12;

        $r5 = r1.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i8 = lengthof $r5;

        if $i9 <= $i8 goto label6;

        $i24 = lengthof $r12;

        i38 = 3 * $i24;

        goto label7;

     label6:
        $r6 = r1.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i10 = lengthof $r6;

        i38 = 3 * $i10;

     label7:
        i39 = 0;

        i40 = 0;

        i41 = 0;

        i42 = 0;

        i43 = 0;

     label8:
        if i43 >= i38 goto label9;

        $r8 = r1.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $r7 = r1.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i11 = $r7[i41];

        $i12 = $i11 + i39;

        $i13 = $i12 + i40;

        $i14 = specialinvoke r1.<org.bouncycastle.crypto.engines.RC6Engine: int rotateLeft(int,int)>($i13, 3);

        $r8[i41] = $i14;

        i39 = $i14;

        $i15 = $r12[i42];

        $i16 = $i15 + $i14;

        $i18 = $i16 + i40;

        $i17 = $i14 + i40;

        $i19 = specialinvoke r1.<org.bouncycastle.crypto.engines.RC6Engine: int rotateLeft(int,int)>($i18, $i17);

        $r12[i42] = $i19;

        i40 = $i19;

        $i21 = i41 + 1;

        $r9 = r1.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i20 = lengthof $r9;

        i41 = $i21 % $i20;

        $i23 = i42 + 1;

        $i22 = lengthof $r12;

        i42 = $i23 % $i22;

        i43 = i43 + 1;

        goto label8;

     label9:
        return;
    }

    private int encryptBlock(byte[], int, byte[], int)
    {
        byte[] r1, r6;
        int[] $r2, $r3, $r4, $r5, $r7, $r8;
        org.bouncycastle.crypto.engines.RC6Engine r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39;

        r0 := @this: org.bouncycastle.crypto.engines.RC6Engine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r6 := @parameter2: byte[];

        i10 := @parameter3: int;

        i27 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int bytesToWord(byte[],int)>(r1, i0);

        $i1 = i0 + 4;

        $i2 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int bytesToWord(byte[],int)>(r1, $i1);

        $i3 = i0 + 8;

        i28 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int bytesToWord(byte[],int)>(r1, $i3);

        $i4 = i0 + 12;

        $i5 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int bytesToWord(byte[],int)>(r1, $i4);

        $r2 = r0.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i6 = $r2[0];

        i29 = $i2 + $i6;

        $r3 = r0.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i7 = $r3[1];

        i30 = $i5 + $i7;

        i31 = 1;

     label1:
        if i31 > 20 goto label2;

        $i14 = 2 * i29;

        $i15 = $i14 + 1;

        i32 = i29 * $i15;

        $i16 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int rotateLeft(int,int)>(i32, 5);

        $i17 = 2 * i30;

        $i18 = $i17 + 1;

        i33 = i30 * $i18;

        $i19 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int rotateLeft(int,int)>(i33, 5);

        i34 = i27 ^ $i16;

        $i20 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int rotateLeft(int,int)>(i34, $i19);

        $r7 = r0.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i21 = 2 * i31;

        $i22 = $r7[$i21];

        i35 = $i20 + $i22;

        i36 = i28 ^ $i19;

        $i23 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int rotateLeft(int,int)>(i36, $i16);

        $r8 = r0.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i24 = 2 * i31;

        $i25 = $i24 + 1;

        $i26 = $r8[$i25];

        i37 = $i23 + $i26;

        i27 = i29;

        i29 = i37;

        i28 = i30;

        i30 = i35;

        i31 = i31 + 1;

        goto label1;

     label2:
        $r4 = r0.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i8 = $r4[42];

        i38 = i27 + $i8;

        $r5 = r0.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i9 = $r5[43];

        i39 = i28 + $i9;

        specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: void wordToBytes(int,byte[],int)>(i38, r6, i10);

        $i11 = i10 + 4;

        specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: void wordToBytes(int,byte[],int)>(i29, r6, $i11);

        $i12 = i10 + 8;

        specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: void wordToBytes(int,byte[],int)>(i39, r6, $i12);

        $i13 = i10 + 12;

        specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: void wordToBytes(int,byte[],int)>(i30, r6, $i13);

        return 16;
    }

    private int decryptBlock(byte[], int, byte[], int)
    {
        byte[] r1, r6;
        int[] $r2, $r3, $r4, $r5, $r7, $r8;
        org.bouncycastle.crypto.engines.RC6Engine r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, $i41;

        r0 := @this: org.bouncycastle.crypto.engines.RC6Engine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r6 := @parameter2: byte[];

        i10 := @parameter3: int;

        $i1 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int bytesToWord(byte[],int)>(r1, i0);

        $i2 = i0 + 4;

        i28 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int bytesToWord(byte[],int)>(r1, $i2);

        $i3 = i0 + 8;

        $i4 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int bytesToWord(byte[],int)>(r1, $i3);

        $i5 = i0 + 12;

        i29 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int bytesToWord(byte[],int)>(r1, $i5);

        $r2 = r0.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i6 = $r2[43];

        i30 = $i4 - $i6;

        $r3 = r0.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i7 = $r3[42];

        i31 = $i1 - $i7;

        i32 = 20;

     label1:
        if i32 < 1 goto label2;

        i14 = i29;

        i29 = i30;

        i33 = i28;

        i28 = i31;

        $i15 = 2 * i31;

        $i16 = $i15 + 1;

        i34 = i31 * $i16;

        $i17 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int rotateLeft(int,int)>(i34, 5);

        $i18 = 2 * i30;

        $i19 = $i18 + 1;

        i35 = i30 * $i19;

        $i20 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int rotateLeft(int,int)>(i35, 5);

        $r7 = r0.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i21 = 2 * i32;

        $i22 = $i21 + 1;

        $i23 = $r7[$i22];

        i36 = i33 - $i23;

        $i24 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int rotateRight(int,int)>(i36, $i17);

        i30 = $i24 ^ $i20;

        $r8 = r0.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i25 = 2 * i32;

        $i26 = $r8[$i25];

        i37 = i14 - $i26;

        $i27 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: int rotateRight(int,int)>(i37, $i20);

        i31 = $i27 ^ $i17;

        $i41 = (int) -1;

        i32 = i32 + $i41;

        goto label1;

     label2:
        $r4 = r0.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i8 = $r4[1];

        i38 = i29 - $i8;

        $r5 = r0.<org.bouncycastle.crypto.engines.RC6Engine: int[] _S>;

        $i9 = $r5[0];

        i39 = i28 - $i9;

        specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: void wordToBytes(int,byte[],int)>(i31, r6, i10);

        $i11 = i10 + 4;

        specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: void wordToBytes(int,byte[],int)>(i39, r6, $i11);

        $i12 = i10 + 8;

        specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: void wordToBytes(int,byte[],int)>(i30, r6, $i12);

        $i13 = i10 + 12;

        specialinvoke r0.<org.bouncycastle.crypto.engines.RC6Engine: void wordToBytes(int,byte[],int)>(i38, r6, $i13);

        return 16;
    }

    private int rotateLeft(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;
        org.bouncycastle.crypto.engines.RC6Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC6Engine;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = i0 << i1;

        $i2 = neg i1;

        $i3 = i0 >>> $i2;

        $i5 = $i4 | $i3;

        return $i5;
    }

    private int rotateRight(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;
        org.bouncycastle.crypto.engines.RC6Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC6Engine;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = i0 >>> i1;

        $i2 = neg i1;

        $i3 = i0 << $i2;

        $i5 = $i4 | $i3;

        return $i5;
    }

    private int bytesToWord(byte[], int)
    {
        byte[] r0;
        short $s3, $s7;
        byte $b2;
        int i0, $i1, $i4, i5, i6, $i8, $i10;
        org.bouncycastle.crypto.engines.RC6Engine r1;

        r1 := @this: org.bouncycastle.crypto.engines.RC6Engine;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i5 = 0;

        i6 = 3;

     label1:
        if i6 < 0 goto label2;

        $i4 = i5 << 8;

        $i1 = i6 + i0;

        $b2 = r0[$i1];

        $s7 = (short) $b2;

        $s3 = $s7 & 255;

        $i8 = (int) $s3;

        i5 = $i4 + $i8;

        $i10 = (int) -1;

        i6 = i6 + $i10;

        goto label1;

     label2:
        return i5;
    }

    private void wordToBytes(int, byte[], int)
    {
        byte[] r0;
        byte $b1;
        int i0, $i2, i3, i4;
        org.bouncycastle.crypto.engines.RC6Engine r1;

        r1 := @this: org.bouncycastle.crypto.engines.RC6Engine;

        i3 := @parameter0: int;

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        i4 = 0;

     label1:
        if i4 >= 4 goto label2;

        $i2 = i4 + i0;

        $b1 = (byte) i3;

        r0[$i2] = $b1;

        i3 = i3 >>> 8;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <org.bouncycastle.crypto.engines.RC6Engine: int LGW> = 5;

        <org.bouncycastle.crypto.engines.RC6Engine: int Q32> = -1640531527;

        <org.bouncycastle.crypto.engines.RC6Engine: int P32> = -1209970333;

        <org.bouncycastle.crypto.engines.RC6Engine: int _noRounds> = 20;

        <org.bouncycastle.crypto.engines.RC6Engine: int bytesPerWord> = 4;

        <org.bouncycastle.crypto.engines.RC6Engine: int wordSize> = 32;

        return;
    }
}
