class com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker extends com.google.gxp.compiler.codegen.BracesCodeGenerator$Worker
{
    private final com.google.gxp.compiler.base.Template template;
    private int varCounter;
    private static final java.lang.String GXP_OUT_VAR;
    private static final java.lang.String GXP_CONTEXT_VAR;
    private static final java.lang.String GXP_SIG;
    private com.google.gxp.com.google.common.base.Function parameterToName;
    private com.google.gxp.com.google.common.base.Function parameterToMemberName;
    private static final int MAX_JAVASCRIPT_STRING_LENGTH;
    protected final java.util.Deque instantiatedGxps;
    private final com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor statementVisitor;
    private final com.google.gxp.compiler.base.ExpressionVisitor toExpressionVisitor;
    private final com.google.gxp.compiler.base.ExpressionVisitor toEscapableExpressionVisitor;
    protected com.google.gxp.com.google.common.base.Function expressionToEscapedString;

    public void <init>(java.lang.Appendable, com.google.gxp.compiler.alerts.AlertSink, com.google.gxp.compiler.base.Template)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$2 $r5;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor $r9;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$1 $r4;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        java.lang.Appendable r1;
        java.lang.String[] $r3;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor $r8;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor $r7;
        com.google.gxp.compiler.alerts.AlertSink r2;
        java.lang.Object $r12;
        java.util.ArrayDeque $r6;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$4 $r10;
        com.google.gxp.compiler.base.Template r11, $r13;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: com.google.gxp.compiler.alerts.AlertSink;

        r11 := @parameter2: com.google.gxp.compiler.base.Template;

        $r3 = newarray (java.lang.String)[0];

        specialinvoke r0.<com.google.gxp.compiler.codegen.BracesCodeGenerator$Worker: void <init>(java.lang.Appendable,com.google.gxp.compiler.alerts.AlertSink,java.lang.String[])>(r1, r2, $r3);

        r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: int varCounter> = 0;

        $r4 = new com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$1;

        specialinvoke $r4.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$1: void <init>(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)>(r0);

        r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function parameterToName> = $r4;

        $r5 = new com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$2;

        specialinvoke $r5.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$2: void <init>(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)>(r0);

        r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function parameterToMemberName> = $r5;

        $r6 = new java.util.ArrayDeque;

        specialinvoke $r6.<java.util.ArrayDeque: void <init>()>();

        r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.util.Deque instantiatedGxps> = $r6;

        $r7 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor getStatementVisitor()>();

        r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor statementVisitor> = $r7;

        $r8 = new com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        specialinvoke $r8.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: void <init>(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.js.JavaScriptCodeGenerator$1)>(r0, null);

        r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.ExpressionVisitor toExpressionVisitor> = $r8;

        $r9 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor getToEscapableExpressionVisitor()>();

        r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.ExpressionVisitor toEscapableExpressionVisitor> = $r9;

        $r10 = new com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$4;

        specialinvoke $r10.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$4: void <init>(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)>(r0);

        r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function expressionToEscapedString> = $r10;

        $r12 = staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r11);

        $r13 = (com.google.gxp.compiler.base.Template) $r12;

        r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template> = $r13;

        return;
    }

    public com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker createSubWorker(java.lang.Appendable)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r0, r2;
        com.google.gxp.compiler.alerts.AlertSink $r4;
        java.lang.Appendable r1;
        com.google.gxp.compiler.base.Template $r3;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter0: java.lang.Appendable;

        $r0 = new com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        $r4 = r2.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink alertSink>;

        $r3 = r2.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        specialinvoke $r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void <init>(java.lang.Appendable,com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.Template)>(r1, $r4, $r3);

        return $r0;
    }

    public void run()
    {
        java.lang.Object[] $r5;
        java.util.Iterator $r3;
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r7;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        java.util.List $r2;
        com.google.gxp.compiler.base.OutputLanguage $r11;
        com.google.gxp.compiler.alerts.AlertSink $r12;
        com.google.gxp.compiler.base.Parameter r10;
        java.lang.Object $r9;
        java.lang.String $r8, $r13;
        com.google.gxp.compiler.base.Template $r1, $r4, $r6;
        boolean $z0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.google.gxp.compiler.base.Parameter) $r9;

        $r11 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVASCRIPT>;

        $r12 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink alertSink>;

        $r13 = virtualinvoke r10.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        virtualinvoke $r11.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String validateName(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.Node,java.lang.String)>($r12, r10, $r13);

        goto label1;

     label2:
        $r4 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendHeader(com.google.gxp.compiler.base.Root)>($r4);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine()>();

        $r5 = newarray (java.lang.Object)[1];

        $r6 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r7 = virtualinvoke $r6.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r8 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r7);

        $r5[0] = $r8;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("goog.provide(\'%s\');", $r5);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine()>();

        specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendConstructor()>();

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine()>();

        specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendWriteMethod()>();

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine()>();

        specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendGetGxpClosureMethod(boolean)>(0);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine()>();

        specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendStaticWriteMethod()>();

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine()>();

        specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendGetGxpClosureMethod(boolean)>(1);

        specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendGetDefaultMethods()>();

        specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendConstructorMethods()>();

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendFooter()>();

        return;
    }

    private java.lang.String getWriteMethodSignature(boolean)
    {
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r5;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        java.lang.Iterable $r10, $r11;
        com.google.gxp.com.google.common.base.Function $r9;
        java.lang.String $r6, $r7, $r12;
        boolean z0;
        com.google.gxp.compiler.base.Template $r1, $r4, $r13;
        com.google.gxp.com.google.common.collect.ImmutableSet $r8;
        java.util.List r2, $r14;
        java.lang.StringBuilder $r3;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r13 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r14 = virtualinvoke $r13.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        goto label2;

     label1:
        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r14 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: java.util.List getParameters()>();

     label2:
        r2 = $r14;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r5 = virtualinvoke $r4.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r6 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        if z0 != 0 goto label3;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".prototype");

     label3:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".write = function(");

        $r7 = <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String GXP_SIG>;

        $r8 = staticinvoke <com.google.gxp.com.google.common.collect.ImmutableSet: com.google.gxp.com.google.common.collect.ImmutableSet of(java.lang.Object)>($r7);

        $r9 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function parameterToName>;

        $r10 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>(r2, $r9);

        $r11 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>($r8, $r10);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>($r3, ", ", $r11);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") {");

        $r12 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    private java.lang.String getGetGxpClosureMethodSignature(boolean)
    {
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r5;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        java.lang.Iterable $r8;
        java.util.List r2, $r11;
        com.google.gxp.com.google.common.base.Function $r7;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, $r9;
        boolean z0;
        com.google.gxp.compiler.base.Template $r1, $r4, $r10;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r10 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r11 = virtualinvoke $r10.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        goto label2;

     label1:
        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r11 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: java.util.List getParameters()>();

     label2:
        r2 = $r11;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r5 = virtualinvoke $r4.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r6 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        if z0 != 0 goto label3;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".prototype");

     label3:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".getGxpClosure = function(");

        $r7 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function parameterToName>;

        $r8 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>(r2, $r7);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>($r3, ", ", $r8);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") {");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private void appendConstructor()
    {
        java.lang.Object[] $r4, $r17;
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r6, $r10;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        java.lang.Iterable $r13;
        com.google.gxp.com.google.common.base.Function $r12;
        com.google.gxp.compiler.base.Parameter r16;
        java.lang.String $r7, $r11, $r18, $r19;
        com.google.gxp.compiler.base.Template $r1, $r5, $r9;
        boolean $z0;
        com.google.gxp.compiler.base.Constructor $r2;
        java.util.Iterator $r14;
        java.util.List $r3;
        java.lang.StringBuilder $r8;
        java.lang.Object $r15;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.Constructor getConstructor()>();

        $r3 = virtualinvoke $r2.<com.google.gxp.compiler.base.Constructor: java.util.List getParameters()>();

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("/**");

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r6 = virtualinvoke $r5.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r7 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r6);

        $r4[0] = $r7;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>(" * @this {%s}", $r4);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>(" */");

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r10 = virtualinvoke $r9.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r11 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r10);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = function(");

        $r12 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function parameterToName>;

        $r13 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>($r3, $r12);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>($r8, ", ", $r13);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") {");

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r8);

        $r14 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (com.google.gxp.compiler.base.Parameter) $r15;

        $r17 = newarray (java.lang.Object)[2];

        $r18 = virtualinvoke r16.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        $r17[0] = $r18;

        $r19 = virtualinvoke r16.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        $r17[1] = $r19;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("this.%s = %s;", $r17);

        goto label1;

     label2:
        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("};");

        return;
    }

    private void appendWriteMethod()
    {
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r17;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        java.lang.Iterable $r10, $r12, $r13;
        com.google.gxp.com.google.common.base.Function $r9, $r11;
        java.lang.String $r7, $r14, $r18;
        com.google.gxp.compiler.base.Template $r1, $r4, $r16;
        com.google.gxp.compiler.base.Constructor $r2;
        java.lang.Iterable[] $r6;
        com.google.gxp.com.google.common.collect.ImmutableSet $r8;
        java.util.List $r3, $r5;
        java.lang.StringBuilder $r15;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.Constructor getConstructor()>();

        $r3 = virtualinvoke $r2.<com.google.gxp.compiler.base.Constructor: java.util.List getParameters()>();

        $r4 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r5 = virtualinvoke $r4.<com.google.gxp.compiler.base.Template: java.util.List getParameters()>();

        $r6 = newarray (java.lang.Iterable)[3];

        $r7 = <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String GXP_SIG>;

        $r8 = staticinvoke <com.google.gxp.com.google.common.collect.ImmutableSet: com.google.gxp.com.google.common.collect.ImmutableSet of(java.lang.Object)>($r7);

        $r6[0] = $r8;

        $r9 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function parameterToMemberName>;

        $r10 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>($r3, $r9);

        $r6[1] = $r10;

        $r11 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function parameterToName>;

        $r12 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>($r5, $r11);

        $r6[2] = $r12;

        $r13 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable[])>($r6);

        $r14 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getWriteMethodSignature(boolean)>(0);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r17 = virtualinvoke $r16.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r18 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r17);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".write(");

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>($r15, ", ", $r13);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r15);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("};");

        return;
    }

    private void appendGetGxpClosureMethod(boolean)
    {
        java.lang.Object[] $r5, $r16, $r19;
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r18;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.schema.Schema $r7;
        java.lang.Iterable $r14, $r15;
        com.google.gxp.com.google.common.base.Function $r13;
        java.lang.String $r3, $r4, $r8, $r9, $r11, $r22;
        boolean z0;
        com.google.gxp.compiler.base.Template $r1, $r6, $r17, $r20;
        com.google.gxp.com.google.common.collect.ImmutableSet $r12;
        java.util.List r2, $r21;
        java.lang.StringBuilder $r10;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r20 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r21 = virtualinvoke $r20.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        goto label2;

     label1:
        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r21 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: java.util.List getParameters()>();

     label2:
        r2 = $r21;

        $r3 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getGetGxpClosureMethodSignature(boolean)>(z0);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r3);

        $r4 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String createVarName(java.lang.String)>("self");

        if z0 != 0 goto label3;

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = $r4;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("var %s = this;", $r19);

     label3:
        $r5 = newarray (java.lang.Object)[2];

        $r6 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r7 = virtualinvoke $r6.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r8 = virtualinvoke $r7.<com.google.gxp.compiler.schema.Schema: java.lang.String getJavaScriptType()>();

        $r5[0] = $r8;

        $r9 = <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String GXP_SIG>;

        $r5[1] = $r9;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("return new %s(function(%s) {", $r5);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        if z0 == 0 goto label4;

        $r17 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r18 = virtualinvoke $r17.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r22 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r18);

        goto label5;

     label4:
        $r22 = $r4;

     label5:
        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".write(");

        $r11 = <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String GXP_SIG>;

        $r12 = staticinvoke <com.google.gxp.com.google.common.collect.ImmutableSet: com.google.gxp.com.google.common.collect.ImmutableSet of(java.lang.Object)>($r11);

        $r13 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function parameterToName>;

        $r14 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>(r2, $r13);

        $r15 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>($r12, $r14);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>($r10, ", ", $r15);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r10);

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = "gxp$out";

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("return %s;", $r16);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("});");

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("};");

        return;
    }

    private void appendStaticWriteMethod()
    {
        com.google.gxp.compiler.base.Expression $r3;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor $r4;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        java.lang.String $r1;
        com.google.gxp.compiler.base.Template $r2;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        $r1 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getWriteMethodSignature(boolean)>(1);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r1);

        $r2 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r3 = virtualinvoke $r2.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.Expression getContent()>();

        $r4 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor statementVisitor>;

        virtualinvoke $r3.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>($r4);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("};");

        return;
    }

    private void appendGetDefaultMethods()
    {
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r12, $r16, $r24, $r32, $r36;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.base.Parameter r39, r40;
        boolean $z0, $z1;
        java.util.List $r2, $r5;
        com.google.gxp.compiler.base.Expression $r8, $r19, $r20, $r27;
        java.lang.Object[] $r10, $r14, $r22, $r30, $r34;
        java.lang.String $r9, $r13, $r17, $r25, $r26, $r28, $r29, $r33, $r37, $r38;
        com.google.gxp.compiler.base.Template $r1, $r4, $r11, $r15, $r23, $r31, $r35;
        com.google.gxp.compiler.alerts.SourcePosition $r21;
        java.util.Iterator $r3, $r6;
        java.lang.Object $r7, $r18;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r18 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r39 = (com.google.gxp.compiler.base.Parameter) $r18;

        $r19 = virtualinvoke r39.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Expression getDefaultValue()>();

        if $r19 == null goto label2;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine()>();

        $r20 = virtualinvoke r39.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Expression getDefaultValue()>();

        $r21 = virtualinvoke $r20.<com.google.gxp.compiler.base.Expression: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r22 = newarray (java.lang.Object)[3];

        $r23 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r24 = virtualinvoke $r23.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r25 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r24);

        $r22[0] = $r25;

        $r26 = virtualinvoke r39.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        $r22[1] = $r26;

        $r27 = virtualinvoke r39.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Expression getDefaultValue()>();

        $r28 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getJavaScriptExpression(com.google.gxp.compiler.base.Expression)>($r27);

        $r22[2] = $r28;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r21, "%s.GXP_DEFAULT$%s = %s;", $r22);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine()>();

        $r29 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator: java.lang.String access$200(com.google.gxp.compiler.base.Parameter)>(r39);

        $r30 = newarray (java.lang.Object)[2];

        $r31 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r32 = virtualinvoke $r31.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r33 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r32);

        $r30[0] = $r33;

        $r30[1] = $r29;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("%s.%s = function() {", $r30);

        $r34 = newarray (java.lang.Object)[2];

        $r35 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r36 = virtualinvoke $r35.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r37 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r36);

        $r34[0] = $r37;

        $r38 = virtualinvoke r39.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        $r34[1] = $r38;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("return %s.GXP_DEFAULT$%s;", $r34);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("};");

     label2:
        goto label1;

     label3:
        $r4 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r5 = virtualinvoke $r4.<com.google.gxp.compiler.base.Template: java.util.List getParameters()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r40 = (com.google.gxp.compiler.base.Parameter) $r7;

        $r8 = virtualinvoke r40.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Expression getDefaultValue()>();

        if $r8 == null goto label5;

        $r9 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator: java.lang.String access$300(com.google.gxp.compiler.base.Parameter)>(r40);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine()>();

        $r10 = newarray (java.lang.Object)[2];

        $r11 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r12 = virtualinvoke $r11.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r13 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r12);

        $r10[0] = $r13;

        $r10[1] = $r9;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("%s.prototype.%s = function() {", $r10);

        $r14 = newarray (java.lang.Object)[2];

        $r15 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r16 = virtualinvoke $r15.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r17 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r16);

        $r14[0] = $r17;

        $r14[1] = $r9;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("return %s.%s();", $r14);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("};");

     label5:
        goto label4;

     label6:
        return;
    }

    private void appendConstructorMethods()
    {
        com.google.gxp.compiler.base.ExpressionVisitor $r31;
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r12, $r17, $r25;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.base.Parameter r33, r34;
        boolean $z0, $z1;
        java.util.List $r2, $r5;
        com.google.gxp.compiler.base.Expression $r8, $r21, $r30;
        java.lang.Object[] $r10, $r15, $r23, $r29;
        java.lang.String $r9, $r13, $r14, $r18, $r19, $r22, $r26, $r27;
        com.google.gxp.compiler.base.Template $r1, $r4, $r11, $r16, $r24;
        com.google.gxp.compiler.alerts.SourcePosition $r28;
        java.util.Iterator $r3, $r6;
        java.lang.Object $r7, $r20, $r32;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r20 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r33 = (com.google.gxp.compiler.base.Parameter) $r20;

        $r21 = virtualinvoke r33.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Expression getConstructor()>();

        if $r21 == null goto label2;

        $r22 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator: java.lang.String access$400(com.google.gxp.compiler.base.Parameter)>(r33);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine()>();

        $r23 = newarray (java.lang.Object)[3];

        $r24 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r25 = virtualinvoke $r24.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r26 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r25);

        $r23[0] = $r26;

        $r23[1] = $r22;

        $r27 = virtualinvoke r33.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        $r23[2] = $r27;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("%s.%s = function(%s) {", $r23);

        $r28 = virtualinvoke r33.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r29 = newarray (java.lang.Object)[1];

        $r30 = virtualinvoke r33.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Expression getConstructor()>();

        $r31 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.ExpressionVisitor toExpressionVisitor>;

        $r32 = virtualinvoke $r30.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>($r31);

        $r29[0] = $r32;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r28, "return %s;", $r29);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("};");

     label2:
        goto label1;

     label3:
        $r4 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r5 = virtualinvoke $r4.<com.google.gxp.compiler.base.Template: java.util.List getParameters()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r34 = (com.google.gxp.compiler.base.Parameter) $r7;

        $r8 = virtualinvoke r34.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Expression getConstructor()>();

        if $r8 == null goto label5;

        $r9 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator: java.lang.String access$500(com.google.gxp.compiler.base.Parameter)>(r34);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine()>();

        $r10 = newarray (java.lang.Object)[3];

        $r11 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r12 = virtualinvoke $r11.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r13 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r12);

        $r10[0] = $r13;

        $r10[1] = $r9;

        $r14 = virtualinvoke r34.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        $r10[2] = $r14;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("%s.prototype.%s = function(%s) {", $r10);

        $r15 = newarray (java.lang.Object)[3];

        $r16 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r17 = virtualinvoke $r16.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r18 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r17);

        $r15[0] = $r18;

        $r15[1] = $r9;

        $r19 = virtualinvoke r34.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        $r15[2] = $r19;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("return %s.%s(%s);", $r15);

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("};");

     label5:
        goto label4;

     label6:
        return;
    }

    protected final java.lang.String createVarName(java.lang.String)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r5;
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6;
        java.lang.String r2, $r7;

        r5 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gxp$");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $i0 = r5.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: int varCounter>;

        $i1 = $i0 + 1;

        r5.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: int varCounter> = $i1;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)
    {
        com.google.gxp.compiler.base.TemplateName r0;
        java.lang.String $r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r2;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r0 := @parameter0: com.google.gxp.compiler.base.TemplateName;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.TemplateName: java.lang.String toString()>();

        return $r1;
    }

    private java.lang.String getWriteMethodName(com.google.gxp.compiler.schema.Schema)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r8;
        com.google.gxp.compiler.schema.Schema r0;
        char $c0, $c1;
        java.lang.StringBuilder $r2, $r3, $r4, $r6;
        java.lang.String $r1, $r5, $r7;

        r8 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r0 := @parameter0: com.google.gxp.compiler.schema.Schema;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.schema.Schema: java.lang.String getName()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gxp$write");

        $c0 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    protected void writeExpression(com.google.gxp.compiler.alerts.SourcePosition, java.lang.String)
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        java.lang.Object[] $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        java.lang.String r3;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter0: com.google.gxp.compiler.alerts.SourcePosition;

        r3 := @parameter1: java.lang.String;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = "gxp$out";

        $r2[1] = r3;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>(r1, "%s.append(%s);", $r2);

        return;
    }

    protected void writeString(com.google.gxp.compiler.alerts.SourcePosition, java.lang.String)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r1;
        int $i0, $i1, $i2, i3, $i5, $i7, $i9;
        java.lang.String r0, $r4, $r5, $r7, $r8;
        com.google.gxp.compiler.alerts.SourcePosition r2;
        com.google.gxp.compiler.base.OutputLanguage $r3, $r6;

        r1 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r2 := @parameter0: com.google.gxp.compiler.alerts.SourcePosition;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == 0 goto label3;

        i3 = 0;

     label1:
        $i1 = $i0 - i3;

        $i5 = (int) 65534;

        if $i1 <= $i5 goto label2;

        $r6 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVASCRIPT>;

        $i7 = (int) 65534;

        $i2 = i3 + $i7;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, $i2);

        $r8 = virtualinvoke $r6.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r7);

        virtualinvoke r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void writeExpression(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String)>(r2, $r8);

        $i9 = (int) 65534;

        i3 = i3 + $i9;

        goto label1;

     label2:
        $r3 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVASCRIPT>;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, $i0);

        $r5 = virtualinvoke $r3.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r4);

        virtualinvoke r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void writeExpression(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String)>(r2, $r5);

     label3:
        return;
    }

    protected java.lang.String getCalleeName(com.google.gxp.compiler.base.Callable)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$3 $r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        com.google.gxp.compiler.base.Callable r0;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r0 := @parameter0: com.google.gxp.compiler.base.Callable;

        $r1 = new com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$3;

        specialinvoke $r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$3: void <init>(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)>(r2);

        $r3 = interfaceinvoke r0.<com.google.gxp.compiler.base.Callable: java.lang.Object acceptCallableVisitor(com.google.gxp.compiler.base.CallableVisitor)>($r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    private java.util.List getCallArguments(com.google.gxp.compiler.base.Callable, java.util.Map)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r1;
        java.util.Map r10;
        com.google.gxp.compiler.base.Callable r2;
        boolean $z0, $z1;
        com.google.gxp.compiler.base.Type $r13, $r15;
        com.google.gxp.compiler.base.FormalParameter r7;
        java.util.List $r4;
        java.lang.StringBuilder $r20, $r21, $r24, $r25, $r28, $r29, $r30, $r31, $r33, $r34, $r35, $r37, $r38;
        com.google.gxp.compiler.base.Expression $r14, $r16, $r17, $r18, $r22, $r26;
        java.util.ArrayList $r0;
        java.lang.String $r3, $r8, $r9, $r19, $r23, $r27, $r32, $r36, $r39;
        java.util.Iterator $r5;
        com.google.gxp.compiler.reparent.Attribute r12;
        java.lang.Object $r6, $r11;

        r1 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r2 := @parameter0: com.google.gxp.compiler.base.Callable;

        r10 := @parameter1: java.util.Map;

        $r0 = staticinvoke <com.google.gxp.com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r3 = virtualinvoke r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getCalleeName(com.google.gxp.compiler.base.Callable)>(r2);

        $r4 = interfaceinvoke r2.<com.google.gxp.compiler.base.Callable: java.util.List getParameters()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.google.gxp.compiler.base.FormalParameter) $r6;

        $r8 = virtualinvoke r7.<com.google.gxp.compiler.base.FormalParameter: java.lang.String getPrimaryName()>();

        $r9 = "this";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label6;

        $r11 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r12 = (com.google.gxp.compiler.reparent.Attribute) $r11;

        $r13 = virtualinvoke r7.<com.google.gxp.compiler.base.FormalParameter: com.google.gxp.compiler.base.Type getType()>();

        $r14 = virtualinvoke $r13.<com.google.gxp.compiler.base.Type: com.google.gxp.compiler.base.Expression getDefaultValue()>();

        if $r14 != null goto label2;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r36 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator: java.lang.String access$700(com.google.gxp.compiler.base.FormalParameter)>(r7);

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("()");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        $r15 = virtualinvoke r7.<com.google.gxp.compiler.base.FormalParameter: com.google.gxp.compiler.base.Type getType()>();

        $r16 = virtualinvoke $r15.<com.google.gxp.compiler.base.Type: com.google.gxp.compiler.base.Expression getDefaultValue()>();

        $r39 = virtualinvoke r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getJavaScriptExpression(com.google.gxp.compiler.base.Expression)>($r16);

     label3:
        if r12 != null goto label4;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r39);

        goto label6;

     label4:
        $r17 = virtualinvoke r12.<com.google.gxp.compiler.reparent.Attribute: com.google.gxp.compiler.base.Expression getCondition()>();

        if $r17 == null goto label5;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r22 = virtualinvoke r12.<com.google.gxp.compiler.reparent.Attribute: com.google.gxp.compiler.base.Expression getCondition()>();

        $r23 = virtualinvoke r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getJavaScriptExpression(com.google.gxp.compiler.base.Expression)>($r22);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ? ");

        $r26 = virtualinvoke r12.<com.google.gxp.compiler.reparent.Attribute: com.google.gxp.compiler.base.Expression getValue()>();

        $r27 = virtualinvoke r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getJavaScriptExpression(com.google.gxp.compiler.base.Expression)>($r26);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r32);

        goto label6;

     label5:
        $r18 = virtualinvoke r12.<com.google.gxp.compiler.reparent.Attribute: com.google.gxp.compiler.base.Expression getValue()>();

        $r19 = virtualinvoke r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getJavaScriptExpression(com.google.gxp.compiler.base.Expression)>($r18);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r19);

     label6:
        goto label1;

     label7:
        return $r0;
    }

    protected com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor getStatementVisitor()
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor $r0;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r1;

        r1 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        $r0 = new com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor;

        specialinvoke $r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor: void <init>(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)>(r1);

        return $r0;
    }

    protected com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor getToEscapableExpressionVisitor()
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor $r0;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r1;

        r1 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        $r0 = new com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        specialinvoke $r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: void <init>(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)>(r1);

        return $r0;
    }

    protected java.lang.String getJavaScriptExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.Expression r0;
        com.google.gxp.compiler.base.ExpressionVisitor $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r1;
        java.lang.Object $r3;
        java.lang.String $r4;

        r1 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r0 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r2 = r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.ExpressionVisitor toExpressionVisitor>;

        $r3 = virtualinvoke r0.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>($r2);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    protected java.lang.String getEscapedString(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.Expression r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r1;
        java.lang.StringBuilder $r0;
        com.google.gxp.compiler.schema.Schema $r4;
        java.lang.String $r3, $r5, $r6;

        r1 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r2 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getJavaScriptExpression(com.google.gxp.compiler.base.Expression)>(r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke r2.<com.google.gxp.compiler.base.Expression: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r5 = specialinvoke r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getWriteMethodName(com.google.gxp.compiler.schema.Schema)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(new goog.string.StringBuffer(), ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gxp_context");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").toString()");

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private java.lang.String getEscapableExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.Expression r0;
        com.google.gxp.compiler.base.ExpressionVisitor $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r1;
        java.lang.Object $r3;
        java.lang.String $r4;

        r1 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r0 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r2 = r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.ExpressionVisitor toEscapableExpressionVisitor>;

        $r3 = virtualinvoke r0.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>($r2);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    private java.lang.String toAnonymousClosure(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.Expression r3;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r1, $r2;
        java.lang.StringBuilder $r0;
        java.lang.String $r4;

        r1 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r3 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker createSubWorker(java.lang.Appendable)>($r0);

        specialinvoke $r2.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void toAnonymousClosureImpl(com.google.gxp.compiler.base.Expression)>(r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("})");

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private void toAnonymousClosureImpl(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.alerts.SourcePosition $r2;
        com.google.gxp.compiler.base.Expression r1;
        java.lang.Object[] $r3, $r8;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.schema.Schema $r4;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor $r7;
        java.lang.String $r5, $r6;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r2 = virtualinvoke r1.<com.google.gxp.compiler.base.Expression: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r3 = newarray (java.lang.Object)[2];

        $r4 = virtualinvoke r1.<com.google.gxp.compiler.base.Expression: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r5 = virtualinvoke $r4.<com.google.gxp.compiler.schema.Schema: java.lang.String getJavaScriptType()>();

        $r3[0] = $r5;

        $r6 = <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String GXP_SIG>;

        $r3[1] = $r6;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r2, "new %s(function(%s) {", $r3);

        $r7 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$StatementVisitor statementVisitor>;

        virtualinvoke r1.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>($r7);

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "gxp$out";

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("return %s;", $r8);

        return;
    }

    static java.lang.String access$600(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, com.google.gxp.compiler.base.TemplateName)
    {
        com.google.gxp.compiler.base.TemplateName r1;
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: com.google.gxp.compiler.base.TemplateName;

        $r2 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>(r1);

        return $r2;
    }

    static void access$900(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>(r1);

        return;
    }

    static com.google.gxp.compiler.alerts.AlertSink access$1000(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.alerts.AlertSink $r1;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink alertSink>;

        return $r1;
    }

    static void access$1100(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, com.google.gxp.compiler.alerts.SourcePosition, java.lang.String, java.lang.Object[])
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        java.lang.Object[] r3;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        java.lang.String r2;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>(r1, r2, r3);

        return;
    }

    static void access$1200(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>(r1);

        return;
    }

    static void access$1300(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>(r1);

        return;
    }

    static void access$1400(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>(r1);

        return;
    }

    static void access$1500(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, com.google.gxp.compiler.alerts.SourcePosition, java.lang.CharSequence)
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        java.lang.CharSequence r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter2: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>(r1, r2);

        return;
    }

    static java.lang.String access$1600(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.Expression r1;
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: com.google.gxp.compiler.base.Expression;

        $r2 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getEscapableExpression(com.google.gxp.compiler.base.Expression)>(r1);

        return $r2;
    }

    static java.lang.String access$1700(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, com.google.gxp.compiler.schema.Schema)
    {
        com.google.gxp.compiler.schema.Schema r1;
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: com.google.gxp.compiler.schema.Schema;

        $r2 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getWriteMethodName(com.google.gxp.compiler.schema.Schema)>(r1);

        return $r2;
    }

    static java.lang.String access$1800()
    {
        java.lang.String $r0;

        $r0 = <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String GXP_SIG>;

        return $r0;
    }

    static void access$1900(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, com.google.gxp.compiler.alerts.SourcePosition, java.lang.String, java.lang.Object[])
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        java.lang.Object[] r3;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        java.lang.String r2;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>(r1, r2, r3);

        return;
    }

    static void access$2000(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, com.google.gxp.compiler.alerts.SourcePosition, java.lang.CharSequence)
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        java.lang.CharSequence r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter2: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>(r1, r2);

        return;
    }

    static void access$2100(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>(r1);

        return;
    }

    static void access$2200(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, com.google.gxp.compiler.alerts.SourcePosition, java.lang.CharSequence)
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        java.lang.CharSequence r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter2: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>(r1, r2);

        return;
    }

    static void access$2300(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, com.google.gxp.compiler.alerts.SourcePosition, java.lang.CharSequence)
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        java.lang.CharSequence r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter2: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>(r1, r2);

        return;
    }

    static void access$2400(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, com.google.gxp.compiler.alerts.SourcePosition, java.lang.CharSequence)
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        java.lang.CharSequence r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter2: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>(r1, r2);

        return;
    }

    static com.google.gxp.compiler.alerts.AlertSink access$2500(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.alerts.AlertSink $r1;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink alertSink>;

        return $r1;
    }

    static com.google.gxp.compiler.alerts.AlertSink access$2600(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.alerts.AlertSink $r1;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink alertSink>;

        return $r1;
    }

    static com.google.gxp.compiler.alerts.AlertSink access$2700(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.alerts.AlertSink $r1;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink alertSink>;

        return $r1;
    }

    static void access$2800(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, com.google.gxp.compiler.alerts.SourcePosition, java.lang.String, java.lang.Object[])
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        java.lang.Object[] r3;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        java.lang.String r2;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>(r1, r2, r3);

        return;
    }

    static void access$2900(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>(r1);

        return;
    }

    static void access$3000(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>(r1);

        return;
    }

    static void access$3100(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>(r1);

        return;
    }

    static void access$3200(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>(r1);

        return;
    }

    static com.google.gxp.compiler.base.ExpressionVisitor access$3300(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.base.ExpressionVisitor $r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.ExpressionVisitor toExpressionVisitor>;

        return $r1;
    }

    static void access$3400(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, com.google.gxp.compiler.alerts.SourcePosition, java.lang.String, java.lang.Object[])
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        java.lang.Object[] r3;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        java.lang.String r2;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>(r1, r2, r3);

        return;
    }

    static java.util.List access$3500(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, com.google.gxp.compiler.base.Callable, java.util.Map)
    {
        java.util.List $r3;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        java.util.Map r2;
        com.google.gxp.compiler.base.Callable r1;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: com.google.gxp.compiler.base.Callable;

        r2 := @parameter2: java.util.Map;

        $r3 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.util.List getCallArguments(com.google.gxp.compiler.base.Callable,java.util.Map)>(r1, r2);

        return $r3;
    }

    static void access$3600(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, com.google.gxp.compiler.alerts.SourcePosition, java.lang.CharSequence)
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        java.lang.CharSequence r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter2: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>(r1, r2);

        return;
    }

    static void access$3700(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>(r1);

        return;
    }

    static com.google.gxp.compiler.alerts.AlertSink access$3800(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.alerts.AlertSink $r1;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink alertSink>;

        return $r1;
    }

    static java.lang.String access$3900(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.Expression r1;
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r1 := @parameter1: com.google.gxp.compiler.base.Expression;

        $r2 = specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String toAnonymousClosure(com.google.gxp.compiler.base.Expression)>(r1);

        return $r2;
    }

    static com.google.gxp.compiler.alerts.AlertSink access$4100(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.alerts.AlertSink $r1;

        r0 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink alertSink>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Object[] $r0;
        java.lang.String $r1;

        <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: int MAX_JAVASCRIPT_STRING_LENGTH> = 65534;

        <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String GXP_CONTEXT_VAR> = "gxp_context";

        <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String GXP_OUT_VAR> = "gxp$out";

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = "gxp_context";

        $r1 = staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.String join(java.lang.String,java.lang.Object,java.lang.Object[])>(", ", "gxp$out", $r0);

        <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String GXP_SIG> = $r1;

        return;
    }
}
