class org.waveprotocol.wave.model.document.util.XmlStringBuilder$1 extends java.lang.Object implements org.waveprotocol.wave.model.util.ReadableStringMap$ProcV
{
    final java.util.List val$attribList;
    final org.waveprotocol.wave.model.document.util.XmlStringBuilder this$0;

    void <init>(org.waveprotocol.wave.model.document.util.XmlStringBuilder, java.util.List)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r1;
        java.util.List r2;
        org.waveprotocol.wave.model.document.util.XmlStringBuilder$1 r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilder$1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        r2 := @parameter1: java.util.List;

        r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder$1: org.waveprotocol.wave.model.document.util.XmlStringBuilder this$0> = r1;

        r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder$1: java.util.List val$attribList> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void apply(java.lang.String, java.lang.String)
    {
        java.util.List $r3, $r4;
        org.waveprotocol.wave.model.document.util.XmlStringBuilder$1 r2;
        java.lang.String r0, r1;

        r2 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilder$1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "key should not be null be null");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "value should not be null be null");

        $r3 = r2.<org.waveprotocol.wave.model.document.util.XmlStringBuilder$1: java.util.List val$attribList>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0);

        $r4 = r2.<org.waveprotocol.wave.model.document.util.XmlStringBuilder$1: java.util.List val$attribList>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public volatile void apply(java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder$1 r0;
        java.lang.Object r2;
        java.lang.String r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.util.XmlStringBuilder$1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.String) r2;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder$1: void apply(java.lang.String,java.lang.String)>(r1, $r3);

        return;
    }
}
