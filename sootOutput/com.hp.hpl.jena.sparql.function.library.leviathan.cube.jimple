public class com.hp.hpl.jena.sparql.function.library.leviathan.cube extends com.hp.hpl.jena.sparql.function.FunctionBase1
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.function.library.leviathan.cube r0;

        r0 := @this: com.hp.hpl.jena.sparql.function.library.leviathan.cube;

        specialinvoke r0.<com.hp.hpl.jena.sparql.function.FunctionBase1: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue exec(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.function.library.leviathan.cube r14;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r3, $r5, $r8;
        java.math.BigDecimal $r4;
        int[] $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NumericType $r2;
        int $i0, $i1;
        java.math.BigInteger $r6, $r7;
        java.lang.String $r13;
        double $d0, $d1, $d2, $d3;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r9;
        java.lang.StringBuilder $r10, $r11, $r12;

        r14 := @this: com.hp.hpl.jena.sparql.function.library.leviathan.cube;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = <com.hp.hpl.jena.sparql.function.library.leviathan.cube$1: int[] $SwitchMap$com$hp$hpl$jena$sparql$expr$nodevalue$NumericType>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType classifyNumeric(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("cube", r0);

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label3;
            default: goto label4;
        };

     label1:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $r7 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>(3);

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeInteger(java.math.BigInteger)>($r7);

        return $r8;

     label2:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $d2 = virtualinvoke $r4.<java.math.BigDecimal: double doubleValue()>();

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>($d2, 3.0);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDecimal(double)>($d3);

        return $r5;

     label3:
        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, 3.0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDouble(double)>($d1);

        return $r3;

     label4:
        $r9 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized numeric operation : ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r13);

        throw $r9;
    }
}
