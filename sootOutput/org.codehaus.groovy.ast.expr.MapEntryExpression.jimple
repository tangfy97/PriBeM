public class org.codehaus.groovy.ast.expr.MapEntryExpression extends org.codehaus.groovy.ast.expr.Expression
{
    private org.codehaus.groovy.ast.expr.Expression keyExpression;
    private org.codehaus.groovy.ast.expr.Expression valueExpression;

    public void <init>(org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.Expression r1, r2;
        org.codehaus.groovy.ast.expr.MapEntryExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.MapEntryExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r2 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void <init>()>();

        r0.<org.codehaus.groovy.ast.expr.MapEntryExpression: org.codehaus.groovy.ast.expr.Expression keyExpression> = r1;

        r0.<org.codehaus.groovy.ast.expr.MapEntryExpression: org.codehaus.groovy.ast.expr.Expression valueExpression> = r2;

        return;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.expr.MapEntryExpression r1;
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;

        r1 := @this: org.codehaus.groovy.ast.expr.MapEntryExpression;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitMapEntryExpression(org.codehaus.groovy.ast.expr.MapEntryExpression)>(r1);

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)
    {
        org.codehaus.groovy.ast.expr.ExpressionTransformer r1;
        org.codehaus.groovy.ast.expr.Expression $r3, $r4, $r5, $r6;
        org.codehaus.groovy.ast.expr.MapEntryExpression $r0, r2;

        r2 := @this: org.codehaus.groovy.ast.expr.MapEntryExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ExpressionTransformer;

        $r0 = new org.codehaus.groovy.ast.expr.MapEntryExpression;

        $r3 = r2.<org.codehaus.groovy.ast.expr.MapEntryExpression: org.codehaus.groovy.ast.expr.Expression keyExpression>;

        $r4 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r3);

        $r5 = r2.<org.codehaus.groovy.ast.expr.MapEntryExpression: org.codehaus.groovy.ast.expr.Expression valueExpression>;

        $r6 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r5);

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.MapEntryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r4, $r6);

        virtualinvoke $r0.<org.codehaus.groovy.ast.expr.Expression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r2);

        return $r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r7, $r9, $r10;
        java.lang.String $r2, $r11;
        org.codehaus.groovy.ast.expr.Expression $r5, $r8;
        org.codehaus.groovy.ast.expr.MapEntryExpression r1;

        r1 := @this: org.codehaus.groovy.ast.expr.MapEntryExpression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(key: ");

        $r5 = r1.<org.codehaus.groovy.ast.expr.MapEntryExpression: org.codehaus.groovy.ast.expr.Expression keyExpression>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", value: ");

        $r8 = r1.<org.codehaus.groovy.ast.expr.MapEntryExpression: org.codehaus.groovy.ast.expr.Expression valueExpression>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }

    public org.codehaus.groovy.ast.expr.Expression getKeyExpression()
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.expr.MapEntryExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.MapEntryExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.MapEntryExpression: org.codehaus.groovy.ast.expr.Expression keyExpression>;

        return $r1;
    }

    public org.codehaus.groovy.ast.expr.Expression getValueExpression()
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.expr.MapEntryExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.MapEntryExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.MapEntryExpression: org.codehaus.groovy.ast.expr.Expression valueExpression>;

        return $r1;
    }
}
