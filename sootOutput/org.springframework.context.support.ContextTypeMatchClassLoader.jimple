class org.springframework.context.support.ContextTypeMatchClassLoader extends org.springframework.core.DecoratingClassLoader implements org.springframework.core.SmartClassLoader
{
    private static java.lang.reflect.Method findLoadedClassMethod;
    private final java.util.Map bytesCache;

    static void <clinit>()
    {
        java.lang.IllegalStateException $r4;
        java.lang.NoSuchMethodException $r3;
        java.lang.Class[] $r0;
        java.lang.Class $r1;
        java.lang.reflect.Method $r2;

     label1:
        $r1 = class "Ljava/lang/ClassLoader;";

        $r0 = newarray (java.lang.Class)[1];

        $r0[0] = class "Ljava/lang/String;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("findLoadedClass", $r0);

        <org.springframework.context.support.ContextTypeMatchClassLoader: java.lang.reflect.Method findLoadedClassMethod> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid [java.lang.ClassLoader] class: no \'findLoadedClass\' method defined!");

        throw $r4;

     label4:
        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public void <init>(java.lang.ClassLoader)
    {
        java.util.HashMap $r2;
        java.lang.ClassLoader r1;
        org.springframework.context.support.ContextTypeMatchClassLoader r0;

        r0 := @this: org.springframework.context.support.ContextTypeMatchClassLoader;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<org.springframework.core.DecoratingClassLoader: void <init>(java.lang.ClassLoader)>(r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.context.support.ContextTypeMatchClassLoader: java.util.Map bytesCache> = $r2;

        return;
    }

    public java.lang.Class loadClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        org.springframework.context.support.ContextTypeMatchClassLoader$ContextOverridingClassLoader $r0;
        org.springframework.context.support.ContextTypeMatchClassLoader r1;
        java.lang.Class $r4;
        java.lang.ClassLoader $r2;
        java.lang.String r3;

        r1 := @this: org.springframework.context.support.ContextTypeMatchClassLoader;

        r3 := @parameter0: java.lang.String;

        $r0 = new org.springframework.context.support.ContextTypeMatchClassLoader$ContextOverridingClassLoader;

        $r2 = virtualinvoke r1.<org.springframework.context.support.ContextTypeMatchClassLoader: java.lang.ClassLoader getParent()>();

        specialinvoke $r0.<org.springframework.context.support.ContextTypeMatchClassLoader$ContextOverridingClassLoader: void <init>(org.springframework.context.support.ContextTypeMatchClassLoader,java.lang.ClassLoader)>(r1, $r2);

        $r4 = virtualinvoke $r0.<org.springframework.context.support.ContextTypeMatchClassLoader$ContextOverridingClassLoader: java.lang.Class loadClass(java.lang.String)>(r3);

        return $r4;
    }

    public boolean isClassReloadable(java.lang.Class)
    {
        org.springframework.context.support.ContextTypeMatchClassLoader r2;
        java.lang.Class r0;
        java.lang.ClassLoader $r1;
        boolean $z0;

        r2 := @this: org.springframework.context.support.ContextTypeMatchClassLoader;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = $r1 instanceof org.springframework.context.support.ContextTypeMatchClassLoader$ContextOverridingClassLoader;

        return $z0;
    }

    static boolean access$0(org.springframework.context.support.ContextTypeMatchClassLoader, java.lang.String)
    {
        java.lang.String r1;
        org.springframework.context.support.ContextTypeMatchClassLoader r0;
        boolean $z0;

        r0 := @parameter0: org.springframework.context.support.ContextTypeMatchClassLoader;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<org.springframework.core.DecoratingClassLoader: boolean isExcluded(java.lang.String)>(r1);

        return $z0;
    }

    static java.lang.reflect.Method access$1()
    {
        java.lang.reflect.Method $r0;

        $r0 = <org.springframework.context.support.ContextTypeMatchClassLoader: java.lang.reflect.Method findLoadedClassMethod>;

        return $r0;
    }

    static java.util.Map access$2(org.springframework.context.support.ContextTypeMatchClassLoader)
    {
        org.springframework.context.support.ContextTypeMatchClassLoader r0;
        java.util.Map $r1;

        r0 := @parameter0: org.springframework.context.support.ContextTypeMatchClassLoader;

        $r1 = r0.<org.springframework.context.support.ContextTypeMatchClassLoader: java.util.Map bytesCache>;

        return $r1;
    }
}
