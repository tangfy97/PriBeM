public class org.apache.velocity.runtime.parser.node.GetExecutor extends org.apache.velocity.runtime.parser.node.AbstractExecutor
{
    private final org.apache.velocity.util.introspection.Introspector introspector;
    private java.lang.Object[] params;

    public void <init>(org.apache.velocity.runtime.log.Log, org.apache.velocity.util.introspection.Introspector, java.lang.Class, java.lang.String)
    {
        org.apache.velocity.runtime.log.Log r2;
        java.lang.Object[] $r1, $r6;
        org.apache.velocity.util.introspection.Introspector r3;
        java.lang.Class r5;
        java.lang.String r4;
        org.apache.velocity.runtime.parser.node.GetExecutor r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.GetExecutor;

        r2 := @parameter0: org.apache.velocity.runtime.log.Log;

        r3 := @parameter1: org.apache.velocity.util.introspection.Introspector;

        r5 := @parameter2: java.lang.Class;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<org.apache.velocity.runtime.parser.node.AbstractExecutor: void <init>()>();

        $r1 = newarray (java.lang.Object)[0];

        r0.<org.apache.velocity.runtime.parser.node.GetExecutor: java.lang.Object[] params> = $r1;

        r0.<org.apache.velocity.runtime.parser.node.GetExecutor: org.apache.velocity.runtime.log.Log log> = r2;

        r0.<org.apache.velocity.runtime.parser.node.GetExecutor: org.apache.velocity.util.introspection.Introspector introspector> = r3;

        if r4 == null goto label1;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r4;

        r0.<org.apache.velocity.runtime.parser.node.GetExecutor: java.lang.Object[] params> = $r6;

     label1:
        virtualinvoke r0.<org.apache.velocity.runtime.parser.node.GetExecutor: void discover(java.lang.Class)>(r5);

        return;
    }

    public void <init>(org.apache.velocity.runtime.RuntimeLogger, org.apache.velocity.util.introspection.Introspector, java.lang.Class, java.lang.String)
    {
        org.apache.velocity.runtime.log.RuntimeLoggerLog $r1;
        org.apache.velocity.util.introspection.Introspector r3;
        java.lang.Class r4;
        java.lang.String r5;
        org.apache.velocity.runtime.parser.node.GetExecutor r0;
        org.apache.velocity.runtime.RuntimeLogger r2;

        r0 := @this: org.apache.velocity.runtime.parser.node.GetExecutor;

        r2 := @parameter0: org.apache.velocity.runtime.RuntimeLogger;

        r3 := @parameter1: org.apache.velocity.util.introspection.Introspector;

        r4 := @parameter2: java.lang.Class;

        r5 := @parameter3: java.lang.String;

        $r1 = new org.apache.velocity.runtime.log.RuntimeLoggerLog;

        specialinvoke $r1.<org.apache.velocity.runtime.log.RuntimeLoggerLog: void <init>(org.apache.velocity.runtime.RuntimeLogger)>(r2);

        specialinvoke r0.<org.apache.velocity.runtime.parser.node.GetExecutor: void <init>(org.apache.velocity.runtime.log.Log,org.apache.velocity.util.introspection.Introspector,java.lang.Class,java.lang.String)>($r1, r3, r4, r5);

        return;
    }

    protected void discover(java.lang.Class)
    {
        java.lang.Object[] $r2, $r8;
        java.lang.StringBuffer $r6, $r7, $r10, $r11;
        org.apache.velocity.util.introspection.Introspector $r3;
        java.lang.String $r12;
        org.apache.velocity.exception.VelocityException $r14;
        org.apache.velocity.runtime.parser.node.GetExecutor r0;
        java.lang.reflect.Method $r4;
        java.lang.RuntimeException $r15;
        java.lang.Exception $r5;
        org.apache.velocity.runtime.log.Log $r13;
        java.lang.Class r1;
        java.lang.Object $r9;

        r0 := @this: org.apache.velocity.runtime.parser.node.GetExecutor;

        r1 := @parameter0: java.lang.Class;

     label1:
        $r3 = r0.<org.apache.velocity.runtime.parser.node.GetExecutor: org.apache.velocity.util.introspection.Introspector introspector>;

        $r2 = r0.<org.apache.velocity.runtime.parser.node.GetExecutor: java.lang.Object[] params>;

        $r4 = virtualinvoke $r3.<org.apache.velocity.util.introspection.Introspector: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Object[])>(r1, "get", $r2);

        virtualinvoke r0.<org.apache.velocity.runtime.parser.node.GetExecutor: void setMethod(java.lang.reflect.Method)>($r4);

     label2:
        goto label5;

     label3:
        $r15 := @caughtexception;

        throw $r15;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Exception while looking for get(\'");

        $r8 = r0.<org.apache.velocity.runtime.parser.node.GetExecutor: java.lang.Object[] params>;

        $r9 = $r8[0];

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\') method");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = r0.<org.apache.velocity.runtime.parser.node.GetExecutor: org.apache.velocity.runtime.log.Log log>;

        virtualinvoke $r13.<org.apache.velocity.runtime.log.Log: void error(java.lang.Object,java.lang.Throwable)>($r12, $r5);

        $r14 = new org.apache.velocity.exception.VelocityException;

        specialinvoke $r14.<org.apache.velocity.exception.VelocityException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r5);

        throw $r14;

     label5:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public java.lang.Object execute(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] $r3;
        java.lang.Object r2, $r4;
        org.apache.velocity.runtime.parser.node.GetExecutor r0;
        java.lang.reflect.Method $r1;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.parser.node.GetExecutor;

        r2 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.GetExecutor: boolean isAlive()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.GetExecutor: java.lang.reflect.Method getMethod()>();

        $r3 = r0.<org.apache.velocity.runtime.parser.node.GetExecutor: java.lang.Object[] params>;

        $r4 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r3);

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }
}
