public class com.hp.hpl.jena.sparql.util.MappedLoader extends java.lang.Object
{
    static java.util.Map uriMap;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.MappedLoader r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.MappedLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isPossibleDynamicURI(java.lang.String, java.lang.Class)
    {
        java.lang.Class r1, $r2;
        java.lang.String $r0, r3;
        boolean $z0;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.util.MappedLoader: java.lang.String mapDynamicURI(java.lang.String)>(r3);

        if $r0 != null goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.MappedLoader: java.lang.Class loadClass(java.lang.String,java.lang.Class)>($r0, r1);

        if $r2 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static java.lang.String mapDynamicURI(java.lang.String)
    {
        java.util.Map$Entry $r0;
        int $i0;
        java.lang.Object $r1, $r3;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r2, r4, $r5, $r9, r10;
        boolean $z0;

        r10 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.util.MappedLoader: java.util.Map$Entry find(java.lang.String)>(r10);

        if $r0 != null goto label2;

        $z0 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("java:");

        if $z0 == 0 goto label1;

        return r10;

     label1:
        return null;

     label2:
        $r1 = interfaceinvoke $r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        r2 = (java.lang.String) $r1;

        $r3 = interfaceinvoke $r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (java.lang.String) $r3;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $r5 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>($i0);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private static java.util.Map$Entry find(java.lang.String)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.util.Map $r0;
        java.lang.Object $r3, $r5;
        java.lang.String r6, r7;
        boolean $z0, $z1;

        r7 := @parameter0: java.lang.String;

        $r0 = <com.hp.hpl.jena.sparql.util.MappedLoader: java.util.Map uriMap>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.String) $r5;

        $z1 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>(r6);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static java.lang.Class loadClass(java.lang.String, java.lang.Class)
    {
        java.lang.Class r1, $r2;
        java.lang.String $r0, r3;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.util.MappedLoader: java.lang.String mapDynamicURI(java.lang.String)>(r3);

        if $r0 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.Loader: java.lang.Class loadClass(java.lang.String,java.lang.Class)>($r0, r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.util.Map $r1, $r2, $r3, $r4, $r5, $r6;
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.hp.hpl.jena.sparql.util.MappedLoader: java.util.Map uriMap> = $r0;

        $r1 = <com.hp.hpl.jena.sparql.util.MappedLoader: java.util.Map uriMap>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://jena.hpl.hp.com/ARQ/function#", "java:com.hp.hpl.jena.sparql.function.library.");

        $r2 = <com.hp.hpl.jena.sparql.util.MappedLoader: java.util.Map uriMap>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://jena.hpl.hp.com/ARQ/property#", "java:com.hp.hpl.jena.sparql.pfunction.library.");

        $r3 = <com.hp.hpl.jena.sparql.util.MappedLoader: java.util.Map uriMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://jena.hpl.hp.com/ARQ/procedure#", "java:com.hp.hpl.jena.sparql.procedure.library.");

        $r4 = <com.hp.hpl.jena.sparql.util.MappedLoader: java.util.Map uriMap>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java:com.hp.hpl.jena.query.function.library.", "java:com.hp.hpl.jena.sparql.function.library.");

        $r5 = <com.hp.hpl.jena.sparql.util.MappedLoader: java.util.Map uriMap>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java:com.hp.hpl.jena.query.pfunction.library.", "java:com.hp.hpl.jena.sparql.pfunction.library.");

        $r6 = <com.hp.hpl.jena.sparql.util.MappedLoader: java.util.Map uriMap>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://www.dotnetrdf.org/leviathan#", "java:com.hp.hpl.jena.sparql.function.library.leviathan.");

        return;
    }
}
