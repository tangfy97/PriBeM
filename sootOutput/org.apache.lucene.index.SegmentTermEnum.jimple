final class org.apache.lucene.index.SegmentTermEnum extends org.apache.lucene.index.TermEnum implements java.lang.Cloneable
{
    private org.apache.lucene.store.IndexInput input;
    org.apache.lucene.index.FieldInfos fieldInfos;
    long size;
    long position;
    private boolean first;
    private org.apache.lucene.index.TermBuffer termBuffer;
    private org.apache.lucene.index.TermBuffer prevBuffer;
    private org.apache.lucene.index.TermBuffer scanBuffer;
    private org.apache.lucene.index.TermInfo termInfo;
    private int format;
    private boolean isIndex;
    long indexPointer;
    int indexInterval;
    int skipInterval;
    int maxSkipLevels;
    private int formatM1SkipInterval;
    static final boolean $assertionsDisabled;

    void <init>(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfos, boolean) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.index.IndexFormatTooNewException $r35;
        org.apache.lucene.index.TermBuffer $r11, $r12, $r13, $r31, $r32, $r33;
        org.apache.lucene.index.FieldInfos r6;
        boolean z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r16, $r17, $r18, $r22, $r23, $r24, $r36, $r38;
        long $l2, $l15;
        java.lang.AssertionError $r37, $r39;
        org.apache.lucene.index.TermInfo $r34;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i28;
        java.lang.String $r19, $r25;
        org.apache.lucene.index.SegmentTermEnum r0;
        org.apache.lucene.store.IndexInput r5, $r7, $r8, $r9, $r10, $r26, $r27, $r28, $r30;

        r0 := @this: org.apache.lucene.index.SegmentTermEnum;

        r5 := @parameter0: org.apache.lucene.store.IndexInput;

        r6 := @parameter1: org.apache.lucene.index.FieldInfos;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.lucene.index.TermEnum: void <init>()>();

        r0.<org.apache.lucene.index.SegmentTermEnum: long position> = -1L;

        r0.<org.apache.lucene.index.SegmentTermEnum: boolean first> = 1;

        $r31 = new org.apache.lucene.index.TermBuffer;

        specialinvoke $r31.<org.apache.lucene.index.TermBuffer: void <init>()>();

        r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer termBuffer> = $r31;

        $r32 = new org.apache.lucene.index.TermBuffer;

        specialinvoke $r32.<org.apache.lucene.index.TermBuffer: void <init>()>();

        r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer prevBuffer> = $r32;

        $r33 = new org.apache.lucene.index.TermBuffer;

        specialinvoke $r33.<org.apache.lucene.index.TermBuffer: void <init>()>();

        r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer scanBuffer> = $r33;

        $r34 = new org.apache.lucene.index.TermInfo;

        specialinvoke $r34.<org.apache.lucene.index.TermInfo: void <init>()>();

        r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo> = $r34;

        r0.<org.apache.lucene.index.SegmentTermEnum: boolean isIndex> = 0;

        r0.<org.apache.lucene.index.SegmentTermEnum: long indexPointer> = 0L;

        r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input> = r5;

        r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.FieldInfos fieldInfos> = r6;

        r0.<org.apache.lucene.index.SegmentTermEnum: boolean isIndex> = z0;

        r0.<org.apache.lucene.index.SegmentTermEnum: int maxSkipLevels> = 1;

        $r7 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        $i0 = virtualinvoke $r7.<org.apache.lucene.store.IndexInput: int readInt()>();

        if $i0 < 0 goto label1;

        r0.<org.apache.lucene.index.SegmentTermEnum: int format> = 0;

        $l15 = (long) $i0;

        r0.<org.apache.lucene.index.SegmentTermEnum: long size> = $l15;

        r0.<org.apache.lucene.index.SegmentTermEnum: int indexInterval> = 128;

        r0.<org.apache.lucene.index.SegmentTermEnum: int skipInterval> = 2147483647;

        goto label7;

     label1:
        r0.<org.apache.lucene.index.SegmentTermEnum: int format> = $i0;

        $i1 = r0.<org.apache.lucene.index.SegmentTermEnum: int format>;

        $i18 = (int) -4;

        if $i1 >= $i18 goto label2;

        $r35 = new org.apache.lucene.index.IndexFormatTooNewException;

        $r30 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        $i14 = r0.<org.apache.lucene.index.SegmentTermEnum: int format>;

        $i20 = (int) -1;

        $i22 = (int) -4;

        specialinvoke $r35.<org.apache.lucene.index.IndexFormatTooNewException: void <init>(org.apache.lucene.store.DataInput,int,int,int)>($r30, $i14, $i20, $i22);

        throw $r35;

     label2:
        $r8 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        $l2 = virtualinvoke $r8.<org.apache.lucene.store.IndexInput: long readLong()>();

        r0.<org.apache.lucene.index.SegmentTermEnum: long size> = $l2;

        $i3 = r0.<org.apache.lucene.index.SegmentTermEnum: int format>;

        $i24 = (int) -1;

        if $i3 != $i24 goto label4;

        $z2 = r0.<org.apache.lucene.index.SegmentTermEnum: boolean isIndex>;

        if $z2 != 0 goto label3;

        $r27 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        $i12 = virtualinvoke $r27.<org.apache.lucene.store.IndexInput: int readInt()>();

        r0.<org.apache.lucene.index.SegmentTermEnum: int indexInterval> = $i12;

        $r28 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        $i13 = virtualinvoke $r28.<org.apache.lucene.store.IndexInput: int readInt()>();

        r0.<org.apache.lucene.index.SegmentTermEnum: int formatM1SkipInterval> = $i13;

     label3:
        r0.<org.apache.lucene.index.SegmentTermEnum: int skipInterval> = 2147483647;

        goto label5;

     label4:
        $r9 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        $i4 = virtualinvoke $r9.<org.apache.lucene.store.IndexInput: int readInt()>();

        r0.<org.apache.lucene.index.SegmentTermEnum: int indexInterval> = $i4;

        $r10 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        $i5 = virtualinvoke $r10.<org.apache.lucene.store.IndexInput: int readInt()>();

        r0.<org.apache.lucene.index.SegmentTermEnum: int skipInterval> = $i5;

        $i6 = r0.<org.apache.lucene.index.SegmentTermEnum: int format>;

        $i26 = (int) -3;

        if $i6 > $i26 goto label5;

        $r26 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        $i11 = virtualinvoke $r26.<org.apache.lucene.store.IndexInput: int readInt()>();

        r0.<org.apache.lucene.index.SegmentTermEnum: int maxSkipLevels> = $i11;

     label5:
        $z3 = <org.apache.lucene.index.SegmentTermEnum: boolean $assertionsDisabled>;

        if $z3 != 0 goto label6;

        $i9 = r0.<org.apache.lucene.index.SegmentTermEnum: int indexInterval>;

        if $i9 > 0 goto label6;

        $r37 = new java.lang.AssertionError;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("indexInterval=");

        $i10 = r0.<org.apache.lucene.index.SegmentTermEnum: int indexInterval>;

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is negative; must be > 0");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.AssertionError: void <init>(java.lang.Object)>($r25);

        throw $r37;

     label6:
        $z1 = <org.apache.lucene.index.SegmentTermEnum: boolean $assertionsDisabled>;

        if $z1 != 0 goto label7;

        $i7 = r0.<org.apache.lucene.index.SegmentTermEnum: int skipInterval>;

        if $i7 > 0 goto label7;

        $r39 = new java.lang.AssertionError;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skipInterval=");

        $i8 = r0.<org.apache.lucene.index.SegmentTermEnum: int skipInterval>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is negative; must be > 0");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.lang.AssertionError: void <init>(java.lang.Object)>($r19);

        throw $r39;

     label7:
        $i16 = r0.<org.apache.lucene.index.SegmentTermEnum: int format>;

        $i28 = (int) -4;

        if $i16 <= $i28 goto label8;

        $r11 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer termBuffer>;

        virtualinvoke $r11.<org.apache.lucene.index.TermBuffer: void setPreUTF8Strings()>();

        $r12 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer scanBuffer>;

        virtualinvoke $r12.<org.apache.lucene.index.TermBuffer: void setPreUTF8Strings()>();

        $r13 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer prevBuffer>;

        virtualinvoke $r13.<org.apache.lucene.index.TermBuffer: void setPreUTF8Strings()>();

     label8:
        return;
    }

    protected java.lang.Object clone()
    {
        java.lang.CloneNotSupportedException $r14;
        org.apache.lucene.index.TermInfo $r5, $r6;
        org.apache.lucene.index.TermBuffer $r7, $r9, $r10, $r12, $r13;
        org.apache.lucene.index.SegmentTermEnum r0, r15;
        org.apache.lucene.store.IndexInput $r2, $r4;
        java.lang.Object $r1, $r3, $r8, $r11;

        r0 := @this: org.apache.lucene.index.SegmentTermEnum;

        r15 = null;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r15 = (org.apache.lucene.index.SegmentTermEnum) $r1;

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

     label4:
        $r2 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.store.IndexInput: java.lang.Object clone()>();

        $r4 = (org.apache.lucene.store.IndexInput) $r3;

        r15.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input> = $r4;

        $r5 = new org.apache.lucene.index.TermInfo;

        $r6 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo>;

        specialinvoke $r5.<org.apache.lucene.index.TermInfo: void <init>(org.apache.lucene.index.TermInfo)>($r6);

        r15.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo> = $r5;

        $r7 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer termBuffer>;

        $r8 = virtualinvoke $r7.<org.apache.lucene.index.TermBuffer: java.lang.Object clone()>();

        $r9 = (org.apache.lucene.index.TermBuffer) $r8;

        r15.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer termBuffer> = $r9;

        $r10 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer prevBuffer>;

        $r11 = virtualinvoke $r10.<org.apache.lucene.index.TermBuffer: java.lang.Object clone()>();

        $r12 = (org.apache.lucene.index.TermBuffer) $r11;

        r15.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer prevBuffer> = $r12;

        $r13 = new org.apache.lucene.index.TermBuffer;

        specialinvoke $r13.<org.apache.lucene.index.TermBuffer: void <init>()>();

        r15.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer scanBuffer> = $r13;

        return r15;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    final void seek(long, long, org.apache.lucene.index.Term, org.apache.lucene.index.TermInfo) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentTermEnum r0;
        org.apache.lucene.store.IndexInput $r1;
        org.apache.lucene.index.Term r2;
        long l0, l1;
        org.apache.lucene.index.TermInfo r5, $r6;
        org.apache.lucene.index.TermBuffer $r3, $r4;
        byte $b2;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.SegmentTermEnum;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r2 := @parameter2: org.apache.lucene.index.Term;

        r5 := @parameter3: org.apache.lucene.index.TermInfo;

        $r1 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        virtualinvoke $r1.<org.apache.lucene.store.IndexInput: void seek(long)>(l0);

        r0.<org.apache.lucene.index.SegmentTermEnum: long position> = l1;

        $r3 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer termBuffer>;

        virtualinvoke $r3.<org.apache.lucene.index.TermBuffer: void set(org.apache.lucene.index.Term)>(r2);

        $r4 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer prevBuffer>;

        virtualinvoke $r4.<org.apache.lucene.index.TermBuffer: void reset()>();

        $r6 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo>;

        virtualinvoke $r6.<org.apache.lucene.index.TermInfo: void set(org.apache.lucene.index.TermInfo)>(r5);

        $b2 = l1 cmp -1L;

        if $b2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<org.apache.lucene.index.SegmentTermEnum: boolean first> = $z0;

        return;
    }

    public final boolean next() throws java.io.IOException
    {
        org.apache.lucene.index.TermBuffer $r1, $r2, $r5, $r19, $r20, $r21;
        byte $b4;
        org.apache.lucene.index.FieldInfos $r3;
        boolean $z0, $z1;
        long $l0, $l1, $l2, $l3, $l6, $l7, $l8, $l9, $l10, $l11, $l15, $l16, $l17;
        org.apache.lucene.index.TermInfo $r7, $r8, $r10, $r12, $r15, $r16, $r18;
        int $i5, $i12, $i13, $i14, $i18, $i19, $i20, $i21, $i22, $i24;
        org.apache.lucene.index.SegmentTermEnum r0;
        org.apache.lucene.store.IndexInput $r4, $r6, $r9, $r11, $r13, $r14, $r17;

        r0 := @this: org.apache.lucene.index.SegmentTermEnum;

        $l0 = r0.<org.apache.lucene.index.SegmentTermEnum: long position>;

        $l1 = $l0 + 1L;

        r0.<org.apache.lucene.index.SegmentTermEnum: long position> = $l1;

        $l2 = r0.<org.apache.lucene.index.SegmentTermEnum: long size>;

        $l3 = $l2 - 1L;

        $b4 = $l0 cmp $l3;

        $i22 = (int) $b4;

        if $i22 < 0 goto label1;

        $r20 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer prevBuffer>;

        $r19 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer termBuffer>;

        virtualinvoke $r20.<org.apache.lucene.index.TermBuffer: void set(org.apache.lucene.index.TermBuffer)>($r19);

        $r21 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer termBuffer>;

        virtualinvoke $r21.<org.apache.lucene.index.TermBuffer: void reset()>();

        return 0;

     label1:
        $r2 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer prevBuffer>;

        $r1 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer termBuffer>;

        virtualinvoke $r2.<org.apache.lucene.index.TermBuffer: void set(org.apache.lucene.index.TermBuffer)>($r1);

        $r5 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer termBuffer>;

        $r4 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        $r3 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.FieldInfos fieldInfos>;

        virtualinvoke $r5.<org.apache.lucene.index.TermBuffer: void read(org.apache.lucene.store.IndexInput,org.apache.lucene.index.FieldInfos)>($r4, $r3);

        $r7 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo>;

        $r6 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        $i5 = virtualinvoke $r6.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $r7.<org.apache.lucene.index.TermInfo: int docFreq> = $i5;

        $r8 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo>;

        $l6 = $r8.<org.apache.lucene.index.TermInfo: long freqPointer>;

        $r9 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        $l7 = virtualinvoke $r9.<org.apache.lucene.store.IndexInput: long readVLong()>();

        $l8 = $l6 + $l7;

        $r8.<org.apache.lucene.index.TermInfo: long freqPointer> = $l8;

        $r10 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo>;

        $l9 = $r10.<org.apache.lucene.index.TermInfo: long proxPointer>;

        $r11 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        $l10 = virtualinvoke $r11.<org.apache.lucene.store.IndexInput: long readVLong()>();

        $l11 = $l9 + $l10;

        $r10.<org.apache.lucene.index.TermInfo: long proxPointer> = $l11;

        $i12 = r0.<org.apache.lucene.index.SegmentTermEnum: int format>;

        $i24 = (int) -1;

        if $i12 != $i24 goto label2;

        $z0 = r0.<org.apache.lucene.index.SegmentTermEnum: boolean isIndex>;

        if $z0 != 0 goto label3;

        $r16 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo>;

        $i20 = $r16.<org.apache.lucene.index.TermInfo: int docFreq>;

        $i19 = r0.<org.apache.lucene.index.SegmentTermEnum: int formatM1SkipInterval>;

        if $i20 <= $i19 goto label3;

        $r18 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo>;

        $r17 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        $i21 = virtualinvoke $r17.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $r18.<org.apache.lucene.index.TermInfo: int skipOffset> = $i21;

        goto label3;

     label2:
        $r12 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo>;

        $i14 = $r12.<org.apache.lucene.index.TermInfo: int docFreq>;

        $i13 = r0.<org.apache.lucene.index.SegmentTermEnum: int skipInterval>;

        if $i14 < $i13 goto label3;

        $r15 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo>;

        $r14 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        $i18 = virtualinvoke $r14.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $r15.<org.apache.lucene.index.TermInfo: int skipOffset> = $i18;

     label3:
        $z1 = r0.<org.apache.lucene.index.SegmentTermEnum: boolean isIndex>;

        if $z1 == 0 goto label4;

        $l15 = r0.<org.apache.lucene.index.SegmentTermEnum: long indexPointer>;

        $r13 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        $l16 = virtualinvoke $r13.<org.apache.lucene.store.IndexInput: long readVLong()>();

        $l17 = $l15 + $l16;

        r0.<org.apache.lucene.index.SegmentTermEnum: long indexPointer> = $l17;

     label4:
        return 1;
    }

    final int scanTo(org.apache.lucene.index.Term) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentTermEnum r0;
        org.apache.lucene.index.Term r1;
        org.apache.lucene.index.TermBuffer $r2, $r3, $r4;
        int i0, $i1;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.SegmentTermEnum;

        r1 := @parameter0: org.apache.lucene.index.Term;

        $r2 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer scanBuffer>;

        virtualinvoke $r2.<org.apache.lucene.index.TermBuffer: void set(org.apache.lucene.index.Term)>(r1);

        i0 = 0;

        $z0 = r0.<org.apache.lucene.index.SegmentTermEnum: boolean first>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.lucene.index.SegmentTermEnum: boolean next()>();

        r0.<org.apache.lucene.index.SegmentTermEnum: boolean first> = 0;

        i0 = 1;

     label1:
        $r3 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer scanBuffer>;

        $r4 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer termBuffer>;

        $i1 = virtualinvoke $r3.<org.apache.lucene.index.TermBuffer: int compareTo(org.apache.lucene.index.TermBuffer)>($r4);

        if $i1 <= 0 goto label2;

        $z1 = virtualinvoke r0.<org.apache.lucene.index.SegmentTermEnum: boolean next()>();

        if $z1 == 0 goto label2;

        i0 = i0 + 1;

        goto label1;

     label2:
        return i0;
    }

    public final org.apache.lucene.index.Term term()
    {
        org.apache.lucene.index.Term $r2;
        org.apache.lucene.index.SegmentTermEnum r0;
        org.apache.lucene.index.TermBuffer $r1;

        r0 := @this: org.apache.lucene.index.SegmentTermEnum;

        $r1 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer termBuffer>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.TermBuffer: org.apache.lucene.index.Term toTerm()>();

        return $r2;
    }

    final org.apache.lucene.index.Term prev()
    {
        org.apache.lucene.index.Term $r2;
        org.apache.lucene.index.SegmentTermEnum r0;
        org.apache.lucene.index.TermBuffer $r1;

        r0 := @this: org.apache.lucene.index.SegmentTermEnum;

        $r1 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermBuffer prevBuffer>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.TermBuffer: org.apache.lucene.index.Term toTerm()>();

        return $r2;
    }

    final org.apache.lucene.index.TermInfo termInfo()
    {
        org.apache.lucene.index.TermInfo $r0, $r2;
        org.apache.lucene.index.SegmentTermEnum r1;

        r1 := @this: org.apache.lucene.index.SegmentTermEnum;

        $r0 = new org.apache.lucene.index.TermInfo;

        $r2 = r1.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo>;

        specialinvoke $r0.<org.apache.lucene.index.TermInfo: void <init>(org.apache.lucene.index.TermInfo)>($r2);

        return $r0;
    }

    final void termInfo(org.apache.lucene.index.TermInfo)
    {
        org.apache.lucene.index.TermInfo r0, $r2;
        org.apache.lucene.index.SegmentTermEnum r1;

        r1 := @this: org.apache.lucene.index.SegmentTermEnum;

        r0 := @parameter0: org.apache.lucene.index.TermInfo;

        $r2 = r1.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo>;

        virtualinvoke r0.<org.apache.lucene.index.TermInfo: void set(org.apache.lucene.index.TermInfo)>($r2);

        return;
    }

    public final int docFreq()
    {
        org.apache.lucene.index.TermInfo $r1;
        int $i0;
        org.apache.lucene.index.SegmentTermEnum r0;

        r0 := @this: org.apache.lucene.index.SegmentTermEnum;

        $r1 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo>;

        $i0 = $r1.<org.apache.lucene.index.TermInfo: int docFreq>;

        return $i0;
    }

    final long freqPointer()
    {
        org.apache.lucene.index.TermInfo $r1;
        org.apache.lucene.index.SegmentTermEnum r0;
        long $l0;

        r0 := @this: org.apache.lucene.index.SegmentTermEnum;

        $r1 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo>;

        $l0 = $r1.<org.apache.lucene.index.TermInfo: long freqPointer>;

        return $l0;
    }

    final long proxPointer()
    {
        org.apache.lucene.index.TermInfo $r1;
        org.apache.lucene.index.SegmentTermEnum r0;
        long $l0;

        r0 := @this: org.apache.lucene.index.SegmentTermEnum;

        $r1 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.index.TermInfo termInfo>;

        $l0 = $r1.<org.apache.lucene.index.TermInfo: long proxPointer>;

        return $l0;
    }

    public final void close() throws java.io.IOException
    {
        org.apache.lucene.index.SegmentTermEnum r0;
        org.apache.lucene.store.IndexInput $r1;

        r0 := @this: org.apache.lucene.index.SegmentTermEnum;

        $r1 = r0.<org.apache.lucene.index.SegmentTermEnum: org.apache.lucene.store.IndexInput input>;

        virtualinvoke $r1.<org.apache.lucene.store.IndexInput: void close()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/SegmentTermEnum;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.SegmentTermEnum: boolean $assertionsDisabled> = $z1;

        return;
    }
}
