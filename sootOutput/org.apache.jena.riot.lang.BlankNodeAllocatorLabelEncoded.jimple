public class org.apache.jena.riot.lang.BlankNodeAllocatorLabelEncoded extends java.lang.Object implements org.apache.jena.riot.lang.BlankNodeAllocator
{
    private java.util.concurrent.atomic.AtomicLong counter;

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        org.apache.jena.riot.lang.BlankNodeAllocatorLabelEncoded r0;

        r0 := @this: org.apache.jena.riot.lang.BlankNodeAllocatorLabelEncoded;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<org.apache.jena.riot.lang.BlankNodeAllocatorLabelEncoded: java.util.concurrent.atomic.AtomicLong counter> = $r1;

        return;
    }

    public void reset()
    {
        org.apache.jena.riot.lang.BlankNodeAllocatorLabelEncoded r0;

        r0 := @this: org.apache.jena.riot.lang.BlankNodeAllocatorLabelEncoded;

        return;
    }

    public com.hp.hpl.jena.graph.Node alloc(java.lang.String)
    {
        org.apache.jena.riot.lang.BlankNodeAllocatorLabelEncoded r4;
        com.hp.hpl.jena.rdf.model.AnonId $r0;
        java.lang.String r1, $r2;
        com.hp.hpl.jena.graph.Node $r3;

        r4 := @this: org.apache.jena.riot.lang.BlankNodeAllocatorLabelEncoded;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.hp.hpl.jena.rdf.model.AnonId;

        $r2 = staticinvoke <org.apache.jena.riot.out.NodeFmtLib: java.lang.String decodeBNodeLabel(java.lang.String)>(r1);

        specialinvoke $r0.<com.hp.hpl.jena.rdf.model.AnonId: void <init>(java.lang.String)>($r2);

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon(com.hp.hpl.jena.rdf.model.AnonId)>($r0);

        return $r3;
    }

    public com.hp.hpl.jena.graph.Node create()
    {
        org.apache.jena.riot.lang.BlankNodeAllocatorLabelEncoded r2;
        long $l0;
        com.hp.hpl.jena.graph.Node $r7;
        java.util.concurrent.atomic.AtomicLong $r3;
        com.hp.hpl.jena.rdf.model.AnonId $r6;
        java.lang.StringBuilder $r0, $r1, $r4;
        java.lang.String $r5;

        r2 := @this: org.apache.jena.riot.lang.BlankNodeAllocatorLabelEncoded;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("genid");

        $r3 = r2.<org.apache.jena.riot.lang.BlankNodeAllocatorLabelEncoded: java.util.concurrent.atomic.AtomicLong counter>;

        $l0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new com.hp.hpl.jena.rdf.model.AnonId;

        specialinvoke $r6.<com.hp.hpl.jena.rdf.model.AnonId: void <init>(java.lang.String)>($r5);

        $r7 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon(com.hp.hpl.jena.rdf.model.AnonId)>($r6);

        return $r7;
    }
}
