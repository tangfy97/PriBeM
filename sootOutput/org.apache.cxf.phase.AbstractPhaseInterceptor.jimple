public abstract class org.apache.cxf.phase.AbstractPhaseInterceptor extends java.lang.Object implements org.apache.cxf.phase.PhaseInterceptor
{
    private final java.lang.String id;
    private final java.lang.String phase;
    private final java.util.Set before;
    private final java.util.Set after;

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.apache.cxf.phase.AbstractPhaseInterceptor r0;

        r0 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String,java.lang.String,boolean)>(null, r1, 0);

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.apache.cxf.phase.AbstractPhaseInterceptor r0;

        r0 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String,java.lang.String,boolean)>(r1, r2, 0);

        return;
    }

    public void <init>(java.lang.String, boolean)
    {
        java.lang.String r1;
        org.apache.cxf.phase.AbstractPhaseInterceptor r0;
        boolean z0;

        r0 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String,java.lang.String,boolean)>(null, r1, z0);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, boolean)
    {
        org.apache.cxf.common.util.SortedArraySet $r1, $r2;
        org.apache.cxf.phase.AbstractPhaseInterceptor r0;
        int $i0;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.Class $r7;
        java.lang.String r3, r8;
        boolean z0;

        r0 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        r8 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.cxf.common.util.SortedArraySet;

        specialinvoke $r1.<org.apache.cxf.common.util.SortedArraySet: void <init>()>();

        r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: java.util.Set before> = $r1;

        $r2 = new org.apache.cxf.common.util.SortedArraySet;

        specialinvoke $r2.<org.apache.cxf.common.util.SortedArraySet: void <init>()>();

        r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: java.util.Set after> = $r2;

        if r8 != null goto label1;

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

     label1:
        if z0 == 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: java.lang.String id> = r8;

        r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: java.lang.String phase> = r3;

        return;
    }

    public void setBefore(java.util.Collection)
    {
        java.util.Collection r2;
        java.util.Set $r1, $r3;
        org.apache.cxf.phase.AbstractPhaseInterceptor r0;

        r0 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        r2 := @parameter0: java.util.Collection;

        $r1 = r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: java.util.Set before>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        $r3 = r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: java.util.Set before>;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>(r2);

        return;
    }

    public void setAfter(java.util.Collection)
    {
        java.util.Collection r2;
        java.util.Set $r1, $r3;
        org.apache.cxf.phase.AbstractPhaseInterceptor r0;

        r0 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        r2 := @parameter0: java.util.Collection;

        $r1 = r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: java.util.Set after>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        $r3 = r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: java.util.Set after>;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>(r2);

        return;
    }

    public void addBefore(java.util.Collection)
    {
        java.util.Set $r2;
        org.apache.cxf.phase.AbstractPhaseInterceptor r0;
        java.util.Collection r1;

        r0 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: java.util.Set before>;

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public void addAfter(java.util.Collection)
    {
        java.util.Set $r2;
        org.apache.cxf.phase.AbstractPhaseInterceptor r0;
        java.util.Collection r1;

        r0 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: java.util.Set after>;

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public void addBefore(java.lang.String)
    {
        java.util.Set $r2;
        java.lang.String r1;
        org.apache.cxf.phase.AbstractPhaseInterceptor r0;

        r0 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: java.util.Set before>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addAfter(java.lang.String)
    {
        java.util.Set $r2;
        java.lang.String r1;
        org.apache.cxf.phase.AbstractPhaseInterceptor r0;

        r0 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: java.util.Set after>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public final java.util.Set getAfter()
    {
        java.util.Set $r1;
        org.apache.cxf.phase.AbstractPhaseInterceptor r0;

        r0 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        $r1 = r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: java.util.Set after>;

        return $r1;
    }

    public final java.util.Set getBefore()
    {
        java.util.Set $r1;
        org.apache.cxf.phase.AbstractPhaseInterceptor r0;

        r0 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        $r1 = r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: java.util.Set before>;

        return $r1;
    }

    public java.util.Collection getAdditionalInterceptors()
    {
        org.apache.cxf.phase.AbstractPhaseInterceptor r0;

        r0 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        return null;
    }

    public final java.lang.String getId()
    {
        java.lang.String $r1;
        org.apache.cxf.phase.AbstractPhaseInterceptor r0;

        r0 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        $r1 = r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: java.lang.String id>;

        return $r1;
    }

    public final java.lang.String getPhase()
    {
        java.lang.String $r1;
        org.apache.cxf.phase.AbstractPhaseInterceptor r0;

        r0 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        $r1 = r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: java.lang.String phase>;

        return $r1;
    }

    public void handleFault(org.apache.cxf.message.Message)
    {
        org.apache.cxf.phase.AbstractPhaseInterceptor r0;
        org.apache.cxf.message.Message r1;

        r0 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        r1 := @parameter0: org.apache.cxf.message.Message;

        return;
    }

    public boolean isGET(org.apache.cxf.message.Message)
    {
        org.apache.cxf.message.Message r0;
        org.apache.cxf.phase.AbstractPhaseInterceptor r5;
        java.lang.Object $r1, $r4;
        java.lang.String r2, $r3;
        boolean $z0, $z1;

        r5 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("org.apache.cxf.request.method");

        r2 = (java.lang.String) $r1;

        $r3 = "GET";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r4 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljavax/xml/stream/XMLStreamReader;");

        if $r4 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected boolean isRequestor(org.apache.cxf.message.Message)
    {
        org.apache.cxf.phase.AbstractPhaseInterceptor r1;
        org.apache.cxf.message.Message r0;
        boolean $z0;

        r1 := @this: org.apache.cxf.phase.AbstractPhaseInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $z0 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isRequestor(org.apache.cxf.message.Message)>(r0);

        return $z0;
    }
}
