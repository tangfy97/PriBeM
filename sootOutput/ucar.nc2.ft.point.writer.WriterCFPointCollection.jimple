public class ucar.nc2.ft.point.writer.WriterCFPointCollection extends java.lang.Object
{
    private static final java.lang.String recordDimName;
    private static final java.lang.String latName;
    private static final java.lang.String lonName;
    private static final java.lang.String altName;
    private static final java.lang.String timeName;
    private static final boolean debug;
    private ucar.nc2.units.DateFormatter dateFormatter;
    private ucar.nc2.NetcdfFileWriteable ncfile;
    private java.lang.String title;
    private java.lang.String altUnits;
    private java.util.Set dimSet;
    private java.util.Date minDate;
    private java.util.Date maxDate;
    private int recno;
    private ucar.ma2.ArrayDouble$D1 timeArray;
    private ucar.ma2.ArrayDouble$D1 latArray;
    private ucar.ma2.ArrayDouble$D1 lonArray;
    private ucar.ma2.ArrayDouble$D1 altArray;
    private int[] origin;
    private ucar.unidata.geoloc.LatLonRect llbb;

    public void <init>(java.lang.String, java.lang.String) throws java.io.IOException
    {
        ucar.nc2.ft.point.writer.WriterCFPointCollection r0;
        ucar.nc2.NetcdfFileWriteable $r9, $r10;
        java.util.HashSet $r2;
        ucar.ma2.ArrayDouble$D1 $r3, $r4, $r5, $r6;
        int[] $r7;
        java.lang.String r8, r11;
        ucar.nc2.units.DateFormatter $r1;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFPointCollection;

        r8 := @parameter0: java.lang.String;

        r11 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new ucar.nc2.units.DateFormatter;

        specialinvoke $r1.<ucar.nc2.units.DateFormatter: void <init>()>();

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.units.DateFormatter dateFormatter> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>(int)>(20);

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Set dimSet> = $r2;

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Date minDate> = null;

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Date maxDate> = null;

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: int recno> = 0;

        $r3 = new ucar.ma2.ArrayDouble$D1;

        specialinvoke $r3.<ucar.ma2.ArrayDouble$D1: void <init>(int)>(1);

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.ma2.ArrayDouble$D1 timeArray> = $r3;

        $r4 = new ucar.ma2.ArrayDouble$D1;

        specialinvoke $r4.<ucar.ma2.ArrayDouble$D1: void <init>(int)>(1);

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.ma2.ArrayDouble$D1 latArray> = $r4;

        $r5 = new ucar.ma2.ArrayDouble$D1;

        specialinvoke $r5.<ucar.ma2.ArrayDouble$D1: void <init>(int)>(1);

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.ma2.ArrayDouble$D1 lonArray> = $r5;

        $r6 = new ucar.ma2.ArrayDouble$D1;

        specialinvoke $r6.<ucar.ma2.ArrayDouble$D1: void <init>(int)>(1);

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.ma2.ArrayDouble$D1 altArray> = $r6;

        $r7 = newarray (int)[1];

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: int[] origin> = $r7;

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.unidata.geoloc.LatLonRect llbb> = null;

        $r9 = staticinvoke <ucar.nc2.NetcdfFileWriteable: ucar.nc2.NetcdfFileWriteable createNew(java.lang.String,boolean)>(r8, 0);

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile> = $r9;

        $r10 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r10.<ucar.nc2.NetcdfFileWriteable: void setFill(boolean)>(0);

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.lang.String title> = r11;

        return;
    }

    public void setLength(long)
    {
        ucar.nc2.ft.point.writer.WriterCFPointCollection r0;
        long l0;
        ucar.nc2.NetcdfFileWriteable $r1;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFPointCollection;

        l0 := @parameter0: long;

        $r1 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: void setLength(long)>(l0);

        return;
    }

    public void writeHeader(java.util.List, ucar.nc2.units.DateUnit, java.lang.String) throws java.io.IOException
    {
        java.lang.IllegalStateException $r29;
        ucar.nc2.ft.point.writer.WriterCFPointCollection r0;
        ucar.nc2.NetcdfFileWriteable $r2, $r3, $r5, $r6, $r8, $r12, $r15, $r17, $r19, $r21, $r25, $r26;
        java.lang.Double $r16, $r18, $r20, $r22;
        java.util.Date $r7, $r11;
        java.lang.Boolean $r28;
        java.lang.String r1, $r4, $r10, $r14;
        boolean $z0;
        ucar.nc2.units.DateUnit r23;
        java.util.List r24;
        java.lang.Object $r27;
        ucar.nc2.units.DateFormatter $r9, $r13;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFPointCollection;

        r24 := @parameter0: java.util.List;

        r23 := @parameter1: ucar.nc2.units.DateUnit;

        r1 := @parameter2: java.lang.String;

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.lang.String altUnits> = r1;

        $r2 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r2.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>("Conventions", "CF-1.6");

        $r3 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r3.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>("featureType", "point");

        $r5 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r4 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.lang.String title>;

        virtualinvoke $r5.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>("title", $r4);

        $r6 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r6.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>("desc", "Written by TDS/CDM Remote Feature subset service");

        $r8 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r9 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.units.DateFormatter dateFormatter>;

        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>()>();

        $r10 = virtualinvoke $r9.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r7);

        virtualinvoke $r8.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>("time_coverage_start", $r10);

        $r12 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r13 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.units.DateFormatter dateFormatter>;

        $r11 = new java.util.Date;

        specialinvoke $r11.<java.util.Date: void <init>()>();

        $r14 = virtualinvoke $r13.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r11);

        virtualinvoke $r12.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>("time_coverage_end", $r14);

        $r15 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        virtualinvoke $r15.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.Number)>("geospatial_lat_min", $r16);

        $r17 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        virtualinvoke $r17.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.Number)>("geospatial_lat_max", $r18);

        $r19 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        virtualinvoke $r19.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.Number)>("geospatial_lon_min", $r20);

        $r21 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        virtualinvoke $r21.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.Number)>("geospatial_lon_max", $r22);

        specialinvoke r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: void createCoordinates(ucar.nc2.units.DateUnit)>(r23);

        specialinvoke r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: void createDataVariables(java.util.List)>(r24);

        $r25 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r25.<ucar.nc2.NetcdfFileWriteable: void create()>();

        $r26 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r27 = virtualinvoke $r26.<ucar.nc2.NetcdfFileWriteable: java.lang.Object sendIospMessage(java.lang.Object)>("AddRecordStructure");

        $r28 = (java.lang.Boolean) $r27;

        $z0 = virtualinvoke $r28.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        $r29 = new java.lang.IllegalStateException;

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>("can\'t add record variable");

        throw $r29;

     label1:
        return;
    }

    private void createCoordinates(ucar.nc2.units.DateUnit) throws java.io.IOException
    {
        ucar.nc2.ft.point.writer.WriterCFPointCollection r0;
        ucar.ma2.DataType $r2, $r11, $r18, $r26;
        ucar.nc2.Attribute $r5, $r9, $r14, $r16, $r21, $r23, $r29, $r32;
        ucar.nc2.NetcdfFileWriteable $r1, $r3, $r7, $r10, $r12, $r15, $r17, $r19, $r22, $r24, $r27, $r31, $r33;
        ucar.nc2.Variable $r4, $r13, $r20, $r28;
        java.lang.String $r8, $r25, $r30;
        ucar.nc2.units.DateUnit r6;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFPointCollection;

        r6 := @parameter0: ucar.nc2.units.DateUnit;

        $r1 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Dimension addUnlimitedDimension(java.lang.String)>("record");

        $r3 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        $r4 = virtualinvoke $r3.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addVariable(java.lang.String,ucar.ma2.DataType,java.lang.String)>("time", $r2, "record");

        $r7 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r5 = new ucar.nc2.Attribute;

        $r8 = virtualinvoke r6.<ucar.nc2.units.DateUnit: java.lang.String getUnitsString()>();

        specialinvoke $r5.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", $r8);

        virtualinvoke $r7.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r4, $r5);

        $r10 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r9 = new ucar.nc2.Attribute;

        specialinvoke $r9.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "time of measurement");

        virtualinvoke $r10.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r4, $r9);

        $r12 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r11 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        $r13 = virtualinvoke $r12.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addVariable(java.lang.String,ucar.ma2.DataType,java.lang.String)>("latitude", $r11, "record");

        $r15 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r14 = new ucar.nc2.Attribute;

        specialinvoke $r14.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "degrees_north");

        virtualinvoke $r15.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r13, $r14);

        $r17 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r16 = new ucar.nc2.Attribute;

        specialinvoke $r16.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "station latitude");

        virtualinvoke $r17.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r13, $r16);

        $r19 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r18 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        $r20 = virtualinvoke $r19.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addVariable(java.lang.String,ucar.ma2.DataType,java.lang.String)>("longitude", $r18, "record");

        $r22 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r21 = new ucar.nc2.Attribute;

        specialinvoke $r21.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "degrees_east");

        virtualinvoke $r22.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r20, $r21);

        $r24 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r23 = new ucar.nc2.Attribute;

        specialinvoke $r23.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "station longitude");

        virtualinvoke $r24.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r20, $r23);

        $r25 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.lang.String altUnits>;

        if $r25 == null goto label1;

        $r27 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r26 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        $r28 = virtualinvoke $r27.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addVariable(java.lang.String,ucar.ma2.DataType,java.lang.String)>("altitude", $r26, "record");

        $r31 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r29 = new ucar.nc2.Attribute;

        $r30 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.lang.String altUnits>;

        specialinvoke $r29.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", $r30);

        virtualinvoke $r31.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r28, $r29);

        $r33 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r32 = new ucar.nc2.Attribute;

        specialinvoke $r32.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "altitude");

        virtualinvoke $r33.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r28, $r32);

     label1:
        return;
    }

    private void createDataVariables(java.util.List) throws java.io.IOException
    {
        ucar.nc2.ft.point.writer.WriterCFPointCollection r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Set $r4, $r29;
        ucar.ma2.DataType $r13;
        java.util.List r2, $r8, $r16, $r28;
        ucar.nc2.Attribute $r18, r20;
        ucar.nc2.VariableSimpleIF r35, r37;
        java.lang.StringBuilder $r9, $r22, $r30, $r31, $r32, $r33;
        ucar.nc2.NetcdfFileWriteable $r11, $r25;
        int $i0;
        ucar.nc2.Variable $r15;
        java.lang.String $r1, $r12, $r14, $r23, $r26, r34;
        java.util.Iterator $r3, $r5, $r6, $r10, $r17;
        java.lang.Object $r7, $r19, $r21, $r24, $r27;
        ucar.nc2.Dimension r36, r38;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFPointCollection;

        r2 := @parameter0: java.util.List;

        r34 = "time latitude longitude";

        $r1 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.lang.String altUnits>;

        if $r1 == null goto label01;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("time latitude longitude");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("altitude");

        r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

     label01:
        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z8 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label03;

        $r27 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r35 = (ucar.nc2.VariableSimpleIF) $r27;

        $r28 = interfaceinvoke r35.<ucar.nc2.VariableSimpleIF: java.util.List getDimensions()>();

        $r29 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Set dimSet>;

        interfaceinvoke $r29.<java.util.Set: boolean addAll(java.util.Collection)>($r28);

        goto label02;

     label03:
        $r4 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Set dimSet>;

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r24 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r36 = (ucar.nc2.Dimension) $r24;

        $z5 = virtualinvoke r36.<ucar.nc2.Dimension: boolean isUnlimited()>();

        if $z5 != 0 goto label05;

        $r25 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r26 = virtualinvoke r36.<ucar.nc2.Dimension: java.lang.String getName()>();

        $i0 = virtualinvoke r36.<ucar.nc2.Dimension: int getLength()>();

        $z6 = virtualinvoke r36.<ucar.nc2.Dimension: boolean isShared()>();

        $z7 = virtualinvoke r36.<ucar.nc2.Dimension: boolean isVariableLength()>();

        virtualinvoke $r25.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Dimension addDimension(java.lang.String,int,boolean,boolean,boolean)>($r26, $i0, $z6, 0, $z7);

     label05:
        goto label04;

     label06:
        $r6 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r37 = (ucar.nc2.VariableSimpleIF) $r7;

        $r8 = interfaceinvoke r37.<ucar.nc2.VariableSimpleIF: java.util.List getDimensions()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("record");

        $r10 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r21 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r38 = (ucar.nc2.Dimension) $r21;

        $z4 = virtualinvoke r38.<ucar.nc2.Dimension: boolean isUnlimited()>();

        if $z4 != 0 goto label09;

        $r22 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r23 = virtualinvoke r38.<ucar.nc2.Dimension: java.lang.String getName()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

     label09:
        goto label08;

     label10:
        $r11 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r12 = interfaceinvoke r37.<ucar.nc2.VariableSimpleIF: java.lang.String getShortName()>();

        $r13 = interfaceinvoke r37.<ucar.nc2.VariableSimpleIF: ucar.ma2.DataType getDataType()>();

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = virtualinvoke $r11.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addVariable(java.lang.String,ucar.ma2.DataType,java.lang.String)>($r12, $r13, $r14);

        $r16 = interfaceinvoke r37.<ucar.nc2.VariableSimpleIF: java.util.List getAttributes()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z3 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r19 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r20 = (ucar.nc2.Attribute) $r19;

        virtualinvoke $r15.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>(r20);

        goto label11;

     label12:
        $r18 = new ucar.nc2.Attribute;

        specialinvoke $r18.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("coordinates", r34);

        virtualinvoke $r15.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r18);

        goto label07;

     label13:
        return;
    }

    public void writeRecord(ucar.nc2.ft.PointFeature, ucar.ma2.StructureData) throws java.io.IOException
    {
        ucar.ma2.StructureData r4;
        ucar.nc2.ft.point.writer.WriterCFPointCollection r0;
        ucar.nc2.ft.PointFeature r1;
        ucar.unidata.geoloc.EarthLocation $r3;
        java.util.Date $r2;
        double $d0;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFPointCollection;

        r1 := @parameter0: ucar.nc2.ft.PointFeature;

        r4 := @parameter1: ucar.ma2.StructureData;

        $d0 = interfaceinvoke r1.<ucar.nc2.ft.PointFeature: double getObservationTime()>();

        $r2 = interfaceinvoke r1.<ucar.nc2.ft.PointFeature: java.util.Date getObservationTimeAsDate()>();

        $r3 = interfaceinvoke r1.<ucar.nc2.ft.PointFeature: ucar.unidata.geoloc.EarthLocation getLocation()>();

        virtualinvoke r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: void writeRecord(double,java.util.Date,ucar.unidata.geoloc.EarthLocation,ucar.ma2.StructureData)>($d0, $r2, $r3, r4);

        return;
    }

    public void writeRecord(double, java.util.Date, ucar.unidata.geoloc.EarthLocation, ucar.ma2.StructureData) throws java.io.IOException
    {
        java.lang.IllegalStateException $r28;
        ucar.nc2.ft.point.writer.WriterCFPointCollection r4;
        java.util.Date $r5, r6, $r25, $r26, $r29;
        ucar.ma2.StructureData r1;
        int[] $r3, $r8, $r9, $r12, $r15, $r18, $r22;
        boolean $z0, $z1;
        ucar.ma2.StructureMembers $r2;
        ucar.ma2.ArrayDouble$D1 $r11, $r14, $r17, $r21, $r24, $r30, $r31, $r32;
        ucar.nc2.NetcdfFileWriteable $r10, $r13, $r16, $r19, $r23;
        ucar.ma2.ArrayStructureW $r0;
        int $i0, $i1, $i2;
        java.lang.String $r20, $r33;
        double d0, $d1, $d2, $d3;
        ucar.ma2.InvalidRangeException $r27;
        ucar.unidata.geoloc.EarthLocation r7;

        r4 := @this: ucar.nc2.ft.point.writer.WriterCFPointCollection;

        d0 := @parameter0: double;

        r6 := @parameter1: java.util.Date;

        r7 := @parameter2: ucar.unidata.geoloc.EarthLocation;

        r1 := @parameter3: ucar.ma2.StructureData;

        $r0 = new ucar.ma2.ArrayStructureW;

        $r2 = virtualinvoke r1.<ucar.ma2.StructureData: ucar.ma2.StructureMembers getStructureMembers()>();

        $r3 = newarray (int)[1];

        $r3[0] = 1;

        specialinvoke $r0.<ucar.ma2.ArrayStructureW: void <init>(ucar.ma2.StructureMembers,int[])>($r2, $r3);

        virtualinvoke $r0.<ucar.ma2.ArrayStructureW: void setStructureData(ucar.ma2.StructureData,int)>(r1, 0);

        $r5 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Date minDate>;

        if $r5 == null goto label1;

        $r26 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Date minDate>;

        $z1 = virtualinvoke $r26.<java.util.Date: boolean after(java.util.Date)>(r6);

        if $z1 == 0 goto label2;

     label1:
        r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Date minDate> = r6;

     label2:
        $r29 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Date maxDate>;

        if $r29 == null goto label3;

        $r25 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Date maxDate>;

        $z0 = virtualinvoke $r25.<java.util.Date: boolean before(java.util.Date)>(r6);

        if $z0 == 0 goto label4;

     label3:
        r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Date maxDate> = r6;

     label4:
        $r30 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.ma2.ArrayDouble$D1 timeArray>;

        virtualinvoke $r30.<ucar.ma2.ArrayDouble$D1: void set(int,double)>(0, d0);

        $r31 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.ma2.ArrayDouble$D1 latArray>;

        $d2 = interfaceinvoke r7.<ucar.unidata.geoloc.EarthLocation: double getLatitude()>();

        virtualinvoke $r31.<ucar.ma2.ArrayDouble$D1: void set(int,double)>(0, $d2);

        $r32 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.ma2.ArrayDouble$D1 lonArray>;

        $d3 = interfaceinvoke r7.<ucar.unidata.geoloc.EarthLocation: double getLongitude()>();

        virtualinvoke $r32.<ucar.ma2.ArrayDouble$D1: void set(int,double)>(0, $d3);

        $r33 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.lang.String altUnits>;

        if $r33 == null goto label5;

        $r24 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.ma2.ArrayDouble$D1 altArray>;

        $d1 = interfaceinvoke r7.<ucar.unidata.geoloc.EarthLocation: double getAltitude()>();

        virtualinvoke $r24.<ucar.ma2.ArrayDouble$D1: void set(int,double)>(0, $d1);

     label5:
        specialinvoke r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: void trackBB(ucar.unidata.geoloc.EarthLocation)>(r7);

        $r8 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: int[] origin>;

        $i0 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: int recno>;

        $r8[0] = $i0;

     label6:
        $r10 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r9 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: int[] origin>;

        virtualinvoke $r10.<ucar.nc2.NetcdfFileWriteable: void write(java.lang.String,int[],ucar.ma2.Array)>("record", $r9, $r0);

        $r13 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r12 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: int[] origin>;

        $r11 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.ma2.ArrayDouble$D1 timeArray>;

        virtualinvoke $r13.<ucar.nc2.NetcdfFileWriteable: void write(java.lang.String,int[],ucar.ma2.Array)>("time", $r12, $r11);

        $r16 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r15 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: int[] origin>;

        $r14 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.ma2.ArrayDouble$D1 latArray>;

        virtualinvoke $r16.<ucar.nc2.NetcdfFileWriteable: void write(java.lang.String,int[],ucar.ma2.Array)>("latitude", $r15, $r14);

        $r19 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r18 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: int[] origin>;

        $r17 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.ma2.ArrayDouble$D1 lonArray>;

        virtualinvoke $r19.<ucar.nc2.NetcdfFileWriteable: void write(java.lang.String,int[],ucar.ma2.Array)>("longitude", $r18, $r17);

        $r20 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.lang.String altUnits>;

        if $r20 == null goto label7;

        $r23 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r22 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: int[] origin>;

        $r21 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.ma2.ArrayDouble$D1 altArray>;

        virtualinvoke $r23.<ucar.nc2.NetcdfFileWriteable: void write(java.lang.String,int[],ucar.ma2.Array)>("altitude", $r22, $r21);

     label7:
        goto label9;

     label8:
        $r27 := @caughtexception;

        virtualinvoke $r27.<ucar.ma2.InvalidRangeException: void printStackTrace()>();

        $r28 = new java.lang.IllegalStateException;

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r27);

        throw $r28;

     label9:
        $i1 = r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: int recno>;

        $i2 = $i1 + 1;

        r4.<ucar.nc2.ft.point.writer.WriterCFPointCollection: int recno> = $i2;

        return;

        catch ucar.ma2.InvalidRangeException from label6 to label7 with label8;
    }

    public void finish() throws java.io.IOException
    {
        ucar.nc2.ft.point.writer.WriterCFPointCollection r0;
        java.util.Date $r21, $r22, $r24, $r29, $r34, $r35;
        ucar.nc2.Attribute $r1, $r6, $r11, $r16, $r23, $r28;
        ucar.nc2.units.DateFormatter $r25, $r30;
        ucar.nc2.NetcdfFileWriteable $r3, $r8, $r13, $r18, $r26, $r31, $r33;
        java.lang.Double $r5, $r10, $r15, $r20;
        java.lang.String $r27, $r32;
        double $d0, $d1, $d2, $d3;
        ucar.unidata.geoloc.LatLonRect $r2, $r7, $r12, $r17;
        ucar.unidata.geoloc.LatLonPointImpl $r4, $r9, $r14, $r19;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFPointCollection;

        $r3 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r1 = new ucar.nc2.Attribute;

        $r2 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.unidata.geoloc.LatLonRect llbb>;

        $r4 = virtualinvoke $r2.<ucar.unidata.geoloc.LatLonRect: ucar.unidata.geoloc.LatLonPointImpl getLowerLeftPoint()>();

        $d0 = virtualinvoke $r4.<ucar.unidata.geoloc.LatLonPointImpl: double getLatitude()>();

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r1.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("geospatial_lat_min", $r5);

        virtualinvoke $r3.<ucar.nc2.NetcdfFileWriteable: void updateAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>(null, $r1);

        $r8 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r6 = new ucar.nc2.Attribute;

        $r7 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.unidata.geoloc.LatLonRect llbb>;

        $r9 = virtualinvoke $r7.<ucar.unidata.geoloc.LatLonRect: ucar.unidata.geoloc.LatLonPointImpl getUpperRightPoint()>();

        $d1 = virtualinvoke $r9.<ucar.unidata.geoloc.LatLonPointImpl: double getLatitude()>();

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r6.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("geospatial_lat_max", $r10);

        virtualinvoke $r8.<ucar.nc2.NetcdfFileWriteable: void updateAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>(null, $r6);

        $r13 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r11 = new ucar.nc2.Attribute;

        $r12 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.unidata.geoloc.LatLonRect llbb>;

        $r14 = virtualinvoke $r12.<ucar.unidata.geoloc.LatLonRect: ucar.unidata.geoloc.LatLonPointImpl getLowerLeftPoint()>();

        $d2 = virtualinvoke $r14.<ucar.unidata.geoloc.LatLonPointImpl: double getLongitude()>();

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        specialinvoke $r11.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("geospatial_lon_min", $r15);

        virtualinvoke $r13.<ucar.nc2.NetcdfFileWriteable: void updateAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>(null, $r11);

        $r18 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r16 = new ucar.nc2.Attribute;

        $r17 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.unidata.geoloc.LatLonRect llbb>;

        $r19 = virtualinvoke $r17.<ucar.unidata.geoloc.LatLonRect: ucar.unidata.geoloc.LatLonPointImpl getUpperRightPoint()>();

        $d3 = virtualinvoke $r19.<ucar.unidata.geoloc.LatLonPointImpl: double getLongitude()>();

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        specialinvoke $r16.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("geospatial_lon_max", $r20);

        virtualinvoke $r18.<ucar.nc2.NetcdfFileWriteable: void updateAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>(null, $r16);

        $r21 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Date minDate>;

        if $r21 != null goto label1;

        $r35 = new java.util.Date;

        specialinvoke $r35.<java.util.Date: void <init>()>();

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Date minDate> = $r35;

     label1:
        $r22 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Date maxDate>;

        if $r22 != null goto label2;

        $r34 = new java.util.Date;

        specialinvoke $r34.<java.util.Date: void <init>()>();

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Date maxDate> = $r34;

     label2:
        $r26 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r23 = new ucar.nc2.Attribute;

        $r25 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.units.DateFormatter dateFormatter>;

        $r24 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Date minDate>;

        $r27 = virtualinvoke $r25.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r24);

        specialinvoke $r23.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("time_coverage_start", $r27);

        virtualinvoke $r26.<ucar.nc2.NetcdfFileWriteable: void updateAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>(null, $r23);

        $r31 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r28 = new ucar.nc2.Attribute;

        $r30 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.units.DateFormatter dateFormatter>;

        $r29 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: java.util.Date maxDate>;

        $r32 = virtualinvoke $r30.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r29);

        specialinvoke $r28.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("time_coverage_end", $r32);

        virtualinvoke $r31.<ucar.nc2.NetcdfFileWriteable: void updateAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>(null, $r28);

        $r33 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r33.<ucar.nc2.NetcdfFileWriteable: void close()>();

        return;
    }

    private void trackBB(ucar.unidata.geoloc.EarthLocation)
    {
        ucar.unidata.geoloc.LatLonRect $r1, $r3, $r5;
        ucar.unidata.geoloc.LatLonPoint $r4, $r6;
        ucar.nc2.ft.point.writer.WriterCFPointCollection r0;
        ucar.unidata.geoloc.EarthLocation r2;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFPointCollection;

        r2 := @parameter0: ucar.unidata.geoloc.EarthLocation;

        $r1 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.unidata.geoloc.LatLonRect llbb>;

        if $r1 != null goto label1;

        $r5 = new ucar.unidata.geoloc.LatLonRect;

        $r6 = interfaceinvoke r2.<ucar.unidata.geoloc.EarthLocation: ucar.unidata.geoloc.LatLonPoint getLatLon()>();

        specialinvoke $r5.<ucar.unidata.geoloc.LatLonRect: void <init>(ucar.unidata.geoloc.LatLonPoint,double,double)>($r6, 0.001, 0.001);

        r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.unidata.geoloc.LatLonRect llbb> = $r5;

        return;

     label1:
        $r3 = r0.<ucar.nc2.ft.point.writer.WriterCFPointCollection: ucar.unidata.geoloc.LatLonRect llbb>;

        $r4 = interfaceinvoke r2.<ucar.unidata.geoloc.EarthLocation: ucar.unidata.geoloc.LatLonPoint getLatLon()>();

        virtualinvoke $r3.<ucar.unidata.geoloc.LatLonRect: void extend(ucar.unidata.geoloc.LatLonPoint)>($r4);

        return;
    }

    public static void <clinit>()
    {
        <ucar.nc2.ft.point.writer.WriterCFPointCollection: boolean debug> = 0;

        <ucar.nc2.ft.point.writer.WriterCFPointCollection: java.lang.String timeName> = "time";

        <ucar.nc2.ft.point.writer.WriterCFPointCollection: java.lang.String altName> = "altitude";

        <ucar.nc2.ft.point.writer.WriterCFPointCollection: java.lang.String lonName> = "longitude";

        <ucar.nc2.ft.point.writer.WriterCFPointCollection: java.lang.String latName> = "latitude";

        <ucar.nc2.ft.point.writer.WriterCFPointCollection: java.lang.String recordDimName> = "record";

        return;
    }
}
