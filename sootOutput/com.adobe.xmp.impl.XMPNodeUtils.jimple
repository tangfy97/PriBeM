public class com.adobe.xmp.impl.XMPNodeUtils extends java.lang.Object implements com.adobe.xmp.XMPConst
{
    static final int CLT_NO_VALUES;
    static final int CLT_SPECIFIC_MATCH;
    static final int CLT_SINGLE_GENERIC;
    static final int CLT_MULTIPLE_GENERIC;
    static final int CLT_XDEFAULT;
    static final int CLT_FIRST_ITEM;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        com.adobe.xmp.impl.XMPNodeUtils r0;

        r0 := @this: com.adobe.xmp.impl.XMPNodeUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode, java.lang.String, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r0, $r2;
        java.lang.String r1;
        boolean z0;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r2 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String,boolean)>(r0, r1, null, z0);

        return $r2;
    }

    static com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode, java.lang.String, java.lang.String, boolean) throws com.adobe.xmp.XMPException
    {
        java.lang.AssertionError $r12;
        com.adobe.xmp.XMPSchemaRegistry $r6, $r10;
        com.adobe.xmp.XMPException $r9;
        int $i0;
        java.lang.String r1, $r7, r8, r14;
        boolean $z0, z1;
        com.adobe.xmp.options.PropertyOptions $r4, $r5;
        com.adobe.xmp.impl.XMPNode r0, $r2, $r3, $r11, r13;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        z1 := @parameter3: boolean;

        $z0 = <com.adobe.xmp.impl.XMPNodeUtils: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r11 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        if $r11 == null goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode findChildByName(java.lang.String)>(r1);

        r13 = $r2;

        if $r2 != null goto label4;

        if z1 == 0 goto label4;

        $r3 = new com.adobe.xmp.impl.XMPNode;

        $r4 = new com.adobe.xmp.options.PropertyOptions;

        specialinvoke $r4.<com.adobe.xmp.options.PropertyOptions: void <init>()>();

        $r5 = virtualinvoke $r4.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setSchemaNode(boolean)>(1);

        specialinvoke $r3.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,com.adobe.xmp.options.PropertyOptions)>(r1, $r5);

        r13 = $r3;

        virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: void setImplicit(boolean)>(1);

        $r6 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()>();

        $r7 = interfaceinvoke $r6.<com.adobe.xmp.XMPSchemaRegistry: java.lang.String getNamespacePrefix(java.lang.String)>(r1);

        r14 = $r7;

        if $r7 != null goto label3;

        if r8 == null goto label2;

        $i0 = virtualinvoke r8.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        $r10 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()>();

        r14 = interfaceinvoke $r10.<com.adobe.xmp.XMPSchemaRegistry: java.lang.String registerNamespace(java.lang.String,java.lang.String)>(r1, r8);

        goto label3;

     label2:
        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Unregistered schema namespace URI", 101);

        throw $r9;

     label3:
        virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>(r14);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>($r3);

     label4:
        return r13;
    }

    static com.adobe.xmp.impl.XMPNode findChildNode(com.adobe.xmp.impl.XMPNode, java.lang.String, boolean) throws com.adobe.xmp.XMPException
    {
        java.lang.AssertionError $r3;
        com.adobe.xmp.XMPException $r9, $r10;
        java.lang.String r2;
        boolean $z0, z1, $z2, $z3, $z4, $z5;
        com.adobe.xmp.options.PropertyOptions $r1, $r4, $r6, $r7, $r8;
        com.adobe.xmp.impl.XMPNode r0, $r5, $r11, r12;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: boolean isSchemaNode()>();

        if $z0 != 0 goto label3;

        $r6 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r6.<com.adobe.xmp.options.PropertyOptions: boolean isStruct()>();

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean isImplicit()>();

        if $z3 != 0 goto label1;

        $r10 = new com.adobe.xmp.XMPException;

        specialinvoke $r10.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Named children only allowed for schemas and structs", 102);

        throw $r10;

     label1:
        $r7 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z4 = virtualinvoke $r7.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z4 == 0 goto label2;

        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Named children not allowed for arrays", 102);

        throw $r9;

     label2:
        if z1 == 0 goto label3;

        $r8 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r8.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setStruct(boolean)>(1);

     label3:
        $r11 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode findChildByName(java.lang.String)>(r2);

        r12 = $r11;

        if $r11 != null goto label4;

        if z1 == 0 goto label4;

        $r4 = new com.adobe.xmp.options.PropertyOptions;

        specialinvoke $r4.<com.adobe.xmp.options.PropertyOptions: void <init>()>();

        $r5 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r5.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,com.adobe.xmp.options.PropertyOptions)>(r2, $r4);

        r12 = $r5;

        virtualinvoke $r5.<com.adobe.xmp.impl.XMPNode: void setImplicit(boolean)>(1);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>($r5);

     label4:
        $z5 = <com.adobe.xmp.impl.XMPNodeUtils: boolean $assertionsDisabled>;

        if $z5 != 0 goto label5;

        if r12 != null goto label5;

        if z1 == 0 goto label5;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label5:
        return r12;
    }

    static com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode, com.adobe.xmp.impl.xpath.XMPPath, boolean, com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.xpath.XMPPathSegment $r3, $r9, $r11, $r14, $r15, $r17;
        boolean z0, $z1, $z2, $z3, $z4;
        com.adobe.xmp.impl.xpath.XMPPath r0;
        com.adobe.xmp.options.PropertyOptions $r6, r7, $r8, $r12, $r13, $r16;
        com.adobe.xmp.XMPException $r1, $r18;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7;
        java.lang.String $r4;
        com.adobe.xmp.impl.XMPNode r2, $r5, $r10, r19, r20;

        r2 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r0 := @parameter1: com.adobe.xmp.impl.xpath.XMPPath;

        z0 := @parameter2: boolean;

        r7 := @parameter3: com.adobe.xmp.options.PropertyOptions;

        if r0 == null goto label01;

        $i0 = virtualinvoke r0.<com.adobe.xmp.impl.xpath.XMPPath: int size()>();

        if $i0 != 0 goto label02;

     label01:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty XMPPath", 102);

        throw $r1;

     label02:
        r19 = null;

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(0);

        $r4 = virtualinvoke $r3.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $r5 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r2, $r4, z0);

        r20 = $r5;

        if $r5 != null goto label03;

        return null;

     label03:
        $z1 = virtualinvoke $r5.<com.adobe.xmp.impl.XMPNode: boolean isImplicit()>();

        if $z1 == 0 goto label04;

        virtualinvoke $r5.<com.adobe.xmp.impl.XMPNode: void setImplicit(boolean)>(0);

        r19 = $r5;

     label04:
        i4 = 1;

     label05:
        $i5 = virtualinvoke r0.<com.adobe.xmp.impl.xpath.XMPPath: int size()>();

        if i4 >= $i5 goto label11;

        $r9 = virtualinvoke r0.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(i4);

        $r10 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode followXPathStep(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPathSegment,boolean)>(r20, $r9, z0);

        r20 = $r10;

        if $r10 != null goto label07;

        if z0 == 0 goto label06;

        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void deleteNode(com.adobe.xmp.impl.XMPNode)>(r19);

     label06:
        return null;

     label07:
        $z2 = virtualinvoke $r10.<com.adobe.xmp.impl.XMPNode: boolean isImplicit()>();

        if $z2 == 0 goto label10;

        virtualinvoke $r10.<com.adobe.xmp.impl.XMPNode: void setImplicit(boolean)>(0);

        if i4 != 1 goto label08;

        $r14 = virtualinvoke r0.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(i4);

        $z4 = virtualinvoke $r14.<com.adobe.xmp.impl.xpath.XMPPathSegment: boolean isAlias()>();

        if $z4 == 0 goto label08;

        $r15 = virtualinvoke r0.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(i4);

        $i2 = virtualinvoke $r15.<com.adobe.xmp.impl.xpath.XMPPathSegment: int getAliasForm()>();

        if $i2 == 0 goto label08;

        $r16 = virtualinvoke $r10.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $r17 = virtualinvoke r0.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(i4);

        $i3 = virtualinvoke $r17.<com.adobe.xmp.impl.xpath.XMPPathSegment: int getAliasForm()>();

        virtualinvoke $r16.<com.adobe.xmp.options.PropertyOptions: void setOption(int,boolean)>($i3, 1);

        goto label09;

     label08:
        $i6 = virtualinvoke r0.<com.adobe.xmp.impl.xpath.XMPPath: int size()>();

        $i7 = $i6 - 1;

        if i4 >= $i7 goto label09;

        $r11 = virtualinvoke r0.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(i4);

        $i1 = virtualinvoke $r11.<com.adobe.xmp.impl.xpath.XMPPathSegment: int getKind()>();

        if $i1 != 1 goto label09;

        $r12 = virtualinvoke $r10.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z3 = virtualinvoke $r12.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z3 != 0 goto label09;

        $r13 = virtualinvoke $r10.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r13.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setStruct(boolean)>(1);

     label09:
        if r19 != null goto label10;

        r19 = $r10;

     label10:
        i4 = i4 + 1;

        goto label05;

     label11:
        goto label14;

     label12:
        $r18 := @caughtexception;

        if r19 == null goto label13;

        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void deleteNode(com.adobe.xmp.impl.XMPNode)>(r19);

     label13:
        throw $r18;

     label14:
        if r19 == null goto label15;

        $r6 = virtualinvoke r20.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r6.<com.adobe.xmp.options.PropertyOptions: void mergeWith(com.adobe.xmp.options.PropertyOptions)>(r7);

        $r8 = virtualinvoke r20.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke r20.<com.adobe.xmp.impl.XMPNode: void setOptions(com.adobe.xmp.options.PropertyOptions)>($r8);

     label15:
        return r20;

        catch com.adobe.xmp.XMPException from label04 to label06 with label12;
        catch com.adobe.xmp.XMPException from label07 to label11 with label12;
    }

    static void deleteNode(com.adobe.xmp.impl.XMPNode)
    {
        com.adobe.xmp.options.PropertyOptions $r2, $r3;
        com.adobe.xmp.impl.XMPNode r0, $r1, $r4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r2.<com.adobe.xmp.options.PropertyOptions: boolean isQualifier()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: void removeQualifier(com.adobe.xmp.impl.XMPNode)>(r0);

        goto label2;

     label1:
        virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>(r0);

     label2:
        $z1 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z1 != 0 goto label3;

        $r3 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r3.<com.adobe.xmp.options.PropertyOptions: boolean isSchemaNode()>();

        if $z2 == 0 goto label3;

        $r4 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        virtualinvoke $r4.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>($r1);

     label3:
        return;
    }

    static void setNodeValue(com.adobe.xmp.impl.XMPNode, java.lang.Object)
    {
        com.adobe.xmp.options.PropertyOptions $r3;
        com.adobe.xmp.impl.XMPNode r2;
        java.lang.Object r0;
        java.lang.String $r1, $r4, $r5, $r6;
        boolean $z0, $z1;

        r2 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r0 := @parameter1: java.lang.Object;

        $r1 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: java.lang.String serializeNodeValue(java.lang.Object)>(r0);

        $r3 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r3.<com.adobe.xmp.options.PropertyOptions: boolean isQualifier()>();

        if $z0 == 0 goto label1;

        $r4 = "xml:lang";

        $r5 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label2;

     label1:
        virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>($r1);

        goto label3;

     label2:
        $r6 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String normalizeLangValue(java.lang.String)>($r1);

        virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>($r6);

     label3:
        return;
    }

    static com.adobe.xmp.options.PropertyOptions verifySetOptions(com.adobe.xmp.options.PropertyOptions, java.lang.Object) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.options.PropertyOptions $r3, r4;
        com.adobe.xmp.XMPException $r2;
        int $i0, $i1;
        java.lang.Object r0;
        java.lang.String $r1;
        boolean $z0, $z1, $z2, $z3;

        r4 := @parameter0: com.adobe.xmp.options.PropertyOptions;

        r0 := @parameter1: java.lang.Object;

        if r4 != null goto label1;

        $r3 = new com.adobe.xmp.options.PropertyOptions;

        specialinvoke $r3.<com.adobe.xmp.options.PropertyOptions: void <init>()>();

        r4 = $r3;

     label1:
        $z0 = virtualinvoke r4.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z0 == 0 goto label2;

        virtualinvoke r4.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayAlternate(boolean)>(1);

     label2:
        $z1 = virtualinvoke r4.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAlternate()>();

        if $z1 == 0 goto label3;

        virtualinvoke r4.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayOrdered(boolean)>(1);

     label3:
        $z2 = virtualinvoke r4.<com.adobe.xmp.options.PropertyOptions: boolean isArrayOrdered()>();

        if $z2 == 0 goto label4;

        virtualinvoke r4.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArray(boolean)>(1);

     label4:
        $z3 = virtualinvoke r4.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z3 == 0 goto label5;

        if r0 == null goto label5;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label5;

        $r2 = new com.adobe.xmp.XMPException;

        specialinvoke $r2.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Structs and arrays can\'t have values", 103);

        throw $r2;

     label5:
        $i1 = virtualinvoke r4.<com.adobe.xmp.options.PropertyOptions: int getOptions()>();

        virtualinvoke r4.<com.adobe.xmp.options.PropertyOptions: void assertConsistency(int)>($i1);

        return r4;
    }

    static java.lang.String serializeNodeValue(java.lang.Object)
    {
        byte[] $r1, $r2;
        com.adobe.xmp.XMPDateTime $r4, $r5;
        java.lang.Double $r6;
        long $l0;
        java.lang.Integer $r8;
        java.lang.Long $r7;
        int $i1;
        java.lang.Boolean $r9;
        java.lang.String r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        double $d0;
        java.util.GregorianCalendar $r3;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        r10 = null;

        goto label09;

     label01:
        $z0 = r0 instanceof java.lang.Boolean;

        if $z0 == 0 goto label02;

        $r9 = (java.lang.Boolean) r0;

        $z7 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        r10 = staticinvoke <com.adobe.xmp.XMPUtils: java.lang.String convertFromBoolean(boolean)>($z7);

        goto label09;

     label02:
        $z1 = r0 instanceof java.lang.Integer;

        if $z1 == 0 goto label03;

        $r8 = (java.lang.Integer) r0;

        $i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        r10 = staticinvoke <com.adobe.xmp.XMPUtils: java.lang.String convertFromInteger(int)>($i1);

        goto label09;

     label03:
        $z2 = r0 instanceof java.lang.Long;

        if $z2 == 0 goto label04;

        $r7 = (java.lang.Long) r0;

        $l0 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        r10 = staticinvoke <com.adobe.xmp.XMPUtils: java.lang.String convertFromLong(long)>($l0);

        goto label09;

     label04:
        $z3 = r0 instanceof java.lang.Double;

        if $z3 == 0 goto label05;

        $r6 = (java.lang.Double) r0;

        $d0 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        r10 = staticinvoke <com.adobe.xmp.XMPUtils: java.lang.String convertFromDouble(double)>($d0);

        goto label09;

     label05:
        $z4 = r0 instanceof com.adobe.xmp.XMPDateTime;

        if $z4 == 0 goto label06;

        $r5 = (com.adobe.xmp.XMPDateTime) r0;

        r10 = staticinvoke <com.adobe.xmp.XMPUtils: java.lang.String convertFromDate(com.adobe.xmp.XMPDateTime)>($r5);

        goto label09;

     label06:
        $z5 = r0 instanceof java.util.GregorianCalendar;

        if $z5 == 0 goto label07;

        $r3 = (java.util.GregorianCalendar) r0;

        $r4 = staticinvoke <com.adobe.xmp.XMPDateTimeFactory: com.adobe.xmp.XMPDateTime createFromCalendar(java.util.Calendar)>($r3);

        r10 = staticinvoke <com.adobe.xmp.XMPUtils: java.lang.String convertFromDate(com.adobe.xmp.XMPDateTime)>($r4);

        goto label09;

     label07:
        $z6 = r0 instanceof byte[];

        if $z6 == 0 goto label08;

        $r1 = (byte[]) r0;

        $r2 = (byte[]) $r1;

        r10 = staticinvoke <com.adobe.xmp.XMPUtils: java.lang.String encodeBase64(byte[])>($r2);

        goto label09;

     label08:
        r10 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label09:
        if r10 == null goto label10;

        $r11 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String removeControlChars(java.lang.String)>(r10);

        goto label11;

     label10:
        $r11 = null;

     label11:
        return $r11;
    }

    private static com.adobe.xmp.impl.XMPNode followXPathStep(com.adobe.xmp.impl.XMPNode, com.adobe.xmp.impl.xpath.XMPPathSegment, boolean) throws com.adobe.xmp.XMPException
    {
        java.lang.String[] $r5, $r7;
        com.adobe.xmp.impl.xpath.XMPPathSegment r0;
        com.adobe.xmp.XMPException $r3, $r9;
        int $i0, $i1, $i2, i3;
        java.lang.String $r4, $r6, $r8, $r10, $r11, $r12, r14, r15, r16, r17;
        boolean $z0, z1;
        com.adobe.xmp.options.PropertyOptions $r2;
        com.adobe.xmp.impl.XMPNode r1, r13;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r0 := @parameter1: com.adobe.xmp.impl.xpath.XMPPathSegment;

        z1 := @parameter2: boolean;

        r13 = null;

        $i0 = virtualinvoke r0.<com.adobe.xmp.impl.xpath.XMPPathSegment: int getKind()>();

        if $i0 != 1 goto label1;

        $r12 = virtualinvoke r0.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        r13 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findChildNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r1, $r12, z1);

        goto label9;

     label1:
        if $i0 != 2 goto label2;

        $r10 = virtualinvoke r0.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int)>(1);

        r13 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findQualifierNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r1, $r11, z1);

        goto label9;

     label2:
        $r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r2.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z0 != 0 goto label3;

        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Indexing applied to non-array", 102);

        throw $r9;

     label3:
        if $i0 != 3 goto label4;

        $r8 = virtualinvoke r0.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        i3 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: int findIndexedItem(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r1, $r8, z1);

        goto label8;

     label4:
        if $i0 != 4 goto label5;

        i3 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        goto label8;

     label5:
        if $i0 != 6 goto label6;

        $r6 = virtualinvoke r0.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $r7 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String[] splitNameAndValue(java.lang.String)>($r6);

        r14 = $r7[0];

        r15 = $r7[1];

        i3 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: int lookupFieldSelector(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>(r1, r14, r15);

        goto label8;

     label6:
        if $i0 != 5 goto label7;

        $r4 = virtualinvoke r0.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $r5 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String[] splitNameAndValue(java.lang.String)>($r4);

        r16 = $r5[0];

        r17 = $r5[1];

        $i1 = virtualinvoke r0.<com.adobe.xmp.impl.xpath.XMPPathSegment: int getAliasForm()>();

        i3 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: int lookupQualSelector(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String,int)>(r1, r16, r17, $i1);

        goto label8;

     label7:
        $r3 = new com.adobe.xmp.XMPException;

        specialinvoke $r3.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Unknown array indexing step in FollowXPathStep", 9);

        throw $r3;

     label8:
        if 1 > i3 goto label9;

        $i2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if i3 > $i2 goto label9;

        r13 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i3);

     label9:
        return r13;
    }

    private static com.adobe.xmp.impl.XMPNode findQualifierNode(com.adobe.xmp.impl.XMPNode, java.lang.String, boolean) throws com.adobe.xmp.XMPException
    {
        java.lang.AssertionError $r4;
        com.adobe.xmp.impl.XMPNode r0, $r2, $r3, r5;
        java.lang.String r1;
        boolean $z0, z1, $z2;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        $z0 = <com.adobe.xmp.impl.XMPNodeUtils: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("?");

        if $z2 == 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode findQualifierByName(java.lang.String)>(r1);

        r5 = $r2;

        if $r2 != null goto label2;

        if z1 == 0 goto label2;

        $r3 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r3.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,com.adobe.xmp.options.PropertyOptions)>(r1, null);

        r5 = $r3;

        virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: void setImplicit(boolean)>(1);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addQualifier(com.adobe.xmp.impl.XMPNode)>($r3);

     label2:
        return r5;
    }

    private static int findIndexedItem(com.adobe.xmp.impl.XMPNode, java.lang.String, boolean) throws com.adobe.xmp.XMPException
    {
        java.lang.NumberFormatException $r4;
        com.adobe.xmp.impl.XMPNode r1, $r2;
        com.adobe.xmp.XMPException $r3, $r5;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r0, r6;
        boolean z0;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r6 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

     label1:
        $i0 = virtualinvoke r6.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r0 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

        if $i2 >= 1 goto label2;

        $r3 = new com.adobe.xmp.XMPException;

        specialinvoke $r3.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Array index must be larger than zero", 102);

        throw $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new com.adobe.xmp.XMPException;

        specialinvoke $r5.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Array index not digits.", 102);

        throw $r5;

     label4:
        if z0 == 0 goto label5;

        $i3 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        $i4 = $i3 + 1;

        if $i2 != $i4 goto label5;

        $r2 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r2.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,com.adobe.xmp.options.PropertyOptions)>("[]", null);

        virtualinvoke $r2.<com.adobe.xmp.impl.XMPNode: void setImplicit(boolean)>(1);

        virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>($r2);

     label5:
        return $i2;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private static int lookupFieldSelector(com.adobe.xmp.impl.XMPNode, java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPException $r9;
        int $i0, $i1, i2, i3, i4, $i6;
        java.lang.String r4, $r5, r6, $r7;
        boolean $z0, $z1, $z2;
        com.adobe.xmp.options.PropertyOptions $r2;
        com.adobe.xmp.impl.XMPNode r0, $r1, $r3;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r4 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        $i6 = (int) -1;

        i2 = $i6;

        i3 = 1;

     label1:
        $i0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if i3 > $i0 goto label7;

        if i2 >= 0 goto label7;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i3);

        $r2 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r2.<com.adobe.xmp.options.PropertyOptions: boolean isStruct()>();

        if $z0 != 0 goto label2;

        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Field selector must be used on array of struct", 102);

        throw $r9;

     label2:
        i4 = 1;

     label3:
        $i1 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if i4 > $i1 goto label6;

        $r3 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i4);

        $r5 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label4;

        goto label5;

     label4:
        $r7 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label5;

        i2 = i3;

        goto label6;

     label5:
        i4 = i4 + 1;

        goto label3;

     label6:
        i3 = i3 + 1;

        goto label1;

     label7:
        return i2;
    }

    private static int lookupQualSelector(com.adobe.xmp.impl.XMPNode, java.lang.String, java.lang.String, int) throws com.adobe.xmp.XMPException
    {
        int $i0, $i1, i2, $i3, i4, $i6;
        java.lang.String r0, $r1, $r7, $r8, $r9, r12;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r4;
        com.adobe.xmp.impl.XMPNode r2, $r3, r6, $r13, $r14;
        java.lang.Object $r5;

        r2 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r0 := @parameter1: java.lang.String;

        r12 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        $r1 = "xml:lang";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r9 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String normalizeLangValue(java.lang.String)>(r12);

        $i1 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: int lookupLanguageItem(com.adobe.xmp.impl.XMPNode,java.lang.String)>(r2, $r9);

        if $i1 >= 0 goto label1;

        $i3 = i2 & 4096;

        if $i3 <= 0 goto label1;

        $r13 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r13.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,com.adobe.xmp.options.PropertyOptions)>("[]", null);

        $r14 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r14.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>("xml:lang", "x-default", null);

        virtualinvoke $r13.<com.adobe.xmp.impl.XMPNode: void addQualifier(com.adobe.xmp.impl.XMPNode)>($r14);

        virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: void addChild(int,com.adobe.xmp.impl.XMPNode)>(1, $r13);

        return 1;

     label1:
        return $i1;

     label2:
        i4 = 1;

     label3:
        $i0 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if i4 >= $i0 goto label7;

        $r3 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i4);

        $r4 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateQualifier()>();

     label4:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.adobe.xmp.impl.XMPNode) $r5;

        $r7 = virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label5;

        $r8 = virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z3 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label5;

        return i4;

     label5:
        goto label4;

     label6:
        i4 = i4 + 1;

        goto label3;

     label7:
        $i6 = (int) -1;

        return $i6;
    }

    static void normalizeLangArray(com.adobe.xmp.impl.XMPNode)
    {
        java.lang.AssertionError $r9;
        com.adobe.xmp.XMPException $r8;
        int $i0, i1;
        java.lang.String $r3, $r5, $r7;
        boolean $z0, $z1, $z2, $z3;
        com.adobe.xmp.options.PropertyOptions $r1;
        com.adobe.xmp.impl.XMPNode r0, $r2, $r4, $r6;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        i1 = 2;

     label2:
        $i0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if i1 > $i0 goto label8;

        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i1);

        $z1 = virtualinvoke $r2.<com.adobe.xmp.impl.XMPNode: boolean hasQualifier()>();

        if $z1 == 0 goto label7;

        $r3 = "x-default";

        $r4 = virtualinvoke $r2.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r5 = virtualinvoke $r4.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label7;

     label3:
        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void removeChild(int)>(i1);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addChild(int,com.adobe.xmp.impl.XMPNode)>(1, $r2);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $z3 = <com.adobe.xmp.impl.XMPNodeUtils: boolean $assertionsDisabled>;

        if $z3 != 0 goto label6;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label6:
        if i1 != 2 goto label8;

        $r6 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(2);

        $r7 = virtualinvoke $r2.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        virtualinvoke $r6.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>($r7);

        goto label8;

     label7:
        i1 = i1 + 1;

        goto label2;

     label8:
        return;

        catch com.adobe.xmp.XMPException from label3 to label4 with label5;
    }

    static void detectAltText(com.adobe.xmp.impl.XMPNode)
    {
        com.adobe.xmp.options.PropertyOptions $r1, $r3, $r6;
        java.util.Iterator $r2;
        com.adobe.xmp.impl.XMPNode r0, r5;
        java.lang.Object $r4;
        boolean $z0, $z1, $z2, $z3, z4;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAlternate()>();

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z1 == 0 goto label4;

        z4 = 0;

        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label1:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.adobe.xmp.impl.XMPNode) $r4;

        $r6 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z3 = virtualinvoke $r6.<com.adobe.xmp.options.PropertyOptions: boolean getHasLanguage()>();

        if $z3 == 0 goto label2;

        z4 = 1;

        goto label3;

     label2:
        goto label1;

     label3:
        if z4 == 0 goto label4;

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r3.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayAltText(boolean)>(1);

        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void normalizeLangArray(com.adobe.xmp.impl.XMPNode)>(r0);

     label4:
        return;
    }

    static void appendLangItem(com.adobe.xmp.impl.XMPNode, java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode $r0, $r2, r6;
        java.lang.String r1, r3, $r4, $r5;
        boolean $z0;

        r6 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r3 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        $r0 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r0.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>("[]", r1, null);

        $r2 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r2.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>("xml:lang", r3, null);

        virtualinvoke $r0.<com.adobe.xmp.impl.XMPNode: void addQualifier(com.adobe.xmp.impl.XMPNode)>($r2);

        $r4 = "x-default";

        $r5 = virtualinvoke $r2.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>($r0);

        goto label2;

     label1:
        virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: void addChild(int,com.adobe.xmp.impl.XMPNode)>(1, $r0);

     label2:
        return;
    }

    static java.lang.Object[] chooseLocalizedText(com.adobe.xmp.impl.XMPNode, java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.Integer $r4, $r7, $r9, $r11, $r25, $r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.adobe.xmp.options.PropertyOptions $r1, $r14;
        java.lang.Object[] $r3, $r6, $r8, $r10, $r24, $r27;
        com.adobe.xmp.XMPException $r15, $r26, $r29;
        int i0;
        java.lang.String $r16, $r18, $r20, r21, r22, $r23;
        java.util.Iterator $r2;
        com.adobe.xmp.impl.XMPNode r0, $r5, r13, $r17, $r19, r30, r31;
        java.lang.Object $r12;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r22 := @parameter1: java.lang.String;

        r21 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z0 != 0 goto label01;

        $r29 = new com.adobe.xmp.XMPException;

        specialinvoke $r29.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Localized text array is not alt-text", 102);

        throw $r29;

     label01:
        $z1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z1 != 0 goto label02;

        $r27 = newarray (java.lang.Object)[2];

        $r28 = new java.lang.Integer;

        specialinvoke $r28.<java.lang.Integer: void <init>(int)>(0);

        $r27[0] = $r28;

        $r27[1] = null;

        return $r27;

     label02:
        i0 = 0;

        r30 = null;

        r31 = null;

        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label03:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r12 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.adobe.xmp.impl.XMPNode) $r12;

        $r14 = virtualinvoke r13.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z3 = virtualinvoke $r14.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z3 == 0 goto label04;

        $r26 = new com.adobe.xmp.XMPException;

        specialinvoke $r26.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Alt-text array item is not simple", 102);

        throw $r26;

     label04:
        $z4 = virtualinvoke r13.<com.adobe.xmp.impl.XMPNode: boolean hasQualifier()>();

        if $z4 == 0 goto label05;

        $r16 = "xml:lang";

        $r17 = virtualinvoke r13.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r18 = virtualinvoke $r17.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z5 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z5 != 0 goto label06;

     label05:
        $r15 = new com.adobe.xmp.XMPException;

        specialinvoke $r15.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Alt-text array item has no language qualifier", 102);

        throw $r15;

     label06:
        $r19 = virtualinvoke r13.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r20 = virtualinvoke $r19.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z6 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z6 == 0 goto label07;

        $r24 = newarray (java.lang.Object)[2];

        $r25 = new java.lang.Integer;

        specialinvoke $r25.<java.lang.Integer: void <init>(int)>(1);

        $r24[0] = $r25;

        $r24[1] = r13;

        return $r24;

     label07:
        if r22 == null goto label09;

        $z8 = virtualinvoke $r20.<java.lang.String: boolean startsWith(java.lang.String)>(r22);

        if $z8 == 0 goto label09;

        if r30 != null goto label08;

        r30 = r13;

     label08:
        i0 = i0 + 1;

        goto label10;

     label09:
        $r23 = "x-default";

        $z7 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z7 == 0 goto label10;

        r31 = r13;

     label10:
        goto label03;

     label11:
        if i0 != 1 goto label12;

        $r10 = newarray (java.lang.Object)[2];

        $r11 = new java.lang.Integer;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>(2);

        $r10[0] = $r11;

        $r10[1] = r30;

        return $r10;

     label12:
        if i0 <= 1 goto label13;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = new java.lang.Integer;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>(3);

        $r8[0] = $r9;

        $r8[1] = r30;

        return $r8;

     label13:
        if r31 == null goto label14;

        $r6 = newarray (java.lang.Object)[2];

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(4);

        $r6[0] = $r7;

        $r6[1] = r31;

        return $r6;

     label14:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(5);

        $r3[0] = $r4;

        $r5 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(1);

        $r3[1] = $r5;

        return $r3;
    }

    static int lookupLanguageItem(com.adobe.xmp.impl.XMPNode, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPException $r10;
        int $i0, i1, $i3;
        java.lang.String $r3, $r5, r6, $r8;
        boolean $z0, $z1, $z2, $z3;
        com.adobe.xmp.options.PropertyOptions $r1;
        com.adobe.xmp.impl.XMPNode r0, $r2, $r4, $r7;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r6 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r10 = new com.adobe.xmp.XMPException;

        specialinvoke $r10.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Language item must be used on array", 102);

        throw $r10;

     label1:
        i1 = 1;

     label2:
        $i0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if i1 > $i0 goto label5;

        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i1);

        $z1 = virtualinvoke $r2.<com.adobe.xmp.impl.XMPNode: boolean hasQualifier()>();

        if $z1 == 0 goto label4;

        $r3 = "xml:lang";

        $r4 = virtualinvoke $r2.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r5 = virtualinvoke $r4.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label3;

        goto label4;

     label3:
        $r7 = virtualinvoke $r2.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r8 = virtualinvoke $r7.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z3 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label4;

        return i1;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        $i3 = (int) -1;

        return $i3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <com.adobe.xmp.impl.XMPNodeUtils: int CLT_FIRST_ITEM> = 5;

        <com.adobe.xmp.impl.XMPNodeUtils: int CLT_XDEFAULT> = 4;

        <com.adobe.xmp.impl.XMPNodeUtils: int CLT_MULTIPLE_GENERIC> = 3;

        <com.adobe.xmp.impl.XMPNodeUtils: int CLT_SINGLE_GENERIC> = 2;

        <com.adobe.xmp.impl.XMPNodeUtils: int CLT_SPECIFIC_MATCH> = 1;

        <com.adobe.xmp.impl.XMPNodeUtils: int CLT_NO_VALUES> = 0;

        $r0 = class "Lcom/adobe/xmp/impl/XMPNodeUtils;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.adobe.xmp.impl.XMPNodeUtils: boolean $assertionsDisabled> = $z1;

        return;
    }
}
