public class nu.xom.converters.SAXConverter extends java.lang.Object
{
    private org.xml.sax.ContentHandler contentHandler;
    private org.xml.sax.ext.LexicalHandler lexicalHandler;
    private org.xml.sax.helpers.LocatorImpl locator;
    private boolean stripBaseAttributes;

    public void <init>(org.xml.sax.ContentHandler)
    {
        org.xml.sax.ContentHandler r1;
        nu.xom.converters.SAXConverter r0;

        r0 := @this: nu.xom.converters.SAXConverter;

        r1 := @parameter0: org.xml.sax.ContentHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<nu.xom.converters.SAXConverter: boolean stripBaseAttributes> = 1;

        virtualinvoke r0.<nu.xom.converters.SAXConverter: void setContentHandler(org.xml.sax.ContentHandler)>(r1);

        return;
    }

    public void setContentHandler(org.xml.sax.ContentHandler)
    {
        java.lang.Class $r2;
        org.xml.sax.ContentHandler r0;
        java.lang.String $r1, $r3;
        java.lang.NullPointerException $r5;
        boolean $z0;
        nu.xom.converters.SAXConverter r4;

        r4 := @this: nu.xom.converters.SAXConverter;

        r0 := @parameter0: org.xml.sax.ContentHandler;

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("ContentHandler must be non-null.");

        throw $r5;

     label1:
        $r1 = "nu.xom.xslt.XSLTHandler";

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        r4.<nu.xom.converters.SAXConverter: boolean stripBaseAttributes> = 0;

        goto label3;

     label2:
        r4.<nu.xom.converters.SAXConverter: org.xml.sax.ContentHandler contentHandler> = r0;

     label3:
        return;
    }

    public org.xml.sax.ContentHandler getContentHandler()
    {
        org.xml.sax.ContentHandler $r1;
        nu.xom.converters.SAXConverter r0;

        r0 := @this: nu.xom.converters.SAXConverter;

        $r1 = r0.<nu.xom.converters.SAXConverter: org.xml.sax.ContentHandler contentHandler>;

        return $r1;
    }

    public void setLexicalHandler(org.xml.sax.ext.LexicalHandler)
    {
        org.xml.sax.ext.LexicalHandler r1;
        nu.xom.converters.SAXConverter r0;

        r0 := @this: nu.xom.converters.SAXConverter;

        r1 := @parameter0: org.xml.sax.ext.LexicalHandler;

        r0.<nu.xom.converters.SAXConverter: org.xml.sax.ext.LexicalHandler lexicalHandler> = r1;

        return;
    }

    public org.xml.sax.ext.LexicalHandler getLexicalHandler()
    {
        org.xml.sax.ext.LexicalHandler $r1;
        nu.xom.converters.SAXConverter r0;

        r0 := @this: nu.xom.converters.SAXConverter;

        $r1 = r0.<nu.xom.converters.SAXConverter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        return $r1;
    }

    public void convert(nu.xom.Document) throws org.xml.sax.SAXException
    {
        nu.xom.Node $r9;
        org.xml.sax.helpers.LocatorImpl $r1, $r3, $r5;
        int $i0, i1;
        java.lang.String $r4;
        org.xml.sax.ContentHandler $r6, $r7, $r8;
        nu.xom.Document r2;
        nu.xom.converters.SAXConverter r0;

        r0 := @this: nu.xom.converters.SAXConverter;

        r2 := @parameter0: nu.xom.Document;

        $r1 = new org.xml.sax.helpers.LocatorImpl;

        specialinvoke $r1.<org.xml.sax.helpers.LocatorImpl: void <init>()>();

        r0.<nu.xom.converters.SAXConverter: org.xml.sax.helpers.LocatorImpl locator> = $r1;

        $r3 = r0.<nu.xom.converters.SAXConverter: org.xml.sax.helpers.LocatorImpl locator>;

        $r4 = virtualinvoke r2.<nu.xom.Document: java.lang.String getBaseURI()>();

        virtualinvoke $r3.<org.xml.sax.helpers.LocatorImpl: void setSystemId(java.lang.String)>($r4);

        $r6 = r0.<nu.xom.converters.SAXConverter: org.xml.sax.ContentHandler contentHandler>;

        $r5 = r0.<nu.xom.converters.SAXConverter: org.xml.sax.helpers.LocatorImpl locator>;

        interfaceinvoke $r6.<org.xml.sax.ContentHandler: void setDocumentLocator(org.xml.sax.Locator)>($r5);

        $r7 = r0.<nu.xom.converters.SAXConverter: org.xml.sax.ContentHandler contentHandler>;

        interfaceinvoke $r7.<org.xml.sax.ContentHandler: void startDocument()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r2.<nu.xom.Document: int getChildCount()>();

        if i1 >= $i0 goto label2;

        $r9 = virtualinvoke r2.<nu.xom.Document: nu.xom.Node getChild(int)>(i1);

        specialinvoke r0.<nu.xom.converters.SAXConverter: void process(nu.xom.Node)>($r9);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r8 = r0.<nu.xom.converters.SAXConverter: org.xml.sax.ContentHandler contentHandler>;

        interfaceinvoke $r8.<org.xml.sax.ContentHandler: void endDocument()>();

        return;
    }

    private void process(nu.xom.Node) throws org.xml.sax.SAXException
    {
        nu.xom.Element $r18;
        org.xml.sax.ext.LexicalHandler $r2, $r3, $r7, $r8, $r10;
        int $i0, $i1;
        java.lang.String $r4, $r5, $r6, $r9, $r13, $r14, $r15;
        org.xml.sax.ContentHandler $r12, $r16;
        nu.xom.ProcessingInstruction r19;
        boolean $z0, $z1, $z2, $z3, $z4;
        nu.xom.converters.SAXConverter r1;
        nu.xom.DocType r20;
        nu.xom.Node r0;
        char[] $r11, $r17;

        r1 := @this: nu.xom.converters.SAXConverter;

        r0 := @parameter0: nu.xom.Node;

        $z0 = r0 instanceof nu.xom.Element;

        if $z0 == 0 goto label1;

        $r18 = (nu.xom.Element) r0;

        specialinvoke r1.<nu.xom.converters.SAXConverter: void convertElement(nu.xom.Element)>($r18);

        goto label5;

     label1:
        $z1 = r0 instanceof nu.xom.Text;

        if $z1 == 0 goto label2;

        $r15 = virtualinvoke r0.<nu.xom.Node: java.lang.String getValue()>();

        $r16 = r1.<nu.xom.converters.SAXConverter: org.xml.sax.ContentHandler contentHandler>;

        $r17 = virtualinvoke $r15.<java.lang.String: char[] toCharArray()>();

        $i1 = virtualinvoke $r15.<java.lang.String: int length()>();

        interfaceinvoke $r16.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r17, 0, $i1);

        goto label5;

     label2:
        $z2 = r0 instanceof nu.xom.ProcessingInstruction;

        if $z2 == 0 goto label3;

        r19 = (nu.xom.ProcessingInstruction) r0;

        $r12 = r1.<nu.xom.converters.SAXConverter: org.xml.sax.ContentHandler contentHandler>;

        $r13 = virtualinvoke r19.<nu.xom.ProcessingInstruction: java.lang.String getTarget()>();

        $r14 = virtualinvoke r19.<nu.xom.ProcessingInstruction: java.lang.String getValue()>();

        interfaceinvoke $r12.<org.xml.sax.ContentHandler: void processingInstruction(java.lang.String,java.lang.String)>($r13, $r14);

        goto label5;

     label3:
        $z3 = r0 instanceof nu.xom.Comment;

        if $z3 == 0 goto label4;

        $r8 = r1.<nu.xom.converters.SAXConverter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        if $r8 == null goto label4;

        $r9 = virtualinvoke r0.<nu.xom.Node: java.lang.String getValue()>();

        $r10 = r1.<nu.xom.converters.SAXConverter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        $r11 = virtualinvoke $r9.<java.lang.String: char[] toCharArray()>();

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        interfaceinvoke $r10.<org.xml.sax.ext.LexicalHandler: void comment(char[],int,int)>($r11, 0, $i0);

        goto label5;

     label4:
        $z4 = r0 instanceof nu.xom.DocType;

        if $z4 == 0 goto label5;

        $r2 = r1.<nu.xom.converters.SAXConverter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        if $r2 == null goto label5;

        r20 = (nu.xom.DocType) r0;

        $r3 = r1.<nu.xom.converters.SAXConverter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        $r4 = virtualinvoke r20.<nu.xom.DocType: java.lang.String getRootElementName()>();

        $r5 = virtualinvoke r20.<nu.xom.DocType: java.lang.String getPublicID()>();

        $r6 = virtualinvoke r20.<nu.xom.DocType: java.lang.String getSystemID()>();

        interfaceinvoke $r3.<org.xml.sax.ext.LexicalHandler: void startDTD(java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r6);

        $r7 = r1.<nu.xom.converters.SAXConverter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        interfaceinvoke $r7.<org.xml.sax.ext.LexicalHandler: void endDTD()>();

     label5:
        return;
    }

    private boolean convertNamespace(nu.xom.Element, java.lang.String) throws org.xml.sax.SAXException
    {
        nu.xom.Element r0, r8;
        java.lang.String r1, $r2, $r6, $r7;
        nu.xom.ParentNode $r3;
        org.xml.sax.ContentHandler $r5;
        boolean $z0, $z1, $z2;
        nu.xom.converters.SAXConverter r4;

        r4 := @this: nu.xom.converters.SAXConverter;

        r0 := @parameter0: nu.xom.Element;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<nu.xom.Element: nu.xom.ParentNode getParent()>();

        r8 = null;

        $z0 = $r3 instanceof nu.xom.Element;

        if $z0 == 0 goto label1;

        r8 = (nu.xom.Element) $r3;

     label1:
        if r8 == null goto label2;

        $r7 = virtualinvoke r8.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>(r1);

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label2;

        return 0;

     label2:
        if r8 != null goto label3;

        $r6 = "";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $r5 = r4.<nu.xom.converters.SAXConverter: org.xml.sax.ContentHandler contentHandler>;

        interfaceinvoke $r5.<org.xml.sax.ContentHandler: void startPrefixMapping(java.lang.String,java.lang.String)>(r1, $r2);

        return 1;
    }

    private void convertElement(nu.xom.Element) throws org.xml.sax.SAXException
    {
        org.xml.sax.helpers.LocatorImpl $r2;
        nu.xom.converters.SAXConverter r0;
        boolean $z0, $z1, $z2, $z3;
        org.xml.sax.helpers.AttributesImpl $r5;
        nu.xom.Node $r16;
        nu.xom.Element r1;
        java.lang.String[] r4;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7;
        java.lang.String $r3, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;
        org.xml.sax.ContentHandler $r6, $r10, $r15;
        nu.xom.Attribute $r17;

        r0 := @this: nu.xom.converters.SAXConverter;

        r1 := @parameter0: nu.xom.Element;

        $r2 = r0.<nu.xom.converters.SAXConverter: org.xml.sax.helpers.LocatorImpl locator>;

        $r3 = virtualinvoke r1.<nu.xom.Element: java.lang.String getBaseURI()>();

        virtualinvoke $r2.<org.xml.sax.helpers.LocatorImpl: void setSystemId(java.lang.String)>($r3);

        $i0 = virtualinvoke r1.<nu.xom.Element: int getNamespaceDeclarationCount()>();

        r4 = newarray (java.lang.String)[$i0];

        i3 = 0;

        i4 = 0;

     label01:
        if i4 >= $i0 goto label03;

        $r22 = virtualinvoke r1.<nu.xom.Element: java.lang.String getNamespacePrefix(int)>(i4);

        $z3 = specialinvoke r0.<nu.xom.converters.SAXConverter: boolean convertNamespace(nu.xom.Element,java.lang.String)>(r1, $r22);

        if $z3 == 0 goto label02;

        r4[i3] = $r22;

        i3 = i3 + 1;

     label02:
        i4 = i4 + 1;

        goto label01;

     label03:
        $r5 = new org.xml.sax.helpers.AttributesImpl;

        specialinvoke $r5.<org.xml.sax.helpers.AttributesImpl: void <init>()>();

        $i1 = virtualinvoke r1.<nu.xom.Element: int getAttributeCount()>();

        i5 = 0;

     label04:
        if i5 >= $i1 goto label07;

        $r17 = virtualinvoke r1.<nu.xom.Element: nu.xom.Attribute getAttribute(int)>(i5);

        $r18 = "base";

        $r19 = virtualinvoke $r17.<nu.xom.Attribute: java.lang.String getLocalName()>();

        $z0 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z0 == 0 goto label05;

        $r20 = "http://www.w3.org/XML/1998/namespace";

        $r21 = virtualinvoke $r17.<nu.xom.Attribute: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z1 == 0 goto label05;

        $z2 = r0.<nu.xom.converters.SAXConverter: boolean stripBaseAttributes>;

        if $z2 == 0 goto label05;

        goto label06;

     label05:
        $r23 = virtualinvoke $r17.<nu.xom.Attribute: java.lang.String getNamespaceURI()>();

        $r24 = virtualinvoke $r17.<nu.xom.Attribute: java.lang.String getLocalName()>();

        $r25 = virtualinvoke $r17.<nu.xom.Attribute: java.lang.String getQualifiedName()>();

        $r26 = staticinvoke <nu.xom.converters.SAXConverter: java.lang.String getSAXType(nu.xom.Attribute)>($r17);

        $r27 = virtualinvoke $r17.<nu.xom.Attribute: java.lang.String getValue()>();

        virtualinvoke $r5.<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r23, $r24, $r25, $r26, $r27);

     label06:
        i5 = i5 + 1;

        goto label04;

     label07:
        $r6 = r0.<nu.xom.converters.SAXConverter: org.xml.sax.ContentHandler contentHandler>;

        $r7 = virtualinvoke r1.<nu.xom.Element: java.lang.String getNamespaceURI()>();

        $r8 = virtualinvoke r1.<nu.xom.Element: java.lang.String getLocalName()>();

        $r9 = virtualinvoke r1.<nu.xom.Element: java.lang.String getQualifiedName()>();

        interfaceinvoke $r6.<org.xml.sax.ContentHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>($r7, $r8, $r9, $r5);

        $i2 = virtualinvoke r1.<nu.xom.Element: int getChildCount()>();

        i6 = 0;

     label08:
        if i6 >= $i2 goto label09;

        $r16 = virtualinvoke r1.<nu.xom.Element: nu.xom.Node getChild(int)>(i6);

        specialinvoke r0.<nu.xom.converters.SAXConverter: void process(nu.xom.Node)>($r16);

        i6 = i6 + 1;

        goto label08;

     label09:
        $r10 = r0.<nu.xom.converters.SAXConverter: org.xml.sax.ContentHandler contentHandler>;

        $r11 = virtualinvoke r1.<nu.xom.Element: java.lang.String getNamespaceURI()>();

        $r12 = virtualinvoke r1.<nu.xom.Element: java.lang.String getLocalName()>();

        $r13 = virtualinvoke r1.<nu.xom.Element: java.lang.String getQualifiedName()>();

        interfaceinvoke $r10.<org.xml.sax.ContentHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>($r11, $r12, $r13);

        i7 = 0;

     label10:
        if i7 >= i3 goto label11;

        $r15 = r0.<nu.xom.converters.SAXConverter: org.xml.sax.ContentHandler contentHandler>;

        $r14 = r4[i7];

        interfaceinvoke $r15.<org.xml.sax.ContentHandler: void endPrefixMapping(java.lang.String)>($r14);

        i7 = i7 + 1;

        goto label10;

     label11:
        return;
    }

    private static java.lang.String getSAXType(nu.xom.Attribute)
    {
        nu.xom.Attribute$Type $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        nu.xom.Attribute r0;

        r0 := @parameter0: nu.xom.Attribute;

        $r1 = virtualinvoke r0.<nu.xom.Attribute: nu.xom.Attribute$Type getType()>();

        $r2 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type UNDECLARED>;

        $z0 = virtualinvoke $r1.<nu.xom.Attribute$Type: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label01;

        return "CDATA";

     label01:
        $r3 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type CDATA>;

        $z1 = virtualinvoke $r1.<nu.xom.Attribute$Type: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label02;

        return "CDATA";

     label02:
        $r4 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type ID>;

        $z2 = virtualinvoke $r1.<nu.xom.Attribute$Type: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label03;

        return "ID";

     label03:
        $r5 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type IDREF>;

        $z3 = virtualinvoke $r1.<nu.xom.Attribute$Type: boolean equals(java.lang.Object)>($r5);

        if $z3 == 0 goto label04;

        return "IDREF";

     label04:
        $r6 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type IDREFS>;

        $z4 = virtualinvoke $r1.<nu.xom.Attribute$Type: boolean equals(java.lang.Object)>($r6);

        if $z4 == 0 goto label05;

        return "IDREFS";

     label05:
        $r7 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type NMTOKEN>;

        $z5 = virtualinvoke $r1.<nu.xom.Attribute$Type: boolean equals(java.lang.Object)>($r7);

        if $z5 == 0 goto label06;

        return "NMTOKEN";

     label06:
        $r8 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type NMTOKENS>;

        $z6 = virtualinvoke $r1.<nu.xom.Attribute$Type: boolean equals(java.lang.Object)>($r8);

        if $z6 == 0 goto label07;

        return "NMTOKENS";

     label07:
        $r9 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type ENTITY>;

        $z7 = virtualinvoke $r1.<nu.xom.Attribute$Type: boolean equals(java.lang.Object)>($r9);

        if $z7 == 0 goto label08;

        return "ENTITY";

     label08:
        $r10 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type ENTITIES>;

        $z8 = virtualinvoke $r1.<nu.xom.Attribute$Type: boolean equals(java.lang.Object)>($r10);

        if $z8 == 0 goto label09;

        return "ENTITIES";

     label09:
        $r11 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type NOTATION>;

        $z9 = virtualinvoke $r1.<nu.xom.Attribute$Type: boolean equals(java.lang.Object)>($r11);

        if $z9 == 0 goto label10;

        return "NOTATION";

     label10:
        return "NMTOKEN";
    }

    public void convert(nu.xom.Nodes) throws org.xml.sax.SAXException
    {
        nu.xom.Node $r7, $r8, $r9;
        org.xml.sax.helpers.LocatorImpl $r2, $r3;
        int $i0, i1, $i2;
        nu.xom.Nodes r0;
        org.xml.sax.ContentHandler $r4, $r5, $r6;
        nu.xom.Document $r10;
        nu.xom.converters.SAXConverter r1;
        boolean $z0;

        r1 := @this: nu.xom.converters.SAXConverter;

        r0 := @parameter0: nu.xom.Nodes;

        $i0 = virtualinvoke r0.<nu.xom.Nodes: int size()>();

        if $i0 != 1 goto label1;

        $r8 = virtualinvoke r0.<nu.xom.Nodes: nu.xom.Node get(int)>(0);

        $z0 = $r8 instanceof nu.xom.Document;

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r0.<nu.xom.Nodes: nu.xom.Node get(int)>(0);

        $r10 = (nu.xom.Document) $r9;

        virtualinvoke r1.<nu.xom.converters.SAXConverter: void convert(nu.xom.Document)>($r10);

        goto label4;

     label1:
        $r2 = new org.xml.sax.helpers.LocatorImpl;

        specialinvoke $r2.<org.xml.sax.helpers.LocatorImpl: void <init>()>();

        r1.<nu.xom.converters.SAXConverter: org.xml.sax.helpers.LocatorImpl locator> = $r2;

        $r4 = r1.<nu.xom.converters.SAXConverter: org.xml.sax.ContentHandler contentHandler>;

        $r3 = r1.<nu.xom.converters.SAXConverter: org.xml.sax.helpers.LocatorImpl locator>;

        interfaceinvoke $r4.<org.xml.sax.ContentHandler: void setDocumentLocator(org.xml.sax.Locator)>($r3);

        $r5 = r1.<nu.xom.converters.SAXConverter: org.xml.sax.ContentHandler contentHandler>;

        interfaceinvoke $r5.<org.xml.sax.ContentHandler: void startDocument()>();

        i1 = 0;

     label2:
        $i2 = virtualinvoke r0.<nu.xom.Nodes: int size()>();

        if i1 >= $i2 goto label3;

        $r7 = virtualinvoke r0.<nu.xom.Nodes: nu.xom.Node get(int)>(i1);

        specialinvoke r1.<nu.xom.converters.SAXConverter: void process(nu.xom.Node)>($r7);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r6 = r1.<nu.xom.converters.SAXConverter: org.xml.sax.ContentHandler contentHandler>;

        interfaceinvoke $r6.<org.xml.sax.ContentHandler: void endDocument()>();

     label4:
        return;
    }
}
