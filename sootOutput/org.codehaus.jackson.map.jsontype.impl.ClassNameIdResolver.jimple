public class org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver extends org.codehaus.jackson.map.jsontype.impl.TypeIdResolverBase
{

    public void <init>(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.type.TypeFactory)
    {
        org.codehaus.jackson.map.type.TypeFactory r2;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        r2 := @parameter1: org.codehaus.jackson.map.type.TypeFactory;

        specialinvoke r0.<org.codehaus.jackson.map.jsontype.impl.TypeIdResolverBase: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.type.TypeFactory)>(r1, r2);

        return;
    }

    public org.codehaus.jackson.annotate.JsonTypeInfo$Id getMechanism()
    {
        org.codehaus.jackson.annotate.JsonTypeInfo$Id $r0;
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r1;

        r1 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        $r0 = <org.codehaus.jackson.annotate.JsonTypeInfo$Id: org.codehaus.jackson.annotate.JsonTypeInfo$Id CLASS>;

        return $r0;
    }

    public void registerSubtype(java.lang.Class, java.lang.String)
    {
        java.lang.Class r1;
        java.lang.String r2;
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public java.lang.String idFromValue(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: java.lang.String _idFrom(java.lang.Object,java.lang.Class)>(r1, $r2);

        return $r3;
    }

    public java.lang.String idFromValueAndType(java.lang.Object, java.lang.Class)
    {
        java.lang.Object r1;
        java.lang.Class r2;
        java.lang.String $r3;
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: java.lang.String _idFrom(java.lang.Object,java.lang.Class)>(r1, r2);

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType typeFromId(java.lang.String)
    {
        org.codehaus.jackson.map.type.TypeFactory $r4;
        int $i0;
        org.codehaus.jackson.type.JavaType $r3, $r5, $r6;
        java.lang.String r0, $r13, $r15, $r22;
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r2;
        java.lang.IllegalArgumentException $r8, $r17;
        java.lang.Exception $r7;
        java.lang.Class $r1;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14, $r18, $r19, $r20, $r21;
        java.lang.ClassNotFoundException $r16;

        r2 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(60);

        if $i0 <= 0 goto label1;

        $r6 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType fromCanonical(java.lang.String)>(r0);

        return $r6;

     label1:
        $r1 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Class findClass(java.lang.String)>(r0);

        $r4 = r2.<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: org.codehaus.jackson.map.type.TypeFactory _typeFactory>;

        $r3 = r2.<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: org.codehaus.jackson.type.JavaType _baseType>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructSpecializedType(org.codehaus.jackson.type.JavaType,java.lang.Class)>($r3, $r1);

     label2:
        return $r5;

     label3:
        $r16 := @caughtexception;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid type id \'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (for id type \'Id.class\'): no such class found");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid type id \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (for id type \'Id.class\'): ");

        $r13 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r7);

        throw $r8;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    protected final java.lang.String _idFrom(java.lang.Object, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r12, $r16;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType $r3, $r6;
        java.lang.String $r9, $r19, r20;
        java.util.EnumSet $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.EnumMap $r10;
        org.codehaus.jackson.map.type.CollectionType $r17;
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r2;
        org.codehaus.jackson.map.type.MapType $r13;
        java.lang.Class $r0, $r1, $r4, $r5, $r7, $r11, $r15, r18;
        java.lang.Object r8;

        r2 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        r8 := @parameter0: java.lang.Object;

        r18 := @parameter1: java.lang.Class;

        $r0 = class "Ljava/lang/Enum;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r18);

        if $z0 == 0 goto label1;

        $z5 = virtualinvoke r18.<java.lang.Class: boolean isEnum()>();

        if $z5 != 0 goto label1;

        r18 = virtualinvoke r18.<java.lang.Class: java.lang.Class getSuperclass()>();

     label1:
        $r19 = virtualinvoke r18.<java.lang.Class: java.lang.String getName()>();

        r20 = $r19;

        $z6 = virtualinvoke $r19.<java.lang.String: boolean startsWith(java.lang.String)>("java.util");

        if $z6 == 0 goto label6;

        $z1 = r8 instanceof java.util.EnumSet;

        if $z1 == 0 goto label2;

        $r14 = (java.util.EnumSet) r8;

        $r15 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Class findEnumType(java.util.EnumSet)>($r14);

        $r16 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory defaultInstance()>();

        $r17 = virtualinvoke $r16.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.CollectionType constructCollectionType(java.lang.Class,java.lang.Class)>(class "Ljava/util/EnumSet;", $r15);

        r20 = virtualinvoke $r17.<org.codehaus.jackson.map.type.CollectionType: java.lang.String toCanonical()>();

        goto label7;

     label2:
        $z2 = r8 instanceof java.util.EnumMap;

        if $z2 == 0 goto label3;

        $r10 = (java.util.EnumMap) r8;

        $r11 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Class findEnumType(java.util.EnumMap)>($r10);

        $r12 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory defaultInstance()>();

        $r13 = virtualinvoke $r12.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.MapType constructMapType(java.lang.Class,java.lang.Class,java.lang.Class)>(class "Ljava/util/EnumMap;", $r11, class "Ljava/lang/Object;");

        r20 = virtualinvoke $r13.<org.codehaus.jackson.map.type.MapType: java.lang.String toCanonical()>();

        goto label7;

     label3:
        $r9 = virtualinvoke $r19.<java.lang.String: java.lang.String substring(int)>(9);

        $z3 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>(".Arrays$");

        if $z3 != 0 goto label4;

        $z4 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>(".Collections$");

        if $z4 == 0 goto label5;

     label4:
        $i1 = virtualinvoke $r19.<java.lang.String: int indexOf(java.lang.String)>("List");

        if $i1 < 0 goto label5;

        r20 = "java.util.ArrayList";

     label5:
        goto label7;

     label6:
        $i0 = virtualinvoke $r19.<java.lang.String: int indexOf(int)>(36);

        if $i0 < 0 goto label7;

        $r1 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Class getOuterClass(java.lang.Class)>(r18);

        if $r1 == null goto label7;

        $r3 = r2.<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: org.codehaus.jackson.type.JavaType _baseType>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r5 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Class getOuterClass(java.lang.Class)>($r4);

        if $r5 != null goto label7;

        $r6 = r2.<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: org.codehaus.jackson.type.JavaType _baseType>;

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        r20 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

     label7:
        return r20;
    }
}
