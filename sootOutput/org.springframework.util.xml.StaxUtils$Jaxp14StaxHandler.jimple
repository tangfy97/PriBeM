class org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler extends java.lang.Object
{

    private void <init>()
    {
        org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler r0;

        r0 := @this: org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static javax.xml.transform.Source createStaxSource(javax.xml.stream.XMLStreamReader)
    {
        javax.xml.transform.stax.StAXSource $r0;
        javax.xml.stream.XMLStreamReader r1;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        $r0 = new javax.xml.transform.stax.StAXSource;

        specialinvoke $r0.<javax.xml.transform.stax.StAXSource: void <init>(javax.xml.stream.XMLStreamReader)>(r1);

        return $r0;
    }

    private static javax.xml.transform.Source createStaxSource(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventReader r1;
        javax.xml.transform.stax.StAXSource $r0;

        r1 := @parameter0: javax.xml.stream.XMLEventReader;

        $r0 = new javax.xml.transform.stax.StAXSource;

        specialinvoke $r0.<javax.xml.transform.stax.StAXSource: void <init>(javax.xml.stream.XMLEventReader)>(r1);

        return $r0;
    }

    private static javax.xml.transform.Result createStaxResult(javax.xml.stream.XMLStreamWriter)
    {
        javax.xml.transform.stax.StAXResult $r0;
        javax.xml.stream.XMLStreamWriter r1;

        r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r0 = new javax.xml.transform.stax.StAXResult;

        specialinvoke $r0.<javax.xml.transform.stax.StAXResult: void <init>(javax.xml.stream.XMLStreamWriter)>(r1);

        return $r0;
    }

    private static javax.xml.transform.Result createStaxResult(javax.xml.stream.XMLEventWriter)
    {
        javax.xml.transform.stax.StAXResult $r0;
        javax.xml.stream.XMLEventWriter r1;

        r1 := @parameter0: javax.xml.stream.XMLEventWriter;

        $r0 = new javax.xml.transform.stax.StAXResult;

        specialinvoke $r0.<javax.xml.transform.stax.StAXResult: void <init>(javax.xml.stream.XMLEventWriter)>(r1);

        return $r0;
    }

    private static boolean isStaxSource(javax.xml.transform.Source)
    {
        javax.xml.transform.Source r0;
        boolean $z0;

        r0 := @parameter0: javax.xml.transform.Source;

        $z0 = r0 instanceof javax.xml.transform.stax.StAXSource;

        return $z0;
    }

    private static boolean isStaxResult(javax.xml.transform.Result)
    {
        javax.xml.transform.Result r0;
        boolean $z0;

        r0 := @parameter0: javax.xml.transform.Result;

        $z0 = r0 instanceof javax.xml.transform.stax.StAXResult;

        return $z0;
    }

    private static javax.xml.stream.XMLStreamReader getXMLStreamReader(javax.xml.transform.Source)
    {
        javax.xml.transform.Source r0;
        javax.xml.transform.stax.StAXSource $r1;
        javax.xml.stream.XMLStreamReader $r2;

        r0 := @parameter0: javax.xml.transform.Source;

        staticinvoke <org.springframework.util.Assert: void isInstanceOf(java.lang.Class,java.lang.Object)>(class "Ljavax/xml/transform/stax/StAXSource;", r0);

        $r1 = (javax.xml.transform.stax.StAXSource) r0;

        $r2 = virtualinvoke $r1.<javax.xml.transform.stax.StAXSource: javax.xml.stream.XMLStreamReader getXMLStreamReader()>();

        return $r2;
    }

    private static javax.xml.stream.XMLEventReader getXMLEventReader(javax.xml.transform.Source)
    {
        javax.xml.stream.XMLEventReader $r2;
        javax.xml.transform.Source r0;
        javax.xml.transform.stax.StAXSource $r1;

        r0 := @parameter0: javax.xml.transform.Source;

        staticinvoke <org.springframework.util.Assert: void isInstanceOf(java.lang.Class,java.lang.Object)>(class "Ljavax/xml/transform/stax/StAXSource;", r0);

        $r1 = (javax.xml.transform.stax.StAXSource) r0;

        $r2 = virtualinvoke $r1.<javax.xml.transform.stax.StAXSource: javax.xml.stream.XMLEventReader getXMLEventReader()>();

        return $r2;
    }

    private static javax.xml.stream.XMLStreamWriter getXMLStreamWriter(javax.xml.transform.Result)
    {
        javax.xml.transform.stax.StAXResult $r1;
        javax.xml.transform.Result r0;
        javax.xml.stream.XMLStreamWriter $r2;

        r0 := @parameter0: javax.xml.transform.Result;

        staticinvoke <org.springframework.util.Assert: void isInstanceOf(java.lang.Class,java.lang.Object)>(class "Ljavax/xml/transform/stax/StAXResult;", r0);

        $r1 = (javax.xml.transform.stax.StAXResult) r0;

        $r2 = virtualinvoke $r1.<javax.xml.transform.stax.StAXResult: javax.xml.stream.XMLStreamWriter getXMLStreamWriter()>();

        return $r2;
    }

    private static javax.xml.stream.XMLEventWriter getXMLEventWriter(javax.xml.transform.Result)
    {
        javax.xml.transform.stax.StAXResult $r1;
        javax.xml.transform.Result r0;
        javax.xml.stream.XMLEventWriter $r2;

        r0 := @parameter0: javax.xml.transform.Result;

        staticinvoke <org.springframework.util.Assert: void isInstanceOf(java.lang.Class,java.lang.Object)>(class "Ljavax/xml/transform/stax/StAXResult;", r0);

        $r1 = (javax.xml.transform.stax.StAXResult) r0;

        $r2 = virtualinvoke $r1.<javax.xml.transform.stax.StAXResult: javax.xml.stream.XMLEventWriter getXMLEventWriter()>();

        return $r2;
    }

    static javax.xml.transform.Source access$0(javax.xml.stream.XMLStreamReader)
    {
        javax.xml.transform.Source $r1;
        javax.xml.stream.XMLStreamReader r0;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

        $r1 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: javax.xml.transform.Source createStaxSource(javax.xml.stream.XMLStreamReader)>(r0);

        return $r1;
    }

    static javax.xml.transform.Source access$1(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventReader r0;
        javax.xml.transform.Source $r1;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        $r1 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: javax.xml.transform.Source createStaxSource(javax.xml.stream.XMLEventReader)>(r0);

        return $r1;
    }

    static boolean access$2(javax.xml.transform.Source)
    {
        javax.xml.transform.Source r0;
        boolean $z0;

        r0 := @parameter0: javax.xml.transform.Source;

        $z0 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: boolean isStaxSource(javax.xml.transform.Source)>(r0);

        return $z0;
    }

    static javax.xml.transform.Result access$3(javax.xml.stream.XMLStreamWriter)
    {
        javax.xml.stream.XMLStreamWriter r0;
        javax.xml.transform.Result $r1;

        r0 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r1 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: javax.xml.transform.Result createStaxResult(javax.xml.stream.XMLStreamWriter)>(r0);

        return $r1;
    }

    static javax.xml.transform.Result access$4(javax.xml.stream.XMLEventWriter)
    {
        javax.xml.stream.XMLEventWriter r0;
        javax.xml.transform.Result $r1;

        r0 := @parameter0: javax.xml.stream.XMLEventWriter;

        $r1 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: javax.xml.transform.Result createStaxResult(javax.xml.stream.XMLEventWriter)>(r0);

        return $r1;
    }

    static boolean access$5(javax.xml.transform.Result)
    {
        javax.xml.transform.Result r0;
        boolean $z0;

        r0 := @parameter0: javax.xml.transform.Result;

        $z0 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: boolean isStaxResult(javax.xml.transform.Result)>(r0);

        return $z0;
    }

    static javax.xml.stream.XMLStreamReader access$6(javax.xml.transform.Source)
    {
        javax.xml.transform.Source r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @parameter0: javax.xml.transform.Source;

        $r1 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: javax.xml.stream.XMLStreamReader getXMLStreamReader(javax.xml.transform.Source)>(r0);

        return $r1;
    }

    static javax.xml.stream.XMLEventReader access$7(javax.xml.transform.Source)
    {
        javax.xml.stream.XMLEventReader $r1;
        javax.xml.transform.Source r0;

        r0 := @parameter0: javax.xml.transform.Source;

        $r1 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: javax.xml.stream.XMLEventReader getXMLEventReader(javax.xml.transform.Source)>(r0);

        return $r1;
    }

    static javax.xml.stream.XMLStreamWriter access$8(javax.xml.transform.Result)
    {
        javax.xml.transform.Result r0;
        javax.xml.stream.XMLStreamWriter $r1;

        r0 := @parameter0: javax.xml.transform.Result;

        $r1 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: javax.xml.stream.XMLStreamWriter getXMLStreamWriter(javax.xml.transform.Result)>(r0);

        return $r1;
    }

    static javax.xml.stream.XMLEventWriter access$9(javax.xml.transform.Result)
    {
        javax.xml.transform.Result r0;
        javax.xml.stream.XMLEventWriter $r1;

        r0 := @parameter0: javax.xml.transform.Result;

        $r1 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: javax.xml.stream.XMLEventWriter getXMLEventWriter(javax.xml.transform.Result)>(r0);

        return $r1;
    }
}
