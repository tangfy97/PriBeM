class org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3 extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener
{
    java.util.Set missingWavelets;
    final java.util.Map val$expectedWavelets;
    final int val$expectedTag;
    final org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0;

    void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl, java.util.Map, int)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3 r0;
        java.util.HashSet $r5;
        java.util.Map r2, $r3;
        int i0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r1;
        java.util.Set $r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r2 := @parameter1: java.util.Map;

        i0 := @parameter2: int;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: java.util.Map val$expectedWavelets> = r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: int val$expectedTag> = i0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: java.util.Map val$expectedWavelets>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashSet newHashSet(java.util.Collection)>($r4);

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: java.util.Set missingWavelets> = $r5;

        return;
    }

    public void onSnapshot(org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.wave.data.ObservableWaveletData, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        java.util.Map $r4, $r10, $r19, $r24;
        boolean $z0;
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility $r16, $r21;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener $r14;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r26, $r28;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3 r0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl $r1, $r3, $r9, $r11, $r13, $r17, $r18, $r22, $r23, $r27;
        org.waveprotocol.wave.model.id.WaveletId r2;
        org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory $r12;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet r29;
        int $i0, $i1;
        org.waveprotocol.wave.model.version.HashedVersion r7, r8;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r6;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel $r15;
        java.lang.Object $r5, $r20, $r25;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        r7 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        r8 := @parameter3: org.waveprotocol.wave.model.version.HashedVersion;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $i0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: int access$000(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r1);

        $i1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: int val$expectedTag>;

        if $i0 != $i1 goto label6;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: void removeMissingWavelet(org.waveprotocol.wave.model.id.WaveletId)>(r2);

     label1:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map access$100(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r3);

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r29 = (org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet) $r5;

        if r29 != null goto label2;

        $r22 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r21 = <org.waveprotocol.wave.concurrencycontrol.channel.Accessibility: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility READ_WRITE>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet access$200(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.concurrencycontrol.channel.Accessibility,boolean)>($r22, r2, r6, $r21, 0);

        $r23 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r24 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map access$100(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r23);

        $r25 = interfaceinvoke $r24.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r29 = (org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet) $r25;

        goto label3;

     label2:
        $z0 = virtualinvoke r29.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: boolean isExpectingSnapshot()>();

        if $z0 != 0 goto label3;

        $r9 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r10 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map access$100(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r9);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        $r11 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r12 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory access$300(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r11);

        interfaceinvoke $r12.<org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListenerFactory: void destroy(org.waveprotocol.wave.model.id.WaveletId)>(r2);

        $r13 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r14 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener access$400(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r13);

        $r15 = virtualinvoke r29.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel getOperationChannel()>();

        interfaceinvoke $r14.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer$Listener: void onOperationChannelRemoved(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel,org.waveprotocol.wave.model.id.WaveletId)>($r15, r2);

        $r17 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r16 = <org.waveprotocol.wave.concurrencycontrol.channel.Accessibility: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility READ_WRITE>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet access$200(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.concurrencycontrol.channel.Accessibility,boolean)>($r17, r2, r6, $r16, 0);

        $r18 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r19 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map access$100(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r18);

        $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r29 = (org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet) $r20;

     label3:
        virtualinvoke r29.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: void onWaveletSnapshot(org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>(r6, r7, r8);

     label4:
        goto label6;

     label5:
        $r26 := @caughtexception;

        $r27 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r28 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.common.ChannelException access$500(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl,org.waveprotocol.wave.concurrencycontrol.common.ChannelException,org.waveprotocol.wave.model.id.WaveletId)>($r27, $r26, r2);

        throw $r28;

     label6:
        return;

        catch org.waveprotocol.wave.concurrencycontrol.common.ChannelException from label1 to label4 with label5;
    }

    public void onUpdate(org.waveprotocol.wave.model.id.WaveletId, java.util.List, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        java.lang.IllegalStateException $r12;
        org.waveprotocol.wave.common.logging.Logger $r4;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl $r1, $r2, $r7, $r14;
        org.waveprotocol.wave.model.id.WaveletId r5;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet r16;
        java.util.Map $r8;
        int $i0, $i1;
        org.waveprotocol.wave.model.version.HashedVersion r10, r11;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r13, $r15;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3 r0;
        java.util.List r6;
        java.lang.Object $r9;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3;

        r5 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r6 := @parameter1: java.util.List;

        r10 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        r11 := @parameter3: org.waveprotocol.wave.model.version.HashedVersion;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $i0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: int access$000(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r1);

        $i1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: int val$expectedTag>;

        if $i0 != $i1 goto label5;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: void removeMissingWavelet(org.waveprotocol.wave.model.id.WaveletId)>(r5);

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: void maybeResetScheduler(java.util.List)>(r6);

     label1:
        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r8 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map access$100(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r7);

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r16 = (org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet) $r9;

        if r16 != null goto label2;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Received deltas with no stacklet present!");

        throw $r12;

     label2:
        virtualinvoke r16.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: void onWaveletUpdate(java.util.List,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>(r6, r10, r11);

     label3:
        goto label6;

     label4:
        $r13 := @caughtexception;

        $r14 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r15 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.common.ChannelException access$500(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl,org.waveprotocol.wave.concurrencycontrol.common.ChannelException,org.waveprotocol.wave.model.id.WaveletId)>($r14, $r13, r5);

        throw $r15;

     label5:
        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.common.logging.LoggerBundle access$600(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r2);

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Mux dropping update from defunct view");

     label6:
        return;

        catch org.waveprotocol.wave.concurrencycontrol.common.ChannelException from label1 to label3 with label4;
    }

    public void onOpenFinished() throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        byte $b3;
        java.util.Map $r22, $r32, $r46, $r50;
        org.waveprotocol.wave.model.id.WaveletName $r37;
        org.waveprotocol.wave.model.id.WaveId $r19, $r36, $r58;
        java.util.Set $r5, $r6, $r8, $r14, $r47, $r51;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r10, $r54;
        java.lang.StringBuilder $r11, $r13, $r15, $r25, $r26, $r27, $r43, $r44, $r48, $r49, $r52;
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r18, $r57;
        org.waveprotocol.wave.common.logging.Logger $r4;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl $r1, $r2, $r9, $r17, $r31, $r35, $r38, $r40, $r45, $r55;
        org.waveprotocol.wave.model.id.WaveletId r21;
        long $l2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet r34;
        org.waveprotocol.wave.model.version.HashedVersionFactory $r41;
        org.waveprotocol.wave.model.version.HashedVersion $r30, $r42;
        java.lang.String $r16, $r28, $r53;
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode $r12, $r56;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3 r0;
        java.util.List r24, $r39;
        int $i0, $i1;
        java.util.Iterator $r7;
        java.lang.Object $r20, $r23, $r29, $r33;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $i0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: int access$000(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r1);

        $i1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: int val$expectedTag>;

        if $i0 != $i1 goto label09;

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: java.util.Set missingWavelets>;

        if $r5 != null goto label01;

        $r54 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r56 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode INTERNAL_ERROR>;

        $r57 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        $r55 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r58 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.WaveId access$700(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r55);

        specialinvoke $r54.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,java.lang.Throwable,org.waveprotocol.wave.concurrencycontrol.common.Recoverable,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r56, "Multiplexer received openFinished twice", null, $r57, $r58, null);

        throw $r54;

     label01:
        $r6 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: java.util.Set missingWavelets>;

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r20 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.waveprotocol.wave.model.id.WaveletId) $r20;

        $r22 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: java.util.Map val$expectedWavelets>;

        $r23 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>(r21);

        r24 = (java.util.List) $r23;

        $z2 = interfaceinvoke r24.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty resync versions for wavelet ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z3, $r28);

        $r29 = interfaceinvoke r24.<java.util.List: java.lang.Object get(int)>(0);

        $r30 = (org.waveprotocol.wave.model.version.HashedVersion) $r29;

        $l2 = virtualinvoke $r30.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label06;

        $r31 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r32 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map access$100(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r31);

        $r33 = interfaceinvoke $r32.<java.util.Map: java.lang.Object get(java.lang.Object)>(r21);

        r34 = (org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet) $r33;

        if r34 != null goto label05;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resync wavelet has no stacklet. Channels: ");

        $r45 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r46 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.Map access$100(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r45);

        $r47 = interfaceinvoke $r46.<java.util.Map: java.util.Set keySet()>();

        $r48 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", resync: ");

        $r50 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: java.util.Map val$expectedWavelets>;

        $r51 = interfaceinvoke $r50.<java.util.Map: java.util.Set keySet()>();

        $r52 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalState(java.lang.Object)>($r53);

     label05:
        $r35 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r36 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.WaveId access$700(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r35);

        $r37 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r36, r21);

        $r38 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r39 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: java.util.List access$800(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl,org.waveprotocol.wave.model.id.WaveletName)>($r38, $r37);

        $r40 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r41 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.version.HashedVersionFactory access$900(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r40);

        $r42 = interfaceinvoke $r41.<org.waveprotocol.wave.model.version.HashedVersionFactory: org.waveprotocol.wave.model.version.HashedVersion createVersionZero(org.waveprotocol.wave.model.id.WaveletName)>($r37);

        virtualinvoke r34.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: void onWaveletUpdate(java.util.List,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>($r39, $r42, $r42);

        interfaceinvoke $r7.<java.util.Iterator: void remove()>();

     label06:
        goto label02;

     label07:
        $r8 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: java.util.Set missingWavelets>;

        $z1 = interfaceinvoke $r8.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label08;

        $r10 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r12 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode NOT_AUTHORIZED>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Server didn\'t acknowledge known wavelets; perhaps access has been lost: ");

        $r14 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: java.util.Set missingWavelets>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        $r17 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r19 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.WaveId access$700(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r17);

        specialinvoke $r10.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,java.lang.Throwable,org.waveprotocol.wave.concurrencycontrol.common.Recoverable,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r12, $r16, null, $r18, $r19, null);

        throw $r10;

     label08:
        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: java.util.Set missingWavelets> = null;

        $r9 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void access$1000(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r9);

        goto label10;

     label09:
        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.common.logging.LoggerBundle access$600(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r2);

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Mux dropping openFinished from defunct view");

     label10:
        return;
    }

    public void onConnected()
    {
        org.waveprotocol.wave.common.logging.Logger $r4;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl $r1, $r2, $r5;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3 r0;
        int $i0, $i1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $i0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: int access$000(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r1);

        $i1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: int val$expectedTag>;

        if $i0 != $i1 goto label1;

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void access$1100(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r5);

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.common.logging.LoggerBundle access$600(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r2);

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Mux dropping onConnected from defunct view");

     label2:
        return;
    }

    public void onClosed()
    {
        org.waveprotocol.wave.common.logging.Logger $r4;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl $r1, $r2, $r5;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3 r0;
        int $i0, $i1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $i0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: int access$000(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r1);

        $i1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: int val$expectedTag>;

        if $i0 != $i1 goto label1;

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void access$1200(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl,org.waveprotocol.wave.concurrencycontrol.common.ChannelException)>($r5, null);

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.common.logging.LoggerBundle access$600(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r2);

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Mux dropping onClosed from defunct view");

     label2:
        return;
    }

    public void onException(org.waveprotocol.wave.concurrencycontrol.common.ChannelException)
    {
        org.waveprotocol.wave.common.logging.Logger $r4;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl $r1, $r2, $r6;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException r5;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3 r0;
        int $i0, $i1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3;

        r5 := @parameter0: org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $i0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: int access$000(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r1);

        $i1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: int val$expectedTag>;

        if $i0 != $i1 goto label1;

        $r6 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void access$1300(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl,org.waveprotocol.wave.concurrencycontrol.common.ChannelException)>($r6, r5);

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.common.logging.LoggerBundle access$600(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r2);

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Mux dropping failure from defunct view");

     label2:
        return;
    }

    private void removeMissingWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3 r0;
        java.util.Set $r1, $r3;
        org.waveprotocol.wave.model.id.WaveletId r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: java.util.Set missingWavelets>;

        if $r1 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: java.util.Set missingWavelets>;

        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r2);

     label1:
        return;
    }

    private void maybeResetScheduler(java.util.List)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3 r1;
        java.util.List r0;
        org.waveprotocol.wave.model.util.Scheduler $r3;
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl $r2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.util.Scheduler access$1400(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r2);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.Scheduler: void reset()>();

     label1:
        return;
    }
}
