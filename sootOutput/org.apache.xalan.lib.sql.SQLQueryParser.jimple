public class org.apache.xalan.lib.sql.SQLQueryParser extends java.lang.Object
{
    private boolean m_InlineVariables;
    private boolean m_IsCallable;
    private java.lang.String m_OrigQuery;
    private java.lang.StringBuffer m_ParsedQuery;
    private java.util.Vector m_Parameters;
    private boolean m_hasOutput;
    private boolean m_HasParameters;
    public static final int NO_OVERRIDE;
    public static final int NO_INLINE_PARSER;
    public static final int INLINE_PARSER;

    public void <init>()
    {
        org.apache.xalan.lib.sql.SQLQueryParser r0;

        r0 := @this: org.apache.xalan.lib.sql.SQLQueryParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_InlineVariables> = 0;

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_IsCallable> = 0;

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.String m_OrigQuery> = null;

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.StringBuffer m_ParsedQuery> = null;

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: java.util.Vector m_Parameters> = null;

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_hasOutput> = 0;

        specialinvoke r0.<org.apache.xalan.lib.sql.SQLQueryParser: void init()>();

        return;
    }

    private void <init>(java.lang.String)
    {
        org.apache.xalan.lib.sql.SQLQueryParser r0;
        java.lang.String r1;

        r0 := @this: org.apache.xalan.lib.sql.SQLQueryParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_InlineVariables> = 0;

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_IsCallable> = 0;

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.String m_OrigQuery> = null;

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.StringBuffer m_ParsedQuery> = null;

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: java.util.Vector m_Parameters> = null;

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_hasOutput> = 0;

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.String m_OrigQuery> = r1;

        return;
    }

    private void init()
    {
        org.apache.xalan.lib.sql.SQLQueryParser r0;

        r0 := @this: org.apache.xalan.lib.sql.SQLQueryParser;

        return;
    }

    public org.apache.xalan.lib.sql.SQLQueryParser parse(org.apache.xalan.lib.sql.XConnection, java.lang.String, int)
    {
        org.apache.xalan.lib.sql.SQLQueryParser $r0, r3;
        int i0;
        java.lang.String r1;
        org.apache.xalan.lib.sql.XConnection r2;

        r3 := @this: org.apache.xalan.lib.sql.SQLQueryParser;

        r2 := @parameter0: org.apache.xalan.lib.sql.XConnection;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r0 = new org.apache.xalan.lib.sql.SQLQueryParser;

        specialinvoke $r0.<org.apache.xalan.lib.sql.SQLQueryParser: void <init>(java.lang.String)>(r1);

        specialinvoke $r0.<org.apache.xalan.lib.sql.SQLQueryParser: void parse(org.apache.xalan.lib.sql.XConnection,int)>(r2, i0);

        return $r0;
    }

    private void parse(org.apache.xalan.lib.sql.XConnection, int)
    {
        org.apache.xalan.lib.sql.SQLQueryParser r0;
        int i0;
        org.apache.xalan.lib.sql.XConnection r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.xalan.lib.sql.SQLQueryParser;

        r1 := @parameter0: org.apache.xalan.lib.sql.XConnection;

        i0 := @parameter1: int;

        $r2 = "true";

        $r3 = virtualinvoke r1.<org.apache.xalan.lib.sql.XConnection: java.lang.String getFeature(java.lang.String)>("inline-variables");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_InlineVariables> = $z0;

        if i0 != 1 goto label1;

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_InlineVariables> = 0;

        goto label2;

     label1:
        if i0 != 2 goto label2;

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_InlineVariables> = 1;

     label2:
        $z1 = r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_InlineVariables>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.apache.xalan.lib.sql.SQLQueryParser: void inlineParser()>();

     label3:
        return;
    }

    public boolean hasParameters()
    {
        org.apache.xalan.lib.sql.SQLQueryParser r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.SQLQueryParser;

        $z0 = r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_HasParameters>;

        return $z0;
    }

    public boolean isCallable()
    {
        org.apache.xalan.lib.sql.SQLQueryParser r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.SQLQueryParser;

        $z0 = r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_IsCallable>;

        return $z0;
    }

    public java.util.Vector getParameters()
    {
        org.apache.xalan.lib.sql.SQLQueryParser r0;
        java.util.Vector $r1;

        r0 := @this: org.apache.xalan.lib.sql.SQLQueryParser;

        $r1 = r0.<org.apache.xalan.lib.sql.SQLQueryParser: java.util.Vector m_Parameters>;

        return $r1;
    }

    public void setParameters(java.util.Vector)
    {
        org.apache.xalan.lib.sql.SQLQueryParser r0;
        java.util.Vector r1;

        r0 := @this: org.apache.xalan.lib.sql.SQLQueryParser;

        r1 := @parameter0: java.util.Vector;

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_HasParameters> = 1;

        r0.<org.apache.xalan.lib.sql.SQLQueryParser: java.util.Vector m_Parameters> = r1;

        return;
    }

    public java.lang.String getSQLQuery()
    {
        org.apache.xalan.lib.sql.SQLQueryParser r0;
        java.lang.StringBuffer $r2;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.SQLQueryParser;

        $z0 = r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_InlineVariables>;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.StringBuffer m_ParsedQuery>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

     label1:
        $r1 = r0.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.String m_OrigQuery>;

        return $r1;
    }

    public void populateStatement(java.sql.PreparedStatement, org.apache.xalan.extensions.ExpressionContext)
    {
        org.apache.xalan.extensions.ExpressionContext r6;
        java.util.Vector $r1, $r12;
        org.apache.xalan.lib.sql.QueryParameter r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9;
        java.lang.String $r4, $r8;
        boolean $z0;
        org.apache.xalan.lib.sql.SQLQueryParser r0;
        org.apache.xml.utils.QName $r7;
        java.sql.PreparedStatement r5;
        java.lang.Exception $r11;
        org.apache.xpath.objects.XObject $r9;
        java.lang.Object $r2, $r10;

        r0 := @this: org.apache.xalan.lib.sql.SQLQueryParser;

        r5 := @parameter0: java.sql.PreparedStatement;

        r6 := @parameter1: org.apache.xalan.extensions.ExpressionContext;

        i8 = 0;

        goto label10;

     label01:
        $r1 = r0.<org.apache.xalan.lib.sql.SQLQueryParser: java.util.Vector m_Parameters>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i8);

        r3 = (org.apache.xalan.lib.sql.QueryParameter) $r2;

     label02:
        $z0 = r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_InlineVariables>;

        if $z0 == 0 goto label05;

        $r7 = new org.apache.xml.utils.QName;

        $r8 = virtualinvoke r3.<org.apache.xalan.lib.sql.QueryParameter: java.lang.String getName()>();

        specialinvoke $r7.<org.apache.xml.utils.QName: void <init>(java.lang.String)>($r8);

        $r9 = interfaceinvoke r6.<org.apache.xalan.extensions.ExpressionContext: org.apache.xpath.objects.XObject getVariableOrParam(org.apache.xml.utils.QName)>($r7);

        if $r9 == null goto label03;

        $i6 = i8 + 1;

        $r10 = virtualinvoke $r9.<org.apache.xpath.objects.XObject: java.lang.Object object()>();

        $i7 = virtualinvoke r3.<org.apache.xalan.lib.sql.QueryParameter: int getType()>();

        interfaceinvoke r5.<java.sql.PreparedStatement: void setObject(int,java.lang.Object,int,int)>($i6, $r10, $i7, 4);

        goto label04;

     label03:
        $i4 = i8 + 1;

        $i5 = virtualinvoke r3.<org.apache.xalan.lib.sql.QueryParameter: int getType()>();

        interfaceinvoke r5.<java.sql.PreparedStatement: void setNull(int,int)>($i4, $i5);

     label04:
        goto label07;

     label05:
        $r4 = virtualinvoke r3.<org.apache.xalan.lib.sql.QueryParameter: java.lang.String getValue()>();

        if $r4 == null goto label06;

        $i2 = i8 + 1;

        $i3 = virtualinvoke r3.<org.apache.xalan.lib.sql.QueryParameter: int getType()>();

        interfaceinvoke r5.<java.sql.PreparedStatement: void setObject(int,java.lang.Object,int,int)>($i2, $r4, $i3, 4);

        goto label07;

     label06:
        $i0 = i8 + 1;

        $i1 = virtualinvoke r3.<org.apache.xalan.lib.sql.QueryParameter: int getType()>();

        interfaceinvoke r5.<java.sql.PreparedStatement: void setNull(int,int)>($i0, $i1);

     label07:
        goto label09;

     label08:
        $r11 := @caughtexception;

     label09:
        i8 = i8 + 1;

     label10:
        $r12 = r0.<org.apache.xalan.lib.sql.SQLQueryParser: java.util.Vector m_Parameters>;

        $i9 = virtualinvoke $r12.<java.util.Vector: int size()>();

        if i8 < $i9 goto label01;

        return;

        catch java.lang.Exception from label02 to label07 with label08;
    }

    public void registerOutputParameters(java.sql.CallableStatement) throws java.sql.SQLException
    {
        org.apache.xalan.lib.sql.SQLQueryParser r0;
        java.util.Vector $r1, $r5;
        org.apache.xalan.lib.sql.QueryParameter r3;
        int $i0, $i1, i2, $i3;
        java.sql.CallableStatement r4;
        java.lang.Object $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xalan.lib.sql.SQLQueryParser;

        r4 := @parameter0: java.sql.CallableStatement;

        $z0 = r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_IsCallable>;

        if $z0 == 0 goto label4;

        $z1 = r0.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_hasOutput>;

        if $z1 == 0 goto label4;

        i2 = 0;

        goto label3;

     label1:
        $r1 = r0.<org.apache.xalan.lib.sql.SQLQueryParser: java.util.Vector m_Parameters>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        r3 = (org.apache.xalan.lib.sql.QueryParameter) $r2;

        $z2 = virtualinvoke r3.<org.apache.xalan.lib.sql.QueryParameter: boolean isOutput()>();

        if $z2 == 0 goto label2;

        $i0 = i2 + 1;

        $i1 = virtualinvoke r3.<org.apache.xalan.lib.sql.QueryParameter: int getType()>();

        interfaceinvoke r4.<java.sql.CallableStatement: void registerOutParameter(int,int)>($i0, $i1);

     label2:
        i2 = i2 + 1;

     label3:
        $r5 = r0.<org.apache.xalan.lib.sql.SQLQueryParser: java.util.Vector m_Parameters>;

        $i3 = virtualinvoke $r5.<java.util.Vector: int size()>();

        if i2 < $i3 goto label1;

     label4:
        return;
    }

    protected void inlineParser()
    {
        java.util.Vector $r2, $r11, $r27;
        byte b5;
        org.apache.xalan.lib.sql.QueryParameter r19, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8;
        java.lang.StringBuffer $r3, $r14, $r15, $r16, r20, $r21, $r22, $r24, $r26, $r28, $r29, $r31, $r32, $r33;
        int $i1, $i2, $i3, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.lang.String $r4, $r5, $r7, $r10, $r13, $r25;
        org.apache.xalan.lib.sql.SQLQueryParser r1;
        char $c0, $c4;

        r1 := @this: org.apache.xalan.lib.sql.SQLQueryParser;

        r19 = null;

        b5 = 0;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        r20 = $r26;

        z8 = 1;

        $r2 = r1.<org.apache.xalan.lib.sql.SQLQueryParser: java.util.Vector m_Parameters>;

        if $r2 != null goto label01;

        $r27 = new java.util.Vector;

        specialinvoke $r27.<java.util.Vector: void <init>()>();

        r1.<org.apache.xalan.lib.sql.SQLQueryParser: java.util.Vector m_Parameters> = $r27;

     label01:
        $r3 = r1.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.StringBuffer m_ParsedQuery>;

        if $r3 != null goto label02;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        r1.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.StringBuffer m_ParsedQuery> = $r28;

     label02:
        i6 = 0;

        goto label32;

     label03:
        $r4 = r1.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.String m_OrigQuery>;

        $c0 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(i6);

        tableswitch(b5)
        {
            case 0: goto label04;
            case 1: goto label09;
            case 2: goto label12;
            case 3: goto label13;
            case 4: goto label20;
            case 5: goto label21;
            case 6: goto label24;
            case 7: goto label25;
            case 8: goto label28;
            default: goto label31;
        };

     label04:
        $i8 = (int) $c0;

        if $i8 != 39 goto label05;

        b5 = 1;

        goto label08;

     label05:
        $i9 = (int) $c0;

        if $i9 != 63 goto label06;

        b5 = 4;

        goto label08;

     label06:
        if z8 == 0 goto label08;

        $z6 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c0);

        if $z6 != 0 goto label07;

        $i10 = (int) $c0;

        if $i10 != 35 goto label08;

     label07:
        virtualinvoke r20.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        b5 = 3;

     label08:
        $r21 = r1.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.StringBuffer m_ParsedQuery>;

        virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label31;

     label09:
        $i11 = (int) $c0;

        if $i11 != 39 goto label10;

        b5 = 0;

        goto label11;

     label10:
        $i12 = (int) $c0;

        if $i12 != 92 goto label11;

        b5 = 2;

     label11:
        $r22 = r1.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.StringBuffer m_ParsedQuery>;

        virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label31;

     label12:
        b5 = 1;

        $r14 = r1.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.StringBuffer m_ParsedQuery>;

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label31;

     label13:
        $z4 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c0);

        if $z4 != 0 goto label14;

        $i13 = (int) $c0;

        if $i13 == 35 goto label14;

        $i14 = (int) $c0;

        if $i14 != 95 goto label15;

     label14:
        virtualinvoke r20.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label19;

     label15:
        $r13 = virtualinvoke r20.<java.lang.StringBuffer: java.lang.String toString()>();

        $z5 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("call");

        if $z5 == 0 goto label16;

        r1.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_IsCallable> = 1;

        if r19 == null goto label16;

        virtualinvoke r19.<org.apache.xalan.lib.sql.QueryParameter: void setIsOutput(boolean)>(1);

     label16:
        z8 = 0;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        r20 = $r29;

        $i15 = (int) $c0;

        if $i15 != 39 goto label17;

        b5 = 1;

        goto label19;

     label17:
        $i16 = (int) $c0;

        if $i16 != 63 goto label18;

        b5 = 4;

        goto label19;

     label18:
        b5 = 0;

     label19:
        $r24 = r1.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.StringBuffer m_ParsedQuery>;

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label31;

     label20:
        $i17 = (int) $c0;

        if $i17 != 91 goto label31;

        b5 = 5;

        goto label31;

     label21:
        $z3 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        if $z3 != 0 goto label22;

        $i18 = (int) $c0;

        if $i18 == 61 goto label22;

        $c4 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        virtualinvoke r20.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        goto label31;

     label22:
        $i3 = virtualinvoke r20.<java.lang.StringBuffer: int length()>();

        if $i3 <= 0 goto label31;

        r1.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_HasParameters> = 1;

        $r30 = new org.apache.xalan.lib.sql.QueryParameter;

        specialinvoke $r30.<org.apache.xalan.lib.sql.QueryParameter: void <init>()>();

        r19 = $r30;

        $r10 = virtualinvoke r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r30.<org.apache.xalan.lib.sql.QueryParameter: void setTypeName(java.lang.String)>($r10);

        $r11 = r1.<org.apache.xalan.lib.sql.SQLQueryParser: java.util.Vector m_Parameters>;

        virtualinvoke $r11.<java.util.Vector: void addElement(java.lang.Object)>($r30);

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        r20 = $r31;

        $i19 = (int) $c0;

        if $i19 != 61 goto label23;

        b5 = 7;

        goto label31;

     label23:
        b5 = 6;

        goto label31;

     label24:
        $i20 = (int) $c0;

        if $i20 != 61 goto label31;

        b5 = 7;

        goto label31;

     label25:
        $z2 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        if $z2 != 0 goto label26;

        $i21 = (int) $c0;

        if $i21 == 93 goto label26;

        virtualinvoke r20.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label31;

     label26:
        $i2 = virtualinvoke r20.<java.lang.StringBuffer: int length()>();

        if $i2 <= 0 goto label31;

        $r7 = virtualinvoke r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r19.<org.apache.xalan.lib.sql.QueryParameter: void setName(java.lang.String)>($r7);

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        r20 = $r32;

        $i22 = (int) $c0;

        if $i22 != 93 goto label27;

        b5 = 0;

        goto label31;

     label27:
        b5 = 8;

        goto label31;

     label28:
        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        if $z0 != 0 goto label29;

        $i23 = (int) $c0;

        if $i23 == 93 goto label29;

        virtualinvoke r20.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label31;

     label29:
        $i1 = virtualinvoke r20.<java.lang.StringBuffer: int length()>();

        if $i1 <= 0 goto label31;

        virtualinvoke r20.<java.lang.StringBuffer: void setLength(int)>(3);

        $r5 = virtualinvoke r20.<java.lang.StringBuffer: java.lang.String toString()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("OUT");

        if $z1 == 0 goto label30;

        virtualinvoke r19.<org.apache.xalan.lib.sql.QueryParameter: void setIsOutput(boolean)>(1);

        r1.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_hasOutput> = 1;

     label30:
        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        r20 = $r33;

        $i24 = (int) $c0;

        if $i24 != 93 goto label31;

        b5 = 0;

     label31:
        i6 = i6 + 1;

     label32:
        $r25 = r1.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.String m_OrigQuery>;

        $i7 = virtualinvoke $r25.<java.lang.String: int length()>();

        if i6 < $i7 goto label03;

        $z7 = r1.<org.apache.xalan.lib.sql.SQLQueryParser: boolean m_IsCallable>;

        if $z7 == 0 goto label33;

        $r15 = r1.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.StringBuffer m_ParsedQuery>;

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>(0, 123);

        $r16 = r1.<org.apache.xalan.lib.sql.SQLQueryParser: java.lang.StringBuffer m_ParsedQuery>;

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

     label33:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.xalan.lib.sql.SQLQueryParser: int INLINE_PARSER> = 2;

        <org.apache.xalan.lib.sql.SQLQueryParser: int NO_INLINE_PARSER> = 1;

        <org.apache.xalan.lib.sql.SQLQueryParser: int NO_OVERRIDE> = 0;

        return;
    }
}
