public class org.apache.poi.ss.format.SimpleFraction extends java.lang.Object
{
    private final int denominator;
    private final int numerator;

    public static org.apache.poi.ss.format.SimpleFraction buildFractionExactDenominator(double, int)
    {
        org.apache.poi.ss.format.SimpleFraction $r0;
        int i0, i2;
        long $l1;
        double d0, $d1, $d2;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $d1 = (double) i0;

        $d2 = d0 * $d1;

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d2);

        i2 = (int) $l1;

        $r0 = new org.apache.poi.ss.format.SimpleFraction;

        specialinvoke $r0.<org.apache.poi.ss.format.SimpleFraction: void <init>(int,int)>(i2, i0);

        return $r0;
    }

    public static org.apache.poi.ss.format.SimpleFraction buildFractionMaxDenominator(double, int)
    {
        int i0;
        org.apache.poi.ss.format.SimpleFraction $r0;
        double d0;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $r0 = staticinvoke <org.apache.poi.ss.format.SimpleFraction: org.apache.poi.ss.format.SimpleFraction buildFractionMaxDenominator(double,double,int,int)>(d0, 0.0, i0, 100);

        return $r0;
    }

    private static org.apache.poi.ss.format.SimpleFraction buildFractionMaxDenominator(double, double, int, int)
    {
        byte $b0, $b1, $b4, $b5, $b12, $b17, $b19, $b22, $b25, $b35;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r14, $r15, $r16, $r17, $r18, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r32, $r36, $r38;
        long $l2, $l3, $l7, $l8, $l9, $l11, $l18, $l20, $l21, $l23, $l24, l29, l30, l31, l32, l33;
        java.lang.String $r9, $r19, $r31;
        java.lang.RuntimeException $r37, $r39;
        boolean z0;
        int i6, i10, $i13, $i14, $i15, $i16, $i26, $i27, $i28, i34, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44;
        double d0, $d1, $d2, $d3, $d4, d5, $d6, $d7, $d8, $d9, $d10, d11, $d12, $d13, $d14, d15;
        org.apache.poi.ss.format.SimpleFraction $r34, $r35, $r40, $r41;
        java.lang.IllegalArgumentException $r33;

        d0 := @parameter0: double;

        d5 := @parameter1: double;

        i10 := @parameter2: int;

        i6 := @parameter3: int;

        d15 = d0;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>(d0);

        l29 = (long) $d1;

        $b0 = l29 cmp 2147483647L;

        $i36 = (int) $b0;

        if $i36 <= 0 goto label01;

        $r33 = new java.lang.IllegalArgumentException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Overflow trying to convert ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to fraction (");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l29);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(1L);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r31);

        throw $r33;

     label01:
        $d2 = (double) l29;

        $d3 = $d2 - d0;

        $d4 = staticinvoke <java.lang.Math: double abs(double)>($d3);

        $b1 = $d4 cmpg d5;

        $i37 = (int) $b1;

        if $i37 >= 0 goto label02;

        $r34 = new org.apache.poi.ss.format.SimpleFraction;

        $i28 = (int) l29;

        specialinvoke $r34.<org.apache.poi.ss.format.SimpleFraction: void <init>(int,int)>($i28, 1);

        return $r34;

     label02:
        l30 = 1L;

        l31 = 0L;

        l32 = l29;

        l33 = 1L;

        i34 = 0;

        z0 = 0;

     label03:
        i34 = i34 + 1;

        $d6 = (double) l29;

        $d7 = d15 - $d6;

        $d12 = 1.0 / $d7;

        $d8 = staticinvoke <java.lang.Math: double floor(double)>($d12);

        $l7 = (long) $d8;

        $l2 = $l7 * l32;

        $l8 = $l2 + l30;

        $l3 = $l7 * l33;

        $l9 = $l3 + l31;

        $b4 = d5 cmpl 0.0;

        if $b4 != 0 goto label04;

        if i10 <= 0 goto label04;

        $l20 = staticinvoke <java.lang.Math: long abs(long)>($l9);

        $l21 = (long) i10;

        $b22 = $l20 cmp $l21;

        $i38 = (int) $b22;

        if $i38 <= 0 goto label04;

        $l23 = staticinvoke <java.lang.Math: long abs(long)>(l33);

        $l24 = (long) i10;

        $b25 = $l23 cmp $l24;

        $i39 = (int) $b25;

        if $i39 >= 0 goto label04;

        $r35 = new org.apache.poi.ss.format.SimpleFraction;

        $i27 = (int) l32;

        $i26 = (int) l33;

        specialinvoke $r35.<org.apache.poi.ss.format.SimpleFraction: void <init>(int,int)>($i27, $i26);

        return $r35;

     label04:
        $b35 = $l8 cmp 2147483647L;

        $i40 = (int) $b35;

        if $i40 > 0 goto label05;

        $b5 = $l9 cmp 2147483647L;

        $i41 = (int) $b5;

        if $i41 <= 0 goto label06;

     label05:
        $r37 = new java.lang.RuntimeException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Overflow trying to convert ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to fraction (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r37;

     label06:
        $d10 = (double) $l8;

        $d9 = (double) $l9;

        d11 = $d10 / $d9;

        if i34 >= i6 goto label07;

        $d13 = d11 - d0;

        $d14 = staticinvoke <java.lang.Math: double abs(double)>($d13);

        $b17 = $d14 cmpl d5;

        $i42 = (int) $b17;

        if $i42 <= 0 goto label07;

        $l18 = (long) i10;

        $b19 = $l9 cmp $l18;

        $i43 = (int) $b19;

        if $i43 >= 0 goto label07;

        l30 = l32;

        l32 = $l8;

        l31 = l33;

        l33 = $l9;

        l29 = $l7;

        d15 = $d12;

        goto label08;

     label07:
        z0 = 1;

     label08:
        if z0 == 0 goto label03;

        if i34 < i6 goto label09;

        $r39 = new java.lang.RuntimeException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to convert ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to fraction after ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" iterations");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.lang.RuntimeException: void <init>(java.lang.String)>($r19);

        throw $r39;

     label09:
        $l11 = (long) i10;

        $b12 = $l9 cmp $l11;

        $i44 = (int) $b12;

        if $i44 >= 0 goto label10;

        $r40 = new org.apache.poi.ss.format.SimpleFraction;

        $i16 = (int) $l8;

        $i15 = (int) $l9;

        specialinvoke $r40.<org.apache.poi.ss.format.SimpleFraction: void <init>(int,int)>($i16, $i15);

        return $r40;

     label10:
        $r41 = new org.apache.poi.ss.format.SimpleFraction;

        $i14 = (int) l32;

        $i13 = (int) l33;

        specialinvoke $r41.<org.apache.poi.ss.format.SimpleFraction: void <init>(int,int)>($i14, $i13);

        return $r41;
    }

    public void <init>(int, int)
    {
        int i0, i1;
        org.apache.poi.ss.format.SimpleFraction r0;

        r0 := @this: org.apache.poi.ss.format.SimpleFraction;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.ss.format.SimpleFraction: int numerator> = i0;

        r0.<org.apache.poi.ss.format.SimpleFraction: int denominator> = i1;

        return;
    }

    public int getDenominator()
    {
        int $i0;
        org.apache.poi.ss.format.SimpleFraction r0;

        r0 := @this: org.apache.poi.ss.format.SimpleFraction;

        $i0 = r0.<org.apache.poi.ss.format.SimpleFraction: int denominator>;

        return $i0;
    }

    public int getNumerator()
    {
        int $i0;
        org.apache.poi.ss.format.SimpleFraction r0;

        r0 := @this: org.apache.poi.ss.format.SimpleFraction;

        $i0 = r0.<org.apache.poi.ss.format.SimpleFraction: int numerator>;

        return $i0;
    }
}
