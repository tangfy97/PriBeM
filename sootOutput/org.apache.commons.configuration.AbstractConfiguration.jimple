public abstract class org.apache.commons.configuration.AbstractConfiguration extends org.apache.commons.configuration.event.EventSource implements org.apache.commons.configuration.Configuration
{
    public static final int EVENT_ADD_PROPERTY;
    public static final int EVENT_CLEAR_PROPERTY;
    public static final int EVENT_SET_PROPERTY;
    public static final int EVENT_CLEAR;
    public static final int EVENT_READ_PROPERTY;
    protected static final java.lang.String START_TOKEN;
    protected static final java.lang.String END_TOKEN;
    private static final char DISABLED_DELIMITER;
    private static char defaultListDelimiter;
    private char listDelimiter;
    private boolean delimiterParsingDisabled;
    private boolean throwExceptionOnMissing;
    private org.apache.commons.lang.text.StrSubstitutor substitutor;
    private org.apache.commons.logging.Log log;

    public void <init>()
    {
        char $c0;
        org.apache.commons.configuration.AbstractConfiguration r0;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        specialinvoke r0.<org.apache.commons.configuration.event.EventSource: void <init>()>();

        $c0 = <org.apache.commons.configuration.AbstractConfiguration: char defaultListDelimiter>;

        r0.<org.apache.commons.configuration.AbstractConfiguration: char listDelimiter> = $c0;

        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void setLogger(org.apache.commons.logging.Log)>(null);

        return;
    }

    public static void setDefaultListDelimiter(char)
    {
        char c0;

        c0 := @parameter0: char;

        <org.apache.commons.configuration.AbstractConfiguration: char defaultListDelimiter> = c0;

        return;
    }

    public static void setDelimiter(char)
    {
        char c0;

        c0 := @parameter0: char;

        staticinvoke <org.apache.commons.configuration.AbstractConfiguration: void setDefaultListDelimiter(char)>(c0);

        return;
    }

    public static char getDefaultListDelimiter()
    {
        char $c0;

        $c0 = <org.apache.commons.configuration.AbstractConfiguration: char defaultListDelimiter>;

        return $c0;
    }

    public static char getDelimiter()
    {
        char $c0;

        $c0 = staticinvoke <org.apache.commons.configuration.AbstractConfiguration: char getDefaultListDelimiter()>();

        return $c0;
    }

    public void setListDelimiter(char)
    {
        char c0;
        org.apache.commons.configuration.AbstractConfiguration r0;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        c0 := @parameter0: char;

        r0.<org.apache.commons.configuration.AbstractConfiguration: char listDelimiter> = c0;

        return;
    }

    public char getListDelimiter()
    {
        char $c0;
        org.apache.commons.configuration.AbstractConfiguration r0;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        $c0 = r0.<org.apache.commons.configuration.AbstractConfiguration: char listDelimiter>;

        return $c0;
    }

    public boolean isDelimiterParsingDisabled()
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        $z0 = r0.<org.apache.commons.configuration.AbstractConfiguration: boolean delimiterParsingDisabled>;

        return $z0;
    }

    public void setDelimiterParsingDisabled(boolean)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        boolean z0;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.configuration.AbstractConfiguration: boolean delimiterParsingDisabled> = z0;

        return;
    }

    public void setThrowExceptionOnMissing(boolean)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        boolean z0;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.configuration.AbstractConfiguration: boolean throwExceptionOnMissing> = z0;

        return;
    }

    public boolean isThrowExceptionOnMissing()
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        $z0 = r0.<org.apache.commons.configuration.AbstractConfiguration: boolean throwExceptionOnMissing>;

        return $z0;
    }

    public synchronized org.apache.commons.lang.text.StrSubstitutor getSubstitutor()
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        org.apache.commons.lang.text.StrSubstitutor $r1, $r2, $r3;
        org.apache.commons.configuration.interpol.ConfigurationInterpolator $r4;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        $r1 = r0.<org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.lang.text.StrSubstitutor substitutor>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.lang.text.StrSubstitutor;

        $r4 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.configuration.interpol.ConfigurationInterpolator createInterpolator()>();

        specialinvoke $r3.<org.apache.commons.lang.text.StrSubstitutor: void <init>(org.apache.commons.lang.text.StrLookup)>($r4);

        r0.<org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.lang.text.StrSubstitutor substitutor> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.lang.text.StrSubstitutor substitutor>;

        return $r2;
    }

    public org.apache.commons.configuration.interpol.ConfigurationInterpolator getInterpolator()
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        org.apache.commons.lang.text.StrSubstitutor $r1;
        org.apache.commons.configuration.interpol.ConfigurationInterpolator $r3;
        org.apache.commons.lang.text.StrLookup $r2;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        $r1 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.lang.text.StrSubstitutor getSubstitutor()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.lang.text.StrSubstitutor: org.apache.commons.lang.text.StrLookup getVariableResolver()>();

        $r3 = (org.apache.commons.configuration.interpol.ConfigurationInterpolator) $r2;

        return $r3;
    }

    protected org.apache.commons.configuration.interpol.ConfigurationInterpolator createInterpolator()
    {
        org.apache.commons.configuration.interpol.ConfigurationInterpolator $r0;
        org.apache.commons.configuration.AbstractConfiguration$1 $r1;
        org.apache.commons.configuration.AbstractConfiguration r2;

        r2 := @this: org.apache.commons.configuration.AbstractConfiguration;

        $r0 = new org.apache.commons.configuration.interpol.ConfigurationInterpolator;

        specialinvoke $r0.<org.apache.commons.configuration.interpol.ConfigurationInterpolator: void <init>()>();

        $r1 = new org.apache.commons.configuration.AbstractConfiguration$1;

        specialinvoke $r1.<org.apache.commons.configuration.AbstractConfiguration$1: void <init>(org.apache.commons.configuration.AbstractConfiguration)>(r2);

        virtualinvoke $r0.<org.apache.commons.configuration.interpol.ConfigurationInterpolator: void setDefaultLookup(org.apache.commons.lang.text.StrLookup)>($r1);

        return $r0;
    }

    public org.apache.commons.logging.Log getLogger()
    {
        org.apache.commons.logging.Log $r1;
        org.apache.commons.configuration.AbstractConfiguration r0;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        $r1 = r0.<org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.logging.Log log>;

        return $r1;
    }

    public void setLogger(org.apache.commons.logging.Log)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        org.apache.commons.logging.impl.NoOpLog $r3;
        org.apache.commons.logging.Log r1, $r2;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: org.apache.commons.logging.Log;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.apache.commons.logging.impl.NoOpLog;

        $r2 = $r3;

        specialinvoke $r3.<org.apache.commons.logging.impl.NoOpLog: void <init>()>();

     label2:
        r0.<org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.logging.Log log> = $r2;

        return;
    }

    public void addErrorLogListener()
    {
        org.apache.commons.configuration.AbstractConfiguration$2 $r1;
        org.apache.commons.configuration.AbstractConfiguration r0;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        $r1 = new org.apache.commons.configuration.AbstractConfiguration$2;

        specialinvoke $r1.<org.apache.commons.configuration.AbstractConfiguration$2: void <init>(org.apache.commons.configuration.AbstractConfiguration)>(r0);

        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void addErrorListener(org.apache.commons.configuration.event.ConfigurationErrorListener)>($r1);

        return;
    }

    public void addProperty(java.lang.String, java.lang.Object)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.Object r2;
        char $c0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>(1, r1, r2, 1);

        $z0 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: boolean isDelimiterParsingDisabled()>();

        if $z0 == 0 goto label1;

        $c0 = 0;

        goto label2;

     label1:
        $c0 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: char getListDelimiter()>();

     label2:
        specialinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void addPropertyValues(java.lang.String,java.lang.Object,char)>(r1, r2, $c0);

        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>(1, r1, r2, 0);

        return;
    }

    protected abstract void addPropertyDirect(java.lang.String, java.lang.Object);

    private void addPropertyValues(java.lang.String, java.lang.Object, char)
    {
        org.apache.commons.configuration.AbstractConfiguration r2;
        java.util.Iterator $r1;
        java.lang.Object r0, $r4;
        char c0;
        java.lang.String r3;
        boolean $z0;

        r2 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        c0 := @parameter2: char;

        $r1 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.util.Iterator toIterator(java.lang.Object,char)>(r0, c0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r2.<org.apache.commons.configuration.AbstractConfiguration: void addPropertyDirect(java.lang.String,java.lang.Object)>(r3, $r4);

        goto label1;

     label2:
        return;
    }

    protected java.lang.String interpolate(java.lang.String)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.Object $r2;
        java.lang.String r1, $r3;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object interpolate(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

     label2:
        return $r3;
    }

    protected java.lang.Object interpolate(java.lang.Object)
    {
        java.lang.Object r0, $r2;
        org.apache.commons.configuration.AbstractConfiguration r1;

        r1 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r0 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Object interpolate(java.lang.Object,org.apache.commons.configuration.AbstractConfiguration)>(r0, r1);

        return $r2;
    }

    protected java.lang.String interpolateHelper(java.lang.String, java.util.List)
    {
        java.util.List r2;
        java.lang.String r0;
        org.apache.commons.configuration.AbstractConfiguration r1;

        r1 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        return r0;
    }

    public org.apache.commons.configuration.Configuration subset(java.lang.String)
    {
        org.apache.commons.configuration.AbstractConfiguration r1;
        java.lang.String r2;
        org.apache.commons.configuration.SubsetConfiguration $r0;

        r1 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.commons.configuration.SubsetConfiguration;

        specialinvoke $r0.<org.apache.commons.configuration.SubsetConfiguration: void <init>(org.apache.commons.configuration.Configuration,java.lang.String,java.lang.String)>(r1, r2, ".");

        return $r0;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        java.lang.Throwable $r3;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>(3, r1, r2, 1);

        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void setDetailEvents(boolean)>(0);

     label1:
        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void clearProperty(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void addProperty(java.lang.String,java.lang.Object)>(r1, r2);

     label2:
        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void setDetailEvents(boolean)>(1);

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void setDetailEvents(boolean)>(1);

        throw $r3;

     label5:
        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>(3, r1, r2, 0);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void clearProperty(java.lang.String)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>(2, r1, null, 1);

        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void clearPropertyDirect(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>(2, r1, null, 0);

        return;
    }

    protected void clearPropertyDirect(java.lang.String)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void clear()
    {
        java.lang.Throwable $r4;
        java.lang.UnsupportedOperationException $r5;
        java.util.Iterator $r1;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.Object $r2;
        java.lang.String r3;
        boolean $z0, $z1, z2, z3, z4, z5;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>(4, null, null, 1);

        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void setDetailEvents(boolean)>(0);

        z2 = 1;

        z5 = 1;

        z4 = 1;

        z3 = 1;

     label01:
        $r1 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.util.Iterator getKeys()>();

     label02:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        if z3 == 0 goto label06;

     label03:
        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

     label04:
        goto label06;

     label05:
        $r5 := @caughtexception;

        z2 = 0;

        z5 = 0;

        z4 = 0;

        z3 = 0;

     label06:
        if z5 == 0 goto label07;

        $z1 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: boolean containsKey(java.lang.String)>(r3);

        if $z1 == 0 goto label07;

        z2 = 0;

        z5 = 0;

        z4 = 0;

        z3 = 0;

     label07:
        if z4 != 0 goto label08;

        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void clearProperty(java.lang.String)>(r3);

     label08:
        goto label02;

     label09:
        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void setDetailEvents(boolean)>(1);

        goto label12;

     label10:
        $r4 := @caughtexception;

     label11:
        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void setDetailEvents(boolean)>(1);

        throw $r4;

     label12:
        virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>(4, null, null, 0);

        return;

        catch java.lang.UnsupportedOperationException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public java.util.Iterator getKeys(java.lang.String)
    {
        org.apache.commons.configuration.AbstractConfiguration r1;
        java.util.Iterator $r2;
        org.apache.commons.configuration.AbstractConfiguration$3 $r3;
        org.apache.commons.collections.iterators.FilterIterator $r0;
        java.lang.String r4;

        r1 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r4 := @parameter0: java.lang.String;

        $r0 = new org.apache.commons.collections.iterators.FilterIterator;

        $r2 = virtualinvoke r1.<org.apache.commons.configuration.AbstractConfiguration: java.util.Iterator getKeys()>();

        $r3 = new org.apache.commons.configuration.AbstractConfiguration$3;

        specialinvoke $r3.<org.apache.commons.configuration.AbstractConfiguration$3: void <init>(org.apache.commons.configuration.AbstractConfiguration,java.lang.String)>(r1, r4);

        specialinvoke $r0.<org.apache.commons.collections.iterators.FilterIterator: void <init>(java.util.Iterator,org.apache.commons.collections.Predicate)>($r2, $r3);

        return $r0;
    }

    public java.util.Properties getProperties(java.lang.String)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.String r1;
        java.util.Properties $r2;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.util.Properties getProperties(java.lang.String,java.util.Properties)>(r1, null);

        return $r2;
    }

    public java.util.Properties getProperties(java.lang.String, java.util.Properties)
    {
        java.lang.String[] $r2;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r7, $r8, $r9, $r10;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.String r1, r5, $r11, $r12, $r13, $r14, $r15, $r16;
        boolean $z0;
        java.util.Properties r3, r4, $r17;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Properties;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.String[] getStringArray(java.lang.String)>(r1);

        if r3 != null goto label1;

        $r17 = new java.util.Properties;

        specialinvoke $r17.<java.util.Properties: void <init>()>();

        goto label2;

     label1:
        $r17 = new java.util.Properties;

        specialinvoke $r17.<java.util.Properties: void <init>(java.util.Properties)>(r3);

     label2:
        r4 = $r17;

        i3 = 0;

     label3:
        $i4 = lengthof $r2;

        if i3 >= $i4 goto label7;

        r5 = $r2[i3];

        $i0 = virtualinvoke r5.<java.lang.String: int indexOf(int)>(61);

        if $i0 <= 0 goto label4;

        $r13 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>();

        $i2 = $i0 + 1;

        $r15 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>($i2);

        $r16 = virtualinvoke $r15.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r4.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r16);

        goto label6;

     label4:
        $i1 = lengthof $r2;

        if $i1 != 1 goto label5;

        $r12 = "";

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label5;

        goto label7;

     label5:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not contain an equals sign");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label6:
        i3 = i3 + 1;

        goto label3;

     label7:
        return r4;
    }

    public boolean getBoolean(java.lang.String)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        java.lang.Boolean $r2;
        java.lang.String r1, $r8;
        java.util.NoSuchElementException $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Boolean getBoolean(java.lang.String,java.lang.Boolean)>(r1, null);

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;

     label1:
        $r3 = new java.util.NoSuchElementException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to an existing object");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public boolean getBoolean(java.lang.String, boolean)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.Boolean $r2, $r3;
        java.lang.String r1;
        boolean z0, $z1;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <org.apache.commons.lang.BooleanUtils: java.lang.Boolean toBooleanObject(boolean)>(z0);

        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Boolean getBoolean(java.lang.String,java.lang.Boolean)>(r1, $r2);

        $z1 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    public java.lang.Boolean getBoolean(java.lang.String, java.lang.Boolean)
    {
        org.apache.commons.configuration.ConversionException $r6, $r7;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r8, $r9, $r10, $r11;
        java.lang.Boolean $r4, r5;
        java.lang.Object $r2, $r3;
        java.lang.String r1, $r12;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Boolean;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object resolveContainerStore(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return r5;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object interpolate(java.lang.Object)>($r2);

        $r4 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Boolean toBoolean(java.lang.Object)>($r3);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.commons.configuration.ConversionException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to a Boolean object");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

        catch org.apache.commons.configuration.ConversionException from label1 to label2 with label3;
    }

    public byte getByte(java.lang.String)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        byte $b0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        java.lang.String r1, $r8;
        java.lang.Byte $r2;
        java.util.NoSuchElementException $r3;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Byte getByte(java.lang.String,java.lang.Byte)>(r1, null);

        if $r2 == null goto label1;

        $b0 = virtualinvoke $r2.<java.lang.Byte: byte byteValue()>();

        return $b0;

     label1:
        $r3 = new java.util.NoSuchElementException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" doesn\'t map to an existing object");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public byte getByte(java.lang.String, byte)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        byte b0, $b1;
        java.lang.String r1;
        java.lang.Byte $r2, $r3;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        b0 := @parameter1: byte;

        $r2 = new java.lang.Byte;

        specialinvoke $r2.<java.lang.Byte: void <init>(byte)>(b0);

        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Byte getByte(java.lang.String,java.lang.Byte)>(r1, $r2);

        $b1 = virtualinvoke $r3.<java.lang.Byte: byte byteValue()>();

        return $b1;
    }

    public java.lang.Byte getByte(java.lang.String, java.lang.Byte)
    {
        org.apache.commons.configuration.ConversionException $r6, $r7;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r8, $r9, $r10, $r11;
        java.lang.Object $r2, $r3;
        java.lang.String r1, $r12;
        java.lang.Byte $r4, r5;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Byte;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object resolveContainerStore(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return r5;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object interpolate(java.lang.Object)>($r2);

        $r4 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Byte toByte(java.lang.Object)>($r3);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.commons.configuration.ConversionException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to a Byte object");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

        catch org.apache.commons.configuration.ConversionException from label1 to label2 with label3;
    }

    public double getDouble(java.lang.String)
    {
        java.lang.Double $r2;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        java.lang.String r1, $r8;
        java.util.NoSuchElementException $r3;
        double $d0;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Double getDouble(java.lang.String,java.lang.Double)>(r1, null);

        if $r2 == null goto label1;

        $d0 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        return $d0;

     label1:
        $r3 = new java.util.NoSuchElementException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to an existing object");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public double getDouble(java.lang.String, double)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.Double $r2, $r3;
        java.lang.String r1;
        double d0, $d1;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r2 = new java.lang.Double;

        specialinvoke $r2.<java.lang.Double: void <init>(double)>(d0);

        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Double getDouble(java.lang.String,java.lang.Double)>(r1, $r2);

        $d1 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        return $d1;
    }

    public java.lang.Double getDouble(java.lang.String, java.lang.Double)
    {
        java.lang.Double $r4, r5;
        org.apache.commons.configuration.ConversionException $r6, $r7;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r8, $r9, $r10, $r11;
        java.lang.Object $r2, $r3;
        java.lang.String r1, $r12;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Double;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object resolveContainerStore(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return r5;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object interpolate(java.lang.Object)>($r2);

        $r4 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Double toDouble(java.lang.Object)>($r3);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.commons.configuration.ConversionException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to a Double object");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

        catch org.apache.commons.configuration.ConversionException from label1 to label2 with label3;
    }

    public float getFloat(java.lang.String)
    {
        java.lang.Float $r2;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        float $f0;
        java.lang.String r1, $r8;
        java.util.NoSuchElementException $r3;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Float getFloat(java.lang.String,java.lang.Float)>(r1, null);

        if $r2 == null goto label1;

        $f0 = virtualinvoke $r2.<java.lang.Float: float floatValue()>();

        return $f0;

     label1:
        $r3 = new java.util.NoSuchElementException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to an existing object");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public float getFloat(java.lang.String, float)
    {
        java.lang.Float $r2, $r3;
        org.apache.commons.configuration.AbstractConfiguration r0;
        float f0, $f1;
        java.lang.String r1;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        $r2 = new java.lang.Float;

        specialinvoke $r2.<java.lang.Float: void <init>(float)>(f0);

        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Float getFloat(java.lang.String,java.lang.Float)>(r1, $r2);

        $f1 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        return $f1;
    }

    public java.lang.Float getFloat(java.lang.String, java.lang.Float)
    {
        java.lang.Float $r4, r5;
        org.apache.commons.configuration.ConversionException $r6, $r7;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r8, $r9, $r10, $r11;
        java.lang.Object $r2, $r3;
        java.lang.String r1, $r12;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Float;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object resolveContainerStore(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return r5;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object interpolate(java.lang.Object)>($r2);

        $r4 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Float toFloat(java.lang.Object)>($r3);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.commons.configuration.ConversionException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to a Float object");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

        catch org.apache.commons.configuration.ConversionException from label1 to label2 with label3;
    }

    public int getInt(java.lang.String)
    {
        java.lang.Integer $r2;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        int $i0;
        java.lang.String r1, $r8;
        java.util.NoSuchElementException $r3;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>(r1, null);

        if $r2 == null goto label1;

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        return $i0;

     label1:
        $r3 = new java.util.NoSuchElementException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to an existing object");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public int getInt(java.lang.String, int)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        int $i0, i1;
        java.lang.String r1;
        java.lang.Integer $r2;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>(r1, null);

        if $r2 != null goto label1;

        return i1;

     label1:
        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public java.lang.Integer getInteger(java.lang.String, java.lang.Integer)
    {
        java.lang.Integer $r4, r5;
        org.apache.commons.configuration.ConversionException $r6, $r7;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r8, $r9, $r10, $r11;
        java.lang.Object $r2, $r3;
        java.lang.String r1, $r12;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Integer;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object resolveContainerStore(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return r5;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object interpolate(java.lang.Object)>($r2);

        $r4 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Integer toInteger(java.lang.Object)>($r3);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.commons.configuration.ConversionException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to an Integer object");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

        catch org.apache.commons.configuration.ConversionException from label1 to label2 with label3;
    }

    public long getLong(java.lang.String)
    {
        long $l0;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.Long $r2;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        java.lang.String r1, $r8;
        java.util.NoSuchElementException $r3;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Long getLong(java.lang.String,java.lang.Long)>(r1, null);

        if $r2 == null goto label1;

        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        return $l0;

     label1:
        $r3 = new java.util.NoSuchElementException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to an existing object");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public long getLong(java.lang.String, long)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.Long $r2, $r3;
        long l0, $l1;
        java.lang.String r1;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(l0);

        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Long getLong(java.lang.String,java.lang.Long)>(r1, $r2);

        $l1 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        return $l1;
    }

    public java.lang.Long getLong(java.lang.String, java.lang.Long)
    {
        org.apache.commons.configuration.ConversionException $r6, $r7;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.Long $r4, r5;
        java.lang.StringBuffer $r8, $r9, $r10, $r11;
        java.lang.Object $r2, $r3;
        java.lang.String r1, $r12;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Long;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object resolveContainerStore(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return r5;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object interpolate(java.lang.Object)>($r2);

        $r4 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Long toLong(java.lang.Object)>($r3);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.commons.configuration.ConversionException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to a Long object");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

        catch org.apache.commons.configuration.ConversionException from label1 to label2 with label3;
    }

    public short getShort(java.lang.String)
    {
        short $s0;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.Short $r2;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        java.lang.String r1, $r8;
        java.util.NoSuchElementException $r3;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Short getShort(java.lang.String,java.lang.Short)>(r1, null);

        if $r2 == null goto label1;

        $s0 = virtualinvoke $r2.<java.lang.Short: short shortValue()>();

        return $s0;

     label1:
        $r3 = new java.util.NoSuchElementException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to an existing object");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public short getShort(java.lang.String, short)
    {
        short s0, $s1;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.Short $r2, $r3;
        java.lang.String r1;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        s0 := @parameter1: short;

        $r2 = new java.lang.Short;

        specialinvoke $r2.<java.lang.Short: void <init>(short)>(s0);

        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Short getShort(java.lang.String,java.lang.Short)>(r1, $r2);

        $s1 = virtualinvoke $r3.<java.lang.Short: short shortValue()>();

        return $s1;
    }

    public java.lang.Short getShort(java.lang.String, java.lang.Short)
    {
        org.apache.commons.configuration.ConversionException $r6, $r7;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.Short $r4, r5;
        java.lang.StringBuffer $r8, $r9, $r10, $r11;
        java.lang.Object $r2, $r3;
        java.lang.String r1, $r12;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Short;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object resolveContainerStore(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return r5;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object interpolate(java.lang.Object)>($r2);

        $r4 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Short toShort(java.lang.Object)>($r3);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.commons.configuration.ConversionException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to a Short object");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

        catch org.apache.commons.configuration.ConversionException from label1 to label2 with label3;
    }

    public java.math.BigDecimal getBigDecimal(java.lang.String)
    {
        java.math.BigDecimal $r2;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        java.lang.String r1, $r8;
        java.util.NoSuchElementException $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.math.BigDecimal getBigDecimal(java.lang.String,java.math.BigDecimal)>(r1, null);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $z0 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: boolean isThrowExceptionOnMissing()>();

        if $z0 == 0 goto label2;

        $r3 = new java.util.NoSuchElementException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to an existing object");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        return null;
    }

    public java.math.BigDecimal getBigDecimal(java.lang.String, java.math.BigDecimal)
    {
        java.math.BigDecimal $r4, r5;
        org.apache.commons.configuration.ConversionException $r6, $r7;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r8, $r9, $r10, $r11;
        java.lang.Object $r2, $r3;
        java.lang.String r1, $r12;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.math.BigDecimal;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object resolveContainerStore(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return r5;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object interpolate(java.lang.Object)>($r2);

        $r4 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.math.BigDecimal toBigDecimal(java.lang.Object)>($r3);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.commons.configuration.ConversionException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to a BigDecimal object");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

        catch org.apache.commons.configuration.ConversionException from label1 to label2 with label3;
    }

    public java.math.BigInteger getBigInteger(java.lang.String)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        java.math.BigInteger $r2;
        java.lang.String r1, $r8;
        java.util.NoSuchElementException $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.math.BigInteger getBigInteger(java.lang.String,java.math.BigInteger)>(r1, null);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $z0 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: boolean isThrowExceptionOnMissing()>();

        if $z0 == 0 goto label2;

        $r3 = new java.util.NoSuchElementException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to an existing object");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        return null;
    }

    public java.math.BigInteger getBigInteger(java.lang.String, java.math.BigInteger)
    {
        org.apache.commons.configuration.ConversionException $r6, $r7;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r8, $r9, $r10, $r11;
        java.lang.Object $r2, $r3;
        java.math.BigInteger $r4, r5;
        java.lang.String r1, $r12;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.math.BigInteger;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object resolveContainerStore(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return r5;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object interpolate(java.lang.Object)>($r2);

        $r4 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.math.BigInteger toBigInteger(java.lang.Object)>($r3);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.commons.configuration.ConversionException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to a BigDecimal object");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

        catch org.apache.commons.configuration.ConversionException from label1 to label2 with label3;
    }

    public java.lang.String getString(java.lang.String)
    {
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        java.lang.String r1, $r2, $r8;
        java.util.NoSuchElementException $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String,java.lang.String)>(r1, null);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $z0 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: boolean isThrowExceptionOnMissing()>();

        if $z0 == 0 goto label2;

        $r3 = new java.util.NoSuchElementException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to an existing object");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        return null;
    }

    public java.lang.String getString(java.lang.String, java.lang.String)
    {
        org.apache.commons.configuration.ConversionException $r3;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        java.lang.Object $r2;
        java.lang.String r1, $r8, r9, $r10, $r11, $r12;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object resolveContainerStore(java.lang.String)>(r1);

        $z0 = $r2 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r11 = (java.lang.String) $r2;

        $r12 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.String interpolate(java.lang.String)>($r11);

        return $r12;

     label1:
        if $r2 != null goto label2;

        $r10 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.String interpolate(java.lang.String)>(r9);

        return $r10;

     label2:
        $r3 = new org.apache.commons.configuration.ConversionException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to a String object");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public java.lang.String[] getStringArray(java.lang.String)
    {
        java.lang.String[] r15;
        org.apache.commons.configuration.ConversionException $r3;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        int $i0, $i1, i2;
        java.lang.String r1, $r8, $r11, $r12, $r13, $r14;
        boolean $z0, $z1;
        java.util.List r9;
        java.lang.Object $r2, $r10;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object getProperty(java.lang.String)>(r1);

        $z0 = $r2 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        r15 = newarray (java.lang.String)[1];

        $r13 = (java.lang.String) $r2;

        $r14 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.String interpolate(java.lang.String)>($r13);

        r15[0] = $r14;

        goto label6;

     label1:
        $z1 = $r2 instanceof java.util.List;

        if $z1 == 0 goto label4;

        r9 = (java.util.List) $r2;

        $i0 = interfaceinvoke r9.<java.util.List: int size()>();

        r15 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label2:
        $i1 = lengthof r15;

        if i2 >= $i1 goto label3;

        $r10 = interfaceinvoke r9.<java.util.List: java.lang.Object get(int)>(i2);

        $r11 = (java.lang.String) $r10;

        $r12 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.String interpolate(java.lang.String)>($r11);

        r15[i2] = $r12;

        i2 = i2 + 1;

        goto label2;

     label3:
        goto label6;

     label4:
        if $r2 != null goto label5;

        r15 = newarray (java.lang.String)[0];

        goto label6;

     label5:
        $r3 = new org.apache.commons.configuration.ConversionException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to a String/List object");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label6:
        return r15;
    }

    public java.util.List getList(java.lang.String)
    {
        java.util.List $r3;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.String r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.util.List getList(java.lang.String,java.util.List)>(r1, $r2);

        return $r3;
    }

    public java.util.List getList(java.lang.String, java.util.List)
    {
        java.lang.Object[] $r15;
        java.util.ArrayList $r18, $r23;
        org.apache.commons.configuration.ConversionException $r4;
        org.apache.commons.configuration.AbstractConfiguration r0;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r9, $r10, $r13;
        java.lang.String r1, $r12, $r14, $r24, $r25;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r20;
        java.util.List $r16, r17, r19, r26;
        java.lang.Object $r2, $r21, $r22;
        java.lang.Class $r3, $r11;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        r17 := @parameter1: java.util.List;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object getProperty(java.lang.String)>(r1);

        $z0 = $r2 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>(int)>(1);

        r26 = $r23;

        $r24 = (java.lang.String) $r2;

        $r25 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.String interpolate(java.lang.String)>($r24);

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r25);

        goto label7;

     label1:
        $z1 = $r2 instanceof java.util.List;

        if $z1 == 0 goto label4;

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        r26 = $r18;

        r19 = (java.util.List) $r2;

        $r20 = interfaceinvoke r19.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r21 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        $r22 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object interpolate(java.lang.Object)>($r21);

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r22);

        goto label2;

     label3:
        goto label7;

     label4:
        if $r2 != null goto label5;

        r26 = r17;

        goto label7;

     label5:
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = virtualinvoke $r3.<java.lang.Class: boolean isArray()>();

        if $z2 == 0 goto label6;

        $r15 = (java.lang.Object[]) $r2;

        $r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r15);

        return $r16;

     label6:
        $r4 = new org.apache.commons.configuration.ConversionException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t map to a List object: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", a ");

        $r11 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r14);

        throw $r4;

     label7:
        return r26;
    }

    protected java.lang.Object resolveContainerStore(java.lang.String)
    {
        java.util.Iterator $r5;
        java.util.Collection r4;
        org.apache.commons.configuration.AbstractConfiguration r0;
        int $i0;
        java.lang.Object $r2, r6, $r7;
        java.lang.Class $r3;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.lang.Object getProperty(java.lang.String)>(r1);

        r6 = $r2;

        if $r2 == null goto label4;

        $z0 = $r2 instanceof java.util.Collection;

        if $z0 == 0 goto label3;

        r4 = (java.util.Collection) $r2;

        $z2 = interfaceinvoke r4.<java.util.Collection: boolean isEmpty()>();

        if $z2 == 0 goto label1;

        $r7 = null;

        goto label2;

     label1:
        $r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label2:
        r6 = $r7;

        goto label4;

     label3:
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label4;

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>($r2);

        if $i0 <= 0 goto label4;

        r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>($r2, 0);

     label4:
        return r6;
    }

    public void copy(org.apache.commons.configuration.Configuration)
    {
        org.apache.commons.configuration.Configuration r0;
        java.lang.Throwable $r6;
        java.util.Iterator $r1;
        org.apache.commons.configuration.AbstractConfiguration r5;
        java.lang.Object $r2, $r4;
        java.lang.String r3;
        boolean $z0;

        r5 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r0 := @parameter0: org.apache.commons.configuration.Configuration;

        if r0 == null goto label7;

        $r1 = interfaceinvoke r0.<org.apache.commons.configuration.Configuration: java.util.Iterator getKeys()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $r4 = interfaceinvoke r0.<org.apache.commons.configuration.Configuration: java.lang.Object getProperty(java.lang.String)>(r3);

        virtualinvoke r5.<org.apache.commons.configuration.AbstractConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>(3, r3, $r4, 1);

        virtualinvoke r5.<org.apache.commons.configuration.AbstractConfiguration: void setDetailEvents(boolean)>(0);

     label2:
        virtualinvoke r5.<org.apache.commons.configuration.AbstractConfiguration: void clearProperty(java.lang.String)>(r3);

        specialinvoke r5.<org.apache.commons.configuration.AbstractConfiguration: void addPropertyValues(java.lang.String,java.lang.Object,char)>(r3, $r4, 0);

     label3:
        virtualinvoke r5.<org.apache.commons.configuration.AbstractConfiguration: void setDetailEvents(boolean)>(1);

        goto label6;

     label4:
        $r6 := @caughtexception;

     label5:
        virtualinvoke r5.<org.apache.commons.configuration.AbstractConfiguration: void setDetailEvents(boolean)>(1);

        throw $r6;

     label6:
        virtualinvoke r5.<org.apache.commons.configuration.AbstractConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>(3, r3, $r4, 0);

        goto label1;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void append(org.apache.commons.configuration.Configuration)
    {
        org.apache.commons.configuration.Configuration r0;
        org.apache.commons.configuration.AbstractConfiguration r5;
        java.util.Iterator $r1;
        java.lang.Object $r2, $r4;
        java.lang.String r3;
        boolean $z0;

        r5 := @this: org.apache.commons.configuration.AbstractConfiguration;

        r0 := @parameter0: org.apache.commons.configuration.Configuration;

        if r0 == null goto label2;

        $r1 = interfaceinvoke r0.<org.apache.commons.configuration.Configuration: java.util.Iterator getKeys()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $r4 = interfaceinvoke r0.<org.apache.commons.configuration.Configuration: java.lang.Object getProperty(java.lang.String)>(r3);

        virtualinvoke r5.<org.apache.commons.configuration.AbstractConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>(1, r3, $r4, 1);

        specialinvoke r5.<org.apache.commons.configuration.AbstractConfiguration: void addPropertyValues(java.lang.String,java.lang.Object,char)>(r3, $r4, 0);

        virtualinvoke r5.<org.apache.commons.configuration.AbstractConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>(1, r3, $r4, 0);

        goto label1;

     label2:
        return;
    }

    public org.apache.commons.configuration.Configuration interpolatedConfiguration()
    {
        org.apache.commons.configuration.Configuration $r1;
        java.util.Iterator $r3;
        java.util.List $r6;
        org.apache.commons.configuration.AbstractConfiguration r0, r2;
        java.lang.Object $r4;
        java.lang.String r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.configuration.AbstractConfiguration;

        $r1 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: org.apache.commons.configuration.Configuration cloneConfiguration(org.apache.commons.configuration.Configuration)>(r0);

        r2 = (org.apache.commons.configuration.AbstractConfiguration) $r1;

        virtualinvoke r2.<org.apache.commons.configuration.AbstractConfiguration: void setDelimiterParsingDisabled(boolean)>(1);

        $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.util.Iterator getKeys()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: java.util.List getList(java.lang.String)>(r5);

        virtualinvoke r2.<org.apache.commons.configuration.AbstractConfiguration: void setProperty(java.lang.String,java.lang.Object)>(r5, $r6);

        goto label1;

     label2:
        $z1 = virtualinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: boolean isDelimiterParsingDisabled()>();

        virtualinvoke r2.<org.apache.commons.configuration.AbstractConfiguration: void setDelimiterParsingDisabled(boolean)>($z1);

        return r2;
    }

    static void <clinit>()
    {
        <org.apache.commons.configuration.AbstractConfiguration: char DISABLED_DELIMITER> = 0;

        <org.apache.commons.configuration.AbstractConfiguration: java.lang.String END_TOKEN> = "}";

        <org.apache.commons.configuration.AbstractConfiguration: java.lang.String START_TOKEN> = "${";

        <org.apache.commons.configuration.AbstractConfiguration: int EVENT_READ_PROPERTY> = 5;

        <org.apache.commons.configuration.AbstractConfiguration: int EVENT_CLEAR> = 4;

        <org.apache.commons.configuration.AbstractConfiguration: int EVENT_SET_PROPERTY> = 3;

        <org.apache.commons.configuration.AbstractConfiguration: int EVENT_CLEAR_PROPERTY> = 2;

        <org.apache.commons.configuration.AbstractConfiguration: int EVENT_ADD_PROPERTY> = 1;

        <org.apache.commons.configuration.AbstractConfiguration: char defaultListDelimiter> = 44;

        return;
    }
}
