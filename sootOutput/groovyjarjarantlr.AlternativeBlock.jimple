class groovyjarjarantlr.AlternativeBlock extends groovyjarjarantlr.AlternativeElement
{
    protected java.lang.String initAction;
    protected groovyjarjarantlr.collections.impl.Vector alternatives;
    protected java.lang.String label;
    protected int alti;
    protected int altj;
    protected int analysisAlt;
    protected boolean hasAnAction;
    protected boolean hasASynPred;
    protected int ID;
    protected static int nblks;
    boolean not;
    boolean greedy;
    boolean greedySet;
    protected boolean doAutoGen;
    protected boolean warnWhenFollowAmbig;
    protected boolean generateAmbigWarnings;

    public void <init>(groovyjarjarantlr.Grammar)
    {
        groovyjarjarantlr.AlternativeBlock r0;
        int $i0, $i1, $i2;
        groovyjarjarantlr.Grammar r1;
        groovyjarjarantlr.collections.impl.Vector $r2;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        r1 := @parameter0: groovyjarjarantlr.Grammar;

        specialinvoke r0.<groovyjarjarantlr.AlternativeElement: void <init>(groovyjarjarantlr.Grammar)>(r1);

        r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String initAction> = null;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean hasAnAction> = 0;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean hasASynPred> = 0;

        r0.<groovyjarjarantlr.AlternativeBlock: int ID> = 0;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean not> = 0;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean greedy> = 1;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean greedySet> = 0;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean doAutoGen> = 1;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean warnWhenFollowAmbig> = 1;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean generateAmbigWarnings> = 1;

        $r2 = new groovyjarjarantlr.collections.impl.Vector;

        specialinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: void <init>(int)>(5);

        r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives> = $r2;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean not> = 0;

        $i0 = <groovyjarjarantlr.AlternativeBlock: int nblks>;

        $i1 = $i0 + 1;

        <groovyjarjarantlr.AlternativeBlock: int nblks> = $i1;

        $i2 = <groovyjarjarantlr.AlternativeBlock: int nblks>;

        r0.<groovyjarjarantlr.AlternativeBlock: int ID> = $i2;

        return;
    }

    public void <init>(groovyjarjarantlr.Grammar, groovyjarjarantlr.Token, boolean)
    {
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.Grammar r1;
        int $i0, $i1, $i2;
        groovyjarjarantlr.Token r2;
        groovyjarjarantlr.collections.impl.Vector $r3;
        boolean z0;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        r1 := @parameter0: groovyjarjarantlr.Grammar;

        r2 := @parameter1: groovyjarjarantlr.Token;

        z0 := @parameter2: boolean;

        specialinvoke r0.<groovyjarjarantlr.AlternativeElement: void <init>(groovyjarjarantlr.Grammar,groovyjarjarantlr.Token)>(r1, r2);

        r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String initAction> = null;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean hasAnAction> = 0;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean hasASynPred> = 0;

        r0.<groovyjarjarantlr.AlternativeBlock: int ID> = 0;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean not> = 0;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean greedy> = 1;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean greedySet> = 0;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean doAutoGen> = 1;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean warnWhenFollowAmbig> = 1;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean generateAmbigWarnings> = 1;

        $r3 = new groovyjarjarantlr.collections.impl.Vector;

        specialinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: void <init>(int)>(5);

        r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives> = $r3;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean not> = z0;

        $i0 = <groovyjarjarantlr.AlternativeBlock: int nblks>;

        $i1 = $i0 + 1;

        <groovyjarjarantlr.AlternativeBlock: int nblks> = $i1;

        $i2 = <groovyjarjarantlr.AlternativeBlock: int nblks>;

        r0.<groovyjarjarantlr.AlternativeBlock: int ID> = $i2;

        return;
    }

    public void addAlternative(groovyjarjarantlr.Alternative)
    {
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.collections.impl.Vector $r2;
        groovyjarjarantlr.Alternative r1;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        r1 := @parameter0: groovyjarjarantlr.Alternative;

        $r2 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: void appendElement(java.lang.Object)>(r1);

        return;
    }

    public void generate()
    {
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.Grammar $r1;
        groovyjarjarantlr.CodeGenerator $r2;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.CodeGenerator generator>;

        virtualinvoke $r2.<groovyjarjarantlr.CodeGenerator: void gen(groovyjarjarantlr.AlternativeBlock)>(r0);

        return;
    }

    public groovyjarjarantlr.Alternative getAlternativeAt(int)
    {
        groovyjarjarantlr.AlternativeBlock r0;
        int i0;
        java.lang.Object $r2;
        groovyjarjarantlr.collections.impl.Vector $r1;
        groovyjarjarantlr.Alternative $r3;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i0);

        $r3 = (groovyjarjarantlr.Alternative) $r2;

        return $r3;
    }

    public groovyjarjarantlr.collections.impl.Vector getAlternatives()
    {
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.collections.impl.Vector $r1;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        return $r1;
    }

    public boolean getAutoGen()
    {
        groovyjarjarantlr.AlternativeBlock r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        $z0 = r0.<groovyjarjarantlr.AlternativeBlock: boolean doAutoGen>;

        return $z0;
    }

    public java.lang.String getInitAction()
    {
        java.lang.String $r1;
        groovyjarjarantlr.AlternativeBlock r0;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String initAction>;

        return $r1;
    }

    public java.lang.String getLabel()
    {
        java.lang.String $r1;
        groovyjarjarantlr.AlternativeBlock r0;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String label>;

        return $r1;
    }

    public groovyjarjarantlr.Lookahead look(int)
    {
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.Lookahead $r3;
        int i0;
        groovyjarjarantlr.LLkGrammarAnalyzer $r2;
        groovyjarjarantlr.Grammar $r1;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $r3 = interfaceinvoke $r2.<groovyjarjarantlr.LLkGrammarAnalyzer: groovyjarjarantlr.Lookahead look(int,groovyjarjarantlr.AlternativeBlock)>(i0, r0);

        return $r3;
    }

    public void prepareForAnalysis()
    {
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.Lookahead[] $r6;
        groovyjarjarantlr.Grammar $r5;
        groovyjarjarantlr.Alternative r4;
        int $i0, $i1, $i2, i3, $i5;
        java.lang.Object $r3;
        groovyjarjarantlr.collections.impl.Vector $r1, $r2;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        i3 = 0;

     label1:
        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i0 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i3 >= $i0 goto label2;

        $r2 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i3);

        r4 = (groovyjarjarantlr.Alternative) $r3;

        $r5 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Grammar grammar>;

        $i1 = $r5.<groovyjarjarantlr.Grammar: int maxk>;

        $i2 = $i1 + 1;

        $r6 = newarray (groovyjarjarantlr.Lookahead)[$i2];

        r4.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache> = $r6;

        $i5 = (int) -1;

        r4.<groovyjarjarantlr.Alternative: int lookaheadDepth> = $i5;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void removeTrackingOfRuleRefs(groovyjarjarantlr.Grammar)
    {
        groovyjarjarantlr.AlternativeBlock r0, $r4;
        groovyjarjarantlr.Grammar r3, $r10;
        groovyjarjarantlr.Tool $r12;
        java.lang.StringBuffer $r11, $r13, $r15, $r16;
        int $i0, i1;
        groovyjarjarantlr.RuleRefElement r5;
        java.lang.String $r6, $r14, $r17;
        groovyjarjarantlr.collections.impl.Vector $r1, $r9;
        boolean $z0, $z1;
        groovyjarjarantlr.RuleSymbol r8;
        groovyjarjarantlr.Alternative $r2;
        groovyjarjarantlr.GrammarSymbol $r7;
        groovyjarjarantlr.AlternativeElement r18;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        r3 := @parameter0: groovyjarjarantlr.Grammar;

        i1 = 0;

     label1:
        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i0 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i1 >= $i0 goto label7;

        $r2 = virtualinvoke r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i1);

        r18 = $r2.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

     label2:
        if r18 == null goto label6;

        $z0 = r18 instanceof groovyjarjarantlr.RuleRefElement;

        if $z0 == 0 goto label4;

        r5 = (groovyjarjarantlr.RuleRefElement) r18;

        $r6 = r5.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r7 = virtualinvoke r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>($r6);

        r8 = (groovyjarjarantlr.RuleSymbol) $r7;

        if r8 != null goto label3;

        $r10 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Grammar grammar>;

        $r12 = $r10.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("rule ");

        $r14 = r5.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" referenced in (...)=>, but not defined");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r17);

        goto label5;

     label3:
        $r9 = r8.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.collections.impl.Vector references>;

        virtualinvoke $r9.<groovyjarjarantlr.collections.impl.Vector: boolean removeElement(java.lang.Object)>(r5);

        goto label5;

     label4:
        $z1 = r18 instanceof groovyjarjarantlr.AlternativeBlock;

        if $z1 == 0 goto label5;

        $r4 = (groovyjarjarantlr.AlternativeBlock) r18;

        virtualinvoke $r4.<groovyjarjarantlr.AlternativeBlock: void removeTrackingOfRuleRefs(groovyjarjarantlr.Grammar)>(r3);

     label5:
        r18 = r18.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.AlternativeElement next>;

        goto label2;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return;
    }

    public void setAlternatives(groovyjarjarantlr.collections.impl.Vector)
    {
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.collections.impl.Vector r1;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        r1 := @parameter0: groovyjarjarantlr.collections.impl.Vector;

        r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives> = r1;

        return;
    }

    public void setAutoGen(boolean)
    {
        groovyjarjarantlr.AlternativeBlock r0;
        boolean z0;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        z0 := @parameter0: boolean;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean doAutoGen> = z0;

        return;
    }

    public void setInitAction(java.lang.String)
    {
        java.lang.String r1;
        groovyjarjarantlr.AlternativeBlock r0;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        r1 := @parameter0: java.lang.String;

        r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String initAction> = r1;

        return;
    }

    public void setLabel(java.lang.String)
    {
        java.lang.String r1;
        groovyjarjarantlr.AlternativeBlock r0;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        r1 := @parameter0: java.lang.String;

        r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String label> = r1;

        return;
    }

    public void setOption(groovyjarjarantlr.Token, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.Grammar $r5, $r12, $r17, $r18, $r23, $r24, $r29, $r30;
        groovyjarjarantlr.Token r0, r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        groovyjarjarantlr.AlternativeBlock r4;
        groovyjarjarantlr.Tool $r7, $r19, $r25, $r31;
        java.lang.StringBuffer $r6, $r8, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r1, $r2, $r3, $r9, $r11, $r13, $r15, $r16, $r20, $r21, $r22, $r26, $r27, $r28, $r32;

        r4 := @this: groovyjarjarantlr.AlternativeBlock;

        r0 := @parameter0: groovyjarjarantlr.Token;

        r14 := @parameter1: groovyjarjarantlr.Token;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("warnWhenFollowAmbig");

        if $z0 == 0 goto label03;

        $r27 = virtualinvoke r14.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z7 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z7 == 0 goto label01;

        r4.<groovyjarjarantlr.AlternativeBlock: boolean warnWhenFollowAmbig> = 1;

        goto label10;

     label01:
        $r28 = virtualinvoke r14.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z8 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z8 == 0 goto label02;

        r4.<groovyjarjarantlr.AlternativeBlock: boolean warnWhenFollowAmbig> = 0;

        goto label10;

     label02:
        $r29 = r4.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Grammar grammar>;

        $r31 = $r29.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r30 = r4.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Grammar grammar>;

        $r32 = virtualinvoke $r30.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i6 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i7 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r31.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Value for warnWhenFollowAmbig must be true or false", $r32, $i6, $i7);

        goto label10;

     label03:
        $r2 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("generateAmbigWarnings");

        if $z1 == 0 goto label06;

        $r21 = virtualinvoke r14.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z5 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z5 == 0 goto label04;

        r4.<groovyjarjarantlr.AlternativeBlock: boolean generateAmbigWarnings> = 1;

        goto label10;

     label04:
        $r22 = virtualinvoke r14.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z6 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z6 == 0 goto label05;

        r4.<groovyjarjarantlr.AlternativeBlock: boolean generateAmbigWarnings> = 0;

        goto label10;

     label05:
        $r23 = r4.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Grammar grammar>;

        $r25 = $r23.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r24 = r4.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Grammar grammar>;

        $r26 = virtualinvoke $r24.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i4 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i5 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r25.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Value for generateAmbigWarnings must be true or false", $r26, $i4, $i5);

        goto label10;

     label06:
        $r3 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("greedy");

        if $z2 == 0 goto label09;

        $r15 = virtualinvoke r14.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z3 == 0 goto label07;

        r4.<groovyjarjarantlr.AlternativeBlock: boolean greedy> = 1;

        r4.<groovyjarjarantlr.AlternativeBlock: boolean greedySet> = 1;

        goto label10;

     label07:
        $r16 = virtualinvoke r14.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z4 == 0 goto label08;

        r4.<groovyjarjarantlr.AlternativeBlock: boolean greedy> = 0;

        r4.<groovyjarjarantlr.AlternativeBlock: boolean greedySet> = 1;

        goto label10;

     label08:
        $r17 = r4.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Grammar grammar>;

        $r19 = $r17.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r18 = r4.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Grammar grammar>;

        $r20 = virtualinvoke $r18.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i2 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i3 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r19.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Value for greedy must be true or false", $r20, $i2, $i3);

        goto label10;

     label09:
        $r5 = r4.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Grammar grammar>;

        $r7 = $r5.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid subrule option: ");

        $r9 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        $r12 = r4.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Grammar grammar>;

        $r13 = virtualinvoke $r12.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i0 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i1 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r7.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r11, $r13, $i0, $i1);

     label10:
        return;
    }

    public java.lang.String toString()
    {
        groovyjarjarantlr.Lookahead[] r7;
        groovyjarjarantlr.Grammar $r26;
        groovyjarjarantlr.TokenManager $r27;
        groovyjarjarantlr.collections.impl.Vector $r14, $r29, $r45;
        groovyjarjarantlr.Alternative $r6;
        groovyjarjarantlr.AlternativeElement r47;
        groovyjarjarantlr.AlternativeBlock r0;
        java.lang.StringBuffer $r3, $r4, $r9, $r10, $r12, $r13, $r16, $r17, $r19, $r20, $r22, $r23, $r25, $r31, $r35, $r36, $r38, $r39, $r41, $r43, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58;
        int i0, $i1, $i2, $i3, i4, $i5, i6, $i8;
        java.lang.String $r1, $r5, $r30, $r32, $r42, r44, r46, $r48;
        groovyjarjarantlr.Lookahead $r28, $r33;

        r0 := @this: groovyjarjarantlr.AlternativeBlock;

        r44 = " (";

        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String initAction>;

        if $r1 == null goto label01;

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r41 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r42 = r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String initAction>;

        $r43 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r42);

        r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

     label01:
        i4 = 0;

     label02:
        $r45 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i5 = virtualinvoke $r45.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i4 >= $i5 goto label12;

        $r6 = virtualinvoke r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i4);

        r7 = $r6.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        i0 = $r6.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        $i8 = (int) -1;

        if i0 != $i8 goto label03;

        goto label08;

     label03:
        if i0 != 2147483647 goto label04;

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r44);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("{?}:");

        r44 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label08;

     label04:
        $r51 = new java.lang.StringBuffer;

        specialinvoke $r51.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r44);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" {");

        r46 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        i6 = 1;

     label05:
        if i6 > i0 goto label07;

        $r52 = new java.lang.StringBuffer;

        specialinvoke $r52.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r46);

        $r28 = r7[i6];

        $r26 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Grammar grammar>;

        $r27 = $r26.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r29 = interfaceinvoke $r27.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        $r30 = virtualinvoke $r28.<groovyjarjarantlr.Lookahead: java.lang.String toString(java.lang.String,groovyjarjarantlr.collections.impl.Vector)>(",", $r29);

        $r31 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        r46 = $r32;

        if i6 >= i0 goto label06;

        $i3 = i6 + 1;

        $r33 = r7[$i3];

        if $r33 == null goto label06;

        $r53 = new java.lang.StringBuffer;

        specialinvoke $r53.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        r46 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>();

     label06:
        i6 = i6 + 1;

        goto label05;

     label07:
        $r54 = new java.lang.StringBuffer;

        specialinvoke $r54.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r46);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}:");

        r44 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

     label08:
        r47 = $r6.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $r48 = $r6.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r48 == null goto label09;

        $r55 = new java.lang.StringBuffer;

        specialinvoke $r55.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r44);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r48);

        r44 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

     label09:
        if r47 == null goto label10;

        $r56 = new java.lang.StringBuffer;

        specialinvoke $r56.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r44);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r47);

        r44 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        r47 = r47.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.AlternativeElement next>;

        goto label09;

     label10:
        $r14 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i1 = virtualinvoke $r14.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        $i2 = $i1 - 1;

        if i4 >= $i2 goto label11;

        $r57 = new java.lang.StringBuffer;

        specialinvoke $r57.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r44);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" |");

        r44 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

     label11:
        i4 = i4 + 1;

        goto label02;

     label12:
        $r58 = new java.lang.StringBuffer;

        specialinvoke $r58.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r44);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" )");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }
}
