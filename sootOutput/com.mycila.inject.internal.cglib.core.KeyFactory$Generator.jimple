public class com.mycila.inject.internal.cglib.core.KeyFactory$Generator extends com.mycila.inject.internal.cglib.core.AbstractClassGenerator
{
    private static final com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE;
    private java.lang.Class keyInterface;
    private com.mycila.inject.internal.cglib.core.Customizer customizer;
    private int constant;
    private int multiplier;

    public void <init>()
    {
        com.mycila.inject.internal.cglib.core.KeyFactory$Generator r0;
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.KeyFactory$Generator;

        $r1 = <com.mycila.inject.internal.cglib.core.KeyFactory$Generator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE>;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: void <init>(com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source)>($r1);

        return;
    }

    protected java.lang.ClassLoader getDefaultClassLoader()
    {
        com.mycila.inject.internal.cglib.core.KeyFactory$Generator r0;
        java.lang.Class $r1;
        java.lang.ClassLoader $r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.KeyFactory$Generator;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: java.lang.Class keyInterface>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        return $r2;
    }

    public void setCustomizer(com.mycila.inject.internal.cglib.core.Customizer)
    {
        com.mycila.inject.internal.cglib.core.KeyFactory$Generator r0;
        com.mycila.inject.internal.cglib.core.Customizer r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.KeyFactory$Generator;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.Customizer;

        r0.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: com.mycila.inject.internal.cglib.core.Customizer customizer> = r1;

        return;
    }

    public void setInterface(java.lang.Class)
    {
        com.mycila.inject.internal.cglib.core.KeyFactory$Generator r0;
        java.lang.Class r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.KeyFactory$Generator;

        r1 := @parameter0: java.lang.Class;

        r0.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: java.lang.Class keyInterface> = r1;

        return;
    }

    public com.mycila.inject.internal.cglib.core.KeyFactory create()
    {
        com.mycila.inject.internal.cglib.core.KeyFactory $r6;
        com.mycila.inject.internal.cglib.core.KeyFactory$Generator r0;
        java.lang.Class $r1, $r3;
        java.lang.Object $r5;
        java.lang.String $r2, $r4;

        r0 := @this: com.mycila.inject.internal.cglib.core.KeyFactory$Generator;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: java.lang.Class keyInterface>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: void setNamePrefix(java.lang.String)>($r2);

        $r3 = r0.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: java.lang.Class keyInterface>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>($r4);

        $r6 = (com.mycila.inject.internal.cglib.core.KeyFactory) $r5;

        return $r6;
    }

    public void setHashConstant(int)
    {
        com.mycila.inject.internal.cglib.core.KeyFactory$Generator r0;
        int i0;

        r0 := @this: com.mycila.inject.internal.cglib.core.KeyFactory$Generator;

        i0 := @parameter0: int;

        r0.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: int constant> = i0;

        return;
    }

    public void setHashMultiplier(int)
    {
        com.mycila.inject.internal.cglib.core.KeyFactory$Generator r0;
        int i0;

        r0 := @this: com.mycila.inject.internal.cglib.core.KeyFactory$Generator;

        i0 := @parameter0: int;

        r0.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: int multiplier> = i0;

        return;
    }

    protected java.lang.Object firstInstance(java.lang.Class)
    {
        com.mycila.inject.internal.cglib.core.KeyFactory$Generator r2;
        java.lang.Class r0;
        java.lang.Object $r1;

        r2 := @this: com.mycila.inject.internal.cglib.core.KeyFactory$Generator;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Object newInstance(java.lang.Class)>(r0);

        return $r1;
    }

    protected java.lang.Object nextInstance(java.lang.Object)
    {
        com.mycila.inject.internal.cglib.core.KeyFactory$Generator r1;
        java.lang.Object r0;

        r1 := @this: com.mycila.inject.internal.cglib.core.KeyFactory$Generator;

        r0 := @parameter0: java.lang.Object;

        return r0;
    }

    public void generateClass(com.mycila.inject.internal.asm.ClassVisitor)
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter $r16, $r18, $r24, $r27;
        com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters $r34;
        com.mycila.inject.internal.cglib.core.Customizer $r33, $r40, $r43;
        java.lang.String $r9, $r32, $r38, $r39, $r42, $r46, $r48;
        com.mycila.inject.internal.asm.Type[] $r8, $r11;
        com.mycila.inject.internal.asm.ClassVisitor r1;
        java.lang.Class[] $r7;
        com.mycila.inject.internal.cglib.core.ClassEmitter $r0;
        int[] $r19, $r20, $r21, $r22;
        java.lang.reflect.Method $r4;
        boolean $z0;
        com.mycila.inject.internal.cglib.core.KeyFactory$Generator r2;
        com.mycila.inject.internal.asm.Type $r10, $r13, $r28, $r29, $r30, $r35, $r36, $r41, $r44, $r45, $r47;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, i14, i15, $i16, i17, $i18, i19, $i20, i21, i22;
        com.mycila.inject.internal.cglib.core.Signature $r14, $r15, $r17, $r23, $r26, $r31, $r37;
        java.lang.IllegalArgumentException $r49;
        com.mycila.inject.internal.asm.Label $r25;
        java.lang.Class $r3, $r5, $r6, $r12, $r50;

        r2 := @this: com.mycila.inject.internal.cglib.core.KeyFactory$Generator;

        r1 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        $r0 = new com.mycila.inject.internal.cglib.core.ClassEmitter;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: void <init>(com.mycila.inject.internal.asm.ClassVisitor)>(r1);

        $r3 = r2.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: java.lang.Class keyInterface>;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.reflect.Method findNewInstance(java.lang.Class)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r6 = <com.mycila.inject.internal.cglib.core.KeyFactory: java.lang.Class class$java$lang$Object>;

        if $r6 != null goto label01;

        $r50 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <com.mycila.inject.internal.cglib.core.KeyFactory: java.lang.Class class$java$lang$Object> = $r50;

        goto label02;

     label01:
        $r50 = <com.mycila.inject.internal.cglib.core.KeyFactory: java.lang.Class class$java$lang$Object>;

     label02:
        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r50);

        if $z0 != 0 goto label03;

        $r49 = new java.lang.IllegalArgumentException;

        specialinvoke $r49.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newInstance method must return Object");

        throw $r49;

     label03:
        $r7 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r8 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type[] getTypes(java.lang.Class[])>($r7);

        $r9 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: java.lang.String getClassName()>();

        $r10 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: com.mycila.inject.internal.asm.Type access$200()>();

        $r11 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r12 = r2.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: java.lang.Class keyInterface>;

        $r13 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r12);

        $r11[0] = $r13;

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: void begin_class(int,int,java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],java.lang.String)>(46, 1, $r9, $r10, $r11, "<generated>");

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void null_constructor(com.mycila.inject.internal.cglib.core.ClassEmitter)>($r0);

        $r14 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.Signature getSignature(java.lang.reflect.Member)>($r4);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void factory_method(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.cglib.core.Signature)>($r0, $r14);

        i14 = 0;

        $r15 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseConstructor(com.mycila.inject.internal.asm.Type[])>($r8);

        $r16 = virtualinvoke $r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r15, null);

        virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.CodeEmitter: void super_invoke_constructor()>();

        virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        i15 = 0;

     label04:
        $i0 = lengthof $r8;

        if i15 >= $i0 goto label05;

        $r45 = $r8[i15];

        $i13 = virtualinvoke $r45.<com.mycila.inject.internal.asm.Type: int hashCode()>();

        i14 = i14 + $i13;

        $r46 = specialinvoke r2.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: java.lang.String getFieldName(int)>(i15);

        $r47 = $r8[i15];

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(18, $r46, $r47, null);

        virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(i15);

        $r48 = specialinvoke r2.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: java.lang.String getFieldName(int)>(i15);

        virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>($r48);

        i15 = i15 + 1;

        goto label04;

     label05:
        virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        $r17 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: com.mycila.inject.internal.cglib.core.Signature access$300()>();

        $r18 = virtualinvoke $r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r17, null);

        $i1 = r2.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: int constant>;

        if $i1 == 0 goto label06;

        $i16 = r2.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: int constant>;

        goto label07;

     label06:
        $r19 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: int[] access$400()>();

        $i2 = staticinvoke <java.lang.Math: int abs(int)>(i14);

        $r20 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: int[] access$400()>();

        $i3 = lengthof $r20;

        $i4 = $i2 % $i3;

        $i16 = $r19[$i4];

     label07:
        i17 = $i16;

        $i5 = r2.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: int multiplier>;

        if $i5 == 0 goto label08;

        $i18 = r2.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: int multiplier>;

        goto label09;

     label08:
        $r21 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: int[] access$400()>();

        $i6 = i14 * 13;

        $i7 = staticinvoke <java.lang.Math: int abs(int)>($i6);

        $r22 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: int[] access$400()>();

        $i8 = lengthof $r22;

        $i9 = $i7 % $i8;

        $i18 = $r21[$i9];

     label09:
        i10 = $i18;

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(i17);

        i19 = 0;

     label10:
        $i20 = lengthof $r8;

        if i19 >= $i20 goto label11;

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        $r42 = specialinvoke r2.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: java.lang.String getFieldName(int)>(i19);

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>($r42);

        $r44 = $r8[i19];

        $r43 = r2.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: com.mycila.inject.internal.cglib.core.Customizer customizer>;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void hash_code(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type,int,com.mycila.inject.internal.cglib.core.Customizer)>($r18, $r44, i10, $r43);

        i19 = i19 + 1;

        goto label10;

     label11:
        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        $r23 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: com.mycila.inject.internal.cglib.core.Signature access$500()>();

        $r24 = virtualinvoke $r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r23, null);

        $r25 = virtualinvoke $r24.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        virtualinvoke $r24.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        virtualinvoke $r24.<com.mycila.inject.internal.cglib.core.CodeEmitter: void instance_of_this()>();

        virtualinvoke $r24.<com.mycila.inject.internal.cglib.core.CodeEmitter: void if_jump(int,com.mycila.inject.internal.asm.Label)>(153, $r25);

        i21 = 0;

     label12:
        $i11 = lengthof $r8;

        if i21 >= $i11 goto label13;

        virtualinvoke $r24.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        $r38 = specialinvoke r2.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: java.lang.String getFieldName(int)>(i21);

        virtualinvoke $r24.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>($r38);

        virtualinvoke $r24.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        virtualinvoke $r24.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast_this()>();

        $r39 = specialinvoke r2.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: java.lang.String getFieldName(int)>(i21);

        virtualinvoke $r24.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>($r39);

        $r41 = $r8[i21];

        $r40 = r2.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: com.mycila.inject.internal.cglib.core.Customizer customizer>;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void not_equals(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.cglib.core.Customizer)>($r24, $r41, $r25, $r40);

        i21 = i21 + 1;

        goto label12;

     label13:
        virtualinvoke $r24.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(1);

        virtualinvoke $r24.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r24.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r25);

        virtualinvoke $r24.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(0);

        virtualinvoke $r24.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r24.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        $r26 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: com.mycila.inject.internal.cglib.core.Signature access$600()>();

        $r27 = virtualinvoke $r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r26, null);

        $r28 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_BUFFER>;

        virtualinvoke $r27.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance(com.mycila.inject.internal.asm.Type)>($r28);

        virtualinvoke $r27.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        $r29 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_BUFFER>;

        virtualinvoke $r27.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type)>($r29);

        i22 = 0;

     label14:
        $i12 = lengthof $r8;

        if i22 >= $i12 goto label16;

        if i22 <= 0 goto label15;

        virtualinvoke $r27.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>(", ");

        $r36 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_BUFFER>;

        $r37 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: com.mycila.inject.internal.cglib.core.Signature access$700()>();

        virtualinvoke $r27.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r36, $r37);

     label15:
        virtualinvoke $r27.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        $r32 = specialinvoke r2.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: java.lang.String getFieldName(int)>(i22);

        virtualinvoke $r27.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>($r32);

        $r35 = $r8[i22];

        $r34 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters DEFAULT_DELIMITERS>;

        $r33 = r2.<com.mycila.inject.internal.cglib.core.KeyFactory$Generator: com.mycila.inject.internal.cglib.core.Customizer customizer>;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void append_string(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters,com.mycila.inject.internal.cglib.core.Customizer)>($r27, $r35, $r34, $r33);

        i22 = i22 + 1;

        goto label14;

     label16:
        $r30 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_BUFFER>;

        $r31 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: com.mycila.inject.internal.cglib.core.Signature access$600()>();

        virtualinvoke $r27.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r30, $r31);

        virtualinvoke $r27.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r27.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: void end_class()>();

        return;
    }

    private java.lang.String getFieldName(int)
    {
        java.lang.StringBuffer $r0, $r1, $r2;
        int i0;
        com.mycila.inject.internal.cglib.core.KeyFactory$Generator r4;
        java.lang.String $r3;

        r4 := @this: com.mycila.inject.internal.cglib.core.KeyFactory$Generator;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FIELD_");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r0;
        java.lang.Class $r1, $r3;
        java.lang.String $r2;

        $r0 = new com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source;

        $r1 = <com.mycila.inject.internal.cglib.core.KeyFactory: java.lang.Class class$net$sf$cglib$core$KeyFactory>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.core.KeyFactory");

        <com.mycila.inject.internal.cglib.core.KeyFactory: java.lang.Class class$net$sf$cglib$core$KeyFactory> = $r3;

        goto label2;

     label1:
        $r3 = <com.mycila.inject.internal.cglib.core.KeyFactory: java.lang.Class class$net$sf$cglib$core$KeyFactory>;

     label2:
        $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source: void <init>(java.lang.String)>($r2);

        <com.mycila.inject.internal.cglib.core.KeyFactory$Generator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE> = $r0;

        return;
    }
}
