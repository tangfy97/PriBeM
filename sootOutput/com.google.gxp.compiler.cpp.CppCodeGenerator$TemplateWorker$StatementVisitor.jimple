public class com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor extends com.google.gxp.compiler.base.DefaultingExpressionVisitor implements com.google.gxp.compiler.base.CallVisitor
{
    final com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker this$0;

    protected void <init>(com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker this$0> = r1;

        specialinvoke r0.<com.google.gxp.compiler.base.DefaultingExpressionVisitor: void <init>()>();

        return;
    }

    public java.lang.Void defaultVisitExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r2;
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.base.Expression r1;

        r2 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.Void visitAbbrExpression(com.google.gxp.compiler.base.AbbrExpression)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.AbbrExpression r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.AbbrExpression;

        return null;
    }

    public java.lang.Void visitCall(com.google.gxp.compiler.base.Call)
    {
        java.lang.Void $r3;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r1;
        java.lang.Object $r2;
        com.google.gxp.compiler.base.Call r0;

        r1 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.Call;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.Call: java.lang.Object acceptCallVisitor(com.google.gxp.compiler.base.CallVisitor)>(r1);

        $r3 = (java.lang.Void) $r2;

        return $r3;
    }

    public java.lang.Void visitConcatenation(com.google.gxp.compiler.base.Concatenation)
    {
        java.util.List $r1;
        com.google.gxp.compiler.base.Expression r4;
        java.util.Iterator $r2;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r5;
        java.lang.Object $r3;
        com.google.gxp.compiler.base.Concatenation r0;
        boolean $z0;

        r5 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.Concatenation;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.Concatenation: java.util.List getValues()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.google.gxp.compiler.base.Expression) $r3;

        virtualinvoke r4.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r5);

        goto label1;

     label2:
        return null;
    }

    public java.lang.Void visitConditional(com.google.gxp.compiler.base.Conditional)
    {
        com.google.gxp.compiler.base.Conditional$Clause $r6, $r11;
        com.google.gxp.compiler.base.Expression $r7;
        java.util.Iterator $r2;
        com.google.gxp.compiler.base.Conditional r0;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r4;
        java.lang.AssertionError $r3;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker $r8, $r9;
        java.util.List $r1;
        java.lang.Object $r5, $r10;
        boolean $z0, $z1, $z2;

        r4 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.Conditional;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.Conditional: java.util.List getClauses()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.google.gxp.compiler.base.Conditional$Clause) $r5;

        specialinvoke r4.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: void appendIf(java.lang.String,com.google.gxp.compiler.base.Conditional$Clause)>("if (", $r6);

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r10 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.google.gxp.compiler.base.Conditional$Clause) $r10;

        specialinvoke r4.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: void appendIf(java.lang.String,com.google.gxp.compiler.base.Conditional$Clause)>("} else if (", $r11);

        goto label1;

     label2:
        $r7 = virtualinvoke r0.<com.google.gxp.compiler.base.Conditional: com.google.gxp.compiler.base.Expression getElseExpression()>();

        $z2 = virtualinvoke $r7.<com.google.gxp.compiler.base.Expression: boolean alwaysEmpty()>();

        if $z2 != 0 goto label3;

        $r9 = r4.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void access$000(com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r9, "} else {");

        virtualinvoke $r7.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r4);

     label3:
        $r8 = r4.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker this$0>;

        staticinvoke <com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void access$100(com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker,java.lang.CharSequence)>($r8, "}");

        goto label5;

     label4:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("No clauses in Conditional!");

        throw $r3;

     label5:
        return null;
    }

    private void appendIf(java.lang.String, com.google.gxp.compiler.base.Conditional$Clause)
    {
        com.google.gxp.compiler.base.Conditional$Clause r0;
        com.google.gxp.compiler.alerts.SourcePosition $r4;
        com.google.gxp.compiler.base.Expression $r1, $r13;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r2;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker $r3, $r8;
        java.lang.StringBuilder $r5, $r7, $r10, $r11;
        java.lang.String r6, $r9, $r12;

        r2 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r6 := @parameter0: java.lang.String;

        r0 := @parameter1: com.google.gxp.compiler.base.Conditional$Clause;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.Conditional$Clause: com.google.gxp.compiler.base.Expression getPredicate()>();

        $r3 = r2.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker this$0>;

        $r4 = virtualinvoke $r1.<com.google.gxp.compiler.base.Expression: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = r2.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker this$0>;

        $r9 = virtualinvoke $r8.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: java.lang.String getCppExpression(com.google.gxp.compiler.base.Expression)>($r1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") {");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void access$200(com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker,com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>($r3, $r4, $r12);

        $r13 = virtualinvoke r0.<com.google.gxp.compiler.base.Conditional$Clause: com.google.gxp.compiler.base.Expression getExpression()>();

        virtualinvoke $r13.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r2);

        return;
    }

    public java.lang.Void visitConvertibleToContent(com.google.gxp.compiler.base.ConvertibleToContent)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r2;
        com.google.gxp.compiler.base.Expression $r1;
        com.google.gxp.compiler.base.ConvertibleToContent r0;

        r2 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.ConvertibleToContent;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.ConvertibleToContent: com.google.gxp.compiler.base.Expression getSubexpression()>();

        virtualinvoke $r1.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r2);

        return null;
    }

    public java.lang.Void visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.EscapeExpression r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.EscapeExpression;

        return null;
    }

    public java.lang.Void visitExceptionExpression(com.google.gxp.compiler.base.ExceptionExpression)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.ExceptionExpression r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExceptionExpression;

        return null;
    }

    public java.lang.Void visitExampleExpression(com.google.gxp.compiler.base.ExampleExpression)
    {
        com.google.gxp.compiler.base.ExampleExpression r0;
        java.lang.Void $r4;
        com.google.gxp.compiler.base.Expression $r1;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r2;
        java.lang.Object $r3;

        r2 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.ExampleExpression;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.ExampleExpression: com.google.gxp.compiler.base.Expression getSubexpression()>();

        $r3 = virtualinvoke $r1.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r2);

        $r4 = (java.lang.Void) $r3;

        return $r4;
    }

    public java.lang.Void visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.ExtractedMessage r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExtractedMessage;

        return null;
    }

    public java.lang.Void visitLoopExpression(com.google.gxp.compiler.base.LoopExpression)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.LoopExpression r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.LoopExpression;

        return null;
    }

    public java.lang.Void visitStringConstant(com.google.gxp.compiler.base.StringConstant)
    {
        com.google.gxp.compiler.alerts.SourcePosition $r4;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r2;
        com.google.gxp.compiler.schema.Schema $r1;
        java.lang.String $r5;
        java.lang.AssertionError $r6;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker $r3;
        com.google.gxp.compiler.base.StringConstant r0;

        r2 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.StringConstant;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.StringConstant: com.google.gxp.compiler.schema.Schema getSchema()>();

        if $r1 != null goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r3 = r2.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker this$0>;

        $r4 = virtualinvoke r0.<com.google.gxp.compiler.base.StringConstant: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r5 = virtualinvoke r0.<com.google.gxp.compiler.base.StringConstant: java.lang.String evaluate()>();

        virtualinvoke $r3.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void writeString(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String)>($r4, $r5);

        return null;
    }

    public java.lang.Void visitBoundCall(com.google.gxp.compiler.base.BoundCall)
    {
        com.google.gxp.compiler.base.BoundCall r1;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r2;
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;

        r2 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.BoundCall;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.Void visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r2;
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.base.UnboundCall r1;

        r2 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.UnboundCall;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.Void visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.ValidatedCall r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ValidatedCall;

        return null;
    }

    public volatile java.lang.Object visitStringConstant(com.google.gxp.compiler.base.StringConstant)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.Void $r2;
        com.google.gxp.compiler.base.StringConstant r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.StringConstant;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitStringConstant(com.google.gxp.compiler.base.StringConstant)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitLoopExpression(com.google.gxp.compiler.base.LoopExpression)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.Void $r2;
        com.google.gxp.compiler.base.LoopExpression r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.LoopExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitLoopExpression(com.google.gxp.compiler.base.LoopExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.Void $r2;
        com.google.gxp.compiler.base.ExtractedMessage r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExtractedMessage;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitExceptionExpression(com.google.gxp.compiler.base.ExceptionExpression)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.Void $r2;
        com.google.gxp.compiler.base.ExceptionExpression r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExceptionExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitExceptionExpression(com.google.gxp.compiler.base.ExceptionExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitExampleExpression(com.google.gxp.compiler.base.ExampleExpression)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        com.google.gxp.compiler.base.ExampleExpression r1;
        java.lang.Void $r2;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExampleExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitExampleExpression(com.google.gxp.compiler.base.ExampleExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.Void $r2;
        com.google.gxp.compiler.base.EscapeExpression r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.EscapeExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitConvertibleToContent(com.google.gxp.compiler.base.ConvertibleToContent)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.Void $r2;
        com.google.gxp.compiler.base.ConvertibleToContent r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ConvertibleToContent;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitConvertibleToContent(com.google.gxp.compiler.base.ConvertibleToContent)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitConditional(com.google.gxp.compiler.base.Conditional)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.Void $r2;
        com.google.gxp.compiler.base.Conditional r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Conditional;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitConditional(com.google.gxp.compiler.base.Conditional)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitConcatenation(com.google.gxp.compiler.base.Concatenation)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.Void $r2;
        com.google.gxp.compiler.base.Concatenation r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Concatenation;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitConcatenation(com.google.gxp.compiler.base.Concatenation)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitCall(com.google.gxp.compiler.base.Call)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.Void $r2;
        com.google.gxp.compiler.base.Call r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Call;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitCall(com.google.gxp.compiler.base.Call)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitAbbrExpression(com.google.gxp.compiler.base.AbbrExpression)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.Void $r2;
        com.google.gxp.compiler.base.AbbrExpression r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.AbbrExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitAbbrExpression(com.google.gxp.compiler.base.AbbrExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object defaultVisitExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.Void $r2;
        com.google.gxp.compiler.base.Expression r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void defaultVisitExpression(com.google.gxp.compiler.base.Expression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.Void $r2;
        com.google.gxp.compiler.base.ValidatedCall r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ValidatedCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitBoundCall(com.google.gxp.compiler.base.BoundCall)
    {
        com.google.gxp.compiler.base.BoundCall r1;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.Void $r2;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.BoundCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitBoundCall(com.google.gxp.compiler.base.BoundCall)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor r0;
        java.lang.Void $r2;
        com.google.gxp.compiler.base.UnboundCall r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.UnboundCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: java.lang.Void visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)>(r1);

        return $r2;
    }
}
