public abstract class org.apache.lucene.queryparser.classic.QueryParserBase extends java.lang.Object implements org.apache.lucene.queryparser.flexible.standard.CommonQueryParserConfiguration
{
    static final int CONJ_NONE;
    static final int CONJ_AND;
    static final int CONJ_OR;
    static final int MOD_NONE;
    static final int MOD_NOT;
    static final int MOD_REQ;
    public static final org.apache.lucene.queryparser.classic.QueryParser$Operator AND_OPERATOR;
    public static final org.apache.lucene.queryparser.classic.QueryParser$Operator OR_OPERATOR;
    org.apache.lucene.queryparser.classic.QueryParser$Operator operator;
    boolean lowercaseExpandedTerms;
    org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod;
    boolean allowLeadingWildcard;
    boolean enablePositionIncrements;
    org.apache.lucene.analysis.Analyzer analyzer;
    java.lang.String field;
    int phraseSlop;
    float fuzzyMinSim;
    int fuzzyPrefixLength;
    java.util.Locale locale;
    java.util.TimeZone timeZone;
    org.apache.lucene.document.DateTools$Resolution dateResolution;
    java.util.Map fieldToDateResolution;
    boolean analyzeRangeTerms;
    boolean autoGeneratePhraseQueries;
    static final boolean $assertionsDisabled;

    protected void <init>()
    {
        java.util.Locale $r3;
        java.util.TimeZone $r4;
        org.apache.lucene.queryparser.classic.QueryParser$Operator $r1;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r2;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.queryparser.classic.QueryParser$Operator OR_OPERATOR>;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.queryparser.classic.QueryParser$Operator operator> = $r1;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean lowercaseExpandedTerms> = 1;

        $r2 = <org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_AUTO_REWRITE_DEFAULT>;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod> = $r2;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean allowLeadingWildcard> = 0;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean enablePositionIncrements> = 1;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: int phraseSlop> = 0;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: float fuzzyMinSim> = 2.0F;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: int fuzzyPrefixLength> = 0;

        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Locale locale> = $r3;

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.TimeZone timeZone> = $r4;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.document.DateTools$Resolution dateResolution> = null;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Map fieldToDateResolution> = null;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean analyzeRangeTerms> = 0;

        return;
    }

    public void init(org.apache.lucene.util.Version, java.lang.String, org.apache.lucene.analysis.Analyzer)
    {
        org.apache.lucene.analysis.Analyzer r1;
        java.lang.String r2;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        org.apache.lucene.util.Version r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r3 := @parameter0: org.apache.lucene.util.Version;

        r2 := @parameter1: java.lang.String;

        r1 := @parameter2: org.apache.lucene.analysis.Analyzer;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.analysis.Analyzer analyzer> = r1;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.lang.String field> = r2;

        $r4 = <org.apache.lucene.util.Version: org.apache.lucene.util.Version LUCENE_31>;

        $z0 = virtualinvoke r3.<org.apache.lucene.util.Version: boolean onOrAfter(org.apache.lucene.util.Version)>($r4);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: void setAutoGeneratePhraseQueries(boolean)>(0);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: void setAutoGeneratePhraseQueries(boolean)>(1);

     label2:
        return;
    }

    public abstract void ReInit(org.apache.lucene.queryparser.classic.CharStream);

    public abstract org.apache.lucene.search.Query TopLevelQuery(java.lang.String) throws org.apache.lucene.queryparser.classic.ParseException;

    public org.apache.lucene.search.Query parse(java.lang.String) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r5, $r31;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        org.apache.lucene.queryparser.classic.TokenMgrError $r13;
        org.apache.lucene.search.BooleanQuery$TooManyClauses $r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r15, $r16, $r17, $r18, $r20, $r24, $r25, $r26, $r27, $r29;
        org.apache.lucene.queryparser.classic.ParseException $r7, $r14, $r22, $r23;
        java.lang.String r3, $r4, $r12, $r19, $r21, $r28, $r30;
        java.io.StringReader $r2;
        org.apache.lucene.queryparser.classic.FastCharStream $r1;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r3 := @parameter0: java.lang.String;

        $r1 = new org.apache.lucene.queryparser.classic.FastCharStream;

        $r2 = new java.io.StringReader;

        specialinvoke $r2.<java.io.StringReader: void <init>(java.lang.String)>(r3);

        specialinvoke $r1.<org.apache.lucene.queryparser.classic.FastCharStream: void <init>(java.io.Reader)>($r2);

        virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: void ReInit(org.apache.lucene.queryparser.classic.CharStream)>($r1);

     label1:
        $r4 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.lang.String field>;

        $r5 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query TopLevelQuery(java.lang.String)>($r4);

        if $r5 == null goto label2;

        $r31 = $r5;

        goto label3;

     label2:
        $r31 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.BooleanQuery newBooleanQuery(boolean)>(0);

     label3:
        return $r31;

     label4:
        $r22 := @caughtexception;

        $r23 = new org.apache.lucene.queryparser.classic.ParseException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse \'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r28 = virtualinvoke $r22.<org.apache.lucene.queryparser.classic.ParseException: java.lang.String getMessage()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<org.apache.lucene.queryparser.classic.ParseException: void <init>(java.lang.String)>($r30);

        virtualinvoke $r23.<org.apache.lucene.queryparser.classic.ParseException: java.lang.Throwable initCause(java.lang.Throwable)>($r22);

        throw $r23;

     label5:
        $r13 := @caughtexception;

        $r14 = new org.apache.lucene.queryparser.classic.ParseException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse \'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r19 = virtualinvoke $r13.<org.apache.lucene.queryparser.classic.TokenMgrError: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.apache.lucene.queryparser.classic.ParseException: void <init>(java.lang.String)>($r21);

        virtualinvoke $r14.<org.apache.lucene.queryparser.classic.ParseException: java.lang.Throwable initCause(java.lang.Throwable)>($r13);

        throw $r14;

     label6:
        $r6 := @caughtexception;

        $r7 = new org.apache.lucene.queryparser.classic.ParseException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': too many boolean clauses");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.lucene.queryparser.classic.ParseException: void <init>(java.lang.String)>($r12);

        virtualinvoke $r7.<org.apache.lucene.queryparser.classic.ParseException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        throw $r7;

        catch org.apache.lucene.queryparser.classic.ParseException from label1 to label3 with label4;
        catch org.apache.lucene.queryparser.classic.TokenMgrError from label1 to label3 with label5;
        catch org.apache.lucene.search.BooleanQuery$TooManyClauses from label1 to label3 with label6;
    }

    public org.apache.lucene.analysis.Analyzer getAnalyzer()
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        org.apache.lucene.analysis.Analyzer $r1;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $r1 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.analysis.Analyzer analyzer>;

        return $r1;
    }

    public java.lang.String getField()
    {
        java.lang.String $r1;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $r1 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.lang.String field>;

        return $r1;
    }

    public final boolean getAutoGeneratePhraseQueries()
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $z0 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean autoGeneratePhraseQueries>;

        return $z0;
    }

    public final void setAutoGeneratePhraseQueries(boolean)
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        boolean z0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean autoGeneratePhraseQueries> = z0;

        return;
    }

    public float getFuzzyMinSim()
    {
        float $f0;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $f0 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: float fuzzyMinSim>;

        return $f0;
    }

    public void setFuzzyMinSim(float)
    {
        float f0;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        f0 := @parameter0: float;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: float fuzzyMinSim> = f0;

        return;
    }

    public int getFuzzyPrefixLength()
    {
        int $i0;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $i0 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: int fuzzyPrefixLength>;

        return $i0;
    }

    public void setFuzzyPrefixLength(int)
    {
        int i0;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: int fuzzyPrefixLength> = i0;

        return;
    }

    public void setPhraseSlop(int)
    {
        int i0;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: int phraseSlop> = i0;

        return;
    }

    public int getPhraseSlop()
    {
        int $i0;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $i0 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: int phraseSlop>;

        return $i0;
    }

    public void setAllowLeadingWildcard(boolean)
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        boolean z0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean allowLeadingWildcard> = z0;

        return;
    }

    public boolean getAllowLeadingWildcard()
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $z0 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean allowLeadingWildcard>;

        return $z0;
    }

    public void setEnablePositionIncrements(boolean)
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        boolean z0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean enablePositionIncrements> = z0;

        return;
    }

    public boolean getEnablePositionIncrements()
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $z0 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean enablePositionIncrements>;

        return $z0;
    }

    public void setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser$Operator)
    {
        org.apache.lucene.queryparser.classic.QueryParser$Operator r1;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r1 := @parameter0: org.apache.lucene.queryparser.classic.QueryParser$Operator;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.queryparser.classic.QueryParser$Operator operator> = r1;

        return;
    }

    public org.apache.lucene.queryparser.classic.QueryParser$Operator getDefaultOperator()
    {
        org.apache.lucene.queryparser.classic.QueryParser$Operator $r1;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $r1 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.queryparser.classic.QueryParser$Operator operator>;

        return $r1;
    }

    public void setLowercaseExpandedTerms(boolean)
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        boolean z0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean lowercaseExpandedTerms> = z0;

        return;
    }

    public boolean getLowercaseExpandedTerms()
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $z0 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean lowercaseExpandedTerms>;

        return $z0;
    }

    public void setMultiTermRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)
    {
        org.apache.lucene.search.MultiTermQuery$RewriteMethod r1;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r1 := @parameter0: org.apache.lucene.search.MultiTermQuery$RewriteMethod;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod> = r1;

        return;
    }

    public org.apache.lucene.search.MultiTermQuery$RewriteMethod getMultiTermRewriteMethod()
    {
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r1;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $r1 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod>;

        return $r1;
    }

    public void setLocale(java.util.Locale)
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        java.util.Locale r1;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r1 := @parameter0: java.util.Locale;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Locale locale> = r1;

        return;
    }

    public java.util.Locale getLocale()
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        java.util.Locale $r1;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $r1 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Locale locale>;

        return $r1;
    }

    public void setTimeZone(java.util.TimeZone)
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        java.util.TimeZone r1;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r1 := @parameter0: java.util.TimeZone;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.TimeZone timeZone> = r1;

        return;
    }

    public java.util.TimeZone getTimeZone()
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        java.util.TimeZone $r1;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $r1 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.TimeZone timeZone>;

        return $r1;
    }

    public void setDateResolution(org.apache.lucene.document.DateTools$Resolution)
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        org.apache.lucene.document.DateTools$Resolution r1;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r1 := @parameter0: org.apache.lucene.document.DateTools$Resolution;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.document.DateTools$Resolution dateResolution> = r1;

        return;
    }

    public void setDateResolution(java.lang.String, org.apache.lucene.document.DateTools$Resolution)
    {
        java.util.Map $r2, $r4;
        java.util.HashMap $r5;
        java.lang.String r0;
        org.apache.lucene.queryparser.classic.QueryParserBase r1;
        java.lang.IllegalArgumentException $r6;
        org.apache.lucene.document.DateTools$Resolution r3;

        r1 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.lucene.document.DateTools$Resolution;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field cannot be null.");

        throw $r6;

     label1:
        $r2 = r1.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Map fieldToDateResolution>;

        if $r2 != null goto label2;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r1.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Map fieldToDateResolution> = $r5;

     label2:
        $r4 = r1.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Map fieldToDateResolution>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r3);

        return;
    }

    public org.apache.lucene.document.DateTools$Resolution getDateResolution(java.lang.String)
    {
        java.lang.IllegalArgumentException $r6;
        org.apache.lucene.document.DateTools$Resolution $r5, r7;
        java.util.Map $r2, $r3;
        java.lang.Object $r4;
        java.lang.String r0;
        org.apache.lucene.queryparser.classic.QueryParserBase r1;

        r1 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field cannot be null.");

        throw $r6;

     label1:
        $r2 = r1.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Map fieldToDateResolution>;

        if $r2 != null goto label2;

        $r5 = r1.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.document.DateTools$Resolution dateResolution>;

        return $r5;

     label2:
        $r3 = r1.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Map fieldToDateResolution>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r7 = (org.apache.lucene.document.DateTools$Resolution) $r4;

        if r7 != null goto label3;

        r7 = r1.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.document.DateTools$Resolution dateResolution>;

     label3:
        return r7;
    }

    public void setAnalyzeRangeTerms(boolean)
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        boolean z0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean analyzeRangeTerms> = z0;

        return;
    }

    public boolean getAnalyzeRangeTerms()
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $z0 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean analyzeRangeTerms>;

        return $z0;
    }

    protected void addClause(java.util.List, int, int, org.apache.lucene.search.Query)
    {
        org.apache.lucene.search.Query r1;
        org.apache.lucene.queryparser.classic.QueryParserBase r2;
        org.apache.lucene.search.BooleanClause$Occur $r6, $r8, $r10, $r15, $r17;
        boolean $z0, $z1, $z2, z3, $z4, z5, $z7, $z8, $z9;
        java.util.List r0;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.lucene.queryparser.classic.QueryParser$Operator $r3, $r4, $r12, $r13;
        java.lang.RuntimeException $r5;
        org.apache.lucene.search.BooleanClause $r7, $r9, $r11, r18, r19;
        java.lang.Object $r14, $r16;

        r2 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r0 := @parameter0: java.util.List;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: org.apache.lucene.search.Query;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 0 goto label01;

        if i2 != 1 goto label01;

        $i5 = interfaceinvoke r0.<java.util.List: int size()>();

        $i6 = $i5 - 1;

        $r16 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i6);

        r18 = (org.apache.lucene.search.BooleanClause) $r16;

        $z1 = virtualinvoke r18.<org.apache.lucene.search.BooleanClause: boolean isProhibited()>();

        if $z1 != 0 goto label01;

        $r17 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur MUST>;

        virtualinvoke r18.<org.apache.lucene.search.BooleanClause: void setOccur(org.apache.lucene.search.BooleanClause$Occur)>($r17);

     label01:
        $i7 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i7 <= 0 goto label02;

        $r13 = r2.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.queryparser.classic.QueryParser$Operator operator>;

        $r12 = <org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.queryparser.classic.QueryParser$Operator AND_OPERATOR>;

        if $r13 != $r12 goto label02;

        if i2 != 2 goto label02;

        $i3 = interfaceinvoke r0.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        $r14 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i4);

        r19 = (org.apache.lucene.search.BooleanClause) $r14;

        $z0 = virtualinvoke r19.<org.apache.lucene.search.BooleanClause: boolean isProhibited()>();

        if $z0 != 0 goto label02;

        $r15 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        virtualinvoke r19.<org.apache.lucene.search.BooleanClause: void setOccur(org.apache.lucene.search.BooleanClause$Occur)>($r15);

     label02:
        if r1 != null goto label03;

        return;

     label03:
        $r4 = r2.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.queryparser.classic.QueryParser$Operator operator>;

        $r3 = <org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.queryparser.classic.QueryParser$Operator OR_OPERATOR>;

        if $r4 != $r3 goto label08;

        if i1 != 10 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        z3 = $z2;

        if i1 != 11 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        z5 = $z4;

        if i2 != 1 goto label13;

        if z3 != 0 goto label13;

        z5 = 1;

        goto label13;

     label08:
        if i1 != 10 goto label09;

        $z9 = 1;

        $z8 = 1;

        goto label10;

     label09:
        $z9 = 0;

        $z8 = 0;

     label10:
        z3 = $z8;

        if $z9 != 0 goto label11;

        if i2 == 2 goto label11;

        $z7 = 1;

        goto label12;

     label11:
        $z7 = 0;

     label12:
        z5 = $z7;

     label13:
        if z5 == 0 goto label14;

        if z3 != 0 goto label14;

        $r10 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur MUST>;

        $r11 = virtualinvoke r2.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.BooleanClause newBooleanClause(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>(r1, $r10);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label17;

     label14:
        if z5 != 0 goto label15;

        if z3 != 0 goto label15;

        $r8 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        $r9 = virtualinvoke r2.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.BooleanClause newBooleanClause(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>(r1, $r8);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label17;

     label15:
        if z5 != 0 goto label16;

        if z3 == 0 goto label16;

        $r6 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur MUST_NOT>;

        $r7 = virtualinvoke r2.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.BooleanClause newBooleanClause(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>(r1, $r6);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label17;

     label16:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Clause cannot be both required and prohibited");

        throw $r5;

     label17:
        return;
    }

    protected org.apache.lucene.search.Query getFieldQuery(java.lang.String, java.lang.String, boolean) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r4;
        org.apache.lucene.analysis.Analyzer $r3;
        java.lang.String r1, r2;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        boolean z0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r3 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.analysis.Analyzer analyzer>;

        $r4 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query newFieldQuery(org.apache.lucene.analysis.Analyzer,java.lang.String,java.lang.String,boolean)>($r3, r1, r2, z0);

        return $r4;
    }

    protected org.apache.lucene.search.Query newFieldQuery(org.apache.lucene.analysis.Analyzer, java.lang.String, java.lang.String, boolean) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r15, $r24, $r50, r70, r71;
        org.apache.lucene.index.Term $r79, $r81, $r83, $r84, $r87, $r89, $r90;
        org.apache.lucene.search.PhraseQuery $r42;
        org.apache.lucene.index.Term[] $r29, $r31, $r32, $r34, $r35, $r37, $r38, $r40;
        org.apache.lucene.search.BooleanClause$Occur $r16, $r18, $r25, $r68, r69;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute r65;
        org.apache.lucene.util.Attribute $r52, $r53;
        org.apache.lucene.queryparser.classic.ParseException $r75, $r77;
        java.lang.Object[] $r30, $r33, $r36, $r39;
        java.lang.AssertionError $r78, $r80, $r82, $r86, $r88;
        java.util.ArrayList $r85;
        org.apache.lucene.search.MultiPhraseQuery $r27;
        org.apache.lucene.analysis.CachingTokenFilter $r76;
        java.lang.String r1, r3;
        org.apache.lucene.analysis.TokenStream $r4;
        org.apache.lucene.analysis.Analyzer r0;
        java.io.IOException $r54, $r55, $r56, $r57, $r58, $r59, $r61, $r62;
        java.io.StringReader $r74;
        org.apache.lucene.queryparser.classic.QueryParserBase r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z19, z20;
        org.apache.lucene.util.BytesRef $r11, $r14, $r23, $r44, $r46, $r49, $r66, r67, $r73;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, i7, i8, i9, i10, i11, i12, i13, i14, $i16, $i18;
        org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute r64;
        org.apache.lucene.queryparser.classic.QueryParser$Operator $r8, $r9;
        org.apache.lucene.search.BooleanQuery $r7, $r13, $r17, $r19, $r21;

        r6 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r0 := @parameter0: org.apache.lucene.analysis.Analyzer;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z7 := @parameter3: boolean;

     label01:
        $r74 = new java.io.StringReader;

        specialinvoke $r74.<java.io.StringReader: void <init>(java.lang.String)>(r3);

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.Analyzer: org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String,java.io.Reader)>(r1, $r74);

        virtualinvoke $r4.<org.apache.lucene.analysis.TokenStream: void reset()>();

     label02:
        goto label04;

     label03:
        $r62 := @caughtexception;

        $r75 = new org.apache.lucene.queryparser.classic.ParseException;

        specialinvoke $r75.<org.apache.lucene.queryparser.classic.ParseException: void <init>(java.lang.String)>("Unable to initialize TokenStream to analyze query text");

        virtualinvoke $r75.<org.apache.lucene.queryparser.classic.ParseException: java.lang.Throwable initCause(java.lang.Throwable)>($r62);

        throw $r75;

     label04:
        $r76 = new org.apache.lucene.analysis.CachingTokenFilter;

        specialinvoke $r76.<org.apache.lucene.analysis.CachingTokenFilter: void <init>(org.apache.lucene.analysis.TokenStream)>($r4);

        r64 = null;

        r65 = null;

        i4 = 0;

        virtualinvoke $r76.<org.apache.lucene.analysis.CachingTokenFilter: void reset()>();

        $z0 = virtualinvoke $r76.<org.apache.lucene.analysis.CachingTokenFilter: boolean hasAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute;");

        if $z0 == 0 goto label05;

        $r53 = virtualinvoke $r76.<org.apache.lucene.analysis.CachingTokenFilter: org.apache.lucene.util.Attribute getAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute;");

        r64 = (org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute) $r53;

     label05:
        $z1 = virtualinvoke $r76.<org.apache.lucene.analysis.CachingTokenFilter: boolean hasAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute;");

        if $z1 == 0 goto label06;

        $r52 = virtualinvoke $r76.<org.apache.lucene.analysis.CachingTokenFilter: org.apache.lucene.util.Attribute getAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute;");

        r65 = (org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute) $r52;

     label06:
        i5 = 0;

        z19 = 0;

        if r64 == null goto label15;

     label07:
        z20 = virtualinvoke $r76.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

     label08:
        if z20 == 0 goto label13;

        i4 = i4 + 1;

        if r65 == null goto label09;

        $i6 = interfaceinvoke r65.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: int getPositionIncrement()>();

        goto label10;

     label09:
        $i6 = 1;

     label10:
        if $i6 == 0 goto label11;

        i5 = i5 + $i6;

        goto label12;

     label11:
        z19 = 1;

     label12:
        z20 = virtualinvoke $r76.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

        goto label08;

     label13:
        goto label15;

     label14:
        $r61 := @caughtexception;

     label15:
        virtualinvoke $r76.<org.apache.lucene.analysis.CachingTokenFilter: void reset()>();

        virtualinvoke $r4.<org.apache.lucene.analysis.TokenStream: void close()>();

     label16:
        goto label18;

     label17:
        $r59 := @caughtexception;

        $r77 = new org.apache.lucene.queryparser.classic.ParseException;

        specialinvoke $r77.<org.apache.lucene.queryparser.classic.ParseException: void <init>(java.lang.String)>("Cannot close TokenStream analyzing query text");

        virtualinvoke $r77.<org.apache.lucene.queryparser.classic.ParseException: java.lang.Throwable initCause(java.lang.Throwable)>($r59);

        throw $r77;

     label18:
        if r64 != null goto label19;

        $r66 = null;

        goto label20;

     label19:
        $r66 = interfaceinvoke r64.<org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute: org.apache.lucene.util.BytesRef getBytesRef()>();

     label20:
        r67 = $r66;

        if i4 != 0 goto label21;

        return null;

     label21:
        if i4 != 1 goto label27;

     label22:
        $z17 = virtualinvoke $r76.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

        $z18 = <org.apache.lucene.queryparser.classic.QueryParserBase: boolean $assertionsDisabled>;

        if $z18 != 0 goto label23;

        if $z17 == 1 goto label23;

        $r78 = new java.lang.AssertionError;

        specialinvoke $r78.<java.lang.AssertionError: void <init>()>();

        throw $r78;

     label23:
        interfaceinvoke r64.<org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute: int fillBytesRef()>();

     label24:
        goto label26;

     label25:
        $r58 := @caughtexception;

     label26:
        $r79 = new org.apache.lucene.index.Term;

        $r49 = staticinvoke <org.apache.lucene.util.BytesRef: org.apache.lucene.util.BytesRef deepCopyOf(org.apache.lucene.util.BytesRef)>(r67);

        specialinvoke $r79.<org.apache.lucene.index.Term: void <init>(java.lang.String,org.apache.lucene.util.BytesRef)>(r1, $r49);

        $r50 = virtualinvoke r6.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query newTermQuery(org.apache.lucene.index.Term)>($r79);

        return $r50;

     label27:
        if z19 != 0 goto label28;

        if z7 != 0 goto label64;

        $z16 = r6.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean autoGeneratePhraseQueries>;

        if $z16 != 0 goto label64;

     label28:
        if i5 == 1 goto label29;

        if z7 != 0 goto label51;

        $z12 = r6.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean autoGeneratePhraseQueries>;

        if $z12 != 0 goto label51;

     label29:
        if i5 != 1 goto label37;

        $r21 = virtualinvoke r6.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.BooleanQuery newBooleanQuery(boolean)>(1);

        i7 = 0;

     label30:
        if i7 >= i4 goto label36;

     label31:
        $z5 = virtualinvoke $r76.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

        $z6 = <org.apache.lucene.queryparser.classic.QueryParserBase: boolean $assertionsDisabled>;

        if $z6 != 0 goto label32;

        if $z5 == 1 goto label32;

        $r80 = new java.lang.AssertionError;

        specialinvoke $r80.<java.lang.AssertionError: void <init>()>();

        throw $r80;

     label32:
        interfaceinvoke r64.<org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute: int fillBytesRef()>();

     label33:
        goto label35;

     label34:
        $r57 := @caughtexception;

     label35:
        $r81 = new org.apache.lucene.index.Term;

        $r23 = staticinvoke <org.apache.lucene.util.BytesRef: org.apache.lucene.util.BytesRef deepCopyOf(org.apache.lucene.util.BytesRef)>(r67);

        specialinvoke $r81.<org.apache.lucene.index.Term: void <init>(java.lang.String,org.apache.lucene.util.BytesRef)>(r1, $r23);

        $r24 = virtualinvoke r6.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query newTermQuery(org.apache.lucene.index.Term)>($r81);

        $r25 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        virtualinvoke $r21.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r24, $r25);

        i7 = i7 + 1;

        goto label30;

     label36:
        return $r21;

     label37:
        $r7 = virtualinvoke r6.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.BooleanQuery newBooleanQuery(boolean)>(0);

        $r9 = r6.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.queryparser.classic.QueryParser$Operator operator>;

        $r8 = <org.apache.lucene.queryparser.classic.QueryParser$Operator: org.apache.lucene.queryparser.classic.QueryParser$Operator AND>;

        if $r9 != $r8 goto label38;

        $r68 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur MUST>;

        goto label39;

     label38:
        $r68 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

     label39:
        r69 = $r68;

        r70 = null;

        i8 = 0;

     label40:
        if i8 >= i4 goto label50;

     label41:
        $z2 = virtualinvoke $r76.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

        $z3 = <org.apache.lucene.queryparser.classic.QueryParserBase: boolean $assertionsDisabled>;

        if $z3 != 0 goto label42;

        if $z2 == 1 goto label42;

        $r82 = new java.lang.AssertionError;

        specialinvoke $r82.<java.lang.AssertionError: void <init>()>();

        throw $r82;

     label42:
        interfaceinvoke r64.<org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute: int fillBytesRef()>();

     label43:
        goto label45;

     label44:
        $r56 := @caughtexception;

     label45:
        if r65 == null goto label47;

        $i0 = interfaceinvoke r65.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: int getPositionIncrement()>();

        if $i0 != 0 goto label47;

        $z4 = r70 instanceof org.apache.lucene.search.BooleanQuery;

        if $z4 != 0 goto label46;

        r71 = r70;

        $r17 = virtualinvoke r6.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.BooleanQuery newBooleanQuery(boolean)>(1);

        r70 = $r17;

        $r19 = (org.apache.lucene.search.BooleanQuery) $r17;

        $r18 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        virtualinvoke $r19.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>(r71, $r18);

     label46:
        $r13 = (org.apache.lucene.search.BooleanQuery) r70;

        $r83 = new org.apache.lucene.index.Term;

        $r14 = staticinvoke <org.apache.lucene.util.BytesRef: org.apache.lucene.util.BytesRef deepCopyOf(org.apache.lucene.util.BytesRef)>(r67);

        specialinvoke $r83.<org.apache.lucene.index.Term: void <init>(java.lang.String,org.apache.lucene.util.BytesRef)>(r1, $r14);

        $r15 = virtualinvoke r6.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query newTermQuery(org.apache.lucene.index.Term)>($r83);

        $r16 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        virtualinvoke $r13.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r15, $r16);

        goto label49;

     label47:
        if r70 == null goto label48;

        virtualinvoke $r7.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>(r70, r69);

     label48:
        $r84 = new org.apache.lucene.index.Term;

        $r11 = staticinvoke <org.apache.lucene.util.BytesRef: org.apache.lucene.util.BytesRef deepCopyOf(org.apache.lucene.util.BytesRef)>(r67);

        specialinvoke $r84.<org.apache.lucene.index.Term: void <init>(java.lang.String,org.apache.lucene.util.BytesRef)>(r1, $r11);

        r70 = virtualinvoke r6.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query newTermQuery(org.apache.lucene.index.Term)>($r84);

     label49:
        i8 = i8 + 1;

        goto label40;

     label50:
        virtualinvoke $r7.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>(r70, r69);

        return $r7;

     label51:
        $r27 = virtualinvoke r6.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.MultiPhraseQuery newMultiPhraseQuery()>();

        $i1 = r6.<org.apache.lucene.queryparser.classic.QueryParserBase: int phraseSlop>;

        virtualinvoke $r27.<org.apache.lucene.search.MultiPhraseQuery: void setSlop(int)>($i1);

        $r85 = new java.util.ArrayList;

        specialinvoke $r85.<java.util.ArrayList: void <init>()>();

        $i16 = (int) -1;

        i9 = $i16;

        i10 = 0;

     label52:
        if i10 >= i4 goto label61;

        i11 = 1;

     label53:
        $z9 = virtualinvoke $r76.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

        $z10 = <org.apache.lucene.queryparser.classic.QueryParserBase: boolean $assertionsDisabled>;

        if $z10 != 0 goto label54;

        if $z9 == 1 goto label54;

        $r86 = new java.lang.AssertionError;

        specialinvoke $r86.<java.lang.AssertionError: void <init>()>();

        throw $r86;

     label54:
        interfaceinvoke r64.<org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute: int fillBytesRef()>();

        if r65 == null goto label55;

        i11 = interfaceinvoke r65.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: int getPositionIncrement()>();

     label55:
        goto label57;

     label56:
        $r55 := @caughtexception;

     label57:
        if i11 <= 0 goto label60;

        $i2 = interfaceinvoke $r85.<java.util.List: int size()>();

        if $i2 <= 0 goto label60;

        $z11 = r6.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean enablePositionIncrements>;

        if $z11 == 0 goto label58;

        $r38 = newarray (org.apache.lucene.index.Term)[0];

        $r39 = interfaceinvoke $r85.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r38);

        $r40 = (org.apache.lucene.index.Term[]) $r39;

        virtualinvoke $r27.<org.apache.lucene.search.MultiPhraseQuery: void add(org.apache.lucene.index.Term[],int)>($r40, i9);

        goto label59;

     label58:
        $r35 = newarray (org.apache.lucene.index.Term)[0];

        $r36 = interfaceinvoke $r85.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r35);

        $r37 = (org.apache.lucene.index.Term[]) $r36;

        virtualinvoke $r27.<org.apache.lucene.search.MultiPhraseQuery: void add(org.apache.lucene.index.Term[])>($r37);

     label59:
        interfaceinvoke $r85.<java.util.List: void clear()>();

     label60:
        i9 = i9 + i11;

        $r87 = new org.apache.lucene.index.Term;

        $r73 = staticinvoke <org.apache.lucene.util.BytesRef: org.apache.lucene.util.BytesRef deepCopyOf(org.apache.lucene.util.BytesRef)>(r67);

        specialinvoke $r87.<org.apache.lucene.index.Term: void <init>(java.lang.String,org.apache.lucene.util.BytesRef)>(r1, $r73);

        interfaceinvoke $r85.<java.util.List: boolean add(java.lang.Object)>($r87);

        i10 = i10 + 1;

        goto label52;

     label61:
        $z8 = r6.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean enablePositionIncrements>;

        if $z8 == 0 goto label62;

        $r32 = newarray (org.apache.lucene.index.Term)[0];

        $r33 = interfaceinvoke $r85.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r32);

        $r34 = (org.apache.lucene.index.Term[]) $r33;

        virtualinvoke $r27.<org.apache.lucene.search.MultiPhraseQuery: void add(org.apache.lucene.index.Term[],int)>($r34, i9);

        goto label63;

     label62:
        $r29 = newarray (org.apache.lucene.index.Term)[0];

        $r30 = interfaceinvoke $r85.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r29);

        $r31 = (org.apache.lucene.index.Term[]) $r30;

        virtualinvoke $r27.<org.apache.lucene.search.MultiPhraseQuery: void add(org.apache.lucene.index.Term[])>($r31);

     label63:
        return $r27;

     label64:
        $r42 = virtualinvoke r6.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.PhraseQuery newPhraseQuery()>();

        $i3 = r6.<org.apache.lucene.queryparser.classic.QueryParserBase: int phraseSlop>;

        virtualinvoke $r42.<org.apache.lucene.search.PhraseQuery: void setSlop(int)>($i3);

        $i18 = (int) -1;

        i12 = $i18;

        i13 = 0;

     label65:
        if i13 >= i4 goto label73;

        i14 = 1;

     label66:
        $z13 = virtualinvoke $r76.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

        $z14 = <org.apache.lucene.queryparser.classic.QueryParserBase: boolean $assertionsDisabled>;

        if $z14 != 0 goto label67;

        if $z13 == 1 goto label67;

        $r88 = new java.lang.AssertionError;

        specialinvoke $r88.<java.lang.AssertionError: void <init>()>();

        throw $r88;

     label67:
        interfaceinvoke r64.<org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute: int fillBytesRef()>();

        if r65 == null goto label68;

        i14 = interfaceinvoke r65.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: int getPositionIncrement()>();

     label68:
        goto label70;

     label69:
        $r54 := @caughtexception;

     label70:
        $z15 = r6.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean enablePositionIncrements>;

        if $z15 == 0 goto label71;

        i12 = i12 + i14;

        $r89 = new org.apache.lucene.index.Term;

        $r46 = staticinvoke <org.apache.lucene.util.BytesRef: org.apache.lucene.util.BytesRef deepCopyOf(org.apache.lucene.util.BytesRef)>(r67);

        specialinvoke $r89.<org.apache.lucene.index.Term: void <init>(java.lang.String,org.apache.lucene.util.BytesRef)>(r1, $r46);

        virtualinvoke $r42.<org.apache.lucene.search.PhraseQuery: void add(org.apache.lucene.index.Term,int)>($r89, i12);

        goto label72;

     label71:
        $r90 = new org.apache.lucene.index.Term;

        $r44 = staticinvoke <org.apache.lucene.util.BytesRef: org.apache.lucene.util.BytesRef deepCopyOf(org.apache.lucene.util.BytesRef)>(r67);

        specialinvoke $r90.<org.apache.lucene.index.Term: void <init>(java.lang.String,org.apache.lucene.util.BytesRef)>(r1, $r44);

        virtualinvoke $r42.<org.apache.lucene.search.PhraseQuery: void add(org.apache.lucene.index.Term)>($r90);

     label72:
        i13 = i13 + 1;

        goto label65;

     label73:
        return $r42;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label07 to label13 with label14;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.io.IOException from label22 to label24 with label25;
        catch java.io.IOException from label31 to label33 with label34;
        catch java.io.IOException from label41 to label43 with label44;
        catch java.io.IOException from label53 to label55 with label56;
        catch java.io.IOException from label66 to label68 with label69;
    }

    protected org.apache.lucene.search.Query getFieldQuery(java.lang.String, java.lang.String, int) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r3;
        org.apache.lucene.search.PhraseQuery $r5;
        org.apache.lucene.search.MultiPhraseQuery $r4;
        int i0;
        java.lang.String r1, r2;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,boolean)>(r1, r2, 1);

        $z0 = $r3 instanceof org.apache.lucene.search.PhraseQuery;

        if $z0 == 0 goto label1;

        $r5 = (org.apache.lucene.search.PhraseQuery) $r3;

        virtualinvoke $r5.<org.apache.lucene.search.PhraseQuery: void setSlop(int)>(i0);

     label1:
        $z1 = $r3 instanceof org.apache.lucene.search.MultiPhraseQuery;

        if $z1 == 0 goto label2;

        $r4 = (org.apache.lucene.search.MultiPhraseQuery) $r3;

        virtualinvoke $r4.<org.apache.lucene.search.MultiPhraseQuery: void setSlop(int)>(i0);

     label2:
        return $r3;
    }

    protected org.apache.lucene.search.Query getRangeQuery(java.lang.String, java.lang.String, java.lang.String, boolean, boolean) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r3;
        java.util.Date $r2, $r18, r19;
        org.apache.lucene.document.DateTools$Resolution $r17;
        java.util.Calendar $r6;
        java.util.Locale $r4, $r7, $r8, $r15;
        java.lang.String r1, r11, r12, $r13, $r14;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        java.text.DateFormat $r16;
        boolean $z0, z1, z2;
        java.util.TimeZone $r5;
        java.lang.Exception $r9, $r10;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r1 := @parameter0: java.lang.String;

        r11 := @parameter1: java.lang.String;

        r12 := @parameter2: java.lang.String;

        z2 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $z0 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean lowercaseExpandedTerms>;

        if $z0 == 0 goto label05;

        if r11 != null goto label01;

        $r13 = null;

        goto label02;

     label01:
        $r7 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Locale locale>;

        $r13 = virtualinvoke r11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r7);

     label02:
        r11 = $r13;

        if r12 != null goto label03;

        $r14 = null;

        goto label04;

     label03:
        $r8 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Locale locale>;

        $r14 = virtualinvoke r12.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r8);

     label04:
        r12 = $r14;

     label05:
        $r15 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Locale locale>;

        $r16 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>(3, $r15);

        virtualinvoke $r16.<java.text.DateFormat: void setLenient(boolean)>(1);

        $r17 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.document.DateTools$Resolution getDateResolution(java.lang.String)>(r1);

     label06:
        $r18 = virtualinvoke $r16.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r11);

        r11 = staticinvoke <org.apache.lucene.document.DateTools: java.lang.String dateToString(java.util.Date,org.apache.lucene.document.DateTools$Resolution)>($r18, $r17);

     label07:
        goto label09;

     label08:
        $r10 := @caughtexception;

     label09:
        $r2 = virtualinvoke $r16.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r12);

        r19 = $r2;

        if z1 == 0 goto label10;

        $r5 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.TimeZone timeZone>;

        $r4 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Locale locale>;

        $r6 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>($r5, $r4);

        virtualinvoke $r6.<java.util.Calendar: void setTime(java.util.Date)>($r2);

        virtualinvoke $r6.<java.util.Calendar: void set(int,int)>(11, 23);

        virtualinvoke $r6.<java.util.Calendar: void set(int,int)>(12, 59);

        virtualinvoke $r6.<java.util.Calendar: void set(int,int)>(13, 59);

        virtualinvoke $r6.<java.util.Calendar: void set(int,int)>(14, 999);

        r19 = virtualinvoke $r6.<java.util.Calendar: java.util.Date getTime()>();

     label10:
        r12 = staticinvoke <org.apache.lucene.document.DateTools: java.lang.String dateToString(java.util.Date,org.apache.lucene.document.DateTools$Resolution)>(r19, $r17);

     label11:
        goto label13;

     label12:
        $r9 := @caughtexception;

     label13:
        $r3 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query newRangeQuery(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(r1, r11, r12, z2, z1);

        return $r3;

        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Exception from label09 to label11 with label12;
    }

    protected org.apache.lucene.search.BooleanQuery newBooleanQuery(boolean)
    {
        org.apache.lucene.search.BooleanQuery $r0;
        org.apache.lucene.queryparser.classic.QueryParserBase r1;
        boolean z0;

        r1 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        z0 := @parameter0: boolean;

        $r0 = new org.apache.lucene.search.BooleanQuery;

        specialinvoke $r0.<org.apache.lucene.search.BooleanQuery: void <init>(boolean)>(z0);

        return $r0;
    }

    protected org.apache.lucene.search.BooleanClause newBooleanClause(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)
    {
        org.apache.lucene.search.Query r1;
        org.apache.lucene.queryparser.classic.QueryParserBase r3;
        org.apache.lucene.search.BooleanClause$Occur r2;
        org.apache.lucene.search.BooleanClause $r0;

        r3 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r1 := @parameter0: org.apache.lucene.search.Query;

        r2 := @parameter1: org.apache.lucene.search.BooleanClause$Occur;

        $r0 = new org.apache.lucene.search.BooleanClause;

        specialinvoke $r0.<org.apache.lucene.search.BooleanClause: void <init>(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>(r1, r2);

        return $r0;
    }

    protected org.apache.lucene.search.Query newTermQuery(org.apache.lucene.index.Term)
    {
        org.apache.lucene.index.Term r1;
        org.apache.lucene.search.TermQuery $r0;
        org.apache.lucene.queryparser.classic.QueryParserBase r2;

        r2 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r1 := @parameter0: org.apache.lucene.index.Term;

        $r0 = new org.apache.lucene.search.TermQuery;

        specialinvoke $r0.<org.apache.lucene.search.TermQuery: void <init>(org.apache.lucene.index.Term)>(r1);

        return $r0;
    }

    protected org.apache.lucene.search.PhraseQuery newPhraseQuery()
    {
        org.apache.lucene.search.PhraseQuery $r0;
        org.apache.lucene.queryparser.classic.QueryParserBase r1;

        r1 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $r0 = new org.apache.lucene.search.PhraseQuery;

        specialinvoke $r0.<org.apache.lucene.search.PhraseQuery: void <init>()>();

        return $r0;
    }

    protected org.apache.lucene.search.MultiPhraseQuery newMultiPhraseQuery()
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r1;
        org.apache.lucene.search.MultiPhraseQuery $r0;

        r1 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $r0 = new org.apache.lucene.search.MultiPhraseQuery;

        specialinvoke $r0.<org.apache.lucene.search.MultiPhraseQuery: void <init>()>();

        return $r0;
    }

    protected org.apache.lucene.search.Query newPrefixQuery(org.apache.lucene.index.Term)
    {
        org.apache.lucene.index.Term r1;
        org.apache.lucene.search.PrefixQuery $r0;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r3;
        org.apache.lucene.queryparser.classic.QueryParserBase r2;

        r2 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r1 := @parameter0: org.apache.lucene.index.Term;

        $r0 = new org.apache.lucene.search.PrefixQuery;

        specialinvoke $r0.<org.apache.lucene.search.PrefixQuery: void <init>(org.apache.lucene.index.Term)>(r1);

        $r3 = r2.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod>;

        virtualinvoke $r0.<org.apache.lucene.search.PrefixQuery: void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)>($r3);

        return $r0;
    }

    protected org.apache.lucene.search.Query newRegexpQuery(org.apache.lucene.index.Term)
    {
        org.apache.lucene.search.RegexpQuery $r0;
        org.apache.lucene.index.Term r1;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r3;
        org.apache.lucene.queryparser.classic.QueryParserBase r2;

        r2 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r1 := @parameter0: org.apache.lucene.index.Term;

        $r0 = new org.apache.lucene.search.RegexpQuery;

        specialinvoke $r0.<org.apache.lucene.search.RegexpQuery: void <init>(org.apache.lucene.index.Term)>(r1);

        $r3 = r2.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod>;

        virtualinvoke $r0.<org.apache.lucene.search.RegexpQuery: void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)>($r3);

        return $r0;
    }

    protected org.apache.lucene.search.Query newFuzzyQuery(org.apache.lucene.index.Term, float, int)
    {
        org.apache.lucene.index.Term r0;
        org.apache.lucene.search.FuzzyQuery $r2;
        int $i0, $i1, $i2, i3;
        float f0;
        java.lang.String $r1;
        org.apache.lucene.queryparser.classic.QueryParserBase r3;

        r3 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r0 := @parameter0: org.apache.lucene.index.Term;

        f0 := @parameter1: float;

        i3 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.Term: java.lang.String text()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int codePointCount(int,int)>(0, $i0);

        $i2 = staticinvoke <org.apache.lucene.search.FuzzyQuery: int floatToEdits(float,int)>(f0, $i1);

        $r2 = new org.apache.lucene.search.FuzzyQuery;

        specialinvoke $r2.<org.apache.lucene.search.FuzzyQuery: void <init>(org.apache.lucene.index.Term,int,int)>(r0, $i2, i3);

        return $r2;
    }

    private org.apache.lucene.util.BytesRef analyzeMultitermTerm(java.lang.String, java.lang.String)
    {
        org.apache.lucene.util.BytesRef $r4;
        org.apache.lucene.analysis.Analyzer $r3;
        java.lang.String r1, r2;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.analysis.Analyzer analyzer>;

        $r4 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.util.BytesRef analyzeMultitermTerm(java.lang.String,java.lang.String,org.apache.lucene.analysis.Analyzer)>(r1, r2, $r3);

        return $r4;
    }

    protected org.apache.lucene.util.BytesRef analyzeMultitermTerm(java.lang.String, java.lang.String, org.apache.lucene.analysis.Analyzer)
    {
        org.apache.lucene.queryparser.classic.QueryParserBase r17;
        boolean $z0, $z1;
        org.apache.lucene.util.BytesRef $r5, $r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r13, $r14, $r15, $r20, $r21, $r22, $r26, $r27, $r28, $r32, $r33, $r34;
        org.apache.lucene.util.Attribute $r4;
        java.lang.String r0, r2, $r11, $r16, $r23, $r29, $r35;
        org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute r37;
        org.apache.lucene.analysis.TokenStream $r3;
        org.apache.lucene.analysis.Analyzer r36;
        java.io.IOException $r18, $r24, $r30;
        java.lang.RuntimeException $r19, $r25, $r31;
        java.lang.IllegalArgumentException $r7, $r12;
        java.io.StringReader $r1;

        r17 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r36 := @parameter2: org.apache.lucene.analysis.Analyzer;

        if r36 != null goto label01;

        r36 = r17.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.analysis.Analyzer analyzer>;

     label01:
        $r1 = new java.io.StringReader;

        specialinvoke $r1.<java.io.StringReader: void <init>(java.lang.String)>(r2);

        $r3 = virtualinvoke r36.<org.apache.lucene.analysis.Analyzer: org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String,java.io.Reader)>(r0, $r1);

        virtualinvoke $r3.<org.apache.lucene.analysis.TokenStream: void reset()>();

     label02:
        goto label04;

     label03:
        $r30 := @caughtexception;

        $r31 = new java.lang.RuntimeException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to initialize TokenStream to analyze multiTerm term: ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r35, $r30);

        throw $r31;

     label04:
        $r4 = virtualinvoke $r3.<org.apache.lucene.analysis.TokenStream: org.apache.lucene.util.Attribute getAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute;");

        r37 = (org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute) $r4;

        $r5 = interfaceinvoke r37.<org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute: org.apache.lucene.util.BytesRef getBytesRef()>();

     label05:
        $z0 = virtualinvoke $r3.<org.apache.lucene.analysis.TokenStream: boolean incrementToken()>();

        if $z0 != 0 goto label06;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("analyzer returned no terms for multiTerm term: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label06:
        interfaceinvoke r37.<org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute: int fillBytesRef()>();

        $z1 = virtualinvoke $r3.<org.apache.lucene.analysis.TokenStream: boolean incrementToken()>();

        if $z1 == 0 goto label07;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("analyzer returned too many terms for multiTerm term: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label07:
        goto label09;

     label08:
        $r24 := @caughtexception;

        $r25 = new java.lang.RuntimeException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error analyzing range part: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r29, $r24);

        throw $r25;

     label09:
        virtualinvoke $r3.<org.apache.lucene.analysis.TokenStream: void end()>();

        virtualinvoke $r3.<org.apache.lucene.analysis.TokenStream: void close()>();

     label10:
        goto label12;

     label11:
        $r18 := @caughtexception;

        $r19 = new java.lang.RuntimeException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to end & close TokenStream after analyzing multiTerm term: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r23, $r18);

        throw $r19;

     label12:
        $r6 = staticinvoke <org.apache.lucene.util.BytesRef: org.apache.lucene.util.BytesRef deepCopyOf(org.apache.lucene.util.BytesRef)>($r5);

        return $r6;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label05 to label07 with label08;
        catch java.io.IOException from label09 to label10 with label11;
    }

    protected org.apache.lucene.search.Query newRangeQuery(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)
    {
        org.apache.lucene.util.BytesRef r4, $r5, r6, $r7;
        org.apache.lucene.search.TermRangeQuery $r8;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r9;
        java.lang.String r0, r2, r3;
        org.apache.lucene.queryparser.classic.QueryParserBase r1;
        boolean $z0, $z1, z2, z3;

        r1 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        z2 := @parameter3: boolean;

        z3 := @parameter4: boolean;

        if r0 != null goto label1;

        r4 = null;

        goto label4;

     label1:
        $z0 = r1.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean analyzeRangeTerms>;

        if $z0 == 0 goto label2;

        $r5 = specialinvoke r1.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.util.BytesRef analyzeMultitermTerm(java.lang.String,java.lang.String)>(r3, r0);

        goto label3;

     label2:
        $r5 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r5.<org.apache.lucene.util.BytesRef: void <init>(java.lang.CharSequence)>(r0);

     label3:
        r4 = $r5;

     label4:
        if r2 != null goto label5;

        r6 = null;

        goto label8;

     label5:
        $z1 = r1.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean analyzeRangeTerms>;

        if $z1 == 0 goto label6;

        $r7 = specialinvoke r1.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.util.BytesRef analyzeMultitermTerm(java.lang.String,java.lang.String)>(r3, r2);

        goto label7;

     label6:
        $r7 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r7.<org.apache.lucene.util.BytesRef: void <init>(java.lang.CharSequence)>(r2);

     label7:
        r6 = $r7;

     label8:
        $r8 = new org.apache.lucene.search.TermRangeQuery;

        specialinvoke $r8.<org.apache.lucene.search.TermRangeQuery: void <init>(java.lang.String,org.apache.lucene.util.BytesRef,org.apache.lucene.util.BytesRef,boolean,boolean)>(r3, r4, r6, z2, z3);

        $r9 = r1.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod>;

        virtualinvoke $r8.<org.apache.lucene.search.TermRangeQuery: void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)>($r9);

        return $r8;
    }

    protected org.apache.lucene.search.Query newMatchAllDocsQuery()
    {
        org.apache.lucene.search.MatchAllDocsQuery $r0;
        org.apache.lucene.queryparser.classic.QueryParserBase r1;

        r1 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        $r0 = new org.apache.lucene.search.MatchAllDocsQuery;

        specialinvoke $r0.<org.apache.lucene.search.MatchAllDocsQuery: void <init>()>();

        return $r0;
    }

    protected org.apache.lucene.search.Query newWildcardQuery(org.apache.lucene.index.Term)
    {
        org.apache.lucene.index.Term r1;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r3;
        org.apache.lucene.queryparser.classic.QueryParserBase r2;
        org.apache.lucene.search.WildcardQuery $r0;

        r2 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r1 := @parameter0: org.apache.lucene.index.Term;

        $r0 = new org.apache.lucene.search.WildcardQuery;

        specialinvoke $r0.<org.apache.lucene.search.WildcardQuery: void <init>(org.apache.lucene.index.Term)>(r1);

        $r3 = r2.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod>;

        virtualinvoke $r0.<org.apache.lucene.search.WildcardQuery: void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)>($r3);

        return $r0;
    }

    protected org.apache.lucene.search.Query getBooleanQuery(java.util.List) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r2;
        java.util.List r1;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query getBooleanQuery(java.util.List,boolean)>(r1, 0);

        return $r2;
    }

    protected org.apache.lucene.search.Query getBooleanQuery(java.util.List, boolean) throws org.apache.lucene.queryparser.classic.ParseException
    {
        java.util.Iterator $r3;
        org.apache.lucene.search.BooleanClause r5;
        java.util.List r0;
        org.apache.lucene.search.BooleanQuery $r2;
        int $i0;
        java.lang.Object $r4;
        org.apache.lucene.queryparser.classic.QueryParserBase r1;
        boolean z0, $z1;

        r1 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r0 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.BooleanQuery newBooleanQuery(boolean)>(z0);

        $r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.search.BooleanClause) $r4;

        virtualinvoke $r2.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.BooleanClause)>(r5);

        goto label2;

     label3:
        return $r2;
    }

    protected org.apache.lucene.search.Query getWildcardQuery(java.lang.String, java.lang.String) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r4, $r8;
        org.apache.lucene.queryparser.classic.ParseException $r6;
        org.apache.lucene.index.Term $r3;
        java.util.Locale $r5;
        java.lang.String r0, $r1, $r7, r9;
        org.apache.lucene.queryparser.classic.QueryParserBase r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r2 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r0 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        $r1 = "*";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r7 = "*";

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z5 == 0 goto label1;

        $r8 = virtualinvoke r2.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query newMatchAllDocsQuery()>();

        return $r8;

     label1:
        $z1 = r2.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean allowLeadingWildcard>;

        if $z1 != 0 goto label3;

        $z3 = virtualinvoke r9.<java.lang.String: boolean startsWith(java.lang.String)>("*");

        if $z3 != 0 goto label2;

        $z4 = virtualinvoke r9.<java.lang.String: boolean startsWith(java.lang.String)>("?");

        if $z4 == 0 goto label3;

     label2:
        $r6 = new org.apache.lucene.queryparser.classic.ParseException;

        specialinvoke $r6.<org.apache.lucene.queryparser.classic.ParseException: void <init>(java.lang.String)>("\'*\' or \'?\' not allowed as first character in WildcardQuery");

        throw $r6;

     label3:
        $z2 = r2.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean lowercaseExpandedTerms>;

        if $z2 == 0 goto label4;

        $r5 = r2.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Locale locale>;

        r9 = virtualinvoke r9.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r5);

     label4:
        $r3 = new org.apache.lucene.index.Term;

        specialinvoke $r3.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>(r0, r9);

        $r4 = virtualinvoke r2.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query newWildcardQuery(org.apache.lucene.index.Term)>($r3);

        return $r4;
    }

    protected org.apache.lucene.search.Query getRegexpQuery(java.lang.String, java.lang.String) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r3;
        java.util.Locale $r4;
        org.apache.lucene.index.Term $r1;
        java.lang.String r2, r5;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $z0 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean lowercaseExpandedTerms>;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Locale locale>;

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);

     label1:
        $r1 = new org.apache.lucene.index.Term;

        specialinvoke $r1.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>(r2, r5);

        $r3 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query newRegexpQuery(org.apache.lucene.index.Term)>($r1);

        return $r3;
    }

    protected org.apache.lucene.search.Query getPrefixQuery(java.lang.String, java.lang.String) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r3;
        org.apache.lucene.queryparser.classic.ParseException $r5;
        org.apache.lucene.index.Term $r1;
        java.util.Locale $r4;
        java.lang.String r2, r6;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r2 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $z0 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean allowLeadingWildcard>;

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("*");

        if $z2 == 0 goto label1;

        $r5 = new org.apache.lucene.queryparser.classic.ParseException;

        specialinvoke $r5.<org.apache.lucene.queryparser.classic.ParseException: void <init>(java.lang.String)>("\'*\' not allowed as first character in PrefixQuery");

        throw $r5;

     label1:
        $z1 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean lowercaseExpandedTerms>;

        if $z1 == 0 goto label2;

        $r4 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Locale locale>;

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);

     label2:
        $r1 = new org.apache.lucene.index.Term;

        specialinvoke $r1.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>(r2, r6);

        $r3 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query newPrefixQuery(org.apache.lucene.index.Term)>($r1);

        return $r3;
    }

    protected org.apache.lucene.search.Query getFuzzyQuery(java.lang.String, java.lang.String, float) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r3;
        org.apache.lucene.index.Term $r1;
        java.util.Locale $r4;
        int $i0;
        float f0;
        java.lang.String r2, r5;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        $z0 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: boolean lowercaseExpandedTerms>;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.util.Locale locale>;

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);

     label1:
        $r1 = new org.apache.lucene.index.Term;

        specialinvoke $r1.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>(r2, r5);

        $i0 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: int fuzzyPrefixLength>;

        $r3 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query newFuzzyQuery(org.apache.lucene.index.Term,float,int)>($r1, f0, $i0);

        return $r3;
    }

    org.apache.lucene.search.Query handleBareTokenQuery(java.lang.String, org.apache.lucene.queryparser.classic.Token, org.apache.lucene.queryparser.classic.Token, boolean, boolean, boolean, boolean) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query r14;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r3, r4, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        boolean z0, z1, z2, z3;
        org.apache.lucene.queryparser.classic.Token r1, r5;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.lucene.queryparser.classic.Token;

        r5 := @parameter2: org.apache.lucene.queryparser.classic.Token;

        z1 := @parameter3: boolean;

        z0 := @parameter4: boolean;

        z3 := @parameter5: boolean;

        z2 := @parameter6: boolean;

        $r2 = r1.<org.apache.lucene.queryparser.classic.Token: java.lang.String image>;

        $r3 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.lang.String discardEscapeChar(java.lang.String)>($r2);

        if z0 == 0 goto label1;

        $r13 = r1.<org.apache.lucene.queryparser.classic.Token: java.lang.String image>;

        r14 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query getWildcardQuery(java.lang.String,java.lang.String)>(r4, $r13);

        goto label5;

     label1:
        if z1 == 0 goto label2;

        $r10 = r1.<org.apache.lucene.queryparser.classic.Token: java.lang.String image>;

        $r9 = r1.<org.apache.lucene.queryparser.classic.Token: java.lang.String image>;

        $i2 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $r12 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.lang.String discardEscapeChar(java.lang.String)>($r11);

        r14 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query getPrefixQuery(java.lang.String,java.lang.String)>(r4, $r12);

        goto label5;

     label2:
        if z2 == 0 goto label3;

        $r7 = r1.<org.apache.lucene.queryparser.classic.Token: java.lang.String image>;

        $r6 = r1.<org.apache.lucene.queryparser.classic.Token: java.lang.String image>;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        r14 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query getRegexpQuery(java.lang.String,java.lang.String)>(r4, $r8);

        goto label5;

     label3:
        if z3 == 0 goto label4;

        r14 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query handleBareFuzzy(java.lang.String,org.apache.lucene.queryparser.classic.Token,java.lang.String)>(r4, r5, $r3);

        goto label5;

     label4:
        r14 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,boolean)>(r4, $r3, 0);

     label5:
        return r14;
    }

    org.apache.lucene.search.Query handleBareFuzzy(java.lang.String, org.apache.lucene.queryparser.classic.Token, java.lang.String) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r7;
        java.lang.Float $r4;
        org.apache.lucene.queryparser.classic.ParseException $r11, $r12;
        byte $b0, $b1, $b3;
        int $i2, $i4, $i5;
        java.lang.String $r2, $r3, r5, r6;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        java.lang.Exception $r10;
        org.apache.lucene.queryparser.classic.Token r1;
        float $f0, f1;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.lucene.queryparser.classic.Token;

        r6 := @parameter2: java.lang.String;

        f1 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: float fuzzyMinSim>;

     label1:
        $r2 = r1.<org.apache.lucene.queryparser.classic.Token: java.lang.String image>;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(1);

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r3);

        f1 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        $b0 = f1 cmpg 0.0F;

        $i4 = (int) $b0;

        if $i4 >= 0 goto label5;

        $r11 = new org.apache.lucene.queryparser.classic.ParseException;

        specialinvoke $r11.<org.apache.lucene.queryparser.classic.ParseException: void <init>(java.lang.String)>("Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !");

        throw $r11;

     label5:
        $b1 = f1 cmpl 1.0F;

        $i5 = (int) $b1;

        if $i5 < 0 goto label6;

        $i2 = (int) f1;

        $f0 = (float) $i2;

        $b3 = f1 cmpl $f0;

        if $b3 == 0 goto label6;

        $r12 = new org.apache.lucene.queryparser.classic.ParseException;

        specialinvoke $r12.<org.apache.lucene.queryparser.classic.ParseException: void <init>(java.lang.String)>("Fractional edit distances are not allowed!");

        throw $r12;

     label6:
        $r7 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query getFuzzyQuery(java.lang.String,java.lang.String,float)>(r5, r6, f1);

        return $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    org.apache.lucene.search.Query handleQuotedTerm(java.lang.String, org.apache.lucene.queryparser.classic.Token, org.apache.lucene.queryparser.classic.Token) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.search.Query $r12;
        java.lang.Float $r6;
        int i0, $i1, $i2;
        java.lang.String r2, $r4, $r5, $r8, $r9, $r10, $r11;
        org.apache.lucene.queryparser.classic.QueryParserBase r0;
        java.lang.Exception $r7;
        org.apache.lucene.queryparser.classic.Token r1, r3;

        r0 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.lucene.queryparser.classic.Token;

        r1 := @parameter2: org.apache.lucene.queryparser.classic.Token;

        i0 = r0.<org.apache.lucene.queryparser.classic.QueryParserBase: int phraseSlop>;

        if r1 == null goto label4;

     label1:
        $r4 = r1.<org.apache.lucene.queryparser.classic.Token: java.lang.String image>;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(1);

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r5);

        i0 = virtualinvoke $r6.<java.lang.Float: int intValue()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        $r8 = r3.<org.apache.lucene.queryparser.classic.Token: java.lang.String image>;

        $r9 = r3.<org.apache.lucene.queryparser.classic.Token: java.lang.String image>;

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $r10 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(1, $i2);

        $r11 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: java.lang.String discardEscapeChar(java.lang.String)>($r10);

        $r12 = virtualinvoke r0.<org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,int)>(r2, $r11, i0);

        return $r12;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    org.apache.lucene.search.Query handleBoost(org.apache.lucene.search.Query, org.apache.lucene.queryparser.classic.Token)
    {
        org.apache.lucene.search.Query r1;
        java.lang.Float $r3;
        org.apache.lucene.queryparser.classic.Token r0;
        float f0;
        java.lang.String $r2;
        org.apache.lucene.queryparser.classic.QueryParserBase r5;
        java.lang.Exception $r4;

        r5 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r1 := @parameter0: org.apache.lucene.search.Query;

        r0 := @parameter1: org.apache.lucene.queryparser.classic.Token;

        if r0 == null goto label5;

        f0 = 1.0F;

     label1:
        $r2 = r0.<org.apache.lucene.queryparser.classic.Token: java.lang.String image>;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r2);

        f0 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        if r1 == null goto label5;

        virtualinvoke r1.<org.apache.lucene.search.Query: void setBoost(float)>(f0);

     label5:
        return r1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    java.lang.String discardEscapeChar(java.lang.String) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.queryparser.classic.ParseException $r6, $r7;
        int $i0, $i1, $i3, $i4, $i5, i7, i8, i9, i10, $i11, $i12;
        java.lang.String r0, $r8;
        org.apache.lucene.queryparser.classic.QueryParserBase r5;
        boolean z0, z1, z2;
        char $c2, $c6;
        char[] r1;

        r5 := @this: org.apache.lucene.queryparser.classic.QueryParserBase;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = newarray (char)[$i0];

        i7 = 0;

        z0 = 0;

        z2 = 0;

        z1 = 0;

        i8 = 0;

        i9 = 0;

        i10 = 0;

     label01:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i10 >= $i1 goto label08;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        if i8 <= 0 goto label02;

        $i3 = staticinvoke <org.apache.lucene.queryparser.classic.QueryParserBase: int hexToInt(char)>($c2);

        $i4 = $i3 * i8;

        i9 = i9 + $i4;

        i8 = i8 >>> 4;

        if i8 != 0 goto label07;

        $i5 = i7;

        i7 = i7 + 1;

        $c6 = (char) i9;

        r1[$i5] = $c6;

        i9 = 0;

        goto label07;

     label02:
        if z2 == 0 goto label05;

        $i11 = (int) $c2;

        if $i11 != 117 goto label03;

        i8 = 4096;

        goto label04;

     label03:
        r1[i7] = $c2;

        i7 = i7 + 1;

     label04:
        z0 = 0;

        z2 = 0;

        z1 = 0;

        goto label07;

     label05:
        $i12 = (int) $c2;

        if $i12 != 92 goto label06;

        z0 = 1;

        z2 = 1;

        z1 = 1;

        goto label07;

     label06:
        r1[i7] = $c2;

        i7 = i7 + 1;

     label07:
        i10 = i10 + 1;

        goto label01;

     label08:
        if i8 <= 0 goto label09;

        $r6 = new org.apache.lucene.queryparser.classic.ParseException;

        specialinvoke $r6.<org.apache.lucene.queryparser.classic.ParseException: void <init>(java.lang.String)>("Truncated unicode escape sequence.");

        throw $r6;

     label09:
        if z1 == 0 goto label10;

        $r7 = new org.apache.lucene.queryparser.classic.ParseException;

        specialinvoke $r7.<org.apache.lucene.queryparser.classic.ParseException: void <init>(java.lang.String)>("Term can not end with escape character.");

        throw $r7;

     label10:
        $r8 = new java.lang.String;

        specialinvoke $r8.<java.lang.String: void <init>(char[],int,int)>(r1, 0, i7);

        return $r8;
    }

    static final int hexToInt(char) throws org.apache.lucene.queryparser.classic.ParseException
    {
        org.apache.lucene.queryparser.classic.ParseException $r6;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r4;
        char c0;
        java.lang.StringBuilder $r2, $r3, $r5;

        c0 := @parameter0: char;

        $i6 = (int) c0;

        if 48 > $i6 goto label1;

        $i7 = (int) c0;

        if $i7 > 57 goto label1;

        $i8 = (int) c0;

        $i5 = $i8 - 48;

        return $i5;

     label1:
        $i9 = (int) c0;

        if 97 > $i9 goto label2;

        $i10 = (int) c0;

        if $i10 > 102 goto label2;

        $i11 = (int) c0;

        $i3 = $i11 - 97;

        $i4 = $i3 + 10;

        return $i4;

     label2:
        $i12 = (int) c0;

        if 65 > $i12 goto label3;

        $i13 = (int) c0;

        if $i13 > 70 goto label3;

        $i14 = (int) c0;

        $i1 = $i14 - 65;

        $i2 = $i1 + 10;

        return $i2;

     label3:
        $r6 = new org.apache.lucene.queryparser.classic.ParseException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-hex character in Unicode escape sequence: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.lucene.queryparser.classic.ParseException: void <init>(java.lang.String)>($r4);

        throw $r6;
    }

    public static java.lang.String escape(java.lang.String)
    {
        int $i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        java.lang.String r1, $r2;
        char $c1;
        java.lang.StringBuilder $r3;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i0 goto label4;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 == 92 goto label2;

        $i4 = (int) $c1;

        if $i4 == 43 goto label2;

        $i5 = (int) $c1;

        if $i5 == 45 goto label2;

        $i6 = (int) $c1;

        if $i6 == 33 goto label2;

        $i7 = (int) $c1;

        if $i7 == 40 goto label2;

        $i8 = (int) $c1;

        if $i8 == 41 goto label2;

        $i9 = (int) $c1;

        if $i9 == 58 goto label2;

        $i10 = (int) $c1;

        if $i10 == 94 goto label2;

        $i11 = (int) $c1;

        if $i11 == 91 goto label2;

        $i12 = (int) $c1;

        if $i12 == 93 goto label2;

        $i13 = (int) $c1;

        if $i13 == 34 goto label2;

        $i14 = (int) $c1;

        if $i14 == 123 goto label2;

        $i15 = (int) $c1;

        if $i15 == 125 goto label2;

        $i16 = (int) $c1;

        if $i16 == 126 goto label2;

        $i17 = (int) $c1;

        if $i17 == 42 goto label2;

        $i18 = (int) $c1;

        if $i18 == 63 goto label2;

        $i19 = (int) $c1;

        if $i19 == 124 goto label2;

        $i20 = (int) $c1;

        if $i20 == 38 goto label2;

        $i21 = (int) $c1;

        if $i21 != 47 goto label3;

     label2:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

     label3:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        i2 = i2 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.lucene.queryparser.classic.QueryParser$Operator $r1, $r2;
        boolean $z0, $z1;

        <org.apache.lucene.queryparser.classic.QueryParserBase: int MOD_REQ> = 11;

        <org.apache.lucene.queryparser.classic.QueryParserBase: int MOD_NOT> = 10;

        <org.apache.lucene.queryparser.classic.QueryParserBase: int MOD_NONE> = 0;

        <org.apache.lucene.queryparser.classic.QueryParserBase: int CONJ_OR> = 2;

        <org.apache.lucene.queryparser.classic.QueryParserBase: int CONJ_AND> = 1;

        <org.apache.lucene.queryparser.classic.QueryParserBase: int CONJ_NONE> = 0;

        $r0 = class "Lorg/apache/lucene/queryparser/classic/QueryParserBase;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.queryparser.classic.QueryParserBase: boolean $assertionsDisabled> = $z1;

        $r1 = <org.apache.lucene.queryparser.classic.QueryParser$Operator: org.apache.lucene.queryparser.classic.QueryParser$Operator AND>;

        <org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.queryparser.classic.QueryParser$Operator AND_OPERATOR> = $r1;

        $r2 = <org.apache.lucene.queryparser.classic.QueryParser$Operator: org.apache.lucene.queryparser.classic.QueryParser$Operator OR>;

        <org.apache.lucene.queryparser.classic.QueryParserBase: org.apache.lucene.queryparser.classic.QueryParser$Operator OR_OPERATOR> = $r2;

        return;
    }
}
