public final class org.waveprotocol.wave.model.testing.RandomDocOpGenerator extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.Object randomElement(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, java.util.List)
    {
        java.util.List r0;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r1;
        int $i0, $i1;
        java.lang.Object $r2;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        r0 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider: int nextInt(int)>($i0);

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i1);

        return $r2;
    }

    private static int randomIntFromRange(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, int, int)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r0;
        java.lang.AssertionError $r1, $r2, $r3, $r4;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $z0 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if 0 <= i1 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $z1 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i1 < i0 goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $i2 = i0 - i1;

        $i3 = interfaceinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider: int nextInt(int)>($i2);

        $i4 = $i3 + i1;

        $z2 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        if i1 <= $i4 goto label3;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label3:
        $z3 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        if $i4 < i0 goto label4;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label4:
        return $i4;
    }

    private static void swap(java.util.ArrayList, int, int)
    {
        int i0, i1;
        java.lang.Object $r1, $r2;
        java.util.ArrayList r0;

        r0 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r2 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        virtualinvoke r0.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i0, $r2);

        virtualinvoke r0.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i1, $r1);

        return;
    }

    private static void shuffle(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, java.util.ArrayList)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r1;
        int $i0, $i1, i2;
        java.util.ArrayList r0;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        r0 := @parameter1: java.util.ArrayList;

        $i0 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $i1 = staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: int randomIntFromRange(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>(r1, i2, $i0);

        staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: void swap(java.util.ArrayList,int,int)>(r0, i2, $i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private static java.lang.Object pickRandomNonNullMappedElement(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, java.util.List, org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Mapper)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r2;
        java.util.ArrayList $r0;
        java.util.List r1;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Mapper r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r4, $r5, $r6;
        boolean $z0;

        r2 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        r1 := @parameter1: java.util.List;

        r3 := @parameter2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Mapper;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

     label1:
        $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i1 = staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: int randomIntFromRange(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>(r2, 0, $i0);

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1);

        $r5 = interfaceinvoke r3.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Mapper: java.lang.Object map(java.lang.Object)>($r4);

        if $r5 == null goto label2;

        return $r5;

     label2:
        $i2 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r6 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i3);

        interfaceinvoke $r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i1, $r6);

        $i4 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        interfaceinvoke $r0.<java.util.List: java.lang.Object remove(int)>($i5);

        goto label1;

     label3:
        return null;
    }

    public static org.waveprotocol.wave.model.document.operation.DocOp generate(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters, org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters r2;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r1;
        org.waveprotocol.wave.model.document.operation.DocOp $r4;
        java.lang.AssertionError $r6, $r7;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator $r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector $r5;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument r3;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        r2 := @parameter1: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters;

        r3 := @parameter2: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument;

        $r0 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator;

        specialinvoke $r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters,org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument)>(r1, r2, r3);

        $r4 = virtualinvoke $r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.document.operation.DocOp generate()>();

        $r5 = new org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: void <init>()>();

        staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpValidator: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument,org.waveprotocol.wave.model.document.operation.DocOp)>($r5, null, r3, $r4);

        $z0 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z4 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: boolean isIllFormed()>();

        if $z4 == 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $z1 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r2.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: boolean getValidity()>();

        $z3 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: boolean isValid()>();

        if $z2 == $z3 goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        return $r4;
    }

    public static void main(java.lang.String[]) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters $r10;
        org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder $r1, $r3, $r5, $r6, $r7, $r8;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r2, $r4;
        java.lang.StringBuilder $r14, $r16, $r17, $r18, $r19, $r21, $r23, $r26, $r28, $r30, $r33, $r36, $r38, $r40, $r42, $r44, $r47, $r49, $r51, $r54;
        org.waveprotocol.wave.model.testing.RandomProviderImpl $r11;
        java.lang.String $r20, $r25, $r27, $r32, $r34, $r39, $r41, $r46, $r48, $r53, $r55;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument $r0, $r12;
        java.lang.RuntimeException $r59;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r58;
        org.waveprotocol.wave.model.document.operation.DocOp $r35;
        boolean $z0;
        java.lang.String[] r60;
        int i0, i1;
        java.io.PrintStream $r15, $r22, $r29, $r37, $r43, $r50;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r56;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r9, $r13, $r24, $r31, $r45, $r52, $r57;

        r60 := @parameter0: java.lang.String[];

        $r0 = new org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: void <init>()>();

        $r2 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder elementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>("blip", $r2);

        $r4 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        $r5 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder elementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>("p", $r4);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder characters(java.lang.String)>("abc");

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder elementEnd()>();

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder elementEnd()>();

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: org.waveprotocol.wave.model.document.operation.DocInitialization build()>();

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void consume(org.waveprotocol.wave.model.document.operation.DocOp)>($r9);

        $r10 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters;

        specialinvoke $r10.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: void <init>()>();

        virtualinvoke $r10.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters setMaxOpeningComponents(int)>(10);

        $r11 = staticinvoke <org.waveprotocol.wave.model.testing.RandomProviderImpl: org.waveprotocol.wave.model.testing.RandomProviderImpl ofSeed(int)>(2538);

        i0 = 0;

     label1:
        if i0 >= 200 goto label5;

        $r12 = new org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        specialinvoke $r12.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void <init>()>();

        $r13 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        virtualinvoke $r12.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void consume(org.waveprotocol.wave.model.document.operation.DocOp)>($r13);

        i1 = 0;

     label2:
        if i1 >= 20 goto label4;

        $r15 = <java.lang.System: java.io.PrintStream err>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("i=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", j=");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r20);

        $r22 = <java.lang.System: java.io.PrintStream err>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("old: ");

        $r24 = virtualinvoke $r12.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        $r25 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpUtil: java.lang.String toXmlString(org.waveprotocol.wave.model.document.operation.DocInitialization)>($r24);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r27);

        $r29 = <java.lang.System: java.io.PrintStream err>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("old: ");

        $r31 = virtualinvoke $r12.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        $r32 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpUtil: java.lang.String toConciseString(org.waveprotocol.wave.model.document.operation.DocOp)>($r31);

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>($r34);

        $r35 = staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: org.waveprotocol.wave.model.document.operation.DocOp generate(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters,org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument)>($r11, $r10, $r12);

        $r37 = <java.lang.System: java.io.PrintStream err>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("op:  ");

        $r39 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpUtil: java.lang.String toConciseString(org.waveprotocol.wave.model.document.operation.DocOp)>($r35);

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r37.<java.io.PrintStream: void println(java.lang.String)>($r41);

        virtualinvoke $r12.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void consume(org.waveprotocol.wave.model.document.operation.DocOp)>($r35);

        $r43 = <java.lang.System: java.io.PrintStream err>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("new: ");

        $r45 = virtualinvoke $r12.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        $r46 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpUtil: java.lang.String toConciseString(org.waveprotocol.wave.model.document.operation.DocOp)>($r45);

        $r47 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r43.<java.io.PrintStream: void println(java.lang.String)>($r48);

        $r50 = <java.lang.System: java.io.PrintStream err>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("new: ");

        $r52 = virtualinvoke $r12.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        $r53 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpUtil: java.lang.String toXmlString(org.waveprotocol.wave.model.document.operation.DocInitialization)>($r52);

        $r54 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r50.<java.io.PrintStream: void println(java.lang.String)>($r55);

        $r56 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema NO_SCHEMA_CONSTRAINTS>;

        $r57 = virtualinvoke $r12.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        $r58 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpValidator: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,org.waveprotocol.wave.model.document.operation.DocInitialization)>(null, $r56, $r57);

        $z0 = virtualinvoke $r58.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z0 != 0 goto label3;

        $r59 = new java.lang.RuntimeException;

        specialinvoke $r59.<java.lang.RuntimeException: void <init>(java.lang.String)>("doc not valid");

        throw $r59;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        return;
    }

    static java.lang.Object access$000(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, java.util.List)
    {
        java.util.List r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r0;

        r0 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        r1 := @parameter1: java.util.List;

        $r2 = staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: java.lang.Object randomElement(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,java.util.List)>(r0, r1);

        return $r2;
    }

    static int access$100(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, int, int)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r0;
        int i0, i1, $i2;

        r0 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: int randomIntFromRange(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>(r0, i0, i1);

        return $i2;
    }

    static java.lang.Object access$200(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, java.util.List, org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Mapper)
    {
        java.util.List r1;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Mapper r2;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r0;
        java.lang.Object $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Mapper;

        $r3 = staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: java.lang.Object pickRandomNonNullMappedElement(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,java.util.List,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Mapper)>(r0, r1, r2);

        return $r3;
    }

    static void access$300(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, java.util.ArrayList)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r0;
        java.util.ArrayList r1;

        r0 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        r1 := @parameter1: java.util.ArrayList;

        staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: void shuffle(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,java.util.ArrayList)>(r0, r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/testing/RandomDocOpGenerator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: boolean $assertionsDisabled> = $z1;

        return;
    }
}
