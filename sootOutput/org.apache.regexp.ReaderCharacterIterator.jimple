public final class org.apache.regexp.ReaderCharacterIterator extends java.lang.Object implements org.apache.regexp.CharacterIterator
{
    private final java.io.Reader reader;
    private final java.lang.StringBuffer buff;
    private boolean closed;

    public void <init>(java.io.Reader)
    {
        java.io.Reader r1;
        org.apache.regexp.ReaderCharacterIterator r0;
        java.lang.StringBuffer $r2;

        r0 := @this: org.apache.regexp.ReaderCharacterIterator;

        r1 := @parameter0: java.io.Reader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.regexp.ReaderCharacterIterator: java.io.Reader reader> = r1;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>(512);

        r0.<org.apache.regexp.ReaderCharacterIterator: java.lang.StringBuffer buff> = $r2;

        r0.<org.apache.regexp.ReaderCharacterIterator: boolean closed> = 0;

        return;
    }

    public java.lang.String substring(int, int)
    {
        java.lang.StringIndexOutOfBoundsException $r5;
        java.io.IOException $r4;
        java.lang.StringBuffer $r1;
        int i0, i1;
        java.lang.String $r2, $r3, $r6;
        org.apache.regexp.ReaderCharacterIterator r0;

        r0 := @this: org.apache.regexp.ReaderCharacterIterator;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

     label1:
        specialinvoke r0.<org.apache.regexp.ReaderCharacterIterator: void ensure(int)>(i0);

        $r1 = r0.<org.apache.regexp.ReaderCharacterIterator: java.lang.StringBuffer buff>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i1, i0);

        return $r3;

     label2:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringIndexOutOfBoundsException;

        $r6 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r5.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label2;
    }

    public java.lang.String substring(int)
    {
        java.lang.StringIndexOutOfBoundsException $r5;
        java.io.IOException $r4;
        java.lang.StringBuffer $r1;
        int i0;
        java.lang.String $r2, $r3, $r6;
        org.apache.regexp.ReaderCharacterIterator r0;

        r0 := @this: org.apache.regexp.ReaderCharacterIterator;

        i0 := @parameter0: int;

     label1:
        specialinvoke r0.<org.apache.regexp.ReaderCharacterIterator: void readAll()>();

        $r1 = r0.<org.apache.regexp.ReaderCharacterIterator: java.lang.StringBuffer buff>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(i0);

        return $r3;

     label2:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringIndexOutOfBoundsException;

        $r6 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r5.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label2;
    }

    public char charAt(int)
    {
        java.lang.StringBuffer $r1;
        int i0;
        java.lang.StringIndexOutOfBoundsException $r3;
        char $c1;
        java.io.IOException $r2;
        java.lang.String $r4;
        org.apache.regexp.ReaderCharacterIterator r0;

        r0 := @this: org.apache.regexp.ReaderCharacterIterator;

        i0 := @parameter0: int;

     label1:
        specialinvoke r0.<org.apache.regexp.ReaderCharacterIterator: void ensure(int)>(i0);

        $r1 = r0.<org.apache.regexp.ReaderCharacterIterator: java.lang.StringBuffer buff>;

        $c1 = virtualinvoke $r1.<java.lang.StringBuffer: char charAt(int)>(i0);

        return $c1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringIndexOutOfBoundsException;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.io.IOException from label1 to label2 with label2;
    }

    public boolean isEnd(int)
    {
        java.lang.StringIndexOutOfBoundsException $r4;
        java.io.IOException $r3;
        java.lang.StringBuffer $r1, $r2;
        int $i0, i1, $i2;
        java.lang.String $r5;
        org.apache.regexp.ReaderCharacterIterator r0;
        boolean $z0;

        r0 := @this: org.apache.regexp.ReaderCharacterIterator;

        i1 := @parameter0: int;

        $r1 = r0.<org.apache.regexp.ReaderCharacterIterator: java.lang.StringBuffer buff>;

        $i0 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>();

        if $i0 <= i1 goto label1;

        return 0;

     label1:
        specialinvoke r0.<org.apache.regexp.ReaderCharacterIterator: void ensure(int)>(i1);

        $r2 = r0.<org.apache.regexp.ReaderCharacterIterator: java.lang.StringBuffer buff>;

        $i2 = virtualinvoke $r2.<java.lang.StringBuffer: int length()>();

        if $i2 > i1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringIndexOutOfBoundsException;

        $r5 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r4.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch java.io.IOException from label1 to label4 with label4;
    }

    private int read(int) throws java.io.IOException
    {
        java.io.Reader $r2;
        java.lang.StringBuffer $r3;
        int i0, $i1, i2;
        char[] r1;
        org.apache.regexp.ReaderCharacterIterator r0;
        boolean $z0;

        r0 := @this: org.apache.regexp.ReaderCharacterIterator;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.regexp.ReaderCharacterIterator: boolean closed>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r1 = newarray (char)[i0];

        i2 = 0;

     label2:
        $r2 = r0.<org.apache.regexp.ReaderCharacterIterator: java.io.Reader reader>;

        $i1 = virtualinvoke $r2.<java.io.Reader: int read(char[])>(r1);

        if $i1 >= 0 goto label3;

        r0.<org.apache.regexp.ReaderCharacterIterator: boolean closed> = 1;

        goto label4;

     label3:
        i2 = i2 + $i1;

        $r3 = r0.<org.apache.regexp.ReaderCharacterIterator: java.lang.StringBuffer buff>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r1, 0, $i1);

        if i2 < i0 goto label2;

     label4:
        return i2;
    }

    private void readAll() throws java.io.IOException
    {
        org.apache.regexp.ReaderCharacterIterator r0;
        boolean $z0;

        r0 := @this: org.apache.regexp.ReaderCharacterIterator;

        goto label2;

     label1:
        specialinvoke r0.<org.apache.regexp.ReaderCharacterIterator: int read(int)>(1000);

     label2:
        $z0 = r0.<org.apache.regexp.ReaderCharacterIterator: boolean closed>;

        if $z0 == 0 goto label1;

        return;
    }

    private void ensure(int) throws java.io.IOException
    {
        java.lang.StringBuffer $r1, $r2;
        int i0, $i1, $i2, $i3, $i4;
        org.apache.regexp.ReaderCharacterIterator r0;
        boolean $z0;

        r0 := @this: org.apache.regexp.ReaderCharacterIterator;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.regexp.ReaderCharacterIterator: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.apache.regexp.ReaderCharacterIterator: java.lang.StringBuffer buff>;

        $i1 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>();

        if i0 >= $i1 goto label2;

        return;

     label2:
        $i2 = i0 + 1;

        $r2 = r0.<org.apache.regexp.ReaderCharacterIterator: java.lang.StringBuffer buff>;

        $i3 = virtualinvoke $r2.<java.lang.StringBuffer: int length()>();

        $i4 = $i2 - $i3;

        specialinvoke r0.<org.apache.regexp.ReaderCharacterIterator: int read(int)>($i4);

        return;
    }
}
