public final class com.mycila.inject.internal.guava.collect.Range extends java.lang.Object implements com.mycila.inject.internal.guava.base.Predicate, java.io.Serializable
{
    final com.mycila.inject.internal.guava.collect.Cut lowerBound;
    final com.mycila.inject.internal.guava.collect.Cut upperBound;
    private static final long serialVersionUID;

    void <init>(com.mycila.inject.internal.guava.collect.Cut, com.mycila.inject.internal.guava.collect.Cut)
    {
        com.mycila.inject.internal.guava.collect.Cut r1, r2;
        java.lang.IllegalArgumentException $r3;
        com.mycila.inject.internal.guava.collect.Range r0;
        int $i0;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6, $r8;

        r0 := @this: com.mycila.inject.internal.guava.collect.Range;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Cut;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.Cut;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.Cut: int compareTo(com.mycila.inject.internal.guava.collect.Cut)>(r2);

        if $i0 <= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid range: ");

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.Range: java.lang.String toString(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>(r1, r2);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound> = r1;

        r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound> = r2;

        return;
    }

    public boolean hasLowerBound()
    {
        com.mycila.inject.internal.guava.collect.Range r0;
        com.mycila.inject.internal.guava.collect.Cut $r1, $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Range;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut belowAll()>();

        if $r1 == $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Comparable lowerEndpoint()
    {
        com.mycila.inject.internal.guava.collect.Range r0;
        java.lang.Comparable $r2;
        com.mycila.inject.internal.guava.collect.Cut $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Range;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.Cut: java.lang.Comparable endpoint()>();

        return $r2;
    }

    public com.mycila.inject.internal.guava.collect.BoundType lowerBoundType()
    {
        com.mycila.inject.internal.guava.collect.Range r0;
        com.mycila.inject.internal.guava.collect.BoundType $r2;
        com.mycila.inject.internal.guava.collect.Cut $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Range;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.BoundType typeAsLowerBound()>();

        return $r2;
    }

    public boolean hasUpperBound()
    {
        com.mycila.inject.internal.guava.collect.Range r0;
        com.mycila.inject.internal.guava.collect.Cut $r1, $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Range;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut aboveAll()>();

        if $r1 == $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Comparable upperEndpoint()
    {
        com.mycila.inject.internal.guava.collect.Range r0;
        java.lang.Comparable $r2;
        com.mycila.inject.internal.guava.collect.Cut $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Range;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.Cut: java.lang.Comparable endpoint()>();

        return $r2;
    }

    public com.mycila.inject.internal.guava.collect.BoundType upperBoundType()
    {
        com.mycila.inject.internal.guava.collect.Range r0;
        com.mycila.inject.internal.guava.collect.BoundType $r2;
        com.mycila.inject.internal.guava.collect.Cut $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Range;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.BoundType typeAsUpperBound()>();

        return $r2;
    }

    public boolean isEmpty()
    {
        com.mycila.inject.internal.guava.collect.Range r0;
        com.mycila.inject.internal.guava.collect.Cut $r1, $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Range;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.Cut: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean contains(java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.Range r1;
        com.mycila.inject.internal.guava.collect.Cut $r2, $r3;
        java.lang.Comparable r0;
        boolean $z0, $z1, $z2;

        r1 := @this: com.mycila.inject.internal.guava.collect.Range;

        r0 := @parameter0: java.lang.Comparable;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.Cut: boolean isLessThan(java.lang.Comparable)>(r0);

        if $z0 == 0 goto label1;

        $r3 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $z1 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.Cut: boolean isLessThan(java.lang.Comparable)>(r0);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean apply(java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.Range r0;
        java.lang.Comparable r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Range;

        r1 := @parameter0: java.lang.Comparable;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Range: boolean contains(java.lang.Comparable)>(r1);

        return $z0;
    }

    public boolean containsAll(java.lang.Iterable)
    {
        java.util.SortedSet $r4;
        java.lang.Iterable r0;
        com.mycila.inject.internal.guava.collect.Range r3;
        com.mycila.inject.internal.guava.collect.Ordering $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Iterator $r1;
        java.lang.Object $r2, $r7, $r9;
        java.lang.Comparable $r8, $r10, r11;
        java.util.Comparator $r5;

        r3 := @this: com.mycila.inject.internal.guava.collect.Range;

        r0 := @parameter0: java.lang.Iterable;

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: boolean isEmpty(java.lang.Iterable)>(r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r0 instanceof java.util.SortedSet;

        if $z1 == 0 goto label5;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Range: java.util.SortedSet cast(java.lang.Iterable)>(r0);

        $r5 = interfaceinvoke $r4.<java.util.SortedSet: java.util.Comparator comparator()>();

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $z3 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z3 != 0 goto label2;

        if $r5 != null goto label5;

     label2:
        $r7 = interfaceinvoke $r4.<java.util.SortedSet: java.lang.Object first()>();

        $r8 = (java.lang.Comparable) $r7;

        $z4 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.Range: boolean contains(java.lang.Comparable)>($r8);

        if $z4 == 0 goto label3;

        $r9 = interfaceinvoke $r4.<java.util.SortedSet: java.lang.Object last()>();

        $r10 = (java.lang.Comparable) $r9;

        $z5 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.Range: boolean contains(java.lang.Comparable)>($r10);

        if $z5 == 0 goto label3;

        $z6 = 1;

        goto label4;

     label3:
        $z6 = 0;

     label4:
        return $z6;

     label5:
        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label6:
        $z7 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label8;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.Comparable) $r2;

        $z2 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.Range: boolean contains(java.lang.Comparable)>(r11);

        if $z2 != 0 goto label7;

        return 0;

     label7:
        goto label6;

     label8:
        return 1;
    }

    public boolean encloses(com.mycila.inject.internal.guava.collect.Range)
    {
        com.mycila.inject.internal.guava.collect.Cut $r2, $r3, $r4, $r5;
        com.mycila.inject.internal.guava.collect.Range r0, r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Range;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Range;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $i0 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.Cut: int compareTo(com.mycila.inject.internal.guava.collect.Cut)>($r2);

        if $i0 > 0 goto label1;

        $r5 = r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $r4 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $i1 = virtualinvoke $r5.<com.mycila.inject.internal.guava.collect.Cut: int compareTo(com.mycila.inject.internal.guava.collect.Cut)>($r4);

        if $i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.mycila.inject.internal.guava.collect.Range intersection(com.mycila.inject.internal.guava.collect.Range)
    {
        com.mycila.inject.internal.guava.collect.Cut $r3, $r4, r6, $r8, $r9, r11;
        com.mycila.inject.internal.guava.collect.Range r1, r2, $r12;
        java.lang.Object $r5, $r10;
        com.mycila.inject.internal.guava.collect.Ordering $r0, $r7;

        r1 := @this: com.mycila.inject.internal.guava.collect.Range;

        r2 := @parameter0: com.mycila.inject.internal.guava.collect.Range;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r4 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r3 = r2.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r5 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.Ordering: java.lang.Object max(java.lang.Object,java.lang.Object)>($r4, $r3);

        r6 = (com.mycila.inject.internal.guava.collect.Cut) $r5;

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r9 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $r8 = r2.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $r10 = virtualinvoke $r7.<com.mycila.inject.internal.guava.collect.Ordering: java.lang.Object min(java.lang.Object,java.lang.Object)>($r9, $r8);

        r11 = (com.mycila.inject.internal.guava.collect.Cut) $r10;

        $r12 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range create(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>(r6, r11);

        return $r12;
    }

    public boolean isConnected(com.mycila.inject.internal.guava.collect.Range)
    {
        com.mycila.inject.internal.guava.collect.Cut $r2, $r3, $r4, $r5;
        com.mycila.inject.internal.guava.collect.Range r0, r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Range;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Range;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $i0 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.Cut: int compareTo(com.mycila.inject.internal.guava.collect.Cut)>($r2);

        if $i0 > 0 goto label1;

        $r5 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r4 = r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $i1 = virtualinvoke $r5.<com.mycila.inject.internal.guava.collect.Cut: int compareTo(com.mycila.inject.internal.guava.collect.Cut)>($r4);

        if $i1 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.mycila.inject.internal.guava.collect.Range span(com.mycila.inject.internal.guava.collect.Range)
    {
        com.mycila.inject.internal.guava.collect.Cut $r3, $r4, r6, $r8, $r9, r11;
        com.mycila.inject.internal.guava.collect.Range r1, r2, $r12;
        java.lang.Object $r5, $r10;
        com.mycila.inject.internal.guava.collect.Ordering $r0, $r7;

        r1 := @this: com.mycila.inject.internal.guava.collect.Range;

        r2 := @parameter0: com.mycila.inject.internal.guava.collect.Range;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r4 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r3 = r2.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r5 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.Ordering: java.lang.Object min(java.lang.Object,java.lang.Object)>($r4, $r3);

        r6 = (com.mycila.inject.internal.guava.collect.Cut) $r5;

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r9 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $r8 = r2.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $r10 = virtualinvoke $r7.<com.mycila.inject.internal.guava.collect.Ordering: java.lang.Object max(java.lang.Object,java.lang.Object)>($r9, $r8);

        r11 = (com.mycila.inject.internal.guava.collect.Cut) $r10;

        $r12 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range create(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>(r6, r11);

        return $r12;
    }

    public com.mycila.inject.internal.guava.collect.ContiguousSet asSet(com.mycila.inject.internal.guava.collect.DiscreteDomain)
    {
        com.mycila.inject.internal.guava.collect.Cut $r2, $r4;
        com.mycila.inject.internal.guava.collect.EmptyContiguousSet $r15;
        com.mycila.inject.internal.guava.collect.Range r1, $r7, $r9, r12;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet $r16;
        int $i0;
        java.util.NoSuchElementException $r10;
        boolean $z0, $z1, $z2, $z3;
        com.mycila.inject.internal.guava.collect.ContiguousSet $r13;
        java.lang.IllegalArgumentException $r14;
        com.mycila.inject.internal.guava.collect.DiscreteDomain r0;
        java.lang.Comparable $r3, $r5, $r6, $r8;

        r1 := @this: com.mycila.inject.internal.guava.collect.Range;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.DiscreteDomain;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        r12 = r1;

     label01:
        $z0 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.Range: boolean hasLowerBound()>();

        if $z0 != 0 goto label02;

        $r8 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.DiscreteDomain: java.lang.Comparable minValue()>();

        $r9 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range atLeast(java.lang.Comparable)>($r8);

        r12 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Range intersection(com.mycila.inject.internal.guava.collect.Range)>($r9);

     label02:
        $z1 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.Range: boolean hasUpperBound()>();

        if $z1 != 0 goto label03;

        $r6 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.DiscreteDomain: java.lang.Comparable maxValue()>();

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range atMost(java.lang.Comparable)>($r6);

        r12 = virtualinvoke r12.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Range intersection(com.mycila.inject.internal.guava.collect.Range)>($r7);

     label03:
        goto label05;

     label04:
        $r10 := @caughtexception;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r10);

        throw $r14;

     label05:
        $z2 = virtualinvoke r12.<com.mycila.inject.internal.guava.collect.Range: boolean isEmpty()>();

        if $z2 != 0 goto label06;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.Cut: java.lang.Comparable leastValueAbove(com.mycila.inject.internal.guava.collect.DiscreteDomain)>(r0);

        $r4 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.Cut: java.lang.Comparable greatestValueBelow(com.mycila.inject.internal.guava.collect.DiscreteDomain)>(r0);

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.Range: int compareOrThrow(java.lang.Comparable,java.lang.Comparable)>($r3, $r5);

        if $i0 <= 0 goto label07;

     label06:
        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        if $z3 == 0 goto label09;

        $r15 = new com.mycila.inject.internal.guava.collect.EmptyContiguousSet;

        $r13 = $r15;

        specialinvoke $r15.<com.mycila.inject.internal.guava.collect.EmptyContiguousSet: void <init>(com.mycila.inject.internal.guava.collect.DiscreteDomain)>(r0);

        goto label10;

     label09:
        $r16 = new com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        $r13 = $r16;

        specialinvoke $r16.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: void <init>(com.mycila.inject.internal.guava.collect.Range,com.mycila.inject.internal.guava.collect.DiscreteDomain)>(r12, r0);

     label10:
        return $r13;

        catch java.util.NoSuchElementException from label01 to label03 with label04;
    }

    public com.mycila.inject.internal.guava.collect.Range canonical(com.mycila.inject.internal.guava.collect.DiscreteDomain)
    {
        com.mycila.inject.internal.guava.collect.Cut $r2, $r3, $r4, $r5, $r6, $r7;
        com.mycila.inject.internal.guava.collect.DiscreteDomain r0;
        com.mycila.inject.internal.guava.collect.Range r1, $r8;

        r1 := @this: com.mycila.inject.internal.guava.collect.Range;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.DiscreteDomain;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut canonical(com.mycila.inject.internal.guava.collect.DiscreteDomain)>(r0);

        $r4 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut canonical(com.mycila.inject.internal.guava.collect.DiscreteDomain)>(r0);

        $r6 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        if $r3 != $r6 goto label1;

        $r7 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        if $r5 != $r7 goto label1;

        $r8 = r1;

        goto label2;

     label1:
        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range create(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>($r3, $r5);

     label2:
        return $r8;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Cut $r3, $r4, $r5, $r6;
        com.mycila.inject.internal.guava.collect.Range r1, r2;
        java.lang.Object r0;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: com.mycila.inject.internal.guava.collect.Range;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Range;

        if $z0 == 0 goto label3;

        r1 = (com.mycila.inject.internal.guava.collect.Range) r0;

        $r4 = r2.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r3 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $z1 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.Cut: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $r6 = r2.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $r5 = r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $z2 = virtualinvoke $r6.<com.mycila.inject.internal.guava.collect.Cut: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;
    }

    public int hashCode()
    {
        com.mycila.inject.internal.guava.collect.Range r0;
        com.mycila.inject.internal.guava.collect.Cut $r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.mycila.inject.internal.guava.collect.Range;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = $i0 * 31;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    public java.lang.String toString()
    {
        com.mycila.inject.internal.guava.collect.Range r0;
        com.mycila.inject.internal.guava.collect.Cut $r1, $r2;
        java.lang.String $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.Range;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Range: java.lang.String toString(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>($r2, $r1);

        return $r3;
    }

    private static java.lang.String toString(com.mycila.inject.internal.guava.collect.Cut, com.mycila.inject.internal.guava.collect.Cut)
    {
        com.mycila.inject.internal.guava.collect.Cut r1, r2;
        java.lang.StringBuilder $r0;
        java.lang.String $r3;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Cut;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.Cut;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(16);

        virtualinvoke r1.<com.mycila.inject.internal.guava.collect.Cut: void describeAsLowerBound(java.lang.StringBuilder)>($r0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(8229);

        virtualinvoke r2.<com.mycila.inject.internal.guava.collect.Cut: void describeAsUpperBound(java.lang.StringBuilder)>($r0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private static java.util.SortedSet cast(java.lang.Iterable)
    {
        java.util.SortedSet $r1;
        java.lang.Iterable r0;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = (java.util.SortedSet) r0;

        return $r1;
    }

    static int compareOrThrow(java.lang.Comparable, java.lang.Comparable)
    {
        int $i0;
        java.lang.Comparable r0, r1;

        r0 := @parameter0: java.lang.Comparable;

        r1 := @parameter1: java.lang.Comparable;

        $i0 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        return $i0;
    }

    public volatile boolean apply(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Range r0;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Range;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Range: boolean apply(java.lang.Comparable)>($r2);

        return $z0;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.Range: long serialVersionUID> = 0L;

        return;
    }
}
