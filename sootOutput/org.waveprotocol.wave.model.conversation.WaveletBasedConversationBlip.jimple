final class org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip extends java.lang.Object implements org.waveprotocol.wave.model.conversation.ObservableConversationBlip, org.waveprotocol.wave.model.wave.SourcesEvents, org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener
{
    private final org.waveprotocol.wave.model.wave.WaveletListener waveletListener;
    private final org.waveprotocol.wave.model.conversation.ObservableManifestBlip manifestBlip;
    private final org.waveprotocol.wave.model.wave.Blip blip;
    private final org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread parentThread;
    private final org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper helper;
    private final org.waveprotocol.wave.model.util.StringMap replies;
    private boolean isUsable;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;
    static final boolean $assertionsDisabled;

    static org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip create(org.waveprotocol.wave.model.conversation.ObservableManifestBlip, org.waveprotocol.wave.model.wave.Blip, org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread, org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper)
    {
        org.waveprotocol.wave.model.wave.Blip r2;
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.wave.WaveletListener $r8;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip r1;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread r10;
        java.lang.Iterable $r5;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r0;
        org.waveprotocol.wave.model.wave.SourcesEvents $r7;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper r4;
        java.lang.Object $r9;
        boolean $z0;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestBlip;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.Blip;

        r3 := @parameter2: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r4 := @parameter3: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper;

        $r0 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void <init>(org.waveprotocol.wave.model.conversation.ObservableManifestBlip,org.waveprotocol.wave.model.wave.Blip,org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread,org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper)>(r1, r2, r3, r4);

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip: java.lang.Iterable getReplies()>();

        $r6 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.waveprotocol.wave.model.conversation.ObservableManifestThread) $r9;

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread adaptThread(org.waveprotocol.wave.model.conversation.ObservableManifestThread)>(r10);

        goto label1;

     label2:
        interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip: void addListener(java.lang.Object)>($r0);

        $r7 = virtualinvoke r4.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper: org.waveprotocol.wave.model.wave.SourcesEvents getWaveletEventSource()>();

        $r8 = $r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.WaveletListener waveletListener>;

        interfaceinvoke $r7.<org.waveprotocol.wave.model.wave.SourcesEvents: void addListener(java.lang.Object)>($r8);

        return $r0;
    }

    private void <init>(org.waveprotocol.wave.model.conversation.ObservableManifestBlip, org.waveprotocol.wave.model.wave.Blip, org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread, org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper)
    {
        org.waveprotocol.wave.model.wave.Blip r5;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip r4;
        org.waveprotocol.wave.model.util.StringMap $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1 $r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper r6;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r7;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;
        java.lang.String $r10, $r13;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r4 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestBlip;

        r5 := @parameter1: org.waveprotocol.wave.model.wave.Blip;

        r7 := @parameter2: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r6 := @parameter3: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1: void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)>(r0);

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.WaveletListener waveletListener> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.StringMap replies> = $r2;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: boolean isUsable> = 1;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r3;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "WaveletBasedConversationBlip received null manifest blip");

        if r5 != null goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WaveletBasedConversationBlip ");

        $r10 = interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip: java.lang.String getId()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" received null blip");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void nullPointer(java.lang.Object)>($r13);

     label1:
        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.ObservableManifestBlip manifestBlip> = r4;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip blip> = r5;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper helper> = r6;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread parentThread> = r7;

        return;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper helper>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread getThread()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread parentThread>;

        return $r1;
    }

    public java.lang.Iterable locateReplyThreads()
    {
        java.util.Iterator $r3;
        java.lang.Integer $r10;
        java.lang.Iterable $r2;
        java.util.ArrayList $r0;
        java.util.List $r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r1;
        java.util.Map r11;
        int $i0, $i2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r6;
        java.lang.Object $r5, $r8;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread $r12;
        java.lang.String $r7;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r11 = null;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: java.lang.Iterable getReplyThreads()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread) $r5;

        if r11 != null goto label2;

        r11 = specialinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: java.util.Map findAnchors()>();

     label2:
        $r7 = virtualinvoke r6.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: java.lang.String getId()>();

        $r8 = interfaceinvoke r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r10 = (java.lang.Integer) $r8;

        $r12 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread;

        if $r10 == null goto label3;

        $i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        goto label4;

     label3:
        $i2 = (int) -1;

        $i0 = $i2;

     label4:
        specialinvoke $r12.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread: void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip,org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread,int)>(r1, r6, $i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label1;

     label5:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($r0);

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r4;
    }

    public java.lang.Iterable getReplyThreads()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r1;
        java.lang.Iterable $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$2 $r3;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.ObservableManifestBlip manifestBlip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip: java.lang.Iterable getReplies()>();

        $r3 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$2;

        specialinvoke $r3.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$2: void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip,java.lang.Iterable)>(r0, $r2);

        return $r3;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread addReplyThread()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r6;
        java.lang.Object $r5;
        java.lang.String $r2;
        org.waveprotocol.wave.model.util.StringMap $r4;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void checkIsUsable()>();

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper helper>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper: java.lang.String createThreadId()>();

        $r3 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.ObservableManifestBlip manifestBlip>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip: org.waveprotocol.wave.model.conversation.ObservableManifestThread appendReply(java.lang.String,boolean)>($r2, 0);

        $r4 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.StringMap replies>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r2);

        $r6 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread) $r5;

        return $r6;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread addReplyThread(int)
    {
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r3;
        org.waveprotocol.wave.model.util.StringMap $r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        int i0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r6;
        java.lang.Object $r5;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void checkIsUsable()>();

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper helper>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper: java.lang.String createThreadId()>();

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void createInlineReplyAnchor(java.lang.String,int)>($r2, i0);

        $r3 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.ObservableManifestBlip manifestBlip>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip: org.waveprotocol.wave.model.conversation.ObservableManifestThread appendReply(java.lang.String,boolean)>($r2, 1);

        $r4 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.StringMap replies>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r2);

        $r6 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread) $r5;

        return $r6;
    }

    public org.waveprotocol.wave.model.document.Document getContent()
    {
        org.waveprotocol.wave.model.wave.Blip $r1;
        org.waveprotocol.wave.model.document.Document $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip blip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.Blip: org.waveprotocol.wave.model.document.Document getContent()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.wave.ParticipantId getAuthorId()
    {
        org.waveprotocol.wave.model.wave.Blip $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip blip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.Blip: org.waveprotocol.wave.model.wave.ParticipantId getAuthorId()>();

        return $r2;
    }

    public java.util.Set getContributorIds()
    {
        java.util.Set $r2;
        org.waveprotocol.wave.model.wave.Blip $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip blip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.Blip: java.util.Set getContributorIds()>();

        return $r2;
    }

    public long getLastModifiedTime()
    {
        org.waveprotocol.wave.model.wave.Blip $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        java.lang.Long $r2;
        long $l0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip blip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.Blip: java.lang.Long getLastModifiedTime()>();

        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public long getLastModifiedVersion()
    {
        org.waveprotocol.wave.model.wave.Blip $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        java.lang.Long $r2;
        long $l0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip blip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.Blip: java.lang.Long getLastModifiedVersion()>();

        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public void delete()
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.util.StringMap $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r4, r6;
        java.lang.Object $r5;
        java.util.Queue $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void checkIsUsable()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Queue createQueue()>();

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.StringMap replies>;

        staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Collection copyValuesToJavaCollection(org.waveprotocol.wave.model.util.ReadableStringMap,java.util.Collection)>($r2, $r1);

        $r3 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread) $r5;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void deleteThread(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)>(r6);

        goto label1;

     label2:
        $r4 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread parentThread>;

        virtualinvoke $r4.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void deleteBlip(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip,boolean)>(r0, 1);

        return;
    }

    public java.lang.String getId()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        java.lang.String $r2;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.ObservableManifestBlip manifestBlip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip: java.lang.String getId()>();

        return $r2;
    }

    public boolean isRoot()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0, $r5;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r1, $r3, $r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread parentThread>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation()>();

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread getRootThread()>();

        if $r1 != $r3 goto label1;

        $r4 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread parentThread>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip getFirstBlip()>();

        if r0 != $r5 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void addListener(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void onReplyAdded(org.waveprotocol.wave.model.conversation.ObservableManifestThread)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r2;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestThread;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread adaptThread(org.waveprotocol.wave.model.conversation.ObservableManifestThread)>(r1);

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void triggerOnReplyAdded(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)>($r2);

        return;
    }

    public void onReplyRemoved(org.waveprotocol.wave.model.conversation.ObservableManifestThread)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r5;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread r1;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.util.StringMap $r2;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestThread;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.StringMap replies>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ObservableManifestThread: java.lang.String getId()>();

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r3);

        $r5 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread) $r4;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void forgetThread(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)>($r5);

        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r2;
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        java.lang.String $r4, $r7;

        r2 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WaveletBasedConversationBlip(id = ");

        $r3 = r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.ObservableManifestBlip manifestBlip>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip: java.lang.String getId()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public org.waveprotocol.wave.model.wave.Blip getBlip()
    {
        org.waveprotocol.wave.model.wave.Blip $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip blip>;

        return $r1;
    }

    public org.waveprotocol.wave.model.wave.Blip hackGetRaw()
    {
        org.waveprotocol.wave.model.wave.Blip $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip getBlip()>();

        return $r1;
    }

    void clearContent()
    {
        org.waveprotocol.wave.model.wave.Blip $r1, $r3, $r5;
        org.waveprotocol.wave.model.document.Document $r2, $r4, $r6;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        int $i0;
        java.lang.Object $r7;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip blip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.Blip: org.waveprotocol.wave.model.document.Document getContent()>();

        $i0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.Document: int size()>();

        if $i0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip blip>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.wave.Blip: org.waveprotocol.wave.model.document.Document getContent()>();

        $r5 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip blip>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.wave.Blip: org.waveprotocol.wave.model.document.Document getContent()>();

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.Document: java.lang.Object getDocumentElement()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.Document: void emptyElement(java.lang.Object)>($r7);

     label1:
        return;
    }

    public org.waveprotocol.wave.model.conversation.ObservableConversationThread getReplyThread(java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.ObservableConversationThread $r4;
        java.lang.Object $r3;
        java.lang.String r1;
        org.waveprotocol.wave.model.util.StringMap $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.StringMap replies>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $r4 = (org.waveprotocol.wave.model.conversation.ObservableConversationThread) $r3;

        return $r4;
    }

    org.waveprotocol.wave.model.conversation.ManifestBlip getManifestBlip()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.ObservableManifestBlip manifestBlip>;

        return $r1;
    }

    void deleteThread(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r1;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        java.lang.String $r4;
        org.waveprotocol.wave.model.conversation.ManifestThread $r3;

        r1 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void deleteBlips()>();

        $r2 = r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.ObservableManifestBlip manifestBlip>;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.ManifestThread getManifestThread()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip: boolean removeReply(org.waveprotocol.wave.model.conversation.ManifestThread)>($r3);

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: java.lang.String getId()>();

        specialinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void clearInlineReplyAnchor(java.lang.String)>($r4);

        return;
    }

    void deleteThreads()
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r6;
        java.lang.Iterable $r1;
        java.util.ArrayList $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r5;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.conversation.ManifestThread $r7;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: java.lang.Iterable getReplyThreads()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList(java.lang.Iterable)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread) $r4;

        virtualinvoke r5.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void deleteBlips()>();

        $r6 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.ObservableManifestBlip manifestBlip>;

        $r7 = virtualinvoke r5.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.ManifestThread getManifestThread()>();

        interfaceinvoke $r6.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip: boolean removeReply(org.waveprotocol.wave.model.conversation.ManifestThread)>($r7);

        goto label1;

     label2:
        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void clearAllInlineReplyAnchors()>();

        return;
    }

    void invalidate()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void checkIsUsable()>();

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.ObservableManifestBlip manifestBlip>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip: void removeListener(java.lang.Object)>(r0);

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: boolean isUsable> = 0;

        return;
    }

    void destroy()
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.util.StringMap $r1;
        java.util.List $r2;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r6;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.StringMap replies>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.List valueList(org.waveprotocol.wave.model.util.ReadableStringMap)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread) $r5;

        virtualinvoke r6.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void destroy()>();

        goto label1;

     label2:
        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void invalidate()>();

        $r4 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r4.<org.waveprotocol.wave.model.util.CopyOnWriteSet: void clear()>();

        return;
    }

    void checkIsUsable()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $z0 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: boolean isUsable>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleted blip is not usable: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalState(java.lang.Object)>($r4);

     label1:
        return;
    }

    private org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread adaptThread(org.waveprotocol.wave.model.conversation.ObservableManifestThread)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r3;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread r0;
        java.lang.String $r4;
        org.waveprotocol.wave.model.util.StringMap $r5;

        r1 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestThread;

        $r2 = r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper helper>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread create(org.waveprotocol.wave.model.conversation.ObservableManifestThread,org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip,org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper)>(r0, r1, $r2);

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: java.lang.String getId()>();

        $r5 = r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.StringMap replies>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r4, $r3);

        return $r3;
    }

    private void forgetThread(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)
    {
        org.waveprotocol.wave.model.util.StringMap $r3, $r4;
        java.lang.AssertionError $r5;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        java.lang.String $r1;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: java.lang.String getId()>();

        $z0 = <org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.StringMap replies>;

        $z1 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>($r1);

        if $z1 != 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r3 = r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.StringMap replies>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: void remove(java.lang.String)>($r1);

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void triggerOnDeleted()>();

        return;
    }

    private java.util.Map findAnchors()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$3 $r4;
        org.waveprotocol.wave.model.wave.Blip $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r1;
        java.util.HashMap $r0;
        org.waveprotocol.wave.model.document.Document $r3;

        r1 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        $r2 = r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip blip>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.Blip: org.waveprotocol.wave.model.document.Document getContent()>();

        $r4 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$3;

        specialinvoke $r4.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$3: void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip,java.util.Map)>(r1, $r0);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.Document: void 'with'(org.waveprotocol.wave.model.document.MutableDocument$Action)>($r4);

        return $r0;
    }

    private void createInlineReplyAnchor(java.lang.String, int)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$4 $r3;
        org.waveprotocol.wave.model.wave.Blip $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        int i0;
        org.waveprotocol.wave.model.document.Document $r2;
        java.lang.String r4;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip blip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.Blip: org.waveprotocol.wave.model.document.Document getContent()>();

        $r3 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$4;

        specialinvoke $r3.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$4: void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip,int,java.lang.String)>(r0, i0, r4);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.Document: void 'with'(org.waveprotocol.wave.model.document.MutableDocument$Action)>($r3);

        return;
    }

    private void clearInlineReplyAnchor(java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        java.util.Set $r3;
        java.lang.String[] $r1;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Set immutableSet(java.lang.Object[])>($r1);

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void clearInlineReplyAnchors(java.util.Set)>($r3);

        return;
    }

    private void clearInlineReplyAnchors(java.util.Set)
    {
        org.waveprotocol.wave.model.wave.Blip $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$5 $r3;
        java.util.Set r4;
        org.waveprotocol.wave.model.document.Document $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r4 := @parameter0: java.util.Set;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip blip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.Blip: org.waveprotocol.wave.model.document.Document getContent()>();

        $r3 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$5;

        specialinvoke $r3.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$5: void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip,java.util.Set)>(r0, r4);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.Document: void 'with'(org.waveprotocol.wave.model.document.MutableDocument$Action)>($r3);

        return;
    }

    private void clearAllInlineReplyAnchors()
    {
        org.waveprotocol.wave.model.wave.Blip $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$6 $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.document.Document $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip blip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.Blip: org.waveprotocol.wave.model.document.Document getContent()>();

        $r3 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$6;

        specialinvoke $r3.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$6: void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)>(r0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.Document: void 'with'(org.waveprotocol.wave.model.document.MutableDocument$Action)>($r3);

        return;
    }

    private void triggerOnReplyAdded(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r5;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener: void onReplyAdded(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)>(r5);

        goto label1;

     label2:
        return;
    }

    void triggerOnDeleted()
    {
        java.util.Iterator $r5;
        org.waveprotocol.wave.model.wave.WaveletListener $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener r7;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.wave.SourcesEvents $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper $r1;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper helper>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper: org.waveprotocol.wave.model.wave.SourcesEvents getWaveletEventSource()>();

        $r3 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.WaveletListener waveletListener>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.SourcesEvents: void removeListener(java.lang.Object)>($r3);

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void invalidate()>();

        $r4 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener) $r6;

        interfaceinvoke r7.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener: void onDeleted()>();

        goto label1;

     label2:
        return;
    }

    private void triggerOnContributorAdded(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.ParticipantId r5;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener: void onContributorAdded(org.waveprotocol.wave.model.wave.ParticipantId)>(r5);

        goto label1;

     label2:
        return;
    }

    private void triggerOnContributorRemoved(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.ParticipantId r5;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener: void onContributorRemoved(org.waveprotocol.wave.model.wave.ParticipantId)>(r5);

        goto label1;

     label2:
        return;
    }

    private void triggerOnSubmitted()
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener: void onSumbitted()>();

        goto label1;

     label2:
        return;
    }

    private void triggerOnTimestampModified(long, long)
    {
        java.util.Iterator $r2;
        long l0, l1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener r4;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener: void onTimestampChanged(long,long)>(l0, l1);

        goto label1;

     label2:
        return;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversationThread addReplyThread(int)
    {
        int i0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread addReplyThread(int)>(i0);

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversationThread addReplyThread()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread addReplyThread()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversationThread getThread()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread getThread()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversation getConversation()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ConversationThread addReplyThread(int)
    {
        int i0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread addReplyThread(int)>(i0);

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ConversationThread addReplyThread()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread addReplyThread()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ConversationThread getReplyThread(java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.conversation.ObservableConversationThread $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.ObservableConversationThread getReplyThread(java.lang.String)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.conversation.ConversationThread getThread()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread getThread()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.Conversation getConversation()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation()>();

        return $r1;
    }

    public volatile void removeListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void removeListener(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void addListener(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$Listener)>($r2);

        return;
    }

    static org.waveprotocol.wave.model.wave.Blip access$000(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)
    {
        org.waveprotocol.wave.model.wave.Blip $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip blip>;

        return $r1;
    }

    static void access$100(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.wave.ParticipantId r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void triggerOnContributorAdded(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        return;
    }

    static void access$200(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.wave.ParticipantId r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void triggerOnContributorRemoved(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        return;
    }

    static void access$300(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void triggerOnSubmitted()>();

        return;
    }

    static void access$400(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip, long, long)
    {
        long l0, l1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void triggerOnTimestampModified(long,long)>(l0, l1);

        return;
    }

    static org.waveprotocol.wave.model.util.StringMap access$500(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.util.StringMap $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.util.StringMap replies>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/conversation/WaveletBasedConversationBlip;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: boolean $assertionsDisabled> = $z1;

        return;
    }
}
