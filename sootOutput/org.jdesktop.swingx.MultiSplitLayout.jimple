public class org.jdesktop.swingx.MultiSplitLayout extends java.lang.Object implements java.awt.LayoutManager
{
    public static final int DEFAULT_LAYOUT;
    public static final int NO_MIN_SIZE_LAYOUT;
    public static final int USER_MIN_SIZE_LAYOUT;
    private final java.util.Map childMap;
    private final java.beans.PropertyChangeSupport pcs;
    private org.jdesktop.swingx.MultiSplitLayout$Node model;
    private int dividerSize;
    private boolean floatingDividers;
    private boolean removeDividers;
    private boolean layoutByWeight;
    private int layoutMode;
    private int userMinSize;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.jdesktop.swingx.MultiSplitLayout$Leaf $r1;
        org.jdesktop.swingx.MultiSplitLayout r0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        $r1 = new org.jdesktop.swingx.MultiSplitLayout$Leaf;

        specialinvoke $r1.<org.jdesktop.swingx.MultiSplitLayout$Leaf: void <init>(java.lang.String)>("default");

        specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: void <init>(org.jdesktop.swingx.MultiSplitLayout$Node)>($r1);

        return;
    }

    public void <init>(boolean)
    {
        org.jdesktop.swingx.MultiSplitLayout$Leaf $r1;
        org.jdesktop.swingx.MultiSplitLayout r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        z0 := @parameter0: boolean;

        $r1 = new org.jdesktop.swingx.MultiSplitLayout$Leaf;

        specialinvoke $r1.<org.jdesktop.swingx.MultiSplitLayout$Leaf: void <init>(java.lang.String)>("default");

        specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: void <init>(org.jdesktop.swingx.MultiSplitLayout$Node)>($r1);

        r0.<org.jdesktop.swingx.MultiSplitLayout: boolean layoutByWeight> = z0;

        return;
    }

    public void layoutByWeight(java.awt.Container)
    {
        java.awt.Container r1;
        org.jdesktop.swingx.MultiSplitLayout r0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r1 := @parameter0: java.awt.Container;

        specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: void doLayoutByWeight(java.awt.Container)>(r1);

        virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: void layoutContainer(java.awt.Container)>(r1);

        return;
    }

    private void doLayoutByWeight(java.awt.Container)
    {
        java.awt.Rectangle $r3;
        java.awt.Insets $r2;
        org.jdesktop.swingx.MultiSplitLayout r4;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, i9, $i10, $i11;
        java.awt.Container r0;
        boolean $z0, $z1;
        org.jdesktop.swingx.MultiSplitLayout$Node $r5, $r6, $r7, $r8;
        java.awt.Dimension $r1;

        r4 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: java.awt.Container;

        $r1 = virtualinvoke r0.<java.awt.Container: java.awt.Dimension getSize()>();

        $r2 = virtualinvoke r0.<java.awt.Container: java.awt.Insets getInsets()>();

        $i3 = $r1.<java.awt.Dimension: int width>;

        $i1 = $r2.<java.awt.Insets: int left>;

        $i0 = $r2.<java.awt.Insets: int right>;

        $i2 = $i1 + $i0;

        i4 = $i3 - $i2;

        $i8 = $r1.<java.awt.Dimension: int height>;

        $i6 = $r2.<java.awt.Insets: int top>;

        $i5 = $r2.<java.awt.Insets: int bottom>;

        $i7 = $i6 + $i5;

        i9 = $i8 - $i7;

        $r3 = new java.awt.Rectangle;

        $i11 = $r2.<java.awt.Insets: int left>;

        $i10 = $r2.<java.awt.Insets: int top>;

        specialinvoke $r3.<java.awt.Rectangle: void <init>(int,int,int,int)>($i11, $i10, i4, i9);

        $r5 = r4.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node model>;

        $z0 = $r5 instanceof org.jdesktop.swingx.MultiSplitLayout$Leaf;

        if $z0 == 0 goto label1;

        $r8 = r4.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node model>;

        virtualinvoke $r8.<org.jdesktop.swingx.MultiSplitLayout$Node: void setBounds(java.awt.Rectangle)>($r3);

        goto label2;

     label1:
        $r6 = r4.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node model>;

        $z1 = $r6 instanceof org.jdesktop.swingx.MultiSplitLayout$Split;

        if $z1 == 0 goto label2;

        $r7 = r4.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node model>;

        specialinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: void doLayoutByWeight(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>($r7, $r3);

     label2:
        return;
    }

    private void doLayoutByWeight(org.jdesktop.swingx.MultiSplitLayout$Node, java.awt.Rectangle)
    {
        byte $b0, $b12, $b24;
        org.jdesktop.swingx.MultiSplitLayout$Node r1, r21, r22, r24;
        java.awt.Component $r10, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        org.jdesktop.swingx.MultiSplitLayout$Split r2;
        java.util.List $r3;
        java.awt.Dimension $r11, $r18;
        java.awt.Rectangle r0, $r7, $r15, r23, r25, $r26, $r27, $r28, $r29;
        org.jdesktop.swingx.MultiSplitLayout r9;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, i26, i27, i28, i29, i30, i31, $i32, $i33, $i34;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, d14, d15;
        java.util.Iterator $r4, $r5, $r13;
        java.lang.Object $r6, $r14, $r20;

        r9 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r1 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        r0 := @parameter1: java.awt.Rectangle;

        i26 = r0.<java.awt.Rectangle: int width>;

        i27 = r0.<java.awt.Rectangle: int height>;

        r2 = (org.jdesktop.swingx.MultiSplitLayout$Split) r1;

        $r3 = virtualinvoke r2.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        d13 = 1.0;

        i28 = 0;

        i29 = 0;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z9 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label06;

        $r20 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r20;

        $z7 = virtualinvoke r21.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z7 != 0 goto label02;

        goto label01;

     label02:
        $z8 = r21 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z8 == 0 goto label03;

        $i25 = r9.<org.jdesktop.swingx.MultiSplitLayout: int dividerSize>;

        i29 = i29 + $i25;

        goto label01;

     label03:
        $d12 = virtualinvoke r21.<org.jdesktop.swingx.MultiSplitLayout$Node: double getWeight()>();

        $b24 = $d12 cmpl 0.0;

        $i32 = (int) $b24;

        if $i32 <= 0 goto label04;

        d13 = d13 - $d12;

        goto label05;

     label04:
        i28 = i28 + 1;

     label05:
        goto label01;

     label06:
        $z0 = virtualinvoke r2.<org.jdesktop.swingx.MultiSplitLayout$Split: boolean isRowLayout()>();

        if $z0 == 0 goto label15;

        i30 = i26 - i29;

        $d6 = (double) i30;

        d14 = $d6 * d13;

        $r13 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z10 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label14;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r14;

        $z4 = virtualinvoke r22.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z4 == 0 goto label07;

        $z5 = r22 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z5 == 0 goto label08;

        goto label07;

     label08:
        $d7 = virtualinvoke r22.<org.jdesktop.swingx.MultiSplitLayout$Node: double getWeight()>();

        $r15 = virtualinvoke r22.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        $b12 = $d7 cmpl 0.0;

        $i33 = (int) $b12;

        if $i33 < 0 goto label09;

        $r26 = new java.awt.Rectangle;

        $i23 = $r15.<java.awt.Rectangle: int x>;

        $i22 = $r15.<java.awt.Rectangle: int y>;

        $d10 = (double) i30;

        $d11 = $d10 * $d7;

        $i21 = (int) $d11;

        specialinvoke $r26.<java.awt.Rectangle: void <init>(int,int,int,int)>($i23, $i22, $i21, i27);

        r23 = $r26;

        goto label10;

     label09:
        $r27 = new java.awt.Rectangle;

        $i15 = $r15.<java.awt.Rectangle: int x>;

        $i14 = $r15.<java.awt.Rectangle: int y>;

        $d8 = (double) i28;

        $d9 = d14 / $d8;

        $i13 = (int) $d9;

        specialinvoke $r27.<java.awt.Rectangle: void <init>(int,int,int,int)>($i15, $i14, $i13, i27);

        r23 = $r27;

     label10:
        $i16 = r9.<org.jdesktop.swingx.MultiSplitLayout: int layoutMode>;

        if $i16 != 2 goto label11;

        $i18 = r23.<java.awt.Rectangle: int width>;

        $i17 = r9.<org.jdesktop.swingx.MultiSplitLayout: int userMinSize>;

        $i19 = staticinvoke <java.lang.Math: int max(int,int)>($i18, $i17);

        $i20 = r23.<java.awt.Rectangle: int height>;

        virtualinvoke r23.<java.awt.Rectangle: void setSize(int,int)>($i19, $i20);

     label11:
        virtualinvoke r22.<org.jdesktop.swingx.MultiSplitLayout$Node: void setBounds(java.awt.Rectangle)>(r23);

        $z6 = r22 instanceof org.jdesktop.swingx.MultiSplitLayout$Split;

        if $z6 == 0 goto label12;

        specialinvoke r9.<org.jdesktop.swingx.MultiSplitLayout: void doLayoutByWeight(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r22, r23);

        goto label13;

     label12:
        $r17 = virtualinvoke r9.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Component getComponentForNode(org.jdesktop.swingx.MultiSplitLayout$Node)>(r22);

        if $r17 == null goto label13;

        $r18 = virtualinvoke r23.<java.awt.Rectangle: java.awt.Dimension getSize()>();

        virtualinvoke $r17.<java.awt.Component: void setPreferredSize(java.awt.Dimension)>($r18);

     label13:
        goto label07;

     label14:
        goto label23;

     label15:
        i31 = i27 - i29;

        $d0 = (double) i31;

        d15 = $d0 * d13;

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z11 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label23;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r24 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r6;

        $z1 = virtualinvoke r24.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z1 == 0 goto label16;

        $z2 = r24 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z2 == 0 goto label17;

        goto label16;

     label17:
        $d1 = virtualinvoke r24.<org.jdesktop.swingx.MultiSplitLayout$Node: double getWeight()>();

        $r7 = virtualinvoke r24.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        $b0 = $d1 cmpl 0.0;

        $i34 = (int) $b0;

        if $i34 < 0 goto label18;

        $r28 = new java.awt.Rectangle;

        $i11 = $r7.<java.awt.Rectangle: int x>;

        $i10 = $r7.<java.awt.Rectangle: int y>;

        $d4 = (double) i31;

        $d5 = $d4 * $d1;

        $i9 = (int) $d5;

        specialinvoke $r28.<java.awt.Rectangle: void <init>(int,int,int,int)>($i11, $i10, i26, $i9);

        r25 = $r28;

        goto label19;

     label18:
        $r29 = new java.awt.Rectangle;

        $i3 = $r7.<java.awt.Rectangle: int x>;

        $i2 = $r7.<java.awt.Rectangle: int y>;

        $d2 = (double) i28;

        $d3 = d15 / $d2;

        $i1 = (int) $d3;

        specialinvoke $r29.<java.awt.Rectangle: void <init>(int,int,int,int)>($i3, $i2, i26, $i1);

        r25 = $r29;

     label19:
        $i4 = r9.<org.jdesktop.swingx.MultiSplitLayout: int layoutMode>;

        if $i4 != 2 goto label20;

        $i7 = r25.<java.awt.Rectangle: int width>;

        $i6 = r25.<java.awt.Rectangle: int height>;

        $i5 = r9.<org.jdesktop.swingx.MultiSplitLayout: int userMinSize>;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i6, $i5);

        virtualinvoke r25.<java.awt.Rectangle: void setSize(int,int)>($i7, $i8);

     label20:
        virtualinvoke r24.<org.jdesktop.swingx.MultiSplitLayout$Node: void setBounds(java.awt.Rectangle)>(r25);

        $z3 = r24 instanceof org.jdesktop.swingx.MultiSplitLayout$Split;

        if $z3 == 0 goto label21;

        specialinvoke r9.<org.jdesktop.swingx.MultiSplitLayout: void doLayoutByWeight(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r24, r25);

        goto label22;

     label21:
        $r10 = virtualinvoke r9.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Component getComponentForNode(org.jdesktop.swingx.MultiSplitLayout$Node)>(r24);

        if $r10 == null goto label22;

        $r11 = virtualinvoke r25.<java.awt.Rectangle: java.awt.Dimension getSize()>();

        virtualinvoke $r10.<java.awt.Component: void setPreferredSize(java.awt.Dimension)>($r11);

     label22:
        goto label16;

     label23:
        return;
    }

    public java.awt.Component getComponentForNode(org.jdesktop.swingx.MultiSplitLayout$Node)
    {
        org.jdesktop.swingx.MultiSplitLayout$Leaf $r1;
        org.jdesktop.swingx.MultiSplitLayout r3;
        java.util.Map $r4;
        org.jdesktop.swingx.MultiSplitLayout$Node r0;
        java.lang.Object $r5;
        java.lang.String $r2;
        java.awt.Component $r6;

        r3 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        $r1 = (org.jdesktop.swingx.MultiSplitLayout$Leaf) r0;

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.MultiSplitLayout$Leaf: java.lang.String getName()>();

        if $r2 == null goto label1;

        $r4 = r3.<org.jdesktop.swingx.MultiSplitLayout: java.util.Map childMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r6 = (java.awt.Component) $r5;

        goto label2;

     label1:
        $r6 = null;

     label2:
        return $r6;
    }

    public org.jdesktop.swingx.MultiSplitLayout$Node getNodeForComponent(java.awt.Component)
    {
        org.jdesktop.swingx.MultiSplitLayout r0;
        org.jdesktop.swingx.MultiSplitLayout$Node $r3;
        java.lang.String $r2;
        java.awt.Component r1;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r1 := @parameter0: java.awt.Component;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: java.lang.String getNameForComponent(java.awt.Component)>(r1);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node getNodeForName(java.lang.String)>($r2);

        return $r3;
    }

    public org.jdesktop.swingx.MultiSplitLayout$Node getNodeForName(java.lang.String)
    {
        org.jdesktop.swingx.MultiSplitLayout r0;
        org.jdesktop.swingx.MultiSplitLayout$Node $r1, $r2, $r5;
        org.jdesktop.swingx.MultiSplitLayout$Split r3;
        java.lang.String r4;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node model>;

        $z0 = $r1 instanceof org.jdesktop.swingx.MultiSplitLayout$Split;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node model>;

        r3 = (org.jdesktop.swingx.MultiSplitLayout$Split) $r2;

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node getNodeForName(org.jdesktop.swingx.MultiSplitLayout$Split,java.lang.String)>(r3, r4);

        return $r5;

     label1:
        return null;
    }

    public java.lang.String getNameForComponent(java.awt.Component)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.awt.Component r7;
        org.jdesktop.swingx.MultiSplitLayout r0;
        java.util.Map $r1;
        java.lang.Object $r4, $r6, $r8;
        java.lang.String r9;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r7 := @parameter0: java.awt.Component;

        r9 = null;

        $r1 = r0.<org.jdesktop.swingx.MultiSplitLayout: java.util.Map childMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r6 != r7 goto label2;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r9 = (java.lang.String) $r8;

        goto label3;

     label2:
        goto label1;

     label3:
        return r9;
    }

    public org.jdesktop.swingx.MultiSplitLayout$Node getNodeForComponent(org.jdesktop.swingx.MultiSplitLayout$Split, java.awt.Component)
    {
        org.jdesktop.swingx.MultiSplitLayout r0;
        org.jdesktop.swingx.MultiSplitLayout$Split r1;
        org.jdesktop.swingx.MultiSplitLayout$Node $r4;
        java.lang.String $r3;
        java.awt.Component r2;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r1 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Split;

        r2 := @parameter1: java.awt.Component;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: java.lang.String getNameForComponent(java.awt.Component)>(r2);

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node getNodeForName(org.jdesktop.swingx.MultiSplitLayout$Split,java.lang.String)>(r1, $r3);

        return $r4;
    }

    public org.jdesktop.swingx.MultiSplitLayout$Node getNodeForName(org.jdesktop.swingx.MultiSplitLayout$Split, java.lang.String)
    {
        java.util.Iterator $r2;
        org.jdesktop.swingx.MultiSplitLayout$Leaf $r9;
        org.jdesktop.swingx.MultiSplitLayout$Split r0, $r7;
        org.jdesktop.swingx.MultiSplitLayout$Node r4, $r8;
        java.util.List $r1;
        org.jdesktop.swingx.MultiSplitLayout r5;
        java.lang.Object $r3;
        java.lang.String r6, $r10;
        boolean $z0, $z1, $z2, $z3;

        r5 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Split;

        r6 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r3;

        $z1 = r4 instanceof org.jdesktop.swingx.MultiSplitLayout$Leaf;

        if $z1 == 0 goto label2;

        $r9 = (org.jdesktop.swingx.MultiSplitLayout$Leaf) r4;

        $r10 = virtualinvoke $r9.<org.jdesktop.swingx.MultiSplitLayout$Leaf: java.lang.String getName()>();

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z3 == 0 goto label3;

        return r4;

     label2:
        $z2 = r4 instanceof org.jdesktop.swingx.MultiSplitLayout$Split;

        if $z2 == 0 goto label3;

        $r7 = (org.jdesktop.swingx.MultiSplitLayout$Split) r4;

        $r8 = virtualinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node getNodeForName(org.jdesktop.swingx.MultiSplitLayout$Split,java.lang.String)>($r7, r6);

        if $r8 == null goto label3;

        return $r8;

     label3:
        goto label1;

     label4:
        return null;
    }

    public boolean hasModel()
    {
        org.jdesktop.swingx.MultiSplitLayout$Node $r1;
        org.jdesktop.swingx.MultiSplitLayout r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        $r1 = r0.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node model>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void <init>(org.jdesktop.swingx.MultiSplitLayout$Node)
    {
        org.jdesktop.swingx.MultiSplitLayout r0;
        org.jdesktop.swingx.MultiSplitLayout$Node r3;
        int $i0, $i1;
        java.beans.PropertyChangeSupport $r2;
        java.util.HashMap $r1;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r3 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.jdesktop.swingx.MultiSplitLayout: java.util.Map childMap> = $r1;

        $r2 = new java.beans.PropertyChangeSupport;

        specialinvoke $r2.<java.beans.PropertyChangeSupport: void <init>(java.lang.Object)>(r0);

        r0.<org.jdesktop.swingx.MultiSplitLayout: java.beans.PropertyChangeSupport pcs> = $r2;

        r0.<org.jdesktop.swingx.MultiSplitLayout: boolean floatingDividers> = 1;

        r0.<org.jdesktop.swingx.MultiSplitLayout: boolean removeDividers> = 1;

        r0.<org.jdesktop.swingx.MultiSplitLayout: boolean layoutByWeight> = 0;

        r0.<org.jdesktop.swingx.MultiSplitLayout: int userMinSize> = 20;

        r0.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node model> = r3;

        $i0 = staticinvoke <javax.swing.UIManager: int getInt(java.lang.Object)>("SplitPane.dividerSize");

        r0.<org.jdesktop.swingx.MultiSplitLayout: int dividerSize> = $i0;

        $i1 = r0.<org.jdesktop.swingx.MultiSplitLayout: int dividerSize>;

        if $i1 != 0 goto label1;

        r0.<org.jdesktop.swingx.MultiSplitLayout: int dividerSize> = 7;

     label1:
        return;
    }

    public void addPropertyChangeListener(java.beans.PropertyChangeListener)
    {
        java.beans.PropertyChangeSupport $r2;
        java.beans.PropertyChangeListener r0;
        org.jdesktop.swingx.MultiSplitLayout r1;

        r1 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: java.beans.PropertyChangeListener;

        if r0 == null goto label1;

        $r2 = r1.<org.jdesktop.swingx.MultiSplitLayout: java.beans.PropertyChangeSupport pcs>;

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void addPropertyChangeListener(java.beans.PropertyChangeListener)>(r0);

     label1:
        return;
    }

    public void removePropertyChangeListener(java.beans.PropertyChangeListener)
    {
        java.beans.PropertyChangeSupport $r2;
        java.beans.PropertyChangeListener r0;
        org.jdesktop.swingx.MultiSplitLayout r1;

        r1 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: java.beans.PropertyChangeListener;

        if r0 == null goto label1;

        $r2 = r1.<org.jdesktop.swingx.MultiSplitLayout: java.beans.PropertyChangeSupport pcs>;

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void removePropertyChangeListener(java.beans.PropertyChangeListener)>(r0);

     label1:
        return;
    }

    public java.beans.PropertyChangeListener[] getPropertyChangeListeners()
    {
        java.beans.PropertyChangeSupport $r1;
        java.beans.PropertyChangeListener[] $r2;
        org.jdesktop.swingx.MultiSplitLayout r0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        $r1 = r0.<org.jdesktop.swingx.MultiSplitLayout: java.beans.PropertyChangeSupport pcs>;

        $r2 = virtualinvoke $r1.<java.beans.PropertyChangeSupport: java.beans.PropertyChangeListener[] getPropertyChangeListeners()>();

        return $r2;
    }

    private void firePCS(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.jdesktop.swingx.MultiSplitLayout r1;
        java.beans.PropertyChangeSupport $r4;
        java.lang.Object r0, r3;
        java.lang.String r2;
        boolean $z0;

        r1 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        if r0 == null goto label1;

        if r3 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label2;

     label1:
        $r4 = r1.<org.jdesktop.swingx.MultiSplitLayout: java.beans.PropertyChangeSupport pcs>;

        virtualinvoke $r4.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>(r2, r0, r3);

     label2:
        return;
    }

    public org.jdesktop.swingx.MultiSplitLayout$Node getModel()
    {
        org.jdesktop.swingx.MultiSplitLayout$Node $r1;
        org.jdesktop.swingx.MultiSplitLayout r0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        $r1 = r0.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node model>;

        return $r1;
    }

    public void setModel(org.jdesktop.swingx.MultiSplitLayout$Node)
    {
        org.jdesktop.swingx.MultiSplitLayout r2;
        org.jdesktop.swingx.MultiSplitLayout$Node r0, $r3, $r4;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r2 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        if r0 == null goto label1;

        $z0 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z0 == 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid model");

        throw $r1;

     label2:
        $r3 = virtualinvoke r2.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node getModel()>();

        r2.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node model> = r0;

        $r4 = virtualinvoke r2.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node getModel()>();

        specialinvoke r2.<org.jdesktop.swingx.MultiSplitLayout: void firePCS(java.lang.String,java.lang.Object,java.lang.Object)>("model", $r3, $r4);

        return;
    }

    public int getDividerSize()
    {
        int $i0;
        org.jdesktop.swingx.MultiSplitLayout r0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        $i0 = r0.<org.jdesktop.swingx.MultiSplitLayout: int dividerSize>;

        return $i0;
    }

    public void setDividerSize(int)
    {
        org.jdesktop.swingx.MultiSplitLayout r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.Integer $r1, $r2;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid dividerSize");

        throw $r3;

     label1:
        i1 = r0.<org.jdesktop.swingx.MultiSplitLayout: int dividerSize>;

        r0.<org.jdesktop.swingx.MultiSplitLayout: int dividerSize> = i0;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i1);

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i0);

        specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: void firePCS(java.lang.String,java.lang.Object,java.lang.Object)>("dividerSize", $r1, $r2);

        return;
    }

    public boolean getFloatingDividers()
    {
        org.jdesktop.swingx.MultiSplitLayout r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        $z0 = r0.<org.jdesktop.swingx.MultiSplitLayout: boolean floatingDividers>;

        return $z0;
    }

    public void setFloatingDividers(boolean)
    {
        org.jdesktop.swingx.MultiSplitLayout r0;
        java.lang.Boolean $r1, $r2;
        boolean z0, z1;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        z1 := @parameter0: boolean;

        z0 = r0.<org.jdesktop.swingx.MultiSplitLayout: boolean floatingDividers>;

        r0.<org.jdesktop.swingx.MultiSplitLayout: boolean floatingDividers> = z1;

        $r1 = new java.lang.Boolean;

        specialinvoke $r1.<java.lang.Boolean: void <init>(boolean)>(z0);

        $r2 = new java.lang.Boolean;

        specialinvoke $r2.<java.lang.Boolean: void <init>(boolean)>(z1);

        specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: void firePCS(java.lang.String,java.lang.Object,java.lang.Object)>("floatingDividers", $r1, $r2);

        return;
    }

    public boolean getRemoveDividers()
    {
        org.jdesktop.swingx.MultiSplitLayout r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        $z0 = r0.<org.jdesktop.swingx.MultiSplitLayout: boolean removeDividers>;

        return $z0;
    }

    public void setRemoveDividers(boolean)
    {
        org.jdesktop.swingx.MultiSplitLayout r0;
        java.lang.Boolean $r1, $r2;
        boolean z0, z1;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        z1 := @parameter0: boolean;

        z0 = r0.<org.jdesktop.swingx.MultiSplitLayout: boolean removeDividers>;

        r0.<org.jdesktop.swingx.MultiSplitLayout: boolean removeDividers> = z1;

        $r1 = new java.lang.Boolean;

        specialinvoke $r1.<java.lang.Boolean: void <init>(boolean)>(z0);

        $r2 = new java.lang.Boolean;

        specialinvoke $r2.<java.lang.Boolean: void <init>(boolean)>(z1);

        specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: void firePCS(java.lang.String,java.lang.Object,java.lang.Object)>("removeDividers", $r1, $r2);

        return;
    }

    public void addLayoutComponent(java.lang.String, java.awt.Component)
    {
        org.jdesktop.swingx.MultiSplitLayout r1;
        java.util.Map $r3;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r4;
        java.awt.Component r2;

        r1 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.awt.Component;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name not specified");

        throw $r4;

     label1:
        $r3 = r1.<org.jdesktop.swingx.MultiSplitLayout: java.util.Map childMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

        return;
    }

    public void removeLayoutComponent(java.awt.Component)
    {
        org.jdesktop.swingx.MultiSplitLayout r0;
        java.util.Map $r3;
        java.lang.String $r2;
        java.awt.Component r1;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r1 := @parameter0: java.awt.Component;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: java.lang.String getNameForComponent(java.awt.Component)>(r1);

        if $r2 == null goto label1;

        $r3 = r0.<org.jdesktop.swingx.MultiSplitLayout: java.util.Map childMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

     label1:
        return;
    }

    public void removeLayoutNode(java.lang.String)
    {
        org.jdesktop.swingx.MultiSplitLayout r1;
        java.util.Map $r3, $r4;
        int $i0, $i1, $i2;
        java.lang.String r0;
        boolean $z0, $z1;
        org.jdesktop.swingx.MultiSplitLayout$Node $r2, r11, $r15, r16;
        org.jdesktop.swingx.MultiSplitLayout$Split $r5, $r7, r17;
        java.util.List $r6, $r8, $r9, $r12, $r13;
        java.lang.Object $r10, $r14;

        r1 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label11;

        $r2 = r1.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node model>;

        $z0 = $r2 instanceof org.jdesktop.swingx.MultiSplitLayout$Split;

        if $z0 != 0 goto label01;

        r16 = r1.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node model>;

        goto label02;

     label01:
        r16 = virtualinvoke r1.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node getNodeForName(java.lang.String)>(r0);

     label02:
        $r3 = r1.<org.jdesktop.swingx.MultiSplitLayout: java.util.Map childMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        if r16 == null goto label10;

        $r5 = virtualinvoke r16.<org.jdesktop.swingx.MultiSplitLayout$Node: org.jdesktop.swingx.MultiSplitLayout$Split getParent()>();

        r17 = $r5;

        virtualinvoke $r5.<org.jdesktop.swingx.MultiSplitLayout$Split: void remove(org.jdesktop.swingx.MultiSplitLayout$Node)>(r16);

        $z1 = r1.<org.jdesktop.swingx.MultiSplitLayout: boolean removeDividers>;

        if $z1 == 0 goto label09;

     label03:
        $r6 = virtualinvoke r17.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i0 >= 2 goto label09;

        $r7 = virtualinvoke r17.<org.jdesktop.swingx.MultiSplitLayout$Split: org.jdesktop.swingx.MultiSplitLayout$Split getParent()>();

        if $r7 != null goto label06;

        $r12 = virtualinvoke r17.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $i2 = interfaceinvoke $r12.<java.util.List: int size()>();

        if $i2 <= 0 goto label04;

        $r13 = virtualinvoke r17.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r14;

        r1.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node model> = $r15;

        goto label05;

     label04:
        r1.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node model> = null;

     label05:
        return;

     label06:
        $r8 = virtualinvoke r17.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $i1 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i1 != 1 goto label07;

        $r9 = virtualinvoke r17.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(0);

        r11 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r10;

        virtualinvoke $r7.<org.jdesktop.swingx.MultiSplitLayout$Split: void replace(org.jdesktop.swingx.MultiSplitLayout$Node,org.jdesktop.swingx.MultiSplitLayout$Node)>(r17, r11);

        virtualinvoke r11.<org.jdesktop.swingx.MultiSplitLayout$Node: void setParent(org.jdesktop.swingx.MultiSplitLayout$Split)>($r7);

        goto label08;

     label07:
        virtualinvoke $r7.<org.jdesktop.swingx.MultiSplitLayout$Split: void remove(org.jdesktop.swingx.MultiSplitLayout$Node)>(r17);

     label08:
        r17 = $r7;

        goto label03;

     label09:
        goto label11;

     label10:
        $r4 = r1.<org.jdesktop.swingx.MultiSplitLayout: java.util.Map childMap>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

     label11:
        return;
    }

    public void displayNode(java.lang.String, boolean)
    {
        org.jdesktop.swingx.MultiSplitLayout$Node $r2;
        org.jdesktop.swingx.MultiSplitLayout$Split $r4, $r5, $r6, r7;
        java.awt.Component $r3;
        org.jdesktop.swingx.MultiSplitLayout r0;
        java.lang.String r1;
        boolean z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node getNodeForName(java.lang.String)>(r1);

        if $r2 == null goto label4;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Component getComponentForNode(org.jdesktop.swingx.MultiSplitLayout$Node)>($r2);

        virtualinvoke $r3.<java.awt.Component: void setVisible(boolean)>(z0);

        virtualinvoke $r2.<org.jdesktop.swingx.MultiSplitLayout$Node: void setVisible(boolean)>(z0);

        $r4 = virtualinvoke $r2.<org.jdesktop.swingx.MultiSplitLayout$Node: org.jdesktop.swingx.MultiSplitLayout$Split getParent()>();

        r7 = $r4;

        if z0 != 0 goto label3;

        virtualinvoke $r4.<org.jdesktop.swingx.MultiSplitLayout$Split: void hide(org.jdesktop.swingx.MultiSplitLayout$Node)>($r2);

        $z1 = virtualinvoke $r4.<org.jdesktop.swingx.MultiSplitLayout$Split: boolean isVisible()>();

        if $z1 != 0 goto label1;

        $r6 = virtualinvoke $r4.<org.jdesktop.swingx.MultiSplitLayout$Split: org.jdesktop.swingx.MultiSplitLayout$Split getParent()>();

        virtualinvoke $r6.<org.jdesktop.swingx.MultiSplitLayout$Split: void hide(org.jdesktop.swingx.MultiSplitLayout$Node)>($r4);

     label1:
        virtualinvoke $r4.<org.jdesktop.swingx.MultiSplitLayout$Split: void checkDividers(org.jdesktop.swingx.MultiSplitLayout$Split)>($r4);

     label2:
        $z2 = virtualinvoke r7.<org.jdesktop.swingx.MultiSplitLayout$Split: boolean isVisible()>();

        if $z2 != 0 goto label4;

        $r5 = virtualinvoke r7.<org.jdesktop.swingx.MultiSplitLayout$Split: org.jdesktop.swingx.MultiSplitLayout$Split getParent()>();

        r7 = $r5;

        if $r5 == null goto label4;

        virtualinvoke $r5.<org.jdesktop.swingx.MultiSplitLayout$Split: void checkDividers(org.jdesktop.swingx.MultiSplitLayout$Split)>($r5);

        goto label2;

     label3:
        virtualinvoke $r4.<org.jdesktop.swingx.MultiSplitLayout$Split: void restoreDividers(org.jdesktop.swingx.MultiSplitLayout$Split)>($r4);

     label4:
        virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: void setFloatingDividers(boolean)>(0);

        return;
    }

    private java.awt.Component childForNode(org.jdesktop.swingx.MultiSplitLayout$Node)
    {
        org.jdesktop.swingx.MultiSplitLayout$Leaf r1;
        org.jdesktop.swingx.MultiSplitLayout$Node r0;
        java.awt.Component $r6;
        org.jdesktop.swingx.MultiSplitLayout r3;
        java.util.Map $r4;
        java.lang.Object $r5;
        java.lang.String $r2;
        boolean $z0;

        r3 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        $z0 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Leaf;

        if $z0 == 0 goto label3;

        r1 = (org.jdesktop.swingx.MultiSplitLayout$Leaf) r0;

        $r2 = virtualinvoke r1.<org.jdesktop.swingx.MultiSplitLayout$Leaf: java.lang.String getName()>();

        if $r2 == null goto label1;

        $r4 = r3.<org.jdesktop.swingx.MultiSplitLayout: java.util.Map childMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r6 = (java.awt.Component) $r5;

        goto label2;

     label1:
        $r6 = null;

     label2:
        return $r6;

     label3:
        return null;
    }

    private java.awt.Dimension preferredComponentSize(org.jdesktop.swingx.MultiSplitLayout$Node)
    {
        java.awt.Dimension $r3, $r4;
        org.jdesktop.swingx.MultiSplitLayout r0;
        int $i0;
        org.jdesktop.swingx.MultiSplitLayout$Node r1;
        java.awt.Component $r2;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r1 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        $i0 = r0.<org.jdesktop.swingx.MultiSplitLayout: int layoutMode>;

        if $i0 != 1 goto label1;

        $r3 = new java.awt.Dimension;

        specialinvoke $r3.<java.awt.Dimension: void <init>(int,int)>(0, 0);

        return $r3;

     label1:
        $r2 = specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Component childForNode(org.jdesktop.swingx.MultiSplitLayout$Node)>(r1);

        if $r2 == null goto label2;

        $z0 = virtualinvoke $r2.<java.awt.Component: boolean isVisible()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r2.<java.awt.Component: java.awt.Dimension getPreferredSize()>();

        goto label3;

     label2:
        $r4 = new java.awt.Dimension;

        specialinvoke $r4.<java.awt.Dimension: void <init>(int,int)>(0, 0);

     label3:
        return $r4;
    }

    private java.awt.Dimension minimumComponentSize(org.jdesktop.swingx.MultiSplitLayout$Node)
    {
        java.awt.Dimension $r3, $r4;
        org.jdesktop.swingx.MultiSplitLayout r0;
        int $i0;
        org.jdesktop.swingx.MultiSplitLayout$Node r1;
        java.awt.Component $r2;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r1 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        $i0 = r0.<org.jdesktop.swingx.MultiSplitLayout: int layoutMode>;

        if $i0 != 1 goto label1;

        $r3 = new java.awt.Dimension;

        specialinvoke $r3.<java.awt.Dimension: void <init>(int,int)>(0, 0);

        return $r3;

     label1:
        $r2 = specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Component childForNode(org.jdesktop.swingx.MultiSplitLayout$Node)>(r1);

        if $r2 == null goto label2;

        $z0 = virtualinvoke $r2.<java.awt.Component: boolean isVisible()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r2.<java.awt.Component: java.awt.Dimension getMinimumSize()>();

        goto label3;

     label2:
        $r4 = new java.awt.Dimension;

        specialinvoke $r4.<java.awt.Dimension: void <init>(int,int)>(0, 0);

     label3:
        return $r4;
    }

    private java.awt.Dimension preferredNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.jdesktop.swingx.MultiSplitLayout$Node r0, r15, r16;
        org.jdesktop.swingx.MultiSplitLayout$Split r14;
        java.util.List $r1;
        java.awt.Dimension $r3, $r6, $r9, $r11, $r12, $r13;
        org.jdesktop.swingx.MultiSplitLayout r5;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.util.Iterator $r2, $r7;
        org.jdesktop.swingx.MultiSplitLayout$Divider $r10;
        java.lang.Object $r4, $r8;

        r5 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        $z0 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Leaf;

        if $z0 == 0 goto label01;

        $r13 = specialinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension preferredComponentSize(org.jdesktop.swingx.MultiSplitLayout$Node)>(r0);

        return $r13;

     label01:
        $z1 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z1 == 0 goto label03;

        $r10 = (org.jdesktop.swingx.MultiSplitLayout$Divider) r0;

        $z5 = virtualinvoke $r10.<org.jdesktop.swingx.MultiSplitLayout$Divider: boolean isVisible()>();

        if $z5 != 0 goto label02;

        $r12 = new java.awt.Dimension;

        specialinvoke $r12.<java.awt.Dimension: void <init>(int,int)>(0, 0);

        return $r12;

     label02:
        $i4 = virtualinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: int getDividerSize()>();

        $r11 = new java.awt.Dimension;

        specialinvoke $r11.<java.awt.Dimension: void <init>(int,int)>($i4, $i4);

        return $r11;

     label03:
        r14 = (org.jdesktop.swingx.MultiSplitLayout$Split) r0;

        $r1 = virtualinvoke r14.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        i5 = 0;

        i6 = 0;

        $z2 = virtualinvoke r14.<org.jdesktop.swingx.MultiSplitLayout$Split: boolean isRowLayout()>();

        if $z2 == 0 goto label07;

        $r7 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z6 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label06;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r8;

        $z4 = virtualinvoke r15.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z4 != 0 goto label05;

        goto label04;

     label05:
        $r9 = specialinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension preferredNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)>(r15);

        $i2 = $r9.<java.awt.Dimension: int width>;

        i5 = i5 + $i2;

        $i3 = $r9.<java.awt.Dimension: int height>;

        i6 = staticinvoke <java.lang.Math: int max(int,int)>(i6, $i3);

        goto label04;

     label06:
        goto label10;

     label07:
        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z7 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label10;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r4;

        $z3 = virtualinvoke r16.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z3 != 0 goto label09;

        goto label08;

     label09:
        $r6 = specialinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension preferredNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)>(r16);

        $i0 = $r6.<java.awt.Dimension: int width>;

        i5 = staticinvoke <java.lang.Math: int max(int,int)>(i5, $i0);

        $i1 = $r6.<java.awt.Dimension: int height>;

        i6 = i6 + $i1;

        goto label08;

     label10:
        $r3 = new java.awt.Dimension;

        specialinvoke $r3.<java.awt.Dimension: void <init>(int,int)>(i5, i6);

        return $r3;
    }

    public java.awt.Dimension minimumNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.jdesktop.swingx.MultiSplitLayout$Node r0, r18, r19;
        org.jdesktop.swingx.MultiSplitLayout$Split r17;
        java.awt.Component $r13;
        java.util.List $r1;
        java.awt.Dimension $r3, $r6, $r9, $r11, $r12, $r14, $r16;
        java.lang.AssertionError $r15;
        org.jdesktop.swingx.MultiSplitLayout r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.util.Iterator $r2, $r7;
        org.jdesktop.swingx.MultiSplitLayout$Divider $r10;
        java.lang.Object $r4, $r8;

        r5 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        $z0 = <org.jdesktop.swingx.MultiSplitLayout: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z8 = staticinvoke <org.jdesktop.swingx.MultiSplitLayout$Node: boolean access$000(org.jdesktop.swingx.MultiSplitLayout$Node)>(r0);

        if $z8 != 0 goto label01;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label01:
        $z1 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Leaf;

        if $z1 == 0 goto label05;

        $i5 = r5.<org.jdesktop.swingx.MultiSplitLayout: int layoutMode>;

        if $i5 != 1 goto label02;

        $r14 = new java.awt.Dimension;

        specialinvoke $r14.<java.awt.Dimension: void <init>(int,int)>(0, 0);

        return $r14;

     label02:
        $r13 = specialinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Component childForNode(org.jdesktop.swingx.MultiSplitLayout$Node)>(r0);

        if $r13 == null goto label03;

        $z7 = virtualinvoke $r13.<java.awt.Component: boolean isVisible()>();

        if $z7 == 0 goto label03;

        $r16 = virtualinvoke $r13.<java.awt.Component: java.awt.Dimension getMinimumSize()>();

        goto label04;

     label03:
        $r16 = new java.awt.Dimension;

        specialinvoke $r16.<java.awt.Dimension: void <init>(int,int)>(0, 0);

     label04:
        return $r16;

     label05:
        $z2 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z2 == 0 goto label07;

        $r10 = (org.jdesktop.swingx.MultiSplitLayout$Divider) r0;

        $z6 = virtualinvoke $r10.<org.jdesktop.swingx.MultiSplitLayout$Divider: boolean isVisible()>();

        if $z6 != 0 goto label06;

        $r12 = new java.awt.Dimension;

        specialinvoke $r12.<java.awt.Dimension: void <init>(int,int)>(0, 0);

        return $r12;

     label06:
        $i4 = virtualinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: int getDividerSize()>();

        $r11 = new java.awt.Dimension;

        specialinvoke $r11.<java.awt.Dimension: void <init>(int,int)>($i4, $i4);

        return $r11;

     label07:
        r17 = (org.jdesktop.swingx.MultiSplitLayout$Split) r0;

        $r1 = virtualinvoke r17.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        i6 = 0;

        i7 = 0;

        $z3 = virtualinvoke r17.<org.jdesktop.swingx.MultiSplitLayout$Split: boolean isRowLayout()>();

        if $z3 == 0 goto label11;

        $r7 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z9 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label10;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r8;

        $z5 = virtualinvoke r18.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z5 != 0 goto label09;

        goto label08;

     label09:
        $r9 = virtualinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension minimumNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)>(r18);

        $i2 = $r9.<java.awt.Dimension: int width>;

        i6 = i6 + $i2;

        $i3 = $r9.<java.awt.Dimension: int height>;

        i7 = staticinvoke <java.lang.Math: int max(int,int)>(i7, $i3);

        goto label08;

     label10:
        goto label14;

     label11:
        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z10 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label14;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r4;

        $z4 = virtualinvoke r19.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z4 != 0 goto label13;

        goto label12;

     label13:
        $r6 = virtualinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension minimumNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)>(r19);

        $i0 = $r6.<java.awt.Dimension: int width>;

        i6 = staticinvoke <java.lang.Math: int max(int,int)>(i6, $i0);

        $i1 = $r6.<java.awt.Dimension: int height>;

        i7 = i7 + $i1;

        goto label12;

     label14:
        $r3 = new java.awt.Dimension;

        specialinvoke $r3.<java.awt.Dimension: void <init>(int,int)>(i6, i7);

        return $r3;
    }

    public java.awt.Dimension maximumNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.jdesktop.swingx.MultiSplitLayout$Node r0, r17, r18;
        org.jdesktop.swingx.MultiSplitLayout$Split r16;
        java.awt.Component $r13;
        java.util.List $r1;
        java.awt.Dimension $r3, $r6, $r9, $r11, $r12, $r15;
        java.lang.AssertionError $r14;
        org.jdesktop.swingx.MultiSplitLayout r5;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.util.Iterator $r2, $r7;
        org.jdesktop.swingx.MultiSplitLayout$Divider $r10;
        java.lang.Object $r4, $r8;

        r5 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        $z0 = <org.jdesktop.swingx.MultiSplitLayout: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z8 = staticinvoke <org.jdesktop.swingx.MultiSplitLayout$Node: boolean access$000(org.jdesktop.swingx.MultiSplitLayout$Node)>(r0);

        if $z8 != 0 goto label01;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label01:
        $z1 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Leaf;

        if $z1 == 0 goto label04;

        $r13 = specialinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Component childForNode(org.jdesktop.swingx.MultiSplitLayout$Node)>(r0);

        if $r13 == null goto label02;

        $z7 = virtualinvoke $r13.<java.awt.Component: boolean isVisible()>();

        if $z7 == 0 goto label02;

        $r15 = virtualinvoke $r13.<java.awt.Component: java.awt.Dimension getMaximumSize()>();

        goto label03;

     label02:
        $r15 = new java.awt.Dimension;

        specialinvoke $r15.<java.awt.Dimension: void <init>(int,int)>(0, 0);

     label03:
        return $r15;

     label04:
        $z2 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z2 == 0 goto label06;

        $r10 = (org.jdesktop.swingx.MultiSplitLayout$Divider) r0;

        $z6 = virtualinvoke $r10.<org.jdesktop.swingx.MultiSplitLayout$Divider: boolean isVisible()>();

        if $z6 != 0 goto label05;

        $r12 = new java.awt.Dimension;

        specialinvoke $r12.<java.awt.Dimension: void <init>(int,int)>(0, 0);

        return $r12;

     label05:
        $i4 = virtualinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: int getDividerSize()>();

        $r11 = new java.awt.Dimension;

        specialinvoke $r11.<java.awt.Dimension: void <init>(int,int)>($i4, $i4);

        return $r11;

     label06:
        r16 = (org.jdesktop.swingx.MultiSplitLayout$Split) r0;

        $r1 = virtualinvoke r16.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        i5 = 2147483647;

        i6 = 2147483647;

        $z3 = virtualinvoke r16.<org.jdesktop.swingx.MultiSplitLayout$Split: boolean isRowLayout()>();

        if $z3 == 0 goto label10;

        $r7 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z9 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label09;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r8;

        $z5 = virtualinvoke r17.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z5 != 0 goto label08;

        goto label07;

     label08:
        $r9 = virtualinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension maximumNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)>(r17);

        $i2 = $r9.<java.awt.Dimension: int width>;

        i5 = i5 + $i2;

        $i3 = $r9.<java.awt.Dimension: int height>;

        i6 = staticinvoke <java.lang.Math: int min(int,int)>(i6, $i3);

        goto label07;

     label09:
        goto label13;

     label10:
        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z10 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label13;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r4;

        $z4 = virtualinvoke r18.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z4 != 0 goto label12;

        goto label11;

     label12:
        $r6 = virtualinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension maximumNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)>(r18);

        $i0 = $r6.<java.awt.Dimension: int width>;

        i5 = staticinvoke <java.lang.Math: int min(int,int)>(i5, $i0);

        $i1 = $r6.<java.awt.Dimension: int height>;

        i6 = i6 + $i1;

        goto label11;

     label13:
        $r3 = new java.awt.Dimension;

        specialinvoke $r3.<java.awt.Dimension: void <init>(int,int)>(i5, i6);

        return $r3;
    }

    private java.awt.Dimension sizeWithInsets(java.awt.Container, java.awt.Dimension)
    {
        java.awt.Insets $r1;
        java.awt.Dimension r2, $r3;
        org.jdesktop.swingx.MultiSplitLayout r4;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, i9;
        java.awt.Container r0;

        r4 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: java.awt.Container;

        r2 := @parameter1: java.awt.Dimension;

        $r1 = virtualinvoke r0.<java.awt.Container: java.awt.Insets getInsets()>();

        $i1 = r2.<java.awt.Dimension: int width>;

        $i0 = $r1.<java.awt.Insets: int left>;

        $i3 = $i1 + $i0;

        $i2 = $r1.<java.awt.Insets: int right>;

        i4 = $i3 + $i2;

        $i6 = r2.<java.awt.Dimension: int height>;

        $i5 = $r1.<java.awt.Insets: int top>;

        $i8 = $i6 + $i5;

        $i7 = $r1.<java.awt.Insets: int bottom>;

        i9 = $i8 + $i7;

        $r3 = new java.awt.Dimension;

        specialinvoke $r3.<java.awt.Dimension: void <init>(int,int)>(i4, i9);

        return $r3;
    }

    public java.awt.Dimension preferredLayoutSize(java.awt.Container)
    {
        java.awt.Dimension $r2, $r4;
        org.jdesktop.swingx.MultiSplitLayout r0;
        org.jdesktop.swingx.MultiSplitLayout$Node $r1;
        java.awt.Container r3;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r3 := @parameter0: java.awt.Container;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node getModel()>();

        $r2 = specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension preferredNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)>($r1);

        $r4 = specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension sizeWithInsets(java.awt.Container,java.awt.Dimension)>(r3, $r2);

        return $r4;
    }

    public java.awt.Dimension minimumLayoutSize(java.awt.Container)
    {
        java.awt.Dimension $r2, $r4;
        org.jdesktop.swingx.MultiSplitLayout r0;
        org.jdesktop.swingx.MultiSplitLayout$Node $r1;
        java.awt.Container r3;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r3 := @parameter0: java.awt.Container;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node getModel()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension minimumNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)>($r1);

        $r4 = specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension sizeWithInsets(java.awt.Container,java.awt.Dimension)>(r3, $r2);

        return $r4;
    }

    private java.awt.Rectangle boundsWithYandHeight(java.awt.Rectangle, double, double)
    {
        java.awt.Rectangle $r0, r1;
        org.jdesktop.swingx.MultiSplitLayout r2;
        int $i0, $i1, $i2, $i3;
        double $d0, d1, $d2, d3;

        r2 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r1 := @parameter0: java.awt.Rectangle;

        d1 := @parameter1: double;

        d3 := @parameter2: double;

        $r0 = new java.awt.Rectangle;

        specialinvoke $r0.<java.awt.Rectangle: void <init>()>();

        $d0 = virtualinvoke r1.<java.awt.Rectangle: double getX()>();

        $i0 = (int) $d0;

        $i1 = (int) d1;

        $d2 = virtualinvoke r1.<java.awt.Rectangle: double getWidth()>();

        $i3 = (int) $d2;

        $i2 = (int) d3;

        virtualinvoke $r0.<java.awt.Rectangle: void setBounds(int,int,int,int)>($i0, $i1, $i3, $i2);

        return $r0;
    }

    private java.awt.Rectangle boundsWithXandWidth(java.awt.Rectangle, double, double)
    {
        java.awt.Rectangle $r0, r1;
        org.jdesktop.swingx.MultiSplitLayout r2;
        int $i0, $i1, $i2, $i3;
        double d0, $d1, d2, $d3;

        r2 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r1 := @parameter0: java.awt.Rectangle;

        d0 := @parameter1: double;

        d2 := @parameter2: double;

        $r0 = new java.awt.Rectangle;

        specialinvoke $r0.<java.awt.Rectangle: void <init>()>();

        $i0 = (int) d0;

        $d1 = virtualinvoke r1.<java.awt.Rectangle: double getY()>();

        $i1 = (int) $d1;

        $i2 = (int) d2;

        $d3 = virtualinvoke r1.<java.awt.Rectangle: double getHeight()>();

        $i3 = (int) $d3;

        virtualinvoke $r0.<java.awt.Rectangle: void setBounds(int,int,int,int)>($i0, $i1, $i2, $i3);

        return $r0;
    }

    private void minimizeSplitBounds(org.jdesktop.swingx.MultiSplitLayout$Split, java.awt.Rectangle)
    {
        java.awt.Rectangle r1, $r4, $r10;
        java.lang.AssertionError $r9;
        org.jdesktop.swingx.MultiSplitLayout r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, $i16;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.jdesktop.swingx.MultiSplitLayout$Split r2;
        org.jdesktop.swingx.MultiSplitLayout$Node $r8;
        java.util.List $r3;
        java.lang.Object $r7;

        r6 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r2 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Split;

        r1 := @parameter1: java.awt.Rectangle;

        $z0 = <org.jdesktop.swingx.MultiSplitLayout: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z4 = virtualinvoke r2.<org.jdesktop.swingx.MultiSplitLayout$Split: boolean isVisible()>();

        if $z4 != 0 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $r10 = new java.awt.Rectangle;

        $i1 = r1.<java.awt.Rectangle: int x>;

        $i0 = r1.<java.awt.Rectangle: int y>;

        specialinvoke $r10.<java.awt.Rectangle: void <init>(int,int,int,int)>($i1, $i0, 0, 0);

        $r3 = virtualinvoke r2.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        i12 = interfaceinvoke $r3.<java.util.List: int size()>();

     label2:
        $i16 = (int) -1;

        i12 = i12 + $i16;

        $r7 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i12);

        $r8 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r7;

        if i12 <= 0 goto label3;

        $z3 = virtualinvoke $r8.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z3 == 0 goto label2;

     label3:
        $z1 = virtualinvoke $r8.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z1 != 0 goto label4;

        return;

     label4:
        if i12 < 0 goto label6;

        $r4 = virtualinvoke $r8.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        $z2 = virtualinvoke r2.<org.jdesktop.swingx.MultiSplitLayout$Split: boolean isRowLayout()>();

        if $z2 == 0 goto label5;

        $i8 = $r4.<java.awt.Rectangle: int x>;

        $i7 = $r4.<java.awt.Rectangle: int width>;

        i13 = $i8 + $i7;

        $i10 = r1.<java.awt.Rectangle: int y>;

        $i9 = r1.<java.awt.Rectangle: int height>;

        $i11 = $i10 + $i9;

        virtualinvoke $r10.<java.awt.Rectangle: void add(int,int)>(i13, $i11);

        goto label6;

     label5:
        $i3 = $r4.<java.awt.Rectangle: int y>;

        $i2 = $r4.<java.awt.Rectangle: int height>;

        i14 = $i3 + $i2;

        $i5 = r1.<java.awt.Rectangle: int x>;

        $i4 = r1.<java.awt.Rectangle: int width>;

        $i6 = $i5 + $i4;

        virtualinvoke $r10.<java.awt.Rectangle: void add(int,int)>($i6, i14);

     label6:
        virtualinvoke r2.<org.jdesktop.swingx.MultiSplitLayout$Split: void setBounds(java.awt.Rectangle)>($r10);

        return;
    }

    private void layoutShrink(org.jdesktop.swingx.MultiSplitLayout$Split, java.awt.Rectangle)
    {
        byte $b1, $b4, $b5, $b13, $b16, $b17, $b28, $b34;
        org.jdesktop.swingx.MultiSplitLayout$Node r31, r32, r34, r35;
        java.util.ListIterator $r3;
        org.jdesktop.swingx.MultiSplitLayout$Split r0;
        int $i0, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i18, $i19, $i20, $i21, $i22, i23, i24, i25, i26, i27, i29, i30, i31, i32, i33, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42;
        java.lang.Object $r8, $r16, $r21, $r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z19, $z20, $z21, $z22, z23, $z24;
        java.util.List $r2, $r4, $r19;
        java.awt.Dimension $r15, $r18, $r27, $r30;
        java.awt.Rectangle $r1, r6, $r9, $r10, $r11, $r12, $r13, $r14, $r17, $r22, $r23, $r24, $r25, $r26, $r29, $r33, $r36;
        org.jdesktop.swingx.MultiSplitLayout r7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, d33, d34, d35, d36, $d37, d38, d39, $d40, d41, d42, d43, d44, $d45, d46, d47;
        java.util.Iterator $r5, $r20;

        r7 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Split;

        r6 := @parameter1: java.awt.Rectangle;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Split: java.awt.Rectangle getBounds()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.ListIterator listIterator()>();

        virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Split: org.jdesktop.swingx.MultiSplitLayout$Node lastWeightedChild()>();

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Split: boolean isRowLayout()>();

        if $z0 == 0 goto label22;

        i23 = 0;

        i24 = 0;

        i25 = 0;

        $r19 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $r20 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z17 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z17 == 0 goto label06;

        $r28 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r31 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r28;

        $z15 = virtualinvoke r31.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z15 != 0 goto label02;

        goto label01;

     label02:
        $r29 = virtualinvoke r31.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        i26 = $r29.<java.awt.Rectangle: int width>;

        i27 = 0;

        $i20 = r7.<org.jdesktop.swingx.MultiSplitLayout: int layoutMode>;

        if $i20 != 2 goto label03;

        $z16 = r31 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z16 != 0 goto label03;

        i27 = r7.<org.jdesktop.swingx.MultiSplitLayout: int userMinSize>;

        goto label04;

     label03:
        $i21 = r7.<org.jdesktop.swingx.MultiSplitLayout: int layoutMode>;

        if $i21 != 0 goto label04;

        $r30 = virtualinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension minimumNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)>(r31);

        $i22 = $r30.<java.awt.Dimension: int width>;

        i27 = staticinvoke <java.lang.Math: int min(int,int)>(i26, $i22);

     label04:
        i23 = i23 + i26;

        $d32 = virtualinvoke r31.<org.jdesktop.swingx.MultiSplitLayout$Node: double getWeight()>();

        $b28 = $d32 cmpl 0.0;

        $i35 = (int) $b28;

        if $i35 <= 0 goto label05;

        i24 = i24 + i27;

        i25 = i25 + i26;

     label05:
        goto label01;

     label06:
        d33 = virtualinvoke r6.<java.awt.Rectangle: double getX()>();

        $d17 = virtualinvoke $r1.<java.awt.Rectangle: double getWidth()>();

        $d18 = virtualinvoke r6.<java.awt.Rectangle: double getWidth()>();

        d34 = $d17 - $d18;

        d35 = d34;

        $i12 = i25 - i24;

        $d19 = (double) $i12;

        $b13 = $d19 cmpl d34;

        $i36 = (int) $b13;

        if $i36 <= 0 goto label07;

        $z18 = 1;

        goto label08;

     label07:
        $z18 = 0;

     label08:
        z19 = $z18;

     label09:
        $z20 = interfaceinvoke $r3.<java.util.ListIterator: boolean hasNext()>();

        if $z20 == 0 goto label21;

        $r21 = interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object next()>();

        r32 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r21;

        $z9 = virtualinvoke r32.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z9 != 0 goto label10;

        $z14 = interfaceinvoke $r3.<java.util.ListIterator: boolean hasNext()>();

        if $z14 == 0 goto label09;

        interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object next()>();

        goto label09;

     label10:
        $r22 = virtualinvoke r32.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        d36 = 0.0;

        $i14 = r7.<org.jdesktop.swingx.MultiSplitLayout: int layoutMode>;

        if $i14 != 2 goto label11;

        $z13 = r32 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z13 != 0 goto label11;

        $i19 = r7.<org.jdesktop.swingx.MultiSplitLayout: int userMinSize>;

        d36 = (double) $i19;

        goto label12;

     label11:
        $i15 = r7.<org.jdesktop.swingx.MultiSplitLayout: int layoutMode>;

        if $i15 != 0 goto label12;

        $r27 = virtualinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension minimumNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)>(r32);

        d36 = virtualinvoke $r27.<java.awt.Dimension: double getWidth()>();

     label12:
        if z19 == 0 goto label13;

        $d37 = virtualinvoke r32.<org.jdesktop.swingx.MultiSplitLayout$Node: double getWeight()>();

        goto label14;

     label13:
        $d20 = virtualinvoke $r22.<java.awt.Rectangle: double getWidth()>();

        $d21 = (double) i23;

        $d37 = $d20 / $d21;

     label14:
        d38 = $d37;

        $z10 = interfaceinvoke $r3.<java.util.ListIterator: boolean hasNext()>();

        if $z10 != 0 goto label15;

        $d29 = virtualinvoke r6.<java.awt.Rectangle: double getMaxX()>();

        $d30 = $d29 - d33;

        $d31 = staticinvoke <java.lang.Math: double max(double,double)>(d36, $d30);

        $r26 = specialinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Rectangle boundsWithXandWidth(java.awt.Rectangle,double,double)>(r6, d33, $d31);

        specialinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: void layout2(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r32, $r26);

     label15:
        $z11 = virtualinvoke r32.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z11 == 0 goto label20;

        $b16 = d35 cmpl 0.0;

        $i37 = (int) $b16;

        if $i37 <= 0 goto label18;

        $b17 = d38 cmpl 0.0;

        $i38 = (int) $b17;

        if $i38 <= 0 goto label18;

        $d23 = virtualinvoke $r22.<java.awt.Rectangle: double getWidth()>();

        $z12 = r32 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z12 == 0 goto label16;

        $i18 = r7.<org.jdesktop.swingx.MultiSplitLayout: int dividerSize>;

        d39 = (double) $i18;

        goto label17;

     label16:
        $d24 = d38 * d34;

        $d25 = staticinvoke <java.lang.Math: double rint(double)>($d24);

        $d26 = $d23 - $d25;

        d39 = staticinvoke <java.lang.Math: double max(double,double)>(d36, $d26);

     label17:
        $r24 = specialinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Rectangle boundsWithXandWidth(java.awt.Rectangle,double,double)>(r6, d33, d39);

        specialinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: void layout2(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r32, $r24);

        $r25 = virtualinvoke r32.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        $d27 = virtualinvoke $r25.<java.awt.Rectangle: double getWidth()>();

        $d28 = $d23 - $d27;

        d35 = d35 - $d28;

        goto label19;

     label18:
        $d22 = virtualinvoke $r22.<java.awt.Rectangle: double getWidth()>();

        $r23 = specialinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Rectangle boundsWithXandWidth(java.awt.Rectangle,double,double)>(r6, d33, $d22);

        specialinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: void layout2(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r32, $r23);

     label19:
        $r33 = virtualinvoke r32.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        d33 = virtualinvoke $r33.<java.awt.Rectangle: double getMaxX()>();

     label20:
        goto label09;

     label21:
        goto label44;

     label22:
        i29 = 0;

        i30 = 0;

        i31 = 0;

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label23:
        $z21 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z21 == 0 goto label28;

        $r16 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r34 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r16;

        $z7 = virtualinvoke r34.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z7 != 0 goto label24;

        goto label23;

     label24:
        $r17 = virtualinvoke r34.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        i32 = $r17.<java.awt.Rectangle: int height>;

        i33 = 0;

        $i9 = r7.<org.jdesktop.swingx.MultiSplitLayout: int layoutMode>;

        if $i9 != 2 goto label25;

        $z8 = r34 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z8 != 0 goto label25;

        i33 = r7.<org.jdesktop.swingx.MultiSplitLayout: int userMinSize>;

        goto label26;

     label25:
        $i10 = r7.<org.jdesktop.swingx.MultiSplitLayout: int layoutMode>;

        if $i10 != 0 goto label26;

        $r18 = virtualinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension minimumNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)>(r34);

        $i11 = $r18.<java.awt.Dimension: int height>;

        i33 = staticinvoke <java.lang.Math: int min(int,int)>(i32, $i11);

     label26:
        i29 = i29 + i32;

        $d40 = virtualinvoke r34.<org.jdesktop.swingx.MultiSplitLayout$Node: double getWeight()>();

        $b34 = $d40 cmpl 0.0;

        $i39 = (int) $b34;

        if $i39 <= 0 goto label27;

        i30 = i30 + i33;

        i31 = i31 + i32;

     label27:
        goto label23;

     label28:
        d41 = virtualinvoke r6.<java.awt.Rectangle: double getY()>();

        $d0 = virtualinvoke $r1.<java.awt.Rectangle: double getHeight()>();

        $d1 = virtualinvoke r6.<java.awt.Rectangle: double getHeight()>();

        d42 = $d0 - $d1;

        d43 = d42;

        $i0 = i31 - i30;

        $d2 = (double) $i0;

        $b1 = $d2 cmpl d42;

        $i40 = (int) $b1;

        if $i40 <= 0 goto label29;

        $z22 = 1;

        goto label30;

     label29:
        $z22 = 0;

     label30:
        z23 = $z22;

     label31:
        $z24 = interfaceinvoke $r3.<java.util.ListIterator: boolean hasNext()>();

        if $z24 == 0 goto label44;

        $r8 = interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object next()>();

        r35 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r8;

        $z1 = virtualinvoke r35.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z1 != 0 goto label32;

        $z6 = interfaceinvoke $r3.<java.util.ListIterator: boolean hasNext()>();

        if $z6 == 0 goto label31;

        interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object next()>();

        goto label31;

     label32:
        $r9 = virtualinvoke r35.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        d44 = 0.0;

        $i2 = r7.<org.jdesktop.swingx.MultiSplitLayout: int layoutMode>;

        if $i2 != 2 goto label33;

        $z5 = r35 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z5 != 0 goto label33;

        $i8 = r7.<org.jdesktop.swingx.MultiSplitLayout: int userMinSize>;

        d44 = (double) $i8;

        goto label34;

     label33:
        $i3 = r7.<org.jdesktop.swingx.MultiSplitLayout: int layoutMode>;

        if $i3 != 0 goto label34;

        $r15 = virtualinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension minimumNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)>(r35);

        d44 = virtualinvoke $r15.<java.awt.Dimension: double getHeight()>();

     label34:
        if z23 == 0 goto label35;

        $d45 = virtualinvoke r35.<org.jdesktop.swingx.MultiSplitLayout$Node: double getWeight()>();

        goto label36;

     label35:
        $d3 = virtualinvoke $r9.<java.awt.Rectangle: double getHeight()>();

        $d4 = (double) i29;

        $d45 = $d3 / $d4;

     label36:
        $z2 = specialinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: boolean hasMoreVisibleSiblings(org.jdesktop.swingx.MultiSplitLayout$Node)>(r35);

        if $z2 != 0 goto label39;

        $d12 = virtualinvoke $r9.<java.awt.Rectangle: double getHeight()>();

        $z4 = r35 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z4 == 0 goto label37;

        $i7 = r7.<org.jdesktop.swingx.MultiSplitLayout: int dividerSize>;

        d46 = (double) $i7;

        goto label38;

     label37:
        $d13 = virtualinvoke r6.<java.awt.Rectangle: double getMaxY()>();

        $d14 = $d13 - d41;

        d46 = staticinvoke <java.lang.Math: double max(double,double)>(d44, $d14);

     label38:
        $r13 = specialinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Rectangle boundsWithYandHeight(java.awt.Rectangle,double,double)>(r6, d41, d46);

        specialinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: void layout2(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r35, $r13);

        $r14 = virtualinvoke r35.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        $d15 = virtualinvoke $r14.<java.awt.Rectangle: double getHeight()>();

        $d16 = $d12 - $d15;

        d43 = d43 - $d16;

        goto label43;

     label39:
        $b4 = d43 cmpl 0.0;

        $i41 = (int) $b4;

        if $i41 <= 0 goto label42;

        $b5 = $d45 cmpl 0.0;

        $i42 = (int) $b5;

        if $i42 <= 0 goto label42;

        $d6 = virtualinvoke $r9.<java.awt.Rectangle: double getHeight()>();

        $z3 = r35 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z3 == 0 goto label40;

        $i6 = r7.<org.jdesktop.swingx.MultiSplitLayout: int dividerSize>;

        d47 = (double) $i6;

        goto label41;

     label40:
        $d7 = $d45 * d42;

        $d8 = staticinvoke <java.lang.Math: double rint(double)>($d7);

        $d9 = $d6 - $d8;

        d47 = staticinvoke <java.lang.Math: double max(double,double)>(d44, $d9);

     label41:
        $r11 = specialinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Rectangle boundsWithYandHeight(java.awt.Rectangle,double,double)>(r6, d41, d47);

        specialinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: void layout2(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r35, $r11);

        $r12 = virtualinvoke r35.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        $d10 = virtualinvoke $r12.<java.awt.Rectangle: double getHeight()>();

        $d11 = $d6 - $d10;

        d43 = d43 - $d11;

        goto label43;

     label42:
        $d5 = virtualinvoke $r9.<java.awt.Rectangle: double getHeight()>();

        $r10 = specialinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Rectangle boundsWithYandHeight(java.awt.Rectangle,double,double)>(r6, d41, $d5);

        specialinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: void layout2(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r35, $r10);

     label43:
        $r36 = virtualinvoke r35.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        d41 = virtualinvoke $r36.<java.awt.Rectangle: double getMaxY()>();

        goto label31;

     label44:
        specialinvoke r7.<org.jdesktop.swingx.MultiSplitLayout: void minimizeSplitBounds(org.jdesktop.swingx.MultiSplitLayout$Split,java.awt.Rectangle)>(r0, r6);

        return;
    }

    private boolean hasMoreVisibleSiblings(org.jdesktop.swingx.MultiSplitLayout$Node)
    {
        org.jdesktop.swingx.MultiSplitLayout r3;
        org.jdesktop.swingx.MultiSplitLayout$Node r0, $r1, $r2, r4;
        boolean $z0;

        r3 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Node: org.jdesktop.swingx.MultiSplitLayout$Node nextSibling()>();

        r4 = $r1;

        if $r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r4.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r2 = virtualinvoke r4.<org.jdesktop.swingx.MultiSplitLayout$Node: org.jdesktop.swingx.MultiSplitLayout$Node nextSibling()>();

        r4 = $r2;

        if $r2 != null goto label1;

        return 0;
    }

    private void layoutGrow(org.jdesktop.swingx.MultiSplitLayout$Split, java.awt.Rectangle)
    {
        byte $b0, $b1, $b2, $b3;
        org.jdesktop.swingx.MultiSplitLayout$Node $r4, r17, r19;
        java.util.ListIterator $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.jdesktop.swingx.MultiSplitLayout$Split r0;
        java.util.List $r2;
        java.awt.Rectangle $r1, r5, $r7, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r18, $r20;
        org.jdesktop.swingx.MultiSplitLayout r8;
        int $i4, $i5, $i6, $i7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16, d17, d18, d19, $d20, d21, d22, d23, d24, $d25;
        java.lang.Object $r6, $r12;

        r8 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Split;

        r5 := @parameter1: java.awt.Rectangle;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Split: java.awt.Rectangle getBounds()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.ListIterator listIterator()>();

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Split: org.jdesktop.swingx.MultiSplitLayout$Node lastWeightedChild()>();

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Split: boolean isRowLayout()>();

        if $z0 == 0 goto label09;

        d16 = virtualinvoke r5.<java.awt.Rectangle: double getX()>();

        $d8 = virtualinvoke r5.<java.awt.Rectangle: double getWidth()>();

        $d9 = virtualinvoke $r1.<java.awt.Rectangle: double getWidth()>();

        d17 = $d8 - $d9;

        d18 = d17;

     label01:
        $z7 = interfaceinvoke $r3.<java.util.ListIterator: boolean hasNext()>();

        if $z7 == 0 goto label08;

        $r12 = interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object next()>();

        r17 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r12;

        $z4 = virtualinvoke r17.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z4 != 0 goto label02;

        goto label01;

     label02:
        $r13 = virtualinvoke r17.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        $d10 = virtualinvoke r17.<org.jdesktop.swingx.MultiSplitLayout$Node: double getWeight()>();

        $z5 = specialinvoke r8.<org.jdesktop.swingx.MultiSplitLayout: boolean hasMoreVisibleSiblings(org.jdesktop.swingx.MultiSplitLayout$Node)>(r17);

        if $z5 != 0 goto label03;

        $d15 = virtualinvoke r5.<java.awt.Rectangle: double getMaxX()>();

        d19 = $d15 - d16;

        $r16 = specialinvoke r8.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Rectangle boundsWithXandWidth(java.awt.Rectangle,double,double)>(r5, d16, d19);

        specialinvoke r8.<org.jdesktop.swingx.MultiSplitLayout: void layout2(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r17, $r16);

        goto label07;

     label03:
        $b2 = d18 cmpl 0.0;

        $i4 = (int) $b2;

        if $i4 <= 0 goto label06;

        $b3 = $d10 cmpl 0.0;

        $i5 = (int) $b3;

        if $i5 <= 0 goto label06;

        $z6 = virtualinvoke r17.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z6 == 0 goto label04;

        $d20 = d18;

        goto label05;

     label04:
        $d12 = $d10 * d17;

        $d20 = staticinvoke <java.lang.Math: double rint(double)>($d12);

     label05:
        $d13 = virtualinvoke $r13.<java.awt.Rectangle: double getWidth()>();

        $d14 = $d13 + $d20;

        $r15 = specialinvoke r8.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Rectangle boundsWithXandWidth(java.awt.Rectangle,double,double)>(r5, d16, $d14);

        specialinvoke r8.<org.jdesktop.swingx.MultiSplitLayout: void layout2(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r17, $r15);

        d18 = d18 - $d20;

        goto label07;

     label06:
        $d11 = virtualinvoke $r13.<java.awt.Rectangle: double getWidth()>();

        $r14 = specialinvoke r8.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Rectangle boundsWithXandWidth(java.awt.Rectangle,double,double)>(r5, d16, $d11);

        specialinvoke r8.<org.jdesktop.swingx.MultiSplitLayout: void layout2(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r17, $r14);

     label07:
        $r18 = virtualinvoke r17.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        d16 = virtualinvoke $r18.<java.awt.Rectangle: double getMaxX()>();

        goto label01;

     label08:
        goto label17;

     label09:
        d21 = virtualinvoke r5.<java.awt.Rectangle: double getY()>();

        $d0 = virtualinvoke r5.<java.awt.Rectangle: double getHeight()>();

        $d1 = virtualinvoke $r1.<java.awt.Rectangle: double getHeight()>();

        d22 = $d0 - $d1;

        d23 = d22;

     label10:
        $z8 = interfaceinvoke $r3.<java.util.ListIterator: boolean hasNext()>();

        if $z8 == 0 goto label17;

        $r6 = interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object next()>();

        r19 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r6;

        $z1 = virtualinvoke r19.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z1 != 0 goto label11;

        goto label10;

     label11:
        $r7 = virtualinvoke r19.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        $d2 = virtualinvoke r19.<org.jdesktop.swingx.MultiSplitLayout$Node: double getWeight()>();

        $z2 = interfaceinvoke $r3.<java.util.ListIterator: boolean hasNext()>();

        if $z2 != 0 goto label12;

        $d7 = virtualinvoke r5.<java.awt.Rectangle: double getMaxY()>();

        d24 = $d7 - d21;

        $r11 = specialinvoke r8.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Rectangle boundsWithYandHeight(java.awt.Rectangle,double,double)>(r5, d21, d24);

        specialinvoke r8.<org.jdesktop.swingx.MultiSplitLayout: void layout2(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r19, $r11);

        goto label16;

     label12:
        $b0 = d23 cmpl 0.0;

        $i6 = (int) $b0;

        if $i6 <= 0 goto label15;

        $b1 = $d2 cmpl 0.0;

        $i7 = (int) $b1;

        if $i7 <= 0 goto label15;

        $z3 = virtualinvoke r19.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z3 == 0 goto label13;

        $d25 = d23;

        goto label14;

     label13:
        $d4 = $d2 * d22;

        $d25 = staticinvoke <java.lang.Math: double rint(double)>($d4);

     label14:
        $d5 = virtualinvoke $r7.<java.awt.Rectangle: double getHeight()>();

        $d6 = $d5 + $d25;

        $r10 = specialinvoke r8.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Rectangle boundsWithYandHeight(java.awt.Rectangle,double,double)>(r5, d21, $d6);

        specialinvoke r8.<org.jdesktop.swingx.MultiSplitLayout: void layout2(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r19, $r10);

        d23 = d23 - $d25;

        goto label16;

     label15:
        $d3 = virtualinvoke $r7.<java.awt.Rectangle: double getHeight()>();

        $r9 = specialinvoke r8.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Rectangle boundsWithYandHeight(java.awt.Rectangle,double,double)>(r5, d21, $d3);

        specialinvoke r8.<org.jdesktop.swingx.MultiSplitLayout: void layout2(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r19, $r9);

     label16:
        $r20 = virtualinvoke r19.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        d21 = virtualinvoke $r20.<java.awt.Rectangle: double getMaxY()>();

        goto label10;

     label17:
        return;
    }

    private void layout2(org.jdesktop.swingx.MultiSplitLayout$Node, java.awt.Rectangle)
    {
        java.awt.Rectangle $r1, r2, $r4;
        org.jdesktop.swingx.MultiSplitLayout r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.jdesktop.swingx.MultiSplitLayout$Node r0;
        org.jdesktop.swingx.MultiSplitLayout$Split r6;
        java.awt.Component $r5;

        r3 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        r2 := @parameter1: java.awt.Rectangle;

        $z0 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Leaf;

        if $z0 == 0 goto label2;

        $r5 = specialinvoke r3.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Component childForNode(org.jdesktop.swingx.MultiSplitLayout$Node)>(r0);

        if $r5 == null goto label1;

        virtualinvoke $r5.<java.awt.Component: void setBounds(java.awt.Rectangle)>(r2);

     label1:
        virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Node: void setBounds(java.awt.Rectangle)>(r2);

        goto label9;

     label2:
        $z1 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Node: void setBounds(java.awt.Rectangle)>(r2);

        goto label9;

     label3:
        $z2 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Split;

        if $z2 == 0 goto label9;

        r6 = (org.jdesktop.swingx.MultiSplitLayout$Split) r0;

        $z3 = virtualinvoke r6.<org.jdesktop.swingx.MultiSplitLayout$Split: boolean isRowLayout()>();

        if $z3 == 0 goto label5;

        $r4 = virtualinvoke r6.<org.jdesktop.swingx.MultiSplitLayout$Split: java.awt.Rectangle getBounds()>();

        $i3 = $r4.<java.awt.Rectangle: int width>;

        $i2 = r2.<java.awt.Rectangle: int width>;

        if $i3 > $i2 goto label4;

        $z4 = 1;

        goto label7;

     label4:
        $z4 = 0;

        goto label7;

     label5:
        $r1 = virtualinvoke r6.<org.jdesktop.swingx.MultiSplitLayout$Split: java.awt.Rectangle getBounds()>();

        $i1 = $r1.<java.awt.Rectangle: int height>;

        $i0 = r2.<java.awt.Rectangle: int height>;

        if $i1 > $i0 goto label6;

        $z4 = 1;

        goto label7;

     label6:
        $z4 = 0;

     label7:
        if $z4 == 0 goto label8;

        specialinvoke r3.<org.jdesktop.swingx.MultiSplitLayout: void layoutGrow(org.jdesktop.swingx.MultiSplitLayout$Split,java.awt.Rectangle)>(r6, r2);

        virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Node: void setBounds(java.awt.Rectangle)>(r2);

        goto label9;

     label8:
        specialinvoke r3.<org.jdesktop.swingx.MultiSplitLayout: void layoutShrink(org.jdesktop.swingx.MultiSplitLayout$Split,java.awt.Rectangle)>(r6, r2);

     label9:
        return;
    }

    private void layout1(org.jdesktop.swingx.MultiSplitLayout$Node, java.awt.Rectangle)
    {
        byte $b1, $b2;
        org.jdesktop.swingx.MultiSplitLayout$Node r0, r24, r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z19, $z20, $z21, z22, z23;
        org.jdesktop.swingx.MultiSplitLayout$Split r1;
        java.util.List $r2;
        java.awt.Dimension $r11, $r12, $r20, $r21;
        java.awt.Rectangle r5, $r7, $r8, $r9, $r10, $r16, $r17, $r18, $r19, $r27, $r31;
        org.jdesktop.swingx.MultiSplitLayout r4;
        int $i0, $i3, $i4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d10, d11, d12, d13;
        java.util.Iterator $r3;
        org.jdesktop.swingx.MultiSplitLayout$Divider $r14, $r23, $r25, r26, $r29, r30;
        java.lang.Object $r6, $r13, $r15, $r22;

        r4 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        r5 := @parameter1: java.awt.Rectangle;

        $z0 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Leaf;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Node: void setBounds(java.awt.Rectangle)>(r5);

        goto label29;

     label01:
        $z1 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Split;

        if $z1 == 0 goto label29;

        r1 = (org.jdesktop.swingx.MultiSplitLayout$Split) r0;

        $r2 = virtualinvoke r1.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        $i0 = virtualinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: int getDividerSize()>();

        z19 = 0;

        z23 = 0;

        z22 = 0;

        $z2 = virtualinvoke r1.<org.jdesktop.swingx.MultiSplitLayout$Split: boolean isRowLayout()>();

        if $z2 == 0 goto label15;

        d8 = virtualinvoke r5.<java.awt.Rectangle: double getX()>();

     label02:
        $z20 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z20 == 0 goto label14;

        $r15 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r24 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r15;

        $z11 = virtualinvoke r24.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z11 != 0 goto label03;

        $z18 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z18 == 0 goto label02;

        interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        goto label02;

     label03:
        $z12 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label04;

        $r22 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r23 = (org.jdesktop.swingx.MultiSplitLayout$Divider) $r22;

        $r25 = (org.jdesktop.swingx.MultiSplitLayout$Divider) $r23;

        goto label05;

     label04:
        $r25 = null;

     label05:
        r26 = $r25;

        $z13 = virtualinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: boolean getFloatingDividers()>();

        if $z13 == 0 goto label06;

        $r21 = specialinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension preferredNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)>(r24);

        d9 = virtualinvoke $r21.<java.awt.Dimension: double getWidth()>();

        goto label10;

     label06:
        if $r25 == null goto label09;

        $z17 = virtualinvoke $r25.<org.jdesktop.swingx.MultiSplitLayout$Divider: boolean isVisible()>();

        if $z17 == 0 goto label09;

        $r19 = virtualinvoke $r25.<org.jdesktop.swingx.MultiSplitLayout$Divider: java.awt.Rectangle getBounds()>();

        $d7 = virtualinvoke $r19.<java.awt.Rectangle: double getX()>();

        d10 = $d7 - d8;

        $b2 = d10 cmpl 0.0;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label07;

        d9 = d10;

        goto label08;

     label07:
        $r20 = specialinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension preferredNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)>(r24);

        d9 = virtualinvoke $r20.<java.awt.Dimension: double getWidth()>();

        z19 = 1;

        z22 = 1;

     label08:
        goto label10;

     label09:
        $r16 = virtualinvoke r1.<org.jdesktop.swingx.MultiSplitLayout$Split: java.awt.Rectangle getBounds()>();

        $d4 = virtualinvoke $r16.<java.awt.Rectangle: double getMaxX()>();

        d9 = $d4 - d8;

     label10:
        $r27 = specialinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Rectangle boundsWithXandWidth(java.awt.Rectangle,double,double)>(r5, d8, d9);

        specialinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: void layout1(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r24, $r27);

        if z22 != 0 goto label11;

        $z16 = virtualinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: boolean getFloatingDividers()>();

        if $z16 == 0 goto label12;

     label11:
        if r26 == null goto label12;

        $z15 = virtualinvoke r26.<org.jdesktop.swingx.MultiSplitLayout$Divider: boolean isVisible()>();

        if $z15 == 0 goto label12;

        $d5 = virtualinvoke $r27.<java.awt.Rectangle: double getMaxX()>();

        $d6 = (double) $i0;

        $r18 = specialinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Rectangle boundsWithXandWidth(java.awt.Rectangle,double,double)>(r5, $d5, $d6);

        virtualinvoke r26.<org.jdesktop.swingx.MultiSplitLayout$Divider: void setBounds(java.awt.Rectangle)>($r18);

     label12:
        if r26 == null goto label13;

        $z14 = virtualinvoke r26.<org.jdesktop.swingx.MultiSplitLayout$Divider: boolean isVisible()>();

        if $z14 == 0 goto label13;

        $r17 = virtualinvoke r26.<org.jdesktop.swingx.MultiSplitLayout$Divider: java.awt.Rectangle getBounds()>();

        d8 = virtualinvoke $r17.<java.awt.Rectangle: double getMaxX()>();

     label13:
        goto label02;

     label14:
        goto label28;

     label15:
        d11 = virtualinvoke r5.<java.awt.Rectangle: double getY()>();

     label16:
        $z21 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z21 == 0 goto label28;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r28 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r6;

        $z3 = virtualinvoke r28.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z3 != 0 goto label17;

        $z10 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label16;

        interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        goto label16;

     label17:
        $z4 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label18;

        $r13 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (org.jdesktop.swingx.MultiSplitLayout$Divider) $r13;

        $r29 = (org.jdesktop.swingx.MultiSplitLayout$Divider) $r14;

        goto label19;

     label18:
        $r29 = null;

     label19:
        r30 = $r29;

        $z5 = virtualinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: boolean getFloatingDividers()>();

        if $z5 == 0 goto label20;

        $r12 = specialinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension preferredNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)>(r28);

        d12 = virtualinvoke $r12.<java.awt.Dimension: double getHeight()>();

        goto label24;

     label20:
        if $r29 == null goto label23;

        $z9 = virtualinvoke $r29.<org.jdesktop.swingx.MultiSplitLayout$Divider: boolean isVisible()>();

        if $z9 == 0 goto label23;

        $r10 = virtualinvoke $r29.<org.jdesktop.swingx.MultiSplitLayout$Divider: java.awt.Rectangle getBounds()>();

        $d3 = virtualinvoke $r10.<java.awt.Rectangle: double getY()>();

        d13 = $d3 - d11;

        $b1 = d13 cmpl 0.0;

        $i4 = (int) $b1;

        if $i4 <= 0 goto label21;

        d12 = d13;

        goto label22;

     label21:
        $r11 = specialinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Dimension preferredNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)>(r28);

        d12 = virtualinvoke $r11.<java.awt.Dimension: double getHeight()>();

        z19 = 1;

        z23 = 1;

     label22:
        goto label24;

     label23:
        $r7 = virtualinvoke r1.<org.jdesktop.swingx.MultiSplitLayout$Split: java.awt.Rectangle getBounds()>();

        $d0 = virtualinvoke $r7.<java.awt.Rectangle: double getMaxY()>();

        d12 = $d0 - d11;

     label24:
        $r31 = specialinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Rectangle boundsWithYandHeight(java.awt.Rectangle,double,double)>(r5, d11, d12);

        specialinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: void layout1(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r28, $r31);

        if z23 != 0 goto label25;

        $z8 = virtualinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: boolean getFloatingDividers()>();

        if $z8 == 0 goto label26;

     label25:
        if r30 == null goto label26;

        $z7 = virtualinvoke r30.<org.jdesktop.swingx.MultiSplitLayout$Divider: boolean isVisible()>();

        if $z7 == 0 goto label26;

        $d1 = virtualinvoke $r31.<java.awt.Rectangle: double getMaxY()>();

        $d2 = (double) $i0;

        $r9 = specialinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: java.awt.Rectangle boundsWithYandHeight(java.awt.Rectangle,double,double)>(r5, $d1, $d2);

        virtualinvoke r30.<org.jdesktop.swingx.MultiSplitLayout$Divider: void setBounds(java.awt.Rectangle)>($r9);

     label26:
        if r30 == null goto label27;

        $z6 = virtualinvoke r30.<org.jdesktop.swingx.MultiSplitLayout$Divider: boolean isVisible()>();

        if $z6 == 0 goto label27;

        $r8 = virtualinvoke r30.<org.jdesktop.swingx.MultiSplitLayout$Divider: java.awt.Rectangle getBounds()>();

        d11 = virtualinvoke $r8.<java.awt.Rectangle: double getMaxY()>();

     label27:
        goto label16;

     label28:
        specialinvoke r4.<org.jdesktop.swingx.MultiSplitLayout: void minimizeSplitBounds(org.jdesktop.swingx.MultiSplitLayout$Split,java.awt.Rectangle)>(r1, r5);

     label29:
        return;
    }

    public int getLayoutMode()
    {
        int $i0;
        org.jdesktop.swingx.MultiSplitLayout r0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        $i0 = r0.<org.jdesktop.swingx.MultiSplitLayout: int layoutMode>;

        return $i0;
    }

    public void setLayoutMode(int)
    {
        int i0;
        org.jdesktop.swingx.MultiSplitLayout r0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        i0 := @parameter0: int;

        r0.<org.jdesktop.swingx.MultiSplitLayout: int layoutMode> = i0;

        return;
    }

    public int getUserMinSize()
    {
        int $i0;
        org.jdesktop.swingx.MultiSplitLayout r0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        $i0 = r0.<org.jdesktop.swingx.MultiSplitLayout: int userMinSize>;

        return $i0;
    }

    public void setUserMinSize(int)
    {
        int i0;
        org.jdesktop.swingx.MultiSplitLayout r0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        i0 := @parameter0: int;

        r0.<org.jdesktop.swingx.MultiSplitLayout: int userMinSize> = i0;

        return;
    }

    public boolean getLayoutByWeight()
    {
        org.jdesktop.swingx.MultiSplitLayout r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        $z0 = r0.<org.jdesktop.swingx.MultiSplitLayout: boolean layoutByWeight>;

        return $z0;
    }

    public void setLayoutByWeight(boolean)
    {
        org.jdesktop.swingx.MultiSplitLayout r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        z0 := @parameter0: boolean;

        r0.<org.jdesktop.swingx.MultiSplitLayout: boolean layoutByWeight> = z0;

        return;
    }

    private void throwInvalidLayout(java.lang.String, org.jdesktop.swingx.MultiSplitLayout$Node)
    {
        org.jdesktop.swingx.MultiSplitLayout r3;
        org.jdesktop.swingx.MultiSplitLayout$Node r2;
        java.lang.String r1;
        org.jdesktop.swingx.MultiSplitLayout$InvalidLayoutException $r0;

        r3 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.jdesktop.swingx.MultiSplitLayout$Node;

        $r0 = new org.jdesktop.swingx.MultiSplitLayout$InvalidLayoutException;

        specialinvoke $r0.<org.jdesktop.swingx.MultiSplitLayout$InvalidLayoutException: void <init>(java.lang.String,org.jdesktop.swingx.MultiSplitLayout$Node)>(r1, r2);

        throw $r0;
    }

    private void checkLayout(org.jdesktop.swingx.MultiSplitLayout$Node)
    {
        byte $b1;
        org.jdesktop.swingx.MultiSplitLayout r5;
        int $i0, $i2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        double d0, $d1;
        java.util.Iterator $r4;
        org.jdesktop.swingx.MultiSplitLayout$Node r0, r7, r9;
        org.jdesktop.swingx.MultiSplitLayout$Split r1;
        java.util.List $r2, $r3;
        java.lang.Object $r6, $r8;

        r5 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        $z0 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Split;

        if $z0 == 0 goto label7;

        r1 = (org.jdesktop.swingx.MultiSplitLayout$Split) r0;

        $r2 = virtualinvoke r1.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 > 2 goto label1;

        specialinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: void throwInvalidLayout(java.lang.String,org.jdesktop.swingx.MultiSplitLayout$Node)>("Split must have > 2 children", r0);

     label1:
        $r3 = virtualinvoke r1.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        d0 = 0.0;

     label2:
        $z6 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label6;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r6;

        $z1 = virtualinvoke r7.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z1 != 0 goto label3;

        $z5 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label2;

        interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        goto label2;

     label3:
        $z2 = r7 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z2 == 0 goto label4;

        goto label2;

     label4:
        $z3 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r8;

        $z4 = r9 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z4 != 0 goto label5;

        specialinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: void throwInvalidLayout(java.lang.String,org.jdesktop.swingx.MultiSplitLayout$Node)>("expected a Divider Node", r9);

     label5:
        $d1 = virtualinvoke r7.<org.jdesktop.swingx.MultiSplitLayout$Node: double getWeight()>();

        d0 = d0 + $d1;

        specialinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: void checkLayout(org.jdesktop.swingx.MultiSplitLayout$Node)>(r7);

        goto label2;

     label6:
        $b1 = d0 cmpl 1.0;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label7;

        specialinvoke r5.<org.jdesktop.swingx.MultiSplitLayout: void throwInvalidLayout(java.lang.String,org.jdesktop.swingx.MultiSplitLayout$Node)>("Split children\'s total weight > 1.0", r0);

     label7:
        return;
    }

    public void layoutContainer(java.awt.Container)
    {
        java.awt.Rectangle $r5;
        java.awt.Insets $r3;
        org.jdesktop.swingx.MultiSplitLayout r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.awt.Container r1;
        boolean $z0, $z1;
        org.jdesktop.swingx.MultiSplitLayout$Node $r2, $r6, $r7;
        java.awt.Dimension $r4;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r1 := @parameter0: java.awt.Container;

        $z0 = r0.<org.jdesktop.swingx.MultiSplitLayout: boolean layoutByWeight>;

        if $z0 == 0 goto label1;

        $z1 = r0.<org.jdesktop.swingx.MultiSplitLayout: boolean floatingDividers>;

        if $z1 == 0 goto label1;

        specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: void doLayoutByWeight(java.awt.Container)>(r1);

     label1:
        $r2 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node getModel()>();

        specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: void checkLayout(org.jdesktop.swingx.MultiSplitLayout$Node)>($r2);

        $r3 = virtualinvoke r1.<java.awt.Container: java.awt.Insets getInsets()>();

        $r4 = virtualinvoke r1.<java.awt.Container: java.awt.Dimension getSize()>();

        $i0 = $r4.<java.awt.Dimension: int width>;

        $i1 = $r3.<java.awt.Insets: int left>;

        $i2 = $r3.<java.awt.Insets: int right>;

        $i3 = $i1 + $i2;

        $i4 = $i0 - $i3;

        $i5 = $r4.<java.awt.Dimension: int height>;

        $i6 = $r3.<java.awt.Insets: int top>;

        $i7 = $r3.<java.awt.Insets: int bottom>;

        $i8 = $i6 + $i7;

        $i9 = $i5 - $i8;

        $r5 = new java.awt.Rectangle;

        $i10 = $r3.<java.awt.Insets: int left>;

        $i11 = $r3.<java.awt.Insets: int top>;

        specialinvoke $r5.<java.awt.Rectangle: void <init>(int,int,int,int)>($i10, $i11, $i4, $i9);

        $r6 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node getModel()>();

        specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: void layout1(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>($r6, $r5);

        $r7 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node getModel()>();

        specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: void layout2(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>($r7, $r5);

        return;
    }

    private org.jdesktop.swingx.MultiSplitLayout$Divider dividerAt(org.jdesktop.swingx.MultiSplitLayout$Node, int, int)
    {
        java.awt.Rectangle $r5, $r8;
        org.jdesktop.swingx.MultiSplitLayout r6;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r2;
        org.jdesktop.swingx.MultiSplitLayout$Node r0, r4;
        org.jdesktop.swingx.MultiSplitLayout$Split r11;
        org.jdesktop.swingx.MultiSplitLayout$Divider $r7, r9, $r10;
        java.util.List $r1;
        java.lang.Object $r3;

        r6 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z0 == 0 goto label3;

        r9 = (org.jdesktop.swingx.MultiSplitLayout$Divider) r0;

        $r8 = virtualinvoke r9.<org.jdesktop.swingx.MultiSplitLayout$Divider: java.awt.Rectangle getBounds()>();

        $z4 = virtualinvoke $r8.<java.awt.Rectangle: boolean contains(int,int)>(i0, i1);

        if $z4 == 0 goto label1;

        $r10 = r9;

        goto label2;

     label1:
        $r10 = null;

     label2:
        return $r10;

     label3:
        $z1 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Split;

        if $z1 == 0 goto label7;

        r11 = (org.jdesktop.swingx.MultiSplitLayout$Split) r0;

        $r1 = virtualinvoke r11.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z5 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label7;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r3;

        $z2 = virtualinvoke r4.<org.jdesktop.swingx.MultiSplitLayout$Node: boolean isVisible()>();

        if $z2 != 0 goto label5;

        goto label4;

     label5:
        $r5 = virtualinvoke r4.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        $z3 = virtualinvoke $r5.<java.awt.Rectangle: boolean contains(int,int)>(i0, i1);

        if $z3 == 0 goto label6;

        $r7 = specialinvoke r6.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Divider dividerAt(org.jdesktop.swingx.MultiSplitLayout$Node,int,int)>(r4, i0, i1);

        return $r7;

     label6:
        goto label4;

     label7:
        return null;
    }

    public org.jdesktop.swingx.MultiSplitLayout$Divider dividerAt(int, int)
    {
        org.jdesktop.swingx.MultiSplitLayout r0;
        org.jdesktop.swingx.MultiSplitLayout$Node $r1;
        int i0, i1;
        org.jdesktop.swingx.MultiSplitLayout$Divider $r2;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node getModel()>();

        $r2 = specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Divider dividerAt(org.jdesktop.swingx.MultiSplitLayout$Node,int,int)>($r1, i0, i1);

        return $r2;
    }

    private boolean nodeOverlapsRectangle(org.jdesktop.swingx.MultiSplitLayout$Node, java.awt.Rectangle)
    {
        java.awt.Rectangle $r1, r2;
        org.jdesktop.swingx.MultiSplitLayout r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        boolean $z0;
        org.jdesktop.swingx.MultiSplitLayout$Node r0;

        r3 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        r2 := @parameter1: java.awt.Rectangle;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.MultiSplitLayout$Node: java.awt.Rectangle getBounds()>();

        $i3 = $r1.<java.awt.Rectangle: int x>;

        $i1 = r2.<java.awt.Rectangle: int x>;

        $i0 = r2.<java.awt.Rectangle: int width>;

        $i2 = $i1 + $i0;

        if $i3 > $i2 goto label1;

        $i5 = $r1.<java.awt.Rectangle: int x>;

        $i4 = $r1.<java.awt.Rectangle: int width>;

        $i7 = $i5 + $i4;

        $i6 = r2.<java.awt.Rectangle: int x>;

        if $i7 < $i6 goto label1;

        $i11 = $r1.<java.awt.Rectangle: int y>;

        $i9 = r2.<java.awt.Rectangle: int y>;

        $i8 = r2.<java.awt.Rectangle: int height>;

        $i10 = $i9 + $i8;

        if $i11 > $i10 goto label1;

        $i13 = $r1.<java.awt.Rectangle: int y>;

        $i12 = $r1.<java.awt.Rectangle: int height>;

        $i15 = $i13 + $i12;

        $i14 = r2.<java.awt.Rectangle: int y>;

        if $i15 < $i14 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private java.util.List dividersThatOverlap(org.jdesktop.swingx.MultiSplitLayout$Node, java.awt.Rectangle)
    {
        java.awt.Rectangle r2;
        java.util.ArrayList $r4;
        org.jdesktop.swingx.MultiSplitLayout r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r7;
        org.jdesktop.swingx.MultiSplitLayout$Node r1, r9;
        org.jdesktop.swingx.MultiSplitLayout$Split $r5;
        org.jdesktop.swingx.MultiSplitLayout$Divider $r11;
        java.util.List $r3, $r6, $r10;
        java.lang.Object $r8;

        r0 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r1 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        r2 := @parameter1: java.awt.Rectangle;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: boolean nodeOverlapsRectangle(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r1, r2);

        if $z0 == 0 goto label5;

        $z1 = r1 instanceof org.jdesktop.swingx.MultiSplitLayout$Split;

        if $z1 == 0 goto label5;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = (org.jdesktop.swingx.MultiSplitLayout$Split) r1;

        $r6 = virtualinvoke $r5.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r8;

        $z3 = r9 instanceof org.jdesktop.swingx.MultiSplitLayout$Divider;

        if $z3 == 0 goto label2;

        $z5 = specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: boolean nodeOverlapsRectangle(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r9, r2);

        if $z5 == 0 goto label3;

        $r11 = (org.jdesktop.swingx.MultiSplitLayout$Divider) r9;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label3;

     label2:
        $z4 = r9 instanceof org.jdesktop.swingx.MultiSplitLayout$Split;

        if $z4 == 0 goto label3;

        $r10 = specialinvoke r0.<org.jdesktop.swingx.MultiSplitLayout: java.util.List dividersThatOverlap(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>(r9, r2);

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r10);

     label3:
        goto label1;

     label4:
        return $r4;

     label5:
        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;
    }

    public java.util.List dividersThatOverlap(java.awt.Rectangle)
    {
        java.awt.Rectangle r0;
        java.util.List $r3;
        org.jdesktop.swingx.MultiSplitLayout r1;
        org.jdesktop.swingx.MultiSplitLayout$Node $r2;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.jdesktop.swingx.MultiSplitLayout;

        r0 := @parameter0: java.awt.Rectangle;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null Rectangle");

        throw $r4;

     label1:
        $r2 = virtualinvoke r1.<org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node getModel()>();

        $r3 = specialinvoke r1.<org.jdesktop.swingx.MultiSplitLayout: java.util.List dividersThatOverlap(org.jdesktop.swingx.MultiSplitLayout$Node,java.awt.Rectangle)>($r2, r0);

        return $r3;
    }

    private static void throwParseException(java.io.StreamTokenizer, java.lang.String) throws java.lang.Exception
    {
        java.io.StreamTokenizer r6;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5;
        java.lang.Exception $r0;

        r6 := @parameter0: java.io.StreamTokenizer;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.lang.Exception;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MultiSplitLayout.parseModel Error: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.Exception: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    private static void parseAttribute(java.lang.String, java.io.StreamTokenizer, org.jdesktop.swingx.MultiSplitLayout$Node) throws java.lang.Exception
    {
        org.jdesktop.swingx.MultiSplitLayout$Leaf $r15;
        int $i0, $i1, $i2, $i4, $i6;
        java.io.StreamTokenizer r0;
        java.lang.String r1, $r6, $r11, $r12, $r14, $r19;
        boolean $z0, $z1, $z2, $z3;
        double $d0;
        org.jdesktop.swingx.MultiSplitLayout$Node r7;
        org.jdesktop.swingx.MultiSplitLayout$Split $r13;
        java.lang.StringBuilder $r3, $r4, $r5, $r9, $r10, $r17, $r18, $r20, $r21, $r22;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.io.StreamTokenizer;

        r7 := @parameter2: org.jdesktop.swingx.MultiSplitLayout$Node;

        $i0 = virtualinvoke r0.<java.io.StreamTokenizer: int nextToken()>();

        if $i0 == 61 goto label1;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected \'=\' after ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void throwParseException(java.io.StreamTokenizer,java.lang.String)>(r0, $r19);

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("WEIGHT");

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke r0.<java.io.StreamTokenizer: int nextToken()>();

        $i4 = (int) -2;

        if $i2 != $i4 goto label2;

        $d0 = r0.<java.io.StreamTokenizer: double nval>;

        virtualinvoke r7.<org.jdesktop.swingx.MultiSplitLayout$Node: void setWeight(double)>($d0);

        goto label8;

     label2:
        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void throwParseException(java.io.StreamTokenizer,java.lang.String)>(r0, "invalid weight");

        goto label8;

     label3:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NAME");

        if $z1 == 0 goto label7;

        $i1 = virtualinvoke r0.<java.io.StreamTokenizer: int nextToken()>();

        $i6 = (int) -3;

        if $i1 != $i6 goto label6;

        $z2 = r7 instanceof org.jdesktop.swingx.MultiSplitLayout$Leaf;

        if $z2 == 0 goto label4;

        $r15 = (org.jdesktop.swingx.MultiSplitLayout$Leaf) r7;

        $r14 = r0.<java.io.StreamTokenizer: java.lang.String sval>;

        virtualinvoke $r15.<org.jdesktop.swingx.MultiSplitLayout$Leaf: void setName(java.lang.String)>($r14);

        goto label8;

     label4:
        $z3 = r7 instanceof org.jdesktop.swingx.MultiSplitLayout$Split;

        if $z3 == 0 goto label5;

        $r13 = (org.jdesktop.swingx.MultiSplitLayout$Split) r7;

        $r12 = r0.<java.io.StreamTokenizer: java.lang.String sval>;

        virtualinvoke $r13.<org.jdesktop.swingx.MultiSplitLayout$Split: void setName(java.lang.String)>($r12);

        goto label8;

     label5:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t specify name for ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void throwParseException(java.io.StreamTokenizer,java.lang.String)>(r0, $r11);

        goto label8;

     label6:
        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void throwParseException(java.io.StreamTokenizer,java.lang.String)>(r0, "invalid name");

        goto label8;

     label7:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unrecognized attribute \"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void throwParseException(java.io.StreamTokenizer,java.lang.String)>(r0, $r6);

     label8:
        return;
    }

    private static void addSplitChild(org.jdesktop.swingx.MultiSplitLayout$Split, org.jdesktop.swingx.MultiSplitLayout$Node)
    {
        java.util.List $r2;
        org.jdesktop.swingx.MultiSplitLayout$Split r1;
        int $i0;
        org.jdesktop.swingx.MultiSplitLayout$Node r4;
        org.jdesktop.swingx.MultiSplitLayout$Divider $r3;
        java.util.ArrayList $r0;

        r1 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Split;

        r4 := @parameter1: org.jdesktop.swingx.MultiSplitLayout$Node;

        $r0 = new java.util.ArrayList;

        $r2 = virtualinvoke r1.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label2;

     label1:
        $r3 = new org.jdesktop.swingx.MultiSplitLayout$Divider;

        specialinvoke $r3.<org.jdesktop.swingx.MultiSplitLayout$Divider: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        virtualinvoke r1.<org.jdesktop.swingx.MultiSplitLayout$Split: void setChildren(java.util.List)>($r0);

        return;
    }

    private static void parseLeaf(java.io.StreamTokenizer, org.jdesktop.swingx.MultiSplitLayout$Split) throws java.lang.Exception
    {
        org.jdesktop.swingx.MultiSplitLayout$Leaf $r8;
        org.jdesktop.swingx.MultiSplitLayout$Split r2;
        int $i0, $i2, $i4;
        java.io.StreamTokenizer r1;
        java.lang.StringBuilder $r4, $r5, $r9;
        java.lang.String $r6, $r7;

        r1 := @parameter0: java.io.StreamTokenizer;

        r2 := @parameter1: org.jdesktop.swingx.MultiSplitLayout$Split;

        $r8 = new org.jdesktop.swingx.MultiSplitLayout$Leaf;

        specialinvoke $r8.<org.jdesktop.swingx.MultiSplitLayout$Leaf: void <init>()>();

     label1:
        $i0 = virtualinvoke r1.<java.io.StreamTokenizer: int nextToken()>();

        $i2 = (int) -1;

        if $i0 == $i2 goto label4;

        if $i0 != 41 goto label2;

        goto label4;

     label2:
        $i4 = (int) -3;

        if $i0 != $i4 goto label3;

        $r7 = r1.<java.io.StreamTokenizer: java.lang.String sval>;

        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void parseAttribute(java.lang.String,java.io.StreamTokenizer,org.jdesktop.swingx.MultiSplitLayout$Node)>($r7, r1, $r8);

        goto label1;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad Leaf: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void throwParseException(java.io.StreamTokenizer,java.lang.String)>(r1, $r6);

        goto label1;

     label4:
        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void addSplitChild(org.jdesktop.swingx.MultiSplitLayout$Split,org.jdesktop.swingx.MultiSplitLayout$Node)>(r2, $r8);

        return;
    }

    private static void parseSplit(java.io.StreamTokenizer, org.jdesktop.swingx.MultiSplitLayout$Split) throws java.lang.Exception
    {
        org.jdesktop.swingx.MultiSplitLayout$Leaf $r16;
        int $i0, $i1, $i3, $i5, $i7;
        java.io.StreamTokenizer r0;
        java.lang.String $r1, $r2, $r9, $r10, $r11, $r13, $r14, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.jdesktop.swingx.MultiSplitLayout$Split r4, $r17;
        java.lang.StringBuilder $r6, $r7, $r8, $r18;

        r0 := @parameter0: java.io.StreamTokenizer;

        r4 := @parameter1: org.jdesktop.swingx.MultiSplitLayout$Split;

     label01:
        $i1 = virtualinvoke r0.<java.io.StreamTokenizer: int nextToken()>();

        $i3 = (int) -1;

        if $i1 == $i3 goto label11;

        if $i1 != 41 goto label02;

        goto label11;

     label02:
        $i5 = (int) -3;

        if $i1 != $i5 goto label05;

        $r10 = r0.<java.io.StreamTokenizer: java.lang.String sval>;

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("WEIGHT");

        if $z4 == 0 goto label03;

        $r15 = r0.<java.io.StreamTokenizer: java.lang.String sval>;

        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void parseAttribute(java.lang.String,java.io.StreamTokenizer,org.jdesktop.swingx.MultiSplitLayout$Node)>($r15, r0, r4);

        goto label01;

     label03:
        $r11 = r0.<java.io.StreamTokenizer: java.lang.String sval>;

        $z5 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NAME");

        if $z5 == 0 goto label04;

        $r14 = r0.<java.io.StreamTokenizer: java.lang.String sval>;

        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void parseAttribute(java.lang.String,java.io.StreamTokenizer,org.jdesktop.swingx.MultiSplitLayout$Node)>($r14, r0, r4);

        goto label01;

     label04:
        $r16 = new org.jdesktop.swingx.MultiSplitLayout$Leaf;

        $r13 = r0.<java.io.StreamTokenizer: java.lang.String sval>;

        specialinvoke $r16.<org.jdesktop.swingx.MultiSplitLayout$Leaf: void <init>(java.lang.String)>($r13);

        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void addSplitChild(org.jdesktop.swingx.MultiSplitLayout$Split,org.jdesktop.swingx.MultiSplitLayout$Node)>(r4, $r16);

        goto label01;

     label05:
        if $i1 != 40 goto label01;

        $i0 = virtualinvoke r0.<java.io.StreamTokenizer: int nextToken()>();

        $i7 = (int) -3;

        if $i0 == $i7 goto label06;

        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void throwParseException(java.io.StreamTokenizer,java.lang.String)>(r0, "invalid node type");

     label06:
        $r1 = r0.<java.io.StreamTokenizer: java.lang.String sval>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("LEAF");

        if $z0 == 0 goto label07;

        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void parseLeaf(java.io.StreamTokenizer,org.jdesktop.swingx.MultiSplitLayout$Split)>(r0, r4);

        goto label10;

     label07:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ROW");

        if $z1 != 0 goto label08;

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("COLUMN");

        if $z3 == 0 goto label09;

     label08:
        $r17 = new org.jdesktop.swingx.MultiSplitLayout$Split;

        specialinvoke $r17.<org.jdesktop.swingx.MultiSplitLayout$Split: void <init>()>();

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ROW");

        virtualinvoke $r17.<org.jdesktop.swingx.MultiSplitLayout$Split: void setRowLayout(boolean)>($z2);

        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void addSplitChild(org.jdesktop.swingx.MultiSplitLayout$Split,org.jdesktop.swingx.MultiSplitLayout$Node)>(r4, $r17);

        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void parseSplit(java.io.StreamTokenizer,org.jdesktop.swingx.MultiSplitLayout$Split)>(r0, $r17);

        goto label10;

     label09:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unrecognized node type \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void throwParseException(java.io.StreamTokenizer,java.lang.String)>(r0, $r9);

     label10:
        goto label01;

     label11:
        return;
    }

    private static org.jdesktop.swingx.MultiSplitLayout$Node parseModel(java.io.Reader)
    {
        java.lang.Throwable $r7;
        java.io.PrintStream $r10;
        org.jdesktop.swingx.MultiSplitLayout$Split $r2;
        org.jdesktop.swingx.MultiSplitLayout$Node r5;
        java.io.IOException $r6, $r8, $r11;
        java.io.Reader r1;
        java.lang.Exception $r9;
        java.util.List $r3;
        java.io.StreamTokenizer $r0;
        java.lang.Object $r4;

        r1 := @parameter0: java.io.Reader;

        $r0 = new java.io.StreamTokenizer;

        specialinvoke $r0.<java.io.StreamTokenizer: void <init>(java.io.Reader)>(r1);

     label01:
        $r2 = new org.jdesktop.swingx.MultiSplitLayout$Split;

        specialinvoke $r2.<org.jdesktop.swingx.MultiSplitLayout$Split: void <init>()>();

        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void parseSplit(java.io.StreamTokenizer,org.jdesktop.swingx.MultiSplitLayout$Split)>($r0, $r2);

        $r3 = virtualinvoke $r2.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        r5 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r4;

     label02:
        virtualinvoke r1.<java.io.Reader: void close()>();

     label03:
        goto label05;

     label04:
        $r11 := @caughtexception;

     label05:
        return r5;

     label06:
        $r9 := @caughtexception;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.Object)>($r9);

     label07:
        virtualinvoke r1.<java.io.Reader: void close()>();

     label08:
        goto label15;

     label09:
        $r8 := @caughtexception;

        goto label15;

     label10:
        $r7 := @caughtexception;

     label11:
        virtualinvoke r1.<java.io.Reader: void close()>();

     label12:
        goto label14;

     label13:
        $r6 := @caughtexception;

     label14:
        throw $r7;

     label15:
        return null;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Exception from label01 to label02 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public static org.jdesktop.swingx.MultiSplitLayout$Node parseModel(java.lang.String)
    {
        org.jdesktop.swingx.MultiSplitLayout$Node $r2;
        java.lang.String r1;
        java.io.StringReader $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.StringReader;

        specialinvoke $r0.<java.io.StringReader: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <org.jdesktop.swingx.MultiSplitLayout: org.jdesktop.swingx.MultiSplitLayout$Node parseModel(java.io.Reader)>($r0);

        return $r2;
    }

    private static void printModel(java.lang.String, org.jdesktop.swingx.MultiSplitLayout$Node)
    {
        java.lang.String r3, $r6, $r12, $r20;
        boolean $z0, $z1;
        java.io.PrintStream $r2, $r9;
        java.util.Iterator $r14;
        org.jdesktop.swingx.MultiSplitLayout$Node r0, r16;
        org.jdesktop.swingx.MultiSplitLayout$Split r7;
        java.util.List $r13;
        java.lang.StringBuilder $r1, $r4, $r5, $r8, $r10, $r11, $r17, $r18, $r19;
        java.lang.Object $r15;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: org.jdesktop.swingx.MultiSplitLayout$Node;

        $z0 = r0 instanceof org.jdesktop.swingx.MultiSplitLayout$Split;

        if $z0 == 0 goto label3;

        r7 = (org.jdesktop.swingx.MultiSplitLayout$Split) r0;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r13 = virtualinvoke r7.<org.jdesktop.swingx.MultiSplitLayout$Split: java.util.List getChildren()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.jdesktop.swingx.MultiSplitLayout$Node) $r15;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void printModel(java.lang.String,org.jdesktop.swingx.MultiSplitLayout$Node)>($r20, r16);

        goto label1;

     label2:
        goto label4;

     label3:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label4:
        return;
    }

    public static void printModel(org.jdesktop.swingx.MultiSplitLayout$Node)
    {
        org.jdesktop.swingx.MultiSplitLayout$Node r0;

        r0 := @parameter0: org.jdesktop.swingx.MultiSplitLayout$Node;

        staticinvoke <org.jdesktop.swingx.MultiSplitLayout: void printModel(java.lang.String,org.jdesktop.swingx.MultiSplitLayout$Node)>("", r0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.jdesktop.swingx.MultiSplitLayout: int USER_MIN_SIZE_LAYOUT> = 2;

        <org.jdesktop.swingx.MultiSplitLayout: int NO_MIN_SIZE_LAYOUT> = 1;

        <org.jdesktop.swingx.MultiSplitLayout: int DEFAULT_LAYOUT> = 0;

        $r0 = class "Lorg/jdesktop/swingx/MultiSplitLayout;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.jdesktop.swingx.MultiSplitLayout: boolean $assertionsDisabled> = $z1;

        return;
    }
}
