public abstract class org.springframework.core.GenericCollectionTypeResolver extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.core.GenericCollectionTypeResolver r0;

        r0 := @this: org.springframework.core.GenericCollectionTypeResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Class getCollectionType(java.lang.Class)
    {
        java.lang.Class r0, $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class extractTypeFromClass(java.lang.Class,java.lang.Class,int)>(r0, class "Ljava/util/Collection;", 0);

        return $r1;
    }

    public static java.lang.Class getMapKeyType(java.lang.Class)
    {
        java.lang.Class r0, $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class extractTypeFromClass(java.lang.Class,java.lang.Class,int)>(r0, class "Ljava/util/Map;", 0);

        return $r1;
    }

    public static java.lang.Class getMapValueType(java.lang.Class)
    {
        java.lang.Class r0, $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class extractTypeFromClass(java.lang.Class,java.lang.Class,int)>(r0, class "Ljava/util/Map;", 1);

        return $r1;
    }

    public static java.lang.Class getCollectionFieldType(java.lang.reflect.Field)
    {
        java.lang.Class $r1;
        java.lang.reflect.Field r0;

        r0 := @parameter0: java.lang.reflect.Field;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getGenericFieldType(java.lang.reflect.Field,java.lang.Class,int,int)>(r0, class "Ljava/util/Collection;", 0, 1);

        return $r1;
    }

    public static java.lang.Class getCollectionFieldType(java.lang.reflect.Field, int)
    {
        int i0;
        java.lang.Class $r1;
        java.lang.reflect.Field r0;

        r0 := @parameter0: java.lang.reflect.Field;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getGenericFieldType(java.lang.reflect.Field,java.lang.Class,int,int)>(r0, class "Ljava/util/Collection;", 0, i0);

        return $r1;
    }

    public static java.lang.Class getMapKeyFieldType(java.lang.reflect.Field)
    {
        java.lang.Class $r1;
        java.lang.reflect.Field r0;

        r0 := @parameter0: java.lang.reflect.Field;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getGenericFieldType(java.lang.reflect.Field,java.lang.Class,int,int)>(r0, class "Ljava/util/Map;", 0, 1);

        return $r1;
    }

    public static java.lang.Class getMapKeyFieldType(java.lang.reflect.Field, int)
    {
        int i0;
        java.lang.Class $r1;
        java.lang.reflect.Field r0;

        r0 := @parameter0: java.lang.reflect.Field;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getGenericFieldType(java.lang.reflect.Field,java.lang.Class,int,int)>(r0, class "Ljava/util/Map;", 0, i0);

        return $r1;
    }

    public static java.lang.Class getMapValueFieldType(java.lang.reflect.Field)
    {
        java.lang.Class $r1;
        java.lang.reflect.Field r0;

        r0 := @parameter0: java.lang.reflect.Field;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getGenericFieldType(java.lang.reflect.Field,java.lang.Class,int,int)>(r0, class "Ljava/util/Map;", 1, 1);

        return $r1;
    }

    public static java.lang.Class getMapValueFieldType(java.lang.reflect.Field, int)
    {
        int i0;
        java.lang.Class $r1;
        java.lang.reflect.Field r0;

        r0 := @parameter0: java.lang.reflect.Field;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getGenericFieldType(java.lang.reflect.Field,java.lang.Class,int,int)>(r0, class "Ljava/util/Map;", 1, i0);

        return $r1;
    }

    public static java.lang.Class getCollectionParameterType(org.springframework.core.MethodParameter)
    {
        java.lang.Class $r1;
        org.springframework.core.MethodParameter r0;

        r0 := @parameter0: org.springframework.core.MethodParameter;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getGenericParameterType(org.springframework.core.MethodParameter,java.lang.Class,int)>(r0, class "Ljava/util/Collection;", 0);

        return $r1;
    }

    public static java.lang.Class getMapKeyParameterType(org.springframework.core.MethodParameter)
    {
        java.lang.Class $r1;
        org.springframework.core.MethodParameter r0;

        r0 := @parameter0: org.springframework.core.MethodParameter;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getGenericParameterType(org.springframework.core.MethodParameter,java.lang.Class,int)>(r0, class "Ljava/util/Map;", 0);

        return $r1;
    }

    public static java.lang.Class getMapValueParameterType(org.springframework.core.MethodParameter)
    {
        java.lang.Class $r1;
        org.springframework.core.MethodParameter r0;

        r0 := @parameter0: org.springframework.core.MethodParameter;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getGenericParameterType(org.springframework.core.MethodParameter,java.lang.Class,int)>(r0, class "Ljava/util/Map;", 1);

        return $r1;
    }

    public static java.lang.Class getCollectionReturnType(java.lang.reflect.Method)
    {
        java.lang.Class $r1;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getGenericReturnType(java.lang.reflect.Method,java.lang.Class,int,int)>(r0, class "Ljava/util/Collection;", 0, 1);

        return $r1;
    }

    public static java.lang.Class getCollectionReturnType(java.lang.reflect.Method, int)
    {
        int i0;
        java.lang.Class $r1;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getGenericReturnType(java.lang.reflect.Method,java.lang.Class,int,int)>(r0, class "Ljava/util/Collection;", 0, i0);

        return $r1;
    }

    public static java.lang.Class getMapKeyReturnType(java.lang.reflect.Method)
    {
        java.lang.Class $r1;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getGenericReturnType(java.lang.reflect.Method,java.lang.Class,int,int)>(r0, class "Ljava/util/Map;", 0, 1);

        return $r1;
    }

    public static java.lang.Class getMapKeyReturnType(java.lang.reflect.Method, int)
    {
        int i0;
        java.lang.Class $r1;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getGenericReturnType(java.lang.reflect.Method,java.lang.Class,int,int)>(r0, class "Ljava/util/Map;", 0, i0);

        return $r1;
    }

    public static java.lang.Class getMapValueReturnType(java.lang.reflect.Method)
    {
        java.lang.Class $r1;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getGenericReturnType(java.lang.reflect.Method,java.lang.Class,int,int)>(r0, class "Ljava/util/Map;", 1, 1);

        return $r1;
    }

    public static java.lang.Class getMapValueReturnType(java.lang.reflect.Method, int)
    {
        int i0;
        java.lang.Class $r1;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getGenericReturnType(java.lang.reflect.Method,java.lang.Class,int,int)>(r0, class "Ljava/util/Map;", 1, i0);

        return $r1;
    }

    private static java.lang.Class getGenericParameterType(org.springframework.core.MethodParameter, java.lang.Class, int)
    {
        java.lang.reflect.Type $r1;
        org.springframework.core.MethodParameter r0;
        int i0, $i1;
        java.lang.Class r2, $r3;

        r0 := @parameter0: org.springframework.core.MethodParameter;

        r2 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        $r1 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.reflect.Type getTargetType(org.springframework.core.MethodParameter)>(r0);

        $i1 = virtualinvoke r0.<org.springframework.core.MethodParameter: int getNestingLevel()>();

        $r3 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class extractType(org.springframework.core.MethodParameter,java.lang.reflect.Type,java.lang.Class,int,int,int)>(r0, $r1, r2, i0, $i1, 1);

        return $r3;
    }

    private static java.lang.Class getGenericFieldType(java.lang.reflect.Field, java.lang.Class, int, int)
    {
        java.lang.reflect.Type $r1;
        int i0, i1;
        java.lang.Class r2, $r3;
        java.lang.reflect.Field r0;

        r0 := @parameter0: java.lang.reflect.Field;

        r2 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $r3 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class extractType(org.springframework.core.MethodParameter,java.lang.reflect.Type,java.lang.Class,int,int,int)>(null, $r1, r2, i0, i1, 1);

        return $r3;
    }

    private static java.lang.Class getGenericReturnType(java.lang.reflect.Method, java.lang.Class, int, int)
    {
        java.lang.reflect.Type $r1;
        int i0, i1;
        java.lang.Class r2, $r3;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        $r3 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class extractType(org.springframework.core.MethodParameter,java.lang.reflect.Type,java.lang.Class,int,int,int)>(null, $r1, r2, i0, i1, 1);

        return $r3;
    }

    private static java.lang.Class extractType(org.springframework.core.MethodParameter, java.lang.reflect.Type, java.lang.Class, int, int, int)
    {
        org.springframework.core.MethodParameter r1;
        java.util.Map $r7, $r9;
        int i0, i1, i2;
        boolean $z0, $z1, $z2;
        java.lang.reflect.TypeVariable $r8;
        java.lang.reflect.ParameterizedType $r5;
        java.lang.reflect.Type r0, r11, r12;
        java.lang.Class r2, $r3, $r4, $r6;
        java.lang.Object $r10;

        r1 := @parameter0: org.springframework.core.MethodParameter;

        r0 := @parameter1: java.lang.reflect.Type;

        r2 := @parameter2: java.lang.Class;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r12 = r0;

        $z0 = r0 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label1;

        if r1 == null goto label1;

        $r7 = r1.<org.springframework.core.MethodParameter: java.util.Map typeVariableMap>;

        if $r7 == null goto label1;

        $r9 = r1.<org.springframework.core.MethodParameter: java.util.Map typeVariableMap>;

        $r8 = (java.lang.reflect.TypeVariable) r0;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r11 = (java.lang.reflect.Type) $r10;

        if r11 == null goto label1;

        r12 = r11;

     label1:
        $z2 = r12 instanceof java.lang.reflect.ParameterizedType;

        if $z2 == 0 goto label2;

        $r5 = (java.lang.reflect.ParameterizedType) r12;

        $r6 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class extractTypeFromParameterizedType(org.springframework.core.MethodParameter,java.lang.reflect.ParameterizedType,java.lang.Class,int,int,int)>(r1, $r5, r2, i0, i1, i2);

        return $r6;

     label2:
        $z1 = r12 instanceof java.lang.Class;

        if $z1 == 0 goto label3;

        $r3 = (java.lang.Class) r12;

        $r4 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class extractTypeFromClass(org.springframework.core.MethodParameter,java.lang.Class,java.lang.Class,int,int,int)>(r1, $r3, r2, i0, i1, i2);

        return $r4;

     label3:
        return null;
    }

    private static java.lang.Class extractTypeFromParameterizedType(org.springframework.core.MethodParameter, java.lang.reflect.ParameterizedType, java.lang.Class, int, int, int)
    {
        java.lang.reflect.GenericArrayType $r9;
        java.lang.Integer $r26;
        org.springframework.core.MethodParameter r6;
        java.util.Map $r20, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.reflect.Type $r1, $r2, $r10, $r16, $r18, $r25, r27, r28;
        java.lang.reflect.Type[] $r4, $r15, $r30;
        java.lang.reflect.WildcardType r29;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, i8, $i9;
        java.lang.reflect.TypeVariable $r21;
        java.lang.reflect.ParameterizedType r0, $r14;
        java.lang.Class r3, r5, $r7, $r8, $r11, $r13, $r17, $r19, $r24;
        java.lang.Object $r12, $r23;

        r6 := @parameter0: org.springframework.core.MethodParameter;

        r0 := @parameter1: java.lang.reflect.ParameterizedType;

        r5 := @parameter2: java.lang.Class;

        i3 := @parameter3: int;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        $r1 = interfaceinvoke r0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z0 = $r1 instanceof java.lang.Class;

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r2 = interfaceinvoke r0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        r3 = (java.lang.Class) $r2;

        $r4 = interfaceinvoke r0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i2 = i0 - i1;

        if $i2 <= 0 goto label06;

        i8 = i1 + 1;

        if r6 == null goto label02;

        $r26 = virtualinvoke r6.<org.springframework.core.MethodParameter: java.lang.Integer getTypeIndexForLevel(int)>(i8);

        goto label03;

     label02:
        $r26 = null;

     label03:
        if $r26 == null goto label04;

        $i9 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();

        goto label05;

     label04:
        $i7 = lengthof $r4;

        $i9 = $i7 - 1;

     label05:
        $r25 = $r4[$i9];

        $r24 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class extractType(org.springframework.core.MethodParameter,java.lang.reflect.Type,java.lang.Class,int,int,int)>(r6, $r25, r5, i3, i0, i8);

        return $r24;

     label06:
        if r5 == null goto label07;

        $z7 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if $z7 != 0 goto label07;

        return null;

     label07:
        $r7 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class extractTypeFromClass(org.springframework.core.MethodParameter,java.lang.Class,java.lang.Class,int,int,int)>(r6, r3, r5, i3, i0, i1);

        if $r7 == null goto label08;

        return $r7;

     label08:
        if $r4 == null goto label09;

        $i4 = lengthof $r4;

        if i3 < $i4 goto label10;

     label09:
        return null;

     label10:
        r27 = $r4[i3];

        $z1 = r27 instanceof java.lang.reflect.TypeVariable;

        if $z1 == 0 goto label11;

        if r6 == null goto label11;

        $r20 = r6.<org.springframework.core.MethodParameter: java.util.Map typeVariableMap>;

        if $r20 == null goto label11;

        $r22 = r6.<org.springframework.core.MethodParameter: java.util.Map typeVariableMap>;

        $r21 = (java.lang.reflect.TypeVariable) r27;

        $r23 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>($r21);

        r28 = (java.lang.reflect.Type) $r23;

        if r28 == null goto label11;

        r27 = r28;

     label11:
        $z8 = r27 instanceof java.lang.reflect.WildcardType;

        if $z8 == 0 goto label13;

        r29 = (java.lang.reflect.WildcardType) r27;

        $r15 = interfaceinvoke r29.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        if $r15 == null goto label12;

        $i6 = lengthof $r15;

        if $i6 <= 0 goto label12;

        $r19 = class "Ljava/lang/Object;";

        $r18 = $r15[0];

        $z6 = virtualinvoke $r19.<java.lang.Object: boolean equals(java.lang.Object)>($r18);

        if $z6 != 0 goto label12;

        r27 = $r15[0];

        goto label13;

     label12:
        $r30 = interfaceinvoke r29.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        if $r30 == null goto label13;

        $i5 = lengthof $r30;

        if $i5 <= 0 goto label13;

        $r17 = class "Ljava/lang/Object;";

        $r16 = $r30[0];

        $z5 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>($r16);

        if $z5 != 0 goto label13;

        r27 = $r30[0];

     label13:
        $z9 = r27 instanceof java.lang.reflect.ParameterizedType;

        if $z9 == 0 goto label14;

        $r14 = (java.lang.reflect.ParameterizedType) r27;

        r27 = interfaceinvoke $r14.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

     label14:
        $z2 = r27 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label15;

        $r9 = (java.lang.reflect.GenericArrayType) r27;

        $r10 = interfaceinvoke $r9.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $z4 = $r10 instanceof java.lang.Class;

        if $z4 == 0 goto label16;

        $r11 = (java.lang.Class) $r10;

        $r12 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r11, 0);

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>();

        return $r13;

     label15:
        $z3 = r27 instanceof java.lang.Class;

        if $z3 == 0 goto label16;

        $r8 = (java.lang.Class) r27;

        return $r8;

     label16:
        return null;
    }

    private static java.lang.Class extractTypeFromClass(java.lang.Class, java.lang.Class, int)
    {
        int i0;
        java.lang.Class r0, r1, $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        $r2 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class extractTypeFromClass(org.springframework.core.MethodParameter,java.lang.Class,java.lang.Class,int,int,int)>(null, r0, r1, i0, 1, 1);

        return $r2;
    }

    private static java.lang.Class extractTypeFromClass(org.springframework.core.MethodParameter, java.lang.Class, java.lang.Class, int, int, int)
    {
        org.springframework.core.MethodParameter r6;
        int i0, i1, i2, i3, i4;
        java.lang.String $r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.reflect.ParameterizedType $r9;
        java.lang.reflect.Type r4, $r11, r13;
        java.lang.reflect.Type[] $r3;
        java.lang.Class r0, $r2, $r5, r7, $r8, $r10, $r12;

        r6 := @parameter0: org.springframework.core.MethodParameter;

        r0 := @parameter1: java.lang.Class;

        r7 := @parameter2: java.lang.Class;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.");

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r2 == null goto label2;

        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $z4 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: boolean isIntrospectionCandidate(java.lang.Class)>($r10);

        if $z4 == 0 goto label2;

        $r11 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        $r12 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class extractType(org.springframework.core.MethodParameter,java.lang.reflect.Type,java.lang.Class,int,int,int)>(r6, $r11, r7, i1, i2, i3);

        return $r12;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        if $r3 == null goto label7;

        i0 = lengthof $r3;

        i4 = 0;

        goto label6;

     label3:
        r4 = $r3[i4];

        r13 = r4;

        $z1 = r4 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label4;

        $r9 = (java.lang.reflect.ParameterizedType) r4;

        r13 = interfaceinvoke $r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

     label4:
        $z2 = r13 instanceof java.lang.Class;

        if $z2 == 0 goto label5;

        $r5 = (java.lang.Class) r13;

        $z3 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: boolean isIntrospectionCandidate(java.lang.Class)>($r5);

        if $z3 == 0 goto label5;

        $r8 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class extractType(org.springframework.core.MethodParameter,java.lang.reflect.Type,java.lang.Class,int,int,int)>(r6, r4, r7, i1, i2, i3);

        return $r8;

     label5:
        i4 = i4 + 1;

     label6:
        if i4 < i0 goto label3;

     label7:
        return null;
    }

    private static boolean isIntrospectionCandidate(java.lang.Class)
    {
        java.lang.Class r0, $r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "Ljava/util/Collection;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $r2 = class "Ljava/util/Map;";

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }
}
