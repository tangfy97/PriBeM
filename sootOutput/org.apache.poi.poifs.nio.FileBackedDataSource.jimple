public class org.apache.poi.poifs.nio.FileBackedDataSource extends org.apache.poi.poifs.nio.DataSource
{
    private java.nio.channels.FileChannel channel;
    private boolean writable;
    private java.io.RandomAccessFile srcFile;

    public void <init>(java.io.File) throws java.io.FileNotFoundException
    {
        java.io.RandomAccessFile $r2;
        org.apache.poi.poifs.nio.FileBackedDataSource r0;
        java.io.File r1;

        r0 := @this: org.apache.poi.poifs.nio.FileBackedDataSource;

        r1 := @parameter0: java.io.File;

        $r2 = staticinvoke <org.apache.poi.poifs.nio.FileBackedDataSource: java.io.RandomAccessFile newSrcFile(java.io.File,java.lang.String)>(r1, "r");

        specialinvoke r0.<org.apache.poi.poifs.nio.FileBackedDataSource: void <init>(java.io.RandomAccessFile,boolean)>($r2, 1);

        return;
    }

    public void <init>(java.io.File, boolean) throws java.io.FileNotFoundException
    {
        java.io.RandomAccessFile $r2;
        org.apache.poi.poifs.nio.FileBackedDataSource r0;
        java.lang.String $r3;
        java.io.File r1;
        boolean z0;

        r0 := @this: org.apache.poi.poifs.nio.FileBackedDataSource;

        r1 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r3 = "r";

        goto label2;

     label1:
        $r3 = "rw";

     label2:
        $r2 = staticinvoke <org.apache.poi.poifs.nio.FileBackedDataSource: java.io.RandomAccessFile newSrcFile(java.io.File,java.lang.String)>(r1, $r3);

        specialinvoke r0.<org.apache.poi.poifs.nio.FileBackedDataSource: void <init>(java.io.RandomAccessFile,boolean)>($r2, z0);

        return;
    }

    public void <init>(java.io.RandomAccessFile, boolean)
    {
        java.io.RandomAccessFile r1;
        org.apache.poi.poifs.nio.FileBackedDataSource r0;
        java.nio.channels.FileChannel $r2;
        boolean z0;

        r0 := @this: org.apache.poi.poifs.nio.FileBackedDataSource;

        r1 := @parameter0: java.io.RandomAccessFile;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r1.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        specialinvoke r0.<org.apache.poi.poifs.nio.FileBackedDataSource: void <init>(java.nio.channels.FileChannel,boolean)>($r2, z0);

        r0.<org.apache.poi.poifs.nio.FileBackedDataSource: java.io.RandomAccessFile srcFile> = r1;

        return;
    }

    public void <init>(java.nio.channels.FileChannel, boolean)
    {
        org.apache.poi.poifs.nio.FileBackedDataSource r0;
        java.nio.channels.FileChannel r1;
        boolean z0, $z1;

        r0 := @this: org.apache.poi.poifs.nio.FileBackedDataSource;

        r1 := @parameter0: java.nio.channels.FileChannel;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.poi.poifs.nio.DataSource: void <init>()>();

        r0.<org.apache.poi.poifs.nio.FileBackedDataSource: java.nio.channels.FileChannel channel> = r1;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<org.apache.poi.poifs.nio.FileBackedDataSource: boolean writable> = $z1;

        return;
    }

    public boolean isWriteable()
    {
        org.apache.poi.poifs.nio.FileBackedDataSource r0;
        boolean $z0;

        r0 := @this: org.apache.poi.poifs.nio.FileBackedDataSource;

        $z0 = r0.<org.apache.poi.poifs.nio.FileBackedDataSource: boolean writable>;

        return $z0;
    }

    public java.nio.channels.FileChannel getChannel()
    {
        org.apache.poi.poifs.nio.FileBackedDataSource r0;
        java.nio.channels.FileChannel $r1;

        r0 := @this: org.apache.poi.poifs.nio.FileBackedDataSource;

        $r1 = r0.<org.apache.poi.poifs.nio.FileBackedDataSource: java.nio.channels.FileChannel channel>;

        return $r1;
    }

    public java.nio.ByteBuffer read(int, long) throws java.io.IOException
    {
        long l0, $l1, $l4;
        java.nio.channels.FileChannel$MapMode $r10;
        java.nio.ByteBuffer $r2, r18;
        byte $b2;
        int i3, i5, $i6, $i8;
        org.apache.poi.poifs.nio.FileBackedDataSource r0;
        java.lang.String $r9, $r17;
        boolean $z0;
        java.lang.IllegalArgumentException $r20, $r22;
        java.lang.StringBuilder $r6, $r7, $r8, $r14, $r15, $r16, $r19, $r21;
        java.nio.channels.FileChannel $r1, $r3, $r11;

        r0 := @this: org.apache.poi.poifs.nio.FileBackedDataSource;

        i3 := @parameter0: int;

        l0 := @parameter1: long;

        $l1 = virtualinvoke r0.<org.apache.poi.poifs.nio.FileBackedDataSource: long size()>();

        $b2 = l0 cmp $l1;

        $i6 = (int) $b2;

        if $i6 < 0 goto label1;

        $r20 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Position ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" past the end of the file");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r20;

     label1:
        $z0 = r0.<org.apache.poi.poifs.nio.FileBackedDataSource: boolean writable>;

        if $z0 == 0 goto label2;

        $r11 = r0.<org.apache.poi.poifs.nio.FileBackedDataSource: java.nio.channels.FileChannel channel>;

        $r10 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_WRITE>;

        $l4 = (long) i3;

        r18 = virtualinvoke $r11.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r10, l0, $l4);

        i5 = 0;

        goto label3;

     label2:
        $r1 = r0.<org.apache.poi.poifs.nio.FileBackedDataSource: java.nio.channels.FileChannel channel>;

        virtualinvoke $r1.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>(l0);

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i3);

        r18 = $r2;

        $r3 = r0.<org.apache.poi.poifs.nio.FileBackedDataSource: java.nio.channels.FileChannel channel>;

        i5 = staticinvoke <org.apache.poi.util.IOUtils: int readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)>($r3, $r2);

     label3:
        $i8 = (int) -1;

        if i5 != $i8 goto label4;

        $r22 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Position ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" past the end of the file");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r22;

     label4:
        virtualinvoke r18.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        return r18;
    }

    public void write(java.nio.ByteBuffer, long) throws java.io.IOException
    {
        long l0;
        org.apache.poi.poifs.nio.FileBackedDataSource r0;
        java.nio.channels.FileChannel $r2;
        java.nio.ByteBuffer r1;

        r0 := @this: org.apache.poi.poifs.nio.FileBackedDataSource;

        r1 := @parameter0: java.nio.ByteBuffer;

        l0 := @parameter1: long;

        $r2 = r0.<org.apache.poi.poifs.nio.FileBackedDataSource: java.nio.channels.FileChannel channel>;

        virtualinvoke $r2.<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer,long)>(r1, l0);

        return;
    }

    public void copyTo(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        java.nio.channels.WritableByteChannel $r1;
        long $l0;
        org.apache.poi.poifs.nio.FileBackedDataSource r2;
        java.nio.channels.FileChannel $r3, $r4;

        r2 := @this: org.apache.poi.poifs.nio.FileBackedDataSource;

        r0 := @parameter0: java.io.OutputStream;

        $r1 = staticinvoke <java.nio.channels.Channels: java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)>(r0);

        $r4 = r2.<org.apache.poi.poifs.nio.FileBackedDataSource: java.nio.channels.FileChannel channel>;

        $r3 = r2.<org.apache.poi.poifs.nio.FileBackedDataSource: java.nio.channels.FileChannel channel>;

        $l0 = virtualinvoke $r3.<java.nio.channels.FileChannel: long size()>();

        virtualinvoke $r4.<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>(0L, $l0, $r1);

        return;
    }

    public long size() throws java.io.IOException
    {
        long $l0;
        org.apache.poi.poifs.nio.FileBackedDataSource r0;
        java.nio.channels.FileChannel $r1;

        r0 := @this: org.apache.poi.poifs.nio.FileBackedDataSource;

        $r1 = r0.<org.apache.poi.poifs.nio.FileBackedDataSource: java.nio.channels.FileChannel channel>;

        $l0 = virtualinvoke $r1.<java.nio.channels.FileChannel: long size()>();

        return $l0;
    }

    public void close() throws java.io.IOException
    {
        java.io.RandomAccessFile $r1, $r3;
        org.apache.poi.poifs.nio.FileBackedDataSource r0;
        java.nio.channels.FileChannel $r2;

        r0 := @this: org.apache.poi.poifs.nio.FileBackedDataSource;

        $r1 = r0.<org.apache.poi.poifs.nio.FileBackedDataSource: java.io.RandomAccessFile srcFile>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.poi.poifs.nio.FileBackedDataSource: java.io.RandomAccessFile srcFile>;

        virtualinvoke $r3.<java.io.RandomAccessFile: void close()>();

        goto label2;

     label1:
        $r2 = r0.<org.apache.poi.poifs.nio.FileBackedDataSource: java.nio.channels.FileChannel channel>;

        virtualinvoke $r2.<java.nio.channels.FileChannel: void close()>();

     label2:
        return;
    }

    private static java.io.RandomAccessFile newSrcFile(java.io.File, java.lang.String) throws java.io.FileNotFoundException
    {
        java.io.RandomAccessFile $r1;
        java.lang.String r2, $r4;
        java.io.File r0;
        java.io.FileNotFoundException $r3;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r3 = new java.io.FileNotFoundException;

        $r4 = virtualinvoke r0.<java.io.File: java.lang.String toString()>();

        specialinvoke $r3.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = new java.io.RandomAccessFile;

        specialinvoke $r1.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r0, r2);

        return $r1;
    }
}
