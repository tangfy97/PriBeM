public class com.hp.hpl.jena.sparql.expr.E_Conditional extends com.hp.hpl.jena.sparql.expr.ExprFunction3
{
    private static final java.lang.String functionName;
    private final com.hp.hpl.jena.sparql.expr.Expr condition;
    private final com.hp.hpl.jena.sparql.expr.Expr thenExpr;
    private final com.hp.hpl.jena.sparql.expr.Expr elseExpr;

    public void <init>(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r1, r2, r3;
        com.hp.hpl.jena.sparql.expr.E_Conditional r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Conditional;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r3 := @parameter2: com.hp.hpl.jena.sparql.expr.Expr;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,java.lang.String)>(r1, r2, r3, "if");

        r0.<com.hp.hpl.jena.sparql.expr.E_Conditional: com.hp.hpl.jena.sparql.expr.Expr condition> = r1;

        r0.<com.hp.hpl.jena.sparql.expr.E_Conditional: com.hp.hpl.jena.sparql.expr.Expr thenExpr> = r2;

        r0.<com.hp.hpl.jena.sparql.expr.E_Conditional: com.hp.hpl.jena.sparql.expr.Expr elseExpr> = r3;

        return;
    }

    public com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r1, r2, r3;
        com.hp.hpl.jena.sparql.expr.E_Conditional $r0, r4;

        r4 := @this: com.hp.hpl.jena.sparql.expr.E_Conditional;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r3 := @parameter2: com.hp.hpl.jena.sparql.expr.Expr;

        $r0 = new com.hp.hpl.jena.sparql.expr.E_Conditional;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.E_Conditional: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r2, r3);

        return $r0;
    }

    protected com.hp.hpl.jena.sparql.expr.NodeValue evalSpecial(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r6, $r8;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.expr.Expr $r3, $r4, $r5, $r7;
        com.hp.hpl.jena.sparql.expr.E_Conditional r0;
        com.hp.hpl.jena.sparql.function.FunctionEnv r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Conditional;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $r3 = r0.<com.hp.hpl.jena.sparql.expr.E_Conditional: com.hp.hpl.jena.sparql.expr.Expr condition>;

        interfaceinvoke $r3.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r1, r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.expr.E_Conditional: com.hp.hpl.jena.sparql.expr.Expr condition>;

        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.expr.Expr: boolean isSatisfied(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r1, r2);

        if $z0 == 0 goto label1;

        $r7 = r0.<com.hp.hpl.jena.sparql.expr.E_Conditional: com.hp.hpl.jena.sparql.expr.Expr thenExpr>;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r1, r2);

        return $r8;

     label1:
        $r5 = r0.<com.hp.hpl.jena.sparql.expr.E_Conditional: com.hp.hpl.jena.sparql.expr.Expr elseExpr>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r1, r2);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r0;
        com.hp.hpl.jena.sparql.expr.NodeValue r2, r3, r4;
        com.hp.hpl.jena.sparql.expr.E_Conditional r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.E_Conditional;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r3 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        r4 := @parameter2: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r0 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>()>();

        throw $r0;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.expr.E_Conditional: java.lang.String functionName> = "if";

        return;
    }
}
