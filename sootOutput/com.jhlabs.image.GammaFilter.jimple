public class com.jhlabs.image.GammaFilter extends com.jhlabs.image.TransferFilter
{
    private float rGamma;
    private float gGamma;
    private float bGamma;

    public void <init>()
    {
        com.jhlabs.image.GammaFilter r0;

        r0 := @this: com.jhlabs.image.GammaFilter;

        specialinvoke r0.<com.jhlabs.image.GammaFilter: void <init>(float)>(1.0F);

        return;
    }

    public void <init>(float)
    {
        float f0;
        com.jhlabs.image.GammaFilter r0;

        r0 := @this: com.jhlabs.image.GammaFilter;

        f0 := @parameter0: float;

        specialinvoke r0.<com.jhlabs.image.GammaFilter: void <init>(float,float,float)>(f0, f0, f0);

        return;
    }

    public void <init>(float, float, float)
    {
        float f0, f1, f2;
        com.jhlabs.image.GammaFilter r0;

        r0 := @this: com.jhlabs.image.GammaFilter;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        specialinvoke r0.<com.jhlabs.image.TransferFilter: void <init>()>();

        virtualinvoke r0.<com.jhlabs.image.GammaFilter: void setGamma(float,float,float)>(f0, f1, f2);

        return;
    }

    public void setGamma(float, float, float)
    {
        float f0, f1, f2;
        com.jhlabs.image.GammaFilter r0;

        r0 := @this: com.jhlabs.image.GammaFilter;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        r0.<com.jhlabs.image.GammaFilter: float rGamma> = f0;

        r0.<com.jhlabs.image.GammaFilter: float gGamma> = f1;

        r0.<com.jhlabs.image.GammaFilter: float bGamma> = f2;

        r0.<com.jhlabs.image.TransferFilter: boolean initialized> = 0;

        return;
    }

    public void setGamma(float)
    {
        float f0;
        com.jhlabs.image.GammaFilter r0;

        r0 := @this: com.jhlabs.image.GammaFilter;

        f0 := @parameter0: float;

        virtualinvoke r0.<com.jhlabs.image.GammaFilter: void setGamma(float,float,float)>(f0, f0, f0);

        return;
    }

    public float getGamma()
    {
        float $f0;
        com.jhlabs.image.GammaFilter r0;

        r0 := @this: com.jhlabs.image.GammaFilter;

        $f0 = r0.<com.jhlabs.image.GammaFilter: float rGamma>;

        return $f0;
    }

    protected void initialize()
    {
        byte $b0, $b1, $b2;
        int[] $r1, $r2, $r3, $r4, $r5, $r6;
        com.jhlabs.image.GammaFilter r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;

        r0 := @this: com.jhlabs.image.GammaFilter;

        $f0 = r0.<com.jhlabs.image.GammaFilter: float rGamma>;

        $r1 = virtualinvoke r0.<com.jhlabs.image.GammaFilter: int[] makeTable(float)>($f0);

        r0.<com.jhlabs.image.TransferFilter: int[] rTable> = $r1;

        $f2 = r0.<com.jhlabs.image.GammaFilter: float gGamma>;

        $f1 = r0.<com.jhlabs.image.GammaFilter: float rGamma>;

        $b0 = $f2 cmpl $f1;

        if $b0 != 0 goto label1;

        $r6 = r0.<com.jhlabs.image.TransferFilter: int[] rTable>;

        r0.<com.jhlabs.image.TransferFilter: int[] gTable> = $r6;

        goto label2;

     label1:
        $f3 = r0.<com.jhlabs.image.GammaFilter: float gGamma>;

        $r2 = virtualinvoke r0.<com.jhlabs.image.GammaFilter: int[] makeTable(float)>($f3);

        r0.<com.jhlabs.image.TransferFilter: int[] gTable> = $r2;

     label2:
        $f5 = r0.<com.jhlabs.image.GammaFilter: float bGamma>;

        $f4 = r0.<com.jhlabs.image.GammaFilter: float rGamma>;

        $b1 = $f5 cmpl $f4;

        if $b1 != 0 goto label3;

        $r5 = r0.<com.jhlabs.image.TransferFilter: int[] rTable>;

        r0.<com.jhlabs.image.TransferFilter: int[] bTable> = $r5;

        goto label5;

     label3:
        $f7 = r0.<com.jhlabs.image.GammaFilter: float bGamma>;

        $f6 = r0.<com.jhlabs.image.GammaFilter: float gGamma>;

        $b2 = $f7 cmpl $f6;

        if $b2 != 0 goto label4;

        $r4 = r0.<com.jhlabs.image.TransferFilter: int[] gTable>;

        r0.<com.jhlabs.image.TransferFilter: int[] bTable> = $r4;

        goto label5;

     label4:
        $f8 = r0.<com.jhlabs.image.GammaFilter: float bGamma>;

        $r3 = virtualinvoke r0.<com.jhlabs.image.GammaFilter: int[] makeTable(float)>($f8);

        r0.<com.jhlabs.image.TransferFilter: int[] bTable> = $r3;

     label5:
        return;
    }

    protected int[] makeTable(float)
    {
        com.jhlabs.image.GammaFilter r1;
        int[] r0;
        int i0, i1;
        float f0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r1 := @this: com.jhlabs.image.GammaFilter;

        f0 := @parameter0: float;

        r0 = newarray (int)[256];

        i0 = 0;

     label1:
        if i0 >= 256 goto label3;

        $d0 = (double) i0;

        $d3 = $d0 / 255.0;

        $d1 = (double) f0;

        $d2 = 1.0 / $d1;

        $d4 = staticinvoke <java.lang.Math: double pow(double,double)>($d3, $d2);

        $d5 = 255.0 * $d4;

        $d6 = $d5 + 0.5;

        i1 = (int) $d6;

        if i1 <= 255 goto label2;

        i1 = 255;

     label2:
        r0[i0] = i1;

        i0 = i0 + 1;

        goto label1;

     label3:
        return r0;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.GammaFilter r0;

        r0 := @this: com.jhlabs.image.GammaFilter;

        return "Colors/Gamma...";
    }
}
