public class org.springframework.beans.factory.config.CommonsLogFactoryBean extends java.lang.Object implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.InitializingBean
{
    private org.apache.commons.logging.Log log;

    public void <init>()
    {
        org.springframework.beans.factory.config.CommonsLogFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.CommonsLogFactoryBean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setLogName(java.lang.String)
    {
        org.apache.commons.logging.Log $r2;
        java.lang.String r1;
        org.springframework.beans.factory.config.CommonsLogFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.CommonsLogFactoryBean;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>(r1);

        r0.<org.springframework.beans.factory.config.CommonsLogFactoryBean: org.apache.commons.logging.Log log> = $r2;

        return;
    }

    public void afterPropertiesSet()
    {
        org.apache.commons.logging.Log $r1;
        java.lang.IllegalArgumentException $r2;
        org.springframework.beans.factory.config.CommonsLogFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.CommonsLogFactoryBean;

        $r1 = r0.<org.springframework.beans.factory.config.CommonsLogFactoryBean: org.apache.commons.logging.Log log>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'logName\' is required");

        throw $r2;

     label1:
        return;
    }

    public org.apache.commons.logging.Log getObject()
    {
        org.apache.commons.logging.Log $r1;
        org.springframework.beans.factory.config.CommonsLogFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.CommonsLogFactoryBean;

        $r1 = r0.<org.springframework.beans.factory.config.CommonsLogFactoryBean: org.apache.commons.logging.Log log>;

        return $r1;
    }

    public java.lang.Class getObjectType()
    {
        org.apache.commons.logging.Log $r1, $r2;
        java.lang.Class $r3;
        org.springframework.beans.factory.config.CommonsLogFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.CommonsLogFactoryBean;

        $r1 = r0.<org.springframework.beans.factory.config.CommonsLogFactoryBean: org.apache.commons.logging.Log log>;

        if $r1 == null goto label1;

        $r2 = r0.<org.springframework.beans.factory.config.CommonsLogFactoryBean: org.apache.commons.logging.Log log>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        goto label2;

     label1:
        $r3 = class "Lorg/apache/commons/logging/Log;";

     label2:
        return $r3;
    }

    public boolean isSingleton()
    {
        org.springframework.beans.factory.config.CommonsLogFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.CommonsLogFactoryBean;

        return 1;
    }

    public volatile java.lang.Object getObject() throws java.lang.Exception
    {
        org.apache.commons.logging.Log $r1;
        org.springframework.beans.factory.config.CommonsLogFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.CommonsLogFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.config.CommonsLogFactoryBean: org.apache.commons.logging.Log getObject()>();

        return $r1;
    }
}
