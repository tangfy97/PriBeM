public class com.mycila.inject.internal.cglib.transform.impl.AddInitTransformer extends com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer
{
    private com.mycila.inject.internal.cglib.core.MethodInfo info;

    public void <init>(java.lang.reflect.Method)
    {
        com.mycila.inject.internal.asm.Type $r6, $r7, $r10, $r11;
        com.mycila.inject.internal.cglib.core.MethodInfo $r2, $r3, $r8;
        java.lang.StringBuffer $r13, $r14, $r15;
        int $i0;
        java.lang.String $r16;
        com.mycila.inject.internal.asm.Type[] $r5;
        java.lang.reflect.Method r1;
        boolean $z0, $z1;
        com.mycila.inject.internal.cglib.core.Signature $r4, $r9;
        com.mycila.inject.internal.cglib.transform.impl.AddInitTransformer r0;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AddInitTransformer;

        r1 := @parameter0: java.lang.reflect.Method;

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member)>(r1);

        r0.<com.mycila.inject.internal.cglib.transform.impl.AddInitTransformer: com.mycila.inject.internal.cglib.core.MethodInfo info> = $r2;

        $r3 = r0.<com.mycila.inject.internal.cglib.transform.impl.AddInitTransformer: com.mycila.inject.internal.cglib.core.MethodInfo info>;

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type[] getArgumentTypes()>();

        $i0 = lengthof $r5;

        if $i0 != 1 goto label1;

        $r7 = $r5[0];

        $r6 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $z0 = virtualinvoke $r7.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.mycila.inject.internal.cglib.transform.impl.AddInitTransformer: com.mycila.inject.internal.cglib.core.MethodInfo info>;

        $r9 = virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r10 = virtualinvoke $r9.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type getReturnType()>();

        $r11 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        $z1 = virtualinvoke $r10.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label2;

     label1:
        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" illegal signature");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label2:
        return;
    }

    public com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int, com.mycila.inject.internal.cglib.core.Signature, com.mycila.inject.internal.asm.Type[])
    {
        com.mycila.inject.internal.cglib.transform.impl.AddInitTransformer$1 $r5;
        com.mycila.inject.internal.cglib.core.Signature r1;
        com.mycila.inject.internal.cglib.transform.impl.AddInitTransformer r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r3;
        int i0;
        java.lang.String $r4;
        com.mycila.inject.internal.asm.Type[] r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AddInitTransformer;

        i0 := @parameter0: int;

        r1 := @parameter1: com.mycila.inject.internal.cglib.core.Signature;

        r2 := @parameter2: com.mycila.inject.internal.asm.Type[];

        $r3 = specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(i0, r1, r2);

        $r4 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 == 0 goto label1;

        $r5 = new com.mycila.inject.internal.cglib.transform.impl.AddInitTransformer$1;

        specialinvoke $r5.<com.mycila.inject.internal.cglib.transform.impl.AddInitTransformer$1: void <init>(com.mycila.inject.internal.cglib.transform.impl.AddInitTransformer,com.mycila.inject.internal.cglib.core.CodeEmitter)>(r0, $r3);

        return $r5;

     label1:
        return $r3;
    }

    static com.mycila.inject.internal.cglib.core.MethodInfo access$000(com.mycila.inject.internal.cglib.transform.impl.AddInitTransformer)
    {
        com.mycila.inject.internal.cglib.transform.impl.AddInitTransformer r0;
        com.mycila.inject.internal.cglib.core.MethodInfo $r1;

        r0 := @parameter0: com.mycila.inject.internal.cglib.transform.impl.AddInitTransformer;

        $r1 = r0.<com.mycila.inject.internal.cglib.transform.impl.AddInitTransformer: com.mycila.inject.internal.cglib.core.MethodInfo info>;

        return $r1;
    }
}
