public class com.hp.hpl.jena.ontology.impl.OntResourceImpl extends com.hp.hpl.jena.rdf.model.impl.ResourceImpl implements com.hp.hpl.jena.ontology.OntResource
{
    public static final java.lang.String[] KNOWN_LANGUAGES;
    public static com.hp.hpl.jena.enhanced.Implementation factory;
    private static final org.slf4j.Logger log;

    public void <init>(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.enhanced.EnhGraph)
    {
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.enhanced.EnhGraph r2;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.enhanced.EnhGraph;

        specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ResourceImpl: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.enhanced.EnhGraph)>(r1, r2);

        return;
    }

    public com.hp.hpl.jena.ontology.OntModel getOntModel()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Model $r1;
        com.hp.hpl.jena.ontology.OntModel $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $z0 = $r1 instanceof com.hp.hpl.jena.ontology.OntModel;

        if $z0 == 0 goto label1;

        $r2 = (com.hp.hpl.jena.ontology.OntModel) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public com.hp.hpl.jena.ontology.Profile getProfile()
    {
        com.hp.hpl.jena.shared.JenaException $r5;
        com.hp.hpl.jena.ontology.Profile $r3;
        java.lang.ClassCastException $r4;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Model $r1;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;
        java.lang.String $r8, $r11;
        com.hp.hpl.jena.ontology.OntModel $r2;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r2 = (com.hp.hpl.jena.ontology.OntModel) $r1;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.ontology.Profile getProfile()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new com.hp.hpl.jena.shared.JenaException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource ");

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not attached to an OntModel, so cannot access its language profile");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.String)>($r11);

        throw $r5;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public boolean isOntLanguageTerm()
    {
        java.lang.String[] $r1, $r3;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        int $i0, i1;
        java.lang.String $r2, $r4;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean isAnon()>();

        if $z0 != 0 goto label3;

        i1 = 0;

     label1:
        $r1 = <com.hp.hpl.jena.ontology.impl.OntResourceImpl: java.lang.String[] KNOWN_LANGUAGES>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label3;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: java.lang.String getURI()>();

        $r3 = <com.hp.hpl.jena.ontology.impl.OntResourceImpl: java.lang.String[] KNOWN_LANGUAGES>;

        $r4 = $r3[i1];

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>($r4);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public void setSameAs(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property SAME_AS()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void setPropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "SAME_AS", r3);

        return;
    }

    public void addSameAs(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property SAME_AS()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void addPropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "SAME_AS", r3);

        return;
    }

    public com.hp.hpl.jena.ontology.OntResource getSameAs()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.ontology.OntResource $r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property SAME_AS()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.OntResource objectAsResource(com.hp.hpl.jena.rdf.model.Property,java.lang.String)>($r2, "SAME_AS");

        return $r3;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator listSameAs()
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property SAME_AS()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.util.iterator.ExtendedIterator listAs(com.hp.hpl.jena.rdf.model.Property,java.lang.String,java.lang.Class)>($r2, "SAME_AS", class "Lcom/hp/hpl/jena/ontology/OntResource;");

        return $r3;
    }

    public boolean isSameAs(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property SAME_AS()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean hasPropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "SAME_AS", r3);

        return $z0;
    }

    public void removeSameAs(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property SAME_AS()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void removePropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "SAME_AS", r3);

        return;
    }

    public void setDifferentFrom(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property DIFFERENT_FROM()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void setPropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "DIFFERENT_FROM", r3);

        return;
    }

    public void addDifferentFrom(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property DIFFERENT_FROM()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void addPropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "DIFFERENT_FROM", r3);

        return;
    }

    public com.hp.hpl.jena.ontology.OntResource getDifferentFrom()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.ontology.OntResource $r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property DIFFERENT_FROM()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.OntResource objectAsResource(com.hp.hpl.jena.rdf.model.Property,java.lang.String)>($r2, "DIFFERENT_FROM");

        return $r3;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator listDifferentFrom()
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property DIFFERENT_FROM()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.util.iterator.ExtendedIterator listAs(com.hp.hpl.jena.rdf.model.Property,java.lang.String,java.lang.Class)>($r2, "DIFFERENT_FROM", class "Lcom/hp/hpl/jena/ontology/OntResource;");

        return $r3;
    }

    public boolean isDifferentFrom(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property DIFFERENT_FROM()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean hasPropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "DIFFERENT_FROM", r3);

        return $z0;
    }

    public void removeDifferentFrom(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property DIFFERENT_FROM()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void removePropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "DIFFERENT_FROM", r3);

        return;
    }

    public void setSeeAlso(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property SEE_ALSO()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void setPropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "SEE_ALSO", r3);

        return;
    }

    public void addSeeAlso(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property SEE_ALSO()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void addPropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "SEE_ALSO", r3);

        return;
    }

    public com.hp.hpl.jena.rdf.model.Resource getSeeAlso()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.ontology.OntResource $r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property SEE_ALSO()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.OntResource objectAsResource(com.hp.hpl.jena.rdf.model.Property,java.lang.String)>($r2, "SEE_ALSO");

        return $r3;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator listSeeAlso()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsOntResourceMapper $r7;
        com.hp.hpl.jena.ontology.Profile $r1, $r3;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6, $r8;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r5;
        com.hp.hpl.jena.rdf.model.Property $r2, $r4;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property SEE_ALSO()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>($r2, "SEE_ALSO");

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property SEE_ALSO()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r4);

        $r6 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r5);

        $r7 = new com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsOntResourceMapper;

        specialinvoke $r7.<com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsOntResourceMapper: void <init>()>();

        $r8 = interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>($r7);

        return $r8;
    }

    public boolean hasSeeAlso(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property SEE_ALSO()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean hasPropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "SEE_ALSO", r3);

        return $z0;
    }

    public void removeSeeAlso(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property SEE_ALSO()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void removePropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "SEE_ALSO", r3);

        return;
    }

    public void setIsDefinedBy(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property IS_DEFINED_BY()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void setPropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "IS_DEFINED_BY", r3);

        return;
    }

    public void addIsDefinedBy(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property IS_DEFINED_BY()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void addPropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "IS_DEFINED_BY", r3);

        return;
    }

    public com.hp.hpl.jena.rdf.model.Resource getIsDefinedBy()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.ontology.OntResource $r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property IS_DEFINED_BY()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.OntResource objectAsResource(com.hp.hpl.jena.rdf.model.Property,java.lang.String)>($r2, "IS_DEFINED_BY");

        return $r3;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator listIsDefinedBy()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsOntResourceMapper $r7;
        com.hp.hpl.jena.ontology.Profile $r1, $r3;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6, $r8;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r5;
        com.hp.hpl.jena.rdf.model.Property $r2, $r4;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property IS_DEFINED_BY()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>($r2, "IS_DEFINED_BY");

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property IS_DEFINED_BY()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r4);

        $r6 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r5);

        $r7 = new com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsOntResourceMapper;

        specialinvoke $r7.<com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsOntResourceMapper: void <init>()>();

        $r8 = interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>($r7);

        return $r8;
    }

    public boolean isDefinedBy(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property IS_DEFINED_BY()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean hasPropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "IS_DEFINED_BY", r3);

        return $z0;
    }

    public void removeDefinedBy(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property IS_DEFINED_BY()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void removePropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "IS_DEFINED_BY", r3);

        return;
    }

    public void setVersionInfo(java.lang.String)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2, $r4;
        com.hp.hpl.jena.ontology.Profile $r1, $r3;
        java.lang.String r5;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r5 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property VERSION_INFO()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>($r2, "VERSION_INFO");

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property VERSION_INFO()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Resource removeAll(com.hp.hpl.jena.rdf.model.Property)>($r4);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void addVersionInfo(java.lang.String)>(r5);

        return;
    }

    public void addVersionInfo(java.lang.String)
    {
        com.hp.hpl.jena.ontology.Profile $r1, $r3;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2, $r4;
        com.hp.hpl.jena.rdf.model.Model $r5;
        java.lang.String r6;
        com.hp.hpl.jena.rdf.model.Literal $r7;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r6 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property VERSION_INFO()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>($r2, "VERSION_INFO");

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property VERSION_INFO()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r7 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createLiteral(java.lang.String)>(r6);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r4, $r7);

        return;
    }

    public java.lang.String getVersionInfo()
    {
        com.hp.hpl.jena.shared.PropertyNotFoundException $r7;
        com.hp.hpl.jena.ontology.Profile $r1, $r3;
        com.hp.hpl.jena.rdf.model.Statement $r5;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2, $r4;
        java.lang.String $r6;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property VERSION_INFO()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>($r2, "VERSION_INFO");

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property VERSION_INFO()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r4);

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: java.lang.String getString()>();

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        return null;

        catch com.hp.hpl.jena.shared.PropertyNotFoundException from label1 to label2 with label3;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator listVersionInfo()
    {
        com.hp.hpl.jena.ontology.Profile $r1, $r3;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsStringMapper $r7;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6, $r8;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r5;
        com.hp.hpl.jena.rdf.model.Property $r2, $r4;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property VERSION_INFO()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>($r2, "VERSION_INFO");

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property VERSION_INFO()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r4);

        $r6 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r5);

        $r7 = new com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsStringMapper;

        specialinvoke $r7.<com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsStringMapper: void <init>(com.hp.hpl.jena.ontology.impl.OntResourceImpl)>(r0);

        $r8 = interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>($r7);

        return $r8;
    }

    public boolean hasVersionInfo(java.lang.String)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2, $r4;
        com.hp.hpl.jena.ontology.Profile $r1, $r3;
        java.lang.String r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r5 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property VERSION_INFO()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>($r2, "VERSION_INFO");

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property VERSION_INFO()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property,java.lang.String)>($r4, r5);

        return $z0;
    }

    public void removeVersionInfo(java.lang.String)
    {
        com.hp.hpl.jena.ontology.Profile $r1, $r6;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2, $r7;
        com.hp.hpl.jena.rdf.model.Model $r5;
        java.lang.String r3;
        com.hp.hpl.jena.rdf.model.Literal $r4;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property VERSION_INFO()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>($r2, "VERSION_INFO");

        $r4 = staticinvoke <com.hp.hpl.jena.rdf.model.ResourceFactory: com.hp.hpl.jena.rdf.model.Literal createPlainLiteral(java.lang.String)>(r3);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property VERSION_INFO()>();

        interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model remove(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r0, $r7, $r4);

        return;
    }

    public void setLabel(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2, $r4;
        com.hp.hpl.jena.ontology.Profile $r1, $r3;
        java.lang.String r5, r6;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property LABEL()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>($r2, "LABEL");

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property LABEL()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Resource removeAll(com.hp.hpl.jena.rdf.model.Property)>($r4);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void addLabel(java.lang.String,java.lang.String)>(r5, r6);

        return;
    }

    public void addLabel(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Model $r1;
        java.lang.String r2, r3;
        com.hp.hpl.jena.rdf.model.Literal $r4;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r4 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createLiteral(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void addLabel(com.hp.hpl.jena.rdf.model.Literal)>($r4);

        return;
    }

    public void addLabel(com.hp.hpl.jena.rdf.model.Literal)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Literal r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Literal;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property LABEL()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void addPropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "LABEL", r3);

        return;
    }

    public java.lang.String getLabel(java.lang.String)
    {
        com.hp.hpl.jena.shared.PropertyNotFoundException $r12;
        com.hp.hpl.jena.ontology.Profile $r1, $r4, $r8;
        com.hp.hpl.jena.rdf.model.Statement $r6;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r10;
        com.hp.hpl.jena.rdf.model.Property $r2, $r5, $r9;
        int $i0;
        java.lang.String r3, $r7, $r11;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property LABEL()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>($r2, "LABEL");

        if r3 == null goto label1;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label4;

     label1:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property LABEL()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r5);

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Statement: java.lang.String getString()>();

     label2:
        return $r7;

     label3:
        $r12 := @caughtexception;

        return null;

     label4:
        $r8 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property LABEL()>();

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r9);

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: java.lang.String selectLang(com.hp.hpl.jena.rdf.model.StmtIterator,java.lang.String)>($r10, r3);

        return $r11;

        catch com.hp.hpl.jena.shared.PropertyNotFoundException from label1 to label2 with label3;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator listLabels(java.lang.String)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl$LangTagFilter $r7;
        com.hp.hpl.jena.ontology.Profile $r1, $r3;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6, $r9, $r11;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectMapper $r10;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r5;
        com.hp.hpl.jena.rdf.model.Property $r2, $r4;
        java.lang.String r8;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r8 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property LABEL()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>($r2, "LABEL");

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property LABEL()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r4);

        $r6 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r5);

        $r7 = new com.hp.hpl.jena.ontology.impl.OntResourceImpl$LangTagFilter;

        specialinvoke $r7.<com.hp.hpl.jena.ontology.impl.OntResourceImpl$LangTagFilter: void <init>(com.hp.hpl.jena.ontology.impl.OntResourceImpl,java.lang.String)>(r0, r8);

        $r9 = interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(com.hp.hpl.jena.util.iterator.Filter)>($r7);

        $r10 = new com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectMapper;

        specialinvoke $r10.<com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectMapper: void <init>()>();

        $r11 = interfaceinvoke $r9.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>($r10);

        return $r11;
    }

    public boolean hasLabel(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Model $r1;
        java.lang.String r2, r3;
        com.hp.hpl.jena.rdf.model.Literal $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r4 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createLiteral(java.lang.String,java.lang.String)>(r2, r3);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean hasLabel(com.hp.hpl.jena.rdf.model.Literal)>($r4);

        return $z0;
    }

    public boolean hasLabel(com.hp.hpl.jena.rdf.model.Literal)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        java.lang.Object $r4;
        java.lang.String $r2;
        com.hp.hpl.jena.rdf.model.Literal r1;
        boolean $z0, z1;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Literal;

        z1 = 0;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLanguage()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.util.iterator.ExtendedIterator listLabels(java.lang.String)>($r2);

     label1:
        if z1 != 0 goto label2;

        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        z1 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Literal: boolean equals(java.lang.Object)>($r4);

        goto label1;

     label2:
        interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return z1;
    }

    public void removeLabel(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Model $r1;
        java.lang.String r2, r3;
        com.hp.hpl.jena.rdf.model.Literal $r4;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r4 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createLiteral(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void removeLabel(com.hp.hpl.jena.rdf.model.Literal)>($r4);

        return;
    }

    public void removeLabel(com.hp.hpl.jena.rdf.model.Literal)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Literal r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Literal;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property LABEL()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void removePropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "LABEL", r3);

        return;
    }

    public void setComment(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2, $r4;
        com.hp.hpl.jena.ontology.Profile $r1, $r3;
        java.lang.String r5, r6;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property COMMENT()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>($r2, "COMMENT");

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property COMMENT()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Resource removeAll(com.hp.hpl.jena.rdf.model.Property)>($r4);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void addComment(java.lang.String,java.lang.String)>(r5, r6);

        return;
    }

    public void addComment(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Model $r1;
        java.lang.String r2, r3;
        com.hp.hpl.jena.rdf.model.Literal $r4;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r4 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createLiteral(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void addComment(com.hp.hpl.jena.rdf.model.Literal)>($r4);

        return;
    }

    public void addComment(com.hp.hpl.jena.rdf.model.Literal)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2, $r4;
        com.hp.hpl.jena.ontology.Profile $r1, $r3;
        com.hp.hpl.jena.rdf.model.Literal r5;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r5 := @parameter0: com.hp.hpl.jena.rdf.model.Literal;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property COMMENT()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>($r2, "COMMENT");

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property COMMENT()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r4, r5);

        return;
    }

    public java.lang.String getComment(java.lang.String)
    {
        com.hp.hpl.jena.shared.PropertyNotFoundException $r12;
        com.hp.hpl.jena.ontology.Profile $r1, $r4, $r8;
        com.hp.hpl.jena.rdf.model.Statement $r10;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r6;
        com.hp.hpl.jena.rdf.model.Property $r2, $r5, $r9;
        java.lang.String r3, $r7, $r11;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property COMMENT()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>($r2, "COMMENT");

        if r3 != null goto label4;

     label1:
        $r8 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property COMMENT()>();

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r9);

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.Statement: java.lang.String getString()>();

     label2:
        return $r11;

     label3:
        $r12 := @caughtexception;

        return null;

     label4:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property COMMENT()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r5);

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: java.lang.String selectLang(com.hp.hpl.jena.rdf.model.StmtIterator,java.lang.String)>($r6, r3);

        return $r7;

        catch com.hp.hpl.jena.shared.PropertyNotFoundException from label1 to label2 with label3;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator listComments(java.lang.String)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl$LangTagFilter $r7;
        com.hp.hpl.jena.ontology.Profile $r1, $r3;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6, $r9, $r11;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectMapper $r10;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r5;
        com.hp.hpl.jena.rdf.model.Property $r2, $r4;
        java.lang.String r8;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r8 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property COMMENT()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>($r2, "COMMENT");

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property COMMENT()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r4);

        $r6 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r5);

        $r7 = new com.hp.hpl.jena.ontology.impl.OntResourceImpl$LangTagFilter;

        specialinvoke $r7.<com.hp.hpl.jena.ontology.impl.OntResourceImpl$LangTagFilter: void <init>(com.hp.hpl.jena.ontology.impl.OntResourceImpl,java.lang.String)>(r0, r8);

        $r9 = interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(com.hp.hpl.jena.util.iterator.Filter)>($r7);

        $r10 = new com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectMapper;

        specialinvoke $r10.<com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectMapper: void <init>()>();

        $r11 = interfaceinvoke $r9.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>($r10);

        return $r11;
    }

    public boolean hasComment(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Model $r1;
        java.lang.String r2, r3;
        com.hp.hpl.jena.rdf.model.Literal $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r4 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createLiteral(java.lang.String,java.lang.String)>(r2, r3);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean hasComment(com.hp.hpl.jena.rdf.model.Literal)>($r4);

        return $z0;
    }

    public boolean hasComment(com.hp.hpl.jena.rdf.model.Literal)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        java.lang.Object $r4;
        java.lang.String $r2;
        com.hp.hpl.jena.rdf.model.Literal r1;
        boolean $z0, z1;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Literal;

        z1 = 0;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLanguage()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.util.iterator.ExtendedIterator listComments(java.lang.String)>($r2);

     label1:
        if z1 != 0 goto label2;

        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        z1 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Literal: boolean equals(java.lang.Object)>($r4);

        goto label1;

     label2:
        interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return z1;
    }

    public void removeComment(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Model $r1;
        java.lang.String r2, r3;
        com.hp.hpl.jena.rdf.model.Literal $r4;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r4 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createLiteral(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void removeComment(com.hp.hpl.jena.rdf.model.Literal)>($r4);

        return;
    }

    public void removeComment(com.hp.hpl.jena.rdf.model.Literal)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Literal r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Literal;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property COMMENT()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void removePropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "COMMENT", r3);

        return;
    }

    public void setRDFType(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Resource r1;
        com.hp.hpl.jena.rdf.model.Property $r2;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void setPropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "rdf:type", r1);

        return;
    }

    public void addRDFType(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Resource r1;
        com.hp.hpl.jena.rdf.model.Property $r2;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void addPropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "rdf:type", r1);

        return;
    }

    public com.hp.hpl.jena.rdf.model.Resource getRDFType()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Resource $r1;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Resource getRDFType(boolean)>(0);

        return $r1;
    }

    public com.hp.hpl.jena.rdf.model.Resource getRDFType(boolean)
    {
        java.lang.Throwable $r4;
        com.hp.hpl.jena.rdf.model.Resource r2, $r6;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1, r5;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        java.lang.Object $r3;
        boolean z0, $z1;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        z0 := @parameter0: boolean;

        r5 = null;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.util.iterator.ExtendedIterator listRDFTypes(boolean)>(z0);

        r5 = $r1;

        $z1 = interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        $r6 = (com.hp.hpl.jena.rdf.model.Resource) $r3;

        goto label3;

     label2:
        $r6 = null;

     label3:
        r2 = $r6;

     label4:
        if $r1 == null goto label5;

        interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

     label5:
        return r2;

     label6:
        $r4 := @caughtexception;

     label7:
        if r5 == null goto label8;

        interfaceinvoke r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator listRDFTypes(boolean)
    {
        com.hp.hpl.jena.ontology.Profile $r2;
        com.hp.hpl.jena.util.iterator.UniqueFilter $r5;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4, $r6;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r1, $r3;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        z0 := @parameter0: boolean;

        $r1 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property SUB_CLASS_OF()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.util.iterator.ExtendedIterator listDirectPropertyValues(com.hp.hpl.jena.rdf.model.Property,java.lang.String,java.lang.Class,com.hp.hpl.jena.rdf.model.Property,boolean,boolean)>($r1, "rdf:type", class "Lcom/hp/hpl/jena/rdf/model/Resource;", $r3, z0, 0);

        $r5 = new com.hp.hpl.jena.util.iterator.UniqueFilter;

        specialinvoke $r5.<com.hp.hpl.jena.util.iterator.UniqueFilter: void <init>()>();

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(com.hp.hpl.jena.util.iterator.Filter)>($r5);

        return $r6;
    }

    public boolean hasRDFType(java.lang.String)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Model $r1;
        java.lang.String r2;
        com.hp.hpl.jena.rdf.model.Resource $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Resource getResource(java.lang.String)>(r2);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean hasRDFType(com.hp.hpl.jena.rdf.model.Resource)>($r3);

        return $z0;
    }

    public boolean hasRDFType(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Resource r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean hasRDFType(com.hp.hpl.jena.rdf.model.Resource,java.lang.String,boolean)>(r1, "unknown", 0);

        return $z0;
    }

    public boolean hasRDFType(com.hp.hpl.jena.rdf.model.Resource, boolean)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Resource r1;
        boolean z0, $z1;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean hasRDFType(com.hp.hpl.jena.rdf.model.Resource,java.lang.String,boolean)>(r1, "unknown", z0);

        return $z1;
    }

    protected boolean hasRDFType(com.hp.hpl.jena.rdf.model.Resource, java.lang.String, boolean)
    {
        java.lang.Throwable $r6;
        com.hp.hpl.jena.rdf.model.Resource r1;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3, r7;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r5;
        java.lang.Object $r4;
        java.lang.String r2;
        boolean z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>(r1, r2);

        if z0 != 0 goto label01;

        $r5 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean hasPropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r5, "rdf:type", r1);

        return $z3;

     label01:
        r7 = null;

     label02:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.util.iterator.ExtendedIterator listRDFTypes(boolean)>(1);

        r7 = $r3;

     label03:
        $z1 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        $z2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label03;

     label04:
        if $r3 == null goto label05;

        interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

     label05:
        return 1;

     label06:
        if $r3 == null goto label07;

        interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

     label07:
        return 0;

     label08:
        $r6 := @caughtexception;

     label09:
        if r7 == null goto label10;

        interfaceinvoke r7.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

     label10:
        throw $r6;

        catch java.lang.Throwable from label02 to label04 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void removeRDFType(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Resource r1;
        com.hp.hpl.jena.rdf.model.Property $r2;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void removePropertyValue(com.hp.hpl.jena.rdf.model.Property,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, "rdf:type", r1);

        return;
    }

    public int getCardinality(com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.rdf.model.NodeIterator $r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property r1;
        int i0;
        com.hp.hpl.jena.util.iterator.UniqueFilter $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        i0 = 0;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.NodeIterator listPropertyValues(com.hp.hpl.jena.rdf.model.Property)>(r1);

        $r3 = new com.hp.hpl.jena.util.iterator.UniqueFilter;

        specialinvoke $r3.<com.hp.hpl.jena.util.iterator.UniqueFilter: void <init>()>();

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.NodeIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(com.hp.hpl.jena.util.iterator.Filter)>($r3);

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        return i0;
    }

    public void setPropertyValue(com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r2;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property r1;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.RDFNode;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Resource removeAll(com.hp.hpl.jena.rdf.model.Property)>(r1);

        if r2 == null goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, r2);

     label1:
        return;
    }

    public com.hp.hpl.jena.rdf.model.RDFNode getPropertyValue(com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r3, $r4;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property r1;
        com.hp.hpl.jena.rdf.model.Statement $r2;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Statement getProperty(com.hp.hpl.jena.rdf.model.Property)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r4 = staticinvoke <com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.RDFNode asOntResource(com.hp.hpl.jena.rdf.model.RDFNode)>($r3);

        return $r4;
    }

    public com.hp.hpl.jena.rdf.model.NodeIterator listPropertyValues(com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsOntResourceMapper $r4;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r1;
        com.hp.hpl.jena.rdf.model.StmtIterator $r3;
        com.hp.hpl.jena.rdf.model.Property r2;
        com.hp.hpl.jena.rdf.model.impl.NodeIteratorImpl $r0;

        r1 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        $r0 = new com.hp.hpl.jena.rdf.model.impl.NodeIteratorImpl;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>(r2);

        $r4 = new com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsOntResourceMapper;

        specialinvoke $r4.<com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsOntResourceMapper: void <init>()>();

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>($r4);

        specialinvoke $r0.<com.hp.hpl.jena.rdf.model.impl.NodeIteratorImpl: void <init>(java.util.Iterator,java.lang.Object)>($r5, null);

        return $r0;
    }

    public void remove()
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r6, $r8;
        com.hp.hpl.jena.rdf.model.Property $r5, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.hp.hpl.jena.rdf.model.RDFNode $r15, $r20, $r22;
        java.util.Set $r17;
        java.lang.StringBuilder $r23, $r26, $r27;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl $r16;
        java.util.ArrayList $r1, $r2;
        java.util.HashSet $r0;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r3;
        java.lang.String $r25, $r28;
        org.slf4j.Logger $r24;
        java.util.Iterator $r9, $r10, $r11;
        com.hp.hpl.jena.ontology.Profile $r4;
        com.hp.hpl.jena.rdf.model.Statement $r13, r31;
        com.hp.hpl.jena.rdf.model.Resource $r21, r32;
        com.hp.hpl.jena.rdf.model.Model $r7;
        java.lang.Object $r12, $r14, $r18, $r29, $r30;

        r3 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property FIRST()>();

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

     label01:
        $z0 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r30 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.StmtIterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r30);

        goto label01;

     label02:
        $r7 = virtualinvoke r3.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, null, r3);

     label03:
        $z1 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r29 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.StmtIterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r29);

        goto label03;

     label04:
        $r9 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label08;

        $r18 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r31 = (com.hp.hpl.jena.rdf.model.Statement) $r18;

        $r19 = interfaceinvoke r31.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        $z5 = virtualinvoke $r19.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z5 == 0 goto label06;

        $r22 = interfaceinvoke r31.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z8 = virtualinvoke $r22.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z8 == 0 goto label06;

        $r24 = <com.hp.hpl.jena.ontology.impl.OntResourceImpl: org.slf4j.Logger log>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke r3.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: java.lang.String toString()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is referened from an RDFList, so will not be fully removed");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String)>($r28);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r31);

        goto label07;

     label06:
        $r20 = interfaceinvoke r31.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z6 = $r20 instanceof com.hp.hpl.jena.rdf.model.Resource;

        if $z6 == 0 goto label07;

        $r21 = interfaceinvoke r31.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $z7 = interfaceinvoke $r21.<com.hp.hpl.jena.rdf.model.Resource: boolean canAs(java.lang.Class)>(class "Lcom/hp/hpl/jena/rdf/model/RDFList;");

        if $z7 == 0 goto label07;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r21);

     label07:
        goto label05;

     label08:
        $r10 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z3 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r14 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r32 = (com.hp.hpl.jena.rdf.model.Resource) $r14;

        $r15 = interfaceinvoke r32.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/rdf/model/RDFList;");

        $r16 = (com.hp.hpl.jena.rdf.model.impl.RDFListImpl) $r15;

        $r17 = virtualinvoke $r16.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: java.util.Set collectStatements()>();

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r17);

        goto label09;

     label10:
        interfaceinvoke $r0.<java.util.Set: boolean removeAll(java.util.Collection)>($r2);

        $r11 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z4 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label12;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (com.hp.hpl.jena.rdf.model.Statement) $r12;

        interfaceinvoke $r13.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Statement remove()>();

        goto label11;

     label12:
        return;
    }

    public void removeProperty(com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r3;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property r2;
        com.hp.hpl.jena.rdf.model.Model $r1;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r3 := @parameter1: com.hp.hpl.jena.rdf.model.RDFNode;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model remove(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r0, r2, r3);

        return;
    }

    public com.hp.hpl.jena.ontology.AnnotationProperty asAnnotationProperty()
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r1;
        com.hp.hpl.jena.ontology.AnnotationProperty $r2;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/AnnotationProperty;");

        $r2 = (com.hp.hpl.jena.ontology.AnnotationProperty) $r1;

        return $r2;
    }

    public com.hp.hpl.jena.ontology.OntProperty asProperty()
    {
        com.hp.hpl.jena.ontology.OntProperty $r2;
        com.hp.hpl.jena.rdf.model.RDFNode $r1;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/OntProperty;");

        $r2 = (com.hp.hpl.jena.ontology.OntProperty) $r1;

        return $r2;
    }

    public com.hp.hpl.jena.ontology.ObjectProperty asObjectProperty()
    {
        com.hp.hpl.jena.ontology.ObjectProperty $r2;
        com.hp.hpl.jena.rdf.model.RDFNode $r1;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/ObjectProperty;");

        $r2 = (com.hp.hpl.jena.ontology.ObjectProperty) $r1;

        return $r2;
    }

    public com.hp.hpl.jena.ontology.DatatypeProperty asDatatypeProperty()
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r1;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.ontology.DatatypeProperty $r2;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/DatatypeProperty;");

        $r2 = (com.hp.hpl.jena.ontology.DatatypeProperty) $r1;

        return $r2;
    }

    public com.hp.hpl.jena.ontology.Individual asIndividual()
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r1;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.ontology.Individual $r2;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/Individual;");

        $r2 = (com.hp.hpl.jena.ontology.Individual) $r1;

        return $r2;
    }

    public com.hp.hpl.jena.ontology.OntClass asClass()
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r1;
        com.hp.hpl.jena.ontology.OntClass $r2;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/OntClass;");

        $r2 = (com.hp.hpl.jena.ontology.OntClass) $r1;

        return $r2;
    }

    public com.hp.hpl.jena.ontology.Ontology asOntology()
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r1;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.ontology.Ontology $r2;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/Ontology;");

        $r2 = (com.hp.hpl.jena.ontology.Ontology) $r1;

        return $r2;
    }

    public com.hp.hpl.jena.ontology.AllDifferent asAllDifferent()
    {
        com.hp.hpl.jena.ontology.AllDifferent $r2;
        com.hp.hpl.jena.rdf.model.RDFNode $r1;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/AllDifferent;");

        $r2 = (com.hp.hpl.jena.ontology.AllDifferent) $r1;

        return $r2;
    }

    public com.hp.hpl.jena.ontology.DataRange asDataRange()
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r1;
        com.hp.hpl.jena.ontology.DataRange $r2;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/DataRange;");

        $r2 = (com.hp.hpl.jena.ontology.DataRange) $r1;

        return $r2;
    }

    public boolean isAnnotationProperty()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource $r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource ANNOTATION_PROPERTY()>();

        if $r2 == null goto label1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean canAs(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/AnnotationProperty;");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isProperty()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean canAs(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/OntProperty;");

        return $z0;
    }

    public boolean isObjectProperty()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource $r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource OBJECT_PROPERTY()>();

        if $r2 == null goto label1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean canAs(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/ObjectProperty;");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isDatatypeProperty()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource $r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource DATATYPE_PROPERTY()>();

        if $r2 == null goto label1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean canAs(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/DatatypeProperty;");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isIndividual()
    {
        java.lang.NullPointerException r34, r35, r36, r37;
        com.hp.hpl.jena.rdf.model.StmtIterator $r9, $r21, r32, r33;
        com.hp.hpl.jena.rdf.model.Property $r5, $r8, $r20, $r28;
        com.hp.hpl.jena.ontology.OntModel r2, $r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        com.hp.hpl.jena.reasoner.Reasoner $r26, $r27;
        java.lang.Throwable $r30;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.ontology.Profile $r3, $r6, $r12, $r14, $r24;
        com.hp.hpl.jena.rdf.model.Statement $r10, $r22;
        com.hp.hpl.jena.rdf.model.Resource $r4, $r7, $r11, $r13, $r15, $r16, $r17, $r18, $r19, $r23, $r25;
        com.hp.hpl.jena.rdf.model.Model $r1, $r29;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $z0 = $r1 instanceof com.hp.hpl.jena.ontology.OntModel;

        if $z0 == 0 goto label01;

        $r29 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r31 = (com.hp.hpl.jena.ontology.OntModel) $r29;

        goto label02;

     label01:
        $r31 = null;

     label02:
        r2 = $r31;

        $r3 = interfaceinvoke $r31.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource THING()>();

        if $r4 == null goto label03;

        $r26 = interfaceinvoke $r31.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.reasoner.Reasoner getReasoner()>();

        if $r26 == null goto label03;

        $r27 = interfaceinvoke $r31.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.reasoner.Reasoner getReasoner()>();

        $r28 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property individualAsThingP>;

        $z11 = interfaceinvoke $r27.<com.hp.hpl.jena.reasoner.Reasoner: boolean supportsProperty(com.hp.hpl.jena.rdf.model.Property)>($r28);

        if $z11 == 0 goto label03;

        $z12 = 1;

        goto label04;

     label03:
        $z12 = 0;

     label04:
        r32 = null;

        r33 = null;

     label05:
        if r2 == null goto label24;

        if $z12 != 0 goto label20;

        $r8 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r8);

        r32 = $r9;

     label06:
        $z13 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z13 == 0 goto label17;

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r12 = interfaceinvoke r2.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r13 = interfaceinvoke $r12.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource THING()>();

        $z3 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>($r13);

        if $z3 == 0 goto label10;

     label07:
        if $r9 == null goto label08;

        interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

     label08:
        if r33 == null goto label09;

        interfaceinvoke r33.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

     label09:
        return 1;

     label10:
        $r14 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r15 = interfaceinvoke $r14.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource CLASS()>();

        $z4 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>($r15);

        if $z4 != 0 goto label06;

        $r16 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Resource Resource>;

        $z5 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>($r16);

        if $z5 != 0 goto label06;

        $r17 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource Property>;

        $z6 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>($r17);

        if $z6 != 0 goto label06;

        $r18 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Resource Datatype>;

        $z7 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>($r18);

        if $z7 != 0 goto label06;

        $r19 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource List>;

        $z8 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>($r19);

        if $z8 == 0 goto label11;

        goto label06;

     label11:
        $r20 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r21 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r20);

        r33 = $r21;

     label12:
        $z9 = interfaceinvoke $r21.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z9 == 0 goto label16;

        $r22 = interfaceinvoke $r21.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r23 = interfaceinvoke $r22.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r24 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r25 = interfaceinvoke $r24.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource CLASS()>();

        $z10 = interfaceinvoke $r23.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>($r25);

        if $z10 == 0 goto label12;

     label13:
        if $r9 == null goto label14;

        interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

     label14:
        if $r21 == null goto label15;

        interfaceinvoke $r21.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

     label15:
        return 1;

     label16:
        goto label06;

     label17:
        if $r9 == null goto label18;

        interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

     label18:
        if r33 == null goto label19;

        interfaceinvoke r33.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

     label19:
        return 0;

     label20:
        $r5 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource THING()>();

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r5, $r7);

     label21:
        if null == null goto label22;

        r34 = new java.lang.NullPointerException;

        specialinvoke r34.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: interfaceinvoke i#8_4.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>()");

        throw r34;

     label22:
        if null == null goto label23;

        r35 = new java.lang.NullPointerException;

        specialinvoke r35.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: interfaceinvoke j#11_1.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>()");

        throw r35;

     label23:
        return $z2;

     label24:
        if null == null goto label25;

        r36 = new java.lang.NullPointerException;

        specialinvoke r36.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: interfaceinvoke i#8_3.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>()");

        throw r36;

     label25:
        if null == null goto label30;

        r37 = new java.lang.NullPointerException;

        specialinvoke r37.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: interfaceinvoke j#11_2.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>()");

        throw r37;

     label26:
        $r30 := @caughtexception;

     label27:
        if r32 == null goto label28;

        interfaceinvoke r32.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

     label28:
        if r33 == null goto label29;

        interfaceinvoke r33.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

     label29:
        throw $r30;

     label30:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean canAs(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/Individual;");

        return $z1;

        catch java.lang.Throwable from label05 to label07 with label26;
        catch java.lang.Throwable from label10 to label13 with label26;
        catch java.lang.Throwable from label16 to label17 with label26;
        catch java.lang.Throwable from label20 to label21 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
    }

    public boolean isClass()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean canAs(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/OntClass;");

        return $z0;
    }

    public boolean isOntology()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource $r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource ONTOLOGY()>();

        if $r2 == null goto label1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean canAs(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/Ontology;");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isDataRange()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource $r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource DATARANGE()>();

        if $r2 == null goto label1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean canAs(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/DataRange;");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isAllDifferent()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource $r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource ALL_DIFFERENT()>();

        if $r2 == null goto label1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean canAs(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/AllDifferent;");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected static boolean hasType(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.enhanced.EnhGraph, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.graph.Node r2, $r4, $r6;
        com.hp.hpl.jena.rdf.model.Resource r5;
        com.hp.hpl.jena.enhanced.EnhGraph r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r7;
        com.hp.hpl.jena.rdf.model.Property $r3;
        com.hp.hpl.jena.graph.Graph $r1;
        boolean $z0;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0 := @parameter1: com.hp.hpl.jena.enhanced.EnhGraph;

        r5 := @parameter2: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.enhanced.EnhGraph: com.hp.hpl.jena.graph.Graph asGraph()>();

        $r3 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $r6 = interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        $r7 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, $r4, $r6);

        $z0 = interfaceinvoke $r7.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        interfaceinvoke $r7.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        return $z0;
    }

    protected void checkProfile(java.lang.Object, java.lang.String)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r3;
        com.hp.hpl.jena.ontology.Profile $r4;
        java.lang.Object r0;
        com.hp.hpl.jena.ontology.ProfileException $r1;
        java.lang.String r2;

        r3 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r1 = new com.hp.hpl.jena.ontology.ProfileException;

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.ontology.Profile getProfile()>();

        specialinvoke $r1.<com.hp.hpl.jena.ontology.ProfileException: void <init>(java.lang.String,com.hp.hpl.jena.ontology.Profile)>(r2, $r4);

        throw $r1;

     label1:
        return;
    }

    protected java.lang.String selectLang(com.hp.hpl.jena.rdf.model.StmtIterator, java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r2;
        com.hp.hpl.jena.rdf.model.Statement $r1;
        com.hp.hpl.jena.rdf.model.StmtIterator r0;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r7;
        int $i0;
        java.lang.String $r4, r5, $r6, r8;
        com.hp.hpl.jena.rdf.model.Literal r3;
        boolean $z0, $z1, $z2, $z3;

        r7 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.StmtIterator;

        r5 := @parameter1: java.lang.String;

        r8 = null;

     label1:
        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z1 = $r2 instanceof com.hp.hpl.jena.rdf.model.Literal;

        if $z1 == 0 goto label4;

        r3 = (com.hp.hpl.jena.rdf.model.Literal) $r2;

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLanguage()>();

        $z2 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z2 == 0 goto label2;

        r8 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getString()>();

        goto label5;

     label2:
        if $r4 == null goto label3;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 <= 1 goto label3;

        $r6 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, 2);

        $z3 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z3 == 0 goto label3;

        r8 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getString()>();

        goto label4;

     label3:
        if r8 != null goto label4;

        if $r4 != null goto label4;

        r8 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getString()>();

     label4:
        goto label1;

     label5:
        interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        return r8;
    }

    protected boolean langTagMatch(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r3;
        int $i0, $i1, $i2;
        java.lang.String r0, r1, $r2;
        boolean $z0, $z1, $z2;

        r3 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= $i1 goto label2;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2);

        $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    protected com.hp.hpl.jena.rdf.model.RDFNode objectAs(com.hp.hpl.jena.rdf.model.Property, java.lang.String, java.lang.Class)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r4, $r6;
        com.hp.hpl.jena.shared.PropertyNotFoundException $r7;
        com.hp.hpl.jena.rdf.model.Statement $r3;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.Class r5;
        java.lang.String r2;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.Class;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>(r1, r2);

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>(r1);

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        return null;

        catch com.hp.hpl.jena.shared.PropertyNotFoundException from label1 to label2 with label3;
    }

    protected com.hp.hpl.jena.ontology.OntResource objectAsResource(com.hp.hpl.jena.rdf.model.Property, java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r3;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.String r2;
        com.hp.hpl.jena.ontology.OntResource $r4;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.RDFNode objectAs(com.hp.hpl.jena.rdf.model.Property,java.lang.String,java.lang.Class)>(r1, r2, class "Lcom/hp/hpl/jena/ontology/OntResource;");

        $r4 = (com.hp.hpl.jena.ontology.OntResource) $r3;

        return $r4;
    }

    protected com.hp.hpl.jena.ontology.OntProperty objectAsProperty(com.hp.hpl.jena.rdf.model.Property, java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r3;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property r1;
        com.hp.hpl.jena.ontology.OntProperty $r4;
        java.lang.String r2;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.RDFNode objectAs(com.hp.hpl.jena.rdf.model.Property,java.lang.String,java.lang.Class)>(r1, r2, class "Lcom/hp/hpl/jena/ontology/OntProperty;");

        $r4 = (com.hp.hpl.jena.ontology.OntProperty) $r3;

        return $r4;
    }

    protected int objectAsInt(com.hp.hpl.jena.rdf.model.Property, java.lang.String)
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property r1;
        int $i0;
        java.lang.String r2;
        com.hp.hpl.jena.rdf.model.Statement $r3;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>(r1, r2);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>(r1);

        $i0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Statement: int getInt()>();

        return $i0;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator listAs(com.hp.hpl.jena.rdf.model.Property, java.lang.String, java.lang.Class)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4, $r7;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r3;
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.Class r6;
        java.lang.String r2;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsMapper $r5;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r2 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.Class;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>(r1, r2);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>(r1);

        $r4 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r3);

        $r5 = new com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsMapper;

        specialinvoke $r5.<com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsMapper: void <init>(java.lang.Class)>(r6);

        $r7 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>($r5);

        return $r7;
    }

    protected void addPropertyValue(com.hp.hpl.jena.rdf.model.Property, java.lang.String, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r3;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.String r2;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.hp.hpl.jena.rdf.model.RDFNode;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>(r1, r2);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, r3);

        return;
    }

    protected void setPropertyValue(com.hp.hpl.jena.rdf.model.Property, java.lang.String, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r3;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.String r2;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.hp.hpl.jena.rdf.model.RDFNode;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>(r1, r2);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Resource removeAll(com.hp.hpl.jena.rdf.model.Property)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, r3);

        return;
    }

    protected boolean hasPropertyValue(com.hp.hpl.jena.rdf.model.Property, java.lang.String, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r3;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.hp.hpl.jena.rdf.model.RDFNode;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>(r1, r2);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, r3);

        return $z0;
    }

    protected void addListPropertyValue(com.hp.hpl.jena.rdf.model.Property, java.lang.String, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.ontology.OntologyException $r13;
        com.hp.hpl.jena.rdf.model.RDFList $r7, r11, $r12;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.String r2, $r19;
        com.hp.hpl.jena.ontology.OntModel $r6;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.rdf.model.RDFNode r5, $r9, $r10;
        com.hp.hpl.jena.rdf.model.Statement $r8;
        com.hp.hpl.jena.rdf.model.RDFNode[] $r4;
        com.hp.hpl.jena.rdf.model.Model $r3;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: com.hp.hpl.jena.rdf.model.RDFNode;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>(r1, r2);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property)>(r1);

        if $z0 == 0 goto label3;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>(r1);

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z1 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.RDFNode: boolean canAs(java.lang.Class)>(class "Lcom/hp/hpl/jena/rdf/model/RDFList;");

        if $z1 != 0 goto label1;

        $r13 = new com.hp.hpl.jena.ontology.OntologyException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to add a value to a list-valued property ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but the current value is not a list: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<com.hp.hpl.jena.ontology.OntologyException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label1:
        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/rdf/model/RDFList;");

        r11 = (com.hp.hpl.jena.rdf.model.RDFList) $r10;

        $z2 = interfaceinvoke r11.<com.hp.hpl.jena.rdf.model.RDFList: boolean contains(com.hp.hpl.jena.rdf.model.RDFNode)>(r5);

        if $z2 != 0 goto label2;

        $r12 = interfaceinvoke r11.<com.hp.hpl.jena.rdf.model.RDFList: com.hp.hpl.jena.rdf.model.RDFList 'with'(com.hp.hpl.jena.rdf.model.RDFNode)>(r5);

        if $r12 == r11 goto label2;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Resource removeAll(com.hp.hpl.jena.rdf.model.Property)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, $r12);

     label2:
        goto label4;

     label3:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r6 = (com.hp.hpl.jena.ontology.OntModel) $r3;

        $r4 = newarray (com.hp.hpl.jena.rdf.model.RDFNode)[1];

        $r4[0] = r5;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.rdf.model.RDFList createList(com.hp.hpl.jena.rdf.model.RDFNode[])>($r4);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, $r7);

     label4:
        return;
    }

    protected com.hp.hpl.jena.rdf.model.RDFNode convertToType(com.hp.hpl.jena.rdf.model.Resource, java.lang.String, java.lang.Class)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r5, $r6;
        com.hp.hpl.jena.rdf.model.Resource r1;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property $r4;
        java.lang.Class r3;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>(r1, r2);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: boolean canAs(java.lang.Class)>(r3);

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(r3);

        return $r6;

     label1:
        $r4 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r4, r1);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(r3);

        return $r5;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator listDirectPropertyValues(com.hp.hpl.jena.rdf.model.Property, java.lang.String, java.lang.Class, com.hp.hpl.jena.rdf.model.Property, boolean, boolean)
    {
        com.hp.hpl.jena.graph.Node $r16, $r17;
        com.hp.hpl.jena.enhanced.EnhGraph $r7;
        com.hp.hpl.jena.rdf.model.StmtIterator $r10;
        com.hp.hpl.jena.rdf.model.Property r1, r11, r19;
        com.hp.hpl.jena.ontology.OntModel $r14;
        boolean z0, z1, $z2, $z3;
        com.hp.hpl.jena.reasoner.Reasoner $r12;
        com.hp.hpl.jena.reasoner.InfGraph r23;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0, r3, r4, $r20, $r21;
        java.lang.String r2, $r18;
        com.hp.hpl.jena.graph.Graph $r8, $r13;
        java.util.Iterator r24;
        com.hp.hpl.jena.util.iterator.UniqueFilter $r30;
        com.hp.hpl.jena.util.iterator.Map1 r6, $r22;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl$SubjectAsMapper $r28;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r25, $r27;
        com.hp.hpl.jena.rdf.model.Model $r9, $r15;
        java.lang.Class r5;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsMapper $r29;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.Class;

        r11 := @parameter3: com.hp.hpl.jena.rdf.model.Property;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>(r1, r2);

        r19 = r1;

        if z0 == 0 goto label01;

        $r15 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r16 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $r17 = staticinvoke <com.hp.hpl.jena.reasoner.ReasonerRegistry: com.hp.hpl.jena.graph.Node makeDirect(com.hp.hpl.jena.graph.Node)>($r16);

        $r18 = virtualinvoke $r17.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        r19 = interfaceinvoke $r15.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Property getProperty(java.lang.String)>($r18);

     label01:
        if z1 == 0 goto label02;

        $r20 = null;

        goto label03;

     label02:
        $r20 = r0;

     label03:
        r3 = $r20;

        if z1 == 0 goto label04;

        $r21 = r0;

        goto label05;

     label04:
        $r21 = null;

     label05:
        r4 = $r21;

        if z1 == 0 goto label06;

        $r28 = new com.hp.hpl.jena.ontology.impl.OntResourceImpl$SubjectAsMapper;

        $r22 = $r28;

        specialinvoke $r28.<com.hp.hpl.jena.ontology.impl.OntResourceImpl$SubjectAsMapper: void <init>(java.lang.Class)>(r5);

        goto label07;

     label06:
        $r29 = new com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsMapper;

        $r22 = $r29;

        specialinvoke $r29.<com.hp.hpl.jena.ontology.impl.OntResourceImpl$ObjectAsMapper: void <init>(java.lang.Class)>(r5);

     label07:
        r6 = $r22;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.enhanced.EnhGraph getGraph()>();

        $r14 = (com.hp.hpl.jena.ontology.OntModel) $r7;

        r23 = null;

        $r8 = interfaceinvoke $r14.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.graph.Graph getGraph()>();

        $z2 = $r8 instanceof com.hp.hpl.jena.reasoner.InfGraph;

        if $z2 == 0 goto label08;

        $r13 = interfaceinvoke $r14.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.graph.Graph getGraph()>();

        r23 = (com.hp.hpl.jena.reasoner.InfGraph) $r13;

     label08:
        if z0 == 0 goto label09;

        if r23 == null goto label10;

        $r12 = interfaceinvoke r23.<com.hp.hpl.jena.reasoner.InfGraph: com.hp.hpl.jena.reasoner.Reasoner getReasoner()>();

        $z3 = interfaceinvoke $r12.<com.hp.hpl.jena.reasoner.Reasoner: boolean supportsProperty(com.hp.hpl.jena.rdf.model.Property)>(r19);

        if $z3 == 0 goto label10;

     label09:
        $r9 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r3, r19, r4);

        r24 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>(r6);

        goto label11;

     label10:
        r24 = specialinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: java.util.Iterator computeDirectValues(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Property,boolean,com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.util.iterator.Map1)>(r1, r11, z1, r3, r4, r6);

     label11:
        $r25 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>(r24);

        $r30 = new com.hp.hpl.jena.util.iterator.UniqueFilter;

        specialinvoke $r30.<com.hp.hpl.jena.util.iterator.UniqueFilter: void <init>()>();

        $r27 = interfaceinvoke $r25.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(com.hp.hpl.jena.util.iterator.Filter)>($r30);

        return $r27;
    }

    private java.util.Iterator computeDirectValues(com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Property, boolean, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.util.iterator.Map1)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r5;
        com.hp.hpl.jena.rdf.model.Property r3, r9;
        boolean $z0, $z1, $z2, z3, $z4, $z5;
        java.util.Collection $r19;
        java.util.List $r10, $r13, r24;
        java.util.HashMap $r11;
        java.util.ArrayList $r8, $r14;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        int $i0;
        java.util.Iterator $r12, $r15, $r16;
        com.hp.hpl.jena.util.iterator.Map1 r6;
        com.hp.hpl.jena.rdf.model.Resource r2, r4, r25, r26;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r7;
        com.hp.hpl.jena.rdf.model.Model $r1;
        java.lang.Object $r17, $r18, $r20, $r21, $r22, $r23;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r9 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        z3 := @parameter2: boolean;

        r2 := @parameter3: com.hp.hpl.jena.rdf.model.Resource;

        r4 := @parameter4: com.hp.hpl.jena.rdf.model.Resource;

        r6 := @parameter5: com.hp.hpl.jena.util.iterator.Map1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r5 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r2, r3, r4);

        $r7 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>(r6);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

     label01:
        $z0 = interfaceinvoke $r7.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r23 = interfaceinvoke $r7.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r23);

        goto label01;

     label02:
        staticinvoke <com.hp.hpl.jena.util.ResourceUtils: java.util.List removeEquiv(java.util.List,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Resource)>($r8, r9, r0);

        $z1 = interfaceinvoke $r8.<java.util.List: boolean remove(java.lang.Object)>(r0);

        $r10 = staticinvoke <com.hp.hpl.jena.util.ResourceUtils: java.util.List partition(java.util.List,com.hp.hpl.jena.rdf.model.Property)>($r8, r9);

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r8.<java.util.List: void clear()>();

        $r12 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r20 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.util.List) $r20;

        $i0 = interfaceinvoke r24.<java.util.List: int size()>();

        if $i0 != 1 goto label04;

        $r22 = interfaceinvoke r24.<java.util.List: java.lang.Object get(int)>(0);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r22);

        goto label05;

     label04:
        $r21 = interfaceinvoke r24.<java.util.List: java.lang.Object remove(int)>(0);

        r25 = (com.hp.hpl.jena.rdf.model.Resource) $r21;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, r24);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r25);

     label05:
        goto label03;

     label06:
        $r13 = staticinvoke <com.hp.hpl.jena.util.ResourceUtils: java.util.List maximalLowerElements(java.util.Collection,com.hp.hpl.jena.rdf.model.Property,boolean)>($r8, r9, z3);

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        $r15 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z4 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label09;

        $r17 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r26 = (com.hp.hpl.jena.rdf.model.Resource) $r17;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r26);

        $z5 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r26);

        if $z5 == 0 goto label08;

        $r18 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r26);

        $r19 = (java.util.Collection) $r18;

        interfaceinvoke $r14.<java.util.List: boolean addAll(java.util.Collection)>($r19);

     label08:
        goto label07;

     label09:
        if $z1 == 0 goto label10;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r0);

     label10:
        $r16 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

        return $r16;
    }

    protected void removePropertyValue(com.hp.hpl.jena.rdf.model.Property, java.lang.String, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r4;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl r0;
        com.hp.hpl.jena.rdf.model.Property r1;
        com.hp.hpl.jena.rdf.model.Model $r3;
        java.lang.String r2;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: com.hp.hpl.jena.rdf.model.RDFNode;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void checkProfile(java.lang.Object,java.lang.String)>(r1, r2);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model remove(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r0, r1, r4);

        return;
    }

    private static com.hp.hpl.jena.rdf.model.RDFNode asOntResource(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r0, $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isResource()>();

        if $z0 == 0 goto label1;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/OntResource;");

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    static com.hp.hpl.jena.rdf.model.RDFNode access$000(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r0, $r1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $r1 = staticinvoke <com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.rdf.model.RDFNode asOntResource(com.hp.hpl.jena.rdf.model.RDFNode)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r4;
        java.lang.String[] $r0;
        java.lang.String $r1, $r2;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl$1 $r3;

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "http://www.w3.org/2002/07/owl#";

        $r1 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: java.lang.String getURI()>();

        $r0[1] = $r1;

        $r2 = staticinvoke <com.hp.hpl.jena.vocabulary.RDFS: java.lang.String getURI()>();

        $r0[2] = $r2;

        $r0[3] = "http://www.w3.org/2001/XMLSchema";

        <com.hp.hpl.jena.ontology.impl.OntResourceImpl: java.lang.String[] KNOWN_LANGUAGES> = $r0;

        $r3 = new com.hp.hpl.jena.ontology.impl.OntResourceImpl$1;

        specialinvoke $r3.<com.hp.hpl.jena.ontology.impl.OntResourceImpl$1: void <init>()>();

        <com.hp.hpl.jena.ontology.impl.OntResourceImpl: com.hp.hpl.jena.enhanced.Implementation factory> = $r3;

        $r4 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/impl/OntResourceImpl;");

        <com.hp.hpl.jena.ontology.impl.OntResourceImpl: org.slf4j.Logger log> = $r4;

        return;
    }
}
