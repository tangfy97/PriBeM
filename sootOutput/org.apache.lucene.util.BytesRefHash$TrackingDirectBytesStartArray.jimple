public class org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray extends org.apache.lucene.util.BytesRefHash$BytesStartArray
{
    protected final int initSize;
    private int[] bytesStart;
    protected final java.util.concurrent.atomic.AtomicLong bytesUsed;
    static final boolean $assertionsDisabled;

    public void <init>(int, java.util.concurrent.atomic.AtomicLong)
    {
        int i0;
        org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray r0;
        java.util.concurrent.atomic.AtomicLong r1;

        r0 := @this: org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.atomic.AtomicLong;

        specialinvoke r0.<org.apache.lucene.util.BytesRefHash$BytesStartArray: void <init>()>();

        r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: int initSize> = i0;

        r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: java.util.concurrent.atomic.AtomicLong bytesUsed> = r1;

        return;
    }

    public int[] clear()
    {
        org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray r0;
        long $l3;
        java.util.concurrent.atomic.AtomicLong $r3;
        int[] $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray;

        $r1 = r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: int[] bytesStart>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: java.util.concurrent.atomic.AtomicLong bytesUsed>;

        $r2 = r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: int[] bytesStart>;

        $i0 = lengthof $r2;

        $i1 = neg $i0;

        $i2 = $i1 * 4;

        $l3 = (long) $i2;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l3);

     label1:
        r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: int[] bytesStart> = null;

        return null;
    }

    public int[] grow()
    {
        org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray r0;
        long $l5;
        java.lang.AssertionError $r9;
        int[] $r1, $r2, $r3, $r4, $r5, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        boolean $z0;
        java.util.concurrent.atomic.AtomicLong $r6;

        r0 := @this: org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray;

        $z0 = <org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r8 = r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: int[] bytesStart>;

        if $r8 != null goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $r1 = r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: int[] bytesStart>;

        $i6 = lengthof $r1;

        $r3 = r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: int[] bytesStart>;

        $r2 = r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: int[] bytesStart>;

        $i0 = lengthof $r2;

        $i1 = $i0 + 1;

        $r4 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[],int)>($r3, $i1);

        r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: int[] bytesStart> = $r4;

        $r6 = r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: java.util.concurrent.atomic.AtomicLong bytesUsed>;

        $r5 = r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: int[] bytesStart>;

        $i2 = lengthof $r5;

        $i3 = $i2 - $i6;

        $i4 = $i3 * 4;

        $l5 = (long) $i4;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l5);

        $r7 = r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: int[] bytesStart>;

        return $r7;
    }

    public int[] init()
    {
        org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray r0;
        long $l4;
        java.util.concurrent.atomic.AtomicLong $r3;
        int[] $r1, $r2, $r4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray;

        $i0 = r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: int initSize>;

        $i1 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i0, 4);

        $r1 = newarray (int)[$i1];

        r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: int[] bytesStart> = $r1;

        $r3 = r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: java.util.concurrent.atomic.AtomicLong bytesUsed>;

        $r2 = r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: int[] bytesStart>;

        $i2 = lengthof $r2;

        $i3 = $i2 * 4;

        $l4 = (long) $i3;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l4);

        $r4 = r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: int[] bytesStart>;

        return $r4;
    }

    public java.util.concurrent.atomic.AtomicLong bytesUsed()
    {
        org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray r0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @this: org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray;

        $r1 = r0.<org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: java.util.concurrent.atomic.AtomicLong bytesUsed>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/BytesRefHash;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray: boolean $assertionsDisabled> = $z1;

        return;
    }
}
