public final class org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder extends java.lang.Object implements org.apache.xmlbeans.impl.piccolo.xml.XMLDecoder
{
    private boolean sawCR;

    public void <init>()
    {
        org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder r0;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder: boolean sawCR> = 0;

        return;
    }

    public org.apache.xmlbeans.impl.piccolo.io.CharsetDecoder newCharsetDecoder()
    {
        org.apache.xmlbeans.impl.piccolo.xml.XMLDecoder $r1;
        org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder r0;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder: org.apache.xmlbeans.impl.piccolo.xml.XMLDecoder newXMLDecoder()>();

        return $r1;
    }

    public org.apache.xmlbeans.impl.piccolo.xml.XMLDecoder newXMLDecoder()
    {
        org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder $r0, r1;

        r1 := @this: org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder;

        $r0 = new org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder;

        specialinvoke $r0.<org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder: void <init>()>();

        return $r0;
    }

    public int minBytesPerChar()
    {
        org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder r0;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder;

        return 2;
    }

    public int maxBytesPerChar()
    {
        org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder r0;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder;

        return 2;
    }

    public void reset()
    {
        org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder r0;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder;

        r0.<org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder: boolean sawCR> = 0;

        return;
    }

    public void decode(byte[], int, int, char[], int, int, int[]) throws java.io.CharConversionException
    {
        byte[] r1;
        byte $b5, $b9;
        int[] r0;
        boolean $z0;
        org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder r2;
        short $s6, $s10, $s25, $s27;
        java.lang.StringBuffer $r6, $r8, $r12, $r14, $r16, $r18;
        int i0, $i1, i2, i3, $i4, $i7, $i8, $i11, $i12, i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, $i23, $i24, $i26, $i28, $i29, $i30, $i32, $i33, $i35, $i36, $i38, $i39, $i40, $i41, $i42, $i43;
        java.lang.String $r7, $r9, $r13, $r15;
        char c13;
        org.apache.xmlbeans.impl.piccolo.io.IllegalCharException $r17, $r19;
        char[] r3;

        r2 := @this: org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder;

        r1 := @parameter0: byte[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        r3 := @parameter3: char[];

        i14 := @parameter4: int;

        i2 := @parameter5: int;

        r0 := @parameter6: int[];

        i21 = 0;

        i22 = 0;

     label01:
        $i1 = i22 + 1;

        if $i1 >= i0 goto label12;

        if i21 >= i2 goto label12;

        $i4 = i3 + i22;

        $b5 = r1[$i4];

        $s25 = (short) $b5;

        $s6 = 255 & $s25;

        $i26 = (int) $s6;

        $i11 = $i26 << 8;

        $i7 = i3 + i22;

        $i8 = $i7 + 1;

        $b9 = r1[$i8];

        $s27 = (short) $b9;

        $s10 = 255 & $s27;

        $i28 = (int) $s10;

        $i12 = $i11 | $i28;

        c13 = (char) $i12;

        $i29 = (int) c13;

        if $i29 < 32 goto label05;

        $i30 = (int) c13;

        $i32 = (int) 55295;

        if $i30 <= $i32 goto label03;

        $i33 = (int) c13;

        $i35 = (int) 57344;

        if $i33 < $i35 goto label02;

        $i36 = (int) c13;

        $i38 = (int) 65533;

        if $i36 <= $i38 goto label03;

     label02:
        $i39 = (int) c13;

        if $i39 < 65536 goto label04;

        $i40 = (int) c13;

        if $i40 > 1114111 goto label04;

     label03:
        r2.<org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder: boolean sawCR> = 0;

        $i23 = i21;

        i21 = i21 + 1;

        $i24 = i14 + $i23;

        r3[$i24] = c13;

        goto label11;

     label04:
        $r17 = new org.apache.xmlbeans.impl.piccolo.io.IllegalCharException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal XML Character: 0x");

        $i41 = (int) c13;

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i41);

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r17.<org.apache.xmlbeans.impl.piccolo.io.IllegalCharException: void <init>(java.lang.String)>($r15);

        throw $r17;

     label05:
        $i42 = (int) c13;

        tableswitch($i42)
        {
            case 9: goto label09;
            case 10: goto label06;
            case 11: goto label10;
            case 12: goto label10;
            case 13: goto label08;
            default: goto label10;
        };

     label06:
        $z0 = r2.<org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder: boolean sawCR>;

        if $z0 == 0 goto label07;

        r2.<org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder: boolean sawCR> = 0;

        goto label11;

     label07:
        $i17 = i21;

        i21 = i21 + 1;

        $i18 = i14 + $i17;

        r3[$i18] = 10;

        goto label11;

     label08:
        r2.<org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder: boolean sawCR> = 1;

        $i15 = i21;

        i21 = i21 + 1;

        $i16 = i14 + $i15;

        r3[$i16] = 10;

        goto label11;

     label09:
        $i19 = i21;

        i21 = i21 + 1;

        $i20 = i14 + $i19;

        r3[$i20] = 9;

        goto label11;

     label10:
        $r19 = new org.apache.xmlbeans.impl.piccolo.io.IllegalCharException;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal XML character: 0x");

        $i43 = (int) c13;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i43);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r19.<org.apache.xmlbeans.impl.piccolo.io.IllegalCharException: void <init>(java.lang.String)>($r9);

        throw $r19;

     label11:
        i22 = i22 + 2;

        goto label01;

     label12:
        r0[0] = i22;

        r0[1] = i21;

        return;
    }

    public void decodeXMLDecl(byte[], int, int, char[], int, int, int[]) throws java.io.CharConversionException
    {
        byte[] r1;
        byte $b5, $b9;
        int[] r0;
        boolean $z0;
        org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder r2;
        short $s6, $s10, $s25, $s27;
        int i0, $i1, i2, i3, $i4, $i7, $i8, $i11, $i12, i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, $i23, $i24, $i26, $i28, $i29, $i30, $i32, $i33, $i35, $i36, $i38, $i39, $i40, $i41, $i42;
        char c13;
        char[] r3;

        r2 := @this: org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder;

        r1 := @parameter0: byte[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        r3 := @parameter3: char[];

        i14 := @parameter4: int;

        i2 := @parameter5: int;

        r0 := @parameter6: int[];

        i21 = 0;

        i22 = 0;

     label01:
        $i1 = i22 + 1;

        if $i1 >= i0 goto label11;

        if i21 >= i2 goto label11;

        $i4 = i3 + i22;

        $b5 = r1[$i4];

        $s25 = (short) $b5;

        $s6 = 255 & $s25;

        $i26 = (int) $s6;

        $i11 = $i26 << 8;

        $i7 = i3 + i22;

        $i8 = $i7 + 1;

        $b9 = r1[$i8];

        $s27 = (short) $b9;

        $s10 = 255 & $s27;

        $i28 = (int) $s10;

        $i12 = $i11 | $i28;

        c13 = (char) $i12;

        $i29 = (int) c13;

        if $i29 < 32 goto label04;

        $i30 = (int) c13;

        $i32 = (int) 55295;

        if $i30 <= $i32 goto label03;

        $i33 = (int) c13;

        $i35 = (int) 57344;

        if $i33 < $i35 goto label02;

        $i36 = (int) c13;

        $i38 = (int) 65533;

        if $i36 <= $i38 goto label03;

     label02:
        $i39 = (int) c13;

        if $i39 < 65536 goto label11;

        $i40 = (int) c13;

        if $i40 > 1114111 goto label11;

     label03:
        r2.<org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder: boolean sawCR> = 0;

        $i23 = i21;

        i21 = i21 + 1;

        $i24 = i14 + $i23;

        r3[$i24] = c13;

        $i41 = (int) c13;

        if $i41 != 62 goto label10;

        i22 = i22 + 2;

        goto label11;

     label04:
        $i42 = (int) c13;

        tableswitch($i42)
        {
            case 9: goto label08;
            case 10: goto label05;
            case 11: goto label09;
            case 12: goto label09;
            case 13: goto label07;
            default: goto label09;
        };

     label05:
        $z0 = r2.<org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder: boolean sawCR>;

        if $z0 == 0 goto label06;

        r2.<org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder: boolean sawCR> = 0;

        goto label10;

     label06:
        $i17 = i21;

        i21 = i21 + 1;

        $i18 = i14 + $i17;

        r3[$i18] = 10;

        goto label10;

     label07:
        r2.<org.apache.xmlbeans.impl.piccolo.xml.UnicodeBigXMLDecoder: boolean sawCR> = 1;

        $i15 = i21;

        i21 = i21 + 1;

        $i16 = i14 + $i15;

        r3[$i16] = 10;

        goto label10;

     label08:
        $i19 = i21;

        i21 = i21 + 1;

        $i20 = i14 + $i19;

        r3[$i20] = 9;

        goto label10;

     label09:
        goto label11;

     label10:
        i22 = i22 + 2;

        goto label01;

     label11:
        r0[0] = i22;

        r0[1] = i21;

        return;
    }
}
