public class org.apache.cxf.interceptor.FIStaxOutInterceptor extends org.apache.cxf.phase.AbstractPhaseInterceptor
{
    public static final java.lang.String FI_ENABLED;
    private static final java.util.logging.Logger LOG;
    private static final java.lang.String OUTPUT_STREAM_HOLDER;
    private static final org.apache.cxf.interceptor.StaxOutEndingInterceptor ENDING;
    boolean force;
    private java.lang.Integer serializerAttributeValueMapMemoryLimit;
    private java.lang.Integer serializerMinAttributeValueSize;
    private java.lang.Integer serializerMaxAttributeValueSize;
    private java.lang.Integer serializerCharacterContentChunkMapMemoryLimit;
    private java.lang.Integer serializerMinCharacterContentChunkSize;
    private java.lang.Integer serializerMaxCharacterContentChunkSize;

    public void <init>()
    {
        org.apache.cxf.interceptor.FIStaxOutInterceptor r0;
        java.lang.Class $r1, $r3;
        java.lang.String $r2, $r4;

        r0 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String)>("pre-stream");

        $r1 = class "Lorg/apache/cxf/interceptor/AttachmentOutInterceptor;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: void addAfter(java.lang.String)>($r2);

        $r3 = class "Lorg/apache/cxf/interceptor/StaxOutInterceptor;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: void addBefore(java.lang.String)>($r4);

        return;
    }

    public void <init>(boolean)
    {
        org.apache.cxf.interceptor.FIStaxOutInterceptor r0;
        boolean z0;

        r0 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: void <init>()>();

        r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: boolean force> = z0;

        return;
    }

    public void handleFault(org.apache.cxf.message.Message)
    {
        java.io.OutputStream r4;
        org.apache.cxf.message.Message r1;
        org.apache.cxf.interceptor.FIStaxOutInterceptor r0;
        java.lang.Object $r3;
        java.lang.String $r2;

        r0 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        r1 := @parameter0: org.apache.cxf.message.Message;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void handleFault(org.apache.cxf.message.Message)>(r1);

        $r2 = <org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.String OUTPUT_STREAM_HOLDER>;

        $r3 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.io.OutputStream) $r3;

        if r4 == null goto label1;

        interfaceinvoke r1.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/io/OutputStream;", r4);

     label1:
        return;
    }

    public void handleMessage(org.apache.cxf.message.Message)
    {
        org.apache.cxf.interceptor.InterceptorChain $r15;
        org.apache.cxf.interceptor.StaxOutEndingInterceptor $r16;
        java.util.Map $r8, $r9;
        javax.xml.stream.XMLStreamException $r32;
        javax.xml.stream.XMLStreamWriter r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List r36;
        java.lang.StringBuilder $r19, $r20, $r21, $r24;
        java.util.ArrayList $r26;
        org.apache.cxf.interceptor.Fault $r33;
        org.apache.cxf.interceptor.FIStaxOutInterceptor r5;
        java.lang.Boolean $r13;
        java.lang.String $r6, $r12, $r17, $r18, $r23, $r25, r35;
        java.io.OutputStream r2;
        org.apache.cxf.message.Message r0, $r28, $r30;
        org.apache.cxf.message.Exchange $r27, $r29;
        java.lang.Object $r1, $r3, $r7, $r10, $r14, $r22, $r31, r34;
        com.sun.xml.fastinfoset.stax.StAXDocumentSerializer $r11;

        r5 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/io/OutputStream;");

        r2 = (java.io.OutputStream) $r1;

        $r3 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljavax/xml/stream/XMLStreamWriter;");

        r4 = (javax.xml.stream.XMLStreamWriter) $r3;

        if r2 == null goto label01;

        if r4 == null goto label02;

     label01:
        return;

     label02:
        $z0 = virtualinvoke r5.<org.apache.cxf.interceptor.FIStaxOutInterceptor: boolean isRequestor(org.apache.cxf.message.Message)>(r0);

        r34 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("org.apache.cxf.fastinfoset.enabled");

        if $z0 != 0 goto label04;

        $r27 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r28 = interfaceinvoke $r27.<org.apache.cxf.message.Exchange: org.apache.cxf.message.Message getInMessage()>();

        if $r28 == null goto label07;

        $r29 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r30 = interfaceinvoke $r29.<org.apache.cxf.message.Exchange: org.apache.cxf.message.Message getInMessage()>();

        $r31 = interfaceinvoke $r30.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("Accept");

        r35 = (java.lang.String) $r31;

        if r35 == null goto label03;

        $z4 = virtualinvoke r35.<java.lang.String: boolean contains(java.lang.CharSequence)>("fastinfoset");

        if $z4 == 0 goto label03;

        r34 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label03:
        goto label07;

     label04:
        $r6 = <org.apache.cxf.message.Message: java.lang.String PROTOCOL_HEADERS>;

        $r7 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r6);

        $r8 = (java.util.Map) $r7;

        $r9 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Map cast(java.util.Map)>($r8);

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>("Accept");

        r36 = (java.util.List) $r10;

        if r36 != null goto label05;

        $r26 = new java.util.ArrayList;

        specialinvoke $r26.<java.util.ArrayList: void <init>()>();

        r36 = $r26;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Accept", $r26);

     label05:
        $z1 = interfaceinvoke r36.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label06;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("application/fastinfoset");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r22 = interfaceinvoke r36.<java.util.List: java.lang.Object get(int)>(0);

        $r23 = (java.lang.String) $r22;

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r36.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, $r25);

        goto label07;

     label06:
        interfaceinvoke r36.<java.util.List: boolean add(java.lang.Object)>("application/fastinfoset");

     label07:
        $z5 = r5.<org.apache.cxf.interceptor.FIStaxOutInterceptor: boolean force>;

        if $z5 != 0 goto label08;

        $z3 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>(r34);

        if $z3 == 0 goto label14;

     label08:
        $r11 = specialinvoke r5.<org.apache.cxf.interceptor.FIStaxOutInterceptor: com.sun.xml.fastinfoset.stax.StAXDocumentSerializer getOutput(org.apache.cxf.message.Message,java.io.OutputStream)>(r0, r2);

        interfaceinvoke r0.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljavax/xml/stream/XMLStreamWriter;", $r11);

        interfaceinvoke r0.<org.apache.cxf.message.Message: void removeContent(java.lang.Class)>(class "Ljava/io/OutputStream;");

        $r12 = <org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.String OUTPUT_STREAM_HOLDER>;

        interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r2);

        $r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>("disable.outputstream.optimization", $r13);

        $r14 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("Content-Type");

        $r18 = (java.lang.String) $r14;

        $z2 = virtualinvoke $r18.<java.lang.String: boolean contains(java.lang.CharSequence)>("application/soap+xml");

        if $z2 == 0 goto label09;

        $r17 = virtualinvoke $r18.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("application/soap+xml", "application/soap+fastinfoset");

        interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>("Content-Type", $r17);

        goto label10;

     label09:
        interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>("Content-Type", "application/fastinfoset");

     label10:
        virtualinvoke $r11.<com.sun.xml.fastinfoset.stax.StAXDocumentSerializer: void writeStartDocument()>();

     label11:
        goto label13;

     label12:
        $r32 := @caughtexception;

        $r33 = new org.apache.cxf.interceptor.Fault;

        specialinvoke $r33.<org.apache.cxf.interceptor.Fault: void <init>(java.lang.Throwable)>($r32);

        throw $r33;

     label13:
        $r15 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.interceptor.InterceptorChain getInterceptorChain()>();

        $r16 = <org.apache.cxf.interceptor.FIStaxOutInterceptor: org.apache.cxf.interceptor.StaxOutEndingInterceptor ENDING>;

        interfaceinvoke $r15.<org.apache.cxf.interceptor.InterceptorChain: void add(org.apache.cxf.interceptor.Interceptor)>($r16);

     label14:
        return;

        catch javax.xml.stream.XMLStreamException from label10 to label11 with label12;
    }

    private com.sun.xml.fastinfoset.stax.StAXDocumentSerializer getOutput(org.apache.cxf.message.Message, java.io.OutputStream)
    {
        java.lang.Integer $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r21;
        org.apache.cxf.interceptor.FIStaxOutInterceptor r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.io.OutputStream r1;
        org.apache.cxf.message.Message r16;
        com.sun.xml.fastinfoset.stax.StAXDocumentSerializer $r0;

        r2 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        r16 := @parameter0: org.apache.cxf.message.Message;

        r1 := @parameter1: java.io.OutputStream;

        $r0 = new com.sun.xml.fastinfoset.stax.StAXDocumentSerializer;

        specialinvoke $r0.<com.sun.xml.fastinfoset.stax.StAXDocumentSerializer: void <init>(java.io.OutputStream)>(r1);

        $r3 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerAttributeValueMapMemoryLimit>;

        if $r3 == null goto label1;

        $r14 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerAttributeValueMapMemoryLimit>;

        $i10 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        if $i10 <= 0 goto label1;

        $r15 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerAttributeValueMapMemoryLimit>;

        $i11 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

        virtualinvoke $r0.<com.sun.xml.fastinfoset.stax.StAXDocumentSerializer: void setAttributeValueMapMemoryLimit(int)>($i11);

     label1:
        $r17 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMinAttributeValueSize>;

        if $r17 == null goto label2;

        $r12 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMinAttributeValueSize>;

        $i8 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        if $i8 <= 0 goto label2;

        $r13 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMinAttributeValueSize>;

        $i9 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        virtualinvoke $r0.<com.sun.xml.fastinfoset.stax.StAXDocumentSerializer: void setMinAttributeValueSize(int)>($i9);

     label2:
        $r18 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMaxAttributeValueSize>;

        if $r18 == null goto label3;

        $r10 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMaxAttributeValueSize>;

        $i6 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        if $i6 <= 0 goto label3;

        $r11 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMaxAttributeValueSize>;

        $i7 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        virtualinvoke $r0.<com.sun.xml.fastinfoset.stax.StAXDocumentSerializer: void setMaxAttributeValueSize(int)>($i7);

     label3:
        $r19 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerCharacterContentChunkMapMemoryLimit>;

        if $r19 == null goto label4;

        $r8 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerCharacterContentChunkMapMemoryLimit>;

        $i4 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        if $i4 <= 0 goto label4;

        $r9 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerCharacterContentChunkMapMemoryLimit>;

        $i5 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        virtualinvoke $r0.<com.sun.xml.fastinfoset.stax.StAXDocumentSerializer: void setCharacterContentChunkMapMemoryLimit(int)>($i5);

     label4:
        $r20 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMinCharacterContentChunkSize>;

        if $r20 == null goto label5;

        $r6 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMinCharacterContentChunkSize>;

        $i2 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        if $i2 <= 0 goto label5;

        $r7 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMinCharacterContentChunkSize>;

        $i3 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        virtualinvoke $r0.<com.sun.xml.fastinfoset.stax.StAXDocumentSerializer: void setMinCharacterContentChunkSize(int)>($i3);

     label5:
        $r21 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMaxCharacterContentChunkSize>;

        if $r21 == null goto label6;

        $r4 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMaxCharacterContentChunkSize>;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i0 <= 0 goto label6;

        $r5 = r2.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMaxCharacterContentChunkSize>;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        virtualinvoke $r0.<com.sun.xml.fastinfoset.stax.StAXDocumentSerializer: void setMaxCharacterContentChunkSize(int)>($i1);

     label6:
        return $r0;
    }

    public java.lang.Integer getSerializerMinAttributeValueSize()
    {
        org.apache.cxf.interceptor.FIStaxOutInterceptor r0;
        java.lang.Integer $r1;

        r0 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        $r1 = r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMinAttributeValueSize>;

        return $r1;
    }

    public void setSerializerMinAttributeValueSize(java.lang.Integer)
    {
        org.apache.cxf.interceptor.FIStaxOutInterceptor r0;
        java.lang.Integer r1;

        r0 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        r1 := @parameter0: java.lang.Integer;

        specialinvoke r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: void logSetter(java.lang.String,java.lang.Object)>("serializerMinAttributeValueSize", r1);

        r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMinAttributeValueSize> = r1;

        return;
    }

    public java.lang.Integer getSerializerMaxAttributeValueSize()
    {
        org.apache.cxf.interceptor.FIStaxOutInterceptor r0;
        java.lang.Integer $r1;

        r0 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        $r1 = r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMaxAttributeValueSize>;

        return $r1;
    }

    public void setSerializerMaxAttributeValueSize(java.lang.Integer)
    {
        org.apache.cxf.interceptor.FIStaxOutInterceptor r0;
        java.lang.Integer r1;

        r0 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        r1 := @parameter0: java.lang.Integer;

        specialinvoke r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: void logSetter(java.lang.String,java.lang.Object)>("serializerMaxAttributeValueSize", r1);

        r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMaxAttributeValueSize> = r1;

        return;
    }

    public java.lang.Integer getSerializerCharacterContentChunkMapMemoryLimit()
    {
        org.apache.cxf.interceptor.FIStaxOutInterceptor r0;
        java.lang.Integer $r1;

        r0 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        $r1 = r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerCharacterContentChunkMapMemoryLimit>;

        return $r1;
    }

    public void setSerializerCharacterContentChunkMapMemoryLimit(java.lang.Integer)
    {
        org.apache.cxf.interceptor.FIStaxOutInterceptor r0;
        java.lang.Integer r1;

        r0 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        r1 := @parameter0: java.lang.Integer;

        specialinvoke r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: void logSetter(java.lang.String,java.lang.Object)>("serializerCharacterContentChunkMapMemoryLimit", r1);

        r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerCharacterContentChunkMapMemoryLimit> = r1;

        return;
    }

    public java.lang.Integer getSerializerMinCharacterContentChunkSize()
    {
        org.apache.cxf.interceptor.FIStaxOutInterceptor r0;
        java.lang.Integer $r1;

        r0 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        $r1 = r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMinCharacterContentChunkSize>;

        return $r1;
    }

    public void setSerializerMinCharacterContentChunkSize(java.lang.Integer)
    {
        org.apache.cxf.interceptor.FIStaxOutInterceptor r0;
        java.lang.Integer r1;

        r0 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        r1 := @parameter0: java.lang.Integer;

        specialinvoke r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: void logSetter(java.lang.String,java.lang.Object)>("serializerMinCharacterContentChunkSize", r1);

        r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMinCharacterContentChunkSize> = r1;

        return;
    }

    public java.lang.Integer getSerializerMaxCharacterContentChunkSize()
    {
        org.apache.cxf.interceptor.FIStaxOutInterceptor r0;
        java.lang.Integer $r1;

        r0 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        $r1 = r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMaxCharacterContentChunkSize>;

        return $r1;
    }

    public void setSerializerMaxCharacterContentChunkSize(java.lang.Integer)
    {
        org.apache.cxf.interceptor.FIStaxOutInterceptor r0;
        java.lang.Integer r1;

        r0 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        r1 := @parameter0: java.lang.Integer;

        specialinvoke r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: void logSetter(java.lang.String,java.lang.Object)>("serializerMaxCharacterContentChunkSize", r1);

        r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerMaxCharacterContentChunkSize> = r1;

        return;
    }

    public java.lang.Integer getSerializerAttributeValueMapMemoryLimit()
    {
        org.apache.cxf.interceptor.FIStaxOutInterceptor r0;
        java.lang.Integer $r1;

        r0 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        $r1 = r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerAttributeValueMapMemoryLimit>;

        return $r1;
    }

    public void setSerializerAttributeValueMapMemoryLimit(java.lang.Integer)
    {
        org.apache.cxf.interceptor.FIStaxOutInterceptor r0;
        java.lang.Integer r1;

        r0 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        r1 := @parameter0: java.lang.Integer;

        specialinvoke r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: void logSetter(java.lang.String,java.lang.Object)>("serializerAttributeValueMapMemoryLimit", r1);

        r0.<org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.Integer serializerAttributeValueMapMemoryLimit> = r1;

        return;
    }

    private void logSetter(java.lang.String, java.lang.Object)
    {
        java.util.logging.Logger $r1, $r3;
        java.util.logging.Level $r0;
        org.apache.cxf.interceptor.FIStaxOutInterceptor r11;
        java.lang.StringBuilder $r2, $r4, $r6, $r7, $r9;
        java.lang.Object r8;
        java.lang.String r5, $r10;
        boolean $z0;

        r11 := @this: org.apache.cxf.interceptor.FIStaxOutInterceptor;

        r5 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.Object;

        $r1 = <org.apache.cxf.interceptor.FIStaxOutInterceptor: java.util.logging.Logger LOG>;

        $r0 = <java.util.logging.Level: java.util.logging.Level CONFIG>;

        $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r0);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.cxf.interceptor.FIStaxOutInterceptor: java.util.logging.Logger LOG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void config(java.lang.String)>($r10);

     label1:
        return;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;
        org.apache.cxf.interceptor.StaxOutEndingInterceptor $r7;
        java.lang.StringBuilder $r1, $r4, $r5;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r8;

        <org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.String FI_ENABLED> = "org.apache.cxf.fastinfoset.enabled";

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/interceptor/FIStaxOutInterceptor;");

        <org.apache.cxf.interceptor.FIStaxOutInterceptor: java.util.logging.Logger LOG> = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = class "Lorg/apache/cxf/interceptor/FIStaxOutInterceptor;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".outputstream");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.String OUTPUT_STREAM_HOLDER> = $r6;

        $r7 = new org.apache.cxf.interceptor.StaxOutEndingInterceptor;

        $r8 = <org.apache.cxf.interceptor.FIStaxOutInterceptor: java.lang.String OUTPUT_STREAM_HOLDER>;

        specialinvoke $r7.<org.apache.cxf.interceptor.StaxOutEndingInterceptor: void <init>(java.lang.String)>($r8);

        <org.apache.cxf.interceptor.FIStaxOutInterceptor: org.apache.cxf.interceptor.StaxOutEndingInterceptor ENDING> = $r7;

        return;
    }
}
