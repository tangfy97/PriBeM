public class com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly extends com.hp.hpl.jena.sparql.core.DatasetGraphWrapper
{
    private com.hp.hpl.jena.graph.Graph dftGraph;
    private java.util.Map namedGraphs;

    public void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        java.util.HashMap $r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWrapper: void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r1);

        r0.<com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly: com.hp.hpl.jena.graph.Graph dftGraph> = null;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly: java.util.Map namedGraphs> = $r2;

        return;
    }

    public com.hp.hpl.jena.graph.Graph getDefaultGraph()
    {
        com.hp.hpl.jena.graph.Graph $r1, $r2, $r4;
        com.hp.hpl.jena.sparql.graph.GraphReadOnly $r3;
        com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly: com.hp.hpl.jena.graph.Graph dftGraph>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.sparql.graph.GraphReadOnly;

        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWrapper: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        specialinvoke $r3.<com.hp.hpl.jena.sparql.graph.GraphReadOnly: void <init>(com.hp.hpl.jena.graph.Graph)>($r4);

        r0.<com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly: com.hp.hpl.jena.graph.Graph dftGraph> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly: com.hp.hpl.jena.graph.Graph dftGraph>;

        return $r2;
    }

    public com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.sparql.graph.GraphReadOnly $r4;
        java.util.Map $r2, $r5, $r6, $r9;
        java.lang.Object $r7;
        com.hp.hpl.jena.graph.Graph $r3, $r8;
        com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly: java.util.Map namedGraphs>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $z1 = specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWrapper: boolean containsGraph(com.hp.hpl.jena.graph.Node)>(r1);

        if $z1 != 0 goto label1;

        $r9 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly: java.util.Map namedGraphs>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return null;

     label1:
        $r6 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly: java.util.Map namedGraphs>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (com.hp.hpl.jena.graph.Graph) $r7;

        return $r8;

     label2:
        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphWrapper: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>(r1);

        if $r3 != null goto label3;

        return null;

     label3:
        $r4 = new com.hp.hpl.jena.sparql.graph.GraphReadOnly;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.graph.GraphReadOnly: void <init>(com.hp.hpl.jena.graph.Graph)>($r3);

        $r5 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly: java.util.Map namedGraphs>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return $r4;
    }

    public void setDefaultGraph(com.hp.hpl.jena.graph.Graph)
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.graph.Graph r2;
        com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly r1;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly;

        r2 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read-only dataset");

        throw $r0;
    }

    public void addGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Graph)
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.graph.Graph r3;
        com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly r1;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read-only dataset");

        throw $r0;
    }

    public void removeGraph(com.hp.hpl.jena.graph.Node)
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly r1;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read-only dataset");

        throw $r0;
    }

    public void add(com.hp.hpl.jena.sparql.core.Quad)
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly r1;
        com.hp.hpl.jena.sparql.core.Quad r2;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly;

        r2 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read-only dataset");

        throw $r0;
    }

    public void delete(com.hp.hpl.jena.sparql.core.Quad)
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly r1;
        com.hp.hpl.jena.sparql.core.Quad r2;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly;

        r2 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read-only dataset");

        throw $r0;
    }

    public void deleteAny(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.graph.Node r2, r3, r4, r5;
        com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly r1;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphReadOnly;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        r5 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read-only dataset");

        throw $r0;
    }
}
