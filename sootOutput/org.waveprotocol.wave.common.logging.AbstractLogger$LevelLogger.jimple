final class org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger extends java.lang.Object implements org.waveprotocol.wave.common.logging.Logger, org.waveprotocol.wave.common.logging.AbstractLogger$NonNotifyingLogger
{
    private final org.waveprotocol.wave.common.logging.AbstractLogger$Level level;
    final org.waveprotocol.wave.common.logging.AbstractLogger this$0;

    public void <init>(org.waveprotocol.wave.common.logging.AbstractLogger, org.waveprotocol.wave.common.logging.AbstractLogger$Level)
    {
        org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger r0;
        org.waveprotocol.wave.common.logging.AbstractLogger r1;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level r2;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger;

        r1 := @parameter0: org.waveprotocol.wave.common.logging.AbstractLogger;

        r2 := @parameter1: org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level> = r2;

        return;
    }

    public void log(java.lang.String)
    {
        java.lang.Object[] $r1, $r5;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r3, $r6;
        org.waveprotocol.wave.common.logging.AbstractLogger $r4, $r7;
        org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger r0;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger;

        r2 := @parameter0: java.lang.String;

        $r4 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r3 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        virtualinvoke $r4.<org.waveprotocol.wave.common.logging.AbstractLogger: void handleClientErrors(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Throwable,java.lang.Object[])>($r3, null, $r1);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: boolean shouldLog()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r6 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r2;

        virtualinvoke $r7.<org.waveprotocol.wave.common.logging.AbstractLogger: void doLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Object[])>($r6, $r5);

     label1:
        return;
    }

    public transient void log(java.lang.Object[])
    {
        org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger r0;
        java.lang.Object[] r1;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r2, $r4;
        org.waveprotocol.wave.common.logging.AbstractLogger $r3, $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger;

        r1 := @parameter0: java.lang.Object[];

        $r3 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r2 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        virtualinvoke $r3.<org.waveprotocol.wave.common.logging.AbstractLogger: void handleClientErrors(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Throwable,java.lang.Object[])>($r2, null, r1);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: boolean shouldLog()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r4 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        virtualinvoke $r5.<org.waveprotocol.wave.common.logging.AbstractLogger: void doLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Object[])>($r4, r1);

     label1:
        return;
    }

    public void logPlainText(java.lang.String)
    {
        java.lang.Object[] $r1;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r3, $r5;
        org.waveprotocol.wave.common.logging.AbstractLogger $r4, $r6;
        org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger r0;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger;

        r2 := @parameter0: java.lang.String;

        $r4 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r3 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        virtualinvoke $r4.<org.waveprotocol.wave.common.logging.AbstractLogger: void handleClientErrors(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Throwable,java.lang.Object[])>($r3, null, $r1);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: boolean shouldLog()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r5 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        virtualinvoke $r6.<org.waveprotocol.wave.common.logging.AbstractLogger: void logPlainTextInner(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.String)>($r5, r2);

     label1:
        return;
    }

    public void logPlainText(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r1;
        java.lang.Object[] $r2;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r4, $r8;
        org.waveprotocol.wave.common.logging.AbstractLogger $r5, $r7;
        org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger r0;
        java.lang.StringBuilder $r6, $r9, $r11;
        java.lang.String r3, $r10, $r12;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        $r5 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r4 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        virtualinvoke $r5.<org.waveprotocol.wave.common.logging.AbstractLogger: void handleClientErrors(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Throwable,java.lang.Object[])>($r4, r1, $r2);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: boolean shouldLog()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r8 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke r1.<java.lang.Throwable: java.lang.String toString()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<org.waveprotocol.wave.common.logging.AbstractLogger: void logPlainTextInner(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.String)>($r8, $r12);

     label1:
        return;
    }

    public void logXml(java.lang.String)
    {
        java.lang.Object[] $r1, $r5;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r3, $r7;
        org.waveprotocol.wave.common.logging.AbstractLogger $r4, $r6;
        org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger r0;
        java.lang.String r2, $r8;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger;

        r2 := @parameter0: java.lang.String;

        $r4 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r3 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        virtualinvoke $r4.<org.waveprotocol.wave.common.logging.AbstractLogger: void handleClientErrors(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Throwable,java.lang.Object[])>($r3, null, $r1);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: boolean shouldLog()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r7 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        $r5 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <org.waveprotocol.wave.common.logging.LogUtils: java.lang.String xmlEscape(java.lang.String)>(r2);

        $r5[0] = $r8;

        virtualinvoke $r6.<org.waveprotocol.wave.common.logging.AbstractLogger: void doLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Object[])>($r7, $r5);

     label1:
        return;
    }

    public void log(java.lang.String, java.lang.Object)
    {
        java.lang.Object[] $r1, $r6;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r4, $r8;
        org.waveprotocol.wave.common.logging.AbstractLogger $r5, $r7;
        int $i0;
        java.lang.String r2, $r9, $r13;
        boolean $z0;
        org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger r0;
        java.lang.Object r3;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r5 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r4 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        virtualinvoke $r5.<org.waveprotocol.wave.common.logging.AbstractLogger: void handleClientErrors(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Throwable,java.lang.Object[])>($r4, null, $r1);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: boolean shouldLog()>();

        if $z0 == 0 goto label3;

        $r7 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r8 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        $r6 = newarray (java.lang.Object)[2];

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r13 = "";

     label2:
        $r6[0] = $r13;

        $r9 = staticinvoke <org.waveprotocol.wave.common.logging.LogUtils: java.lang.String printObjectAsHtml(java.lang.Object)>(r3);

        $r6[1] = $r9;

        virtualinvoke $r7.<org.waveprotocol.wave.common.logging.AbstractLogger: void doLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Object[])>($r8, $r6);

     label3:
        return;
    }

    public void log(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        java.lang.Object[] $r2;
        org.waveprotocol.wave.common.logging.LogSink $r7;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r4, $r8;
        org.waveprotocol.wave.common.logging.AbstractLogger $r3, $r6;
        org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger r0;
        java.lang.String $r5, $r9;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger;

        r1 := @parameter0: java.lang.Throwable;

        $r3 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r4 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        $r2 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        $r2[0] = $r5;

        virtualinvoke $r3.<org.waveprotocol.wave.common.logging.AbstractLogger: void handleClientErrors(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Throwable,java.lang.Object[])>($r4, r1, $r2);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: boolean shouldLog()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r7 = $r6.<org.waveprotocol.wave.common.logging.AbstractLogger: org.waveprotocol.wave.common.logging.LogSink sink>;

        $r8 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        $r9 = virtualinvoke r1.<java.lang.Throwable: java.lang.String toString()>();

        virtualinvoke $r7.<org.waveprotocol.wave.common.logging.LogSink: void lazyLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.String,java.lang.Throwable)>($r8, $r9, r1);

     label1:
        return;
    }

    public void log(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r1;
        java.lang.Object[] $r2;
        org.waveprotocol.wave.common.logging.LogSink $r8;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r4, $r7;
        org.waveprotocol.wave.common.logging.AbstractLogger $r5, $r6;
        org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger r0;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        $r5 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r4 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        virtualinvoke $r5.<org.waveprotocol.wave.common.logging.AbstractLogger: void handleClientErrors(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Throwable,java.lang.Object[])>($r4, r1, $r2);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: boolean shouldLog()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r8 = $r6.<org.waveprotocol.wave.common.logging.AbstractLogger: org.waveprotocol.wave.common.logging.LogSink sink>;

        $r7 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        virtualinvoke $r8.<org.waveprotocol.wave.common.logging.LogSink: void lazyLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.String,java.lang.Throwable)>($r7, r3, r1);

     label1:
        return;
    }

    public transient void logLazyObjects(java.lang.Object[])
    {
        org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger r0;
        java.lang.Object[] r1;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r2, $r4;
        org.waveprotocol.wave.common.logging.AbstractLogger $r3, $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger;

        r1 := @parameter0: java.lang.Object[];

        $r3 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r2 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        virtualinvoke $r3.<org.waveprotocol.wave.common.logging.AbstractLogger: void handleClientErrors(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Throwable,java.lang.Object[])>($r2, null, r1);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: boolean shouldLog()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r4 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        virtualinvoke $r5.<org.waveprotocol.wave.common.logging.AbstractLogger: void doLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Object[])>($r4, r1);

     label1:
        return;
    }

    public boolean shouldLog()
    {
        org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger r0;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r1;
        org.waveprotocol.wave.common.logging.AbstractLogger $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger;

        $r2 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r1 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger$Level level>;

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.common.logging.AbstractLogger: boolean shouldLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level)>($r1);

        return $z0;
    }

    public void logWithoutNotifying(java.lang.String, org.waveprotocol.wave.common.logging.AbstractLogger$Level)
    {
        org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger r0;
        org.waveprotocol.wave.common.logging.AbstractLogger$NonNotifyingLogger $r5;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level r4;
        java.lang.String r3;
        org.waveprotocol.wave.common.logging.AbstractLogger $r1, $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        $r1 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $z0 = $r1 instanceof org.waveprotocol.wave.common.logging.AbstractLogger$NonNotifyingLogger;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$LevelLogger: org.waveprotocol.wave.common.logging.AbstractLogger this$0>;

        $r5 = (org.waveprotocol.wave.common.logging.AbstractLogger$NonNotifyingLogger) $r2;

        interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.AbstractLogger$NonNotifyingLogger: void logWithoutNotifying(java.lang.String,org.waveprotocol.wave.common.logging.AbstractLogger$Level)>(r3, r4);

     label1:
        return;
    }
}
