public abstract class org.codehaus.groovy.ast.expr.Expression extends org.codehaus.groovy.ast.ASTNode
{
    private org.codehaus.groovy.ast.ClassNode type;

    public void <init>()
    {
        org.codehaus.groovy.ast.expr.Expression r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.Expression;

        specialinvoke r0.<org.codehaus.groovy.ast.ASTNode: void <init>()>();

        $r1 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        r0.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode type> = $r1;

        return;
    }

    public abstract org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer);

    protected java.util.List transformExpressions(java.util.List, org.codehaus.groovy.ast.expr.ExpressionTransformer)
    {
        java.util.Iterator $r2;
        java.util.ArrayList $r0;
        java.util.List r1;
        org.codehaus.groovy.ast.expr.ExpressionTransformer r3;
        int $i0;
        java.lang.Object $r4;
        org.codehaus.groovy.ast.expr.Expression $r5, $r6, r7;
        boolean $z0;

        r7 := @this: org.codehaus.groovy.ast.expr.Expression;

        r1 := @parameter0: java.util.List;

        r3 := @parameter1: org.codehaus.groovy.ast.expr.ExpressionTransformer;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.codehaus.groovy.ast.expr.Expression) $r4;

        $r6 = interfaceinvoke r3.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r5);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r0;
    }

    public org.codehaus.groovy.ast.ClassNode getType()
    {
        org.codehaus.groovy.ast.expr.Expression r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.Expression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode type>;

        return $r1;
    }

    public void setType(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.expr.Expression r0;
        org.codehaus.groovy.ast.ClassNode r1;

        r0 := @this: org.codehaus.groovy.ast.expr.Expression;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r0.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode type> = r1;

        return;
    }
}
