public class com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer extends com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer
{
    private com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer$Callback callback;

    public void <init>(com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer$Callback)
    {
        com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer$Callback r1;
        com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer;

        r1 := @parameter0: com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer$Callback;

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: void <init>()>();

        r0.<com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer: com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer$Callback callback> = r1;

        return;
    }

    public void declare_field(int, java.lang.String, com.mycila.inject.internal.asm.Type, java.lang.Object)
    {
        com.mycila.inject.internal.asm.Type r2, $r5, $r21;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r14, $r22;
        java.lang.StringBuffer $r9, $r10, $r11, $r16, $r17, $r18;
        int i0;
        java.lang.String r1, $r6, $r7, $r12, $r19;
        com.mycila.inject.internal.asm.Type[] $r13, $r20;
        com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer$Callback $r4;
        com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer r0;
        com.mycila.inject.internal.cglib.core.Signature $r8, $r15;
        java.lang.Object r3;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.mycila.inject.internal.asm.Type;

        r3 := @parameter3: java.lang.Object;

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(i0, r1, r2, r3);

        $r4 = r0.<com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer: com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer$Callback callback>;

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer: com.mycila.inject.internal.asm.Type getClassType()>();

        $r6 = interfaceinvoke $r4.<com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer$Callback: java.lang.String getPropertyName(com.mycila.inject.internal.asm.Type,java.lang.String)>($r5, r1);

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String upperFirst(java.lang.String)>($r6);

        if $r7 == null goto label1;

        $r8 = new com.mycila.inject.internal.cglib.core.Signature;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("get");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type[] TYPES_EMPTY>;

        specialinvoke $r8.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>($r12, r2, $r13);

        $r14 = virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r8, null);

        virtualinvoke $r14.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r14.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>(r1);

        virtualinvoke $r14.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r14.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        $r15 = new com.mycila.inject.internal.cglib.core.Signature;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("set");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        $r21 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        $r20 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r20[0] = r2;

        specialinvoke $r15.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>($r19, $r21, $r20);

        $r22 = virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.AccessFieldTransformer: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r15, null);

        virtualinvoke $r22.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r22.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        virtualinvoke $r22.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>(r1);

        virtualinvoke $r22.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r22.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

     label1:
        return;
    }
}
