public final class org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder extends java.lang.Object
{
    private java.lang.String waveletId;
    private org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot snapshot;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder setWaveletId(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder: java.lang.String waveletId> = r1;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder clearSnapshot()
    {
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder;

        r0.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder: org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot snapshot> = null;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder setSnapshot(org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot)
    {
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder r0;
        org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot;

        r0.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder: org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot snapshot> = r1;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet build(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder$Factory)
    {
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder$Factory r0;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder r2;
        org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot $r4;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet $r1;
        java.lang.String $r3;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder$Factory;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder$Factory: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet create()>();

        $r3 = r2.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder: java.lang.String waveletId>;

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet: void setWaveletId(java.lang.String)>($r3);

        $r4 = r2.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$WaveletBuilder: org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot snapshot>;

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet: void setSnapshot(org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot)>($r4);

        return $r1;
    }
}
