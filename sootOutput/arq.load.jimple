public class arq.load extends arq.cmdline.CmdUpdate
{
    private static final arq.cmdline.ArgDecl graphNameArg;
    private static final arq.cmdline.ArgDecl dumpArg;
    java.lang.String graphName;
    java.util.List loadFiles;
    boolean dump;

    public static transient void main(java.lang.String[])
    {
        arq.load $r0;
        java.lang.String[] r1;

        r1 := @parameter0: java.lang.String[];

        $r0 = new arq.load;

        specialinvoke $r0.<arq.load: void <init>(java.lang.String[])>(r1);

        virtualinvoke $r0.<arq.load: void mainRun()>();

        return;
    }

    protected void <init>(java.lang.String[])
    {
        arq.load r0;
        arq.cmdline.ArgDecl $r2, $r3;
        java.lang.String[] r1;

        r0 := @this: arq.load;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<arq.cmdline.CmdUpdate: void <init>(java.lang.String[])>(r1);

        r0.<arq.load: java.lang.String graphName> = null;

        r0.<arq.load: java.util.List loadFiles> = null;

        r0.<arq.load: boolean dump> = 0;

        $r2 = <arq.load: arq.cmdline.ArgDecl graphNameArg>;

        specialinvoke r0.<arq.cmdline.CmdUpdate: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r2, "--graph=IRI", "Graph IRI (loads default graph if absent)");

        $r3 = <arq.load: arq.cmdline.ArgDecl dumpArg>;

        specialinvoke r0.<arq.cmdline.CmdUpdate: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r3, "--dump", "Dump the resulting graph store");

        return;
    }

    protected void processModulesAndArgs()
    {
        arq.cmdline.ArgDecl $r1, $r2, $r5;
        arq.load r0;
        java.util.List $r4;
        arq.cmd.CmdException $r6;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @this: arq.load;

        $r1 = <arq.load: arq.cmdline.ArgDecl graphNameArg>;

        $z0 = virtualinvoke r0.<arq.load: boolean containsMultiple(arq.cmdline.ArgDecl)>($r1);

        if $z0 == 0 goto label1;

        $r6 = new arq.cmd.CmdException;

        specialinvoke $r6.<arq.cmd.CmdException: void <init>(java.lang.String)>("At most one --graph allowed");

        throw $r6;

     label1:
        $r2 = <arq.load: arq.cmdline.ArgDecl graphNameArg>;

        $r3 = virtualinvoke r0.<arq.load: java.lang.String getValue(arq.cmdline.ArgDecl)>($r2);

        r0.<arq.load: java.lang.String graphName> = $r3;

        $r4 = specialinvoke r0.<arq.cmdline.CmdUpdate: java.util.List getPositional()>();

        r0.<arq.load: java.util.List loadFiles> = $r4;

        $r5 = <arq.load: arq.cmdline.ArgDecl dumpArg>;

        $z1 = virtualinvoke r0.<arq.load: boolean contains(arq.cmdline.ArgDecl)>($r5);

        r0.<arq.load: boolean dump> = $z1;

        specialinvoke r0.<arq.cmdline.CmdUpdate: void processModulesAndArgs()>();

        return;
    }

    protected java.lang.String getCommandName()
    {
        arq.load r0;
        java.lang.String $r1;

        r0 := @this: arq.load;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r0);

        return $r1;
    }

    protected java.lang.String getSummary()
    {
        arq.load r1;
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.String $r2, $r5;

        r1 := @this: arq.load;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<arq.load: java.lang.String getCommandName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --desc=assembler [--dump] --update=<request file>");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected void execUpdate(com.hp.hpl.jena.update.GraphStore)
    {
        com.hp.hpl.jena.update.GraphStore r5;
        com.hp.hpl.jena.graph.Node $r10;
        com.hp.hpl.jena.update.UpdateRequest $r2;
        arq.load r0;
        int $i0;
        java.lang.String $r14, r16;
        com.hp.hpl.jena.graph.Graph $r6, $r11;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r4, $r7;
        com.hp.hpl.jena.update.UpdateProcessor $r8;
        org.apache.jena.atlas.io.IndentedWriter r17;
        com.hp.hpl.jena.sparql.modify.request.UpdateLoad $r13;
        java.util.List $r1, $r3;
        arq.cmd.CmdException $r15;
        java.lang.Object $r9, $r12;

        r0 := @this: arq.load;

        r5 := @parameter0: com.hp.hpl.jena.update.GraphStore;

        $r1 = r0.<arq.load: java.util.List loadFiles>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r15 = new arq.cmd.CmdException;

        specialinvoke $r15.<arq.cmd.CmdException: void <init>(java.lang.String)>("Nothing to do");

        throw $r15;

     label1:
        $r2 = new com.hp.hpl.jena.update.UpdateRequest;

        specialinvoke $r2.<com.hp.hpl.jena.update.UpdateRequest: void <init>()>();

        $r3 = r0.<arq.load: java.util.List loadFiles>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.String) $r12;

        $r13 = new com.hp.hpl.jena.sparql.modify.request.UpdateLoad;

        $r14 = r0.<arq.load: java.lang.String graphName>;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.modify.request.UpdateLoad: void <init>(java.lang.String,java.lang.String)>(r16, $r14);

        virtualinvoke $r2.<com.hp.hpl.jena.update.UpdateRequest: com.hp.hpl.jena.update.UpdateRequest add(com.hp.hpl.jena.update.Update)>($r13);

        goto label2;

     label3:
        $r6 = interfaceinvoke r5.<com.hp.hpl.jena.update.GraphStore: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        specialinvoke r0.<arq.load: void monitor(com.hp.hpl.jena.graph.Graph)>($r6);

        $r7 = interfaceinvoke r5.<com.hp.hpl.jena.update.GraphStore: java.util.Iterator listGraphNodes()>();

     label4:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (com.hp.hpl.jena.graph.Node) $r9;

        $r11 = interfaceinvoke r5.<com.hp.hpl.jena.update.GraphStore: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>($r10);

        specialinvoke r0.<arq.load: void monitor(com.hp.hpl.jena.graph.Graph)>($r11);

        goto label4;

     label5:
        $r8 = staticinvoke <com.hp.hpl.jena.update.UpdateExecutionFactory: com.hp.hpl.jena.update.UpdateProcessor create(com.hp.hpl.jena.update.UpdateRequest,com.hp.hpl.jena.update.GraphStore)>($r2, r5);

        interfaceinvoke $r8.<com.hp.hpl.jena.update.UpdateProcessor: void execute()>();

        $z2 = r0.<arq.load: boolean dump>;

        if $z2 == 0 goto label6;

        r17 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r5);

        virtualinvoke r17.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

     label6:
        return;
    }

    private void monitor(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.sparql.util.graph.GraphLoadMonitor $r0;
        arq.load r3;
        com.hp.hpl.jena.graph.GraphEventManager $r2;
        com.hp.hpl.jena.graph.Graph r1;

        r3 := @this: arq.load;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r0 = new com.hp.hpl.jena.sparql.util.graph.GraphLoadMonitor;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.graph.GraphLoadMonitor: void <init>(int,boolean)>(20000, 0);

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.GraphEventManager: com.hp.hpl.jena.graph.GraphEventManager register(com.hp.hpl.jena.graph.GraphListener)>($r0);

        return;
    }

    static void <clinit>()
    {
        arq.cmdline.ArgDecl $r0, $r2;
        java.lang.String[] $r1, $r3;

        $r0 = new arq.cmdline.ArgDecl;

        $r1 = newarray (java.lang.String)[0];

        specialinvoke $r0.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "--graph", $r1);

        <arq.load: arq.cmdline.ArgDecl graphNameArg> = $r0;

        $r2 = new arq.cmdline.ArgDecl;

        $r3 = newarray (java.lang.String)[0];

        specialinvoke $r2.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "--dump", $r3);

        <arq.load: arq.cmdline.ArgDecl dumpArg> = $r2;

        return;
    }
}
