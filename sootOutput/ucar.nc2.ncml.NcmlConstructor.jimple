public class ucar.nc2.ncml.NcmlConstructor extends java.lang.Object
{
    private static final boolean validate;
    private static final boolean debugConstruct;
    private static final boolean showParsedXML;
    private java.util.Formatter errlog;

    public void <init>()
    {
        ucar.nc2.ncml.NcmlConstructor r0;
        java.util.Formatter $r1;

        r0 := @this: ucar.nc2.ncml.NcmlConstructor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Formatter;

        specialinvoke $r1.<java.util.Formatter: void <init>()>();

        r0.<ucar.nc2.ncml.NcmlConstructor: java.util.Formatter errlog> = $r1;

        return;
    }

    public java.util.Formatter getErrlog()
    {
        ucar.nc2.ncml.NcmlConstructor r0;
        java.util.Formatter $r1;

        r0 := @this: ucar.nc2.ncml.NcmlConstructor;

        $r1 = r0.<ucar.nc2.ncml.NcmlConstructor: java.util.Formatter errlog>;

        return $r1;
    }

    public boolean populateFromResource(java.lang.String, ucar.nc2.NetcdfFile) throws java.io.IOException
    {
        java.io.FileNotFoundException $r6;
        ucar.nc2.ncml.NcmlConstructor r0;
        java.lang.Class $r1;
        java.lang.ClassLoader $r2;
        java.lang.String r3;
        ucar.nc2.NetcdfFile r5;
        java.io.InputStream $r4;
        boolean $z0;

        r0 := @this: ucar.nc2.ncml.NcmlConstructor;

        r3 := @parameter0: java.lang.String;

        r5 := @parameter1: ucar.nc2.NetcdfFile;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = virtualinvoke $r2.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r3);

        if $r4 != null goto label1;

        $r6 = new java.io.FileNotFoundException;

        specialinvoke $r6.<java.io.FileNotFoundException: void <init>(java.lang.String)>(r3);

        throw $r6;

     label1:
        $z0 = virtualinvoke r0.<ucar.nc2.ncml.NcmlConstructor: boolean populate(java.io.InputStream,ucar.nc2.NetcdfFile)>($r4, r5);

        return $z0;
    }

    public boolean populate(java.lang.String, ucar.nc2.NetcdfFile) throws java.io.IOException
    {
        byte[] $r3;
        java.io.ByteArrayInputStream $r1;
        ucar.nc2.ncml.NcmlConstructor r0;
        java.lang.String r2;
        ucar.nc2.NetcdfFile r4;
        boolean $z0;

        r0 := @this: ucar.nc2.ncml.NcmlConstructor;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: ucar.nc2.NetcdfFile;

        $r1 = new java.io.ByteArrayInputStream;

        $r3 = virtualinvoke r2.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        $z0 = virtualinvoke r0.<ucar.nc2.ncml.NcmlConstructor: boolean populate(java.io.InputStream,ucar.nc2.NetcdfFile)>($r1, r4);

        return $z0;
    }

    public boolean populate(java.io.InputStream, ucar.nc2.NetcdfFile) throws java.io.IOException
    {
        org.jdom.input.SAXBuilder $r0;
        java.io.IOException $r10;
        ucar.nc2.Group $r6;
        java.util.Formatter $r7;
        org.jdom.Document $r2;
        org.jdom.JDOMException $r9;
        ucar.nc2.ncml.NcmlConstructor r4;
        int $i0;
        ucar.nc2.NetcdfFile r5;
        java.lang.String $r8, $r11;
        org.jdom.Element $r3;
        java.io.InputStream r1;
        boolean $z0;

        r4 := @this: ucar.nc2.ncml.NcmlConstructor;

        r1 := @parameter0: java.io.InputStream;

        r5 := @parameter1: ucar.nc2.NetcdfFile;

     label1:
        $r0 = new org.jdom.input.SAXBuilder;

        specialinvoke $r0.<org.jdom.input.SAXBuilder: void <init>(boolean)>(0);

        $r2 = virtualinvoke $r0.<org.jdom.input.SAXBuilder: org.jdom.Document build(java.io.InputStream)>(r1);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.io.IOException;

        $r11 = virtualinvoke $r9.<org.jdom.JDOMException: java.lang.String getMessage()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label4:
        $r3 = virtualinvoke $r2.<org.jdom.Document: org.jdom.Element getRootElement()>();

        $r6 = virtualinvoke r5.<ucar.nc2.NetcdfFile: ucar.nc2.Group getRootGroup()>();

        specialinvoke r4.<ucar.nc2.ncml.NcmlConstructor: void readGroup(ucar.nc2.NetcdfFile,ucar.nc2.Group,org.jdom.Element)>(r5, $r6, $r3);

        $r7 = r4.<ucar.nc2.ncml.NcmlConstructor: java.util.Formatter errlog>;

        $r8 = virtualinvoke $r7.<java.util.Formatter: java.lang.String toString()>();

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i0 != 0 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;

        catch org.jdom.JDOMException from label1 to label2 with label3;
    }

    private void readGroup(ucar.nc2.NetcdfFile, ucar.nc2.Group, org.jdom.Element) throws java.io.IOException
    {
        java.util.Formatter $r25;
        org.jdom.Namespace $r6, $r9, $r12, $r15;
        boolean $z0, $z1, $z2, $z3;
        ucar.nc2.Group r2, $r4, $r5, r26;
        java.util.List $r7, $r10, $r13, $r16;
        ucar.nc2.ncml.NcmlConstructor r20;
        ucar.nc2.NetcdfFile r3;
        java.lang.Object[] $r24;
        java.lang.String $r1;
        java.util.Iterator $r8, $r11, $r14, $r17;
        java.lang.Object $r18, $r21, $r22, $r23;
        org.jdom.Element r0, r19, r27, r28, r29;

        r20 := @this: ucar.nc2.ncml.NcmlConstructor;

        r3 := @parameter0: ucar.nc2.NetcdfFile;

        r2 := @parameter1: ucar.nc2.Group;

        r0 := @parameter2: org.jdom.Element;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        $r4 = virtualinvoke r3.<ucar.nc2.NetcdfFile: ucar.nc2.Group getRootGroup()>();

        if r2 != $r4 goto label01;

        r26 = r2;

        goto label03;

     label01:
        if $r1 != null goto label02;

        $r25 = r20.<ucar.nc2.ncml.NcmlConstructor: java.util.Formatter errlog>;

        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = r0;

        virtualinvoke $r25.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("NcML Group name is required (%s)%n", $r24);

        return;

     label02:
        $r5 = new ucar.nc2.Group;

        specialinvoke $r5.<ucar.nc2.Group: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,java.lang.String)>(r3, r2, $r1);

        r26 = $r5;

        virtualinvoke r2.<ucar.nc2.Group: void addGroup(ucar.nc2.Group)>($r5);

     label03:
        $r6 = <ucar.nc2.ncml.NcMLReader: org.jdom.Namespace ncNS>;

        $r7 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("attribute", $r6);

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label05;

        $r23 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r27 = (org.jdom.Element) $r23;

        specialinvoke r20.<ucar.nc2.ncml.NcmlConstructor: void readAtt(java.lang.Object,org.jdom.Element)>(r26, r27);

        goto label04;

     label05:
        $r9 = <ucar.nc2.ncml.NcMLReader: org.jdom.Namespace ncNS>;

        $r10 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("dimension", $r9);

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r22 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r28 = (org.jdom.Element) $r22;

        specialinvoke r20.<ucar.nc2.ncml.NcmlConstructor: void readDim(ucar.nc2.Group,org.jdom.Element)>(r26, r28);

        goto label06;

     label07:
        $r12 = <ucar.nc2.ncml.NcMLReader: org.jdom.Namespace ncNS>;

        $r13 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("variable", $r12);

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r21 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r29 = (org.jdom.Element) $r21;

        specialinvoke r20.<ucar.nc2.ncml.NcmlConstructor: ucar.nc2.Variable readVariable(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,org.jdom.Element)>(r3, r26, null, r29);

        goto label08;

     label09:
        $r15 = <ucar.nc2.ncml.NcMLReader: org.jdom.Namespace ncNS>;

        $r16 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("group", $r15);

        $r17 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.jdom.Element) $r18;

        specialinvoke r20.<ucar.nc2.ncml.NcmlConstructor: void readGroup(ucar.nc2.NetcdfFile,ucar.nc2.Group,org.jdom.Element)>(r3, r26, r19);

        goto label10;

     label11:
        return;
    }

    private ucar.nc2.Variable readVariable(ucar.nc2.NetcdfFile, ucar.nc2.Group, ucar.nc2.Structure, org.jdom.Element)
    {
        java.util.Formatter $r26, $r28;
        org.jdom.Namespace $r11, $r16, $r21, $r33;
        boolean $z0, $z1, $z2;
        ucar.ma2.DataType $r3, $r5, $r6;
        ucar.nc2.Group r9;
        java.util.List $r17, $r22, $r34;
        ucar.nc2.ncml.NcmlConstructor r14;
        ucar.nc2.NetcdfFile r8;
        java.lang.Object[] $r25, $r27;
        ucar.nc2.Structure r10, $r20;
        ucar.nc2.Sequence $r15;
        ucar.nc2.Variable $r7, r30;
        java.lang.String $r1, $r2, $r4, r29;
        java.util.Iterator $r18, $r23, $r35;
        java.lang.Object $r13, $r19, $r24;
        org.jdom.Element r0, $r12, r31, r32, r36;

        r14 := @this: ucar.nc2.ncml.NcmlConstructor;

        r8 := @parameter0: ucar.nc2.NetcdfFile;

        r9 := @parameter1: ucar.nc2.Group;

        r10 := @parameter2: ucar.nc2.Structure;

        r0 := @parameter3: org.jdom.Element;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        if $r1 != null goto label01;

        $r28 = r14.<ucar.nc2.ncml.NcmlConstructor: java.util.Formatter errlog>;

        $r27 = newarray (java.lang.Object)[1];

        $r27[0] = r0;

        virtualinvoke $r28.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("NcML Variable name is required (%s)%n", $r27);

        return null;

     label01:
        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("type");

        if $r2 != null goto label02;

        $r26 = r14.<ucar.nc2.ncml.NcmlConstructor: java.util.Formatter errlog>;

        $r25 = newarray (java.lang.Object)[1];

        $r25[0] = $r1;

        virtualinvoke $r26.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("NcML variable (%s) must have type attribute", $r25);

        return null;

     label02:
        $r3 = staticinvoke <ucar.ma2.DataType: ucar.ma2.DataType getType(java.lang.String)>($r2);

        $r4 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("shape");

        r29 = $r4;

        if $r4 != null goto label03;

        r29 = "";

     label03:
        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r3 != $r5 goto label06;

        $r20 = new ucar.nc2.Structure;

        specialinvoke $r20.<ucar.nc2.Structure: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r8, r9, r10, $r1);

        virtualinvoke $r20.<ucar.nc2.Structure: void setDimensions(java.lang.String)>(r29);

        r30 = $r20;

        $r21 = <ucar.nc2.ncml.NcMLReader: org.jdom.Namespace ncNS>;

        $r22 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("variable", $r21);

        $r23 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r24 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r31 = (org.jdom.Element) $r24;

        specialinvoke r14.<ucar.nc2.ncml.NcmlConstructor: ucar.nc2.Variable readVariable(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,org.jdom.Element)>(r8, r9, $r20, r31);

        goto label04;

     label05:
        goto label10;

     label06:
        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType SEQUENCE>;

        if $r3 != $r6 goto label09;

        $r15 = new ucar.nc2.Sequence;

        specialinvoke $r15.<ucar.nc2.Sequence: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r8, r9, r10, $r1);

        r30 = $r15;

        $r16 = <ucar.nc2.ncml.NcMLReader: org.jdom.Namespace ncNS>;

        $r17 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("variable", $r16);

        $r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r32 = (org.jdom.Element) $r19;

        specialinvoke r14.<ucar.nc2.ncml.NcmlConstructor: ucar.nc2.Variable readVariable(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,org.jdom.Element)>(r8, r9, $r15, r32);

        goto label07;

     label08:
        goto label10;

     label09:
        $r7 = new ucar.nc2.Variable;

        specialinvoke $r7.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String,ucar.ma2.DataType,java.lang.String)>(r8, r9, r10, $r1, $r3, r29);

        r30 = $r7;

        $r11 = <ucar.nc2.ncml.NcMLReader: org.jdom.Namespace ncNS>;

        $r12 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("values", $r11);

        if $r12 == null goto label10;

        specialinvoke r14.<ucar.nc2.ncml.NcmlConstructor: void readValues(ucar.nc2.Variable,org.jdom.Element,org.jdom.Element)>($r7, r0, $r12);

     label10:
        $r33 = <ucar.nc2.ncml.NcMLReader: org.jdom.Namespace ncNS>;

        $r34 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("attribute", $r33);

        $r35 = interfaceinvoke $r34.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z2 = interfaceinvoke $r35.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r13 = interfaceinvoke $r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (org.jdom.Element) $r13;

        specialinvoke r14.<ucar.nc2.ncml.NcmlConstructor: void readAtt(java.lang.Object,org.jdom.Element)>(r30, r36);

        goto label11;

     label12:
        if r10 == null goto label13;

        virtualinvoke r10.<ucar.nc2.Structure: ucar.nc2.Variable addMemberVariable(ucar.nc2.Variable)>(r30);

        goto label14;

     label13:
        virtualinvoke r9.<ucar.nc2.Group: void addVariable(ucar.nc2.Variable)>(r30);

     label14:
        return r30;
    }

    private void readValues(ucar.nc2.Variable, org.jdom.Element, org.jdom.Element)
    {
        int[] $r17;
        org.jdom.Namespace $r5;
        boolean $z0;
        ucar.ma2.DataType $r9, $r10, $r15;
        ucar.nc2.ncml.NcmlConstructor r19;
        long $l1, $l4;
        java.util.ArrayList $r11;
        java.util.StringTokenizer $r12;
        int $i0, $i2, $i5, i6, i7;
        ucar.nc2.Variable r8;
        java.lang.String $r1, $r2, $r3, $r6, $r7, $r13, r20;
        double $d0, $d1;
        char $c3;
        ucar.ma2.Array $r18;
        char[] r14;
        java.lang.Class $r16;
        org.jdom.Element r0, r4;

        r19 := @this: ucar.nc2.ncml.NcmlConstructor;

        r8 := @parameter0: ucar.nc2.Variable;

        r4 := @parameter1: org.jdom.Element;

        r0 := @parameter2: org.jdom.Element;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("start");

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("increment");

        $r3 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("npts");

        if $r3 != null goto label01;

        $l4 = virtualinvoke r8.<ucar.nc2.Variable: long getSize()>();

        $i5 = (int) $l4;

        goto label02;

     label01:
        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

     label02:
        if $r1 == null goto label03;

        if $r2 == null goto label03;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r1);

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r2);

        virtualinvoke r8.<ucar.nc2.Variable: void setValues(int,double,double)>($i5, $d0, $d1);

        return;

     label03:
        $r5 = <ucar.nc2.ncml.NcMLReader: org.jdom.Namespace ncNS>;

        $r6 = virtualinvoke r4.<org.jdom.Element: java.lang.String getChildText(java.lang.String,org.jdom.Namespace)>("values", $r5);

        $r7 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("separator");

        r20 = $r7;

        if $r7 != null goto label04;

        r20 = " ";

     label04:
        $r9 = virtualinvoke r8.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r9 != $r10 goto label07;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $l1 = virtualinvoke r8.<ucar.nc2.Variable: long getSize()>();

        i6 = (int) $l1;

        r14 = newarray (char)[i6];

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, i6);

        i7 = 0;

     label05:
        if i7 >= $i2 goto label06;

        $c3 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(i7);

        r14[i7] = $c3;

        i7 = i7 + 1;

        goto label05;

     label06:
        $r15 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        $r16 = virtualinvoke $r15.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r17 = virtualinvoke r8.<ucar.nc2.Variable: int[] getShape()>();

        $r18 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r16, $r17, r14);

        virtualinvoke r8.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r18, 1);

        goto label10;

     label07:
        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r12 = new java.util.StringTokenizer;

        specialinvoke $r12.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r6, r20);

     label08:
        $z0 = virtualinvoke $r12.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label09;

        $r13 = virtualinvoke $r12.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label08;

     label09:
        virtualinvoke r8.<ucar.nc2.Variable: void setValues(java.util.List)>($r11);

     label10:
        return;
    }

    private void readAtt(java.lang.Object, org.jdom.Element)
    {
        java.lang.Object[] $r8, $r11;
        java.util.Formatter $r9, $r12;
        ucar.nc2.Variable $r5;
        java.lang.String $r1, $r13;
        boolean $z0, $z1;
        java.lang.RuntimeException $r10;
        ucar.ma2.Array $r2;
        ucar.nc2.Group $r6;
        ucar.nc2.Attribute $r3;
        ucar.nc2.ncml.NcmlConstructor r7;
        java.lang.Object r4;
        org.jdom.Element r0;

        r7 := @this: ucar.nc2.ncml.NcmlConstructor;

        r4 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.jdom.Element;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        if $r1 != null goto label1;

        $r9 = r7.<ucar.nc2.ncml.NcmlConstructor: java.util.Formatter errlog>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r0;

        virtualinvoke $r9.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("NcML Attribute name is required (%s)%n", $r8);

        return;

     label1:
        $r2 = staticinvoke <ucar.nc2.ncml.NcMLReader: ucar.ma2.Array readAttributeValues(org.jdom.Element)>(r0);

        $r3 = new ucar.nc2.Attribute;

        specialinvoke $r3.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.ma2.Array)>($r1, $r2);

        $z0 = r4 instanceof ucar.nc2.Group;

        if $z0 == 0 goto label2;

        $r6 = (ucar.nc2.Group) r4;

        virtualinvoke $r6.<ucar.nc2.Group: void addAttribute(ucar.nc2.Attribute)>($r3);

        goto label3;

     label2:
        $z1 = r4 instanceof ucar.nc2.Variable;

        if $z1 == 0 goto label3;

        $r5 = (ucar.nc2.Variable) r4;

        virtualinvoke $r5.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r3);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r12 = r7.<ucar.nc2.ncml.NcmlConstructor: java.util.Formatter errlog>;

        $r11 = newarray (java.lang.Object)[3];

        $r13 = virtualinvoke $r10.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r11[0] = $r13;

        $r11[1] = $r1;

        $r11[2] = r4;

        virtualinvoke $r12.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("NcML new Attribute Exception: %s att=%s in=%s%n", $r11);

     label5:
        return;

        catch java.lang.RuntimeException from label1 to label3 with label4;
    }

    private void readDim(ucar.nc2.Group, org.jdom.Element)
    {
        java.lang.Object[] $r9;
        java.util.Formatter $r10;
        int i0;
        java.lang.String $r1, $r2, $r3, $r4, $r5;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, z8;
        ucar.nc2.Group r6;
        ucar.nc2.ncml.NcmlConstructor r8;
        ucar.nc2.Dimension $r7, $r11;
        org.jdom.Element r0;

        r8 := @this: ucar.nc2.ncml.NcmlConstructor;

        r6 := @parameter0: ucar.nc2.Group;

        r0 := @parameter1: org.jdom.Element;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        if $r1 != null goto label1;

        $r10 = r8.<ucar.nc2.ncml.NcmlConstructor: java.util.Formatter errlog>;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r0;

        virtualinvoke $r10.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("NcML Dimension name is required (%s)%n", $r9);

        return;

     label1:
        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("length");

        $r3 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("isUnlimited");

        $r4 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("isShared");

        $r5 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("isVariableLength");

        if $r3 == null goto label2;

        $z5 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z5 == 0 goto label2;

        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        z0 = $z6;

        if $r5 == null goto label4;

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z4 == 0 goto label4;

        $z7 = 1;

        goto label5;

     label4:
        $z7 = 0;

     label5:
        z1 = $z7;

        z8 = 1;

        if $r4 == null goto label6;

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z3 == 0 goto label6;

        z8 = 0;

     label6:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        if $r5 == null goto label7;

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z2 == 0 goto label7;

        $r7 = <ucar.nc2.Dimension: ucar.nc2.Dimension VLEN>;

        i0 = virtualinvoke $r7.<ucar.nc2.Dimension: int getLength()>();

     label7:
        $r11 = new ucar.nc2.Dimension;

        specialinvoke $r11.<ucar.nc2.Dimension: void <init>(java.lang.String,int,boolean,boolean,boolean)>($r1, i0, z8, z0, z1);

        virtualinvoke r6.<ucar.nc2.Group: void addDimension(ucar.nc2.Dimension)>($r11);

        return;
    }

    public static void <clinit>()
    {
        <ucar.nc2.ncml.NcmlConstructor: boolean showParsedXML> = 0;

        <ucar.nc2.ncml.NcmlConstructor: boolean debugConstruct> = 0;

        <ucar.nc2.ncml.NcmlConstructor: boolean validate> = 0;

        return;
    }
}
