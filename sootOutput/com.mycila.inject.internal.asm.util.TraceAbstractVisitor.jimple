public abstract class com.mycila.inject.internal.asm.util.TraceAbstractVisitor extends com.mycila.inject.internal.asm.util.AbstractVisitor
{
    public static final int INTERNAL_NAME;
    public static final int FIELD_DESCRIPTOR;
    public static final int FIELD_SIGNATURE;
    public static final int METHOD_DESCRIPTOR;
    public static final int METHOD_SIGNATURE;
    public static final int CLASS_SIGNATURE;
    public static final int TYPE_DECLARATION;
    public static final int CLASS_DECLARATION;
    public static final int PARAMETERS_DECLARATION;
    protected java.lang.String tab;

    public void <init>()
    {
        com.mycila.inject.internal.asm.util.TraceAbstractVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceAbstractVisitor;

        specialinvoke r0.<com.mycila.inject.internal.asm.util.AbstractVisitor: void <init>()>();

        r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.lang.String tab> = "  ";

        return;
    }

    public com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)
    {
        com.mycila.inject.internal.asm.util.TraceAnnotationVisitor $r10;
        java.lang.StringBuffer $r1, $r3, $r4, $r6, $r7;
        java.lang.String $r2, r5, $r9, $r14;
        boolean z0;
        java.util.List $r8, $r11, $r12, $r13;
        com.mycila.inject.internal.asm.util.TraceAbstractVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceAbstractVisitor;

        r5 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.lang.String tab>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(64);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: void appendDescriptor(int,java.lang.String)>(1, r5);

        $r6 = r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        $r8 = r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.util.List text>;

        $r7 = r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.lang.StringBuffer buf>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: com.mycila.inject.internal.asm.util.TraceAnnotationVisitor createTraceAnnotationVisitor()>();

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.util.List text>;

        $r12 = virtualinvoke $r10.<com.mycila.inject.internal.asm.util.TraceAnnotationVisitor: java.util.List getText()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.util.List text>;

        if z0 == 0 goto label1;

        $r14 = ")\n";

        goto label2;

     label1:
        $r14 = ") // invisible\n";

     label2:
        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r14);

        return $r10;
    }

    public void visitAttribute(com.mycila.inject.internal.asm.Attribute)
    {
        java.util.List $r9;
        com.mycila.inject.internal.asm.util.TraceAbstractVisitor r0;
        java.lang.StringBuffer $r1, $r3, $r4, $r7, $r8, $r11;
        int $i1;
        java.lang.String $r2, $r6, $r10;
        com.mycila.inject.internal.asm.Attribute r5;
        boolean $z0;
        com.mycila.inject.internal.asm.util.Traceable $r12;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceAbstractVisitor;

        r5 := @parameter0: com.mycila.inject.internal.asm.Attribute;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.lang.String tab>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ATTRIBUTE ");

        $r6 = r5.<com.mycila.inject.internal.asm.Attribute: java.lang.String type>;

        $i1 = (int) -1;

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: void appendDescriptor(int,java.lang.String)>($i1, $r6);

        $z0 = r5 instanceof com.mycila.inject.internal.asm.util.Traceable;

        if $z0 == 0 goto label1;

        $r12 = (com.mycila.inject.internal.asm.util.Traceable) r5;

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.lang.StringBuffer buf>;

        interfaceinvoke $r12.<com.mycila.inject.internal.asm.util.Traceable: void trace(java.lang.StringBuffer,java.util.Map)>($r11, null);

        goto label2;

     label1:
        $r7 = r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : unknown\n");

     label2:
        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.util.List text>;

        $r8 = r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.lang.StringBuffer buf>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

        return;
    }

    public void visitEnd()
    {
        com.mycila.inject.internal.asm.util.TraceAbstractVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceAbstractVisitor;

        return;
    }

    protected com.mycila.inject.internal.asm.util.TraceAnnotationVisitor createTraceAnnotationVisitor()
    {
        com.mycila.inject.internal.asm.util.TraceAnnotationVisitor $r0;
        com.mycila.inject.internal.asm.util.TraceAbstractVisitor r1;

        r1 := @this: com.mycila.inject.internal.asm.util.TraceAbstractVisitor;

        $r0 = new com.mycila.inject.internal.asm.util.TraceAnnotationVisitor;

        specialinvoke $r0.<com.mycila.inject.internal.asm.util.TraceAnnotationVisitor: void <init>()>();

        return $r0;
    }

    protected void appendDescriptor(int, java.lang.String)
    {
        com.mycila.inject.internal.asm.util.TraceAbstractVisitor r1;
        java.lang.StringBuffer $r2, $r3, $r4, $r5;
        int i0;
        java.lang.String r0;

        r1 := @this: com.mycila.inject.internal.asm.util.TraceAbstractVisitor;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        if i0 == 5 goto label1;

        if i0 == 2 goto label1;

        if i0 != 4 goto label2;

     label1:
        if r0 == null goto label3;

        $r2 = r1.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.lang.StringBuffer buf>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// signature ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        goto label3;

     label2:
        $r5 = r1.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

     label3:
        return;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.asm.util.TraceAbstractVisitor: int PARAMETERS_DECLARATION> = 8;

        <com.mycila.inject.internal.asm.util.TraceAbstractVisitor: int CLASS_DECLARATION> = 7;

        <com.mycila.inject.internal.asm.util.TraceAbstractVisitor: int TYPE_DECLARATION> = 6;

        <com.mycila.inject.internal.asm.util.TraceAbstractVisitor: int CLASS_SIGNATURE> = 5;

        <com.mycila.inject.internal.asm.util.TraceAbstractVisitor: int METHOD_SIGNATURE> = 4;

        <com.mycila.inject.internal.asm.util.TraceAbstractVisitor: int METHOD_DESCRIPTOR> = 3;

        <com.mycila.inject.internal.asm.util.TraceAbstractVisitor: int FIELD_SIGNATURE> = 2;

        <com.mycila.inject.internal.asm.util.TraceAbstractVisitor: int FIELD_DESCRIPTOR> = 1;

        <com.mycila.inject.internal.asm.util.TraceAbstractVisitor: int INTERNAL_NAME> = 0;

        return;
    }
}
