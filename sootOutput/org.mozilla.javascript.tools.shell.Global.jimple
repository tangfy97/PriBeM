public class org.mozilla.javascript.tools.shell.Global extends org.mozilla.javascript.ImporterTopLevel
{
    static final long serialVersionUID;
    org.mozilla.javascript.NativeArray history;
    private java.io.InputStream inStream;
    private java.io.PrintStream outStream;
    private java.io.PrintStream errStream;
    private boolean sealedStdLib;
    boolean initialized;
    private org.mozilla.javascript.tools.shell.QuitAction quitAction;
    static java.lang.Class class$org$mozilla$javascript$tools$shell$Global;
    static java.lang.Class class$org$mozilla$javascript$Script;

    public void <init>()
    {
        org.mozilla.javascript.tools.shell.Global r0;

        r0 := @this: org.mozilla.javascript.tools.shell.Global;

        specialinvoke r0.<org.mozilla.javascript.ImporterTopLevel: void <init>()>();

        r0.<org.mozilla.javascript.tools.shell.Global: boolean sealedStdLib> = 0;

        return;
    }

    public void <init>(org.mozilla.javascript.Context)
    {
        org.mozilla.javascript.tools.shell.Global r0;
        org.mozilla.javascript.Context r1;

        r0 := @this: org.mozilla.javascript.tools.shell.Global;

        r1 := @parameter0: org.mozilla.javascript.Context;

        specialinvoke r0.<org.mozilla.javascript.ImporterTopLevel: void <init>()>();

        r0.<org.mozilla.javascript.tools.shell.Global: boolean sealedStdLib> = 0;

        virtualinvoke r0.<org.mozilla.javascript.tools.shell.Global: void init(org.mozilla.javascript.Context)>(r1);

        return;
    }

    public void initQuitAction(org.mozilla.javascript.tools.shell.QuitAction)
    {
        org.mozilla.javascript.tools.shell.Global r1;
        org.mozilla.javascript.tools.shell.QuitAction r0, $r2;
        java.lang.IllegalArgumentException $r3, $r4;

        r1 := @this: org.mozilla.javascript.tools.shell.Global;

        r0 := @parameter0: org.mozilla.javascript.tools.shell.QuitAction;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("quitAction is null");

        throw $r4;

     label1:
        $r2 = r1.<org.mozilla.javascript.tools.shell.Global: org.mozilla.javascript.tools.shell.QuitAction quitAction>;

        if $r2 == null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The method is once-call.");

        throw $r3;

     label2:
        r1.<org.mozilla.javascript.tools.shell.Global: org.mozilla.javascript.tools.shell.QuitAction quitAction> = r0;

        return;
    }

    public void init(org.mozilla.javascript.ContextFactory)
    {
        org.mozilla.javascript.tools.shell.Global r2;
        org.mozilla.javascript.ContextFactory r0;
        org.mozilla.javascript.tools.shell.Global$1 $r1;

        r2 := @this: org.mozilla.javascript.tools.shell.Global;

        r0 := @parameter0: org.mozilla.javascript.ContextFactory;

        $r1 = new org.mozilla.javascript.tools.shell.Global$1;

        specialinvoke $r1.<org.mozilla.javascript.tools.shell.Global$1: void <init>(org.mozilla.javascript.tools.shell.Global)>(r2);

        virtualinvoke r0.<org.mozilla.javascript.ContextFactory: java.lang.Object call(org.mozilla.javascript.ContextAction)>($r1);

        return;
    }

    public void init(org.mozilla.javascript.Context)
    {
        org.mozilla.javascript.NativeArray $r6, $r7;
        org.mozilla.javascript.Context r1;
        java.lang.String[] $r2;
        org.mozilla.javascript.tools.shell.Global r0;
        org.mozilla.javascript.Scriptable $r5;
        org.mozilla.javascript.tools.shell.Environment $r4;
        java.lang.Class $r3, $r8;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.tools.shell.Global;

        r1 := @parameter0: org.mozilla.javascript.Context;

        $z0 = r0.<org.mozilla.javascript.tools.shell.Global: boolean sealedStdLib>;

        virtualinvoke r0.<org.mozilla.javascript.tools.shell.Global: void initStandardObjects(org.mozilla.javascript.Context,boolean)>(r1, $z0);

        $r2 = newarray (java.lang.String)[17];

        $r2[0] = "defineClass";

        $r2[1] = "deserialize";

        $r2[2] = "gc";

        $r2[3] = "help";

        $r2[4] = "load";

        $r2[5] = "loadClass";

        $r2[6] = "print";

        $r2[7] = "quit";

        $r2[8] = "readFile";

        $r2[9] = "readUrl";

        $r2[10] = "runCommand";

        $r2[11] = "seal";

        $r2[12] = "serialize";

        $r2[13] = "spawn";

        $r2[14] = "sync";

        $r2[15] = "toint32";

        $r2[16] = "version";

        $r3 = <org.mozilla.javascript.tools.shell.Global: java.lang.Class class$org$mozilla$javascript$tools$shell$Global>;

        if $r3 != null goto label1;

        $r8 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.Class class$(java.lang.String)>("org.mozilla.javascript.tools.shell.Global");

        <org.mozilla.javascript.tools.shell.Global: java.lang.Class class$org$mozilla$javascript$tools$shell$Global> = $r8;

        goto label2;

     label1:
        $r8 = <org.mozilla.javascript.tools.shell.Global: java.lang.Class class$org$mozilla$javascript$tools$shell$Global>;

     label2:
        virtualinvoke r0.<org.mozilla.javascript.tools.shell.Global: void defineFunctionProperties(java.lang.String[],java.lang.Class,int)>($r2, $r8, 2);

        staticinvoke <org.mozilla.javascript.tools.shell.Environment: void defineClass(org.mozilla.javascript.ScriptableObject)>(r0);

        $r4 = new org.mozilla.javascript.tools.shell.Environment;

        specialinvoke $r4.<org.mozilla.javascript.tools.shell.Environment: void <init>(org.mozilla.javascript.ScriptableObject)>(r0);

        virtualinvoke r0.<org.mozilla.javascript.tools.shell.Global: void defineProperty(java.lang.String,java.lang.Object,int)>("environment", $r4, 2);

        $r5 = virtualinvoke r1.<org.mozilla.javascript.Context: org.mozilla.javascript.Scriptable newArray(org.mozilla.javascript.Scriptable,int)>(r0, 0);

        $r6 = (org.mozilla.javascript.NativeArray) $r5;

        r0.<org.mozilla.javascript.tools.shell.Global: org.mozilla.javascript.NativeArray history> = $r6;

        $r7 = r0.<org.mozilla.javascript.tools.shell.Global: org.mozilla.javascript.NativeArray history>;

        virtualinvoke r0.<org.mozilla.javascript.tools.shell.Global: void defineProperty(java.lang.String,java.lang.Object,int)>("history", $r7, 2);

        r0.<org.mozilla.javascript.tools.shell.Global: boolean initialized> = 1;

        return;
    }

    public static void help(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)
    {
        java.io.PrintStream $r2;
        org.mozilla.javascript.tools.shell.Global $r1;
        org.mozilla.javascript.Scriptable r5;
        java.lang.Object[] r6;
        org.mozilla.javascript.Context r4;
        org.mozilla.javascript.Function r0;
        java.lang.String $r3;

        r4 := @parameter0: org.mozilla.javascript.Context;

        r5 := @parameter1: org.mozilla.javascript.Scriptable;

        r6 := @parameter2: java.lang.Object[];

        r0 := @parameter3: org.mozilla.javascript.Function;

        $r1 = staticinvoke <org.mozilla.javascript.tools.shell.Global: org.mozilla.javascript.tools.shell.Global getInstance(org.mozilla.javascript.Function)>(r0);

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.tools.shell.Global: java.io.PrintStream getOut()>();

        $r3 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String)>("msg.help");

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r3);

        return;
    }

    public static void gc(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)
    {
        org.mozilla.javascript.Scriptable r1;
        java.lang.Object[] r2;
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.Function r3;

        r0 := @parameter0: org.mozilla.javascript.Context;

        r1 := @parameter1: org.mozilla.javascript.Scriptable;

        r2 := @parameter2: java.lang.Object[];

        r3 := @parameter3: org.mozilla.javascript.Function;

        staticinvoke <java.lang.System: void gc()>();

        return;
    }

    public static java.lang.Object print(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)
    {
        java.io.PrintStream $r2;
        java.lang.Object[] r3;
        org.mozilla.javascript.Context r7;
        org.mozilla.javascript.tools.shell.Global $r1;
        org.mozilla.javascript.Scriptable r8;
        int $i0, i1;
        org.mozilla.javascript.Function r0;
        java.lang.Object $r4, $r5;
        java.lang.String $r6;

        r7 := @parameter0: org.mozilla.javascript.Context;

        r8 := @parameter1: org.mozilla.javascript.Scriptable;

        r3 := @parameter2: java.lang.Object[];

        r0 := @parameter3: org.mozilla.javascript.Function;

        $r1 = staticinvoke <org.mozilla.javascript.tools.shell.Global: org.mozilla.javascript.tools.shell.Global getInstance(org.mozilla.javascript.Function)>(r0);

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.tools.shell.Global: java.io.PrintStream getOut()>();

        i1 = 0;

     label1:
        $i0 = lengthof r3;

        if i1 >= $i0 goto label3;

        if i1 <= 0 goto label2;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>(" ");

     label2:
        $r5 = r3[i1];

        $r6 = staticinvoke <org.mozilla.javascript.Context: java.lang.String toString(java.lang.Object)>($r5);

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>($r6);

        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke $r2.<java.io.PrintStream: void println()>();

        $r4 = staticinvoke <org.mozilla.javascript.Context: java.lang.Object getUndefinedValue()>();

        return $r4;
    }

    public static void quit(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)
    {
        java.lang.Object[] r3;
        org.mozilla.javascript.Context r5;
        org.mozilla.javascript.tools.shell.QuitAction $r2, $r6;
        org.mozilla.javascript.tools.shell.Global $r1;
        org.mozilla.javascript.Scriptable r7;
        int $i0, $i1;
        org.mozilla.javascript.Function r0;
        java.lang.Object $r4;

        r5 := @parameter0: org.mozilla.javascript.Context;

        r7 := @parameter1: org.mozilla.javascript.Scriptable;

        r3 := @parameter2: java.lang.Object[];

        r0 := @parameter3: org.mozilla.javascript.Function;

        $r1 = staticinvoke <org.mozilla.javascript.tools.shell.Global: org.mozilla.javascript.tools.shell.Global getInstance(org.mozilla.javascript.Function)>(r0);

        $r2 = $r1.<org.mozilla.javascript.tools.shell.Global: org.mozilla.javascript.tools.shell.QuitAction quitAction>;

        if $r2 == null goto label3;

        $i0 = lengthof r3;

        if $i0 != 0 goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $r4 = r3[0];

        $i1 = staticinvoke <org.mozilla.javascript.ScriptRuntime: int toInt32(java.lang.Object)>($r4);

     label2:
        $r6 = $r1.<org.mozilla.javascript.tools.shell.Global: org.mozilla.javascript.tools.shell.QuitAction quitAction>;

        interfaceinvoke $r6.<org.mozilla.javascript.tools.shell.QuitAction: void quit(org.mozilla.javascript.Context,int)>(r5, $i1);

     label3:
        return;
    }

    public static double version(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)
    {
        java.lang.Object[] r1;
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.Scriptable r3;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        org.mozilla.javascript.Function r4;
        double d0, $d1;

        r0 := @parameter0: org.mozilla.javascript.Context;

        r3 := @parameter1: org.mozilla.javascript.Scriptable;

        r1 := @parameter2: java.lang.Object[];

        r4 := @parameter3: org.mozilla.javascript.Function;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Context: int getLanguageVersion()>();

        d0 = (double) $i0;

        $i1 = lengthof r1;

        if $i1 <= 0 goto label1;

        $r2 = r1[0];

        $d1 = staticinvoke <org.mozilla.javascript.Context: double toNumber(java.lang.Object)>($r2);

        $i2 = (int) $d1;

        virtualinvoke r0.<org.mozilla.javascript.Context: void setLanguageVersion(int)>($i2);

     label1:
        return d0;
    }

    public static void load(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)
    {
        java.lang.Object[] r0;
        org.mozilla.javascript.Context r1;
        org.mozilla.javascript.Scriptable r2;
        int $i0, i1;
        java.lang.Object $r3;
        org.mozilla.javascript.Function r5;
        java.lang.String $r4;

        r1 := @parameter0: org.mozilla.javascript.Context;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        r0 := @parameter2: java.lang.Object[];

        r5 := @parameter3: org.mozilla.javascript.Function;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r3 = r0[i1];

        $r4 = staticinvoke <org.mozilla.javascript.Context: java.lang.String toString(java.lang.Object)>($r3);

        staticinvoke <org.mozilla.javascript.tools.shell.Main: void processFile(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String)>(r1, r2, $r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void defineClass(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function) throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] r0;
        org.mozilla.javascript.Scriptable r2;
        org.mozilla.javascript.Context r3;
        java.lang.Class $r1;
        org.mozilla.javascript.Function r4;

        r3 := @parameter0: org.mozilla.javascript.Context;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        r0 := @parameter2: java.lang.Object[];

        r4 := @parameter3: org.mozilla.javascript.Function;

        $r1 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.Class getClass(java.lang.Object[])>(r0);

        staticinvoke <org.mozilla.javascript.ScriptableObject: void defineClass(org.mozilla.javascript.Scriptable,java.lang.Class)>(r2, $r1);

        return;
    }

    public static void loadClass(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function) throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] r0;
        org.mozilla.javascript.Context r5;
        org.mozilla.javascript.Script r4;
        java.lang.RuntimeException $r7;
        org.mozilla.javascript.Scriptable r6;
        java.lang.Class $r1, $r2, $r9;
        java.lang.Object $r3;
        org.mozilla.javascript.Function r8;
        boolean $z0;

        r5 := @parameter0: org.mozilla.javascript.Context;

        r6 := @parameter1: org.mozilla.javascript.Scriptable;

        r0 := @parameter2: java.lang.Object[];

        r8 := @parameter3: org.mozilla.javascript.Function;

        $r1 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.Class getClass(java.lang.Object[])>(r0);

        $r2 = <org.mozilla.javascript.tools.shell.Global: java.lang.Class class$org$mozilla$javascript$Script>;

        if $r2 != null goto label1;

        $r9 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.Class class$(java.lang.String)>("org.mozilla.javascript.Script");

        <org.mozilla.javascript.tools.shell.Global: java.lang.Class class$org$mozilla$javascript$Script> = $r9;

        goto label2;

     label1:
        $r9 = <org.mozilla.javascript.tools.shell.Global: java.lang.Class class$org$mozilla$javascript$Script>;

     label2:
        $z0 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 != 0 goto label3;

        $r7 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.RuntimeException reportRuntimeError(java.lang.String)>("msg.must.implement.Script");

        throw $r7;

     label3:
        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

        r4 = (org.mozilla.javascript.Script) $r3;

        interfaceinvoke r4.<org.mozilla.javascript.Script: java.lang.Object exec(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable)>(r5, r6);

        return;
    }

    private static java.lang.Class getClass(java.lang.Object[]) throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] r0;
        java.lang.RuntimeException $r8, $r10;
        org.mozilla.javascript.Wrapper $r5;
        int $i0;
        java.lang.Object r1, $r2, $r6;
        java.lang.Class $r4, $r7;
        java.lang.ClassNotFoundException $r9;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r8 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.RuntimeException reportRuntimeError(java.lang.String)>("msg.expected.string.arg");

        throw $r8;

     label1:
        r1 = r0[0];

        $z0 = r1 instanceof org.mozilla.javascript.Wrapper;

        if $z0 == 0 goto label2;

        $r5 = (org.mozilla.javascript.Wrapper) r1;

        $r6 = interfaceinvoke $r5.<org.mozilla.javascript.Wrapper: java.lang.Object unwrap()>();

        $z1 = $r6 instanceof java.lang.Class;

        if $z1 == 0 goto label2;

        $r7 = (java.lang.Class) $r6;

        return $r7;

     label2:
        $r2 = r0[0];

        $r3 = staticinvoke <org.mozilla.javascript.Context: java.lang.String toString(java.lang.Object)>($r2);

     label3:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r3);

     label4:
        return $r4;

     label5:
        $r9 := @caughtexception;

        $r10 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.RuntimeException reportRuntimeError(java.lang.String,java.lang.String)>("msg.class.not.found", $r3);

        throw $r10;

        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }

    public static void serialize(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function) throws java.io.IOException
    {
        java.lang.Object[] r0;
        org.mozilla.javascript.Context r9;
        org.mozilla.javascript.EvaluatorException $r8;
        org.mozilla.javascript.serialize.ScriptableOutputStream $r7;
        java.io.FileOutputStream $r4;
        org.mozilla.javascript.Scriptable r5, $r6;
        int $i0;
        java.lang.Object r1, $r2;
        org.mozilla.javascript.Function r10;
        java.lang.String $r3;

        r9 := @parameter0: org.mozilla.javascript.Context;

        r5 := @parameter1: org.mozilla.javascript.Scriptable;

        r0 := @parameter2: java.lang.Object[];

        r10 := @parameter3: org.mozilla.javascript.Function;

        $i0 = lengthof r0;

        if $i0 >= 2 goto label1;

        $r8 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String)>("Expected an object to serialize and a filename to write the serialization to");

        throw $r8;

     label1:
        r1 = r0[0];

        $r2 = r0[1];

        $r3 = staticinvoke <org.mozilla.javascript.Context: java.lang.String toString(java.lang.Object)>($r2);

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.lang.String)>($r3);

        $r6 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r5);

        $r7 = new org.mozilla.javascript.serialize.ScriptableOutputStream;

        specialinvoke $r7.<org.mozilla.javascript.serialize.ScriptableOutputStream: void <init>(java.io.OutputStream,org.mozilla.javascript.Scriptable)>($r4, $r6);

        virtualinvoke $r7.<org.mozilla.javascript.serialize.ScriptableOutputStream: void writeObject(java.lang.Object)>(r1);

        virtualinvoke $r7.<org.mozilla.javascript.serialize.ScriptableOutputStream: void close()>();

        return;
    }

    public static java.lang.Object deserialize(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Object[] r0;
        org.mozilla.javascript.Context r10;
        org.mozilla.javascript.EvaluatorException $r9;
        java.io.FileInputStream $r3;
        org.mozilla.javascript.serialize.ScriptableInputStream $r6;
        org.mozilla.javascript.Scriptable r4, $r5, $r8;
        int $i0;
        java.lang.Object $r1, $r7;
        org.mozilla.javascript.Function r11;
        java.lang.String $r2;

        r10 := @parameter0: org.mozilla.javascript.Context;

        r4 := @parameter1: org.mozilla.javascript.Scriptable;

        r0 := @parameter2: java.lang.Object[];

        r11 := @parameter3: org.mozilla.javascript.Function;

        $i0 = lengthof r0;

        if $i0 >= 1 goto label1;

        $r9 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String)>("Expected a filename to read the serialization from");

        throw $r9;

     label1:
        $r1 = r0[0];

        $r2 = staticinvoke <org.mozilla.javascript.Context: java.lang.String toString(java.lang.Object)>($r1);

        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.lang.String)>($r2);

        $r5 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r4);

        $r6 = new org.mozilla.javascript.serialize.ScriptableInputStream;

        specialinvoke $r6.<org.mozilla.javascript.serialize.ScriptableInputStream: void <init>(java.io.InputStream,org.mozilla.javascript.Scriptable)>($r3, $r5);

        $r7 = virtualinvoke $r6.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke $r6.<java.io.ObjectInputStream: void close()>();

        $r8 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Scriptable toObject(java.lang.Object,org.mozilla.javascript.Scriptable)>($r7, $r5);

        return $r8;
    }

    public static java.lang.Object spawn(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)
    {
        java.lang.Object[] r2, r19;
        java.lang.Thread $r10;
        int $i0, $i1, $i2;
        org.mozilla.javascript.Function r0, $r14;
        org.mozilla.javascript.ContextFactory $r9;
        boolean $z0, $z1, $z2;
        org.mozilla.javascript.Context r8;
        org.mozilla.javascript.Script $r7;
        java.lang.RuntimeException $r3;
        org.mozilla.javascript.Scriptable $r1, $r17, r18;
        org.mozilla.javascript.tools.shell.Runner $r5, $r12, r20;
        java.lang.Object $r4, $r6, $r11, $r13, $r15, $r16;

        r8 := @parameter0: org.mozilla.javascript.Context;

        r18 := @parameter1: org.mozilla.javascript.Scriptable;

        r2 := @parameter2: java.lang.Object[];

        r0 := @parameter3: org.mozilla.javascript.Function;

        $r1 = interfaceinvoke r0.<org.mozilla.javascript.Function: org.mozilla.javascript.Scriptable getParentScope()>();

        $i0 = lengthof r2;

        if $i0 == 0 goto label3;

        $r11 = r2[0];

        $z1 = $r11 instanceof org.mozilla.javascript.Function;

        if $z1 == 0 goto label3;

        r19 = null;

        $i2 = lengthof r2;

        if $i2 <= 1 goto label1;

        $r15 = r2[1];

        $z2 = $r15 instanceof org.mozilla.javascript.Scriptable;

        if $z2 == 0 goto label1;

        $r16 = r2[1];

        $r17 = (org.mozilla.javascript.Scriptable) $r16;

        r19 = virtualinvoke r8.<org.mozilla.javascript.Context: java.lang.Object[] getElements(org.mozilla.javascript.Scriptable)>($r17);

     label1:
        if r19 != null goto label2;

        r19 = <org.mozilla.javascript.ScriptRuntime: java.lang.Object[] emptyArgs>;

     label2:
        $r12 = new org.mozilla.javascript.tools.shell.Runner;

        $r13 = r2[0];

        $r14 = (org.mozilla.javascript.Function) $r13;

        specialinvoke $r12.<org.mozilla.javascript.tools.shell.Runner: void <init>(org.mozilla.javascript.Scriptable,org.mozilla.javascript.Function,java.lang.Object[])>($r1, $r14, r19);

        r20 = $r12;

        goto label5;

     label3:
        $i1 = lengthof r2;

        if $i1 == 0 goto label4;

        $r4 = r2[0];

        $z0 = $r4 instanceof org.mozilla.javascript.Script;

        if $z0 == 0 goto label4;

        $r5 = new org.mozilla.javascript.tools.shell.Runner;

        $r6 = r2[0];

        $r7 = (org.mozilla.javascript.Script) $r6;

        specialinvoke $r5.<org.mozilla.javascript.tools.shell.Runner: void <init>(org.mozilla.javascript.Scriptable,org.mozilla.javascript.Script)>($r1, $r7);

        r20 = $r5;

        goto label5;

     label4:
        $r3 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.RuntimeException reportRuntimeError(java.lang.String)>("msg.spawn.args");

        throw $r3;

     label5:
        $r9 = virtualinvoke r8.<org.mozilla.javascript.Context: org.mozilla.javascript.ContextFactory getFactory()>();

        r20.<org.mozilla.javascript.tools.shell.Runner: org.mozilla.javascript.ContextFactory factory> = $r9;

        $r10 = new java.lang.Thread;

        specialinvoke $r10.<java.lang.Thread: void <init>(java.lang.Runnable)>(r20);

        virtualinvoke $r10.<java.lang.Thread: void start()>();

        return $r10;
    }

    public static java.lang.Object sync(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)
    {
        org.mozilla.javascript.Synchronizer $r3;
        java.lang.Object[] r0;
        org.mozilla.javascript.Context r6;
        java.lang.RuntimeException $r1;
        org.mozilla.javascript.Scriptable r7;
        int $i0;
        java.lang.Object $r2, $r4;
        org.mozilla.javascript.Function $r5, r8;
        boolean $z0;

        r6 := @parameter0: org.mozilla.javascript.Context;

        r7 := @parameter1: org.mozilla.javascript.Scriptable;

        r0 := @parameter2: java.lang.Object[];

        r8 := @parameter3: org.mozilla.javascript.Function;

        $i0 = lengthof r0;

        if $i0 != 1 goto label1;

        $r2 = r0[0];

        $z0 = $r2 instanceof org.mozilla.javascript.Function;

        if $z0 == 0 goto label1;

        $r3 = new org.mozilla.javascript.Synchronizer;

        $r4 = r0[0];

        $r5 = (org.mozilla.javascript.Function) $r4;

        specialinvoke $r3.<org.mozilla.javascript.Synchronizer: void <init>(org.mozilla.javascript.Scriptable)>($r5);

        return $r3;

     label1:
        $r1 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.RuntimeException reportRuntimeError(java.lang.String)>("msg.sync.args");

        throw $r1;
    }

    public static java.lang.Object runCommand(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function) throws java.io.IOException
    {
        java.lang.Integer $r74;
        java.lang.Object[] r0, $r35, r56;
        java.io.ByteArrayOutputStream r50, r51, $r70, $r71;
        org.mozilla.javascript.tools.shell.Global $r66;
        java.lang.StringBuffer $r7, $r9, $r13, $r15, $r40, $r41, $r43, $r69, $r72, $r73;
        org.mozilla.javascript.Function r3;
        java.lang.String $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r42, $r44, r58;
        java.lang.Number $r37;
        org.mozilla.javascript.Context r30;
        java.lang.RuntimeException $r1, $r45;
        boolean $z0, $z1, $z2, $z3;
        org.mozilla.javascript.Scriptable r27, $r28, $r29, r55, r57;
        java.lang.String[] $r21, r54;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, $i11, i12, i13, $i15;
        java.io.OutputStream $r31, $r33, r48, r49;
        java.io.PrintStream $r67, $r68;
        java.lang.Object $r2, $r17, $r19, $r22, $r23, $r24, $r25, $r26, r36, $r38, $r46, r52, r53, r59, $r60, $r61, $r62, $r63, $r64, $r65;
        java.io.InputStream r47;

        r30 := @parameter0: org.mozilla.javascript.Context;

        r27 := @parameter1: org.mozilla.javascript.Scriptable;

        r0 := @parameter2: java.lang.Object[];

        r3 := @parameter3: org.mozilla.javascript.Function;

        i9 = lengthof r0;

        if i9 == 0 goto label01;

        if i9 != 1 goto label02;

        $r46 = r0[0];

        $z3 = $r46 instanceof org.mozilla.javascript.Scriptable;

        if $z3 == 0 goto label02;

     label01:
        $r1 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.RuntimeException reportRuntimeError(java.lang.String)>("msg.runCommand.bad.args");

        throw $r1;

     label02:
        r47 = null;

        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

        r54 = null;

        r55 = null;

        r56 = null;

        $i0 = i9 - 1;

        $r2 = r0[$i0];

        $z0 = $r2 instanceof org.mozilla.javascript.Scriptable;

        if $z0 == 0 goto label13;

        $i5 = i9 - 1;

        $r22 = r0[$i5];

        r55 = (org.mozilla.javascript.Scriptable) $r22;

        $i15 = (int) -1;

        i9 = i9 + $i15;

        $r23 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object getProperty(org.mozilla.javascript.Scriptable,java.lang.String)>(r55, "env");

        $r24 = <org.mozilla.javascript.Scriptable: java.lang.Object NOT_FOUND>;

        if $r23 == $r24 goto label09;

        if $r23 != null goto label03;

        r54 = newarray (java.lang.String)[0];

        goto label09;

     label03:
        $z1 = $r23 instanceof org.mozilla.javascript.Scriptable;

        if $z1 != 0 goto label04;

        $r45 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.RuntimeException reportRuntimeError(java.lang.String)>("msg.runCommand.bad.env");

        throw $r45;

     label04:
        r57 = (org.mozilla.javascript.Scriptable) $r23;

        $r35 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object[] getPropertyIds(org.mozilla.javascript.Scriptable)>(r57);

        $i6 = lengthof $r35;

        r54 = newarray (java.lang.String)[$i6];

        i10 = 0;

     label05:
        $i7 = lengthof $r35;

        if i10 == $i7 goto label09;

        r36 = $r35[i10];

        $z2 = r36 instanceof java.lang.String;

        if $z2 == 0 goto label06;

        r58 = (java.lang.String) r36;

        r59 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object getProperty(org.mozilla.javascript.Scriptable,java.lang.String)>(r57, r58);

        goto label07;

     label06:
        $r37 = (java.lang.Number) r36;

        $i8 = virtualinvoke $r37.<java.lang.Number: int intValue()>();

        r58 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i8);

        r59 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object getProperty(org.mozilla.javascript.Scriptable,int)>(r57, $i8);

     label07:
        $r38 = <org.mozilla.javascript.ScriptableObject: java.lang.Object NOT_FOUND>;

        if r59 != $r38 goto label08;

        r59 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

     label08:
        $r69 = new java.lang.StringBuffer;

        specialinvoke $r69.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r58);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(61);

        $r42 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>(r59);

        $r43 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        r54[i10] = $r44;

        i10 = i10 + 1;

        goto label05;

     label09:
        $r60 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object getProperty(org.mozilla.javascript.Scriptable,java.lang.String)>(r55, "input");

        $r61 = <org.mozilla.javascript.Scriptable: java.lang.Object NOT_FOUND>;

        if $r60 == $r61 goto label10;

        r47 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.io.InputStream toInputStream(java.lang.Object)>($r60);

     label10:
        $r25 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object getProperty(org.mozilla.javascript.Scriptable,java.lang.String)>(r55, "output");

        r52 = $r25;

        $r26 = <org.mozilla.javascript.Scriptable: java.lang.Object NOT_FOUND>;

        if $r25 == $r26 goto label11;

        $r33 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.io.OutputStream toOutputStream(java.lang.Object)>($r25);

        r48 = $r33;

        if $r33 != null goto label11;

        $r70 = new java.io.ByteArrayOutputStream;

        specialinvoke $r70.<java.io.ByteArrayOutputStream: void <init>()>();

        r50 = $r70;

        r48 = $r70;

     label11:
        $r62 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object getProperty(org.mozilla.javascript.Scriptable,java.lang.String)>(r55, "err");

        r53 = $r62;

        $r63 = <org.mozilla.javascript.Scriptable: java.lang.Object NOT_FOUND>;

        if $r62 == $r63 goto label12;

        $r31 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.io.OutputStream toOutputStream(java.lang.Object)>($r62);

        r49 = $r31;

        if $r31 != null goto label12;

        $r71 = new java.io.ByteArrayOutputStream;

        specialinvoke $r71.<java.io.ByteArrayOutputStream: void <init>()>();

        r51 = $r71;

        r49 = $r71;

     label12:
        $r64 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object getProperty(org.mozilla.javascript.Scriptable,java.lang.String)>(r55, "args");

        $r65 = <org.mozilla.javascript.Scriptable: java.lang.Object NOT_FOUND>;

        if $r64 == $r65 goto label13;

        $r28 = staticinvoke <org.mozilla.javascript.tools.shell.Global: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r27);

        $r29 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Scriptable toObject(java.lang.Object,org.mozilla.javascript.Scriptable)>($r64, $r28);

        r56 = virtualinvoke r30.<org.mozilla.javascript.Context: java.lang.Object[] getElements(org.mozilla.javascript.Scriptable)>($r29);

     label13:
        $r66 = staticinvoke <org.mozilla.javascript.tools.shell.Global: org.mozilla.javascript.tools.shell.Global getInstance(org.mozilla.javascript.Function)>(r3);

        if r48 != null goto label16;

        if $r66 == null goto label14;

        $r67 = virtualinvoke $r66.<org.mozilla.javascript.tools.shell.Global: java.io.PrintStream getOut()>();

        goto label15;

     label14:
        $r67 = <java.lang.System: java.io.PrintStream out>;

     label15:
        r48 = $r67;

     label16:
        if r49 != null goto label19;

        if $r66 == null goto label17;

        $r68 = virtualinvoke $r66.<org.mozilla.javascript.tools.shell.Global: java.io.PrintStream getErr()>();

        goto label18;

     label17:
        $r68 = <java.lang.System: java.io.PrintStream err>;

     label18:
        r49 = $r68;

     label19:
        if r56 != null goto label20;

        $i11 = i9;

        goto label21;

     label20:
        $i1 = lengthof r56;

        $i11 = i9 + $i1;

     label21:
        $r21 = newarray (java.lang.String)[$i11];

        i12 = 0;

     label22:
        if i12 == i9 goto label23;

        $r19 = r0[i12];

        $r20 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r19);

        $r21[i12] = $r20;

        i12 = i12 + 1;

        goto label22;

     label23:
        if r56 == null goto label25;

        i13 = 0;

     label24:
        $i3 = lengthof r56;

        if i13 == $i3 goto label25;

        $i4 = i9 + i13;

        $r17 = r56[i13];

        $r18 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r17);

        $r21[$i4] = $r18;

        i13 = i13 + 1;

        goto label24;

     label25:
        $i2 = staticinvoke <org.mozilla.javascript.tools.shell.Global: int runProcess(java.lang.String[],java.lang.String[],java.io.InputStream,java.io.OutputStream,java.io.OutputStream)>($r21, r54, r47, r48, r49);

        if r50 == null goto label26;

        $r72 = new java.lang.StringBuffer;

        specialinvoke $r72.<java.lang.StringBuffer: void <init>()>();

        $r12 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>(r52);

        $r13 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke r50.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mozilla.javascript.ScriptableObject: void putProperty(org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object)>(r55, "output", $r16);

     label26:
        if r51 == null goto label27;

        $r73 = new java.lang.StringBuffer;

        specialinvoke $r73.<java.lang.StringBuffer: void <init>()>();

        $r6 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>(r53);

        $r7 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke r51.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mozilla.javascript.ScriptableObject: void putProperty(org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object)>(r55, "err", $r10);

     label27:
        $r74 = new java.lang.Integer;

        specialinvoke $r74.<java.lang.Integer: void <init>(int)>($i2);

        return $r74;
    }

    public static void seal(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)
    {
        java.lang.Object[] r0;
        int $i0, $i1, i2, i3;
        org.mozilla.javascript.Function r8;
        boolean $z0, $z1;
        org.mozilla.javascript.Context r6;
        java.lang.RuntimeException $r2, $r4;
        org.mozilla.javascript.ScriptableObject $r1;
        org.mozilla.javascript.Scriptable r7;
        java.lang.Object $r3, $r5, r9, r10;

        r6 := @parameter0: org.mozilla.javascript.Context;

        r7 := @parameter1: org.mozilla.javascript.Scriptable;

        r0 := @parameter2: java.lang.Object[];

        r8 := @parameter3: org.mozilla.javascript.Function;

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 == $i0 goto label6;

        r9 = r0[i2];

        $z0 = r9 instanceof org.mozilla.javascript.ScriptableObject;

        if $z0 == 0 goto label2;

        $r5 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        if r9 != $r5 goto label5;

     label2:
        $z1 = r9 instanceof org.mozilla.javascript.Scriptable;

        if $z1 == 0 goto label3;

        $r3 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        if r9 != $r3 goto label4;

     label3:
        $r2 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.RuntimeException reportRuntimeError(java.lang.String)>("msg.shell.seal.not.object");

        throw $r2;

     label4:
        $r4 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.RuntimeException reportRuntimeError(java.lang.String)>("msg.shell.seal.not.scriptable");

        throw $r4;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        i3 = 0;

     label7:
        $i1 = lengthof r0;

        if i3 == $i1 goto label8;

        r10 = r0[i3];

        $r1 = (org.mozilla.javascript.ScriptableObject) r10;

        virtualinvoke $r1.<org.mozilla.javascript.ScriptableObject: void sealObject()>();

        i3 = i3 + 1;

        goto label7;

     label8:
        return;
    }

    public static java.lang.Object readFile(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function) throws java.io.IOException
    {
        java.lang.Object[] r0;
        org.mozilla.javascript.Context r6;
        java.lang.RuntimeException $r5;
        org.mozilla.javascript.Scriptable r7;
        int $i0, $i1;
        java.lang.Object $r1, $r4;
        org.mozilla.javascript.Function r8;
        java.lang.String $r2, $r3, r9;

        r6 := @parameter0: org.mozilla.javascript.Context;

        r7 := @parameter1: org.mozilla.javascript.Scriptable;

        r0 := @parameter2: java.lang.Object[];

        r8 := @parameter3: org.mozilla.javascript.Function;

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r5 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.RuntimeException reportRuntimeError(java.lang.String)>("msg.shell.readFile.bad.args");

        throw $r5;

     label1:
        $r1 = r0[0];

        $r2 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r1);

        r9 = null;

        $i1 = lengthof r0;

        if $i1 < 2 goto label2;

        $r4 = r0[1];

        r9 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r4);

     label2:
        $r3 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.String readUrl(java.lang.String,java.lang.String,boolean)>($r2, r9, 1);

        return $r3;
    }

    public static java.lang.Object readUrl(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function) throws java.io.IOException
    {
        java.lang.Object[] r0;
        org.mozilla.javascript.Context r6;
        java.lang.RuntimeException $r5;
        org.mozilla.javascript.Scriptable r7;
        int $i0, $i1;
        java.lang.Object $r1, $r4;
        org.mozilla.javascript.Function r8;
        java.lang.String $r2, $r3, r9;

        r6 := @parameter0: org.mozilla.javascript.Context;

        r7 := @parameter1: org.mozilla.javascript.Scriptable;

        r0 := @parameter2: java.lang.Object[];

        r8 := @parameter3: org.mozilla.javascript.Function;

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r5 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.RuntimeException reportRuntimeError(java.lang.String)>("msg.shell.readUrl.bad.args");

        throw $r5;

     label1:
        $r1 = r0[0];

        $r2 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r1);

        r9 = null;

        $i1 = lengthof r0;

        if $i1 < 2 goto label2;

        $r4 = r0[1];

        r9 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r4);

     label2:
        $r3 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.String readUrl(java.lang.String,java.lang.String,boolean)>($r2, r9, 0);

        return $r3;
    }

    public static java.lang.Object toint32(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)
    {
        java.lang.Object[] r0;
        org.mozilla.javascript.Context r2;
        java.lang.Integer $r1;
        org.mozilla.javascript.Scriptable r3;
        int $i0, $i1;
        org.mozilla.javascript.Function r4;
        java.lang.Object $r5;
        boolean $z0;

        r2 := @parameter0: org.mozilla.javascript.Context;

        r3 := @parameter1: org.mozilla.javascript.Scriptable;

        r0 := @parameter2: java.lang.Object[];

        r4 := @parameter3: org.mozilla.javascript.Function;

        $i0 = lengthof r0;

        if $i0 == 0 goto label1;

        $r5 = r0[0];

        goto label2;

     label1:
        $r5 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

     label2:
        $z0 = $r5 instanceof java.lang.Integer;

        if $z0 == 0 goto label3;

        return $r5;

     label3:
        $i1 = staticinvoke <org.mozilla.javascript.ScriptRuntime: int toInt32(java.lang.Object)>($r5);

        $r1 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Integer wrapInt(int)>($i1);

        return $r1;
    }

    public java.io.InputStream getIn()
    {
        org.mozilla.javascript.tools.shell.Global r0;
        java.io.InputStream $r1, $r2;

        r0 := @this: org.mozilla.javascript.tools.shell.Global;

        $r1 = r0.<org.mozilla.javascript.tools.shell.Global: java.io.InputStream inStream>;

        if $r1 != null goto label1;

        $r2 = <java.lang.System: java.io.InputStream in>;

        goto label2;

     label1:
        $r2 = r0.<org.mozilla.javascript.tools.shell.Global: java.io.InputStream inStream>;

     label2:
        return $r2;
    }

    public void setIn(java.io.InputStream)
    {
        org.mozilla.javascript.tools.shell.Global r0;
        java.io.InputStream r1;

        r0 := @this: org.mozilla.javascript.tools.shell.Global;

        r1 := @parameter0: java.io.InputStream;

        r0.<org.mozilla.javascript.tools.shell.Global: java.io.InputStream inStream> = r1;

        return;
    }

    public java.io.PrintStream getOut()
    {
        java.io.PrintStream $r1, $r2;
        org.mozilla.javascript.tools.shell.Global r0;

        r0 := @this: org.mozilla.javascript.tools.shell.Global;

        $r1 = r0.<org.mozilla.javascript.tools.shell.Global: java.io.PrintStream outStream>;

        if $r1 != null goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        goto label2;

     label1:
        $r2 = r0.<org.mozilla.javascript.tools.shell.Global: java.io.PrintStream outStream>;

     label2:
        return $r2;
    }

    public void setOut(java.io.PrintStream)
    {
        java.io.PrintStream r1;
        org.mozilla.javascript.tools.shell.Global r0;

        r0 := @this: org.mozilla.javascript.tools.shell.Global;

        r1 := @parameter0: java.io.PrintStream;

        r0.<org.mozilla.javascript.tools.shell.Global: java.io.PrintStream outStream> = r1;

        return;
    }

    public java.io.PrintStream getErr()
    {
        java.io.PrintStream $r1, $r2;
        org.mozilla.javascript.tools.shell.Global r0;

        r0 := @this: org.mozilla.javascript.tools.shell.Global;

        $r1 = r0.<org.mozilla.javascript.tools.shell.Global: java.io.PrintStream errStream>;

        if $r1 != null goto label1;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        goto label2;

     label1:
        $r2 = r0.<org.mozilla.javascript.tools.shell.Global: java.io.PrintStream errStream>;

     label2:
        return $r2;
    }

    public void setErr(java.io.PrintStream)
    {
        java.io.PrintStream r1;
        org.mozilla.javascript.tools.shell.Global r0;

        r0 := @this: org.mozilla.javascript.tools.shell.Global;

        r1 := @parameter0: java.io.PrintStream;

        r0.<org.mozilla.javascript.tools.shell.Global: java.io.PrintStream errStream> = r1;

        return;
    }

    public void setSealedStdLib(boolean)
    {
        org.mozilla.javascript.tools.shell.Global r0;
        boolean z0;

        r0 := @this: org.mozilla.javascript.tools.shell.Global;

        z0 := @parameter0: boolean;

        r0.<org.mozilla.javascript.tools.shell.Global: boolean sealedStdLib> = z0;

        return;
    }

    private static org.mozilla.javascript.tools.shell.Global getInstance(org.mozilla.javascript.Function)
    {
        org.mozilla.javascript.tools.shell.Global $r2;
        org.mozilla.javascript.Scriptable $r1;
        org.mozilla.javascript.Function r0;
        java.lang.String $r3;
        java.lang.RuntimeException $r4;
        boolean $z0;

        r0 := @parameter0: org.mozilla.javascript.Function;

        $r1 = interfaceinvoke r0.<org.mozilla.javascript.Function: org.mozilla.javascript.Scriptable getParentScope()>();

        $z0 = $r1 instanceof org.mozilla.javascript.tools.shell.Global;

        if $z0 != 0 goto label1;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $r4 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.RuntimeException reportRuntimeError(java.lang.String,java.lang.String)>("msg.bad.shell.function.scope", $r3);

        throw $r4;

     label1:
        $r2 = (org.mozilla.javascript.tools.shell.Global) $r1;

        return $r2;
    }

    private static int runProcess(java.lang.String[], java.lang.String[], java.io.InputStream, java.io.OutputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.lang.Throwable $r17, $r18, $r19, $r20;
        org.mozilla.javascript.tools.shell.PipeThread $r9, $r10, $r11, r23, r24;
        java.lang.String[] r0, r2;
        int $i0;
        java.io.OutputStream r3, r5, $r8, r27;
        java.lang.Process r22;
        java.lang.Runtime $r1, $r12;
        java.lang.InterruptedException $r13, $r14, $r15, $r16, $r21;
        java.io.InputStream $r4, $r6, r7, r25, r26;

        r2 := @parameter0: java.lang.String[];

        r0 := @parameter1: java.lang.String[];

        r7 := @parameter2: java.io.InputStream;

        r5 := @parameter3: java.io.OutputStream;

        r3 := @parameter4: java.io.OutputStream;

        if r0 != null goto label01;

        $r12 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        r22 = virtualinvoke $r12.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>(r2);

        goto label02;

     label01:
        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        r22 = virtualinvoke $r1.<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[])>(r2, r0);

     label02:
        r23 = null;

        r24 = null;

     label03:
        r25 = null;

     label04:
        if r3 == null goto label05;

        r25 = virtualinvoke r22.<java.lang.Process: java.io.InputStream getErrorStream()>();

        goto label06;

     label05:
        $r4 = virtualinvoke r22.<java.lang.Process: java.io.InputStream getErrorStream()>();

        virtualinvoke $r4.<java.io.InputStream: void close()>();

     label06:
        r26 = null;

     label07:
        if r5 == null goto label08;

        r26 = virtualinvoke r22.<java.lang.Process: java.io.InputStream getInputStream()>();

        goto label09;

     label08:
        $r6 = virtualinvoke r22.<java.lang.Process: java.io.InputStream getInputStream()>();

        virtualinvoke $r6.<java.io.InputStream: void close()>();

     label09:
        r27 = null;

     label10:
        if r7 == null goto label11;

        r27 = virtualinvoke r22.<java.lang.Process: java.io.OutputStream getOutputStream()>();

        goto label12;

     label11:
        $r8 = virtualinvoke r22.<java.lang.Process: java.io.OutputStream getOutputStream()>();

        virtualinvoke $r8.<java.io.OutputStream: void close()>();

     label12:
        if r5 == null goto label15;

        if r3 == null goto label13;

        $r11 = new org.mozilla.javascript.tools.shell.PipeThread;

        specialinvoke $r11.<org.mozilla.javascript.tools.shell.PipeThread: void <init>(boolean,java.io.InputStream,java.io.OutputStream)>(1, r25, r3);

        r24 = $r11;

        virtualinvoke $r11.<org.mozilla.javascript.tools.shell.PipeThread: void start()>();

     label13:
        if r7 == null goto label14;

        $r10 = new org.mozilla.javascript.tools.shell.PipeThread;

        specialinvoke $r10.<org.mozilla.javascript.tools.shell.PipeThread: void <init>(boolean,java.io.InputStream,java.io.OutputStream)>(0, r7, r27);

        r23 = $r10;

        virtualinvoke $r10.<org.mozilla.javascript.tools.shell.PipeThread: void start()>();

     label14:
        staticinvoke <org.mozilla.javascript.tools.shell.Global: void pipe(boolean,java.io.InputStream,java.io.OutputStream)>(1, r26, r5);

        goto label18;

     label15:
        if r7 == null goto label17;

        if r3 == null goto label16;

        $r9 = new org.mozilla.javascript.tools.shell.PipeThread;

        specialinvoke $r9.<org.mozilla.javascript.tools.shell.PipeThread: void <init>(boolean,java.io.InputStream,java.io.OutputStream)>(1, r25, r3);

        r24 = $r9;

        virtualinvoke $r9.<org.mozilla.javascript.tools.shell.PipeThread: void start()>();

     label16:
        staticinvoke <org.mozilla.javascript.tools.shell.Global: void pipe(boolean,java.io.InputStream,java.io.OutputStream)>(0, r7, r27);

        virtualinvoke r7.<java.io.InputStream: void close()>();

        goto label18;

     label17:
        if r3 == null goto label18;

        staticinvoke <org.mozilla.javascript.tools.shell.Global: void pipe(boolean,java.io.InputStream,java.io.OutputStream)>(1, r25, r3);

        virtualinvoke r25.<java.io.InputStream: void close()>();

        r25 = null;

     label18:
        virtualinvoke r22.<java.lang.Process: int waitFor()>();

     label19:
        goto label21;

     label20:
        $r21 := @caughtexception;

        goto label18;

     label21:
        $i0 = virtualinvoke r22.<java.lang.Process: int exitValue()>();

     label22:
        if r27 == null goto label23;

        virtualinvoke r27.<java.io.OutputStream: void close()>();

     label23:
        if r26 == null goto label24;

        virtualinvoke r26.<java.io.InputStream: void close()>();

     label24:
        if r25 == null goto label25;

        virtualinvoke r25.<java.io.InputStream: void close()>();

     label25:
        goto label38;

     label26:
        return $i0;

     label27:
        $r20 := @caughtexception;

     label28:
        if r27 == null goto label29;

        virtualinvoke r27.<java.io.OutputStream: void close()>();

     label29:
        throw $r20;

     label30:
        $r19 := @caughtexception;

     label31:
        if r26 == null goto label32;

        virtualinvoke r26.<java.io.InputStream: void close()>();

     label32:
        throw $r19;

     label33:
        $r18 := @caughtexception;

     label34:
        if r25 == null goto label35;

        virtualinvoke r25.<java.io.InputStream: void close()>();

     label35:
        throw $r18;

     label36:
        $r17 := @caughtexception;

        goto label47;

     label37:
        throw $r17;

     label38:
        virtualinvoke r22.<java.lang.Process: void destroy()>();

        if r23 == null goto label42;

     label39:
        virtualinvoke r23.<org.mozilla.javascript.tools.shell.PipeThread: void join()>();

     label40:
        goto label42;

     label41:
        $r16 := @caughtexception;

        goto label39;

     label42:
        if r24 == null goto label46;

     label43:
        virtualinvoke r24.<org.mozilla.javascript.tools.shell.PipeThread: void join()>();

     label44:
        goto label46;

     label45:
        $r15 := @caughtexception;

        goto label43;

     label46:
        goto label26;

     label47:
        virtualinvoke r22.<java.lang.Process: void destroy()>();

        if r23 == null goto label51;

     label48:
        virtualinvoke r23.<org.mozilla.javascript.tools.shell.PipeThread: void join()>();

     label49:
        goto label51;

     label50:
        $r14 := @caughtexception;

        goto label48;

     label51:
        if r24 == null goto label55;

     label52:
        virtualinvoke r24.<org.mozilla.javascript.tools.shell.PipeThread: void join()>();

     label53:
        goto label55;

     label54:
        $r13 := @caughtexception;

        goto label52;

     label55:
        goto label37;

        catch java.lang.InterruptedException from label18 to label19 with label20;
        catch java.lang.Throwable from label10 to label22 with label27;
        catch java.lang.Throwable from label27 to label28 with label27;
        catch java.lang.Throwable from label07 to label23 with label30;
        catch java.lang.Throwable from label27 to label31 with label30;
        catch java.lang.Throwable from label04 to label24 with label33;
        catch java.lang.Throwable from label27 to label34 with label33;
        catch java.lang.Throwable from label03 to label26 with label36;
        catch java.lang.Throwable from label27 to label37 with label36;
        catch java.lang.InterruptedException from label39 to label40 with label41;
        catch java.lang.InterruptedException from label43 to label44 with label45;
        catch java.lang.InterruptedException from label48 to label49 with label50;
        catch java.lang.InterruptedException from label52 to label53 with label54;
    }

    static void pipe(boolean, java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        java.lang.Throwable $r5;
        byte[] r0;
        java.io.IOException $r3, $r4, $r6, $r7;
        int i0;
        boolean z0;
        java.io.InputStream r1;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.io.InputStream;

        r2 := @parameter2: java.io.OutputStream;

     label01:
        r0 = newarray (byte)[4096];

     label02:
        if z0 != 0 goto label03;

        i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r0, 0, 4096);

        goto label06;

     label03:
        i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r0, 0, 4096);

     label04:
        goto label06;

     label05:
        $r7 := @caughtexception;

        goto label11;

     label06:
        if i0 >= 0 goto label07;

        goto label11;

     label07:
        if z0 == 0 goto label08;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, i0);

        virtualinvoke r2.<java.io.OutputStream: void flush()>();

        goto label02;

     label08:
        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, i0);

        virtualinvoke r2.<java.io.OutputStream: void flush()>();

     label09:
        goto label02;

     label10:
        $r6 := @caughtexception;

        goto label11;

     label11:
        goto label16;

     label12:
        goto label15;

     label13:
        $r5 := @caughtexception;

        goto label21;

     label14:
        throw $r5;

     label15:
        return;

     label16:
        if z0 == 0 goto label17;

        virtualinvoke r1.<java.io.InputStream: void close()>();

        goto label18;

     label17:
        virtualinvoke r2.<java.io.OutputStream: void close()>();

     label18:
        goto label20;

     label19:
        $r4 := @caughtexception;

     label20:
        goto label12;

     label21:
        if z0 == 0 goto label22;

        virtualinvoke r1.<java.io.InputStream: void close()>();

        goto label23;

     label22:
        virtualinvoke r2.<java.io.OutputStream: void close()>();

     label23:
        goto label25;

     label24:
        $r3 := @caughtexception;

     label25:
        goto label14;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.io.IOException from label16 to label18 with label19;
        catch java.io.IOException from label21 to label23 with label24;
    }

    private static java.io.InputStream toInputStream(java.lang.Object) throws java.io.IOException
    {
        byte[] $r2, $r9;
        java.io.ByteArrayInputStream $r1, $r8;
        java.lang.String $r5, r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.Reader $r7;
        org.mozilla.javascript.Wrapper $r3;
        char[] $r6;
        java.lang.Object r0, $r4;
        java.io.InputStream r10;

        r0 := @parameter0: java.lang.Object;

        r10 = null;

        r11 = null;

        $z0 = r0 instanceof org.mozilla.javascript.Wrapper;

        if $z0 == 0 goto label4;

        $r3 = (org.mozilla.javascript.Wrapper) r0;

        $r4 = interfaceinvoke $r3.<org.mozilla.javascript.Wrapper: java.lang.Object unwrap()>();

        $z1 = $r4 instanceof java.io.InputStream;

        if $z1 == 0 goto label1;

        r10 = (java.io.InputStream) $r4;

        goto label4;

     label1:
        $z2 = $r4 instanceof byte[];

        if $z2 == 0 goto label2;

        $r8 = new java.io.ByteArrayInputStream;

        $r9 = (byte[]) $r4;

        specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9);

        r10 = $r8;

        goto label4;

     label2:
        $z3 = $r4 instanceof java.io.Reader;

        if $z3 == 0 goto label3;

        $r7 = (java.io.Reader) $r4;

        r11 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.String readReader(java.io.Reader)>($r7);

        goto label4;

     label3:
        $z4 = $r4 instanceof char[];

        if $z4 == 0 goto label4;

        $r5 = new java.lang.String;

        $r6 = (char[]) $r4;

        specialinvoke $r5.<java.lang.String: void <init>(char[])>($r6);

        r11 = $r5;

     label4:
        if r10 != null goto label6;

        if r11 != null goto label5;

        r11 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>(r0);

     label5:
        $r1 = new java.io.ByteArrayInputStream;

        $r2 = virtualinvoke r11.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        r10 = $r1;

     label6:
        return r10;
    }

    private static java.io.OutputStream toOutputStream(java.lang.Object)
    {
        java.io.OutputStream r3;
        java.lang.Object r0, $r2;
        boolean $z0, $z1;
        org.mozilla.javascript.Wrapper $r1;

        r0 := @parameter0: java.lang.Object;

        r3 = null;

        $z0 = r0 instanceof org.mozilla.javascript.Wrapper;

        if $z0 == 0 goto label1;

        $r1 = (org.mozilla.javascript.Wrapper) r0;

        $r2 = interfaceinvoke $r1.<org.mozilla.javascript.Wrapper: java.lang.Object unwrap()>();

        $z1 = $r2 instanceof java.io.OutputStream;

        if $z1 == 0 goto label1;

        r3 = (java.io.OutputStream) $r2;

     label1:
        return r3;
    }

    private static java.lang.String readUrl(java.lang.String, java.lang.String, boolean) throws java.io.IOException
    {
        java.lang.Throwable $r14;
        java.net.URL $r11;
        long $l0, $l1;
        byte $b2;
        java.lang.StringBuffer $r7, $r8, $r9;
        java.net.URLConnection $r12;
        int $i3, i4;
        java.lang.String r1, $r4, $r10, $r13, r15;
        boolean z0;
        java.io.IOException $r6;
        java.io.FileInputStream $r2;
        java.io.InputStreamReader $r3, $r5, r17;
        java.io.File $r0;
        java.io.InputStream r16;

        r1 := @parameter0: java.lang.String;

        r15 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r16 = null;

     label01:
        if z0 != 0 goto label03;

        $r11 = new java.net.URL;

        specialinvoke $r11.<java.net.URL: void <init>(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.net.URL: java.net.URLConnection openConnection()>();

        r16 = virtualinvoke $r12.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        $i3 = virtualinvoke $r12.<java.net.URLConnection: int getContentLength()>();

        i4 = $i3;

        if $i3 > 0 goto label02;

        i4 = 1024;

     label02:
        if r15 != null goto label08;

        $r13 = virtualinvoke $r12.<java.net.URLConnection: java.lang.String getContentType()>();

        if $r13 == null goto label08;

        r15 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.String getCharCodingFromType(java.lang.String)>($r13);

        goto label08;

     label03:
        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $l0 = virtualinvoke $r0.<java.io.File: long length()>();

        i4 = (int) $l0;

        $l1 = (long) i4;

        $b2 = $l1 cmp $l0;

        if $b2 == 0 goto label04;

        $r6 = new java.io.IOException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Too big file size: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label04:
        if i4 != 0 goto label07;

     label05:
        if null == null goto label06;

        virtualinvoke r16.<java.io.InputStream: void close()>();

     label06:
        return "";

     label07:
        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        r16 = $r2;

     label08:
        if r15 != null goto label09;

        $r5 = new java.io.InputStreamReader;

        specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r16);

        r17 = $r5;

        goto label10;

     label09:
        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r16, r15);

        r17 = $r3;

     label10:
        $r4 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.String readReader(java.io.Reader,int)>(r17, i4);

     label11:
        if r16 == null goto label12;

        virtualinvoke r16.<java.io.InputStream: void close()>();

     label12:
        return $r4;

     label13:
        $r14 := @caughtexception;

     label14:
        if r16 == null goto label15;

        virtualinvoke r16.<java.io.InputStream: void close()>();

     label15:
        throw $r14;

        catch java.lang.Throwable from label01 to label05 with label13;
        catch java.lang.Throwable from label07 to label11 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private static java.lang.String getCharCodingFromType(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i5, i10, i11, i12, i13, $i14, $i15, $i16, $i17, $i18, $i20;
        java.lang.String r0, r1, $r2, $r3, $r4;
        boolean $z0;
        char $c4, $c6, $c7, $c8, $c9;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(59);

        if $i0 < 0 goto label9;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        i10 = $i1;

        i11 = $i0 + 1;

     label1:
        if i11 == $i1 goto label2;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i11);

        $i14 = (int) $c9;

        if $i14 > 32 goto label2;

        i11 = i11 + 1;

        goto label1;

     label2:
        r1 = "charset";

        $r4 = "charset";

        $r3 = "charset";

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, r0, i11, $i2);

        if $z0 == 0 goto label9;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        i12 = i11 + $i3;

     label3:
        if i12 == $i1 goto label4;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        $i15 = (int) $c8;

        if $i15 > 32 goto label4;

        i12 = i12 + 1;

        goto label3;

     label4:
        if i12 == $i1 goto label9;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        $i16 = (int) $c4;

        if $i16 != 61 goto label9;

        i13 = i12 + 1;

     label5:
        if i13 == $i1 goto label6;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i13);

        $i17 = (int) $c7;

        if $i17 > 32 goto label6;

        i13 = i13 + 1;

        goto label5;

     label6:
        if i13 == $i1 goto label9;

     label7:
        $i5 = i10 - 1;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        $i18 = (int) $c6;

        if $i18 > 32 goto label8;

        $i20 = (int) -1;

        i10 = i10 + $i20;

        goto label7;

     label8:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i13, i10);

        return $r2;

     label9:
        return null;
    }

    private static java.lang.String readReader(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        java.lang.String $r1;

        r0 := @parameter0: java.io.Reader;

        $r1 = staticinvoke <org.mozilla.javascript.tools.shell.Global: java.lang.String readReader(java.io.Reader,int)>(r0, 4096);

        return $r1;
    }

    private static java.lang.String readReader(java.io.Reader, int) throws java.io.IOException
    {
        java.io.Reader r0;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7;
        char[] r1, r3;
        java.lang.String $r2;

        r0 := @parameter0: java.io.Reader;

        i0 := @parameter1: int;

        r3 = newarray (char)[i0];

        i4 = 0;

     label1:
        $i5 = lengthof r3;

        $i6 = $i5 - i4;

        $i7 = virtualinvoke r0.<java.io.Reader: int read(char[],int,int)>(r3, i4, $i6);

        if $i7 >= 0 goto label2;

        goto label3;

     label2:
        i4 = i4 + $i7;

        $i1 = lengthof r3;

        if i4 != $i1 goto label1;

        $i2 = lengthof r3;

        $i3 = $i2 * 2;

        r1 = newarray (char)[$i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r1, 0, i4);

        r3 = r1;

        goto label1;

     label3:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>(r3, 0, i4);

        return $r2;
    }

    static java.lang.RuntimeException reportRuntimeError(java.lang.String)
    {
        java.lang.String r0, $r1;
        org.mozilla.javascript.EvaluatorException $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String)>(r0);

        $r2 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String)>($r1);

        return $r2;
    }

    static java.lang.RuntimeException reportRuntimeError(java.lang.String, java.lang.String)
    {
        org.mozilla.javascript.EvaluatorException $r3;
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.String)>(r0, r1);

        $r3 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String)>($r2);

        return $r3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.tools.shell.Global: long serialVersionUID> = 4029130780977538005L;

        return;
    }
}
