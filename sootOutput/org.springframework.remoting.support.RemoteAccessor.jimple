public abstract class org.springframework.remoting.support.RemoteAccessor extends org.springframework.remoting.support.RemotingSupport
{
    private java.lang.Class serviceInterface;

    public void <init>()
    {
        org.springframework.remoting.support.RemoteAccessor r0;

        r0 := @this: org.springframework.remoting.support.RemoteAccessor;

        specialinvoke r0.<org.springframework.remoting.support.RemotingSupport: void <init>()>();

        return;
    }

    public void setServiceInterface(java.lang.Class)
    {
        org.springframework.remoting.support.RemoteAccessor r1;
        java.lang.Class r0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r1 := @this: org.springframework.remoting.support.RemoteAccessor;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'serviceInterface\' must be an interface");

        throw $r2;

     label1:
        r1.<org.springframework.remoting.support.RemoteAccessor: java.lang.Class serviceInterface> = r0;

        return;
    }

    public java.lang.Class getServiceInterface()
    {
        org.springframework.remoting.support.RemoteAccessor r0;
        java.lang.Class $r1;

        r0 := @this: org.springframework.remoting.support.RemoteAccessor;

        $r1 = r0.<org.springframework.remoting.support.RemoteAccessor: java.lang.Class serviceInterface>;

        return $r1;
    }
}
