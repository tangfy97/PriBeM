public abstract class org.apache.http.impl.io.AbstractMessageParser extends java.lang.Object implements org.apache.http.io.HttpMessageParser
{
    private static final int HEAD_LINE;
    private static final int HEADERS;
    private final org.apache.http.io.SessionInputBuffer sessionBuffer;
    private final int maxHeaderCount;
    private final int maxLineLen;
    private final java.util.List headerLines;
    protected final org.apache.http.message.LineParser lineParser;
    private int state;
    private org.apache.http.HttpMessage message;

    public void <init>(org.apache.http.io.SessionInputBuffer, org.apache.http.message.LineParser, org.apache.http.params.HttpParams)
    {
        org.apache.http.message.LineParser r3, $r7;
        java.lang.IllegalArgumentException $r8, $r9;
        org.apache.http.io.SessionInputBuffer r1;
        java.util.ArrayList $r10;
        org.apache.http.impl.io.AbstractMessageParser r0;
        org.apache.http.params.HttpParams r2;
        int $i0, $i1, $i3, $i5;

        r0 := @this: org.apache.http.impl.io.AbstractMessageParser;

        r1 := @parameter0: org.apache.http.io.SessionInputBuffer;

        r3 := @parameter1: org.apache.http.message.LineParser;

        r2 := @parameter2: org.apache.http.params.HttpParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Session input buffer may not be null");

        throw $r8;

     label1:
        if r2 != null goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r9;

     label2:
        r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.io.SessionInputBuffer sessionBuffer> = r1;

        $i3 = (int) -1;

        $i0 = interfaceinvoke r2.<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>("http.connection.max-header-count", $i3);

        r0.<org.apache.http.impl.io.AbstractMessageParser: int maxHeaderCount> = $i0;

        $i5 = (int) -1;

        $i1 = interfaceinvoke r2.<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>("http.connection.max-line-length", $i5);

        r0.<org.apache.http.impl.io.AbstractMessageParser: int maxLineLen> = $i1;

        if r3 == null goto label3;

        $r7 = r3;

        goto label4;

     label3:
        $r7 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label4:
        r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.message.LineParser lineParser> = $r7;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.http.impl.io.AbstractMessageParser: java.util.List headerLines> = $r10;

        r0.<org.apache.http.impl.io.AbstractMessageParser: int state> = 0;

        return;
    }

    public static org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer, int, int, org.apache.http.message.LineParser) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.Header[] $r2;
        org.apache.http.message.LineParser r3;
        int i0, i1;
        org.apache.http.io.SessionInputBuffer r1;
        java.util.ArrayList $r0;

        r1 := @parameter0: org.apache.http.io.SessionInputBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 := @parameter3: org.apache.http.message.LineParser;

        if r3 != null goto label1;

        r3 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label1:
        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser,java.util.List)>(r1, i0, i1, r3, $r0);

        return $r2;
    }

    public static org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer, int, int, org.apache.http.message.LineParser, java.util.List) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.ProtocolException $r24;
        org.apache.http.Header $r4;
        org.apache.http.Header[] $r7;
        org.apache.http.message.LineParser r1;
        java.util.List r2;
        org.apache.http.io.SessionInputBuffer r0;
        int $i0, $i1, $i2, i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i17, i18, $i19, $i21, $i22, $i23, $i24, $i25;
        java.lang.String $r14;
        org.apache.http.ParseException $r12;
        char $c3, $c15, $c16;
        java.io.IOException $r22, $r23;
        java.lang.IllegalArgumentException $r18, $r19, $r20;
        org.apache.http.util.CharArrayBuffer r15, r16, r17, $r21;
        java.lang.Object $r3;

        r0 := @parameter0: org.apache.http.io.SessionInputBuffer;

        i4 := @parameter1: int;

        i7 := @parameter2: int;

        r1 := @parameter3: org.apache.http.message.LineParser;

        r2 := @parameter4: java.util.List;

        if r0 != null goto label01;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Session input buffer may not be null");

        throw $r18;

     label01:
        if r1 != null goto label02;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Line parser may not be null");

        throw $r19;

     label02:
        if r2 != null goto label03;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Header line list may not be null");

        throw $r20;

     label03:
        r15 = null;

        r16 = null;

     label04:
        if r15 != null goto label05;

        $r21 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r21.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(64);

        r15 = $r21;

        goto label06;

     label05:
        virtualinvoke r15.<org.apache.http.util.CharArrayBuffer: void clear()>();

     label06:
        $i0 = interfaceinvoke r0.<org.apache.http.io.SessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>(r15);

        $i21 = (int) -1;

        if $i0 == $i21 goto label16;

        $i2 = virtualinvoke r15.<org.apache.http.util.CharArrayBuffer: int length()>();

        if $i2 >= 1 goto label07;

        goto label16;

     label07:
        $c3 = virtualinvoke r15.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(0);

        $i22 = (int) $c3;

        if $i22 == 32 goto label08;

        $c16 = virtualinvoke r15.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(0);

        $i23 = (int) $c16;

        if $i23 != 9 goto label13;

     label08:
        if r16 == null goto label13;

        i17 = 0;

     label09:
        $i6 = virtualinvoke r15.<org.apache.http.util.CharArrayBuffer: int length()>();

        if i17 >= $i6 goto label11;

        $c15 = virtualinvoke r15.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i17);

        $i24 = (int) $c15;

        if $i24 == 32 goto label10;

        $i25 = (int) $c15;

        if $i25 == 9 goto label10;

        goto label11;

     label10:
        i17 = i17 + 1;

        goto label09;

     label11:
        if i7 <= 0 goto label12;

        $i10 = virtualinvoke r16.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i11 = $i10 + 1;

        $i12 = virtualinvoke r15.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i13 = $i11 + $i12;

        $i14 = $i13 - i17;

        if $i14 <= i7 goto label12;

        $r22 = new java.io.IOException;

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>("Maximum line length limit exceeded");

        throw $r22;

     label12:
        virtualinvoke r16.<org.apache.http.util.CharArrayBuffer: void append(char)>(32);

        $i8 = virtualinvoke r15.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i9 = $i8 - i17;

        virtualinvoke r16.<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.CharArrayBuffer,int,int)>(r15, i17, $i9);

        goto label14;

     label13:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r15);

        r16 = r15;

        r15 = null;

     label14:
        if i4 <= 0 goto label15;

        $i5 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i5 < i4 goto label15;

        $r23 = new java.io.IOException;

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>("Maximum header count exceeded");

        throw $r23;

     label15:
        goto label04;

     label16:
        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        $r7 = newarray (org.apache.http.Header)[$i1];

        i18 = 0;

     label17:
        $i19 = interfaceinvoke r2.<java.util.List: int size()>();

        if i18 >= $i19 goto label22;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i18);

        r17 = (org.apache.http.util.CharArrayBuffer) $r3;

     label18:
        $r4 = interfaceinvoke r1.<org.apache.http.message.LineParser: org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer)>(r17);

        $r7[i18] = $r4;

     label19:
        goto label21;

     label20:
        $r12 := @caughtexception;

        $r24 = new org.apache.http.ProtocolException;

        $r14 = virtualinvoke $r12.<org.apache.http.ParseException: java.lang.String getMessage()>();

        specialinvoke $r24.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r14);

        throw $r24;

     label21:
        i18 = i18 + 1;

        goto label17;

     label22:
        return $r7;

        catch org.apache.http.ParseException from label18 to label19 with label20;
    }

    protected abstract org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) throws java.io.IOException, org.apache.http.HttpException, org.apache.http.ParseException;

    public org.apache.http.HttpMessage parse() throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.ProtocolException $r12;
        java.lang.IllegalStateException $r10;
        org.apache.http.io.SessionInputBuffer $r3, $r7;
        int i0, $i1, $i2;
        org.apache.http.HttpMessage $r5, $r8, $r9;
        java.lang.String $r13;
        org.apache.http.Header[] $r4;
        org.apache.http.message.LineParser $r2;
        org.apache.http.ParseException $r11;
        org.apache.http.impl.io.AbstractMessageParser r0;
        java.util.List $r1, $r6;

        r0 := @this: org.apache.http.impl.io.AbstractMessageParser;

        i0 = r0.<org.apache.http.impl.io.AbstractMessageParser: int state>;

        lookupswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label5;
            default: goto label6;
        };

     label1:
        $r7 = r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.io.SessionInputBuffer sessionBuffer>;

        $r8 = virtualinvoke r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)>($r7);

        r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage message> = $r8;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new org.apache.http.ProtocolException;

        $r13 = virtualinvoke $r11.<org.apache.http.ParseException: java.lang.String getMessage()>();

        specialinvoke $r12.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r11);

        throw $r12;

     label4:
        r0.<org.apache.http.impl.io.AbstractMessageParser: int state> = 1;

     label5:
        $r3 = r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.io.SessionInputBuffer sessionBuffer>;

        $i2 = r0.<org.apache.http.impl.io.AbstractMessageParser: int maxHeaderCount>;

        $i1 = r0.<org.apache.http.impl.io.AbstractMessageParser: int maxLineLen>;

        $r2 = r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.message.LineParser lineParser>;

        $r1 = r0.<org.apache.http.impl.io.AbstractMessageParser: java.util.List headerLines>;

        $r4 = staticinvoke <org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser,java.util.List)>($r3, $i2, $i1, $r2, $r1);

        $r5 = r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage message>;

        interfaceinvoke $r5.<org.apache.http.HttpMessage: void setHeaders(org.apache.http.Header[])>($r4);

        $r9 = r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage message>;

        r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage message> = null;

        $r6 = r0.<org.apache.http.impl.io.AbstractMessageParser: java.util.List headerLines>;

        interfaceinvoke $r6.<java.util.List: void clear()>();

        r0.<org.apache.http.impl.io.AbstractMessageParser: int state> = 0;

        return $r9;

     label6:
        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Inconsistent parser state");

        throw $r10;

        catch org.apache.http.ParseException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.http.impl.io.AbstractMessageParser: int HEADERS> = 1;

        <org.apache.http.impl.io.AbstractMessageParser: int HEAD_LINE> = 0;

        return;
    }
}
