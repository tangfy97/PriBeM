public class org.apache.commons.lang.reflect.MethodUtils extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang.reflect.MethodUtils r0;

        r0 := @this: org.apache.commons.lang.reflect.MethodUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Object) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] $r2;
        java.lang.Object r0, r3, $r4;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, r1, $r2);

        return $r4;
    }

    public static java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Object[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] r6;
        java.lang.Class[] $r5;
        int $i0, i1;
        java.lang.Object r0, $r2, $r3;
        java.lang.Class $r4;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.Object[];

        if r6 != null goto label1;

        r6 = <org.apache.commons.lang.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

     label1:
        $i0 = lengthof r6;

        $r5 = newarray (java.lang.Class)[$i0];

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        $r3 = r6[i1];

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5[i1] = $r4;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r2 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.Class[])>(r0, r1, r6, $r5);

        return $r2;
    }

    public static java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] r14;
        java.lang.NoSuchMethodException $r5;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r12;
        java.lang.String r2, $r11, $r13;
        java.lang.reflect.Method $r3;
        java.lang.Class[] r15;
        java.lang.Object r0, $r4;
        java.lang.Class $r1, $r10;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r14 := @parameter2: java.lang.Object[];

        r15 := @parameter3: java.lang.Class[];

        if r15 != null goto label1;

        r15 = <org.apache.commons.lang.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

     label1:
        if r14 != null goto label2;

        r14 = <org.apache.commons.lang.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

     label2:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, r2, r15);

        if $r3 != null goto label3;

        $r5 = new java.lang.NoSuchMethodException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No such accessible method: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("() on object: ");

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r13);

        throw $r5;

     label3:
        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, r14);

        return $r4;
    }

    public static java.lang.Object invokeExactMethod(java.lang.Object, java.lang.String, java.lang.Object) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] $r2;
        java.lang.Object r0, r3, $r4;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.Object invokeExactMethod(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, r1, $r2);

        return $r4;
    }

    public static java.lang.Object invokeExactMethod(java.lang.Object, java.lang.String, java.lang.Object[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] r6;
        java.lang.Class[] $r5;
        int $i0, i1;
        java.lang.Object r0, $r2, $r3;
        java.lang.Class $r4;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.Object[];

        if r6 != null goto label1;

        r6 = <org.apache.commons.lang.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

     label1:
        $i0 = lengthof r6;

        $r5 = newarray (java.lang.Class)[$i0];

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        $r3 = r6[i1];

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5[i1] = $r4;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r2 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.Object invokeExactMethod(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.Class[])>(r0, r1, r6, $r5);

        return $r2;
    }

    public static java.lang.Object invokeExactMethod(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] r14;
        java.lang.NoSuchMethodException $r5;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r12;
        java.lang.String r2, $r11, $r13;
        java.lang.reflect.Method $r3;
        java.lang.Class[] r15;
        java.lang.Object r0, $r4;
        java.lang.Class $r1, $r10;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r14 := @parameter2: java.lang.Object[];

        r15 := @parameter3: java.lang.Class[];

        if r14 != null goto label1;

        r14 = <org.apache.commons.lang.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

     label1:
        if r15 != null goto label2;

        r15 = <org.apache.commons.lang.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

     label2:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.reflect.Method getAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, r2, r15);

        if $r3 != null goto label3;

        $r5 = new java.lang.NoSuchMethodException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No such accessible method: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("() on object: ");

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r13);

        throw $r5;

     label3:
        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, r14);

        return $r4;
    }

    public static java.lang.Object invokeExactStaticMethod(java.lang.Class, java.lang.String, java.lang.Object[], java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] r12;
        java.lang.NoSuchMethodException $r4;
        java.lang.Class[] r13;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r10;
        java.lang.Class r0;
        java.lang.Object $r3;
        java.lang.String r1, $r9, $r11;
        java.lang.reflect.Method $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r12 := @parameter2: java.lang.Object[];

        r13 := @parameter3: java.lang.Class[];

        if r12 != null goto label1;

        r12 = <org.apache.commons.lang.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

     label1:
        if r13 != null goto label2;

        r13 = <org.apache.commons.lang.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

     label2:
        $r2 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.reflect.Method getAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, r1, r13);

        if $r2 != null goto label3;

        $r4 = new java.lang.NoSuchMethodException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No such accessible method: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("() on class: ");

        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label3:
        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, r12);

        return $r3;
    }

    public static java.lang.Object invokeStaticMethod(java.lang.Class, java.lang.String, java.lang.Object) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] $r2;
        java.lang.Class r0;
        java.lang.Object r3, $r4;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[])>(r0, r1, $r2);

        return $r4;
    }

    public static java.lang.Object invokeStaticMethod(java.lang.Class, java.lang.String, java.lang.Object[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] r6;
        java.lang.Class[] $r5;
        int $i0, i1;
        java.lang.Class r0, $r4;
        java.lang.Object $r2, $r3;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.Object[];

        if r6 != null goto label1;

        r6 = <org.apache.commons.lang.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

     label1:
        $i0 = lengthof r6;

        $r5 = newarray (java.lang.Class)[$i0];

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        $r3 = r6[i1];

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5[i1] = $r4;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r2 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[],java.lang.Class[])>(r0, r1, r6, $r5);

        return $r2;
    }

    public static java.lang.Object invokeStaticMethod(java.lang.Class, java.lang.String, java.lang.Object[], java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] r12;
        java.lang.NoSuchMethodException $r4;
        java.lang.Class[] r13;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r10;
        java.lang.Class r0;
        java.lang.Object $r3;
        java.lang.String r1, $r9, $r11;
        java.lang.reflect.Method $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r12 := @parameter2: java.lang.Object[];

        r13 := @parameter3: java.lang.Class[];

        if r13 != null goto label1;

        r13 = <org.apache.commons.lang.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

     label1:
        if r12 != null goto label2;

        r12 = <org.apache.commons.lang.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

     label2:
        $r2 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, r1, r13);

        if $r2 != null goto label3;

        $r4 = new java.lang.NoSuchMethodException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No such accessible method: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("() on class: ");

        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label3:
        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, r12);

        return $r3;
    }

    public static java.lang.Object invokeExactStaticMethod(java.lang.Class, java.lang.String, java.lang.Object) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] $r2;
        java.lang.Class r0;
        java.lang.Object r3, $r4;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.Object invokeExactStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[])>(r0, r1, $r2);

        return $r4;
    }

    public static java.lang.Object invokeExactStaticMethod(java.lang.Class, java.lang.String, java.lang.Object[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] r6;
        java.lang.Class[] $r5;
        int $i0, i1;
        java.lang.Class r0, $r4;
        java.lang.Object $r2, $r3;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.Object[];

        if r6 != null goto label1;

        r6 = <org.apache.commons.lang.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

     label1:
        $i0 = lengthof r6;

        $r5 = newarray (java.lang.Class)[$i0];

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        $r3 = r6[i1];

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5[i1] = $r4;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r2 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.Object invokeExactStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[],java.lang.Class[])>(r0, r1, r6, $r5);

        return $r2;
    }

    public static java.lang.reflect.Method getAccessibleMethod(java.lang.Class, java.lang.String, java.lang.Class)
    {
        java.lang.Class[] $r2;
        java.lang.Class r0, r3;
        java.lang.String r1;
        java.lang.reflect.Method $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class;

        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = r3;

        $r4 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.reflect.Method getAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, r1, $r2);

        return $r4;
    }

    public static java.lang.reflect.Method getAccessibleMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.NoSuchMethodException $r5;
        java.lang.Class[] r2;
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Method $r3, $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

     label1:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, r2);

        $r4 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.reflect.Method getAccessibleMethod(java.lang.reflect.Method)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        return null;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public static java.lang.reflect.Method getAccessibleMethod(java.lang.reflect.Method)
    {
        java.lang.Class[] $r2;
        int $i0;
        java.lang.Class $r0;
        java.lang.String $r1;
        java.lang.reflect.Method $r3, r4, r5;
        boolean $z0, $z1;

        r4 := @parameter0: java.lang.reflect.Method;

        $z0 = staticinvoke <org.apache.commons.lang.reflect.MemberUtils: boolean isAccessible(java.lang.reflect.Member)>(r4);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r0 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $i0 = virtualinvoke $r0.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        $r1 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $r2 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r3 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.reflect.Method getAccessibleMethodFromInterfaceNest(java.lang.Class,java.lang.String,java.lang.Class[])>($r0, $r1, $r2);

        r5 = $r3;

        if $r3 != null goto label3;

        r5 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.reflect.Method getAccessibleMethodFromSuperclass(java.lang.Class,java.lang.String,java.lang.Class[])>($r0, $r1, $r2);

     label3:
        return r5;
    }

    private static java.lang.reflect.Method getAccessibleMethodFromSuperclass(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.NoSuchMethodException $r4;
        java.lang.Class[] r2;
        int $i0;
        java.lang.Class r0, r5;
        java.lang.String r1;
        java.lang.reflect.Method $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

     label1:
        if r5 == null goto label6;

        $i0 = virtualinvoke r5.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label5;

     label2:
        $r3 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, r2);

     label3:
        return $r3;

     label4:
        $r4 := @caughtexception;

        return null;

     label5:
        r5 = virtualinvoke r5.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label6:
        return null;

        catch java.lang.NoSuchMethodException from label2 to label3 with label4;
    }

    private static java.lang.reflect.Method getAccessibleMethodFromInterfaceNest(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.NoSuchMethodException $r7;
        java.lang.Class[] $r0, r3;
        int $i0, $i1, i2;
        java.lang.Class $r1, $r4, $r5, r8;
        java.lang.String r2;
        java.lang.reflect.Method $r6, r9;
        boolean $z0;

        r8 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class[];

        r9 = null;

     label01:
        if r8 == null goto label10;

        $r0 = virtualinvoke r8.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i2 = 0;

     label02:
        $i0 = lengthof $r0;

        if i2 >= $i0 goto label09;

        $r1 = $r0[i2];

        $i1 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z0 != 0 goto label03;

        goto label08;

     label03:
        $r4 = $r0[i2];

        r9 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r2, r3);

     label04:
        goto label06;

     label05:
        $r7 := @caughtexception;

     label06:
        if r9 == null goto label07;

        goto label09;

     label07:
        $r5 = $r0[i2];

        $r6 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.reflect.Method getAccessibleMethodFromInterfaceNest(java.lang.Class,java.lang.String,java.lang.Class[])>($r5, r2, r3);

        r9 = $r6;

        if $r6 == null goto label08;

        goto label09;

     label08:
        i2 = i2 + 1;

        goto label02;

     label09:
        r8 = virtualinvoke r8.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label01;

     label10:
        return r9;

        catch java.lang.NoSuchMethodException from label03 to label04 with label05;
    }

    public static java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.NoSuchMethodException $r4;
        java.lang.reflect.Method[] $r5;
        int i0, $i1, i2;
        java.lang.String r1, $r7;
        java.lang.reflect.Method $r3, $r6, $r8, $r10, $r11, r14;
        boolean $z0, $z1;
        java.lang.Class[] r2, $r9, $r12, $r13;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

     label1:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, r2);

        staticinvoke <org.apache.commons.lang.reflect.MemberUtils: void setAccessibleWorkaround(java.lang.reflect.AccessibleObject)>($r3);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r14 = null;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i2 = 0;

        i0 = lengthof $r5;

     label4:
        if i2 >= i0 goto label7;

        $r6 = $r5[i2];

        $r7 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label6;

        $r8 = $r5[i2];

        $r9 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $z1 = staticinvoke <org.apache.commons.lang.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>(r2, $r9, 1);

        if $z1 == 0 goto label6;

        $r10 = $r5[i2];

        $r11 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.reflect.Method getAccessibleMethod(java.lang.reflect.Method)>($r10);

        if $r11 == null goto label6;

        if r14 == null goto label5;

        $r12 = virtualinvoke $r11.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r13 = virtualinvoke r14.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = staticinvoke <org.apache.commons.lang.reflect.MemberUtils: int compareParameterTypes(java.lang.Class[],java.lang.Class[],java.lang.Class[])>($r12, $r13, r2);

        if $i1 >= 0 goto label6;

     label5:
        r14 = $r11;

     label6:
        i2 = i2 + 1;

        goto label4;

     label7:
        if r14 == null goto label8;

        staticinvoke <org.apache.commons.lang.reflect.MemberUtils: void setAccessibleWorkaround(java.lang.reflect.AccessibleObject)>(r14);

     label8:
        return r14;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }
}
