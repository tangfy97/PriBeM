class org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2 extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$SubmitCallback
{
    final org.waveprotocol.wave.model.id.WaveletId val$waveletId;
    final org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback val$callback;
    final org.waveprotocol.wave.model.id.WaveId val$waveId;
    final org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl this$0;

    void <init>(org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl, org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback, org.waveprotocol.wave.model.id.WaveId)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback r3;
        org.waveprotocol.wave.model.id.WaveId r4;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r1;
        org.waveprotocol.wave.model.id.WaveletId r2;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2 r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        r2 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r3 := @parameter2: org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback;

        r4 := @parameter3: org.waveprotocol.wave.model.id.WaveId;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl this$0> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: org.waveprotocol.wave.model.id.WaveletId val$waveletId> = r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback val$callback> = r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: org.waveprotocol.wave.model.id.WaveId val$waveId> = r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(org.waveprotocol.wave.model.version.HashedVersion, int, java.lang.String, org.waveprotocol.wave.concurrencycontrol.common.ResponseCode)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback $r7;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode r5;
        org.waveprotocol.wave.model.id.WaveletId $r3, $r9;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r8;
        java.util.Map $r2;
        int i0;
        org.waveprotocol.wave.model.version.HashedVersion r4;
        java.lang.String r6;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2 r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2;

        r4 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        i0 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

        r5 := @parameter3: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map access$000(org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl)>($r1);

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: org.waveprotocol.wave.model.id.WaveletId val$waveletId>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

     label1:
        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback val$callback>;

        interfaceinvoke $r7.<org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback: void onSuccess(int,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String)>(i0, r4, r5, r6);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: org.waveprotocol.wave.model.id.WaveletId val$waveletId>;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: void handleException(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.ChannelException,org.waveprotocol.wave.model.id.WaveletId)>("onSuccess", $r8, $r9);

     label4:
        return;

        catch org.waveprotocol.wave.concurrencycontrol.common.ChannelException from label1 to label2 with label3;
    }

    public void onFailure(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback $r5;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl $r1;
        org.waveprotocol.wave.model.id.WaveletId $r3, $r7;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r6;
        java.util.Map $r2;
        java.lang.String r4;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2 r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map access$000(org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl)>($r1);

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: org.waveprotocol.wave.model.id.WaveletId val$waveletId>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

     label1:
        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback val$callback>;

        interfaceinvoke $r5.<org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback: void onFailure(java.lang.String)>(r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: org.waveprotocol.wave.model.id.WaveletId val$waveletId>;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: void handleException(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.ChannelException,org.waveprotocol.wave.model.id.WaveletId)>("onFailure", $r6, $r7);

     label4:
        return;

        catch org.waveprotocol.wave.concurrencycontrol.common.ChannelException from label1 to label2 with label3;
    }

    private void handleException(java.lang.String, org.waveprotocol.wave.concurrencycontrol.common.ChannelException, org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r3;
        java.util.Map $r2;
        java.lang.String r9, $r18;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2 r0;
        org.waveprotocol.wave.model.id.WaveId $r12;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl $r1, $r5, $r7;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException r4;
        java.lang.StringBuilder $r6, $r8, $r10, $r11, $r13, $r14, $r15, $r16, $r17;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2;

        r9 := @parameter0: java.lang.String;

        r4 := @parameter1: org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        r3 := @parameter2: org.waveprotocol.wave.model.id.WaveletId;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map access$000(org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl)>($r1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl this$0>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void access$100(org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl,org.waveprotocol.wave.concurrencycontrol.common.ChannelException,org.waveprotocol.wave.model.id.WaveletId)>($r5, r4, r3);

        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl this$0>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View submit [");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for wavelet ");

        $r12 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: org.waveprotocol.wave.model.id.WaveId val$waveId>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" raised exception: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void access$200(org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl,java.lang.String)>($r7, $r18);

        return;
    }
}
