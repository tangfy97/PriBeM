public final class org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum extends org.apache.xmlbeans.StringEnumAbstractBase
{
    static final int INT_DECIMAL;
    static final int INT_UPPER_ROMAN;
    static final int INT_LOWER_ROMAN;
    static final int INT_UPPER_LETTER;
    static final int INT_LOWER_LETTER;
    static final int INT_ORDINAL;
    static final int INT_CARDINAL_TEXT;
    static final int INT_ORDINAL_TEXT;
    static final int INT_HEX;
    static final int INT_CHICAGO;
    static final int INT_IDEOGRAPH_DIGITAL;
    static final int INT_JAPANESE_COUNTING;
    static final int INT_AIUEO;
    static final int INT_IROHA;
    static final int INT_DECIMAL_FULL_WIDTH;
    static final int INT_DECIMAL_HALF_WIDTH;
    static final int INT_JAPANESE_LEGAL;
    static final int INT_JAPANESE_DIGITAL_TEN_THOUSAND;
    static final int INT_DECIMAL_ENCLOSED_CIRCLE;
    static final int INT_DECIMAL_FULL_WIDTH_2;
    static final int INT_AIUEO_FULL_WIDTH;
    static final int INT_IROHA_FULL_WIDTH;
    static final int INT_DECIMAL_ZERO;
    static final int INT_BULLET;
    static final int INT_GANADA;
    static final int INT_CHOSUNG;
    static final int INT_DECIMAL_ENCLOSED_FULLSTOP;
    static final int INT_DECIMAL_ENCLOSED_PAREN;
    static final int INT_DECIMAL_ENCLOSED_CIRCLE_CHINESE;
    static final int INT_IDEOGRAPH_ENCLOSED_CIRCLE;
    static final int INT_IDEOGRAPH_TRADITIONAL;
    static final int INT_IDEOGRAPH_ZODIAC;
    static final int INT_IDEOGRAPH_ZODIAC_TRADITIONAL;
    static final int INT_TAIWANESE_COUNTING;
    static final int INT_IDEOGRAPH_LEGAL_TRADITIONAL;
    static final int INT_TAIWANESE_COUNTING_THOUSAND;
    static final int INT_TAIWANESE_DIGITAL;
    static final int INT_CHINESE_COUNTING;
    static final int INT_CHINESE_LEGAL_SIMPLIFIED;
    static final int INT_CHINESE_COUNTING_THOUSAND;
    static final int INT_KOREAN_DIGITAL;
    static final int INT_KOREAN_COUNTING;
    static final int INT_KOREAN_LEGAL;
    static final int INT_KOREAN_DIGITAL_2;
    static final int INT_VIETNAMESE_COUNTING;
    static final int INT_RUSSIAN_LOWER;
    static final int INT_RUSSIAN_UPPER;
    static final int INT_NONE;
    static final int INT_NUMBER_IN_DASH;
    static final int INT_HEBREW_1;
    static final int INT_HEBREW_2;
    static final int INT_ARABIC_ALPHA;
    static final int INT_ARABIC_ABJAD;
    static final int INT_HINDI_VOWELS;
    static final int INT_HINDI_CONSONANTS;
    static final int INT_HINDI_NUMBERS;
    static final int INT_HINDI_COUNTING;
    static final int INT_THAI_LETTERS;
    static final int INT_THAI_NUMBERS;
    static final int INT_THAI_COUNTING;
    public static final org.apache.xmlbeans.StringEnumAbstractBase$Table table;
    private static final long serialVersionUID;

    public static org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum forString(java.lang.String)
    {
        org.apache.xmlbeans.StringEnumAbstractBase$Table $r1;
        org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum $r3;
        java.lang.String r0;
        org.apache.xmlbeans.StringEnumAbstractBase $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: org.apache.xmlbeans.StringEnumAbstractBase$Table table>;

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.StringEnumAbstractBase$Table: org.apache.xmlbeans.StringEnumAbstractBase forString(java.lang.String)>(r0);

        $r3 = (org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum) $r2;

        return $r3;
    }

    public static org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum forInt(int)
    {
        org.apache.xmlbeans.StringEnumAbstractBase$Table $r0;
        int i0;
        org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum $r2;
        org.apache.xmlbeans.StringEnumAbstractBase $r1;

        i0 := @parameter0: int;

        $r0 = <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: org.apache.xmlbeans.StringEnumAbstractBase$Table table>;

        $r1 = virtualinvoke $r0.<org.apache.xmlbeans.StringEnumAbstractBase$Table: org.apache.xmlbeans.StringEnumAbstractBase forInt(int)>(i0);

        $r2 = (org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum r0;
        int i0;
        java.lang.String r1;

        r0 := @this: org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.xmlbeans.StringEnumAbstractBase: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    private java.lang.Object readResolve()
    {
        org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum r0, $r1;
        int $i0;

        r0 := @this: org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        $i0 = virtualinvoke r0.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int intValue()>();

        $r1 = staticinvoke <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum forInt(int)>($i0);

        return $r1;
    }

    static void <clinit>()
    {
        org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum[] $r1;
        org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61;
        org.apache.xmlbeans.StringEnumAbstractBase$Table $r0;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: long serialVersionUID> = 1L;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_THAI_COUNTING> = 60;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_THAI_NUMBERS> = 59;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_THAI_LETTERS> = 58;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_HINDI_COUNTING> = 57;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_HINDI_NUMBERS> = 56;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_HINDI_CONSONANTS> = 55;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_HINDI_VOWELS> = 54;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_ARABIC_ABJAD> = 53;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_ARABIC_ALPHA> = 52;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_HEBREW_2> = 51;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_HEBREW_1> = 50;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_NUMBER_IN_DASH> = 49;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_NONE> = 48;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_RUSSIAN_UPPER> = 47;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_RUSSIAN_LOWER> = 46;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_VIETNAMESE_COUNTING> = 45;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_KOREAN_DIGITAL_2> = 44;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_KOREAN_LEGAL> = 43;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_KOREAN_COUNTING> = 42;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_KOREAN_DIGITAL> = 41;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_CHINESE_COUNTING_THOUSAND> = 40;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_CHINESE_LEGAL_SIMPLIFIED> = 39;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_CHINESE_COUNTING> = 38;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_TAIWANESE_DIGITAL> = 37;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_TAIWANESE_COUNTING_THOUSAND> = 36;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_IDEOGRAPH_LEGAL_TRADITIONAL> = 35;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_TAIWANESE_COUNTING> = 34;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_IDEOGRAPH_ZODIAC_TRADITIONAL> = 33;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_IDEOGRAPH_ZODIAC> = 32;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_IDEOGRAPH_TRADITIONAL> = 31;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_IDEOGRAPH_ENCLOSED_CIRCLE> = 30;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_DECIMAL_ENCLOSED_CIRCLE_CHINESE> = 29;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_DECIMAL_ENCLOSED_PAREN> = 28;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_DECIMAL_ENCLOSED_FULLSTOP> = 27;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_CHOSUNG> = 26;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_GANADA> = 25;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_BULLET> = 24;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_DECIMAL_ZERO> = 23;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_IROHA_FULL_WIDTH> = 22;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_AIUEO_FULL_WIDTH> = 21;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_DECIMAL_FULL_WIDTH_2> = 20;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_DECIMAL_ENCLOSED_CIRCLE> = 19;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_JAPANESE_DIGITAL_TEN_THOUSAND> = 18;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_JAPANESE_LEGAL> = 17;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_DECIMAL_HALF_WIDTH> = 16;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_DECIMAL_FULL_WIDTH> = 15;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_IROHA> = 14;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_AIUEO> = 13;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_JAPANESE_COUNTING> = 12;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_IDEOGRAPH_DIGITAL> = 11;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_CHICAGO> = 10;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_HEX> = 9;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_ORDINAL_TEXT> = 8;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_CARDINAL_TEXT> = 7;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_ORDINAL> = 6;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_LOWER_LETTER> = 5;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_UPPER_LETTER> = 4;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_LOWER_ROMAN> = 3;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_UPPER_ROMAN> = 2;

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: int INT_DECIMAL> = 1;

        $r0 = new org.apache.xmlbeans.StringEnumAbstractBase$Table;

        $r1 = newarray (org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum)[60];

        $r2 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r2.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("decimal", 1);

        $r1[0] = $r2;

        $r3 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r3.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("upperRoman", 2);

        $r1[1] = $r3;

        $r4 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r4.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("lowerRoman", 3);

        $r1[2] = $r4;

        $r5 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r5.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("upperLetter", 4);

        $r1[3] = $r5;

        $r6 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r6.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("lowerLetter", 5);

        $r1[4] = $r6;

        $r7 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r7.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("ordinal", 6);

        $r1[5] = $r7;

        $r8 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r8.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("cardinalText", 7);

        $r1[6] = $r8;

        $r9 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r9.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("ordinalText", 8);

        $r1[7] = $r9;

        $r10 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r10.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("hex", 9);

        $r1[8] = $r10;

        $r11 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r11.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("chicago", 10);

        $r1[9] = $r11;

        $r12 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r12.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("ideographDigital", 11);

        $r1[10] = $r12;

        $r13 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r13.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("japaneseCounting", 12);

        $r1[11] = $r13;

        $r14 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r14.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("aiueo", 13);

        $r1[12] = $r14;

        $r15 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r15.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("iroha", 14);

        $r1[13] = $r15;

        $r16 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r16.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("decimalFullWidth", 15);

        $r1[14] = $r16;

        $r17 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r17.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("decimalHalfWidth", 16);

        $r1[15] = $r17;

        $r18 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r18.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("japaneseLegal", 17);

        $r1[16] = $r18;

        $r19 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r19.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("japaneseDigitalTenThousand", 18);

        $r1[17] = $r19;

        $r20 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r20.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("decimalEnclosedCircle", 19);

        $r1[18] = $r20;

        $r21 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r21.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("decimalFullWidth2", 20);

        $r1[19] = $r21;

        $r22 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r22.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("aiueoFullWidth", 21);

        $r1[20] = $r22;

        $r23 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r23.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("irohaFullWidth", 22);

        $r1[21] = $r23;

        $r24 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r24.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("decimalZero", 23);

        $r1[22] = $r24;

        $r25 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r25.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("bullet", 24);

        $r1[23] = $r25;

        $r26 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r26.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("ganada", 25);

        $r1[24] = $r26;

        $r27 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r27.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("chosung", 26);

        $r1[25] = $r27;

        $r28 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r28.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("decimalEnclosedFullstop", 27);

        $r1[26] = $r28;

        $r29 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r29.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("decimalEnclosedParen", 28);

        $r1[27] = $r29;

        $r30 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r30.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("decimalEnclosedCircleChinese", 29);

        $r1[28] = $r30;

        $r31 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r31.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("ideographEnclosedCircle", 30);

        $r1[29] = $r31;

        $r32 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r32.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("ideographTraditional", 31);

        $r1[30] = $r32;

        $r33 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r33.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("ideographZodiac", 32);

        $r1[31] = $r33;

        $r34 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r34.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("ideographZodiacTraditional", 33);

        $r1[32] = $r34;

        $r35 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r35.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("taiwaneseCounting", 34);

        $r1[33] = $r35;

        $r36 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r36.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("ideographLegalTraditional", 35);

        $r1[34] = $r36;

        $r37 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r37.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("taiwaneseCountingThousand", 36);

        $r1[35] = $r37;

        $r38 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r38.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("taiwaneseDigital", 37);

        $r1[36] = $r38;

        $r39 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r39.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("chineseCounting", 38);

        $r1[37] = $r39;

        $r40 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r40.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("chineseLegalSimplified", 39);

        $r1[38] = $r40;

        $r41 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r41.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("chineseCountingThousand", 40);

        $r1[39] = $r41;

        $r42 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r42.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("koreanDigital", 41);

        $r1[40] = $r42;

        $r43 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r43.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("koreanCounting", 42);

        $r1[41] = $r43;

        $r44 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r44.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("koreanLegal", 43);

        $r1[42] = $r44;

        $r45 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r45.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("koreanDigital2", 44);

        $r1[43] = $r45;

        $r46 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r46.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("vietnameseCounting", 45);

        $r1[44] = $r46;

        $r47 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r47.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("russianLower", 46);

        $r1[45] = $r47;

        $r48 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r48.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("russianUpper", 47);

        $r1[46] = $r48;

        $r49 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r49.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("none", 48);

        $r1[47] = $r49;

        $r50 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r50.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("numberInDash", 49);

        $r1[48] = $r50;

        $r51 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r51.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("hebrew1", 50);

        $r1[49] = $r51;

        $r52 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r52.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("hebrew2", 51);

        $r1[50] = $r52;

        $r53 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r53.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("arabicAlpha", 52);

        $r1[51] = $r53;

        $r54 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r54.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("arabicAbjad", 53);

        $r1[52] = $r54;

        $r55 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r55.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("hindiVowels", 54);

        $r1[53] = $r55;

        $r56 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r56.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("hindiConsonants", 55);

        $r1[54] = $r56;

        $r57 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r57.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("hindiNumbers", 56);

        $r1[55] = $r57;

        $r58 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r58.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("hindiCounting", 57);

        $r1[56] = $r58;

        $r59 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r59.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("thaiLetters", 58);

        $r1[57] = $r59;

        $r60 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r60.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("thaiNumbers", 59);

        $r1[58] = $r60;

        $r61 = new org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum;

        specialinvoke $r61.<org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: void <init>(java.lang.String,int)>("thaiCounting", 60);

        $r1[59] = $r61;

        specialinvoke $r0.<org.apache.xmlbeans.StringEnumAbstractBase$Table: void <init>(org.apache.xmlbeans.StringEnumAbstractBase[])>($r1);

        <org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat$Enum: org.apache.xmlbeans.StringEnumAbstractBase$Table table> = $r0;

        return;
    }
}
