public final class org.jdesktop.swingx.util.ShapeUtils extends java.lang.Object
{

    private void <init>()
    {
        org.jdesktop.swingx.util.ShapeUtils r0;

        r0 := @this: org.jdesktop.swingx.util.ShapeUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.awt.Shape generatePolygon(int, int, boolean)
    {
        java.awt.Shape $r0;
        int i0, i1;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r0 = staticinvoke <org.jdesktop.swingx.util.ShapeUtils: java.awt.Shape generatePolygon(int,int,int,boolean)>(i0, i1, 0, z0);

        return $r0;
    }

    public static java.awt.Shape generatePolygon(int, int, int, boolean)
    {
        java.awt.Shape $r0, r4;
        java.awt.geom.Rectangle2D $r1;
        java.awt.geom.AffineTransform $r3;
        int i0, i1, i2;
        java.awt.geom.GeneralPath $r2;
        boolean z0;
        double $d0, $d1, $d2, $d3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r0 = staticinvoke <org.jdesktop.swingx.util.ShapeUtils: java.awt.Shape generatePolygon(int,int,int)>(i0, i1, i2);

        r4 = $r0;

        if z0 == 0 goto label1;

        $r1 = interfaceinvoke $r0.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r2 = new java.awt.geom.GeneralPath;

        specialinvoke $r2.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($r0);

        $d0 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: double getX()>();

        $d1 = neg $d0;

        $d2 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: double getY()>();

        $d3 = neg $d2;

        $r3 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d1, $d3);

        r4 = virtualinvoke $r2.<java.awt.geom.GeneralPath: java.awt.Shape createTransformedShape(java.awt.geom.AffineTransform)>($r3);

     label1:
        return r4;
    }

    public static java.awt.Shape generatePolygon(int, int, int)
    {
        java.awt.Polygon $r1;
        java.awt.geom.Point2D $r3, $r5;
        int i0, i1, $i2, $i3, i4, $i5, $i6, i7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        java.awt.geom.AffineTransform $r0;
        java.awt.geom.Point2D$Float $r2, $r4;
        float $f0, $f1, $f2, $f3;
        java.awt.geom.Ellipse2D$Float $r6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i4 := @parameter2: int;

        if i0 >= 3 goto label1;

        $r6 = new java.awt.geom.Ellipse2D$Float;

        specialinvoke $r6.<java.awt.geom.Ellipse2D$Float: void <init>(float,float,float,float)>(0.0F, 0.0F, 10.0F, 10.0F);

        return $r6;

     label1:
        $r0 = new java.awt.geom.AffineTransform;

        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>()>();

        $r1 = new java.awt.Polygon;

        specialinvoke $r1.<java.awt.Polygon: void <init>()>();

        i7 = 0;

     label2:
        if i7 >= i0 goto label4;

        $f0 = (float) i0;

        $d0 = (double) $f0;

        $d1 = 6.283185307179586 / $d0;

        $d2 = $d1 / 2.0;

        virtualinvoke $r0.<java.awt.geom.AffineTransform: void rotate(double)>($d2);

        $r2 = new java.awt.geom.Point2D$Float;

        $f1 = (float) i1;

        specialinvoke $r2.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, $f1);

        $r3 = virtualinvoke $r0.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r2, null);

        $d3 = virtualinvoke $r3.<java.awt.geom.Point2D: double getX()>();

        $i2 = (int) $d3;

        $d4 = virtualinvoke $r3.<java.awt.geom.Point2D: double getY()>();

        $i3 = (int) $d4;

        virtualinvoke $r1.<java.awt.Polygon: void addPoint(int,int)>($i2, $i3);

        $f2 = (float) i0;

        $d5 = (double) $f2;

        $d6 = 6.283185307179586 / $d5;

        $d7 = $d6 / 2.0;

        virtualinvoke $r0.<java.awt.geom.AffineTransform: void rotate(double)>($d7);

        if i4 <= 0 goto label3;

        $r4 = new java.awt.geom.Point2D$Float;

        $f3 = (float) i4;

        specialinvoke $r4.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, $f3);

        $r5 = virtualinvoke $r0.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r4, null);

        $d8 = virtualinvoke $r5.<java.awt.geom.Point2D: double getX()>();

        $i5 = (int) $d8;

        $d9 = virtualinvoke $r5.<java.awt.geom.Point2D: double getY()>();

        $i6 = (int) $d9;

        virtualinvoke $r1.<java.awt.Polygon: void addPoint(int,int)>($i5, $i6);

     label3:
        i7 = i7 + 1;

        goto label2;

     label4:
        return $r1;
    }

    public static java.awt.Shape generateShapeFromText(java.awt.Font, char)
    {
        java.awt.Shape $r2;
        java.awt.Font r0;
        char c0;
        java.lang.String $r1;

        r0 := @parameter0: java.awt.Font;

        c0 := @parameter1: char;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        $r2 = staticinvoke <org.jdesktop.swingx.util.ShapeUtils: java.awt.Shape generateShapeFromText(java.awt.Font,java.lang.String)>(r0, $r1);

        return $r2;
    }

    public static java.awt.Shape generateShapeFromText(java.awt.Font, java.lang.String)
    {
        java.awt.Shape $r7;
        java.lang.Throwable $r8;
        java.awt.image.BufferedImage $r0;
        java.awt.Font r2;
        java.awt.geom.Rectangle2D $r6;
        java.awt.font.GlyphVector $r5;
        java.awt.font.FontRenderContext $r3;
        java.awt.Graphics2D $r1;
        float $f0;
        java.lang.String r4;
        double $d0, $d1;

        r2 := @parameter0: java.awt.Font;

        r4 := @parameter1: java.lang.String;

        $r0 = new java.awt.image.BufferedImage;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(100, 100, 2);

        $r1 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

     label1:
        $r3 = virtualinvoke $r1.<java.awt.Graphics2D: java.awt.font.FontRenderContext getFontRenderContext()>();

        $r5 = virtualinvoke r2.<java.awt.Font: java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)>($r3, r4);

        $r6 = virtualinvoke $r5.<java.awt.font.GlyphVector: java.awt.geom.Rectangle2D getVisualBounds()>();

        $d0 = virtualinvoke $r6.<java.awt.geom.Rectangle2D: double getY()>();

        $d1 = neg $d0;

        $f0 = (float) $d1;

        $r7 = virtualinvoke $r5.<java.awt.font.GlyphVector: java.awt.Shape getOutline(float,float)>(0.0F, $f0);

     label2:
        virtualinvoke $r1.<java.awt.Graphics2D: void dispose()>();

        return $r7;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r1.<java.awt.Graphics2D: void dispose()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
