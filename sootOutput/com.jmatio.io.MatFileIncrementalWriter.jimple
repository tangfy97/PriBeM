public class com.jmatio.io.MatFileIncrementalWriter extends java.lang.Object
{
    private java.nio.channels.WritableByteChannel channel;
    private boolean headerWritten;
    private boolean isStillValid;
    private java.util.Set varNames;

    public void <init>(java.lang.String) throws java.io.IOException
    {
        com.jmatio.io.MatFileIncrementalWriter r0;
        java.lang.String r2;
        java.io.File $r1;

        r0 := @this: com.jmatio.io.MatFileIncrementalWriter;

        r2 := @parameter0: java.lang.String;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<com.jmatio.io.MatFileIncrementalWriter: void <init>(java.io.File)>($r1);

        return;
    }

    public void <init>(java.io.File) throws java.io.IOException
    {
        com.jmatio.io.MatFileIncrementalWriter r0;
        java.io.FileOutputStream $r1;
        java.nio.channels.FileChannel $r3;
        java.io.File r2;

        r0 := @this: com.jmatio.io.MatFileIncrementalWriter;

        r2 := @parameter0: java.io.File;

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        $r3 = virtualinvoke $r1.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        specialinvoke r0.<com.jmatio.io.MatFileIncrementalWriter: void <init>(java.nio.channels.WritableByteChannel)>($r3);

        return;
    }

    public void <init>(java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        com.jmatio.io.MatFileIncrementalWriter r0;
        java.nio.channels.WritableByteChannel r2;
        java.util.TreeSet $r1;

        r0 := @this: com.jmatio.io.MatFileIncrementalWriter;

        r2 := @parameter0: java.nio.channels.WritableByteChannel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jmatio.io.MatFileIncrementalWriter: java.nio.channels.WritableByteChannel channel> = null;

        r0.<com.jmatio.io.MatFileIncrementalWriter: boolean headerWritten> = 0;

        r0.<com.jmatio.io.MatFileIncrementalWriter: boolean isStillValid> = 0;

        $r1 = new java.util.TreeSet;

        specialinvoke $r1.<java.util.TreeSet: void <init>()>();

        r0.<com.jmatio.io.MatFileIncrementalWriter: java.util.Set varNames> = $r1;

        r0.<com.jmatio.io.MatFileIncrementalWriter: java.nio.channels.WritableByteChannel channel> = r2;

        r0.<com.jmatio.io.MatFileIncrementalWriter: boolean isStillValid> = 1;

        return;
    }

    public synchronized void write(com.jmatio.types.MLArray) throws java.io.IOException
    {
        java.lang.Throwable $r21;
        byte[] $r7, $r11;
        java.io.ByteArrayOutputStream $r4, $r8;
        java.util.zip.DeflaterOutputStream $r10;
        java.nio.ByteBuffer $r12;
        java.io.DataOutputStream $r5, $r9;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r20;
        boolean $z0, $z1;
        java.util.Set $r3;
        java.io.IOException $r22;
        java.util.zip.Deflater $r6;
        java.lang.IllegalArgumentException $r15;
        com.jmatio.io.MatFileIncrementalWriter r2;
        com.jmatio.types.MLArray r0;
        java.nio.channels.WritableByteChannel $r13, $r14;
        java.lang.StringBuilder $r16, $r17, $r18, $r19;

        r2 := @this: com.jmatio.io.MatFileIncrementalWriter;

        r0 := @parameter0: com.jmatio.types.MLArray;

        $r1 = virtualinvoke r0.<com.jmatio.types.MLArray: java.lang.String getName()>();

        $r3 = r2.<com.jmatio.io.MatFileIncrementalWriter: java.util.Set varNames>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label01;

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: variable ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" specified more than once for file input.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label01:
        $z1 = r2.<com.jmatio.io.MatFileIncrementalWriter: boolean headerWritten>;

        if $z1 != 0 goto label02;

        $r14 = r2.<com.jmatio.io.MatFileIncrementalWriter: java.nio.channels.WritableByteChannel channel>;

        specialinvoke r2.<com.jmatio.io.MatFileIncrementalWriter: void writeHeader(java.nio.channels.WritableByteChannel)>($r14);

     label02:
        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new java.io.DataOutputStream;

        specialinvoke $r5.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r4);

        specialinvoke r2.<com.jmatio.io.MatFileIncrementalWriter: void writeMatrix(java.io.DataOutputStream,com.jmatio.types.MLArray)>($r5, r0);

        $r6 = new java.util.zip.Deflater;

        specialinvoke $r6.<java.util.zip.Deflater: void <init>()>();

        $r7 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r8 = new java.io.ByteArrayOutputStream;

        specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>()>();

        $r9 = new java.io.DataOutputStream;

        $r10 = new java.util.zip.DeflaterOutputStream;

        specialinvoke $r10.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>($r8, $r6);

        specialinvoke $r9.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r10);

        virtualinvoke $r9.<java.io.DataOutputStream: void write(byte[])>($r7);

        virtualinvoke $r9.<java.io.DataOutputStream: void close()>();

        virtualinvoke $r8.<java.io.ByteArrayOutputStream: void close()>();

        $r11 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i0 = lengthof $r11;

        $i1 = 8 + $i0;

        $r12 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i1);

        virtualinvoke $r12.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(15);

        $i2 = lengthof $r11;

        virtualinvoke $r12.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i2);

        virtualinvoke $r12.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r11);

        virtualinvoke $r12.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r13 = r2.<com.jmatio.io.MatFileIncrementalWriter: java.nio.channels.WritableByteChannel channel>;

        interfaceinvoke $r13.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>($r12);

     label03:
        goto label09;

     label04:
        goto label08;

     label05:
        $r22 := @caughtexception;

        throw $r22;

     label06:
        $r21 := @caughtexception;

        goto label10;

     label07:
        throw $r21;

     label08:
        return;

     label09:
        goto label04;

     label10:
        goto label07;

        catch java.io.IOException from label01 to label03 with label05;
        catch java.lang.Throwable from label01 to label04 with label06;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public synchronized void write(java.util.Collection) throws java.io.IOException
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.io.IOException $r5;
        java.lang.IllegalArgumentException $r6;
        com.jmatio.io.MatFileIncrementalWriter r4;
        com.jmatio.types.MLArray r3;
        java.lang.Object $r2;
        boolean $z0;

        r4 := @this: com.jmatio.io.MatFileIncrementalWriter;

        r0 := @parameter0: java.util.Collection;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.jmatio.types.MLArray) $r2;

        virtualinvoke r4.<com.jmatio.io.MatFileIncrementalWriter: void write(com.jmatio.types.MLArray)>(r3);

        goto label2;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r4.<com.jmatio.io.MatFileIncrementalWriter: boolean isStillValid> = 0;

        throw $r6;

     label5:
        $r5 := @caughtexception;

        throw $r5;

     label6:
        return;

        catch java.lang.IllegalArgumentException from label1 to label3 with label4;
        catch java.io.IOException from label1 to label3 with label5;
    }

    public synchronized void close() throws java.io.IOException
    {
        com.jmatio.io.MatFileIncrementalWriter r0;
        java.nio.channels.WritableByteChannel $r1;

        r0 := @this: com.jmatio.io.MatFileIncrementalWriter;

        $r1 = r0.<com.jmatio.io.MatFileIncrementalWriter: java.nio.channels.WritableByteChannel channel>;

        interfaceinvoke $r1.<java.nio.channels.WritableByteChannel: void close()>();

        return;
    }

    private void writeHeader(java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        byte[] $r4;
        java.nio.ByteBuffer $r5;
        byte $b11, $b12, $b14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i15;
        java.lang.String $r2;
        char $c13;
        com.jmatio.io.MatFileIncrementalWriter r7;
        char[] r1, $r3;
        java.nio.channels.WritableByteChannel r6;
        com.jmatio.io.MatFileHeader $r0;

        r7 := @this: com.jmatio.io.MatFileIncrementalWriter;

        r6 := @parameter0: java.nio.channels.WritableByteChannel;

        $r0 = staticinvoke <com.jmatio.io.MatFileHeader: com.jmatio.io.MatFileHeader createHeader()>();

        r1 = newarray (char)[116];

        $r2 = virtualinvoke $r0.<com.jmatio.io.MatFileHeader: java.lang.String getDescription()>();

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i0);

        $r4 = virtualinvoke $r0.<com.jmatio.io.MatFileHeader: byte[] getEndianIndicator()>();

        $i1 = lengthof r1;

        $i2 = $i1 * 2;

        $i4 = $i2 + 2;

        $i3 = lengthof $r4;

        $i5 = $i4 + $i3;

        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i5);

        i15 = 0;

     label1:
        $i6 = lengthof r1;

        if i15 >= $i6 goto label2;

        $c13 = r1[i15];

        $b14 = (byte) $c13;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b14);

        i15 = i15 + 1;

        goto label1;

     label2:
        $i7 = virtualinvoke $r5.<java.nio.ByteBuffer: int position()>();

        $i8 = $i7 + 8;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i8);

        $i9 = virtualinvoke $r0.<com.jmatio.io.MatFileHeader: int getVersion()>();

        $i10 = $i9 >> 8;

        $b11 = (byte) $i10;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b11);

        $b12 = (byte) $i9;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b12);

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r4);

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        interfaceinvoke r6.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>($r5);

        r7.<com.jmatio.io.MatFileIncrementalWriter: boolean headerWritten> = 1;

        return;
    }

    private void writeMatrix(java.io.DataOutputStream, com.jmatio.types.MLArray) throws java.io.IOException
    {
        byte[] $r46, $r52, $r58, $r64, $r72, $r77, $r94;
        java.io.DataOutputStream r7, $r96, $r98, $r114, $r117, $r120, $r123;
        java.lang.Character $r73;
        byte $b5;
        com.jmatio.types.MLStructure $r74, $r76, $r78;
        com.jmatio.io.OSArrayTag $r99, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107, $r108, $r109, $r110, $r111, $r112, $r115, $r118, $r121, $r124;
        com.jmatio.types.MLChar $r69;
        java.lang.StringBuilder $r88, $r90, $r125;
        com.jmatio.types.MLCell $r82;
        java.io.ByteArrayOutputStream $r95, $r97, $r113, $r116, $r119, $r122;
        java.lang.Double $r65, $r66;
        java.util.ArrayList $r83;
        java.lang.String $r89, $r91;
        com.jmatio.io.MatFileIncrementalWriter r2;
        com.jmatio.io.MatlabIOException $r126;
        java.nio.ByteBuffer $r6, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40;
        int[] $r44, $r50;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Collection $r79;
        com.jmatio.types.MLArray r3, r92, r93;
        int $i0, $i1, $i2, $i3, $i6, $i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, $i17, $i18;
        double $d0, $d1;
        com.jmatio.types.MLSparse $r43, $r49, $r55, $r61;
        java.util.Iterator $r80, $r84;
        java.lang.Double[] $r56, $r62;
        char $c4;
        java.lang.Character[] $r70;
        com.jmatio.types.MLNumericArray $r5, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39;
        java.lang.Object $r81, $r85;

        r2 := @this: com.jmatio.io.MatFileIncrementalWriter;

        r7 := @parameter0: java.io.DataOutputStream;

        r3 := @parameter1: com.jmatio.types.MLArray;

        $r95 = new java.io.ByteArrayOutputStream;

        specialinvoke $r95.<java.io.ByteArrayOutputStream: void <init>()>();

        $r96 = new java.io.DataOutputStream;

        specialinvoke $r96.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r95);

        specialinvoke r2.<com.jmatio.io.MatFileIncrementalWriter: void writeFlags(java.io.DataOutputStream,com.jmatio.types.MLArray)>($r96, r3);

        specialinvoke r2.<com.jmatio.io.MatFileIncrementalWriter: void writeDimensions(java.io.DataOutputStream,com.jmatio.types.MLArray)>($r96, r3);

        specialinvoke r2.<com.jmatio.io.MatFileIncrementalWriter: void writeName(java.io.DataOutputStream,com.jmatio.types.MLArray)>($r96, r3);

        $i0 = virtualinvoke r3.<com.jmatio.types.MLArray: int getType()>();

        tableswitch($i0)
        {
            case 1: goto label13;
            case 2: goto label10;
            case 3: goto label25;
            case 4: goto label01;
            case 5: goto label16;
            case 6: goto label04;
            case 7: goto label25;
            case 8: goto label06;
            case 9: goto label05;
            case 10: goto label07;
            case 11: goto label25;
            case 12: goto label25;
            case 13: goto label25;
            case 14: goto label08;
            case 15: goto label09;
            default: goto label25;
        };

     label01:
        $r97 = new java.io.ByteArrayOutputStream;

        specialinvoke $r97.<java.io.ByteArrayOutputStream: void <init>()>();

        $r98 = new java.io.DataOutputStream;

        specialinvoke $r98.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r97);

        $r69 = (com.jmatio.types.MLChar) r3;

        $r70 = virtualinvoke $r69.<com.jmatio.types.MLChar: java.lang.Character[] exportChar()>();

        i8 = 0;

     label02:
        $i3 = lengthof $r70;

        if i8 >= $i3 goto label03;

        $r73 = $r70[i8];

        $c4 = virtualinvoke $r73.<java.lang.Character: char charValue()>();

        $b5 = (byte) $c4;

        $i18 = (int) $b5;

        virtualinvoke $r98.<java.io.DataOutputStream: void writeByte(int)>($i18);

        i8 = i8 + 1;

        goto label02;

     label03:
        $r99 = new com.jmatio.io.OSArrayTag;

        $r72 = virtualinvoke $r97.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r99.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(16, $r72);

        virtualinvoke $r99.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        goto label26;

     label04:
        $r100 = new com.jmatio.io.OSArrayTag;

        $r36 = (com.jmatio.types.MLNumericArray) r3;

        $r37 = virtualinvoke $r36.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        specialinvoke $r100.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(9, $r37);

        virtualinvoke $r100.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        $z5 = virtualinvoke r3.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z5 == 0 goto label26;

        $r101 = new com.jmatio.io.OSArrayTag;

        $r39 = (com.jmatio.types.MLNumericArray) r3;

        $r40 = virtualinvoke $r39.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        specialinvoke $r101.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(9, $r40);

        virtualinvoke $r101.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        goto label26;

     label05:
        $r102 = new com.jmatio.io.OSArrayTag;

        $r24 = (com.jmatio.types.MLNumericArray) r3;

        $r25 = virtualinvoke $r24.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        specialinvoke $r102.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(2, $r25);

        virtualinvoke $r102.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        $z3 = virtualinvoke r3.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z3 == 0 goto label26;

        $r103 = new com.jmatio.io.OSArrayTag;

        $r27 = (com.jmatio.types.MLNumericArray) r3;

        $r28 = virtualinvoke $r27.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        specialinvoke $r103.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(2, $r28);

        virtualinvoke $r103.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        goto label26;

     label06:
        $r104 = new com.jmatio.io.OSArrayTag;

        $r30 = (com.jmatio.types.MLNumericArray) r3;

        $r31 = virtualinvoke $r30.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        specialinvoke $r104.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(1, $r31);

        virtualinvoke $r104.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        $z4 = virtualinvoke r3.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z4 == 0 goto label26;

        $r105 = new com.jmatio.io.OSArrayTag;

        $r33 = (com.jmatio.types.MLNumericArray) r3;

        $r34 = virtualinvoke $r33.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        specialinvoke $r105.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(1, $r34);

        virtualinvoke $r105.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        goto label26;

     label07:
        $r106 = new com.jmatio.io.OSArrayTag;

        $r18 = (com.jmatio.types.MLNumericArray) r3;

        $r19 = virtualinvoke $r18.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        specialinvoke $r106.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(3, $r19);

        virtualinvoke $r106.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        $z2 = virtualinvoke r3.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z2 == 0 goto label26;

        $r107 = new com.jmatio.io.OSArrayTag;

        $r21 = (com.jmatio.types.MLNumericArray) r3;

        $r22 = virtualinvoke $r21.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        specialinvoke $r107.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(3, $r22);

        virtualinvoke $r107.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        goto label26;

     label08:
        $r108 = new com.jmatio.io.OSArrayTag;

        $r12 = (com.jmatio.types.MLNumericArray) r3;

        $r13 = virtualinvoke $r12.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        specialinvoke $r108.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(12, $r13);

        virtualinvoke $r108.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        $z1 = virtualinvoke r3.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z1 == 0 goto label26;

        $r109 = new com.jmatio.io.OSArrayTag;

        $r15 = (com.jmatio.types.MLNumericArray) r3;

        $r16 = virtualinvoke $r15.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        specialinvoke $r109.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(12, $r16);

        virtualinvoke $r109.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        goto label26;

     label09:
        $r110 = new com.jmatio.io.OSArrayTag;

        $r5 = (com.jmatio.types.MLNumericArray) r3;

        $r6 = virtualinvoke $r5.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        specialinvoke $r110.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(13, $r6);

        virtualinvoke $r110.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        $z0 = virtualinvoke r3.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z0 == 0 goto label26;

        $r111 = new com.jmatio.io.OSArrayTag;

        $r9 = (com.jmatio.types.MLNumericArray) r3;

        $r10 = virtualinvoke $r9.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        specialinvoke $r111.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(13, $r10);

        virtualinvoke $r111.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        goto label26;

     label10:
        virtualinvoke $r96.<java.io.DataOutputStream: void writeInt(int)>(262149);

        $r74 = (com.jmatio.types.MLStructure) r3;

        $i6 = virtualinvoke $r74.<com.jmatio.types.MLStructure: int getMaxFieldLenth()>();

        virtualinvoke $r96.<java.io.DataOutputStream: void writeInt(int)>($i6);

        $r112 = new com.jmatio.io.OSArrayTag;

        $r76 = (com.jmatio.types.MLStructure) r3;

        $r77 = virtualinvoke $r76.<com.jmatio.types.MLStructure: byte[] getKeySetToByteArray()>();

        specialinvoke $r112.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(1, $r77);

        virtualinvoke $r112.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        $r78 = (com.jmatio.types.MLStructure) r3;

        $r79 = virtualinvoke $r78.<com.jmatio.types.MLStructure: java.util.Collection getAllFields()>();

        $r80 = interfaceinvoke $r79.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        $z7 = interfaceinvoke $r80.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label12;

        $r81 = interfaceinvoke $r80.<java.util.Iterator: java.lang.Object next()>();

        r92 = (com.jmatio.types.MLArray) $r81;

        specialinvoke r2.<com.jmatio.io.MatFileIncrementalWriter: void writeMatrix(java.io.DataOutputStream,com.jmatio.types.MLArray)>($r96, r92);

        goto label11;

     label12:
        goto label26;

     label13:
        $r82 = (com.jmatio.types.MLCell) r3;

        $r83 = virtualinvoke $r82.<com.jmatio.types.MLCell: java.util.ArrayList cells()>();

        $r84 = virtualinvoke $r83.<java.util.ArrayList: java.util.Iterator iterator()>();

     label14:
        $z8 = interfaceinvoke $r84.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label15;

        $r85 = interfaceinvoke $r84.<java.util.Iterator: java.lang.Object next()>();

        r93 = (com.jmatio.types.MLArray) $r85;

        specialinvoke r2.<com.jmatio.io.MatFileIncrementalWriter: void writeMatrix(java.io.DataOutputStream,com.jmatio.types.MLArray)>($r96, r93);

        goto label14;

     label15:
        goto label26;

     label16:
        $r113 = new java.io.ByteArrayOutputStream;

        specialinvoke $r113.<java.io.ByteArrayOutputStream: void <init>()>();

        $r114 = new java.io.DataOutputStream;

        specialinvoke $r114.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r113);

        $r43 = (com.jmatio.types.MLSparse) r3;

        $r44 = virtualinvoke $r43.<com.jmatio.types.MLSparse: int[] getIR()>();

        i9 = lengthof $r44;

        i10 = 0;

     label17:
        if i10 >= i9 goto label18;

        i11 = $r44[i10];

        virtualinvoke $r114.<java.io.DataOutputStream: void writeInt(int)>(i11);

        i10 = i10 + 1;

        goto label17;

     label18:
        $r115 = new com.jmatio.io.OSArrayTag;

        $r46 = virtualinvoke $r113.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r115.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(5, $r46);

        virtualinvoke $r115.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        $r116 = new java.io.ByteArrayOutputStream;

        specialinvoke $r116.<java.io.ByteArrayOutputStream: void <init>()>();

        $r117 = new java.io.DataOutputStream;

        specialinvoke $r117.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r116);

        $r49 = (com.jmatio.types.MLSparse) r3;

        $r50 = virtualinvoke $r49.<com.jmatio.types.MLSparse: int[] getJC()>();

        i12 = lengthof $r50;

        i13 = 0;

     label19:
        if i13 >= i12 goto label20;

        i14 = $r50[i13];

        virtualinvoke $r117.<java.io.DataOutputStream: void writeInt(int)>(i14);

        i13 = i13 + 1;

        goto label19;

     label20:
        $r118 = new com.jmatio.io.OSArrayTag;

        $r52 = virtualinvoke $r116.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r118.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(5, $r52);

        virtualinvoke $r118.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        $r119 = new java.io.ByteArrayOutputStream;

        specialinvoke $r119.<java.io.ByteArrayOutputStream: void <init>()>();

        $r120 = new java.io.DataOutputStream;

        specialinvoke $r120.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r119);

        $r55 = (com.jmatio.types.MLSparse) r3;

        $r56 = virtualinvoke $r55.<com.jmatio.types.MLSparse: java.lang.Double[] exportReal()>();

        i15 = 0;

     label21:
        $i1 = lengthof $r56;

        if i15 >= $i1 goto label22;

        $r66 = $r56[i15];

        $d1 = virtualinvoke $r66.<java.lang.Double: double doubleValue()>();

        virtualinvoke $r120.<java.io.DataOutputStream: void writeDouble(double)>($d1);

        i15 = i15 + 1;

        goto label21;

     label22:
        $r121 = new com.jmatio.io.OSArrayTag;

        $r58 = virtualinvoke $r119.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r121.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(9, $r58);

        virtualinvoke $r121.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        $z6 = virtualinvoke r3.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z6 == 0 goto label26;

        $r122 = new java.io.ByteArrayOutputStream;

        specialinvoke $r122.<java.io.ByteArrayOutputStream: void <init>()>();

        $r123 = new java.io.DataOutputStream;

        specialinvoke $r123.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r122);

        $r61 = (com.jmatio.types.MLSparse) r3;

        $r62 = virtualinvoke $r61.<com.jmatio.types.MLSparse: java.lang.Double[] exportImaginary()>();

        i16 = 0;

     label23:
        $i2 = lengthof $r62;

        if i16 >= $i2 goto label24;

        $r65 = $r62[i16];

        $d0 = virtualinvoke $r65.<java.lang.Double: double doubleValue()>();

        virtualinvoke $r123.<java.io.DataOutputStream: void writeDouble(double)>($d0);

        i16 = i16 + 1;

        goto label23;

     label24:
        $r124 = new com.jmatio.io.OSArrayTag;

        $r64 = virtualinvoke $r122.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r124.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(9, $r64);

        virtualinvoke $r124.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r96);

        goto label26;

     label25:
        $r126 = new com.jmatio.io.MatlabIOException;

        $r125 = new java.lang.StringBuilder;

        specialinvoke $r125.<java.lang.StringBuilder: void <init>()>();

        $r88 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot write matrix of type: ");

        $i7 = virtualinvoke r3.<com.jmatio.types.MLArray: int getType()>();

        $r89 = staticinvoke <com.jmatio.types.MLArray: java.lang.String typeToString(int)>($i7);

        $r90 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r89);

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r126.<com.jmatio.io.MatlabIOException: void <init>(java.lang.String)>($r91);

        throw $r126;

     label26:
        virtualinvoke r7.<java.io.DataOutputStream: void writeInt(int)>(14);

        $i17 = virtualinvoke $r95.<java.io.ByteArrayOutputStream: int size()>();

        virtualinvoke r7.<java.io.DataOutputStream: void writeInt(int)>($i17);

        $r94 = virtualinvoke $r95.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke r7.<java.io.DataOutputStream: void write(byte[])>($r94);

        return;
    }

    private void writeFlags(java.io.DataOutputStream, com.jmatio.types.MLArray) throws java.io.IOException
    {
        com.jmatio.io.OSArrayTag $r3;
        byte[] $r4;
        com.jmatio.types.MLSparse $r6;
        java.io.ByteArrayOutputStream $r0;
        com.jmatio.io.MatFileIncrementalWriter r7;
        com.jmatio.types.MLArray r2;
        java.io.DataOutputStream $r1, r5;
        int $i0, $i1;
        boolean $z0;

        r7 := @this: com.jmatio.io.MatFileIncrementalWriter;

        r5 := @parameter0: java.io.DataOutputStream;

        r2 := @parameter1: com.jmatio.types.MLArray;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r0);

        $i0 = virtualinvoke r2.<com.jmatio.types.MLArray: int getFlags()>();

        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $z0 = virtualinvoke r2.<com.jmatio.types.MLArray: boolean isSparse()>();

        if $z0 == 0 goto label1;

        $r6 = (com.jmatio.types.MLSparse) r2;

        $i1 = virtualinvoke $r6.<com.jmatio.types.MLSparse: int getMaxNZ()>();

        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>($i1);

        goto label2;

     label1:
        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>(0);

     label2:
        $r3 = new com.jmatio.io.OSArrayTag;

        $r4 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r3.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(6, $r4);

        virtualinvoke $r3.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>(r5);

        return;
    }

    private void writeDimensions(java.io.DataOutputStream, com.jmatio.types.MLArray) throws java.io.IOException
    {
        com.jmatio.io.OSArrayTag $r4;
        byte[] $r5;
        java.io.ByteArrayOutputStream $r0;
        com.jmatio.io.MatFileIncrementalWriter r7;
        com.jmatio.types.MLArray r2;
        java.io.DataOutputStream $r1, r6;
        int[] $r3;
        int $i0, $i1, i2;

        r7 := @this: com.jmatio.io.MatFileIncrementalWriter;

        r6 := @parameter0: java.io.DataOutputStream;

        r2 := @parameter1: com.jmatio.types.MLArray;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r0);

        $r3 = virtualinvoke r2.<com.jmatio.types.MLArray: int[] getDimensions()>();

        i2 = 0;

     label1:
        $i0 = lengthof $r3;

        if i2 >= $i0 goto label2;

        $i1 = $r3[i2];

        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>($i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = new com.jmatio.io.OSArrayTag;

        $r5 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r4.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(5, $r5);

        virtualinvoke $r4.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>(r6);

        return;
    }

    private void writeName(java.io.DataOutputStream, com.jmatio.types.MLArray) throws java.io.IOException
    {
        com.jmatio.io.OSArrayTag $r6;
        byte[] $r3, $r7;
        java.io.ByteArrayOutputStream $r0, $r4;
        com.jmatio.io.MatFileIncrementalWriter r9;
        com.jmatio.types.MLArray r2;
        java.io.DataOutputStream $r1, $r5, r8;

        r9 := @this: com.jmatio.io.MatFileIncrementalWriter;

        r8 := @parameter0: java.io.DataOutputStream;

        r2 := @parameter1: com.jmatio.types.MLArray;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r0);

        $r3 = virtualinvoke r2.<com.jmatio.types.MLArray: byte[] getNameToByteArray()>();

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new java.io.DataOutputStream;

        specialinvoke $r5.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r4);

        virtualinvoke $r5.<java.io.DataOutputStream: void write(byte[])>($r3);

        $r6 = new com.jmatio.io.OSArrayTag;

        $r7 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r6.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(1, $r7);

        virtualinvoke $r6.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>(r8);

        return;
    }
}
