public class org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit extends org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable implements org.apache.batik.ext.awt.image.renderable.CompositeRable, org.apache.batik.ext.awt.image.renderable.PaintRable
{
    protected org.apache.batik.ext.awt.image.CompositeRule rule;

    public void <init>(java.util.List, org.apache.batik.ext.awt.image.CompositeRule, boolean)
    {
        org.apache.batik.ext.awt.image.CompositeRule r2;
        org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit r0;
        java.util.List r1;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.batik.ext.awt.image.CompositeRule;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: void <init>(java.util.List)>(r1);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: void setColorSpaceLinear(boolean)>(z0);

        r0.<org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit: org.apache.batik.ext.awt.image.CompositeRule rule> = r2;

        return;
    }

    public void setSources(java.util.List)
    {
        org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit r0;
        java.util.List r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(java.util.List,java.util.Map)>(r1, null);

        return;
    }

    public void setCompositeRule(org.apache.batik.ext.awt.image.CompositeRule)
    {
        org.apache.batik.ext.awt.image.CompositeRule r1;
        org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.CompositeRule;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit: org.apache.batik.ext.awt.image.CompositeRule rule> = r1;

        return;
    }

    public org.apache.batik.ext.awt.image.CompositeRule getCompositeRule()
    {
        org.apache.batik.ext.awt.image.CompositeRule $r1;
        org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit: org.apache.batik.ext.awt.image.CompositeRule rule>;

        return $r1;
    }

    public boolean paintRable(java.awt.Graphics2D)
    {
        java.util.Iterator $r9;
        java.awt.Composite $r1;
        java.awt.color.ColorSpace $r6, $r7;
        org.apache.batik.ext.awt.image.renderable.Filter $r11;
        org.apache.batik.ext.awt.image.SVGComposite $r2;
        org.apache.batik.ext.awt.image.CompositeRule $r4, $r5;
        org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit r3;
        java.util.Vector $r8;
        java.awt.Graphics2D r0;
        java.lang.Object $r10;
        boolean $z0, $z1;

        r3 := @this: org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit;

        r0 := @parameter0: java.awt.Graphics2D;

        $r1 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        $r2 = <org.apache.batik.ext.awt.image.SVGComposite: org.apache.batik.ext.awt.image.SVGComposite OVER>;

        $z0 = virtualinvoke $r2.<org.apache.batik.ext.awt.image.SVGComposite: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit: org.apache.batik.ext.awt.image.CompositeRule getCompositeRule()>();

        $r5 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule OVER>;

        if $r4 == $r5 goto label2;

        return 0;

     label2:
        $r6 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: java.awt.color.ColorSpace getOperationColorSpace()>();

        $r7 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.color.ColorSpace getDestinationColorSpace(java.awt.Graphics2D)>(r0);

        if $r7 == null goto label3;

        if $r7 == $r6 goto label4;

     label3:
        return 0;

     label4:
        $r8 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector getSources()>();

        $r9 = virtualinvoke $r8.<java.util.AbstractList: java.util.Iterator iterator()>();

        goto label6;

     label5:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (org.apache.batik.ext.awt.image.renderable.Filter) $r10;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void drawImage(java.awt.Graphics2D,java.awt.image.renderable.RenderableImage)>(r0, $r11);

     label6:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label5;

        return 1;
    }

    public java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)
    {
        java.awt.Rectangle $r8;
        java.awt.geom.Rectangle2D $r5, $r6, r23;
        java.awt.RenderingHints $r2, $r20, r22;
        java.util.ArrayList $r10;
        org.apache.batik.ext.awt.image.CompositeRule $r15, $r19;
        org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit r0;
        java.util.Vector $r1, $r11;
        int $i0, $i1, $i2;
        org.apache.batik.ext.awt.image.rendered.CompositeRed $r18;
        boolean $z0, $z1;
        java.awt.Shape $r4, $r7;
        java.util.Iterator $r12;
        org.apache.batik.ext.awt.image.rendered.FloodRed $r16;
        java.awt.image.RenderedImage $r14;
        java.awt.geom.AffineTransform $r3;
        org.apache.batik.ext.awt.image.renderable.Filter r24;
        java.awt.image.renderable.RenderContext $r9, r21;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r17;
        java.lang.Object $r13;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit;

        r21 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector srcs>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 != 0 goto label01;

        return null;

     label01:
        $r2 = virtualinvoke r21.<java.awt.image.renderable.RenderContext: java.awt.RenderingHints getRenderingHints()>();

        r22 = $r2;

        if $r2 != null goto label02;

        $r20 = new java.awt.RenderingHints;

        specialinvoke $r20.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r22 = $r20;

     label02:
        $r3 = virtualinvoke r21.<java.awt.image.renderable.RenderContext: java.awt.geom.AffineTransform getTransform()>();

        $r4 = virtualinvoke r21.<java.awt.image.renderable.RenderContext: java.awt.Shape getAreaOfInterest()>();

        if $r4 != null goto label03;

        r23 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.geom.Rectangle2D getBounds2D()>();

        goto label05;

     label03:
        $r5 = interfaceinvoke $r4.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        r23 = $r5;

        $r6 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.geom.Rectangle2D getBounds2D()>();

        $z0 = virtualinvoke $r6.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r5);

        if $z0 != 0 goto label04;

        return null;

     label04:
        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>($r5, $r6, $r5);

     label05:
        $r7 = virtualinvoke $r3.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r23);

        $r8 = interfaceinvoke $r7.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $r9 = new java.awt.image.renderable.RenderContext;

        specialinvoke $r9.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>($r3, r23, r22);

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector getSources()>();

        $r12 = virtualinvoke $r11.<java.util.AbstractList: java.util.Iterator iterator()>();

        goto label11;

     label06:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r24 = (org.apache.batik.ext.awt.image.renderable.Filter) $r13;

        $r14 = interfaceinvoke r24.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r9);

        if $r14 == null goto label07;

        $r17 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: org.apache.batik.ext.awt.image.rendered.CachableRed convertSourceCS(java.awt.image.RenderedImage)>($r14);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label11;

     label07:
        $r15 = r0.<org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit: org.apache.batik.ext.awt.image.CompositeRule rule>;

        $i1 = virtualinvoke $r15.<org.apache.batik.ext.awt.image.CompositeRule: int getRule()>();

        tableswitch($i1)
        {
            case 2: goto label08;
            case 3: goto label09;
            case 4: goto label11;
            case 5: goto label11;
            case 6: goto label10;
            default: goto label11;
        };

     label08:
        return null;

     label09:
        interfaceinvoke $r10.<java.util.List: void clear()>();

        goto label11;

     label10:
        $r16 = new org.apache.batik.ext.awt.image.rendered.FloodRed;

        specialinvoke $r16.<org.apache.batik.ext.awt.image.rendered.FloodRed: void <init>(java.awt.Rectangle)>($r8);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label11;

     label11:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label06;

        $i2 = interfaceinvoke $r10.<java.util.List: int size()>();

        if $i2 != 0 goto label12;

        return null;

     label12:
        $r18 = new org.apache.batik.ext.awt.image.rendered.CompositeRed;

        $r19 = r0.<org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit: org.apache.batik.ext.awt.image.CompositeRule rule>;

        specialinvoke $r18.<org.apache.batik.ext.awt.image.rendered.CompositeRed: void <init>(java.util.List,org.apache.batik.ext.awt.image.CompositeRule)>($r10, $r19);

        return $r18;
    }
}
