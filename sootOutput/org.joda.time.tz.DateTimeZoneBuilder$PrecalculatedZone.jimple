final class org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone extends org.joda.time.DateTimeZone
{
    private static final long serialVersionUID;
    private final long[] iTransitions;
    private final int[] iWallOffsets;
    private final int[] iStandardOffsets;
    private final java.lang.String[] iNameKeys;
    private final org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone;

    static org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput, java.lang.String) throws java.io.IOException
    {
        java.lang.String[] r1, r5;
        long $l2, $l3, $l5;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r12;
        long[] r2;
        int[] r3, r4;
        int $i0, $i1, $i4, $i6, i7, i8, i9;
        java.lang.String r7, $r8, $r9;
        boolean $z0;
        java.io.IOException $r11;
        java.lang.ArrayIndexOutOfBoundsException $r10;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone $r6;
        java.io.DataInput r0;

        r0 := @parameter0: java.io.DataInput;

        r7 := @parameter1: java.lang.String;

        $i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedShort()>();

        r1 = newarray (java.lang.String)[$i0];

        i7 = 0;

     label01:
        if i7 >= $i0 goto label02;

        $r9 = interfaceinvoke r0.<java.io.DataInput: java.lang.String readUTF()>();

        r1[i7] = $r9;

        i7 = i7 + 1;

        goto label01;

     label02:
        $i1 = interfaceinvoke r0.<java.io.DataInput: int readInt()>();

        r2 = newarray (long)[$i1];

        r3 = newarray (int)[$i1];

        r4 = newarray (int)[$i1];

        r5 = newarray (java.lang.String)[$i1];

        i8 = 0;

     label03:
        if i8 >= $i1 goto label10;

        $l2 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0);

        r2[i8] = $l2;

        $l3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0);

        $i4 = (int) $l3;

        r3[i8] = $i4;

        $l5 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0);

        $i6 = (int) $l5;

        r4[i8] = $i6;

     label04:
        if $i0 >= 256 goto label05;

        i9 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        goto label06;

     label05:
        i9 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedShort()>();

     label06:
        $r8 = r1[i9];

        r5[i8] = $r8;

     label07:
        goto label09;

     label08:
        $r10 := @caughtexception;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Invalid encoding");

        throw $r11;

     label09:
        i8 = i8 + 1;

        goto label03;

     label10:
        r12 = null;

        $z0 = interfaceinvoke r0.<java.io.DataInput: boolean readBoolean()>();

        if $z0 == 0 goto label11;

        r12 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>(r0, r7);

     label11:
        $r6 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        specialinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>(r7, r2, r3, r4, r5, r12);

        return $r6;

        catch java.lang.ArrayIndexOutOfBoundsException from label04 to label07 with label08;
    }

    static org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String, boolean, java.util.ArrayList, org.joda.time.tz.DateTimeZoneBuilder$DSTZone)
    {
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r10, $r12, $r17, $r21, $r24, $r25, $r26, $r29, $r30, $r31;
        byte $b21, $b22, $b29, $b30;
        org.joda.time.tz.DateTimeZoneBuilder$Transition r67, r68;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone $r86;
        long l9, l12, l14, l17, $l19, $l20, $l26, $l28, $l33;
        org.joda.time.PeriodType $r34;
        java.util.ArrayList r0;
        java.lang.StringBuffer $r16, $r19, $r39, $r40, $r44, $r46, $r47, $r49, $r52, $r53, $r57, $r58, $r77, $r78, $r81, $r82, $r83;
        java.lang.String r9, $r11, $r13, $r18, $r20, $r23, $r28, r32, $r35, $r36, $r41, $r50, $r54, $r55, $r59, $r60, $r61, $r63, r71, $r72;
        java.lang.String[][] $r7;
        int[] r2, r3;
        java.util.Locale $r6;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String[] r4, r69, r70;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r66, $r84, $r85;
        long[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i13, $i15, $i16, $i18, $i23, $i24, $i25, $i27, $i31, $i32, $i34, $i35, i36, i37, i38, $i39, $i40;
        java.io.PrintStream $r15, $r38, $r43;
        org.joda.time.Period $r76;
        org.joda.time.DateTime $r79, $r80;
        java.lang.IllegalArgumentException $r73, $r74;
        java.text.DateFormatSymbols $r75;
        java.lang.Object $r62;

        r9 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r0 := @parameter2: java.util.ArrayList;

        r66 := @parameter3: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $i0 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label01;

        $r73 = new java.lang.IllegalArgumentException;

        specialinvoke $r73.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r73;

     label01:
        r1 = newarray (long)[$i0];

        r2 = newarray (int)[$i0];

        r3 = newarray (int)[$i0];

        r4 = newarray (java.lang.String)[$i0];

        r67 = null;

        i36 = 0;

     label02:
        if i36 >= $i0 goto label04;

        $r62 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i36);

        r68 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r62;

        $z6 = virtualinvoke r68.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r67);

        if $z6 != 0 goto label03;

        $r74 = new java.lang.IllegalArgumentException;

        specialinvoke $r74.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r9);

        throw $r74;

     label03:
        $l33 = virtualinvoke r68.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>();

        r1[i36] = $l33;

        $i34 = virtualinvoke r68.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>();

        r2[i36] = $i34;

        $i35 = virtualinvoke r68.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>();

        r3[i36] = $i35;

        $r63 = virtualinvoke r68.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>();

        r4[i36] = $r63;

        r67 = r68;

        i36 = i36 + 1;

        goto label02;

     label04:
        r69 = newarray (java.lang.String)[5];

        $r75 = new java.text.DateFormatSymbols;

        $r6 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke $r75.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>($r6);

        $r7 = virtualinvoke $r75.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>();

        i37 = 0;

     label05:
        $i1 = lengthof $r7;

        if i37 >= $i1 goto label07;

        r70 = $r7[i37];

        if r70 == null goto label06;

        $i32 = lengthof r70;

        if $i32 != 5 goto label06;

        $r61 = r70[0];

        $z5 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>($r61);

        if $z5 == 0 goto label06;

        r69 = r70;

     label06:
        i37 = i37 + 1;

        goto label05;

     label07:
        i38 = 0;

     label08:
        $i2 = lengthof r4;

        $i3 = $i2 - 1;

        if i38 >= $i3 goto label11;

        r71 = r4[i38];

        $i7 = i38 + 1;

        r32 = r4[$i7];

        $i8 = r2[i38];

        l9 = (long) $i8;

        $i10 = i38 + 1;

        $i11 = r2[$i10];

        l12 = (long) $i11;

        $i13 = r3[i38];

        l14 = (long) $i13;

        $i15 = i38 + 1;

        $i16 = r3[$i15];

        l17 = (long) $i16;

        $r76 = new org.joda.time.Period;

        $l19 = r1[i38];

        $i18 = i38 + 1;

        $l20 = r1[$i18];

        $r34 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>();

        specialinvoke $r76.<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType)>($l19, $l20, $r34);

        $b21 = l9 cmp l12;

        if $b21 == 0 goto label10;

        $b22 = l14 cmp l17;

        if $b22 != 0 goto label10;

        $z2 = virtualinvoke r71.<java.lang.String: boolean equals(java.lang.Object)>(r32);

        if $z2 == 0 goto label10;

        $i23 = virtualinvoke $r76.<org.joda.time.Period: int getYears()>();

        if $i23 != 0 goto label10;

        $i24 = virtualinvoke $r76.<org.joda.time.Period: int getMonths()>();

        if $i24 <= 4 goto label10;

        $i25 = virtualinvoke $r76.<org.joda.time.Period: int getMonths()>();

        if $i25 >= 8 goto label10;

        $r35 = r69[2];

        $z3 = virtualinvoke r71.<java.lang.String: boolean equals(java.lang.Object)>($r35);

        if $z3 == 0 goto label10;

        $r36 = r69[4];

        $z4 = virtualinvoke r71.<java.lang.String: boolean equals(java.lang.Object)>($r36);

        if $z4 == 0 goto label10;

        $r38 = <java.lang.System: java.io.PrintStream out>;

        $r77 = new java.lang.StringBuffer;

        specialinvoke $r77.<java.lang.StringBuffer: void <init>()>();

        $r39 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Fixing duplicate name key - ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r32);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r38.<java.io.PrintStream: void println(java.lang.String)>($r41);

        $r43 = <java.lang.System: java.io.PrintStream out>;

        $r78 = new java.lang.StringBuffer;

        specialinvoke $r78.<java.lang.StringBuffer: void <init>()>();

        $r44 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("     - ");

        $r79 = new org.joda.time.DateTime;

        $l26 = r1[i38];

        specialinvoke $r79.<org.joda.time.DateTime: void <init>(long)>($l26);

        $r46 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r79);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - ");

        $r80 = new org.joda.time.DateTime;

        $i27 = i38 + 1;

        $l28 = r1[$i27];

        specialinvoke $r80.<org.joda.time.DateTime: void <init>(long)>($l28);

        $r49 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r80);

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r43.<java.io.PrintStream: void println(java.lang.String)>($r50);

        $b29 = l9 cmp l12;

        $i39 = (int) $b29;

        if $i39 <= 0 goto label09;

        $r81 = new java.lang.StringBuffer;

        specialinvoke $r81.<java.lang.StringBuffer: void <init>()>();

        $r57 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r71);

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-Summer");

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.String toString()>();

        $r60 = virtualinvoke $r59.<java.lang.String: java.lang.String intern()>();

        r4[i38] = $r60;

        goto label10;

     label09:
        $b30 = l9 cmp l12;

        $i40 = (int) $b30;

        if $i40 >= 0 goto label10;

        $i31 = i38 + 1;

        $r82 = new java.lang.StringBuffer;

        specialinvoke $r82.<java.lang.StringBuffer: void <init>()>();

        $r52 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r32);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-Summer");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.String toString()>();

        $r55 = virtualinvoke $r54.<java.lang.String: java.lang.String intern()>();

        r4[$i31] = $r55;

        i38 = i38 + 1;

     label10:
        i38 = i38 + 1;

        goto label08;

     label11:
        if r66 == null goto label13;

        $r10 = r66.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r11 = virtualinvoke $r10.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>();

        $r12 = r66.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

        $r13 = virtualinvoke $r12.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z1 == 0 goto label13;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r83 = new java.lang.StringBuffer;

        specialinvoke $r83.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Fixing duplicate recurrent name key - ");

        $r17 = r66.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r18 = virtualinvoke $r17.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r20);

        $r21 = r66.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $i4 = virtualinvoke $r21.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        if $i4 <= 0 goto label12;

        $r84 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $r28 = virtualinvoke r66.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>();

        $i6 = r66.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        $r29 = r66.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r30 = virtualinvoke $r29.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>("-Summer");

        $r31 = r66.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

        specialinvoke $r84.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>($r28, $i6, $r30, $r31);

        r66 = $r84;

        goto label13;

     label12:
        $r85 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $r23 = virtualinvoke r66.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>();

        $i5 = r66.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        $r25 = r66.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r24 = r66.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

        $r26 = virtualinvoke $r24.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>("-Summer");

        specialinvoke $r85.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>($r23, $i5, $r25, $r26);

        r66 = $r85;

     label13:
        $r86 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        if z0 == 0 goto label14;

        $r72 = r9;

        goto label15;

     label14:
        $r72 = "";

     label15:
        specialinvoke $r86.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>($r72, r1, r2, r3, r4, r66);

        return $r86;
    }

    private void <init>(java.lang.String, long[], int[], int[], java.lang.String[], org.joda.time.tz.DateTimeZoneBuilder$DSTZone)
    {
        long[] r2;
        int[] r3, r4;
        java.lang.String[] r5;
        java.lang.String r1;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r6;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: long[];

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String[];

        r6 := @parameter5: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        specialinvoke r0.<org.joda.time.DateTimeZone: void <init>(java.lang.String)>(r1);

        r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> = r2;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets> = r3;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets> = r4;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys> = r5;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> = r6;

        return;
    }

    public java.lang.String getNameKey(long)
    {
        long l0;
        java.lang.String[] $r5, $r7, $r9;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r2, $r3;
        long[] r1;
        int $i1, $i2, $i3, $i4, i5, $i7;
        java.lang.String $r4, $r6, $r8, $r10;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        l0 := @parameter0: long;

        r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0);

        if $i1 < 0 goto label1;

        $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $r10 = $r9[$i1];

        return $r10;

     label1:
        $i7 = (int) -1;

        i5 = $i1 ^ $i7;

        $i2 = lengthof r1;

        if i5 >= $i2 goto label3;

        if i5 <= 0 goto label2;

        $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $i4 = i5 - 1;

        $r8 = $r7[$i4];

        return $r8;

     label2:
        return "UTC";

     label3:
        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r2 != null goto label4;

        $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $i3 = i5 - 1;

        $r6 = $r5[$i3];

        return $r6;

     label4:
        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $r4 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>(l0);

        return $r4;
    }

    public int getOffset(long)
    {
        long l0;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r2, $r3;
        long[] r1;
        int[] $r4, $r5, $r6;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i11;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        l0 := @parameter0: long;

        r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0);

        if $i1 < 0 goto label1;

        $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $i8 = $r6[$i1];

        return $i8;

     label1:
        $i11 = (int) -1;

        i9 = $i1 ^ $i11;

        $i2 = lengthof r1;

        if i9 >= $i2 goto label3;

        if i9 <= 0 goto label2;

        $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $i6 = i9 - 1;

        $i7 = $r5[$i6];

        return $i7;

     label2:
        return 0;

     label3:
        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r2 != null goto label4;

        $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $i4 = i9 - 1;

        $i5 = $r4[$i4];

        return $i5;

     label4:
        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $i3 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>(l0);

        return $i3;
    }

    public int getStandardOffset(long)
    {
        long l0;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r2, $r3;
        long[] r1;
        int[] $r4, $r5, $r6;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i11;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        l0 := @parameter0: long;

        r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0);

        if $i1 < 0 goto label1;

        $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $i8 = $r6[$i1];

        return $i8;

     label1:
        $i11 = (int) -1;

        i9 = $i1 ^ $i11;

        $i2 = lengthof r1;

        if i9 >= $i2 goto label3;

        if i9 <= 0 goto label2;

        $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $i6 = i9 - 1;

        $i7 = $r5[$i6];

        return $i7;

     label2:
        return 0;

     label3:
        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r2 != null goto label4;

        $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $i4 = i9 - 1;

        $i5 = $r4[$i4];

        return $i5;

     label4:
        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $i3 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>(l0);

        return $i3;
    }

    public boolean isFixed()
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        return 0;
    }

    public long nextTransition(long)
    {
        long l4, $l6, $l7, l8;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r2, $r3;
        long[] r1;
        byte $b5;
        int $i0, $i1, $i2, $i3, $i9, $i11, $i12;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        l8 := @parameter0: long;

        r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $i0 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l8);

        if $i0 < 0 goto label1;

        $i9 = $i0 + 1;

        goto label2;

     label1:
        $i11 = (int) -1;

        $i9 = $i0 ^ $i11;

     label2:
        $i1 = lengthof r1;

        if $i9 >= $i1 goto label3;

        $l7 = r1[$i9];

        return $l7;

     label3:
        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r2 != null goto label4;

        return l8;

     label4:
        $i2 = lengthof r1;

        $i3 = $i2 - 1;

        l4 = r1[$i3];

        $b5 = l8 cmp l4;

        $i12 = (int) $b5;

        if $i12 >= 0 goto label5;

        l8 = l4;

     label5:
        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $l6 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>(l8);

        return $l6;
    }

    public long previousTransition(long)
    {
        long l0, $l5, $l6, $l8, $l11, $l13, l15;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r2, $r3;
        long[] r1;
        byte $b4, $b7, $b10, $b12;
        int $i1, $i2, $i3, $i9, i14, $i16, $i18, $i19, $i20, $i21;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        l0 := @parameter0: long;

        r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0);

        if $i1 < 0 goto label2;

        $b12 = l0 cmp -9223372036854775808L;

        $i16 = (int) $b12;

        if $i16 <= 0 goto label1;

        $l13 = l0 - 1L;

        return $l13;

     label1:
        return l0;

     label2:
        $i18 = (int) -1;

        i14 = $i1 ^ $i18;

        $i2 = lengthof r1;

        if i14 >= $i2 goto label4;

        if i14 <= 0 goto label3;

        $i9 = i14 - 1;

        l15 = r1[$i9];

        $b10 = l15 cmp -9223372036854775808L;

        $i19 = (int) $b10;

        if $i19 <= 0 goto label3;

        $l11 = l15 - 1L;

        return $l11;

     label3:
        return l0;

     label4:
        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r2 == null goto label5;

        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $l6 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>(l0);

        $b7 = $l6 cmp l0;

        $i20 = (int) $b7;

        if $i20 >= 0 goto label5;

        return $l6;

     label5:
        $i3 = i14 - 1;

        $l8 = r1[$i3];

        $b4 = $l8 cmp -9223372036854775808L;

        $i21 = (int) $b4;

        if $i21 <= 0 goto label6;

        $l5 = $l8 - 1L;

        return $l5;

     label6:
        return l0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.String[] $r7, $r8;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r13, $r14, $r15, $r16;
        long[] $r5, $r6;
        int[] $r9, $r10, $r11, $r12;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0, r2;
        java.lang.Object r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        if $z0 == 0 goto label6;

        r2 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r1;

        $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>();

        $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label4;

        $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $r5 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r6, $r5);

        if $z2 == 0 goto label4;

        $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $r7 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r8, $r7);

        if $z3 == 0 goto label4;

        $r10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $r9 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $z4 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r10, $r9);

        if $z4 == 0 goto label4;

        $r12 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $r11 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $z5 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r12, $r11);

        if $z5 == 0 goto label4;

        $r13 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r13 != null goto label2;

        $r16 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if null != $r16 goto label4;

        goto label3;

     label2:
        $r15 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $r14 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $z6 = virtualinvoke $r15.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>($r14);

        if $z6 == 0 goto label4;

     label3:
        $z7 = 1;

        goto label5;

     label4:
        $z7 = 0;

     label5:
        return $z7;

     label6:
        return 0;
    }

    public void writeTo(java.io.DataOutput) throws java.io.IOException
    {
        int[] $r10, $r11;
        boolean $z0, $z1, $z2;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        java.lang.String[] r3, $r12, $r19;
        long $l2, $l4, $l6;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r6, $r7, $r8;
        java.util.HashSet $r21;
        long[] $r1, $r9;
        int i0, $i1, $i3, $i5, i7, i8, i9, i10, i11, $i13;
        java.lang.String r13, $r14, $r15, $r17, $r20;
        java.lang.UnsupportedOperationException $r22;
        java.io.DataOutput r5;
        java.util.Iterator $r4;
        java.lang.Object $r16;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        r5 := @parameter0: java.io.DataOutput;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        i0 = lengthof $r1;

        $r21 = new java.util.HashSet;

        specialinvoke $r21.<java.util.HashSet: void <init>()>();

        i7 = 0;

     label01:
        if i7 >= i0 goto label02;

        $r19 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $r20 = $r19[i7];

        interfaceinvoke $r21.<java.util.Set: boolean add(java.lang.Object)>($r20);

        i7 = i7 + 1;

        goto label01;

     label02:
        $i1 = interfaceinvoke $r21.<java.util.Set: int size()>();

        $i13 = (int) 65535;

        if $i1 <= $i13 goto label03;

        $r22 = new java.lang.UnsupportedOperationException;

        specialinvoke $r22.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("String pool is too large");

        throw $r22;

     label03:
        r3 = newarray (java.lang.String)[$i1];

        $r4 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

        i8 = 0;

     label04:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r16 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (java.lang.String) $r16;

        r3[i8] = $r17;

        i8 = i8 + 1;

        goto label04;

     label05:
        interfaceinvoke r5.<java.io.DataOutput: void writeShort(int)>($i1);

        i9 = 0;

     label06:
        if i9 >= $i1 goto label07;

        $r15 = r3[i9];

        interfaceinvoke r5.<java.io.DataOutput: void writeUTF(java.lang.String)>($r15);

        i9 = i9 + 1;

        goto label06;

     label07:
        interfaceinvoke r5.<java.io.DataOutput: void writeInt(int)>(i0);

        i10 = 0;

     label08:
        if i10 >= i0 goto label13;

        $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $l2 = $r9[i10];

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r5, $l2);

        $r10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $i3 = $r10[i10];

        $l4 = (long) $i3;

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r5, $l4);

        $r11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $i5 = $r11[i10];

        $l6 = (long) $i5;

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r5, $l6);

        $r12 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        r13 = $r12[i10];

        i11 = 0;

     label09:
        if i11 >= $i1 goto label12;

        $r14 = r3[i11];

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z1 == 0 goto label11;

        if $i1 >= 256 goto label10;

        interfaceinvoke r5.<java.io.DataOutput: void writeByte(int)>(i11);

        goto label12;

     label10:
        interfaceinvoke r5.<java.io.DataOutput: void writeShort(int)>(i11);

        goto label12;

     label11:
        i11 = i11 + 1;

        goto label09;

     label12:
        i10 = i10 + 1;

        goto label08;

     label13:
        $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r6 == null goto label14;

        $z2 = 1;

        goto label15;

     label14:
        $z2 = 0;

     label15:
        interfaceinvoke r5.<java.io.DataOutput: void writeBoolean(boolean)>($z2);

        $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r7 == null goto label16;

        $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        virtualinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>(r5);

     label16:
        return;
    }

    public boolean isCachable()
    {
        long $l4, $l5, l6;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r1;
        long[] r2;
        byte $b2, $b7;
        int $i0, $i1, $i3, i8, i9, $i10, $i11;
        double $d0, $d1, d2, d3, d4;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r1 == null goto label1;

        return 1;

     label1:
        r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $i0 = lengthof r2;

        if $i0 > 1 goto label2;

        return 0;

     label2:
        d2 = 0.0;

        i8 = 0;

        i9 = 1;

     label3:
        $i1 = lengthof r2;

        if i9 >= $i1 goto label5;

        $l5 = r2[i9];

        $i3 = i9 - 1;

        $l4 = r2[$i3];

        l6 = $l5 - $l4;

        $b7 = l6 cmp 63158400000L;

        $i10 = (int) $b7;

        if $i10 >= 0 goto label4;

        $d1 = (double) l6;

        d2 = d2 + $d1;

        i8 = i8 + 1;

     label4:
        i9 = i9 + 1;

        goto label3;

     label5:
        if i8 <= 0 goto label6;

        $d0 = (double) i8;

        d3 = d2 / $d0;

        d4 = d3 / 8.64E7;

        $b2 = d4 cmpl 25.0;

        $i11 = (int) $b2;

        if $i11 < 0 goto label6;

        return 1;

     label6:
        return 0;
    }

    public static void <clinit>()
    {
        <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long serialVersionUID> = 7811976468055766265L;

        return;
    }
}
