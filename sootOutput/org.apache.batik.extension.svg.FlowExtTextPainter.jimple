public class org.apache.batik.extension.svg.FlowExtTextPainter extends org.apache.batik.gvt.renderer.StrokingTextPainter
{
    protected static org.apache.batik.gvt.TextPainter singleton;

    public void <init>()
    {
        org.apache.batik.extension.svg.FlowExtTextPainter r0;

        r0 := @this: org.apache.batik.extension.svg.FlowExtTextPainter;

        specialinvoke r0.<org.apache.batik.gvt.renderer.StrokingTextPainter: void <init>()>();

        return;
    }

    public static org.apache.batik.gvt.TextPainter getInstance()
    {
        org.apache.batik.gvt.TextPainter $r0;

        $r0 = <org.apache.batik.extension.svg.FlowExtTextPainter: org.apache.batik.gvt.TextPainter singleton>;

        return $r0;
    }

    public java.util.List getTextRuns(org.apache.batik.gvt.TextNode, java.text.AttributedCharacterIterator)
    {
        org.apache.batik.gvt.TextNode r0;
        java.text.AttributedCharacterIterator[] $r4;
        java.util.ArrayList $r10, $r12, $r16, r18;
        java.text.AttributedCharacterIterator$Attribute $r6;
        boolean $z0, $z1;
        java.util.Iterator $r9;
        org.apache.batik.extension.svg.FlowExtTextPainter r2;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r17, r19;
        org.apache.batik.gvt.text.TextSpanLayout $r13, $r15;
        java.util.List $r1, $r5, r8;
        java.text.AttributedCharacterIterator r3;
        java.lang.Object $r7, $r11, $r14;

        r2 := @this: org.apache.batik.extension.svg.FlowExtTextPainter;

        r0 := @parameter0: org.apache.batik.gvt.TextNode;

        r3 := @parameter1: java.text.AttributedCharacterIterator;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.util.List getTextRuns()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r4 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator[] getTextChunkACIs(java.text.AttributedCharacterIterator)>(r3);

        $r5 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.util.List computeTextRuns(org.apache.batik.gvt.TextNode,java.text.AttributedCharacterIterator,java.text.AttributedCharacterIterator[])>(r0, r3, $r4);

        interfaceinvoke r3.<java.text.CharacterIterator: char first()>();

        $r6 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute FLOW_REGIONS>;

        $r7 = interfaceinvoke r3.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r6);

        r8 = (java.util.List) $r7;

        if r8 == null goto label5;

        $r9 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r11;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r18 = $r12;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = virtualinvoke r17.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label4;

     label2:
        $r14 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r14;

        $z0 = virtualinvoke r19.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: boolean isFirstRunInChunk()>();

        if $z0 == 0 goto label3;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r18 = $r16;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r16);

     label3:
        $r15 = virtualinvoke r19.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        interfaceinvoke r18.<java.util.List: boolean add(java.lang.Object)>($r15);

     label4:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        staticinvoke <org.apache.batik.extension.svg.FlowExtGlyphLayout: void textWrapTextChunk(java.text.AttributedCharacterIterator[],java.util.List,java.util.List)>($r4, $r10, r8);

     label5:
        virtualinvoke r0.<org.apache.batik.gvt.TextNode: void setTextRuns(java.util.List)>($r5);

        return $r5;
    }

    static void <clinit>()
    {
        org.apache.batik.extension.svg.FlowExtTextPainter $r0;

        $r0 = new org.apache.batik.extension.svg.FlowExtTextPainter;

        specialinvoke $r0.<org.apache.batik.extension.svg.FlowExtTextPainter: void <init>()>();

        <org.apache.batik.extension.svg.FlowExtTextPainter: org.apache.batik.gvt.TextPainter singleton> = $r0;

        return;
    }
}
