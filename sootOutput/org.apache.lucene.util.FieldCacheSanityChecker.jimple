public final class org.apache.lucene.util.FieldCacheSanityChecker extends java.lang.Object
{
    private boolean estimateRam;

    public void <init>()
    {
        org.apache.lucene.util.FieldCacheSanityChecker r0;

        r0 := @this: org.apache.lucene.util.FieldCacheSanityChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setRamUsageEstimator(boolean)
    {
        org.apache.lucene.util.FieldCacheSanityChecker r0;
        boolean z0;

        r0 := @this: org.apache.lucene.util.FieldCacheSanityChecker;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.util.FieldCacheSanityChecker: boolean estimateRam> = z0;

        return;
    }

    public static org.apache.lucene.util.FieldCacheSanityChecker$Insanity[] checkSanity(org.apache.lucene.search.FieldCache)
    {
        org.apache.lucene.search.FieldCache r0;
        org.apache.lucene.util.FieldCacheSanityChecker$Insanity[] $r2;
        org.apache.lucene.search.FieldCache$CacheEntry[] $r1;

        r0 := @parameter0: org.apache.lucene.search.FieldCache;

        $r1 = interfaceinvoke r0.<org.apache.lucene.search.FieldCache: org.apache.lucene.search.FieldCache$CacheEntry[] getCacheEntries()>();

        $r2 = staticinvoke <org.apache.lucene.util.FieldCacheSanityChecker: org.apache.lucene.util.FieldCacheSanityChecker$Insanity[] checkSanity(org.apache.lucene.search.FieldCache$CacheEntry[])>($r1);

        return $r2;
    }

    public static transient org.apache.lucene.util.FieldCacheSanityChecker$Insanity[] checkSanity(org.apache.lucene.search.FieldCache$CacheEntry[])
    {
        org.apache.lucene.util.FieldCacheSanityChecker $r0;
        org.apache.lucene.util.FieldCacheSanityChecker$Insanity[] $r2;
        org.apache.lucene.search.FieldCache$CacheEntry[] r1;

        r1 := @parameter0: org.apache.lucene.search.FieldCache$CacheEntry[];

        $r0 = new org.apache.lucene.util.FieldCacheSanityChecker;

        specialinvoke $r0.<org.apache.lucene.util.FieldCacheSanityChecker: void <init>()>();

        virtualinvoke $r0.<org.apache.lucene.util.FieldCacheSanityChecker: void setRamUsageEstimator(boolean)>(1);

        $r2 = virtualinvoke $r0.<org.apache.lucene.util.FieldCacheSanityChecker: org.apache.lucene.util.FieldCacheSanityChecker$Insanity[] check(org.apache.lucene.search.FieldCache$CacheEntry[])>(r1);

        return $r2;
    }

    public transient org.apache.lucene.util.FieldCacheSanityChecker$Insanity[] check(org.apache.lucene.search.FieldCache$CacheEntry[])
    {
        java.lang.Integer $r19;
        org.apache.lucene.util.MapOfSets $r3, $r5;
        boolean $z0, $z1, $z2;
        org.apache.lucene.util.FieldCacheSanityChecker$Insanity[] $r1, $r11, $r13;
        java.util.Collection $r9, $r10;
        org.apache.lucene.search.FieldCache$CacheEntry r14, $r20;
        java.lang.Object[] $r12;
        java.util.HashMap $r4, $r6;
        org.apache.lucene.search.FieldCache$CacheEntry[] r0;
        java.util.ArrayList $r8;
        java.util.HashSet $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9;
        java.lang.String $r18;
        org.apache.lucene.util.FieldCacheSanityChecker$ReaderField $r16;
        java.lang.Object $r15, $r17;
        org.apache.lucene.util.FieldCacheSanityChecker r2;

        r2 := @this: org.apache.lucene.util.FieldCacheSanityChecker;

        r0 := @parameter0: org.apache.lucene.search.FieldCache$CacheEntry[];

        if null == r0 goto label1;

        $i0 = lengthof r0;

        if 0 != $i0 goto label2;

     label1:
        $r1 = newarray (org.apache.lucene.util.FieldCacheSanityChecker$Insanity)[0];

        return $r1;

     label2:
        $z0 = r2.<org.apache.lucene.util.FieldCacheSanityChecker: boolean estimateRam>;

        if $z0 == 0 goto label4;

        i7 = 0;

     label3:
        $i6 = lengthof r0;

        if i7 >= $i6 goto label4;

        $r20 = r0[i7];

        virtualinvoke $r20.<org.apache.lucene.search.FieldCache$CacheEntry: void estimateSize()>();

        i7 = i7 + 1;

        goto label3;

     label4:
        $r3 = new org.apache.lucene.util.MapOfSets;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(int)>(17);

        specialinvoke $r3.<org.apache.lucene.util.MapOfSets: void <init>(java.util.Map)>($r4);

        $r5 = new org.apache.lucene.util.MapOfSets;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>(int)>(17);

        specialinvoke $r5.<org.apache.lucene.util.MapOfSets: void <init>(java.util.Map)>($r6);

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        i8 = 0;

     label5:
        $i9 = lengthof r0;

        if i8 >= $i9 goto label9;

        r14 = r0[i8];

        $r15 = virtualinvoke r14.<org.apache.lucene.search.FieldCache$CacheEntry: java.lang.Object getValue()>();

        $z1 = $r15 instanceof org.apache.lucene.util.Bits;

        if $z1 == 0 goto label6;

        goto label8;

     label6:
        $z2 = $r15 instanceof org.apache.lucene.search.FieldCache$CreationPlaceholder;

        if $z2 == 0 goto label7;

        goto label8;

     label7:
        $r16 = new org.apache.lucene.util.FieldCacheSanityChecker$ReaderField;

        $r17 = virtualinvoke r14.<org.apache.lucene.search.FieldCache$CacheEntry: java.lang.Object getReaderKey()>();

        $r18 = virtualinvoke r14.<org.apache.lucene.search.FieldCache$CacheEntry: java.lang.String getFieldName()>();

        specialinvoke $r16.<org.apache.lucene.util.FieldCacheSanityChecker$ReaderField: void <init>(java.lang.Object,java.lang.String)>($r17, $r18);

        $i4 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r15);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke $r3.<org.apache.lucene.util.MapOfSets: int put(java.lang.Object,java.lang.Object)>($r19, r14);

        $i5 = virtualinvoke $r5.<org.apache.lucene.util.MapOfSets: int put(java.lang.Object,java.lang.Object)>($r16, $r19);

        if 1 >= $i5 goto label8;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r16);

     label8:
        i8 = i8 + 1;

        goto label5;

     label9:
        $r8 = new java.util.ArrayList;

        $i1 = interfaceinvoke $r7.<java.util.Set: int size()>();

        $i2 = $i1 * 3;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i2);

        $r9 = specialinvoke r2.<org.apache.lucene.util.FieldCacheSanityChecker: java.util.Collection checkValueMismatch(org.apache.lucene.util.MapOfSets,org.apache.lucene.util.MapOfSets,java.util.Set)>($r3, $r5, $r7);

        interfaceinvoke $r8.<java.util.List: boolean addAll(java.util.Collection)>($r9);

        $r10 = specialinvoke r2.<org.apache.lucene.util.FieldCacheSanityChecker: java.util.Collection checkSubreaders(org.apache.lucene.util.MapOfSets,org.apache.lucene.util.MapOfSets)>($r3, $r5);

        interfaceinvoke $r8.<java.util.List: boolean addAll(java.util.Collection)>($r10);

        $i3 = interfaceinvoke $r8.<java.util.List: int size()>();

        $r11 = newarray (org.apache.lucene.util.FieldCacheSanityChecker$Insanity)[$i3];

        $r12 = interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r13 = (org.apache.lucene.util.FieldCacheSanityChecker$Insanity[]) $r12;

        return $r13;
    }

    private java.util.Collection checkValueMismatch(org.apache.lucene.util.MapOfSets, org.apache.lucene.util.MapOfSets, java.util.Set)
    {
        java.lang.Integer r22;
        org.apache.lucene.util.FieldCacheSanityChecker$InsanityType $r16;
        org.apache.lucene.util.MapOfSets r2, r4;
        java.util.Map $r3, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set r1, $r11, $r24;
        org.apache.lucene.util.FieldCacheSanityChecker$Insanity $r14;
        org.apache.lucene.search.FieldCache$CacheEntry r27;
        java.lang.StringBuilder $r15, $r17, $r19;
        java.lang.Object[] $r13;
        java.util.ArrayList $r0, $r9;
        org.apache.lucene.search.FieldCache$CacheEntry[] r29, r30;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r18, $r20;
        java.util.Iterator $r6, $r12, $r25;
        org.apache.lucene.util.FieldCacheSanityChecker$ReaderField r8;
        java.lang.Object $r7, $r10, $r21, $r23, $r26;
        org.apache.lucene.util.FieldCacheSanityChecker r28;

        r28 := @this: org.apache.lucene.util.FieldCacheSanityChecker;

        r4 := @parameter0: org.apache.lucene.util.MapOfSets;

        r2 := @parameter1: org.apache.lucene.util.MapOfSets;

        r1 := @parameter2: java.util.Set;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        $i1 = $i0 * 3;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i1);

        $z0 = interfaceinvoke r1.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r3 = virtualinvoke r2.<org.apache.lucene.util.MapOfSets: java.util.Map getMap()>();

        $r5 = virtualinvoke r4.<org.apache.lucene.util.MapOfSets: java.util.Map getMap()>();

        $r6 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.lucene.util.FieldCacheSanityChecker$ReaderField) $r7;

        $r9 = new java.util.ArrayList;

        $i2 = interfaceinvoke r1.<java.util.Set: int size()>();

        $i3 = $i2 * 2;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i3);

        $r10 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        $r11 = (java.util.Set) $r10;

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r21 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.lang.Integer) $r21;

        $r23 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r22);

        $r24 = (java.util.Set) $r23;

        $r25 = interfaceinvoke $r24.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r26 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        r27 = (org.apache.lucene.search.FieldCache$CacheEntry) $r26;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r27);

        goto label3;

     label4:
        goto label2;

     label5:
        $i4 = interfaceinvoke $r9.<java.util.List: int size()>();

        r29 = newarray (org.apache.lucene.search.FieldCache$CacheEntry)[$i4];

        $r13 = interfaceinvoke $r9.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r29);

        r30 = (org.apache.lucene.search.FieldCache$CacheEntry[]) $r13;

        $r14 = new org.apache.lucene.util.FieldCacheSanityChecker$Insanity;

        $r16 = <org.apache.lucene.util.FieldCacheSanityChecker$InsanityType: org.apache.lucene.util.FieldCacheSanityChecker$InsanityType VALUEMISMATCH>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple distinct value objects for ");

        $r18 = virtualinvoke r8.<org.apache.lucene.util.FieldCacheSanityChecker$ReaderField: java.lang.String toString()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.apache.lucene.util.FieldCacheSanityChecker$Insanity: void <init>(org.apache.lucene.util.FieldCacheSanityChecker$InsanityType,java.lang.String,org.apache.lucene.search.FieldCache$CacheEntry[])>($r16, $r20, r30);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label1;

     label6:
        return $r0;
    }

    private java.util.Collection checkSubreaders(org.apache.lucene.util.MapOfSets, org.apache.lucene.util.MapOfSets)
    {
        java.lang.Integer r32, r51;
        org.apache.lucene.util.FieldCacheSanityChecker$InsanityType $r22;
        java.util.Map $r4, $r6;
        java.util.Set $r8, $r10, $r16, $r29, r50;
        org.apache.lucene.util.FieldCacheSanityChecker$Insanity $r20;
        java.lang.StringBuilder $r21, $r23, $r25;
        java.lang.Object[] $r19;
        java.util.ArrayList $r0, $r14;
        org.apache.lucene.search.FieldCache$CacheEntry[] r53, r54;
        java.lang.String $r24, $r26, $r45;
        org.apache.lucene.util.FieldCacheSanityChecker$ReaderField $r44, r48, r49, r52;
        org.apache.lucene.util.FieldCacheSanityChecker r39;
        org.apache.lucene.util.MapOfSets $r2, r3, r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Collection $r34, $r37, $r47;
        java.util.List $r41;
        java.util.HashMap $r1;
        java.util.HashSet $r7;
        int $i0, $i1, $i2;
        java.util.Iterator $r9, $r11, $r17, $r18, $r30, $r42;
        java.lang.Object $r12, $r13, $r15, $r27, $r28, $r31, $r33, $r35, $r36, $r38, $r40, $r43, $r46;

        r39 := @this: org.apache.lucene.util.FieldCacheSanityChecker;

        r3 := @parameter0: org.apache.lucene.util.MapOfSets;

        r5 := @parameter1: org.apache.lucene.util.MapOfSets;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(23);

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(17);

        $r2 = new org.apache.lucene.util.MapOfSets;

        specialinvoke $r2.<org.apache.lucene.util.MapOfSets: void <init>(java.util.Map)>($r1);

        $r4 = virtualinvoke r3.<org.apache.lucene.util.MapOfSets: java.util.Map getMap()>();

        $r6 = virtualinvoke r5.<org.apache.lucene.util.MapOfSets: java.util.Map getMap()>();

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>(int)>(17);

        $r8 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z8 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label07;

        $r38 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r48 = (org.apache.lucene.util.FieldCacheSanityChecker$ReaderField) $r38;

        $z4 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r48);

        if $z4 == 0 goto label02;

        goto label01;

     label02:
        $r40 = r48.<org.apache.lucene.util.FieldCacheSanityChecker$ReaderField: java.lang.Object readerKey>;

        $r41 = specialinvoke r39.<org.apache.lucene.util.FieldCacheSanityChecker: java.util.List getAllDescendantReaderKeys(java.lang.Object)>($r40);

        $r42 = interfaceinvoke $r41.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z5 = interfaceinvoke $r42.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label06;

        $r43 = interfaceinvoke $r42.<java.util.Iterator: java.lang.Object next()>();

        $r44 = new org.apache.lucene.util.FieldCacheSanityChecker$ReaderField;

        $r45 = r48.<org.apache.lucene.util.FieldCacheSanityChecker$ReaderField: java.lang.String fieldName>;

        specialinvoke $r44.<org.apache.lucene.util.FieldCacheSanityChecker$ReaderField: void <init>(java.lang.Object,java.lang.String)>($r43, $r45);

        $z6 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r44);

        if $z6 == 0 goto label04;

        virtualinvoke $r2.<org.apache.lucene.util.MapOfSets: int put(java.lang.Object,java.lang.Object)>(r48, $r44);

        $r46 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r44);

        $r47 = (java.util.Collection) $r46;

        virtualinvoke $r2.<org.apache.lucene.util.MapOfSets: int putAll(java.lang.Object,java.util.Collection)>(r48, $r47);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r44);

        goto label05;

     label04:
        $z7 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r44);

        if $z7 == 0 goto label05;

        virtualinvoke $r2.<org.apache.lucene.util.MapOfSets: int put(java.lang.Object,java.lang.Object)>(r48, $r44);

     label05:
        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r44);

        goto label03;

     label06:
        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r48);

        goto label01;

     label07:
        $r10 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r49 = (org.apache.lucene.util.FieldCacheSanityChecker$ReaderField) $r12;

        $r13 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r49);

        r50 = (java.util.Set) $r13;

        $r14 = new java.util.ArrayList;

        $i0 = interfaceinvoke r50.<java.util.Set: int size()>();

        $i1 = $i0 * 2;

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>($i1);

        $r15 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r49);

        $r16 = (java.util.Set) $r15;

        $r17 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r35 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r51 = (java.lang.Integer) $r35;

        $r36 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r51);

        $r37 = (java.util.Collection) $r36;

        interfaceinvoke $r14.<java.util.List: boolean addAll(java.util.Collection)>($r37);

        goto label09;

     label10:
        $r18 = interfaceinvoke r50.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z2 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label14;

        $r27 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r52 = (org.apache.lucene.util.FieldCacheSanityChecker$ReaderField) $r27;

        $r28 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r52);

        $r29 = (java.util.Set) $r28;

        $r30 = interfaceinvoke $r29.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z3 = interfaceinvoke $r30.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label13;

        $r31 = interfaceinvoke $r30.<java.util.Iterator: java.lang.Object next()>();

        r32 = (java.lang.Integer) $r31;

        $r33 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r32);

        $r34 = (java.util.Collection) $r33;

        interfaceinvoke $r14.<java.util.List: boolean addAll(java.util.Collection)>($r34);

        goto label12;

     label13:
        goto label11;

     label14:
        $i2 = interfaceinvoke $r14.<java.util.List: int size()>();

        r53 = newarray (org.apache.lucene.search.FieldCache$CacheEntry)[$i2];

        $r19 = interfaceinvoke $r14.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r53);

        r54 = (org.apache.lucene.search.FieldCache$CacheEntry[]) $r19;

        $r20 = new org.apache.lucene.util.FieldCacheSanityChecker$Insanity;

        $r22 = <org.apache.lucene.util.FieldCacheSanityChecker$InsanityType: org.apache.lucene.util.FieldCacheSanityChecker$InsanityType SUBREADER>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found caches for descendants of ");

        $r24 = virtualinvoke r49.<org.apache.lucene.util.FieldCacheSanityChecker$ReaderField: java.lang.String toString()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.apache.lucene.util.FieldCacheSanityChecker$Insanity: void <init>(org.apache.lucene.util.FieldCacheSanityChecker$InsanityType,java.lang.String,org.apache.lucene.search.FieldCache$CacheEntry[])>($r22, $r26, r54);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r20);

        goto label08;

     label15:
        return $r0;
    }

    private java.util.List getAllDescendantReaderKeys(java.lang.Object)
    {
        org.apache.lucene.store.AlreadyClosedException $r12;
        java.util.ArrayList $r0;
        int $i0, $i1, i2;
        boolean $z0, $z1;
        java.util.Iterator $r7;
        java.util.List $r2, $r6;
        java.lang.Object r1, $r3, $r8, $r11;
        org.apache.lucene.util.FieldCacheSanityChecker r13;
        org.apache.lucene.index.IndexReader $r4, $r10;
        org.apache.lucene.index.IndexReaderContext $r5, r9;

        r13 := @this: org.apache.lucene.util.FieldCacheSanityChecker;

        r1 := @parameter0: java.lang.Object;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(17);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        i2 = 0;

     label1:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        if i2 >= $i0 goto label7;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i2);

        $z0 = $r3 instanceof org.apache.lucene.index.IndexReader;

        if $z0 == 0 goto label6;

     label2:
        $r4 = (org.apache.lucene.index.IndexReader) $r3;

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.IndexReader: org.apache.lucene.index.IndexReaderContext getContext()>();

        $r6 = virtualinvoke $r5.<org.apache.lucene.index.IndexReaderContext: java.util.List children()>();

        if $r6 == null goto label4;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.lucene.index.IndexReaderContext) $r8;

        $r10 = virtualinvoke r9.<org.apache.lucene.index.IndexReaderContext: org.apache.lucene.index.IndexReader reader()>();

        $r11 = virtualinvoke $r10.<org.apache.lucene.index.IndexReader: java.lang.Object getCoreCacheKey()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label3;

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r2 = interfaceinvoke $r0.<java.util.List: java.util.List subList(int,int)>(1, $i1);

        return $r2;

        catch org.apache.lucene.store.AlreadyClosedException from label2 to label4 with label5;
    }
}
