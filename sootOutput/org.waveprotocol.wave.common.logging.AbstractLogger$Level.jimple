public final enum class org.waveprotocol.wave.common.logging.AbstractLogger$Level extends java.lang.Enum
{
    public static final enum org.waveprotocol.wave.common.logging.AbstractLogger$Level FATAL;
    public static final enum org.waveprotocol.wave.common.logging.AbstractLogger$Level ERROR;
    public static final enum org.waveprotocol.wave.common.logging.AbstractLogger$Level TRACE;
    private final java.lang.String string;
    private final int value;
    private static final org.waveprotocol.wave.common.logging.AbstractLogger$Level[] $VALUES;

    public static org.waveprotocol.wave.common.logging.AbstractLogger$Level[] values()
    {
        org.waveprotocol.wave.common.logging.AbstractLogger$Level[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.waveprotocol.wave.common.logging.AbstractLogger$Level[]) $r1;

        return $r2;
    }

    public static org.waveprotocol.wave.common.logging.AbstractLogger$Level valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/waveprotocol/wave/common/logging/AbstractLogger$Level;", r0);

        $r2 = (org.waveprotocol.wave.common.logging.AbstractLogger$Level) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, java.lang.String, int)
    {
        org.waveprotocol.wave.common.logging.AbstractLogger$Level r0;
        int i0, i1;
        java.lang.String r1, r2;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.waveprotocol.wave.common.logging.AbstractLogger$Level: java.lang.String string> = r2;

        r0.<org.waveprotocol.wave.common.logging.AbstractLogger$Level: int value> = i1;

        return;
    }

    public int value()
    {
        int $i0;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level r0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        $i0 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$Level: int value>;

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level r0;

        r0 := @this: org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        $r1 = r0.<org.waveprotocol.wave.common.logging.AbstractLogger$Level: java.lang.String string>;

        return $r1;
    }

    public static org.waveprotocol.wave.common.logging.AbstractLogger$Level getLevelByValue(int)
    {
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r0, $r1, $r2, $r3, $r4;
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        $r0 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level TRACE>;

        $i1 = virtualinvoke $r0.<org.waveprotocol.wave.common.logging.AbstractLogger$Level: int value()>();

        if i0 != $i1 goto label1;

        $r4 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level TRACE>;

        return $r4;

     label1:
        $r1 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level ERROR>;

        $i2 = virtualinvoke $r1.<org.waveprotocol.wave.common.logging.AbstractLogger$Level: int value()>();

        if i0 != $i2 goto label2;

        $r3 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level ERROR>;

        return $r3;

     label2:
        $r2 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level FATAL>;

        return $r2;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.common.logging.AbstractLogger$Level[] $r3;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r0, $r1, $r2, $r4, $r5, $r6;

        $r0 = new org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        specialinvoke $r0.<org.waveprotocol.wave.common.logging.AbstractLogger$Level: void <init>(java.lang.String,int,java.lang.String,int)>("FATAL", 0, "fatal", 0);

        <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level FATAL> = $r0;

        $r1 = new org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        specialinvoke $r1.<org.waveprotocol.wave.common.logging.AbstractLogger$Level: void <init>(java.lang.String,int,java.lang.String,int)>("ERROR", 1, "error", 1);

        <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level ERROR> = $r1;

        $r2 = new org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        specialinvoke $r2.<org.waveprotocol.wave.common.logging.AbstractLogger$Level: void <init>(java.lang.String,int,java.lang.String,int)>("TRACE", 2, "trace", 2);

        <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level TRACE> = $r2;

        $r3 = newarray (org.waveprotocol.wave.common.logging.AbstractLogger$Level)[3];

        $r4 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level FATAL>;

        $r3[0] = $r4;

        $r5 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level ERROR>;

        $r3[1] = $r5;

        $r6 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level TRACE>;

        $r3[2] = $r6;

        <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level[] $VALUES> = $r3;

        return;
    }
}
