public abstract class org.apache.poi.hdgf.chunks.ChunkHeader extends java.lang.Object
{
    protected int type;
    protected int id;
    protected int length;
    protected int unknown1;

    public void <init>()
    {
        org.apache.poi.hdgf.chunks.ChunkHeader r0;

        r0 := @this: org.apache.poi.hdgf.chunks.ChunkHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.poi.hdgf.chunks.ChunkHeader createChunkHeader(int, byte[], int)
    {
        byte[] r1;
        java.lang.StringBuilder $r4, $r5, $r13;
        long $l15, $l18, $l21, $l24, $l27;
        short $s3, $s5, $s8, $s11, $s13, $s30, $s33;
        org.apache.poi.hdgf.chunks.ChunkHeaderV4V5 $r12;
        int i0, i1, $i2, $i4, $i6, $i7, $i9, $i10, $i12, $i14, $i16, $i17, $i19, $i20, $i22, $i23, $i25, $i26, $i28, $i29, $i31, $i32, $i34, $i35, $i36;
        java.lang.String $r6;
        org.apache.poi.hdgf.chunks.ChunkHeaderV11 $r10;
        java.lang.IllegalArgumentException $r14;
        org.apache.poi.hdgf.chunks.ChunkHeaderV6 r9, $r11;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        if i0 < 6 goto label3;

        if i0 <= 6 goto label1;

        $r10 = new org.apache.poi.hdgf.chunks.ChunkHeaderV11;

        specialinvoke $r10.<org.apache.poi.hdgf.chunks.ChunkHeaderV11: void <init>()>();

        r9 = $r10;

        goto label2;

     label1:
        $r11 = new org.apache.poi.hdgf.chunks.ChunkHeaderV6;

        specialinvoke $r11.<org.apache.poi.hdgf.chunks.ChunkHeaderV6: void <init>()>();

        r9 = $r11;

     label2:
        $i17 = i1 + 0;

        $l18 = staticinvoke <org.apache.poi.util.LittleEndian: long getUInt(byte[],int)>(r1, $i17);

        $i19 = (int) $l18;

        r9.<org.apache.poi.hdgf.chunks.ChunkHeaderV6: int type> = $i19;

        $i20 = i1 + 4;

        $l21 = staticinvoke <org.apache.poi.util.LittleEndian: long getUInt(byte[],int)>(r1, $i20);

        $i22 = (int) $l21;

        r9.<org.apache.poi.hdgf.chunks.ChunkHeaderV6: int id> = $i22;

        $i23 = i1 + 8;

        $l24 = staticinvoke <org.apache.poi.util.LittleEndian: long getUInt(byte[],int)>(r1, $i23);

        $i25 = (int) $l24;

        r9.<org.apache.poi.hdgf.chunks.ChunkHeaderV6: int unknown1> = $i25;

        $i26 = i1 + 12;

        $l27 = staticinvoke <org.apache.poi.util.LittleEndian: long getUInt(byte[],int)>(r1, $i26);

        $i28 = (int) $l27;

        r9.<org.apache.poi.hdgf.chunks.ChunkHeaderV6: int length> = $i28;

        $i29 = i1 + 16;

        $s30 = staticinvoke <org.apache.poi.util.LittleEndian: short getShort(byte[],int)>(r1, $i29);

        r9.<org.apache.poi.hdgf.chunks.ChunkHeaderV6: short unknown2> = $s30;

        $i31 = i1 + 18;

        $i32 = staticinvoke <org.apache.poi.util.LittleEndian: int getUnsignedByte(byte[],int)>(r1, $i31);

        $s33 = (short) $i32;

        r9.<org.apache.poi.hdgf.chunks.ChunkHeaderV6: short unknown3> = $s33;

        return r9;

     label3:
        if i0 == 5 goto label4;

        if i0 != 4 goto label5;

     label4:
        $r12 = new org.apache.poi.hdgf.chunks.ChunkHeaderV4V5;

        specialinvoke $r12.<org.apache.poi.hdgf.chunks.ChunkHeaderV4V5: void <init>()>();

        $i2 = i1 + 0;

        $s3 = staticinvoke <org.apache.poi.util.LittleEndian: short getShort(byte[],int)>(r1, $i2);

        $i34 = (int) $s3;

        $r12.<org.apache.poi.hdgf.chunks.ChunkHeaderV4V5: int type> = $i34;

        $i4 = i1 + 2;

        $s5 = staticinvoke <org.apache.poi.util.LittleEndian: short getShort(byte[],int)>(r1, $i4);

        $i35 = (int) $s5;

        $r12.<org.apache.poi.hdgf.chunks.ChunkHeaderV4V5: int id> = $i35;

        $i6 = i1 + 4;

        $i7 = staticinvoke <org.apache.poi.util.LittleEndian: int getUnsignedByte(byte[],int)>(r1, $i6);

        $s8 = (short) $i7;

        $r12.<org.apache.poi.hdgf.chunks.ChunkHeaderV4V5: short unknown2> = $s8;

        $i9 = i1 + 5;

        $i10 = staticinvoke <org.apache.poi.util.LittleEndian: int getUnsignedByte(byte[],int)>(r1, $i9);

        $s11 = (short) $i10;

        $r12.<org.apache.poi.hdgf.chunks.ChunkHeaderV4V5: short unknown3> = $s11;

        $i12 = i1 + 6;

        $s13 = staticinvoke <org.apache.poi.util.LittleEndian: short getShort(byte[],int)>(r1, $i12);

        $i36 = (int) $s13;

        $r12.<org.apache.poi.hdgf.chunks.ChunkHeaderV4V5: int unknown1> = $i36;

        $i14 = i1 + 8;

        $l15 = staticinvoke <org.apache.poi.util.LittleEndian: long getUInt(byte[],int)>(r1, $i14);

        $i16 = (int) $l15;

        $r12.<org.apache.poi.hdgf.chunks.ChunkHeaderV4V5: int length> = $i16;

        return $r12;

     label5:
        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Visio files with versions below 4 are not supported, yours was ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r14;
    }

    public static int getHeaderSize(int)
    {
        int i0, $i1, $i2, $i3;

        i0 := @parameter0: int;

        if i0 <= 6 goto label1;

        $i3 = staticinvoke <org.apache.poi.hdgf.chunks.ChunkHeaderV11: int getHeaderSize()>();

        return $i3;

     label1:
        if i0 != 6 goto label2;

        $i2 = staticinvoke <org.apache.poi.hdgf.chunks.ChunkHeaderV6: int getHeaderSize()>();

        return $i2;

     label2:
        $i1 = staticinvoke <org.apache.poi.hdgf.chunks.ChunkHeaderV4V5: int getHeaderSize()>();

        return $i1;
    }

    public abstract int getSizeInBytes();

    public abstract boolean hasTrailer();

    public abstract boolean hasSeparator();

    public abstract java.nio.charset.Charset getChunkCharset();

    public int getId()
    {
        org.apache.poi.hdgf.chunks.ChunkHeader r0;
        int $i0;

        r0 := @this: org.apache.poi.hdgf.chunks.ChunkHeader;

        $i0 = r0.<org.apache.poi.hdgf.chunks.ChunkHeader: int id>;

        return $i0;
    }

    public int getLength()
    {
        org.apache.poi.hdgf.chunks.ChunkHeader r0;
        int $i0;

        r0 := @this: org.apache.poi.hdgf.chunks.ChunkHeader;

        $i0 = r0.<org.apache.poi.hdgf.chunks.ChunkHeader: int length>;

        return $i0;
    }

    public int getType()
    {
        org.apache.poi.hdgf.chunks.ChunkHeader r0;
        int $i0;

        r0 := @this: org.apache.poi.hdgf.chunks.ChunkHeader;

        $i0 = r0.<org.apache.poi.hdgf.chunks.ChunkHeader: int type>;

        return $i0;
    }

    public int getUnknown1()
    {
        org.apache.poi.hdgf.chunks.ChunkHeader r0;
        int $i0;

        r0 := @this: org.apache.poi.hdgf.chunks.ChunkHeader;

        $i0 = r0.<org.apache.poi.hdgf.chunks.ChunkHeader: int unknown1>;

        return $i0;
    }
}
