public class com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor extends com.google.gxp.compiler.base.DefaultingExpressionVisitor
{
    final com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker this$0;

    protected void <init>(com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r1;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker this$0> = r1;

        specialinvoke r0.<com.google.gxp.compiler.base.DefaultingExpressionVisitor: void <init>()>();

        return;
    }

    public java.lang.String defaultVisitExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.base.Expression r1;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor r2;

        r2 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.String visitBooleanConstant(com.google.gxp.compiler.base.BooleanConstant)
    {
        com.google.gxp.compiler.base.BooleanConstant r1;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.BooleanConstant;

        return "";
    }

    public java.lang.String visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)
    {
        com.google.gxp.compiler.base.Expression $r1;
        java.lang.Object $r3;
        java.lang.String $r4;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor r2;
        com.google.gxp.compiler.base.EscapeExpression r0;

        r2 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.EscapeExpression;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.EscapeExpression: com.google.gxp.compiler.base.Expression getSubexpression()>();

        $r3 = virtualinvoke $r1.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r2);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.lang.String visitIsXmlExpression(com.google.gxp.compiler.base.IsXmlExpression)
    {
        com.google.gxp.compiler.base.IsXmlExpression r1;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.IsXmlExpression;

        return "gxp_context.IsUsingXmlSyntax()";
    }

    public java.lang.String visitNativeExpression(com.google.gxp.compiler.base.NativeExpression)
    {
        com.google.gxp.compiler.base.NativeExpression r6;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker $r3;
        com.google.gxp.compiler.base.OutputLanguage $r4;
        com.google.gxp.compiler.alerts.AlertSink $r5;
        java.lang.StringBuilder $r0, $r1, $r8, $r9;
        java.lang.String $r7, $r10;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor r2;

        r2 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r6 := @parameter0: com.google.gxp.compiler.base.NativeExpression;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r4 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage CPP>;

        $r3 = r2.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker this$0>;

        $r5 = staticinvoke <com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$400(com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker)>($r3);

        $r7 = virtualinvoke $r4.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String validateExpression(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.NativeExpression)>($r5, r6);

        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public volatile java.lang.Object visitNativeExpression(com.google.gxp.compiler.base.NativeExpression)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor r0;
        com.google.gxp.compiler.base.NativeExpression r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.NativeExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitNativeExpression(com.google.gxp.compiler.base.NativeExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitIsXmlExpression(com.google.gxp.compiler.base.IsXmlExpression)
    {
        com.google.gxp.compiler.base.IsXmlExpression r1;
        java.lang.String $r2;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.IsXmlExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitIsXmlExpression(com.google.gxp.compiler.base.IsXmlExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor r0;
        com.google.gxp.compiler.base.EscapeExpression r1;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.EscapeExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitBooleanConstant(com.google.gxp.compiler.base.BooleanConstant)
    {
        com.google.gxp.compiler.base.BooleanConstant r1;
        java.lang.String $r2;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.BooleanConstant;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitBooleanConstant(com.google.gxp.compiler.base.BooleanConstant)>(r1);

        return $r2;
    }

    public volatile java.lang.Object defaultVisitExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.Expression r1;
        java.lang.String $r2;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String defaultVisitExpression(com.google.gxp.compiler.base.Expression)>(r1);

        return $r2;
    }
}
