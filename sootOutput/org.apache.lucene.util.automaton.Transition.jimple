public class org.apache.lucene.util.automaton.Transition extends java.lang.Object implements java.lang.Cloneable
{
    final int min;
    final int max;
    final org.apache.lucene.util.automaton.State 'to';
    public static final java.util.Comparator CompareByDestThenMinMax;
    public static final java.util.Comparator CompareByMinMaxThenDest;
    static final boolean $assertionsDisabled;

    public void <init>(int, org.apache.lucene.util.automaton.State)
    {
        org.apache.lucene.util.automaton.Transition r0;
        int i0;
        org.apache.lucene.util.automaton.State r1;
        java.lang.AssertionError $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.Transition;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.lucene.util.automaton.State;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.apache.lucene.util.automaton.Transition: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        r0.<org.apache.lucene.util.automaton.Transition: int max> = i0;

        r0.<org.apache.lucene.util.automaton.Transition: int min> = i0;

        r0.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'> = r1;

        return;
    }

    public void <init>(int, int, org.apache.lucene.util.automaton.State)
    {
        org.apache.lucene.util.automaton.Transition r0;
        org.apache.lucene.util.automaton.State r1;
        java.lang.AssertionError $r2, $r3;
        int i0, i1, i2;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.automaton.Transition;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        r1 := @parameter2: org.apache.lucene.util.automaton.State;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.apache.lucene.util.automaton.Transition: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i1 >= 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $z1 = <org.apache.lucene.util.automaton.Transition: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i2 >= 0 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        if i2 >= i1 goto label3;

        i0 = i2;

        i2 = i1;

        i1 = i0;

     label3:
        r0.<org.apache.lucene.util.automaton.Transition: int min> = i1;

        r0.<org.apache.lucene.util.automaton.Transition: int max> = i2;

        r0.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'> = r1;

        return;
    }

    public int getMin()
    {
        int $i0;
        org.apache.lucene.util.automaton.Transition r0;

        r0 := @this: org.apache.lucene.util.automaton.Transition;

        $i0 = r0.<org.apache.lucene.util.automaton.Transition: int min>;

        return $i0;
    }

    public int getMax()
    {
        int $i0;
        org.apache.lucene.util.automaton.Transition r0;

        r0 := @this: org.apache.lucene.util.automaton.Transition;

        $i0 = r0.<org.apache.lucene.util.automaton.Transition: int max>;

        return $i0;
    }

    public org.apache.lucene.util.automaton.State getDest()
    {
        org.apache.lucene.util.automaton.State $r1;
        org.apache.lucene.util.automaton.Transition r0;

        r0 := @this: org.apache.lucene.util.automaton.Transition;

        $r1 = r0.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.util.automaton.Transition r1, r2;
        org.apache.lucene.util.automaton.State $r3, $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r0;
        boolean $z0, $z1;

        r2 := @this: org.apache.lucene.util.automaton.Transition;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.lucene.util.automaton.Transition;

        if $z0 == 0 goto label3;

        r1 = (org.apache.lucene.util.automaton.Transition) r0;

        $i1 = r1.<org.apache.lucene.util.automaton.Transition: int min>;

        $i0 = r2.<org.apache.lucene.util.automaton.Transition: int min>;

        if $i1 != $i0 goto label1;

        $i3 = r1.<org.apache.lucene.util.automaton.Transition: int max>;

        $i2 = r2.<org.apache.lucene.util.automaton.Transition: int max>;

        if $i3 != $i2 goto label1;

        $r4 = r1.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $r3 = r2.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        if $r4 != $r3 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        org.apache.lucene.util.automaton.Transition r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.lucene.util.automaton.Transition;

        $i0 = r0.<org.apache.lucene.util.automaton.Transition: int min>;

        $i3 = $i0 * 2;

        $i1 = r0.<org.apache.lucene.util.automaton.Transition: int max>;

        $i2 = $i1 * 3;

        $i4 = $i3 + $i2;

        return $i4;
    }

    public org.apache.lucene.util.automaton.Transition clone()
    {
        org.apache.lucene.util.automaton.Transition r0, $r2;
        java.lang.Object $r1;
        java.lang.RuntimeException $r4;
        java.lang.CloneNotSupportedException $r3;

        r0 := @this: org.apache.lucene.util.automaton.Transition;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.apache.lucene.util.automaton.Transition) $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    static void appendCharString(int, java.lang.StringBuilder)
    {
        int i0;
        java.lang.StringBuilder r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuilder;

        if i0 < 33 goto label1;

        if i0 > 126 goto label1;

        if i0 == 92 goto label1;

        if i0 == 34 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>(i0);

        goto label9;

     label1:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\\\U");

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        if i0 >= 16 goto label2;

        $r7 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0000000");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        goto label9;

     label2:
        if i0 >= 256 goto label3;

        $r6 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("000000");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        goto label9;

     label3:
        if i0 >= 4096 goto label4;

        $r5 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("00000");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        goto label9;

     label4:
        if i0 >= 65536 goto label5;

        $r4 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0000");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        goto label9;

     label5:
        if i0 >= 1048576 goto label6;

        $r3 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("000");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        goto label9;

     label6:
        if i0 >= 16777216 goto label7;

        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("00");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        goto label9;

     label7:
        if i0 >= 268435456 goto label8;

        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        goto label9;

     label8:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label9:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.util.automaton.Transition r1;
        org.apache.lucene.util.automaton.State $r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r0, $r2;
        java.lang.String $r4;

        r1 := @this: org.apache.lucene.util.automaton.Transition;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i0 = r1.<org.apache.lucene.util.automaton.Transition: int min>;

        staticinvoke <org.apache.lucene.util.automaton.Transition: void appendCharString(int,java.lang.StringBuilder)>($i0, $r0);

        $i2 = r1.<org.apache.lucene.util.automaton.Transition: int min>;

        $i1 = r1.<org.apache.lucene.util.automaton.Transition: int max>;

        if $i2 == $i1 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i4 = r1.<org.apache.lucene.util.automaton.Transition: int max>;

        staticinvoke <org.apache.lucene.util.automaton.Transition: void appendCharString(int,java.lang.StringBuilder)>($i4, $r0);

     label1:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r3 = r1.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $i3 = $r3.<org.apache.lucene.util.automaton.State: int number>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    void appendDot(java.lang.StringBuilder)
    {
        org.apache.lucene.util.automaton.Transition r2;
        org.apache.lucene.util.automaton.State $r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder r0, $r1, $r4;

        r2 := @this: org.apache.lucene.util.automaton.Transition;

        r0 := @parameter0: java.lang.StringBuilder;

        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r3 = r2.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $i0 = $r3.<org.apache.lucene.util.automaton.State: int number>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [label=\"");

        $i1 = r2.<org.apache.lucene.util.automaton.Transition: int min>;

        staticinvoke <org.apache.lucene.util.automaton.Transition: void appendCharString(int,java.lang.StringBuilder)>($i1, r0);

        $i3 = r2.<org.apache.lucene.util.automaton.Transition: int min>;

        $i2 = r2.<org.apache.lucene.util.automaton.Transition: int max>;

        if $i3 == $i2 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i4 = r2.<org.apache.lucene.util.automaton.Transition: int max>;

        staticinvoke <org.apache.lucene.util.automaton.Transition: void appendCharString(int,java.lang.StringBuilder)>($i4, r0);

     label1:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"]\n");

        return;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.util.automaton.Transition r0, $r1;

        r0 := @this: org.apache.lucene.util.automaton.Transition;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.Transition clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.lucene.util.automaton.Transition$CompareByMinMaxThenDestSingle $r2;
        java.lang.Class $r0;
        org.apache.lucene.util.automaton.Transition$CompareByDestThenMinMaxSingle $r1;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/automaton/Transition;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.automaton.Transition: boolean $assertionsDisabled> = $z1;

        $r1 = new org.apache.lucene.util.automaton.Transition$CompareByDestThenMinMaxSingle;

        specialinvoke $r1.<org.apache.lucene.util.automaton.Transition$CompareByDestThenMinMaxSingle: void <init>(org.apache.lucene.util.automaton.Transition$1)>(null);

        <org.apache.lucene.util.automaton.Transition: java.util.Comparator CompareByDestThenMinMax> = $r1;

        $r2 = new org.apache.lucene.util.automaton.Transition$CompareByMinMaxThenDestSingle;

        specialinvoke $r2.<org.apache.lucene.util.automaton.Transition$CompareByMinMaxThenDestSingle: void <init>(org.apache.lucene.util.automaton.Transition$1)>(null);

        <org.apache.lucene.util.automaton.Transition: java.util.Comparator CompareByMinMaxThenDest> = $r2;

        return;
    }
}
