public class org.apache.lucene.index.ParallelAtomicReader extends org.apache.lucene.index.AtomicReader
{
    private final org.apache.lucene.index.FieldInfos fieldInfos;
    private final org.apache.lucene.index.ParallelAtomicReader$ParallelFields fields;
    private final org.apache.lucene.index.AtomicReader[] parallelReaders;
    private final org.apache.lucene.index.AtomicReader[] storedFieldsReaders;
    private final java.util.Set completeReaderSet;
    private final boolean closeSubReaders;
    private final int maxDoc;
    private final int numDocs;
    private final boolean hasDeletions;
    private final java.util.SortedMap fieldToReader;
    private final java.util.SortedMap tvFieldToReader;

    public transient void <init>(org.apache.lucene.index.AtomicReader[]) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelAtomicReader r0;
        org.apache.lucene.index.AtomicReader[] r1;

        r0 := @this: org.apache.lucene.index.ParallelAtomicReader;

        r1 := @parameter0: org.apache.lucene.index.AtomicReader[];

        specialinvoke r0.<org.apache.lucene.index.ParallelAtomicReader: void <init>(boolean,org.apache.lucene.index.AtomicReader[])>(1, r1);

        return;
    }

    public transient void <init>(boolean, org.apache.lucene.index.AtomicReader[]) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelAtomicReader r0;
        org.apache.lucene.index.AtomicReader[] r1;
        boolean z0;

        r0 := @this: org.apache.lucene.index.ParallelAtomicReader;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.lucene.index.AtomicReader[];

        specialinvoke r0.<org.apache.lucene.index.ParallelAtomicReader: void <init>(boolean,org.apache.lucene.index.AtomicReader[],org.apache.lucene.index.AtomicReader[])>(z0, r1, r1);

        return;
    }

    public void <init>(boolean, org.apache.lucene.index.AtomicReader[], org.apache.lucene.index.AtomicReader[]) throws java.io.IOException
    {
        org.apache.lucene.index.FieldInfos$Builder $r19;
        org.apache.lucene.index.ParallelAtomicReader$ParallelFields $r1, $r29;
        org.apache.lucene.index.FieldInfos $r20, $r31;
        java.util.Set $r3, $r14, $r16, $r17, $r21;
        org.apache.lucene.index.AtomicReader[] r6, $r8, r9, $r11, $r12, $r13, $r15, $r48, r52, r55;
        java.lang.StringBuilder $r42, $r43, $r44, $r45, $r46;
        org.apache.lucene.index.AtomicReader r50, r51, r53, r56, r58;
        java.lang.String $r34, $r36, $r38, $r47, r57;
        java.util.TreeMap $r4, $r5;
        org.apache.lucene.index.FieldInfo r54;
        org.apache.lucene.index.Fields $r24;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.IdentityHashMap $r2;
        org.apache.lucene.index.Terms $r30;
        java.util.SortedMap $r27, $r35, $r37, $r39;
        org.apache.lucene.index.ParallelAtomicReader r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12;
        java.util.Iterator $r18, $r22, $r25, $r32;
        java.lang.IllegalArgumentException $r41, $r49;
        java.lang.Object $r7, $r10, $r23, $r26, $r28, $r33, $r40;

        r0 := @this: org.apache.lucene.index.ParallelAtomicReader;

        z0 := @parameter0: boolean;

        r6 := @parameter1: org.apache.lucene.index.AtomicReader[];

        r9 := @parameter2: org.apache.lucene.index.AtomicReader[];

        specialinvoke r0.<org.apache.lucene.index.AtomicReader: void <init>()>();

        $r1 = new org.apache.lucene.index.ParallelAtomicReader$ParallelFields;

        specialinvoke $r1.<org.apache.lucene.index.ParallelAtomicReader$ParallelFields: void <init>(org.apache.lucene.index.ParallelAtomicReader)>(r0);

        r0.<org.apache.lucene.index.ParallelAtomicReader: org.apache.lucene.index.ParallelAtomicReader$ParallelFields fields> = $r1;

        $r2 = new java.util.IdentityHashMap;

        specialinvoke $r2.<java.util.IdentityHashMap: void <init>()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r2);

        r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.Set completeReaderSet> = $r3;

        $r4 = new java.util.TreeMap;

        specialinvoke $r4.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.SortedMap fieldToReader> = $r4;

        $r5 = new java.util.TreeMap;

        specialinvoke $r5.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.SortedMap tvFieldToReader> = $r5;

        r0.<org.apache.lucene.index.ParallelAtomicReader: boolean closeSubReaders> = z0;

        $i0 = lengthof r6;

        if $i0 != 0 goto label01;

        $i8 = lengthof r9;

        if $i8 <= 0 goto label01;

        $r49 = new java.lang.IllegalArgumentException;

        specialinvoke $r49.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("There must be at least one main reader if storedFieldsReaders are used.");

        throw $r49;

     label01:
        $r7 = virtualinvoke r6.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (org.apache.lucene.index.AtomicReader[]) $r7;

        r0.<org.apache.lucene.index.ParallelAtomicReader: org.apache.lucene.index.AtomicReader[] parallelReaders> = $r8;

        $r10 = virtualinvoke r9.<java.lang.Object: java.lang.Object clone()>();

        $r11 = (org.apache.lucene.index.AtomicReader[]) $r10;

        r0.<org.apache.lucene.index.ParallelAtomicReader: org.apache.lucene.index.AtomicReader[] storedFieldsReaders> = $r11;

        $r12 = r0.<org.apache.lucene.index.ParallelAtomicReader: org.apache.lucene.index.AtomicReader[] parallelReaders>;

        $i1 = lengthof $r12;

        if $i1 <= 0 goto label02;

        $r48 = r0.<org.apache.lucene.index.ParallelAtomicReader: org.apache.lucene.index.AtomicReader[] parallelReaders>;

        r50 = $r48[0];

        $i6 = virtualinvoke r50.<org.apache.lucene.index.AtomicReader: int maxDoc()>();

        r0.<org.apache.lucene.index.ParallelAtomicReader: int maxDoc> = $i6;

        $i7 = virtualinvoke r50.<org.apache.lucene.index.AtomicReader: int numDocs()>();

        r0.<org.apache.lucene.index.ParallelAtomicReader: int numDocs> = $i7;

        $z6 = virtualinvoke r50.<org.apache.lucene.index.AtomicReader: boolean hasDeletions()>();

        r0.<org.apache.lucene.index.ParallelAtomicReader: boolean hasDeletions> = $z6;

        goto label03;

     label02:
        r0.<org.apache.lucene.index.ParallelAtomicReader: int numDocs> = 0;

        r0.<org.apache.lucene.index.ParallelAtomicReader: int maxDoc> = 0;

        r0.<org.apache.lucene.index.ParallelAtomicReader: boolean hasDeletions> = 0;

     label03:
        $r14 = r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.Set completeReaderSet>;

        $r13 = r0.<org.apache.lucene.index.ParallelAtomicReader: org.apache.lucene.index.AtomicReader[] parallelReaders>;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r14, $r13);

        $r16 = r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.Set completeReaderSet>;

        $r15 = r0.<org.apache.lucene.index.ParallelAtomicReader: org.apache.lucene.index.AtomicReader[] storedFieldsReaders>;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r16, $r15);

        $r17 = r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.Set completeReaderSet>;

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z7 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label06;

        $r40 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r51 = (org.apache.lucene.index.AtomicReader) $r40;

        $i2 = virtualinvoke r51.<org.apache.lucene.index.AtomicReader: int maxDoc()>();

        $i3 = r0.<org.apache.lucene.index.ParallelAtomicReader: int maxDoc>;

        if $i2 == $i3 goto label05;

        $r41 = new java.lang.IllegalArgumentException;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("All readers must have same maxDoc: ");

        $i4 = r0.<org.apache.lucene.index.ParallelAtomicReader: int maxDoc>;

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!=");

        $i5 = virtualinvoke r51.<org.apache.lucene.index.AtomicReader: int maxDoc()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r47);

        throw $r41;

     label05:
        goto label04;

     label06:
        $r19 = new org.apache.lucene.index.FieldInfos$Builder;

        specialinvoke $r19.<org.apache.lucene.index.FieldInfos$Builder: void <init>()>();

        r52 = r0.<org.apache.lucene.index.ParallelAtomicReader: org.apache.lucene.index.AtomicReader[] parallelReaders>;

        i9 = lengthof r52;

        i10 = 0;

     label07:
        if i10 >= i9 goto label11;

        r53 = r52[i10];

        $r31 = virtualinvoke r53.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.FieldInfos getFieldInfos()>();

        $r32 = virtualinvoke $r31.<org.apache.lucene.index.FieldInfos: java.util.Iterator iterator()>();

     label08:
        $z3 = interfaceinvoke $r32.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r33 = interfaceinvoke $r32.<java.util.Iterator: java.lang.Object next()>();

        r54 = (org.apache.lucene.index.FieldInfo) $r33;

        $r35 = r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.SortedMap fieldToReader>;

        $r34 = r54.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $z4 = interfaceinvoke $r35.<java.util.SortedMap: boolean containsKey(java.lang.Object)>($r34);

        if $z4 != 0 goto label09;

        virtualinvoke $r19.<org.apache.lucene.index.FieldInfos$Builder: org.apache.lucene.index.FieldInfo add(org.apache.lucene.index.FieldInfo)>(r54);

        $r37 = r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.SortedMap fieldToReader>;

        $r36 = r54.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        interfaceinvoke $r37.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, r53);

        $z5 = virtualinvoke r54.<org.apache.lucene.index.FieldInfo: boolean hasVectors()>();

        if $z5 == 0 goto label09;

        $r39 = r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.SortedMap tvFieldToReader>;

        $r38 = r54.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        interfaceinvoke $r39.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, r53);

     label09:
        goto label08;

     label10:
        i10 = i10 + 1;

        goto label07;

     label11:
        $r20 = virtualinvoke $r19.<org.apache.lucene.index.FieldInfos$Builder: org.apache.lucene.index.FieldInfos finish()>();

        r0.<org.apache.lucene.index.ParallelAtomicReader: org.apache.lucene.index.FieldInfos fieldInfos> = $r20;

        r55 = r0.<org.apache.lucene.index.ParallelAtomicReader: org.apache.lucene.index.AtomicReader[] parallelReaders>;

        i11 = lengthof r55;

        i12 = 0;

     label12:
        if i12 >= i11 goto label16;

        r56 = r55[i12];

        $r24 = virtualinvoke r56.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Fields fields()>();

        if $r24 == null goto label15;

        $r25 = virtualinvoke $r24.<org.apache.lucene.index.Fields: java.util.Iterator iterator()>();

     label13:
        $z2 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label15;

        $r26 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        r57 = (java.lang.String) $r26;

        $r27 = r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.SortedMap fieldToReader>;

        $r28 = interfaceinvoke $r27.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r57);

        if $r28 != r56 goto label14;

        $r29 = r0.<org.apache.lucene.index.ParallelAtomicReader: org.apache.lucene.index.ParallelAtomicReader$ParallelFields fields>;

        $r30 = virtualinvoke $r24.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(r57);

        virtualinvoke $r29.<org.apache.lucene.index.ParallelAtomicReader$ParallelFields: void addField(java.lang.String,org.apache.lucene.index.Terms)>(r57, $r30);

     label14:
        goto label13;

     label15:
        i12 = i12 + 1;

        goto label12;

     label16:
        $r21 = r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.Set completeReaderSet>;

        $r22 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label17:
        $z1 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label19;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r58 = (org.apache.lucene.index.AtomicReader) $r23;

        if z0 != 0 goto label18;

        virtualinvoke r58.<org.apache.lucene.index.AtomicReader: void incRef()>();

     label18:
        virtualinvoke r58.<org.apache.lucene.index.AtomicReader: void registerParentReader(org.apache.lucene.index.IndexReader)>(r0);

        goto label17;

     label19:
        return;
    }

    public java.lang.String toString()
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.lucene.index.ParallelAtomicReader r1;
        java.lang.StringBuilder $r0, $r4;
        java.lang.Object $r6;
        java.lang.String $r5;
        boolean $z0, $z1;

        r1 := @this: org.apache.lucene.index.ParallelAtomicReader;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("ParallelAtomicReader(");

        $r2 = r1.<org.apache.lucene.index.ParallelAtomicReader: java.util.Set completeReaderSet>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        goto label1;

     label2:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public org.apache.lucene.index.FieldInfos getFieldInfos()
    {
        org.apache.lucene.index.FieldInfos $r1;
        org.apache.lucene.index.ParallelAtomicReader r0;

        r0 := @this: org.apache.lucene.index.ParallelAtomicReader;

        $r1 = r0.<org.apache.lucene.index.ParallelAtomicReader: org.apache.lucene.index.FieldInfos fieldInfos>;

        return $r1;
    }

    public org.apache.lucene.util.Bits getLiveDocs()
    {
        org.apache.lucene.index.ParallelAtomicReader r0;
        org.apache.lucene.index.AtomicReader[] $r1;
        org.apache.lucene.util.Bits $r3;
        org.apache.lucene.index.AtomicReader $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ParallelAtomicReader;

        virtualinvoke r0.<org.apache.lucene.index.ParallelAtomicReader: void ensureOpen()>();

        $z0 = r0.<org.apache.lucene.index.ParallelAtomicReader: boolean hasDeletions>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.lucene.index.ParallelAtomicReader: org.apache.lucene.index.AtomicReader[] parallelReaders>;

        $r2 = $r1[0];

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.AtomicReader: org.apache.lucene.util.Bits getLiveDocs()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public org.apache.lucene.index.Fields fields()
    {
        org.apache.lucene.index.ParallelAtomicReader$ParallelFields $r1;
        org.apache.lucene.index.ParallelAtomicReader r0;

        r0 := @this: org.apache.lucene.index.ParallelAtomicReader;

        virtualinvoke r0.<org.apache.lucene.index.ParallelAtomicReader: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.ParallelAtomicReader: org.apache.lucene.index.ParallelAtomicReader$ParallelFields fields>;

        return $r1;
    }

    public int numDocs()
    {
        int $i0;
        org.apache.lucene.index.ParallelAtomicReader r0;

        r0 := @this: org.apache.lucene.index.ParallelAtomicReader;

        $i0 = r0.<org.apache.lucene.index.ParallelAtomicReader: int numDocs>;

        return $i0;
    }

    public int maxDoc()
    {
        int $i0;
        org.apache.lucene.index.ParallelAtomicReader r0;

        r0 := @this: org.apache.lucene.index.ParallelAtomicReader;

        $i0 = r0.<org.apache.lucene.index.ParallelAtomicReader: int maxDoc>;

        return $i0;
    }

    public void document(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelAtomicReader r0;
        int i0, i1, i2;
        org.apache.lucene.index.StoredFieldVisitor r3;
        org.apache.lucene.index.AtomicReader[] r1;
        org.apache.lucene.index.AtomicReader r2;

        r0 := @this: org.apache.lucene.index.ParallelAtomicReader;

        i1 := @parameter0: int;

        r3 := @parameter1: org.apache.lucene.index.StoredFieldVisitor;

        virtualinvoke r0.<org.apache.lucene.index.ParallelAtomicReader: void ensureOpen()>();

        r1 = r0.<org.apache.lucene.index.ParallelAtomicReader: org.apache.lucene.index.AtomicReader[] storedFieldsReaders>;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r2 = r1[i2];

        virtualinvoke r2.<org.apache.lucene.index.AtomicReader: void document(int,org.apache.lucene.index.StoredFieldVisitor)>(i1, r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public org.apache.lucene.index.Fields getTermVectors(int) throws java.io.IOException
    {
        java.util.Map$Entry r5;
        org.apache.lucene.index.Terms $r10;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.lucene.index.ParallelAtomicReader r0;
        int i0;
        java.lang.Object $r4, $r6, $r8;
        java.lang.String r7;
        org.apache.lucene.index.ParallelAtomicReader$ParallelFields $r11, r12;
        java.util.SortedMap $r1;
        org.apache.lucene.index.AtomicReader $r9;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.ParallelAtomicReader;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.lucene.index.ParallelAtomicReader: void ensureOpen()>();

        r12 = null;

        $r1 = r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.SortedMap tvFieldToReader>;

        $r2 = interfaceinvoke $r1.<java.util.SortedMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (org.apache.lucene.index.AtomicReader) $r8;

        $r10 = virtualinvoke $r9.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Terms getTermVector(int,java.lang.String)>(i0, r7);

        if $r10 == null goto label3;

        if r12 != null goto label2;

        $r11 = new org.apache.lucene.index.ParallelAtomicReader$ParallelFields;

        specialinvoke $r11.<org.apache.lucene.index.ParallelAtomicReader$ParallelFields: void <init>(org.apache.lucene.index.ParallelAtomicReader)>(r0);

        r12 = $r11;

     label2:
        virtualinvoke r12.<org.apache.lucene.index.ParallelAtomicReader$ParallelFields: void addField(java.lang.String,org.apache.lucene.index.Terms)>(r7, $r10);

     label3:
        goto label1;

     label4:
        return r12;
    }

    protected synchronized void doClose() throws java.io.IOException
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.io.IOException $r5, r6;
        org.apache.lucene.index.ParallelAtomicReader r0;
        java.lang.Object $r3;
        org.apache.lucene.index.AtomicReader r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.ParallelAtomicReader;

        r6 = null;

        $r1 = r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.Set completeReaderSet>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.index.AtomicReader) $r3;

     label2:
        $z1 = r0.<org.apache.lucene.index.ParallelAtomicReader: boolean closeSubReaders>;

        if $z1 == 0 goto label3;

        virtualinvoke r4.<org.apache.lucene.index.AtomicReader: void close()>();

        goto label4;

     label3:
        virtualinvoke r4.<org.apache.lucene.index.AtomicReader: void decRef()>();

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        if r6 != null goto label6;

        r6 = $r5;

     label6:
        goto label1;

     label7:
        if r6 == null goto label8;

        throw r6;

     label8:
        return;

        catch java.io.IOException from label2 to label4 with label5;
    }

    public org.apache.lucene.index.NumericDocValues getNumericDocValues(java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelAtomicReader r0;
        org.apache.lucene.index.NumericDocValues $r5;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.SortedMap $r2;
        org.apache.lucene.index.AtomicReader r4;

        r0 := @this: org.apache.lucene.index.ParallelAtomicReader;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.lucene.index.ParallelAtomicReader: void ensureOpen()>();

        $r2 = r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.SortedMap fieldToReader>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.lucene.index.AtomicReader) $r3;

        if r4 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = virtualinvoke r4.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.NumericDocValues getNumericDocValues(java.lang.String)>(r1);

     label2:
        return $r5;
    }

    public org.apache.lucene.index.BinaryDocValues getBinaryDocValues(java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelAtomicReader r0;
        java.lang.Object $r3;
        java.lang.String r1;
        org.apache.lucene.index.BinaryDocValues $r5;
        java.util.SortedMap $r2;
        org.apache.lucene.index.AtomicReader r4;

        r0 := @this: org.apache.lucene.index.ParallelAtomicReader;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.lucene.index.ParallelAtomicReader: void ensureOpen()>();

        $r2 = r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.SortedMap fieldToReader>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.lucene.index.AtomicReader) $r3;

        if r4 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = virtualinvoke r4.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.BinaryDocValues getBinaryDocValues(java.lang.String)>(r1);

     label2:
        return $r5;
    }

    public org.apache.lucene.index.SortedDocValues getSortedDocValues(java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelAtomicReader r0;
        java.lang.Object $r3;
        java.lang.String r1;
        org.apache.lucene.index.SortedDocValues $r5;
        java.util.SortedMap $r2;
        org.apache.lucene.index.AtomicReader r4;

        r0 := @this: org.apache.lucene.index.ParallelAtomicReader;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.lucene.index.ParallelAtomicReader: void ensureOpen()>();

        $r2 = r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.SortedMap fieldToReader>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.lucene.index.AtomicReader) $r3;

        if r4 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = virtualinvoke r4.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.SortedDocValues getSortedDocValues(java.lang.String)>(r1);

     label2:
        return $r5;
    }

    public org.apache.lucene.index.SortedSetDocValues getSortedSetDocValues(java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelAtomicReader r0;
        org.apache.lucene.index.SortedSetDocValues $r5;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.SortedMap $r2;
        org.apache.lucene.index.AtomicReader r4;

        r0 := @this: org.apache.lucene.index.ParallelAtomicReader;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.lucene.index.ParallelAtomicReader: void ensureOpen()>();

        $r2 = r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.SortedMap fieldToReader>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.lucene.index.AtomicReader) $r3;

        if r4 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = virtualinvoke r4.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.SortedSetDocValues getSortedSetDocValues(java.lang.String)>(r1);

     label2:
        return $r5;
    }

    public org.apache.lucene.index.NumericDocValues getNormValues(java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.ParallelAtomicReader r0;
        org.apache.lucene.index.NumericDocValues $r5;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.SortedMap $r2;
        org.apache.lucene.index.AtomicReader r4;

        r0 := @this: org.apache.lucene.index.ParallelAtomicReader;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.lucene.index.ParallelAtomicReader: void ensureOpen()>();

        $r2 = r0.<org.apache.lucene.index.ParallelAtomicReader: java.util.SortedMap fieldToReader>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.lucene.index.AtomicReader) $r3;

        if r4 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = virtualinvoke r4.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.NumericDocValues getNormValues(java.lang.String)>(r1);

     label2:
        return $r5;
    }
}
