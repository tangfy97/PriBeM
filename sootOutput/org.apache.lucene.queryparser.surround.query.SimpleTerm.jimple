public abstract class org.apache.lucene.queryparser.surround.query.SimpleTerm extends org.apache.lucene.queryparser.surround.query.SrndQuery implements org.apache.lucene.queryparser.surround.query.DistanceSubQuery, java.lang.Comparable
{
    private boolean quoted;

    public void <init>(boolean)
    {
        org.apache.lucene.queryparser.surround.query.SimpleTerm r0;
        boolean z0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SimpleTerm;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.lucene.queryparser.surround.query.SrndQuery: void <init>()>();

        r0.<org.apache.lucene.queryparser.surround.query.SimpleTerm: boolean quoted> = z0;

        return;
    }

    boolean isQuoted()
    {
        org.apache.lucene.queryparser.surround.query.SimpleTerm r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SimpleTerm;

        $z0 = r0.<org.apache.lucene.queryparser.surround.query.SimpleTerm: boolean quoted>;

        return $z0;
    }

    public java.lang.String getQuote()
    {
        org.apache.lucene.queryparser.surround.query.SimpleTerm r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SimpleTerm;

        return "\"";
    }

    public java.lang.String getFieldOperator()
    {
        org.apache.lucene.queryparser.surround.query.SimpleTerm r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SimpleTerm;

        return "/";
    }

    public abstract java.lang.String toStringUnquoted();

    public int compareTo(org.apache.lucene.queryparser.surround.query.SimpleTerm)
    {
        org.apache.lucene.queryparser.surround.query.SimpleTerm r0, r2;
        int $i0;
        java.lang.String $r1, $r3;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SimpleTerm;

        r2 := @parameter0: org.apache.lucene.queryparser.surround.query.SimpleTerm;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.SimpleTerm: java.lang.String toStringUnquoted()>();

        $r3 = virtualinvoke r2.<org.apache.lucene.queryparser.surround.query.SimpleTerm: java.lang.String toStringUnquoted()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        return $i0;
    }

    protected void suffixToString(java.lang.StringBuilder)
    {
        java.lang.StringBuilder r1;
        org.apache.lucene.queryparser.surround.query.SimpleTerm r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SimpleTerm;

        r1 := @parameter0: java.lang.StringBuilder;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.queryparser.surround.query.SimpleTerm r1;
        java.lang.StringBuilder $r0;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0, $z1;

        r1 := @this: org.apache.lucene.queryparser.surround.query.SimpleTerm;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $z0 = virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.SimpleTerm: boolean isQuoted()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.SimpleTerm: java.lang.String getQuote()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

     label1:
        $r2 = virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.SimpleTerm: java.lang.String toStringUnquoted()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $z1 = virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.SimpleTerm: boolean isQuoted()>();

        if $z1 == 0 goto label2;

        $r4 = virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.SimpleTerm: java.lang.String getQuote()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label2:
        virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.SimpleTerm: void suffixToString(java.lang.StringBuilder)>($r0);

        virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.SimpleTerm: void weightToString(java.lang.StringBuilder)>($r0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public abstract void visitMatchingTerms(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.queryparser.surround.query.SimpleTerm$MatchingTermVisitor) throws java.io.IOException;

    public java.lang.String distanceSubQueryNotAllowed()
    {
        org.apache.lucene.queryparser.surround.query.SimpleTerm r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SimpleTerm;

        return null;
    }

    public void addSpanQueries(org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory) throws java.io.IOException
    {
        org.apache.lucene.queryparser.surround.query.SimpleTerm r0;
        org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory r1;
        java.lang.String $r3;
        org.apache.lucene.index.IndexReader $r2;
        org.apache.lucene.queryparser.surround.query.SimpleTerm$1 $r4;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SimpleTerm;

        r1 := @parameter0: org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory;

        $r2 = virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: org.apache.lucene.index.IndexReader getIndexReader()>();

        $r3 = virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: java.lang.String getFieldName()>();

        $r4 = new org.apache.lucene.queryparser.surround.query.SimpleTerm$1;

        specialinvoke $r4.<org.apache.lucene.queryparser.surround.query.SimpleTerm$1: void <init>(org.apache.lucene.queryparser.surround.query.SimpleTerm,org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory)>(r0, r1);

        virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.SimpleTerm: void visitMatchingTerms(org.apache.lucene.index.IndexReader,java.lang.String,org.apache.lucene.queryparser.surround.query.SimpleTerm$MatchingTermVisitor)>($r2, $r3, $r4);

        return;
    }

    public org.apache.lucene.search.Query makeLuceneQueryFieldNoBoost(java.lang.String, org.apache.lucene.queryparser.surround.query.BasicQueryFactory)
    {
        org.apache.lucene.queryparser.surround.query.SimpleTerm r1;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r3;
        org.apache.lucene.queryparser.surround.query.SimpleTermRewriteQuery $r0;
        java.lang.String r2;

        r1 := @this: org.apache.lucene.queryparser.surround.query.SimpleTerm;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        $r0 = new org.apache.lucene.queryparser.surround.query.SimpleTermRewriteQuery;

        specialinvoke $r0.<org.apache.lucene.queryparser.surround.query.SimpleTermRewriteQuery: void <init>(org.apache.lucene.queryparser.surround.query.SimpleTerm,java.lang.String,org.apache.lucene.queryparser.surround.query.BasicQueryFactory)>(r1, r2, r3);

        return $r0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.lucene.queryparser.surround.query.SimpleTerm r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SimpleTerm;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.lucene.queryparser.surround.query.SimpleTerm) r1;

        $i0 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.SimpleTerm: int compareTo(org.apache.lucene.queryparser.surround.query.SimpleTerm)>($r2);

        return $i0;
    }
}
