public class ucar.nc2.Variable extends java.lang.Object implements ucar.nc2.VariableIF, ucar.nc2.ProxyReader
{
    public static final int defaultSizeToCache;
    public static final int defaultCoordsSizeToCache;
    protected static boolean debugCaching;
    private static org.slf4j.Logger log;
    protected ucar.nc2.NetcdfFile ncfile;
    protected ucar.nc2.Group group;
    protected java.lang.String shortName;
    protected int[] shape;
    protected ucar.ma2.Section shapeAsSection;
    protected ucar.ma2.DataType dataType;
    protected int elementSize;
    protected java.util.List dimensions;
    protected java.util.List attributes;
    protected boolean isVariableLength;
    protected boolean isMetadata;
    private boolean immutable;
    protected ucar.nc2.Variable$Cache cache;
    protected int sizeToCache;
    protected ucar.nc2.Structure parent;
    protected ucar.nc2.ProxyReader proxyReader;
    private ucar.nc2.EnumTypedef enumTypedef;
    private static boolean showSize;
    protected int hashCode;
    protected java.lang.Object spiObject;

    public java.lang.String getName()
    {
        ucar.nc2.Variable r0;
        java.lang.String $r2;
        ucar.nc2.Group $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.Group group>;

        $r2 = staticinvoke <ucar.nc2.NetcdfFile: java.lang.String makeFullName(ucar.nc2.Group,ucar.nc2.Variable)>($r1, r0);

        return $r2;
    }

    public java.lang.String getNameEscaped()
    {
        ucar.nc2.Variable r0;
        java.lang.String $r2;
        ucar.nc2.Group $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.Group group>;

        $r2 = staticinvoke <ucar.nc2.NetcdfFile: java.lang.String makeFullNameEscaped(ucar.nc2.Group,ucar.nc2.Variable)>($r1, r0);

        return $r2;
    }

    public java.lang.String getShortName()
    {
        ucar.nc2.Variable r0;
        java.lang.String $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: java.lang.String shortName>;

        return $r1;
    }

    public ucar.ma2.DataType getDataType()
    {
        ucar.ma2.DataType $r1;
        ucar.nc2.Variable r0;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: ucar.ma2.DataType dataType>;

        return $r1;
    }

    public int[] getShape()
    {
        int[] $r1, r2, $r3, $r4;
        int $i0, $i1;
        ucar.nc2.Variable r0;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: int[] shape>;

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

        $r4 = r0.<ucar.nc2.Variable: int[] shape>;

        $r3 = r0.<ucar.nc2.Variable: int[] shape>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, $i1);

        return r2;
    }

    public int getShape(int)
    {
        int[] $r1;
        int i0, $i1;
        ucar.nc2.Variable r0;

        r0 := @this: ucar.nc2.Variable;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.nc2.Variable: int[] shape>;

        $i1 = $r1[i0];

        return $i1;
    }

    public long getSize()
    {
        long $l3, l4;
        int[] $r1, $r2, $r3;
        int $i0, $i1, $i2, i5;
        ucar.nc2.Variable r0;

        r0 := @this: ucar.nc2.Variable;

        l4 = 1L;

        i5 = 0;

     label1:
        $r1 = r0.<ucar.nc2.Variable: int[] shape>;

        $i0 = lengthof $r1;

        if i5 >= $i0 goto label3;

        $r2 = r0.<ucar.nc2.Variable: int[] shape>;

        $i1 = $r2[i5];

        if $i1 < 0 goto label2;

        $r3 = r0.<ucar.nc2.Variable: int[] shape>;

        $i2 = $r3[i5];

        $l3 = (long) $i2;

        l4 = l4 * $l3;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return l4;
    }

    public int getElementSize()
    {
        int $i0;
        ucar.nc2.Variable r0;

        r0 := @this: ucar.nc2.Variable;

        $i0 = r0.<ucar.nc2.Variable: int elementSize>;

        return $i0;
    }

    public int getRank()
    {
        int $i0;
        ucar.nc2.Variable r0;
        int[] $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: int[] shape>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public ucar.nc2.Group getParentGroup()
    {
        ucar.nc2.Variable r0;
        ucar.nc2.Group $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.Group group>;

        return $r1;
    }

    public boolean isMetadata()
    {
        ucar.nc2.Variable r0;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        $z0 = r0.<ucar.nc2.Variable: boolean isMetadata>;

        return $z0;
    }

    public boolean isScalar()
    {
        int $i0;
        ucar.nc2.Variable r0;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        $i0 = virtualinvoke r0.<ucar.nc2.Variable: int getRank()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isVariableLength()
    {
        ucar.nc2.Variable r0;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        $z0 = r0.<ucar.nc2.Variable: boolean isVariableLength>;

        return $z0;
    }

    public boolean isUnsigned()
    {
        ucar.nc2.Attribute $r1;
        ucar.nc2.Variable r0;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>("_Unsigned");

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isUnlimited()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        ucar.nc2.Variable r0;
        java.lang.Object $r3;
        ucar.nc2.Dimension r4;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Dimension) $r3;

        $z1 = virtualinvoke r4.<ucar.nc2.Dimension: boolean isUnlimited()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public java.util.List getDimensions()
    {
        ucar.nc2.Variable r0;
        java.util.List $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        return $r1;
    }

    public ucar.nc2.Dimension getDimension(int)
    {
        java.util.List $r1;
        int i0, $i1;
        ucar.nc2.Variable r0;
        java.lang.Object $r2;
        ucar.nc2.Dimension $r3;

        r0 := @this: ucar.nc2.Variable;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = virtualinvoke r0.<ucar.nc2.Variable: int getRank()>();

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r1 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (ucar.nc2.Dimension) $r2;

        return $r3;
    }

    public java.lang.String getDimensionsString()
    {
        java.lang.Object[] $r8, $r10, $r11, $r12;
        java.lang.Integer $r9;
        java.util.Formatter $r0;
        int $i0, $i1, i2;
        ucar.nc2.Variable r1;
        java.lang.String $r3, $r7;
        boolean $z0, $z1;
        java.util.List $r2, $r4;
        java.lang.Object $r5;
        ucar.nc2.Dimension r6;

        r1 := @this: ucar.nc2.Variable;

        $r0 = new java.util.Formatter;

        specialinvoke $r0.<java.util.Formatter: void <init>()>();

        i2 = 0;

     label1:
        $r2 = r1.<ucar.nc2.Variable: java.util.List dimensions>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i2 >= $i0 goto label6;

        $r4 = r1.<ucar.nc2.Variable: java.util.List dimensions>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        r6 = (ucar.nc2.Dimension) $r5;

        $r7 = virtualinvoke r6.<ucar.nc2.Dimension: java.lang.String getName()>();

        if i2 == 0 goto label2;

        $r12 = newarray (java.lang.Object)[0];

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" ", $r12);

     label2:
        $z0 = virtualinvoke r6.<ucar.nc2.Dimension: boolean isVariableLength()>();

        if $z0 == 0 goto label3;

        $r11 = newarray (java.lang.Object)[0];

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("*", $r11);

        goto label5;

     label3:
        $z1 = virtualinvoke r6.<ucar.nc2.Dimension: boolean isShared()>();

        if $z1 == 0 goto label4;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = $r7;

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s", $r10);

        goto label5;

     label4:
        $r8 = newarray (java.lang.Object)[1];

        $i1 = virtualinvoke r6.<ucar.nc2.Dimension: int getLength()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r8[0] = $r9;

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%d", $r8);

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        $r3 = virtualinvoke $r0.<java.util.Formatter: java.lang.String toString()>();

        return $r3;
    }

    public int findDimensionIndex(java.lang.String)
    {
        java.util.List $r1, $r2;
        int $i0, i1, $i3;
        ucar.nc2.Variable r0;
        java.lang.Object $r3;
        ucar.nc2.Dimension r4;
        java.lang.String r5, $r6;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        r5 := @parameter0: java.lang.String;

        i1 = 0;

     label1:
        $r1 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r2 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (ucar.nc2.Dimension) $r3;

        $r6 = virtualinvoke r4.<ucar.nc2.Dimension: java.lang.String getName()>();

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i3 = (int) -1;

        return $i3;
    }

    public java.util.List getAttributes()
    {
        ucar.nc2.Variable r0;
        java.util.List $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: java.util.List attributes>;

        return $r1;
    }

    public ucar.nc2.Attribute findAttribute(java.lang.String)
    {
        java.util.Iterator $r2;
        java.util.List $r1;
        ucar.nc2.Attribute r4;
        ucar.nc2.Variable r0;
        java.lang.Object $r3;
        java.lang.String r5, $r6;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.Variable;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<ucar.nc2.Variable: java.util.List attributes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Attribute) $r3;

        $r6 = virtualinvoke r4.<ucar.nc2.Attribute: java.lang.String getName()>();

        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    public ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)
    {
        java.util.Iterator $r2;
        java.util.List $r1;
        ucar.nc2.Attribute r4;
        ucar.nc2.Variable r0;
        java.lang.Object $r3;
        java.lang.String r5, $r6;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.Variable;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<ucar.nc2.Variable: java.util.List attributes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Attribute) $r3;

        $r6 = virtualinvoke r4.<ucar.nc2.Attribute: java.lang.String getName()>();

        $z1 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    public java.lang.String getDescription()
    {
        ucar.nc2.Attribute $r1, $r2, $r3, $r4;
        ucar.nc2.Variable r0;
        java.lang.String r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: ucar.nc2.Variable;

        r5 = null;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>("long_name");

        if $r1 == null goto label1;

        $z3 = virtualinvoke $r1.<ucar.nc2.Attribute: boolean isString()>();

        if $z3 == 0 goto label1;

        r5 = virtualinvoke $r1.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

     label1:
        if r5 != null goto label2;

        $r4 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>("description");

        if $r4 == null goto label2;

        $z2 = virtualinvoke $r4.<ucar.nc2.Attribute: boolean isString()>();

        if $z2 == 0 goto label2;

        r5 = virtualinvoke $r4.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

     label2:
        if r5 != null goto label3;

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>("title");

        if $r3 == null goto label3;

        $z1 = virtualinvoke $r3.<ucar.nc2.Attribute: boolean isString()>();

        if $z1 == 0 goto label3;

        r5 = virtualinvoke $r3.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

     label3:
        if r5 != null goto label4;

        $r2 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>("standard_name");

        if $r2 == null goto label4;

        $z0 = virtualinvoke $r2.<ucar.nc2.Attribute: boolean isString()>();

        if $z0 == 0 goto label4;

        r5 = virtualinvoke $r2.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

     label4:
        return r5;
    }

    public java.lang.String getUnitsString()
    {
        ucar.nc2.Attribute $r1;
        ucar.nc2.Variable r0;
        java.lang.String $r2, r3;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        r3 = null;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>("units");

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<ucar.nc2.Attribute: boolean isString()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        r3 = $r2;

        if $r2 == null goto label1;

        r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

     label1:
        return r3;
    }

    public java.util.List getRanges()
    {
        ucar.nc2.Variable r0;
        java.util.List $r2;
        ucar.ma2.Section $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Section getShapeAsSection()>();

        $r2 = virtualinvoke $r1.<ucar.ma2.Section: java.util.List getRanges()>();

        return $r2;
    }

    public ucar.ma2.Section getShapeAsSection()
    {
        java.lang.IllegalStateException $r21;
        ucar.ma2.Section $r1, $r2, $r6, $r7;
        java.util.ArrayList $r3;
        int $i0, $i1;
        ucar.nc2.Variable r0;
        java.lang.String $r13, $r18, $r20, $r22;
        boolean $z0;
        ucar.ma2.Range $r10, $r11, $r12;
        org.slf4j.Logger $r16;
        java.util.Iterator $r5;
        java.util.List $r4;
        ucar.ma2.InvalidRangeException $r14;
        java.lang.Object $r8;
        ucar.nc2.Dimension r9;
        java.lang.StringBuilder $r15, $r17, $r19;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: ucar.ma2.Section shapeAsSection>;

        if $r1 != null goto label9;

     label1:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r9 = (ucar.nc2.Dimension) $r8;

        $i0 = virtualinvoke r9.<ucar.nc2.Dimension: int getLength()>();

        if $i0 <= 0 goto label3;

        $r12 = new ucar.ma2.Range;

        $r13 = virtualinvoke r9.<ucar.nc2.Dimension: java.lang.String getName()>();

        $i1 = $i0 - 1;

        specialinvoke $r12.<ucar.ma2.Range: void <init>(java.lang.String,int,int)>($r13, 0, $i1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label5;

     label3:
        if $i0 != 0 goto label4;

        $r11 = <ucar.ma2.Range: ucar.ma2.Range EMPTY>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label5;

     label4:
        $r10 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r10);

     label5:
        goto label2;

     label6:
        $r6 = new ucar.ma2.Section;

        specialinvoke $r6.<ucar.ma2.Section: void <init>(java.util.List)>($r3);

        $r7 = virtualinvoke $r6.<ucar.ma2.Section: ucar.ma2.Section makeImmutable()>();

        r0.<ucar.nc2.Variable: ucar.ma2.Section shapeAsSection> = $r7;

     label7:
        goto label9;

     label8:
        $r14 := @caughtexception;

        $r16 = <ucar.nc2.Variable: org.slf4j.Logger log>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad shape in variable ");

        $r18 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r20, $r14);

        $r21 = new java.lang.IllegalStateException;

        $r22 = virtualinvoke $r14.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label9:
        $r2 = r0.<ucar.nc2.Variable: ucar.ma2.Section shapeAsSection>;

        return $r2;

        catch ucar.ma2.InvalidRangeException from label1 to label7 with label8;
    }

    public ucar.nc2.ProxyReader getProxyReader()
    {
        ucar.nc2.Variable r0;
        ucar.nc2.ProxyReader $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.ProxyReader proxyReader>;

        return $r1;
    }

    public void setProxyReader(ucar.nc2.ProxyReader)
    {
        ucar.nc2.Variable r0;
        ucar.nc2.ProxyReader r1;

        r0 := @this: ucar.nc2.Variable;

        r1 := @parameter0: ucar.nc2.ProxyReader;

        r0.<ucar.nc2.Variable: ucar.nc2.ProxyReader proxyReader> = r1;

        return;
    }

    public ucar.nc2.Variable section(java.util.List) throws ucar.ma2.InvalidRangeException
    {
        java.util.List r2;
        ucar.ma2.Section $r1, $r4;
        int[] $r3;
        ucar.nc2.Variable r0, $r5;

        r0 := @this: ucar.nc2.Variable;

        r2 := @parameter0: java.util.List;

        $r1 = new ucar.ma2.Section;

        $r3 = r0.<ucar.nc2.Variable: int[] shape>;

        specialinvoke $r1.<ucar.ma2.Section: void <init>(java.util.List,int[])>(r2, $r3);

        $r4 = virtualinvoke $r1.<ucar.ma2.Section: ucar.ma2.Section makeImmutable()>();

        $r5 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Variable section(ucar.ma2.Section)>($r4);

        return $r5;
    }

    public ucar.nc2.Variable section(ucar.ma2.Section) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section $r2, r12;
        java.util.ArrayList $r6;
        int[] $r1, $r5, $r8, $r10;
        int $i0, $i1, $i2, $i3, i4;
        ucar.nc2.Variable r0, $r3;
        java.lang.String $r9;
        boolean $z0;
        java.util.List $r11;
        ucar.nc2.SectionReader $r4;
        ucar.nc2.Dimension $r7, $r13;

        r0 := @this: ucar.nc2.Variable;

        r12 := @parameter0: ucar.ma2.Section;

        $r1 = r0.<ucar.nc2.Variable: int[] shape>;

        $r2 = staticinvoke <ucar.ma2.Section: ucar.ma2.Section fill(ucar.ma2.Section,int[])>(r12, $r1);

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Variable copy()>();

        $r4 = new ucar.nc2.SectionReader;

        specialinvoke $r4.<ucar.nc2.SectionReader: void <init>(ucar.nc2.Variable,ucar.ma2.Section)>(r0, $r2);

        virtualinvoke $r3.<ucar.nc2.Variable: void setProxyReader(ucar.nc2.ProxyReader)>($r4);

        $r5 = virtualinvoke $r2.<ucar.ma2.Section: int[] getShape()>();

        $r3.<ucar.nc2.Variable: int[] shape> = $r5;

        virtualinvoke $r3.<ucar.nc2.Variable: void createNewCache()>();

        virtualinvoke $r3.<ucar.nc2.Variable: void setCaching(boolean)>(0);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r3.<ucar.nc2.Variable: java.util.List dimensions> = $r6;

        i4 = 0;

     label1:
        $i0 = virtualinvoke r0.<ucar.nc2.Variable: int getRank()>();

        if i4 >= $i0 goto label4;

        $r7 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Dimension getDimension(int)>(i4);

        $i1 = virtualinvoke $r7.<ucar.nc2.Dimension: int getLength()>();

        $r8 = $r3.<ucar.nc2.Variable: int[] shape>;

        $i2 = $r8[i4];

        if $i1 != $i2 goto label2;

        $r13 = $r7;

        goto label3;

     label2:
        $r13 = new ucar.nc2.Dimension;

        $r9 = virtualinvoke $r7.<ucar.nc2.Dimension: java.lang.String getName()>();

        $r10 = $r3.<ucar.nc2.Variable: int[] shape>;

        $i3 = $r10[i4];

        specialinvoke $r13.<ucar.nc2.Dimension: void <init>(java.lang.String,int,boolean)>($r9, $i3, 0);

     label3:
        $z0 = virtualinvoke $r7.<ucar.nc2.Dimension: boolean isUnlimited()>();

        virtualinvoke $r13.<ucar.nc2.Dimension: void setUnlimited(boolean)>($z0);

        $r11 = $r3.<ucar.nc2.Variable: java.util.List dimensions>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r13);

        i4 = i4 + 1;

        goto label1;

     label4:
        virtualinvoke $r3.<ucar.nc2.Variable: void resetShape()>();

        return $r3;
    }

    public ucar.nc2.Variable slice(int, int) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section $r8, $r9, $r11;
        ucar.nc2.SliceReader $r12;
        int[] $r6, $r21;
        int i0, $i1, i2, $i3;
        ucar.nc2.Variable r5, $r7;
        java.lang.String $r4, $r20;
        boolean z0;
        ucar.ma2.Range $r10;
        ucar.ma2.InvalidRangeException $r0, $r14;
        java.util.List $r13;
        java.lang.StringBuilder $r1, $r2, $r3, $r15, $r16, $r17, $r18, $r19;
        ucar.nc2.Dimension $r22;

        r5 := @this: ucar.nc2.Variable;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        if i0 < 0 goto label1;

        $r6 = r5.<ucar.nc2.Variable: int[] shape>;

        $i1 = lengthof $r6;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new ucar.ma2.InvalidRangeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Slice dim invalid= ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        z0 = 0;

        if i0 != 0 goto label3;

        if i2 != 0 goto label3;

        $r22 = virtualinvoke r5.<ucar.nc2.Variable: ucar.nc2.Dimension getDimension(int)>(0);

        z0 = virtualinvoke $r22.<ucar.nc2.Dimension: boolean isUnlimited()>();

     label3:
        if z0 != 0 goto label5;

        if i2 < 0 goto label4;

        $r21 = r5.<ucar.nc2.Variable: int[] shape>;

        $i3 = $r21[i0];

        if i2 < $i3 goto label5;

     label4:
        $r14 = new ucar.ma2.InvalidRangeException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Slice value invalid= ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for dimension ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>($r20);

        throw $r14;

     label5:
        $r7 = virtualinvoke r5.<ucar.nc2.Variable: ucar.nc2.Variable copy()>();

        $r8 = new ucar.ma2.Section;

        $r9 = virtualinvoke r5.<ucar.nc2.Variable: ucar.ma2.Section getShapeAsSection()>();

        specialinvoke $r8.<ucar.ma2.Section: void <init>(ucar.ma2.Section)>($r9);

        $r10 = new ucar.ma2.Range;

        specialinvoke $r10.<ucar.ma2.Range: void <init>(int,int)>(i2, i2);

        $r11 = virtualinvoke $r8.<ucar.ma2.Section: ucar.ma2.Section replaceRange(int,ucar.ma2.Range)>(i0, $r10);

        virtualinvoke $r11.<ucar.ma2.Section: ucar.ma2.Section makeImmutable()>();

        $r12 = new ucar.nc2.SliceReader;

        specialinvoke $r12.<ucar.nc2.SliceReader: void <init>(ucar.nc2.Variable,int,ucar.ma2.Section)>(r5, i0, $r8);

        virtualinvoke $r7.<ucar.nc2.Variable: void setProxyReader(ucar.nc2.ProxyReader)>($r12);

        virtualinvoke $r7.<ucar.nc2.Variable: void createNewCache()>();

        virtualinvoke $r7.<ucar.nc2.Variable: void setCaching(boolean)>(0);

        $r13 = $r7.<ucar.nc2.Variable: java.util.List dimensions>;

        interfaceinvoke $r13.<java.util.List: java.lang.Object remove(int)>(i0);

        virtualinvoke $r7.<ucar.nc2.Variable: void resetShape()>();

        return $r7;
    }

    protected ucar.nc2.Variable copy()
    {
        ucar.nc2.Variable $r0, r1;

        r1 := @this: ucar.nc2.Variable;

        $r0 = new ucar.nc2.Variable;

        specialinvoke $r0.<ucar.nc2.Variable: void <init>(ucar.nc2.Variable)>(r1);

        return $r0;
    }

    public java.lang.String lookupEnumString(int)
    {
        java.lang.UnsupportedOperationException $r4;
        int i0;
        ucar.ma2.DataType $r1;
        ucar.nc2.Variable r0;
        java.lang.String $r3;
        ucar.nc2.EnumTypedef $r2;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.nc2.Variable: ucar.ma2.DataType dataType>;

        $z0 = virtualinvoke $r1.<ucar.ma2.DataType: boolean isEnum()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Can only call Variable.lookupEnumVal() on enum types");

        throw $r4;

     label1:
        $r2 = r0.<ucar.nc2.Variable: ucar.nc2.EnumTypedef enumTypedef>;

        $r3 = virtualinvoke $r2.<ucar.nc2.EnumTypedef: java.lang.String lookupEnumString(int)>(i0);

        return $r3;
    }

    public void setEnumTypedef(ucar.nc2.EnumTypedef)
    {
        java.lang.UnsupportedOperationException $r3;
        java.lang.IllegalStateException $r4;
        ucar.ma2.DataType $r1;
        ucar.nc2.Variable r0;
        ucar.nc2.EnumTypedef r2;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.Variable;

        r2 := @parameter0: ucar.nc2.EnumTypedef;

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r4;

     label1:
        $r1 = r0.<ucar.nc2.Variable: ucar.ma2.DataType dataType>;

        $z1 = virtualinvoke $r1.<ucar.ma2.DataType: boolean isEnum()>();

        if $z1 != 0 goto label2;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Can only call Variable.setEnumTypedef() on enum types");

        throw $r3;

     label2:
        r0.<ucar.nc2.Variable: ucar.nc2.EnumTypedef enumTypedef> = r2;

        return;
    }

    public ucar.nc2.EnumTypedef getEnumTypedef()
    {
        ucar.nc2.Variable r0;
        ucar.nc2.EnumTypedef $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.EnumTypedef enumTypedef>;

        return $r1;
    }

    public ucar.ma2.Array read(int[], int[]) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section $r3, $r5, $r7;
        ucar.ma2.Array $r4, $r6, $r8, $r9;
        int[] r0, r1;
        ucar.nc2.Variable r2;

        r2 := @this: ucar.nc2.Variable;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        if r0 != null goto label1;

        if r1 != null goto label1;

        $r9 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        return $r9;

     label1:
        if r0 != null goto label2;

        $r7 = new ucar.ma2.Section;

        specialinvoke $r7.<ucar.ma2.Section: void <init>(int[])>(r1);

        $r8 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.Array read(ucar.ma2.Section)>($r7);

        return $r8;

     label2:
        if r1 != null goto label3;

        $r5 = new ucar.ma2.Section;

        specialinvoke $r5.<ucar.ma2.Section: void <init>(int[],int[])>(r0, r1);

        $r6 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.Array read(ucar.ma2.Section)>($r5);

        return $r6;

     label3:
        $r3 = new ucar.ma2.Section;

        specialinvoke $r3.<ucar.ma2.Section: void <init>(int[],int[])>(r0, r1);

        $r4 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.Array read(ucar.ma2.Section)>($r3);

        return $r4;
    }

    public ucar.ma2.Array read(java.lang.String) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section $r1;
        ucar.nc2.Variable r0;
        java.lang.String r2;
        ucar.ma2.Array $r3;

        r0 := @this: ucar.nc2.Variable;

        r2 := @parameter0: java.lang.String;

        $r1 = new ucar.ma2.Section;

        specialinvoke $r1.<ucar.ma2.Section: void <init>(java.lang.String)>(r2);

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Array read(ucar.ma2.Section)>($r1);

        return $r3;
    }

    public ucar.ma2.Array read(java.util.List) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        java.util.List r0;
        ucar.ma2.Section $r2;
        ucar.nc2.Variable r1;
        ucar.ma2.Array $r3, $r4;

        r1 := @this: ucar.nc2.Variable;

        r0 := @parameter0: java.util.List;

        if null != r0 goto label1;

        $r4 = virtualinvoke r1.<ucar.nc2.Variable: ucar.ma2.Array _read()>();

        return $r4;

     label1:
        $r2 = new ucar.ma2.Section;

        specialinvoke $r2.<ucar.ma2.Section: void <init>(java.util.List)>(r0);

        $r3 = virtualinvoke r1.<ucar.nc2.Variable: ucar.ma2.Array read(ucar.ma2.Section)>($r2);

        return $r3;
    }

    public ucar.ma2.Array read(ucar.ma2.Section) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r0, $r3;
        int[] $r2;
        ucar.nc2.Variable r1;
        ucar.ma2.Array $r4;

        r1 := @this: ucar.nc2.Variable;

        r0 := @parameter0: ucar.ma2.Section;

        if r0 != null goto label1;

        $r4 = virtualinvoke r1.<ucar.nc2.Variable: ucar.ma2.Array _read()>();

        goto label2;

     label1:
        $r2 = r1.<ucar.nc2.Variable: int[] shape>;

        $r3 = staticinvoke <ucar.ma2.Section: ucar.ma2.Section fill(ucar.ma2.Section,int[])>(r0, $r2);

        $r4 = virtualinvoke r1.<ucar.nc2.Variable: ucar.ma2.Array _read(ucar.ma2.Section)>($r3);

     label2:
        return $r4;
    }

    public ucar.ma2.Array read() throws java.io.IOException
    {
        ucar.nc2.Variable r0;
        ucar.ma2.Array $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Array _read()>();

        return $r1;
    }

    public byte readScalarByte() throws java.io.IOException
    {
        ucar.ma2.Index0D $r2;
        byte $b0;
        ucar.nc2.Variable r0;
        ucar.ma2.Array $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Array getScalarData()>();

        $r2 = <ucar.ma2.Index: ucar.ma2.Index0D scalarIndexImmutable>;

        $b0 = virtualinvoke $r1.<ucar.ma2.Array: byte getByte(ucar.ma2.Index)>($r2);

        return $b0;
    }

    public short readScalarShort() throws java.io.IOException
    {
        ucar.ma2.Index0D $r2;
        short $s0;
        ucar.nc2.Variable r0;
        ucar.ma2.Array $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Array getScalarData()>();

        $r2 = <ucar.ma2.Index: ucar.ma2.Index0D scalarIndexImmutable>;

        $s0 = virtualinvoke $r1.<ucar.ma2.Array: short getShort(ucar.ma2.Index)>($r2);

        return $s0;
    }

    public int readScalarInt() throws java.io.IOException
    {
        ucar.ma2.Index0D $r2;
        int $i0;
        ucar.nc2.Variable r0;
        ucar.ma2.Array $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Array getScalarData()>();

        $r2 = <ucar.ma2.Index: ucar.ma2.Index0D scalarIndexImmutable>;

        $i0 = virtualinvoke $r1.<ucar.ma2.Array: int getInt(ucar.ma2.Index)>($r2);

        return $i0;
    }

    public long readScalarLong() throws java.io.IOException
    {
        ucar.ma2.Index0D $r2;
        ucar.nc2.Variable r0;
        long $l0;
        ucar.ma2.Array $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Array getScalarData()>();

        $r2 = <ucar.ma2.Index: ucar.ma2.Index0D scalarIndexImmutable>;

        $l0 = virtualinvoke $r1.<ucar.ma2.Array: long getLong(ucar.ma2.Index)>($r2);

        return $l0;
    }

    public float readScalarFloat() throws java.io.IOException
    {
        ucar.ma2.Index0D $r2;
        float $f0;
        ucar.nc2.Variable r0;
        ucar.ma2.Array $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Array getScalarData()>();

        $r2 = <ucar.ma2.Index: ucar.ma2.Index0D scalarIndexImmutable>;

        $f0 = virtualinvoke $r1.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r2);

        return $f0;
    }

    public double readScalarDouble() throws java.io.IOException
    {
        ucar.ma2.Index0D $r2;
        ucar.nc2.Variable r0;
        ucar.ma2.Array $r1;
        double $d0;

        r0 := @this: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Array getScalarData()>();

        $r2 = <ucar.ma2.Index: ucar.ma2.Index0D scalarIndexImmutable>;

        $d0 = virtualinvoke $r1.<ucar.ma2.Array: double getDouble(ucar.ma2.Index)>($r2);

        return $d0;
    }

    public java.lang.String readScalarString() throws java.io.IOException
    {
        ucar.ma2.ArrayChar r12;
        ucar.nc2.Variable r0;
        java.lang.String $r9, $r11, $r13, $r16;
        ucar.ma2.Index0D $r14;
        ucar.ma2.DataType $r2, $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.Array $r1;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.Object $r15;

        r0 := @this: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Array getScalarData()>();

        $r3 = r0.<ucar.nc2.Variable: ucar.ma2.DataType dataType>;

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r3 != $r2 goto label1;

        $r14 = <ucar.ma2.Index: ucar.ma2.Index0D scalarIndexImmutable>;

        $r15 = virtualinvoke $r1.<ucar.ma2.Array: java.lang.Object getObject(ucar.ma2.Index)>($r14);

        $r16 = (java.lang.String) $r15;

        return $r16;

     label1:
        $r5 = r0.<ucar.nc2.Variable: ucar.ma2.DataType dataType>;

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r5 != $r4 goto label2;

        r12 = (ucar.ma2.ArrayChar) $r1;

        $r13 = virtualinvoke r12.<ucar.ma2.ArrayChar: java.lang.String getString()>();

        return $r13;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readScalarString not STRING or CHAR ");

        $r9 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;
    }

    protected ucar.ma2.Array getScalarData() throws java.io.IOException
    {
        int $i0, $i1;
        ucar.nc2.Variable r0;
        java.lang.String $r6;
        ucar.nc2.Variable$Cache $r1, $r9, $r11;
        java.lang.UnsupportedOperationException $r2;
        ucar.ma2.DataType $r7, $r8;
        ucar.ma2.Array $r10, $r12, $r13;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        if $r1 == null goto label1;

        $r9 = r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $r10 = $r9.<ucar.nc2.Variable$Cache: ucar.ma2.Array data>;

        if $r10 == null goto label1;

        $r11 = r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $r12 = $r11.<ucar.nc2.Variable$Cache: ucar.ma2.Array data>;

        goto label2;

     label1:
        $r12 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Array read()>();

     label2:
        $r13 = virtualinvoke $r12.<ucar.ma2.Array: ucar.ma2.Array reduce()>();

        $i1 = virtualinvoke $r13.<ucar.ma2.Array: int getRank()>();

        if $i1 == 0 goto label3;

        $i0 = virtualinvoke $r13.<ucar.ma2.Array: int getRank()>();

        if $i0 != 1 goto label4;

        $r8 = r0.<ucar.nc2.Variable: ucar.ma2.DataType dataType>;

        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r8 != $r7 goto label4;

     label3:
        return $r13;

     label4:
        $r2 = new java.lang.UnsupportedOperationException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not a scalar variable =");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    protected ucar.ma2.Array _read() throws java.io.IOException
    {
        ucar.nc2.Variable r0;
        java.lang.String $r10, $r12, $r21, $r23;
        ucar.nc2.ProxyReader $r2;
        ucar.nc2.Variable$Cache $r1, $r4, $r13, $r15;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r8, $r19;
        ucar.ma2.Array $r3, $r5, $r6, $r14, $r16, $r17;
        java.lang.StringBuilder $r7, $r9, $r11, $r18, $r20, $r22;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        if $r1 == null goto label2;

        $r13 = r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $r14 = $r13.<ucar.nc2.Variable$Cache: ucar.ma2.Array data>;

        if $r14 == null goto label2;

        $z2 = <ucar.nc2.Variable: boolean debugCaching>;

        if $z2 == 0 goto label1;

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got data from cache ");

        $r21 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r23);

     label1:
        $r15 = r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $r16 = $r15.<ucar.nc2.Variable$Cache: ucar.ma2.Array data>;

        $r17 = virtualinvoke $r16.<ucar.ma2.Array: ucar.ma2.Array copy()>();

        return $r17;

     label2:
        $r2 = r0.<ucar.nc2.Variable: ucar.nc2.ProxyReader proxyReader>;

        $r3 = interfaceinvoke $r2.<ucar.nc2.ProxyReader: ucar.ma2.Array reallyRead(ucar.nc2.Variable,ucar.nc2.util.CancelTask)>(r0, null);

        $z0 = virtualinvoke r0.<ucar.nc2.Variable: boolean isCaching()>();

        if $z0 == 0 goto label4;

        virtualinvoke r0.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array)>($r3);

        $z1 = <ucar.nc2.Variable: boolean debugCaching>;

        if $z1 == 0 goto label3;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cache ");

        $r10 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label3:
        $r4 = r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $r5 = $r4.<ucar.nc2.Variable$Cache: ucar.ma2.Array data>;

        $r6 = virtualinvoke $r5.<ucar.ma2.Array: ucar.ma2.Array copy()>();

        return $r6;

     label4:
        return $r3;
    }

    public ucar.ma2.Array reallyRead(ucar.nc2.Variable, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        ucar.ma2.Section $r2;
        ucar.ma2.ArrayStructure r9;
        ucar.nc2.Structure $r6, $r7;
        ucar.ma2.StructureMembers$Member $r11;
        java.util.ArrayList $r4;
        ucar.nc2.util.CancelTask r17;
        ucar.nc2.Variable r0, r16;
        java.lang.String $r5, $r10, $r15;
        boolean $z0;
        java.io.IOException $r14;
        ucar.ma2.Array $r3, $r8, $r12;
        ucar.ma2.InvalidRangeException $r13;
        ucar.nc2.NetcdfFile $r1;

        r0 := @this: ucar.nc2.Variable;

        r16 := @parameter0: ucar.nc2.Variable;

        r17 := @parameter1: ucar.nc2.util.CancelTask;

        $z0 = virtualinvoke r0.<ucar.nc2.Variable: boolean isMemberOfStructure()>();

        if $z0 == 0 goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = r0.<ucar.nc2.Variable: ucar.nc2.Structure parent>;

        $r7 = virtualinvoke $r6.<ucar.nc2.Structure: ucar.nc2.Structure select(java.util.List)>($r4);

        $r8 = virtualinvoke $r7.<ucar.nc2.Structure: ucar.ma2.Array read()>();

        r9 = (ucar.ma2.ArrayStructure) $r8;

        $r10 = r0.<ucar.nc2.Variable: java.lang.String shortName>;

        $r11 = virtualinvoke r9.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>($r10);

        $r12 = virtualinvoke r9.<ucar.ma2.ArrayStructure: ucar.ma2.Array extractMemberArray(ucar.ma2.StructureMembers$Member)>($r11);

        return $r12;

     label1:
        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.NetcdfFile ncfile>;

        $r2 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Section getShapeAsSection()>();

        $r3 = virtualinvoke $r1.<ucar.nc2.NetcdfFile: ucar.ma2.Array readData(ucar.nc2.Variable,ucar.ma2.Section)>(r0, $r2);

     label2:
        return $r3;

     label3:
        $r13 := @caughtexception;

        virtualinvoke $r13.<ucar.ma2.InvalidRangeException: void printStackTrace()>();

        $r14 = new java.io.IOException;

        $r15 = virtualinvoke $r13.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r14;

        catch ucar.ma2.InvalidRangeException from label1 to label2 with label3;
    }

    protected ucar.ma2.Array _read(ucar.ma2.Section) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r0;
        long $l0, $l1;
        byte $b2;
        ucar.nc2.Variable r1;
        java.lang.String $r15, $r17, $r22, $r24;
        ucar.nc2.ProxyReader $r3;
        ucar.nc2.Variable$Cache $r5, $r7;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r13, $r20;
        ucar.ma2.Array $r2, $r4, $r6, $r8, $r10, $r11, $r18;
        java.util.List $r9;
        java.lang.StringBuilder $r12, $r14, $r16, $r19, $r21, $r23;

        r1 := @this: ucar.nc2.Variable;

        r0 := @parameter0: ucar.ma2.Section;

        if null == r0 goto label1;

        $l0 = virtualinvoke r0.<ucar.ma2.Section: long computeSize()>();

        $l1 = virtualinvoke r1.<ucar.nc2.Variable: long getSize()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label2;

     label1:
        $r2 = virtualinvoke r1.<ucar.nc2.Variable: ucar.ma2.Array _read()>();

        return $r2;

     label2:
        $z0 = virtualinvoke r1.<ucar.nc2.Variable: boolean isCaching()>();

        if $z0 == 0 goto label5;

        $r5 = r1.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $r6 = $r5.<ucar.nc2.Variable$Cache: ucar.ma2.Array data>;

        if $r6 != null goto label3;

        $r18 = virtualinvoke r1.<ucar.nc2.Variable: ucar.ma2.Array _read()>();

        virtualinvoke r1.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array)>($r18);

        $z1 = <ucar.nc2.Variable: boolean debugCaching>;

        if $z1 == 0 goto label3;

        $r20 = <java.lang.System: java.io.PrintStream out>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cache ");

        $r22 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r24);

     label3:
        $z2 = <ucar.nc2.Variable: boolean debugCaching>;

        if $z2 == 0 goto label4;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got data from cache ");

        $r15 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r17);

     label4:
        $r7 = r1.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $r8 = $r7.<ucar.nc2.Variable$Cache: ucar.ma2.Array data>;

        $r9 = virtualinvoke r0.<ucar.ma2.Section: java.util.List getRanges()>();

        $r10 = virtualinvoke $r8.<ucar.ma2.Array: ucar.ma2.Array sectionNoReduce(java.util.List)>($r9);

        $r11 = virtualinvoke $r10.<ucar.ma2.Array: ucar.ma2.Array copy()>();

        return $r11;

     label5:
        $r3 = r1.<ucar.nc2.Variable: ucar.nc2.ProxyReader proxyReader>;

        $r4 = interfaceinvoke $r3.<ucar.nc2.ProxyReader: ucar.ma2.Array reallyRead(ucar.nc2.Variable,ucar.ma2.Section,ucar.nc2.util.CancelTask)>(r1, r0, null);

        return $r4;
    }

    public ucar.ma2.Array reallyRead(ucar.nc2.Variable, ucar.ma2.Section, ucar.nc2.util.CancelTask) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        java.lang.UnsupportedOperationException $r4;
        ucar.ma2.Section r1;
        ucar.ma2.Array $r3;
        ucar.nc2.util.CancelTask r11;
        ucar.nc2.Variable r0, r10;
        java.lang.StringBuilder $r5, $r6, $r8;
        ucar.nc2.NetcdfFile $r2;
        java.lang.String $r7, $r9;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        r10 := @parameter0: ucar.nc2.Variable;

        r1 := @parameter1: ucar.ma2.Section;

        r11 := @parameter2: ucar.nc2.util.CancelTask;

        $z0 = virtualinvoke r0.<ucar.nc2.Variable: boolean isMemberOfStructure()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot directly read section of Member Variable=");

        $r7 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        $r2 = r0.<ucar.nc2.Variable: ucar.nc2.NetcdfFile ncfile>;

        $r3 = virtualinvoke $r2.<ucar.nc2.NetcdfFile: ucar.ma2.Array readData(ucar.nc2.Variable,ucar.ma2.Section)>(r0, r1);

        return $r3;
    }

    public long readToByteChannel(ucar.ma2.Section, java.nio.channels.WritableByteChannel) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r2;
        long $l0, $l1;
        ucar.ma2.Array $r3;
        java.nio.channels.WritableByteChannel r4;
        ucar.nc2.Variable r0;
        ucar.nc2.NetcdfFile $r1, $r5;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        r2 := @parameter0: ucar.ma2.Section;

        r4 := @parameter1: java.nio.channels.WritableByteChannel;

        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.NetcdfFile ncfile>;

        if $r1 == null goto label1;

        $z0 = virtualinvoke r0.<ucar.nc2.Variable: boolean hasCachedData()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Array read(ucar.ma2.Section)>(r2);

        $l0 = staticinvoke <ucar.nc2.iosp.IospHelper: long copyToByteChannel(ucar.ma2.Array,java.nio.channels.WritableByteChannel)>($r3, r4);

        return $l0;

     label2:
        $r5 = r0.<ucar.nc2.Variable: ucar.nc2.NetcdfFile ncfile>;

        $l1 = virtualinvoke $r5.<ucar.nc2.NetcdfFile: long readToByteChannel(ucar.nc2.Variable,ucar.ma2.Section,java.nio.channels.WritableByteChannel)>(r0, r2, r4);

        return $l1;
    }

    public java.lang.String getNameAndDimensions()
    {
        ucar.nc2.Variable r1;
        java.lang.String $r2;
        java.util.Formatter $r0;

        r1 := @this: ucar.nc2.Variable;

        $r0 = new java.util.Formatter;

        specialinvoke $r0.<java.util.Formatter: void <init>()>();

        virtualinvoke r1.<ucar.nc2.Variable: void getNameAndDimensions(java.util.Formatter,boolean,boolean)>($r0, 1, 0);

        $r2 = virtualinvoke $r0.<java.util.Formatter: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String getNameAndDimensions(boolean)
    {
        ucar.nc2.Variable r1;
        java.lang.String $r2;
        java.util.Formatter $r0;
        boolean z0;

        r1 := @this: ucar.nc2.Variable;

        z0 := @parameter0: boolean;

        $r0 = new java.util.Formatter;

        specialinvoke $r0.<java.util.Formatter: void <init>()>();

        virtualinvoke r1.<ucar.nc2.Variable: void getNameAndDimensions(java.util.Formatter,boolean,boolean)>($r0, 0, z0);

        $r2 = virtualinvoke $r0.<java.util.Formatter: java.lang.String toString()>();

        return $r2;
    }

    public void getNameAndDimensions(java.lang.StringBuilder)
    {
        ucar.nc2.Variable r0;
        java.lang.StringBuilder r1;

        r0 := @this: ucar.nc2.Variable;

        r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r0.<ucar.nc2.Variable: void getNameAndDimensions(java.lang.StringBuilder,boolean,boolean)>(r1, 1, 0);

        return;
    }

    public void getNameAndDimensions(java.lang.StringBuffer)
    {
        java.lang.StringBuffer r2;
        ucar.nc2.Variable r1;
        java.lang.String $r3;
        java.util.Formatter $r0;

        r1 := @this: ucar.nc2.Variable;

        r2 := @parameter0: java.lang.StringBuffer;

        $r0 = new java.util.Formatter;

        specialinvoke $r0.<java.util.Formatter: void <init>()>();

        virtualinvoke r1.<ucar.nc2.Variable: void getNameAndDimensions(java.util.Formatter,boolean,boolean)>($r0, 1, 0);

        $r3 = virtualinvoke $r0.<java.util.Formatter: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        return;
    }

    public void getNameAndDimensions(java.lang.StringBuilder, boolean, boolean)
    {
        ucar.nc2.Variable r1;
        java.lang.StringBuilder r2;
        java.lang.String $r3;
        java.util.Formatter $r0;
        boolean z0, z1;

        r1 := @this: ucar.nc2.Variable;

        r2 := @parameter0: java.lang.StringBuilder;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r0 = new java.util.Formatter;

        specialinvoke $r0.<java.util.Formatter: void <init>()>();

        virtualinvoke r1.<ucar.nc2.Variable: void getNameAndDimensions(java.util.Formatter,boolean,boolean)>($r0, z0, z1);

        $r3 = virtualinvoke $r0.<java.util.Formatter: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        return;
    }

    public void getNameAndDimensions(java.util.Formatter, boolean, boolean)
    {
        java.lang.Integer $r9, $r13;
        java.util.Formatter r1;
        boolean z0, $z1, $z2, z3, $z4;
        java.util.List $r4, $r19;
        java.lang.Object[] $r2, $r3, $r8, $r10, $r11, $r12, $r14, $r15, $r16;
        int $i0, $i1, $i2, $i3, i4, $i5;
        ucar.nc2.Variable r0;
        java.lang.String $r7, $r17, r18, r20;
        java.lang.Object $r5;
        ucar.nc2.Dimension r6;

        r0 := @this: ucar.nc2.Variable;

        r1 := @parameter0: java.util.Formatter;

        z3 := @parameter1: boolean;

        z0 := @parameter2: boolean;

        if z3 == 0 goto label01;

        if z0 != 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        if $z4 == 0 goto label03;

        $r17 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        goto label04;

     label03:
        $r17 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

     label04:
        r18 = $r17;

        if z0 == 0 goto label05;

        r18 = staticinvoke <ucar.nc2.NetcdfFile: java.lang.String escapeName(java.lang.String)>($r17);

     label05:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r18;

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s", $r2);

        $i0 = virtualinvoke r0.<ucar.nc2.Variable: int getRank()>();

        if $i0 <= 0 goto label06;

        $r16 = newarray (java.lang.Object)[0];

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("(", $r16);

     label06:
        i4 = 0;

     label07:
        $r19 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $i5 = interfaceinvoke $r19.<java.util.List: int size()>();

        if i4 >= $i5 goto label15;

        $r4 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i4);

        r6 = (ucar.nc2.Dimension) $r5;

        $r7 = virtualinvoke r6.<ucar.nc2.Dimension: java.lang.String getName()>();

        r20 = $r7;

        if $r7 == null goto label08;

        if z0 == 0 goto label08;

        r20 = staticinvoke <ucar.nc2.NetcdfFile: java.lang.String escapeName(java.lang.String)>($r7);

     label08:
        if i4 == 0 goto label09;

        $r15 = newarray (java.lang.Object)[0];

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(", ", $r15);

     label09:
        $z1 = virtualinvoke r6.<ucar.nc2.Dimension: boolean isVariableLength()>();

        if $z1 == 0 goto label10;

        $r14 = newarray (java.lang.Object)[0];

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("*", $r14);

        goto label14;

     label10:
        $z2 = virtualinvoke r6.<ucar.nc2.Dimension: boolean isShared()>();

        if $z2 == 0 goto label12;

        if z0 != 0 goto label11;

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = r20;

        $i3 = virtualinvoke r6.<ucar.nc2.Dimension: int getLength()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r12[1] = $r13;

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s=%d", $r12);

        goto label14;

     label11:
        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r20;

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s", $r11);

        goto label14;

     label12:
        if r20 == null goto label13;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r20;

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s=", $r10);

     label13:
        $r8 = newarray (java.lang.Object)[1];

        $i2 = virtualinvoke r6.<ucar.nc2.Dimension: int getLength()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r8[0] = $r9;

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%d", $r8);

     label14:
        i4 = i4 + 1;

        goto label07;

     label15:
        $i1 = virtualinvoke r0.<ucar.nc2.Variable: int getRank()>();

        if $i1 <= 0 goto label16;

        $r3 = newarray (java.lang.Object)[0];

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(")", $r3);

     label16:
        return;
    }

    public java.lang.String toString()
    {
        ucar.nc2.Variable r0;
        java.lang.String $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String writeCDL(java.lang.String,boolean,boolean)>("   ", 0, 0);

        return $r1;
    }

    public java.lang.String writeCDL(java.lang.String, boolean, boolean)
    {
        ucar.nc2.Variable r1;
        java.lang.String r2, $r3;
        java.util.Formatter $r0;
        boolean z0, z1;

        r1 := @this: ucar.nc2.Variable;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r0 = new java.util.Formatter;

        specialinvoke $r0.<java.util.Formatter: void <init>()>();

        virtualinvoke r1.<ucar.nc2.Variable: void writeCDL(java.util.Formatter,java.lang.String,boolean,boolean)>($r0, r2, z0, z1);

        $r3 = virtualinvoke $r0.<java.util.Formatter: java.lang.String toString()>();

        return $r3;
    }

    protected void writeCDL(java.util.Formatter, java.lang.String, boolean, boolean)
    {
        java.util.Formatter r0;
        boolean $z0, z1, z2, $z3;
        ucar.ma2.DataType $r4, $r5, $r16, $r17, $r19;
        java.util.List $r9;
        ucar.nc2.Attribute r12;
        java.lang.Object[] $r2, $r7, $r8, $r13, $r14, $r18, $r22, $r24, $r26, $r29, $r30, $r31, $r32;
        ucar.nc2.Variable r3;
        java.lang.String r1, $r6, $r15, $r20, $r21, $r23, $r28;
        java.util.Iterator $r10;
        ucar.nc2.EnumTypedef $r25, $r27;
        java.lang.Object $r11;

        r3 := @this: ucar.nc2.Variable;

        r0 := @parameter0: java.util.Formatter;

        r1 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        $r2 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(r1, $r2);

        $r4 = r3.<ucar.nc2.Variable: ucar.ma2.DataType dataType>;

        $z0 = virtualinvoke $r4.<ucar.ma2.DataType: boolean isEnum()>();

        if $z0 == 0 goto label2;

        $r25 = r3.<ucar.nc2.Variable: ucar.nc2.EnumTypedef enumTypedef>;

        if $r25 != null goto label1;

        $r29 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("enum UNKNOWN", $r29);

        goto label3;

     label1:
        $r26 = newarray (java.lang.Object)[1];

        $r27 = r3.<ucar.nc2.Variable: ucar.nc2.EnumTypedef enumTypedef>;

        $r28 = virtualinvoke $r27.<ucar.nc2.EnumTypedef: java.lang.String getName()>();

        $r26[0] = $r28;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("enum %s", $r26);

        goto label3;

     label2:
        $r5 = r3.<ucar.nc2.Variable: ucar.ma2.DataType dataType>;

        $r6 = virtualinvoke $r5.<ucar.ma2.DataType: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>($r6, $r7);

     label3:
        $r30 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" ", $r30);

        virtualinvoke r3.<ucar.nc2.Variable: void getNameAndDimensions(java.util.Formatter,boolean,boolean)>(r0, z1, z2);

        $r31 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(";", $r31);

        if z2 != 0 goto label4;

        $r23 = virtualinvoke r3.<ucar.nc2.Variable: java.lang.String extraInfo()>();

        $r24 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>($r23, $r24);

     label4:
        $r8 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("\n", $r8);

        $r9 = virtualinvoke r3.<ucar.nc2.Variable: java.util.List getAttributes()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (ucar.nc2.Attribute) $r11;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r1;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s  ", $r13);

        if z2 == 0 goto label6;

        $r20 = virtualinvoke r3.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r21 = staticinvoke <ucar.nc2.NetcdfFile: java.lang.String escapeName(java.lang.String)>($r20);

        $r22 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>($r21, $r22);

     label6:
        $r14 = newarray (java.lang.Object)[1];

        $r15 = virtualinvoke r12.<ucar.nc2.Attribute: java.lang.String toString(boolean)>(z2);

        $r14[0] = $r15;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(":%s;", $r14);

        if z2 != 0 goto label7;

        $r16 = virtualinvoke r12.<ucar.nc2.Attribute: ucar.ma2.DataType getDataType()>();

        $r17 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r16 == $r17 goto label7;

        $r18 = newarray (java.lang.Object)[1];

        $r19 = virtualinvoke r12.<ucar.nc2.Attribute: ucar.ma2.DataType getDataType()>();

        $r18[0] = $r19;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" // %s", $r18);

     label7:
        $r32 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("\n", $r32);

        goto label5;

     label8:
        return;
    }

    public java.lang.String toStringDebug()
    {
        ucar.nc2.Variable r0;
        ucar.nc2.NetcdfFile $r1;
        java.lang.String $r2;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.NetcdfFile ncfile>;

        $r2 = virtualinvoke $r1.<ucar.nc2.NetcdfFile: java.lang.String toStringDebug(java.lang.Object)>(r0);

        return $r2;
    }

    protected java.lang.String extraInfo()
    {
        long $l1;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5;
        ucar.nc2.Variable r2;
        java.lang.String $r6;
        boolean $z0;

        r2 := @this: ucar.nc2.Variable;

        $z0 = <ucar.nc2.Variable: boolean showSize>;

        if $z0 == 0 goto label1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" // ");

        $i0 = virtualinvoke r2.<ucar.nc2.Variable: int getElementSize()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $l1 = virtualinvoke r2.<ucar.nc2.Variable: long getSize()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r6 = "";

     label2:
        return $r6;
    }

    public boolean equals(java.lang.Object)
    {
        ucar.nc2.Structure $r9, $r15, $r16;
        int $i0, $i1, $i2, i3;
        ucar.nc2.Variable r0, r2;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        ucar.ma2.DataType $r5, $r6;
        ucar.nc2.Group $r7, $r8;
        java.util.List $r10, $r11, $r12;
        java.lang.Object r1;
        ucar.nc2.Dimension $r13, $r14;

        r0 := @this: ucar.nc2.Variable;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = r1 instanceof ucar.nc2.Variable;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r2 = (ucar.nc2.Variable) r1;

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r4 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label03;

        return 0;

     label03:
        $z2 = virtualinvoke r0.<ucar.nc2.Variable: boolean isScalar()>();

        $z3 = virtualinvoke r2.<ucar.nc2.Variable: boolean isScalar()>();

        if $z2 == $z3 goto label04;

        return 0;

     label04:
        $r5 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r6 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        if $r5 == $r6 goto label05;

        return 0;

     label05:
        $r7 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Group getParentGroup()>();

        $r8 = virtualinvoke r2.<ucar.nc2.Variable: ucar.nc2.Group getParentGroup()>();

        $z4 = virtualinvoke $r7.<ucar.nc2.Group: boolean equals(java.lang.Object)>($r8);

        if $z4 != 0 goto label06;

        return 0;

     label06:
        $r9 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Structure getParentStructure()>();

        if $r9 == null goto label07;

        $r15 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Structure getParentStructure()>();

        $r16 = virtualinvoke r2.<ucar.nc2.Variable: ucar.nc2.Structure getParentStructure()>();

        $z8 = virtualinvoke $r15.<ucar.nc2.Structure: boolean equals(java.lang.Object)>($r16);

        if $z8 != 0 goto label07;

        return 0;

     label07:
        $z5 = virtualinvoke r0.<ucar.nc2.Variable: boolean isVariableLength()>();

        $z6 = virtualinvoke r2.<ucar.nc2.Variable: boolean isVariableLength()>();

        if $z5 == $z6 goto label08;

        return 0;

     label08:
        $r10 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        $r11 = virtualinvoke r2.<ucar.nc2.Variable: java.util.List getDimensions()>();

        $i1 = interfaceinvoke $r11.<java.util.List: int size()>();

        if $i0 == $i1 goto label09;

        return 0;

     label09:
        i3 = 0;

     label10:
        $r12 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $i2 = interfaceinvoke $r12.<java.util.List: int size()>();

        if i3 >= $i2 goto label12;

        $r13 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Dimension getDimension(int)>(i3);

        $r14 = virtualinvoke r2.<ucar.nc2.Variable: ucar.nc2.Dimension getDimension(int)>(i3);

        $z7 = virtualinvoke $r13.<ucar.nc2.Dimension: boolean equals(java.lang.Object)>($r14);

        if $z7 != 0 goto label11;

        return 0;

     label11:
        i3 = i3 + 1;

        goto label10;

     label12:
        return 1;
    }

    public int hashCode()
    {
        ucar.nc2.Structure $r4, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, $i15;
        ucar.nc2.Variable r0;
        java.lang.String $r1;
        boolean $z0, $z1;
        ucar.ma2.DataType $r2;
        ucar.nc2.Group $r3;
        java.util.List $r5;

        r0 := @this: ucar.nc2.Variable;

        $i0 = r0.<ucar.nc2.Variable: int hashCode>;

        if $i0 != 0 goto label4;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        i13 = 629 + $i1;

        $z0 = virtualinvoke r0.<ucar.nc2.Variable: boolean isScalar()>();

        if $z0 == 0 goto label1;

        i13 = i13 + 1;

     label1:
        $i2 = 37 * i13;

        $r2 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $i3 = virtualinvoke $r2.<ucar.ma2.DataType: int hashCode()>();

        $i11 = $i2 + $i3;

        $i4 = 37 * $i11;

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Group getParentGroup()>();

        $i5 = virtualinvoke $r3.<ucar.nc2.Group: int hashCode()>();

        $i12 = $i4 + $i5;

        i14 = $i12;

        $r4 = r0.<ucar.nc2.Variable: ucar.nc2.Structure parent>;

        if $r4 == null goto label2;

        $i9 = 37 * $i12;

        $r6 = r0.<ucar.nc2.Variable: ucar.nc2.Structure parent>;

        $i10 = virtualinvoke $r6.<ucar.nc2.Structure: int hashCode()>();

        i14 = $i9 + $i10;

     label2:
        $z1 = r0.<ucar.nc2.Variable: boolean isVariableLength>;

        if $z1 == 0 goto label3;

        i14 = i14 + 1;

     label3:
        $i6 = 37 * i14;

        $r5 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $i7 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();

        $i8 = $i6 + $i7;

        r0.<ucar.nc2.Variable: int hashCode> = $i8;

     label4:
        $i15 = r0.<ucar.nc2.Variable: int hashCode>;

        return $i15;
    }

    public int compareTo(ucar.nc2.VariableSimpleIF)
    {
        ucar.nc2.VariableSimpleIF r2;
        int $i0;
        ucar.nc2.Variable r0;
        java.lang.String $r1, $r3;

        r0 := @this: ucar.nc2.Variable;

        r2 := @parameter0: ucar.nc2.VariableSimpleIF;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r3 = interfaceinvoke r2.<ucar.nc2.VariableSimpleIF: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        return $i0;
    }

    protected void <init>()
    {
        int $i1;
        ucar.nc2.Variable r0;
        ucar.nc2.Variable$Cache $r6;
        java.util.ArrayList $r4, $r5;

        r0 := @this: ucar.nc2.Variable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(5);

        r0.<ucar.nc2.Variable: java.util.List dimensions> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.Variable: java.util.List attributes> = $r5;

        r0.<ucar.nc2.Variable: boolean isVariableLength> = 0;

        r0.<ucar.nc2.Variable: boolean isMetadata> = 0;

        r0.<ucar.nc2.Variable: boolean immutable> = 0;

        $r6 = new ucar.nc2.Variable$Cache;

        specialinvoke $r6.<ucar.nc2.Variable$Cache: void <init>()>();

        r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache> = $r6;

        $i1 = (int) -1;

        r0.<ucar.nc2.Variable: int sizeToCache> = $i1;

        r0.<ucar.nc2.Variable: ucar.nc2.Structure parent> = null;

        r0.<ucar.nc2.Variable: ucar.nc2.ProxyReader proxyReader> = r0;

        r0.<ucar.nc2.Variable: int hashCode> = 0;

        return;
    }

    public void <init>(ucar.nc2.NetcdfFile, ucar.nc2.Group, ucar.nc2.Structure, java.lang.String)
    {
        ucar.nc2.Group r5, $r8;
        ucar.nc2.Structure r6;
        java.util.ArrayList $r9, $r10;
        int $i1;
        ucar.nc2.Variable r0;
        ucar.nc2.NetcdfFile r4;
        java.lang.String r7;
        ucar.nc2.Variable$Cache $r11;

        r0 := @this: ucar.nc2.Variable;

        r4 := @parameter0: ucar.nc2.NetcdfFile;

        r5 := @parameter1: ucar.nc2.Group;

        r6 := @parameter2: ucar.nc2.Structure;

        r7 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(5);

        r0.<ucar.nc2.Variable: java.util.List dimensions> = $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.Variable: java.util.List attributes> = $r10;

        r0.<ucar.nc2.Variable: boolean isVariableLength> = 0;

        r0.<ucar.nc2.Variable: boolean isMetadata> = 0;

        r0.<ucar.nc2.Variable: boolean immutable> = 0;

        $r11 = new ucar.nc2.Variable$Cache;

        specialinvoke $r11.<ucar.nc2.Variable$Cache: void <init>()>();

        r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache> = $r11;

        $i1 = (int) -1;

        r0.<ucar.nc2.Variable: int sizeToCache> = $i1;

        r0.<ucar.nc2.Variable: ucar.nc2.Structure parent> = null;

        r0.<ucar.nc2.Variable: ucar.nc2.ProxyReader proxyReader> = r0;

        r0.<ucar.nc2.Variable: int hashCode> = 0;

        r0.<ucar.nc2.Variable: ucar.nc2.NetcdfFile ncfile> = r4;

        if r5 != null goto label1;

        $r8 = virtualinvoke r4.<ucar.nc2.NetcdfFile: ucar.nc2.Group getRootGroup()>();

        goto label2;

     label1:
        $r8 = r5;

     label2:
        r0.<ucar.nc2.Variable: ucar.nc2.Group group> = $r8;

        r0.<ucar.nc2.Variable: ucar.nc2.Structure parent> = r6;

        r0.<ucar.nc2.Variable: java.lang.String shortName> = r7;

        return;
    }

    public void <init>(ucar.nc2.NetcdfFile, ucar.nc2.Group, ucar.nc2.Structure, java.lang.String, ucar.ma2.DataType, java.lang.String)
    {
        ucar.ma2.DataType r8;
        ucar.nc2.Group r5, $r10;
        ucar.nc2.Structure r6;
        java.util.ArrayList $r11, $r12;
        int $i1;
        ucar.nc2.Variable r0;
        ucar.nc2.NetcdfFile r4;
        java.lang.String r7, r9;
        ucar.nc2.Variable$Cache $r13;

        r0 := @this: ucar.nc2.Variable;

        r4 := @parameter0: ucar.nc2.NetcdfFile;

        r5 := @parameter1: ucar.nc2.Group;

        r6 := @parameter2: ucar.nc2.Structure;

        r7 := @parameter3: java.lang.String;

        r8 := @parameter4: ucar.ma2.DataType;

        r9 := @parameter5: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>(5);

        r0.<ucar.nc2.Variable: java.util.List dimensions> = $r11;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.Variable: java.util.List attributes> = $r12;

        r0.<ucar.nc2.Variable: boolean isVariableLength> = 0;

        r0.<ucar.nc2.Variable: boolean isMetadata> = 0;

        r0.<ucar.nc2.Variable: boolean immutable> = 0;

        $r13 = new ucar.nc2.Variable$Cache;

        specialinvoke $r13.<ucar.nc2.Variable$Cache: void <init>()>();

        r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache> = $r13;

        $i1 = (int) -1;

        r0.<ucar.nc2.Variable: int sizeToCache> = $i1;

        r0.<ucar.nc2.Variable: ucar.nc2.Structure parent> = null;

        r0.<ucar.nc2.Variable: ucar.nc2.ProxyReader proxyReader> = r0;

        r0.<ucar.nc2.Variable: int hashCode> = 0;

        r0.<ucar.nc2.Variable: ucar.nc2.NetcdfFile ncfile> = r4;

        if r5 != null goto label1;

        $r10 = virtualinvoke r4.<ucar.nc2.NetcdfFile: ucar.nc2.Group getRootGroup()>();

        goto label2;

     label1:
        $r10 = r5;

     label2:
        r0.<ucar.nc2.Variable: ucar.nc2.Group group> = $r10;

        r0.<ucar.nc2.Variable: ucar.nc2.Structure parent> = r6;

        r0.<ucar.nc2.Variable: java.lang.String shortName> = r7;

        virtualinvoke r0.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>(r8);

        virtualinvoke r0.<ucar.nc2.Variable: void setDimensions(java.lang.String)>(r9);

        return;
    }

    public void <init>(ucar.nc2.Variable)
    {
        ucar.nc2.Structure $r14;
        java.util.ArrayList $r18, $r19, $r21, $r22;
        int[] $r15;
        int $i0, $i1, $i3;
        ucar.nc2.Variable r0, r5;
        java.lang.String $r16;
        ucar.nc2.Variable$Cache $r7, $r20;
        boolean $z0, $z1;
        ucar.ma2.DataType $r8;
        ucar.nc2.Group $r12;
        ucar.nc2.EnumTypedef $r11;
        java.util.List $r6, $r10;
        java.lang.Object $r17;
        ucar.nc2.NetcdfFile $r13;

        r0 := @this: ucar.nc2.Variable;

        r5 := @parameter0: ucar.nc2.Variable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>(int)>(5);

        r0.<ucar.nc2.Variable: java.util.List dimensions> = $r18;

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.Variable: java.util.List attributes> = $r19;

        r0.<ucar.nc2.Variable: boolean isVariableLength> = 0;

        r0.<ucar.nc2.Variable: boolean isMetadata> = 0;

        r0.<ucar.nc2.Variable: boolean immutable> = 0;

        $r20 = new ucar.nc2.Variable$Cache;

        specialinvoke $r20.<ucar.nc2.Variable$Cache: void <init>()>();

        r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache> = $r20;

        $i3 = (int) -1;

        r0.<ucar.nc2.Variable: int sizeToCache> = $i3;

        r0.<ucar.nc2.Variable: ucar.nc2.Structure parent> = null;

        r0.<ucar.nc2.Variable: ucar.nc2.ProxyReader proxyReader> = r0;

        r0.<ucar.nc2.Variable: int hashCode> = 0;

        $r21 = new java.util.ArrayList;

        $r6 = r5.<ucar.nc2.Variable: java.util.List attributes>;

        specialinvoke $r21.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        r0.<ucar.nc2.Variable: java.util.List attributes> = $r21;

        $r7 = r5.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache> = $r7;

        $r8 = virtualinvoke r5.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        r0.<ucar.nc2.Variable: ucar.ma2.DataType dataType> = $r8;

        $r22 = new java.util.ArrayList;

        $r10 = r5.<ucar.nc2.Variable: java.util.List dimensions>;

        specialinvoke $r22.<java.util.ArrayList: void <init>(java.util.Collection)>($r10);

        r0.<ucar.nc2.Variable: java.util.List dimensions> = $r22;

        $i0 = virtualinvoke r5.<ucar.nc2.Variable: int getElementSize()>();

        r0.<ucar.nc2.Variable: int elementSize> = $i0;

        $r11 = r5.<ucar.nc2.Variable: ucar.nc2.EnumTypedef enumTypedef>;

        r0.<ucar.nc2.Variable: ucar.nc2.EnumTypedef enumTypedef> = $r11;

        $r12 = r5.<ucar.nc2.Variable: ucar.nc2.Group group>;

        r0.<ucar.nc2.Variable: ucar.nc2.Group group> = $r12;

        $z0 = r5.<ucar.nc2.Variable: boolean isMetadata>;

        r0.<ucar.nc2.Variable: boolean isMetadata> = $z0;

        $z1 = r5.<ucar.nc2.Variable: boolean isVariableLength>;

        r0.<ucar.nc2.Variable: boolean isVariableLength> = $z1;

        $r13 = r5.<ucar.nc2.Variable: ucar.nc2.NetcdfFile ncfile>;

        r0.<ucar.nc2.Variable: ucar.nc2.NetcdfFile ncfile> = $r13;

        $r14 = r5.<ucar.nc2.Variable: ucar.nc2.Structure parent>;

        r0.<ucar.nc2.Variable: ucar.nc2.Structure parent> = $r14;

        $r15 = virtualinvoke r5.<ucar.nc2.Variable: int[] getShape()>();

        r0.<ucar.nc2.Variable: int[] shape> = $r15;

        $r16 = r5.<ucar.nc2.Variable: java.lang.String shortName>;

        r0.<ucar.nc2.Variable: java.lang.String shortName> = $r16;

        $i1 = r5.<ucar.nc2.Variable: int sizeToCache>;

        r0.<ucar.nc2.Variable: int sizeToCache> = $i1;

        $r17 = r5.<ucar.nc2.Variable: java.lang.Object spiObject>;

        r0.<ucar.nc2.Variable: java.lang.Object spiObject> = $r17;

        return;
    }

    public void setDataType(ucar.ma2.DataType)
    {
        java.lang.IllegalStateException $r3;
        int $i0;
        ucar.ma2.DataType r1, $r2;
        ucar.nc2.Variable r0;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        r1 := @parameter0: ucar.ma2.DataType;

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r3;

     label1:
        r0.<ucar.nc2.Variable: ucar.ma2.DataType dataType> = r1;

        $r2 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $i0 = virtualinvoke $r2.<ucar.ma2.DataType: int getSize()>();

        r0.<ucar.nc2.Variable: int elementSize> = $i0;

        return;
    }

    public void setName(java.lang.String)
    {
        java.lang.IllegalStateException $r2;
        ucar.nc2.Variable r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r2;

     label1:
        r0.<ucar.nc2.Variable: java.lang.String shortName> = r1;

        return;
    }

    public void setParentGroup(ucar.nc2.Group)
    {
        java.lang.IllegalStateException $r2;
        ucar.nc2.Variable r0;
        ucar.nc2.Group r1;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        r1 := @parameter0: ucar.nc2.Group;

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r2;

     label1:
        r0.<ucar.nc2.Variable: ucar.nc2.Group group> = r1;

        return;
    }

    public void setElementSize(int)
    {
        java.lang.IllegalStateException $r1;
        int i0;
        ucar.nc2.Variable r0;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        i0 := @parameter0: int;

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r1;

     label1:
        r0.<ucar.nc2.Variable: int elementSize> = i0;

        return;
    }

    public ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)
    {
        java.lang.IllegalStateException $r10;
        java.util.List $r1, $r3, $r4, $r9;
        ucar.nc2.Attribute r2, r6;
        int $i0, i1;
        ucar.nc2.Variable r0;
        java.lang.Object $r5;
        java.lang.String $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.Variable;

        r2 := @parameter0: ucar.nc2.Attribute;

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        if $z0 == 0 goto label1;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r10;

     label1:
        i1 = 0;

     label2:
        $r1 = r0.<ucar.nc2.Variable: java.util.List attributes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label4;

        $r4 = r0.<ucar.nc2.Variable: java.util.List attributes>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        r6 = (ucar.nc2.Attribute) $r5;

        $r7 = virtualinvoke r2.<ucar.nc2.Attribute: java.lang.String getName()>();

        $r8 = virtualinvoke r6.<ucar.nc2.Attribute: java.lang.String getName()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label3;

        $r9 = r0.<ucar.nc2.Variable: java.util.List attributes>;

        interfaceinvoke $r9.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, r2);

        return r2;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r3 = r0.<ucar.nc2.Variable: java.util.List attributes>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return r2;
    }

    public boolean remove(ucar.nc2.Attribute)
    {
        java.lang.IllegalStateException $r3;
        java.util.List $r2;
        ucar.nc2.Attribute r1;
        ucar.nc2.Variable r0;
        boolean $z0, $z1, $z2;

        r0 := @this: ucar.nc2.Variable;

        r1 := @parameter0: ucar.nc2.Attribute;

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r3;

     label1:
        if r1 == null goto label2;

        $r2 = r0.<ucar.nc2.Variable: java.util.List attributes>;

        $z1 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean removeAttribute(java.lang.String)
    {
        java.lang.IllegalStateException $r4;
        java.util.List $r3;
        ucar.nc2.Attribute $r2;
        ucar.nc2.Variable r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: ucar.nc2.Variable;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>(r1);

        if $r2 == null goto label2;

        $r3 = r0.<ucar.nc2.Variable: java.util.List attributes>;

        $z1 = interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean removeAttributeIgnoreCase(java.lang.String)
    {
        java.lang.IllegalStateException $r4;
        java.util.List $r3;
        ucar.nc2.Attribute $r2;
        ucar.nc2.Variable r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: ucar.nc2.Variable;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>(r1);

        if $r2 == null goto label2;

        $r3 = r0.<ucar.nc2.Variable: java.util.List attributes>;

        $z1 = interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public void setDimensions(java.util.List)
    {
        java.lang.IllegalStateException $r2;
        java.util.List r1;
        ucar.nc2.Variable r0;
        boolean $z0;
        java.util.ArrayList $r3;

        r0 := @this: ucar.nc2.Variable;

        r1 := @parameter0: java.util.List;

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r2;

     label1:
        if r1 != null goto label2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        goto label3;

     label2:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

     label3:
        r0.<ucar.nc2.Variable: java.util.List dimensions> = $r3;

        virtualinvoke r0.<ucar.nc2.Variable: void resetShape()>();

        return;
    }

    public void resetShape()
    {
        java.util.List $r1, $r3, $r4;
        int[] $r2, $r7;
        int $i0, $i1, $i2, i3;
        ucar.nc2.Variable r0;
        java.lang.Object $r5;
        ucar.nc2.Dimension r6;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r2 = newarray (int)[$i0];

        r0.<ucar.nc2.Variable: int[] shape> = $r2;

        i3 = 0;

     label1:
        $r3 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i3 >= $i1 goto label3;

        $r4 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        r6 = (ucar.nc2.Dimension) $r5;

        $r7 = r0.<ucar.nc2.Variable: int[] shape>;

        $i2 = virtualinvoke r6.<ucar.nc2.Dimension: int getLength()>();

        $r7[i3] = $i2;

        $z0 = virtualinvoke r6.<ucar.nc2.Dimension: boolean isVariableLength()>();

        if $z0 == 0 goto label2;

        r0.<ucar.nc2.Variable: boolean isVariableLength> = 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        r0.<ucar.nc2.Variable: ucar.ma2.Section shapeAsSection> = null;

        return;
    }

    public void setDimensions(java.lang.String)
    {
        java.lang.IllegalStateException $r7;
        java.util.ArrayList $r1;
        java.util.StringTokenizer $r3;
        int $i0, $i1;
        ucar.nc2.Variable r0;
        java.lang.String r2, $r4, $r12, $r20, $r22;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r9;
        ucar.nc2.Group $r5;
        java.lang.Exception $r8;
        ucar.nc2.Dimension $r6, $r23, r24;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r21;
        ucar.nc2.NetcdfFile $r19;

        r0 := @this: ucar.nc2.Variable;

        r2 := @parameter0: java.lang.String;

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        if $z0 == 0 goto label01;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r7;

     label01:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        if r2 == null goto label02;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label03;

     label02:
        r0.<ucar.nc2.Variable: java.util.List dimensions> = $r1;

        virtualinvoke r0.<ucar.nc2.Variable: void resetShape()>();

        return;

     label03:
        $r3 = new java.util.StringTokenizer;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String)>(r2);

     label04:
        $z1 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label11;

        $r4 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z2 == 0 goto label05;

        $r23 = <ucar.nc2.Dimension: ucar.nc2.Dimension VLEN>;

        goto label06;

     label05:
        $r5 = r0.<ucar.nc2.Variable: ucar.nc2.Group group>;

        $r23 = virtualinvoke $r5.<ucar.nc2.Group: ucar.nc2.Dimension findDimension(java.lang.String)>($r4);

     label06:
        r24 = $r23;

        if $r23 != null goto label10;

     label07:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $r6 = new ucar.nc2.Dimension;

        specialinvoke $r6.<ucar.nc2.Dimension: void <init>(java.lang.String,int,boolean,boolean,boolean)>("", $i1, 0, 0, 0);

        r24 = $r6;

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Variable ");

        $r12 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" setDimensions = ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FAILED, dim doesnt exist=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" file = ");

        $r19 = r0.<ucar.nc2.Variable: ucar.nc2.NetcdfFile ncfile>;

        $r20 = virtualinvoke $r19.<ucar.nc2.NetcdfFile: java.lang.String getLocation()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r9;

     label10:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r24);

        goto label04;

     label11:
        r0.<ucar.nc2.Variable: java.util.List dimensions> = $r1;

        virtualinvoke r0.<ucar.nc2.Variable: void resetShape()>();

        return;

        catch java.lang.Exception from label07 to label08 with label09;
    }

    public void resetDimensions()
    {
        java.lang.IllegalStateException $r17;
        java.util.ArrayList $r1;
        ucar.nc2.Variable r0;
        java.lang.String $r7, $r12, $r16;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3;
        java.lang.IllegalArgumentException $r9;
        ucar.nc2.Group $r6;
        java.util.List $r2;
        java.lang.Object $r4;
        ucar.nc2.Dimension r5, $r8;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r15;

        r0 := @this: ucar.nc2.Variable;

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        if $z0 == 0 goto label1;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r17;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (ucar.nc2.Dimension) $r4;

        $z2 = virtualinvoke r5.<ucar.nc2.Dimension: boolean isShared()>();

        if $z2 == 0 goto label4;

        $r6 = r0.<ucar.nc2.Variable: ucar.nc2.Group group>;

        $r7 = virtualinvoke r5.<ucar.nc2.Dimension: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<ucar.nc2.Group: ucar.nc2.Dimension findDimension(java.lang.String)>($r7);

        if $r8 != null goto label3;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Variable ");

        $r12 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resetDimensions  FAILED, dim doesnt exist in parent group=");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r9;

     label3:
        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        goto label5;

     label4:
        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

     label5:
        goto label2;

     label6:
        r0.<ucar.nc2.Variable: java.util.List dimensions> = $r1;

        virtualinvoke r0.<ucar.nc2.Variable: void resetShape()>();

        return;
    }

    public void setDimensionsAnonymous(int[]) throws ucar.ma2.InvalidRangeException
    {
        java.lang.IllegalStateException $r15;
        java.util.ArrayList $r16;
        int[] r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i8, $i10;
        ucar.nc2.Variable r0;
        java.lang.String $r12;
        boolean $z0;
        java.util.List $r4;
        ucar.ma2.InvalidRangeException $r18;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r17;
        ucar.nc2.Dimension r14, $r19;

        r0 := @this: ucar.nc2.Variable;

        r2 := @parameter0: int[];

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        if $z0 == 0 goto label1;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r15;

     label1:
        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.Variable: java.util.List dimensions> = $r16;

        i6 = 0;

     label2:
        $i0 = lengthof r2;

        if i6 >= $i0 goto label6;

        $i1 = r2[i6];

        if $i1 >= 1 goto label3;

        $i4 = r2[i6];

        $i8 = (int) -1;

        if $i4 == $i8 goto label3;

        $r18 = new ucar.ma2.InvalidRangeException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shape[");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]=");

        $i5 = r2[i6];

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be > 0");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>($r12);

        throw $r18;

     label3:
        $i2 = r2[i6];

        $i10 = (int) -1;

        if $i2 != $i10 goto label4;

        r14 = <ucar.nc2.Dimension: ucar.nc2.Dimension VLEN>;

        r0.<ucar.nc2.Variable: boolean isVariableLength> = 1;

        goto label5;

     label4:
        $r19 = new ucar.nc2.Dimension;

        $i3 = r2[i6];

        specialinvoke $r19.<ucar.nc2.Dimension: void <init>(java.lang.String,int,boolean,boolean,boolean)>(null, $i3, 0, 0, 0);

        r14 = $r19;

     label5:
        $r4 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r14);

        i6 = i6 + 1;

        goto label2;

     label6:
        virtualinvoke r0.<ucar.nc2.Variable: void resetShape()>();

        return;
    }

    public void setIsScalar()
    {
        java.lang.IllegalStateException $r2;
        ucar.nc2.Variable r0;
        boolean $z0;
        java.util.ArrayList $r1;

        r0 := @this: ucar.nc2.Variable;

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r2;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.Variable: java.util.List dimensions> = $r1;

        virtualinvoke r0.<ucar.nc2.Variable: void resetShape()>();

        return;
    }

    public void setDimension(int, ucar.nc2.Dimension)
    {
        java.lang.IllegalStateException $r3;
        java.util.List $r2;
        int i0;
        ucar.nc2.Variable r0;
        ucar.nc2.Dimension r1;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.nc2.Dimension;

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r3;

     label1:
        $r2 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        virtualinvoke r0.<ucar.nc2.Variable: void resetShape()>();

        return;
    }

    public ucar.nc2.Variable setImmutable()
    {
        java.util.List $r1, $r2, $r3, $r4;
        ucar.nc2.Variable r0;

        r0 := @this: ucar.nc2.Variable;

        r0.<ucar.nc2.Variable: boolean immutable> = 1;

        $r1 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        r0.<ucar.nc2.Variable: java.util.List dimensions> = $r2;

        $r3 = r0.<ucar.nc2.Variable: java.util.List attributes>;

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        r0.<ucar.nc2.Variable: java.util.List attributes> = $r4;

        return r0;
    }

    public boolean isImmutable()
    {
        ucar.nc2.Variable r0;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        return $z0;
    }

    public java.lang.Object getSPobject()
    {
        ucar.nc2.Variable r0;
        java.lang.Object $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: java.lang.Object spiObject>;

        return $r1;
    }

    public void setSPobject(java.lang.Object)
    {
        ucar.nc2.Variable r0;
        java.lang.Object r1;

        r0 := @this: ucar.nc2.Variable;

        r1 := @parameter0: java.lang.Object;

        r0.<ucar.nc2.Variable: java.lang.Object spiObject> = r1;

        return;
    }

    public int getSizeToCache()
    {
        int $i0, $i1, $i2;
        ucar.nc2.Variable r0;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        $i0 = r0.<ucar.nc2.Variable: int sizeToCache>;

        if $i0 < 0 goto label1;

        $i1 = r0.<ucar.nc2.Variable: int sizeToCache>;

        return $i1;

     label1:
        $z0 = virtualinvoke r0.<ucar.nc2.Variable: boolean isCoordinateVariable()>();

        if $z0 == 0 goto label2;

        $i2 = 40000;

        goto label3;

     label2:
        $i2 = 4000;

     label3:
        return $i2;
    }

    public void setSizeToCache(int)
    {
        int i0;
        ucar.nc2.Variable r0;

        r0 := @this: ucar.nc2.Variable;

        i0 := @parameter0: int;

        r0.<ucar.nc2.Variable: int sizeToCache> = i0;

        return;
    }

    public void setCaching(boolean)
    {
        ucar.nc2.Variable r0;
        ucar.nc2.Variable$Cache $r1, $r2;
        boolean z0;

        r0 := @this: ucar.nc2.Variable;

        z0 := @parameter0: boolean;

        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $r1.<ucar.nc2.Variable$Cache: boolean isCaching> = z0;

        $r2 = r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $r2.<ucar.nc2.Variable$Cache: boolean cachingSet> = 1;

        return;
    }

    public boolean isCaching()
    {
        long $l0, $l2, $l3, $l5;
        byte $b6;
        int $i1, $i4, $i7;
        ucar.nc2.Variable r0;
        ucar.nc2.Variable$Cache $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $z0 = $r1.<ucar.nc2.Variable$Cache: boolean cachingSet>;

        if $z0 != 0 goto label3;

        $r2 = r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $z1 = r0.<ucar.nc2.Variable: boolean isVariableLength>;

        if $z1 != 0 goto label1;

        $l0 = virtualinvoke r0.<ucar.nc2.Variable: long getSize()>();

        $i1 = virtualinvoke r0.<ucar.nc2.Variable: int getElementSize()>();

        $l2 = (long) $i1;

        $l3 = $l0 * $l2;

        $i4 = virtualinvoke r0.<ucar.nc2.Variable: int getSizeToCache()>();

        $l5 = (long) $i4;

        $b6 = $l3 cmp $l5;

        $i7 = (int) $b6;

        if $i7 >= 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r2.<ucar.nc2.Variable$Cache: boolean isCaching> = $z2;

        $r3 = r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $r3.<ucar.nc2.Variable$Cache: boolean cachingSet> = 1;

     label3:
        $r4 = r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $z3 = $r4.<ucar.nc2.Variable$Cache: boolean isCaching>;

        return $z3;
    }

    public void invalidateCache()
    {
        ucar.nc2.Variable r0;
        ucar.nc2.Variable$Cache $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $r1.<ucar.nc2.Variable$Cache: ucar.ma2.Array data> = null;

        return;
    }

    public void setCachedData(ucar.ma2.Array)
    {
        ucar.nc2.Variable r0;
        ucar.ma2.Array r1;

        r0 := @this: ucar.nc2.Variable;

        r1 := @parameter0: ucar.ma2.Array;

        virtualinvoke r0.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>(r1, 0);

        return;
    }

    public void setCachedData(ucar.ma2.Array, boolean)
    {
        ucar.nc2.Variable r1;
        java.lang.String $r16;
        ucar.nc2.Variable$Cache $r2, $r3, $r4;
        boolean z0;
        ucar.ma2.DataType $r6, $r14;
        java.lang.IllegalArgumentException $r8;
        ucar.ma2.Array r0;
        java.lang.Class $r5, $r7, $r11;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r15;

        r1 := @this: ucar.nc2.Variable;

        r0 := @parameter0: ucar.ma2.Array;

        z0 := @parameter1: boolean;

        if r0 == null goto label1;

        $r5 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r6 = virtualinvoke r1.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r7 = virtualinvoke $r6.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        if $r5 == $r7 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setCachedData type=");

        $r11 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" incompatible with variable type=");

        $r14 = virtualinvoke r1.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r8;

     label1:
        $r2 = r1.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $r2.<ucar.nc2.Variable$Cache: ucar.ma2.Array data> = r0;

        r1.<ucar.nc2.Variable: boolean isMetadata> = z0;

        $r3 = r1.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $r3.<ucar.nc2.Variable$Cache: boolean cachingSet> = 1;

        $r4 = r1.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $r4.<ucar.nc2.Variable$Cache: boolean isCaching> = 1;

        return;
    }

    public void createNewCache()
    {
        ucar.nc2.Variable r0;
        ucar.nc2.Variable$Cache $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = new ucar.nc2.Variable$Cache;

        specialinvoke $r1.<ucar.nc2.Variable$Cache: void <init>()>();

        r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache> = $r1;

        return;
    }

    public boolean hasCachedData()
    {
        ucar.nc2.Variable r0;
        ucar.nc2.Variable$Cache $r1, $r2;
        ucar.ma2.Array $r3;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        if $r1 == null goto label1;

        $r2 = r0.<ucar.nc2.Variable: ucar.nc2.Variable$Cache cache>;

        $r3 = $r2.<ucar.nc2.Variable$Cache: ucar.ma2.Array data>;

        if null == $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setValues(int, double, double)
    {
        long $l1, $l2, $l5;
        byte $b3;
        int[] $r3;
        int i0, $i4;
        ucar.nc2.Variable r0;
        java.lang.String $r10;
        double d0, d1;
        ucar.ma2.DataType $r1;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array $r2, r11;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;

        r0 := @this: ucar.nc2.Variable;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $l1 = (long) i0;

        $l2 = virtualinvoke r0.<ucar.nc2.Variable: long getSize()>();

        $b3 = $l1 cmp $l2;

        if $b3 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad npts = ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be ");

        $l5 = virtualinvoke r0.<ucar.nc2.Variable: long getSize()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r2 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array makeArray(ucar.ma2.DataType,int,double,double)>($r1, i0, d0, d1);

        r11 = $r2;

        $i4 = virtualinvoke r0.<ucar.nc2.Variable: int getRank()>();

        if $i4 == 1 goto label2;

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        r11 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Array reshape(int[])>($r3);

     label2:
        virtualinvoke r0.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>(r11, 1);

        return;
    }

    public void setValues(java.util.List) throws java.lang.IllegalArgumentException
    {
        long $l0, $l1, $l4, $l5;
        byte $b2;
        int[] $r4;
        int $i3;
        ucar.nc2.Variable r0;
        java.lang.String $r8, $r14;
        ucar.ma2.DataType $r1;
        java.lang.IllegalArgumentException $r5;
        ucar.ma2.Array $r3, r15;
        java.util.List r2;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: ucar.nc2.Variable;

        r2 := @parameter0: java.util.List;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r3 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array makeArray(ucar.ma2.DataType,java.util.List)>($r1, r2);

        r15 = $r3;

        $l0 = virtualinvoke $r3.<ucar.ma2.Array: long getSize()>();

        $l1 = virtualinvoke r0.<ucar.nc2.Variable: long getSize()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect number of values specified for the Variable ");

        $r8 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" needed= ");

        $l4 = virtualinvoke r0.<ucar.nc2.Variable: long getSize()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" given=");

        $l5 = virtualinvoke $r3.<ucar.ma2.Array: long getSize()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r5;

     label1:
        $i3 = virtualinvoke r0.<ucar.nc2.Variable: int getRank()>();

        if $i3 == 1 goto label2;

        $r4 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        r15 = virtualinvoke $r3.<ucar.ma2.Array: ucar.ma2.Array reshape(int[])>($r4);

     label2:
        virtualinvoke r0.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>(r15, 1);

        return;
    }

    public boolean isMemberOfStructure()
    {
        ucar.nc2.Variable r0;
        ucar.nc2.Structure $r1;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.Structure parent>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public ucar.nc2.Structure getParentStructure()
    {
        ucar.nc2.Variable r0;
        ucar.nc2.Structure $r1;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.Structure parent>;

        return $r1;
    }

    public void setParentStructure(ucar.nc2.Structure)
    {
        java.lang.IllegalStateException $r2;
        ucar.nc2.Variable r0;
        ucar.nc2.Structure r1;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        r1 := @parameter0: ucar.nc2.Structure;

        $z0 = r0.<ucar.nc2.Variable: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r2;

     label1:
        r0.<ucar.nc2.Variable: ucar.nc2.Structure parent> = r1;

        return;
    }

    public java.util.List getDimensionsAll()
    {
        ucar.nc2.Variable r1;
        java.util.ArrayList $r0;

        r1 := @this: ucar.nc2.Variable;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        specialinvoke r1.<ucar.nc2.Variable: void addDimensionsAll(java.util.List,ucar.nc2.Variable)>($r0, r1);

        return $r0;
    }

    private void addDimensionsAll(java.util.List, ucar.nc2.Variable)
    {
        ucar.nc2.Structure $r4;
        java.util.List r1;
        int i0, $i1;
        ucar.nc2.Variable r0, r3;
        ucar.nc2.Dimension $r2;
        boolean $z0;

        r3 := @this: ucar.nc2.Variable;

        r1 := @parameter0: java.util.List;

        r0 := @parameter1: ucar.nc2.Variable;

        $z0 = virtualinvoke r0.<ucar.nc2.Variable: boolean isMemberOfStructure()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Structure getParentStructure()>();

        specialinvoke r3.<ucar.nc2.Variable: void addDimensionsAll(java.util.List,ucar.nc2.Variable)>(r1, $r4);

     label1:
        i0 = 0;

     label2:
        $i1 = virtualinvoke r0.<ucar.nc2.Variable: int getRank()>();

        if i0 >= $i1 goto label3;

        $r2 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Dimension getDimension(int)>(i0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        i0 = i0 + 1;

        goto label2;

     label3:
        return;
    }

    public int[] getShapeAll()
    {
        ucar.nc2.Structure $r1;
        java.util.List $r2;
        int[] r3, $r6;
        int $i0, $i1, $i2, i3;
        ucar.nc2.Variable r0;
        java.lang.Object $r4;
        ucar.nc2.Dimension $r5;

        r0 := @this: ucar.nc2.Variable;

        $r1 = r0.<ucar.nc2.Variable: ucar.nc2.Structure parent>;

        if $r1 != null goto label1;

        $r6 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        return $r6;

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.Variable: java.util.List getDimensionsAll()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        r3 = newarray (int)[$i0];

        i3 = 0;

     label2:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i3 >= $i1 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i3);

        $r5 = (ucar.nc2.Dimension) $r4;

        $i2 = virtualinvoke $r5.<ucar.nc2.Dimension: int getLength()>();

        r3[i3] = $i2;

        i3 = i3 + 1;

        goto label2;

     label3:
        return r3;
    }

    public boolean isCoordinateVariable()
    {
        int $i0, $i1, $i2;
        ucar.nc2.Variable r0;
        java.lang.String $r6, $r7, $r13, $r14;
        boolean $z0, $z1, $z2;
        ucar.ma2.DataType $r1, $r2, $r8, $r9;
        java.util.List $r3, $r4, $r10, $r11;
        java.lang.Object $r5, $r12;
        ucar.nc2.Dimension r15, r16;

        r0 := @this: ucar.nc2.Variable;

        $r2 = r0.<ucar.nc2.Variable: ucar.ma2.DataType dataType>;

        $r1 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r2 == $r1 goto label1;

        $z0 = virtualinvoke r0.<ucar.nc2.Variable: boolean isMemberOfStructure()>();

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        $i0 = virtualinvoke r0.<ucar.nc2.Variable: int getRank()>();

        if $i0 != 1 goto label3;

        $r10 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $i2 = interfaceinvoke $r10.<java.util.List: int size()>();

        if $i2 != 1 goto label3;

        $r11 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(0);

        r15 = (ucar.nc2.Dimension) $r12;

        $r13 = r0.<ucar.nc2.Variable: java.lang.String shortName>;

        $r14 = virtualinvoke r15.<ucar.nc2.Dimension: java.lang.String getName()>();

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        if $i0 != 2 goto label4;

        $r3 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i1 != 2 goto label4;

        $r4 = r0.<ucar.nc2.Variable: java.util.List dimensions>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        r16 = (ucar.nc2.Dimension) $r5;

        $r6 = r0.<ucar.nc2.Variable: java.lang.String shortName>;

        $r7 = virtualinvoke r16.<ucar.nc2.Dimension: java.lang.String getName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label4;

        $r8 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r8 != $r9 goto label4;

        return 1;

     label4:
        return 0;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        ucar.nc2.Variable r0, r2;
        java.lang.Object $r1;
        ucar.nc2.Group $r3;
        ucar.nc2.Structure $r4;

        r0 := @this: ucar.nc2.Variable;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (ucar.nc2.Variable) $r1;

        $r3 = r0.<ucar.nc2.Variable: ucar.nc2.Group group>;

        virtualinvoke r2.<ucar.nc2.Variable: void setParentGroup(ucar.nc2.Group)>($r3);

        $r4 = r0.<ucar.nc2.Variable: ucar.nc2.Structure parent>;

        virtualinvoke r2.<ucar.nc2.Variable: void setParentStructure(ucar.nc2.Structure)>($r4);

        virtualinvoke r2.<ucar.nc2.Variable: void setProxyReader(ucar.nc2.ProxyReader)>(r2);

        return r2;
    }

    public boolean isUnknownLength()
    {
        ucar.nc2.Variable r0;
        boolean $z0;

        r0 := @this: ucar.nc2.Variable;

        $z0 = r0.<ucar.nc2.Variable: boolean isVariableLength>;

        return $z0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        ucar.nc2.VariableSimpleIF $r2;
        int $i0;
        ucar.nc2.Variable r0;
        java.lang.Object r1;

        r0 := @this: ucar.nc2.Variable;

        r1 := @parameter0: java.lang.Object;

        $r2 = (ucar.nc2.VariableSimpleIF) r1;

        $i0 = virtualinvoke r0.<ucar.nc2.Variable: int compareTo(ucar.nc2.VariableSimpleIF)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <ucar.nc2.Variable: int defaultCoordsSizeToCache> = 40000;

        <ucar.nc2.Variable: int defaultSizeToCache> = 4000;

        <ucar.nc2.Variable: boolean debugCaching> = 0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/Variable;");

        <ucar.nc2.Variable: org.slf4j.Logger log> = $r0;

        <ucar.nc2.Variable: boolean showSize> = 0;

        return;
    }
}
