public class nu.xom.jaxen.function.StringFunction extends java.lang.Object implements nu.xom.jaxen.Function
{
    private static java.text.DecimalFormat format;

    public void <init>()
    {
        nu.xom.jaxen.function.StringFunction r0;

        r0 := @this: nu.xom.jaxen.function.StringFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object call(nu.xom.jaxen.Context, java.util.List) throws nu.xom.jaxen.FunctionCallException
    {
        nu.xom.jaxen.FunctionCallException $r1;
        nu.xom.jaxen.function.StringFunction r9;
        java.util.List r0, $r6;
        int $i0;
        java.lang.Object $r2;
        java.lang.String $r5, $r8;
        nu.xom.jaxen.Context r3;
        nu.xom.jaxen.Navigator $r4, $r7;

        r9 := @this: nu.xom.jaxen.function.StringFunction;

        r3 := @parameter0: nu.xom.jaxen.Context;

        r0 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r6 = virtualinvoke r3.<nu.xom.jaxen.Context: java.util.List getNodeSet()>();

        $r7 = virtualinvoke r3.<nu.xom.jaxen.Context: nu.xom.jaxen.Navigator getNavigator()>();

        $r8 = staticinvoke <nu.xom.jaxen.function.StringFunction: java.lang.String evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>($r6, $r7);

        return $r8;

     label1:
        if $i0 != 1 goto label2;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = virtualinvoke r3.<nu.xom.jaxen.Context: nu.xom.jaxen.Navigator getNavigator()>();

        $r5 = staticinvoke <nu.xom.jaxen.function.StringFunction: java.lang.String evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>($r2, $r4);

        return $r5;

     label2:
        $r1 = new nu.xom.jaxen.FunctionCallException;

        specialinvoke $r1.<nu.xom.jaxen.FunctionCallException: void <init>(java.lang.String)>("string() takes at most argument.");

        throw $r1;
    }

    public static java.lang.String evaluate(java.lang.Object, nu.xom.jaxen.Navigator)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        nu.xom.jaxen.JaxenRuntimeException $r17;
        java.util.List r19;
        java.lang.Boolean $r3;
        java.lang.String $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15;
        nu.xom.jaxen.Navigator r0;
        java.lang.Number $r1;
        double $d0;
        nu.xom.jaxen.UnsupportedAxisException $r16;
        java.util.Iterator $r10;
        java.lang.Object $r11, r18;

        r18 := @parameter0: java.lang.Object;

        r0 := @parameter1: nu.xom.jaxen.Navigator;

     label01:
        if r0 == null goto label03;

        $z14 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: boolean isText(java.lang.Object)>(r18);

        if $z14 == 0 goto label03;

        $r15 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: java.lang.String getTextStringValue(java.lang.Object)>(r18);

     label02:
        return $r15;

     label03:
        $z0 = r18 instanceof java.util.List;

        if $z0 == 0 goto label06;

        r19 = (java.util.List) r18;

        $z13 = interfaceinvoke r19.<java.util.List: boolean isEmpty()>();

        if $z13 == 0 goto label05;

     label04:
        return "";

     label05:
        r18 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(0);

     label06:
        if r0 == null goto label23;

        $z4 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: boolean isElement(java.lang.Object)>(r18);

        if $z4 == 0 goto label08;

        $r14 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: java.lang.String getElementStringValue(java.lang.Object)>(r18);

     label07:
        return $r14;

     label08:
        $z5 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: boolean isAttribute(java.lang.Object)>(r18);

        if $z5 == 0 goto label10;

        $r13 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: java.lang.String getAttributeStringValue(java.lang.Object)>(r18);

     label09:
        return $r13;

     label10:
        $z6 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: boolean isDocument(java.lang.Object)>(r18);

        if $z6 == 0 goto label15;

        $r10 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: java.util.Iterator getChildAxisIterator(java.lang.Object)>(r18);

     label11:
        $z11 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label14;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $z12 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: boolean isElement(java.lang.Object)>($r11);

        if $z12 == 0 goto label13;

        $r12 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: java.lang.String getElementStringValue(java.lang.Object)>($r11);

     label12:
        return $r12;

     label13:
        goto label11;

     label14:
        goto label23;

     label15:
        $z7 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: boolean isProcessingInstruction(java.lang.Object)>(r18);

        if $z7 == 0 goto label17;

        $r9 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: java.lang.String getProcessingInstructionData(java.lang.Object)>(r18);

     label16:
        return $r9;

     label17:
        $z8 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: boolean isComment(java.lang.Object)>(r18);

        if $z8 == 0 goto label19;

        $r8 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: java.lang.String getCommentStringValue(java.lang.Object)>(r18);

     label18:
        return $r8;

     label19:
        $z9 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: boolean isText(java.lang.Object)>(r18);

        if $z9 == 0 goto label21;

        $r7 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: java.lang.String getTextStringValue(java.lang.Object)>(r18);

     label20:
        return $r7;

     label21:
        $z10 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: boolean isNamespace(java.lang.Object)>(r18);

        if $z10 == 0 goto label23;

        $r6 = interfaceinvoke r0.<nu.xom.jaxen.Navigator: java.lang.String getNamespaceStringValue(java.lang.Object)>(r18);

     label22:
        return $r6;

     label23:
        $z15 = r18 instanceof java.lang.String;

        if $z15 == 0 goto label25;

        $r5 = (java.lang.String) r18;

     label24:
        return $r5;

     label25:
        $z1 = r18 instanceof java.lang.Boolean;

        if $z1 == 0 goto label27;

        $r3 = (java.lang.Boolean) r18;

        $z3 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        $r4 = staticinvoke <nu.xom.jaxen.function.StringFunction: java.lang.String stringValue(boolean)>($z3);

     label26:
        return $r4;

     label27:
        $z2 = r18 instanceof java.lang.Number;

        if $z2 == 0 goto label29;

        $r1 = (java.lang.Number) r18;

        $d0 = virtualinvoke $r1.<java.lang.Number: double doubleValue()>();

        $r2 = staticinvoke <nu.xom.jaxen.function.StringFunction: java.lang.String stringValue(double)>($d0);

     label28:
        return $r2;

     label29:
        goto label31;

     label30:
        $r16 := @caughtexception;

        $r17 = new nu.xom.jaxen.JaxenRuntimeException;

        specialinvoke $r17.<nu.xom.jaxen.JaxenRuntimeException: void <init>(java.lang.Throwable)>($r16);

        throw $r17;

     label31:
        return "";

        catch nu.xom.jaxen.UnsupportedAxisException from label01 to label02 with label30;
        catch nu.xom.jaxen.UnsupportedAxisException from label03 to label04 with label30;
        catch nu.xom.jaxen.UnsupportedAxisException from label05 to label07 with label30;
        catch nu.xom.jaxen.UnsupportedAxisException from label08 to label09 with label30;
        catch nu.xom.jaxen.UnsupportedAxisException from label10 to label12 with label30;
        catch nu.xom.jaxen.UnsupportedAxisException from label13 to label16 with label30;
        catch nu.xom.jaxen.UnsupportedAxisException from label17 to label18 with label30;
        catch nu.xom.jaxen.UnsupportedAxisException from label19 to label20 with label30;
        catch nu.xom.jaxen.UnsupportedAxisException from label21 to label22 with label30;
        catch nu.xom.jaxen.UnsupportedAxisException from label23 to label24 with label30;
        catch nu.xom.jaxen.UnsupportedAxisException from label25 to label26 with label30;
        catch nu.xom.jaxen.UnsupportedAxisException from label27 to label28 with label30;
    }

    private static java.lang.String stringValue(double)
    {
        java.lang.Throwable $r3;
        byte $b0;
        java.text.DecimalFormat $r0, $r1;
        java.lang.String $r2;
        double d0;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return "0";

     label1:
        $r0 = <nu.xom.jaxen.function.StringFunction: java.text.DecimalFormat format>;

        entermonitor $r0;

     label2:
        $r1 = <nu.xom.jaxen.function.StringFunction: java.text.DecimalFormat format>;

        $r2 = virtualinvoke $r1.<java.text.DecimalFormat: java.lang.String format(double)>(d0);

        exitmonitor $r0;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r0;

     label5:
        throw $r3;

     label6:
        return $r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static java.lang.String stringValue(boolean)
    {
        java.lang.String $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r0 = "true";

        goto label2;

     label1:
        $r0 = "false";

     label2:
        return $r0;
    }

    static void <clinit>()
    {
        java.text.DecimalFormatSymbols $r3;
        java.text.DecimalFormat $r2, $r5, $r6, $r7;
        java.text.NumberFormat $r1;
        java.util.Locale $r0, $r4;

        $r0 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)>($r0);

        $r2 = (java.text.DecimalFormat) $r1;

        <nu.xom.jaxen.function.StringFunction: java.text.DecimalFormat format> = $r2;

        $r3 = new java.text.DecimalFormatSymbols;

        $r4 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke $r3.<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>($r4);

        virtualinvoke $r3.<java.text.DecimalFormatSymbols: void setNaN(java.lang.String)>("NaN");

        virtualinvoke $r3.<java.text.DecimalFormatSymbols: void setInfinity(java.lang.String)>("Infinity");

        $r5 = <nu.xom.jaxen.function.StringFunction: java.text.DecimalFormat format>;

        virtualinvoke $r5.<java.text.DecimalFormat: void setGroupingUsed(boolean)>(0);

        $r6 = <nu.xom.jaxen.function.StringFunction: java.text.DecimalFormat format>;

        virtualinvoke $r6.<java.text.DecimalFormat: void setMaximumFractionDigits(int)>(32);

        $r7 = <nu.xom.jaxen.function.StringFunction: java.text.DecimalFormat format>;

        virtualinvoke $r7.<java.text.DecimalFormat: void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)>($r3);

        return;
    }
}
