public class org.codehaus.groovy.ast.expr.MethodCallExpression extends org.codehaus.groovy.ast.expr.Expression
{
    private org.codehaus.groovy.ast.expr.Expression objectExpression;
    private org.codehaus.groovy.ast.expr.Expression method;
    private org.codehaus.groovy.ast.expr.Expression arguments;
    private boolean spreadSafe;
    private boolean safe;
    private boolean implicitThis;
    public static final org.codehaus.groovy.ast.expr.Expression NO_ARGUMENTS;
    private groovy.lang.MetaMethod metaMethod;

    public groovy.lang.MetaMethod getMetaMethod()
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        groovy.lang.MetaMethod $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: groovy.lang.MetaMethod metaMethod>;

        return $r1;
    }

    public void <init>(org.codehaus.groovy.ast.expr.Expression, java.lang.String, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        org.codehaus.groovy.ast.expr.Expression r1, r4;
        org.codehaus.groovy.ast.expr.ConstantExpression $r2;
        java.lang.String r3;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: org.codehaus.groovy.ast.expr.Expression;

        $r2 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        specialinvoke $r2.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>(r3);

        specialinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>(r1, $r2, r4);

        return;
    }

    public void <init>(org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.ClassNode $r4;
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        org.codehaus.groovy.ast.expr.Expression r1, r2, r3;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r2 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        r3 := @parameter2: org.codehaus.groovy.ast.expr.Expression;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void <init>()>();

        r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean spreadSafe> = 0;

        r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean safe> = 0;

        r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: groovy.lang.MetaMethod metaMethod> = null;

        r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression objectExpression> = r1;

        r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression method> = r2;

        r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression arguments> = r3;

        $r4 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setType(org.codehaus.groovy.ast.ClassNode)>($r4);

        virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setImplicitThis(boolean)>(1);

        return;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r1;
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;

        r1 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)>(r1);

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)
    {
        org.codehaus.groovy.ast.expr.ExpressionTransformer r1;
        org.codehaus.groovy.ast.expr.MethodCallExpression $r0, r2;
        org.codehaus.groovy.ast.expr.Expression $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ExpressionTransformer;

        $r0 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r3 = r2.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression objectExpression>;

        $r4 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r3);

        $r5 = r2.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression method>;

        $r6 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r5);

        $r7 = r2.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression arguments>;

        $r8 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r7);

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r4, $r6, $r8);

        $z0 = r2.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean safe>;

        virtualinvoke $r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setSafe(boolean)>($z0);

        $z1 = r2.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean implicitThis>;

        virtualinvoke $r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setImplicitThis(boolean)>($z1);

        virtualinvoke $r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r2);

        return $r0;
    }

    public org.codehaus.groovy.ast.expr.Expression getArguments()
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression arguments>;

        return $r1;
    }

    public void setArguments(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        org.codehaus.groovy.ast.expr.Expression r1;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression arguments> = r1;

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression getMethod()
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression method>;

        return $r1;
    }

    public void setMethod(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        org.codehaus.groovy.ast.expr.Expression r1;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression method> = r1;

        return;
    }

    public java.lang.String getMethodAsString()
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1, $r2;
        org.codehaus.groovy.ast.expr.ConstantExpression r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression method>;

        $z0 = $r1 instanceof org.codehaus.groovy.ast.expr.ConstantExpression;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression method>;

        r3 = (org.codehaus.groovy.ast.expr.ConstantExpression) $r2;

        $r4 = virtualinvoke r3.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.String getText()>();

        return $r4;
    }

    public void setObjectExpression(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        org.codehaus.groovy.ast.expr.Expression r1;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression objectExpression> = r1;

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression getObjectExpression()
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression objectExpression>;

        return $r1;
    }

    public java.lang.String getText()
    {
        java.lang.StringBuffer $r0, $r4, $r5, $r8, $r11;
        org.codehaus.groovy.ast.expr.MethodCallExpression r1;
        org.codehaus.groovy.ast.expr.Expression $r2, $r6, $r9;
        java.lang.String $r3, $r7, $r10, $r12;

        r1 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression objectExpression>;

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r6 = r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression method>;

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression arguments>;

        $r10 = virtualinvoke $r9.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;
    }

    public boolean isSafe()
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $z0 = r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean safe>;

        return $z0;
    }

    public void setSafe(boolean)
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean safe> = z0;

        return;
    }

    public boolean isSpreadSafe()
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $z0 = r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean spreadSafe>;

        return $z0;
    }

    public void setSpreadSafe(boolean)
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean spreadSafe> = z0;

        return;
    }

    public boolean isImplicitThis()
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $z0 = r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean implicitThis>;

        return $z0;
    }

    public void setImplicitThis(boolean)
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean implicitThis> = z0;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13;
        org.codehaus.groovy.ast.expr.MethodCallExpression r1;
        java.lang.String $r2, $r14;
        org.codehaus.groovy.ast.expr.Expression $r5, $r8, $r11;

        r1 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[object: ");

        $r5 = r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression objectExpression>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" method: ");

        $r8 = r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression method>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" arguments: ");

        $r11 = r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression arguments>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r14;
    }

    public void setMetaMethod(groovy.lang.MetaMethod)
    {
        groovy.lang.MetaMethod r1;
        org.codehaus.groovy.ast.ClassNode $r3;
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        java.lang.Class $r2;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodCallExpression;

        r1 := @parameter0: groovy.lang.MetaMethod;

        r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: groovy.lang.MetaMethod metaMethod> = r1;

        $r2 = virtualinvoke r1.<groovy.lang.MetaMethod: java.lang.Class getReturnType()>();

        $r3 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r2);

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void setType(org.codehaus.groovy.ast.ClassNode)>($r3);

        return;
    }

    static void <clinit>()
    {
        org.codehaus.groovy.ast.expr.TupleExpression $r0;

        $r0 = new org.codehaus.groovy.ast.expr.TupleExpression;

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.TupleExpression: void <init>()>();

        <org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression NO_ARGUMENTS> = $r0;

        return;
    }
}
