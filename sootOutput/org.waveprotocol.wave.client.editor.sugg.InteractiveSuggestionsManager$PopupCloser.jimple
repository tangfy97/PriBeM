final class org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser extends java.lang.Object
{
    private final org.waveprotocol.wave.client.scheduler.TimerService timerService;
    private final org.waveprotocol.wave.client.scheduler.Scheduler$Task task;
    private com.google.gwt.user.client.Command callback;
    final org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager this$0;

    private void <init>(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager, org.waveprotocol.wave.client.scheduler.TimerService)
    {
        org.waveprotocol.wave.client.scheduler.TimerService r3;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r1;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser r0;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser$1 $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        r3 := @parameter1: org.waveprotocol.wave.client.scheduler.TimerService;

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser$1;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser$1: void <init>(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser)>(r0);

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: org.waveprotocol.wave.client.scheduler.Scheduler$Task task> = $r2;

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: org.waveprotocol.wave.client.scheduler.TimerService timerService> = r3;

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: com.google.gwt.user.client.Command callback> = null;

        return;
    }

    private void closeImmediately()
    {
        org.waveprotocol.wave.client.widget.popup.UniversalPopup $r2;
        com.google.gwt.user.client.Command $r3, $r4;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager $r1;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser r0;

        r0 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser;

        $r1 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.widget.popup.UniversalPopup access$800(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager)>($r1);

        interfaceinvoke $r2.<org.waveprotocol.wave.client.widget.popup.UniversalPopup: void hide()>();

        $r3 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: com.google.gwt.user.client.Command callback>;

        if $r3 == null goto label1;

        $r4 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: com.google.gwt.user.client.Command callback>;

        interfaceinvoke $r4.<com.google.gwt.user.client.Command: void execute()>();

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: com.google.gwt.user.client.Command callback> = null;

     label1:
        return;
    }

    private void scheduleClose(com.google.gwt.user.client.Command)
    {
        org.waveprotocol.wave.client.scheduler.TimerService $r3;
        com.google.gwt.user.client.Command r1;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager $r2;
        int $i0;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser r0;
        org.waveprotocol.wave.client.scheduler.Scheduler$Task $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser;

        r1 := @parameter0: com.google.gwt.user.client.Command;

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: com.google.gwt.user.client.Command callback> = r1;

        $r3 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: org.waveprotocol.wave.client.scheduler.TimerService timerService>;

        $r4 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: org.waveprotocol.wave.client.scheduler.Scheduler$Task task>;

        $r2 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager this$0>;

        $i0 = staticinvoke <org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: int access$900(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager)>($r2);

        interfaceinvoke $r3.<org.waveprotocol.wave.client.scheduler.TimerService: void scheduleDelayed(org.waveprotocol.wave.client.scheduler.Scheduler$Task,int)>($r4, $i0);

        return;
    }

    private void cancelScheduledClose()
    {
        org.waveprotocol.wave.client.scheduler.TimerService $r2;
        org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable $r3;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser r0;
        org.waveprotocol.wave.client.scheduler.Scheduler$Task $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser;

        $r2 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: org.waveprotocol.wave.client.scheduler.TimerService timerService>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: org.waveprotocol.wave.client.scheduler.Scheduler$Task task>;

        $r3 = (org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable) $r1;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.scheduler.TimerService: void cancel(org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable)>($r3);

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: com.google.gwt.user.client.Command callback> = null;

        return;
    }

    static void access$100(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser)
    {
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: void closeImmediately()>();

        return;
    }

    static void access$600(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser, com.google.gwt.user.client.Command)
    {
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser r0;
        com.google.gwt.user.client.Command r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser;

        r1 := @parameter1: com.google.gwt.user.client.Command;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: void scheduleClose(com.google.gwt.user.client.Command)>(r1);

        return;
    }

    static void access$700(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser)
    {
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: void cancelScheduledClose()>();

        return;
    }

    void <init>(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager, org.waveprotocol.wave.client.scheduler.TimerService, org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$1)
    {
        org.waveprotocol.wave.client.scheduler.TimerService r2;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r1;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$1 r3;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser r0;

        r0 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        r2 := @parameter1: org.waveprotocol.wave.client.scheduler.TimerService;

        r3 := @parameter2: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: void <init>(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager,org.waveprotocol.wave.client.scheduler.TimerService)>(r1, r2);

        return;
    }
}
