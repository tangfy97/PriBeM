class com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker extends com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker
{
    private final java.util.Collection sourceFiles;
    private final java.util.Collection schemaFiles;
    private final java.util.Collection sourcePaths;
    private final com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$InnerClassTemplateWorker innerWorker;
    private final com.google.gxp.compiler.alerts.AlertPolicy alertPolicy;
    private static final java.lang.String GXP_COMPILATION_EXCEPTION;
    private static final java.lang.String TEMP_OUT_VAR;

    void <init>(java.lang.Appendable, com.google.gxp.compiler.alerts.AlertSink, com.google.gxp.compiler.base.Template, java.util.Collection, java.util.Collection, java.util.Collection, com.google.gxp.compiler.alerts.AlertPolicy)
    {
        java.lang.Appendable r1;
        java.util.Collection r4, r5, r6;
        com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$InnerClassTemplateWorker $r7;
        com.google.gxp.compiler.alerts.AlertPolicy r8;
        com.google.gxp.compiler.alerts.AlertSink r2;
        com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.base.Template r3;

        r0 := @this: com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: com.google.gxp.compiler.alerts.AlertSink;

        r3 := @parameter2: com.google.gxp.compiler.base.Template;

        r4 := @parameter3: java.util.Collection;

        r5 := @parameter4: java.util.Collection;

        r6 := @parameter5: java.util.Collection;

        r8 := @parameter6: com.google.gxp.compiler.alerts.AlertPolicy;

        specialinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void <init>(java.lang.Appendable,com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.Template)>(r1, r2, r3);

        r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: java.util.Collection sourceFiles> = r4;

        r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: java.util.Collection schemaFiles> = r5;

        r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: java.util.Collection sourcePaths> = r6;

        $r7 = new com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$InnerClassTemplateWorker;

        specialinvoke $r7.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$InnerClassTemplateWorker: void <init>(java.lang.Appendable,com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.Template)>(r1, r2, r3);

        r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$InnerClassTemplateWorker innerWorker> = $r7;

        r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertPolicy alertPolicy> = r8;

        return;
    }

    protected com.google.gxp.compiler.alerts.SourcePosition getDefaultSourcePosition()
    {
        com.google.gxp.compiler.alerts.SourcePosition $r2;
        com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.base.Template $r1;

        r0 := @this: com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        return $r2;
    }

    protected java.lang.String getBaseClassName()
    {
        com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker r0;

        r0 := @this: com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker;

        return "com.google.gxp.base.dynamic.StubGxpTemplate";
    }

    protected void appendClass()
    {
        com.google.gxp.compiler.alerts.SourcePosition $r7;
        com.google.gxp.compiler.base.JavaAnnotation$Element $r3;
        java.lang.Object[] $r8;
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r2;
        com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$InnerClassTemplateWorker $r11;
        java.lang.Iterable $r5;
        java.lang.String $r9, $r10;
        com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.base.Template $r1, $r4, $r6;

        r0 := @this: com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r4 = r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r3 = <com.google.gxp.compiler.base.JavaAnnotation$Element: com.google.gxp.compiler.base.JavaAnnotation$Element CLASS>;

        $r5 = virtualinvoke $r4.<com.google.gxp.compiler.base.Template: java.lang.Iterable getJavaAnnotations(com.google.gxp.compiler.base.JavaAnnotation$Element)>($r3);

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendAnnotations(java.lang.Iterable)>($r5);

        $r6 = r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r7 = virtualinvoke $r6.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r8 = newarray (java.lang.Object)[2];

        $r9 = virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r2);

        $r8[0] = $r9;

        $r10 = virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: java.lang.String getBaseClassName()>();

        $r8[1] = $r10;

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r7, "public class %s extends %s {", $r8);

        specialinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendStaticContent()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendWriteMethod()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendWriteImplMethod()>();

        specialinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendDefaultAccessors()>();

        specialinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendParamConstructors()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendGetArgListMethod()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendGetGxpClosureMethod(boolean)>(1);

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendInterface()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendInstance()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine()>();

        $r11 = r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$InnerClassTemplateWorker innerWorker>;

        virtualinvoke $r11.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$InnerClassTemplateWorker: void appendClass()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        return;
    }

    private java.lang.String serializeAlertPolicy()
    {
        byte[] $r4;
        java.io.ByteArrayOutputStream $r0;
        java.io.IOException $r9;
        java.lang.Iterable $r7;
        com.google.gxp.compiler.io.RuntimeIOException $r10;
        com.google.gxp.compiler.alerts.AlertPolicy $r3;
        java.util.List $r5;
        com.google.gxp.com.google.common.base.Function $r6;
        java.io.ObjectOutputStream $r1;
        java.lang.String $r8;
        com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker r2;

        r2 := @this: com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker;

     label1:
        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.ObjectOutputStream;

        specialinvoke $r1.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r0);

        $r3 = r2.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertPolicy alertPolicy>;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        virtualinvoke $r1.<java.io.ObjectOutputStream: void close()>();

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>();

        $r4 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r5 = staticinvoke <com.google.gxp.com.google.common.collect.PrimitiveArrays: java.util.List asList(byte[])>($r4);

        $r6 = staticinvoke <com.google.gxp.com.google.common.base.Functions: com.google.gxp.com.google.common.base.Function toStringFunction()>();

        $r7 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>($r5, $r6);

        $r8 = staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.String join(java.lang.String,java.lang.Iterable)>(",", $r7);

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        $r10 = new com.google.gxp.compiler.io.RuntimeIOException;

        specialinvoke $r10.<com.google.gxp.compiler.io.RuntimeIOException: void <init>(java.io.IOException)>($r9);

        throw $r10;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void appendStaticContent()
    {
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r18, $r28, $r43;
        java.lang.Long $r5;
        java.util.Collection $r37, $r38, $r39;
        java.lang.StringBuilder $r15, $r20, $r21, $r24, $r26, $r31, $r32;
        com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker r0;
        java.lang.Object[] $r1, $r6, $r7, $r9, $r35, $r36, $r40;
        com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$InnerClassTemplateWorker $r42;
        long $l0;
        java.lang.String $r8, $r13, $r14, $r19, $r22, $r23, $r29, $r30, $r33, $r34, $r44;
        com.google.gxp.compiler.fs.FileRef $r4;
        com.google.gxp.compiler.base.Template $r2, $r10, $r17, $r27, $r41;
        com.google.gxp.compiler.alerts.SourcePosition $r3, $r12;
        com.google.gxp.compiler.base.OutputLanguage $r11, $r16, $r25;

        r0 := @this: com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r3 = virtualinvoke $r2.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r4 = virtualinvoke $r3.<com.google.gxp.compiler.alerts.SourcePosition: com.google.gxp.compiler.fs.FileRef getSource()>();

        $l0 = virtualinvoke $r4.<com.google.gxp.compiler.fs.FileRef: long getChecksum()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r1[0] = $r5;

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("private static long COMPILATION$CHECKSUM = %dL;", $r1);

        $r6 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("private static long COMPILATION$VERSION = 0;", $r6);

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("private static final com.google.gxp.compiler.alerts.AlertPolicy ALERT$POLICY =");

        $r7 = newarray (java.lang.Object)[1];

        $r8 = specialinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: java.lang.String serializeAlertPolicy()>();

        $r7[0] = $r8;

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("  createAlertPolicy(new byte[] {%s});", $r7);

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("private static final com.google.gxp.compiler.fs.FileRef SRC$GXP = ");

        $r9 = newarray (java.lang.Object)[1];

        $r11 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        $r10 = r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r12 = virtualinvoke $r10.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r13 = virtualinvoke $r12.<com.google.gxp.compiler.alerts.SourcePosition: java.lang.String getSourceName()>();

        $r14 = virtualinvoke $r11.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r13);

        $r9[0] = $r14;

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("  parseFilename(%s);", $r9);

        $r16 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r18 = virtualinvoke $r17.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r19 = virtualinvoke $r18.<com.google.gxp.compiler.base.TemplateName$FullyQualified: java.lang.String toString()>();

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$Impl");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = virtualinvoke $r16.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r22);

        $r25 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r27 = r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r28 = virtualinvoke $r27.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r29 = virtualinvoke $r28.<com.google.gxp.compiler.base.TemplateName$FullyQualified: java.lang.String toString()>();

        $r30 = virtualinvoke $r29.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$Impl");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r34 = virtualinvoke $r25.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r33);

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("private static final String JAVA$BASE =");

        $r35 = newarray (java.lang.Object)[1];

        $r35[0] = $r34;

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("  %s;", $r35);

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("private static final String CLASS$BASE =");

        $r36 = newarray (java.lang.Object)[1];

        $r36[0] = $r23;

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("  %s;", $r36);

        $r37 = r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: java.util.Collection sourceFiles>;

        specialinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendStaticFileRefList(java.lang.String,java.lang.Iterable)>("SRC$GXPS", $r37);

        $r38 = r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: java.util.Collection schemaFiles>;

        specialinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendStaticFileRefList(java.lang.String,java.lang.Iterable)>("SRC$SCHEMAS", $r38);

        $r39 = r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: java.util.Collection sourcePaths>;

        specialinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendStaticFileRefList(java.lang.String,java.lang.Iterable)>("SRC$PATHS", $r39);

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("private static com.google.gxp.compiler.fs.FileRef JAVA$FILE = null;");

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("private static java.util.Map<String, java.lang.reflect.Method> METHODS$ =");

        $r40 = newarray (java.lang.Object)[1];

        $r42 = r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$InnerClassTemplateWorker innerWorker>;

        $r41 = r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r43 = virtualinvoke $r41.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r44 = virtualinvoke $r42.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$InnerClassTemplateWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r43);

        $r40[0] = $r44;

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("  getMethodMap(%s.class);", $r40);

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine()>();

        return;
    }

    private void appendStaticFileRefList(java.lang.String, java.lang.Iterable)
    {
        java.lang.Object[] $r1;
        java.lang.Iterable r4;
        java.util.ArrayList $r3;
        java.lang.String r2, $r6, $r12, $r13, $r15;
        com.google.gxp.compiler.fs.FileRef r8;
        boolean $z0;
        java.util.Iterator $r5;
        com.google.gxp.compiler.base.OutputLanguage $r11;
        java.lang.Object $r7;
        java.lang.StringBuilder $r9, $r10, $r14;
        com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker r0;

        r0 := @this: com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Iterable;

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine()>();

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>(null, "private static final java.util.List<com.google.gxp.compiler.fs.FileRef> %s =", $r1);

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>(null, "  parseFilenameList(");

        $r3 = staticinvoke <com.google.gxp.com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r5 = interfaceinvoke r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.google.gxp.compiler.fs.FileRef) $r7;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r11 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        $r12 = virtualinvoke r8.<com.google.gxp.compiler.fs.FileRef: java.lang.String toFilename()>();

        $r13 = virtualinvoke $r11.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r12);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label1;

     label2:
        $r6 = staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.String join(java.lang.String,java.lang.Iterable)>(",\n", $r3);

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>(null, $r6);

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>(null, "  );");

        return;
    }

    private void appendReload()
    {
        com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker r0;

        r0 := @this: com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker;

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("long LAST$CHECKSUM = SRC$GXP.getChecksum();");

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("if ((LAST$CHECKSUM != 0 && LAST$CHECKSUM != COMPILATION$CHECKSUM)");

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("    || METHODS$ == null) {");

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("COMPILATION$VERSION++;");

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("com.google.gxp.compiler.fs.InMemoryFileSystem MEM$FS =");

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("    new com.google.gxp.compiler.fs.InMemoryFileSystem();");

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("JAVA$FILE = compileGxp(MEM$FS, SRC$GXPS, SRC$SCHEMAS, SRC$PATHS,");

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("                       JAVA$BASE, COMPILATION$VERSION, ALERT$POLICY);");

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("METHODS$ = compileJava(MEM$FS, CLASS$BASE, COMPILATION$VERSION);");

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("COMPILATION$CHECKSUM = LAST$CHECKSUM;");

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        return;
    }

    private void appendDefaultAccessors()
    {
        com.google.gxp.compiler.base.Expression $r6;
        java.lang.Object[] $r10, $r11;
        java.util.Iterator $r3;
        com.google.gxp.compiler.base.Type $r8;
        java.util.List $r2;
        com.google.gxp.compiler.base.Parameter r5;
        java.lang.Object $r4;
        java.lang.String $r7, $r9, $r12, $r13;
        com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.base.Template $r1;
        boolean $z0;

        r0 := @this: com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.google.gxp.compiler.base.Parameter) $r4;

        $r6 = virtualinvoke r5.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Expression getDefaultValue()>();

        if $r6 == null goto label2;

        $r7 = staticinvoke <com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator: java.lang.String access$000(com.google.gxp.compiler.base.Parameter)>(r5);

        $r8 = virtualinvoke r5.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Type getType()>();

        $r9 = virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: java.lang.String toJavaType(com.google.gxp.compiler.base.Type)>($r8);

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine()>();

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = $r9;

        $r10[1] = $r7;

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("public static %s %s() {", $r10);

        specialinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendReload()>();

        $r11 = newarray (java.lang.Object)[3];

        $r12 = virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: java.lang.String getBaseClassName()>();

        $r11[0] = $r12;

        $r13 = staticinvoke <com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator: java.lang.String access$100(java.lang.String)>($r9);

        $r11[1] = $r13;

        $r11[2] = $r7;

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("return %s.<%s>execNoExceptions(METHODS$, \"%s\", new Object[] {});", $r11);

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

     label2:
        goto label1;

     label3:
        return;
    }

    private void appendParamConstructors()
    {
        com.google.gxp.compiler.base.Expression $r6;
        java.lang.Object[] $r11, $r12;
        com.google.gxp.compiler.base.Parameter r5;
        java.lang.String $r7, $r9, $r10, $r13, $r14;
        com.google.gxp.compiler.base.Template $r1;
        boolean $z0;
        java.util.Iterator $r3;
        com.google.gxp.compiler.base.Type $r8;
        java.util.List $r2;
        java.lang.Object $r4;
        com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker r0;

        r0 := @this: com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.google.gxp.compiler.base.Parameter) $r4;

        $r6 = virtualinvoke r5.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Expression getConstructor()>();

        if $r6 == null goto label2;

        $r7 = staticinvoke <com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator: java.lang.String access$200(com.google.gxp.compiler.base.Parameter)>(r5);

        $r8 = virtualinvoke r5.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Type getType()>();

        $r9 = virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: java.lang.String toJavaType(com.google.gxp.compiler.base.Type)>($r8);

        $r10 = virtualinvoke r5.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine()>();

        $r11 = newarray (java.lang.Object)[3];

        $r11[0] = $r9;

        $r11[1] = $r7;

        $r11[2] = $r10;

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("public static %s %s(String %s) {", $r11);

        specialinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendReload()>();

        $r12 = newarray (java.lang.Object)[4];

        $r13 = virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: java.lang.String getBaseClassName()>();

        $r12[0] = $r13;

        $r14 = staticinvoke <com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator: java.lang.String access$100(java.lang.String)>($r9);

        $r12[1] = $r14;

        $r12[2] = $r7;

        $r12[3] = $r10;

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("return %s.<%s>execNoExceptions(METHODS$, \"%s\", new Object[] { %s });", $r12);

        virtualinvoke r0.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

     label2:
        goto label1;

     label3:
        return;
    }

    protected void appendWriteMethodBody()
    {
        java.lang.Object[] $r6, $r7, $r8, $r9, $r10, $r11;
        com.google.gxp.compiler.base.Parameter r13;
        java.lang.String $r5, $r14;
        com.google.gxp.compiler.base.Template $r2;
        boolean $z0;
        java.util.Iterator $r4;
        java.util.List $r3;
        java.lang.StringBuilder $r0;
        java.lang.Object $r12;
        com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker r1;

        r1 := @this: com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("writeImpl(%s, gxp_context");

        $r2 = r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r3 = virtualinvoke $r2.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.google.gxp.compiler.base.Parameter) $r12;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r14 = virtualinvoke r13.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("if (gxp_context.isTopLevelCall()) {");

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("try {");

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = "temp$out";

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("java.io.StringWriter %s = new java.io.StringWriter();", $r6);

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = "temp$out";

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>($r5, $r7);

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = "gxp$out";

        $r8[1] = "temp$out";

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("%s.append(%s.toString());", $r8);

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = "com.google.gxp.base.dynamic.GxpCompilationException";

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("} catch (%s gxp$e) {", $r9);

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = "gxp$out";

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("gxp$e.write(%s, gxp_context);", $r10);

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("} else {");

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = "gxp$out";

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>($r5, $r11);

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        return;
    }

    protected void appendWriteImplMethod()
    {
        java.lang.Object[] $r16, $r18, $r19;
        java.util.ArrayList $r0;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$Access $r6;
        com.google.gxp.compiler.base.Parameter r25;
        java.lang.String $r7, $r10, $r21, $r23, r26;
        com.google.gxp.compiler.base.Template $r2, $r12;
        boolean $z0, $z1, $z2;
        com.google.gxp.compiler.base.ThrowsDeclaration r24;
        java.util.Iterator $r4, $r14, $r15;
        java.util.List $r3, $r13;
        java.lang.StringBuilder $r5, $r8, $r9, $r11;
        java.lang.Object $r17, $r20, $r22;
        com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker r1;

        r1 := @this: com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker;

        $r0 = staticinvoke <com.google.gxp.com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r2 = r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r3 = virtualinvoke $r2.<com.google.gxp.compiler.base.Template: java.util.List getThrowsDeclarations()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r22 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r24 = (com.google.gxp.compiler.base.ThrowsDeclaration) $r22;

        $r23 = virtualinvoke r24.<com.google.gxp.compiler.base.ThrowsDeclaration: java.lang.String getExceptionType()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r23);

        goto label1;

     label2:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("java.io.IOException");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("java.lang.RuntimeException");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = <com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$Access: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$Access _private>;

        $r7 = virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: java.lang.String getWriteMethodSignature(com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$Access,boolean,java.lang.String)>($r6, 1, "writeImpl");

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r10);

        specialinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendReload()>();

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("try {");

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("exec(METHODS$, \"write\", ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("new Object[] {");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gxp$out");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", gxp_context");

        $r12 = r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r13 = virtualinvoke $r12.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r20 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r25 = (com.google.gxp.compiler.base.Parameter) $r20;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r21 = virtualinvoke r25.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        goto label3;

     label4:
        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("});");

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r11);

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("} catch (Throwable gxp$t) {");

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("rewriteStackTraceElements(gxp$t, JAVA$FILE);");

        $r15 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r17 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r26 = (java.lang.String) $r17;

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = r26;

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("if (gxp$t instanceof %s) {", $r18);

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = r26;

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("throw (%s)gxp$t;", $r19);

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        goto label5;

     label6:
        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = "com.google.gxp.base.dynamic.GxpCompilationException";

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("throw new %s.Throw(gxp$t);", $r16);

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        virtualinvoke r1.<com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        return;
    }

    public static void <clinit>()
    {
        <com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: java.lang.String TEMP_OUT_VAR> = "temp$out";

        <com.google.gxp.compiler.java.DynamicStubJavaCodeGenerator$TemplateWorker: java.lang.String GXP_COMPILATION_EXCEPTION> = "com.google.gxp.base.dynamic.GxpCompilationException";

        return;
    }
}
