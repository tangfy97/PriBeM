public class org.apache.tika.detect.MagicDetector extends java.lang.Object implements org.apache.tika.detect.Detector
{
    private static final java.nio.charset.Charset ISO_8859_1;
    private final org.apache.tika.mime.MediaType type;
    private final int length;
    private final byte[] pattern;
    private final int patternLength;
    private final boolean isRegex;
    private final boolean isStringIgnoreCase;
    private final byte[] mask;
    private final int offsetRangeBegin;
    private final int offsetRangeEnd;

    public static org.apache.tika.detect.MagicDetector parse(org.apache.tika.mime.MediaType, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        byte[] $r8, r9;
        org.apache.tika.mime.MediaType r5;
        int $i0, $i1, $i2, i3, i4, $i6;
        java.lang.String r0, r1, r2, r3, $r6, $r7;
        boolean $z0, $z1;
        org.apache.tika.detect.MagicDetector $r10;

        r5 := @parameter0: org.apache.tika.mime.MediaType;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        i3 = 0;

        i4 = 0;

        if r0 == null goto label2;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

        i3 = $i2;

        i4 = $i2;

        goto label2;

     label1:
        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $i1 = $i0 + 1;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

     label2:
        $r8 = staticinvoke <org.apache.tika.detect.MagicDetector: byte[] decodeValue(java.lang.String,java.lang.String)>(r1, r2);

        r9 = null;

        if r3 == null goto label3;

        r9 = staticinvoke <org.apache.tika.detect.MagicDetector: byte[] decodeValue(java.lang.String,java.lang.String)>(r3, r2);

     label3:
        $r10 = new org.apache.tika.detect.MagicDetector;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("regex");

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("stringignorecase");

        specialinvoke $r10.<org.apache.tika.detect.MagicDetector: void <init>(org.apache.tika.mime.MediaType,byte[],byte[],boolean,boolean,int,int)>(r5, $r8, r9, $z0, $z1, i3, i4);

        return $r10;
    }

    private static byte[] decodeValue(java.lang.String, java.lang.String)
    {
        byte[] $r2, $r3, $r4, $r5, r10;
        byte $b2, $b4, $b8, $b12, $b16, $b20, $b25, $b29, $b33, $b36, $b39, $b41, b42, b43, b44, b45, b46;
        long $l5, $l6, $l9, $l10, $l13, $l14, $l17, $l18, $l21, $l22, $l23, $l26, $l27, $l30, $l31, $l34;
        java.lang.AssertionError $r9;
        java.lang.String r0, r1, $r7, r11;
        java.util.Locale $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.io.UnsupportedEncodingException $r8;
        int $i0, $i1, $i3, $i7, $i11, $i15, $i19, $i24, $i28, $i32, $i35, $i37, $i38, $i40;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label01;

        if r1 != null goto label02;

     label01:
        return null;

     label02:
        r10 = null;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0x");

        if $z0 == 0 goto label03;

        r11 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(2);

        b42 = 16;

        b46 = 16;

        b45 = 16;

        b44 = 16;

        b43 = 16;

        goto label04;

     label03:
        r11 = r0;

        b42 = 8;

        b46 = 8;

        b45 = 8;

        b44 = 8;

        b43 = 8;

     label04:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("string");

        if $z1 != 0 goto label05;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("regex");

        if $z2 != 0 goto label05;

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("unicodeLE");

        if $z3 != 0 goto label05;

        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("unicodeBE");

        if $z4 == 0 goto label06;

     label05:
        r10 = staticinvoke <org.apache.tika.detect.MagicDetector: byte[] decodeString(java.lang.String,java.lang.String)>(r0, r1);

        goto label17;

     label06:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("stringignorecase");

        if $z5 == 0 goto label07;

        $r6 = <java.util.Locale: java.util.Locale ROOT>;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r6);

        r10 = staticinvoke <org.apache.tika.detect.MagicDetector: byte[] decodeString(java.lang.String,java.lang.String)>($r7, r1);

        goto label17;

     label07:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("byte");

        if $z6 == 0 goto label11;

     label08:
        r10 = virtualinvoke r11.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label09:
        goto label17;

     label10:
        $r8 := @caughtexception;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>("UTF-8 not supported.");

        throw $r9;

     label11:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("host16");

        if $z7 != 0 goto label12;

        $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("little16");

        if $z8 == 0 goto label13;

     label12:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r11, b46);

        $r2 = newarray (byte)[2];

        $i1 = $i0 & 255;

        $b2 = (byte) $i1;

        $r2[0] = $b2;

        $i3 = $i0 >> 8;

        $b4 = (byte) $i3;

        $r2[1] = $b4;

        r10 = $r2;

        goto label17;

     label13:
        $z9 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("big16");

        if $z9 == 0 goto label14;

        $i37 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r11, b45);

        $r5 = newarray (byte)[2];

        $i38 = $i37 >> 8;

        $b39 = (byte) $i38;

        $r5[0] = $b39;

        $i40 = $i37 & 255;

        $b41 = (byte) $i40;

        $r5[1] = $b41;

        r10 = $r5;

        goto label17;

     label14:
        $z10 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("host32");

        if $z10 != 0 goto label15;

        $z11 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("little32");

        if $z11 == 0 goto label16;

     label15:
        $l5 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r11, b43);

        $r3 = newarray (byte)[4];

        $l6 = $l5 & 255L;

        $i7 = (int) $l6;

        $b8 = (byte) $i7;

        $r3[0] = $b8;

        $l9 = $l5 & 65280L;

        $l10 = $l9 >> 8;

        $i11 = (int) $l10;

        $b12 = (byte) $i11;

        $r3[1] = $b12;

        $l13 = $l5 & 16711680L;

        $l14 = $l13 >> 16;

        $i15 = (int) $l14;

        $b16 = (byte) $i15;

        $r3[2] = $b16;

        $l17 = $l5 & -16777216L;

        $l18 = $l17 >> 24;

        $i19 = (int) $l18;

        $b20 = (byte) $i19;

        $r3[3] = $b20;

        r10 = $r3;

        goto label17;

     label16:
        $z12 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("big32");

        if $z12 == 0 goto label17;

        $l21 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r11, b44);

        $r4 = newarray (byte)[4];

        $l22 = $l21 & -16777216L;

        $l23 = $l22 >> 24;

        $i24 = (int) $l23;

        $b25 = (byte) $i24;

        $r4[0] = $b25;

        $l26 = $l21 & 16711680L;

        $l27 = $l26 >> 16;

        $i28 = (int) $l27;

        $b29 = (byte) $i28;

        $r4[1] = $b29;

        $l30 = $l21 & 65280L;

        $l31 = $l30 >> 8;

        $i32 = (int) $l31;

        $b33 = (byte) $i32;

        $r4[2] = $b33;

        $l34 = $l21 & 255L;

        $i35 = (int) $l34;

        $b36 = (byte) $i35;

        $r4[3] = $b36;

        r10 = $r4;

     label17:
        return r10;

        catch java.io.UnsupportedEncodingException from label08 to label09 with label10;
    }

    private static byte[] decodeString(java.lang.String, java.lang.String)
    {
        byte[] r8, r15;
        byte $b4, $b10, $b15, $b22, $b27, $b54, $b59;
        java.lang.StringBuilder $r10, $r12, $r17;
        java.lang.String r0, r3, $r4, $r5, $r6, $r7, $r11, $r13;
        char[] $r2;
        java.lang.Short $r14;
        boolean $z0, $z1, $z2, $z3;
        java.io.CharArrayWriter $r16;
        int $i0, $i1, $i2, $i5, $i6, $i7, $i9, $i11, $i12, $i16, $i17, $i18, $i19, $i23, $i24, $i26, $i28, $i31, $i33, $i35, $i37, $i39, $i40, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, i55, i56, i57, $i58, i60, i61, i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71;
        char $c3, $c8, $c13, $c14, $c20, $c21, $c25, $c29, $c30, $c32, $c34, $c36, $c38, $c41;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0x");

        if $z0 == 0 goto label03;

        $i45 = virtualinvoke r0.<java.lang.String: int length()>();

        $i46 = $i45 - 2;

        $i47 = $i46 / 2;

        r8 = newarray (byte)[$i47];

        i55 = 0;

     label01:
        $i48 = lengthof r8;

        if i55 >= $i48 goto label02;

        $i49 = i55 * 2;

        $i52 = 2 + $i49;

        $i50 = i55 * 2;

        $i51 = 4 + $i50;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i52, $i51);

        $i53 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r7, 16);

        $b54 = (byte) $i53;

        r8[i55] = $b54;

        i55 = i55 + 1;

        goto label01;

     label02:
        return r8;

     label03:
        $r16 = new java.io.CharArrayWriter;

        specialinvoke $r16.<java.io.CharArrayWriter: void <init>()>();

        i56 = 0;

     label04:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i56 >= $i0 goto label13;

        $c29 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i56);

        $i63 = (int) $c29;

        if $i63 != 92 goto label11;

        $i31 = i56 + 1;

        $c32 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i31);

        $i64 = (int) $c32;

        if $i64 != 92 goto label05;

        virtualinvoke $r16.<java.io.CharArrayWriter: void write(int)>(92);

        i56 = i56 + 1;

        goto label12;

     label05:
        $i33 = i56 + 1;

        $c34 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i33);

        $i65 = (int) $c34;

        if $i65 != 120 goto label06;

        $i43 = i56 + 2;

        $i42 = i56 + 4;

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i43, $i42);

        $i44 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r6, 16);

        virtualinvoke $r16.<java.io.CharArrayWriter: void write(int)>($i44);

        i56 = i56 + 3;

        goto label12;

     label06:
        $i35 = i56 + 1;

        $c36 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i35);

        $i66 = (int) $c36;

        if $i66 != 114 goto label07;

        virtualinvoke $r16.<java.io.CharArrayWriter: void write(int)>(13);

        i56 = i56 + 1;

        goto label12;

     label07:
        $i37 = i56 + 1;

        $c38 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i37);

        $i67 = (int) $c38;

        if $i67 != 110 goto label08;

        virtualinvoke $r16.<java.io.CharArrayWriter: void write(int)>(10);

        i56 = i56 + 1;

        goto label12;

     label08:
        i57 = i56 + 1;

     label09:
        $i39 = i56 + 4;

        if i57 >= $i39 goto label10;

        $i40 = virtualinvoke r0.<java.lang.String: int length()>();

        if i57 >= $i40 goto label10;

        $c41 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i57);

        $z3 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c41);

        if $z3 == 0 goto label10;

        i57 = i57 + 1;

        goto label09;

     label10:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $i58 = i56 + 1;

        $r11 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i58, i57);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <java.lang.Short: java.lang.Short decode(java.lang.String)>($r13);

        $b59 = virtualinvoke $r14.<java.lang.Short: byte byteValue()>();

        $i68 = (int) $b59;

        virtualinvoke $r16.<java.io.CharArrayWriter: void write(int)>($i68);

        i56 = i57 - 1;

        goto label12;

     label11:
        $c30 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i56);

        $i69 = (int) $c30;

        virtualinvoke $r16.<java.io.CharArrayWriter: void write(int)>($i69);

     label12:
        i56 = i56 + 1;

        goto label04;

     label13:
        $r2 = virtualinvoke $r16.<java.io.CharArrayWriter: char[] toCharArray()>();

        $r4 = "unicodeLE";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label16;

        $i17 = lengthof $r2;

        $i18 = $i17 * 2;

        r15 = newarray (byte)[$i18];

        i60 = 0;

     label14:
        $i19 = lengthof $r2;

        if i60 >= $i19 goto label15;

        $i23 = i60 * 2;

        $c20 = $r2[i60];

        $c21 = $c20 & 255;

        $b22 = (byte) $c21;

        r15[$i23] = $b22;

        $i24 = i60 * 2;

        $i28 = $i24 + 1;

        $c25 = $r2[i60];

        $i70 = (int) $c25;

        $i26 = $i70 >> 8;

        $b27 = (byte) $i26;

        r15[$i28] = $b27;

        i60 = i60 + 1;

        goto label14;

     label15:
        goto label21;

     label16:
        $r5 = "unicodeBE";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label19;

        $i5 = lengthof $r2;

        $i6 = $i5 * 2;

        r15 = newarray (byte)[$i6];

        i61 = 0;

     label17:
        $i7 = lengthof $r2;

        if i61 >= $i7 goto label18;

        $i11 = i61 * 2;

        $c8 = $r2[i61];

        $i71 = (int) $c8;

        $i9 = $i71 >> 8;

        $b10 = (byte) $i9;

        r15[$i11] = $b10;

        $i12 = i61 * 2;

        $i16 = $i12 + 1;

        $c13 = $r2[i61];

        $c14 = $c13 & 255;

        $b15 = (byte) $c14;

        r15[$i16] = $b15;

        i61 = i61 + 1;

        goto label17;

     label18:
        goto label21;

     label19:
        $i1 = lengthof $r2;

        r15 = newarray (byte)[$i1];

        i62 = 0;

     label20:
        $i2 = lengthof r15;

        if i62 >= $i2 goto label21;

        $c3 = $r2[i62];

        $b4 = (byte) $c3;

        r15[i62] = $b4;

        i62 = i62 + 1;

        goto label20;

     label21:
        return r15;
    }

    public void <init>(org.apache.tika.mime.MediaType, byte[])
    {
        byte[] r2;
        org.apache.tika.mime.MediaType r1;
        org.apache.tika.detect.MagicDetector r0;

        r0 := @this: org.apache.tika.detect.MagicDetector;

        r1 := @parameter0: org.apache.tika.mime.MediaType;

        r2 := @parameter1: byte[];

        specialinvoke r0.<org.apache.tika.detect.MagicDetector: void <init>(org.apache.tika.mime.MediaType,byte[],int)>(r1, r2, 0);

        return;
    }

    public void <init>(org.apache.tika.mime.MediaType, byte[], int)
    {
        byte[] r2;
        org.apache.tika.detect.MagicDetector r0;
        int i0;
        org.apache.tika.mime.MediaType r1;

        r0 := @this: org.apache.tika.detect.MagicDetector;

        r1 := @parameter0: org.apache.tika.mime.MediaType;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.tika.detect.MagicDetector: void <init>(org.apache.tika.mime.MediaType,byte[],byte[],int,int)>(r1, r2, null, i0, i0);

        return;
    }

    public void <init>(org.apache.tika.mime.MediaType, byte[], byte[], int, int)
    {
        byte[] r2, r3;
        org.apache.tika.detect.MagicDetector r0;
        int i0, i1;
        org.apache.tika.mime.MediaType r1;

        r0 := @this: org.apache.tika.detect.MagicDetector;

        r1 := @parameter0: org.apache.tika.mime.MediaType;

        r2 := @parameter1: byte[];

        r3 := @parameter2: byte[];

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        specialinvoke r0.<org.apache.tika.detect.MagicDetector: void <init>(org.apache.tika.mime.MediaType,byte[],byte[],boolean,int,int)>(r1, r2, r3, 0, i0, i1);

        return;
    }

    public void <init>(org.apache.tika.mime.MediaType, byte[], byte[], boolean, int, int)
    {
        byte[] r2, r3;
        org.apache.tika.detect.MagicDetector r0;
        int i0, i1;
        org.apache.tika.mime.MediaType r1;
        boolean z0;

        r0 := @this: org.apache.tika.detect.MagicDetector;

        r1 := @parameter0: org.apache.tika.mime.MediaType;

        r2 := @parameter1: byte[];

        r3 := @parameter2: byte[];

        z0 := @parameter3: boolean;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        specialinvoke r0.<org.apache.tika.detect.MagicDetector: void <init>(org.apache.tika.mime.MediaType,byte[],byte[],boolean,boolean,int,int)>(r1, r2, r3, z0, 0, i0, i1);

        return;
    }

    public void <init>(org.apache.tika.mime.MediaType, byte[], byte[], boolean, boolean, int, int)
    {
        byte[] r2, r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        byte $b7, $b8, $b9, $b10, $b12;
        boolean z0, z1, $z2;
        org.apache.tika.detect.MagicDetector r0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9;
        org.apache.tika.mime.MediaType r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i11, $i13, i14, $i15, $i16;
        java.lang.String $r10;
        java.lang.IllegalArgumentException $r3, $r19, $r20;

        r0 := @this: org.apache.tika.detect.MagicDetector;

        r1 := @parameter0: org.apache.tika.mime.MediaType;

        r2 := @parameter1: byte[];

        r11 := @parameter2: byte[];

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label01;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Matching media type is null");

        throw $r20;

     label01:
        if r2 != null goto label02;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Magic match pattern is null");

        throw $r19;

     label02:
        if i0 < 0 goto label03;

        if i1 >= i0 goto label04;

     label03:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid offset range: [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label04:
        r0.<org.apache.tika.detect.MagicDetector: org.apache.tika.mime.MediaType type> = r1;

        r0.<org.apache.tika.detect.MagicDetector: boolean isRegex> = z0;

        r0.<org.apache.tika.detect.MagicDetector: boolean isStringIgnoreCase> = z1;

        $i2 = lengthof r2;

        if r11 == null goto label05;

        $i13 = lengthof r11;

        goto label06;

     label05:
        $i13 = 0;

     label06:
        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i13);

        r0.<org.apache.tika.detect.MagicDetector: int patternLength> = $i3;

        $z2 = r0.<org.apache.tika.detect.MagicDetector: boolean isRegex>;

        if $z2 == 0 goto label07;

        r0.<org.apache.tika.detect.MagicDetector: int length> = 8192;

        goto label08;

     label07:
        $i4 = r0.<org.apache.tika.detect.MagicDetector: int patternLength>;

        r0.<org.apache.tika.detect.MagicDetector: int length> = $i4;

     label08:
        $i5 = r0.<org.apache.tika.detect.MagicDetector: int patternLength>;

        $r12 = newarray (byte)[$i5];

        r0.<org.apache.tika.detect.MagicDetector: byte[] mask> = $r12;

        $i6 = r0.<org.apache.tika.detect.MagicDetector: int patternLength>;

        $r13 = newarray (byte)[$i6];

        r0.<org.apache.tika.detect.MagicDetector: byte[] pattern> = $r13;

        i14 = 0;

     label09:
        $i15 = r0.<org.apache.tika.detect.MagicDetector: int patternLength>;

        if i14 >= $i15 goto label14;

        if r11 == null goto label10;

        $i11 = lengthof r11;

        if i14 >= $i11 goto label10;

        $r18 = r0.<org.apache.tika.detect.MagicDetector: byte[] mask>;

        $b12 = r11[i14];

        $r18[i14] = $b12;

        goto label11;

     label10:
        $r14 = r0.<org.apache.tika.detect.MagicDetector: byte[] mask>;

        $r14[i14] = -1;

     label11:
        $i16 = lengthof r2;

        if i14 >= $i16 goto label12;

        $r17 = r0.<org.apache.tika.detect.MagicDetector: byte[] pattern>;

        $b8 = r2[i14];

        $r16 = r0.<org.apache.tika.detect.MagicDetector: byte[] mask>;

        $b7 = $r16[i14];

        $b9 = $b8 & $b7;

        $b10 = (byte) $b9;

        $r17[i14] = $b10;

        goto label13;

     label12:
        $r15 = r0.<org.apache.tika.detect.MagicDetector: byte[] pattern>;

        $r15[i14] = 0;

     label13:
        i14 = i14 + 1;

        goto label09;

     label14:
        r0.<org.apache.tika.detect.MagicDetector: int offsetRangeBegin> = i0;

        r0.<org.apache.tika.detect.MagicDetector: int offsetRangeEnd> = i1;

        return;
    }

    public org.apache.tika.mime.MediaType detect(java.io.InputStream, org.apache.tika.metadata.Metadata) throws java.io.IOException
    {
        byte[] $r2, $r3, $r5, r17;
        org.apache.tika.metadata.Metadata r15;
        java.util.regex.Matcher $r10;
        byte $b18, $b19, $b20, $b34, b41;
        org.apache.tika.detect.MagicDetector r1;
        java.lang.Throwable $r14;
        long $l32, $l33, $l36, $l37;
        org.apache.tika.mime.MediaType $r11, r12, $r13, r16, r18, r19;
        java.lang.String $r20;
        java.nio.ByteBuffer $r7;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        java.nio.CharBuffer $r9;
        java.util.regex.Pattern $r6;
        java.nio.charset.Charset $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i35, i38, i39, i40, i42, $i43, $i44, $i45, i46, i47, i48, $i49, $i51, $i53, $i54, $i55, $i56;
        java.io.InputStream r0;

        r1 := @this: org.apache.tika.detect.MagicDetector;

        r0 := @parameter0: java.io.InputStream;

        r15 := @parameter1: org.apache.tika.metadata.Metadata;

        if r0 != null goto label01;

        $r13 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType OCTET_STREAM>;

        return $r13;

     label01:
        $i1 = r1.<org.apache.tika.detect.MagicDetector: int offsetRangeEnd>;

        $i0 = r1.<org.apache.tika.detect.MagicDetector: int length>;

        $i2 = $i1 + $i0;

        virtualinvoke r0.<java.io.InputStream: void mark(int)>($i2);

     label02:
        i38 = 0;

     label03:
        $i3 = r1.<org.apache.tika.detect.MagicDetector: int offsetRangeBegin>;

        if i38 >= $i3 goto label08;

        $i30 = r1.<org.apache.tika.detect.MagicDetector: int offsetRangeBegin>;

        $i31 = $i30 - i38;

        $l32 = (long) $i31;

        $l33 = virtualinvoke r0.<java.io.InputStream: long skip(long)>($l32);

        $b34 = $l33 cmp 0L;

        $i49 = (int) $b34;

        if $i49 <= 0 goto label04;

        $l36 = (long) i38;

        $l37 = $l36 + $l33;

        i38 = (int) $l37;

        goto label07;

     label04:
        $i35 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i51 = (int) -1;

        if $i35 == $i51 goto label05;

        i38 = i38 + 1;

        goto label07;

     label05:
        r16 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType OCTET_STREAM>;

     label06:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

        return r16;

     label07:
        goto label03;

     label08:
        $i7 = r1.<org.apache.tika.detect.MagicDetector: int length>;

        $i5 = r1.<org.apache.tika.detect.MagicDetector: int offsetRangeEnd>;

        $i4 = r1.<org.apache.tika.detect.MagicDetector: int offsetRangeBegin>;

        $i6 = $i5 - $i4;

        $i8 = $i7 + $i6;

        r17 = newarray (byte)[$i8];

        $i9 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r17);

        i39 = $i9;

        if $i9 <= 0 goto label09;

        i38 = i38 + $i9;

     label09:
        $i53 = (int) -1;

        if i39 == $i53 goto label11;

        $i24 = r1.<org.apache.tika.detect.MagicDetector: int offsetRangeEnd>;

        $i23 = r1.<org.apache.tika.detect.MagicDetector: int length>;

        $i25 = $i24 + $i23;

        if i38 >= $i25 goto label11;

        $i26 = r1.<org.apache.tika.detect.MagicDetector: int offsetRangeBegin>;

        i40 = i38 - $i26;

        $i27 = lengthof r17;

        $i28 = $i27 - i40;

        $i29 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r17, i40, $i28);

        i39 = $i29;

        if $i29 <= 0 goto label10;

        i38 = i38 + $i29;

     label10:
        goto label09;

     label11:
        $z0 = r1.<org.apache.tika.detect.MagicDetector: boolean isRegex>;

        if $z0 == 0 goto label17;

        b41 = 0;

        $z2 = r1.<org.apache.tika.detect.MagicDetector: boolean isStringIgnoreCase>;

        if $z2 == 0 goto label12;

        b41 = 2;

     label12:
        $r20 = new java.lang.String;

        $r5 = r1.<org.apache.tika.detect.MagicDetector: byte[] pattern>;

        specialinvoke $r20.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, "UTF-8");

        $r6 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r20, b41);

        $r7 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r17);

        $r8 = <org.apache.tika.detect.MagicDetector: java.nio.charset.Charset ISO_8859_1>;

        $r9 = virtualinvoke $r8.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r7);

        $r10 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r9);

        i42 = 0;

     label13:
        $i43 = r1.<org.apache.tika.detect.MagicDetector: int offsetRangeEnd>;

        $i44 = r1.<org.apache.tika.detect.MagicDetector: int offsetRangeBegin>;

        $i45 = $i43 - $i44;

        if i42 > $i45 goto label16;

        $i21 = r1.<org.apache.tika.detect.MagicDetector: int length>;

        $i22 = $i21 + i42;

        virtualinvoke $r10.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>(i42, $i22);

        $z3 = virtualinvoke $r10.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z3 == 0 goto label15;

        r12 = r1.<org.apache.tika.detect.MagicDetector: org.apache.tika.mime.MediaType type>;

     label14:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

        return r12;

     label15:
        i42 = i42 + 1;

        goto label13;

     label16:
        goto label28;

     label17:
        $i11 = r1.<org.apache.tika.detect.MagicDetector: int offsetRangeBegin>;

        $i10 = r1.<org.apache.tika.detect.MagicDetector: int length>;

        $i12 = $i11 + $i10;

        if i38 >= $i12 goto label19;

        r18 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType OCTET_STREAM>;

     label18:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

        return r18;

     label19:
        i46 = 0;

     label20:
        $i14 = r1.<org.apache.tika.detect.MagicDetector: int offsetRangeEnd>;

        $i13 = r1.<org.apache.tika.detect.MagicDetector: int offsetRangeBegin>;

        $i15 = $i14 - $i13;

        if i46 > $i15 goto label28;

        z4 = 1;

        i47 = 0;

     label21:
        if z4 == 0 goto label25;

        $i16 = r1.<org.apache.tika.detect.MagicDetector: int length>;

        if i47 >= $i16 goto label25;

        $i17 = i46 + i47;

        $b19 = r17[$i17];

        $r2 = r1.<org.apache.tika.detect.MagicDetector: byte[] mask>;

        $b18 = $r2[i47];

        $i54 = (int) $b19;

        $i55 = (int) $b18;

        i48 = $i54 & $i55;

        $z1 = r1.<org.apache.tika.detect.MagicDetector: boolean isStringIgnoreCase>;

        if $z1 == 0 goto label22;

        i48 = staticinvoke <java.lang.Character: int toLowerCase(int)>(i48);

     label22:
        $r3 = r1.<org.apache.tika.detect.MagicDetector: byte[] pattern>;

        $b20 = $r3[i47];

        $i56 = (int) $b20;

        if i48 != $i56 goto label23;

        $z5 = 1;

        goto label24;

     label23:
        $z5 = 0;

     label24:
        z4 = $z5;

        i47 = i47 + 1;

        goto label21;

     label25:
        if z4 == 0 goto label27;

        r19 = r1.<org.apache.tika.detect.MagicDetector: org.apache.tika.mime.MediaType type>;

     label26:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

        return r19;

     label27:
        i46 = i46 + 1;

        goto label20;

     label28:
        $r11 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType OCTET_STREAM>;

     label29:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

        return $r11;

     label30:
        $r14 := @caughtexception;

     label31:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

        throw $r14;

        catch java.lang.Throwable from label02 to label06 with label30;
        catch java.lang.Throwable from label07 to label14 with label30;
        catch java.lang.Throwable from label15 to label18 with label30;
        catch java.lang.Throwable from label19 to label26 with label30;
        catch java.lang.Throwable from label27 to label29 with label30;
        catch java.lang.Throwable from label30 to label31 with label30;
    }

    public int getLength()
    {
        int $i0;
        org.apache.tika.detect.MagicDetector r0;

        r0 := @this: org.apache.tika.detect.MagicDetector;

        $i0 = r0.<org.apache.tika.detect.MagicDetector: int patternLength>;

        return $i0;
    }

    public java.lang.String toString()
    {
        byte[] $r6, $r9, $r12;
        org.apache.tika.mime.MediaType $r3;
        int $i0;
        java.lang.String $r14;
        org.apache.tika.detect.MagicDetector r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7, $r8, $r10, $r11, $r13;

        r2 := @this: org.apache.tika.detect.MagicDetector;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Magic Detection for ");

        $r3 = r2.<org.apache.tika.detect.MagicDetector: org.apache.tika.mime.MediaType type>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" looking for ");

        $r6 = r2.<org.apache.tika.detect.MagicDetector: byte[] pattern>;

        $i0 = lengthof $r6;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes = ");

        $r9 = r2.<org.apache.tika.detect.MagicDetector: byte[] pattern>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mask = ");

        $r12 = r2.<org.apache.tika.detect.MagicDetector: byte[] mask>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    static void <clinit>()
    {
        java.nio.charset.Charset $r0;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("ISO-8859-1");

        <org.apache.tika.detect.MagicDetector: java.nio.charset.Charset ISO_8859_1> = $r0;

        return;
    }
}
