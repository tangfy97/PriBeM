public final class org.apache.cxf.helpers.IOUtils extends java.lang.Object
{
    public static final java.nio.charset.Charset UTF8_CHARSET;
    public static final int DEFAULT_BUFFER_SIZE;

    private void <init>()
    {
        org.apache.cxf.helpers.IOUtils r0;

        r0 := @this: org.apache.cxf.helpers.IOUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String newStringFromBytes(byte[], java.lang.String)
    {
        byte[] r1;
        java.lang.RuntimeException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r0, r2, $r9;
        java.io.UnsupportedEncodingException $r3;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

     label1:
        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>(r1, r2);

     label2:
        return $r0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Impossible failure: Charset.forName(\"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\") returns invalid name.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String newStringFromBytes(byte[])
    {
        byte[] r0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2, $r3;

        r0 := @parameter0: byte[];

        $r1 = <org.apache.cxf.helpers.IOUtils: java.nio.charset.Charset UTF8_CHARSET>;

        $r2 = virtualinvoke $r1.<java.nio.charset.Charset: java.lang.String name()>();

        $r3 = staticinvoke <org.apache.cxf.helpers.IOUtils: java.lang.String newStringFromBytes(byte[],java.lang.String)>(r0, $r2);

        return $r3;
    }

    public static java.lang.String newStringFromBytes(byte[], java.lang.String, int, int)
    {
        byte[] r1;
        java.lang.RuntimeException $r4;
        int i0, i1;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r0, r2, $r9;
        java.io.UnsupportedEncodingException $r3;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

     label1:
        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r1, i0, i1, r2);

     label2:
        return $r0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Impossible failure: Charset.forName(\"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\") returns invalid name.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String newStringFromBytes(byte[], int, int)
    {
        byte[] r0;
        java.nio.charset.Charset $r1;
        int i0, i1;
        java.lang.String $r2, $r3;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = <org.apache.cxf.helpers.IOUtils: java.nio.charset.Charset UTF8_CHARSET>;

        $r2 = virtualinvoke $r1.<java.nio.charset.Charset: java.lang.String name()>();

        $r3 = staticinvoke <org.apache.cxf.helpers.IOUtils: java.lang.String newStringFromBytes(byte[],java.lang.String,int,int)>(r0, $r2, i0, i1);

        return $r3;
    }

    public static int copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        int $i0, $i1;
        org.apache.cxf.io.CopyingOutputStream $r2;
        boolean $z0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r0 := @parameter1: java.io.OutputStream;

        $z0 = r0 instanceof org.apache.cxf.io.CopyingOutputStream;

        if $z0 == 0 goto label1;

        $r2 = (org.apache.cxf.io.CopyingOutputStream) r0;

        $i1 = interfaceinvoke $r2.<org.apache.cxf.io.CopyingOutputStream: int copyFrom(java.io.InputStream)>(r1);

        return $i1;

     label1:
        $i0 = staticinvoke <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)>(r1, r0, 4096);

        return $i0;
    }

    public static int copyAndCloseInput(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.lang.Throwable $r2;
        int $i0;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

     label1:
        $i0 = staticinvoke <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r0, r1);

     label2:
        virtualinvoke r0.<java.io.InputStream: void close()>();

        return $i0;

     label3:
        $r2 := @caughtexception;

     label4:
        virtualinvoke r0.<java.io.InputStream: void close()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static int copyAndCloseInput(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.lang.Throwable $r2;
        int i0, $i1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        i0 := @parameter2: int;

     label1:
        $i1 = staticinvoke <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)>(r0, r1, i0);

     label2:
        virtualinvoke r0.<java.io.InputStream: void close()>();

        return $i1;

     label3:
        $r2 := @caughtexception;

     label4:
        virtualinvoke r0.<java.io.InputStream: void close()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void copyAndCloseInput(java.io.Reader, java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r1;
        java.lang.Throwable $r2;
        java.io.Reader r0;

        r0 := @parameter0: java.io.Reader;

        r1 := @parameter1: java.io.Writer;

     label1:
        staticinvoke <org.apache.cxf.helpers.IOUtils: void copy(java.io.Reader,java.io.Writer,int)>(r0, r1, 4096);

     label2:
        virtualinvoke r0.<java.io.Reader: void close()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

     label4:
        virtualinvoke r0.<java.io.Reader: void close()>();

        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void copyAndCloseInput(java.io.Reader, java.io.Writer, int) throws java.io.IOException
    {
        java.lang.Throwable $r2;
        java.io.Writer r1;
        int i0;
        java.io.Reader r0;

        r0 := @parameter0: java.io.Reader;

        r1 := @parameter1: java.io.Writer;

        i0 := @parameter2: int;

     label1:
        staticinvoke <org.apache.cxf.helpers.IOUtils: void copy(java.io.Reader,java.io.Writer,int)>(r0, r1, i0);

     label2:
        virtualinvoke r0.<java.io.Reader: void close()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

     label4:
        virtualinvoke r0.<java.io.Reader: void close()>();

        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static int copy(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream r1;
        byte[] $r3;
        java.io.IOException $r4;
        int $i0, i1, i2, i3, i4, $i6;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        i1 := @parameter2: int;

        $i0 = virtualinvoke r0.<java.io.InputStream: int available()>();

        i2 = $i0;

        if $i0 <= 262144 goto label1;

        i2 = 262144;

     label1:
        if i2 <= i1 goto label2;

        i1 = i2;

     label2:
        $r3 = newarray (byte)[i1];

        i3 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>($r3);

        i4 = 0;

     label3:
        $i6 = (int) -1;

        if $i6 == i3 goto label5;

        if i3 != 0 goto label4;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("0 bytes read in violation of InputStream.read(byte[])");

        throw $r4;

     label4:
        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, i3);

        i4 = i4 + i3;

        i3 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>($r3);

        goto label3;

     label5:
        return i4;
    }

    public static void copy(java.io.Reader, java.io.Writer, int) throws java.io.IOException
    {
        int i0, i1, $i3;
        java.io.Writer r2;
        char[] r0;
        java.io.Reader r1;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.io.Writer;

        i0 := @parameter2: int;

        r0 = newarray (char)[i0];

        i1 = virtualinvoke r1.<java.io.Reader: int read(char[])>(r0);

     label1:
        $i3 = (int) -1;

        if $i3 == i1 goto label2;

        virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, i1);

        i1 = virtualinvoke r1.<java.io.Reader: int read(char[])>(r0);

        goto label1;

     label2:
        return;
    }

    public static java.lang.String toString(java.io.InputStream) throws java.io.IOException
    {
        java.lang.String $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int)>(r0, 4096);

        return $r1;
    }

    public static java.lang.String toString(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.lang.String r1, $r2;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int,java.lang.String)>(r0, 4096, r1);

        return $r2;
    }

    public static java.lang.String toString(java.io.InputStream, int) throws java.io.IOException
    {
        int i0;
        java.lang.String $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int,java.lang.String)>(r0, i0, null);

        return $r1;
    }

    public static java.lang.String toString(java.io.InputStream, int, java.lang.String) throws java.io.IOException
    {
        java.nio.charset.Charset $r3;
        int $i0, i1;
        java.lang.String r1, $r2;
        java.io.InputStreamReader $r4;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<java.io.InputStream: int available()>();

        if $i0 <= i1 goto label1;

        i1 = $i0;

     label1:
        if r1 != null goto label2;

        $r4 = new java.io.InputStreamReader;

        $r3 = <org.apache.cxf.helpers.IOUtils: java.nio.charset.Charset UTF8_CHARSET>;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r0, $r3);

        goto label3;

     label2:
        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r0, r1);

     label3:
        $r2 = staticinvoke <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.Reader,int)>($r4, i1);

        return $r2;
    }

    public static java.lang.String toString(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        java.lang.String $r1;

        r0 := @parameter0: java.io.Reader;

        $r1 = staticinvoke <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.Reader,int)>(r0, 4096);

        return $r1;
    }

    public static java.lang.String toString(java.io.Reader, int) throws java.io.IOException
    {
        java.io.IOException $r7;
        java.io.Reader r2;
        int i0, i1, $i3;
        char[] r1;
        java.lang.StringBuilder $r6;
        java.lang.String $r3, $r8;

        r2 := @parameter0: java.io.Reader;

        i0 := @parameter1: int;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        r1 = newarray (char)[i0];

        i1 = virtualinvoke r2.<java.io.Reader: int read(char[])>(r1);

     label1:
        $i3 = (int) -1;

        if $i3 == i1 goto label3;

        if i1 != 0 goto label2;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("0 bytes read in violation of InputStream.read(byte[])");

        throw $r7;

     label2:
        $r8 = new java.lang.String;

        specialinvoke $r8.<java.lang.String: void <init>(char[],int,int)>(r1, 0, i1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        i1 = virtualinvoke r2.<java.io.Reader: int read(char[])>(r1);

        goto label1;

     label3:
        virtualinvoke r2.<java.io.Reader: void close()>();

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String readStringFromStream(java.io.InputStream) throws java.io.IOException
    {
        int i1, $i3;
        char $c0;
        java.lang.StringBuilder $r3;
        java.lang.String $r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(1024);

        i1 = virtualinvoke r1.<java.io.InputStream: int read()>();

     label1:
        $i3 = (int) -1;

        if i1 == $i3 goto label2;

        $c0 = (char) i1;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        i1 = virtualinvoke r1.<java.io.InputStream: int read()>();

        goto label1;

     label2:
        virtualinvoke r1.<java.io.InputStream: void close()>();

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream) throws java.io.IOException
    {
        java.io.ByteArrayInputStream $r2;
        org.apache.cxf.helpers.LoadingByteArrayOutputStream $r1;
        int $i0, i1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke r0.<java.io.InputStream: int available()>();

        i1 = $i0;

        if $i0 >= 4096 goto label1;

        i1 = 4096;

     label1:
        $r1 = new org.apache.cxf.helpers.LoadingByteArrayOutputStream;

        specialinvoke $r1.<org.apache.cxf.helpers.LoadingByteArrayOutputStream: void <init>(int)>(i1);

        staticinvoke <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r0, $r1);

        virtualinvoke r0.<java.io.InputStream: void close()>();

        $r2 = virtualinvoke $r1.<org.apache.cxf.helpers.LoadingByteArrayOutputStream: java.io.ByteArrayInputStream createInputStream()>();

        return $r2;
    }

    public static void consume(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r1;
        int $i0, $i1, i2, $i3, $i5, $i7;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke r0.<java.io.InputStream: int available()>();

        i2 = $i0;

        if $i0 != 0 goto label2;

        $i1 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i5 = (int) -1;

        if $i1 != $i5 goto label1;

        return;

     label1:
        i2 = virtualinvoke r0.<java.io.InputStream: int available()>();

     label2:
        if i2 >= 4096 goto label3;

        i2 = 4096;

     label3:
        if i2 <= 65536 goto label4;

        i2 = 65536;

     label4:
        $r1 = newarray (byte)[i2];

     label5:
        $i3 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>($r1);

        $i7 = (int) -1;

        if $i3 == $i7 goto label6;

        goto label5;

     label6:
        return;
    }

    public static byte[] readBytesFromStream(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r2;
        java.io.ByteArrayOutputStream $r1;
        int $i0, i1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke r0.<java.io.InputStream: int available()>();

        i1 = $i0;

        if $i0 >= 4096 goto label1;

        i1 = 4096;

     label1:
        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>(int)>(i1);

        staticinvoke <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r0, $r1);

        virtualinvoke r0.<java.io.InputStream: void close()>();

        $r2 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    static void <clinit>()
    {
        java.nio.charset.Charset $r0;

        <org.apache.cxf.helpers.IOUtils: int DEFAULT_BUFFER_SIZE> = 4096;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        <org.apache.cxf.helpers.IOUtils: java.nio.charset.Charset UTF8_CHARSET> = $r0;

        return;
    }
}
