public abstract class org.apache.batik.bridge.TextUtilities extends java.lang.Object implements org.apache.batik.util.CSSConstants, org.apache.batik.bridge.ErrorConstants
{

    public void <init>()
    {
        org.apache.batik.bridge.TextUtilities r0;

        r0 := @this: org.apache.batik.bridge.TextUtilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getElementContent(org.w3c.dom.Element)
    {
        short $s0;
        org.w3c.dom.Element r1, $r3;
        java.lang.StringBuffer $r7;
        org.w3c.dom.Node r6;
        int $i1;
        java.lang.String $r2, $r4, $r5;

        r1 := @parameter0: org.w3c.dom.Element;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        r6 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label5;

     label1:
        $s0 = interfaceinvoke r6.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label3;
            case 4: goto label3;
            default: goto label4;
        };

     label2:
        $r3 = (org.w3c.dom.Element) r6;

        $r4 = staticinvoke <org.apache.batik.bridge.TextUtilities: java.lang.String getElementContent(org.w3c.dom.Element)>($r3);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        goto label4;

     label3:
        $r2 = interfaceinvoke r6.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label4:
        r6 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label5:
        if r6 != null goto label1;

        $r5 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public static java.util.ArrayList svgHorizontalCoordinateArrayToUserSpace(org.w3c.dom.Element, java.lang.String, java.lang.String, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.parser.UnitProcessor$Context $r2;
        java.lang.Float $r6;
        org.apache.batik.bridge.BridgeContext r0;
        java.util.ArrayList $r3;
        org.w3c.dom.Element r1;
        java.util.StringTokenizer $r4;
        float $f0;
        java.lang.String r5, $r7, r8;
        boolean $z0;

        r1 := @parameter0: org.w3c.dom.Element;

        r8 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r0 := @parameter3: org.apache.batik.bridge.BridgeContext;

        $r2 = staticinvoke <org.apache.batik.bridge.UnitProcessor: org.apache.batik.parser.UnitProcessor$Context createContext(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r0, r1);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new java.util.StringTokenizer;

        specialinvoke $r4.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r5, ", ", 0);

        goto label2;

     label1:
        $r6 = new java.lang.Float;

        $r7 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $f0 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>($r7, r8, $r2);

        specialinvoke $r6.<java.lang.Float: void <init>(float)>($f0);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label2:
        $z0 = virtualinvoke $r4.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label1;

        return $r3;
    }

    public static java.util.ArrayList svgVerticalCoordinateArrayToUserSpace(org.w3c.dom.Element, java.lang.String, java.lang.String, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.parser.UnitProcessor$Context $r2;
        java.lang.Float $r6;
        org.apache.batik.bridge.BridgeContext r0;
        java.util.ArrayList $r3;
        org.w3c.dom.Element r1;
        java.util.StringTokenizer $r4;
        float $f0;
        java.lang.String r5, $r7, r8;
        boolean $z0;

        r1 := @parameter0: org.w3c.dom.Element;

        r8 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r0 := @parameter3: org.apache.batik.bridge.BridgeContext;

        $r2 = staticinvoke <org.apache.batik.bridge.UnitProcessor: org.apache.batik.parser.UnitProcessor$Context createContext(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r0, r1);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new java.util.StringTokenizer;

        specialinvoke $r4.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r5, ", ", 0);

        goto label2;

     label1:
        $r6 = new java.lang.Float;

        $r7 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $f0 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>($r7, r8, $r2);

        specialinvoke $r6.<java.lang.Float: void <init>(float)>($f0);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label2:
        $z0 = virtualinvoke $r4.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label1;

        return $r3;
    }

    public static java.util.ArrayList svgRotateArrayToFloats(org.w3c.dom.Element, java.lang.String, java.lang.String, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Float $r4;
        java.lang.Object[] $r9;
        org.apache.batik.bridge.BridgeException $r6;
        java.lang.NumberFormatException $r5;
        org.apache.batik.bridge.BridgeContext r7;
        java.util.ArrayList $r2;
        org.w3c.dom.Element r8;
        java.util.StringTokenizer $r0;
        float $f0;
        java.lang.String r1, $r3, r10;
        boolean $z0;
        double $d0, $d1;

        r8 := @parameter0: org.w3c.dom.Element;

        r10 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r7 := @parameter3: org.apache.batik.bridge.BridgeContext;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r1, ", ", 0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        goto label4;

     label1:
        $r3 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r4 = new java.lang.Float;

        $f0 = staticinvoke <org.apache.batik.bridge.SVGUtilities: float convertSVGNumber(java.lang.String)>($r3);

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        specialinvoke $r4.<java.lang.Float: void <init>(double)>($d1);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.batik.bridge.BridgeException;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r10;

        $r9[1] = r1;

        specialinvoke $r6.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r7, r8, $r5, "attribute.malformed", $r9);

        throw $r6;

     label4:
        $z0 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label1;

        return $r2;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static java.lang.Float convertFontSize(org.w3c.dom.Element)
    {
        java.lang.Float $r2;
        org.w3c.dom.Element r0;
        float $f0;
        org.apache.batik.css.engine.value.Value $r1;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 22);

        $r2 = new java.lang.Float;

        $f0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        specialinvoke $r2.<java.lang.Float: void <init>(float)>($f0);

        return $r2;
    }

    public static java.lang.Float convertFontStyle(org.w3c.dom.Element)
    {
        java.lang.Float $r3, $r4;
        org.w3c.dom.Element r0;
        int $i1;
        char $c0;
        java.lang.String $r2;
        org.apache.batik.css.engine.value.Value $r1;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 25);

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        lookupswitch($i1)
        {
            case 110: goto label1;
            default: goto label2;
        };

     label1:
        $r3 = <java.awt.font.TextAttribute: java.lang.Float POSTURE_REGULAR>;

        return $r3;

     label2:
        $r4 = <java.awt.font.TextAttribute: java.lang.Float POSTURE_OBLIQUE>;

        return $r4;
    }

    public static java.lang.Float convertFontStretch(org.w3c.dom.Element)
    {
        java.lang.Float $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r2;
        char $c0, $c1, $c2, $c3;
        org.apache.batik.css.engine.value.Value $r1;
        org.w3c.dom.Element r0;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 24);

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i5 = (int) $c0;

        lookupswitch($i5)
        {
            case 101: goto label3;
            case 115: goto label6;
            case 117: goto label1;
            default: goto label8;
        };

     label1:
        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(6);

        $i6 = (int) $c1;

        if $i6 != 99 goto label2;

        $r4 = <java.awt.font.TextAttribute: java.lang.Float WIDTH_CONDENSED>;

        return $r4;

     label2:
        $r3 = <java.awt.font.TextAttribute: java.lang.Float WIDTH_EXTENDED>;

        return $r3;

     label3:
        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(6);

        $i7 = (int) $c3;

        if $i7 != 99 goto label4;

        $r9 = <java.awt.font.TextAttribute: java.lang.Float WIDTH_CONDENSED>;

        return $r9;

     label4:
        $i4 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i4 != 8 goto label5;

        $r8 = <java.awt.font.TextAttribute: java.lang.Float WIDTH_SEMI_EXTENDED>;

        return $r8;

     label5:
        $r7 = <java.awt.font.TextAttribute: java.lang.Float WIDTH_EXTENDED>;

        return $r7;

     label6:
        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(6);

        $i8 = (int) $c2;

        if $i8 != 99 goto label7;

        $r6 = <java.awt.font.TextAttribute: java.lang.Float WIDTH_SEMI_CONDENSED>;

        return $r6;

     label7:
        $r5 = <java.awt.font.TextAttribute: java.lang.Float WIDTH_SEMI_EXTENDED>;

        return $r5;

     label8:
        $r10 = <java.awt.font.TextAttribute: java.lang.Float WIDTH_REGULAR>;

        return $r10;
    }

    public static java.lang.Float convertFontWeight(org.w3c.dom.Element)
    {
        java.lang.Float $r2, $r3, $r4, $r5, $r6, $r7;
        org.apache.batik.css.engine.value.Value $r1;
        org.w3c.dom.Element r0;
        int $i0;
        float $f0;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 27);

        $f0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $i0 = (int) $f0;

        lookupswitch($i0)
        {
            case 100: goto label1;
            case 200: goto label2;
            case 300: goto label3;
            case 400: goto label4;
            case 500: goto label5;
            default: goto label6;
        };

     label1:
        $r6 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_EXTRA_LIGHT>;

        return $r6;

     label2:
        $r5 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_LIGHT>;

        return $r5;

     label3:
        $r4 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_DEMILIGHT>;

        return $r4;

     label4:
        $r3 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_REGULAR>;

        return $r3;

     label5:
        $r2 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_SEMIBOLD>;

        return $r2;

     label6:
        $r7 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_BOLD>;

        return $r7;
    }

    public static org.apache.batik.gvt.TextNode$Anchor convertTextAnchor(org.w3c.dom.Element)
    {
        char $c0;
        org.apache.batik.css.engine.value.Value $r1;
        org.w3c.dom.Element r0;
        int $i1;
        java.lang.String $r2;
        org.apache.batik.gvt.TextNode$Anchor $r3, $r4, $r5;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 53);

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        lookupswitch($i1)
        {
            case 109: goto label2;
            case 115: goto label1;
            default: goto label3;
        };

     label1:
        $r3 = <org.apache.batik.gvt.TextNode$Anchor: org.apache.batik.gvt.TextNode$Anchor START>;

        return $r3;

     label2:
        $r4 = <org.apache.batik.gvt.TextNode$Anchor: org.apache.batik.gvt.TextNode$Anchor MIDDLE>;

        return $r4;

     label3:
        $r5 = <org.apache.batik.gvt.TextNode$Anchor: org.apache.batik.gvt.TextNode$Anchor END>;

        return $r5;
    }

    public static java.lang.Object convertBaselineShift(org.w3c.dom.Element)
    {
        java.lang.Float $r6;
        char $c1;
        org.apache.batik.css.engine.value.Value $r1;
        java.lang.Integer $r4, $r5;
        short $s0;
        org.w3c.dom.Element r0;
        int $i2, $i3;
        float $f0;
        java.lang.String $r3;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 1);

        $s0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i2 = (int) $s0;

        if $i2 != 21 goto label4;

        $r3 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c1 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(2);

        $i3 = (int) $c1;

        lookupswitch($i3)
        {
            case 98: goto label2;
            case 112: goto label1;
            default: goto label3;
        };

     label1:
        $r4 = <java.awt.font.TextAttribute: java.lang.Integer SUPERSCRIPT_SUPER>;

        return $r4;

     label2:
        $r5 = <java.awt.font.TextAttribute: java.lang.Integer SUPERSCRIPT_SUB>;

        return $r5;

     label3:
        return null;

     label4:
        $r6 = new java.lang.Float;

        $f0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        specialinvoke $r6.<java.lang.Float: void <init>(float)>($f0);

        return $r6;
    }

    public static java.lang.Float convertKerning(org.w3c.dom.Element)
    {
        java.lang.Float $r3;
        short $s0;
        org.w3c.dom.Element r0;
        int $i1;
        float $f0;
        org.apache.batik.css.engine.value.Value $r1;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 31);

        $s0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i1 = (int) $s0;

        if $i1 != 21 goto label1;

        return null;

     label1:
        $r3 = new java.lang.Float;

        $f0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        specialinvoke $r3.<java.lang.Float: void <init>(float)>($f0);

        return $r3;
    }

    public static java.lang.Float convertLetterSpacing(org.w3c.dom.Element)
    {
        java.lang.Float $r3;
        short $s0;
        org.w3c.dom.Element r0;
        int $i1;
        float $f0;
        org.apache.batik.css.engine.value.Value $r1;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 32);

        $s0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i1 = (int) $s0;

        if $i1 != 21 goto label1;

        return null;

     label1:
        $r3 = new java.lang.Float;

        $f0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        specialinvoke $r3.<java.lang.Float: void <init>(float)>($f0);

        return $r3;
    }

    public static java.lang.Float convertWordSpacing(org.w3c.dom.Element)
    {
        java.lang.Float $r3;
        short $s0;
        org.w3c.dom.Element r0;
        int $i1;
        float $f0;
        org.apache.batik.css.engine.value.Value $r1;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 58);

        $s0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i1 = (int) $s0;

        if $i1 != 21 goto label1;

        return null;

     label1:
        $r3 = new java.lang.Float;

        $f0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        specialinvoke $r3.<java.lang.Float: void <init>(float)>($f0);

        return $r3;
    }
}
