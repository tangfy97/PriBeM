public class org.codehaus.groovy.ast.MethodNode extends org.codehaus.groovy.ast.AnnotatedNode implements groovyjarjarasm.asm.Opcodes
{
    private final java.lang.String name;
    private int modifiers;
    private org.codehaus.groovy.ast.ClassNode returnType;
    private org.codehaus.groovy.ast.Parameter[] parameters;
    private boolean hasDefaultValue;
    private org.codehaus.groovy.ast.stmt.Statement code;
    private boolean dynamicReturnType;
    private org.codehaus.groovy.ast.VariableScope variableScope;
    private final org.codehaus.groovy.ast.ClassNode[] exceptions;
    private org.codehaus.groovy.ast.GenericsType[] genericsTypes;
    java.lang.String typeDescriptor;

    public void <init>(java.lang.String, int, org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.Parameter[], org.codehaus.groovy.ast.ClassNode[], org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r2;
        org.codehaus.groovy.ast.VariableScope $r4;
        org.codehaus.groovy.ast.ClassNode r3;
        org.codehaus.groovy.ast.Parameter[] r5;
        org.codehaus.groovy.ast.MethodNode r0;
        int i0;
        org.codehaus.groovy.ast.ClassNode[] r6;
        java.lang.String r1;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r3 := @parameter2: org.codehaus.groovy.ast.ClassNode;

        r5 := @parameter3: org.codehaus.groovy.ast.Parameter[];

        r6 := @parameter4: org.codehaus.groovy.ast.ClassNode[];

        r2 := @parameter5: org.codehaus.groovy.ast.stmt.Statement;

        specialinvoke r0.<org.codehaus.groovy.ast.AnnotatedNode: void <init>()>();

        r0.<org.codehaus.groovy.ast.MethodNode: boolean hasDefaultValue> = 0;

        r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.GenericsType[] genericsTypes> = null;

        r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String name> = r1;

        r0.<org.codehaus.groovy.ast.MethodNode: int modifiers> = i0;

        r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.stmt.Statement code> = r2;

        virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: void setReturnType(org.codehaus.groovy.ast.ClassNode)>(r3);

        $r4 = new org.codehaus.groovy.ast.VariableScope;

        specialinvoke $r4.<org.codehaus.groovy.ast.VariableScope: void <init>()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: void setVariableScope(org.codehaus.groovy.ast.VariableScope)>($r4);

        virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: void setParameters(org.codehaus.groovy.ast.Parameter[])>(r5);

        r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode[] exceptions> = r6;

        return;
    }

    public java.lang.String getTypeDescriptor()
    {
        org.codehaus.groovy.ast.MethodNode r0;
        java.lang.StringBuffer $r3;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r1, $r2, $r4, $r7, $r8, $r10, $r13;
        org.codehaus.groovy.ast.Parameter $r14;
        org.codehaus.groovy.ast.ClassNode $r6, $r12;
        org.codehaus.groovy.ast.Parameter[] $r5, $r9, $r11;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $r1 = r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String typeDescriptor>;

        if $r1 != null goto label4;

        $r3 = new java.lang.StringBuffer;

        $r4 = r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String name>;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $r5 = r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] parameters>;

        $i1 = lengthof $r5;

        $i2 = $i1 * 10;

        $i3 = $i0 + $i2;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>($i3);

        $r6 = r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode returnType>;

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r8 = r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String name>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        i5 = 0;

     label1:
        $r9 = r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] parameters>;

        $i4 = lengthof $r9;

        if i5 >= $i4 goto label3;

        if i5 <= 0 goto label2;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        $r11 = r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] parameters>;

        $r14 = $r11[i5];

        $r12 = virtualinvoke $r14.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r13 = virtualinvoke $r12.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        i5 = i5 + 1;

        goto label1;

     label3:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r10 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String typeDescriptor> = $r10;

     label4:
        $r2 = r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String typeDescriptor>;

        return $r2;
    }

    private void invalidateCachedData()
    {
        org.codehaus.groovy.ast.MethodNode r0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String typeDescriptor> = null;

        return;
    }

    public boolean isVoidMethod()
    {
        org.codehaus.groovy.ast.MethodNode r0;
        org.codehaus.groovy.ast.ClassNode $r1, $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $r2 = r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode returnType>;

        $r1 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.codehaus.groovy.ast.stmt.Statement getCode()
    {
        org.codehaus.groovy.ast.stmt.Statement $r1;
        org.codehaus.groovy.ast.MethodNode r0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $r1 = r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.stmt.Statement code>;

        return $r1;
    }

    public void setCode(org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r1;
        org.codehaus.groovy.ast.MethodNode r0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.Statement;

        r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.stmt.Statement code> = r1;

        return;
    }

    public int getModifiers()
    {
        int $i0;
        org.codehaus.groovy.ast.MethodNode r0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $i0 = r0.<org.codehaus.groovy.ast.MethodNode: int modifiers>;

        return $i0;
    }

    public void setModifiers(int)
    {
        int i0;
        org.codehaus.groovy.ast.MethodNode r0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        i0 := @parameter0: int;

        specialinvoke r0.<org.codehaus.groovy.ast.MethodNode: void invalidateCachedData()>();

        r0.<org.codehaus.groovy.ast.MethodNode: int modifiers> = i0;

        return;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        org.codehaus.groovy.ast.MethodNode r0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $r1 = r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String name>;

        return $r1;
    }

    public org.codehaus.groovy.ast.Parameter[] getParameters()
    {
        org.codehaus.groovy.ast.Parameter[] $r1;
        org.codehaus.groovy.ast.MethodNode r0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $r1 = r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] parameters>;

        return $r1;
    }

    public void setParameters(org.codehaus.groovy.ast.Parameter[])
    {
        org.codehaus.groovy.ast.VariableScope $r1;
        org.codehaus.groovy.ast.Parameter r3;
        org.codehaus.groovy.ast.Parameter[] r2;
        org.codehaus.groovy.ast.MethodNode r0;
        int $i0, $i1, i2;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        r2 := @parameter0: org.codehaus.groovy.ast.Parameter[];

        specialinvoke r0.<org.codehaus.groovy.ast.MethodNode: void invalidateCachedData()>();

        $r1 = new org.codehaus.groovy.ast.VariableScope;

        specialinvoke $r1.<org.codehaus.groovy.ast.VariableScope: void <init>()>();

        r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] parameters> = r2;

        if r2 == null goto label3;

        $i0 = lengthof r2;

        if $i0 <= 0 goto label3;

        i2 = 0;

     label1:
        $i1 = lengthof r2;

        if i2 >= $i1 goto label3;

        r3 = r2[i2];

        $z0 = virtualinvoke r3.<org.codehaus.groovy.ast.Parameter: boolean hasInitialExpression()>();

        if $z0 == 0 goto label2;

        r0.<org.codehaus.groovy.ast.MethodNode: boolean hasDefaultValue> = 1;

     label2:
        $z1 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        virtualinvoke r3.<org.codehaus.groovy.ast.Parameter: void setInStaticContext(boolean)>($z1);

        virtualinvoke $r1.<org.codehaus.groovy.ast.VariableScope: void putDeclaredVariable(org.codehaus.groovy.ast.Variable)>(r3);

        i2 = i2 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: void setVariableScope(org.codehaus.groovy.ast.VariableScope)>($r1);

        return;
    }

    public org.codehaus.groovy.ast.ClassNode getReturnType()
    {
        org.codehaus.groovy.ast.MethodNode r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $r1 = r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode returnType>;

        return $r1;
    }

    public org.codehaus.groovy.ast.VariableScope getVariableScope()
    {
        org.codehaus.groovy.ast.VariableScope $r1;
        org.codehaus.groovy.ast.MethodNode r0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $r1 = r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.VariableScope variableScope>;

        return $r1;
    }

    public void setVariableScope(org.codehaus.groovy.ast.VariableScope)
    {
        org.codehaus.groovy.ast.VariableScope r1;
        org.codehaus.groovy.ast.MethodNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        r1 := @parameter0: org.codehaus.groovy.ast.VariableScope;

        r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.VariableScope variableScope> = r1;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        virtualinvoke r1.<org.codehaus.groovy.ast.VariableScope: void setInStaticContext(boolean)>($z0);

        return;
    }

    public boolean isDynamicReturnType()
    {
        org.codehaus.groovy.ast.MethodNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $z0 = r0.<org.codehaus.groovy.ast.MethodNode: boolean dynamicReturnType>;

        return $z0;
    }

    public boolean isAbstract()
    {
        org.codehaus.groovy.ast.MethodNode r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $i0 = r0.<org.codehaus.groovy.ast.MethodNode: int modifiers>;

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isStatic()
    {
        org.codehaus.groovy.ast.MethodNode r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $i0 = r0.<org.codehaus.groovy.ast.MethodNode: int modifiers>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isPublic()
    {
        org.codehaus.groovy.ast.MethodNode r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $i0 = r0.<org.codehaus.groovy.ast.MethodNode: int modifiers>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isProtected()
    {
        org.codehaus.groovy.ast.MethodNode r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $i0 = r0.<org.codehaus.groovy.ast.MethodNode: int modifiers>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasDefaultValue()
    {
        org.codehaus.groovy.ast.MethodNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $z0 = r0.<org.codehaus.groovy.ast.MethodNode: boolean hasDefaultValue>;

        return $z0;
    }

    public java.lang.String toString()
    {
        org.codehaus.groovy.ast.MethodNode r2;
        java.lang.StringBuffer $r0, $r1, $r3, $r4, $r6, $r7;
        int $i0;
        java.lang.String $r5, $r8;

        r2 := @this: org.codehaus.groovy.ast.MethodNode;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("MethodNode@");

        $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r5 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: java.lang.String getTypeDescriptor()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public void setReturnType(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.MethodNode r0;
        org.codehaus.groovy.ast.ClassNode r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        specialinvoke r0.<org.codehaus.groovy.ast.MethodNode: void invalidateCachedData()>();

        $z0 = r0.<org.codehaus.groovy.ast.MethodNode: boolean dynamicReturnType>;

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        if $r2 != r1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $z1 = $z0 | $z2;

        r0.<org.codehaus.groovy.ast.MethodNode: boolean dynamicReturnType> = $z1;

        r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode returnType> = r1;

        if r1 != null goto label3;

        $r3 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode returnType> = $r3;

     label3:
        return;
    }

    public org.codehaus.groovy.ast.ClassNode[] getExceptions()
    {
        org.codehaus.groovy.ast.ClassNode[] $r1;
        org.codehaus.groovy.ast.MethodNode r0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $r1 = r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode[] exceptions>;

        return $r1;
    }

    public org.codehaus.groovy.ast.stmt.Statement getFirstStatement()
    {
        org.codehaus.groovy.ast.stmt.Statement $r1, r5;
        java.util.List $r3;
        org.codehaus.groovy.ast.MethodNode r0;
        org.codehaus.groovy.ast.stmt.BlockStatement $r2;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $r1 = r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.stmt.Statement code>;

        if $r1 != null goto label1;

        return null;

     label1:
        r5 = r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.stmt.Statement code>;

     label2:
        $z0 = r5 instanceof org.codehaus.groovy.ast.stmt.BlockStatement;

        if $z0 == 0 goto label5;

        $r2 = (org.codehaus.groovy.ast.stmt.BlockStatement) r5;

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List getStatements()>();

        $z1 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        r5 = null;

        goto label4;

     label3:
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        r5 = (org.codehaus.groovy.ast.stmt.Statement) $r4;

     label4:
        goto label2;

     label5:
        return r5;
    }

    public org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()
    {
        org.codehaus.groovy.ast.GenericsType[] $r1;
        org.codehaus.groovy.ast.MethodNode r0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        $r1 = r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.GenericsType[] genericsTypes>;

        return $r1;
    }

    public void setGenericsTypes(org.codehaus.groovy.ast.GenericsType[])
    {
        org.codehaus.groovy.ast.GenericsType[] r1;
        org.codehaus.groovy.ast.MethodNode r0;

        r0 := @this: org.codehaus.groovy.ast.MethodNode;

        r1 := @parameter0: org.codehaus.groovy.ast.GenericsType[];

        specialinvoke r0.<org.codehaus.groovy.ast.MethodNode: void invalidateCachedData()>();

        r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.GenericsType[] genericsTypes> = r1;

        return;
    }
}
