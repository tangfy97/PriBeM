public class ucar.nc2.util.TableParser$Field extends java.lang.Object
{
    int start;
    int end;
    java.lang.Class type;
    boolean hasScale;
    float scale;
    final ucar.nc2.util.TableParser this$0;

    void <init>(ucar.nc2.util.TableParser, int, int, java.lang.Class)
    {
        ucar.nc2.util.TableParser r1;
        int i0, i1;
        java.lang.Class r2;
        ucar.nc2.util.TableParser$Field r0;

        r0 := @this: ucar.nc2.util.TableParser$Field;

        r1 := @parameter0: ucar.nc2.util.TableParser;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.Class;

        r0.<ucar.nc2.util.TableParser$Field: ucar.nc2.util.TableParser this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.util.TableParser$Field: boolean hasScale> = 0;

        r0.<ucar.nc2.util.TableParser$Field: int start> = i0;

        r0.<ucar.nc2.util.TableParser$Field: int end> = i1;

        r0.<ucar.nc2.util.TableParser$Field: java.lang.Class type> = r2;

        return;
    }

    protected void <init>(ucar.nc2.util.TableParser)
    {
        ucar.nc2.util.TableParser r1;
        ucar.nc2.util.TableParser$Field r0;

        r0 := @this: ucar.nc2.util.TableParser$Field;

        r1 := @parameter0: ucar.nc2.util.TableParser;

        r0.<ucar.nc2.util.TableParser$Field: ucar.nc2.util.TableParser this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.util.TableParser$Field: boolean hasScale> = 0;

        return;
    }

    public java.lang.Object parse(java.lang.String) throws java.lang.NumberFormatException
    {
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.String r1;
        ucar.nc2.util.TableParser$Field r0;

        r0 := @this: ucar.nc2.util.TableParser$Field;

        r1 := @parameter0: java.lang.String;

        $i1 = r0.<ucar.nc2.util.TableParser$Field: int start>;

        $i0 = r0.<ucar.nc2.util.TableParser$Field: int end>;

        $r2 = virtualinvoke r0.<ucar.nc2.util.TableParser$Field: java.lang.Object parse(java.lang.String,int,int)>(r1, $i1, $i0);

        return $r2;
    }

    public java.lang.Object parse(java.lang.String, int) throws java.lang.NumberFormatException
    {
        ucar.nc2.util.TableParser$Field r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r2;
        java.lang.String r1;

        r0 := @this: ucar.nc2.util.TableParser$Field;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = r0.<ucar.nc2.util.TableParser$Field: int start>;

        $i4 = $i1 + i0;

        $i2 = r0.<ucar.nc2.util.TableParser$Field: int end>;

        $i3 = $i2 + i0;

        $r2 = virtualinvoke r0.<ucar.nc2.util.TableParser$Field: java.lang.Object parse(java.lang.String,int,int)>(r1, $i4, $i3);

        return $r2;
    }

    protected java.lang.Object parse(java.lang.String, int, int) throws java.lang.NumberFormatException
    {
        java.lang.Float $r15;
        ucar.nc2.util.TableParser$Field r1;
        java.lang.Integer $r13, $r14, $r21, $r22;
        java.lang.Long $r11, $r12;
        boolean $z0, $z2, $z3, $z4;
        float $f0, $f1, $f2;
        java.lang.Object[] $r19;
        java.lang.Double $r16, $r17;
        long $l6;
        int i0, $i1, i2, $i3, $i4, $i5;
        java.lang.String r0, $r3, $r4, $r23, r24;
        double $d0;
        java.io.PrintStream $r20;
        java.lang.NumberFormatException $r18;
        java.lang.Class $r2, $r5, $r6, $r7, $r8, $r9, $r10;

        r1 := @this: ucar.nc2.util.TableParser$Field;

        r0 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 <= $i1 goto label01;

        $r23 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i2);

        goto label02;

     label01:
        $r23 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i2, i0);

     label02:
        r24 = $r23;

        $r2 = r1.<ucar.nc2.util.TableParser$Field: java.lang.Class type>;

        if $r2 != class "Ljava/lang/String;" goto label03;

        return $r23;

     label03:
        $r3 = staticinvoke <ucar.unidata.util.StringUtil: java.lang.String remove(java.lang.String,int)>($r23, 32);

        r24 = $r3;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $i3 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i3 != 0 goto label04;

        $z4 = 1;

        $z3 = 1;

        $z2 = 1;

        goto label05;

     label04:
        $z4 = 0;

        $z3 = 0;

        $z2 = 0;

     label05:
        $r6 = r1.<ucar.nc2.util.TableParser$Field: java.lang.Class type>;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        if $r6 != $r5 goto label09;

        if $z2 == 0 goto label06;

        $d0 = 0.0;

        goto label07;

     label06:
        $r16 = new java.lang.Double;

        specialinvoke $r16.<java.lang.Double: void <init>(java.lang.String)>($r3);

        $d0 = virtualinvoke $r16.<java.lang.Double: double doubleValue()>();

     label07:
        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

     label08:
        return $r17;

     label09:
        $r8 = r1.<ucar.nc2.util.TableParser$Field: java.lang.Class type>;

        $r7 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r8 != $r7 goto label14;

        if $z3 == 0 goto label10;

        $i5 = 0;

        goto label11;

     label10:
        $r13 = new java.lang.Integer;

        specialinvoke $r13.<java.lang.Integer: void <init>(java.lang.String)>($r3);

        $i5 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

     label11:
        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $z0 = r1.<ucar.nc2.util.TableParser$Field: boolean hasScale>;

        if $z0 == 0 goto label13;

        $r15 = new java.lang.Float;

        $i4 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        $f1 = (float) $i4;

        $f0 = r1.<ucar.nc2.util.TableParser$Field: float scale>;

        $f2 = $f1 * $f0;

        specialinvoke $r15.<java.lang.Float: void <init>(float)>($f2);

     label12:
        return $r15;

     label13:
        return $r14;

     label14:
        $r10 = r1.<ucar.nc2.util.TableParser$Field: java.lang.Class type>;

        $r9 = <java.lang.Long: java.lang.Class TYPE>;

        if $r10 != $r9 goto label18;

        if $z4 == 0 goto label15;

        $l6 = 0L;

        goto label16;

     label15:
        $r11 = new java.lang.Long;

        specialinvoke $r11.<java.lang.Long: void <init>(java.lang.String)>($r3);

        $l6 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

     label16:
        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

     label17:
        return $r12;

     label18:
        goto label20;

     label19:
        $r18 := @caughtexception;

        $r20 = <java.lang.System: java.io.PrintStream out>;

        $r19 = newarray (java.lang.Object)[3];

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r19[0] = $r21;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r19[1] = $r22;

        $r19[2] = r24;

        virtualinvoke $r20.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("  [%d,%d) = <%s> %n", $r19);

        throw $r18;

     label20:
        return null;

        catch java.lang.NumberFormatException from label03 to label08 with label19;
        catch java.lang.NumberFormatException from label09 to label12 with label19;
        catch java.lang.NumberFormatException from label14 to label17 with label19;
    }

    public void setScale(float)
    {
        float f0;
        ucar.nc2.util.TableParser$Field r0;

        r0 := @this: ucar.nc2.util.TableParser$Field;

        f0 := @parameter0: float;

        r0.<ucar.nc2.util.TableParser$Field: float scale> = f0;

        r0.<ucar.nc2.util.TableParser$Field: boolean hasScale> = 1;

        return;
    }
}
