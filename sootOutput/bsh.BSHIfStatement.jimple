class bsh.BSHIfStatement extends bsh.SimpleNode
{

    void <init>(int)
    {
        int i0;
        bsh.BSHIfStatement r0;

        r0 := @this: bsh.BSHIfStatement;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.Interpreter r3;
        bsh.SimpleNode $r4, $r7, $r9;
        bsh.BSHIfStatement r0;
        bsh.CallStack r2;
        bsh.Primitive $r5;
        int $i0;
        java.lang.Object r10;
        bsh.Node $r1, $r6, $r8;
        boolean $z0, $z1;

        r0 := @this: bsh.BSHIfStatement;

        r2 := @parameter0: bsh.CallStack;

        r3 := @parameter1: bsh.Interpreter;

        r10 = null;

        $r1 = virtualinvoke r0.<bsh.BSHIfStatement: bsh.Node jjtGetChild(int)>(0);

        $r4 = (bsh.SimpleNode) $r1;

        $z0 = staticinvoke <bsh.BSHIfStatement: boolean evaluateCondition(bsh.SimpleNode,bsh.CallStack,bsh.Interpreter)>($r4, r2, r3);

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r0.<bsh.BSHIfStatement: bsh.Node jjtGetChild(int)>(1);

        $r9 = (bsh.SimpleNode) $r8;

        r10 = virtualinvoke $r9.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r2, r3);

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<bsh.BSHIfStatement: int jjtGetNumChildren()>();

        if $i0 <= 2 goto label2;

        $r6 = virtualinvoke r0.<bsh.BSHIfStatement: bsh.Node jjtGetChild(int)>(2);

        $r7 = (bsh.SimpleNode) $r6;

        r10 = virtualinvoke $r7.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r2, r3);

     label2:
        $z1 = r10 instanceof bsh.ReturnControl;

        if $z1 == 0 goto label3;

        return r10;

     label3:
        $r5 = <bsh.Primitive: bsh.Primitive VOID>;

        return $r5;
    }

    public static boolean evaluateCondition(bsh.SimpleNode, bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.EvalError $r4, $r8;
        bsh.Interpreter r2;
        bsh.SimpleNode r0;
        bsh.CallStack r1;
        bsh.Primitive $r6, $r7;
        java.lang.Boolean $r5;
        java.lang.Object $r3, r9;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: bsh.SimpleNode;

        r1 := @parameter1: bsh.CallStack;

        r2 := @parameter2: bsh.Interpreter;

        $r3 = virtualinvoke r0.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r1, r2);

        r9 = $r3;

        $z0 = $r3 instanceof bsh.Primitive;

        if $z0 == 0 goto label2;

        $r6 = <bsh.Primitive: bsh.Primitive VOID>;

        if $r3 != $r6 goto label1;

        $r8 = new bsh.EvalError;

        specialinvoke $r8.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Condition evaluates to void type", r0, r1);

        throw $r8;

     label1:
        $r7 = (bsh.Primitive) $r3;

        r9 = virtualinvoke $r7.<bsh.Primitive: java.lang.Object getValue()>();

     label2:
        $z1 = r9 instanceof java.lang.Boolean;

        if $z1 == 0 goto label3;

        $r5 = (java.lang.Boolean) r9;

        $z2 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;

     label3:
        $r4 = new bsh.EvalError;

        specialinvoke $r4.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Condition must evaluate to a Boolean or boolean.", r0, r1);

        throw $r4;
    }
}
