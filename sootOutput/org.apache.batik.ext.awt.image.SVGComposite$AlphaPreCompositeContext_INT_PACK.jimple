public abstract class org.apache.batik.ext.awt.image.SVGComposite$AlphaPreCompositeContext_INT_PACK extends org.apache.batik.ext.awt.image.SVGComposite$AlphaPreCompositeContext
{

    void <init>(java.awt.image.ColorModel, java.awt.image.ColorModel)
    {
        org.apache.batik.ext.awt.image.SVGComposite$AlphaPreCompositeContext_INT_PACK r0;
        java.awt.image.ColorModel r1, r2;

        r0 := @this: org.apache.batik.ext.awt.image.SVGComposite$AlphaPreCompositeContext_INT_PACK;

        r1 := @parameter0: java.awt.image.ColorModel;

        r2 := @parameter1: java.awt.image.ColorModel;

        specialinvoke r0.<org.apache.batik.ext.awt.image.SVGComposite$AlphaPreCompositeContext: void <init>(java.awt.image.ColorModel,java.awt.image.ColorModel)>(r1, r2);

        return;
    }

    protected abstract void precompose_INT_PACK(int, int, int[], int, int, int[], int, int, int[], int, int);

    protected void precompose(java.awt.image.Raster, java.awt.image.Raster, java.awt.image.WritableRaster)
    {
        int[][] $r6, $r13, $r19;
        java.awt.image.SampleModel $r2, $r9, $r15;
        int[] r7, r14, r20;
        org.apache.batik.ext.awt.image.SVGComposite$AlphaPreCompositeContext_INT_PACK r21;
        java.awt.image.DataBuffer $r4, $r11, $r17;
        java.awt.image.DataBufferInt r5, r12, r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, i30;
        java.awt.image.Raster r1, r8;
        java.awt.image.SinglePixelPackedSampleModel r3, r10, r16;
        java.awt.image.WritableRaster r0;

        r21 := @this: org.apache.batik.ext.awt.image.SVGComposite$AlphaPreCompositeContext_INT_PACK;

        r1 := @parameter0: java.awt.image.Raster;

        r8 := @parameter1: java.awt.image.Raster;

        r0 := @parameter2: java.awt.image.WritableRaster;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i2 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i3 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        $r2 = virtualinvoke r1.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r3 = (java.awt.image.SinglePixelPackedSampleModel) $r2;

        $i4 = virtualinvoke r3.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $r4 = virtualinvoke r1.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r5 = (java.awt.image.DataBufferInt) $r4;

        $r6 = virtualinvoke r5.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        r7 = $r6[0];

        $i5 = virtualinvoke r5.<java.awt.image.DataBuffer: int getOffset()>();

        $i6 = virtualinvoke r1.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i7 = $i0 - $i6;

        $i8 = virtualinvoke r1.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i9 = $i2 - $i8;

        $i10 = virtualinvoke r3.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i7, $i9);

        i11 = $i5 + $i10;

        $r9 = virtualinvoke r8.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r10 = (java.awt.image.SinglePixelPackedSampleModel) $r9;

        $i12 = virtualinvoke r10.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $r11 = virtualinvoke r8.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r12 = (java.awt.image.DataBufferInt) $r11;

        $r13 = virtualinvoke r12.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        r14 = $r13[0];

        $i13 = virtualinvoke r12.<java.awt.image.DataBuffer: int getOffset()>();

        $i14 = virtualinvoke r8.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i15 = $i0 - $i14;

        $i16 = virtualinvoke r8.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i17 = $i2 - $i16;

        $i18 = virtualinvoke r10.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i15, $i17);

        i19 = $i13 + $i18;

        $r15 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r16 = (java.awt.image.SinglePixelPackedSampleModel) $r15;

        $i20 = virtualinvoke r16.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $r17 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r18 = (java.awt.image.DataBufferInt) $r17;

        $r19 = virtualinvoke r18.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        r20 = $r19[0];

        $i21 = virtualinvoke r18.<java.awt.image.DataBuffer: int getOffset()>();

        $i22 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i23 = $i0 - $i22;

        $i24 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i25 = $i2 - $i24;

        $i26 = virtualinvoke r16.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i23, $i25);

        i27 = $i21 + $i26;

        i28 = $i4 - $i1;

        i29 = $i12 - $i1;

        i30 = $i20 - $i1;

        virtualinvoke r21.<org.apache.batik.ext.awt.image.SVGComposite$AlphaPreCompositeContext_INT_PACK: void precompose_INT_PACK(int,int,int[],int,int,int[],int,int,int[],int,int)>($i1, $i3, r7, i28, i11, r14, i29, i19, r20, i30, i27);

        return;
    }
}
