class org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1 extends java.lang.Object implements com.google.common.base.Function
{
    final org.waveprotocol.wave.model.wave.ParticipantId val$user;
    final java.util.List val$withParticipantIds;
    final java.util.List val$creatorParticipantIds;
    final boolean val$isAllQuery;
    final org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl this$0;

    void <init>(org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl, org.waveprotocol.wave.model.wave.ParticipantId, java.util.List, java.util.List, boolean)
    {
        org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl r1;
        org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1 r0;
        java.util.List r3, r4;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        boolean z0;

        r0 := @this: org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1;

        r1 := @parameter0: org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        z0 := @parameter4: boolean;

        r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1: org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl this$0> = r1;

        r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1: org.waveprotocol.wave.model.wave.ParticipantId val$user> = r2;

        r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1: java.util.List val$withParticipantIds> = r3;

        r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1: java.util.List val$creatorParticipantIds> = r4;

        r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1: boolean val$isAllQuery> = z0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Boolean apply(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)
    {
        org.waveprotocol.wave.model.id.WaveletId $r14;
        org.waveprotocol.wave.model.wave.ParticipantId $r4, $r5;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r1;
        java.lang.Boolean $r8, $r18;
        org.waveprotocol.wave.util.logging.Log $r10;
        java.lang.String $r17;
        boolean $z0, $z1;
        org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1 r0;
        org.waveprotocol.wave.model.id.WaveletName $r15;
        org.waveprotocol.wave.model.id.WaveId $r13;
        org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl $r2, $r3;
        java.util.List $r6, $r7;
        org.waveprotocol.box.server.waveserver.WaveletStateException $r9;
        java.lang.StringBuilder $r11, $r12, $r16;

        r0 := @this: org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

     label1:
        $r3 = r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1: org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl this$0>;

        $r4 = r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1: org.waveprotocol.wave.model.wave.ParticipantId val$user>;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1: org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl this$0>;

        $r5 = staticinvoke <org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.wave.model.wave.ParticipantId access$000(org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl)>($r2);

        $r7 = r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1: java.util.List val$withParticipantIds>;

        $r6 = r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1: java.util.List val$creatorParticipantIds>;

        $z0 = r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1: boolean val$isAllQuery>;

        $z1 = staticinvoke <org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: boolean access$100(org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl,org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.wave.ParticipantId,java.util.List,java.util.List,boolean)>($r3, r1, $r4, $r5, $r7, $r6, $z0);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        $r10 = staticinvoke <org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl: org.waveprotocol.wave.util.logging.Log access$200()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to access wavelet ");

        $r13 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r14 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r15 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r13, $r14);

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>($r17, $r9);

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r18;

        catch org.waveprotocol.box.server.waveserver.WaveletStateException from label1 to label2 with label3;
    }

    public volatile java.lang.Object apply(java.lang.Object)
    {
        org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1 r0;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r2;
        java.lang.Boolean $r3;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.data.ReadableWaveletData) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.SimpleSearchProviderImpl$1: java.lang.Boolean apply(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>($r2);

        return $r3;
    }
}
