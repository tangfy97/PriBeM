public final class com.google.gxp.com.google.common.collect.Maps extends java.lang.Object
{
    private static final com.google.gxp.com.google.common.collect.MapConstraint VALUE_CAN_BE_CAST_TO_KEY;
    private static final java.util.Map PRIMITIVES_TO_WRAPPERS;

    private void <init>()
    {
        com.google.gxp.com.google.common.collect.Maps r0;

        r0 := @this: com.google.gxp.com.google.common.collect.Maps;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.HashMap newHashMap()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        return $r0;
    }

    public static java.util.HashMap newHashMapWithExpectedSize(int)
    {
        int i0, $i1;
        java.util.HashMap $r0;

        i0 := @parameter0: int;

        $r0 = new java.util.HashMap;

        $i1 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: int capacity(int)>(i0);

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>($i1);

        return $r0;
    }

    static int capacity(int)
    {
        int i0, $i1, $i2;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $i1 = i0 * 2;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 16);

        return $i2;
    }

    public static java.util.HashMap newHashMap(java.util.Map)
    {
        java.util.HashMap $r0;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(java.util.Map)>(r1);

        return $r0;
    }

    public static java.util.LinkedHashMap newLinkedHashMap()
    {
        java.util.LinkedHashMap $r0;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        return $r0;
    }

    public static java.util.LinkedHashMap newLinkedHashMap(java.util.Map)
    {
        java.util.LinkedHashMap $r0;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>(java.util.Map)>(r1);

        return $r0;
    }

    public static java.util.concurrent.ConcurrentHashMap newConcurrentHashMap()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        return $r0;
    }

    public static java.util.TreeMap newTreeMap()
    {
        java.util.TreeMap $r0;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        return $r0;
    }

    public static java.util.TreeMap newTreeMap(java.util.Comparator)
    {
        java.util.TreeMap $r0;
        java.util.Comparator r1;

        r1 := @parameter0: java.util.Comparator;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>(java.util.Comparator)>(r1);

        return $r0;
    }

    public static java.util.EnumMap newEnumMap(java.lang.Class)
    {
        java.lang.Class r1;
        java.util.EnumMap $r0;

        r1 := @parameter0: java.lang.Class;

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(r1);

        return $r0;
    }

    public static java.util.IdentityHashMap newIdentityHashMap()
    {
        java.util.IdentityHashMap $r0;

        $r0 = new java.util.IdentityHashMap;

        specialinvoke $r0.<java.util.IdentityHashMap: void <init>()>();

        return $r0;
    }

    public static boolean containsEntry(java.util.Map, java.lang.Object, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1, $r2, r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r2 != null goto label2;

        if r3 != null goto label1;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label3;

     label1:
        $z1 = 0;

        goto label3;

     label2:
        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

     label3:
        return $z1;
    }

    public static com.google.gxp.com.google.common.collect.BiMap synchronizedBiMap(com.google.gxp.com.google.common.collect.BiMap)
    {
        com.google.gxp.com.google.common.collect.BiMap r0, $r1;

        r0 := @parameter0: com.google.gxp.com.google.common.collect.BiMap;

        $r1 = staticinvoke <com.google.gxp.com.google.common.collect.Synchronized: com.google.gxp.com.google.common.collect.BiMap biMap(com.google.gxp.com.google.common.collect.BiMap,java.lang.Object)>(r0, null);

        return $r1;
    }

    public static com.google.gxp.com.google.common.collect.ImmutableMap uniqueIndex(java.lang.Iterable, com.google.gxp.com.google.common.base.Function)
    {
        java.util.Iterator $r3;
        java.lang.Iterable r2;
        com.google.gxp.com.google.common.base.Function r0;
        com.google.gxp.com.google.common.collect.ImmutableMap$Builder $r1;
        com.google.gxp.com.google.common.collect.ImmutableMap $r4;
        java.lang.Object $r5, $r6;
        boolean $z0;

        r2 := @parameter0: java.lang.Iterable;

        r0 := @parameter1: com.google.gxp.com.google.common.base.Function;

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = staticinvoke <com.google.gxp.com.google.common.collect.ImmutableMap: com.google.gxp.com.google.common.collect.ImmutableMap$Builder builder()>();

        $r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke r0.<com.google.gxp.com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>($r5);

        virtualinvoke $r1.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: com.google.gxp.com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r6, $r5);

        goto label1;

     label2:
        $r4 = virtualinvoke $r1.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: com.google.gxp.com.google.common.collect.ImmutableMap build()>();

        return $r4;
    }

    public static java.util.Map fromProperties(java.util.Properties)
    {
        java.util.Properties r0;
        java.util.Enumeration $r2;
        java.util.HashMap $r1;
        int $i0;
        java.lang.Object $r3;
        java.lang.String $r4, $r5;
        boolean $z0;

        r0 := @parameter0: java.util.Properties;

        $i0 = virtualinvoke r0.<java.util.Properties: int size()>();

        $r1 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: java.util.HashMap newHashMapWithExpectedSize(int)>($i0);

        $r2 = virtualinvoke r0.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        if $r3 == null goto label2;

        $r5 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        goto label3;

     label2:
        $r5 = null;

     label3:
        $r4 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r5);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r4);

        goto label1;

     label4:
        return $r1;
    }

    public static java.util.Map$Entry immutableEntry(java.lang.Object, java.lang.Object)
    {
        com.google.gxp.com.google.common.collect.Maps$ImmutableEntry $r0;
        java.lang.Object r1, r2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r0 = new com.google.gxp.com.google.common.collect.Maps$ImmutableEntry;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.Maps$ImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r0;
    }

    static java.util.Set unmodifiableEntrySet(java.util.Set)
    {
        com.google.gxp.com.google.common.collect.Maps$UnmodifiableEntrySet $r0;
        java.util.Set r1, $r2;

        r1 := @parameter0: java.util.Set;

        $r0 = new com.google.gxp.com.google.common.collect.Maps$UnmodifiableEntrySet;

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r1);

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.Maps$UnmodifiableEntrySet: void <init>(java.util.Set)>($r2);

        return $r0;
    }

    private static java.util.Map$Entry unmodifiableEntry(java.util.Map$Entry)
    {
        com.google.gxp.com.google.common.collect.Maps$1 $r1;
        java.util.Map$Entry r0;

        r0 := @parameter0: java.util.Map$Entry;

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.google.gxp.com.google.common.collect.Maps$1;

        specialinvoke $r1.<com.google.gxp.com.google.common.collect.Maps$1: void <init>(java.util.Map$Entry)>(r0);

        return $r1;
    }

    public static com.google.gxp.com.google.common.collect.HashBiMap newHashBiMap()
    {
        com.google.gxp.com.google.common.collect.HashBiMap $r0;

        $r0 = new com.google.gxp.com.google.common.collect.HashBiMap;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.HashBiMap: void <init>()>();

        return $r0;
    }

    public static com.google.gxp.com.google.common.collect.EnumHashBiMap newEnumHashBiMap(java.lang.Class)
    {
        com.google.gxp.com.google.common.collect.EnumHashBiMap $r0;
        java.lang.Class r1;

        r1 := @parameter0: java.lang.Class;

        $r0 = new com.google.gxp.com.google.common.collect.EnumHashBiMap;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.EnumHashBiMap: void <init>(java.lang.Class)>(r1);

        return $r0;
    }

    public static com.google.gxp.com.google.common.collect.EnumBiMap newEnumBiMap(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r1, r2;
        com.google.gxp.com.google.common.collect.EnumBiMap $r0;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r0 = new com.google.gxp.com.google.common.collect.EnumBiMap;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.EnumBiMap: void <init>(java.lang.Class,java.lang.Class)>(r1, r2);

        return $r0;
    }

    public static com.google.gxp.com.google.common.collect.BiMap unmodifiableBiMap(com.google.gxp.com.google.common.collect.BiMap)
    {
        com.google.gxp.com.google.common.collect.Maps$UnmodifiableBiMap $r0;
        com.google.gxp.com.google.common.collect.BiMap r1;

        r1 := @parameter0: com.google.gxp.com.google.common.collect.BiMap;

        $r0 = new com.google.gxp.com.google.common.collect.Maps$UnmodifiableBiMap;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.Maps$UnmodifiableBiMap: void <init>(com.google.gxp.com.google.common.collect.BiMap,com.google.gxp.com.google.common.collect.BiMap)>(r1, null);

        return $r0;
    }

    public static com.google.gxp.com.google.common.collect.ClassToInstanceMap newClassToInstanceMap()
    {
        java.util.HashMap $r0;
        com.google.gxp.com.google.common.collect.ClassToInstanceMap $r1;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: com.google.gxp.com.google.common.collect.ClassToInstanceMap newClassToInstanceMap(java.util.Map)>($r0);

        return $r1;
    }

    public static com.google.gxp.com.google.common.collect.ClassToInstanceMap newClassToInstanceMap(java.util.Map)
    {
        com.google.gxp.com.google.common.collect.Maps$SimpleClassToInstanceMap $r0;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        $r0 = new com.google.gxp.com.google.common.collect.Maps$SimpleClassToInstanceMap;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.Maps$SimpleClassToInstanceMap: void <init>(java.util.Map)>(r1);

        return $r0;
    }

    private static java.lang.Class wrap(java.lang.Class)
    {
        java.util.Map $r1;
        java.lang.Class r0, $r3;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r1 = <com.google.gxp.com.google.common.collect.Maps: java.util.Map PRIMITIVES_TO_WRAPPERS>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.Class) $r2;

        goto label2;

     label1:
        $r3 = r0;

     label2:
        return $r3;
    }

    static boolean containsEntryImpl(java.util.Collection, java.lang.Object)
    {
        java.util.Map$Entry $r2, $r3;
        java.util.Collection r1;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Collection;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (java.util.Map$Entry) r0;

        $r3 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: java.util.Map$Entry unmodifiableEntry(java.util.Map$Entry)>($r2);

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        return $z1;
    }

    static boolean removeEntryImpl(java.util.Collection, java.lang.Object)
    {
        java.util.Map$Entry $r2, $r3;
        java.util.Collection r1;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Collection;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (java.util.Map$Entry) r0;

        $r3 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: java.util.Map$Entry unmodifiableEntry(java.util.Map$Entry)>($r2);

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r3);

        return $z1;
    }

    static java.util.Map$Entry access$000(java.util.Map$Entry)
    {
        java.util.Map$Entry r0, $r1;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: java.util.Map$Entry unmodifiableEntry(java.util.Map$Entry)>(r0);

        return $r1;
    }

    static java.lang.Class access$100(java.lang.Class)
    {
        java.lang.Class r0, $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: java.lang.Class wrap(java.lang.Class)>(r0);

        return $r1;
    }

    static com.google.gxp.com.google.common.collect.MapConstraint access$200()
    {
        com.google.gxp.com.google.common.collect.MapConstraint $r0;

        $r0 = <com.google.gxp.com.google.common.collect.Maps: com.google.gxp.com.google.common.collect.MapConstraint VALUE_CAN_BE_CAST_TO_KEY>;

        return $r0;
    }

    static void <clinit>()
    {
        com.google.gxp.com.google.common.collect.ImmutableMap$Builder $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19;
        com.google.gxp.com.google.common.collect.Maps$2 $r0;
        com.google.gxp.com.google.common.collect.ImmutableMap $r20;
        java.lang.Class $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18;

        $r0 = new com.google.gxp.com.google.common.collect.Maps$2;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.Maps$2: void <init>()>();

        <com.google.gxp.com.google.common.collect.Maps: com.google.gxp.com.google.common.collect.MapConstraint VALUE_CAN_BE_CAST_TO_KEY> = $r0;

        $r1 = new com.google.gxp.com.google.common.collect.ImmutableMap$Builder;

        specialinvoke $r1.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: void <init>()>();

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r3 = virtualinvoke $r1.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: com.google.gxp.com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r2, class "Ljava/lang/Boolean;");

        $r4 = <java.lang.Byte: java.lang.Class TYPE>;

        $r5 = virtualinvoke $r3.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: com.google.gxp.com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r4, class "Ljava/lang/Byte;");

        $r6 = <java.lang.Character: java.lang.Class TYPE>;

        $r7 = virtualinvoke $r5.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: com.google.gxp.com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r6, class "Ljava/lang/Character;");

        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        $r9 = virtualinvoke $r7.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: com.google.gxp.com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r8, class "Ljava/lang/Double;");

        $r10 = <java.lang.Float: java.lang.Class TYPE>;

        $r11 = virtualinvoke $r9.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: com.google.gxp.com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r10, class "Ljava/lang/Float;");

        $r12 = <java.lang.Integer: java.lang.Class TYPE>;

        $r13 = virtualinvoke $r11.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: com.google.gxp.com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r12, class "Ljava/lang/Integer;");

        $r14 = <java.lang.Long: java.lang.Class TYPE>;

        $r15 = virtualinvoke $r13.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: com.google.gxp.com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r14, class "Ljava/lang/Long;");

        $r16 = <java.lang.Short: java.lang.Class TYPE>;

        $r17 = virtualinvoke $r15.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: com.google.gxp.com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r16, class "Ljava/lang/Short;");

        $r18 = <java.lang.Void: java.lang.Class TYPE>;

        $r19 = virtualinvoke $r17.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: com.google.gxp.com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r18, class "Ljava/lang/Void;");

        $r20 = virtualinvoke $r19.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: com.google.gxp.com.google.common.collect.ImmutableMap build()>();

        <com.google.gxp.com.google.common.collect.Maps: java.util.Map PRIMITIVES_TO_WRAPPERS> = $r20;

        return;
    }
}
