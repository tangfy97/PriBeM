public abstract class org.springframework.http.client.AbstractClientHttpRequest extends java.lang.Object implements org.springframework.http.client.ClientHttpRequest
{
    private boolean executed;
    private final org.springframework.http.HttpHeaders headers;
    private final java.io.ByteArrayOutputStream bufferedOutput;

    public void <init>()
    {
        org.springframework.http.client.AbstractClientHttpRequest r0;
        java.io.ByteArrayOutputStream $r2;
        org.springframework.http.HttpHeaders $r1;

        r0 := @this: org.springframework.http.client.AbstractClientHttpRequest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.http.client.AbstractClientHttpRequest: boolean executed> = 0;

        $r1 = new org.springframework.http.HttpHeaders;

        specialinvoke $r1.<org.springframework.http.HttpHeaders: void <init>()>();

        r0.<org.springframework.http.client.AbstractClientHttpRequest: org.springframework.http.HttpHeaders headers> = $r1;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<org.springframework.http.client.AbstractClientHttpRequest: java.io.ByteArrayOutputStream bufferedOutput> = $r2;

        return;
    }

    public final org.springframework.http.HttpHeaders getHeaders()
    {
        org.springframework.http.HttpHeaders $r1, $r2;
        org.springframework.http.client.AbstractClientHttpRequest r0;
        boolean $z0;

        r0 := @this: org.springframework.http.client.AbstractClientHttpRequest;

        $z0 = r0.<org.springframework.http.client.AbstractClientHttpRequest: boolean executed>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.springframework.http.client.AbstractClientHttpRequest: org.springframework.http.HttpHeaders headers>;

        $r2 = staticinvoke <org.springframework.http.HttpHeaders: org.springframework.http.HttpHeaders readOnlyHttpHeaders(org.springframework.http.HttpHeaders)>($r1);

        goto label2;

     label1:
        $r2 = r0.<org.springframework.http.client.AbstractClientHttpRequest: org.springframework.http.HttpHeaders headers>;

     label2:
        return $r2;
    }

    public final java.io.OutputStream getBody() throws java.io.IOException
    {
        org.springframework.http.client.AbstractClientHttpRequest r0;
        java.io.ByteArrayOutputStream $r1;

        r0 := @this: org.springframework.http.client.AbstractClientHttpRequest;

        specialinvoke r0.<org.springframework.http.client.AbstractClientHttpRequest: void checkExecuted()>();

        $r1 = r0.<org.springframework.http.client.AbstractClientHttpRequest: java.io.ByteArrayOutputStream bufferedOutput>;

        return $r1;
    }

    public final org.springframework.http.client.ClientHttpResponse execute() throws java.io.IOException
    {
        byte[] $r2;
        java.io.ByteArrayOutputStream $r1;
        org.springframework.http.HttpHeaders $r3, $r4, $r6;
        long $l0, $l3;
        byte $b1;
        int $i2;
        org.springframework.http.client.AbstractClientHttpRequest r0;
        org.springframework.http.client.ClientHttpResponse $r5;

        r0 := @this: org.springframework.http.client.AbstractClientHttpRequest;

        specialinvoke r0.<org.springframework.http.client.AbstractClientHttpRequest: void checkExecuted()>();

        $r1 = r0.<org.springframework.http.client.AbstractClientHttpRequest: java.io.ByteArrayOutputStream bufferedOutput>;

        $r2 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r3 = r0.<org.springframework.http.client.AbstractClientHttpRequest: org.springframework.http.HttpHeaders headers>;

        $l0 = virtualinvoke $r3.<org.springframework.http.HttpHeaders: long getContentLength()>();

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $r6 = r0.<org.springframework.http.client.AbstractClientHttpRequest: org.springframework.http.HttpHeaders headers>;

        $i2 = lengthof $r2;

        $l3 = (long) $i2;

        virtualinvoke $r6.<org.springframework.http.HttpHeaders: void setContentLength(long)>($l3);

     label1:
        $r4 = r0.<org.springframework.http.client.AbstractClientHttpRequest: org.springframework.http.HttpHeaders headers>;

        $r5 = virtualinvoke r0.<org.springframework.http.client.AbstractClientHttpRequest: org.springframework.http.client.ClientHttpResponse executeInternal(org.springframework.http.HttpHeaders,byte[])>($r4, $r2);

        r0.<org.springframework.http.client.AbstractClientHttpRequest: boolean executed> = 1;

        return $r5;
    }

    private void checkExecuted()
    {
        org.springframework.http.client.AbstractClientHttpRequest r0;
        boolean $z0, $z1;

        r0 := @this: org.springframework.http.client.AbstractClientHttpRequest;

        $z0 = r0.<org.springframework.http.client.AbstractClientHttpRequest: boolean executed>;

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z1, "ClientHttpRequest already executed");

        return;
    }

    protected abstract org.springframework.http.client.ClientHttpResponse executeInternal(org.springframework.http.HttpHeaders, byte[]) throws java.io.IOException;
}
