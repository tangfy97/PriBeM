public class org.springframework.remoting.support.RemoteInvocation extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private java.lang.String methodName;
    private java.lang.Class[] parameterTypes;
    private java.lang.Object[] arguments;
    private java.util.Map attributes;

    public void <init>()
    {
        org.springframework.remoting.support.RemoteInvocation r0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(java.lang.String, java.lang.Class[], java.lang.Object[])
    {
        java.lang.Object[] r3;
        org.springframework.remoting.support.RemoteInvocation r0;
        java.lang.Class[] r2;
        java.lang.String r1;

        r0 := @this: org.springframework.remoting.support.RemoteInvocation;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.remoting.support.RemoteInvocation: java.lang.String methodName> = r1;

        r0.<org.springframework.remoting.support.RemoteInvocation: java.lang.Class[] parameterTypes> = r2;

        r0.<org.springframework.remoting.support.RemoteInvocation: java.lang.Object[] arguments> = r3;

        return;
    }

    public void <init>(org.aopalliance.intercept.MethodInvocation)
    {
        org.aopalliance.intercept.MethodInvocation r1;
        java.lang.Object[] $r6;
        org.springframework.remoting.support.RemoteInvocation r0;
        java.lang.Class[] $r5;
        java.lang.String $r3;
        java.lang.reflect.Method $r2, $r4;

        r0 := @this: org.springframework.remoting.support.RemoteInvocation;

        r1 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.String getName()>();

        r0.<org.springframework.remoting.support.RemoteInvocation: java.lang.String methodName> = $r3;

        $r4 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r0.<org.springframework.remoting.support.RemoteInvocation: java.lang.Class[] parameterTypes> = $r5;

        $r6 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.Object[] getArguments()>();

        r0.<org.springframework.remoting.support.RemoteInvocation: java.lang.Object[] arguments> = $r6;

        return;
    }

    public void setMethodName(java.lang.String)
    {
        org.springframework.remoting.support.RemoteInvocation r0;
        java.lang.String r1;

        r0 := @this: org.springframework.remoting.support.RemoteInvocation;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.support.RemoteInvocation: java.lang.String methodName> = r1;

        return;
    }

    public java.lang.String getMethodName()
    {
        org.springframework.remoting.support.RemoteInvocation r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.remoting.support.RemoteInvocation;

        $r1 = r0.<org.springframework.remoting.support.RemoteInvocation: java.lang.String methodName>;

        return $r1;
    }

    public void setParameterTypes(java.lang.Class[])
    {
        org.springframework.remoting.support.RemoteInvocation r0;
        java.lang.Class[] r1;

        r0 := @this: org.springframework.remoting.support.RemoteInvocation;

        r1 := @parameter0: java.lang.Class[];

        r0.<org.springframework.remoting.support.RemoteInvocation: java.lang.Class[] parameterTypes> = r1;

        return;
    }

    public java.lang.Class[] getParameterTypes()
    {
        org.springframework.remoting.support.RemoteInvocation r0;
        java.lang.Class[] $r1;

        r0 := @this: org.springframework.remoting.support.RemoteInvocation;

        $r1 = r0.<org.springframework.remoting.support.RemoteInvocation: java.lang.Class[] parameterTypes>;

        return $r1;
    }

    public void setArguments(java.lang.Object[])
    {
        org.springframework.remoting.support.RemoteInvocation r0;
        java.lang.Object[] r1;

        r0 := @this: org.springframework.remoting.support.RemoteInvocation;

        r1 := @parameter0: java.lang.Object[];

        r0.<org.springframework.remoting.support.RemoteInvocation: java.lang.Object[] arguments> = r1;

        return;
    }

    public java.lang.Object[] getArguments()
    {
        org.springframework.remoting.support.RemoteInvocation r0;
        java.lang.Object[] $r1;

        r0 := @this: org.springframework.remoting.support.RemoteInvocation;

        $r1 = r0.<org.springframework.remoting.support.RemoteInvocation: java.lang.Object[] arguments>;

        return $r1;
    }

    public void addAttribute(java.lang.String, java.io.Serializable) throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r6;
        org.springframework.remoting.support.RemoteInvocation r0;
        java.util.HashMap $r11;
        java.io.Serializable r4;
        java.util.Map $r1, $r3, $r5;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String r2, $r10;
        boolean $z0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocation;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.io.Serializable;

        $r1 = r0.<org.springframework.remoting.support.RemoteInvocation: java.util.Map attributes>;

        if $r1 != null goto label1;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.remoting.support.RemoteInvocation: java.util.Map attributes> = $r11;

     label1:
        $r3 = r0.<org.springframework.remoting.support.RemoteInvocation: java.util.Map attributes>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("There is already an attribute with key \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' bound");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        $r5 = r0.<org.springframework.remoting.support.RemoteInvocation: java.util.Map attributes>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r4);

        return;
    }

    public java.io.Serializable getAttribute(java.lang.String)
    {
        java.util.Map $r1, $r3;
        org.springframework.remoting.support.RemoteInvocation r0;
        java.lang.Object $r4;
        java.lang.String r2;
        java.io.Serializable $r5;

        r0 := @this: org.springframework.remoting.support.RemoteInvocation;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.remoting.support.RemoteInvocation: java.util.Map attributes>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.springframework.remoting.support.RemoteInvocation: java.util.Map attributes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r5 = (java.io.Serializable) $r4;

        return $r5;
    }

    public void setAttributes(java.util.Map)
    {
        org.springframework.remoting.support.RemoteInvocation r0;
        java.util.Map r1;

        r0 := @this: org.springframework.remoting.support.RemoteInvocation;

        r1 := @parameter0: java.util.Map;

        r0.<org.springframework.remoting.support.RemoteInvocation: java.util.Map attributes> = r1;

        return;
    }

    public java.util.Map getAttributes()
    {
        org.springframework.remoting.support.RemoteInvocation r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.remoting.support.RemoteInvocation;

        $r1 = r0.<org.springframework.remoting.support.RemoteInvocation: java.util.Map attributes>;

        return $r1;
    }

    public java.lang.Object invoke(java.lang.Object) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] $r6;
        org.springframework.remoting.support.RemoteInvocation r2;
        java.lang.Class[] $r3;
        java.lang.Object r0, $r7;
        java.lang.Class $r1;
        java.lang.String $r4;
        java.lang.reflect.Method $r5;

        r2 := @this: org.springframework.remoting.support.RemoteInvocation;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = r2.<org.springframework.remoting.support.RemoteInvocation: java.lang.String methodName>;

        $r3 = r2.<org.springframework.remoting.support.RemoteInvocation: java.lang.Class[] parameterTypes>;

        $r5 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r4, $r3);

        $r6 = r2.<org.springframework.remoting.support.RemoteInvocation: java.lang.Object[] arguments>;

        $r7 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r6);

        return $r7;
    }

    public java.lang.String toString()
    {
        org.springframework.remoting.support.RemoteInvocation r1;
        java.lang.Class[] $r5;
        java.lang.StringBuilder $r0, $r3, $r4, $r7;
        java.lang.String $r2, $r6, $r8;

        r1 := @this: org.springframework.remoting.support.RemoteInvocation;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("RemoteInvocation: method name \'");

        $r2 = r1.<org.springframework.remoting.support.RemoteInvocation: java.lang.String methodName>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'; parameter types ");

        $r5 = r1.<org.springframework.remoting.support.RemoteInvocation: java.lang.Class[] parameterTypes>;

        $r6 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String classNamesToString(java.lang.Class[])>($r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static void <clinit>()
    {
        <org.springframework.remoting.support.RemoteInvocation: long serialVersionUID> = 6876024250231820554L;

        return;
    }
}
