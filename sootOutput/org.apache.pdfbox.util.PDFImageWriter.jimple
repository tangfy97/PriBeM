public class org.apache.pdfbox.util.PDFImageWriter extends org.apache.pdfbox.util.PDFStreamEngine
{
    private static final org.apache.commons.logging.Log LOG;

    public void <init>()
    {
        org.apache.pdfbox.util.PDFImageWriter r0;

        r0 := @this: org.apache.pdfbox.util.PDFImageWriter;

        specialinvoke r0.<org.apache.pdfbox.util.PDFStreamEngine: void <init>()>();

        return;
    }

    public void <init>(java.util.Properties) throws java.io.IOException
    {
        org.apache.pdfbox.util.PDFImageWriter r0;
        java.util.Properties r1;

        r0 := @this: org.apache.pdfbox.util.PDFImageWriter;

        r1 := @parameter0: java.util.Properties;

        specialinvoke r0.<org.apache.pdfbox.util.PDFStreamEngine: void <init>(java.util.Properties)>(r1);

        return;
    }

    public boolean writeImage(org.apache.pdfbox.pdmodel.PDDocument, java.lang.String, java.lang.String, int, int, java.lang.String) throws java.io.IOException
    {
        org.apache.pdfbox.util.PDFImageWriter r1;
        org.apache.pdfbox.pdmodel.PDDocument r2;
        int i0, i1, i2;
        java.awt.HeadlessException $r6;
        java.lang.String r3, r4, r5;
        java.awt.Toolkit $r0;
        boolean $z0;

        r1 := @this: org.apache.pdfbox.util.PDFImageWriter;

        r2 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r5 := @parameter5: java.lang.String;

     label1:
        $r0 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        i2 = virtualinvoke $r0.<java.awt.Toolkit: int getScreenResolution()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        i2 = 96;

     label4:
        $z0 = virtualinvoke r1.<org.apache.pdfbox.util.PDFImageWriter: boolean writeImage(org.apache.pdfbox.pdmodel.PDDocument,java.lang.String,java.lang.String,int,int,java.lang.String,int,int)>(r2, r3, r4, i0, i1, r5, 1, i2);

        return $z0;

        catch java.awt.HeadlessException from label1 to label2 with label3;
    }

    public boolean writeImage(org.apache.pdfbox.pdmodel.PDDocument, java.lang.String, java.lang.String, int, int, java.lang.String, int, int) throws java.io.IOException
    {
        int $i0, i1, i2, i3, i4, $i5, i6;
        java.lang.String r7, r11, $r13, $r18, r20;
        boolean $z0, z1;
        org.apache.pdfbox.pdmodel.PDDocumentCatalog $r1;
        org.apache.pdfbox.util.PDFImageWriter r19;
        java.awt.image.BufferedImage $r5;
        org.apache.pdfbox.pdmodel.PDDocument r0;
        java.util.List $r2;
        java.lang.Object $r3;
        org.apache.pdfbox.pdmodel.PDPage r4;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r12, $r14, $r16, $r17;
        org.apache.commons.logging.Log $r15;

        r19 := @this: org.apache.pdfbox.util.PDFImageWriter;

        r0 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r11 := @parameter1: java.lang.String;

        r20 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r7 := @parameter5: java.lang.String;

        i3 := @parameter6: int;

        i4 := @parameter7: int;

        z1 = 1;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog getDocumentCatalog()>();

        $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: java.util.List getAllPages()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i6 = i1 - 1;

     label1:
        if i6 >= i2 goto label2;

        if i6 >= $i0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i6);

        r4 = (org.apache.pdfbox.pdmodel.PDPage) $r3;

        $r5 = virtualinvoke r4.<org.apache.pdfbox.pdmodel.PDPage: java.awt.image.BufferedImage convertToImage(int,int)>(i3, i4);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $i5 = i6 + 1;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = <org.apache.pdfbox.util.PDFImageWriter: org.apache.commons.logging.Log LOG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Writing: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r18);

        $z0 = staticinvoke <org.apache.pdfbox.util.ImageIOUtil: boolean writeImage(java.awt.image.BufferedImage,java.lang.String,int)>($r5, $r13, i4);

        z1 = z1 & $z0;

        i6 = i6 + 1;

        goto label1;

     label2:
        return z1;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/util/PDFImageWriter;");

        <org.apache.pdfbox.util.PDFImageWriter: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }
}
