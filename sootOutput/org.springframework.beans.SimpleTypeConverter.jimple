public class org.springframework.beans.SimpleTypeConverter extends org.springframework.beans.PropertyEditorRegistrySupport implements org.springframework.beans.TypeConverter
{
    private final org.springframework.beans.TypeConverterDelegate typeConverterDelegate;

    public void <init>()
    {
        org.springframework.beans.TypeConverterDelegate $r1;
        org.springframework.beans.SimpleTypeConverter r0;

        r0 := @this: org.springframework.beans.SimpleTypeConverter;

        specialinvoke r0.<org.springframework.beans.PropertyEditorRegistrySupport: void <init>()>();

        $r1 = new org.springframework.beans.TypeConverterDelegate;

        specialinvoke $r1.<org.springframework.beans.TypeConverterDelegate: void <init>(org.springframework.beans.PropertyEditorRegistrySupport)>(r0);

        r0.<org.springframework.beans.SimpleTypeConverter: org.springframework.beans.TypeConverterDelegate typeConverterDelegate> = $r1;

        virtualinvoke r0.<org.springframework.beans.SimpleTypeConverter: void registerDefaultEditors()>();

        return;
    }

    public java.lang.Object convertIfNecessary(java.lang.Object, java.lang.Class) throws org.springframework.beans.TypeMismatchException
    {
        java.lang.Object r1, $r3;
        java.lang.Class r2;
        org.springframework.beans.SimpleTypeConverter r0;

        r0 := @this: org.springframework.beans.SimpleTypeConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r0.<org.springframework.beans.SimpleTypeConverter: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class,org.springframework.core.MethodParameter)>(r1, r2, null);

        return $r3;
    }

    public java.lang.Object convertIfNecessary(java.lang.Object, java.lang.Class, org.springframework.core.MethodParameter) throws org.springframework.beans.TypeMismatchException
    {
        org.springframework.beans.ConversionNotSupportedException $r9, $r13;
        java.lang.IllegalStateException $r8;
        org.springframework.core.convert.ConversionException $r10;
        java.lang.IllegalArgumentException $r6;
        org.springframework.beans.TypeMismatchException $r7, $r11;
        org.springframework.core.convert.ConverterNotFoundException $r12;
        org.springframework.core.MethodParameter r3;
        java.lang.Object r1, $r5;
        java.lang.Class r2;
        org.springframework.beans.TypeConverterDelegate $r4;
        org.springframework.beans.SimpleTypeConverter r0;

        r0 := @this: org.springframework.beans.SimpleTypeConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: org.springframework.core.MethodParameter;

     label1:
        $r4 = r0.<org.springframework.beans.SimpleTypeConverter: org.springframework.beans.TypeConverterDelegate typeConverterDelegate>;

        $r5 = virtualinvoke $r4.<org.springframework.beans.TypeConverterDelegate: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class,org.springframework.core.MethodParameter)>(r1, r2, r3);

     label2:
        return $r5;

     label3:
        $r12 := @caughtexception;

        $r13 = new org.springframework.beans.ConversionNotSupportedException;

        specialinvoke $r13.<org.springframework.beans.ConversionNotSupportedException: void <init>(java.lang.Object,java.lang.Class,java.lang.Throwable)>(r1, r2, $r12);

        throw $r13;

     label4:
        $r10 := @caughtexception;

        $r11 = new org.springframework.beans.TypeMismatchException;

        specialinvoke $r11.<org.springframework.beans.TypeMismatchException: void <init>(java.lang.Object,java.lang.Class,java.lang.Throwable)>(r1, r2, $r10);

        throw $r11;

     label5:
        $r8 := @caughtexception;

        $r9 = new org.springframework.beans.ConversionNotSupportedException;

        specialinvoke $r9.<org.springframework.beans.ConversionNotSupportedException: void <init>(java.lang.Object,java.lang.Class,java.lang.Throwable)>(r1, r2, $r8);

        throw $r9;

     label6:
        $r6 := @caughtexception;

        $r7 = new org.springframework.beans.TypeMismatchException;

        specialinvoke $r7.<org.springframework.beans.TypeMismatchException: void <init>(java.lang.Object,java.lang.Class,java.lang.Throwable)>(r1, r2, $r6);

        throw $r7;

        catch org.springframework.core.convert.ConverterNotFoundException from label1 to label2 with label3;
        catch org.springframework.core.convert.ConversionException from label1 to label2 with label4;
        catch java.lang.IllegalStateException from label1 to label2 with label5;
        catch java.lang.IllegalArgumentException from label1 to label2 with label6;
    }
}
