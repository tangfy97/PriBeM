public class bsh.Capabilities extends java.lang.Object
{
    private static boolean accessibility;
    private static java.util.Hashtable classes;
    static java.lang.Class class$java$lang$String;

    public void <init>()
    {
        bsh.Capabilities r0;

        r0 := @this: bsh.Capabilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean haveSwing()
    {
        boolean $z0;

        $z0 = staticinvoke <bsh.Capabilities: boolean classExists(java.lang.String)>("javax.swing.JButton");

        return $z0;
    }

    public static boolean canGenerateInterfaces()
    {
        boolean $z0;

        $z0 = staticinvoke <bsh.Capabilities: boolean classExists(java.lang.String)>("java.lang.reflect.Proxy");

        return $z0;
    }

    public static boolean haveAccessibility()
    {
        boolean $z0;

        $z0 = <bsh.Capabilities: boolean accessibility>;

        return $z0;
    }

    public static void setAccessibility(boolean) throws bsh.Capabilities$Unavailable
    {
        bsh.Capabilities$Unavailable $r0, $r3;
        java.lang.StringBuffer $r4, $r5, $r6;
        java.lang.Class $r1, $r8;
        java.lang.SecurityException $r2;
        java.lang.String $r7;
        boolean z0, $z1, $z2;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        <bsh.Capabilities: boolean accessibility> = 0;

        return;

     label1:
        $z1 = staticinvoke <bsh.Capabilities: boolean classExists(java.lang.String)>("java.lang.reflect.AccessibleObject");

        if $z1 == 0 goto label2;

        $z2 = staticinvoke <bsh.Capabilities: boolean classExists(java.lang.String)>("bsh.reflect.ReflectManagerImpl");

        if $z2 != 0 goto label3;

     label2:
        $r0 = new bsh.Capabilities$Unavailable;

        specialinvoke $r0.<bsh.Capabilities$Unavailable: void <init>(java.lang.String)>("Accessibility unavailable");

        throw $r0;

     label3:
        $r1 = <bsh.Capabilities: java.lang.Class class$java$lang$String>;

        if $r1 != null goto label4;

        $r8 = staticinvoke <bsh.Capabilities: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <bsh.Capabilities: java.lang.Class class$java$lang$String> = $r8;

        goto label5;

     label4:
        $r8 = <bsh.Capabilities: java.lang.Class class$java$lang$String>;

     label5:
        virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

     label6:
        goto label8;

     label7:
        $r2 := @caughtexception;

        $r3 = new bsh.Capabilities$Unavailable;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Accessibility unavailable: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<bsh.Capabilities$Unavailable: void <init>(java.lang.String)>($r7);

        throw $r3;

     label8:
        <bsh.Capabilities: boolean accessibility> = 1;

        return;

        catch java.lang.SecurityException from label3 to label6 with label7;
    }

    public static boolean classExists(java.lang.String)
    {
        java.lang.Object $r2, r5;
        java.lang.ClassNotFoundException $r4;
        java.lang.String r0;
        java.util.Hashtable $r1, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <bsh.Capabilities: java.util.Hashtable classes>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        r5 = $r2;

        if $r2 != null goto label5;

     label1:
        r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        goto label4;

     label4:
        if r5 == null goto label5;

        $r3 = <bsh.Capabilities: java.util.Hashtable classes>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, "unused");

     label5:
        if r5 == null goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        return $z0;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.util.Hashtable $r0;

        <bsh.Capabilities: boolean accessibility> = 0;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <bsh.Capabilities: java.util.Hashtable classes> = $r0;

        return;
    }
}
