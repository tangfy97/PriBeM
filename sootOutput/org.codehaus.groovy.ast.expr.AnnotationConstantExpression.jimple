public class org.codehaus.groovy.ast.expr.AnnotationConstantExpression extends org.codehaus.groovy.ast.expr.ConstantExpression
{

    public void <init>(org.codehaus.groovy.ast.AnnotationNode)
    {
        org.codehaus.groovy.ast.AnnotationNode r1;
        org.codehaus.groovy.ast.expr.AnnotationConstantExpression r0;
        org.codehaus.groovy.ast.ClassNode $r2;

        r0 := @this: org.codehaus.groovy.ast.expr.AnnotationConstantExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.AnnotationNode;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.AnnotationNode: org.codehaus.groovy.ast.ClassNode getClassNode()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.expr.AnnotationConstantExpression: void setType(org.codehaus.groovy.ast.ClassNode)>($r2);

        return;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.AnnotationNode r2;
        java.util.Iterator $r5;
        java.util.Collection $r4;
        org.codehaus.groovy.ast.expr.AnnotationConstantExpression r0;
        org.codehaus.groovy.ast.GroovyCodeVisitor r7;
        java.util.Map $r3;
        java.lang.Object $r1, $r6;
        org.codehaus.groovy.ast.expr.Expression $r8;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.expr.AnnotationConstantExpression;

        r7 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.AnnotationConstantExpression: java.lang.Object getValue()>();

        r2 = (org.codehaus.groovy.ast.AnnotationNode) $r1;

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.AnnotationNode: java.util.Map getMembers()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.codehaus.groovy.ast.expr.Expression) $r6;

        virtualinvoke $r8.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r7);

        goto label1;

     label2:
        return;
    }
}
