public class org.objectweb.asm.tree.analysis.SimpleVerifier extends org.objectweb.asm.tree.analysis.BasicVerifier
{
    private final org.objectweb.asm.Type currentClass;
    private final org.objectweb.asm.Type currentSuperClass;
    private final java.util.List currentClassInterfaces;
    private final boolean isInterface;
    private java.lang.ClassLoader loader;

    public void <init>()
    {
        org.objectweb.asm.tree.analysis.SimpleVerifier r0;

        r0 := @this: org.objectweb.asm.tree.analysis.SimpleVerifier;

        specialinvoke r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: void <init>(org.objectweb.asm.Type,org.objectweb.asm.Type,boolean)>(null, null, 0);

        return;
    }

    public void <init>(org.objectweb.asm.Type, org.objectweb.asm.Type, boolean)
    {
        org.objectweb.asm.tree.analysis.SimpleVerifier r0;
        org.objectweb.asm.Type r1, r2;
        boolean z0;

        r0 := @this: org.objectweb.asm.tree.analysis.SimpleVerifier;

        r1 := @parameter0: org.objectweb.asm.Type;

        r2 := @parameter1: org.objectweb.asm.Type;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: void <init>(org.objectweb.asm.Type,org.objectweb.asm.Type,java.util.List,boolean)>(r1, r2, null, z0);

        return;
    }

    public void <init>(org.objectweb.asm.Type, org.objectweb.asm.Type, java.util.List, boolean)
    {
        java.util.List r3;
        org.objectweb.asm.tree.analysis.SimpleVerifier r0;
        org.objectweb.asm.Type r1, r2;
        boolean z0;

        r0 := @this: org.objectweb.asm.tree.analysis.SimpleVerifier;

        r1 := @parameter0: org.objectweb.asm.Type;

        r2 := @parameter1: org.objectweb.asm.Type;

        r3 := @parameter2: java.util.List;

        z0 := @parameter3: boolean;

        specialinvoke r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: void <init>(int,org.objectweb.asm.Type,org.objectweb.asm.Type,java.util.List,boolean)>(262144, r1, r2, r3, z0);

        return;
    }

    protected void <init>(int, org.objectweb.asm.Type, org.objectweb.asm.Type, java.util.List, boolean)
    {
        org.objectweb.asm.Type r3, r4;
        java.util.List r5;
        org.objectweb.asm.tree.analysis.SimpleVerifier r0;
        int i0;
        java.lang.Class $r1;
        java.lang.ClassLoader $r2;
        boolean z0;

        r0 := @this: org.objectweb.asm.tree.analysis.SimpleVerifier;

        i0 := @parameter0: int;

        r3 := @parameter1: org.objectweb.asm.Type;

        r4 := @parameter2: org.objectweb.asm.Type;

        r5 := @parameter3: java.util.List;

        z0 := @parameter4: boolean;

        specialinvoke r0.<org.objectweb.asm.tree.analysis.BasicVerifier: void <init>(int)>(i0);

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: java.lang.ClassLoader loader> = $r2;

        r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.Type currentClass> = r3;

        r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.Type currentSuperClass> = r4;

        r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: java.util.List currentClassInterfaces> = r5;

        r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: boolean isInterface> = z0;

        return;
    }

    public void setClassLoader(java.lang.ClassLoader)
    {
        org.objectweb.asm.tree.analysis.SimpleVerifier r0;
        java.lang.ClassLoader r1;

        r0 := @this: org.objectweb.asm.tree.analysis.SimpleVerifier;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: java.lang.ClassLoader loader> = r1;

        return;
    }

    public org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)
    {
        org.objectweb.asm.Type r0, $r5, $r7, $r9, $r13;
        org.objectweb.asm.tree.analysis.BasicValue $r2, $r3, $r4, $r6, $r8, $r14, $r15, r16;
        int $i0, $i1, $i2, i3;
        java.lang.String r17;
        boolean z0, $z1, $z3, $z4;
        org.objectweb.asm.tree.analysis.SimpleVerifier r1;
        java.lang.StringBuilder $r10, $r11, $r12;

        r1 := @this: org.objectweb.asm.tree.analysis.SimpleVerifier;

        r0 := @parameter0: org.objectweb.asm.Type;

        if r0 != null goto label1;

        $r15 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue UNINITIALIZED_VALUE>;

        return $r15;

     label1:
        $i0 = virtualinvoke r0.<org.objectweb.asm.Type: int getSort()>();

        if $i0 != 9 goto label2;

        $z4 = 1;

        $z3 = 1;

        goto label3;

     label2:
        $z4 = 0;

        $z3 = 0;

     label3:
        z0 = $z3;

        if $z4 == 0 goto label5;

        $r13 = virtualinvoke r0.<org.objectweb.asm.Type: org.objectweb.asm.Type getElementType()>();

        $i2 = virtualinvoke $r13.<org.objectweb.asm.Type: int getSort()>();

        tableswitch($i2)
        {
            case 1: goto label4;
            case 2: goto label4;
            case 3: goto label4;
            case 4: goto label4;
            default: goto label5;
        };

     label4:
        $r14 = new org.objectweb.asm.tree.analysis.BasicValue;

        specialinvoke $r14.<org.objectweb.asm.tree.analysis.BasicValue: void <init>(org.objectweb.asm.Type)>(r0);

        return $r14;

     label5:
        $r2 = specialinvoke r1.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>(r0);

        r16 = $r2;

        $r3 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue REFERENCE_VALUE>;

        $z1 = virtualinvoke $r3.<org.objectweb.asm.tree.analysis.BasicValue: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label9;

        if z0 == 0 goto label8;

        $r5 = virtualinvoke r0.<org.objectweb.asm.Type: org.objectweb.asm.Type getElementType()>();

        $r6 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r5);

        $r7 = virtualinvoke $r6.<org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.Type getType()>();

        r17 = virtualinvoke $r7.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        i3 = 0;

     label6:
        $i1 = virtualinvoke r0.<org.objectweb.asm.Type: int getDimensions()>();

        if i3 >= $i1 goto label7;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        i3 = i3 + 1;

        goto label6;

     label7:
        $r8 = new org.objectweb.asm.tree.analysis.BasicValue;

        $r9 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>(r17);

        specialinvoke $r8.<org.objectweb.asm.tree.analysis.BasicValue: void <init>(org.objectweb.asm.Type)>($r9);

        r16 = $r8;

        goto label9;

     label8:
        $r4 = new org.objectweb.asm.tree.analysis.BasicValue;

        specialinvoke $r4.<org.objectweb.asm.tree.analysis.BasicValue: void <init>(org.objectweb.asm.Type)>(r0);

        r16 = $r4;

     label9:
        return r16;
    }

    protected boolean isArrayValue(org.objectweb.asm.tree.analysis.BasicValue)
    {
        org.objectweb.asm.Type $r1;
        org.objectweb.asm.tree.analysis.SimpleVerifier r4;
        org.objectweb.asm.tree.analysis.BasicValue r0;
        int $i0;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        r4 := @this: org.objectweb.asm.tree.analysis.SimpleVerifier;

        r0 := @parameter0: org.objectweb.asm.tree.analysis.BasicValue;

        $r1 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.Type getType()>();

        if $r1 == null goto label2;

        $r2 = "Lnull;";

        $r3 = virtualinvoke $r1.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke $r1.<org.objectweb.asm.Type: int getSort()>();

        if $i0 != 9 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    protected org.objectweb.asm.tree.analysis.BasicValue getElementValue(org.objectweb.asm.tree.analysis.BasicValue) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        java.lang.Error $r2;
        org.objectweb.asm.Type $r1, $r8;
        org.objectweb.asm.tree.analysis.SimpleVerifier r5;
        org.objectweb.asm.tree.analysis.BasicValue r0, $r9;
        int $i0;
        java.lang.String $r3, $r4, $r6, $r7;
        boolean $z0;

        r5 := @this: org.objectweb.asm.tree.analysis.SimpleVerifier;

        r0 := @parameter0: org.objectweb.asm.tree.analysis.BasicValue;

        $r1 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.Type getType()>();

        if $r1 == null goto label2;

        $i0 = virtualinvoke $r1.<org.objectweb.asm.Type: int getSort()>();

        if $i0 != 9 goto label1;

        $r6 = virtualinvoke $r1.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>(1);

        $r8 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>($r7);

        $r9 = virtualinvoke r5.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r8);

        return $r9;

     label1:
        $r3 = "Lnull;";

        $r4 = virtualinvoke $r1.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        return r0;

     label2:
        $r2 = new java.lang.Error;

        specialinvoke $r2.<java.lang.Error: void <init>(java.lang.String)>("Internal error");

        throw $r2;
    }

    protected boolean isSubTypeOf(org.objectweb.asm.tree.analysis.BasicValue, org.objectweb.asm.tree.analysis.BasicValue)
    {
        java.lang.Error $r7;
        org.objectweb.asm.Type $r1, $r3;
        org.objectweb.asm.tree.analysis.SimpleVerifier r6;
        org.objectweb.asm.tree.analysis.BasicValue r0, r2;
        int $i0, $i1, $i2;
        java.lang.String $r4, $r5;
        boolean $z0, $z1, $z2;

        r6 := @this: org.objectweb.asm.tree.analysis.SimpleVerifier;

        r2 := @parameter0: org.objectweb.asm.tree.analysis.BasicValue;

        r0 := @parameter1: org.objectweb.asm.tree.analysis.BasicValue;

        $r1 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.Type getType()>();

        $r3 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.Type getType()>();

        $i0 = virtualinvoke $r1.<org.objectweb.asm.Type: int getSort()>();

        tableswitch($i0)
        {
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label1;
            case 9: goto label2;
            case 10: goto label2;
            default: goto label6;
        };

     label1:
        $z2 = virtualinvoke $r3.<org.objectweb.asm.Type: boolean equals(java.lang.Object)>($r1);

        return $z2;

     label2:
        $r4 = "Lnull;";

        $r5 = virtualinvoke $r3.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $i1 = virtualinvoke $r3.<org.objectweb.asm.Type: int getSort()>();

        if $i1 == 10 goto label4;

        $i2 = virtualinvoke $r3.<org.objectweb.asm.Type: int getSort()>();

        if $i2 != 9 goto label5;

     label4:
        $z1 = virtualinvoke r6.<org.objectweb.asm.tree.analysis.SimpleVerifier: boolean isAssignableFrom(org.objectweb.asm.Type,org.objectweb.asm.Type)>($r1, $r3);

        return $z1;

     label5:
        return 0;

     label6:
        $r7 = new java.lang.Error;

        specialinvoke $r7.<java.lang.Error: void <init>(java.lang.String)>("Internal error");

        throw $r7;
    }

    public org.objectweb.asm.tree.analysis.BasicValue merge(org.objectweb.asm.tree.analysis.BasicValue, org.objectweb.asm.tree.analysis.BasicValue)
    {
        org.objectweb.asm.Type $r2, $r3, $r10, r12;
        org.objectweb.asm.tree.analysis.BasicValue r0, r1, $r9, $r11, $r13;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.objectweb.asm.tree.analysis.SimpleVerifier r8;

        r8 := @this: org.objectweb.asm.tree.analysis.SimpleVerifier;

        r0 := @parameter0: org.objectweb.asm.tree.analysis.BasicValue;

        r1 := @parameter1: org.objectweb.asm.tree.analysis.BasicValue;

        $z0 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.BasicValue: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label10;

        $r2 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.Type getType()>();

        r12 = $r2;

        $r3 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.Type getType()>();

        if $r2 == null goto label09;

        $i0 = virtualinvoke $r2.<org.objectweb.asm.Type: int getSort()>();

        if $i0 == 10 goto label01;

        $i3 = virtualinvoke $r2.<org.objectweb.asm.Type: int getSort()>();

        if $i3 != 9 goto label09;

     label01:
        if $r3 == null goto label09;

        $i1 = virtualinvoke $r3.<org.objectweb.asm.Type: int getSort()>();

        if $i1 == 10 goto label02;

        $i2 = virtualinvoke $r3.<org.objectweb.asm.Type: int getSort()>();

        if $i2 != 9 goto label09;

     label02:
        $r4 = "Lnull;";

        $r5 = virtualinvoke $r2.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label03;

        return r1;

     label03:
        $r6 = "Lnull;";

        $r7 = virtualinvoke $r3.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label04;

        return r0;

     label04:
        $z3 = virtualinvoke r8.<org.objectweb.asm.tree.analysis.SimpleVerifier: boolean isAssignableFrom(org.objectweb.asm.Type,org.objectweb.asm.Type)>($r2, $r3);

        if $z3 == 0 goto label05;

        return r0;

     label05:
        $z4 = virtualinvoke r8.<org.objectweb.asm.tree.analysis.SimpleVerifier: boolean isAssignableFrom(org.objectweb.asm.Type,org.objectweb.asm.Type)>($r3, $r2);

        if $z4 == 0 goto label06;

        return r1;

     label06:
        if r12 == null goto label07;

        $z5 = virtualinvoke r8.<org.objectweb.asm.tree.analysis.SimpleVerifier: boolean isInterface(org.objectweb.asm.Type)>(r12);

        if $z5 == 0 goto label08;

     label07:
        $r9 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue REFERENCE_VALUE>;

        return $r9;

     label08:
        $r10 = virtualinvoke r8.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.Type getSuperClass(org.objectweb.asm.Type)>(r12);

        r12 = $r10;

        $z6 = virtualinvoke r8.<org.objectweb.asm.tree.analysis.SimpleVerifier: boolean isAssignableFrom(org.objectweb.asm.Type,org.objectweb.asm.Type)>($r10, $r3);

        if $z6 == 0 goto label06;

        $r11 = virtualinvoke r8.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r10);

        return $r11;

     label09:
        $r13 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue UNINITIALIZED_VALUE>;

        return $r13;

     label10:
        return r0;
    }

    protected boolean isInterface(org.objectweb.asm.Type)
    {
        org.objectweb.asm.Type $r1, r2, $r4;
        org.objectweb.asm.tree.analysis.SimpleVerifier r0;
        java.lang.Class $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.objectweb.asm.tree.analysis.SimpleVerifier;

        r2 := @parameter0: org.objectweb.asm.Type;

        $r1 = r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.Type currentClass>;

        if $r1 == null goto label1;

        $r4 = r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.Type currentClass>;

        $z1 = virtualinvoke r2.<org.objectweb.asm.Type: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        $z2 = r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: boolean isInterface>;

        return $z2;

     label1:
        $r3 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: java.lang.Class getClass(org.objectweb.asm.Type)>(r2);

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isInterface()>();

        return $z0;
    }

    protected org.objectweb.asm.Type getSuperClass(org.objectweb.asm.Type)
    {
        org.objectweb.asm.Type $r1, r2, $r5, $r6, $r7;
        org.objectweb.asm.tree.analysis.SimpleVerifier r0;
        java.lang.Class $r3, $r4;
        boolean $z0;

        r0 := @this: org.objectweb.asm.tree.analysis.SimpleVerifier;

        r2 := @parameter0: org.objectweb.asm.Type;

        $r1 = r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.Type currentClass>;

        if $r1 == null goto label1;

        $r5 = r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.Type currentClass>;

        $z0 = virtualinvoke r2.<org.objectweb.asm.Type: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        $r6 = r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.Type currentSuperClass>;

        return $r6;

     label1:
        $r3 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: java.lang.Class getClass(org.objectweb.asm.Type)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r4 != null goto label2;

        $r7 = null;

        goto label3;

     label2:
        $r7 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>($r4);

     label3:
        return $r7;
    }

    protected boolean isAssignableFrom(org.objectweb.asm.Type, org.objectweb.asm.Type)
    {
        org.objectweb.asm.Type r0, r1, $r3, $r4, $r7, $r8, r13, $r14, $r15, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.util.List $r9, $r10, $r11;
        int $i0, $i1, $i2, i3;
        org.objectweb.asm.tree.analysis.SimpleVerifier r2;
        java.lang.Class $r5, $r6, r17;
        java.lang.Object $r12;

        r2 := @this: org.objectweb.asm.tree.analysis.SimpleVerifier;

        r0 := @parameter0: org.objectweb.asm.Type;

        r1 := @parameter1: org.objectweb.asm.Type;

        $z0 = virtualinvoke r0.<org.objectweb.asm.Type: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $r3 = r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.Type currentClass>;

        if $r3 == null goto label07;

        $r14 = r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.Type currentClass>;

        $z6 = virtualinvoke r0.<org.objectweb.asm.Type: boolean equals(java.lang.Object)>($r14);

        if $z6 == 0 goto label07;

        $r15 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.Type getSuperClass(org.objectweb.asm.Type)>(r1);

        if $r15 != null goto label02;

        return 0;

     label02:
        $z7 = r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: boolean isInterface>;

        if $z7 == 0 goto label06;

        $i1 = virtualinvoke r1.<org.objectweb.asm.Type: int getSort()>();

        if $i1 == 10 goto label03;

        $i2 = virtualinvoke r1.<org.objectweb.asm.Type: int getSort()>();

        if $i2 != 9 goto label04;

     label03:
        $z9 = 1;

        goto label05;

     label04:
        $z9 = 0;

     label05:
        return $z9;

     label06:
        $r16 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.Type getSuperClass(org.objectweb.asm.Type)>(r1);

        $z8 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: boolean isAssignableFrom(org.objectweb.asm.Type,org.objectweb.asm.Type)>(r0, $r16);

        return $z8;

     label07:
        $r4 = r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.Type currentClass>;

        if $r4 == null goto label12;

        $r7 = r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.Type currentClass>;

        $z3 = virtualinvoke r1.<org.objectweb.asm.Type: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label12;

        $r8 = r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.Type currentSuperClass>;

        $z4 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: boolean isAssignableFrom(org.objectweb.asm.Type,org.objectweb.asm.Type)>(r0, $r8);

        if $z4 == 0 goto label08;

        return 1;

     label08:
        $r9 = r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: java.util.List currentClassInterfaces>;

        if $r9 == null goto label11;

        i3 = 0;

     label09:
        $r10 = r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: java.util.List currentClassInterfaces>;

        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        if i3 >= $i0 goto label11;

        $r11 = r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: java.util.List currentClassInterfaces>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i3);

        r13 = (org.objectweb.asm.Type) $r12;

        $z5 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: boolean isAssignableFrom(org.objectweb.asm.Type,org.objectweb.asm.Type)>(r0, r13);

        if $z5 == 0 goto label10;

        return 1;

     label10:
        i3 = i3 + 1;

        goto label09;

     label11:
        return 0;

     label12:
        $r5 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: java.lang.Class getClass(org.objectweb.asm.Type)>(r0);

        r17 = $r5;

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isInterface()>();

        if $z1 == 0 goto label13;

        r17 = class "Ljava/lang/Object;";

     label13:
        $r6 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: java.lang.Class getClass(org.objectweb.asm.Type)>(r1);

        $z2 = virtualinvoke r17.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        return $z2;
    }

    protected java.lang.Class getClass(org.objectweb.asm.Type)
    {
        java.lang.RuntimeException $r10;
        org.objectweb.asm.Type r0;
        org.objectweb.asm.tree.analysis.SimpleVerifier r2;
        int $i0;
        java.lang.Class $r4, $r8;
        java.lang.ClassNotFoundException $r9;
        java.lang.String $r1, $r5, $r6, $r11;
        java.lang.ClassLoader $r3, $r7;

        r2 := @this: org.objectweb.asm.tree.analysis.SimpleVerifier;

        r0 := @parameter0: org.objectweb.asm.Type;

     label1:
        $i0 = virtualinvoke r0.<org.objectweb.asm.Type: int getSort()>();

        if $i0 != 9 goto label3;

        $r5 = virtualinvoke r0.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r7 = r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: java.lang.ClassLoader loader>;

        $r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r6, 0, $r7);

     label2:
        return $r8;

     label3:
        $r1 = virtualinvoke r0.<org.objectweb.asm.Type: java.lang.String getClassName()>();

        $r3 = r2.<org.objectweb.asm.tree.analysis.SimpleVerifier: java.lang.ClassLoader loader>;

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r1, 0, $r3);

     label4:
        return $r4;

     label5:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        $r11 = virtualinvoke $r9.<java.lang.ClassNotFoundException: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r10;

        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }

    public volatile org.objectweb.asm.tree.analysis.Value merge(org.objectweb.asm.tree.analysis.Value, org.objectweb.asm.tree.analysis.Value)
    {
        org.objectweb.asm.tree.analysis.SimpleVerifier r0;
        org.objectweb.asm.tree.analysis.Value r1, r2;
        org.objectweb.asm.tree.analysis.BasicValue $r3, $r4, $r5;

        r0 := @this: org.objectweb.asm.tree.analysis.SimpleVerifier;

        r1 := @parameter0: org.objectweb.asm.tree.analysis.Value;

        r2 := @parameter1: org.objectweb.asm.tree.analysis.Value;

        $r4 = (org.objectweb.asm.tree.analysis.BasicValue) r1;

        $r3 = (org.objectweb.asm.tree.analysis.BasicValue) r2;

        $r5 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.tree.analysis.BasicValue merge(org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue)>($r4, $r3);

        return $r5;
    }

    public volatile org.objectweb.asm.tree.analysis.Value newValue(org.objectweb.asm.Type)
    {
        org.objectweb.asm.tree.analysis.SimpleVerifier r0;
        org.objectweb.asm.Type r1;
        org.objectweb.asm.tree.analysis.BasicValue $r2;

        r0 := @this: org.objectweb.asm.tree.analysis.SimpleVerifier;

        r1 := @parameter0: org.objectweb.asm.Type;

        $r2 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.SimpleVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>(r1);

        return $r2;
    }
}
